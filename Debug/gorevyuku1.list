
gorevyuku1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf60  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800d100  0800d100  0000e100  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d634  0800d634  0000f1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d634  0800d634  0000e634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d63c  0800d63c  0000f1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d63c  0800d63c  0000e63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d640  0800d640  0000e640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800d644  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000066c  200001d4  0800d818  0000f1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000840  0800d818  0000f840  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001797a  00000000  00000000  0000f204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032fb  00000000  00000000  00026b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c0  00000000  00000000  00029e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001105  00000000  00000000  0002b440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000049c7  00000000  00000000  0002c545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001af70  00000000  00000000  00030f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6942  00000000  00000000  0004be7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f27be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073a0  00000000  00000000  000f2804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000f9ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d0e8 	.word	0x0800d0e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800d0e8 	.word	0x0800d0e8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <GPS_Init>:

extern float GPS_Altitude;				/*! Vertical distance info of satellite beetween */
extern float GPS_Longitude;				/*! Location info of satellite on the earth 	 */
extern float GPS_Latitude;				/*! Location info of satellite on the earth 	 */
void GPS_Init()
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4903      	ldr	r1, [pc, #12]	@ (8001008 <GPS_Init+0x14>)
 8000ffc:	4803      	ldr	r0, [pc, #12]	@ (800100c <GPS_Init+0x18>)
 8000ffe:	f005 f9ad 	bl	800635c <HAL_UART_Receive_IT>
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200001f0 	.word	0x200001f0
 800100c:	20000630 	.word	0x20000630

08001010 <GPS_UART_CallBack>:


void GPS_UART_CallBack(){
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8001014:	4b16      	ldr	r3, [pc, #88]	@ (8001070 <GPS_UART_CallBack+0x60>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b0a      	cmp	r3, #10
 800101a:	d010      	beq.n	800103e <GPS_UART_CallBack+0x2e>
 800101c:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <GPS_UART_CallBack+0x64>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	b25b      	sxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	db0b      	blt.n	800103e <GPS_UART_CallBack+0x2e>
		rx_buffer[rx_index++] = rx_data;
 8001026:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <GPS_UART_CallBack+0x64>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	1c5a      	adds	r2, r3, #1
 800102c:	b2d1      	uxtb	r1, r2
 800102e:	4a11      	ldr	r2, [pc, #68]	@ (8001074 <GPS_UART_CallBack+0x64>)
 8001030:	7011      	strb	r1, [r2, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <GPS_UART_CallBack+0x60>)
 8001036:	7819      	ldrb	r1, [r3, #0]
 8001038:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <GPS_UART_CallBack+0x68>)
 800103a:	5499      	strb	r1, [r3, r2]
 800103c:	e010      	b.n	8001060 <GPS_UART_CallBack+0x50>
	} else {

		if(GPS_validate((char*) rx_buffer))
 800103e:	480e      	ldr	r0, [pc, #56]	@ (8001078 <GPS_UART_CallBack+0x68>)
 8001040:	f000 f81e 	bl	8001080 <GPS_validate>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d002      	beq.n	8001050 <GPS_UART_CallBack+0x40>
			GPS_parse((char*) rx_buffer);
 800104a:	480b      	ldr	r0, [pc, #44]	@ (8001078 <GPS_UART_CallBack+0x68>)
 800104c:	f000 f87a 	bl	8001144 <GPS_parse>
		rx_index = 0;
 8001050:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <GPS_UART_CallBack+0x64>)
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 8001056:	2280      	movs	r2, #128	@ 0x80
 8001058:	2100      	movs	r1, #0
 800105a:	4807      	ldr	r0, [pc, #28]	@ (8001078 <GPS_UART_CallBack+0x68>)
 800105c:	f008 f900 	bl	8009260 <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001060:	2201      	movs	r2, #1
 8001062:	4903      	ldr	r1, [pc, #12]	@ (8001070 <GPS_UART_CallBack+0x60>)
 8001064:	4805      	ldr	r0, [pc, #20]	@ (800107c <GPS_UART_CallBack+0x6c>)
 8001066:	f005 f979 	bl	800635c <HAL_UART_Receive_IT>
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200001f0 	.word	0x200001f0
 8001074:	20000274 	.word	0x20000274
 8001078:	200001f4 	.word	0x200001f4
 800107c:	20000630 	.word	0x20000630

08001080 <GPS_validate>:


int GPS_validate(char *nmeastr){
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 800108c:	2300      	movs	r3, #0
 800108e:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b24      	cmp	r3, #36	@ 0x24
 800109a:	d103      	bne.n	80010a4 <GPS_validate+0x24>
        i++;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	3301      	adds	r3, #1
 80010a0:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80010a2:	e00c      	b.n	80010be <GPS_validate+0x3e>
        return 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	e047      	b.n	8001138 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	461a      	mov	r2, r3
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4053      	eors	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        i++;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	3301      	adds	r3, #1
 80010bc:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	4413      	add	r3, r2
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d008      	beq.n	80010dc <GPS_validate+0x5c>
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	4413      	add	r3, r2
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80010d4:	d002      	beq.n	80010dc <GPS_validate+0x5c>
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	2b4a      	cmp	r3, #74	@ 0x4a
 80010da:	dde5      	ble.n	80010a8 <GPS_validate+0x28>
    }

    if(i >= 75){
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	2b4a      	cmp	r3, #74	@ 0x4a
 80010e0:	dd01      	ble.n	80010e6 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80010e2:	2300      	movs	r3, #0
 80010e4:	e028      	b.n	8001138 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	4413      	add	r3, r2
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80010f0:	d119      	bne.n	8001126 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	3301      	adds	r3, #1
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	3302      	adds	r3, #2
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	490a      	ldr	r1, [pc, #40]	@ (8001140 <GPS_validate+0xc0>)
 8001116:	4618      	mov	r0, r3
 8001118:	f007 ff7e 	bl	8009018 <siprintf>
    return((checkcalcstr[0] == check[0])
 800111c:	7a3a      	ldrb	r2, [r7, #8]
 800111e:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001120:	429a      	cmp	r2, r3
 8001122:	d108      	bne.n	8001136 <GPS_validate+0xb6>
 8001124:	e001      	b.n	800112a <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8001126:	2300      	movs	r3, #0
 8001128:	e006      	b.n	8001138 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800112a:	7a7a      	ldrb	r2, [r7, #9]
 800112c:	7b7b      	ldrb	r3, [r7, #13]
 800112e:	429a      	cmp	r2, r3
 8001130:	d101      	bne.n	8001136 <GPS_validate+0xb6>
 8001132:	2301      	movs	r3, #1
 8001134:	e000      	b.n	8001138 <GPS_validate+0xb8>
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	0800d100 	.word	0x0800d100

08001144 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	@ 0x28
 8001148:	af08      	add	r7, sp, #32
 800114a:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 800114c:	2206      	movs	r2, #6
 800114e:	4950      	ldr	r1, [pc, #320]	@ (8001290 <GPS_parse+0x14c>)
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f008 f88d 	bl	8009270 <strncmp>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d143      	bne.n	80011e4 <GPS_parse+0xa0>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 800115c:	4b4d      	ldr	r3, [pc, #308]	@ (8001294 <GPS_parse+0x150>)
 800115e:	9307      	str	r3, [sp, #28]
 8001160:	4b4d      	ldr	r3, [pc, #308]	@ (8001298 <GPS_parse+0x154>)
 8001162:	9306      	str	r3, [sp, #24]
 8001164:	4b4d      	ldr	r3, [pc, #308]	@ (800129c <GPS_parse+0x158>)
 8001166:	9305      	str	r3, [sp, #20]
 8001168:	4b4d      	ldr	r3, [pc, #308]	@ (80012a0 <GPS_parse+0x15c>)
 800116a:	9304      	str	r3, [sp, #16]
 800116c:	4b4d      	ldr	r3, [pc, #308]	@ (80012a4 <GPS_parse+0x160>)
 800116e:	9303      	str	r3, [sp, #12]
 8001170:	4b4d      	ldr	r3, [pc, #308]	@ (80012a8 <GPS_parse+0x164>)
 8001172:	9302      	str	r3, [sp, #8]
 8001174:	4b4d      	ldr	r3, [pc, #308]	@ (80012ac <GPS_parse+0x168>)
 8001176:	9301      	str	r3, [sp, #4]
 8001178:	4b4d      	ldr	r3, [pc, #308]	@ (80012b0 <GPS_parse+0x16c>)
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	4b4d      	ldr	r3, [pc, #308]	@ (80012b4 <GPS_parse+0x170>)
 800117e:	4a4e      	ldr	r2, [pc, #312]	@ (80012b8 <GPS_parse+0x174>)
 8001180:	494e      	ldr	r1, [pc, #312]	@ (80012bc <GPS_parse+0x178>)
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f007 ff68 	bl	8009058 <siscanf>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	dd7c      	ble.n	8001288 <GPS_parse+0x144>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800118e:	4b4c      	ldr	r3, [pc, #304]	@ (80012c0 <GPS_parse+0x17c>)
 8001190:	edd3 7a04 	vldr	s15, [r3, #16]
 8001194:	4b4a      	ldr	r3, [pc, #296]	@ (80012c0 <GPS_parse+0x17c>)
 8001196:	7e1b      	ldrb	r3, [r3, #24]
 8001198:	4618      	mov	r0, r3
 800119a:	eeb0 0a67 	vmov.f32	s0, s15
 800119e:	f000 f8b9 	bl	8001314 <GPS_nmea_to_dec>
 80011a2:	eef0 7a40 	vmov.f32	s15, s0
 80011a6:	4b46      	ldr	r3, [pc, #280]	@ (80012c0 <GPS_parse+0x17c>)
 80011a8:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80011ac:	4b44      	ldr	r3, [pc, #272]	@ (80012c0 <GPS_parse+0x17c>)
 80011ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80011b2:	4b43      	ldr	r3, [pc, #268]	@ (80012c0 <GPS_parse+0x17c>)
 80011b4:	7e5b      	ldrb	r3, [r3, #25]
 80011b6:	4618      	mov	r0, r3
 80011b8:	eeb0 0a67 	vmov.f32	s0, s15
 80011bc:	f000 f8aa 	bl	8001314 <GPS_nmea_to_dec>
 80011c0:	eef0 7a40 	vmov.f32	s15, s0
 80011c4:	4b3e      	ldr	r3, [pc, #248]	@ (80012c0 <GPS_parse+0x17c>)
 80011c6:	edc3 7a00 	vstr	s15, [r3]

    		GPS_Latitude = GPS.dec_latitude;
 80011ca:	4b3d      	ldr	r3, [pc, #244]	@ (80012c0 <GPS_parse+0x17c>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	4a3d      	ldr	r2, [pc, #244]	@ (80012c4 <GPS_parse+0x180>)
 80011d0:	6013      	str	r3, [r2, #0]
    		GPS_Longitude = GPS.dec_longitude;
 80011d2:	4b3b      	ldr	r3, [pc, #236]	@ (80012c0 <GPS_parse+0x17c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a3c      	ldr	r2, [pc, #240]	@ (80012c8 <GPS_parse+0x184>)
 80011d8:	6013      	str	r3, [r2, #0]
			GPS_Altitude = GPS.msl_altitude;
 80011da:	4b39      	ldr	r3, [pc, #228]	@ (80012c0 <GPS_parse+0x17c>)
 80011dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011de:	4a3b      	ldr	r2, [pc, #236]	@ (80012cc <GPS_parse+0x188>)
 80011e0:	6013      	str	r3, [r2, #0]
    		return;
 80011e2:	e051      	b.n	8001288 <GPS_parse+0x144>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 80011e4:	2206      	movs	r2, #6
 80011e6:	493a      	ldr	r1, [pc, #232]	@ (80012d0 <GPS_parse+0x18c>)
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f008 f841 	bl	8009270 <strncmp>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d114      	bne.n	800121e <GPS_parse+0xda>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 80011f4:	4b37      	ldr	r3, [pc, #220]	@ (80012d4 <GPS_parse+0x190>)
 80011f6:	9305      	str	r3, [sp, #20]
 80011f8:	4b37      	ldr	r3, [pc, #220]	@ (80012d8 <GPS_parse+0x194>)
 80011fa:	9304      	str	r3, [sp, #16]
 80011fc:	4b37      	ldr	r3, [pc, #220]	@ (80012dc <GPS_parse+0x198>)
 80011fe:	9303      	str	r3, [sp, #12]
 8001200:	4b29      	ldr	r3, [pc, #164]	@ (80012a8 <GPS_parse+0x164>)
 8001202:	9302      	str	r3, [sp, #8]
 8001204:	4b29      	ldr	r3, [pc, #164]	@ (80012ac <GPS_parse+0x168>)
 8001206:	9301      	str	r3, [sp, #4]
 8001208:	4b29      	ldr	r3, [pc, #164]	@ (80012b0 <GPS_parse+0x16c>)
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	4b29      	ldr	r3, [pc, #164]	@ (80012b4 <GPS_parse+0x170>)
 800120e:	4a2a      	ldr	r2, [pc, #168]	@ (80012b8 <GPS_parse+0x174>)
 8001210:	4933      	ldr	r1, [pc, #204]	@ (80012e0 <GPS_parse+0x19c>)
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f007 ff20 	bl	8009058 <siscanf>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	e034      	b.n	8001288 <GPS_parse+0x144>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 800121e:	2206      	movs	r2, #6
 8001220:	4930      	ldr	r1, [pc, #192]	@ (80012e4 <GPS_parse+0x1a0>)
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f008 f824 	bl	8009270 <strncmp>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d110      	bne.n	8001250 <GPS_parse+0x10c>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 800122e:	4b2e      	ldr	r3, [pc, #184]	@ (80012e8 <GPS_parse+0x1a4>)
 8001230:	9303      	str	r3, [sp, #12]
 8001232:	4b21      	ldr	r3, [pc, #132]	@ (80012b8 <GPS_parse+0x174>)
 8001234:	9302      	str	r3, [sp, #8]
 8001236:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <GPS_parse+0x164>)
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	4b1c      	ldr	r3, [pc, #112]	@ (80012ac <GPS_parse+0x168>)
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	4b1c      	ldr	r3, [pc, #112]	@ (80012b0 <GPS_parse+0x16c>)
 8001240:	4a1c      	ldr	r2, [pc, #112]	@ (80012b4 <GPS_parse+0x170>)
 8001242:	492a      	ldr	r1, [pc, #168]	@ (80012ec <GPS_parse+0x1a8>)
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f007 ff07 	bl	8009058 <siscanf>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	e01b      	b.n	8001288 <GPS_parse+0x144>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 8001250:	2206      	movs	r2, #6
 8001252:	4927      	ldr	r1, [pc, #156]	@ (80012f0 <GPS_parse+0x1ac>)
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f008 f80b 	bl	8009270 <strncmp>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d113      	bne.n	8001288 <GPS_parse+0x144>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001260:	4b24      	ldr	r3, [pc, #144]	@ (80012f4 <GPS_parse+0x1b0>)
 8001262:	9305      	str	r3, [sp, #20]
 8001264:	4b24      	ldr	r3, [pc, #144]	@ (80012f8 <GPS_parse+0x1b4>)
 8001266:	9304      	str	r3, [sp, #16]
 8001268:	4b24      	ldr	r3, [pc, #144]	@ (80012fc <GPS_parse+0x1b8>)
 800126a:	9303      	str	r3, [sp, #12]
 800126c:	4b1b      	ldr	r3, [pc, #108]	@ (80012dc <GPS_parse+0x198>)
 800126e:	9302      	str	r3, [sp, #8]
 8001270:	4b23      	ldr	r3, [pc, #140]	@ (8001300 <GPS_parse+0x1bc>)
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	4b23      	ldr	r3, [pc, #140]	@ (8001304 <GPS_parse+0x1c0>)
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	4b23      	ldr	r3, [pc, #140]	@ (8001308 <GPS_parse+0x1c4>)
 800127a:	4a24      	ldr	r2, [pc, #144]	@ (800130c <GPS_parse+0x1c8>)
 800127c:	4924      	ldr	r1, [pc, #144]	@ (8001310 <GPS_parse+0x1cc>)
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f007 feea 	bl	8009058 <siscanf>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
            return;
    }
}
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	0800d108 	.word	0x0800d108
 8001294:	200002a4 	.word	0x200002a4
 8001298:	200002a0 	.word	0x200002a0
 800129c:	2000029c 	.word	0x2000029c
 80012a0:	20000298 	.word	0x20000298
 80012a4:	20000294 	.word	0x20000294
 80012a8:	20000291 	.word	0x20000291
 80012ac:	20000284 	.word	0x20000284
 80012b0:	20000290 	.word	0x20000290
 80012b4:	20000288 	.word	0x20000288
 80012b8:	2000028c 	.word	0x2000028c
 80012bc:	0800d110 	.word	0x0800d110
 80012c0:	20000278 	.word	0x20000278
 80012c4:	200006c8 	.word	0x200006c8
 80012c8:	200006c4 	.word	0x200006c4
 80012cc:	200006c0 	.word	0x200006c0
 80012d0:	0800d138 	.word	0x0800d138
 80012d4:	200002b0 	.word	0x200002b0
 80012d8:	200002ac 	.word	0x200002ac
 80012dc:	200002a8 	.word	0x200002a8
 80012e0:	0800d140 	.word	0x0800d140
 80012e4:	0800d160 	.word	0x0800d160
 80012e8:	200002b4 	.word	0x200002b4
 80012ec:	0800d168 	.word	0x0800d168
 80012f0:	0800d184 	.word	0x0800d184
 80012f4:	200002cc 	.word	0x200002cc
 80012f8:	200002c8 	.word	0x200002c8
 80012fc:	200002c5 	.word	0x200002c5
 8001300:	200002c4 	.word	0x200002c4
 8001304:	200002c0 	.word	0x200002c0
 8001308:	200002bc 	.word	0x200002bc
 800130c:	200002b8 	.word	0x200002b8
 8001310:	0800d18c 	.word	0x0800d18c

08001314 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001314:	b480      	push	{r7}
 8001316:	b087      	sub	sp, #28
 8001318:	af00      	add	r7, sp, #0
 800131a:	ed87 0a01 	vstr	s0, [r7, #4]
 800131e:	4603      	mov	r3, r0
 8001320:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8001322:	ed97 7a01 	vldr	s14, [r7, #4]
 8001326:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80013a8 <GPS_nmea_to_dec+0x94>
 800132a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001332:	ee17 3a90 	vmov	r3, s15
 8001336:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	2264      	movs	r2, #100	@ 0x64
 800133c:	fb02 f303 	mul.w	r3, r2, r3
 8001340:	ee07 3a90 	vmov	s15, r3
 8001344:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001348:	ed97 7a01 	vldr	s14, [r7, #4]
 800134c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001350:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8001354:	ed97 7a03 	vldr	s14, [r7, #12]
 8001358:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80013ac <GPS_nmea_to_dec+0x98>
 800135c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001360:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	ee07 3a90 	vmov	s15, r3
 800136a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001376:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 800137a:	78fb      	ldrb	r3, [r7, #3]
 800137c:	2b53      	cmp	r3, #83	@ 0x53
 800137e:	d002      	beq.n	8001386 <GPS_nmea_to_dec+0x72>
 8001380:	78fb      	ldrb	r3, [r7, #3]
 8001382:	2b57      	cmp	r3, #87	@ 0x57
 8001384:	d105      	bne.n	8001392 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8001386:	edd7 7a05 	vldr	s15, [r7, #20]
 800138a:	eef1 7a67 	vneg.f32	s15, s15
 800138e:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	ee07 3a90 	vmov	s15, r3
}
 8001398:	eeb0 0a67 	vmov.f32	s0, s15
 800139c:	371c      	adds	r7, #28
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	42c80000 	.word	0x42c80000
 80013ac:	42700000 	.word	0x42700000

080013b0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	GPS_UART_CallBack();
 80013b8:	f7ff fe2a 	bl	8001010 <GPS_UART_CallBack>
   // do nothing here
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c4:	b598      	push	{r3, r4, r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c8:	f001 f8f2 	bl	80025b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013cc:	f000 f840 	bl	8001450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d0:	f000 fb58 	bl	8001a84 <MX_GPIO_Init>
  MX_DMA_Init();
 80013d4:	f000 fb2e 	bl	8001a34 <MX_DMA_Init>
  MX_I2C1_Init();
 80013d8:	f000 f8f4 	bl	80015c4 <MX_I2C1_Init>
  MX_ADC1_Init();
 80013dc:	f000 f8a0 	bl	8001520 <MX_ADC1_Init>
  MX_TIM3_Init();
 80013e0:	f000 fa7a 	bl	80018d8 <MX_TIM3_Init>
  MX_SDIO_SD_Init();
 80013e4:	f000 f978 	bl	80016d8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80013e8:	f006 fc50 	bl	8007c8c <MX_FATFS_Init>
  MX_USART1_UART_Init();
 80013ec:	f000 face 	bl	800198c <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80013f0:	f000 f916 	bl	8001620 <MX_I2C2_Init>
  MX_TIM1_Init();
 80013f4:	f000 f992 	bl	800171c <MX_TIM1_Init>
  MX_TIM2_Init();
 80013f8:	f000 fa14 	bl	8001824 <MX_TIM2_Init>
  MX_I2C3_Init();
 80013fc:	f000 f93e 	bl	800167c <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8001400:	f000 faee 	bl	80019e0 <MX_USART2_UART_Init>
  /******<<< SD CARD INITIALIZATION END <<<******/


  /******>>> SENSOR GPS INITIALIZATION BEGIN >>>******/
	#ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_SENSOR_GPS_H
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001404:	2201      	movs	r2, #1
 8001406:	2101      	movs	r1, #1
 8001408:	480f      	ldr	r0, [pc, #60]	@ (8001448 <main+0x84>)
 800140a:	f002 fa7d 	bl	8003908 <HAL_GPIO_WritePin>
	GPS_Init();
 800140e:	f7ff fdf1 	bl	8000ff4 <GPS_Init>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	2101      	movs	r1, #1
 8001416:	480c      	ldr	r0, [pc, #48]	@ (8001448 <main+0x84>)
 8001418:	f002 fa76 	bl	8003908 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		/*! At the beginning of each loop, the system retrieves the last recorded milliseconds */
		SystemTick = HAL_GetTick();
 800141c:	f001 f92e 	bl	800267c <HAL_GetTick>
 8001420:	4603      	mov	r3, r0
 8001422:	4a0a      	ldr	r2, [pc, #40]	@ (800144c <main+0x88>)
 8001424:	6013      	str	r3, [r2, #0]

		/*! Get current Date & Time */
		//DS1307_GetAllDatas();

		/*! The system time is retrieved again and the loop waits until the elapsed time reaches 1000 milliseconds*/
		HAL_Delay(abs(1000 - (HAL_GetTick() - SystemTick)));
 8001426:	4b09      	ldr	r3, [pc, #36]	@ (800144c <main+0x88>)
 8001428:	681c      	ldr	r4, [r3, #0]
 800142a:	f001 f927 	bl	800267c <HAL_GetTick>
 800142e:	4603      	mov	r3, r0
 8001430:	1ae3      	subs	r3, r4, r3
 8001432:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001436:	2b00      	cmp	r3, #0
 8001438:	bfb8      	it	lt
 800143a:	425b      	neglt	r3, r3
 800143c:	4618      	mov	r0, r3
 800143e:	f001 f929 	bl	8002694 <HAL_Delay>
		SystemTick = HAL_GetTick();
 8001442:	bf00      	nop
 8001444:	e7ea      	b.n	800141c <main+0x58>
 8001446:	bf00      	nop
 8001448:	40020800 	.word	0x40020800
 800144c:	200006cc 	.word	0x200006cc

08001450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b094      	sub	sp, #80	@ 0x50
 8001454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001456:	f107 0320 	add.w	r3, r7, #32
 800145a:	2230      	movs	r2, #48	@ 0x30
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f007 fefe 	bl	8009260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001474:	2300      	movs	r3, #0
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	4b27      	ldr	r3, [pc, #156]	@ (8001518 <SystemClock_Config+0xc8>)
 800147a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147c:	4a26      	ldr	r2, [pc, #152]	@ (8001518 <SystemClock_Config+0xc8>)
 800147e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001482:	6413      	str	r3, [r2, #64]	@ 0x40
 8001484:	4b24      	ldr	r3, [pc, #144]	@ (8001518 <SystemClock_Config+0xc8>)
 8001486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001488:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001490:	2300      	movs	r3, #0
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	4b21      	ldr	r3, [pc, #132]	@ (800151c <SystemClock_Config+0xcc>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a20      	ldr	r2, [pc, #128]	@ (800151c <SystemClock_Config+0xcc>)
 800149a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	4b1e      	ldr	r3, [pc, #120]	@ (800151c <SystemClock_Config+0xcc>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014ac:	2302      	movs	r3, #2
 80014ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b0:	2301      	movs	r3, #1
 80014b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b4:	2310      	movs	r3, #16
 80014b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b8:	2302      	movs	r3, #2
 80014ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014bc:	2300      	movs	r3, #0
 80014be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014c0:	2308      	movs	r3, #8
 80014c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80014c4:	2348      	movs	r3, #72	@ 0x48
 80014c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014c8:	2302      	movs	r3, #2
 80014ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80014cc:	2303      	movs	r3, #3
 80014ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d0:	f107 0320 	add.w	r3, r7, #32
 80014d4:	4618      	mov	r0, r3
 80014d6:	f002 fb75 	bl	8003bc4 <HAL_RCC_OscConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014e0:	f000 fb52 	bl	8001b88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e4:	230f      	movs	r3, #15
 80014e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e8:	2302      	movs	r3, #2
 80014ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014fa:	f107 030c 	add.w	r3, r7, #12
 80014fe:	2102      	movs	r1, #2
 8001500:	4618      	mov	r0, r3
 8001502:	f002 fdd7 	bl	80040b4 <HAL_RCC_ClockConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800150c:	f000 fb3c 	bl	8001b88 <Error_Handler>
  }
}
 8001510:	bf00      	nop
 8001512:	3750      	adds	r7, #80	@ 0x50
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40023800 	.word	0x40023800
 800151c:	40007000 	.word	0x40007000

08001520 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001526:	463b      	mov	r3, r7
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001532:	4b21      	ldr	r3, [pc, #132]	@ (80015b8 <MX_ADC1_Init+0x98>)
 8001534:	4a21      	ldr	r2, [pc, #132]	@ (80015bc <MX_ADC1_Init+0x9c>)
 8001536:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001538:	4b1f      	ldr	r3, [pc, #124]	@ (80015b8 <MX_ADC1_Init+0x98>)
 800153a:	2200      	movs	r2, #0
 800153c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800153e:	4b1e      	ldr	r3, [pc, #120]	@ (80015b8 <MX_ADC1_Init+0x98>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001544:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <MX_ADC1_Init+0x98>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800154a:	4b1b      	ldr	r3, [pc, #108]	@ (80015b8 <MX_ADC1_Init+0x98>)
 800154c:	2201      	movs	r2, #1
 800154e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001550:	4b19      	ldr	r3, [pc, #100]	@ (80015b8 <MX_ADC1_Init+0x98>)
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001558:	4b17      	ldr	r3, [pc, #92]	@ (80015b8 <MX_ADC1_Init+0x98>)
 800155a:	2200      	movs	r2, #0
 800155c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800155e:	4b16      	ldr	r3, [pc, #88]	@ (80015b8 <MX_ADC1_Init+0x98>)
 8001560:	4a17      	ldr	r2, [pc, #92]	@ (80015c0 <MX_ADC1_Init+0xa0>)
 8001562:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001564:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <MX_ADC1_Init+0x98>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800156a:	4b13      	ldr	r3, [pc, #76]	@ (80015b8 <MX_ADC1_Init+0x98>)
 800156c:	2201      	movs	r2, #1
 800156e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001570:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <MX_ADC1_Init+0x98>)
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001578:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <MX_ADC1_Init+0x98>)
 800157a:	2201      	movs	r2, #1
 800157c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800157e:	480e      	ldr	r0, [pc, #56]	@ (80015b8 <MX_ADC1_Init+0x98>)
 8001580:	f001 f8ac 	bl	80026dc <HAL_ADC_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800158a:	f000 fafd 	bl	8001b88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800158e:	2300      	movs	r3, #0
 8001590:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001592:	2301      	movs	r3, #1
 8001594:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800159a:	463b      	mov	r3, r7
 800159c:	4619      	mov	r1, r3
 800159e:	4806      	ldr	r0, [pc, #24]	@ (80015b8 <MX_ADC1_Init+0x98>)
 80015a0:	f001 f8e0 	bl	8002764 <HAL_ADC_ConfigChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80015aa:	f000 faed 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200002d0 	.word	0x200002d0
 80015bc:	40012000 	.word	0x40012000
 80015c0:	0f000001 	.word	0x0f000001

080015c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015c8:	4b12      	ldr	r3, [pc, #72]	@ (8001614 <MX_I2C1_Init+0x50>)
 80015ca:	4a13      	ldr	r2, [pc, #76]	@ (8001618 <MX_I2C1_Init+0x54>)
 80015cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015ce:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <MX_I2C1_Init+0x50>)
 80015d0:	4a12      	ldr	r2, [pc, #72]	@ (800161c <MX_I2C1_Init+0x58>)
 80015d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001614 <MX_I2C1_Init+0x50>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015da:	4b0e      	ldr	r3, [pc, #56]	@ (8001614 <MX_I2C1_Init+0x50>)
 80015dc:	2200      	movs	r2, #0
 80015de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <MX_I2C1_Init+0x50>)
 80015e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <MX_I2C1_Init+0x50>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015ee:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <MX_I2C1_Init+0x50>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015f4:	4b07      	ldr	r3, [pc, #28]	@ (8001614 <MX_I2C1_Init+0x50>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015fa:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <MX_I2C1_Init+0x50>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001600:	4804      	ldr	r0, [pc, #16]	@ (8001614 <MX_I2C1_Init+0x50>)
 8001602:	f002 f99b 	bl	800393c <HAL_I2C_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800160c:	f000 fabc 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000318 	.word	0x20000318
 8001618:	40005400 	.word	0x40005400
 800161c:	000186a0 	.word	0x000186a0

08001620 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001624:	4b12      	ldr	r3, [pc, #72]	@ (8001670 <MX_I2C2_Init+0x50>)
 8001626:	4a13      	ldr	r2, [pc, #76]	@ (8001674 <MX_I2C2_Init+0x54>)
 8001628:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800162a:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <MX_I2C2_Init+0x50>)
 800162c:	4a12      	ldr	r2, [pc, #72]	@ (8001678 <MX_I2C2_Init+0x58>)
 800162e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001630:	4b0f      	ldr	r3, [pc, #60]	@ (8001670 <MX_I2C2_Init+0x50>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001636:	4b0e      	ldr	r3, [pc, #56]	@ (8001670 <MX_I2C2_Init+0x50>)
 8001638:	2200      	movs	r2, #0
 800163a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800163c:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <MX_I2C2_Init+0x50>)
 800163e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001642:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001644:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <MX_I2C2_Init+0x50>)
 8001646:	2200      	movs	r2, #0
 8001648:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800164a:	4b09      	ldr	r3, [pc, #36]	@ (8001670 <MX_I2C2_Init+0x50>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001650:	4b07      	ldr	r3, [pc, #28]	@ (8001670 <MX_I2C2_Init+0x50>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001656:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <MX_I2C2_Init+0x50>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800165c:	4804      	ldr	r0, [pc, #16]	@ (8001670 <MX_I2C2_Init+0x50>)
 800165e:	f002 f96d 	bl	800393c <HAL_I2C_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001668:	f000 fa8e 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	2000036c 	.word	0x2000036c
 8001674:	40005800 	.word	0x40005800
 8001678:	000186a0 	.word	0x000186a0

0800167c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001680:	4b12      	ldr	r3, [pc, #72]	@ (80016cc <MX_I2C3_Init+0x50>)
 8001682:	4a13      	ldr	r2, [pc, #76]	@ (80016d0 <MX_I2C3_Init+0x54>)
 8001684:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001686:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <MX_I2C3_Init+0x50>)
 8001688:	4a12      	ldr	r2, [pc, #72]	@ (80016d4 <MX_I2C3_Init+0x58>)
 800168a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800168c:	4b0f      	ldr	r3, [pc, #60]	@ (80016cc <MX_I2C3_Init+0x50>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001692:	4b0e      	ldr	r3, [pc, #56]	@ (80016cc <MX_I2C3_Init+0x50>)
 8001694:	2200      	movs	r2, #0
 8001696:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001698:	4b0c      	ldr	r3, [pc, #48]	@ (80016cc <MX_I2C3_Init+0x50>)
 800169a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800169e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016a0:	4b0a      	ldr	r3, [pc, #40]	@ (80016cc <MX_I2C3_Init+0x50>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80016a6:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <MX_I2C3_Init+0x50>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ac:	4b07      	ldr	r3, [pc, #28]	@ (80016cc <MX_I2C3_Init+0x50>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016b2:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <MX_I2C3_Init+0x50>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80016b8:	4804      	ldr	r0, [pc, #16]	@ (80016cc <MX_I2C3_Init+0x50>)
 80016ba:	f002 f93f 	bl	800393c <HAL_I2C_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80016c4:	f000 fa60 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200003c0 	.word	0x200003c0
 80016d0:	40005c00 	.word	0x40005c00
 80016d4:	000186a0 	.word	0x000186a0

080016d8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80016dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001714 <MX_SDIO_SD_Init+0x3c>)
 80016de:	4a0e      	ldr	r2, [pc, #56]	@ (8001718 <MX_SDIO_SD_Init+0x40>)
 80016e0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80016e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001714 <MX_SDIO_SD_Init+0x3c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80016e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001714 <MX_SDIO_SD_Init+0x3c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80016ee:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <MX_SDIO_SD_Init+0x3c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 80016f4:	4b07      	ldr	r3, [pc, #28]	@ (8001714 <MX_SDIO_SD_Init+0x3c>)
 80016f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016fa:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80016fc:	4b05      	ldr	r3, [pc, #20]	@ (8001714 <MX_SDIO_SD_Init+0x3c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001702:	4b04      	ldr	r3, [pc, #16]	@ (8001714 <MX_SDIO_SD_Init+0x3c>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000414 	.word	0x20000414
 8001718:	40012c00 	.word	0x40012c00

0800171c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b092      	sub	sp, #72	@ 0x48
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001722:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800172c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
 800173c:	615a      	str	r2, [r3, #20]
 800173e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	2220      	movs	r2, #32
 8001744:	2100      	movs	r1, #0
 8001746:	4618      	mov	r0, r3
 8001748:	f007 fd8a 	bl	8009260 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800174c:	4b33      	ldr	r3, [pc, #204]	@ (800181c <MX_TIM1_Init+0x100>)
 800174e:	4a34      	ldr	r2, [pc, #208]	@ (8001820 <MX_TIM1_Init+0x104>)
 8001750:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1440-1;
 8001752:	4b32      	ldr	r3, [pc, #200]	@ (800181c <MX_TIM1_Init+0x100>)
 8001754:	f240 529f 	movw	r2, #1439	@ 0x59f
 8001758:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175a:	4b30      	ldr	r3, [pc, #192]	@ (800181c <MX_TIM1_Init+0x100>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001760:	4b2e      	ldr	r3, [pc, #184]	@ (800181c <MX_TIM1_Init+0x100>)
 8001762:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001766:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001768:	4b2c      	ldr	r3, [pc, #176]	@ (800181c <MX_TIM1_Init+0x100>)
 800176a:	2200      	movs	r2, #0
 800176c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800176e:	4b2b      	ldr	r3, [pc, #172]	@ (800181c <MX_TIM1_Init+0x100>)
 8001770:	2200      	movs	r2, #0
 8001772:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001774:	4b29      	ldr	r3, [pc, #164]	@ (800181c <MX_TIM1_Init+0x100>)
 8001776:	2200      	movs	r2, #0
 8001778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800177a:	4828      	ldr	r0, [pc, #160]	@ (800181c <MX_TIM1_Init+0x100>)
 800177c:	f004 f9b4 	bl	8005ae8 <HAL_TIM_PWM_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001786:	f000 f9ff 	bl	8001b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178a:	2300      	movs	r3, #0
 800178c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001792:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001796:	4619      	mov	r1, r3
 8001798:	4820      	ldr	r0, [pc, #128]	@ (800181c <MX_TIM1_Init+0x100>)
 800179a:	f004 fccf 	bl	800613c <HAL_TIMEx_MasterConfigSynchronization>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80017a4:	f000 f9f0 	bl	8001b88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017a8:	2360      	movs	r3, #96	@ 0x60
 80017aa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017b4:	2300      	movs	r3, #0
 80017b6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017bc:	2300      	movs	r3, #0
 80017be:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017c0:	2300      	movs	r3, #0
 80017c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017c8:	2204      	movs	r2, #4
 80017ca:	4619      	mov	r1, r3
 80017cc:	4813      	ldr	r0, [pc, #76]	@ (800181c <MX_TIM1_Init+0x100>)
 80017ce:	f004 f9db 	bl	8005b88 <HAL_TIM_PWM_ConfigChannel>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80017d8:	f000 f9d6 	bl	8001b88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	4619      	mov	r1, r3
 80017fe:	4807      	ldr	r0, [pc, #28]	@ (800181c <MX_TIM1_Init+0x100>)
 8001800:	f004 fd0a 	bl	8006218 <HAL_TIMEx_ConfigBreakDeadTime>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 800180a:	f000 f9bd 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800180e:	4803      	ldr	r0, [pc, #12]	@ (800181c <MX_TIM1_Init+0x100>)
 8001810:	f000 fc6a 	bl	80020e8 <HAL_TIM_MspPostInit>

}
 8001814:	bf00      	nop
 8001816:	3748      	adds	r7, #72	@ 0x48
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000558 	.word	0x20000558
 8001820:	40010000 	.word	0x40010000

08001824 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	@ 0x28
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800182a:	f107 0320 	add.w	r3, r7, #32
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	611a      	str	r2, [r3, #16]
 8001842:	615a      	str	r2, [r3, #20]
 8001844:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001846:	4b23      	ldr	r3, [pc, #140]	@ (80018d4 <MX_TIM2_Init+0xb0>)
 8001848:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800184c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440-1;
 800184e:	4b21      	ldr	r3, [pc, #132]	@ (80018d4 <MX_TIM2_Init+0xb0>)
 8001850:	f240 529f 	movw	r2, #1439	@ 0x59f
 8001854:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001856:	4b1f      	ldr	r3, [pc, #124]	@ (80018d4 <MX_TIM2_Init+0xb0>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800185c:	4b1d      	ldr	r3, [pc, #116]	@ (80018d4 <MX_TIM2_Init+0xb0>)
 800185e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001862:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001864:	4b1b      	ldr	r3, [pc, #108]	@ (80018d4 <MX_TIM2_Init+0xb0>)
 8001866:	2200      	movs	r2, #0
 8001868:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186a:	4b1a      	ldr	r3, [pc, #104]	@ (80018d4 <MX_TIM2_Init+0xb0>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001870:	4818      	ldr	r0, [pc, #96]	@ (80018d4 <MX_TIM2_Init+0xb0>)
 8001872:	f004 f939 	bl	8005ae8 <HAL_TIM_PWM_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800187c:	f000 f984 	bl	8001b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001880:	2300      	movs	r3, #0
 8001882:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001888:	f107 0320 	add.w	r3, r7, #32
 800188c:	4619      	mov	r1, r3
 800188e:	4811      	ldr	r0, [pc, #68]	@ (80018d4 <MX_TIM2_Init+0xb0>)
 8001890:	f004 fc54 	bl	800613c <HAL_TIMEx_MasterConfigSynchronization>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800189a:	f000 f975 	bl	8001b88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800189e:	2360      	movs	r3, #96	@ 0x60
 80018a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	2200      	movs	r2, #0
 80018b2:	4619      	mov	r1, r3
 80018b4:	4807      	ldr	r0, [pc, #28]	@ (80018d4 <MX_TIM2_Init+0xb0>)
 80018b6:	f004 f967 	bl	8005b88 <HAL_TIM_PWM_ConfigChannel>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80018c0:	f000 f962 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018c4:	4803      	ldr	r0, [pc, #12]	@ (80018d4 <MX_TIM2_Init+0xb0>)
 80018c6:	f000 fc0f 	bl	80020e8 <HAL_TIM_MspPostInit>

}
 80018ca:	bf00      	nop
 80018cc:	3728      	adds	r7, #40	@ 0x28
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200005a0 	.word	0x200005a0

080018d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	@ 0x28
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018de:	f107 0320 	add.w	r3, r7, #32
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
 80018f4:	611a      	str	r2, [r3, #16]
 80018f6:	615a      	str	r2, [r3, #20]
 80018f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018fa:	4b22      	ldr	r3, [pc, #136]	@ (8001984 <MX_TIM3_Init+0xac>)
 80018fc:	4a22      	ldr	r2, [pc, #136]	@ (8001988 <MX_TIM3_Init+0xb0>)
 80018fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 263-1;
 8001900:	4b20      	ldr	r3, [pc, #128]	@ (8001984 <MX_TIM3_Init+0xac>)
 8001902:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8001906:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001908:	4b1e      	ldr	r3, [pc, #120]	@ (8001984 <MX_TIM3_Init+0xac>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800190e:	4b1d      	ldr	r3, [pc, #116]	@ (8001984 <MX_TIM3_Init+0xac>)
 8001910:	2263      	movs	r2, #99	@ 0x63
 8001912:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001914:	4b1b      	ldr	r3, [pc, #108]	@ (8001984 <MX_TIM3_Init+0xac>)
 8001916:	2200      	movs	r2, #0
 8001918:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191a:	4b1a      	ldr	r3, [pc, #104]	@ (8001984 <MX_TIM3_Init+0xac>)
 800191c:	2200      	movs	r2, #0
 800191e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001920:	4818      	ldr	r0, [pc, #96]	@ (8001984 <MX_TIM3_Init+0xac>)
 8001922:	f004 f8e1 	bl	8005ae8 <HAL_TIM_PWM_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800192c:	f000 f92c 	bl	8001b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001930:	2300      	movs	r3, #0
 8001932:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001938:	f107 0320 	add.w	r3, r7, #32
 800193c:	4619      	mov	r1, r3
 800193e:	4811      	ldr	r0, [pc, #68]	@ (8001984 <MX_TIM3_Init+0xac>)
 8001940:	f004 fbfc 	bl	800613c <HAL_TIMEx_MasterConfigSynchronization>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800194a:	f000 f91d 	bl	8001b88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800194e:	2360      	movs	r3, #96	@ 0x60
 8001950:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	2200      	movs	r2, #0
 8001962:	4619      	mov	r1, r3
 8001964:	4807      	ldr	r0, [pc, #28]	@ (8001984 <MX_TIM3_Init+0xac>)
 8001966:	f004 f90f 	bl	8005b88 <HAL_TIM_PWM_ConfigChannel>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001970:	f000 f90a 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001974:	4803      	ldr	r0, [pc, #12]	@ (8001984 <MX_TIM3_Init+0xac>)
 8001976:	f000 fbb7 	bl	80020e8 <HAL_TIM_MspPostInit>

}
 800197a:	bf00      	nop
 800197c:	3728      	adds	r7, #40	@ 0x28
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	200005e8 	.word	0x200005e8
 8001988:	40000400 	.word	0x40000400

0800198c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001990:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <MX_USART1_UART_Init+0x4c>)
 8001992:	4a12      	ldr	r2, [pc, #72]	@ (80019dc <MX_USART1_UART_Init+0x50>)
 8001994:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001996:	4b10      	ldr	r3, [pc, #64]	@ (80019d8 <MX_USART1_UART_Init+0x4c>)
 8001998:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800199c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800199e:	4b0e      	ldr	r3, [pc, #56]	@ (80019d8 <MX_USART1_UART_Init+0x4c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019a4:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <MX_USART1_UART_Init+0x4c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019aa:	4b0b      	ldr	r3, [pc, #44]	@ (80019d8 <MX_USART1_UART_Init+0x4c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019b0:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <MX_USART1_UART_Init+0x4c>)
 80019b2:	220c      	movs	r2, #12
 80019b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b6:	4b08      	ldr	r3, [pc, #32]	@ (80019d8 <MX_USART1_UART_Init+0x4c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019bc:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <MX_USART1_UART_Init+0x4c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019c2:	4805      	ldr	r0, [pc, #20]	@ (80019d8 <MX_USART1_UART_Init+0x4c>)
 80019c4:	f004 fc7a 	bl	80062bc <HAL_UART_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019ce:	f000 f8db 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000630 	.word	0x20000630
 80019dc:	40011000 	.word	0x40011000

080019e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019e4:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <MX_USART2_UART_Init+0x4c>)
 80019e6:	4a12      	ldr	r2, [pc, #72]	@ (8001a30 <MX_USART2_UART_Init+0x50>)
 80019e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019ea:	4b10      	ldr	r3, [pc, #64]	@ (8001a2c <MX_USART2_UART_Init+0x4c>)
 80019ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019f2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a2c <MX_USART2_UART_Init+0x4c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019f8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a2c <MX_USART2_UART_Init+0x4c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019fe:	4b0b      	ldr	r3, [pc, #44]	@ (8001a2c <MX_USART2_UART_Init+0x4c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a04:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <MX_USART2_UART_Init+0x4c>)
 8001a06:	220c      	movs	r2, #12
 8001a08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a0a:	4b08      	ldr	r3, [pc, #32]	@ (8001a2c <MX_USART2_UART_Init+0x4c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a10:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <MX_USART2_UART_Init+0x4c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a16:	4805      	ldr	r0, [pc, #20]	@ (8001a2c <MX_USART2_UART_Init+0x4c>)
 8001a18:	f004 fc50 	bl	80062bc <HAL_UART_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a22:	f000 f8b1 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000678 	.word	0x20000678
 8001a30:	40004400 	.word	0x40004400

08001a34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	4b10      	ldr	r3, [pc, #64]	@ (8001a80 <MX_DMA_Init+0x4c>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	4a0f      	ldr	r2, [pc, #60]	@ (8001a80 <MX_DMA_Init+0x4c>)
 8001a44:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a80 <MX_DMA_Init+0x4c>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2100      	movs	r1, #0
 8001a5a:	203b      	movs	r0, #59	@ 0x3b
 8001a5c:	f001 f98b 	bl	8002d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001a60:	203b      	movs	r0, #59	@ 0x3b
 8001a62:	f001 f9a4 	bl	8002dae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2100      	movs	r1, #0
 8001a6a:	2045      	movs	r0, #69	@ 0x45
 8001a6c:	f001 f983 	bl	8002d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001a70:	2045      	movs	r0, #69	@ 0x45
 8001a72:	f001 f99c 	bl	8002dae <HAL_NVIC_EnableIRQ>

}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800

08001a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	@ 0x28
 8001a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
 8001a98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	4b37      	ldr	r3, [pc, #220]	@ (8001b7c <MX_GPIO_Init+0xf8>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	4a36      	ldr	r2, [pc, #216]	@ (8001b7c <MX_GPIO_Init+0xf8>)
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aaa:	4b34      	ldr	r3, [pc, #208]	@ (8001b7c <MX_GPIO_Init+0xf8>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	4b30      	ldr	r3, [pc, #192]	@ (8001b7c <MX_GPIO_Init+0xf8>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	4a2f      	ldr	r2, [pc, #188]	@ (8001b7c <MX_GPIO_Init+0xf8>)
 8001ac0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac6:	4b2d      	ldr	r3, [pc, #180]	@ (8001b7c <MX_GPIO_Init+0xf8>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	4b29      	ldr	r3, [pc, #164]	@ (8001b7c <MX_GPIO_Init+0xf8>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	4a28      	ldr	r2, [pc, #160]	@ (8001b7c <MX_GPIO_Init+0xf8>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae2:	4b26      	ldr	r3, [pc, #152]	@ (8001b7c <MX_GPIO_Init+0xf8>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
 8001af2:	4b22      	ldr	r3, [pc, #136]	@ (8001b7c <MX_GPIO_Init+0xf8>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	4a21      	ldr	r2, [pc, #132]	@ (8001b7c <MX_GPIO_Init+0xf8>)
 8001af8:	f043 0302 	orr.w	r3, r3, #2
 8001afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afe:	4b1f      	ldr	r3, [pc, #124]	@ (8001b7c <MX_GPIO_Init+0xf8>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2133      	movs	r1, #51	@ 0x33
 8001b0e:	481c      	ldr	r0, [pc, #112]	@ (8001b80 <MX_GPIO_Init+0xfc>)
 8001b10:	f001 fefa 	bl	8003908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b14:	2200      	movs	r2, #0
 8001b16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b1a:	481a      	ldr	r0, [pc, #104]	@ (8001b84 <MX_GPIO_Init+0x100>)
 8001b1c:	f001 fef4 	bl	8003908 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001b20:	2333      	movs	r3, #51	@ 0x33
 8001b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b24:	2301      	movs	r3, #1
 8001b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	4619      	mov	r1, r3
 8001b36:	4812      	ldr	r0, [pc, #72]	@ (8001b80 <MX_GPIO_Init+0xfc>)
 8001b38:	f001 fd62 	bl	8003600 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b3c:	2304      	movs	r3, #4
 8001b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	480c      	ldr	r0, [pc, #48]	@ (8001b80 <MX_GPIO_Init+0xfc>)
 8001b50:	f001 fd56 	bl	8003600 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b62:	2300      	movs	r3, #0
 8001b64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b66:	f107 0314 	add.w	r3, r7, #20
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4805      	ldr	r0, [pc, #20]	@ (8001b84 <MX_GPIO_Init+0x100>)
 8001b6e:	f001 fd47 	bl	8003600 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b72:	bf00      	nop
 8001b74:	3728      	adds	r7, #40	@ 0x28
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40020800 	.word	0x40020800
 8001b84:	40020400 	.word	0x40020400

08001b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b8c:	b672      	cpsid	i
}
 8001b8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b90:	bf00      	nop
 8001b92:	e7fd      	b.n	8001b90 <Error_Handler+0x8>

08001b94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	4b10      	ldr	r3, [pc, #64]	@ (8001be0 <HAL_MspInit+0x4c>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba2:	4a0f      	ldr	r2, [pc, #60]	@ (8001be0 <HAL_MspInit+0x4c>)
 8001ba4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ba8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001baa:	4b0d      	ldr	r3, [pc, #52]	@ (8001be0 <HAL_MspInit+0x4c>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	603b      	str	r3, [r7, #0]
 8001bba:	4b09      	ldr	r3, [pc, #36]	@ (8001be0 <HAL_MspInit+0x4c>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	4a08      	ldr	r2, [pc, #32]	@ (8001be0 <HAL_MspInit+0x4c>)
 8001bc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bc6:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <HAL_MspInit+0x4c>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800

08001be4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08a      	sub	sp, #40	@ 0x28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a17      	ldr	r2, [pc, #92]	@ (8001c60 <HAL_ADC_MspInit+0x7c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d127      	bne.n	8001c56 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
 8001c0a:	4b16      	ldr	r3, [pc, #88]	@ (8001c64 <HAL_ADC_MspInit+0x80>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0e:	4a15      	ldr	r2, [pc, #84]	@ (8001c64 <HAL_ADC_MspInit+0x80>)
 8001c10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c16:	4b13      	ldr	r3, [pc, #76]	@ (8001c64 <HAL_ADC_MspInit+0x80>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	4b0f      	ldr	r3, [pc, #60]	@ (8001c64 <HAL_ADC_MspInit+0x80>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	4a0e      	ldr	r2, [pc, #56]	@ (8001c64 <HAL_ADC_MspInit+0x80>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c32:	4b0c      	ldr	r3, [pc, #48]	@ (8001c64 <HAL_ADC_MspInit+0x80>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c42:	2303      	movs	r3, #3
 8001c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4a:	f107 0314 	add.w	r3, r7, #20
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4805      	ldr	r0, [pc, #20]	@ (8001c68 <HAL_ADC_MspInit+0x84>)
 8001c52:	f001 fcd5 	bl	8003600 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001c56:	bf00      	nop
 8001c58:	3728      	adds	r7, #40	@ 0x28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40012000 	.word	0x40012000
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40020000 	.word	0x40020000

08001c6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08e      	sub	sp, #56	@ 0x38
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a63      	ldr	r2, [pc, #396]	@ (8001e18 <HAL_I2C_MspInit+0x1ac>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d12c      	bne.n	8001ce8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	623b      	str	r3, [r7, #32]
 8001c92:	4b62      	ldr	r3, [pc, #392]	@ (8001e1c <HAL_I2C_MspInit+0x1b0>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c96:	4a61      	ldr	r2, [pc, #388]	@ (8001e1c <HAL_I2C_MspInit+0x1b0>)
 8001c98:	f043 0302 	orr.w	r3, r3, #2
 8001c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c9e:	4b5f      	ldr	r3, [pc, #380]	@ (8001e1c <HAL_I2C_MspInit+0x1b0>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	623b      	str	r3, [r7, #32]
 8001ca8:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001caa:	23c0      	movs	r3, #192	@ 0xc0
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cae:	2312      	movs	r3, #18
 8001cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cba:	2304      	movs	r3, #4
 8001cbc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4856      	ldr	r0, [pc, #344]	@ (8001e20 <HAL_I2C_MspInit+0x1b4>)
 8001cc6:	f001 fc9b 	bl	8003600 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	4b53      	ldr	r3, [pc, #332]	@ (8001e1c <HAL_I2C_MspInit+0x1b0>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd2:	4a52      	ldr	r2, [pc, #328]	@ (8001e1c <HAL_I2C_MspInit+0x1b0>)
 8001cd4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cda:	4b50      	ldr	r3, [pc, #320]	@ (8001e1c <HAL_I2C_MspInit+0x1b0>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ce2:	61fb      	str	r3, [r7, #28]
 8001ce4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ce6:	e092      	b.n	8001e0e <HAL_I2C_MspInit+0x1a2>
  else if(hi2c->Instance==I2C2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a4d      	ldr	r2, [pc, #308]	@ (8001e24 <HAL_I2C_MspInit+0x1b8>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d13d      	bne.n	8001d6e <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
 8001cf6:	4b49      	ldr	r3, [pc, #292]	@ (8001e1c <HAL_I2C_MspInit+0x1b0>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	4a48      	ldr	r2, [pc, #288]	@ (8001e1c <HAL_I2C_MspInit+0x1b0>)
 8001cfc:	f043 0302 	orr.w	r3, r3, #2
 8001d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d02:	4b46      	ldr	r3, [pc, #280]	@ (8001e1c <HAL_I2C_MspInit+0x1b0>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d14:	2312      	movs	r3, #18
 8001d16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d20:	2304      	movs	r3, #4
 8001d22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d28:	4619      	mov	r1, r3
 8001d2a:	483d      	ldr	r0, [pc, #244]	@ (8001e20 <HAL_I2C_MspInit+0x1b4>)
 8001d2c:	f001 fc68 	bl	8003600 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d30:	2308      	movs	r3, #8
 8001d32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d34:	2312      	movs	r3, #18
 8001d36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001d40:	2309      	movs	r3, #9
 8001d42:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4835      	ldr	r0, [pc, #212]	@ (8001e20 <HAL_I2C_MspInit+0x1b4>)
 8001d4c:	f001 fc58 	bl	8003600 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	4b31      	ldr	r3, [pc, #196]	@ (8001e1c <HAL_I2C_MspInit+0x1b0>)
 8001d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d58:	4a30      	ldr	r2, [pc, #192]	@ (8001e1c <HAL_I2C_MspInit+0x1b0>)
 8001d5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d60:	4b2e      	ldr	r3, [pc, #184]	@ (8001e1c <HAL_I2C_MspInit+0x1b0>)
 8001d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	697b      	ldr	r3, [r7, #20]
}
 8001d6c:	e04f      	b.n	8001e0e <HAL_I2C_MspInit+0x1a2>
  else if(hi2c->Instance==I2C3)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a2d      	ldr	r2, [pc, #180]	@ (8001e28 <HAL_I2C_MspInit+0x1bc>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d14a      	bne.n	8001e0e <HAL_I2C_MspInit+0x1a2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d78:	2300      	movs	r3, #0
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	4b27      	ldr	r3, [pc, #156]	@ (8001e1c <HAL_I2C_MspInit+0x1b0>)
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d80:	4a26      	ldr	r2, [pc, #152]	@ (8001e1c <HAL_I2C_MspInit+0x1b0>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d88:	4b24      	ldr	r3, [pc, #144]	@ (8001e1c <HAL_I2C_MspInit+0x1b0>)
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	4b20      	ldr	r3, [pc, #128]	@ (8001e1c <HAL_I2C_MspInit+0x1b0>)
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9c:	4a1f      	ldr	r2, [pc, #124]	@ (8001e1c <HAL_I2C_MspInit+0x1b0>)
 8001d9e:	f043 0302 	orr.w	r3, r3, #2
 8001da2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e1c <HAL_I2C_MspInit+0x1b0>)
 8001da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001db0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001db4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001db6:	2312      	movs	r3, #18
 8001db8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4817      	ldr	r0, [pc, #92]	@ (8001e2c <HAL_I2C_MspInit+0x1c0>)
 8001dce:	f001 fc17 	bl	8003600 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001dd2:	2310      	movs	r3, #16
 8001dd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dd6:	2312      	movs	r3, #18
 8001dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dde:	2303      	movs	r3, #3
 8001de0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8001de2:	2309      	movs	r3, #9
 8001de4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dea:	4619      	mov	r1, r3
 8001dec:	480c      	ldr	r0, [pc, #48]	@ (8001e20 <HAL_I2C_MspInit+0x1b4>)
 8001dee:	f001 fc07 	bl	8003600 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	4b09      	ldr	r3, [pc, #36]	@ (8001e1c <HAL_I2C_MspInit+0x1b0>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	4a08      	ldr	r2, [pc, #32]	@ (8001e1c <HAL_I2C_MspInit+0x1b0>)
 8001dfc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e02:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <HAL_I2C_MspInit+0x1b0>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
}
 8001e0e:	bf00      	nop
 8001e10:	3738      	adds	r7, #56	@ 0x38
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40005400 	.word	0x40005400
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40020400 	.word	0x40020400
 8001e24:	40005800 	.word	0x40005800
 8001e28:	40005c00 	.word	0x40005c00
 8001e2c:	40020000 	.word	0x40020000

08001e30 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08c      	sub	sp, #48	@ 0x30
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 031c 	add.w	r3, r7, #28
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a77      	ldr	r2, [pc, #476]	@ (800202c <HAL_SD_MspInit+0x1fc>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	f040 80e8 	bne.w	8002024 <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001e54:	2300      	movs	r3, #0
 8001e56:	61bb      	str	r3, [r7, #24]
 8001e58:	4b75      	ldr	r3, [pc, #468]	@ (8002030 <HAL_SD_MspInit+0x200>)
 8001e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5c:	4a74      	ldr	r2, [pc, #464]	@ (8002030 <HAL_SD_MspInit+0x200>)
 8001e5e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e62:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e64:	4b72      	ldr	r3, [pc, #456]	@ (8002030 <HAL_SD_MspInit+0x200>)
 8001e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e6c:	61bb      	str	r3, [r7, #24]
 8001e6e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	4b6e      	ldr	r3, [pc, #440]	@ (8002030 <HAL_SD_MspInit+0x200>)
 8001e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e78:	4a6d      	ldr	r2, [pc, #436]	@ (8002030 <HAL_SD_MspInit+0x200>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e80:	4b6b      	ldr	r3, [pc, #428]	@ (8002030 <HAL_SD_MspInit+0x200>)
 8001e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	4b67      	ldr	r3, [pc, #412]	@ (8002030 <HAL_SD_MspInit+0x200>)
 8001e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e94:	4a66      	ldr	r2, [pc, #408]	@ (8002030 <HAL_SD_MspInit+0x200>)
 8001e96:	f043 0302 	orr.w	r3, r3, #2
 8001e9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9c:	4b64      	ldr	r3, [pc, #400]	@ (8002030 <HAL_SD_MspInit+0x200>)
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	4b60      	ldr	r3, [pc, #384]	@ (8002030 <HAL_SD_MspInit+0x200>)
 8001eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb0:	4a5f      	ldr	r2, [pc, #380]	@ (8002030 <HAL_SD_MspInit+0x200>)
 8001eb2:	f043 0304 	orr.w	r3, r3, #4
 8001eb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb8:	4b5d      	ldr	r3, [pc, #372]	@ (8002030 <HAL_SD_MspInit+0x200>)
 8001eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ec4:	2340      	movs	r3, #64	@ 0x40
 8001ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001ed4:	230c      	movs	r3, #12
 8001ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed8:	f107 031c 	add.w	r3, r7, #28
 8001edc:	4619      	mov	r1, r3
 8001ede:	4855      	ldr	r0, [pc, #340]	@ (8002034 <HAL_SD_MspInit+0x204>)
 8001ee0:	f001 fb8e 	bl	8003600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ee4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eea:	2302      	movs	r3, #2
 8001eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001ef6:	230c      	movs	r3, #12
 8001ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efa:	f107 031c 	add.w	r3, r7, #28
 8001efe:	4619      	mov	r1, r3
 8001f00:	484d      	ldr	r0, [pc, #308]	@ (8002038 <HAL_SD_MspInit+0x208>)
 8001f02:	f001 fb7d 	bl	8003600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001f06:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f14:	2303      	movs	r3, #3
 8001f16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001f18:	230c      	movs	r3, #12
 8001f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f1c:	f107 031c 	add.w	r3, r7, #28
 8001f20:	4619      	mov	r1, r3
 8001f22:	4846      	ldr	r0, [pc, #280]	@ (800203c <HAL_SD_MspInit+0x20c>)
 8001f24:	f001 fb6c 	bl	8003600 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001f28:	4b45      	ldr	r3, [pc, #276]	@ (8002040 <HAL_SD_MspInit+0x210>)
 8001f2a:	4a46      	ldr	r2, [pc, #280]	@ (8002044 <HAL_SD_MspInit+0x214>)
 8001f2c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001f2e:	4b44      	ldr	r3, [pc, #272]	@ (8002040 <HAL_SD_MspInit+0x210>)
 8001f30:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f34:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f36:	4b42      	ldr	r3, [pc, #264]	@ (8002040 <HAL_SD_MspInit+0x210>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f3c:	4b40      	ldr	r3, [pc, #256]	@ (8002040 <HAL_SD_MspInit+0x210>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f42:	4b3f      	ldr	r3, [pc, #252]	@ (8002040 <HAL_SD_MspInit+0x210>)
 8001f44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f48:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f4a:	4b3d      	ldr	r3, [pc, #244]	@ (8002040 <HAL_SD_MspInit+0x210>)
 8001f4c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f50:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f52:	4b3b      	ldr	r3, [pc, #236]	@ (8002040 <HAL_SD_MspInit+0x210>)
 8001f54:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f58:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001f5a:	4b39      	ldr	r3, [pc, #228]	@ (8002040 <HAL_SD_MspInit+0x210>)
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f60:	4b37      	ldr	r3, [pc, #220]	@ (8002040 <HAL_SD_MspInit+0x210>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001f66:	4b36      	ldr	r3, [pc, #216]	@ (8002040 <HAL_SD_MspInit+0x210>)
 8001f68:	2204      	movs	r2, #4
 8001f6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001f6c:	4b34      	ldr	r3, [pc, #208]	@ (8002040 <HAL_SD_MspInit+0x210>)
 8001f6e:	2203      	movs	r2, #3
 8001f70:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001f72:	4b33      	ldr	r3, [pc, #204]	@ (8002040 <HAL_SD_MspInit+0x210>)
 8001f74:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001f78:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001f7a:	4b31      	ldr	r3, [pc, #196]	@ (8002040 <HAL_SD_MspInit+0x210>)
 8001f7c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001f80:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001f82:	482f      	ldr	r0, [pc, #188]	@ (8002040 <HAL_SD_MspInit+0x210>)
 8001f84:	f000 ff2e 	bl	8002de4 <HAL_DMA_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_SD_MspInit+0x162>
    {
      Error_Handler();
 8001f8e:	f7ff fdfb 	bl	8001b88 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a2a      	ldr	r2, [pc, #168]	@ (8002040 <HAL_SD_MspInit+0x210>)
 8001f96:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f98:	4a29      	ldr	r2, [pc, #164]	@ (8002040 <HAL_SD_MspInit+0x210>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001f9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002048 <HAL_SD_MspInit+0x218>)
 8001fa0:	4a2a      	ldr	r2, [pc, #168]	@ (800204c <HAL_SD_MspInit+0x21c>)
 8001fa2:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001fa4:	4b28      	ldr	r3, [pc, #160]	@ (8002048 <HAL_SD_MspInit+0x218>)
 8001fa6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001faa:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fac:	4b26      	ldr	r3, [pc, #152]	@ (8002048 <HAL_SD_MspInit+0x218>)
 8001fae:	2240      	movs	r2, #64	@ 0x40
 8001fb0:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb2:	4b25      	ldr	r3, [pc, #148]	@ (8002048 <HAL_SD_MspInit+0x218>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fb8:	4b23      	ldr	r3, [pc, #140]	@ (8002048 <HAL_SD_MspInit+0x218>)
 8001fba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fbe:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001fc0:	4b21      	ldr	r3, [pc, #132]	@ (8002048 <HAL_SD_MspInit+0x218>)
 8001fc2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001fc6:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8002048 <HAL_SD_MspInit+0x218>)
 8001fca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001fce:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8002048 <HAL_SD_MspInit+0x218>)
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8002048 <HAL_SD_MspInit+0x218>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8002048 <HAL_SD_MspInit+0x218>)
 8001fde:	2204      	movs	r2, #4
 8001fe0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001fe2:	4b19      	ldr	r3, [pc, #100]	@ (8002048 <HAL_SD_MspInit+0x218>)
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001fe8:	4b17      	ldr	r3, [pc, #92]	@ (8002048 <HAL_SD_MspInit+0x218>)
 8001fea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001fee:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001ff0:	4b15      	ldr	r3, [pc, #84]	@ (8002048 <HAL_SD_MspInit+0x218>)
 8001ff2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001ff6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001ff8:	4813      	ldr	r0, [pc, #76]	@ (8002048 <HAL_SD_MspInit+0x218>)
 8001ffa:	f000 fef3 	bl	8002de4 <HAL_DMA_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <HAL_SD_MspInit+0x1d8>
    {
      Error_Handler();
 8002004:	f7ff fdc0 	bl	8001b88 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a0f      	ldr	r2, [pc, #60]	@ (8002048 <HAL_SD_MspInit+0x218>)
 800200c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800200e:	4a0e      	ldr	r2, [pc, #56]	@ (8002048 <HAL_SD_MspInit+0x218>)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002014:	2200      	movs	r2, #0
 8002016:	2100      	movs	r1, #0
 8002018:	2031      	movs	r0, #49	@ 0x31
 800201a:	f000 feac 	bl	8002d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800201e:	2031      	movs	r0, #49	@ 0x31
 8002020:	f000 fec5 	bl	8002dae <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8002024:	bf00      	nop
 8002026:	3730      	adds	r7, #48	@ 0x30
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40012c00 	.word	0x40012c00
 8002030:	40023800 	.word	0x40023800
 8002034:	40020000 	.word	0x40020000
 8002038:	40020400 	.word	0x40020400
 800203c:	40020800 	.word	0x40020800
 8002040:	20000498 	.word	0x20000498
 8002044:	40026458 	.word	0x40026458
 8002048:	200004f8 	.word	0x200004f8
 800204c:	400264a0 	.word	0x400264a0

08002050 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002050:	b480      	push	{r7}
 8002052:	b087      	sub	sp, #28
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a1f      	ldr	r2, [pc, #124]	@ (80020dc <HAL_TIM_PWM_MspInit+0x8c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d10e      	bne.n	8002080 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	4b1e      	ldr	r3, [pc, #120]	@ (80020e0 <HAL_TIM_PWM_MspInit+0x90>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206a:	4a1d      	ldr	r2, [pc, #116]	@ (80020e0 <HAL_TIM_PWM_MspInit+0x90>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	6453      	str	r3, [r2, #68]	@ 0x44
 8002072:	4b1b      	ldr	r3, [pc, #108]	@ (80020e0 <HAL_TIM_PWM_MspInit+0x90>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800207e:	e026      	b.n	80020ce <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002088:	d10e      	bne.n	80020a8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	4b14      	ldr	r3, [pc, #80]	@ (80020e0 <HAL_TIM_PWM_MspInit+0x90>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002092:	4a13      	ldr	r2, [pc, #76]	@ (80020e0 <HAL_TIM_PWM_MspInit+0x90>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	6413      	str	r3, [r2, #64]	@ 0x40
 800209a:	4b11      	ldr	r3, [pc, #68]	@ (80020e0 <HAL_TIM_PWM_MspInit+0x90>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	693b      	ldr	r3, [r7, #16]
}
 80020a6:	e012      	b.n	80020ce <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0d      	ldr	r2, [pc, #52]	@ (80020e4 <HAL_TIM_PWM_MspInit+0x94>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d10d      	bne.n	80020ce <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	4b0a      	ldr	r3, [pc, #40]	@ (80020e0 <HAL_TIM_PWM_MspInit+0x90>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	4a09      	ldr	r2, [pc, #36]	@ (80020e0 <HAL_TIM_PWM_MspInit+0x90>)
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020c2:	4b07      	ldr	r3, [pc, #28]	@ (80020e0 <HAL_TIM_PWM_MspInit+0x90>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
}
 80020ce:	bf00      	nop
 80020d0:	371c      	adds	r7, #28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40010000 	.word	0x40010000
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40000400 	.word	0x40000400

080020e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08a      	sub	sp, #40	@ 0x28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a36      	ldr	r2, [pc, #216]	@ (80021e0 <HAL_TIM_MspPostInit+0xf8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d11f      	bne.n	800214a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	4b35      	ldr	r3, [pc, #212]	@ (80021e4 <HAL_TIM_MspPostInit+0xfc>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	4a34      	ldr	r2, [pc, #208]	@ (80021e4 <HAL_TIM_MspPostInit+0xfc>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6313      	str	r3, [r2, #48]	@ 0x30
 800211a:	4b32      	ldr	r3, [pc, #200]	@ (80021e4 <HAL_TIM_MspPostInit+0xfc>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002126:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800212a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212c:	2302      	movs	r3, #2
 800212e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002134:	2300      	movs	r3, #0
 8002136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002138:	2301      	movs	r3, #1
 800213a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213c:	f107 0314 	add.w	r3, r7, #20
 8002140:	4619      	mov	r1, r3
 8002142:	4829      	ldr	r0, [pc, #164]	@ (80021e8 <HAL_TIM_MspPostInit+0x100>)
 8002144:	f001 fa5c 	bl	8003600 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002148:	e046      	b.n	80021d8 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM2)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002152:	d11e      	bne.n	8002192 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	4b22      	ldr	r3, [pc, #136]	@ (80021e4 <HAL_TIM_MspPostInit+0xfc>)
 800215a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215c:	4a21      	ldr	r2, [pc, #132]	@ (80021e4 <HAL_TIM_MspPostInit+0xfc>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	6313      	str	r3, [r2, #48]	@ 0x30
 8002164:	4b1f      	ldr	r3, [pc, #124]	@ (80021e4 <HAL_TIM_MspPostInit+0xfc>)
 8002166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002170:	2320      	movs	r3, #32
 8002172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002174:	2302      	movs	r3, #2
 8002176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217c:	2300      	movs	r3, #0
 800217e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002180:	2301      	movs	r3, #1
 8002182:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	4619      	mov	r1, r3
 800218a:	4817      	ldr	r0, [pc, #92]	@ (80021e8 <HAL_TIM_MspPostInit+0x100>)
 800218c:	f001 fa38 	bl	8003600 <HAL_GPIO_Init>
}
 8002190:	e022      	b.n	80021d8 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a15      	ldr	r2, [pc, #84]	@ (80021ec <HAL_TIM_MspPostInit+0x104>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d11d      	bne.n	80021d8 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800219c:	2300      	movs	r3, #0
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	4b10      	ldr	r3, [pc, #64]	@ (80021e4 <HAL_TIM_MspPostInit+0xfc>)
 80021a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a4:	4a0f      	ldr	r2, [pc, #60]	@ (80021e4 <HAL_TIM_MspPostInit+0xfc>)
 80021a6:	f043 0304 	orr.w	r3, r3, #4
 80021aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ac:	4b0d      	ldr	r3, [pc, #52]	@ (80021e4 <HAL_TIM_MspPostInit+0xfc>)
 80021ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021b8:	2340      	movs	r3, #64	@ 0x40
 80021ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021bc:	2302      	movs	r3, #2
 80021be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c4:	2300      	movs	r3, #0
 80021c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021c8:	2302      	movs	r3, #2
 80021ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	4619      	mov	r1, r3
 80021d2:	4807      	ldr	r0, [pc, #28]	@ (80021f0 <HAL_TIM_MspPostInit+0x108>)
 80021d4:	f001 fa14 	bl	8003600 <HAL_GPIO_Init>
}
 80021d8:	bf00      	nop
 80021da:	3728      	adds	r7, #40	@ 0x28
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40010000 	.word	0x40010000
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40020000 	.word	0x40020000
 80021ec:	40000400 	.word	0x40000400
 80021f0:	40020800 	.word	0x40020800

080021f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08c      	sub	sp, #48	@ 0x30
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fc:	f107 031c 	add.w	r3, r7, #28
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a36      	ldr	r2, [pc, #216]	@ (80022ec <HAL_UART_MspInit+0xf8>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d135      	bne.n	8002282 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	61bb      	str	r3, [r7, #24]
 800221a:	4b35      	ldr	r3, [pc, #212]	@ (80022f0 <HAL_UART_MspInit+0xfc>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221e:	4a34      	ldr	r2, [pc, #208]	@ (80022f0 <HAL_UART_MspInit+0xfc>)
 8002220:	f043 0310 	orr.w	r3, r3, #16
 8002224:	6453      	str	r3, [r2, #68]	@ 0x44
 8002226:	4b32      	ldr	r3, [pc, #200]	@ (80022f0 <HAL_UART_MspInit+0xfc>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	61bb      	str	r3, [r7, #24]
 8002230:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	4b2e      	ldr	r3, [pc, #184]	@ (80022f0 <HAL_UART_MspInit+0xfc>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223a:	4a2d      	ldr	r2, [pc, #180]	@ (80022f0 <HAL_UART_MspInit+0xfc>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	6313      	str	r3, [r2, #48]	@ 0x30
 8002242:	4b2b      	ldr	r3, [pc, #172]	@ (80022f0 <HAL_UART_MspInit+0xfc>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800224e:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8002252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002254:	2302      	movs	r3, #2
 8002256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225c:	2303      	movs	r3, #3
 800225e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002260:	2307      	movs	r3, #7
 8002262:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002264:	f107 031c 	add.w	r3, r7, #28
 8002268:	4619      	mov	r1, r3
 800226a:	4822      	ldr	r0, [pc, #136]	@ (80022f4 <HAL_UART_MspInit+0x100>)
 800226c:	f001 f9c8 	bl	8003600 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002270:	2200      	movs	r2, #0
 8002272:	2100      	movs	r1, #0
 8002274:	2025      	movs	r0, #37	@ 0x25
 8002276:	f000 fd7e 	bl	8002d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800227a:	2025      	movs	r0, #37	@ 0x25
 800227c:	f000 fd97 	bl	8002dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002280:	e030      	b.n	80022e4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a1c      	ldr	r2, [pc, #112]	@ (80022f8 <HAL_UART_MspInit+0x104>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d12b      	bne.n	80022e4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800228c:	2300      	movs	r3, #0
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	4b17      	ldr	r3, [pc, #92]	@ (80022f0 <HAL_UART_MspInit+0xfc>)
 8002292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002294:	4a16      	ldr	r2, [pc, #88]	@ (80022f0 <HAL_UART_MspInit+0xfc>)
 8002296:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800229a:	6413      	str	r3, [r2, #64]	@ 0x40
 800229c:	4b14      	ldr	r3, [pc, #80]	@ (80022f0 <HAL_UART_MspInit+0xfc>)
 800229e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	4b10      	ldr	r3, [pc, #64]	@ (80022f0 <HAL_UART_MspInit+0xfc>)
 80022ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b0:	4a0f      	ldr	r2, [pc, #60]	@ (80022f0 <HAL_UART_MspInit+0xfc>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b8:	4b0d      	ldr	r3, [pc, #52]	@ (80022f0 <HAL_UART_MspInit+0xfc>)
 80022ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022c4:	230c      	movs	r3, #12
 80022c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c8:	2302      	movs	r3, #2
 80022ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d0:	2303      	movs	r3, #3
 80022d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022d4:	2307      	movs	r3, #7
 80022d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d8:	f107 031c 	add.w	r3, r7, #28
 80022dc:	4619      	mov	r1, r3
 80022de:	4805      	ldr	r0, [pc, #20]	@ (80022f4 <HAL_UART_MspInit+0x100>)
 80022e0:	f001 f98e 	bl	8003600 <HAL_GPIO_Init>
}
 80022e4:	bf00      	nop
 80022e6:	3730      	adds	r7, #48	@ 0x30
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40011000 	.word	0x40011000
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40020000 	.word	0x40020000
 80022f8:	40004400 	.word	0x40004400

080022fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002300:	bf00      	nop
 8002302:	e7fd      	b.n	8002300 <NMI_Handler+0x4>

08002304 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002308:	bf00      	nop
 800230a:	e7fd      	b.n	8002308 <HardFault_Handler+0x4>

0800230c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002310:	bf00      	nop
 8002312:	e7fd      	b.n	8002310 <MemManage_Handler+0x4>

08002314 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002318:	bf00      	nop
 800231a:	e7fd      	b.n	8002318 <BusFault_Handler+0x4>

0800231c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002320:	bf00      	nop
 8002322:	e7fd      	b.n	8002320 <UsageFault_Handler+0x4>

08002324 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002352:	f000 f97f 	bl	8002654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002360:	4802      	ldr	r0, [pc, #8]	@ (800236c <USART1_IRQHandler+0x10>)
 8002362:	f004 f821 	bl	80063a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000630 	.word	0x20000630

08002370 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002374:	4802      	ldr	r0, [pc, #8]	@ (8002380 <SDIO_IRQHandler+0x10>)
 8002376:	f002 faf5 	bl	8004964 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000414 	.word	0x20000414

08002384 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002388:	4802      	ldr	r0, [pc, #8]	@ (8002394 <DMA2_Stream3_IRQHandler+0x10>)
 800238a:	f000 fec3 	bl	8003114 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000498 	.word	0x20000498

08002398 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800239c:	4802      	ldr	r0, [pc, #8]	@ (80023a8 <DMA2_Stream6_IRQHandler+0x10>)
 800239e:	f000 feb9 	bl	8003114 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	200004f8 	.word	0x200004f8

080023ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return 1;
 80023b0:	2301      	movs	r3, #1
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <_kill>:

int _kill(int pid, int sig)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023c6:	f006 ffaf 	bl	8009328 <__errno>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2216      	movs	r2, #22
 80023ce:	601a      	str	r2, [r3, #0]
  return -1;
 80023d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <_exit>:

void _exit (int status)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023e4:	f04f 31ff 	mov.w	r1, #4294967295
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff ffe7 	bl	80023bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80023ee:	bf00      	nop
 80023f0:	e7fd      	b.n	80023ee <_exit+0x12>

080023f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b086      	sub	sp, #24
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	e00a      	b.n	800241a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002404:	f3af 8000 	nop.w
 8002408:	4601      	mov	r1, r0
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	60ba      	str	r2, [r7, #8]
 8002410:	b2ca      	uxtb	r2, r1
 8002412:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	3301      	adds	r3, #1
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	429a      	cmp	r2, r3
 8002420:	dbf0      	blt.n	8002404 <_read+0x12>
  }

  return len;
 8002422:	687b      	ldr	r3, [r7, #4]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
 800243c:	e009      	b.n	8002452 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	60ba      	str	r2, [r7, #8]
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	3301      	adds	r3, #1
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	429a      	cmp	r2, r3
 8002458:	dbf1      	blt.n	800243e <_write+0x12>
  }
  return len;
 800245a:	687b      	ldr	r3, [r7, #4]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <_close>:

int _close(int file)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800246c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800248c:	605a      	str	r2, [r3, #4]
  return 0;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <_isatty>:

int _isatty(int file)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024a4:	2301      	movs	r3, #1
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b085      	sub	sp, #20
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024d4:	4a14      	ldr	r2, [pc, #80]	@ (8002528 <_sbrk+0x5c>)
 80024d6:	4b15      	ldr	r3, [pc, #84]	@ (800252c <_sbrk+0x60>)
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024e0:	4b13      	ldr	r3, [pc, #76]	@ (8002530 <_sbrk+0x64>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d102      	bne.n	80024ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024e8:	4b11      	ldr	r3, [pc, #68]	@ (8002530 <_sbrk+0x64>)
 80024ea:	4a12      	ldr	r2, [pc, #72]	@ (8002534 <_sbrk+0x68>)
 80024ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ee:	4b10      	ldr	r3, [pc, #64]	@ (8002530 <_sbrk+0x64>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d207      	bcs.n	800250c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024fc:	f006 ff14 	bl	8009328 <__errno>
 8002500:	4603      	mov	r3, r0
 8002502:	220c      	movs	r2, #12
 8002504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002506:	f04f 33ff 	mov.w	r3, #4294967295
 800250a:	e009      	b.n	8002520 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800250c:	4b08      	ldr	r3, [pc, #32]	@ (8002530 <_sbrk+0x64>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002512:	4b07      	ldr	r3, [pc, #28]	@ (8002530 <_sbrk+0x64>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4413      	add	r3, r2
 800251a:	4a05      	ldr	r2, [pc, #20]	@ (8002530 <_sbrk+0x64>)
 800251c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800251e:	68fb      	ldr	r3, [r7, #12]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20020000 	.word	0x20020000
 800252c:	00000400 	.word	0x00000400
 8002530:	200006d0 	.word	0x200006d0
 8002534:	20000840 	.word	0x20000840

08002538 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800253c:	4b06      	ldr	r3, [pc, #24]	@ (8002558 <SystemInit+0x20>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002542:	4a05      	ldr	r2, [pc, #20]	@ (8002558 <SystemInit+0x20>)
 8002544:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002548:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800255c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002594 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002560:	f7ff ffea 	bl	8002538 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002564:	480c      	ldr	r0, [pc, #48]	@ (8002598 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002566:	490d      	ldr	r1, [pc, #52]	@ (800259c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002568:	4a0d      	ldr	r2, [pc, #52]	@ (80025a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800256a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800256c:	e002      	b.n	8002574 <LoopCopyDataInit>

0800256e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800256e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002572:	3304      	adds	r3, #4

08002574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002578:	d3f9      	bcc.n	800256e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800257a:	4a0a      	ldr	r2, [pc, #40]	@ (80025a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800257c:	4c0a      	ldr	r4, [pc, #40]	@ (80025a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800257e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002580:	e001      	b.n	8002586 <LoopFillZerobss>

08002582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002584:	3204      	adds	r2, #4

08002586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002588:	d3fb      	bcc.n	8002582 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800258a:	f006 fed3 	bl	8009334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800258e:	f7fe ff19 	bl	80013c4 <main>
  bx  lr    
 8002592:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002594:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800259c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80025a0:	0800d644 	.word	0x0800d644
  ldr r2, =_sbss
 80025a4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80025a8:	20000840 	.word	0x20000840

080025ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025ac:	e7fe      	b.n	80025ac <ADC_IRQHandler>
	...

080025b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025b4:	4b0e      	ldr	r3, [pc, #56]	@ (80025f0 <HAL_Init+0x40>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a0d      	ldr	r2, [pc, #52]	@ (80025f0 <HAL_Init+0x40>)
 80025ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025c0:	4b0b      	ldr	r3, [pc, #44]	@ (80025f0 <HAL_Init+0x40>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a0a      	ldr	r2, [pc, #40]	@ (80025f0 <HAL_Init+0x40>)
 80025c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025cc:	4b08      	ldr	r3, [pc, #32]	@ (80025f0 <HAL_Init+0x40>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a07      	ldr	r2, [pc, #28]	@ (80025f0 <HAL_Init+0x40>)
 80025d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025d8:	2003      	movs	r0, #3
 80025da:	f000 fbc1 	bl	8002d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025de:	200f      	movs	r0, #15
 80025e0:	f000 f808 	bl	80025f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025e4:	f7ff fad6 	bl	8001b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40023c00 	.word	0x40023c00

080025f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025fc:	4b12      	ldr	r3, [pc, #72]	@ (8002648 <HAL_InitTick+0x54>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4b12      	ldr	r3, [pc, #72]	@ (800264c <HAL_InitTick+0x58>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	4619      	mov	r1, r3
 8002606:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800260a:	fbb3 f3f1 	udiv	r3, r3, r1
 800260e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002612:	4618      	mov	r0, r3
 8002614:	f000 fbd9 	bl	8002dca <HAL_SYSTICK_Config>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e00e      	b.n	8002640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b0f      	cmp	r3, #15
 8002626:	d80a      	bhi.n	800263e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002628:	2200      	movs	r2, #0
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	f04f 30ff 	mov.w	r0, #4294967295
 8002630:	f000 fba1 	bl	8002d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002634:	4a06      	ldr	r2, [pc, #24]	@ (8002650 <HAL_InitTick+0x5c>)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	e000      	b.n	8002640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
}
 8002640:	4618      	mov	r0, r3
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20000000 	.word	0x20000000
 800264c:	20000008 	.word	0x20000008
 8002650:	20000004 	.word	0x20000004

08002654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002658:	4b06      	ldr	r3, [pc, #24]	@ (8002674 <HAL_IncTick+0x20>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	4b06      	ldr	r3, [pc, #24]	@ (8002678 <HAL_IncTick+0x24>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4413      	add	r3, r2
 8002664:	4a04      	ldr	r2, [pc, #16]	@ (8002678 <HAL_IncTick+0x24>)
 8002666:	6013      	str	r3, [r2, #0]
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	20000008 	.word	0x20000008
 8002678:	200006d4 	.word	0x200006d4

0800267c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return uwTick;
 8002680:	4b03      	ldr	r3, [pc, #12]	@ (8002690 <HAL_GetTick+0x14>)
 8002682:	681b      	ldr	r3, [r3, #0]
}
 8002684:	4618      	mov	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	200006d4 	.word	0x200006d4

08002694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800269c:	f7ff ffee 	bl	800267c <HAL_GetTick>
 80026a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ac:	d005      	beq.n	80026ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ae:	4b0a      	ldr	r3, [pc, #40]	@ (80026d8 <HAL_Delay+0x44>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4413      	add	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026ba:	bf00      	nop
 80026bc:	f7ff ffde 	bl	800267c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d8f7      	bhi.n	80026bc <HAL_Delay+0x28>
  {
  }
}
 80026cc:	bf00      	nop
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000008 	.word	0x20000008

080026dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026e4:	2300      	movs	r3, #0
 80026e6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e033      	b.n	800275a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d109      	bne.n	800270e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff fa72 	bl	8001be4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002712:	f003 0310 	and.w	r3, r3, #16
 8002716:	2b00      	cmp	r3, #0
 8002718:	d118      	bne.n	800274c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002722:	f023 0302 	bic.w	r3, r3, #2
 8002726:	f043 0202 	orr.w	r2, r3, #2
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f94a 	bl	80029c8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273e:	f023 0303 	bic.w	r3, r3, #3
 8002742:	f043 0201 	orr.w	r2, r3, #1
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	641a      	str	r2, [r3, #64]	@ 0x40
 800274a:	e001      	b.n	8002750 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002758:	7bfb      	ldrb	r3, [r7, #15]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800276e:	2300      	movs	r3, #0
 8002770:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x1c>
 800277c:	2302      	movs	r3, #2
 800277e:	e113      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x244>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b09      	cmp	r3, #9
 800278e:	d925      	bls.n	80027dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68d9      	ldr	r1, [r3, #12]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	b29b      	uxth	r3, r3
 800279c:	461a      	mov	r2, r3
 800279e:	4613      	mov	r3, r2
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4413      	add	r3, r2
 80027a4:	3b1e      	subs	r3, #30
 80027a6:	2207      	movs	r2, #7
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43da      	mvns	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	400a      	ands	r2, r1
 80027b4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68d9      	ldr	r1, [r3, #12]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	4618      	mov	r0, r3
 80027c8:	4603      	mov	r3, r0
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	4403      	add	r3, r0
 80027ce:	3b1e      	subs	r3, #30
 80027d0:	409a      	lsls	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	e022      	b.n	8002822 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6919      	ldr	r1, [r3, #16]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	461a      	mov	r2, r3
 80027ea:	4613      	mov	r3, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4413      	add	r3, r2
 80027f0:	2207      	movs	r2, #7
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43da      	mvns	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	400a      	ands	r2, r1
 80027fe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6919      	ldr	r1, [r3, #16]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	b29b      	uxth	r3, r3
 8002810:	4618      	mov	r0, r3
 8002812:	4603      	mov	r3, r0
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	4403      	add	r3, r0
 8002818:	409a      	lsls	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b06      	cmp	r3, #6
 8002828:	d824      	bhi.n	8002874 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	3b05      	subs	r3, #5
 800283c:	221f      	movs	r2, #31
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43da      	mvns	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	400a      	ands	r2, r1
 800284a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	b29b      	uxth	r3, r3
 8002858:	4618      	mov	r0, r3
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	3b05      	subs	r3, #5
 8002866:	fa00 f203 	lsl.w	r2, r0, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	635a      	str	r2, [r3, #52]	@ 0x34
 8002872:	e04c      	b.n	800290e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b0c      	cmp	r3, #12
 800287a:	d824      	bhi.n	80028c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	3b23      	subs	r3, #35	@ 0x23
 800288e:	221f      	movs	r2, #31
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43da      	mvns	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	400a      	ands	r2, r1
 800289c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	4618      	mov	r0, r3
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	3b23      	subs	r3, #35	@ 0x23
 80028b8:	fa00 f203 	lsl.w	r2, r0, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80028c4:	e023      	b.n	800290e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	4613      	mov	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	3b41      	subs	r3, #65	@ 0x41
 80028d8:	221f      	movs	r2, #31
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43da      	mvns	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	400a      	ands	r2, r1
 80028e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	4618      	mov	r0, r3
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	3b41      	subs	r3, #65	@ 0x41
 8002902:	fa00 f203 	lsl.w	r2, r0, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800290e:	4b29      	ldr	r3, [pc, #164]	@ (80029b4 <HAL_ADC_ConfigChannel+0x250>)
 8002910:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a28      	ldr	r2, [pc, #160]	@ (80029b8 <HAL_ADC_ConfigChannel+0x254>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d10f      	bne.n	800293c <HAL_ADC_ConfigChannel+0x1d8>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b12      	cmp	r3, #18
 8002922:	d10b      	bne.n	800293c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a1d      	ldr	r2, [pc, #116]	@ (80029b8 <HAL_ADC_ConfigChannel+0x254>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d12b      	bne.n	800299e <HAL_ADC_ConfigChannel+0x23a>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a1c      	ldr	r2, [pc, #112]	@ (80029bc <HAL_ADC_ConfigChannel+0x258>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d003      	beq.n	8002958 <HAL_ADC_ConfigChannel+0x1f4>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b11      	cmp	r3, #17
 8002956:	d122      	bne.n	800299e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a11      	ldr	r2, [pc, #68]	@ (80029bc <HAL_ADC_ConfigChannel+0x258>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d111      	bne.n	800299e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800297a:	4b11      	ldr	r3, [pc, #68]	@ (80029c0 <HAL_ADC_ConfigChannel+0x25c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a11      	ldr	r2, [pc, #68]	@ (80029c4 <HAL_ADC_ConfigChannel+0x260>)
 8002980:	fba2 2303 	umull	r2, r3, r2, r3
 8002984:	0c9a      	lsrs	r2, r3, #18
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002990:	e002      	b.n	8002998 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	3b01      	subs	r3, #1
 8002996:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f9      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	40012300 	.word	0x40012300
 80029b8:	40012000 	.word	0x40012000
 80029bc:	10000012 	.word	0x10000012
 80029c0:	20000000 	.word	0x20000000
 80029c4:	431bde83 	.word	0x431bde83

080029c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029d0:	4b79      	ldr	r3, [pc, #484]	@ (8002bb8 <ADC_Init+0x1f0>)
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	431a      	orrs	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6859      	ldr	r1, [r3, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	021a      	lsls	r2, r3, #8
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002a20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6859      	ldr	r1, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6899      	ldr	r1, [r3, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68da      	ldr	r2, [r3, #12]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a5a:	4a58      	ldr	r2, [pc, #352]	@ (8002bbc <ADC_Init+0x1f4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d022      	beq.n	8002aa6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6899      	ldr	r1, [r3, #8]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6899      	ldr	r1, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	e00f      	b.n	8002ac6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ab4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ac4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0202 	bic.w	r2, r2, #2
 8002ad4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6899      	ldr	r1, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	7e1b      	ldrb	r3, [r3, #24]
 8002ae0:	005a      	lsls	r2, r3, #1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d01b      	beq.n	8002b2c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b02:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002b12:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6859      	ldr	r1, [r3, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	035a      	lsls	r2, r3, #13
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	e007      	b.n	8002b3c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b3a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	051a      	lsls	r2, r3, #20
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6899      	ldr	r1, [r3, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b7e:	025a      	lsls	r2, r3, #9
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6899      	ldr	r1, [r3, #8]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	029a      	lsls	r2, r3, #10
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	609a      	str	r2, [r3, #8]
}
 8002bac:	bf00      	nop
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	40012300 	.word	0x40012300
 8002bbc:	0f000001 	.word	0x0f000001

08002bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c04 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bdc:	4013      	ands	r3, r2
 8002bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002be8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bf2:	4a04      	ldr	r2, [pc, #16]	@ (8002c04 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	60d3      	str	r3, [r2, #12]
}
 8002bf8:	bf00      	nop
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	e000ed00 	.word	0xe000ed00

08002c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c0c:	4b04      	ldr	r3, [pc, #16]	@ (8002c20 <__NVIC_GetPriorityGrouping+0x18>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	0a1b      	lsrs	r3, r3, #8
 8002c12:	f003 0307 	and.w	r3, r3, #7
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	db0b      	blt.n	8002c4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	f003 021f 	and.w	r2, r3, #31
 8002c3c:	4907      	ldr	r1, [pc, #28]	@ (8002c5c <__NVIC_EnableIRQ+0x38>)
 8002c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	2001      	movs	r0, #1
 8002c46:	fa00 f202 	lsl.w	r2, r0, r2
 8002c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	e000e100 	.word	0xe000e100

08002c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	6039      	str	r1, [r7, #0]
 8002c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	db0a      	blt.n	8002c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	490c      	ldr	r1, [pc, #48]	@ (8002cac <__NVIC_SetPriority+0x4c>)
 8002c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7e:	0112      	lsls	r2, r2, #4
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	440b      	add	r3, r1
 8002c84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c88:	e00a      	b.n	8002ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	4908      	ldr	r1, [pc, #32]	@ (8002cb0 <__NVIC_SetPriority+0x50>)
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	3b04      	subs	r3, #4
 8002c98:	0112      	lsls	r2, r2, #4
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	761a      	strb	r2, [r3, #24]
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	e000e100 	.word	0xe000e100
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b089      	sub	sp, #36	@ 0x24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f1c3 0307 	rsb	r3, r3, #7
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	bf28      	it	cs
 8002cd2:	2304      	movcs	r3, #4
 8002cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	2b06      	cmp	r3, #6
 8002cdc:	d902      	bls.n	8002ce4 <NVIC_EncodePriority+0x30>
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	3b03      	subs	r3, #3
 8002ce2:	e000      	b.n	8002ce6 <NVIC_EncodePriority+0x32>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43da      	mvns	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	fa01 f303 	lsl.w	r3, r1, r3
 8002d06:	43d9      	mvns	r1, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d0c:	4313      	orrs	r3, r2
         );
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3724      	adds	r7, #36	@ 0x24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
	...

08002d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d2c:	d301      	bcc.n	8002d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e00f      	b.n	8002d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d32:	4a0a      	ldr	r2, [pc, #40]	@ (8002d5c <SysTick_Config+0x40>)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d3a:	210f      	movs	r1, #15
 8002d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d40:	f7ff ff8e 	bl	8002c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d44:	4b05      	ldr	r3, [pc, #20]	@ (8002d5c <SysTick_Config+0x40>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d4a:	4b04      	ldr	r3, [pc, #16]	@ (8002d5c <SysTick_Config+0x40>)
 8002d4c:	2207      	movs	r2, #7
 8002d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	e000e010 	.word	0xe000e010

08002d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff ff29 	bl	8002bc0 <__NVIC_SetPriorityGrouping>
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b086      	sub	sp, #24
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
 8002d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d88:	f7ff ff3e 	bl	8002c08 <__NVIC_GetPriorityGrouping>
 8002d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	6978      	ldr	r0, [r7, #20]
 8002d94:	f7ff ff8e 	bl	8002cb4 <NVIC_EncodePriority>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d9e:	4611      	mov	r1, r2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ff5d 	bl	8002c60 <__NVIC_SetPriority>
}
 8002da6:	bf00      	nop
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	4603      	mov	r3, r0
 8002db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff ff31 	bl	8002c24 <__NVIC_EnableIRQ>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7ff ffa2 	bl	8002d1c <SysTick_Config>
 8002dd8:	4603      	mov	r3, r0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002df0:	f7ff fc44 	bl	800267c <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e099      	b.n	8002f34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0201 	bic.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e20:	e00f      	b.n	8002e42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e22:	f7ff fc2b 	bl	800267c <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b05      	cmp	r3, #5
 8002e2e:	d908      	bls.n	8002e42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2203      	movs	r2, #3
 8002e3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e078      	b.n	8002f34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1e8      	bne.n	8002e22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	4b38      	ldr	r3, [pc, #224]	@ (8002f3c <HAL_DMA_Init+0x158>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d107      	bne.n	8002eac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f023 0307 	bic.w	r3, r3, #7
 8002ec2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d117      	bne.n	8002f06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00e      	beq.n	8002f06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 fb0d 	bl	8003508 <DMA_CheckFifoParam>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d008      	beq.n	8002f06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2240      	movs	r2, #64	@ 0x40
 8002ef8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002f02:	2301      	movs	r3, #1
 8002f04:	e016      	b.n	8002f34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 fac4 	bl	800349c <DMA_CalcBaseAndBitshift>
 8002f14:	4603      	mov	r3, r0
 8002f16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1c:	223f      	movs	r2, #63	@ 0x3f
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	f010803f 	.word	0xf010803f

08002f40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
 8002f4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_DMA_Start_IT+0x26>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e040      	b.n	8002fe8 <HAL_DMA_Start_IT+0xa8>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d12f      	bne.n	8002fda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 fa56 	bl	8003440 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f98:	223f      	movs	r2, #63	@ 0x3f
 8002f9a:	409a      	lsls	r2, r3
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0216 	orr.w	r2, r2, #22
 8002fae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d007      	beq.n	8002fc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0208 	orr.w	r2, r2, #8
 8002fc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	e005      	b.n	8002fe6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ffe:	f7ff fb3d 	bl	800267c <HAL_GetTick>
 8003002:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d008      	beq.n	8003022 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2280      	movs	r2, #128	@ 0x80
 8003014:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e052      	b.n	80030c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0216 	bic.w	r2, r2, #22
 8003030:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695a      	ldr	r2, [r3, #20]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003040:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003046:	2b00      	cmp	r3, #0
 8003048:	d103      	bne.n	8003052 <HAL_DMA_Abort+0x62>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800304e:	2b00      	cmp	r3, #0
 8003050:	d007      	beq.n	8003062 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0208 	bic.w	r2, r2, #8
 8003060:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0201 	bic.w	r2, r2, #1
 8003070:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003072:	e013      	b.n	800309c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003074:	f7ff fb02 	bl	800267c <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b05      	cmp	r3, #5
 8003080:	d90c      	bls.n	800309c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2220      	movs	r2, #32
 8003086:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2203      	movs	r2, #3
 800308c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e015      	b.n	80030c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1e4      	bne.n	8003074 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ae:	223f      	movs	r2, #63	@ 0x3f
 80030b0:	409a      	lsls	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d004      	beq.n	80030ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2280      	movs	r2, #128	@ 0x80
 80030e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e00c      	b.n	8003108 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2205      	movs	r2, #5
 80030f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0201 	bic.w	r2, r2, #1
 8003104:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003120:	4b8e      	ldr	r3, [pc, #568]	@ (800335c <HAL_DMA_IRQHandler+0x248>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a8e      	ldr	r2, [pc, #568]	@ (8003360 <HAL_DMA_IRQHandler+0x24c>)
 8003126:	fba2 2303 	umull	r2, r3, r2, r3
 800312a:	0a9b      	lsrs	r3, r3, #10
 800312c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003132:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800313e:	2208      	movs	r2, #8
 8003140:	409a      	lsls	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4013      	ands	r3, r2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d01a      	beq.n	8003180 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d013      	beq.n	8003180 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0204 	bic.w	r2, r2, #4
 8003166:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800316c:	2208      	movs	r2, #8
 800316e:	409a      	lsls	r2, r3
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003178:	f043 0201 	orr.w	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003184:	2201      	movs	r2, #1
 8003186:	409a      	lsls	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4013      	ands	r3, r2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d012      	beq.n	80031b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00b      	beq.n	80031b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a2:	2201      	movs	r2, #1
 80031a4:	409a      	lsls	r2, r3
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ae:	f043 0202 	orr.w	r2, r3, #2
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ba:	2204      	movs	r2, #4
 80031bc:	409a      	lsls	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d012      	beq.n	80031ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00b      	beq.n	80031ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d8:	2204      	movs	r2, #4
 80031da:	409a      	lsls	r2, r3
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e4:	f043 0204 	orr.w	r2, r3, #4
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f0:	2210      	movs	r2, #16
 80031f2:	409a      	lsls	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d043      	beq.n	8003284 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0308 	and.w	r3, r3, #8
 8003206:	2b00      	cmp	r3, #0
 8003208:	d03c      	beq.n	8003284 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320e:	2210      	movs	r2, #16
 8003210:	409a      	lsls	r2, r3
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d018      	beq.n	8003256 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d108      	bne.n	8003244 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d024      	beq.n	8003284 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	4798      	blx	r3
 8003242:	e01f      	b.n	8003284 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003248:	2b00      	cmp	r3, #0
 800324a:	d01b      	beq.n	8003284 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	4798      	blx	r3
 8003254:	e016      	b.n	8003284 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003260:	2b00      	cmp	r3, #0
 8003262:	d107      	bne.n	8003274 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0208 	bic.w	r2, r2, #8
 8003272:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003288:	2220      	movs	r2, #32
 800328a:	409a      	lsls	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4013      	ands	r3, r2
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 808f 	beq.w	80033b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0310 	and.w	r3, r3, #16
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 8087 	beq.w	80033b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032aa:	2220      	movs	r2, #32
 80032ac:	409a      	lsls	r2, r3
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b05      	cmp	r3, #5
 80032bc:	d136      	bne.n	800332c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0216 	bic.w	r2, r2, #22
 80032cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695a      	ldr	r2, [r3, #20]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d103      	bne.n	80032ee <HAL_DMA_IRQHandler+0x1da>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d007      	beq.n	80032fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0208 	bic.w	r2, r2, #8
 80032fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003302:	223f      	movs	r2, #63	@ 0x3f
 8003304:	409a      	lsls	r2, r3
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800331e:	2b00      	cmp	r3, #0
 8003320:	d07e      	beq.n	8003420 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	4798      	blx	r3
        }
        return;
 800332a:	e079      	b.n	8003420 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d01d      	beq.n	8003376 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10d      	bne.n	8003364 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800334c:	2b00      	cmp	r3, #0
 800334e:	d031      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	4798      	blx	r3
 8003358:	e02c      	b.n	80033b4 <HAL_DMA_IRQHandler+0x2a0>
 800335a:	bf00      	nop
 800335c:	20000000 	.word	0x20000000
 8003360:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003368:	2b00      	cmp	r3, #0
 800336a:	d023      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	4798      	blx	r3
 8003374:	e01e      	b.n	80033b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10f      	bne.n	80033a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0210 	bic.w	r2, r2, #16
 8003392:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d032      	beq.n	8003422 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d022      	beq.n	800340e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2205      	movs	r2, #5
 80033cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0201 	bic.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	3301      	adds	r3, #1
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d307      	bcc.n	80033fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f2      	bne.n	80033e0 <HAL_DMA_IRQHandler+0x2cc>
 80033fa:	e000      	b.n	80033fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80033fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003412:	2b00      	cmp	r3, #0
 8003414:	d005      	beq.n	8003422 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	4798      	blx	r3
 800341e:	e000      	b.n	8003422 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003420:	bf00      	nop
    }
  }
}
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003434:	4618      	mov	r0, r3
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
 800344c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800345c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2b40      	cmp	r3, #64	@ 0x40
 800346c:	d108      	bne.n	8003480 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800347e:	e007      	b.n	8003490 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	60da      	str	r2, [r3, #12]
}
 8003490:	bf00      	nop
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	3b10      	subs	r3, #16
 80034ac:	4a14      	ldr	r2, [pc, #80]	@ (8003500 <DMA_CalcBaseAndBitshift+0x64>)
 80034ae:	fba2 2303 	umull	r2, r3, r2, r3
 80034b2:	091b      	lsrs	r3, r3, #4
 80034b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034b6:	4a13      	ldr	r2, [pc, #76]	@ (8003504 <DMA_CalcBaseAndBitshift+0x68>)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4413      	add	r3, r2
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d909      	bls.n	80034de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034d2:	f023 0303 	bic.w	r3, r3, #3
 80034d6:	1d1a      	adds	r2, r3, #4
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	659a      	str	r2, [r3, #88]	@ 0x58
 80034dc:	e007      	b.n	80034ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034e6:	f023 0303 	bic.w	r3, r3, #3
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	aaaaaaab 	.word	0xaaaaaaab
 8003504:	0800d1d0 	.word	0x0800d1d0

08003508 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003518:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d11f      	bne.n	8003562 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b03      	cmp	r3, #3
 8003526:	d856      	bhi.n	80035d6 <DMA_CheckFifoParam+0xce>
 8003528:	a201      	add	r2, pc, #4	@ (adr r2, 8003530 <DMA_CheckFifoParam+0x28>)
 800352a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352e:	bf00      	nop
 8003530:	08003541 	.word	0x08003541
 8003534:	08003553 	.word	0x08003553
 8003538:	08003541 	.word	0x08003541
 800353c:	080035d7 	.word	0x080035d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003544:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d046      	beq.n	80035da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003550:	e043      	b.n	80035da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003556:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800355a:	d140      	bne.n	80035de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003560:	e03d      	b.n	80035de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800356a:	d121      	bne.n	80035b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2b03      	cmp	r3, #3
 8003570:	d837      	bhi.n	80035e2 <DMA_CheckFifoParam+0xda>
 8003572:	a201      	add	r2, pc, #4	@ (adr r2, 8003578 <DMA_CheckFifoParam+0x70>)
 8003574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003578:	08003589 	.word	0x08003589
 800357c:	0800358f 	.word	0x0800358f
 8003580:	08003589 	.word	0x08003589
 8003584:	080035a1 	.word	0x080035a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	73fb      	strb	r3, [r7, #15]
      break;
 800358c:	e030      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003592:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d025      	beq.n	80035e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800359e:	e022      	b.n	80035e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035a8:	d11f      	bne.n	80035ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035ae:	e01c      	b.n	80035ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d903      	bls.n	80035be <DMA_CheckFifoParam+0xb6>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d003      	beq.n	80035c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035bc:	e018      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	73fb      	strb	r3, [r7, #15]
      break;
 80035c2:	e015      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00e      	beq.n	80035ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	73fb      	strb	r3, [r7, #15]
      break;
 80035d4:	e00b      	b.n	80035ee <DMA_CheckFifoParam+0xe6>
      break;
 80035d6:	bf00      	nop
 80035d8:	e00a      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      break;
 80035da:	bf00      	nop
 80035dc:	e008      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      break;
 80035de:	bf00      	nop
 80035e0:	e006      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      break;
 80035e2:	bf00      	nop
 80035e4:	e004      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      break;
 80035e6:	bf00      	nop
 80035e8:	e002      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80035ea:	bf00      	nop
 80035ec:	e000      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      break;
 80035ee:	bf00      	nop
    }
  } 
  
  return status; 
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop

08003600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003600:	b480      	push	{r7}
 8003602:	b089      	sub	sp, #36	@ 0x24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800360a:	2300      	movs	r3, #0
 800360c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800360e:	2300      	movs	r3, #0
 8003610:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003612:	2300      	movs	r3, #0
 8003614:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003616:	2300      	movs	r3, #0
 8003618:	61fb      	str	r3, [r7, #28]
 800361a:	e159      	b.n	80038d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800361c:	2201      	movs	r2, #1
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	4013      	ands	r3, r2
 800362e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	429a      	cmp	r2, r3
 8003636:	f040 8148 	bne.w	80038ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	2b01      	cmp	r3, #1
 8003644:	d005      	beq.n	8003652 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800364e:	2b02      	cmp	r3, #2
 8003650:	d130      	bne.n	80036b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	2203      	movs	r2, #3
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	43db      	mvns	r3, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4013      	ands	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	4313      	orrs	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003688:	2201      	movs	r2, #1
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	43db      	mvns	r3, r3
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	4013      	ands	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	091b      	lsrs	r3, r3, #4
 800369e:	f003 0201 	and.w	r2, r3, #1
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 0303 	and.w	r3, r3, #3
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d017      	beq.n	80036f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	2203      	movs	r2, #3
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	43db      	mvns	r3, r3
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	4013      	ands	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 0303 	and.w	r3, r3, #3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d123      	bne.n	8003744 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	08da      	lsrs	r2, r3, #3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3208      	adds	r2, #8
 8003704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003708:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	220f      	movs	r2, #15
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	4013      	ands	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4313      	orrs	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	08da      	lsrs	r2, r3, #3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3208      	adds	r2, #8
 800373e:	69b9      	ldr	r1, [r7, #24]
 8003740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	2203      	movs	r2, #3
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 0203 	and.w	r2, r3, #3
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4313      	orrs	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 80a2 	beq.w	80038ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003786:	2300      	movs	r3, #0
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	4b57      	ldr	r3, [pc, #348]	@ (80038e8 <HAL_GPIO_Init+0x2e8>)
 800378c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378e:	4a56      	ldr	r2, [pc, #344]	@ (80038e8 <HAL_GPIO_Init+0x2e8>)
 8003790:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003794:	6453      	str	r3, [r2, #68]	@ 0x44
 8003796:	4b54      	ldr	r3, [pc, #336]	@ (80038e8 <HAL_GPIO_Init+0x2e8>)
 8003798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037a2:	4a52      	ldr	r2, [pc, #328]	@ (80038ec <HAL_GPIO_Init+0x2ec>)
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	089b      	lsrs	r3, r3, #2
 80037a8:	3302      	adds	r3, #2
 80037aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	220f      	movs	r2, #15
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43db      	mvns	r3, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4013      	ands	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a49      	ldr	r2, [pc, #292]	@ (80038f0 <HAL_GPIO_Init+0x2f0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d019      	beq.n	8003802 <HAL_GPIO_Init+0x202>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a48      	ldr	r2, [pc, #288]	@ (80038f4 <HAL_GPIO_Init+0x2f4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d013      	beq.n	80037fe <HAL_GPIO_Init+0x1fe>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a47      	ldr	r2, [pc, #284]	@ (80038f8 <HAL_GPIO_Init+0x2f8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d00d      	beq.n	80037fa <HAL_GPIO_Init+0x1fa>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a46      	ldr	r2, [pc, #280]	@ (80038fc <HAL_GPIO_Init+0x2fc>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d007      	beq.n	80037f6 <HAL_GPIO_Init+0x1f6>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a45      	ldr	r2, [pc, #276]	@ (8003900 <HAL_GPIO_Init+0x300>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d101      	bne.n	80037f2 <HAL_GPIO_Init+0x1f2>
 80037ee:	2304      	movs	r3, #4
 80037f0:	e008      	b.n	8003804 <HAL_GPIO_Init+0x204>
 80037f2:	2307      	movs	r3, #7
 80037f4:	e006      	b.n	8003804 <HAL_GPIO_Init+0x204>
 80037f6:	2303      	movs	r3, #3
 80037f8:	e004      	b.n	8003804 <HAL_GPIO_Init+0x204>
 80037fa:	2302      	movs	r3, #2
 80037fc:	e002      	b.n	8003804 <HAL_GPIO_Init+0x204>
 80037fe:	2301      	movs	r3, #1
 8003800:	e000      	b.n	8003804 <HAL_GPIO_Init+0x204>
 8003802:	2300      	movs	r3, #0
 8003804:	69fa      	ldr	r2, [r7, #28]
 8003806:	f002 0203 	and.w	r2, r2, #3
 800380a:	0092      	lsls	r2, r2, #2
 800380c:	4093      	lsls	r3, r2
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4313      	orrs	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003814:	4935      	ldr	r1, [pc, #212]	@ (80038ec <HAL_GPIO_Init+0x2ec>)
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	089b      	lsrs	r3, r3, #2
 800381a:	3302      	adds	r3, #2
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003822:	4b38      	ldr	r3, [pc, #224]	@ (8003904 <HAL_GPIO_Init+0x304>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	43db      	mvns	r3, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4013      	ands	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003846:	4a2f      	ldr	r2, [pc, #188]	@ (8003904 <HAL_GPIO_Init+0x304>)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800384c:	4b2d      	ldr	r3, [pc, #180]	@ (8003904 <HAL_GPIO_Init+0x304>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	43db      	mvns	r3, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4013      	ands	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003870:	4a24      	ldr	r2, [pc, #144]	@ (8003904 <HAL_GPIO_Init+0x304>)
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003876:	4b23      	ldr	r3, [pc, #140]	@ (8003904 <HAL_GPIO_Init+0x304>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	43db      	mvns	r3, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4013      	ands	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	4313      	orrs	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800389a:	4a1a      	ldr	r2, [pc, #104]	@ (8003904 <HAL_GPIO_Init+0x304>)
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038a0:	4b18      	ldr	r3, [pc, #96]	@ (8003904 <HAL_GPIO_Init+0x304>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	43db      	mvns	r3, r3
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4013      	ands	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038c4:	4a0f      	ldr	r2, [pc, #60]	@ (8003904 <HAL_GPIO_Init+0x304>)
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	3301      	adds	r3, #1
 80038ce:	61fb      	str	r3, [r7, #28]
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	2b0f      	cmp	r3, #15
 80038d4:	f67f aea2 	bls.w	800361c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038d8:	bf00      	nop
 80038da:	bf00      	nop
 80038dc:	3724      	adds	r7, #36	@ 0x24
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40023800 	.word	0x40023800
 80038ec:	40013800 	.word	0x40013800
 80038f0:	40020000 	.word	0x40020000
 80038f4:	40020400 	.word	0x40020400
 80038f8:	40020800 	.word	0x40020800
 80038fc:	40020c00 	.word	0x40020c00
 8003900:	40021000 	.word	0x40021000
 8003904:	40013c00 	.word	0x40013c00

08003908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	460b      	mov	r3, r1
 8003912:	807b      	strh	r3, [r7, #2]
 8003914:	4613      	mov	r3, r2
 8003916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003918:	787b      	ldrb	r3, [r7, #1]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800391e:	887a      	ldrh	r2, [r7, #2]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003924:	e003      	b.n	800392e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003926:	887b      	ldrh	r3, [r7, #2]
 8003928:	041a      	lsls	r2, r3, #16
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	619a      	str	r2, [r3, #24]
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
	...

0800393c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e12b      	b.n	8003ba6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d106      	bne.n	8003968 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7fe f982 	bl	8001c6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2224      	movs	r2, #36	@ 0x24
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0201 	bic.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800398e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800399e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039a0:	f000 fd40 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 80039a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	4a81      	ldr	r2, [pc, #516]	@ (8003bb0 <HAL_I2C_Init+0x274>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d807      	bhi.n	80039c0 <HAL_I2C_Init+0x84>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4a80      	ldr	r2, [pc, #512]	@ (8003bb4 <HAL_I2C_Init+0x278>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	bf94      	ite	ls
 80039b8:	2301      	movls	r3, #1
 80039ba:	2300      	movhi	r3, #0
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	e006      	b.n	80039ce <HAL_I2C_Init+0x92>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4a7d      	ldr	r2, [pc, #500]	@ (8003bb8 <HAL_I2C_Init+0x27c>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	bf94      	ite	ls
 80039c8:	2301      	movls	r3, #1
 80039ca:	2300      	movhi	r3, #0
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e0e7      	b.n	8003ba6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4a78      	ldr	r2, [pc, #480]	@ (8003bbc <HAL_I2C_Init+0x280>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	0c9b      	lsrs	r3, r3, #18
 80039e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	4a6a      	ldr	r2, [pc, #424]	@ (8003bb0 <HAL_I2C_Init+0x274>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d802      	bhi.n	8003a10 <HAL_I2C_Init+0xd4>
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	e009      	b.n	8003a24 <HAL_I2C_Init+0xe8>
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a16:	fb02 f303 	mul.w	r3, r2, r3
 8003a1a:	4a69      	ldr	r2, [pc, #420]	@ (8003bc0 <HAL_I2C_Init+0x284>)
 8003a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a20:	099b      	lsrs	r3, r3, #6
 8003a22:	3301      	adds	r3, #1
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6812      	ldr	r2, [r2, #0]
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a36:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	495c      	ldr	r1, [pc, #368]	@ (8003bb0 <HAL_I2C_Init+0x274>)
 8003a40:	428b      	cmp	r3, r1
 8003a42:	d819      	bhi.n	8003a78 <HAL_I2C_Init+0x13c>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	1e59      	subs	r1, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a52:	1c59      	adds	r1, r3, #1
 8003a54:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a58:	400b      	ands	r3, r1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <HAL_I2C_Init+0x138>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1e59      	subs	r1, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a72:	e051      	b.n	8003b18 <HAL_I2C_Init+0x1dc>
 8003a74:	2304      	movs	r3, #4
 8003a76:	e04f      	b.n	8003b18 <HAL_I2C_Init+0x1dc>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d111      	bne.n	8003aa4 <HAL_I2C_Init+0x168>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	1e58      	subs	r0, r3, #1
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6859      	ldr	r1, [r3, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	440b      	add	r3, r1
 8003a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a92:	3301      	adds	r3, #1
 8003a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	bf0c      	ite	eq
 8003a9c:	2301      	moveq	r3, #1
 8003a9e:	2300      	movne	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	e012      	b.n	8003aca <HAL_I2C_Init+0x18e>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	1e58      	subs	r0, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6859      	ldr	r1, [r3, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	0099      	lsls	r1, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aba:	3301      	adds	r3, #1
 8003abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	bf0c      	ite	eq
 8003ac4:	2301      	moveq	r3, #1
 8003ac6:	2300      	movne	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <HAL_I2C_Init+0x196>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e022      	b.n	8003b18 <HAL_I2C_Init+0x1dc>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10e      	bne.n	8003af8 <HAL_I2C_Init+0x1bc>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1e58      	subs	r0, r3, #1
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6859      	ldr	r1, [r3, #4]
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	440b      	add	r3, r1
 8003ae8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aec:	3301      	adds	r3, #1
 8003aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003af6:	e00f      	b.n	8003b18 <HAL_I2C_Init+0x1dc>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	1e58      	subs	r0, r3, #1
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6859      	ldr	r1, [r3, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	0099      	lsls	r1, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b0e:	3301      	adds	r3, #1
 8003b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	6809      	ldr	r1, [r1, #0]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69da      	ldr	r2, [r3, #28]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b46:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6911      	ldr	r1, [r2, #16]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	68d2      	ldr	r2, [r2, #12]
 8003b52:	4311      	orrs	r1, r2
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6812      	ldr	r2, [r2, #0]
 8003b58:	430b      	orrs	r3, r1
 8003b5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0201 	orr.w	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	000186a0 	.word	0x000186a0
 8003bb4:	001e847f 	.word	0x001e847f
 8003bb8:	003d08ff 	.word	0x003d08ff
 8003bbc:	431bde83 	.word	0x431bde83
 8003bc0:	10624dd3 	.word	0x10624dd3

08003bc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e267      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d075      	beq.n	8003cce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003be2:	4b88      	ldr	r3, [pc, #544]	@ (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 030c 	and.w	r3, r3, #12
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d00c      	beq.n	8003c08 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bee:	4b85      	ldr	r3, [pc, #532]	@ (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003bf6:	2b08      	cmp	r3, #8
 8003bf8:	d112      	bne.n	8003c20 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bfa:	4b82      	ldr	r3, [pc, #520]	@ (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c06:	d10b      	bne.n	8003c20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c08:	4b7e      	ldr	r3, [pc, #504]	@ (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d05b      	beq.n	8003ccc <HAL_RCC_OscConfig+0x108>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d157      	bne.n	8003ccc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e242      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c28:	d106      	bne.n	8003c38 <HAL_RCC_OscConfig+0x74>
 8003c2a:	4b76      	ldr	r3, [pc, #472]	@ (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a75      	ldr	r2, [pc, #468]	@ (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	e01d      	b.n	8003c74 <HAL_RCC_OscConfig+0xb0>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c40:	d10c      	bne.n	8003c5c <HAL_RCC_OscConfig+0x98>
 8003c42:	4b70      	ldr	r3, [pc, #448]	@ (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a6f      	ldr	r2, [pc, #444]	@ (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003c48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	4b6d      	ldr	r3, [pc, #436]	@ (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a6c      	ldr	r2, [pc, #432]	@ (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	e00b      	b.n	8003c74 <HAL_RCC_OscConfig+0xb0>
 8003c5c:	4b69      	ldr	r3, [pc, #420]	@ (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a68      	ldr	r2, [pc, #416]	@ (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003c62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	4b66      	ldr	r3, [pc, #408]	@ (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a65      	ldr	r2, [pc, #404]	@ (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003c6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d013      	beq.n	8003ca4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7c:	f7fe fcfe 	bl	800267c <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c84:	f7fe fcfa 	bl	800267c <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b64      	cmp	r3, #100	@ 0x64
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e207      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c96:	4b5b      	ldr	r3, [pc, #364]	@ (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0f0      	beq.n	8003c84 <HAL_RCC_OscConfig+0xc0>
 8003ca2:	e014      	b.n	8003cce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7fe fcea 	bl	800267c <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cac:	f7fe fce6 	bl	800267c <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b64      	cmp	r3, #100	@ 0x64
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e1f3      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cbe:	4b51      	ldr	r3, [pc, #324]	@ (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0xe8>
 8003cca:	e000      	b.n	8003cce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d063      	beq.n	8003da2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003cda:	4b4a      	ldr	r3, [pc, #296]	@ (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 030c 	and.w	r3, r3, #12
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00b      	beq.n	8003cfe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ce6:	4b47      	ldr	r3, [pc, #284]	@ (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d11c      	bne.n	8003d2c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cf2:	4b44      	ldr	r3, [pc, #272]	@ (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d116      	bne.n	8003d2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfe:	4b41      	ldr	r3, [pc, #260]	@ (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d005      	beq.n	8003d16 <HAL_RCC_OscConfig+0x152>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d001      	beq.n	8003d16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e1c7      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d16:	4b3b      	ldr	r3, [pc, #236]	@ (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	4937      	ldr	r1, [pc, #220]	@ (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2a:	e03a      	b.n	8003da2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d020      	beq.n	8003d76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d34:	4b34      	ldr	r3, [pc, #208]	@ (8003e08 <HAL_RCC_OscConfig+0x244>)
 8003d36:	2201      	movs	r2, #1
 8003d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3a:	f7fe fc9f 	bl	800267c <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d42:	f7fe fc9b 	bl	800267c <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e1a8      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d54:	4b2b      	ldr	r3, [pc, #172]	@ (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0f0      	beq.n	8003d42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d60:	4b28      	ldr	r3, [pc, #160]	@ (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	4925      	ldr	r1, [pc, #148]	@ (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	600b      	str	r3, [r1, #0]
 8003d74:	e015      	b.n	8003da2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d76:	4b24      	ldr	r3, [pc, #144]	@ (8003e08 <HAL_RCC_OscConfig+0x244>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7c:	f7fe fc7e 	bl	800267c <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d84:	f7fe fc7a 	bl	800267c <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e187      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d96:	4b1b      	ldr	r3, [pc, #108]	@ (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1f0      	bne.n	8003d84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d036      	beq.n	8003e1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d016      	beq.n	8003de4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003db6:	4b15      	ldr	r3, [pc, #84]	@ (8003e0c <HAL_RCC_OscConfig+0x248>)
 8003db8:	2201      	movs	r2, #1
 8003dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dbc:	f7fe fc5e 	bl	800267c <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dc4:	f7fe fc5a 	bl	800267c <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e167      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8003e04 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x200>
 8003de2:	e01b      	b.n	8003e1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003de4:	4b09      	ldr	r3, [pc, #36]	@ (8003e0c <HAL_RCC_OscConfig+0x248>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dea:	f7fe fc47 	bl	800267c <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df0:	e00e      	b.n	8003e10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003df2:	f7fe fc43 	bl	800267c <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d907      	bls.n	8003e10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e150      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
 8003e04:	40023800 	.word	0x40023800
 8003e08:	42470000 	.word	0x42470000
 8003e0c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e10:	4b88      	ldr	r3, [pc, #544]	@ (8004034 <HAL_RCC_OscConfig+0x470>)
 8003e12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1ea      	bne.n	8003df2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 8097 	beq.w	8003f58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e2e:	4b81      	ldr	r3, [pc, #516]	@ (8004034 <HAL_RCC_OscConfig+0x470>)
 8003e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10f      	bne.n	8003e5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60bb      	str	r3, [r7, #8]
 8003e3e:	4b7d      	ldr	r3, [pc, #500]	@ (8004034 <HAL_RCC_OscConfig+0x470>)
 8003e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e42:	4a7c      	ldr	r2, [pc, #496]	@ (8004034 <HAL_RCC_OscConfig+0x470>)
 8003e44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e48:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e4a:	4b7a      	ldr	r3, [pc, #488]	@ (8004034 <HAL_RCC_OscConfig+0x470>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e52:	60bb      	str	r3, [r7, #8]
 8003e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e56:	2301      	movs	r3, #1
 8003e58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5a:	4b77      	ldr	r3, [pc, #476]	@ (8004038 <HAL_RCC_OscConfig+0x474>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d118      	bne.n	8003e98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e66:	4b74      	ldr	r3, [pc, #464]	@ (8004038 <HAL_RCC_OscConfig+0x474>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a73      	ldr	r2, [pc, #460]	@ (8004038 <HAL_RCC_OscConfig+0x474>)
 8003e6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e72:	f7fe fc03 	bl	800267c <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e7a:	f7fe fbff 	bl	800267c <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e10c      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8c:	4b6a      	ldr	r3, [pc, #424]	@ (8004038 <HAL_RCC_OscConfig+0x474>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f0      	beq.n	8003e7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d106      	bne.n	8003eae <HAL_RCC_OscConfig+0x2ea>
 8003ea0:	4b64      	ldr	r3, [pc, #400]	@ (8004034 <HAL_RCC_OscConfig+0x470>)
 8003ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea4:	4a63      	ldr	r2, [pc, #396]	@ (8004034 <HAL_RCC_OscConfig+0x470>)
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eac:	e01c      	b.n	8003ee8 <HAL_RCC_OscConfig+0x324>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b05      	cmp	r3, #5
 8003eb4:	d10c      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x30c>
 8003eb6:	4b5f      	ldr	r3, [pc, #380]	@ (8004034 <HAL_RCC_OscConfig+0x470>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eba:	4a5e      	ldr	r2, [pc, #376]	@ (8004034 <HAL_RCC_OscConfig+0x470>)
 8003ebc:	f043 0304 	orr.w	r3, r3, #4
 8003ec0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ec2:	4b5c      	ldr	r3, [pc, #368]	@ (8004034 <HAL_RCC_OscConfig+0x470>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec6:	4a5b      	ldr	r2, [pc, #364]	@ (8004034 <HAL_RCC_OscConfig+0x470>)
 8003ec8:	f043 0301 	orr.w	r3, r3, #1
 8003ecc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ece:	e00b      	b.n	8003ee8 <HAL_RCC_OscConfig+0x324>
 8003ed0:	4b58      	ldr	r3, [pc, #352]	@ (8004034 <HAL_RCC_OscConfig+0x470>)
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed4:	4a57      	ldr	r2, [pc, #348]	@ (8004034 <HAL_RCC_OscConfig+0x470>)
 8003ed6:	f023 0301 	bic.w	r3, r3, #1
 8003eda:	6713      	str	r3, [r2, #112]	@ 0x70
 8003edc:	4b55      	ldr	r3, [pc, #340]	@ (8004034 <HAL_RCC_OscConfig+0x470>)
 8003ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee0:	4a54      	ldr	r2, [pc, #336]	@ (8004034 <HAL_RCC_OscConfig+0x470>)
 8003ee2:	f023 0304 	bic.w	r3, r3, #4
 8003ee6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d015      	beq.n	8003f1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef0:	f7fe fbc4 	bl	800267c <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef6:	e00a      	b.n	8003f0e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef8:	f7fe fbc0 	bl	800267c <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e0cb      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0e:	4b49      	ldr	r3, [pc, #292]	@ (8004034 <HAL_RCC_OscConfig+0x470>)
 8003f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0ee      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x334>
 8003f1a:	e014      	b.n	8003f46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f1c:	f7fe fbae 	bl	800267c <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f22:	e00a      	b.n	8003f3a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f24:	f7fe fbaa 	bl	800267c <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e0b5      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8004034 <HAL_RCC_OscConfig+0x470>)
 8003f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1ee      	bne.n	8003f24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f46:	7dfb      	ldrb	r3, [r7, #23]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d105      	bne.n	8003f58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f4c:	4b39      	ldr	r3, [pc, #228]	@ (8004034 <HAL_RCC_OscConfig+0x470>)
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f50:	4a38      	ldr	r2, [pc, #224]	@ (8004034 <HAL_RCC_OscConfig+0x470>)
 8003f52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 80a1 	beq.w	80040a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f62:	4b34      	ldr	r3, [pc, #208]	@ (8004034 <HAL_RCC_OscConfig+0x470>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 030c 	and.w	r3, r3, #12
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	d05c      	beq.n	8004028 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d141      	bne.n	8003ffa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f76:	4b31      	ldr	r3, [pc, #196]	@ (800403c <HAL_RCC_OscConfig+0x478>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7c:	f7fe fb7e 	bl	800267c <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f84:	f7fe fb7a 	bl	800267c <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e087      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f96:	4b27      	ldr	r3, [pc, #156]	@ (8004034 <HAL_RCC_OscConfig+0x470>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69da      	ldr	r2, [r3, #28]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb0:	019b      	lsls	r3, r3, #6
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb8:	085b      	lsrs	r3, r3, #1
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	041b      	lsls	r3, r3, #16
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc4:	061b      	lsls	r3, r3, #24
 8003fc6:	491b      	ldr	r1, [pc, #108]	@ (8004034 <HAL_RCC_OscConfig+0x470>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800403c <HAL_RCC_OscConfig+0x478>)
 8003fce:	2201      	movs	r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd2:	f7fe fb53 	bl	800267c <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fda:	f7fe fb4f 	bl	800267c <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e05c      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fec:	4b11      	ldr	r3, [pc, #68]	@ (8004034 <HAL_RCC_OscConfig+0x470>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0f0      	beq.n	8003fda <HAL_RCC_OscConfig+0x416>
 8003ff8:	e054      	b.n	80040a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ffa:	4b10      	ldr	r3, [pc, #64]	@ (800403c <HAL_RCC_OscConfig+0x478>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004000:	f7fe fb3c 	bl	800267c <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004008:	f7fe fb38 	bl	800267c <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e045      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401a:	4b06      	ldr	r3, [pc, #24]	@ (8004034 <HAL_RCC_OscConfig+0x470>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1f0      	bne.n	8004008 <HAL_RCC_OscConfig+0x444>
 8004026:	e03d      	b.n	80040a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d107      	bne.n	8004040 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e038      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
 8004034:	40023800 	.word	0x40023800
 8004038:	40007000 	.word	0x40007000
 800403c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004040:	4b1b      	ldr	r3, [pc, #108]	@ (80040b0 <HAL_RCC_OscConfig+0x4ec>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d028      	beq.n	80040a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004058:	429a      	cmp	r2, r3
 800405a:	d121      	bne.n	80040a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004066:	429a      	cmp	r2, r3
 8004068:	d11a      	bne.n	80040a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004070:	4013      	ands	r3, r2
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004076:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004078:	4293      	cmp	r3, r2
 800407a:	d111      	bne.n	80040a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004086:	085b      	lsrs	r3, r3, #1
 8004088:	3b01      	subs	r3, #1
 800408a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800408c:	429a      	cmp	r2, r3
 800408e:	d107      	bne.n	80040a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800409c:	429a      	cmp	r2, r3
 800409e:	d001      	beq.n	80040a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e000      	b.n	80040a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3718      	adds	r7, #24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	40023800 	.word	0x40023800

080040b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e0cc      	b.n	8004262 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040c8:	4b68      	ldr	r3, [pc, #416]	@ (800426c <HAL_RCC_ClockConfig+0x1b8>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d90c      	bls.n	80040f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d6:	4b65      	ldr	r3, [pc, #404]	@ (800426c <HAL_RCC_ClockConfig+0x1b8>)
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040de:	4b63      	ldr	r3, [pc, #396]	@ (800426c <HAL_RCC_ClockConfig+0x1b8>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d001      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e0b8      	b.n	8004262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d020      	beq.n	800413e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004108:	4b59      	ldr	r3, [pc, #356]	@ (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	4a58      	ldr	r2, [pc, #352]	@ (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004112:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004120:	4b53      	ldr	r3, [pc, #332]	@ (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	4a52      	ldr	r2, [pc, #328]	@ (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800412a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800412c:	4b50      	ldr	r3, [pc, #320]	@ (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	494d      	ldr	r1, [pc, #308]	@ (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	4313      	orrs	r3, r2
 800413c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d044      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d107      	bne.n	8004162 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004152:	4b47      	ldr	r3, [pc, #284]	@ (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d119      	bne.n	8004192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e07f      	b.n	8004262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b02      	cmp	r3, #2
 8004168:	d003      	beq.n	8004172 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800416e:	2b03      	cmp	r3, #3
 8004170:	d107      	bne.n	8004182 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004172:	4b3f      	ldr	r3, [pc, #252]	@ (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d109      	bne.n	8004192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e06f      	b.n	8004262 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004182:	4b3b      	ldr	r3, [pc, #236]	@ (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e067      	b.n	8004262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004192:	4b37      	ldr	r3, [pc, #220]	@ (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f023 0203 	bic.w	r2, r3, #3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	4934      	ldr	r1, [pc, #208]	@ (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041a4:	f7fe fa6a 	bl	800267c <HAL_GetTick>
 80041a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041aa:	e00a      	b.n	80041c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ac:	f7fe fa66 	bl	800267c <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e04f      	b.n	8004262 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c2:	4b2b      	ldr	r3, [pc, #172]	@ (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 020c 	and.w	r2, r3, #12
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d1eb      	bne.n	80041ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041d4:	4b25      	ldr	r3, [pc, #148]	@ (800426c <HAL_RCC_ClockConfig+0x1b8>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d20c      	bcs.n	80041fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e2:	4b22      	ldr	r3, [pc, #136]	@ (800426c <HAL_RCC_ClockConfig+0x1b8>)
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ea:	4b20      	ldr	r3, [pc, #128]	@ (800426c <HAL_RCC_ClockConfig+0x1b8>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d001      	beq.n	80041fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e032      	b.n	8004262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d008      	beq.n	800421a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004208:	4b19      	ldr	r3, [pc, #100]	@ (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	4916      	ldr	r1, [pc, #88]	@ (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 8004216:	4313      	orrs	r3, r2
 8004218:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0308 	and.w	r3, r3, #8
 8004222:	2b00      	cmp	r3, #0
 8004224:	d009      	beq.n	800423a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004226:	4b12      	ldr	r3, [pc, #72]	@ (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	490e      	ldr	r1, [pc, #56]	@ (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 8004236:	4313      	orrs	r3, r2
 8004238:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800423a:	f000 f821 	bl	8004280 <HAL_RCC_GetSysClockFreq>
 800423e:	4602      	mov	r2, r0
 8004240:	4b0b      	ldr	r3, [pc, #44]	@ (8004270 <HAL_RCC_ClockConfig+0x1bc>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	091b      	lsrs	r3, r3, #4
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	490a      	ldr	r1, [pc, #40]	@ (8004274 <HAL_RCC_ClockConfig+0x1c0>)
 800424c:	5ccb      	ldrb	r3, [r1, r3]
 800424e:	fa22 f303 	lsr.w	r3, r2, r3
 8004252:	4a09      	ldr	r2, [pc, #36]	@ (8004278 <HAL_RCC_ClockConfig+0x1c4>)
 8004254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004256:	4b09      	ldr	r3, [pc, #36]	@ (800427c <HAL_RCC_ClockConfig+0x1c8>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f7fe f9ca 	bl	80025f4 <HAL_InitTick>

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40023c00 	.word	0x40023c00
 8004270:	40023800 	.word	0x40023800
 8004274:	0800d1b8 	.word	0x0800d1b8
 8004278:	20000000 	.word	0x20000000
 800427c:	20000004 	.word	0x20000004

08004280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004284:	b090      	sub	sp, #64	@ 0x40
 8004286:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004298:	4b59      	ldr	r3, [pc, #356]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x180>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 030c 	and.w	r3, r3, #12
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d00d      	beq.n	80042c0 <HAL_RCC_GetSysClockFreq+0x40>
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	f200 80a1 	bhi.w	80043ec <HAL_RCC_GetSysClockFreq+0x16c>
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <HAL_RCC_GetSysClockFreq+0x34>
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d003      	beq.n	80042ba <HAL_RCC_GetSysClockFreq+0x3a>
 80042b2:	e09b      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042b4:	4b53      	ldr	r3, [pc, #332]	@ (8004404 <HAL_RCC_GetSysClockFreq+0x184>)
 80042b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042b8:	e09b      	b.n	80043f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ba:	4b53      	ldr	r3, [pc, #332]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x188>)
 80042bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042be:	e098      	b.n	80043f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042c0:	4b4f      	ldr	r3, [pc, #316]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x180>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042ca:	4b4d      	ldr	r3, [pc, #308]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x180>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d028      	beq.n	8004328 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042d6:	4b4a      	ldr	r3, [pc, #296]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x180>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	099b      	lsrs	r3, r3, #6
 80042dc:	2200      	movs	r2, #0
 80042de:	623b      	str	r3, [r7, #32]
 80042e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80042e8:	2100      	movs	r1, #0
 80042ea:	4b47      	ldr	r3, [pc, #284]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x188>)
 80042ec:	fb03 f201 	mul.w	r2, r3, r1
 80042f0:	2300      	movs	r3, #0
 80042f2:	fb00 f303 	mul.w	r3, r0, r3
 80042f6:	4413      	add	r3, r2
 80042f8:	4a43      	ldr	r2, [pc, #268]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x188>)
 80042fa:	fba0 1202 	umull	r1, r2, r0, r2
 80042fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004300:	460a      	mov	r2, r1
 8004302:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004304:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004306:	4413      	add	r3, r2
 8004308:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800430a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800430c:	2200      	movs	r2, #0
 800430e:	61bb      	str	r3, [r7, #24]
 8004310:	61fa      	str	r2, [r7, #28]
 8004312:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004316:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800431a:	f7fc fcbd 	bl	8000c98 <__aeabi_uldivmod>
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	4613      	mov	r3, r2
 8004324:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004326:	e053      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004328:	4b35      	ldr	r3, [pc, #212]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x180>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	099b      	lsrs	r3, r3, #6
 800432e:	2200      	movs	r2, #0
 8004330:	613b      	str	r3, [r7, #16]
 8004332:	617a      	str	r2, [r7, #20]
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800433a:	f04f 0b00 	mov.w	fp, #0
 800433e:	4652      	mov	r2, sl
 8004340:	465b      	mov	r3, fp
 8004342:	f04f 0000 	mov.w	r0, #0
 8004346:	f04f 0100 	mov.w	r1, #0
 800434a:	0159      	lsls	r1, r3, #5
 800434c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004350:	0150      	lsls	r0, r2, #5
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	ebb2 080a 	subs.w	r8, r2, sl
 800435a:	eb63 090b 	sbc.w	r9, r3, fp
 800435e:	f04f 0200 	mov.w	r2, #0
 8004362:	f04f 0300 	mov.w	r3, #0
 8004366:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800436a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800436e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004372:	ebb2 0408 	subs.w	r4, r2, r8
 8004376:	eb63 0509 	sbc.w	r5, r3, r9
 800437a:	f04f 0200 	mov.w	r2, #0
 800437e:	f04f 0300 	mov.w	r3, #0
 8004382:	00eb      	lsls	r3, r5, #3
 8004384:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004388:	00e2      	lsls	r2, r4, #3
 800438a:	4614      	mov	r4, r2
 800438c:	461d      	mov	r5, r3
 800438e:	eb14 030a 	adds.w	r3, r4, sl
 8004392:	603b      	str	r3, [r7, #0]
 8004394:	eb45 030b 	adc.w	r3, r5, fp
 8004398:	607b      	str	r3, [r7, #4]
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	f04f 0300 	mov.w	r3, #0
 80043a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043a6:	4629      	mov	r1, r5
 80043a8:	028b      	lsls	r3, r1, #10
 80043aa:	4621      	mov	r1, r4
 80043ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043b0:	4621      	mov	r1, r4
 80043b2:	028a      	lsls	r2, r1, #10
 80043b4:	4610      	mov	r0, r2
 80043b6:	4619      	mov	r1, r3
 80043b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ba:	2200      	movs	r2, #0
 80043bc:	60bb      	str	r3, [r7, #8]
 80043be:	60fa      	str	r2, [r7, #12]
 80043c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043c4:	f7fc fc68 	bl	8000c98 <__aeabi_uldivmod>
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4613      	mov	r3, r2
 80043ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80043d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x180>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	0c1b      	lsrs	r3, r3, #16
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	3301      	adds	r3, #1
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80043e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80043e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043ea:	e002      	b.n	80043f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043ec:	4b05      	ldr	r3, [pc, #20]	@ (8004404 <HAL_RCC_GetSysClockFreq+0x184>)
 80043ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3740      	adds	r7, #64	@ 0x40
 80043f8:	46bd      	mov	sp, r7
 80043fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043fe:	bf00      	nop
 8004400:	40023800 	.word	0x40023800
 8004404:	00f42400 	.word	0x00f42400
 8004408:	017d7840 	.word	0x017d7840

0800440c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004410:	4b03      	ldr	r3, [pc, #12]	@ (8004420 <HAL_RCC_GetHCLKFreq+0x14>)
 8004412:	681b      	ldr	r3, [r3, #0]
}
 8004414:	4618      	mov	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	20000000 	.word	0x20000000

08004424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004428:	f7ff fff0 	bl	800440c <HAL_RCC_GetHCLKFreq>
 800442c:	4602      	mov	r2, r0
 800442e:	4b05      	ldr	r3, [pc, #20]	@ (8004444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	0a9b      	lsrs	r3, r3, #10
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	4903      	ldr	r1, [pc, #12]	@ (8004448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800443a:	5ccb      	ldrb	r3, [r1, r3]
 800443c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004440:	4618      	mov	r0, r3
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40023800 	.word	0x40023800
 8004448:	0800d1c8 	.word	0x0800d1c8

0800444c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004450:	f7ff ffdc 	bl	800440c <HAL_RCC_GetHCLKFreq>
 8004454:	4602      	mov	r2, r0
 8004456:	4b05      	ldr	r3, [pc, #20]	@ (800446c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	0b5b      	lsrs	r3, r3, #13
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	4903      	ldr	r1, [pc, #12]	@ (8004470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004462:	5ccb      	ldrb	r3, [r1, r3]
 8004464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004468:	4618      	mov	r0, r3
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40023800 	.word	0x40023800
 8004470:	0800d1c8 	.word	0x0800d1c8

08004474 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e022      	b.n	80044cc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d105      	bne.n	800449e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7fd fcc9 	bl	8001e30 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2203      	movs	r2, #3
 80044a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f814 	bl	80044d4 <HAL_SD_InitCard>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e00a      	b.n	80044cc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80044d4:	b5b0      	push	{r4, r5, r7, lr}
 80044d6:	b08e      	sub	sp, #56	@ 0x38
 80044d8:	af04      	add	r7, sp, #16
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80044dc:	2300      	movs	r3, #0
 80044de:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80044e0:	2300      	movs	r3, #0
 80044e2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80044e4:	2300      	movs	r3, #0
 80044e6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80044e8:	2300      	movs	r3, #0
 80044ea:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80044ec:	2300      	movs	r3, #0
 80044ee:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80044f0:	2376      	movs	r3, #118	@ 0x76
 80044f2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681d      	ldr	r5, [r3, #0]
 80044f8:	466c      	mov	r4, sp
 80044fa:	f107 0314 	add.w	r3, r7, #20
 80044fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004502:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004506:	f107 0308 	add.w	r3, r7, #8
 800450a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800450c:	4628      	mov	r0, r5
 800450e:	f002 fe49 	bl	80071a4 <SDIO_Init>
 8004512:	4603      	mov	r3, r0
 8004514:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8004518:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e04f      	b.n	80045c4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004524:	4b29      	ldr	r3, [pc, #164]	@ (80045cc <HAL_SD_InitCard+0xf8>)
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f002 fe81 	bl	8007236 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004534:	4b25      	ldr	r3, [pc, #148]	@ (80045cc <HAL_SD_InitCard+0xf8>)
 8004536:	2201      	movs	r2, #1
 8004538:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800453a:	2002      	movs	r0, #2
 800453c:	f7fe f8aa 	bl	8002694 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f001 f805 	bl	8005550 <SD_PowerON>
 8004546:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004548:	6a3b      	ldr	r3, [r7, #32]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00b      	beq.n	8004566 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e02e      	b.n	80045c4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 ff24 	bl	80053b4 <SD_InitCard>
 800456c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00b      	beq.n	800458c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e01b      	b.n	80045c4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004594:	4618      	mov	r0, r3
 8004596:	f002 fee0 	bl	800735a <SDMMC_CmdBlockLength>
 800459a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00f      	beq.n	80045c2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a0a      	ldr	r2, [pc, #40]	@ (80045d0 <HAL_SD_InitCard+0xfc>)
 80045a8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045ae:	6a3b      	ldr	r3, [r7, #32]
 80045b0:	431a      	orrs	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e000      	b.n	80045c4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3728      	adds	r7, #40	@ 0x28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bdb0      	pop	{r4, r5, r7, pc}
 80045cc:	422580a0 	.word	0x422580a0
 80045d0:	004005ff 	.word	0x004005ff

080045d4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08c      	sub	sp, #48	@ 0x30
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
 80045e0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d107      	bne.n	80045fc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0c0      	b.n	800477e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b01      	cmp	r3, #1
 8004606:	f040 80b9 	bne.w	800477c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004610:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	441a      	add	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800461a:	429a      	cmp	r2, r3
 800461c:	d907      	bls.n	800462e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004622:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e0a7      	b.n	800477e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2203      	movs	r2, #3
 8004632:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2200      	movs	r2, #0
 800463c:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	6812      	ldr	r2, [r2, #0]
 8004648:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 800464c:	f043 0302 	orr.w	r3, r3, #2
 8004650:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004656:	4a4c      	ldr	r2, [pc, #304]	@ (8004788 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8004658:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465e:	4a4b      	ldr	r2, [pc, #300]	@ (800478c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004660:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004666:	2200      	movs	r2, #0
 8004668:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466e:	2200      	movs	r2, #0
 8004670:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	3380      	adds	r3, #128	@ 0x80
 8004698:	4619      	mov	r1, r3
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	025b      	lsls	r3, r3, #9
 80046a0:	089b      	lsrs	r3, r3, #2
 80046a2:	f7fe fc4d 	bl	8002f40 <HAL_DMA_Start_IT>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d017      	beq.n	80046dc <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 80046ba:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a33      	ldr	r2, [pc, #204]	@ (8004790 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80046c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e050      	b.n	800477e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80046dc:	4b2d      	ldr	r3, [pc, #180]	@ (8004794 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80046de:	2201      	movs	r2, #1
 80046e0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d002      	beq.n	80046f0 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80046ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ec:	025b      	lsls	r3, r3, #9
 80046ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80046f0:	f04f 33ff 	mov.w	r3, #4294967295
 80046f4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	025b      	lsls	r3, r3, #9
 80046fa:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80046fc:	2390      	movs	r3, #144	@ 0x90
 80046fe:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004700:	2302      	movs	r3, #2
 8004702:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004704:	2300      	movs	r3, #0
 8004706:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004708:	2301      	movs	r3, #1
 800470a:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f107 0210 	add.w	r2, r7, #16
 8004714:	4611      	mov	r1, r2
 8004716:	4618      	mov	r0, r3
 8004718:	f002 fdf3 	bl	8007302 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d90a      	bls.n	8004738 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2282      	movs	r2, #130	@ 0x82
 8004726:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800472e:	4618      	mov	r0, r3
 8004730:	f002 fe57 	bl	80073e2 <SDMMC_CmdReadMultiBlock>
 8004734:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004736:	e009      	b.n	800474c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2281      	movs	r2, #129	@ 0x81
 800473c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004744:	4618      	mov	r0, r3
 8004746:	f002 fe2a 	bl	800739e <SDMMC_CmdReadSingleBlock>
 800474a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800474c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800474e:	2b00      	cmp	r3, #0
 8004750:	d012      	beq.n	8004778 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a0e      	ldr	r2, [pc, #56]	@ (8004790 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004758:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800475e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004760:	431a      	orrs	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e002      	b.n	800477e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8004778:	2300      	movs	r3, #0
 800477a:	e000      	b.n	800477e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800477c:	2302      	movs	r3, #2
  }
}
 800477e:	4618      	mov	r0, r3
 8004780:	3730      	adds	r7, #48	@ 0x30
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	080051c3 	.word	0x080051c3
 800478c:	08005235 	.word	0x08005235
 8004790:	004005ff 	.word	0x004005ff
 8004794:	4225858c 	.word	0x4225858c

08004798 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08c      	sub	sp, #48	@ 0x30
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d107      	bne.n	80047c0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e0c5      	b.n	800494c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	f040 80be 	bne.w	800494a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80047d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	441a      	add	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047de:	429a      	cmp	r2, r3
 80047e0:	d907      	bls.n	80047f2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e0ac      	b.n	800494c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2203      	movs	r2, #3
 80047f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2200      	movs	r2, #0
 8004800:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	6812      	ldr	r2, [r2, #0]
 800480c:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8004810:	f043 0302 	orr.w	r3, r3, #2
 8004814:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800481a:	4a4e      	ldr	r2, [pc, #312]	@ (8004954 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800481c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004822:	4a4d      	ldr	r2, [pc, #308]	@ (8004958 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8004824:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800482a:	2200      	movs	r2, #0
 800482c:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004832:	2b01      	cmp	r3, #1
 8004834:	d002      	beq.n	800483c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8004836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004838:	025b      	lsls	r3, r3, #9
 800483a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d90a      	bls.n	8004858 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	22a0      	movs	r2, #160	@ 0xa0
 8004846:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800484e:	4618      	mov	r0, r3
 8004850:	f002 fe0b 	bl	800746a <SDMMC_CmdWriteMultiBlock>
 8004854:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004856:	e009      	b.n	800486c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2290      	movs	r2, #144	@ 0x90
 800485c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004864:	4618      	mov	r0, r3
 8004866:	f002 fdde 	bl	8007426 <SDMMC_CmdWriteSingleBlock>
 800486a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800486c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800486e:	2b00      	cmp	r3, #0
 8004870:	d012      	beq.n	8004898 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a39      	ldr	r2, [pc, #228]	@ (800495c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004878:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800487e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004880:	431a      	orrs	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e059      	b.n	800494c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004898:	4b31      	ldr	r3, [pc, #196]	@ (8004960 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800489a:	2201      	movs	r2, #1
 800489c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a2:	2240      	movs	r2, #64	@ 0x40
 80048a4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80048c6:	68b9      	ldr	r1, [r7, #8]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3380      	adds	r3, #128	@ 0x80
 80048ce:	461a      	mov	r2, r3
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	025b      	lsls	r3, r3, #9
 80048d4:	089b      	lsrs	r3, r3, #2
 80048d6:	f7fe fb33 	bl	8002f40 <HAL_DMA_Start_IT>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d01c      	beq.n	800491a <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	6812      	ldr	r2, [r2, #0]
 80048ea:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 80048ee:	f023 0302 	bic.w	r3, r3, #2
 80048f2:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a18      	ldr	r2, [pc, #96]	@ (800495c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80048fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004900:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e018      	b.n	800494c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800491a:	f04f 33ff 	mov.w	r3, #4294967295
 800491e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	025b      	lsls	r3, r3, #9
 8004924:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004926:	2390      	movs	r3, #144	@ 0x90
 8004928:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800492a:	2300      	movs	r3, #0
 800492c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800492e:	2300      	movs	r3, #0
 8004930:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004932:	2301      	movs	r3, #1
 8004934:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f107 0210 	add.w	r2, r7, #16
 800493e:	4611      	mov	r1, r2
 8004940:	4618      	mov	r0, r3
 8004942:	f002 fcde 	bl	8007302 <SDIO_ConfigData>

      return HAL_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	e000      	b.n	800494c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800494a:	2302      	movs	r3, #2
  }
}
 800494c:	4618      	mov	r0, r3
 800494e:	3730      	adds	r7, #48	@ 0x30
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	08005199 	.word	0x08005199
 8004958:	08005235 	.word	0x08005235
 800495c:	004005ff 	.word	0x004005ff
 8004960:	4225858c 	.word	0x4225858c

08004964 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004970:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004978:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <HAL_SD_IRQHandler+0x2e>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f001 f806 	bl	800599c <SD_Read_IT>
 8004990:	e165      	b.n	8004c5e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 808f 	beq.w	8004ac0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80049aa:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6812      	ldr	r2, [r2, #0]
 80049b6:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 80049ba:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 80049be:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 0201 	bic.w	r2, r2, #1
 80049ce:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d039      	beq.n	8004a4e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d104      	bne.n	80049ee <HAL_SD_IRQHandler+0x8a>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f003 0320 	and.w	r3, r3, #32
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d011      	beq.n	8004a12 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f002 fd5c 	bl	80074b0 <SDMMC_CmdStopTransfer>
 80049f8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d008      	beq.n	8004a12 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f92f 	bl	8004c70 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004a1a:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d104      	bne.n	8004a3e <HAL_SD_IRQHandler+0xda>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f003 f9c2 	bl	8007dc8 <HAL_SD_RxCpltCallback>
 8004a44:	e10b      	b.n	8004c5e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f003 f9b4 	bl	8007db4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004a4c:	e107      	b.n	8004c5e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 8102 	beq.w	8004c5e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f003 0320 	and.w	r3, r3, #32
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d011      	beq.n	8004a88 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f002 fd21 	bl	80074b0 <SDMMC_CmdStopTransfer>
 8004a6e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d008      	beq.n	8004a88 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f8f4 	bl	8004c70 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f040 80e5 	bne.w	8004c5e <HAL_SD_IRQHandler+0x2fa>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f040 80df 	bne.w	8004c5e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 0208 	bic.w	r2, r2, #8
 8004aae:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f003 f97b 	bl	8007db4 <HAL_SD_TxCpltCallback>
}
 8004abe:	e0ce      	b.n	8004c5e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d008      	beq.n	8004ae0 <HAL_SD_IRQHandler+0x17c>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f003 0308 	and.w	r3, r3, #8
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 ffb0 	bl	8005a3e <SD_Write_IT>
 8004ade:	e0be      	b.n	8004c5e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ae6:	f240 233a 	movw	r3, #570	@ 0x23a
 8004aea:	4013      	ands	r3, r2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 80b6 	beq.w	8004c5e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d005      	beq.n	8004b0c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b04:	f043 0202 	orr.w	r2, r3, #2
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b12:	f003 0308 	and.w	r3, r3, #8
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d005      	beq.n	8004b26 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1e:	f043 0208 	orr.w	r2, r3, #8
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b2c:	f003 0320 	and.w	r3, r3, #32
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d005      	beq.n	8004b40 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b38:	f043 0220 	orr.w	r2, r3, #32
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b46:	f003 0310 	and.w	r3, r3, #16
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d005      	beq.n	8004b5a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b52:	f043 0210 	orr.w	r2, r3, #16
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6c:	f043 0208 	orr.w	r2, r3, #8
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f240 723a 	movw	r2, #1850	@ 0x73a
 8004b7c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6812      	ldr	r2, [r2, #0]
 8004b88:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8004b8c:	f023 0302 	bic.w	r3, r3, #2
 8004b90:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f002 fc8a 	bl	80074b0 <SDMMC_CmdStopTransfer>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f855 	bl	8004c70 <HAL_SD_ErrorCallback>
}
 8004bc6:	e04a      	b.n	8004c5e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d045      	beq.n	8004c5e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f003 0310 	and.w	r3, r3, #16
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d104      	bne.n	8004be6 <HAL_SD_IRQHandler+0x282>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f003 0320 	and.w	r3, r3, #32
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d011      	beq.n	8004c0a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bea:	4a1f      	ldr	r2, [pc, #124]	@ (8004c68 <HAL_SD_IRQHandler+0x304>)
 8004bec:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fe fa6c 	bl	80030d0 <HAL_DMA_Abort_IT>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d02f      	beq.n	8004c5e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 fb68 	bl	80052d8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004c08:	e029      	b.n	8004c5e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d104      	bne.n	8004c1e <HAL_SD_IRQHandler+0x2ba>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d011      	beq.n	8004c42 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c22:	4a12      	ldr	r2, [pc, #72]	@ (8004c6c <HAL_SD_IRQHandler+0x308>)
 8004c24:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fe fa50 	bl	80030d0 <HAL_DMA_Abort_IT>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d013      	beq.n	8004c5e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 fb83 	bl	8005346 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004c40:	e00d      	b.n	8004c5e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f003 f8a2 	bl	8007da0 <HAL_SD_AbortCallback>
}
 8004c5c:	e7ff      	b.n	8004c5e <HAL_SD_IRQHandler+0x2fa>
 8004c5e:	bf00      	nop
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	080052d9 	.word	0x080052d9
 8004c6c:	08005347 	.word	0x08005347

08004c70 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c92:	0f9b      	lsrs	r3, r3, #30
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c9e:	0e9b      	lsrs	r3, r3, #26
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cb0:	0e1b      	lsrs	r3, r3, #24
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	f003 0303 	and.w	r3, r3, #3
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cc2:	0c1b      	lsrs	r3, r3, #16
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cce:	0a1b      	lsrs	r3, r3, #8
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cda:	b2da      	uxtb	r2, r3
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ce4:	0d1b      	lsrs	r3, r3, #20
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004cf0:	0c1b      	lsrs	r3, r3, #16
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	f003 030f 	and.w	r3, r3, #15
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d02:	0bdb      	lsrs	r3, r3, #15
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d14:	0b9b      	lsrs	r3, r3, #14
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d26:	0b5b      	lsrs	r3, r3, #13
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d38:	0b1b      	lsrs	r3, r3, #12
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d163      	bne.n	8004e1c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d58:	009a      	lsls	r2, r3, #2
 8004d5a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004d5e:	4013      	ands	r3, r2
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8004d64:	0f92      	lsrs	r2, r2, #30
 8004d66:	431a      	orrs	r2, r3
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d70:	0edb      	lsrs	r3, r3, #27
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d82:	0e1b      	lsrs	r3, r3, #24
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d94:	0d5b      	lsrs	r3, r3, #21
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004da6:	0c9b      	lsrs	r3, r3, #18
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004db8:	0bdb      	lsrs	r3, r3, #15
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	7e1b      	ldrb	r3, [r3, #24]
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	3302      	adds	r3, #2
 8004ddc:	2201      	movs	r2, #1
 8004dde:	fa02 f303 	lsl.w	r3, r2, r3
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004de6:	fb03 f202 	mul.w	r2, r3, r2
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	7a1b      	ldrb	r3, [r3, #8]
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	f003 030f 	and.w	r3, r3, #15
 8004df8:	2201      	movs	r2, #1
 8004dfa:	409a      	lsls	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004e08:	0a52      	lsrs	r2, r2, #9
 8004e0a:	fb03 f202 	mul.w	r2, r3, r2
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e18:	661a      	str	r2, [r3, #96]	@ 0x60
 8004e1a:	e031      	b.n	8004e80 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d11d      	bne.n	8004e60 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e28:	041b      	lsls	r3, r3, #16
 8004e2a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e32:	0c1b      	lsrs	r3, r3, #16
 8004e34:	431a      	orrs	r2, r3
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	029a      	lsls	r2, r3, #10
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e54:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	661a      	str	r2, [r3, #96]	@ 0x60
 8004e5e:	e00f      	b.n	8004e80 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a58      	ldr	r2, [pc, #352]	@ (8004fc8 <HAL_SD_GetCardCSD+0x344>)
 8004e66:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e6c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e09d      	b.n	8004fbc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e84:	0b9b      	lsrs	r3, r3, #14
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e96:	09db      	lsrs	r3, r3, #7
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eb8:	0fdb      	lsrs	r3, r3, #31
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec4:	0f5b      	lsrs	r3, r3, #29
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	f003 0303 	and.w	r3, r3, #3
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed6:	0e9b      	lsrs	r3, r3, #26
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	f003 0307 	and.w	r3, r3, #7
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee8:	0d9b      	lsrs	r3, r3, #22
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	f003 030f 	and.w	r3, r3, #15
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004efa:	0d5b      	lsrs	r3, r3, #21
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f16:	0c1b      	lsrs	r3, r3, #16
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	b2da      	uxtb	r2, r3
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f2a:	0bdb      	lsrs	r3, r3, #15
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	b2da      	uxtb	r2, r3
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f3e:	0b9b      	lsrs	r3, r3, #14
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f52:	0b5b      	lsrs	r3, r3, #13
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f66:	0b1b      	lsrs	r3, r3, #12
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7a:	0a9b      	lsrs	r3, r3, #10
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8e:	0a1b      	lsrs	r3, r3, #8
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	f003 0303 	and.w	r3, r3, #3
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa2:	085b      	lsrs	r3, r3, #1
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	004005ff 	.word	0x004005ff

08004fcc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005024:	b5b0      	push	{r4, r5, r7, lr}
 8005026:	b08e      	sub	sp, #56	@ 0x38
 8005028:	af04      	add	r7, sp, #16
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800502e:	2300      	movs	r3, #0
 8005030:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2203      	movs	r2, #3
 8005038:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005040:	2b03      	cmp	r3, #3
 8005042:	d02e      	beq.n	80050a2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800504a:	d106      	bne.n	800505a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005050:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	639a      	str	r2, [r3, #56]	@ 0x38
 8005058:	e029      	b.n	80050ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005060:	d10a      	bne.n	8005078 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fb2a 	bl	80056bc <SD_WideBus_Enable>
 8005068:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	431a      	orrs	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	639a      	str	r2, [r3, #56]	@ 0x38
 8005076:	e01a      	b.n	80050ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10a      	bne.n	8005094 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fb67 	bl	8005752 <SD_WideBus_Disable>
 8005084:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	431a      	orrs	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	639a      	str	r2, [r3, #56]	@ 0x38
 8005092:	e00c      	b.n	80050ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005098:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	639a      	str	r2, [r3, #56]	@ 0x38
 80050a0:	e005      	b.n	80050ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00b      	beq.n	80050ce <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a26      	ldr	r2, [pc, #152]	@ (8005154 <HAL_SD_ConfigWideBusOperation+0x130>)
 80050bc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80050cc:	e01f      	b.n	800510e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681d      	ldr	r5, [r3, #0]
 80050f4:	466c      	mov	r4, sp
 80050f6:	f107 0314 	add.w	r3, r7, #20
 80050fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80050fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005102:	f107 0308 	add.w	r3, r7, #8
 8005106:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005108:	4628      	mov	r0, r5
 800510a:	f002 f84b 	bl	80071a4 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005116:	4618      	mov	r0, r3
 8005118:	f002 f91f 	bl	800735a <SDMMC_CmdBlockLength>
 800511c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00c      	beq.n	800513e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a0a      	ldr	r2, [pc, #40]	@ (8005154 <HAL_SD_ConfigWideBusOperation+0x130>)
 800512a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	431a      	orrs	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8005146:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800514a:	4618      	mov	r0, r3
 800514c:	3728      	adds	r7, #40	@ 0x28
 800514e:	46bd      	mov	sp, r7
 8005150:	bdb0      	pop	{r4, r5, r7, pc}
 8005152:	bf00      	nop
 8005154:	004005ff 	.word	0x004005ff

08005158 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005160:	2300      	movs	r3, #0
 8005162:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005164:	f107 030c 	add.w	r3, r7, #12
 8005168:	4619      	mov	r1, r3
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 fa7e 	bl	800566c <SD_SendStatus>
 8005170:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d005      	beq.n	8005184 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	0a5b      	lsrs	r3, r3, #9
 8005188:	f003 030f 	and.w	r3, r3, #15
 800518c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800518e:	693b      	ldr	r3, [r7, #16]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3718      	adds	r7, #24
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051b4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80051b6:	bf00      	nop
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ce:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d4:	2b82      	cmp	r3, #130	@ 0x82
 80051d6:	d111      	bne.n	80051fc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4618      	mov	r0, r3
 80051de:	f002 f967 	bl	80074b0 <SDMMC_CmdStopTransfer>
 80051e2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d008      	beq.n	80051fc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	431a      	orrs	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f7ff fd3a 	bl	8004c70 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0208 	bic.w	r2, r2, #8
 800520a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005214:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f002 fdcf 	bl	8007dc8 <HAL_SD_RxCpltCallback>
#endif
}
 800522a:	bf00      	nop
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
	...

08005234 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005240:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fe f8f0 	bl	8003428 <HAL_DMA_GetError>
 8005248:	4603      	mov	r3, r0
 800524a:	2b02      	cmp	r3, #2
 800524c:	d03e      	beq.n	80052cc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005254:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800525a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800525c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d002      	beq.n	800526a <SD_DMAError+0x36>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d12d      	bne.n	80052c6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a19      	ldr	r2, [pc, #100]	@ (80052d4 <SD_DMAError+0xa0>)
 8005270:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8005280:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005286:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800528e:	6978      	ldr	r0, [r7, #20]
 8005290:	f7ff ff62 	bl	8005158 <HAL_SD_GetCardState>
 8005294:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2b06      	cmp	r3, #6
 800529a:	d002      	beq.n	80052a2 <SD_DMAError+0x6e>
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	2b05      	cmp	r3, #5
 80052a0:	d10a      	bne.n	80052b8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f002 f902 	bl	80074b0 <SDMMC_CmdStopTransfer>
 80052ac:	4602      	mov	r2, r0
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b2:	431a      	orrs	r2, r3
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	2200      	movs	r2, #0
 80052c4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80052c6:	6978      	ldr	r0, [r7, #20]
 80052c8:	f7ff fcd2 	bl	8004c70 <HAL_SD_ErrorCallback>
#endif
  }
}
 80052cc:	bf00      	nop
 80052ce:	3718      	adds	r7, #24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	004005ff 	.word	0x004005ff

080052d8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f240 523a 	movw	r2, #1338	@ 0x53a
 80052ee:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	f7ff ff31 	bl	8005158 <HAL_SD_GetCardState>
 80052f6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2b06      	cmp	r3, #6
 800530a:	d002      	beq.n	8005312 <SD_DMATxAbort+0x3a>
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	2b05      	cmp	r3, #5
 8005310:	d10a      	bne.n	8005328 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4618      	mov	r0, r3
 8005318:	f002 f8ca 	bl	80074b0 <SDMMC_CmdStopTransfer>
 800531c:	4602      	mov	r2, r0
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005322:	431a      	orrs	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800532c:	2b00      	cmp	r3, #0
 800532e:	d103      	bne.n	8005338 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f002 fd35 	bl	8007da0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005336:	e002      	b.n	800533e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f7ff fc99 	bl	8004c70 <HAL_SD_ErrorCallback>
}
 800533e:	bf00      	nop
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b084      	sub	sp, #16
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005352:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f240 523a 	movw	r2, #1338	@ 0x53a
 800535c:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f7ff fefa 	bl	8005158 <HAL_SD_GetCardState>
 8005364:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2b06      	cmp	r3, #6
 8005378:	d002      	beq.n	8005380 <SD_DMARxAbort+0x3a>
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2b05      	cmp	r3, #5
 800537e:	d10a      	bne.n	8005396 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4618      	mov	r0, r3
 8005386:	f002 f893 	bl	80074b0 <SDMMC_CmdStopTransfer>
 800538a:	4602      	mov	r2, r0
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005390:	431a      	orrs	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539a:	2b00      	cmp	r3, #0
 800539c:	d103      	bne.n	80053a6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f002 fcfe 	bl	8007da0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80053a4:	e002      	b.n	80053ac <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f7ff fc62 	bl	8004c70 <HAL_SD_ErrorCallback>
}
 80053ac:	bf00      	nop
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80053b4:	b5b0      	push	{r4, r5, r7, lr}
 80053b6:	b094      	sub	sp, #80	@ 0x50
 80053b8:	af04      	add	r7, sp, #16
 80053ba:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80053bc:	2301      	movs	r3, #1
 80053be:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4618      	mov	r0, r3
 80053c6:	f001 ff44 	bl	8007252 <SDIO_GetPowerState>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d102      	bne.n	80053d6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80053d0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80053d4:	e0b8      	b.n	8005548 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053da:	2b03      	cmp	r3, #3
 80053dc:	d02f      	beq.n	800543e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f002 f96e 	bl	80076c4 <SDMMC_CmdSendCID>
 80053e8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80053ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <SD_InitCard+0x40>
    {
      return errorstate;
 80053f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053f2:	e0a9      	b.n	8005548 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2100      	movs	r1, #0
 80053fa:	4618      	mov	r0, r3
 80053fc:	f001 ff6e 	bl	80072dc <SDIO_GetResponse>
 8005400:	4602      	mov	r2, r0
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2104      	movs	r1, #4
 800540c:	4618      	mov	r0, r3
 800540e:	f001 ff65 	bl	80072dc <SDIO_GetResponse>
 8005412:	4602      	mov	r2, r0
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2108      	movs	r1, #8
 800541e:	4618      	mov	r0, r3
 8005420:	f001 ff5c 	bl	80072dc <SDIO_GetResponse>
 8005424:	4602      	mov	r2, r0
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	210c      	movs	r1, #12
 8005430:	4618      	mov	r0, r3
 8005432:	f001 ff53 	bl	80072dc <SDIO_GetResponse>
 8005436:	4602      	mov	r2, r0
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005442:	2b03      	cmp	r3, #3
 8005444:	d00d      	beq.n	8005462 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f107 020e 	add.w	r2, r7, #14
 800544e:	4611      	mov	r1, r2
 8005450:	4618      	mov	r0, r3
 8005452:	f002 f974 	bl	800773e <SDMMC_CmdSetRelAdd>
 8005456:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <SD_InitCard+0xae>
    {
      return errorstate;
 800545e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005460:	e072      	b.n	8005548 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005466:	2b03      	cmp	r3, #3
 8005468:	d036      	beq.n	80054d8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800546a:	89fb      	ldrh	r3, [r7, #14]
 800546c:	461a      	mov	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800547a:	041b      	lsls	r3, r3, #16
 800547c:	4619      	mov	r1, r3
 800547e:	4610      	mov	r0, r2
 8005480:	f002 f93e 	bl	8007700 <SDMMC_CmdSendCSD>
 8005484:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <SD_InitCard+0xdc>
    {
      return errorstate;
 800548c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800548e:	e05b      	b.n	8005548 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2100      	movs	r1, #0
 8005496:	4618      	mov	r0, r3
 8005498:	f001 ff20 	bl	80072dc <SDIO_GetResponse>
 800549c:	4602      	mov	r2, r0
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2104      	movs	r1, #4
 80054a8:	4618      	mov	r0, r3
 80054aa:	f001 ff17 	bl	80072dc <SDIO_GetResponse>
 80054ae:	4602      	mov	r2, r0
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2108      	movs	r1, #8
 80054ba:	4618      	mov	r0, r3
 80054bc:	f001 ff0e 	bl	80072dc <SDIO_GetResponse>
 80054c0:	4602      	mov	r2, r0
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	210c      	movs	r1, #12
 80054cc:	4618      	mov	r0, r3
 80054ce:	f001 ff05 	bl	80072dc <SDIO_GetResponse>
 80054d2:	4602      	mov	r2, r0
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2104      	movs	r1, #4
 80054de:	4618      	mov	r0, r3
 80054e0:	f001 fefc 	bl	80072dc <SDIO_GetResponse>
 80054e4:	4603      	mov	r3, r0
 80054e6:	0d1a      	lsrs	r2, r3, #20
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80054ec:	f107 0310 	add.w	r3, r7, #16
 80054f0:	4619      	mov	r1, r3
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7ff fbc6 	bl	8004c84 <HAL_SD_GetCardCSD>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d002      	beq.n	8005504 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80054fe:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005502:	e021      	b.n	8005548 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6819      	ldr	r1, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800550c:	041b      	lsls	r3, r3, #16
 800550e:	2200      	movs	r2, #0
 8005510:	461c      	mov	r4, r3
 8005512:	4615      	mov	r5, r2
 8005514:	4622      	mov	r2, r4
 8005516:	462b      	mov	r3, r5
 8005518:	4608      	mov	r0, r1
 800551a:	f001 ffeb 	bl	80074f4 <SDMMC_CmdSelDesel>
 800551e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <SD_InitCard+0x176>
  {
    return errorstate;
 8005526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005528:	e00e      	b.n	8005548 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681d      	ldr	r5, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	466c      	mov	r4, sp
 8005532:	f103 0210 	add.w	r2, r3, #16
 8005536:	ca07      	ldmia	r2, {r0, r1, r2}
 8005538:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800553c:	3304      	adds	r3, #4
 800553e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005540:	4628      	mov	r0, r5
 8005542:	f001 fe2f 	bl	80071a4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3740      	adds	r7, #64	@ 0x40
 800554c:	46bd      	mov	sp, r7
 800554e:	bdb0      	pop	{r4, r5, r7, pc}

08005550 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005558:	2300      	movs	r3, #0
 800555a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	617b      	str	r3, [r7, #20]
 8005560:	2300      	movs	r3, #0
 8005562:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4618      	mov	r0, r3
 800556a:	f001 ffe6 	bl	800753a <SDMMC_CmdGoIdleState>
 800556e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <SD_PowerON+0x2a>
  {
    return errorstate;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	e072      	b.n	8005660 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4618      	mov	r0, r3
 8005580:	f001 fff9 	bl	8007576 <SDMMC_CmdOperCond>
 8005584:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00d      	beq.n	80055a8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4618      	mov	r0, r3
 8005598:	f001 ffcf 	bl	800753a <SDMMC_CmdGoIdleState>
 800559c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d004      	beq.n	80055ae <SD_PowerON+0x5e>
    {
      return errorstate;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	e05b      	b.n	8005660 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d137      	bne.n	8005626 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2100      	movs	r1, #0
 80055bc:	4618      	mov	r0, r3
 80055be:	f001 fff9 	bl	80075b4 <SDMMC_CmdAppCommand>
 80055c2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d02d      	beq.n	8005626 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80055ca:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80055ce:	e047      	b.n	8005660 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2100      	movs	r1, #0
 80055d6:	4618      	mov	r0, r3
 80055d8:	f001 ffec 	bl	80075b4 <SDMMC_CmdAppCommand>
 80055dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <SD_PowerON+0x98>
    {
      return errorstate;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	e03b      	b.n	8005660 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	491e      	ldr	r1, [pc, #120]	@ (8005668 <SD_PowerON+0x118>)
 80055ee:	4618      	mov	r0, r3
 80055f0:	f002 f802 	bl	80075f8 <SDMMC_CmdAppOperCommand>
 80055f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80055fc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005600:	e02e      	b.n	8005660 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2100      	movs	r1, #0
 8005608:	4618      	mov	r0, r3
 800560a:	f001 fe67 	bl	80072dc <SDIO_GetResponse>
 800560e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	0fdb      	lsrs	r3, r3, #31
 8005614:	2b01      	cmp	r3, #1
 8005616:	d101      	bne.n	800561c <SD_PowerON+0xcc>
 8005618:	2301      	movs	r3, #1
 800561a:	e000      	b.n	800561e <SD_PowerON+0xce>
 800561c:	2300      	movs	r3, #0
 800561e:	613b      	str	r3, [r7, #16]

    count++;
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	3301      	adds	r3, #1
 8005624:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800562c:	4293      	cmp	r3, r2
 800562e:	d802      	bhi.n	8005636 <SD_PowerON+0xe6>
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d0cc      	beq.n	80055d0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800563c:	4293      	cmp	r3, r2
 800563e:	d902      	bls.n	8005646 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005640:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005644:	e00c      	b.n	8005660 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	645a      	str	r2, [r3, #68]	@ 0x44
 8005656:	e002      	b.n	800565e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3718      	adds	r7, #24
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	c1100000 	.word	0xc1100000

0800566c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d102      	bne.n	8005682 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800567c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005680:	e018      	b.n	80056b4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800568a:	041b      	lsls	r3, r3, #16
 800568c:	4619      	mov	r1, r3
 800568e:	4610      	mov	r0, r2
 8005690:	f002 f876 	bl	8007780 <SDMMC_CmdSendStatus>
 8005694:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	e009      	b.n	80056b4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2100      	movs	r1, #0
 80056a6:	4618      	mov	r0, r3
 80056a8:	f001 fe18 	bl	80072dc <SDIO_GetResponse>
 80056ac:	4602      	mov	r2, r0
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80056c4:	2300      	movs	r3, #0
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	2300      	movs	r3, #0
 80056ca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2100      	movs	r1, #0
 80056d2:	4618      	mov	r0, r3
 80056d4:	f001 fe02 	bl	80072dc <SDIO_GetResponse>
 80056d8:	4603      	mov	r3, r0
 80056da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80056e2:	d102      	bne.n	80056ea <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80056e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80056e8:	e02f      	b.n	800574a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80056ea:	f107 030c 	add.w	r3, r7, #12
 80056ee:	4619      	mov	r1, r3
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f879 	bl	80057e8 <SD_FindSCR>
 80056f6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	e023      	b.n	800574a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d01c      	beq.n	8005746 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005714:	041b      	lsls	r3, r3, #16
 8005716:	4619      	mov	r1, r3
 8005718:	4610      	mov	r0, r2
 800571a:	f001 ff4b 	bl	80075b4 <SDMMC_CmdAppCommand>
 800571e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	e00f      	b.n	800574a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2102      	movs	r1, #2
 8005730:	4618      	mov	r0, r3
 8005732:	f001 ff84 	bl	800763e <SDMMC_CmdBusWidth>
 8005736:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	e003      	b.n	800574a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005742:	2300      	movs	r3, #0
 8005744:	e001      	b.n	800574a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005746:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800574a:	4618      	mov	r0, r3
 800574c:	3718      	adds	r7, #24
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b086      	sub	sp, #24
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]
 800575e:	2300      	movs	r3, #0
 8005760:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2100      	movs	r1, #0
 8005768:	4618      	mov	r0, r3
 800576a:	f001 fdb7 	bl	80072dc <SDIO_GetResponse>
 800576e:	4603      	mov	r3, r0
 8005770:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005774:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005778:	d102      	bne.n	8005780 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800577a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800577e:	e02f      	b.n	80057e0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005780:	f107 030c 	add.w	r3, r7, #12
 8005784:	4619      	mov	r1, r3
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f82e 	bl	80057e8 <SD_FindSCR>
 800578c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	e023      	b.n	80057e0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d01c      	beq.n	80057dc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057aa:	041b      	lsls	r3, r3, #16
 80057ac:	4619      	mov	r1, r3
 80057ae:	4610      	mov	r0, r2
 80057b0:	f001 ff00 	bl	80075b4 <SDMMC_CmdAppCommand>
 80057b4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d001      	beq.n	80057c0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	e00f      	b.n	80057e0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2100      	movs	r1, #0
 80057c6:	4618      	mov	r0, r3
 80057c8:	f001 ff39 	bl	800763e <SDMMC_CmdBusWidth>
 80057cc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	e003      	b.n	80057e0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80057d8:	2300      	movs	r3, #0
 80057da:	e001      	b.n	80057e0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80057dc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3718      	adds	r7, #24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80057e8:	b590      	push	{r4, r7, lr}
 80057ea:	b08f      	sub	sp, #60	@ 0x3c
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80057f2:	f7fc ff43 	bl	800267c <HAL_GetTick>
 80057f6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80057fc:	2300      	movs	r3, #0
 80057fe:	60bb      	str	r3, [r7, #8]
 8005800:	2300      	movs	r3, #0
 8005802:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2108      	movs	r1, #8
 800580e:	4618      	mov	r0, r3
 8005810:	f001 fda3 	bl	800735a <SDMMC_CmdBlockLength>
 8005814:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005818:	2b00      	cmp	r3, #0
 800581a:	d001      	beq.n	8005820 <SD_FindSCR+0x38>
  {
    return errorstate;
 800581c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800581e:	e0b9      	b.n	8005994 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005828:	041b      	lsls	r3, r3, #16
 800582a:	4619      	mov	r1, r3
 800582c:	4610      	mov	r0, r2
 800582e:	f001 fec1 	bl	80075b4 <SDMMC_CmdAppCommand>
 8005832:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <SD_FindSCR+0x56>
  {
    return errorstate;
 800583a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583c:	e0aa      	b.n	8005994 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800583e:	f04f 33ff 	mov.w	r3, #4294967295
 8005842:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005844:	2308      	movs	r3, #8
 8005846:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005848:	2330      	movs	r3, #48	@ 0x30
 800584a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800584c:	2302      	movs	r3, #2
 800584e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005850:	2300      	movs	r3, #0
 8005852:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005854:	2301      	movs	r3, #1
 8005856:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f107 0210 	add.w	r2, r7, #16
 8005860:	4611      	mov	r1, r2
 8005862:	4618      	mov	r0, r3
 8005864:	f001 fd4d 	bl	8007302 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4618      	mov	r0, r3
 800586e:	f001 ff08 	bl	8007682 <SDMMC_CmdSendSCR>
 8005872:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005876:	2b00      	cmp	r3, #0
 8005878:	d02a      	beq.n	80058d0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800587a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800587c:	e08a      	b.n	8005994 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005884:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00f      	beq.n	80058ac <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6819      	ldr	r1, [r3, #0]
 8005890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	f107 0208 	add.w	r2, r7, #8
 8005898:	18d4      	adds	r4, r2, r3
 800589a:	4608      	mov	r0, r1
 800589c:	f001 fcad 	bl	80071fa <SDIO_ReadFIFO>
 80058a0:	4603      	mov	r3, r0
 80058a2:	6023      	str	r3, [r4, #0]
      index++;
 80058a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058a6:	3301      	adds	r3, #1
 80058a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80058aa:	e006      	b.n	80058ba <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d012      	beq.n	80058e0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80058ba:	f7fc fedf 	bl	800267c <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c8:	d102      	bne.n	80058d0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80058ca:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80058ce:	e061      	b.n	8005994 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058d6:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0cf      	beq.n	800587e <SD_FindSCR+0x96>
 80058de:	e000      	b.n	80058e2 <SD_FindSCR+0xfa>
      break;
 80058e0:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058e8:	f003 0308 	and.w	r3, r3, #8
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d106      	bne.n	80058fe <SD_FindSCR+0x116>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d005      	beq.n	800590a <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2208      	movs	r2, #8
 8005904:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005906:	2308      	movs	r3, #8
 8005908:	e044      	b.n	8005994 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005910:	f003 0302 	and.w	r3, r3, #2
 8005914:	2b00      	cmp	r3, #0
 8005916:	d005      	beq.n	8005924 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2202      	movs	r2, #2
 800591e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005920:	2302      	movs	r3, #2
 8005922:	e037      	b.n	8005994 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800592a:	f003 0320 	and.w	r3, r3, #32
 800592e:	2b00      	cmp	r3, #0
 8005930:	d005      	beq.n	800593e <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2220      	movs	r2, #32
 8005938:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800593a:	2320      	movs	r3, #32
 800593c:	e02a      	b.n	8005994 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005946:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	061a      	lsls	r2, r3, #24
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	021b      	lsls	r3, r3, #8
 8005950:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005954:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	0a1b      	lsrs	r3, r3, #8
 800595a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800595e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	0e1b      	lsrs	r3, r3, #24
 8005964:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005968:	601a      	str	r2, [r3, #0]
    scr++;
 800596a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800596c:	3304      	adds	r3, #4
 800596e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	061a      	lsls	r2, r3, #24
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	021b      	lsls	r3, r3, #8
 8005978:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800597c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	0a1b      	lsrs	r3, r3, #8
 8005982:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005986:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	0e1b      	lsrs	r3, r3, #24
 800598c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800598e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005990:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	373c      	adds	r7, #60	@ 0x3c
 8005998:	46bd      	mov	sp, r7
 800599a:	bd90      	pop	{r4, r7, pc}

0800599c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ae:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d03f      	beq.n	8005a36 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80059b6:	2300      	movs	r3, #0
 80059b8:	617b      	str	r3, [r7, #20]
 80059ba:	e033      	b.n	8005a24 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f001 fc1a 	bl	80071fa <SDIO_ReadFIFO>
 80059c6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	701a      	strb	r2, [r3, #0]
      tmp++;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	3301      	adds	r3, #1
 80059d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	3b01      	subs	r3, #1
 80059da:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	0a1b      	lsrs	r3, r3, #8
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	3301      	adds	r3, #1
 80059ea:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	3b01      	subs	r3, #1
 80059f0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	0c1b      	lsrs	r3, r3, #16
 80059f6:	b2da      	uxtb	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	3301      	adds	r3, #1
 8005a00:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	3b01      	subs	r3, #1
 8005a06:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	0e1b      	lsrs	r3, r3, #24
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	3301      	adds	r3, #1
 8005a16:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	3301      	adds	r3, #1
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	2b07      	cmp	r3, #7
 8005a28:	d9c8      	bls.n	80059bc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8005a36:	bf00      	nop
 8005a38:	3718      	adds	r7, #24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b086      	sub	sp, #24
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a50:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d043      	beq.n	8005ae0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005a58:	2300      	movs	r3, #0
 8005a5a:	617b      	str	r3, [r7, #20]
 8005a5c:	e037      	b.n	8005ace <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	3301      	adds	r3, #1
 8005a68:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	021a      	lsls	r2, r3, #8
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	3b01      	subs	r3, #1
 8005a86:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	041a      	lsls	r2, r3, #16
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	3301      	adds	r3, #1
 8005a98:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	061a      	lsls	r2, r3, #24
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f107 0208 	add.w	r2, r7, #8
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f001 fba6 	bl	8007214 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	3301      	adds	r3, #1
 8005acc:	617b      	str	r3, [r7, #20]
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2b07      	cmp	r3, #7
 8005ad2:	d9c4      	bls.n	8005a5e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8005ae0:	bf00      	nop
 8005ae2:	3718      	adds	r7, #24
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e041      	b.n	8005b7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d106      	bne.n	8005b14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7fc fa9e 	bl	8002050 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2202      	movs	r2, #2
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	3304      	adds	r3, #4
 8005b24:	4619      	mov	r1, r3
 8005b26:	4610      	mov	r0, r2
 8005b28:	f000 f8f0 	bl	8005d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3708      	adds	r7, #8
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
	...

08005b88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b94:	2300      	movs	r3, #0
 8005b96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d101      	bne.n	8005ba6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	e0ae      	b.n	8005d04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b0c      	cmp	r3, #12
 8005bb2:	f200 809f 	bhi.w	8005cf4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbc:	08005bf1 	.word	0x08005bf1
 8005bc0:	08005cf5 	.word	0x08005cf5
 8005bc4:	08005cf5 	.word	0x08005cf5
 8005bc8:	08005cf5 	.word	0x08005cf5
 8005bcc:	08005c31 	.word	0x08005c31
 8005bd0:	08005cf5 	.word	0x08005cf5
 8005bd4:	08005cf5 	.word	0x08005cf5
 8005bd8:	08005cf5 	.word	0x08005cf5
 8005bdc:	08005c73 	.word	0x08005c73
 8005be0:	08005cf5 	.word	0x08005cf5
 8005be4:	08005cf5 	.word	0x08005cf5
 8005be8:	08005cf5 	.word	0x08005cf5
 8005bec:	08005cb3 	.word	0x08005cb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68b9      	ldr	r1, [r7, #8]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 f914 	bl	8005e24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	699a      	ldr	r2, [r3, #24]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f042 0208 	orr.w	r2, r2, #8
 8005c0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	699a      	ldr	r2, [r3, #24]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f022 0204 	bic.w	r2, r2, #4
 8005c1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6999      	ldr	r1, [r3, #24]
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	691a      	ldr	r2, [r3, #16]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	619a      	str	r2, [r3, #24]
      break;
 8005c2e:	e064      	b.n	8005cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68b9      	ldr	r1, [r7, #8]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 f95a 	bl	8005ef0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	699a      	ldr	r2, [r3, #24]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	699a      	ldr	r2, [r3, #24]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6999      	ldr	r1, [r3, #24]
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	021a      	lsls	r2, r3, #8
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	619a      	str	r2, [r3, #24]
      break;
 8005c70:	e043      	b.n	8005cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68b9      	ldr	r1, [r7, #8]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f000 f9a5 	bl	8005fc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	69da      	ldr	r2, [r3, #28]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f042 0208 	orr.w	r2, r2, #8
 8005c8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69da      	ldr	r2, [r3, #28]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 0204 	bic.w	r2, r2, #4
 8005c9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	69d9      	ldr	r1, [r3, #28]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	691a      	ldr	r2, [r3, #16]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	430a      	orrs	r2, r1
 8005cae:	61da      	str	r2, [r3, #28]
      break;
 8005cb0:	e023      	b.n	8005cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68b9      	ldr	r1, [r7, #8]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f000 f9ef 	bl	800609c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	69da      	ldr	r2, [r3, #28]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69da      	ldr	r2, [r3, #28]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69d9      	ldr	r1, [r3, #28]
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	021a      	lsls	r2, r3, #8
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	61da      	str	r2, [r3, #28]
      break;
 8005cf2:	e002      	b.n	8005cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8005cf8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3718      	adds	r7, #24
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a3a      	ldr	r2, [pc, #232]	@ (8005e08 <TIM_Base_SetConfig+0xfc>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d00f      	beq.n	8005d44 <TIM_Base_SetConfig+0x38>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d2a:	d00b      	beq.n	8005d44 <TIM_Base_SetConfig+0x38>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a37      	ldr	r2, [pc, #220]	@ (8005e0c <TIM_Base_SetConfig+0x100>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d007      	beq.n	8005d44 <TIM_Base_SetConfig+0x38>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a36      	ldr	r2, [pc, #216]	@ (8005e10 <TIM_Base_SetConfig+0x104>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d003      	beq.n	8005d44 <TIM_Base_SetConfig+0x38>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a35      	ldr	r2, [pc, #212]	@ (8005e14 <TIM_Base_SetConfig+0x108>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d108      	bne.n	8005d56 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a2b      	ldr	r2, [pc, #172]	@ (8005e08 <TIM_Base_SetConfig+0xfc>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d01b      	beq.n	8005d96 <TIM_Base_SetConfig+0x8a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d64:	d017      	beq.n	8005d96 <TIM_Base_SetConfig+0x8a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a28      	ldr	r2, [pc, #160]	@ (8005e0c <TIM_Base_SetConfig+0x100>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d013      	beq.n	8005d96 <TIM_Base_SetConfig+0x8a>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a27      	ldr	r2, [pc, #156]	@ (8005e10 <TIM_Base_SetConfig+0x104>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d00f      	beq.n	8005d96 <TIM_Base_SetConfig+0x8a>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a26      	ldr	r2, [pc, #152]	@ (8005e14 <TIM_Base_SetConfig+0x108>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d00b      	beq.n	8005d96 <TIM_Base_SetConfig+0x8a>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a25      	ldr	r2, [pc, #148]	@ (8005e18 <TIM_Base_SetConfig+0x10c>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d007      	beq.n	8005d96 <TIM_Base_SetConfig+0x8a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a24      	ldr	r2, [pc, #144]	@ (8005e1c <TIM_Base_SetConfig+0x110>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d003      	beq.n	8005d96 <TIM_Base_SetConfig+0x8a>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a23      	ldr	r2, [pc, #140]	@ (8005e20 <TIM_Base_SetConfig+0x114>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d108      	bne.n	8005da8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a0e      	ldr	r2, [pc, #56]	@ (8005e08 <TIM_Base_SetConfig+0xfc>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d103      	bne.n	8005ddc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	691a      	ldr	r2, [r3, #16]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d105      	bne.n	8005dfa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f023 0201 	bic.w	r2, r3, #1
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	611a      	str	r2, [r3, #16]
  }
}
 8005dfa:	bf00      	nop
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	40010000 	.word	0x40010000
 8005e0c:	40000400 	.word	0x40000400
 8005e10:	40000800 	.word	0x40000800
 8005e14:	40000c00 	.word	0x40000c00
 8005e18:	40014000 	.word	0x40014000
 8005e1c:	40014400 	.word	0x40014400
 8005e20:	40014800 	.word	0x40014800

08005e24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a1b      	ldr	r3, [r3, #32]
 8005e38:	f023 0201 	bic.w	r2, r3, #1
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f023 0303 	bic.w	r3, r3, #3
 8005e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f023 0302 	bic.w	r3, r3, #2
 8005e6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a1c      	ldr	r2, [pc, #112]	@ (8005eec <TIM_OC1_SetConfig+0xc8>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d10c      	bne.n	8005e9a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f023 0308 	bic.w	r3, r3, #8
 8005e86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f023 0304 	bic.w	r3, r3, #4
 8005e98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a13      	ldr	r2, [pc, #76]	@ (8005eec <TIM_OC1_SetConfig+0xc8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d111      	bne.n	8005ec6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ea8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	621a      	str	r2, [r3, #32]
}
 8005ee0:	bf00      	nop
 8005ee2:	371c      	adds	r7, #28
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	40010000 	.word	0x40010000

08005ef0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	f023 0210 	bic.w	r2, r3, #16
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	021b      	lsls	r3, r3, #8
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f023 0320 	bic.w	r3, r3, #32
 8005f3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	011b      	lsls	r3, r3, #4
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a1e      	ldr	r2, [pc, #120]	@ (8005fc4 <TIM_OC2_SetConfig+0xd4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d10d      	bne.n	8005f6c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	011b      	lsls	r3, r3, #4
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a15      	ldr	r2, [pc, #84]	@ (8005fc4 <TIM_OC2_SetConfig+0xd4>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d113      	bne.n	8005f9c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	621a      	str	r2, [r3, #32]
}
 8005fb6:	bf00      	nop
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	40010000 	.word	0x40010000

08005fc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f023 0303 	bic.w	r3, r3, #3
 8005ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	4313      	orrs	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006010:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	021b      	lsls	r3, r3, #8
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	4313      	orrs	r3, r2
 800601c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a1d      	ldr	r2, [pc, #116]	@ (8006098 <TIM_OC3_SetConfig+0xd0>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d10d      	bne.n	8006042 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800602c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	021b      	lsls	r3, r3, #8
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	4313      	orrs	r3, r2
 8006038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a14      	ldr	r2, [pc, #80]	@ (8006098 <TIM_OC3_SetConfig+0xd0>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d113      	bne.n	8006072 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006050:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006058:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	011b      	lsls	r3, r3, #4
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	4313      	orrs	r3, r2
 8006064:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	011b      	lsls	r3, r3, #4
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	4313      	orrs	r3, r2
 8006070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	621a      	str	r2, [r3, #32]
}
 800608c:	bf00      	nop
 800608e:	371c      	adds	r7, #28
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	40010000 	.word	0x40010000

0800609c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800609c:	b480      	push	{r7}
 800609e:	b087      	sub	sp, #28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	021b      	lsls	r3, r3, #8
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	4313      	orrs	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80060e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	031b      	lsls	r3, r3, #12
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a10      	ldr	r2, [pc, #64]	@ (8006138 <TIM_OC4_SetConfig+0x9c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d109      	bne.n	8006110 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006102:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	019b      	lsls	r3, r3, #6
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	4313      	orrs	r3, r2
 800610e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	621a      	str	r2, [r3, #32]
}
 800612a:	bf00      	nop
 800612c:	371c      	adds	r7, #28
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	40010000 	.word	0x40010000

0800613c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800614c:	2b01      	cmp	r3, #1
 800614e:	d101      	bne.n	8006154 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006150:	2302      	movs	r3, #2
 8006152:	e050      	b.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800617a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	4313      	orrs	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a1c      	ldr	r2, [pc, #112]	@ (8006204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d018      	beq.n	80061ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061a0:	d013      	beq.n	80061ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a18      	ldr	r2, [pc, #96]	@ (8006208 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d00e      	beq.n	80061ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a16      	ldr	r2, [pc, #88]	@ (800620c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d009      	beq.n	80061ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a15      	ldr	r2, [pc, #84]	@ (8006210 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d004      	beq.n	80061ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a13      	ldr	r2, [pc, #76]	@ (8006214 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d10c      	bne.n	80061e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	4313      	orrs	r3, r2
 80061da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	40010000 	.word	0x40010000
 8006208:	40000400 	.word	0x40000400
 800620c:	40000800 	.word	0x40000800
 8006210:	40000c00 	.word	0x40000c00
 8006214:	40014000 	.word	0x40014000

08006218 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006222:	2300      	movs	r3, #0
 8006224:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800622c:	2b01      	cmp	r3, #1
 800622e:	d101      	bne.n	8006234 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006230:	2302      	movs	r3, #2
 8006232:	e03d      	b.n	80062b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	4313      	orrs	r3, r2
 8006248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	4313      	orrs	r3, r2
 8006256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	4313      	orrs	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4313      	orrs	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	4313      	orrs	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	4313      	orrs	r3, r2
 800628e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	4313      	orrs	r3, r2
 800629c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3714      	adds	r7, #20
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e042      	b.n	8006354 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d106      	bne.n	80062e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7fb ff86 	bl	80021f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2224      	movs	r2, #36	@ 0x24
 80062ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68da      	ldr	r2, [r3, #12]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80062fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 fcdb 	bl	8006cbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	691a      	ldr	r2, [r3, #16]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006314:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	695a      	ldr	r2, [r3, #20]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006324:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68da      	ldr	r2, [r3, #12]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006334:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2220      	movs	r2, #32
 8006340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2220      	movs	r2, #32
 8006348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	4613      	mov	r3, r2
 8006368:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b20      	cmp	r3, #32
 8006374:	d112      	bne.n	800639c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <HAL_UART_Receive_IT+0x26>
 800637c:	88fb      	ldrh	r3, [r7, #6]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e00b      	b.n	800639e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800638c:	88fb      	ldrh	r3, [r7, #6]
 800638e:	461a      	mov	r2, r3
 8006390:	68b9      	ldr	r1, [r7, #8]
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 faba 	bl	800690c <UART_Start_Receive_IT>
 8006398:	4603      	mov	r3, r0
 800639a:	e000      	b.n	800639e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800639c:	2302      	movs	r3, #2
  }
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
	...

080063a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b0ba      	sub	sp, #232	@ 0xe8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80063ce:	2300      	movs	r3, #0
 80063d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80063d4:	2300      	movs	r3, #0
 80063d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80063da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063de:	f003 030f 	and.w	r3, r3, #15
 80063e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80063e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10f      	bne.n	800640e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063f2:	f003 0320 	and.w	r3, r3, #32
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d009      	beq.n	800640e <HAL_UART_IRQHandler+0x66>
 80063fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063fe:	f003 0320 	and.w	r3, r3, #32
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fb99 	bl	8006b3e <UART_Receive_IT>
      return;
 800640c:	e25b      	b.n	80068c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800640e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 80de 	beq.w	80065d4 <HAL_UART_IRQHandler+0x22c>
 8006418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	2b00      	cmp	r3, #0
 8006422:	d106      	bne.n	8006432 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006428:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 80d1 	beq.w	80065d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00b      	beq.n	8006456 <HAL_UART_IRQHandler+0xae>
 800643e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006446:	2b00      	cmp	r3, #0
 8006448:	d005      	beq.n	8006456 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800644e:	f043 0201 	orr.w	r2, r3, #1
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800645a:	f003 0304 	and.w	r3, r3, #4
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00b      	beq.n	800647a <HAL_UART_IRQHandler+0xd2>
 8006462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b00      	cmp	r3, #0
 800646c:	d005      	beq.n	800647a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006472:	f043 0202 	orr.w	r2, r3, #2
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800647a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00b      	beq.n	800649e <HAL_UART_IRQHandler+0xf6>
 8006486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	2b00      	cmp	r3, #0
 8006490:	d005      	beq.n	800649e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006496:	f043 0204 	orr.w	r2, r3, #4
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800649e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064a2:	f003 0308 	and.w	r3, r3, #8
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d011      	beq.n	80064ce <HAL_UART_IRQHandler+0x126>
 80064aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064ae:	f003 0320 	and.w	r3, r3, #32
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d105      	bne.n	80064c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80064b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d005      	beq.n	80064ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064c6:	f043 0208 	orr.w	r2, r3, #8
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 81f2 	beq.w	80068bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064dc:	f003 0320 	and.w	r3, r3, #32
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d008      	beq.n	80064f6 <HAL_UART_IRQHandler+0x14e>
 80064e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064e8:	f003 0320 	and.w	r3, r3, #32
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d002      	beq.n	80064f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fb24 	bl	8006b3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006500:	2b40      	cmp	r3, #64	@ 0x40
 8006502:	bf0c      	ite	eq
 8006504:	2301      	moveq	r3, #1
 8006506:	2300      	movne	r3, #0
 8006508:	b2db      	uxtb	r3, r3
 800650a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006512:	f003 0308 	and.w	r3, r3, #8
 8006516:	2b00      	cmp	r3, #0
 8006518:	d103      	bne.n	8006522 <HAL_UART_IRQHandler+0x17a>
 800651a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800651e:	2b00      	cmp	r3, #0
 8006520:	d04f      	beq.n	80065c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 fa2c 	bl	8006980 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006532:	2b40      	cmp	r3, #64	@ 0x40
 8006534:	d141      	bne.n	80065ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	3314      	adds	r3, #20
 800653c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006540:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006544:	e853 3f00 	ldrex	r3, [r3]
 8006548:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800654c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006550:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006554:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	3314      	adds	r3, #20
 800655e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006562:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006566:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800656e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006572:	e841 2300 	strex	r3, r2, [r1]
 8006576:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800657a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1d9      	bne.n	8006536 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006586:	2b00      	cmp	r3, #0
 8006588:	d013      	beq.n	80065b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800658e:	4a7e      	ldr	r2, [pc, #504]	@ (8006788 <HAL_UART_IRQHandler+0x3e0>)
 8006590:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006596:	4618      	mov	r0, r3
 8006598:	f7fc fd9a 	bl	80030d0 <HAL_DMA_Abort_IT>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d016      	beq.n	80065d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80065ac:	4610      	mov	r0, r2
 80065ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065b0:	e00e      	b.n	80065d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f994 	bl	80068e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065b8:	e00a      	b.n	80065d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f990 	bl	80068e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065c0:	e006      	b.n	80065d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f98c 	bl	80068e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80065ce:	e175      	b.n	80068bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065d0:	bf00      	nop
    return;
 80065d2:	e173      	b.n	80068bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d8:	2b01      	cmp	r3, #1
 80065da:	f040 814f 	bne.w	800687c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80065de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065e2:	f003 0310 	and.w	r3, r3, #16
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	f000 8148 	beq.w	800687c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80065ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065f0:	f003 0310 	and.w	r3, r3, #16
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 8141 	beq.w	800687c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065fa:	2300      	movs	r3, #0
 80065fc:	60bb      	str	r3, [r7, #8]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	60bb      	str	r3, [r7, #8]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	60bb      	str	r3, [r7, #8]
 800660e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800661a:	2b40      	cmp	r3, #64	@ 0x40
 800661c:	f040 80b6 	bne.w	800678c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800662c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 8145 	beq.w	80068c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800663a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800663e:	429a      	cmp	r2, r3
 8006640:	f080 813e 	bcs.w	80068c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800664a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006656:	f000 8088 	beq.w	800676a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	330c      	adds	r3, #12
 8006660:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006664:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006668:	e853 3f00 	ldrex	r3, [r3]
 800666c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006670:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006678:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	330c      	adds	r3, #12
 8006682:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006686:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800668a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006692:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006696:	e841 2300 	strex	r3, r2, [r1]
 800669a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800669e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1d9      	bne.n	800665a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3314      	adds	r3, #20
 80066ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80066b0:	e853 3f00 	ldrex	r3, [r3]
 80066b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80066b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80066b8:	f023 0301 	bic.w	r3, r3, #1
 80066bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3314      	adds	r3, #20
 80066c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80066ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80066ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80066d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80066d6:	e841 2300 	strex	r3, r2, [r1]
 80066da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80066dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1e1      	bne.n	80066a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3314      	adds	r3, #20
 80066e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80066f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3314      	adds	r3, #20
 8006702:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006706:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006708:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800670c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800670e:	e841 2300 	strex	r3, r2, [r1]
 8006712:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006714:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1e3      	bne.n	80066e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2220      	movs	r2, #32
 800671e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	330c      	adds	r3, #12
 800672e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006730:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006732:	e853 3f00 	ldrex	r3, [r3]
 8006736:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006738:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800673a:	f023 0310 	bic.w	r3, r3, #16
 800673e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	330c      	adds	r3, #12
 8006748:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800674c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800674e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006750:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006752:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006754:	e841 2300 	strex	r3, r2, [r1]
 8006758:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800675a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1e3      	bne.n	8006728 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006764:	4618      	mov	r0, r3
 8006766:	f7fc fc43 	bl	8002ff0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2202      	movs	r2, #2
 800676e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006778:	b29b      	uxth	r3, r3
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	b29b      	uxth	r3, r3
 800677e:	4619      	mov	r1, r3
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 f8b7 	bl	80068f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006786:	e09b      	b.n	80068c0 <HAL_UART_IRQHandler+0x518>
 8006788:	08006a47 	.word	0x08006a47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006794:	b29b      	uxth	r3, r3
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 808e 	beq.w	80068c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80067a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 8089 	beq.w	80068c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	330c      	adds	r3, #12
 80067b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067bc:	e853 3f00 	ldrex	r3, [r3]
 80067c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	330c      	adds	r3, #12
 80067d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80067d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80067d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067de:	e841 2300 	strex	r3, r2, [r1]
 80067e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1e3      	bne.n	80067b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3314      	adds	r3, #20
 80067f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f4:	e853 3f00 	ldrex	r3, [r3]
 80067f8:	623b      	str	r3, [r7, #32]
   return(result);
 80067fa:	6a3b      	ldr	r3, [r7, #32]
 80067fc:	f023 0301 	bic.w	r3, r3, #1
 8006800:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	3314      	adds	r3, #20
 800680a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800680e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006810:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006812:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006814:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006816:	e841 2300 	strex	r3, r2, [r1]
 800681a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800681c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1e3      	bne.n	80067ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2220      	movs	r2, #32
 8006826:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	330c      	adds	r3, #12
 8006836:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	e853 3f00 	ldrex	r3, [r3]
 800683e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f023 0310 	bic.w	r3, r3, #16
 8006846:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	330c      	adds	r3, #12
 8006850:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006854:	61fa      	str	r2, [r7, #28]
 8006856:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006858:	69b9      	ldr	r1, [r7, #24]
 800685a:	69fa      	ldr	r2, [r7, #28]
 800685c:	e841 2300 	strex	r3, r2, [r1]
 8006860:	617b      	str	r3, [r7, #20]
   return(result);
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1e3      	bne.n	8006830 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800686e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006872:	4619      	mov	r1, r3
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 f83d 	bl	80068f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800687a:	e023      	b.n	80068c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800687c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006884:	2b00      	cmp	r3, #0
 8006886:	d009      	beq.n	800689c <HAL_UART_IRQHandler+0x4f4>
 8006888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800688c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006890:	2b00      	cmp	r3, #0
 8006892:	d003      	beq.n	800689c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f8ea 	bl	8006a6e <UART_Transmit_IT>
    return;
 800689a:	e014      	b.n	80068c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800689c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00e      	beq.n	80068c6 <HAL_UART_IRQHandler+0x51e>
 80068a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d008      	beq.n	80068c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 f92a 	bl	8006b0e <UART_EndTransmit_IT>
    return;
 80068ba:	e004      	b.n	80068c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80068bc:	bf00      	nop
 80068be:	e002      	b.n	80068c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80068c0:	bf00      	nop
 80068c2:	e000      	b.n	80068c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80068c4:	bf00      	nop
  }
}
 80068c6:	37e8      	adds	r7, #232	@ 0xe8
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	460b      	mov	r3, r1
 80068fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	4613      	mov	r3, r2
 8006918:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	88fa      	ldrh	r2, [r7, #6]
 8006924:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	88fa      	ldrh	r2, [r7, #6]
 800692a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2222      	movs	r2, #34	@ 0x22
 8006936:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d007      	beq.n	8006952 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68da      	ldr	r2, [r3, #12]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006950:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	695a      	ldr	r2, [r3, #20]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f042 0201 	orr.w	r2, r2, #1
 8006960:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68da      	ldr	r2, [r3, #12]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f042 0220 	orr.w	r2, r2, #32
 8006970:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006980:	b480      	push	{r7}
 8006982:	b095      	sub	sp, #84	@ 0x54
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	330c      	adds	r3, #12
 800698e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006992:	e853 3f00 	ldrex	r3, [r3]
 8006996:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800699e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	330c      	adds	r3, #12
 80069a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80069a8:	643a      	str	r2, [r7, #64]	@ 0x40
 80069aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80069ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069b0:	e841 2300 	strex	r3, r2, [r1]
 80069b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1e5      	bne.n	8006988 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	3314      	adds	r3, #20
 80069c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c4:	6a3b      	ldr	r3, [r7, #32]
 80069c6:	e853 3f00 	ldrex	r3, [r3]
 80069ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	f023 0301 	bic.w	r3, r3, #1
 80069d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	3314      	adds	r3, #20
 80069da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069e4:	e841 2300 	strex	r3, r2, [r1]
 80069e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1e5      	bne.n	80069bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d119      	bne.n	8006a2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	330c      	adds	r3, #12
 80069fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	e853 3f00 	ldrex	r3, [r3]
 8006a06:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f023 0310 	bic.w	r3, r3, #16
 8006a0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	330c      	adds	r3, #12
 8006a16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a18:	61ba      	str	r2, [r7, #24]
 8006a1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1c:	6979      	ldr	r1, [r7, #20]
 8006a1e:	69ba      	ldr	r2, [r7, #24]
 8006a20:	e841 2300 	strex	r3, r2, [r1]
 8006a24:	613b      	str	r3, [r7, #16]
   return(result);
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1e5      	bne.n	80069f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2220      	movs	r2, #32
 8006a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006a3a:	bf00      	nop
 8006a3c:	3754      	adds	r7, #84	@ 0x54
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b084      	sub	sp, #16
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f7ff ff3d 	bl	80068e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a66:	bf00      	nop
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b085      	sub	sp, #20
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b21      	cmp	r3, #33	@ 0x21
 8006a80:	d13e      	bne.n	8006b00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a8a:	d114      	bne.n	8006ab6 <UART_Transmit_IT+0x48>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d110      	bne.n	8006ab6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a1b      	ldr	r3, [r3, #32]
 8006a98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	881b      	ldrh	r3, [r3, #0]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006aa8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	1c9a      	adds	r2, r3, #2
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	621a      	str	r2, [r3, #32]
 8006ab4:	e008      	b.n	8006ac8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	1c59      	adds	r1, r3, #1
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	6211      	str	r1, [r2, #32]
 8006ac0:	781a      	ldrb	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10f      	bne.n	8006afc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68da      	ldr	r2, [r3, #12]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006aea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68da      	ldr	r2, [r3, #12]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006afa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006afc:	2300      	movs	r3, #0
 8006afe:	e000      	b.n	8006b02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b00:	2302      	movs	r3, #2
  }
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b082      	sub	sp, #8
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68da      	ldr	r2, [r3, #12]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2220      	movs	r2, #32
 8006b2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7ff fecc 	bl	80068cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b08c      	sub	sp, #48	@ 0x30
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b22      	cmp	r3, #34	@ 0x22
 8006b50:	f040 80ae 	bne.w	8006cb0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b5c:	d117      	bne.n	8006b8e <UART_Receive_IT+0x50>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d113      	bne.n	8006b8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b66:	2300      	movs	r3, #0
 8006b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b86:	1c9a      	adds	r2, r3, #2
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006b8c:	e026      	b.n	8006bdc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006b94:	2300      	movs	r3, #0
 8006b96:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ba0:	d007      	beq.n	8006bb2 <UART_Receive_IT+0x74>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10a      	bne.n	8006bc0 <UART_Receive_IT+0x82>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d106      	bne.n	8006bc0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	b2da      	uxtb	r2, r3
 8006bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bbc:	701a      	strb	r2, [r3, #0]
 8006bbe:	e008      	b.n	8006bd2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd6:	1c5a      	adds	r2, r3, #1
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	3b01      	subs	r3, #1
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	4619      	mov	r1, r3
 8006bea:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d15d      	bne.n	8006cac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68da      	ldr	r2, [r3, #12]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f022 0220 	bic.w	r2, r2, #32
 8006bfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68da      	ldr	r2, [r3, #12]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	695a      	ldr	r2, [r3, #20]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 0201 	bic.w	r2, r2, #1
 8006c1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d135      	bne.n	8006ca2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	330c      	adds	r3, #12
 8006c42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	e853 3f00 	ldrex	r3, [r3]
 8006c4a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	f023 0310 	bic.w	r3, r3, #16
 8006c52:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	330c      	adds	r3, #12
 8006c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c5c:	623a      	str	r2, [r7, #32]
 8006c5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c60:	69f9      	ldr	r1, [r7, #28]
 8006c62:	6a3a      	ldr	r2, [r7, #32]
 8006c64:	e841 2300 	strex	r3, r2, [r1]
 8006c68:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1e5      	bne.n	8006c3c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0310 	and.w	r3, r3, #16
 8006c7a:	2b10      	cmp	r3, #16
 8006c7c:	d10a      	bne.n	8006c94 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c7e:	2300      	movs	r3, #0
 8006c80:	60fb      	str	r3, [r7, #12]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	60fb      	str	r3, [r7, #12]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	60fb      	str	r3, [r7, #12]
 8006c92:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c98:	4619      	mov	r1, r3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7ff fe2a 	bl	80068f4 <HAL_UARTEx_RxEventCallback>
 8006ca0:	e002      	b.n	8006ca8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7fa fb84 	bl	80013b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	e002      	b.n	8006cb2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	e000      	b.n	8006cb2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006cb0:	2302      	movs	r3, #2
  }
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3730      	adds	r7, #48	@ 0x30
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
	...

08006cbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cc0:	b0c0      	sub	sp, #256	@ 0x100
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cd8:	68d9      	ldr	r1, [r3, #12]
 8006cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	ea40 0301 	orr.w	r3, r0, r1
 8006ce4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cea:	689a      	ldr	r2, [r3, #8]
 8006cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	431a      	orrs	r2, r3
 8006cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	431a      	orrs	r2, r3
 8006cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006d14:	f021 010c 	bic.w	r1, r1, #12
 8006d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006d22:	430b      	orrs	r3, r1
 8006d24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d36:	6999      	ldr	r1, [r3, #24]
 8006d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	ea40 0301 	orr.w	r3, r0, r1
 8006d42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	4b8f      	ldr	r3, [pc, #572]	@ (8006f88 <UART_SetConfig+0x2cc>)
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d005      	beq.n	8006d5c <UART_SetConfig+0xa0>
 8006d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	4b8d      	ldr	r3, [pc, #564]	@ (8006f8c <UART_SetConfig+0x2d0>)
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d104      	bne.n	8006d66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d5c:	f7fd fb76 	bl	800444c <HAL_RCC_GetPCLK2Freq>
 8006d60:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006d64:	e003      	b.n	8006d6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d66:	f7fd fb5d 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 8006d6a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d72:	69db      	ldr	r3, [r3, #28]
 8006d74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d78:	f040 810c 	bne.w	8006f94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d80:	2200      	movs	r2, #0
 8006d82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d86:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006d8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006d8e:	4622      	mov	r2, r4
 8006d90:	462b      	mov	r3, r5
 8006d92:	1891      	adds	r1, r2, r2
 8006d94:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006d96:	415b      	adcs	r3, r3
 8006d98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006d9e:	4621      	mov	r1, r4
 8006da0:	eb12 0801 	adds.w	r8, r2, r1
 8006da4:	4629      	mov	r1, r5
 8006da6:	eb43 0901 	adc.w	r9, r3, r1
 8006daa:	f04f 0200 	mov.w	r2, #0
 8006dae:	f04f 0300 	mov.w	r3, #0
 8006db2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006db6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006dba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006dbe:	4690      	mov	r8, r2
 8006dc0:	4699      	mov	r9, r3
 8006dc2:	4623      	mov	r3, r4
 8006dc4:	eb18 0303 	adds.w	r3, r8, r3
 8006dc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006dcc:	462b      	mov	r3, r5
 8006dce:	eb49 0303 	adc.w	r3, r9, r3
 8006dd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006de2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006de6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006dea:	460b      	mov	r3, r1
 8006dec:	18db      	adds	r3, r3, r3
 8006dee:	653b      	str	r3, [r7, #80]	@ 0x50
 8006df0:	4613      	mov	r3, r2
 8006df2:	eb42 0303 	adc.w	r3, r2, r3
 8006df6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006df8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006dfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006e00:	f7f9 ff4a 	bl	8000c98 <__aeabi_uldivmod>
 8006e04:	4602      	mov	r2, r0
 8006e06:	460b      	mov	r3, r1
 8006e08:	4b61      	ldr	r3, [pc, #388]	@ (8006f90 <UART_SetConfig+0x2d4>)
 8006e0a:	fba3 2302 	umull	r2, r3, r3, r2
 8006e0e:	095b      	lsrs	r3, r3, #5
 8006e10:	011c      	lsls	r4, r3, #4
 8006e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e16:	2200      	movs	r2, #0
 8006e18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e1c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006e20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006e24:	4642      	mov	r2, r8
 8006e26:	464b      	mov	r3, r9
 8006e28:	1891      	adds	r1, r2, r2
 8006e2a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006e2c:	415b      	adcs	r3, r3
 8006e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006e34:	4641      	mov	r1, r8
 8006e36:	eb12 0a01 	adds.w	sl, r2, r1
 8006e3a:	4649      	mov	r1, r9
 8006e3c:	eb43 0b01 	adc.w	fp, r3, r1
 8006e40:	f04f 0200 	mov.w	r2, #0
 8006e44:	f04f 0300 	mov.w	r3, #0
 8006e48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e54:	4692      	mov	sl, r2
 8006e56:	469b      	mov	fp, r3
 8006e58:	4643      	mov	r3, r8
 8006e5a:	eb1a 0303 	adds.w	r3, sl, r3
 8006e5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e62:	464b      	mov	r3, r9
 8006e64:	eb4b 0303 	adc.w	r3, fp, r3
 8006e68:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e78:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006e7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006e80:	460b      	mov	r3, r1
 8006e82:	18db      	adds	r3, r3, r3
 8006e84:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e86:	4613      	mov	r3, r2
 8006e88:	eb42 0303 	adc.w	r3, r2, r3
 8006e8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006e92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006e96:	f7f9 feff 	bl	8000c98 <__aeabi_uldivmod>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4611      	mov	r1, r2
 8006ea0:	4b3b      	ldr	r3, [pc, #236]	@ (8006f90 <UART_SetConfig+0x2d4>)
 8006ea2:	fba3 2301 	umull	r2, r3, r3, r1
 8006ea6:	095b      	lsrs	r3, r3, #5
 8006ea8:	2264      	movs	r2, #100	@ 0x64
 8006eaa:	fb02 f303 	mul.w	r3, r2, r3
 8006eae:	1acb      	subs	r3, r1, r3
 8006eb0:	00db      	lsls	r3, r3, #3
 8006eb2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006eb6:	4b36      	ldr	r3, [pc, #216]	@ (8006f90 <UART_SetConfig+0x2d4>)
 8006eb8:	fba3 2302 	umull	r2, r3, r3, r2
 8006ebc:	095b      	lsrs	r3, r3, #5
 8006ebe:	005b      	lsls	r3, r3, #1
 8006ec0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006ec4:	441c      	add	r4, r3
 8006ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ed0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006ed4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006ed8:	4642      	mov	r2, r8
 8006eda:	464b      	mov	r3, r9
 8006edc:	1891      	adds	r1, r2, r2
 8006ede:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006ee0:	415b      	adcs	r3, r3
 8006ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ee4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006ee8:	4641      	mov	r1, r8
 8006eea:	1851      	adds	r1, r2, r1
 8006eec:	6339      	str	r1, [r7, #48]	@ 0x30
 8006eee:	4649      	mov	r1, r9
 8006ef0:	414b      	adcs	r3, r1
 8006ef2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ef4:	f04f 0200 	mov.w	r2, #0
 8006ef8:	f04f 0300 	mov.w	r3, #0
 8006efc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006f00:	4659      	mov	r1, fp
 8006f02:	00cb      	lsls	r3, r1, #3
 8006f04:	4651      	mov	r1, sl
 8006f06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f0a:	4651      	mov	r1, sl
 8006f0c:	00ca      	lsls	r2, r1, #3
 8006f0e:	4610      	mov	r0, r2
 8006f10:	4619      	mov	r1, r3
 8006f12:	4603      	mov	r3, r0
 8006f14:	4642      	mov	r2, r8
 8006f16:	189b      	adds	r3, r3, r2
 8006f18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f1c:	464b      	mov	r3, r9
 8006f1e:	460a      	mov	r2, r1
 8006f20:	eb42 0303 	adc.w	r3, r2, r3
 8006f24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006f34:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006f38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	18db      	adds	r3, r3, r3
 8006f40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f42:	4613      	mov	r3, r2
 8006f44:	eb42 0303 	adc.w	r3, r2, r3
 8006f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006f4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006f52:	f7f9 fea1 	bl	8000c98 <__aeabi_uldivmod>
 8006f56:	4602      	mov	r2, r0
 8006f58:	460b      	mov	r3, r1
 8006f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f90 <UART_SetConfig+0x2d4>)
 8006f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f60:	095b      	lsrs	r3, r3, #5
 8006f62:	2164      	movs	r1, #100	@ 0x64
 8006f64:	fb01 f303 	mul.w	r3, r1, r3
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	00db      	lsls	r3, r3, #3
 8006f6c:	3332      	adds	r3, #50	@ 0x32
 8006f6e:	4a08      	ldr	r2, [pc, #32]	@ (8006f90 <UART_SetConfig+0x2d4>)
 8006f70:	fba2 2303 	umull	r2, r3, r2, r3
 8006f74:	095b      	lsrs	r3, r3, #5
 8006f76:	f003 0207 	and.w	r2, r3, #7
 8006f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4422      	add	r2, r4
 8006f82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f84:	e106      	b.n	8007194 <UART_SetConfig+0x4d8>
 8006f86:	bf00      	nop
 8006f88:	40011000 	.word	0x40011000
 8006f8c:	40011400 	.word	0x40011400
 8006f90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006f9e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006fa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006fa6:	4642      	mov	r2, r8
 8006fa8:	464b      	mov	r3, r9
 8006faa:	1891      	adds	r1, r2, r2
 8006fac:	6239      	str	r1, [r7, #32]
 8006fae:	415b      	adcs	r3, r3
 8006fb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006fb6:	4641      	mov	r1, r8
 8006fb8:	1854      	adds	r4, r2, r1
 8006fba:	4649      	mov	r1, r9
 8006fbc:	eb43 0501 	adc.w	r5, r3, r1
 8006fc0:	f04f 0200 	mov.w	r2, #0
 8006fc4:	f04f 0300 	mov.w	r3, #0
 8006fc8:	00eb      	lsls	r3, r5, #3
 8006fca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fce:	00e2      	lsls	r2, r4, #3
 8006fd0:	4614      	mov	r4, r2
 8006fd2:	461d      	mov	r5, r3
 8006fd4:	4643      	mov	r3, r8
 8006fd6:	18e3      	adds	r3, r4, r3
 8006fd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006fdc:	464b      	mov	r3, r9
 8006fde:	eb45 0303 	adc.w	r3, r5, r3
 8006fe2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ff2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ff6:	f04f 0200 	mov.w	r2, #0
 8006ffa:	f04f 0300 	mov.w	r3, #0
 8006ffe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007002:	4629      	mov	r1, r5
 8007004:	008b      	lsls	r3, r1, #2
 8007006:	4621      	mov	r1, r4
 8007008:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800700c:	4621      	mov	r1, r4
 800700e:	008a      	lsls	r2, r1, #2
 8007010:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007014:	f7f9 fe40 	bl	8000c98 <__aeabi_uldivmod>
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	4b60      	ldr	r3, [pc, #384]	@ (80071a0 <UART_SetConfig+0x4e4>)
 800701e:	fba3 2302 	umull	r2, r3, r3, r2
 8007022:	095b      	lsrs	r3, r3, #5
 8007024:	011c      	lsls	r4, r3, #4
 8007026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800702a:	2200      	movs	r2, #0
 800702c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007030:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007034:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007038:	4642      	mov	r2, r8
 800703a:	464b      	mov	r3, r9
 800703c:	1891      	adds	r1, r2, r2
 800703e:	61b9      	str	r1, [r7, #24]
 8007040:	415b      	adcs	r3, r3
 8007042:	61fb      	str	r3, [r7, #28]
 8007044:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007048:	4641      	mov	r1, r8
 800704a:	1851      	adds	r1, r2, r1
 800704c:	6139      	str	r1, [r7, #16]
 800704e:	4649      	mov	r1, r9
 8007050:	414b      	adcs	r3, r1
 8007052:	617b      	str	r3, [r7, #20]
 8007054:	f04f 0200 	mov.w	r2, #0
 8007058:	f04f 0300 	mov.w	r3, #0
 800705c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007060:	4659      	mov	r1, fp
 8007062:	00cb      	lsls	r3, r1, #3
 8007064:	4651      	mov	r1, sl
 8007066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800706a:	4651      	mov	r1, sl
 800706c:	00ca      	lsls	r2, r1, #3
 800706e:	4610      	mov	r0, r2
 8007070:	4619      	mov	r1, r3
 8007072:	4603      	mov	r3, r0
 8007074:	4642      	mov	r2, r8
 8007076:	189b      	adds	r3, r3, r2
 8007078:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800707c:	464b      	mov	r3, r9
 800707e:	460a      	mov	r2, r1
 8007080:	eb42 0303 	adc.w	r3, r2, r3
 8007084:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007092:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007094:	f04f 0200 	mov.w	r2, #0
 8007098:	f04f 0300 	mov.w	r3, #0
 800709c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80070a0:	4649      	mov	r1, r9
 80070a2:	008b      	lsls	r3, r1, #2
 80070a4:	4641      	mov	r1, r8
 80070a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070aa:	4641      	mov	r1, r8
 80070ac:	008a      	lsls	r2, r1, #2
 80070ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80070b2:	f7f9 fdf1 	bl	8000c98 <__aeabi_uldivmod>
 80070b6:	4602      	mov	r2, r0
 80070b8:	460b      	mov	r3, r1
 80070ba:	4611      	mov	r1, r2
 80070bc:	4b38      	ldr	r3, [pc, #224]	@ (80071a0 <UART_SetConfig+0x4e4>)
 80070be:	fba3 2301 	umull	r2, r3, r3, r1
 80070c2:	095b      	lsrs	r3, r3, #5
 80070c4:	2264      	movs	r2, #100	@ 0x64
 80070c6:	fb02 f303 	mul.w	r3, r2, r3
 80070ca:	1acb      	subs	r3, r1, r3
 80070cc:	011b      	lsls	r3, r3, #4
 80070ce:	3332      	adds	r3, #50	@ 0x32
 80070d0:	4a33      	ldr	r2, [pc, #204]	@ (80071a0 <UART_SetConfig+0x4e4>)
 80070d2:	fba2 2303 	umull	r2, r3, r2, r3
 80070d6:	095b      	lsrs	r3, r3, #5
 80070d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80070dc:	441c      	add	r4, r3
 80070de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070e2:	2200      	movs	r2, #0
 80070e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80070e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80070e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80070ec:	4642      	mov	r2, r8
 80070ee:	464b      	mov	r3, r9
 80070f0:	1891      	adds	r1, r2, r2
 80070f2:	60b9      	str	r1, [r7, #8]
 80070f4:	415b      	adcs	r3, r3
 80070f6:	60fb      	str	r3, [r7, #12]
 80070f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070fc:	4641      	mov	r1, r8
 80070fe:	1851      	adds	r1, r2, r1
 8007100:	6039      	str	r1, [r7, #0]
 8007102:	4649      	mov	r1, r9
 8007104:	414b      	adcs	r3, r1
 8007106:	607b      	str	r3, [r7, #4]
 8007108:	f04f 0200 	mov.w	r2, #0
 800710c:	f04f 0300 	mov.w	r3, #0
 8007110:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007114:	4659      	mov	r1, fp
 8007116:	00cb      	lsls	r3, r1, #3
 8007118:	4651      	mov	r1, sl
 800711a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800711e:	4651      	mov	r1, sl
 8007120:	00ca      	lsls	r2, r1, #3
 8007122:	4610      	mov	r0, r2
 8007124:	4619      	mov	r1, r3
 8007126:	4603      	mov	r3, r0
 8007128:	4642      	mov	r2, r8
 800712a:	189b      	adds	r3, r3, r2
 800712c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800712e:	464b      	mov	r3, r9
 8007130:	460a      	mov	r2, r1
 8007132:	eb42 0303 	adc.w	r3, r2, r3
 8007136:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	663b      	str	r3, [r7, #96]	@ 0x60
 8007142:	667a      	str	r2, [r7, #100]	@ 0x64
 8007144:	f04f 0200 	mov.w	r2, #0
 8007148:	f04f 0300 	mov.w	r3, #0
 800714c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007150:	4649      	mov	r1, r9
 8007152:	008b      	lsls	r3, r1, #2
 8007154:	4641      	mov	r1, r8
 8007156:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800715a:	4641      	mov	r1, r8
 800715c:	008a      	lsls	r2, r1, #2
 800715e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007162:	f7f9 fd99 	bl	8000c98 <__aeabi_uldivmod>
 8007166:	4602      	mov	r2, r0
 8007168:	460b      	mov	r3, r1
 800716a:	4b0d      	ldr	r3, [pc, #52]	@ (80071a0 <UART_SetConfig+0x4e4>)
 800716c:	fba3 1302 	umull	r1, r3, r3, r2
 8007170:	095b      	lsrs	r3, r3, #5
 8007172:	2164      	movs	r1, #100	@ 0x64
 8007174:	fb01 f303 	mul.w	r3, r1, r3
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	011b      	lsls	r3, r3, #4
 800717c:	3332      	adds	r3, #50	@ 0x32
 800717e:	4a08      	ldr	r2, [pc, #32]	@ (80071a0 <UART_SetConfig+0x4e4>)
 8007180:	fba2 2303 	umull	r2, r3, r2, r3
 8007184:	095b      	lsrs	r3, r3, #5
 8007186:	f003 020f 	and.w	r2, r3, #15
 800718a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4422      	add	r2, r4
 8007192:	609a      	str	r2, [r3, #8]
}
 8007194:	bf00      	nop
 8007196:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800719a:	46bd      	mov	sp, r7
 800719c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071a0:	51eb851f 	.word	0x51eb851f

080071a4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80071a4:	b084      	sub	sp, #16
 80071a6:	b480      	push	{r7}
 80071a8:	b085      	sub	sp, #20
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
 80071ae:	f107 001c 	add.w	r0, r7, #28
 80071b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80071b6:	2300      	movs	r3, #0
 80071b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80071ba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80071bc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80071be:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80071c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80071c2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80071c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80071c6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80071c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80071ca:	431a      	orrs	r2, r3
             Init.ClockDiv
 80071cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80071ce:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 80071de:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	431a      	orrs	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	b004      	add	sp, #16
 80071f8:	4770      	bx	lr

080071fa <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80071fa:	b480      	push	{r7}
 80071fc:	b083      	sub	sp, #12
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8007208:	4618      	mov	r0, r3
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	370c      	adds	r7, #12
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007236:	b480      	push	{r7}
 8007238:	b083      	sub	sp, #12
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2203      	movs	r2, #3
 8007242:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007252:	b480      	push	{r7}
 8007254:	b083      	sub	sp, #12
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0303 	and.w	r3, r3, #3
}
 8007262:	4618      	mov	r0, r3
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800726e:	b480      	push	{r7}
 8007270:	b085      	sub	sp, #20
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007278:	2300      	movs	r3, #0
 800727a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800728c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007292:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007298:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	4313      	orrs	r3, r2
 800729e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80072a8:	f023 030f 	bic.w	r3, r3, #15
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	431a      	orrs	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3714      	adds	r7, #20
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b083      	sub	sp, #12
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	b2db      	uxtb	r3, r3
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	3314      	adds	r3, #20
 80072ea:	461a      	mov	r2, r3
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	4413      	add	r3, r2
 80072f0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
}  
 80072f6:	4618      	mov	r0, r3
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007302:	b480      	push	{r7}
 8007304:	b085      	sub	sp, #20
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
 800730a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800730c:	2300      	movs	r3, #0
 800730e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	685a      	ldr	r2, [r3, #4]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007328:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800732e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007334:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	4313      	orrs	r3, r2
 800733a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007340:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	431a      	orrs	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800734c:	2300      	movs	r3, #0

}
 800734e:	4618      	mov	r0, r3
 8007350:	3714      	adds	r7, #20
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr

0800735a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b088      	sub	sp, #32
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
 8007362:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007368:	2310      	movs	r3, #16
 800736a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800736c:	2340      	movs	r3, #64	@ 0x40
 800736e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007370:	2300      	movs	r3, #0
 8007372:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007374:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007378:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800737a:	f107 0308 	add.w	r3, r7, #8
 800737e:	4619      	mov	r1, r3
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f7ff ff74 	bl	800726e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800738a:	2110      	movs	r1, #16
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 fa19 	bl	80077c4 <SDMMC_GetCmdResp1>
 8007392:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007394:	69fb      	ldr	r3, [r7, #28]
}
 8007396:	4618      	mov	r0, r3
 8007398:	3720      	adds	r7, #32
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b088      	sub	sp, #32
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
 80073a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80073ac:	2311      	movs	r3, #17
 80073ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80073b0:	2340      	movs	r3, #64	@ 0x40
 80073b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80073b4:	2300      	movs	r3, #0
 80073b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80073bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073be:	f107 0308 	add.w	r3, r7, #8
 80073c2:	4619      	mov	r1, r3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7ff ff52 	bl	800726e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80073ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073ce:	2111      	movs	r1, #17
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 f9f7 	bl	80077c4 <SDMMC_GetCmdResp1>
 80073d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073d8:	69fb      	ldr	r3, [r7, #28]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3720      	adds	r7, #32
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b088      	sub	sp, #32
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80073f0:	2312      	movs	r3, #18
 80073f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80073f4:	2340      	movs	r3, #64	@ 0x40
 80073f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80073f8:	2300      	movs	r3, #0
 80073fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007400:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007402:	f107 0308 	add.w	r3, r7, #8
 8007406:	4619      	mov	r1, r3
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f7ff ff30 	bl	800726e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800740e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007412:	2112      	movs	r1, #18
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f9d5 	bl	80077c4 <SDMMC_GetCmdResp1>
 800741a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800741c:	69fb      	ldr	r3, [r7, #28]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3720      	adds	r7, #32
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b088      	sub	sp, #32
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007434:	2318      	movs	r3, #24
 8007436:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007438:	2340      	movs	r3, #64	@ 0x40
 800743a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800743c:	2300      	movs	r3, #0
 800743e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007440:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007444:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007446:	f107 0308 	add.w	r3, r7, #8
 800744a:	4619      	mov	r1, r3
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f7ff ff0e 	bl	800726e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007456:	2118      	movs	r1, #24
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 f9b3 	bl	80077c4 <SDMMC_GetCmdResp1>
 800745e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007460:	69fb      	ldr	r3, [r7, #28]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3720      	adds	r7, #32
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b088      	sub	sp, #32
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007478:	2319      	movs	r3, #25
 800747a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800747c:	2340      	movs	r3, #64	@ 0x40
 800747e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007480:	2300      	movs	r3, #0
 8007482:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007484:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007488:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800748a:	f107 0308 	add.w	r3, r7, #8
 800748e:	4619      	mov	r1, r3
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f7ff feec 	bl	800726e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800749a:	2119      	movs	r1, #25
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 f991 	bl	80077c4 <SDMMC_GetCmdResp1>
 80074a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074a4:	69fb      	ldr	r3, [r7, #28]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3720      	adds	r7, #32
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
	...

080074b0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b088      	sub	sp, #32
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80074b8:	2300      	movs	r3, #0
 80074ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80074bc:	230c      	movs	r3, #12
 80074be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80074c0:	2340      	movs	r3, #64	@ 0x40
 80074c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80074c4:	2300      	movs	r3, #0
 80074c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80074c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80074cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80074ce:	f107 0308 	add.w	r3, r7, #8
 80074d2:	4619      	mov	r1, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f7ff feca 	bl	800726e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80074da:	4a05      	ldr	r2, [pc, #20]	@ (80074f0 <SDMMC_CmdStopTransfer+0x40>)
 80074dc:	210c      	movs	r1, #12
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f970 	bl	80077c4 <SDMMC_GetCmdResp1>
 80074e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074e6:	69fb      	ldr	r3, [r7, #28]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3720      	adds	r7, #32
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	05f5e100 	.word	0x05f5e100

080074f4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b08a      	sub	sp, #40	@ 0x28
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007504:	2307      	movs	r3, #7
 8007506:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007508:	2340      	movs	r3, #64	@ 0x40
 800750a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800750c:	2300      	movs	r3, #0
 800750e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007510:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007514:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007516:	f107 0310 	add.w	r3, r7, #16
 800751a:	4619      	mov	r1, r3
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f7ff fea6 	bl	800726e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007526:	2107      	movs	r1, #7
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f000 f94b 	bl	80077c4 <SDMMC_GetCmdResp1>
 800752e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8007530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007532:	4618      	mov	r0, r3
 8007534:	3728      	adds	r7, #40	@ 0x28
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b088      	sub	sp, #32
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007542:	2300      	movs	r3, #0
 8007544:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007546:	2300      	movs	r3, #0
 8007548:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800754a:	2300      	movs	r3, #0
 800754c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800754e:	2300      	movs	r3, #0
 8007550:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007552:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007556:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007558:	f107 0308 	add.w	r3, r7, #8
 800755c:	4619      	mov	r1, r3
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7ff fe85 	bl	800726e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fb65 	bl	8007c34 <SDMMC_GetCmdError>
 800756a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800756c:	69fb      	ldr	r3, [r7, #28]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3720      	adds	r7, #32
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b088      	sub	sp, #32
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800757e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8007582:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007584:	2308      	movs	r3, #8
 8007586:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007588:	2340      	movs	r3, #64	@ 0x40
 800758a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800758c:	2300      	movs	r3, #0
 800758e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007590:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007594:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007596:	f107 0308 	add.w	r3, r7, #8
 800759a:	4619      	mov	r1, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f7ff fe66 	bl	800726e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 faf8 	bl	8007b98 <SDMMC_GetCmdResp7>
 80075a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075aa:	69fb      	ldr	r3, [r7, #28]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3720      	adds	r7, #32
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b088      	sub	sp, #32
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80075c2:	2337      	movs	r3, #55	@ 0x37
 80075c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80075c6:	2340      	movs	r3, #64	@ 0x40
 80075c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80075ca:	2300      	movs	r3, #0
 80075cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80075ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80075d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80075d4:	f107 0308 	add.w	r3, r7, #8
 80075d8:	4619      	mov	r1, r3
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f7ff fe47 	bl	800726e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80075e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075e4:	2137      	movs	r1, #55	@ 0x37
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f8ec 	bl	80077c4 <SDMMC_GetCmdResp1>
 80075ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075ee:	69fb      	ldr	r3, [r7, #28]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3720      	adds	r7, #32
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b088      	sub	sp, #32
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007608:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800760c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800760e:	2329      	movs	r3, #41	@ 0x29
 8007610:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007612:	2340      	movs	r3, #64	@ 0x40
 8007614:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007616:	2300      	movs	r3, #0
 8007618:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800761a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800761e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007620:	f107 0308 	add.w	r3, r7, #8
 8007624:	4619      	mov	r1, r3
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f7ff fe21 	bl	800726e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 f9ff 	bl	8007a30 <SDMMC_GetCmdResp3>
 8007632:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007634:	69fb      	ldr	r3, [r7, #28]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3720      	adds	r7, #32
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b088      	sub	sp, #32
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800764c:	2306      	movs	r3, #6
 800764e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007650:	2340      	movs	r3, #64	@ 0x40
 8007652:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007654:	2300      	movs	r3, #0
 8007656:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007658:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800765c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800765e:	f107 0308 	add.w	r3, r7, #8
 8007662:	4619      	mov	r1, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f7ff fe02 	bl	800726e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800766a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800766e:	2106      	movs	r1, #6
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 f8a7 	bl	80077c4 <SDMMC_GetCmdResp1>
 8007676:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007678:	69fb      	ldr	r3, [r7, #28]
}
 800767a:	4618      	mov	r0, r3
 800767c:	3720      	adds	r7, #32
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b088      	sub	sp, #32
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800768a:	2300      	movs	r3, #0
 800768c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800768e:	2333      	movs	r3, #51	@ 0x33
 8007690:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007692:	2340      	movs	r3, #64	@ 0x40
 8007694:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007696:	2300      	movs	r3, #0
 8007698:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800769a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800769e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80076a0:	f107 0308 	add.w	r3, r7, #8
 80076a4:	4619      	mov	r1, r3
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f7ff fde1 	bl	800726e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80076ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076b0:	2133      	movs	r1, #51	@ 0x33
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f886 	bl	80077c4 <SDMMC_GetCmdResp1>
 80076b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076ba:	69fb      	ldr	r3, [r7, #28]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3720      	adds	r7, #32
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b088      	sub	sp, #32
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80076cc:	2300      	movs	r3, #0
 80076ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80076d0:	2302      	movs	r3, #2
 80076d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80076d4:	23c0      	movs	r3, #192	@ 0xc0
 80076d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80076d8:	2300      	movs	r3, #0
 80076da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80076dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80076e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80076e2:	f107 0308 	add.w	r3, r7, #8
 80076e6:	4619      	mov	r1, r3
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f7ff fdc0 	bl	800726e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f956 	bl	80079a0 <SDMMC_GetCmdResp2>
 80076f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076f6:	69fb      	ldr	r3, [r7, #28]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3720      	adds	r7, #32
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b088      	sub	sp, #32
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800770e:	2309      	movs	r3, #9
 8007710:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007712:	23c0      	movs	r3, #192	@ 0xc0
 8007714:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007716:	2300      	movs	r3, #0
 8007718:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800771a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800771e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007720:	f107 0308 	add.w	r3, r7, #8
 8007724:	4619      	mov	r1, r3
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7ff fda1 	bl	800726e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f937 	bl	80079a0 <SDMMC_GetCmdResp2>
 8007732:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007734:	69fb      	ldr	r3, [r7, #28]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3720      	adds	r7, #32
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b088      	sub	sp, #32
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007748:	2300      	movs	r3, #0
 800774a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800774c:	2303      	movs	r3, #3
 800774e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007750:	2340      	movs	r3, #64	@ 0x40
 8007752:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007754:	2300      	movs	r3, #0
 8007756:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007758:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800775c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800775e:	f107 0308 	add.w	r3, r7, #8
 8007762:	4619      	mov	r1, r3
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f7ff fd82 	bl	800726e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800776a:	683a      	ldr	r2, [r7, #0]
 800776c:	2103      	movs	r1, #3
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f99c 	bl	8007aac <SDMMC_GetCmdResp6>
 8007774:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007776:	69fb      	ldr	r3, [r7, #28]
}
 8007778:	4618      	mov	r0, r3
 800777a:	3720      	adds	r7, #32
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b088      	sub	sp, #32
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800778e:	230d      	movs	r3, #13
 8007790:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007792:	2340      	movs	r3, #64	@ 0x40
 8007794:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007796:	2300      	movs	r3, #0
 8007798:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800779a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800779e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077a0:	f107 0308 	add.w	r3, r7, #8
 80077a4:	4619      	mov	r1, r3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7ff fd61 	bl	800726e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80077ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077b0:	210d      	movs	r1, #13
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f806 	bl	80077c4 <SDMMC_GetCmdResp1>
 80077b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077ba:	69fb      	ldr	r3, [r7, #28]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3720      	adds	r7, #32
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b088      	sub	sp, #32
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	460b      	mov	r3, r1
 80077ce:	607a      	str	r2, [r7, #4]
 80077d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80077d2:	4b70      	ldr	r3, [pc, #448]	@ (8007994 <SDMMC_GetCmdResp1+0x1d0>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a70      	ldr	r2, [pc, #448]	@ (8007998 <SDMMC_GetCmdResp1+0x1d4>)
 80077d8:	fba2 2303 	umull	r2, r3, r2, r3
 80077dc:	0a5a      	lsrs	r2, r3, #9
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	fb02 f303 	mul.w	r3, r2, r3
 80077e4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	1e5a      	subs	r2, r3, #1
 80077ea:	61fa      	str	r2, [r7, #28]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d102      	bne.n	80077f6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80077f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80077f4:	e0c9      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077fa:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007802:	2b00      	cmp	r3, #0
 8007804:	d0ef      	beq.n	80077e6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1ea      	bne.n	80077e6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007814:	f003 0304 	and.w	r3, r3, #4
 8007818:	2b00      	cmp	r3, #0
 800781a:	d004      	beq.n	8007826 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2204      	movs	r2, #4
 8007820:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007822:	2304      	movs	r3, #4
 8007824:	e0b1      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	2b00      	cmp	r3, #0
 8007830:	d004      	beq.n	800783c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2201      	movs	r2, #1
 8007836:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007838:	2301      	movs	r3, #1
 800783a:	e0a6      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	22c5      	movs	r2, #197	@ 0xc5
 8007840:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f7ff fd3d 	bl	80072c2 <SDIO_GetCommandResponse>
 8007848:	4603      	mov	r3, r0
 800784a:	461a      	mov	r2, r3
 800784c:	7afb      	ldrb	r3, [r7, #11]
 800784e:	4293      	cmp	r3, r2
 8007850:	d001      	beq.n	8007856 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007852:	2301      	movs	r3, #1
 8007854:	e099      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007856:	2100      	movs	r1, #0
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f7ff fd3f 	bl	80072dc <SDIO_GetResponse>
 800785e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	4b4e      	ldr	r3, [pc, #312]	@ (800799c <SDMMC_GetCmdResp1+0x1d8>)
 8007864:	4013      	ands	r3, r2
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800786a:	2300      	movs	r3, #0
 800786c:	e08d      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	2b00      	cmp	r3, #0
 8007872:	da02      	bge.n	800787a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007874:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007878:	e087      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007880:	2b00      	cmp	r3, #0
 8007882:	d001      	beq.n	8007888 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007884:	2340      	movs	r3, #64	@ 0x40
 8007886:	e080      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d001      	beq.n	8007896 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007892:	2380      	movs	r3, #128	@ 0x80
 8007894:	e079      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d002      	beq.n	80078a6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80078a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80078a4:	e071      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d002      	beq.n	80078b6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80078b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80078b4:	e069      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d002      	beq.n	80078c6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80078c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80078c4:	e061      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d002      	beq.n	80078d6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80078d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80078d4:	e059      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80078e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80078e4:	e051      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d002      	beq.n	80078f6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80078f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80078f4:	e049      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d002      	beq.n	8007906 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007900:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007904:	e041      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d002      	beq.n	8007916 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007910:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007914:	e039      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d002      	beq.n	8007926 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007920:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007924:	e031      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800792c:	2b00      	cmp	r3, #0
 800792e:	d002      	beq.n	8007936 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007930:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007934:	e029      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800793c:	2b00      	cmp	r3, #0
 800793e:	d002      	beq.n	8007946 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007940:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007944:	e021      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d002      	beq.n	8007956 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007950:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007954:	e019      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d002      	beq.n	8007966 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007960:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007964:	e011      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800796c:	2b00      	cmp	r3, #0
 800796e:	d002      	beq.n	8007976 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007970:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007974:	e009      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	f003 0308 	and.w	r3, r3, #8
 800797c:	2b00      	cmp	r3, #0
 800797e:	d002      	beq.n	8007986 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007980:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8007984:	e001      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007986:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800798a:	4618      	mov	r0, r3
 800798c:	3720      	adds	r7, #32
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	20000000 	.word	0x20000000
 8007998:	10624dd3 	.word	0x10624dd3
 800799c:	fdffe008 	.word	0xfdffe008

080079a0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80079a8:	4b1f      	ldr	r3, [pc, #124]	@ (8007a28 <SDMMC_GetCmdResp2+0x88>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a1f      	ldr	r2, [pc, #124]	@ (8007a2c <SDMMC_GetCmdResp2+0x8c>)
 80079ae:	fba2 2303 	umull	r2, r3, r2, r3
 80079b2:	0a5b      	lsrs	r3, r3, #9
 80079b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079b8:	fb02 f303 	mul.w	r3, r2, r3
 80079bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	1e5a      	subs	r2, r3, #1
 80079c2:	60fa      	str	r2, [r7, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d102      	bne.n	80079ce <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80079c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80079cc:	e026      	b.n	8007a1c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d0ef      	beq.n	80079be <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1ea      	bne.n	80079be <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079ec:	f003 0304 	and.w	r3, r3, #4
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d004      	beq.n	80079fe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2204      	movs	r2, #4
 80079f8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80079fa:	2304      	movs	r3, #4
 80079fc:	e00e      	b.n	8007a1c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d004      	beq.n	8007a14 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e003      	b.n	8007a1c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	22c5      	movs	r2, #197	@ 0xc5
 8007a18:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3714      	adds	r7, #20
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	20000000 	.word	0x20000000
 8007a2c:	10624dd3 	.word	0x10624dd3

08007a30 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a38:	4b1a      	ldr	r3, [pc, #104]	@ (8007aa4 <SDMMC_GetCmdResp3+0x74>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a1a      	ldr	r2, [pc, #104]	@ (8007aa8 <SDMMC_GetCmdResp3+0x78>)
 8007a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a42:	0a5b      	lsrs	r3, r3, #9
 8007a44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a48:	fb02 f303 	mul.w	r3, r2, r3
 8007a4c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	1e5a      	subs	r2, r3, #1
 8007a52:	60fa      	str	r2, [r7, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d102      	bne.n	8007a5e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a58:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007a5c:	e01b      	b.n	8007a96 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a62:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d0ef      	beq.n	8007a4e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1ea      	bne.n	8007a4e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a7c:	f003 0304 	and.w	r3, r3, #4
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d004      	beq.n	8007a8e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2204      	movs	r2, #4
 8007a88:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a8a:	2304      	movs	r3, #4
 8007a8c:	e003      	b.n	8007a96 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	22c5      	movs	r2, #197	@ 0xc5
 8007a92:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3714      	adds	r7, #20
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	20000000 	.word	0x20000000
 8007aa8:	10624dd3 	.word	0x10624dd3

08007aac <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b088      	sub	sp, #32
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	607a      	str	r2, [r7, #4]
 8007ab8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007aba:	4b35      	ldr	r3, [pc, #212]	@ (8007b90 <SDMMC_GetCmdResp6+0xe4>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a35      	ldr	r2, [pc, #212]	@ (8007b94 <SDMMC_GetCmdResp6+0xe8>)
 8007ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac4:	0a5b      	lsrs	r3, r3, #9
 8007ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007aca:	fb02 f303 	mul.w	r3, r2, r3
 8007ace:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	1e5a      	subs	r2, r3, #1
 8007ad4:	61fa      	str	r2, [r7, #28]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d102      	bne.n	8007ae0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ada:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007ade:	e052      	b.n	8007b86 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ae4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d0ef      	beq.n	8007ad0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1ea      	bne.n	8007ad0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007afe:	f003 0304 	and.w	r3, r3, #4
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d004      	beq.n	8007b10 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2204      	movs	r2, #4
 8007b0a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007b0c:	2304      	movs	r3, #4
 8007b0e:	e03a      	b.n	8007b86 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b14:	f003 0301 	and.w	r3, r3, #1
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d004      	beq.n	8007b26 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e02f      	b.n	8007b86 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f7ff fbcb 	bl	80072c2 <SDIO_GetCommandResponse>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	461a      	mov	r2, r3
 8007b30:	7afb      	ldrb	r3, [r7, #11]
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d001      	beq.n	8007b3a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e025      	b.n	8007b86 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	22c5      	movs	r2, #197	@ 0xc5
 8007b3e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007b40:	2100      	movs	r1, #0
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f7ff fbca 	bl	80072dc <SDIO_GetResponse>
 8007b48:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d106      	bne.n	8007b62 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	0c1b      	lsrs	r3, r3, #16
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	e011      	b.n	8007b86 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d002      	beq.n	8007b72 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007b6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007b70:	e009      	b.n	8007b86 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d002      	beq.n	8007b82 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007b7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007b80:	e001      	b.n	8007b86 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007b82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3720      	adds	r7, #32
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	20000000 	.word	0x20000000
 8007b94:	10624dd3 	.word	0x10624dd3

08007b98 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ba0:	4b22      	ldr	r3, [pc, #136]	@ (8007c2c <SDMMC_GetCmdResp7+0x94>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a22      	ldr	r2, [pc, #136]	@ (8007c30 <SDMMC_GetCmdResp7+0x98>)
 8007ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8007baa:	0a5b      	lsrs	r3, r3, #9
 8007bac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bb0:	fb02 f303 	mul.w	r3, r2, r3
 8007bb4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	1e5a      	subs	r2, r3, #1
 8007bba:	60fa      	str	r2, [r7, #12]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d102      	bne.n	8007bc6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007bc0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007bc4:	e02c      	b.n	8007c20 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d0ef      	beq.n	8007bb6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1ea      	bne.n	8007bb6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007be4:	f003 0304 	and.w	r3, r3, #4
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d004      	beq.n	8007bf6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2204      	movs	r2, #4
 8007bf0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007bf2:	2304      	movs	r3, #4
 8007bf4:	e014      	b.n	8007c20 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d004      	beq.n	8007c0c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2201      	movs	r2, #1
 8007c06:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e009      	b.n	8007c20 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d002      	beq.n	8007c1e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2240      	movs	r2, #64	@ 0x40
 8007c1c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007c1e:	2300      	movs	r3, #0
  
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3714      	adds	r7, #20
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	20000000 	.word	0x20000000
 8007c30:	10624dd3 	.word	0x10624dd3

08007c34 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007c3c:	4b11      	ldr	r3, [pc, #68]	@ (8007c84 <SDMMC_GetCmdError+0x50>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a11      	ldr	r2, [pc, #68]	@ (8007c88 <SDMMC_GetCmdError+0x54>)
 8007c42:	fba2 2303 	umull	r2, r3, r2, r3
 8007c46:	0a5b      	lsrs	r3, r3, #9
 8007c48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c4c:	fb02 f303 	mul.w	r3, r2, r3
 8007c50:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	1e5a      	subs	r2, r3, #1
 8007c56:	60fa      	str	r2, [r7, #12]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d102      	bne.n	8007c62 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c5c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007c60:	e009      	b.n	8007c76 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d0f1      	beq.n	8007c52 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	22c5      	movs	r2, #197	@ 0xc5
 8007c72:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3714      	adds	r7, #20
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	20000000 	.word	0x20000000
 8007c88:	10624dd3 	.word	0x10624dd3

08007c8c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007c90:	4904      	ldr	r1, [pc, #16]	@ (8007ca4 <MX_FATFS_Init+0x18>)
 8007c92:	4805      	ldr	r0, [pc, #20]	@ (8007ca8 <MX_FATFS_Init+0x1c>)
 8007c94:	f000 fa84 	bl	80081a0 <FATFS_LinkDriver>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	4b03      	ldr	r3, [pc, #12]	@ (8007cac <MX_FATFS_Init+0x20>)
 8007c9e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007ca0:	bf00      	nop
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	200006dc 	.word	0x200006dc
 8007ca8:	0800d1d8 	.word	0x0800d1d8
 8007cac:	200006d8 	.word	0x200006d8

08007cb0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007cba:	f000 f896 	bl	8007dea <BSP_SD_IsDetected>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d001      	beq.n	8007cc8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e012      	b.n	8007cee <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007cc8:	480b      	ldr	r0, [pc, #44]	@ (8007cf8 <BSP_SD_Init+0x48>)
 8007cca:	f7fc fbd3 	bl	8004474 <HAL_SD_Init>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007cd2:	79fb      	ldrb	r3, [r7, #7]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d109      	bne.n	8007cec <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8007cd8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007cdc:	4806      	ldr	r0, [pc, #24]	@ (8007cf8 <BSP_SD_Init+0x48>)
 8007cde:	f7fd f9a1 	bl	8005024 <HAL_SD_ConfigWideBusOperation>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d001      	beq.n	8007cec <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007cec:	79fb      	ldrb	r3, [r7, #7]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	20000414 	.word	0x20000414

08007cfc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	68f9      	ldr	r1, [r7, #12]
 8007d12:	4806      	ldr	r0, [pc, #24]	@ (8007d2c <BSP_SD_ReadBlocks_DMA+0x30>)
 8007d14:	f7fc fc5e 	bl	80045d4 <HAL_SD_ReadBlocks_DMA>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d001      	beq.n	8007d22 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3718      	adds	r7, #24
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	20000414 	.word	0x20000414

08007d30 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	68f9      	ldr	r1, [r7, #12]
 8007d46:	4806      	ldr	r0, [pc, #24]	@ (8007d60 <BSP_SD_WriteBlocks_DMA+0x30>)
 8007d48:	f7fc fd26 	bl	8004798 <HAL_SD_WriteBlocks_DMA>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d001      	beq.n	8007d56 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3718      	adds	r7, #24
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	20000414 	.word	0x20000414

08007d64 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007d68:	4805      	ldr	r0, [pc, #20]	@ (8007d80 <BSP_SD_GetCardState+0x1c>)
 8007d6a:	f7fd f9f5 	bl	8005158 <HAL_SD_GetCardState>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b04      	cmp	r3, #4
 8007d72:	bf14      	ite	ne
 8007d74:	2301      	movne	r3, #1
 8007d76:	2300      	moveq	r3, #0
 8007d78:	b2db      	uxtb	r3, r3
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	20000414 	.word	0x20000414

08007d84 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007d8c:	6879      	ldr	r1, [r7, #4]
 8007d8e:	4803      	ldr	r0, [pc, #12]	@ (8007d9c <BSP_SD_GetCardInfo+0x18>)
 8007d90:	f7fd f91c 	bl	8004fcc <HAL_SD_GetCardInfo>
}
 8007d94:	bf00      	nop
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	20000414 	.word	0x20000414

08007da0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007da8:	f000 f818 	bl	8007ddc <BSP_SD_AbortCallback>
}
 8007dac:	bf00      	nop
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007dbc:	f000 f98c 	bl	80080d8 <BSP_SD_WriteCpltCallback>
}
 8007dc0:	bf00      	nop
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007dd0:	f000 f98e 	bl	80080f0 <BSP_SD_ReadCpltCallback>
}
 8007dd4:	bf00      	nop
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	af00      	add	r7, sp, #0

}
 8007de0:	bf00      	nop
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b083      	sub	sp, #12
 8007dee:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007df0:	2301      	movs	r3, #1
 8007df2:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8007df4:	79fb      	ldrb	r3, [r7, #7]
 8007df6:	b2db      	uxtb	r3, r3
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8007e0c:	f7fa fc36 	bl	800267c <HAL_GetTick>
 8007e10:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8007e12:	e006      	b.n	8007e22 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007e14:	f7ff ffa6 	bl	8007d64 <BSP_SD_GetCardState>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d101      	bne.n	8007e22 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	e009      	b.n	8007e36 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8007e22:	f7fa fc2b 	bl	800267c <HAL_GetTick>
 8007e26:	4602      	mov	r2, r0
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d8f0      	bhi.n	8007e14 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007e32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
	...

08007e40 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	4603      	mov	r3, r0
 8007e48:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8007e78 <SD_CheckStatus+0x38>)
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007e50:	f7ff ff88 	bl	8007d64 <BSP_SD_GetCardState>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d107      	bne.n	8007e6a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007e5a:	4b07      	ldr	r3, [pc, #28]	@ (8007e78 <SD_CheckStatus+0x38>)
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	f023 0301 	bic.w	r3, r3, #1
 8007e64:	b2da      	uxtb	r2, r3
 8007e66:	4b04      	ldr	r3, [pc, #16]	@ (8007e78 <SD_CheckStatus+0x38>)
 8007e68:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007e6a:	4b03      	ldr	r3, [pc, #12]	@ (8007e78 <SD_CheckStatus+0x38>)
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	b2db      	uxtb	r3, r3
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	20000009 	.word	0x20000009

08007e7c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	4603      	mov	r3, r0
 8007e84:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007e86:	f7ff ff13 	bl	8007cb0 <BSP_SD_Init>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d107      	bne.n	8007ea0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8007e90:	79fb      	ldrb	r3, [r7, #7]
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7ff ffd4 	bl	8007e40 <SD_CheckStatus>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	4b04      	ldr	r3, [pc, #16]	@ (8007eb0 <SD_initialize+0x34>)
 8007e9e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007ea0:	4b03      	ldr	r3, [pc, #12]	@ (8007eb0 <SD_initialize+0x34>)
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	b2db      	uxtb	r3, r3
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3708      	adds	r7, #8
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	20000009 	.word	0x20000009

08007eb4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	4603      	mov	r3, r0
 8007ebc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007ebe:	79fb      	ldrb	r3, [r7, #7]
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7ff ffbd 	bl	8007e40 <SD_CheckStatus>
 8007ec6:	4603      	mov	r3, r0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3708      	adds	r7, #8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60b9      	str	r1, [r7, #8]
 8007ed8:	607a      	str	r2, [r7, #4]
 8007eda:	603b      	str	r3, [r7, #0]
 8007edc:	4603      	mov	r3, r0
 8007ede:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007ee4:	f247 5030 	movw	r0, #30000	@ 0x7530
 8007ee8:	f7ff ff8c 	bl	8007e04 <SD_CheckStatusWithTimeout>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	da01      	bge.n	8007ef6 <SD_read+0x26>
  {
    return res;
 8007ef2:	7dfb      	ldrb	r3, [r7, #23]
 8007ef4:	e03b      	b.n	8007f6e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8007ef6:	683a      	ldr	r2, [r7, #0]
 8007ef8:	6879      	ldr	r1, [r7, #4]
 8007efa:	68b8      	ldr	r0, [r7, #8]
 8007efc:	f7ff fefe 	bl	8007cfc <BSP_SD_ReadBlocks_DMA>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d132      	bne.n	8007f6c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8007f06:	4b1c      	ldr	r3, [pc, #112]	@ (8007f78 <SD_read+0xa8>)
 8007f08:	2200      	movs	r2, #0
 8007f0a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8007f0c:	f7fa fbb6 	bl	800267c <HAL_GetTick>
 8007f10:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007f12:	bf00      	nop
 8007f14:	4b18      	ldr	r3, [pc, #96]	@ (8007f78 <SD_read+0xa8>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d108      	bne.n	8007f2e <SD_read+0x5e>
 8007f1c:	f7fa fbae 	bl	800267c <HAL_GetTick>
 8007f20:	4602      	mov	r2, r0
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	1ad3      	subs	r3, r2, r3
 8007f26:	f247 522f 	movw	r2, #29999	@ 0x752f
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d9f2      	bls.n	8007f14 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8007f2e:	4b12      	ldr	r3, [pc, #72]	@ (8007f78 <SD_read+0xa8>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d102      	bne.n	8007f3c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	75fb      	strb	r3, [r7, #23]
 8007f3a:	e017      	b.n	8007f6c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8007f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8007f78 <SD_read+0xa8>)
 8007f3e:	2200      	movs	r2, #0
 8007f40:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8007f42:	f7fa fb9b 	bl	800267c <HAL_GetTick>
 8007f46:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007f48:	e007      	b.n	8007f5a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007f4a:	f7ff ff0b 	bl	8007d64 <BSP_SD_GetCardState>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d102      	bne.n	8007f5a <SD_read+0x8a>
          {
            res = RES_OK;
 8007f54:	2300      	movs	r3, #0
 8007f56:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8007f58:	e008      	b.n	8007f6c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007f5a:	f7fa fb8f 	bl	800267c <HAL_GetTick>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	f247 522f 	movw	r2, #29999	@ 0x752f
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d9ee      	bls.n	8007f4a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8007f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3718      	adds	r7, #24
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	200006e4 	.word	0x200006e4

08007f7c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60b9      	str	r1, [r7, #8]
 8007f84:	607a      	str	r2, [r7, #4]
 8007f86:	603b      	str	r3, [r7, #0]
 8007f88:	4603      	mov	r3, r0
 8007f8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8007f90:	4b24      	ldr	r3, [pc, #144]	@ (8008024 <SD_write+0xa8>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007f96:	f247 5030 	movw	r0, #30000	@ 0x7530
 8007f9a:	f7ff ff33 	bl	8007e04 <SD_CheckStatusWithTimeout>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	da01      	bge.n	8007fa8 <SD_write+0x2c>
  {
    return res;
 8007fa4:	7dfb      	ldrb	r3, [r7, #23]
 8007fa6:	e038      	b.n	800801a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	6879      	ldr	r1, [r7, #4]
 8007fac:	68b8      	ldr	r0, [r7, #8]
 8007fae:	f7ff febf 	bl	8007d30 <BSP_SD_WriteBlocks_DMA>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d12f      	bne.n	8008018 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8007fb8:	f7fa fb60 	bl	800267c <HAL_GetTick>
 8007fbc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007fbe:	bf00      	nop
 8007fc0:	4b18      	ldr	r3, [pc, #96]	@ (8008024 <SD_write+0xa8>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d108      	bne.n	8007fda <SD_write+0x5e>
 8007fc8:	f7fa fb58 	bl	800267c <HAL_GetTick>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	f247 522f 	movw	r2, #29999	@ 0x752f
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d9f2      	bls.n	8007fc0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8007fda:	4b12      	ldr	r3, [pc, #72]	@ (8008024 <SD_write+0xa8>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d102      	bne.n	8007fe8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	75fb      	strb	r3, [r7, #23]
 8007fe6:	e017      	b.n	8008018 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8007fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8008024 <SD_write+0xa8>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8007fee:	f7fa fb45 	bl	800267c <HAL_GetTick>
 8007ff2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007ff4:	e007      	b.n	8008006 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007ff6:	f7ff feb5 	bl	8007d64 <BSP_SD_GetCardState>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d102      	bne.n	8008006 <SD_write+0x8a>
          {
            res = RES_OK;
 8008000:	2300      	movs	r3, #0
 8008002:	75fb      	strb	r3, [r7, #23]
            break;
 8008004:	e008      	b.n	8008018 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008006:	f7fa fb39 	bl	800267c <HAL_GetTick>
 800800a:	4602      	mov	r2, r0
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	1ad3      	subs	r3, r2, r3
 8008010:	f247 522f 	movw	r2, #29999	@ 0x752f
 8008014:	4293      	cmp	r3, r2
 8008016:	d9ee      	bls.n	8007ff6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8008018:	7dfb      	ldrb	r3, [r7, #23]
}
 800801a:	4618      	mov	r0, r3
 800801c:	3718      	adds	r7, #24
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	200006e0 	.word	0x200006e0

08008028 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b08c      	sub	sp, #48	@ 0x30
 800802c:	af00      	add	r7, sp, #0
 800802e:	4603      	mov	r3, r0
 8008030:	603a      	str	r2, [r7, #0]
 8008032:	71fb      	strb	r3, [r7, #7]
 8008034:	460b      	mov	r3, r1
 8008036:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800803e:	4b25      	ldr	r3, [pc, #148]	@ (80080d4 <SD_ioctl+0xac>)
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	b2db      	uxtb	r3, r3
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <SD_ioctl+0x28>
 800804c:	2303      	movs	r3, #3
 800804e:	e03c      	b.n	80080ca <SD_ioctl+0xa2>

  switch (cmd)
 8008050:	79bb      	ldrb	r3, [r7, #6]
 8008052:	2b03      	cmp	r3, #3
 8008054:	d834      	bhi.n	80080c0 <SD_ioctl+0x98>
 8008056:	a201      	add	r2, pc, #4	@ (adr r2, 800805c <SD_ioctl+0x34>)
 8008058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805c:	0800806d 	.word	0x0800806d
 8008060:	08008075 	.word	0x08008075
 8008064:	0800808d 	.word	0x0800808d
 8008068:	080080a7 	.word	0x080080a7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800806c:	2300      	movs	r3, #0
 800806e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8008072:	e028      	b.n	80080c6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008074:	f107 030c 	add.w	r3, r7, #12
 8008078:	4618      	mov	r0, r3
 800807a:	f7ff fe83 	bl	8007d84 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800807e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008084:	2300      	movs	r3, #0
 8008086:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800808a:	e01c      	b.n	80080c6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800808c:	f107 030c 	add.w	r3, r7, #12
 8008090:	4618      	mov	r0, r3
 8008092:	f7ff fe77 	bl	8007d84 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008098:	b29a      	uxth	r2, r3
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800809e:	2300      	movs	r3, #0
 80080a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80080a4:	e00f      	b.n	80080c6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80080a6:	f107 030c 	add.w	r3, r7, #12
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7ff fe6a 	bl	8007d84 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80080b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080b2:	0a5a      	lsrs	r2, r3, #9
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80080b8:	2300      	movs	r3, #0
 80080ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80080be:	e002      	b.n	80080c6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80080c0:	2304      	movs	r3, #4
 80080c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80080c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3730      	adds	r7, #48	@ 0x30
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	20000009 	.word	0x20000009

080080d8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80080d8:	b480      	push	{r7}
 80080da:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80080dc:	4b03      	ldr	r3, [pc, #12]	@ (80080ec <BSP_SD_WriteCpltCallback+0x14>)
 80080de:	2201      	movs	r2, #1
 80080e0:	601a      	str	r2, [r3, #0]
}
 80080e2:	bf00      	nop
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr
 80080ec:	200006e0 	.word	0x200006e0

080080f0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80080f0:	b480      	push	{r7}
 80080f2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80080f4:	4b03      	ldr	r3, [pc, #12]	@ (8008104 <BSP_SD_ReadCpltCallback+0x14>)
 80080f6:	2201      	movs	r2, #1
 80080f8:	601a      	str	r2, [r3, #0]
}
 80080fa:	bf00      	nop
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr
 8008104:	200006e4 	.word	0x200006e4

08008108 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008108:	b480      	push	{r7}
 800810a:	b087      	sub	sp, #28
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	4613      	mov	r3, r2
 8008114:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008116:	2301      	movs	r3, #1
 8008118:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800811a:	2300      	movs	r3, #0
 800811c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800811e:	4b1f      	ldr	r3, [pc, #124]	@ (800819c <FATFS_LinkDriverEx+0x94>)
 8008120:	7a5b      	ldrb	r3, [r3, #9]
 8008122:	b2db      	uxtb	r3, r3
 8008124:	2b00      	cmp	r3, #0
 8008126:	d131      	bne.n	800818c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008128:	4b1c      	ldr	r3, [pc, #112]	@ (800819c <FATFS_LinkDriverEx+0x94>)
 800812a:	7a5b      	ldrb	r3, [r3, #9]
 800812c:	b2db      	uxtb	r3, r3
 800812e:	461a      	mov	r2, r3
 8008130:	4b1a      	ldr	r3, [pc, #104]	@ (800819c <FATFS_LinkDriverEx+0x94>)
 8008132:	2100      	movs	r1, #0
 8008134:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008136:	4b19      	ldr	r3, [pc, #100]	@ (800819c <FATFS_LinkDriverEx+0x94>)
 8008138:	7a5b      	ldrb	r3, [r3, #9]
 800813a:	b2db      	uxtb	r3, r3
 800813c:	4a17      	ldr	r2, [pc, #92]	@ (800819c <FATFS_LinkDriverEx+0x94>)
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008146:	4b15      	ldr	r3, [pc, #84]	@ (800819c <FATFS_LinkDriverEx+0x94>)
 8008148:	7a5b      	ldrb	r3, [r3, #9]
 800814a:	b2db      	uxtb	r3, r3
 800814c:	461a      	mov	r2, r3
 800814e:	4b13      	ldr	r3, [pc, #76]	@ (800819c <FATFS_LinkDriverEx+0x94>)
 8008150:	4413      	add	r3, r2
 8008152:	79fa      	ldrb	r2, [r7, #7]
 8008154:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008156:	4b11      	ldr	r3, [pc, #68]	@ (800819c <FATFS_LinkDriverEx+0x94>)
 8008158:	7a5b      	ldrb	r3, [r3, #9]
 800815a:	b2db      	uxtb	r3, r3
 800815c:	1c5a      	adds	r2, r3, #1
 800815e:	b2d1      	uxtb	r1, r2
 8008160:	4a0e      	ldr	r2, [pc, #56]	@ (800819c <FATFS_LinkDriverEx+0x94>)
 8008162:	7251      	strb	r1, [r2, #9]
 8008164:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008166:	7dbb      	ldrb	r3, [r7, #22]
 8008168:	3330      	adds	r3, #48	@ 0x30
 800816a:	b2da      	uxtb	r2, r3
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	3301      	adds	r3, #1
 8008174:	223a      	movs	r2, #58	@ 0x3a
 8008176:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	3302      	adds	r3, #2
 800817c:	222f      	movs	r2, #47	@ 0x2f
 800817e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	3303      	adds	r3, #3
 8008184:	2200      	movs	r2, #0
 8008186:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008188:	2300      	movs	r3, #0
 800818a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800818c:	7dfb      	ldrb	r3, [r7, #23]
}
 800818e:	4618      	mov	r0, r3
 8008190:	371c      	adds	r7, #28
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	200006e8 	.word	0x200006e8

080081a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80081aa:	2200      	movs	r2, #0
 80081ac:	6839      	ldr	r1, [r7, #0]
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7ff ffaa 	bl	8008108 <FATFS_LinkDriverEx>
 80081b4:	4603      	mov	r3, r0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3708      	adds	r7, #8
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <__cvt>:
 80081be:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081c2:	ec57 6b10 	vmov	r6, r7, d0
 80081c6:	2f00      	cmp	r7, #0
 80081c8:	460c      	mov	r4, r1
 80081ca:	4619      	mov	r1, r3
 80081cc:	463b      	mov	r3, r7
 80081ce:	bfbb      	ittet	lt
 80081d0:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80081d4:	461f      	movlt	r7, r3
 80081d6:	2300      	movge	r3, #0
 80081d8:	232d      	movlt	r3, #45	@ 0x2d
 80081da:	700b      	strb	r3, [r1, #0]
 80081dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081de:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80081e2:	4691      	mov	r9, r2
 80081e4:	f023 0820 	bic.w	r8, r3, #32
 80081e8:	bfbc      	itt	lt
 80081ea:	4632      	movlt	r2, r6
 80081ec:	4616      	movlt	r6, r2
 80081ee:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80081f2:	d005      	beq.n	8008200 <__cvt+0x42>
 80081f4:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80081f8:	d100      	bne.n	80081fc <__cvt+0x3e>
 80081fa:	3401      	adds	r4, #1
 80081fc:	2102      	movs	r1, #2
 80081fe:	e000      	b.n	8008202 <__cvt+0x44>
 8008200:	2103      	movs	r1, #3
 8008202:	ab03      	add	r3, sp, #12
 8008204:	9301      	str	r3, [sp, #4]
 8008206:	ab02      	add	r3, sp, #8
 8008208:	9300      	str	r3, [sp, #0]
 800820a:	ec47 6b10 	vmov	d0, r6, r7
 800820e:	4653      	mov	r3, sl
 8008210:	4622      	mov	r2, r4
 8008212:	f001 f955 	bl	80094c0 <_dtoa_r>
 8008216:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800821a:	4605      	mov	r5, r0
 800821c:	d119      	bne.n	8008252 <__cvt+0x94>
 800821e:	f019 0f01 	tst.w	r9, #1
 8008222:	d00e      	beq.n	8008242 <__cvt+0x84>
 8008224:	eb00 0904 	add.w	r9, r0, r4
 8008228:	2200      	movs	r2, #0
 800822a:	2300      	movs	r3, #0
 800822c:	4630      	mov	r0, r6
 800822e:	4639      	mov	r1, r7
 8008230:	f7f8 fc52 	bl	8000ad8 <__aeabi_dcmpeq>
 8008234:	b108      	cbz	r0, 800823a <__cvt+0x7c>
 8008236:	f8cd 900c 	str.w	r9, [sp, #12]
 800823a:	2230      	movs	r2, #48	@ 0x30
 800823c:	9b03      	ldr	r3, [sp, #12]
 800823e:	454b      	cmp	r3, r9
 8008240:	d31e      	bcc.n	8008280 <__cvt+0xc2>
 8008242:	9b03      	ldr	r3, [sp, #12]
 8008244:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008246:	1b5b      	subs	r3, r3, r5
 8008248:	4628      	mov	r0, r5
 800824a:	6013      	str	r3, [r2, #0]
 800824c:	b004      	add	sp, #16
 800824e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008252:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008256:	eb00 0904 	add.w	r9, r0, r4
 800825a:	d1e5      	bne.n	8008228 <__cvt+0x6a>
 800825c:	7803      	ldrb	r3, [r0, #0]
 800825e:	2b30      	cmp	r3, #48	@ 0x30
 8008260:	d10a      	bne.n	8008278 <__cvt+0xba>
 8008262:	2200      	movs	r2, #0
 8008264:	2300      	movs	r3, #0
 8008266:	4630      	mov	r0, r6
 8008268:	4639      	mov	r1, r7
 800826a:	f7f8 fc35 	bl	8000ad8 <__aeabi_dcmpeq>
 800826e:	b918      	cbnz	r0, 8008278 <__cvt+0xba>
 8008270:	f1c4 0401 	rsb	r4, r4, #1
 8008274:	f8ca 4000 	str.w	r4, [sl]
 8008278:	f8da 3000 	ldr.w	r3, [sl]
 800827c:	4499      	add	r9, r3
 800827e:	e7d3      	b.n	8008228 <__cvt+0x6a>
 8008280:	1c59      	adds	r1, r3, #1
 8008282:	9103      	str	r1, [sp, #12]
 8008284:	701a      	strb	r2, [r3, #0]
 8008286:	e7d9      	b.n	800823c <__cvt+0x7e>

08008288 <__exponent>:
 8008288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800828a:	2900      	cmp	r1, #0
 800828c:	bfba      	itte	lt
 800828e:	4249      	neglt	r1, r1
 8008290:	232d      	movlt	r3, #45	@ 0x2d
 8008292:	232b      	movge	r3, #43	@ 0x2b
 8008294:	2909      	cmp	r1, #9
 8008296:	7002      	strb	r2, [r0, #0]
 8008298:	7043      	strb	r3, [r0, #1]
 800829a:	dd29      	ble.n	80082f0 <__exponent+0x68>
 800829c:	f10d 0307 	add.w	r3, sp, #7
 80082a0:	461d      	mov	r5, r3
 80082a2:	270a      	movs	r7, #10
 80082a4:	461a      	mov	r2, r3
 80082a6:	fbb1 f6f7 	udiv	r6, r1, r7
 80082aa:	fb07 1416 	mls	r4, r7, r6, r1
 80082ae:	3430      	adds	r4, #48	@ 0x30
 80082b0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80082b4:	460c      	mov	r4, r1
 80082b6:	2c63      	cmp	r4, #99	@ 0x63
 80082b8:	f103 33ff 	add.w	r3, r3, #4294967295
 80082bc:	4631      	mov	r1, r6
 80082be:	dcf1      	bgt.n	80082a4 <__exponent+0x1c>
 80082c0:	3130      	adds	r1, #48	@ 0x30
 80082c2:	1e94      	subs	r4, r2, #2
 80082c4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80082c8:	1c41      	adds	r1, r0, #1
 80082ca:	4623      	mov	r3, r4
 80082cc:	42ab      	cmp	r3, r5
 80082ce:	d30a      	bcc.n	80082e6 <__exponent+0x5e>
 80082d0:	f10d 0309 	add.w	r3, sp, #9
 80082d4:	1a9b      	subs	r3, r3, r2
 80082d6:	42ac      	cmp	r4, r5
 80082d8:	bf88      	it	hi
 80082da:	2300      	movhi	r3, #0
 80082dc:	3302      	adds	r3, #2
 80082de:	4403      	add	r3, r0
 80082e0:	1a18      	subs	r0, r3, r0
 80082e2:	b003      	add	sp, #12
 80082e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082e6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80082ea:	f801 6f01 	strb.w	r6, [r1, #1]!
 80082ee:	e7ed      	b.n	80082cc <__exponent+0x44>
 80082f0:	2330      	movs	r3, #48	@ 0x30
 80082f2:	3130      	adds	r1, #48	@ 0x30
 80082f4:	7083      	strb	r3, [r0, #2]
 80082f6:	70c1      	strb	r1, [r0, #3]
 80082f8:	1d03      	adds	r3, r0, #4
 80082fa:	e7f1      	b.n	80082e0 <__exponent+0x58>

080082fc <_printf_float>:
 80082fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008300:	b08d      	sub	sp, #52	@ 0x34
 8008302:	460c      	mov	r4, r1
 8008304:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008308:	4616      	mov	r6, r2
 800830a:	461f      	mov	r7, r3
 800830c:	4605      	mov	r5, r0
 800830e:	f000 ffc1 	bl	8009294 <_localeconv_r>
 8008312:	6803      	ldr	r3, [r0, #0]
 8008314:	9304      	str	r3, [sp, #16]
 8008316:	4618      	mov	r0, r3
 8008318:	f7f7 ffb2 	bl	8000280 <strlen>
 800831c:	2300      	movs	r3, #0
 800831e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008320:	f8d8 3000 	ldr.w	r3, [r8]
 8008324:	9005      	str	r0, [sp, #20]
 8008326:	3307      	adds	r3, #7
 8008328:	f023 0307 	bic.w	r3, r3, #7
 800832c:	f103 0208 	add.w	r2, r3, #8
 8008330:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008334:	f8d4 b000 	ldr.w	fp, [r4]
 8008338:	f8c8 2000 	str.w	r2, [r8]
 800833c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008340:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008344:	9307      	str	r3, [sp, #28]
 8008346:	f8cd 8018 	str.w	r8, [sp, #24]
 800834a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800834e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008352:	4b9c      	ldr	r3, [pc, #624]	@ (80085c4 <_printf_float+0x2c8>)
 8008354:	f04f 32ff 	mov.w	r2, #4294967295
 8008358:	f7f8 fbf0 	bl	8000b3c <__aeabi_dcmpun>
 800835c:	bb70      	cbnz	r0, 80083bc <_printf_float+0xc0>
 800835e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008362:	4b98      	ldr	r3, [pc, #608]	@ (80085c4 <_printf_float+0x2c8>)
 8008364:	f04f 32ff 	mov.w	r2, #4294967295
 8008368:	f7f8 fbca 	bl	8000b00 <__aeabi_dcmple>
 800836c:	bb30      	cbnz	r0, 80083bc <_printf_float+0xc0>
 800836e:	2200      	movs	r2, #0
 8008370:	2300      	movs	r3, #0
 8008372:	4640      	mov	r0, r8
 8008374:	4649      	mov	r1, r9
 8008376:	f7f8 fbb9 	bl	8000aec <__aeabi_dcmplt>
 800837a:	b110      	cbz	r0, 8008382 <_printf_float+0x86>
 800837c:	232d      	movs	r3, #45	@ 0x2d
 800837e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008382:	4a91      	ldr	r2, [pc, #580]	@ (80085c8 <_printf_float+0x2cc>)
 8008384:	4b91      	ldr	r3, [pc, #580]	@ (80085cc <_printf_float+0x2d0>)
 8008386:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800838a:	bf94      	ite	ls
 800838c:	4690      	movls	r8, r2
 800838e:	4698      	movhi	r8, r3
 8008390:	2303      	movs	r3, #3
 8008392:	6123      	str	r3, [r4, #16]
 8008394:	f02b 0304 	bic.w	r3, fp, #4
 8008398:	6023      	str	r3, [r4, #0]
 800839a:	f04f 0900 	mov.w	r9, #0
 800839e:	9700      	str	r7, [sp, #0]
 80083a0:	4633      	mov	r3, r6
 80083a2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80083a4:	4621      	mov	r1, r4
 80083a6:	4628      	mov	r0, r5
 80083a8:	f000 f9d2 	bl	8008750 <_printf_common>
 80083ac:	3001      	adds	r0, #1
 80083ae:	f040 808d 	bne.w	80084cc <_printf_float+0x1d0>
 80083b2:	f04f 30ff 	mov.w	r0, #4294967295
 80083b6:	b00d      	add	sp, #52	@ 0x34
 80083b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083bc:	4642      	mov	r2, r8
 80083be:	464b      	mov	r3, r9
 80083c0:	4640      	mov	r0, r8
 80083c2:	4649      	mov	r1, r9
 80083c4:	f7f8 fbba 	bl	8000b3c <__aeabi_dcmpun>
 80083c8:	b140      	cbz	r0, 80083dc <_printf_float+0xe0>
 80083ca:	464b      	mov	r3, r9
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	bfbc      	itt	lt
 80083d0:	232d      	movlt	r3, #45	@ 0x2d
 80083d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80083d6:	4a7e      	ldr	r2, [pc, #504]	@ (80085d0 <_printf_float+0x2d4>)
 80083d8:	4b7e      	ldr	r3, [pc, #504]	@ (80085d4 <_printf_float+0x2d8>)
 80083da:	e7d4      	b.n	8008386 <_printf_float+0x8a>
 80083dc:	6863      	ldr	r3, [r4, #4]
 80083de:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80083e2:	9206      	str	r2, [sp, #24]
 80083e4:	1c5a      	adds	r2, r3, #1
 80083e6:	d13b      	bne.n	8008460 <_printf_float+0x164>
 80083e8:	2306      	movs	r3, #6
 80083ea:	6063      	str	r3, [r4, #4]
 80083ec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80083f0:	2300      	movs	r3, #0
 80083f2:	6022      	str	r2, [r4, #0]
 80083f4:	9303      	str	r3, [sp, #12]
 80083f6:	ab0a      	add	r3, sp, #40	@ 0x28
 80083f8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80083fc:	ab09      	add	r3, sp, #36	@ 0x24
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	6861      	ldr	r1, [r4, #4]
 8008402:	ec49 8b10 	vmov	d0, r8, r9
 8008406:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800840a:	4628      	mov	r0, r5
 800840c:	f7ff fed7 	bl	80081be <__cvt>
 8008410:	9b06      	ldr	r3, [sp, #24]
 8008412:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008414:	2b47      	cmp	r3, #71	@ 0x47
 8008416:	4680      	mov	r8, r0
 8008418:	d129      	bne.n	800846e <_printf_float+0x172>
 800841a:	1cc8      	adds	r0, r1, #3
 800841c:	db02      	blt.n	8008424 <_printf_float+0x128>
 800841e:	6863      	ldr	r3, [r4, #4]
 8008420:	4299      	cmp	r1, r3
 8008422:	dd41      	ble.n	80084a8 <_printf_float+0x1ac>
 8008424:	f1aa 0a02 	sub.w	sl, sl, #2
 8008428:	fa5f fa8a 	uxtb.w	sl, sl
 800842c:	3901      	subs	r1, #1
 800842e:	4652      	mov	r2, sl
 8008430:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008434:	9109      	str	r1, [sp, #36]	@ 0x24
 8008436:	f7ff ff27 	bl	8008288 <__exponent>
 800843a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800843c:	1813      	adds	r3, r2, r0
 800843e:	2a01      	cmp	r2, #1
 8008440:	4681      	mov	r9, r0
 8008442:	6123      	str	r3, [r4, #16]
 8008444:	dc02      	bgt.n	800844c <_printf_float+0x150>
 8008446:	6822      	ldr	r2, [r4, #0]
 8008448:	07d2      	lsls	r2, r2, #31
 800844a:	d501      	bpl.n	8008450 <_printf_float+0x154>
 800844c:	3301      	adds	r3, #1
 800844e:	6123      	str	r3, [r4, #16]
 8008450:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008454:	2b00      	cmp	r3, #0
 8008456:	d0a2      	beq.n	800839e <_printf_float+0xa2>
 8008458:	232d      	movs	r3, #45	@ 0x2d
 800845a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800845e:	e79e      	b.n	800839e <_printf_float+0xa2>
 8008460:	9a06      	ldr	r2, [sp, #24]
 8008462:	2a47      	cmp	r2, #71	@ 0x47
 8008464:	d1c2      	bne.n	80083ec <_printf_float+0xf0>
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1c0      	bne.n	80083ec <_printf_float+0xf0>
 800846a:	2301      	movs	r3, #1
 800846c:	e7bd      	b.n	80083ea <_printf_float+0xee>
 800846e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008472:	d9db      	bls.n	800842c <_printf_float+0x130>
 8008474:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008478:	d118      	bne.n	80084ac <_printf_float+0x1b0>
 800847a:	2900      	cmp	r1, #0
 800847c:	6863      	ldr	r3, [r4, #4]
 800847e:	dd0b      	ble.n	8008498 <_printf_float+0x19c>
 8008480:	6121      	str	r1, [r4, #16]
 8008482:	b913      	cbnz	r3, 800848a <_printf_float+0x18e>
 8008484:	6822      	ldr	r2, [r4, #0]
 8008486:	07d0      	lsls	r0, r2, #31
 8008488:	d502      	bpl.n	8008490 <_printf_float+0x194>
 800848a:	3301      	adds	r3, #1
 800848c:	440b      	add	r3, r1
 800848e:	6123      	str	r3, [r4, #16]
 8008490:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008492:	f04f 0900 	mov.w	r9, #0
 8008496:	e7db      	b.n	8008450 <_printf_float+0x154>
 8008498:	b913      	cbnz	r3, 80084a0 <_printf_float+0x1a4>
 800849a:	6822      	ldr	r2, [r4, #0]
 800849c:	07d2      	lsls	r2, r2, #31
 800849e:	d501      	bpl.n	80084a4 <_printf_float+0x1a8>
 80084a0:	3302      	adds	r3, #2
 80084a2:	e7f4      	b.n	800848e <_printf_float+0x192>
 80084a4:	2301      	movs	r3, #1
 80084a6:	e7f2      	b.n	800848e <_printf_float+0x192>
 80084a8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80084ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084ae:	4299      	cmp	r1, r3
 80084b0:	db05      	blt.n	80084be <_printf_float+0x1c2>
 80084b2:	6823      	ldr	r3, [r4, #0]
 80084b4:	6121      	str	r1, [r4, #16]
 80084b6:	07d8      	lsls	r0, r3, #31
 80084b8:	d5ea      	bpl.n	8008490 <_printf_float+0x194>
 80084ba:	1c4b      	adds	r3, r1, #1
 80084bc:	e7e7      	b.n	800848e <_printf_float+0x192>
 80084be:	2900      	cmp	r1, #0
 80084c0:	bfd4      	ite	le
 80084c2:	f1c1 0202 	rsble	r2, r1, #2
 80084c6:	2201      	movgt	r2, #1
 80084c8:	4413      	add	r3, r2
 80084ca:	e7e0      	b.n	800848e <_printf_float+0x192>
 80084cc:	6823      	ldr	r3, [r4, #0]
 80084ce:	055a      	lsls	r2, r3, #21
 80084d0:	d407      	bmi.n	80084e2 <_printf_float+0x1e6>
 80084d2:	6923      	ldr	r3, [r4, #16]
 80084d4:	4642      	mov	r2, r8
 80084d6:	4631      	mov	r1, r6
 80084d8:	4628      	mov	r0, r5
 80084da:	47b8      	blx	r7
 80084dc:	3001      	adds	r0, #1
 80084de:	d12b      	bne.n	8008538 <_printf_float+0x23c>
 80084e0:	e767      	b.n	80083b2 <_printf_float+0xb6>
 80084e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80084e6:	f240 80dd 	bls.w	80086a4 <_printf_float+0x3a8>
 80084ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80084ee:	2200      	movs	r2, #0
 80084f0:	2300      	movs	r3, #0
 80084f2:	f7f8 faf1 	bl	8000ad8 <__aeabi_dcmpeq>
 80084f6:	2800      	cmp	r0, #0
 80084f8:	d033      	beq.n	8008562 <_printf_float+0x266>
 80084fa:	4a37      	ldr	r2, [pc, #220]	@ (80085d8 <_printf_float+0x2dc>)
 80084fc:	2301      	movs	r3, #1
 80084fe:	4631      	mov	r1, r6
 8008500:	4628      	mov	r0, r5
 8008502:	47b8      	blx	r7
 8008504:	3001      	adds	r0, #1
 8008506:	f43f af54 	beq.w	80083b2 <_printf_float+0xb6>
 800850a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800850e:	4543      	cmp	r3, r8
 8008510:	db02      	blt.n	8008518 <_printf_float+0x21c>
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	07d8      	lsls	r0, r3, #31
 8008516:	d50f      	bpl.n	8008538 <_printf_float+0x23c>
 8008518:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800851c:	4631      	mov	r1, r6
 800851e:	4628      	mov	r0, r5
 8008520:	47b8      	blx	r7
 8008522:	3001      	adds	r0, #1
 8008524:	f43f af45 	beq.w	80083b2 <_printf_float+0xb6>
 8008528:	f04f 0900 	mov.w	r9, #0
 800852c:	f108 38ff 	add.w	r8, r8, #4294967295
 8008530:	f104 0a1a 	add.w	sl, r4, #26
 8008534:	45c8      	cmp	r8, r9
 8008536:	dc09      	bgt.n	800854c <_printf_float+0x250>
 8008538:	6823      	ldr	r3, [r4, #0]
 800853a:	079b      	lsls	r3, r3, #30
 800853c:	f100 8103 	bmi.w	8008746 <_printf_float+0x44a>
 8008540:	68e0      	ldr	r0, [r4, #12]
 8008542:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008544:	4298      	cmp	r0, r3
 8008546:	bfb8      	it	lt
 8008548:	4618      	movlt	r0, r3
 800854a:	e734      	b.n	80083b6 <_printf_float+0xba>
 800854c:	2301      	movs	r3, #1
 800854e:	4652      	mov	r2, sl
 8008550:	4631      	mov	r1, r6
 8008552:	4628      	mov	r0, r5
 8008554:	47b8      	blx	r7
 8008556:	3001      	adds	r0, #1
 8008558:	f43f af2b 	beq.w	80083b2 <_printf_float+0xb6>
 800855c:	f109 0901 	add.w	r9, r9, #1
 8008560:	e7e8      	b.n	8008534 <_printf_float+0x238>
 8008562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008564:	2b00      	cmp	r3, #0
 8008566:	dc39      	bgt.n	80085dc <_printf_float+0x2e0>
 8008568:	4a1b      	ldr	r2, [pc, #108]	@ (80085d8 <_printf_float+0x2dc>)
 800856a:	2301      	movs	r3, #1
 800856c:	4631      	mov	r1, r6
 800856e:	4628      	mov	r0, r5
 8008570:	47b8      	blx	r7
 8008572:	3001      	adds	r0, #1
 8008574:	f43f af1d 	beq.w	80083b2 <_printf_float+0xb6>
 8008578:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800857c:	ea59 0303 	orrs.w	r3, r9, r3
 8008580:	d102      	bne.n	8008588 <_printf_float+0x28c>
 8008582:	6823      	ldr	r3, [r4, #0]
 8008584:	07d9      	lsls	r1, r3, #31
 8008586:	d5d7      	bpl.n	8008538 <_printf_float+0x23c>
 8008588:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800858c:	4631      	mov	r1, r6
 800858e:	4628      	mov	r0, r5
 8008590:	47b8      	blx	r7
 8008592:	3001      	adds	r0, #1
 8008594:	f43f af0d 	beq.w	80083b2 <_printf_float+0xb6>
 8008598:	f04f 0a00 	mov.w	sl, #0
 800859c:	f104 0b1a 	add.w	fp, r4, #26
 80085a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a2:	425b      	negs	r3, r3
 80085a4:	4553      	cmp	r3, sl
 80085a6:	dc01      	bgt.n	80085ac <_printf_float+0x2b0>
 80085a8:	464b      	mov	r3, r9
 80085aa:	e793      	b.n	80084d4 <_printf_float+0x1d8>
 80085ac:	2301      	movs	r3, #1
 80085ae:	465a      	mov	r2, fp
 80085b0:	4631      	mov	r1, r6
 80085b2:	4628      	mov	r0, r5
 80085b4:	47b8      	blx	r7
 80085b6:	3001      	adds	r0, #1
 80085b8:	f43f aefb 	beq.w	80083b2 <_printf_float+0xb6>
 80085bc:	f10a 0a01 	add.w	sl, sl, #1
 80085c0:	e7ee      	b.n	80085a0 <_printf_float+0x2a4>
 80085c2:	bf00      	nop
 80085c4:	7fefffff 	.word	0x7fefffff
 80085c8:	0800d1ec 	.word	0x0800d1ec
 80085cc:	0800d1f0 	.word	0x0800d1f0
 80085d0:	0800d1f4 	.word	0x0800d1f4
 80085d4:	0800d1f8 	.word	0x0800d1f8
 80085d8:	0800d588 	.word	0x0800d588
 80085dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80085de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80085e2:	4553      	cmp	r3, sl
 80085e4:	bfa8      	it	ge
 80085e6:	4653      	movge	r3, sl
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	4699      	mov	r9, r3
 80085ec:	dc36      	bgt.n	800865c <_printf_float+0x360>
 80085ee:	f04f 0b00 	mov.w	fp, #0
 80085f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085f6:	f104 021a 	add.w	r2, r4, #26
 80085fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80085fc:	9306      	str	r3, [sp, #24]
 80085fe:	eba3 0309 	sub.w	r3, r3, r9
 8008602:	455b      	cmp	r3, fp
 8008604:	dc31      	bgt.n	800866a <_printf_float+0x36e>
 8008606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008608:	459a      	cmp	sl, r3
 800860a:	dc3a      	bgt.n	8008682 <_printf_float+0x386>
 800860c:	6823      	ldr	r3, [r4, #0]
 800860e:	07da      	lsls	r2, r3, #31
 8008610:	d437      	bmi.n	8008682 <_printf_float+0x386>
 8008612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008614:	ebaa 0903 	sub.w	r9, sl, r3
 8008618:	9b06      	ldr	r3, [sp, #24]
 800861a:	ebaa 0303 	sub.w	r3, sl, r3
 800861e:	4599      	cmp	r9, r3
 8008620:	bfa8      	it	ge
 8008622:	4699      	movge	r9, r3
 8008624:	f1b9 0f00 	cmp.w	r9, #0
 8008628:	dc33      	bgt.n	8008692 <_printf_float+0x396>
 800862a:	f04f 0800 	mov.w	r8, #0
 800862e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008632:	f104 0b1a 	add.w	fp, r4, #26
 8008636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008638:	ebaa 0303 	sub.w	r3, sl, r3
 800863c:	eba3 0309 	sub.w	r3, r3, r9
 8008640:	4543      	cmp	r3, r8
 8008642:	f77f af79 	ble.w	8008538 <_printf_float+0x23c>
 8008646:	2301      	movs	r3, #1
 8008648:	465a      	mov	r2, fp
 800864a:	4631      	mov	r1, r6
 800864c:	4628      	mov	r0, r5
 800864e:	47b8      	blx	r7
 8008650:	3001      	adds	r0, #1
 8008652:	f43f aeae 	beq.w	80083b2 <_printf_float+0xb6>
 8008656:	f108 0801 	add.w	r8, r8, #1
 800865a:	e7ec      	b.n	8008636 <_printf_float+0x33a>
 800865c:	4642      	mov	r2, r8
 800865e:	4631      	mov	r1, r6
 8008660:	4628      	mov	r0, r5
 8008662:	47b8      	blx	r7
 8008664:	3001      	adds	r0, #1
 8008666:	d1c2      	bne.n	80085ee <_printf_float+0x2f2>
 8008668:	e6a3      	b.n	80083b2 <_printf_float+0xb6>
 800866a:	2301      	movs	r3, #1
 800866c:	4631      	mov	r1, r6
 800866e:	4628      	mov	r0, r5
 8008670:	9206      	str	r2, [sp, #24]
 8008672:	47b8      	blx	r7
 8008674:	3001      	adds	r0, #1
 8008676:	f43f ae9c 	beq.w	80083b2 <_printf_float+0xb6>
 800867a:	9a06      	ldr	r2, [sp, #24]
 800867c:	f10b 0b01 	add.w	fp, fp, #1
 8008680:	e7bb      	b.n	80085fa <_printf_float+0x2fe>
 8008682:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008686:	4631      	mov	r1, r6
 8008688:	4628      	mov	r0, r5
 800868a:	47b8      	blx	r7
 800868c:	3001      	adds	r0, #1
 800868e:	d1c0      	bne.n	8008612 <_printf_float+0x316>
 8008690:	e68f      	b.n	80083b2 <_printf_float+0xb6>
 8008692:	9a06      	ldr	r2, [sp, #24]
 8008694:	464b      	mov	r3, r9
 8008696:	4442      	add	r2, r8
 8008698:	4631      	mov	r1, r6
 800869a:	4628      	mov	r0, r5
 800869c:	47b8      	blx	r7
 800869e:	3001      	adds	r0, #1
 80086a0:	d1c3      	bne.n	800862a <_printf_float+0x32e>
 80086a2:	e686      	b.n	80083b2 <_printf_float+0xb6>
 80086a4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80086a8:	f1ba 0f01 	cmp.w	sl, #1
 80086ac:	dc01      	bgt.n	80086b2 <_printf_float+0x3b6>
 80086ae:	07db      	lsls	r3, r3, #31
 80086b0:	d536      	bpl.n	8008720 <_printf_float+0x424>
 80086b2:	2301      	movs	r3, #1
 80086b4:	4642      	mov	r2, r8
 80086b6:	4631      	mov	r1, r6
 80086b8:	4628      	mov	r0, r5
 80086ba:	47b8      	blx	r7
 80086bc:	3001      	adds	r0, #1
 80086be:	f43f ae78 	beq.w	80083b2 <_printf_float+0xb6>
 80086c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086c6:	4631      	mov	r1, r6
 80086c8:	4628      	mov	r0, r5
 80086ca:	47b8      	blx	r7
 80086cc:	3001      	adds	r0, #1
 80086ce:	f43f ae70 	beq.w	80083b2 <_printf_float+0xb6>
 80086d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80086d6:	2200      	movs	r2, #0
 80086d8:	2300      	movs	r3, #0
 80086da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086de:	f7f8 f9fb 	bl	8000ad8 <__aeabi_dcmpeq>
 80086e2:	b9c0      	cbnz	r0, 8008716 <_printf_float+0x41a>
 80086e4:	4653      	mov	r3, sl
 80086e6:	f108 0201 	add.w	r2, r8, #1
 80086ea:	4631      	mov	r1, r6
 80086ec:	4628      	mov	r0, r5
 80086ee:	47b8      	blx	r7
 80086f0:	3001      	adds	r0, #1
 80086f2:	d10c      	bne.n	800870e <_printf_float+0x412>
 80086f4:	e65d      	b.n	80083b2 <_printf_float+0xb6>
 80086f6:	2301      	movs	r3, #1
 80086f8:	465a      	mov	r2, fp
 80086fa:	4631      	mov	r1, r6
 80086fc:	4628      	mov	r0, r5
 80086fe:	47b8      	blx	r7
 8008700:	3001      	adds	r0, #1
 8008702:	f43f ae56 	beq.w	80083b2 <_printf_float+0xb6>
 8008706:	f108 0801 	add.w	r8, r8, #1
 800870a:	45d0      	cmp	r8, sl
 800870c:	dbf3      	blt.n	80086f6 <_printf_float+0x3fa>
 800870e:	464b      	mov	r3, r9
 8008710:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008714:	e6df      	b.n	80084d6 <_printf_float+0x1da>
 8008716:	f04f 0800 	mov.w	r8, #0
 800871a:	f104 0b1a 	add.w	fp, r4, #26
 800871e:	e7f4      	b.n	800870a <_printf_float+0x40e>
 8008720:	2301      	movs	r3, #1
 8008722:	4642      	mov	r2, r8
 8008724:	e7e1      	b.n	80086ea <_printf_float+0x3ee>
 8008726:	2301      	movs	r3, #1
 8008728:	464a      	mov	r2, r9
 800872a:	4631      	mov	r1, r6
 800872c:	4628      	mov	r0, r5
 800872e:	47b8      	blx	r7
 8008730:	3001      	adds	r0, #1
 8008732:	f43f ae3e 	beq.w	80083b2 <_printf_float+0xb6>
 8008736:	f108 0801 	add.w	r8, r8, #1
 800873a:	68e3      	ldr	r3, [r4, #12]
 800873c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800873e:	1a5b      	subs	r3, r3, r1
 8008740:	4543      	cmp	r3, r8
 8008742:	dcf0      	bgt.n	8008726 <_printf_float+0x42a>
 8008744:	e6fc      	b.n	8008540 <_printf_float+0x244>
 8008746:	f04f 0800 	mov.w	r8, #0
 800874a:	f104 0919 	add.w	r9, r4, #25
 800874e:	e7f4      	b.n	800873a <_printf_float+0x43e>

08008750 <_printf_common>:
 8008750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008754:	4616      	mov	r6, r2
 8008756:	4698      	mov	r8, r3
 8008758:	688a      	ldr	r2, [r1, #8]
 800875a:	690b      	ldr	r3, [r1, #16]
 800875c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008760:	4293      	cmp	r3, r2
 8008762:	bfb8      	it	lt
 8008764:	4613      	movlt	r3, r2
 8008766:	6033      	str	r3, [r6, #0]
 8008768:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800876c:	4607      	mov	r7, r0
 800876e:	460c      	mov	r4, r1
 8008770:	b10a      	cbz	r2, 8008776 <_printf_common+0x26>
 8008772:	3301      	adds	r3, #1
 8008774:	6033      	str	r3, [r6, #0]
 8008776:	6823      	ldr	r3, [r4, #0]
 8008778:	0699      	lsls	r1, r3, #26
 800877a:	bf42      	ittt	mi
 800877c:	6833      	ldrmi	r3, [r6, #0]
 800877e:	3302      	addmi	r3, #2
 8008780:	6033      	strmi	r3, [r6, #0]
 8008782:	6825      	ldr	r5, [r4, #0]
 8008784:	f015 0506 	ands.w	r5, r5, #6
 8008788:	d106      	bne.n	8008798 <_printf_common+0x48>
 800878a:	f104 0a19 	add.w	sl, r4, #25
 800878e:	68e3      	ldr	r3, [r4, #12]
 8008790:	6832      	ldr	r2, [r6, #0]
 8008792:	1a9b      	subs	r3, r3, r2
 8008794:	42ab      	cmp	r3, r5
 8008796:	dc26      	bgt.n	80087e6 <_printf_common+0x96>
 8008798:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800879c:	6822      	ldr	r2, [r4, #0]
 800879e:	3b00      	subs	r3, #0
 80087a0:	bf18      	it	ne
 80087a2:	2301      	movne	r3, #1
 80087a4:	0692      	lsls	r2, r2, #26
 80087a6:	d42b      	bmi.n	8008800 <_printf_common+0xb0>
 80087a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087ac:	4641      	mov	r1, r8
 80087ae:	4638      	mov	r0, r7
 80087b0:	47c8      	blx	r9
 80087b2:	3001      	adds	r0, #1
 80087b4:	d01e      	beq.n	80087f4 <_printf_common+0xa4>
 80087b6:	6823      	ldr	r3, [r4, #0]
 80087b8:	6922      	ldr	r2, [r4, #16]
 80087ba:	f003 0306 	and.w	r3, r3, #6
 80087be:	2b04      	cmp	r3, #4
 80087c0:	bf02      	ittt	eq
 80087c2:	68e5      	ldreq	r5, [r4, #12]
 80087c4:	6833      	ldreq	r3, [r6, #0]
 80087c6:	1aed      	subeq	r5, r5, r3
 80087c8:	68a3      	ldr	r3, [r4, #8]
 80087ca:	bf0c      	ite	eq
 80087cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087d0:	2500      	movne	r5, #0
 80087d2:	4293      	cmp	r3, r2
 80087d4:	bfc4      	itt	gt
 80087d6:	1a9b      	subgt	r3, r3, r2
 80087d8:	18ed      	addgt	r5, r5, r3
 80087da:	2600      	movs	r6, #0
 80087dc:	341a      	adds	r4, #26
 80087de:	42b5      	cmp	r5, r6
 80087e0:	d11a      	bne.n	8008818 <_printf_common+0xc8>
 80087e2:	2000      	movs	r0, #0
 80087e4:	e008      	b.n	80087f8 <_printf_common+0xa8>
 80087e6:	2301      	movs	r3, #1
 80087e8:	4652      	mov	r2, sl
 80087ea:	4641      	mov	r1, r8
 80087ec:	4638      	mov	r0, r7
 80087ee:	47c8      	blx	r9
 80087f0:	3001      	adds	r0, #1
 80087f2:	d103      	bne.n	80087fc <_printf_common+0xac>
 80087f4:	f04f 30ff 	mov.w	r0, #4294967295
 80087f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087fc:	3501      	adds	r5, #1
 80087fe:	e7c6      	b.n	800878e <_printf_common+0x3e>
 8008800:	18e1      	adds	r1, r4, r3
 8008802:	1c5a      	adds	r2, r3, #1
 8008804:	2030      	movs	r0, #48	@ 0x30
 8008806:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800880a:	4422      	add	r2, r4
 800880c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008810:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008814:	3302      	adds	r3, #2
 8008816:	e7c7      	b.n	80087a8 <_printf_common+0x58>
 8008818:	2301      	movs	r3, #1
 800881a:	4622      	mov	r2, r4
 800881c:	4641      	mov	r1, r8
 800881e:	4638      	mov	r0, r7
 8008820:	47c8      	blx	r9
 8008822:	3001      	adds	r0, #1
 8008824:	d0e6      	beq.n	80087f4 <_printf_common+0xa4>
 8008826:	3601      	adds	r6, #1
 8008828:	e7d9      	b.n	80087de <_printf_common+0x8e>
	...

0800882c <_printf_i>:
 800882c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008830:	7e0f      	ldrb	r7, [r1, #24]
 8008832:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008834:	2f78      	cmp	r7, #120	@ 0x78
 8008836:	4691      	mov	r9, r2
 8008838:	4680      	mov	r8, r0
 800883a:	460c      	mov	r4, r1
 800883c:	469a      	mov	sl, r3
 800883e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008842:	d807      	bhi.n	8008854 <_printf_i+0x28>
 8008844:	2f62      	cmp	r7, #98	@ 0x62
 8008846:	d80a      	bhi.n	800885e <_printf_i+0x32>
 8008848:	2f00      	cmp	r7, #0
 800884a:	f000 80d2 	beq.w	80089f2 <_printf_i+0x1c6>
 800884e:	2f58      	cmp	r7, #88	@ 0x58
 8008850:	f000 80b9 	beq.w	80089c6 <_printf_i+0x19a>
 8008854:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008858:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800885c:	e03a      	b.n	80088d4 <_printf_i+0xa8>
 800885e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008862:	2b15      	cmp	r3, #21
 8008864:	d8f6      	bhi.n	8008854 <_printf_i+0x28>
 8008866:	a101      	add	r1, pc, #4	@ (adr r1, 800886c <_printf_i+0x40>)
 8008868:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800886c:	080088c5 	.word	0x080088c5
 8008870:	080088d9 	.word	0x080088d9
 8008874:	08008855 	.word	0x08008855
 8008878:	08008855 	.word	0x08008855
 800887c:	08008855 	.word	0x08008855
 8008880:	08008855 	.word	0x08008855
 8008884:	080088d9 	.word	0x080088d9
 8008888:	08008855 	.word	0x08008855
 800888c:	08008855 	.word	0x08008855
 8008890:	08008855 	.word	0x08008855
 8008894:	08008855 	.word	0x08008855
 8008898:	080089d9 	.word	0x080089d9
 800889c:	08008903 	.word	0x08008903
 80088a0:	08008993 	.word	0x08008993
 80088a4:	08008855 	.word	0x08008855
 80088a8:	08008855 	.word	0x08008855
 80088ac:	080089fb 	.word	0x080089fb
 80088b0:	08008855 	.word	0x08008855
 80088b4:	08008903 	.word	0x08008903
 80088b8:	08008855 	.word	0x08008855
 80088bc:	08008855 	.word	0x08008855
 80088c0:	0800899b 	.word	0x0800899b
 80088c4:	6833      	ldr	r3, [r6, #0]
 80088c6:	1d1a      	adds	r2, r3, #4
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	6032      	str	r2, [r6, #0]
 80088cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80088d4:	2301      	movs	r3, #1
 80088d6:	e09d      	b.n	8008a14 <_printf_i+0x1e8>
 80088d8:	6833      	ldr	r3, [r6, #0]
 80088da:	6820      	ldr	r0, [r4, #0]
 80088dc:	1d19      	adds	r1, r3, #4
 80088de:	6031      	str	r1, [r6, #0]
 80088e0:	0606      	lsls	r6, r0, #24
 80088e2:	d501      	bpl.n	80088e8 <_printf_i+0xbc>
 80088e4:	681d      	ldr	r5, [r3, #0]
 80088e6:	e003      	b.n	80088f0 <_printf_i+0xc4>
 80088e8:	0645      	lsls	r5, r0, #25
 80088ea:	d5fb      	bpl.n	80088e4 <_printf_i+0xb8>
 80088ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80088f0:	2d00      	cmp	r5, #0
 80088f2:	da03      	bge.n	80088fc <_printf_i+0xd0>
 80088f4:	232d      	movs	r3, #45	@ 0x2d
 80088f6:	426d      	negs	r5, r5
 80088f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088fc:	4859      	ldr	r0, [pc, #356]	@ (8008a64 <_printf_i+0x238>)
 80088fe:	230a      	movs	r3, #10
 8008900:	e011      	b.n	8008926 <_printf_i+0xfa>
 8008902:	6821      	ldr	r1, [r4, #0]
 8008904:	6833      	ldr	r3, [r6, #0]
 8008906:	0608      	lsls	r0, r1, #24
 8008908:	f853 5b04 	ldr.w	r5, [r3], #4
 800890c:	d402      	bmi.n	8008914 <_printf_i+0xe8>
 800890e:	0649      	lsls	r1, r1, #25
 8008910:	bf48      	it	mi
 8008912:	b2ad      	uxthmi	r5, r5
 8008914:	2f6f      	cmp	r7, #111	@ 0x6f
 8008916:	4853      	ldr	r0, [pc, #332]	@ (8008a64 <_printf_i+0x238>)
 8008918:	6033      	str	r3, [r6, #0]
 800891a:	bf14      	ite	ne
 800891c:	230a      	movne	r3, #10
 800891e:	2308      	moveq	r3, #8
 8008920:	2100      	movs	r1, #0
 8008922:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008926:	6866      	ldr	r6, [r4, #4]
 8008928:	60a6      	str	r6, [r4, #8]
 800892a:	2e00      	cmp	r6, #0
 800892c:	bfa2      	ittt	ge
 800892e:	6821      	ldrge	r1, [r4, #0]
 8008930:	f021 0104 	bicge.w	r1, r1, #4
 8008934:	6021      	strge	r1, [r4, #0]
 8008936:	b90d      	cbnz	r5, 800893c <_printf_i+0x110>
 8008938:	2e00      	cmp	r6, #0
 800893a:	d04b      	beq.n	80089d4 <_printf_i+0x1a8>
 800893c:	4616      	mov	r6, r2
 800893e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008942:	fb03 5711 	mls	r7, r3, r1, r5
 8008946:	5dc7      	ldrb	r7, [r0, r7]
 8008948:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800894c:	462f      	mov	r7, r5
 800894e:	42bb      	cmp	r3, r7
 8008950:	460d      	mov	r5, r1
 8008952:	d9f4      	bls.n	800893e <_printf_i+0x112>
 8008954:	2b08      	cmp	r3, #8
 8008956:	d10b      	bne.n	8008970 <_printf_i+0x144>
 8008958:	6823      	ldr	r3, [r4, #0]
 800895a:	07df      	lsls	r7, r3, #31
 800895c:	d508      	bpl.n	8008970 <_printf_i+0x144>
 800895e:	6923      	ldr	r3, [r4, #16]
 8008960:	6861      	ldr	r1, [r4, #4]
 8008962:	4299      	cmp	r1, r3
 8008964:	bfde      	ittt	le
 8008966:	2330      	movle	r3, #48	@ 0x30
 8008968:	f806 3c01 	strble.w	r3, [r6, #-1]
 800896c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008970:	1b92      	subs	r2, r2, r6
 8008972:	6122      	str	r2, [r4, #16]
 8008974:	f8cd a000 	str.w	sl, [sp]
 8008978:	464b      	mov	r3, r9
 800897a:	aa03      	add	r2, sp, #12
 800897c:	4621      	mov	r1, r4
 800897e:	4640      	mov	r0, r8
 8008980:	f7ff fee6 	bl	8008750 <_printf_common>
 8008984:	3001      	adds	r0, #1
 8008986:	d14a      	bne.n	8008a1e <_printf_i+0x1f2>
 8008988:	f04f 30ff 	mov.w	r0, #4294967295
 800898c:	b004      	add	sp, #16
 800898e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008992:	6823      	ldr	r3, [r4, #0]
 8008994:	f043 0320 	orr.w	r3, r3, #32
 8008998:	6023      	str	r3, [r4, #0]
 800899a:	4833      	ldr	r0, [pc, #204]	@ (8008a68 <_printf_i+0x23c>)
 800899c:	2778      	movs	r7, #120	@ 0x78
 800899e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089a2:	6823      	ldr	r3, [r4, #0]
 80089a4:	6831      	ldr	r1, [r6, #0]
 80089a6:	061f      	lsls	r7, r3, #24
 80089a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80089ac:	d402      	bmi.n	80089b4 <_printf_i+0x188>
 80089ae:	065f      	lsls	r7, r3, #25
 80089b0:	bf48      	it	mi
 80089b2:	b2ad      	uxthmi	r5, r5
 80089b4:	6031      	str	r1, [r6, #0]
 80089b6:	07d9      	lsls	r1, r3, #31
 80089b8:	bf44      	itt	mi
 80089ba:	f043 0320 	orrmi.w	r3, r3, #32
 80089be:	6023      	strmi	r3, [r4, #0]
 80089c0:	b11d      	cbz	r5, 80089ca <_printf_i+0x19e>
 80089c2:	2310      	movs	r3, #16
 80089c4:	e7ac      	b.n	8008920 <_printf_i+0xf4>
 80089c6:	4827      	ldr	r0, [pc, #156]	@ (8008a64 <_printf_i+0x238>)
 80089c8:	e7e9      	b.n	800899e <_printf_i+0x172>
 80089ca:	6823      	ldr	r3, [r4, #0]
 80089cc:	f023 0320 	bic.w	r3, r3, #32
 80089d0:	6023      	str	r3, [r4, #0]
 80089d2:	e7f6      	b.n	80089c2 <_printf_i+0x196>
 80089d4:	4616      	mov	r6, r2
 80089d6:	e7bd      	b.n	8008954 <_printf_i+0x128>
 80089d8:	6833      	ldr	r3, [r6, #0]
 80089da:	6825      	ldr	r5, [r4, #0]
 80089dc:	6961      	ldr	r1, [r4, #20]
 80089de:	1d18      	adds	r0, r3, #4
 80089e0:	6030      	str	r0, [r6, #0]
 80089e2:	062e      	lsls	r6, r5, #24
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	d501      	bpl.n	80089ec <_printf_i+0x1c0>
 80089e8:	6019      	str	r1, [r3, #0]
 80089ea:	e002      	b.n	80089f2 <_printf_i+0x1c6>
 80089ec:	0668      	lsls	r0, r5, #25
 80089ee:	d5fb      	bpl.n	80089e8 <_printf_i+0x1bc>
 80089f0:	8019      	strh	r1, [r3, #0]
 80089f2:	2300      	movs	r3, #0
 80089f4:	6123      	str	r3, [r4, #16]
 80089f6:	4616      	mov	r6, r2
 80089f8:	e7bc      	b.n	8008974 <_printf_i+0x148>
 80089fa:	6833      	ldr	r3, [r6, #0]
 80089fc:	1d1a      	adds	r2, r3, #4
 80089fe:	6032      	str	r2, [r6, #0]
 8008a00:	681e      	ldr	r6, [r3, #0]
 8008a02:	6862      	ldr	r2, [r4, #4]
 8008a04:	2100      	movs	r1, #0
 8008a06:	4630      	mov	r0, r6
 8008a08:	f7f7 fbea 	bl	80001e0 <memchr>
 8008a0c:	b108      	cbz	r0, 8008a12 <_printf_i+0x1e6>
 8008a0e:	1b80      	subs	r0, r0, r6
 8008a10:	6060      	str	r0, [r4, #4]
 8008a12:	6863      	ldr	r3, [r4, #4]
 8008a14:	6123      	str	r3, [r4, #16]
 8008a16:	2300      	movs	r3, #0
 8008a18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a1c:	e7aa      	b.n	8008974 <_printf_i+0x148>
 8008a1e:	6923      	ldr	r3, [r4, #16]
 8008a20:	4632      	mov	r2, r6
 8008a22:	4649      	mov	r1, r9
 8008a24:	4640      	mov	r0, r8
 8008a26:	47d0      	blx	sl
 8008a28:	3001      	adds	r0, #1
 8008a2a:	d0ad      	beq.n	8008988 <_printf_i+0x15c>
 8008a2c:	6823      	ldr	r3, [r4, #0]
 8008a2e:	079b      	lsls	r3, r3, #30
 8008a30:	d413      	bmi.n	8008a5a <_printf_i+0x22e>
 8008a32:	68e0      	ldr	r0, [r4, #12]
 8008a34:	9b03      	ldr	r3, [sp, #12]
 8008a36:	4298      	cmp	r0, r3
 8008a38:	bfb8      	it	lt
 8008a3a:	4618      	movlt	r0, r3
 8008a3c:	e7a6      	b.n	800898c <_printf_i+0x160>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	4632      	mov	r2, r6
 8008a42:	4649      	mov	r1, r9
 8008a44:	4640      	mov	r0, r8
 8008a46:	47d0      	blx	sl
 8008a48:	3001      	adds	r0, #1
 8008a4a:	d09d      	beq.n	8008988 <_printf_i+0x15c>
 8008a4c:	3501      	adds	r5, #1
 8008a4e:	68e3      	ldr	r3, [r4, #12]
 8008a50:	9903      	ldr	r1, [sp, #12]
 8008a52:	1a5b      	subs	r3, r3, r1
 8008a54:	42ab      	cmp	r3, r5
 8008a56:	dcf2      	bgt.n	8008a3e <_printf_i+0x212>
 8008a58:	e7eb      	b.n	8008a32 <_printf_i+0x206>
 8008a5a:	2500      	movs	r5, #0
 8008a5c:	f104 0619 	add.w	r6, r4, #25
 8008a60:	e7f5      	b.n	8008a4e <_printf_i+0x222>
 8008a62:	bf00      	nop
 8008a64:	0800d1fc 	.word	0x0800d1fc
 8008a68:	0800d20d 	.word	0x0800d20d

08008a6c <_scanf_float>:
 8008a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a70:	b087      	sub	sp, #28
 8008a72:	4617      	mov	r7, r2
 8008a74:	9303      	str	r3, [sp, #12]
 8008a76:	688b      	ldr	r3, [r1, #8]
 8008a78:	1e5a      	subs	r2, r3, #1
 8008a7a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008a7e:	bf81      	itttt	hi
 8008a80:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008a84:	eb03 0b05 	addhi.w	fp, r3, r5
 8008a88:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008a8c:	608b      	strhi	r3, [r1, #8]
 8008a8e:	680b      	ldr	r3, [r1, #0]
 8008a90:	460a      	mov	r2, r1
 8008a92:	f04f 0500 	mov.w	r5, #0
 8008a96:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008a9a:	f842 3b1c 	str.w	r3, [r2], #28
 8008a9e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008aa2:	4680      	mov	r8, r0
 8008aa4:	460c      	mov	r4, r1
 8008aa6:	bf98      	it	ls
 8008aa8:	f04f 0b00 	movls.w	fp, #0
 8008aac:	9201      	str	r2, [sp, #4]
 8008aae:	4616      	mov	r6, r2
 8008ab0:	46aa      	mov	sl, r5
 8008ab2:	46a9      	mov	r9, r5
 8008ab4:	9502      	str	r5, [sp, #8]
 8008ab6:	68a2      	ldr	r2, [r4, #8]
 8008ab8:	b152      	cbz	r2, 8008ad0 <_scanf_float+0x64>
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	2b4e      	cmp	r3, #78	@ 0x4e
 8008ac0:	d864      	bhi.n	8008b8c <_scanf_float+0x120>
 8008ac2:	2b40      	cmp	r3, #64	@ 0x40
 8008ac4:	d83c      	bhi.n	8008b40 <_scanf_float+0xd4>
 8008ac6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008aca:	b2c8      	uxtb	r0, r1
 8008acc:	280e      	cmp	r0, #14
 8008ace:	d93a      	bls.n	8008b46 <_scanf_float+0xda>
 8008ad0:	f1b9 0f00 	cmp.w	r9, #0
 8008ad4:	d003      	beq.n	8008ade <_scanf_float+0x72>
 8008ad6:	6823      	ldr	r3, [r4, #0]
 8008ad8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008adc:	6023      	str	r3, [r4, #0]
 8008ade:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ae2:	f1ba 0f01 	cmp.w	sl, #1
 8008ae6:	f200 8117 	bhi.w	8008d18 <_scanf_float+0x2ac>
 8008aea:	9b01      	ldr	r3, [sp, #4]
 8008aec:	429e      	cmp	r6, r3
 8008aee:	f200 8108 	bhi.w	8008d02 <_scanf_float+0x296>
 8008af2:	2001      	movs	r0, #1
 8008af4:	b007      	add	sp, #28
 8008af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008afa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008afe:	2a0d      	cmp	r2, #13
 8008b00:	d8e6      	bhi.n	8008ad0 <_scanf_float+0x64>
 8008b02:	a101      	add	r1, pc, #4	@ (adr r1, 8008b08 <_scanf_float+0x9c>)
 8008b04:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008b08:	08008c4f 	.word	0x08008c4f
 8008b0c:	08008ad1 	.word	0x08008ad1
 8008b10:	08008ad1 	.word	0x08008ad1
 8008b14:	08008ad1 	.word	0x08008ad1
 8008b18:	08008caf 	.word	0x08008caf
 8008b1c:	08008c87 	.word	0x08008c87
 8008b20:	08008ad1 	.word	0x08008ad1
 8008b24:	08008ad1 	.word	0x08008ad1
 8008b28:	08008c5d 	.word	0x08008c5d
 8008b2c:	08008ad1 	.word	0x08008ad1
 8008b30:	08008ad1 	.word	0x08008ad1
 8008b34:	08008ad1 	.word	0x08008ad1
 8008b38:	08008ad1 	.word	0x08008ad1
 8008b3c:	08008c15 	.word	0x08008c15
 8008b40:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008b44:	e7db      	b.n	8008afe <_scanf_float+0x92>
 8008b46:	290e      	cmp	r1, #14
 8008b48:	d8c2      	bhi.n	8008ad0 <_scanf_float+0x64>
 8008b4a:	a001      	add	r0, pc, #4	@ (adr r0, 8008b50 <_scanf_float+0xe4>)
 8008b4c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008b50:	08008c05 	.word	0x08008c05
 8008b54:	08008ad1 	.word	0x08008ad1
 8008b58:	08008c05 	.word	0x08008c05
 8008b5c:	08008c9b 	.word	0x08008c9b
 8008b60:	08008ad1 	.word	0x08008ad1
 8008b64:	08008bad 	.word	0x08008bad
 8008b68:	08008beb 	.word	0x08008beb
 8008b6c:	08008beb 	.word	0x08008beb
 8008b70:	08008beb 	.word	0x08008beb
 8008b74:	08008beb 	.word	0x08008beb
 8008b78:	08008beb 	.word	0x08008beb
 8008b7c:	08008beb 	.word	0x08008beb
 8008b80:	08008beb 	.word	0x08008beb
 8008b84:	08008beb 	.word	0x08008beb
 8008b88:	08008beb 	.word	0x08008beb
 8008b8c:	2b6e      	cmp	r3, #110	@ 0x6e
 8008b8e:	d809      	bhi.n	8008ba4 <_scanf_float+0x138>
 8008b90:	2b60      	cmp	r3, #96	@ 0x60
 8008b92:	d8b2      	bhi.n	8008afa <_scanf_float+0x8e>
 8008b94:	2b54      	cmp	r3, #84	@ 0x54
 8008b96:	d07b      	beq.n	8008c90 <_scanf_float+0x224>
 8008b98:	2b59      	cmp	r3, #89	@ 0x59
 8008b9a:	d199      	bne.n	8008ad0 <_scanf_float+0x64>
 8008b9c:	2d07      	cmp	r5, #7
 8008b9e:	d197      	bne.n	8008ad0 <_scanf_float+0x64>
 8008ba0:	2508      	movs	r5, #8
 8008ba2:	e02c      	b.n	8008bfe <_scanf_float+0x192>
 8008ba4:	2b74      	cmp	r3, #116	@ 0x74
 8008ba6:	d073      	beq.n	8008c90 <_scanf_float+0x224>
 8008ba8:	2b79      	cmp	r3, #121	@ 0x79
 8008baa:	e7f6      	b.n	8008b9a <_scanf_float+0x12e>
 8008bac:	6821      	ldr	r1, [r4, #0]
 8008bae:	05c8      	lsls	r0, r1, #23
 8008bb0:	d51b      	bpl.n	8008bea <_scanf_float+0x17e>
 8008bb2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008bb6:	6021      	str	r1, [r4, #0]
 8008bb8:	f109 0901 	add.w	r9, r9, #1
 8008bbc:	f1bb 0f00 	cmp.w	fp, #0
 8008bc0:	d003      	beq.n	8008bca <_scanf_float+0x15e>
 8008bc2:	3201      	adds	r2, #1
 8008bc4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008bc8:	60a2      	str	r2, [r4, #8]
 8008bca:	68a3      	ldr	r3, [r4, #8]
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	60a3      	str	r3, [r4, #8]
 8008bd0:	6923      	ldr	r3, [r4, #16]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	6123      	str	r3, [r4, #16]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	607b      	str	r3, [r7, #4]
 8008bde:	f340 8087 	ble.w	8008cf0 <_scanf_float+0x284>
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	3301      	adds	r3, #1
 8008be6:	603b      	str	r3, [r7, #0]
 8008be8:	e765      	b.n	8008ab6 <_scanf_float+0x4a>
 8008bea:	eb1a 0105 	adds.w	r1, sl, r5
 8008bee:	f47f af6f 	bne.w	8008ad0 <_scanf_float+0x64>
 8008bf2:	6822      	ldr	r2, [r4, #0]
 8008bf4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008bf8:	6022      	str	r2, [r4, #0]
 8008bfa:	460d      	mov	r5, r1
 8008bfc:	468a      	mov	sl, r1
 8008bfe:	f806 3b01 	strb.w	r3, [r6], #1
 8008c02:	e7e2      	b.n	8008bca <_scanf_float+0x15e>
 8008c04:	6822      	ldr	r2, [r4, #0]
 8008c06:	0610      	lsls	r0, r2, #24
 8008c08:	f57f af62 	bpl.w	8008ad0 <_scanf_float+0x64>
 8008c0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c10:	6022      	str	r2, [r4, #0]
 8008c12:	e7f4      	b.n	8008bfe <_scanf_float+0x192>
 8008c14:	f1ba 0f00 	cmp.w	sl, #0
 8008c18:	d10e      	bne.n	8008c38 <_scanf_float+0x1cc>
 8008c1a:	f1b9 0f00 	cmp.w	r9, #0
 8008c1e:	d10e      	bne.n	8008c3e <_scanf_float+0x1d2>
 8008c20:	6822      	ldr	r2, [r4, #0]
 8008c22:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008c26:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008c2a:	d108      	bne.n	8008c3e <_scanf_float+0x1d2>
 8008c2c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008c30:	6022      	str	r2, [r4, #0]
 8008c32:	f04f 0a01 	mov.w	sl, #1
 8008c36:	e7e2      	b.n	8008bfe <_scanf_float+0x192>
 8008c38:	f1ba 0f02 	cmp.w	sl, #2
 8008c3c:	d055      	beq.n	8008cea <_scanf_float+0x27e>
 8008c3e:	2d01      	cmp	r5, #1
 8008c40:	d002      	beq.n	8008c48 <_scanf_float+0x1dc>
 8008c42:	2d04      	cmp	r5, #4
 8008c44:	f47f af44 	bne.w	8008ad0 <_scanf_float+0x64>
 8008c48:	3501      	adds	r5, #1
 8008c4a:	b2ed      	uxtb	r5, r5
 8008c4c:	e7d7      	b.n	8008bfe <_scanf_float+0x192>
 8008c4e:	f1ba 0f01 	cmp.w	sl, #1
 8008c52:	f47f af3d 	bne.w	8008ad0 <_scanf_float+0x64>
 8008c56:	f04f 0a02 	mov.w	sl, #2
 8008c5a:	e7d0      	b.n	8008bfe <_scanf_float+0x192>
 8008c5c:	b97d      	cbnz	r5, 8008c7e <_scanf_float+0x212>
 8008c5e:	f1b9 0f00 	cmp.w	r9, #0
 8008c62:	f47f af38 	bne.w	8008ad6 <_scanf_float+0x6a>
 8008c66:	6822      	ldr	r2, [r4, #0]
 8008c68:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008c6c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008c70:	f040 8108 	bne.w	8008e84 <_scanf_float+0x418>
 8008c74:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008c78:	6022      	str	r2, [r4, #0]
 8008c7a:	2501      	movs	r5, #1
 8008c7c:	e7bf      	b.n	8008bfe <_scanf_float+0x192>
 8008c7e:	2d03      	cmp	r5, #3
 8008c80:	d0e2      	beq.n	8008c48 <_scanf_float+0x1dc>
 8008c82:	2d05      	cmp	r5, #5
 8008c84:	e7de      	b.n	8008c44 <_scanf_float+0x1d8>
 8008c86:	2d02      	cmp	r5, #2
 8008c88:	f47f af22 	bne.w	8008ad0 <_scanf_float+0x64>
 8008c8c:	2503      	movs	r5, #3
 8008c8e:	e7b6      	b.n	8008bfe <_scanf_float+0x192>
 8008c90:	2d06      	cmp	r5, #6
 8008c92:	f47f af1d 	bne.w	8008ad0 <_scanf_float+0x64>
 8008c96:	2507      	movs	r5, #7
 8008c98:	e7b1      	b.n	8008bfe <_scanf_float+0x192>
 8008c9a:	6822      	ldr	r2, [r4, #0]
 8008c9c:	0591      	lsls	r1, r2, #22
 8008c9e:	f57f af17 	bpl.w	8008ad0 <_scanf_float+0x64>
 8008ca2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008ca6:	6022      	str	r2, [r4, #0]
 8008ca8:	f8cd 9008 	str.w	r9, [sp, #8]
 8008cac:	e7a7      	b.n	8008bfe <_scanf_float+0x192>
 8008cae:	6822      	ldr	r2, [r4, #0]
 8008cb0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008cb4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008cb8:	d006      	beq.n	8008cc8 <_scanf_float+0x25c>
 8008cba:	0550      	lsls	r0, r2, #21
 8008cbc:	f57f af08 	bpl.w	8008ad0 <_scanf_float+0x64>
 8008cc0:	f1b9 0f00 	cmp.w	r9, #0
 8008cc4:	f000 80de 	beq.w	8008e84 <_scanf_float+0x418>
 8008cc8:	0591      	lsls	r1, r2, #22
 8008cca:	bf58      	it	pl
 8008ccc:	9902      	ldrpl	r1, [sp, #8]
 8008cce:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008cd2:	bf58      	it	pl
 8008cd4:	eba9 0101 	subpl.w	r1, r9, r1
 8008cd8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008cdc:	bf58      	it	pl
 8008cde:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008ce2:	6022      	str	r2, [r4, #0]
 8008ce4:	f04f 0900 	mov.w	r9, #0
 8008ce8:	e789      	b.n	8008bfe <_scanf_float+0x192>
 8008cea:	f04f 0a03 	mov.w	sl, #3
 8008cee:	e786      	b.n	8008bfe <_scanf_float+0x192>
 8008cf0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008cf4:	4639      	mov	r1, r7
 8008cf6:	4640      	mov	r0, r8
 8008cf8:	4798      	blx	r3
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	f43f aedb 	beq.w	8008ab6 <_scanf_float+0x4a>
 8008d00:	e6e6      	b.n	8008ad0 <_scanf_float+0x64>
 8008d02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d0a:	463a      	mov	r2, r7
 8008d0c:	4640      	mov	r0, r8
 8008d0e:	4798      	blx	r3
 8008d10:	6923      	ldr	r3, [r4, #16]
 8008d12:	3b01      	subs	r3, #1
 8008d14:	6123      	str	r3, [r4, #16]
 8008d16:	e6e8      	b.n	8008aea <_scanf_float+0x7e>
 8008d18:	1e6b      	subs	r3, r5, #1
 8008d1a:	2b06      	cmp	r3, #6
 8008d1c:	d824      	bhi.n	8008d68 <_scanf_float+0x2fc>
 8008d1e:	2d02      	cmp	r5, #2
 8008d20:	d836      	bhi.n	8008d90 <_scanf_float+0x324>
 8008d22:	9b01      	ldr	r3, [sp, #4]
 8008d24:	429e      	cmp	r6, r3
 8008d26:	f67f aee4 	bls.w	8008af2 <_scanf_float+0x86>
 8008d2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d32:	463a      	mov	r2, r7
 8008d34:	4640      	mov	r0, r8
 8008d36:	4798      	blx	r3
 8008d38:	6923      	ldr	r3, [r4, #16]
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	6123      	str	r3, [r4, #16]
 8008d3e:	e7f0      	b.n	8008d22 <_scanf_float+0x2b6>
 8008d40:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d44:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008d48:	463a      	mov	r2, r7
 8008d4a:	4640      	mov	r0, r8
 8008d4c:	4798      	blx	r3
 8008d4e:	6923      	ldr	r3, [r4, #16]
 8008d50:	3b01      	subs	r3, #1
 8008d52:	6123      	str	r3, [r4, #16]
 8008d54:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d58:	fa5f fa8a 	uxtb.w	sl, sl
 8008d5c:	f1ba 0f02 	cmp.w	sl, #2
 8008d60:	d1ee      	bne.n	8008d40 <_scanf_float+0x2d4>
 8008d62:	3d03      	subs	r5, #3
 8008d64:	b2ed      	uxtb	r5, r5
 8008d66:	1b76      	subs	r6, r6, r5
 8008d68:	6823      	ldr	r3, [r4, #0]
 8008d6a:	05da      	lsls	r2, r3, #23
 8008d6c:	d530      	bpl.n	8008dd0 <_scanf_float+0x364>
 8008d6e:	055b      	lsls	r3, r3, #21
 8008d70:	d511      	bpl.n	8008d96 <_scanf_float+0x32a>
 8008d72:	9b01      	ldr	r3, [sp, #4]
 8008d74:	429e      	cmp	r6, r3
 8008d76:	f67f aebc 	bls.w	8008af2 <_scanf_float+0x86>
 8008d7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d82:	463a      	mov	r2, r7
 8008d84:	4640      	mov	r0, r8
 8008d86:	4798      	blx	r3
 8008d88:	6923      	ldr	r3, [r4, #16]
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	6123      	str	r3, [r4, #16]
 8008d8e:	e7f0      	b.n	8008d72 <_scanf_float+0x306>
 8008d90:	46aa      	mov	sl, r5
 8008d92:	46b3      	mov	fp, r6
 8008d94:	e7de      	b.n	8008d54 <_scanf_float+0x2e8>
 8008d96:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008d9a:	6923      	ldr	r3, [r4, #16]
 8008d9c:	2965      	cmp	r1, #101	@ 0x65
 8008d9e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008da2:	f106 35ff 	add.w	r5, r6, #4294967295
 8008da6:	6123      	str	r3, [r4, #16]
 8008da8:	d00c      	beq.n	8008dc4 <_scanf_float+0x358>
 8008daa:	2945      	cmp	r1, #69	@ 0x45
 8008dac:	d00a      	beq.n	8008dc4 <_scanf_float+0x358>
 8008dae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008db2:	463a      	mov	r2, r7
 8008db4:	4640      	mov	r0, r8
 8008db6:	4798      	blx	r3
 8008db8:	6923      	ldr	r3, [r4, #16]
 8008dba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	1eb5      	subs	r5, r6, #2
 8008dc2:	6123      	str	r3, [r4, #16]
 8008dc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008dc8:	463a      	mov	r2, r7
 8008dca:	4640      	mov	r0, r8
 8008dcc:	4798      	blx	r3
 8008dce:	462e      	mov	r6, r5
 8008dd0:	6822      	ldr	r2, [r4, #0]
 8008dd2:	f012 0210 	ands.w	r2, r2, #16
 8008dd6:	d001      	beq.n	8008ddc <_scanf_float+0x370>
 8008dd8:	2000      	movs	r0, #0
 8008dda:	e68b      	b.n	8008af4 <_scanf_float+0x88>
 8008ddc:	7032      	strb	r2, [r6, #0]
 8008dde:	6823      	ldr	r3, [r4, #0]
 8008de0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008de4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008de8:	d11c      	bne.n	8008e24 <_scanf_float+0x3b8>
 8008dea:	9b02      	ldr	r3, [sp, #8]
 8008dec:	454b      	cmp	r3, r9
 8008dee:	eba3 0209 	sub.w	r2, r3, r9
 8008df2:	d123      	bne.n	8008e3c <_scanf_float+0x3d0>
 8008df4:	9901      	ldr	r1, [sp, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	4640      	mov	r0, r8
 8008dfa:	f002 fcd9 	bl	800b7b0 <_strtod_r>
 8008dfe:	9b03      	ldr	r3, [sp, #12]
 8008e00:	6821      	ldr	r1, [r4, #0]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f011 0f02 	tst.w	r1, #2
 8008e08:	ec57 6b10 	vmov	r6, r7, d0
 8008e0c:	f103 0204 	add.w	r2, r3, #4
 8008e10:	d01f      	beq.n	8008e52 <_scanf_float+0x3e6>
 8008e12:	9903      	ldr	r1, [sp, #12]
 8008e14:	600a      	str	r2, [r1, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	e9c3 6700 	strd	r6, r7, [r3]
 8008e1c:	68e3      	ldr	r3, [r4, #12]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	60e3      	str	r3, [r4, #12]
 8008e22:	e7d9      	b.n	8008dd8 <_scanf_float+0x36c>
 8008e24:	9b04      	ldr	r3, [sp, #16]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d0e4      	beq.n	8008df4 <_scanf_float+0x388>
 8008e2a:	9905      	ldr	r1, [sp, #20]
 8008e2c:	230a      	movs	r3, #10
 8008e2e:	3101      	adds	r1, #1
 8008e30:	4640      	mov	r0, r8
 8008e32:	f002 fd3d 	bl	800b8b0 <_strtol_r>
 8008e36:	9b04      	ldr	r3, [sp, #16]
 8008e38:	9e05      	ldr	r6, [sp, #20]
 8008e3a:	1ac2      	subs	r2, r0, r3
 8008e3c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008e40:	429e      	cmp	r6, r3
 8008e42:	bf28      	it	cs
 8008e44:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008e48:	4910      	ldr	r1, [pc, #64]	@ (8008e8c <_scanf_float+0x420>)
 8008e4a:	4630      	mov	r0, r6
 8008e4c:	f000 f8e4 	bl	8009018 <siprintf>
 8008e50:	e7d0      	b.n	8008df4 <_scanf_float+0x388>
 8008e52:	f011 0f04 	tst.w	r1, #4
 8008e56:	9903      	ldr	r1, [sp, #12]
 8008e58:	600a      	str	r2, [r1, #0]
 8008e5a:	d1dc      	bne.n	8008e16 <_scanf_float+0x3aa>
 8008e5c:	681d      	ldr	r5, [r3, #0]
 8008e5e:	4632      	mov	r2, r6
 8008e60:	463b      	mov	r3, r7
 8008e62:	4630      	mov	r0, r6
 8008e64:	4639      	mov	r1, r7
 8008e66:	f7f7 fe69 	bl	8000b3c <__aeabi_dcmpun>
 8008e6a:	b128      	cbz	r0, 8008e78 <_scanf_float+0x40c>
 8008e6c:	4808      	ldr	r0, [pc, #32]	@ (8008e90 <_scanf_float+0x424>)
 8008e6e:	f000 fa97 	bl	80093a0 <nanf>
 8008e72:	ed85 0a00 	vstr	s0, [r5]
 8008e76:	e7d1      	b.n	8008e1c <_scanf_float+0x3b0>
 8008e78:	4630      	mov	r0, r6
 8008e7a:	4639      	mov	r1, r7
 8008e7c:	f7f7 febc 	bl	8000bf8 <__aeabi_d2f>
 8008e80:	6028      	str	r0, [r5, #0]
 8008e82:	e7cb      	b.n	8008e1c <_scanf_float+0x3b0>
 8008e84:	f04f 0900 	mov.w	r9, #0
 8008e88:	e629      	b.n	8008ade <_scanf_float+0x72>
 8008e8a:	bf00      	nop
 8008e8c:	0800d21e 	.word	0x0800d21e
 8008e90:	0800d5d0 	.word	0x0800d5d0

08008e94 <std>:
 8008e94:	2300      	movs	r3, #0
 8008e96:	b510      	push	{r4, lr}
 8008e98:	4604      	mov	r4, r0
 8008e9a:	e9c0 3300 	strd	r3, r3, [r0]
 8008e9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ea2:	6083      	str	r3, [r0, #8]
 8008ea4:	8181      	strh	r1, [r0, #12]
 8008ea6:	6643      	str	r3, [r0, #100]	@ 0x64
 8008ea8:	81c2      	strh	r2, [r0, #14]
 8008eaa:	6183      	str	r3, [r0, #24]
 8008eac:	4619      	mov	r1, r3
 8008eae:	2208      	movs	r2, #8
 8008eb0:	305c      	adds	r0, #92	@ 0x5c
 8008eb2:	f000 f9d5 	bl	8009260 <memset>
 8008eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8008eec <std+0x58>)
 8008eb8:	6263      	str	r3, [r4, #36]	@ 0x24
 8008eba:	4b0d      	ldr	r3, [pc, #52]	@ (8008ef0 <std+0x5c>)
 8008ebc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8008ef4 <std+0x60>)
 8008ec0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8008ef8 <std+0x64>)
 8008ec4:	6323      	str	r3, [r4, #48]	@ 0x30
 8008ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8008efc <std+0x68>)
 8008ec8:	6224      	str	r4, [r4, #32]
 8008eca:	429c      	cmp	r4, r3
 8008ecc:	d006      	beq.n	8008edc <std+0x48>
 8008ece:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008ed2:	4294      	cmp	r4, r2
 8008ed4:	d002      	beq.n	8008edc <std+0x48>
 8008ed6:	33d0      	adds	r3, #208	@ 0xd0
 8008ed8:	429c      	cmp	r4, r3
 8008eda:	d105      	bne.n	8008ee8 <std+0x54>
 8008edc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ee4:	f000 ba4a 	b.w	800937c <__retarget_lock_init_recursive>
 8008ee8:	bd10      	pop	{r4, pc}
 8008eea:	bf00      	nop
 8008eec:	080090ad 	.word	0x080090ad
 8008ef0:	080090d3 	.word	0x080090d3
 8008ef4:	0800910b 	.word	0x0800910b
 8008ef8:	0800912f 	.word	0x0800912f
 8008efc:	200006f4 	.word	0x200006f4

08008f00 <stdio_exit_handler>:
 8008f00:	4a02      	ldr	r2, [pc, #8]	@ (8008f0c <stdio_exit_handler+0xc>)
 8008f02:	4903      	ldr	r1, [pc, #12]	@ (8008f10 <stdio_exit_handler+0x10>)
 8008f04:	4803      	ldr	r0, [pc, #12]	@ (8008f14 <stdio_exit_handler+0x14>)
 8008f06:	f000 b869 	b.w	8008fdc <_fwalk_sglue>
 8008f0a:	bf00      	nop
 8008f0c:	2000000c 	.word	0x2000000c
 8008f10:	0800c525 	.word	0x0800c525
 8008f14:	2000001c 	.word	0x2000001c

08008f18 <cleanup_stdio>:
 8008f18:	6841      	ldr	r1, [r0, #4]
 8008f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8008f4c <cleanup_stdio+0x34>)
 8008f1c:	4299      	cmp	r1, r3
 8008f1e:	b510      	push	{r4, lr}
 8008f20:	4604      	mov	r4, r0
 8008f22:	d001      	beq.n	8008f28 <cleanup_stdio+0x10>
 8008f24:	f003 fafe 	bl	800c524 <_fflush_r>
 8008f28:	68a1      	ldr	r1, [r4, #8]
 8008f2a:	4b09      	ldr	r3, [pc, #36]	@ (8008f50 <cleanup_stdio+0x38>)
 8008f2c:	4299      	cmp	r1, r3
 8008f2e:	d002      	beq.n	8008f36 <cleanup_stdio+0x1e>
 8008f30:	4620      	mov	r0, r4
 8008f32:	f003 faf7 	bl	800c524 <_fflush_r>
 8008f36:	68e1      	ldr	r1, [r4, #12]
 8008f38:	4b06      	ldr	r3, [pc, #24]	@ (8008f54 <cleanup_stdio+0x3c>)
 8008f3a:	4299      	cmp	r1, r3
 8008f3c:	d004      	beq.n	8008f48 <cleanup_stdio+0x30>
 8008f3e:	4620      	mov	r0, r4
 8008f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f44:	f003 baee 	b.w	800c524 <_fflush_r>
 8008f48:	bd10      	pop	{r4, pc}
 8008f4a:	bf00      	nop
 8008f4c:	200006f4 	.word	0x200006f4
 8008f50:	2000075c 	.word	0x2000075c
 8008f54:	200007c4 	.word	0x200007c4

08008f58 <global_stdio_init.part.0>:
 8008f58:	b510      	push	{r4, lr}
 8008f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8008f88 <global_stdio_init.part.0+0x30>)
 8008f5c:	4c0b      	ldr	r4, [pc, #44]	@ (8008f8c <global_stdio_init.part.0+0x34>)
 8008f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8008f90 <global_stdio_init.part.0+0x38>)
 8008f60:	601a      	str	r2, [r3, #0]
 8008f62:	4620      	mov	r0, r4
 8008f64:	2200      	movs	r2, #0
 8008f66:	2104      	movs	r1, #4
 8008f68:	f7ff ff94 	bl	8008e94 <std>
 8008f6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008f70:	2201      	movs	r2, #1
 8008f72:	2109      	movs	r1, #9
 8008f74:	f7ff ff8e 	bl	8008e94 <std>
 8008f78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008f7c:	2202      	movs	r2, #2
 8008f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f82:	2112      	movs	r1, #18
 8008f84:	f7ff bf86 	b.w	8008e94 <std>
 8008f88:	2000082c 	.word	0x2000082c
 8008f8c:	200006f4 	.word	0x200006f4
 8008f90:	08008f01 	.word	0x08008f01

08008f94 <__sfp_lock_acquire>:
 8008f94:	4801      	ldr	r0, [pc, #4]	@ (8008f9c <__sfp_lock_acquire+0x8>)
 8008f96:	f000 b9f2 	b.w	800937e <__retarget_lock_acquire_recursive>
 8008f9a:	bf00      	nop
 8008f9c:	20000835 	.word	0x20000835

08008fa0 <__sfp_lock_release>:
 8008fa0:	4801      	ldr	r0, [pc, #4]	@ (8008fa8 <__sfp_lock_release+0x8>)
 8008fa2:	f000 b9ed 	b.w	8009380 <__retarget_lock_release_recursive>
 8008fa6:	bf00      	nop
 8008fa8:	20000835 	.word	0x20000835

08008fac <__sinit>:
 8008fac:	b510      	push	{r4, lr}
 8008fae:	4604      	mov	r4, r0
 8008fb0:	f7ff fff0 	bl	8008f94 <__sfp_lock_acquire>
 8008fb4:	6a23      	ldr	r3, [r4, #32]
 8008fb6:	b11b      	cbz	r3, 8008fc0 <__sinit+0x14>
 8008fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fbc:	f7ff bff0 	b.w	8008fa0 <__sfp_lock_release>
 8008fc0:	4b04      	ldr	r3, [pc, #16]	@ (8008fd4 <__sinit+0x28>)
 8008fc2:	6223      	str	r3, [r4, #32]
 8008fc4:	4b04      	ldr	r3, [pc, #16]	@ (8008fd8 <__sinit+0x2c>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d1f5      	bne.n	8008fb8 <__sinit+0xc>
 8008fcc:	f7ff ffc4 	bl	8008f58 <global_stdio_init.part.0>
 8008fd0:	e7f2      	b.n	8008fb8 <__sinit+0xc>
 8008fd2:	bf00      	nop
 8008fd4:	08008f19 	.word	0x08008f19
 8008fd8:	2000082c 	.word	0x2000082c

08008fdc <_fwalk_sglue>:
 8008fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fe0:	4607      	mov	r7, r0
 8008fe2:	4688      	mov	r8, r1
 8008fe4:	4614      	mov	r4, r2
 8008fe6:	2600      	movs	r6, #0
 8008fe8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008fec:	f1b9 0901 	subs.w	r9, r9, #1
 8008ff0:	d505      	bpl.n	8008ffe <_fwalk_sglue+0x22>
 8008ff2:	6824      	ldr	r4, [r4, #0]
 8008ff4:	2c00      	cmp	r4, #0
 8008ff6:	d1f7      	bne.n	8008fe8 <_fwalk_sglue+0xc>
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ffe:	89ab      	ldrh	r3, [r5, #12]
 8009000:	2b01      	cmp	r3, #1
 8009002:	d907      	bls.n	8009014 <_fwalk_sglue+0x38>
 8009004:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009008:	3301      	adds	r3, #1
 800900a:	d003      	beq.n	8009014 <_fwalk_sglue+0x38>
 800900c:	4629      	mov	r1, r5
 800900e:	4638      	mov	r0, r7
 8009010:	47c0      	blx	r8
 8009012:	4306      	orrs	r6, r0
 8009014:	3568      	adds	r5, #104	@ 0x68
 8009016:	e7e9      	b.n	8008fec <_fwalk_sglue+0x10>

08009018 <siprintf>:
 8009018:	b40e      	push	{r1, r2, r3}
 800901a:	b500      	push	{lr}
 800901c:	b09c      	sub	sp, #112	@ 0x70
 800901e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009020:	9002      	str	r0, [sp, #8]
 8009022:	9006      	str	r0, [sp, #24]
 8009024:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009028:	4809      	ldr	r0, [pc, #36]	@ (8009050 <siprintf+0x38>)
 800902a:	9107      	str	r1, [sp, #28]
 800902c:	9104      	str	r1, [sp, #16]
 800902e:	4909      	ldr	r1, [pc, #36]	@ (8009054 <siprintf+0x3c>)
 8009030:	f853 2b04 	ldr.w	r2, [r3], #4
 8009034:	9105      	str	r1, [sp, #20]
 8009036:	6800      	ldr	r0, [r0, #0]
 8009038:	9301      	str	r3, [sp, #4]
 800903a:	a902      	add	r1, sp, #8
 800903c:	f002 fc96 	bl	800b96c <_svfiprintf_r>
 8009040:	9b02      	ldr	r3, [sp, #8]
 8009042:	2200      	movs	r2, #0
 8009044:	701a      	strb	r2, [r3, #0]
 8009046:	b01c      	add	sp, #112	@ 0x70
 8009048:	f85d eb04 	ldr.w	lr, [sp], #4
 800904c:	b003      	add	sp, #12
 800904e:	4770      	bx	lr
 8009050:	20000018 	.word	0x20000018
 8009054:	ffff0208 	.word	0xffff0208

08009058 <siscanf>:
 8009058:	b40e      	push	{r1, r2, r3}
 800905a:	b530      	push	{r4, r5, lr}
 800905c:	b09c      	sub	sp, #112	@ 0x70
 800905e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8009060:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8009064:	f854 5b04 	ldr.w	r5, [r4], #4
 8009068:	f8ad 2014 	strh.w	r2, [sp, #20]
 800906c:	9002      	str	r0, [sp, #8]
 800906e:	9006      	str	r0, [sp, #24]
 8009070:	f7f7 f906 	bl	8000280 <strlen>
 8009074:	4b0b      	ldr	r3, [pc, #44]	@ (80090a4 <siscanf+0x4c>)
 8009076:	9003      	str	r0, [sp, #12]
 8009078:	9007      	str	r0, [sp, #28]
 800907a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800907c:	480a      	ldr	r0, [pc, #40]	@ (80090a8 <siscanf+0x50>)
 800907e:	9401      	str	r4, [sp, #4]
 8009080:	2300      	movs	r3, #0
 8009082:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009084:	9314      	str	r3, [sp, #80]	@ 0x50
 8009086:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800908a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800908e:	462a      	mov	r2, r5
 8009090:	4623      	mov	r3, r4
 8009092:	a902      	add	r1, sp, #8
 8009094:	6800      	ldr	r0, [r0, #0]
 8009096:	f002 fdbd 	bl	800bc14 <__ssvfiscanf_r>
 800909a:	b01c      	add	sp, #112	@ 0x70
 800909c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090a0:	b003      	add	sp, #12
 80090a2:	4770      	bx	lr
 80090a4:	080090cf 	.word	0x080090cf
 80090a8:	20000018 	.word	0x20000018

080090ac <__sread>:
 80090ac:	b510      	push	{r4, lr}
 80090ae:	460c      	mov	r4, r1
 80090b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090b4:	f000 f914 	bl	80092e0 <_read_r>
 80090b8:	2800      	cmp	r0, #0
 80090ba:	bfab      	itete	ge
 80090bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80090be:	89a3      	ldrhlt	r3, [r4, #12]
 80090c0:	181b      	addge	r3, r3, r0
 80090c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80090c6:	bfac      	ite	ge
 80090c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80090ca:	81a3      	strhlt	r3, [r4, #12]
 80090cc:	bd10      	pop	{r4, pc}

080090ce <__seofread>:
 80090ce:	2000      	movs	r0, #0
 80090d0:	4770      	bx	lr

080090d2 <__swrite>:
 80090d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090d6:	461f      	mov	r7, r3
 80090d8:	898b      	ldrh	r3, [r1, #12]
 80090da:	05db      	lsls	r3, r3, #23
 80090dc:	4605      	mov	r5, r0
 80090de:	460c      	mov	r4, r1
 80090e0:	4616      	mov	r6, r2
 80090e2:	d505      	bpl.n	80090f0 <__swrite+0x1e>
 80090e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090e8:	2302      	movs	r3, #2
 80090ea:	2200      	movs	r2, #0
 80090ec:	f000 f8e6 	bl	80092bc <_lseek_r>
 80090f0:	89a3      	ldrh	r3, [r4, #12]
 80090f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80090fa:	81a3      	strh	r3, [r4, #12]
 80090fc:	4632      	mov	r2, r6
 80090fe:	463b      	mov	r3, r7
 8009100:	4628      	mov	r0, r5
 8009102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009106:	f000 b8fd 	b.w	8009304 <_write_r>

0800910a <__sseek>:
 800910a:	b510      	push	{r4, lr}
 800910c:	460c      	mov	r4, r1
 800910e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009112:	f000 f8d3 	bl	80092bc <_lseek_r>
 8009116:	1c43      	adds	r3, r0, #1
 8009118:	89a3      	ldrh	r3, [r4, #12]
 800911a:	bf15      	itete	ne
 800911c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800911e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009122:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009126:	81a3      	strheq	r3, [r4, #12]
 8009128:	bf18      	it	ne
 800912a:	81a3      	strhne	r3, [r4, #12]
 800912c:	bd10      	pop	{r4, pc}

0800912e <__sclose>:
 800912e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009132:	f000 b8b3 	b.w	800929c <_close_r>

08009136 <__swbuf_r>:
 8009136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009138:	460e      	mov	r6, r1
 800913a:	4614      	mov	r4, r2
 800913c:	4605      	mov	r5, r0
 800913e:	b118      	cbz	r0, 8009148 <__swbuf_r+0x12>
 8009140:	6a03      	ldr	r3, [r0, #32]
 8009142:	b90b      	cbnz	r3, 8009148 <__swbuf_r+0x12>
 8009144:	f7ff ff32 	bl	8008fac <__sinit>
 8009148:	69a3      	ldr	r3, [r4, #24]
 800914a:	60a3      	str	r3, [r4, #8]
 800914c:	89a3      	ldrh	r3, [r4, #12]
 800914e:	071a      	lsls	r2, r3, #28
 8009150:	d501      	bpl.n	8009156 <__swbuf_r+0x20>
 8009152:	6923      	ldr	r3, [r4, #16]
 8009154:	b943      	cbnz	r3, 8009168 <__swbuf_r+0x32>
 8009156:	4621      	mov	r1, r4
 8009158:	4628      	mov	r0, r5
 800915a:	f000 f82b 	bl	80091b4 <__swsetup_r>
 800915e:	b118      	cbz	r0, 8009168 <__swbuf_r+0x32>
 8009160:	f04f 37ff 	mov.w	r7, #4294967295
 8009164:	4638      	mov	r0, r7
 8009166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009168:	6823      	ldr	r3, [r4, #0]
 800916a:	6922      	ldr	r2, [r4, #16]
 800916c:	1a98      	subs	r0, r3, r2
 800916e:	6963      	ldr	r3, [r4, #20]
 8009170:	b2f6      	uxtb	r6, r6
 8009172:	4283      	cmp	r3, r0
 8009174:	4637      	mov	r7, r6
 8009176:	dc05      	bgt.n	8009184 <__swbuf_r+0x4e>
 8009178:	4621      	mov	r1, r4
 800917a:	4628      	mov	r0, r5
 800917c:	f003 f9d2 	bl	800c524 <_fflush_r>
 8009180:	2800      	cmp	r0, #0
 8009182:	d1ed      	bne.n	8009160 <__swbuf_r+0x2a>
 8009184:	68a3      	ldr	r3, [r4, #8]
 8009186:	3b01      	subs	r3, #1
 8009188:	60a3      	str	r3, [r4, #8]
 800918a:	6823      	ldr	r3, [r4, #0]
 800918c:	1c5a      	adds	r2, r3, #1
 800918e:	6022      	str	r2, [r4, #0]
 8009190:	701e      	strb	r6, [r3, #0]
 8009192:	6962      	ldr	r2, [r4, #20]
 8009194:	1c43      	adds	r3, r0, #1
 8009196:	429a      	cmp	r2, r3
 8009198:	d004      	beq.n	80091a4 <__swbuf_r+0x6e>
 800919a:	89a3      	ldrh	r3, [r4, #12]
 800919c:	07db      	lsls	r3, r3, #31
 800919e:	d5e1      	bpl.n	8009164 <__swbuf_r+0x2e>
 80091a0:	2e0a      	cmp	r6, #10
 80091a2:	d1df      	bne.n	8009164 <__swbuf_r+0x2e>
 80091a4:	4621      	mov	r1, r4
 80091a6:	4628      	mov	r0, r5
 80091a8:	f003 f9bc 	bl	800c524 <_fflush_r>
 80091ac:	2800      	cmp	r0, #0
 80091ae:	d0d9      	beq.n	8009164 <__swbuf_r+0x2e>
 80091b0:	e7d6      	b.n	8009160 <__swbuf_r+0x2a>
	...

080091b4 <__swsetup_r>:
 80091b4:	b538      	push	{r3, r4, r5, lr}
 80091b6:	4b29      	ldr	r3, [pc, #164]	@ (800925c <__swsetup_r+0xa8>)
 80091b8:	4605      	mov	r5, r0
 80091ba:	6818      	ldr	r0, [r3, #0]
 80091bc:	460c      	mov	r4, r1
 80091be:	b118      	cbz	r0, 80091c8 <__swsetup_r+0x14>
 80091c0:	6a03      	ldr	r3, [r0, #32]
 80091c2:	b90b      	cbnz	r3, 80091c8 <__swsetup_r+0x14>
 80091c4:	f7ff fef2 	bl	8008fac <__sinit>
 80091c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091cc:	0719      	lsls	r1, r3, #28
 80091ce:	d422      	bmi.n	8009216 <__swsetup_r+0x62>
 80091d0:	06da      	lsls	r2, r3, #27
 80091d2:	d407      	bmi.n	80091e4 <__swsetup_r+0x30>
 80091d4:	2209      	movs	r2, #9
 80091d6:	602a      	str	r2, [r5, #0]
 80091d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091dc:	81a3      	strh	r3, [r4, #12]
 80091de:	f04f 30ff 	mov.w	r0, #4294967295
 80091e2:	e033      	b.n	800924c <__swsetup_r+0x98>
 80091e4:	0758      	lsls	r0, r3, #29
 80091e6:	d512      	bpl.n	800920e <__swsetup_r+0x5a>
 80091e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80091ea:	b141      	cbz	r1, 80091fe <__swsetup_r+0x4a>
 80091ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80091f0:	4299      	cmp	r1, r3
 80091f2:	d002      	beq.n	80091fa <__swsetup_r+0x46>
 80091f4:	4628      	mov	r0, r5
 80091f6:	f000 ff27 	bl	800a048 <_free_r>
 80091fa:	2300      	movs	r3, #0
 80091fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80091fe:	89a3      	ldrh	r3, [r4, #12]
 8009200:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009204:	81a3      	strh	r3, [r4, #12]
 8009206:	2300      	movs	r3, #0
 8009208:	6063      	str	r3, [r4, #4]
 800920a:	6923      	ldr	r3, [r4, #16]
 800920c:	6023      	str	r3, [r4, #0]
 800920e:	89a3      	ldrh	r3, [r4, #12]
 8009210:	f043 0308 	orr.w	r3, r3, #8
 8009214:	81a3      	strh	r3, [r4, #12]
 8009216:	6923      	ldr	r3, [r4, #16]
 8009218:	b94b      	cbnz	r3, 800922e <__swsetup_r+0x7a>
 800921a:	89a3      	ldrh	r3, [r4, #12]
 800921c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009224:	d003      	beq.n	800922e <__swsetup_r+0x7a>
 8009226:	4621      	mov	r1, r4
 8009228:	4628      	mov	r0, r5
 800922a:	f003 f9c9 	bl	800c5c0 <__smakebuf_r>
 800922e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009232:	f013 0201 	ands.w	r2, r3, #1
 8009236:	d00a      	beq.n	800924e <__swsetup_r+0x9a>
 8009238:	2200      	movs	r2, #0
 800923a:	60a2      	str	r2, [r4, #8]
 800923c:	6962      	ldr	r2, [r4, #20]
 800923e:	4252      	negs	r2, r2
 8009240:	61a2      	str	r2, [r4, #24]
 8009242:	6922      	ldr	r2, [r4, #16]
 8009244:	b942      	cbnz	r2, 8009258 <__swsetup_r+0xa4>
 8009246:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800924a:	d1c5      	bne.n	80091d8 <__swsetup_r+0x24>
 800924c:	bd38      	pop	{r3, r4, r5, pc}
 800924e:	0799      	lsls	r1, r3, #30
 8009250:	bf58      	it	pl
 8009252:	6962      	ldrpl	r2, [r4, #20]
 8009254:	60a2      	str	r2, [r4, #8]
 8009256:	e7f4      	b.n	8009242 <__swsetup_r+0x8e>
 8009258:	2000      	movs	r0, #0
 800925a:	e7f7      	b.n	800924c <__swsetup_r+0x98>
 800925c:	20000018 	.word	0x20000018

08009260 <memset>:
 8009260:	4402      	add	r2, r0
 8009262:	4603      	mov	r3, r0
 8009264:	4293      	cmp	r3, r2
 8009266:	d100      	bne.n	800926a <memset+0xa>
 8009268:	4770      	bx	lr
 800926a:	f803 1b01 	strb.w	r1, [r3], #1
 800926e:	e7f9      	b.n	8009264 <memset+0x4>

08009270 <strncmp>:
 8009270:	b510      	push	{r4, lr}
 8009272:	b16a      	cbz	r2, 8009290 <strncmp+0x20>
 8009274:	3901      	subs	r1, #1
 8009276:	1884      	adds	r4, r0, r2
 8009278:	f810 2b01 	ldrb.w	r2, [r0], #1
 800927c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009280:	429a      	cmp	r2, r3
 8009282:	d103      	bne.n	800928c <strncmp+0x1c>
 8009284:	42a0      	cmp	r0, r4
 8009286:	d001      	beq.n	800928c <strncmp+0x1c>
 8009288:	2a00      	cmp	r2, #0
 800928a:	d1f5      	bne.n	8009278 <strncmp+0x8>
 800928c:	1ad0      	subs	r0, r2, r3
 800928e:	bd10      	pop	{r4, pc}
 8009290:	4610      	mov	r0, r2
 8009292:	e7fc      	b.n	800928e <strncmp+0x1e>

08009294 <_localeconv_r>:
 8009294:	4800      	ldr	r0, [pc, #0]	@ (8009298 <_localeconv_r+0x4>)
 8009296:	4770      	bx	lr
 8009298:	20000158 	.word	0x20000158

0800929c <_close_r>:
 800929c:	b538      	push	{r3, r4, r5, lr}
 800929e:	4d06      	ldr	r5, [pc, #24]	@ (80092b8 <_close_r+0x1c>)
 80092a0:	2300      	movs	r3, #0
 80092a2:	4604      	mov	r4, r0
 80092a4:	4608      	mov	r0, r1
 80092a6:	602b      	str	r3, [r5, #0]
 80092a8:	f7f9 f8dc 	bl	8002464 <_close>
 80092ac:	1c43      	adds	r3, r0, #1
 80092ae:	d102      	bne.n	80092b6 <_close_r+0x1a>
 80092b0:	682b      	ldr	r3, [r5, #0]
 80092b2:	b103      	cbz	r3, 80092b6 <_close_r+0x1a>
 80092b4:	6023      	str	r3, [r4, #0]
 80092b6:	bd38      	pop	{r3, r4, r5, pc}
 80092b8:	20000830 	.word	0x20000830

080092bc <_lseek_r>:
 80092bc:	b538      	push	{r3, r4, r5, lr}
 80092be:	4d07      	ldr	r5, [pc, #28]	@ (80092dc <_lseek_r+0x20>)
 80092c0:	4604      	mov	r4, r0
 80092c2:	4608      	mov	r0, r1
 80092c4:	4611      	mov	r1, r2
 80092c6:	2200      	movs	r2, #0
 80092c8:	602a      	str	r2, [r5, #0]
 80092ca:	461a      	mov	r2, r3
 80092cc:	f7f9 f8f1 	bl	80024b2 <_lseek>
 80092d0:	1c43      	adds	r3, r0, #1
 80092d2:	d102      	bne.n	80092da <_lseek_r+0x1e>
 80092d4:	682b      	ldr	r3, [r5, #0]
 80092d6:	b103      	cbz	r3, 80092da <_lseek_r+0x1e>
 80092d8:	6023      	str	r3, [r4, #0]
 80092da:	bd38      	pop	{r3, r4, r5, pc}
 80092dc:	20000830 	.word	0x20000830

080092e0 <_read_r>:
 80092e0:	b538      	push	{r3, r4, r5, lr}
 80092e2:	4d07      	ldr	r5, [pc, #28]	@ (8009300 <_read_r+0x20>)
 80092e4:	4604      	mov	r4, r0
 80092e6:	4608      	mov	r0, r1
 80092e8:	4611      	mov	r1, r2
 80092ea:	2200      	movs	r2, #0
 80092ec:	602a      	str	r2, [r5, #0]
 80092ee:	461a      	mov	r2, r3
 80092f0:	f7f9 f87f 	bl	80023f2 <_read>
 80092f4:	1c43      	adds	r3, r0, #1
 80092f6:	d102      	bne.n	80092fe <_read_r+0x1e>
 80092f8:	682b      	ldr	r3, [r5, #0]
 80092fa:	b103      	cbz	r3, 80092fe <_read_r+0x1e>
 80092fc:	6023      	str	r3, [r4, #0]
 80092fe:	bd38      	pop	{r3, r4, r5, pc}
 8009300:	20000830 	.word	0x20000830

08009304 <_write_r>:
 8009304:	b538      	push	{r3, r4, r5, lr}
 8009306:	4d07      	ldr	r5, [pc, #28]	@ (8009324 <_write_r+0x20>)
 8009308:	4604      	mov	r4, r0
 800930a:	4608      	mov	r0, r1
 800930c:	4611      	mov	r1, r2
 800930e:	2200      	movs	r2, #0
 8009310:	602a      	str	r2, [r5, #0]
 8009312:	461a      	mov	r2, r3
 8009314:	f7f9 f88a 	bl	800242c <_write>
 8009318:	1c43      	adds	r3, r0, #1
 800931a:	d102      	bne.n	8009322 <_write_r+0x1e>
 800931c:	682b      	ldr	r3, [r5, #0]
 800931e:	b103      	cbz	r3, 8009322 <_write_r+0x1e>
 8009320:	6023      	str	r3, [r4, #0]
 8009322:	bd38      	pop	{r3, r4, r5, pc}
 8009324:	20000830 	.word	0x20000830

08009328 <__errno>:
 8009328:	4b01      	ldr	r3, [pc, #4]	@ (8009330 <__errno+0x8>)
 800932a:	6818      	ldr	r0, [r3, #0]
 800932c:	4770      	bx	lr
 800932e:	bf00      	nop
 8009330:	20000018 	.word	0x20000018

08009334 <__libc_init_array>:
 8009334:	b570      	push	{r4, r5, r6, lr}
 8009336:	4d0d      	ldr	r5, [pc, #52]	@ (800936c <__libc_init_array+0x38>)
 8009338:	4c0d      	ldr	r4, [pc, #52]	@ (8009370 <__libc_init_array+0x3c>)
 800933a:	1b64      	subs	r4, r4, r5
 800933c:	10a4      	asrs	r4, r4, #2
 800933e:	2600      	movs	r6, #0
 8009340:	42a6      	cmp	r6, r4
 8009342:	d109      	bne.n	8009358 <__libc_init_array+0x24>
 8009344:	4d0b      	ldr	r5, [pc, #44]	@ (8009374 <__libc_init_array+0x40>)
 8009346:	4c0c      	ldr	r4, [pc, #48]	@ (8009378 <__libc_init_array+0x44>)
 8009348:	f003 fece 	bl	800d0e8 <_init>
 800934c:	1b64      	subs	r4, r4, r5
 800934e:	10a4      	asrs	r4, r4, #2
 8009350:	2600      	movs	r6, #0
 8009352:	42a6      	cmp	r6, r4
 8009354:	d105      	bne.n	8009362 <__libc_init_array+0x2e>
 8009356:	bd70      	pop	{r4, r5, r6, pc}
 8009358:	f855 3b04 	ldr.w	r3, [r5], #4
 800935c:	4798      	blx	r3
 800935e:	3601      	adds	r6, #1
 8009360:	e7ee      	b.n	8009340 <__libc_init_array+0xc>
 8009362:	f855 3b04 	ldr.w	r3, [r5], #4
 8009366:	4798      	blx	r3
 8009368:	3601      	adds	r6, #1
 800936a:	e7f2      	b.n	8009352 <__libc_init_array+0x1e>
 800936c:	0800d63c 	.word	0x0800d63c
 8009370:	0800d63c 	.word	0x0800d63c
 8009374:	0800d63c 	.word	0x0800d63c
 8009378:	0800d640 	.word	0x0800d640

0800937c <__retarget_lock_init_recursive>:
 800937c:	4770      	bx	lr

0800937e <__retarget_lock_acquire_recursive>:
 800937e:	4770      	bx	lr

08009380 <__retarget_lock_release_recursive>:
 8009380:	4770      	bx	lr

08009382 <memcpy>:
 8009382:	440a      	add	r2, r1
 8009384:	4291      	cmp	r1, r2
 8009386:	f100 33ff 	add.w	r3, r0, #4294967295
 800938a:	d100      	bne.n	800938e <memcpy+0xc>
 800938c:	4770      	bx	lr
 800938e:	b510      	push	{r4, lr}
 8009390:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009394:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009398:	4291      	cmp	r1, r2
 800939a:	d1f9      	bne.n	8009390 <memcpy+0xe>
 800939c:	bd10      	pop	{r4, pc}
	...

080093a0 <nanf>:
 80093a0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80093a8 <nanf+0x8>
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop
 80093a8:	7fc00000 	.word	0x7fc00000

080093ac <quorem>:
 80093ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b0:	6903      	ldr	r3, [r0, #16]
 80093b2:	690c      	ldr	r4, [r1, #16]
 80093b4:	42a3      	cmp	r3, r4
 80093b6:	4607      	mov	r7, r0
 80093b8:	db7e      	blt.n	80094b8 <quorem+0x10c>
 80093ba:	3c01      	subs	r4, #1
 80093bc:	f101 0814 	add.w	r8, r1, #20
 80093c0:	00a3      	lsls	r3, r4, #2
 80093c2:	f100 0514 	add.w	r5, r0, #20
 80093c6:	9300      	str	r3, [sp, #0]
 80093c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093cc:	9301      	str	r3, [sp, #4]
 80093ce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80093d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093d6:	3301      	adds	r3, #1
 80093d8:	429a      	cmp	r2, r3
 80093da:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80093de:	fbb2 f6f3 	udiv	r6, r2, r3
 80093e2:	d32e      	bcc.n	8009442 <quorem+0x96>
 80093e4:	f04f 0a00 	mov.w	sl, #0
 80093e8:	46c4      	mov	ip, r8
 80093ea:	46ae      	mov	lr, r5
 80093ec:	46d3      	mov	fp, sl
 80093ee:	f85c 3b04 	ldr.w	r3, [ip], #4
 80093f2:	b298      	uxth	r0, r3
 80093f4:	fb06 a000 	mla	r0, r6, r0, sl
 80093f8:	0c02      	lsrs	r2, r0, #16
 80093fa:	0c1b      	lsrs	r3, r3, #16
 80093fc:	fb06 2303 	mla	r3, r6, r3, r2
 8009400:	f8de 2000 	ldr.w	r2, [lr]
 8009404:	b280      	uxth	r0, r0
 8009406:	b292      	uxth	r2, r2
 8009408:	1a12      	subs	r2, r2, r0
 800940a:	445a      	add	r2, fp
 800940c:	f8de 0000 	ldr.w	r0, [lr]
 8009410:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009414:	b29b      	uxth	r3, r3
 8009416:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800941a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800941e:	b292      	uxth	r2, r2
 8009420:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009424:	45e1      	cmp	r9, ip
 8009426:	f84e 2b04 	str.w	r2, [lr], #4
 800942a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800942e:	d2de      	bcs.n	80093ee <quorem+0x42>
 8009430:	9b00      	ldr	r3, [sp, #0]
 8009432:	58eb      	ldr	r3, [r5, r3]
 8009434:	b92b      	cbnz	r3, 8009442 <quorem+0x96>
 8009436:	9b01      	ldr	r3, [sp, #4]
 8009438:	3b04      	subs	r3, #4
 800943a:	429d      	cmp	r5, r3
 800943c:	461a      	mov	r2, r3
 800943e:	d32f      	bcc.n	80094a0 <quorem+0xf4>
 8009440:	613c      	str	r4, [r7, #16]
 8009442:	4638      	mov	r0, r7
 8009444:	f001 f9c4 	bl	800a7d0 <__mcmp>
 8009448:	2800      	cmp	r0, #0
 800944a:	db25      	blt.n	8009498 <quorem+0xec>
 800944c:	4629      	mov	r1, r5
 800944e:	2000      	movs	r0, #0
 8009450:	f858 2b04 	ldr.w	r2, [r8], #4
 8009454:	f8d1 c000 	ldr.w	ip, [r1]
 8009458:	fa1f fe82 	uxth.w	lr, r2
 800945c:	fa1f f38c 	uxth.w	r3, ip
 8009460:	eba3 030e 	sub.w	r3, r3, lr
 8009464:	4403      	add	r3, r0
 8009466:	0c12      	lsrs	r2, r2, #16
 8009468:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800946c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009470:	b29b      	uxth	r3, r3
 8009472:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009476:	45c1      	cmp	r9, r8
 8009478:	f841 3b04 	str.w	r3, [r1], #4
 800947c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009480:	d2e6      	bcs.n	8009450 <quorem+0xa4>
 8009482:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009486:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800948a:	b922      	cbnz	r2, 8009496 <quorem+0xea>
 800948c:	3b04      	subs	r3, #4
 800948e:	429d      	cmp	r5, r3
 8009490:	461a      	mov	r2, r3
 8009492:	d30b      	bcc.n	80094ac <quorem+0x100>
 8009494:	613c      	str	r4, [r7, #16]
 8009496:	3601      	adds	r6, #1
 8009498:	4630      	mov	r0, r6
 800949a:	b003      	add	sp, #12
 800949c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a0:	6812      	ldr	r2, [r2, #0]
 80094a2:	3b04      	subs	r3, #4
 80094a4:	2a00      	cmp	r2, #0
 80094a6:	d1cb      	bne.n	8009440 <quorem+0x94>
 80094a8:	3c01      	subs	r4, #1
 80094aa:	e7c6      	b.n	800943a <quorem+0x8e>
 80094ac:	6812      	ldr	r2, [r2, #0]
 80094ae:	3b04      	subs	r3, #4
 80094b0:	2a00      	cmp	r2, #0
 80094b2:	d1ef      	bne.n	8009494 <quorem+0xe8>
 80094b4:	3c01      	subs	r4, #1
 80094b6:	e7ea      	b.n	800948e <quorem+0xe2>
 80094b8:	2000      	movs	r0, #0
 80094ba:	e7ee      	b.n	800949a <quorem+0xee>
 80094bc:	0000      	movs	r0, r0
	...

080094c0 <_dtoa_r>:
 80094c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c4:	69c7      	ldr	r7, [r0, #28]
 80094c6:	b099      	sub	sp, #100	@ 0x64
 80094c8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80094cc:	ec55 4b10 	vmov	r4, r5, d0
 80094d0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80094d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80094d4:	4683      	mov	fp, r0
 80094d6:	920e      	str	r2, [sp, #56]	@ 0x38
 80094d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80094da:	b97f      	cbnz	r7, 80094fc <_dtoa_r+0x3c>
 80094dc:	2010      	movs	r0, #16
 80094de:	f000 fdfd 	bl	800a0dc <malloc>
 80094e2:	4602      	mov	r2, r0
 80094e4:	f8cb 001c 	str.w	r0, [fp, #28]
 80094e8:	b920      	cbnz	r0, 80094f4 <_dtoa_r+0x34>
 80094ea:	4ba7      	ldr	r3, [pc, #668]	@ (8009788 <_dtoa_r+0x2c8>)
 80094ec:	21ef      	movs	r1, #239	@ 0xef
 80094ee:	48a7      	ldr	r0, [pc, #668]	@ (800978c <_dtoa_r+0x2cc>)
 80094f0:	f003 f96a 	bl	800c7c8 <__assert_func>
 80094f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80094f8:	6007      	str	r7, [r0, #0]
 80094fa:	60c7      	str	r7, [r0, #12]
 80094fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009500:	6819      	ldr	r1, [r3, #0]
 8009502:	b159      	cbz	r1, 800951c <_dtoa_r+0x5c>
 8009504:	685a      	ldr	r2, [r3, #4]
 8009506:	604a      	str	r2, [r1, #4]
 8009508:	2301      	movs	r3, #1
 800950a:	4093      	lsls	r3, r2
 800950c:	608b      	str	r3, [r1, #8]
 800950e:	4658      	mov	r0, fp
 8009510:	f000 feda 	bl	800a2c8 <_Bfree>
 8009514:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009518:	2200      	movs	r2, #0
 800951a:	601a      	str	r2, [r3, #0]
 800951c:	1e2b      	subs	r3, r5, #0
 800951e:	bfb9      	ittee	lt
 8009520:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009524:	9303      	strlt	r3, [sp, #12]
 8009526:	2300      	movge	r3, #0
 8009528:	6033      	strge	r3, [r6, #0]
 800952a:	9f03      	ldr	r7, [sp, #12]
 800952c:	4b98      	ldr	r3, [pc, #608]	@ (8009790 <_dtoa_r+0x2d0>)
 800952e:	bfbc      	itt	lt
 8009530:	2201      	movlt	r2, #1
 8009532:	6032      	strlt	r2, [r6, #0]
 8009534:	43bb      	bics	r3, r7
 8009536:	d112      	bne.n	800955e <_dtoa_r+0x9e>
 8009538:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800953a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800953e:	6013      	str	r3, [r2, #0]
 8009540:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009544:	4323      	orrs	r3, r4
 8009546:	f000 854d 	beq.w	8009fe4 <_dtoa_r+0xb24>
 800954a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800954c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80097a4 <_dtoa_r+0x2e4>
 8009550:	2b00      	cmp	r3, #0
 8009552:	f000 854f 	beq.w	8009ff4 <_dtoa_r+0xb34>
 8009556:	f10a 0303 	add.w	r3, sl, #3
 800955a:	f000 bd49 	b.w	8009ff0 <_dtoa_r+0xb30>
 800955e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009562:	2200      	movs	r2, #0
 8009564:	ec51 0b17 	vmov	r0, r1, d7
 8009568:	2300      	movs	r3, #0
 800956a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800956e:	f7f7 fab3 	bl	8000ad8 <__aeabi_dcmpeq>
 8009572:	4680      	mov	r8, r0
 8009574:	b158      	cbz	r0, 800958e <_dtoa_r+0xce>
 8009576:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009578:	2301      	movs	r3, #1
 800957a:	6013      	str	r3, [r2, #0]
 800957c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800957e:	b113      	cbz	r3, 8009586 <_dtoa_r+0xc6>
 8009580:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009582:	4b84      	ldr	r3, [pc, #528]	@ (8009794 <_dtoa_r+0x2d4>)
 8009584:	6013      	str	r3, [r2, #0]
 8009586:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80097a8 <_dtoa_r+0x2e8>
 800958a:	f000 bd33 	b.w	8009ff4 <_dtoa_r+0xb34>
 800958e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009592:	aa16      	add	r2, sp, #88	@ 0x58
 8009594:	a917      	add	r1, sp, #92	@ 0x5c
 8009596:	4658      	mov	r0, fp
 8009598:	f001 fa3a 	bl	800aa10 <__d2b>
 800959c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80095a0:	4681      	mov	r9, r0
 80095a2:	2e00      	cmp	r6, #0
 80095a4:	d077      	beq.n	8009696 <_dtoa_r+0x1d6>
 80095a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80095a8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80095ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80095b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80095bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80095c0:	4619      	mov	r1, r3
 80095c2:	2200      	movs	r2, #0
 80095c4:	4b74      	ldr	r3, [pc, #464]	@ (8009798 <_dtoa_r+0x2d8>)
 80095c6:	f7f6 fe67 	bl	8000298 <__aeabi_dsub>
 80095ca:	a369      	add	r3, pc, #420	@ (adr r3, 8009770 <_dtoa_r+0x2b0>)
 80095cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d0:	f7f7 f81a 	bl	8000608 <__aeabi_dmul>
 80095d4:	a368      	add	r3, pc, #416	@ (adr r3, 8009778 <_dtoa_r+0x2b8>)
 80095d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095da:	f7f6 fe5f 	bl	800029c <__adddf3>
 80095de:	4604      	mov	r4, r0
 80095e0:	4630      	mov	r0, r6
 80095e2:	460d      	mov	r5, r1
 80095e4:	f7f6 ffa6 	bl	8000534 <__aeabi_i2d>
 80095e8:	a365      	add	r3, pc, #404	@ (adr r3, 8009780 <_dtoa_r+0x2c0>)
 80095ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ee:	f7f7 f80b 	bl	8000608 <__aeabi_dmul>
 80095f2:	4602      	mov	r2, r0
 80095f4:	460b      	mov	r3, r1
 80095f6:	4620      	mov	r0, r4
 80095f8:	4629      	mov	r1, r5
 80095fa:	f7f6 fe4f 	bl	800029c <__adddf3>
 80095fe:	4604      	mov	r4, r0
 8009600:	460d      	mov	r5, r1
 8009602:	f7f7 fab1 	bl	8000b68 <__aeabi_d2iz>
 8009606:	2200      	movs	r2, #0
 8009608:	4607      	mov	r7, r0
 800960a:	2300      	movs	r3, #0
 800960c:	4620      	mov	r0, r4
 800960e:	4629      	mov	r1, r5
 8009610:	f7f7 fa6c 	bl	8000aec <__aeabi_dcmplt>
 8009614:	b140      	cbz	r0, 8009628 <_dtoa_r+0x168>
 8009616:	4638      	mov	r0, r7
 8009618:	f7f6 ff8c 	bl	8000534 <__aeabi_i2d>
 800961c:	4622      	mov	r2, r4
 800961e:	462b      	mov	r3, r5
 8009620:	f7f7 fa5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009624:	b900      	cbnz	r0, 8009628 <_dtoa_r+0x168>
 8009626:	3f01      	subs	r7, #1
 8009628:	2f16      	cmp	r7, #22
 800962a:	d851      	bhi.n	80096d0 <_dtoa_r+0x210>
 800962c:	4b5b      	ldr	r3, [pc, #364]	@ (800979c <_dtoa_r+0x2dc>)
 800962e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009636:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800963a:	f7f7 fa57 	bl	8000aec <__aeabi_dcmplt>
 800963e:	2800      	cmp	r0, #0
 8009640:	d048      	beq.n	80096d4 <_dtoa_r+0x214>
 8009642:	3f01      	subs	r7, #1
 8009644:	2300      	movs	r3, #0
 8009646:	9312      	str	r3, [sp, #72]	@ 0x48
 8009648:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800964a:	1b9b      	subs	r3, r3, r6
 800964c:	1e5a      	subs	r2, r3, #1
 800964e:	bf44      	itt	mi
 8009650:	f1c3 0801 	rsbmi	r8, r3, #1
 8009654:	2300      	movmi	r3, #0
 8009656:	9208      	str	r2, [sp, #32]
 8009658:	bf54      	ite	pl
 800965a:	f04f 0800 	movpl.w	r8, #0
 800965e:	9308      	strmi	r3, [sp, #32]
 8009660:	2f00      	cmp	r7, #0
 8009662:	db39      	blt.n	80096d8 <_dtoa_r+0x218>
 8009664:	9b08      	ldr	r3, [sp, #32]
 8009666:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009668:	443b      	add	r3, r7
 800966a:	9308      	str	r3, [sp, #32]
 800966c:	2300      	movs	r3, #0
 800966e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009672:	2b09      	cmp	r3, #9
 8009674:	d864      	bhi.n	8009740 <_dtoa_r+0x280>
 8009676:	2b05      	cmp	r3, #5
 8009678:	bfc4      	itt	gt
 800967a:	3b04      	subgt	r3, #4
 800967c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800967e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009680:	f1a3 0302 	sub.w	r3, r3, #2
 8009684:	bfcc      	ite	gt
 8009686:	2400      	movgt	r4, #0
 8009688:	2401      	movle	r4, #1
 800968a:	2b03      	cmp	r3, #3
 800968c:	d863      	bhi.n	8009756 <_dtoa_r+0x296>
 800968e:	e8df f003 	tbb	[pc, r3]
 8009692:	372a      	.short	0x372a
 8009694:	5535      	.short	0x5535
 8009696:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800969a:	441e      	add	r6, r3
 800969c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80096a0:	2b20      	cmp	r3, #32
 80096a2:	bfc1      	itttt	gt
 80096a4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80096a8:	409f      	lslgt	r7, r3
 80096aa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80096ae:	fa24 f303 	lsrgt.w	r3, r4, r3
 80096b2:	bfd6      	itet	le
 80096b4:	f1c3 0320 	rsble	r3, r3, #32
 80096b8:	ea47 0003 	orrgt.w	r0, r7, r3
 80096bc:	fa04 f003 	lslle.w	r0, r4, r3
 80096c0:	f7f6 ff28 	bl	8000514 <__aeabi_ui2d>
 80096c4:	2201      	movs	r2, #1
 80096c6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80096ca:	3e01      	subs	r6, #1
 80096cc:	9214      	str	r2, [sp, #80]	@ 0x50
 80096ce:	e777      	b.n	80095c0 <_dtoa_r+0x100>
 80096d0:	2301      	movs	r3, #1
 80096d2:	e7b8      	b.n	8009646 <_dtoa_r+0x186>
 80096d4:	9012      	str	r0, [sp, #72]	@ 0x48
 80096d6:	e7b7      	b.n	8009648 <_dtoa_r+0x188>
 80096d8:	427b      	negs	r3, r7
 80096da:	930a      	str	r3, [sp, #40]	@ 0x28
 80096dc:	2300      	movs	r3, #0
 80096de:	eba8 0807 	sub.w	r8, r8, r7
 80096e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80096e4:	e7c4      	b.n	8009670 <_dtoa_r+0x1b0>
 80096e6:	2300      	movs	r3, #0
 80096e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	dc35      	bgt.n	800975c <_dtoa_r+0x29c>
 80096f0:	2301      	movs	r3, #1
 80096f2:	9300      	str	r3, [sp, #0]
 80096f4:	9307      	str	r3, [sp, #28]
 80096f6:	461a      	mov	r2, r3
 80096f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80096fa:	e00b      	b.n	8009714 <_dtoa_r+0x254>
 80096fc:	2301      	movs	r3, #1
 80096fe:	e7f3      	b.n	80096e8 <_dtoa_r+0x228>
 8009700:	2300      	movs	r3, #0
 8009702:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009704:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009706:	18fb      	adds	r3, r7, r3
 8009708:	9300      	str	r3, [sp, #0]
 800970a:	3301      	adds	r3, #1
 800970c:	2b01      	cmp	r3, #1
 800970e:	9307      	str	r3, [sp, #28]
 8009710:	bfb8      	it	lt
 8009712:	2301      	movlt	r3, #1
 8009714:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009718:	2100      	movs	r1, #0
 800971a:	2204      	movs	r2, #4
 800971c:	f102 0514 	add.w	r5, r2, #20
 8009720:	429d      	cmp	r5, r3
 8009722:	d91f      	bls.n	8009764 <_dtoa_r+0x2a4>
 8009724:	6041      	str	r1, [r0, #4]
 8009726:	4658      	mov	r0, fp
 8009728:	f000 fd8e 	bl	800a248 <_Balloc>
 800972c:	4682      	mov	sl, r0
 800972e:	2800      	cmp	r0, #0
 8009730:	d13c      	bne.n	80097ac <_dtoa_r+0x2ec>
 8009732:	4b1b      	ldr	r3, [pc, #108]	@ (80097a0 <_dtoa_r+0x2e0>)
 8009734:	4602      	mov	r2, r0
 8009736:	f240 11af 	movw	r1, #431	@ 0x1af
 800973a:	e6d8      	b.n	80094ee <_dtoa_r+0x2e>
 800973c:	2301      	movs	r3, #1
 800973e:	e7e0      	b.n	8009702 <_dtoa_r+0x242>
 8009740:	2401      	movs	r4, #1
 8009742:	2300      	movs	r3, #0
 8009744:	9309      	str	r3, [sp, #36]	@ 0x24
 8009746:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009748:	f04f 33ff 	mov.w	r3, #4294967295
 800974c:	9300      	str	r3, [sp, #0]
 800974e:	9307      	str	r3, [sp, #28]
 8009750:	2200      	movs	r2, #0
 8009752:	2312      	movs	r3, #18
 8009754:	e7d0      	b.n	80096f8 <_dtoa_r+0x238>
 8009756:	2301      	movs	r3, #1
 8009758:	930b      	str	r3, [sp, #44]	@ 0x2c
 800975a:	e7f5      	b.n	8009748 <_dtoa_r+0x288>
 800975c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800975e:	9300      	str	r3, [sp, #0]
 8009760:	9307      	str	r3, [sp, #28]
 8009762:	e7d7      	b.n	8009714 <_dtoa_r+0x254>
 8009764:	3101      	adds	r1, #1
 8009766:	0052      	lsls	r2, r2, #1
 8009768:	e7d8      	b.n	800971c <_dtoa_r+0x25c>
 800976a:	bf00      	nop
 800976c:	f3af 8000 	nop.w
 8009770:	636f4361 	.word	0x636f4361
 8009774:	3fd287a7 	.word	0x3fd287a7
 8009778:	8b60c8b3 	.word	0x8b60c8b3
 800977c:	3fc68a28 	.word	0x3fc68a28
 8009780:	509f79fb 	.word	0x509f79fb
 8009784:	3fd34413 	.word	0x3fd34413
 8009788:	0800d230 	.word	0x0800d230
 800978c:	0800d247 	.word	0x0800d247
 8009790:	7ff00000 	.word	0x7ff00000
 8009794:	0800d589 	.word	0x0800d589
 8009798:	3ff80000 	.word	0x3ff80000
 800979c:	0800d340 	.word	0x0800d340
 80097a0:	0800d29f 	.word	0x0800d29f
 80097a4:	0800d22c 	.word	0x0800d22c
 80097a8:	0800d588 	.word	0x0800d588
 80097ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80097b0:	6018      	str	r0, [r3, #0]
 80097b2:	9b07      	ldr	r3, [sp, #28]
 80097b4:	2b0e      	cmp	r3, #14
 80097b6:	f200 80a4 	bhi.w	8009902 <_dtoa_r+0x442>
 80097ba:	2c00      	cmp	r4, #0
 80097bc:	f000 80a1 	beq.w	8009902 <_dtoa_r+0x442>
 80097c0:	2f00      	cmp	r7, #0
 80097c2:	dd33      	ble.n	800982c <_dtoa_r+0x36c>
 80097c4:	4bad      	ldr	r3, [pc, #692]	@ (8009a7c <_dtoa_r+0x5bc>)
 80097c6:	f007 020f 	and.w	r2, r7, #15
 80097ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097ce:	ed93 7b00 	vldr	d7, [r3]
 80097d2:	05f8      	lsls	r0, r7, #23
 80097d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80097d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80097dc:	d516      	bpl.n	800980c <_dtoa_r+0x34c>
 80097de:	4ba8      	ldr	r3, [pc, #672]	@ (8009a80 <_dtoa_r+0x5c0>)
 80097e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80097e8:	f7f7 f838 	bl	800085c <__aeabi_ddiv>
 80097ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097f0:	f004 040f 	and.w	r4, r4, #15
 80097f4:	2603      	movs	r6, #3
 80097f6:	4da2      	ldr	r5, [pc, #648]	@ (8009a80 <_dtoa_r+0x5c0>)
 80097f8:	b954      	cbnz	r4, 8009810 <_dtoa_r+0x350>
 80097fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009802:	f7f7 f82b 	bl	800085c <__aeabi_ddiv>
 8009806:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800980a:	e028      	b.n	800985e <_dtoa_r+0x39e>
 800980c:	2602      	movs	r6, #2
 800980e:	e7f2      	b.n	80097f6 <_dtoa_r+0x336>
 8009810:	07e1      	lsls	r1, r4, #31
 8009812:	d508      	bpl.n	8009826 <_dtoa_r+0x366>
 8009814:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009818:	e9d5 2300 	ldrd	r2, r3, [r5]
 800981c:	f7f6 fef4 	bl	8000608 <__aeabi_dmul>
 8009820:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009824:	3601      	adds	r6, #1
 8009826:	1064      	asrs	r4, r4, #1
 8009828:	3508      	adds	r5, #8
 800982a:	e7e5      	b.n	80097f8 <_dtoa_r+0x338>
 800982c:	f000 80d2 	beq.w	80099d4 <_dtoa_r+0x514>
 8009830:	427c      	negs	r4, r7
 8009832:	4b92      	ldr	r3, [pc, #584]	@ (8009a7c <_dtoa_r+0x5bc>)
 8009834:	4d92      	ldr	r5, [pc, #584]	@ (8009a80 <_dtoa_r+0x5c0>)
 8009836:	f004 020f 	and.w	r2, r4, #15
 800983a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800983e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009842:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009846:	f7f6 fedf 	bl	8000608 <__aeabi_dmul>
 800984a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800984e:	1124      	asrs	r4, r4, #4
 8009850:	2300      	movs	r3, #0
 8009852:	2602      	movs	r6, #2
 8009854:	2c00      	cmp	r4, #0
 8009856:	f040 80b2 	bne.w	80099be <_dtoa_r+0x4fe>
 800985a:	2b00      	cmp	r3, #0
 800985c:	d1d3      	bne.n	8009806 <_dtoa_r+0x346>
 800985e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009860:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009864:	2b00      	cmp	r3, #0
 8009866:	f000 80b7 	beq.w	80099d8 <_dtoa_r+0x518>
 800986a:	4b86      	ldr	r3, [pc, #536]	@ (8009a84 <_dtoa_r+0x5c4>)
 800986c:	2200      	movs	r2, #0
 800986e:	4620      	mov	r0, r4
 8009870:	4629      	mov	r1, r5
 8009872:	f7f7 f93b 	bl	8000aec <__aeabi_dcmplt>
 8009876:	2800      	cmp	r0, #0
 8009878:	f000 80ae 	beq.w	80099d8 <_dtoa_r+0x518>
 800987c:	9b07      	ldr	r3, [sp, #28]
 800987e:	2b00      	cmp	r3, #0
 8009880:	f000 80aa 	beq.w	80099d8 <_dtoa_r+0x518>
 8009884:	9b00      	ldr	r3, [sp, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	dd37      	ble.n	80098fa <_dtoa_r+0x43a>
 800988a:	1e7b      	subs	r3, r7, #1
 800988c:	9304      	str	r3, [sp, #16]
 800988e:	4620      	mov	r0, r4
 8009890:	4b7d      	ldr	r3, [pc, #500]	@ (8009a88 <_dtoa_r+0x5c8>)
 8009892:	2200      	movs	r2, #0
 8009894:	4629      	mov	r1, r5
 8009896:	f7f6 feb7 	bl	8000608 <__aeabi_dmul>
 800989a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800989e:	9c00      	ldr	r4, [sp, #0]
 80098a0:	3601      	adds	r6, #1
 80098a2:	4630      	mov	r0, r6
 80098a4:	f7f6 fe46 	bl	8000534 <__aeabi_i2d>
 80098a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098ac:	f7f6 feac 	bl	8000608 <__aeabi_dmul>
 80098b0:	4b76      	ldr	r3, [pc, #472]	@ (8009a8c <_dtoa_r+0x5cc>)
 80098b2:	2200      	movs	r2, #0
 80098b4:	f7f6 fcf2 	bl	800029c <__adddf3>
 80098b8:	4605      	mov	r5, r0
 80098ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80098be:	2c00      	cmp	r4, #0
 80098c0:	f040 808d 	bne.w	80099de <_dtoa_r+0x51e>
 80098c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098c8:	4b71      	ldr	r3, [pc, #452]	@ (8009a90 <_dtoa_r+0x5d0>)
 80098ca:	2200      	movs	r2, #0
 80098cc:	f7f6 fce4 	bl	8000298 <__aeabi_dsub>
 80098d0:	4602      	mov	r2, r0
 80098d2:	460b      	mov	r3, r1
 80098d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80098d8:	462a      	mov	r2, r5
 80098da:	4633      	mov	r3, r6
 80098dc:	f7f7 f924 	bl	8000b28 <__aeabi_dcmpgt>
 80098e0:	2800      	cmp	r0, #0
 80098e2:	f040 828b 	bne.w	8009dfc <_dtoa_r+0x93c>
 80098e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098ea:	462a      	mov	r2, r5
 80098ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80098f0:	f7f7 f8fc 	bl	8000aec <__aeabi_dcmplt>
 80098f4:	2800      	cmp	r0, #0
 80098f6:	f040 8128 	bne.w	8009b4a <_dtoa_r+0x68a>
 80098fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80098fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009902:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009904:	2b00      	cmp	r3, #0
 8009906:	f2c0 815a 	blt.w	8009bbe <_dtoa_r+0x6fe>
 800990a:	2f0e      	cmp	r7, #14
 800990c:	f300 8157 	bgt.w	8009bbe <_dtoa_r+0x6fe>
 8009910:	4b5a      	ldr	r3, [pc, #360]	@ (8009a7c <_dtoa_r+0x5bc>)
 8009912:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009916:	ed93 7b00 	vldr	d7, [r3]
 800991a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800991c:	2b00      	cmp	r3, #0
 800991e:	ed8d 7b00 	vstr	d7, [sp]
 8009922:	da03      	bge.n	800992c <_dtoa_r+0x46c>
 8009924:	9b07      	ldr	r3, [sp, #28]
 8009926:	2b00      	cmp	r3, #0
 8009928:	f340 8101 	ble.w	8009b2e <_dtoa_r+0x66e>
 800992c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009930:	4656      	mov	r6, sl
 8009932:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009936:	4620      	mov	r0, r4
 8009938:	4629      	mov	r1, r5
 800993a:	f7f6 ff8f 	bl	800085c <__aeabi_ddiv>
 800993e:	f7f7 f913 	bl	8000b68 <__aeabi_d2iz>
 8009942:	4680      	mov	r8, r0
 8009944:	f7f6 fdf6 	bl	8000534 <__aeabi_i2d>
 8009948:	e9dd 2300 	ldrd	r2, r3, [sp]
 800994c:	f7f6 fe5c 	bl	8000608 <__aeabi_dmul>
 8009950:	4602      	mov	r2, r0
 8009952:	460b      	mov	r3, r1
 8009954:	4620      	mov	r0, r4
 8009956:	4629      	mov	r1, r5
 8009958:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800995c:	f7f6 fc9c 	bl	8000298 <__aeabi_dsub>
 8009960:	f806 4b01 	strb.w	r4, [r6], #1
 8009964:	9d07      	ldr	r5, [sp, #28]
 8009966:	eba6 040a 	sub.w	r4, r6, sl
 800996a:	42a5      	cmp	r5, r4
 800996c:	4602      	mov	r2, r0
 800996e:	460b      	mov	r3, r1
 8009970:	f040 8117 	bne.w	8009ba2 <_dtoa_r+0x6e2>
 8009974:	f7f6 fc92 	bl	800029c <__adddf3>
 8009978:	e9dd 2300 	ldrd	r2, r3, [sp]
 800997c:	4604      	mov	r4, r0
 800997e:	460d      	mov	r5, r1
 8009980:	f7f7 f8d2 	bl	8000b28 <__aeabi_dcmpgt>
 8009984:	2800      	cmp	r0, #0
 8009986:	f040 80f9 	bne.w	8009b7c <_dtoa_r+0x6bc>
 800998a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800998e:	4620      	mov	r0, r4
 8009990:	4629      	mov	r1, r5
 8009992:	f7f7 f8a1 	bl	8000ad8 <__aeabi_dcmpeq>
 8009996:	b118      	cbz	r0, 80099a0 <_dtoa_r+0x4e0>
 8009998:	f018 0f01 	tst.w	r8, #1
 800999c:	f040 80ee 	bne.w	8009b7c <_dtoa_r+0x6bc>
 80099a0:	4649      	mov	r1, r9
 80099a2:	4658      	mov	r0, fp
 80099a4:	f000 fc90 	bl	800a2c8 <_Bfree>
 80099a8:	2300      	movs	r3, #0
 80099aa:	7033      	strb	r3, [r6, #0]
 80099ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80099ae:	3701      	adds	r7, #1
 80099b0:	601f      	str	r7, [r3, #0]
 80099b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f000 831d 	beq.w	8009ff4 <_dtoa_r+0xb34>
 80099ba:	601e      	str	r6, [r3, #0]
 80099bc:	e31a      	b.n	8009ff4 <_dtoa_r+0xb34>
 80099be:	07e2      	lsls	r2, r4, #31
 80099c0:	d505      	bpl.n	80099ce <_dtoa_r+0x50e>
 80099c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80099c6:	f7f6 fe1f 	bl	8000608 <__aeabi_dmul>
 80099ca:	3601      	adds	r6, #1
 80099cc:	2301      	movs	r3, #1
 80099ce:	1064      	asrs	r4, r4, #1
 80099d0:	3508      	adds	r5, #8
 80099d2:	e73f      	b.n	8009854 <_dtoa_r+0x394>
 80099d4:	2602      	movs	r6, #2
 80099d6:	e742      	b.n	800985e <_dtoa_r+0x39e>
 80099d8:	9c07      	ldr	r4, [sp, #28]
 80099da:	9704      	str	r7, [sp, #16]
 80099dc:	e761      	b.n	80098a2 <_dtoa_r+0x3e2>
 80099de:	4b27      	ldr	r3, [pc, #156]	@ (8009a7c <_dtoa_r+0x5bc>)
 80099e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80099e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80099e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80099ea:	4454      	add	r4, sl
 80099ec:	2900      	cmp	r1, #0
 80099ee:	d053      	beq.n	8009a98 <_dtoa_r+0x5d8>
 80099f0:	4928      	ldr	r1, [pc, #160]	@ (8009a94 <_dtoa_r+0x5d4>)
 80099f2:	2000      	movs	r0, #0
 80099f4:	f7f6 ff32 	bl	800085c <__aeabi_ddiv>
 80099f8:	4633      	mov	r3, r6
 80099fa:	462a      	mov	r2, r5
 80099fc:	f7f6 fc4c 	bl	8000298 <__aeabi_dsub>
 8009a00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009a04:	4656      	mov	r6, sl
 8009a06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a0a:	f7f7 f8ad 	bl	8000b68 <__aeabi_d2iz>
 8009a0e:	4605      	mov	r5, r0
 8009a10:	f7f6 fd90 	bl	8000534 <__aeabi_i2d>
 8009a14:	4602      	mov	r2, r0
 8009a16:	460b      	mov	r3, r1
 8009a18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a1c:	f7f6 fc3c 	bl	8000298 <__aeabi_dsub>
 8009a20:	3530      	adds	r5, #48	@ 0x30
 8009a22:	4602      	mov	r2, r0
 8009a24:	460b      	mov	r3, r1
 8009a26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a2a:	f806 5b01 	strb.w	r5, [r6], #1
 8009a2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a32:	f7f7 f85b 	bl	8000aec <__aeabi_dcmplt>
 8009a36:	2800      	cmp	r0, #0
 8009a38:	d171      	bne.n	8009b1e <_dtoa_r+0x65e>
 8009a3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a3e:	4911      	ldr	r1, [pc, #68]	@ (8009a84 <_dtoa_r+0x5c4>)
 8009a40:	2000      	movs	r0, #0
 8009a42:	f7f6 fc29 	bl	8000298 <__aeabi_dsub>
 8009a46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a4a:	f7f7 f84f 	bl	8000aec <__aeabi_dcmplt>
 8009a4e:	2800      	cmp	r0, #0
 8009a50:	f040 8095 	bne.w	8009b7e <_dtoa_r+0x6be>
 8009a54:	42a6      	cmp	r6, r4
 8009a56:	f43f af50 	beq.w	80098fa <_dtoa_r+0x43a>
 8009a5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8009a88 <_dtoa_r+0x5c8>)
 8009a60:	2200      	movs	r2, #0
 8009a62:	f7f6 fdd1 	bl	8000608 <__aeabi_dmul>
 8009a66:	4b08      	ldr	r3, [pc, #32]	@ (8009a88 <_dtoa_r+0x5c8>)
 8009a68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a72:	f7f6 fdc9 	bl	8000608 <__aeabi_dmul>
 8009a76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a7a:	e7c4      	b.n	8009a06 <_dtoa_r+0x546>
 8009a7c:	0800d340 	.word	0x0800d340
 8009a80:	0800d318 	.word	0x0800d318
 8009a84:	3ff00000 	.word	0x3ff00000
 8009a88:	40240000 	.word	0x40240000
 8009a8c:	401c0000 	.word	0x401c0000
 8009a90:	40140000 	.word	0x40140000
 8009a94:	3fe00000 	.word	0x3fe00000
 8009a98:	4631      	mov	r1, r6
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	f7f6 fdb4 	bl	8000608 <__aeabi_dmul>
 8009aa0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009aa4:	9415      	str	r4, [sp, #84]	@ 0x54
 8009aa6:	4656      	mov	r6, sl
 8009aa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009aac:	f7f7 f85c 	bl	8000b68 <__aeabi_d2iz>
 8009ab0:	4605      	mov	r5, r0
 8009ab2:	f7f6 fd3f 	bl	8000534 <__aeabi_i2d>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	460b      	mov	r3, r1
 8009aba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009abe:	f7f6 fbeb 	bl	8000298 <__aeabi_dsub>
 8009ac2:	3530      	adds	r5, #48	@ 0x30
 8009ac4:	f806 5b01 	strb.w	r5, [r6], #1
 8009ac8:	4602      	mov	r2, r0
 8009aca:	460b      	mov	r3, r1
 8009acc:	42a6      	cmp	r6, r4
 8009ace:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ad2:	f04f 0200 	mov.w	r2, #0
 8009ad6:	d124      	bne.n	8009b22 <_dtoa_r+0x662>
 8009ad8:	4bac      	ldr	r3, [pc, #688]	@ (8009d8c <_dtoa_r+0x8cc>)
 8009ada:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009ade:	f7f6 fbdd 	bl	800029c <__adddf3>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009aea:	f7f7 f81d 	bl	8000b28 <__aeabi_dcmpgt>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	d145      	bne.n	8009b7e <_dtoa_r+0x6be>
 8009af2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009af6:	49a5      	ldr	r1, [pc, #660]	@ (8009d8c <_dtoa_r+0x8cc>)
 8009af8:	2000      	movs	r0, #0
 8009afa:	f7f6 fbcd 	bl	8000298 <__aeabi_dsub>
 8009afe:	4602      	mov	r2, r0
 8009b00:	460b      	mov	r3, r1
 8009b02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b06:	f7f6 fff1 	bl	8000aec <__aeabi_dcmplt>
 8009b0a:	2800      	cmp	r0, #0
 8009b0c:	f43f aef5 	beq.w	80098fa <_dtoa_r+0x43a>
 8009b10:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009b12:	1e73      	subs	r3, r6, #1
 8009b14:	9315      	str	r3, [sp, #84]	@ 0x54
 8009b16:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009b1a:	2b30      	cmp	r3, #48	@ 0x30
 8009b1c:	d0f8      	beq.n	8009b10 <_dtoa_r+0x650>
 8009b1e:	9f04      	ldr	r7, [sp, #16]
 8009b20:	e73e      	b.n	80099a0 <_dtoa_r+0x4e0>
 8009b22:	4b9b      	ldr	r3, [pc, #620]	@ (8009d90 <_dtoa_r+0x8d0>)
 8009b24:	f7f6 fd70 	bl	8000608 <__aeabi_dmul>
 8009b28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b2c:	e7bc      	b.n	8009aa8 <_dtoa_r+0x5e8>
 8009b2e:	d10c      	bne.n	8009b4a <_dtoa_r+0x68a>
 8009b30:	4b98      	ldr	r3, [pc, #608]	@ (8009d94 <_dtoa_r+0x8d4>)
 8009b32:	2200      	movs	r2, #0
 8009b34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b38:	f7f6 fd66 	bl	8000608 <__aeabi_dmul>
 8009b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b40:	f7f6 ffe8 	bl	8000b14 <__aeabi_dcmpge>
 8009b44:	2800      	cmp	r0, #0
 8009b46:	f000 8157 	beq.w	8009df8 <_dtoa_r+0x938>
 8009b4a:	2400      	movs	r4, #0
 8009b4c:	4625      	mov	r5, r4
 8009b4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b50:	43db      	mvns	r3, r3
 8009b52:	9304      	str	r3, [sp, #16]
 8009b54:	4656      	mov	r6, sl
 8009b56:	2700      	movs	r7, #0
 8009b58:	4621      	mov	r1, r4
 8009b5a:	4658      	mov	r0, fp
 8009b5c:	f000 fbb4 	bl	800a2c8 <_Bfree>
 8009b60:	2d00      	cmp	r5, #0
 8009b62:	d0dc      	beq.n	8009b1e <_dtoa_r+0x65e>
 8009b64:	b12f      	cbz	r7, 8009b72 <_dtoa_r+0x6b2>
 8009b66:	42af      	cmp	r7, r5
 8009b68:	d003      	beq.n	8009b72 <_dtoa_r+0x6b2>
 8009b6a:	4639      	mov	r1, r7
 8009b6c:	4658      	mov	r0, fp
 8009b6e:	f000 fbab 	bl	800a2c8 <_Bfree>
 8009b72:	4629      	mov	r1, r5
 8009b74:	4658      	mov	r0, fp
 8009b76:	f000 fba7 	bl	800a2c8 <_Bfree>
 8009b7a:	e7d0      	b.n	8009b1e <_dtoa_r+0x65e>
 8009b7c:	9704      	str	r7, [sp, #16]
 8009b7e:	4633      	mov	r3, r6
 8009b80:	461e      	mov	r6, r3
 8009b82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b86:	2a39      	cmp	r2, #57	@ 0x39
 8009b88:	d107      	bne.n	8009b9a <_dtoa_r+0x6da>
 8009b8a:	459a      	cmp	sl, r3
 8009b8c:	d1f8      	bne.n	8009b80 <_dtoa_r+0x6c0>
 8009b8e:	9a04      	ldr	r2, [sp, #16]
 8009b90:	3201      	adds	r2, #1
 8009b92:	9204      	str	r2, [sp, #16]
 8009b94:	2230      	movs	r2, #48	@ 0x30
 8009b96:	f88a 2000 	strb.w	r2, [sl]
 8009b9a:	781a      	ldrb	r2, [r3, #0]
 8009b9c:	3201      	adds	r2, #1
 8009b9e:	701a      	strb	r2, [r3, #0]
 8009ba0:	e7bd      	b.n	8009b1e <_dtoa_r+0x65e>
 8009ba2:	4b7b      	ldr	r3, [pc, #492]	@ (8009d90 <_dtoa_r+0x8d0>)
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f7f6 fd2f 	bl	8000608 <__aeabi_dmul>
 8009baa:	2200      	movs	r2, #0
 8009bac:	2300      	movs	r3, #0
 8009bae:	4604      	mov	r4, r0
 8009bb0:	460d      	mov	r5, r1
 8009bb2:	f7f6 ff91 	bl	8000ad8 <__aeabi_dcmpeq>
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	f43f aebb 	beq.w	8009932 <_dtoa_r+0x472>
 8009bbc:	e6f0      	b.n	80099a0 <_dtoa_r+0x4e0>
 8009bbe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009bc0:	2a00      	cmp	r2, #0
 8009bc2:	f000 80db 	beq.w	8009d7c <_dtoa_r+0x8bc>
 8009bc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bc8:	2a01      	cmp	r2, #1
 8009bca:	f300 80bf 	bgt.w	8009d4c <_dtoa_r+0x88c>
 8009bce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009bd0:	2a00      	cmp	r2, #0
 8009bd2:	f000 80b7 	beq.w	8009d44 <_dtoa_r+0x884>
 8009bd6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009bda:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009bdc:	4646      	mov	r6, r8
 8009bde:	9a08      	ldr	r2, [sp, #32]
 8009be0:	2101      	movs	r1, #1
 8009be2:	441a      	add	r2, r3
 8009be4:	4658      	mov	r0, fp
 8009be6:	4498      	add	r8, r3
 8009be8:	9208      	str	r2, [sp, #32]
 8009bea:	f000 fc6b 	bl	800a4c4 <__i2b>
 8009bee:	4605      	mov	r5, r0
 8009bf0:	b15e      	cbz	r6, 8009c0a <_dtoa_r+0x74a>
 8009bf2:	9b08      	ldr	r3, [sp, #32]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	dd08      	ble.n	8009c0a <_dtoa_r+0x74a>
 8009bf8:	42b3      	cmp	r3, r6
 8009bfa:	9a08      	ldr	r2, [sp, #32]
 8009bfc:	bfa8      	it	ge
 8009bfe:	4633      	movge	r3, r6
 8009c00:	eba8 0803 	sub.w	r8, r8, r3
 8009c04:	1af6      	subs	r6, r6, r3
 8009c06:	1ad3      	subs	r3, r2, r3
 8009c08:	9308      	str	r3, [sp, #32]
 8009c0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c0c:	b1f3      	cbz	r3, 8009c4c <_dtoa_r+0x78c>
 8009c0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	f000 80b7 	beq.w	8009d84 <_dtoa_r+0x8c4>
 8009c16:	b18c      	cbz	r4, 8009c3c <_dtoa_r+0x77c>
 8009c18:	4629      	mov	r1, r5
 8009c1a:	4622      	mov	r2, r4
 8009c1c:	4658      	mov	r0, fp
 8009c1e:	f000 fd11 	bl	800a644 <__pow5mult>
 8009c22:	464a      	mov	r2, r9
 8009c24:	4601      	mov	r1, r0
 8009c26:	4605      	mov	r5, r0
 8009c28:	4658      	mov	r0, fp
 8009c2a:	f000 fc61 	bl	800a4f0 <__multiply>
 8009c2e:	4649      	mov	r1, r9
 8009c30:	9004      	str	r0, [sp, #16]
 8009c32:	4658      	mov	r0, fp
 8009c34:	f000 fb48 	bl	800a2c8 <_Bfree>
 8009c38:	9b04      	ldr	r3, [sp, #16]
 8009c3a:	4699      	mov	r9, r3
 8009c3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c3e:	1b1a      	subs	r2, r3, r4
 8009c40:	d004      	beq.n	8009c4c <_dtoa_r+0x78c>
 8009c42:	4649      	mov	r1, r9
 8009c44:	4658      	mov	r0, fp
 8009c46:	f000 fcfd 	bl	800a644 <__pow5mult>
 8009c4a:	4681      	mov	r9, r0
 8009c4c:	2101      	movs	r1, #1
 8009c4e:	4658      	mov	r0, fp
 8009c50:	f000 fc38 	bl	800a4c4 <__i2b>
 8009c54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c56:	4604      	mov	r4, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f000 81cf 	beq.w	8009ffc <_dtoa_r+0xb3c>
 8009c5e:	461a      	mov	r2, r3
 8009c60:	4601      	mov	r1, r0
 8009c62:	4658      	mov	r0, fp
 8009c64:	f000 fcee 	bl	800a644 <__pow5mult>
 8009c68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	4604      	mov	r4, r0
 8009c6e:	f300 8095 	bgt.w	8009d9c <_dtoa_r+0x8dc>
 8009c72:	9b02      	ldr	r3, [sp, #8]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	f040 8087 	bne.w	8009d88 <_dtoa_r+0x8c8>
 8009c7a:	9b03      	ldr	r3, [sp, #12]
 8009c7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	f040 8089 	bne.w	8009d98 <_dtoa_r+0x8d8>
 8009c86:	9b03      	ldr	r3, [sp, #12]
 8009c88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c8c:	0d1b      	lsrs	r3, r3, #20
 8009c8e:	051b      	lsls	r3, r3, #20
 8009c90:	b12b      	cbz	r3, 8009c9e <_dtoa_r+0x7de>
 8009c92:	9b08      	ldr	r3, [sp, #32]
 8009c94:	3301      	adds	r3, #1
 8009c96:	9308      	str	r3, [sp, #32]
 8009c98:	f108 0801 	add.w	r8, r8, #1
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ca0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	f000 81b0 	beq.w	800a008 <_dtoa_r+0xb48>
 8009ca8:	6923      	ldr	r3, [r4, #16]
 8009caa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009cae:	6918      	ldr	r0, [r3, #16]
 8009cb0:	f000 fbbc 	bl	800a42c <__hi0bits>
 8009cb4:	f1c0 0020 	rsb	r0, r0, #32
 8009cb8:	9b08      	ldr	r3, [sp, #32]
 8009cba:	4418      	add	r0, r3
 8009cbc:	f010 001f 	ands.w	r0, r0, #31
 8009cc0:	d077      	beq.n	8009db2 <_dtoa_r+0x8f2>
 8009cc2:	f1c0 0320 	rsb	r3, r0, #32
 8009cc6:	2b04      	cmp	r3, #4
 8009cc8:	dd6b      	ble.n	8009da2 <_dtoa_r+0x8e2>
 8009cca:	9b08      	ldr	r3, [sp, #32]
 8009ccc:	f1c0 001c 	rsb	r0, r0, #28
 8009cd0:	4403      	add	r3, r0
 8009cd2:	4480      	add	r8, r0
 8009cd4:	4406      	add	r6, r0
 8009cd6:	9308      	str	r3, [sp, #32]
 8009cd8:	f1b8 0f00 	cmp.w	r8, #0
 8009cdc:	dd05      	ble.n	8009cea <_dtoa_r+0x82a>
 8009cde:	4649      	mov	r1, r9
 8009ce0:	4642      	mov	r2, r8
 8009ce2:	4658      	mov	r0, fp
 8009ce4:	f000 fd08 	bl	800a6f8 <__lshift>
 8009ce8:	4681      	mov	r9, r0
 8009cea:	9b08      	ldr	r3, [sp, #32]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	dd05      	ble.n	8009cfc <_dtoa_r+0x83c>
 8009cf0:	4621      	mov	r1, r4
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	4658      	mov	r0, fp
 8009cf6:	f000 fcff 	bl	800a6f8 <__lshift>
 8009cfa:	4604      	mov	r4, r0
 8009cfc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d059      	beq.n	8009db6 <_dtoa_r+0x8f6>
 8009d02:	4621      	mov	r1, r4
 8009d04:	4648      	mov	r0, r9
 8009d06:	f000 fd63 	bl	800a7d0 <__mcmp>
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	da53      	bge.n	8009db6 <_dtoa_r+0x8f6>
 8009d0e:	1e7b      	subs	r3, r7, #1
 8009d10:	9304      	str	r3, [sp, #16]
 8009d12:	4649      	mov	r1, r9
 8009d14:	2300      	movs	r3, #0
 8009d16:	220a      	movs	r2, #10
 8009d18:	4658      	mov	r0, fp
 8009d1a:	f000 faf7 	bl	800a30c <__multadd>
 8009d1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d20:	4681      	mov	r9, r0
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	f000 8172 	beq.w	800a00c <_dtoa_r+0xb4c>
 8009d28:	2300      	movs	r3, #0
 8009d2a:	4629      	mov	r1, r5
 8009d2c:	220a      	movs	r2, #10
 8009d2e:	4658      	mov	r0, fp
 8009d30:	f000 faec 	bl	800a30c <__multadd>
 8009d34:	9b00      	ldr	r3, [sp, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	4605      	mov	r5, r0
 8009d3a:	dc67      	bgt.n	8009e0c <_dtoa_r+0x94c>
 8009d3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	dc41      	bgt.n	8009dc6 <_dtoa_r+0x906>
 8009d42:	e063      	b.n	8009e0c <_dtoa_r+0x94c>
 8009d44:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009d46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009d4a:	e746      	b.n	8009bda <_dtoa_r+0x71a>
 8009d4c:	9b07      	ldr	r3, [sp, #28]
 8009d4e:	1e5c      	subs	r4, r3, #1
 8009d50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d52:	42a3      	cmp	r3, r4
 8009d54:	bfbf      	itttt	lt
 8009d56:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009d58:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009d5a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009d5c:	1ae3      	sublt	r3, r4, r3
 8009d5e:	bfb4      	ite	lt
 8009d60:	18d2      	addlt	r2, r2, r3
 8009d62:	1b1c      	subge	r4, r3, r4
 8009d64:	9b07      	ldr	r3, [sp, #28]
 8009d66:	bfbc      	itt	lt
 8009d68:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009d6a:	2400      	movlt	r4, #0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	bfb5      	itete	lt
 8009d70:	eba8 0603 	sublt.w	r6, r8, r3
 8009d74:	9b07      	ldrge	r3, [sp, #28]
 8009d76:	2300      	movlt	r3, #0
 8009d78:	4646      	movge	r6, r8
 8009d7a:	e730      	b.n	8009bde <_dtoa_r+0x71e>
 8009d7c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009d7e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009d80:	4646      	mov	r6, r8
 8009d82:	e735      	b.n	8009bf0 <_dtoa_r+0x730>
 8009d84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d86:	e75c      	b.n	8009c42 <_dtoa_r+0x782>
 8009d88:	2300      	movs	r3, #0
 8009d8a:	e788      	b.n	8009c9e <_dtoa_r+0x7de>
 8009d8c:	3fe00000 	.word	0x3fe00000
 8009d90:	40240000 	.word	0x40240000
 8009d94:	40140000 	.word	0x40140000
 8009d98:	9b02      	ldr	r3, [sp, #8]
 8009d9a:	e780      	b.n	8009c9e <_dtoa_r+0x7de>
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009da0:	e782      	b.n	8009ca8 <_dtoa_r+0x7e8>
 8009da2:	d099      	beq.n	8009cd8 <_dtoa_r+0x818>
 8009da4:	9a08      	ldr	r2, [sp, #32]
 8009da6:	331c      	adds	r3, #28
 8009da8:	441a      	add	r2, r3
 8009daa:	4498      	add	r8, r3
 8009dac:	441e      	add	r6, r3
 8009dae:	9208      	str	r2, [sp, #32]
 8009db0:	e792      	b.n	8009cd8 <_dtoa_r+0x818>
 8009db2:	4603      	mov	r3, r0
 8009db4:	e7f6      	b.n	8009da4 <_dtoa_r+0x8e4>
 8009db6:	9b07      	ldr	r3, [sp, #28]
 8009db8:	9704      	str	r7, [sp, #16]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	dc20      	bgt.n	8009e00 <_dtoa_r+0x940>
 8009dbe:	9300      	str	r3, [sp, #0]
 8009dc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dc2:	2b02      	cmp	r3, #2
 8009dc4:	dd1e      	ble.n	8009e04 <_dtoa_r+0x944>
 8009dc6:	9b00      	ldr	r3, [sp, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	f47f aec0 	bne.w	8009b4e <_dtoa_r+0x68e>
 8009dce:	4621      	mov	r1, r4
 8009dd0:	2205      	movs	r2, #5
 8009dd2:	4658      	mov	r0, fp
 8009dd4:	f000 fa9a 	bl	800a30c <__multadd>
 8009dd8:	4601      	mov	r1, r0
 8009dda:	4604      	mov	r4, r0
 8009ddc:	4648      	mov	r0, r9
 8009dde:	f000 fcf7 	bl	800a7d0 <__mcmp>
 8009de2:	2800      	cmp	r0, #0
 8009de4:	f77f aeb3 	ble.w	8009b4e <_dtoa_r+0x68e>
 8009de8:	4656      	mov	r6, sl
 8009dea:	2331      	movs	r3, #49	@ 0x31
 8009dec:	f806 3b01 	strb.w	r3, [r6], #1
 8009df0:	9b04      	ldr	r3, [sp, #16]
 8009df2:	3301      	adds	r3, #1
 8009df4:	9304      	str	r3, [sp, #16]
 8009df6:	e6ae      	b.n	8009b56 <_dtoa_r+0x696>
 8009df8:	9c07      	ldr	r4, [sp, #28]
 8009dfa:	9704      	str	r7, [sp, #16]
 8009dfc:	4625      	mov	r5, r4
 8009dfe:	e7f3      	b.n	8009de8 <_dtoa_r+0x928>
 8009e00:	9b07      	ldr	r3, [sp, #28]
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	f000 8104 	beq.w	800a014 <_dtoa_r+0xb54>
 8009e0c:	2e00      	cmp	r6, #0
 8009e0e:	dd05      	ble.n	8009e1c <_dtoa_r+0x95c>
 8009e10:	4629      	mov	r1, r5
 8009e12:	4632      	mov	r2, r6
 8009e14:	4658      	mov	r0, fp
 8009e16:	f000 fc6f 	bl	800a6f8 <__lshift>
 8009e1a:	4605      	mov	r5, r0
 8009e1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d05a      	beq.n	8009ed8 <_dtoa_r+0xa18>
 8009e22:	6869      	ldr	r1, [r5, #4]
 8009e24:	4658      	mov	r0, fp
 8009e26:	f000 fa0f 	bl	800a248 <_Balloc>
 8009e2a:	4606      	mov	r6, r0
 8009e2c:	b928      	cbnz	r0, 8009e3a <_dtoa_r+0x97a>
 8009e2e:	4b84      	ldr	r3, [pc, #528]	@ (800a040 <_dtoa_r+0xb80>)
 8009e30:	4602      	mov	r2, r0
 8009e32:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009e36:	f7ff bb5a 	b.w	80094ee <_dtoa_r+0x2e>
 8009e3a:	692a      	ldr	r2, [r5, #16]
 8009e3c:	3202      	adds	r2, #2
 8009e3e:	0092      	lsls	r2, r2, #2
 8009e40:	f105 010c 	add.w	r1, r5, #12
 8009e44:	300c      	adds	r0, #12
 8009e46:	f7ff fa9c 	bl	8009382 <memcpy>
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	4631      	mov	r1, r6
 8009e4e:	4658      	mov	r0, fp
 8009e50:	f000 fc52 	bl	800a6f8 <__lshift>
 8009e54:	f10a 0301 	add.w	r3, sl, #1
 8009e58:	9307      	str	r3, [sp, #28]
 8009e5a:	9b00      	ldr	r3, [sp, #0]
 8009e5c:	4453      	add	r3, sl
 8009e5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e60:	9b02      	ldr	r3, [sp, #8]
 8009e62:	f003 0301 	and.w	r3, r3, #1
 8009e66:	462f      	mov	r7, r5
 8009e68:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e6a:	4605      	mov	r5, r0
 8009e6c:	9b07      	ldr	r3, [sp, #28]
 8009e6e:	4621      	mov	r1, r4
 8009e70:	3b01      	subs	r3, #1
 8009e72:	4648      	mov	r0, r9
 8009e74:	9300      	str	r3, [sp, #0]
 8009e76:	f7ff fa99 	bl	80093ac <quorem>
 8009e7a:	4639      	mov	r1, r7
 8009e7c:	9002      	str	r0, [sp, #8]
 8009e7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009e82:	4648      	mov	r0, r9
 8009e84:	f000 fca4 	bl	800a7d0 <__mcmp>
 8009e88:	462a      	mov	r2, r5
 8009e8a:	9008      	str	r0, [sp, #32]
 8009e8c:	4621      	mov	r1, r4
 8009e8e:	4658      	mov	r0, fp
 8009e90:	f000 fcba 	bl	800a808 <__mdiff>
 8009e94:	68c2      	ldr	r2, [r0, #12]
 8009e96:	4606      	mov	r6, r0
 8009e98:	bb02      	cbnz	r2, 8009edc <_dtoa_r+0xa1c>
 8009e9a:	4601      	mov	r1, r0
 8009e9c:	4648      	mov	r0, r9
 8009e9e:	f000 fc97 	bl	800a7d0 <__mcmp>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	4631      	mov	r1, r6
 8009ea6:	4658      	mov	r0, fp
 8009ea8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009eaa:	f000 fa0d 	bl	800a2c8 <_Bfree>
 8009eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eb0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009eb2:	9e07      	ldr	r6, [sp, #28]
 8009eb4:	ea43 0102 	orr.w	r1, r3, r2
 8009eb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009eba:	4319      	orrs	r1, r3
 8009ebc:	d110      	bne.n	8009ee0 <_dtoa_r+0xa20>
 8009ebe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009ec2:	d029      	beq.n	8009f18 <_dtoa_r+0xa58>
 8009ec4:	9b08      	ldr	r3, [sp, #32]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	dd02      	ble.n	8009ed0 <_dtoa_r+0xa10>
 8009eca:	9b02      	ldr	r3, [sp, #8]
 8009ecc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009ed0:	9b00      	ldr	r3, [sp, #0]
 8009ed2:	f883 8000 	strb.w	r8, [r3]
 8009ed6:	e63f      	b.n	8009b58 <_dtoa_r+0x698>
 8009ed8:	4628      	mov	r0, r5
 8009eda:	e7bb      	b.n	8009e54 <_dtoa_r+0x994>
 8009edc:	2201      	movs	r2, #1
 8009ede:	e7e1      	b.n	8009ea4 <_dtoa_r+0x9e4>
 8009ee0:	9b08      	ldr	r3, [sp, #32]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	db04      	blt.n	8009ef0 <_dtoa_r+0xa30>
 8009ee6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ee8:	430b      	orrs	r3, r1
 8009eea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009eec:	430b      	orrs	r3, r1
 8009eee:	d120      	bne.n	8009f32 <_dtoa_r+0xa72>
 8009ef0:	2a00      	cmp	r2, #0
 8009ef2:	dded      	ble.n	8009ed0 <_dtoa_r+0xa10>
 8009ef4:	4649      	mov	r1, r9
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	4658      	mov	r0, fp
 8009efa:	f000 fbfd 	bl	800a6f8 <__lshift>
 8009efe:	4621      	mov	r1, r4
 8009f00:	4681      	mov	r9, r0
 8009f02:	f000 fc65 	bl	800a7d0 <__mcmp>
 8009f06:	2800      	cmp	r0, #0
 8009f08:	dc03      	bgt.n	8009f12 <_dtoa_r+0xa52>
 8009f0a:	d1e1      	bne.n	8009ed0 <_dtoa_r+0xa10>
 8009f0c:	f018 0f01 	tst.w	r8, #1
 8009f10:	d0de      	beq.n	8009ed0 <_dtoa_r+0xa10>
 8009f12:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009f16:	d1d8      	bne.n	8009eca <_dtoa_r+0xa0a>
 8009f18:	9a00      	ldr	r2, [sp, #0]
 8009f1a:	2339      	movs	r3, #57	@ 0x39
 8009f1c:	7013      	strb	r3, [r2, #0]
 8009f1e:	4633      	mov	r3, r6
 8009f20:	461e      	mov	r6, r3
 8009f22:	3b01      	subs	r3, #1
 8009f24:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009f28:	2a39      	cmp	r2, #57	@ 0x39
 8009f2a:	d052      	beq.n	8009fd2 <_dtoa_r+0xb12>
 8009f2c:	3201      	adds	r2, #1
 8009f2e:	701a      	strb	r2, [r3, #0]
 8009f30:	e612      	b.n	8009b58 <_dtoa_r+0x698>
 8009f32:	2a00      	cmp	r2, #0
 8009f34:	dd07      	ble.n	8009f46 <_dtoa_r+0xa86>
 8009f36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009f3a:	d0ed      	beq.n	8009f18 <_dtoa_r+0xa58>
 8009f3c:	9a00      	ldr	r2, [sp, #0]
 8009f3e:	f108 0301 	add.w	r3, r8, #1
 8009f42:	7013      	strb	r3, [r2, #0]
 8009f44:	e608      	b.n	8009b58 <_dtoa_r+0x698>
 8009f46:	9b07      	ldr	r3, [sp, #28]
 8009f48:	9a07      	ldr	r2, [sp, #28]
 8009f4a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009f4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d028      	beq.n	8009fa6 <_dtoa_r+0xae6>
 8009f54:	4649      	mov	r1, r9
 8009f56:	2300      	movs	r3, #0
 8009f58:	220a      	movs	r2, #10
 8009f5a:	4658      	mov	r0, fp
 8009f5c:	f000 f9d6 	bl	800a30c <__multadd>
 8009f60:	42af      	cmp	r7, r5
 8009f62:	4681      	mov	r9, r0
 8009f64:	f04f 0300 	mov.w	r3, #0
 8009f68:	f04f 020a 	mov.w	r2, #10
 8009f6c:	4639      	mov	r1, r7
 8009f6e:	4658      	mov	r0, fp
 8009f70:	d107      	bne.n	8009f82 <_dtoa_r+0xac2>
 8009f72:	f000 f9cb 	bl	800a30c <__multadd>
 8009f76:	4607      	mov	r7, r0
 8009f78:	4605      	mov	r5, r0
 8009f7a:	9b07      	ldr	r3, [sp, #28]
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	9307      	str	r3, [sp, #28]
 8009f80:	e774      	b.n	8009e6c <_dtoa_r+0x9ac>
 8009f82:	f000 f9c3 	bl	800a30c <__multadd>
 8009f86:	4629      	mov	r1, r5
 8009f88:	4607      	mov	r7, r0
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	220a      	movs	r2, #10
 8009f8e:	4658      	mov	r0, fp
 8009f90:	f000 f9bc 	bl	800a30c <__multadd>
 8009f94:	4605      	mov	r5, r0
 8009f96:	e7f0      	b.n	8009f7a <_dtoa_r+0xaba>
 8009f98:	9b00      	ldr	r3, [sp, #0]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	bfcc      	ite	gt
 8009f9e:	461e      	movgt	r6, r3
 8009fa0:	2601      	movle	r6, #1
 8009fa2:	4456      	add	r6, sl
 8009fa4:	2700      	movs	r7, #0
 8009fa6:	4649      	mov	r1, r9
 8009fa8:	2201      	movs	r2, #1
 8009faa:	4658      	mov	r0, fp
 8009fac:	f000 fba4 	bl	800a6f8 <__lshift>
 8009fb0:	4621      	mov	r1, r4
 8009fb2:	4681      	mov	r9, r0
 8009fb4:	f000 fc0c 	bl	800a7d0 <__mcmp>
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	dcb0      	bgt.n	8009f1e <_dtoa_r+0xa5e>
 8009fbc:	d102      	bne.n	8009fc4 <_dtoa_r+0xb04>
 8009fbe:	f018 0f01 	tst.w	r8, #1
 8009fc2:	d1ac      	bne.n	8009f1e <_dtoa_r+0xa5e>
 8009fc4:	4633      	mov	r3, r6
 8009fc6:	461e      	mov	r6, r3
 8009fc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fcc:	2a30      	cmp	r2, #48	@ 0x30
 8009fce:	d0fa      	beq.n	8009fc6 <_dtoa_r+0xb06>
 8009fd0:	e5c2      	b.n	8009b58 <_dtoa_r+0x698>
 8009fd2:	459a      	cmp	sl, r3
 8009fd4:	d1a4      	bne.n	8009f20 <_dtoa_r+0xa60>
 8009fd6:	9b04      	ldr	r3, [sp, #16]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	9304      	str	r3, [sp, #16]
 8009fdc:	2331      	movs	r3, #49	@ 0x31
 8009fde:	f88a 3000 	strb.w	r3, [sl]
 8009fe2:	e5b9      	b.n	8009b58 <_dtoa_r+0x698>
 8009fe4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009fe6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a044 <_dtoa_r+0xb84>
 8009fea:	b11b      	cbz	r3, 8009ff4 <_dtoa_r+0xb34>
 8009fec:	f10a 0308 	add.w	r3, sl, #8
 8009ff0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009ff2:	6013      	str	r3, [r2, #0]
 8009ff4:	4650      	mov	r0, sl
 8009ff6:	b019      	add	sp, #100	@ 0x64
 8009ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ffc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	f77f ae37 	ble.w	8009c72 <_dtoa_r+0x7b2>
 800a004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a006:	930a      	str	r3, [sp, #40]	@ 0x28
 800a008:	2001      	movs	r0, #1
 800a00a:	e655      	b.n	8009cb8 <_dtoa_r+0x7f8>
 800a00c:	9b00      	ldr	r3, [sp, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	f77f aed6 	ble.w	8009dc0 <_dtoa_r+0x900>
 800a014:	4656      	mov	r6, sl
 800a016:	4621      	mov	r1, r4
 800a018:	4648      	mov	r0, r9
 800a01a:	f7ff f9c7 	bl	80093ac <quorem>
 800a01e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a022:	f806 8b01 	strb.w	r8, [r6], #1
 800a026:	9b00      	ldr	r3, [sp, #0]
 800a028:	eba6 020a 	sub.w	r2, r6, sl
 800a02c:	4293      	cmp	r3, r2
 800a02e:	ddb3      	ble.n	8009f98 <_dtoa_r+0xad8>
 800a030:	4649      	mov	r1, r9
 800a032:	2300      	movs	r3, #0
 800a034:	220a      	movs	r2, #10
 800a036:	4658      	mov	r0, fp
 800a038:	f000 f968 	bl	800a30c <__multadd>
 800a03c:	4681      	mov	r9, r0
 800a03e:	e7ea      	b.n	800a016 <_dtoa_r+0xb56>
 800a040:	0800d29f 	.word	0x0800d29f
 800a044:	0800d223 	.word	0x0800d223

0800a048 <_free_r>:
 800a048:	b538      	push	{r3, r4, r5, lr}
 800a04a:	4605      	mov	r5, r0
 800a04c:	2900      	cmp	r1, #0
 800a04e:	d041      	beq.n	800a0d4 <_free_r+0x8c>
 800a050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a054:	1f0c      	subs	r4, r1, #4
 800a056:	2b00      	cmp	r3, #0
 800a058:	bfb8      	it	lt
 800a05a:	18e4      	addlt	r4, r4, r3
 800a05c:	f000 f8e8 	bl	800a230 <__malloc_lock>
 800a060:	4a1d      	ldr	r2, [pc, #116]	@ (800a0d8 <_free_r+0x90>)
 800a062:	6813      	ldr	r3, [r2, #0]
 800a064:	b933      	cbnz	r3, 800a074 <_free_r+0x2c>
 800a066:	6063      	str	r3, [r4, #4]
 800a068:	6014      	str	r4, [r2, #0]
 800a06a:	4628      	mov	r0, r5
 800a06c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a070:	f000 b8e4 	b.w	800a23c <__malloc_unlock>
 800a074:	42a3      	cmp	r3, r4
 800a076:	d908      	bls.n	800a08a <_free_r+0x42>
 800a078:	6820      	ldr	r0, [r4, #0]
 800a07a:	1821      	adds	r1, r4, r0
 800a07c:	428b      	cmp	r3, r1
 800a07e:	bf01      	itttt	eq
 800a080:	6819      	ldreq	r1, [r3, #0]
 800a082:	685b      	ldreq	r3, [r3, #4]
 800a084:	1809      	addeq	r1, r1, r0
 800a086:	6021      	streq	r1, [r4, #0]
 800a088:	e7ed      	b.n	800a066 <_free_r+0x1e>
 800a08a:	461a      	mov	r2, r3
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	b10b      	cbz	r3, 800a094 <_free_r+0x4c>
 800a090:	42a3      	cmp	r3, r4
 800a092:	d9fa      	bls.n	800a08a <_free_r+0x42>
 800a094:	6811      	ldr	r1, [r2, #0]
 800a096:	1850      	adds	r0, r2, r1
 800a098:	42a0      	cmp	r0, r4
 800a09a:	d10b      	bne.n	800a0b4 <_free_r+0x6c>
 800a09c:	6820      	ldr	r0, [r4, #0]
 800a09e:	4401      	add	r1, r0
 800a0a0:	1850      	adds	r0, r2, r1
 800a0a2:	4283      	cmp	r3, r0
 800a0a4:	6011      	str	r1, [r2, #0]
 800a0a6:	d1e0      	bne.n	800a06a <_free_r+0x22>
 800a0a8:	6818      	ldr	r0, [r3, #0]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	6053      	str	r3, [r2, #4]
 800a0ae:	4408      	add	r0, r1
 800a0b0:	6010      	str	r0, [r2, #0]
 800a0b2:	e7da      	b.n	800a06a <_free_r+0x22>
 800a0b4:	d902      	bls.n	800a0bc <_free_r+0x74>
 800a0b6:	230c      	movs	r3, #12
 800a0b8:	602b      	str	r3, [r5, #0]
 800a0ba:	e7d6      	b.n	800a06a <_free_r+0x22>
 800a0bc:	6820      	ldr	r0, [r4, #0]
 800a0be:	1821      	adds	r1, r4, r0
 800a0c0:	428b      	cmp	r3, r1
 800a0c2:	bf04      	itt	eq
 800a0c4:	6819      	ldreq	r1, [r3, #0]
 800a0c6:	685b      	ldreq	r3, [r3, #4]
 800a0c8:	6063      	str	r3, [r4, #4]
 800a0ca:	bf04      	itt	eq
 800a0cc:	1809      	addeq	r1, r1, r0
 800a0ce:	6021      	streq	r1, [r4, #0]
 800a0d0:	6054      	str	r4, [r2, #4]
 800a0d2:	e7ca      	b.n	800a06a <_free_r+0x22>
 800a0d4:	bd38      	pop	{r3, r4, r5, pc}
 800a0d6:	bf00      	nop
 800a0d8:	2000083c 	.word	0x2000083c

0800a0dc <malloc>:
 800a0dc:	4b02      	ldr	r3, [pc, #8]	@ (800a0e8 <malloc+0xc>)
 800a0de:	4601      	mov	r1, r0
 800a0e0:	6818      	ldr	r0, [r3, #0]
 800a0e2:	f000 b825 	b.w	800a130 <_malloc_r>
 800a0e6:	bf00      	nop
 800a0e8:	20000018 	.word	0x20000018

0800a0ec <sbrk_aligned>:
 800a0ec:	b570      	push	{r4, r5, r6, lr}
 800a0ee:	4e0f      	ldr	r6, [pc, #60]	@ (800a12c <sbrk_aligned+0x40>)
 800a0f0:	460c      	mov	r4, r1
 800a0f2:	6831      	ldr	r1, [r6, #0]
 800a0f4:	4605      	mov	r5, r0
 800a0f6:	b911      	cbnz	r1, 800a0fe <sbrk_aligned+0x12>
 800a0f8:	f002 fb4e 	bl	800c798 <_sbrk_r>
 800a0fc:	6030      	str	r0, [r6, #0]
 800a0fe:	4621      	mov	r1, r4
 800a100:	4628      	mov	r0, r5
 800a102:	f002 fb49 	bl	800c798 <_sbrk_r>
 800a106:	1c43      	adds	r3, r0, #1
 800a108:	d103      	bne.n	800a112 <sbrk_aligned+0x26>
 800a10a:	f04f 34ff 	mov.w	r4, #4294967295
 800a10e:	4620      	mov	r0, r4
 800a110:	bd70      	pop	{r4, r5, r6, pc}
 800a112:	1cc4      	adds	r4, r0, #3
 800a114:	f024 0403 	bic.w	r4, r4, #3
 800a118:	42a0      	cmp	r0, r4
 800a11a:	d0f8      	beq.n	800a10e <sbrk_aligned+0x22>
 800a11c:	1a21      	subs	r1, r4, r0
 800a11e:	4628      	mov	r0, r5
 800a120:	f002 fb3a 	bl	800c798 <_sbrk_r>
 800a124:	3001      	adds	r0, #1
 800a126:	d1f2      	bne.n	800a10e <sbrk_aligned+0x22>
 800a128:	e7ef      	b.n	800a10a <sbrk_aligned+0x1e>
 800a12a:	bf00      	nop
 800a12c:	20000838 	.word	0x20000838

0800a130 <_malloc_r>:
 800a130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a134:	1ccd      	adds	r5, r1, #3
 800a136:	f025 0503 	bic.w	r5, r5, #3
 800a13a:	3508      	adds	r5, #8
 800a13c:	2d0c      	cmp	r5, #12
 800a13e:	bf38      	it	cc
 800a140:	250c      	movcc	r5, #12
 800a142:	2d00      	cmp	r5, #0
 800a144:	4606      	mov	r6, r0
 800a146:	db01      	blt.n	800a14c <_malloc_r+0x1c>
 800a148:	42a9      	cmp	r1, r5
 800a14a:	d904      	bls.n	800a156 <_malloc_r+0x26>
 800a14c:	230c      	movs	r3, #12
 800a14e:	6033      	str	r3, [r6, #0]
 800a150:	2000      	movs	r0, #0
 800a152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a156:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a22c <_malloc_r+0xfc>
 800a15a:	f000 f869 	bl	800a230 <__malloc_lock>
 800a15e:	f8d8 3000 	ldr.w	r3, [r8]
 800a162:	461c      	mov	r4, r3
 800a164:	bb44      	cbnz	r4, 800a1b8 <_malloc_r+0x88>
 800a166:	4629      	mov	r1, r5
 800a168:	4630      	mov	r0, r6
 800a16a:	f7ff ffbf 	bl	800a0ec <sbrk_aligned>
 800a16e:	1c43      	adds	r3, r0, #1
 800a170:	4604      	mov	r4, r0
 800a172:	d158      	bne.n	800a226 <_malloc_r+0xf6>
 800a174:	f8d8 4000 	ldr.w	r4, [r8]
 800a178:	4627      	mov	r7, r4
 800a17a:	2f00      	cmp	r7, #0
 800a17c:	d143      	bne.n	800a206 <_malloc_r+0xd6>
 800a17e:	2c00      	cmp	r4, #0
 800a180:	d04b      	beq.n	800a21a <_malloc_r+0xea>
 800a182:	6823      	ldr	r3, [r4, #0]
 800a184:	4639      	mov	r1, r7
 800a186:	4630      	mov	r0, r6
 800a188:	eb04 0903 	add.w	r9, r4, r3
 800a18c:	f002 fb04 	bl	800c798 <_sbrk_r>
 800a190:	4581      	cmp	r9, r0
 800a192:	d142      	bne.n	800a21a <_malloc_r+0xea>
 800a194:	6821      	ldr	r1, [r4, #0]
 800a196:	1a6d      	subs	r5, r5, r1
 800a198:	4629      	mov	r1, r5
 800a19a:	4630      	mov	r0, r6
 800a19c:	f7ff ffa6 	bl	800a0ec <sbrk_aligned>
 800a1a0:	3001      	adds	r0, #1
 800a1a2:	d03a      	beq.n	800a21a <_malloc_r+0xea>
 800a1a4:	6823      	ldr	r3, [r4, #0]
 800a1a6:	442b      	add	r3, r5
 800a1a8:	6023      	str	r3, [r4, #0]
 800a1aa:	f8d8 3000 	ldr.w	r3, [r8]
 800a1ae:	685a      	ldr	r2, [r3, #4]
 800a1b0:	bb62      	cbnz	r2, 800a20c <_malloc_r+0xdc>
 800a1b2:	f8c8 7000 	str.w	r7, [r8]
 800a1b6:	e00f      	b.n	800a1d8 <_malloc_r+0xa8>
 800a1b8:	6822      	ldr	r2, [r4, #0]
 800a1ba:	1b52      	subs	r2, r2, r5
 800a1bc:	d420      	bmi.n	800a200 <_malloc_r+0xd0>
 800a1be:	2a0b      	cmp	r2, #11
 800a1c0:	d917      	bls.n	800a1f2 <_malloc_r+0xc2>
 800a1c2:	1961      	adds	r1, r4, r5
 800a1c4:	42a3      	cmp	r3, r4
 800a1c6:	6025      	str	r5, [r4, #0]
 800a1c8:	bf18      	it	ne
 800a1ca:	6059      	strne	r1, [r3, #4]
 800a1cc:	6863      	ldr	r3, [r4, #4]
 800a1ce:	bf08      	it	eq
 800a1d0:	f8c8 1000 	streq.w	r1, [r8]
 800a1d4:	5162      	str	r2, [r4, r5]
 800a1d6:	604b      	str	r3, [r1, #4]
 800a1d8:	4630      	mov	r0, r6
 800a1da:	f000 f82f 	bl	800a23c <__malloc_unlock>
 800a1de:	f104 000b 	add.w	r0, r4, #11
 800a1e2:	1d23      	adds	r3, r4, #4
 800a1e4:	f020 0007 	bic.w	r0, r0, #7
 800a1e8:	1ac2      	subs	r2, r0, r3
 800a1ea:	bf1c      	itt	ne
 800a1ec:	1a1b      	subne	r3, r3, r0
 800a1ee:	50a3      	strne	r3, [r4, r2]
 800a1f0:	e7af      	b.n	800a152 <_malloc_r+0x22>
 800a1f2:	6862      	ldr	r2, [r4, #4]
 800a1f4:	42a3      	cmp	r3, r4
 800a1f6:	bf0c      	ite	eq
 800a1f8:	f8c8 2000 	streq.w	r2, [r8]
 800a1fc:	605a      	strne	r2, [r3, #4]
 800a1fe:	e7eb      	b.n	800a1d8 <_malloc_r+0xa8>
 800a200:	4623      	mov	r3, r4
 800a202:	6864      	ldr	r4, [r4, #4]
 800a204:	e7ae      	b.n	800a164 <_malloc_r+0x34>
 800a206:	463c      	mov	r4, r7
 800a208:	687f      	ldr	r7, [r7, #4]
 800a20a:	e7b6      	b.n	800a17a <_malloc_r+0x4a>
 800a20c:	461a      	mov	r2, r3
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	42a3      	cmp	r3, r4
 800a212:	d1fb      	bne.n	800a20c <_malloc_r+0xdc>
 800a214:	2300      	movs	r3, #0
 800a216:	6053      	str	r3, [r2, #4]
 800a218:	e7de      	b.n	800a1d8 <_malloc_r+0xa8>
 800a21a:	230c      	movs	r3, #12
 800a21c:	6033      	str	r3, [r6, #0]
 800a21e:	4630      	mov	r0, r6
 800a220:	f000 f80c 	bl	800a23c <__malloc_unlock>
 800a224:	e794      	b.n	800a150 <_malloc_r+0x20>
 800a226:	6005      	str	r5, [r0, #0]
 800a228:	e7d6      	b.n	800a1d8 <_malloc_r+0xa8>
 800a22a:	bf00      	nop
 800a22c:	2000083c 	.word	0x2000083c

0800a230 <__malloc_lock>:
 800a230:	4801      	ldr	r0, [pc, #4]	@ (800a238 <__malloc_lock+0x8>)
 800a232:	f7ff b8a4 	b.w	800937e <__retarget_lock_acquire_recursive>
 800a236:	bf00      	nop
 800a238:	20000834 	.word	0x20000834

0800a23c <__malloc_unlock>:
 800a23c:	4801      	ldr	r0, [pc, #4]	@ (800a244 <__malloc_unlock+0x8>)
 800a23e:	f7ff b89f 	b.w	8009380 <__retarget_lock_release_recursive>
 800a242:	bf00      	nop
 800a244:	20000834 	.word	0x20000834

0800a248 <_Balloc>:
 800a248:	b570      	push	{r4, r5, r6, lr}
 800a24a:	69c6      	ldr	r6, [r0, #28]
 800a24c:	4604      	mov	r4, r0
 800a24e:	460d      	mov	r5, r1
 800a250:	b976      	cbnz	r6, 800a270 <_Balloc+0x28>
 800a252:	2010      	movs	r0, #16
 800a254:	f7ff ff42 	bl	800a0dc <malloc>
 800a258:	4602      	mov	r2, r0
 800a25a:	61e0      	str	r0, [r4, #28]
 800a25c:	b920      	cbnz	r0, 800a268 <_Balloc+0x20>
 800a25e:	4b18      	ldr	r3, [pc, #96]	@ (800a2c0 <_Balloc+0x78>)
 800a260:	4818      	ldr	r0, [pc, #96]	@ (800a2c4 <_Balloc+0x7c>)
 800a262:	216b      	movs	r1, #107	@ 0x6b
 800a264:	f002 fab0 	bl	800c7c8 <__assert_func>
 800a268:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a26c:	6006      	str	r6, [r0, #0]
 800a26e:	60c6      	str	r6, [r0, #12]
 800a270:	69e6      	ldr	r6, [r4, #28]
 800a272:	68f3      	ldr	r3, [r6, #12]
 800a274:	b183      	cbz	r3, 800a298 <_Balloc+0x50>
 800a276:	69e3      	ldr	r3, [r4, #28]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a27e:	b9b8      	cbnz	r0, 800a2b0 <_Balloc+0x68>
 800a280:	2101      	movs	r1, #1
 800a282:	fa01 f605 	lsl.w	r6, r1, r5
 800a286:	1d72      	adds	r2, r6, #5
 800a288:	0092      	lsls	r2, r2, #2
 800a28a:	4620      	mov	r0, r4
 800a28c:	f002 faba 	bl	800c804 <_calloc_r>
 800a290:	b160      	cbz	r0, 800a2ac <_Balloc+0x64>
 800a292:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a296:	e00e      	b.n	800a2b6 <_Balloc+0x6e>
 800a298:	2221      	movs	r2, #33	@ 0x21
 800a29a:	2104      	movs	r1, #4
 800a29c:	4620      	mov	r0, r4
 800a29e:	f002 fab1 	bl	800c804 <_calloc_r>
 800a2a2:	69e3      	ldr	r3, [r4, #28]
 800a2a4:	60f0      	str	r0, [r6, #12]
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1e4      	bne.n	800a276 <_Balloc+0x2e>
 800a2ac:	2000      	movs	r0, #0
 800a2ae:	bd70      	pop	{r4, r5, r6, pc}
 800a2b0:	6802      	ldr	r2, [r0, #0]
 800a2b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a2bc:	e7f7      	b.n	800a2ae <_Balloc+0x66>
 800a2be:	bf00      	nop
 800a2c0:	0800d230 	.word	0x0800d230
 800a2c4:	0800d2b0 	.word	0x0800d2b0

0800a2c8 <_Bfree>:
 800a2c8:	b570      	push	{r4, r5, r6, lr}
 800a2ca:	69c6      	ldr	r6, [r0, #28]
 800a2cc:	4605      	mov	r5, r0
 800a2ce:	460c      	mov	r4, r1
 800a2d0:	b976      	cbnz	r6, 800a2f0 <_Bfree+0x28>
 800a2d2:	2010      	movs	r0, #16
 800a2d4:	f7ff ff02 	bl	800a0dc <malloc>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	61e8      	str	r0, [r5, #28]
 800a2dc:	b920      	cbnz	r0, 800a2e8 <_Bfree+0x20>
 800a2de:	4b09      	ldr	r3, [pc, #36]	@ (800a304 <_Bfree+0x3c>)
 800a2e0:	4809      	ldr	r0, [pc, #36]	@ (800a308 <_Bfree+0x40>)
 800a2e2:	218f      	movs	r1, #143	@ 0x8f
 800a2e4:	f002 fa70 	bl	800c7c8 <__assert_func>
 800a2e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2ec:	6006      	str	r6, [r0, #0]
 800a2ee:	60c6      	str	r6, [r0, #12]
 800a2f0:	b13c      	cbz	r4, 800a302 <_Bfree+0x3a>
 800a2f2:	69eb      	ldr	r3, [r5, #28]
 800a2f4:	6862      	ldr	r2, [r4, #4]
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2fc:	6021      	str	r1, [r4, #0]
 800a2fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a302:	bd70      	pop	{r4, r5, r6, pc}
 800a304:	0800d230 	.word	0x0800d230
 800a308:	0800d2b0 	.word	0x0800d2b0

0800a30c <__multadd>:
 800a30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a310:	690d      	ldr	r5, [r1, #16]
 800a312:	4607      	mov	r7, r0
 800a314:	460c      	mov	r4, r1
 800a316:	461e      	mov	r6, r3
 800a318:	f101 0c14 	add.w	ip, r1, #20
 800a31c:	2000      	movs	r0, #0
 800a31e:	f8dc 3000 	ldr.w	r3, [ip]
 800a322:	b299      	uxth	r1, r3
 800a324:	fb02 6101 	mla	r1, r2, r1, r6
 800a328:	0c1e      	lsrs	r6, r3, #16
 800a32a:	0c0b      	lsrs	r3, r1, #16
 800a32c:	fb02 3306 	mla	r3, r2, r6, r3
 800a330:	b289      	uxth	r1, r1
 800a332:	3001      	adds	r0, #1
 800a334:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a338:	4285      	cmp	r5, r0
 800a33a:	f84c 1b04 	str.w	r1, [ip], #4
 800a33e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a342:	dcec      	bgt.n	800a31e <__multadd+0x12>
 800a344:	b30e      	cbz	r6, 800a38a <__multadd+0x7e>
 800a346:	68a3      	ldr	r3, [r4, #8]
 800a348:	42ab      	cmp	r3, r5
 800a34a:	dc19      	bgt.n	800a380 <__multadd+0x74>
 800a34c:	6861      	ldr	r1, [r4, #4]
 800a34e:	4638      	mov	r0, r7
 800a350:	3101      	adds	r1, #1
 800a352:	f7ff ff79 	bl	800a248 <_Balloc>
 800a356:	4680      	mov	r8, r0
 800a358:	b928      	cbnz	r0, 800a366 <__multadd+0x5a>
 800a35a:	4602      	mov	r2, r0
 800a35c:	4b0c      	ldr	r3, [pc, #48]	@ (800a390 <__multadd+0x84>)
 800a35e:	480d      	ldr	r0, [pc, #52]	@ (800a394 <__multadd+0x88>)
 800a360:	21ba      	movs	r1, #186	@ 0xba
 800a362:	f002 fa31 	bl	800c7c8 <__assert_func>
 800a366:	6922      	ldr	r2, [r4, #16]
 800a368:	3202      	adds	r2, #2
 800a36a:	f104 010c 	add.w	r1, r4, #12
 800a36e:	0092      	lsls	r2, r2, #2
 800a370:	300c      	adds	r0, #12
 800a372:	f7ff f806 	bl	8009382 <memcpy>
 800a376:	4621      	mov	r1, r4
 800a378:	4638      	mov	r0, r7
 800a37a:	f7ff ffa5 	bl	800a2c8 <_Bfree>
 800a37e:	4644      	mov	r4, r8
 800a380:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a384:	3501      	adds	r5, #1
 800a386:	615e      	str	r6, [r3, #20]
 800a388:	6125      	str	r5, [r4, #16]
 800a38a:	4620      	mov	r0, r4
 800a38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a390:	0800d29f 	.word	0x0800d29f
 800a394:	0800d2b0 	.word	0x0800d2b0

0800a398 <__s2b>:
 800a398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a39c:	460c      	mov	r4, r1
 800a39e:	4615      	mov	r5, r2
 800a3a0:	461f      	mov	r7, r3
 800a3a2:	2209      	movs	r2, #9
 800a3a4:	3308      	adds	r3, #8
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3ac:	2100      	movs	r1, #0
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	db09      	blt.n	800a3c8 <__s2b+0x30>
 800a3b4:	4630      	mov	r0, r6
 800a3b6:	f7ff ff47 	bl	800a248 <_Balloc>
 800a3ba:	b940      	cbnz	r0, 800a3ce <__s2b+0x36>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	4b19      	ldr	r3, [pc, #100]	@ (800a424 <__s2b+0x8c>)
 800a3c0:	4819      	ldr	r0, [pc, #100]	@ (800a428 <__s2b+0x90>)
 800a3c2:	21d3      	movs	r1, #211	@ 0xd3
 800a3c4:	f002 fa00 	bl	800c7c8 <__assert_func>
 800a3c8:	0052      	lsls	r2, r2, #1
 800a3ca:	3101      	adds	r1, #1
 800a3cc:	e7f0      	b.n	800a3b0 <__s2b+0x18>
 800a3ce:	9b08      	ldr	r3, [sp, #32]
 800a3d0:	6143      	str	r3, [r0, #20]
 800a3d2:	2d09      	cmp	r5, #9
 800a3d4:	f04f 0301 	mov.w	r3, #1
 800a3d8:	6103      	str	r3, [r0, #16]
 800a3da:	dd16      	ble.n	800a40a <__s2b+0x72>
 800a3dc:	f104 0909 	add.w	r9, r4, #9
 800a3e0:	46c8      	mov	r8, r9
 800a3e2:	442c      	add	r4, r5
 800a3e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a3e8:	4601      	mov	r1, r0
 800a3ea:	3b30      	subs	r3, #48	@ 0x30
 800a3ec:	220a      	movs	r2, #10
 800a3ee:	4630      	mov	r0, r6
 800a3f0:	f7ff ff8c 	bl	800a30c <__multadd>
 800a3f4:	45a0      	cmp	r8, r4
 800a3f6:	d1f5      	bne.n	800a3e4 <__s2b+0x4c>
 800a3f8:	f1a5 0408 	sub.w	r4, r5, #8
 800a3fc:	444c      	add	r4, r9
 800a3fe:	1b2d      	subs	r5, r5, r4
 800a400:	1963      	adds	r3, r4, r5
 800a402:	42bb      	cmp	r3, r7
 800a404:	db04      	blt.n	800a410 <__s2b+0x78>
 800a406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a40a:	340a      	adds	r4, #10
 800a40c:	2509      	movs	r5, #9
 800a40e:	e7f6      	b.n	800a3fe <__s2b+0x66>
 800a410:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a414:	4601      	mov	r1, r0
 800a416:	3b30      	subs	r3, #48	@ 0x30
 800a418:	220a      	movs	r2, #10
 800a41a:	4630      	mov	r0, r6
 800a41c:	f7ff ff76 	bl	800a30c <__multadd>
 800a420:	e7ee      	b.n	800a400 <__s2b+0x68>
 800a422:	bf00      	nop
 800a424:	0800d29f 	.word	0x0800d29f
 800a428:	0800d2b0 	.word	0x0800d2b0

0800a42c <__hi0bits>:
 800a42c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a430:	4603      	mov	r3, r0
 800a432:	bf36      	itet	cc
 800a434:	0403      	lslcc	r3, r0, #16
 800a436:	2000      	movcs	r0, #0
 800a438:	2010      	movcc	r0, #16
 800a43a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a43e:	bf3c      	itt	cc
 800a440:	021b      	lslcc	r3, r3, #8
 800a442:	3008      	addcc	r0, #8
 800a444:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a448:	bf3c      	itt	cc
 800a44a:	011b      	lslcc	r3, r3, #4
 800a44c:	3004      	addcc	r0, #4
 800a44e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a452:	bf3c      	itt	cc
 800a454:	009b      	lslcc	r3, r3, #2
 800a456:	3002      	addcc	r0, #2
 800a458:	2b00      	cmp	r3, #0
 800a45a:	db05      	blt.n	800a468 <__hi0bits+0x3c>
 800a45c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a460:	f100 0001 	add.w	r0, r0, #1
 800a464:	bf08      	it	eq
 800a466:	2020      	moveq	r0, #32
 800a468:	4770      	bx	lr

0800a46a <__lo0bits>:
 800a46a:	6803      	ldr	r3, [r0, #0]
 800a46c:	4602      	mov	r2, r0
 800a46e:	f013 0007 	ands.w	r0, r3, #7
 800a472:	d00b      	beq.n	800a48c <__lo0bits+0x22>
 800a474:	07d9      	lsls	r1, r3, #31
 800a476:	d421      	bmi.n	800a4bc <__lo0bits+0x52>
 800a478:	0798      	lsls	r0, r3, #30
 800a47a:	bf49      	itett	mi
 800a47c:	085b      	lsrmi	r3, r3, #1
 800a47e:	089b      	lsrpl	r3, r3, #2
 800a480:	2001      	movmi	r0, #1
 800a482:	6013      	strmi	r3, [r2, #0]
 800a484:	bf5c      	itt	pl
 800a486:	6013      	strpl	r3, [r2, #0]
 800a488:	2002      	movpl	r0, #2
 800a48a:	4770      	bx	lr
 800a48c:	b299      	uxth	r1, r3
 800a48e:	b909      	cbnz	r1, 800a494 <__lo0bits+0x2a>
 800a490:	0c1b      	lsrs	r3, r3, #16
 800a492:	2010      	movs	r0, #16
 800a494:	b2d9      	uxtb	r1, r3
 800a496:	b909      	cbnz	r1, 800a49c <__lo0bits+0x32>
 800a498:	3008      	adds	r0, #8
 800a49a:	0a1b      	lsrs	r3, r3, #8
 800a49c:	0719      	lsls	r1, r3, #28
 800a49e:	bf04      	itt	eq
 800a4a0:	091b      	lsreq	r3, r3, #4
 800a4a2:	3004      	addeq	r0, #4
 800a4a4:	0799      	lsls	r1, r3, #30
 800a4a6:	bf04      	itt	eq
 800a4a8:	089b      	lsreq	r3, r3, #2
 800a4aa:	3002      	addeq	r0, #2
 800a4ac:	07d9      	lsls	r1, r3, #31
 800a4ae:	d403      	bmi.n	800a4b8 <__lo0bits+0x4e>
 800a4b0:	085b      	lsrs	r3, r3, #1
 800a4b2:	f100 0001 	add.w	r0, r0, #1
 800a4b6:	d003      	beq.n	800a4c0 <__lo0bits+0x56>
 800a4b8:	6013      	str	r3, [r2, #0]
 800a4ba:	4770      	bx	lr
 800a4bc:	2000      	movs	r0, #0
 800a4be:	4770      	bx	lr
 800a4c0:	2020      	movs	r0, #32
 800a4c2:	4770      	bx	lr

0800a4c4 <__i2b>:
 800a4c4:	b510      	push	{r4, lr}
 800a4c6:	460c      	mov	r4, r1
 800a4c8:	2101      	movs	r1, #1
 800a4ca:	f7ff febd 	bl	800a248 <_Balloc>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	b928      	cbnz	r0, 800a4de <__i2b+0x1a>
 800a4d2:	4b05      	ldr	r3, [pc, #20]	@ (800a4e8 <__i2b+0x24>)
 800a4d4:	4805      	ldr	r0, [pc, #20]	@ (800a4ec <__i2b+0x28>)
 800a4d6:	f240 1145 	movw	r1, #325	@ 0x145
 800a4da:	f002 f975 	bl	800c7c8 <__assert_func>
 800a4de:	2301      	movs	r3, #1
 800a4e0:	6144      	str	r4, [r0, #20]
 800a4e2:	6103      	str	r3, [r0, #16]
 800a4e4:	bd10      	pop	{r4, pc}
 800a4e6:	bf00      	nop
 800a4e8:	0800d29f 	.word	0x0800d29f
 800a4ec:	0800d2b0 	.word	0x0800d2b0

0800a4f0 <__multiply>:
 800a4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f4:	4614      	mov	r4, r2
 800a4f6:	690a      	ldr	r2, [r1, #16]
 800a4f8:	6923      	ldr	r3, [r4, #16]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	bfa8      	it	ge
 800a4fe:	4623      	movge	r3, r4
 800a500:	460f      	mov	r7, r1
 800a502:	bfa4      	itt	ge
 800a504:	460c      	movge	r4, r1
 800a506:	461f      	movge	r7, r3
 800a508:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a50c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a510:	68a3      	ldr	r3, [r4, #8]
 800a512:	6861      	ldr	r1, [r4, #4]
 800a514:	eb0a 0609 	add.w	r6, sl, r9
 800a518:	42b3      	cmp	r3, r6
 800a51a:	b085      	sub	sp, #20
 800a51c:	bfb8      	it	lt
 800a51e:	3101      	addlt	r1, #1
 800a520:	f7ff fe92 	bl	800a248 <_Balloc>
 800a524:	b930      	cbnz	r0, 800a534 <__multiply+0x44>
 800a526:	4602      	mov	r2, r0
 800a528:	4b44      	ldr	r3, [pc, #272]	@ (800a63c <__multiply+0x14c>)
 800a52a:	4845      	ldr	r0, [pc, #276]	@ (800a640 <__multiply+0x150>)
 800a52c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a530:	f002 f94a 	bl	800c7c8 <__assert_func>
 800a534:	f100 0514 	add.w	r5, r0, #20
 800a538:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a53c:	462b      	mov	r3, r5
 800a53e:	2200      	movs	r2, #0
 800a540:	4543      	cmp	r3, r8
 800a542:	d321      	bcc.n	800a588 <__multiply+0x98>
 800a544:	f107 0114 	add.w	r1, r7, #20
 800a548:	f104 0214 	add.w	r2, r4, #20
 800a54c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a550:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a554:	9302      	str	r3, [sp, #8]
 800a556:	1b13      	subs	r3, r2, r4
 800a558:	3b15      	subs	r3, #21
 800a55a:	f023 0303 	bic.w	r3, r3, #3
 800a55e:	3304      	adds	r3, #4
 800a560:	f104 0715 	add.w	r7, r4, #21
 800a564:	42ba      	cmp	r2, r7
 800a566:	bf38      	it	cc
 800a568:	2304      	movcc	r3, #4
 800a56a:	9301      	str	r3, [sp, #4]
 800a56c:	9b02      	ldr	r3, [sp, #8]
 800a56e:	9103      	str	r1, [sp, #12]
 800a570:	428b      	cmp	r3, r1
 800a572:	d80c      	bhi.n	800a58e <__multiply+0x9e>
 800a574:	2e00      	cmp	r6, #0
 800a576:	dd03      	ble.n	800a580 <__multiply+0x90>
 800a578:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d05b      	beq.n	800a638 <__multiply+0x148>
 800a580:	6106      	str	r6, [r0, #16]
 800a582:	b005      	add	sp, #20
 800a584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a588:	f843 2b04 	str.w	r2, [r3], #4
 800a58c:	e7d8      	b.n	800a540 <__multiply+0x50>
 800a58e:	f8b1 a000 	ldrh.w	sl, [r1]
 800a592:	f1ba 0f00 	cmp.w	sl, #0
 800a596:	d024      	beq.n	800a5e2 <__multiply+0xf2>
 800a598:	f104 0e14 	add.w	lr, r4, #20
 800a59c:	46a9      	mov	r9, r5
 800a59e:	f04f 0c00 	mov.w	ip, #0
 800a5a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a5a6:	f8d9 3000 	ldr.w	r3, [r9]
 800a5aa:	fa1f fb87 	uxth.w	fp, r7
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	fb0a 330b 	mla	r3, sl, fp, r3
 800a5b4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a5b8:	f8d9 7000 	ldr.w	r7, [r9]
 800a5bc:	4463      	add	r3, ip
 800a5be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a5c2:	fb0a c70b 	mla	r7, sl, fp, ip
 800a5c6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a5d0:	4572      	cmp	r2, lr
 800a5d2:	f849 3b04 	str.w	r3, [r9], #4
 800a5d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a5da:	d8e2      	bhi.n	800a5a2 <__multiply+0xb2>
 800a5dc:	9b01      	ldr	r3, [sp, #4]
 800a5de:	f845 c003 	str.w	ip, [r5, r3]
 800a5e2:	9b03      	ldr	r3, [sp, #12]
 800a5e4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a5e8:	3104      	adds	r1, #4
 800a5ea:	f1b9 0f00 	cmp.w	r9, #0
 800a5ee:	d021      	beq.n	800a634 <__multiply+0x144>
 800a5f0:	682b      	ldr	r3, [r5, #0]
 800a5f2:	f104 0c14 	add.w	ip, r4, #20
 800a5f6:	46ae      	mov	lr, r5
 800a5f8:	f04f 0a00 	mov.w	sl, #0
 800a5fc:	f8bc b000 	ldrh.w	fp, [ip]
 800a600:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a604:	fb09 770b 	mla	r7, r9, fp, r7
 800a608:	4457      	add	r7, sl
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a610:	f84e 3b04 	str.w	r3, [lr], #4
 800a614:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a618:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a61c:	f8be 3000 	ldrh.w	r3, [lr]
 800a620:	fb09 330a 	mla	r3, r9, sl, r3
 800a624:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a628:	4562      	cmp	r2, ip
 800a62a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a62e:	d8e5      	bhi.n	800a5fc <__multiply+0x10c>
 800a630:	9f01      	ldr	r7, [sp, #4]
 800a632:	51eb      	str	r3, [r5, r7]
 800a634:	3504      	adds	r5, #4
 800a636:	e799      	b.n	800a56c <__multiply+0x7c>
 800a638:	3e01      	subs	r6, #1
 800a63a:	e79b      	b.n	800a574 <__multiply+0x84>
 800a63c:	0800d29f 	.word	0x0800d29f
 800a640:	0800d2b0 	.word	0x0800d2b0

0800a644 <__pow5mult>:
 800a644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a648:	4615      	mov	r5, r2
 800a64a:	f012 0203 	ands.w	r2, r2, #3
 800a64e:	4607      	mov	r7, r0
 800a650:	460e      	mov	r6, r1
 800a652:	d007      	beq.n	800a664 <__pow5mult+0x20>
 800a654:	4c25      	ldr	r4, [pc, #148]	@ (800a6ec <__pow5mult+0xa8>)
 800a656:	3a01      	subs	r2, #1
 800a658:	2300      	movs	r3, #0
 800a65a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a65e:	f7ff fe55 	bl	800a30c <__multadd>
 800a662:	4606      	mov	r6, r0
 800a664:	10ad      	asrs	r5, r5, #2
 800a666:	d03d      	beq.n	800a6e4 <__pow5mult+0xa0>
 800a668:	69fc      	ldr	r4, [r7, #28]
 800a66a:	b97c      	cbnz	r4, 800a68c <__pow5mult+0x48>
 800a66c:	2010      	movs	r0, #16
 800a66e:	f7ff fd35 	bl	800a0dc <malloc>
 800a672:	4602      	mov	r2, r0
 800a674:	61f8      	str	r0, [r7, #28]
 800a676:	b928      	cbnz	r0, 800a684 <__pow5mult+0x40>
 800a678:	4b1d      	ldr	r3, [pc, #116]	@ (800a6f0 <__pow5mult+0xac>)
 800a67a:	481e      	ldr	r0, [pc, #120]	@ (800a6f4 <__pow5mult+0xb0>)
 800a67c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a680:	f002 f8a2 	bl	800c7c8 <__assert_func>
 800a684:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a688:	6004      	str	r4, [r0, #0]
 800a68a:	60c4      	str	r4, [r0, #12]
 800a68c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a690:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a694:	b94c      	cbnz	r4, 800a6aa <__pow5mult+0x66>
 800a696:	f240 2171 	movw	r1, #625	@ 0x271
 800a69a:	4638      	mov	r0, r7
 800a69c:	f7ff ff12 	bl	800a4c4 <__i2b>
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a6a6:	4604      	mov	r4, r0
 800a6a8:	6003      	str	r3, [r0, #0]
 800a6aa:	f04f 0900 	mov.w	r9, #0
 800a6ae:	07eb      	lsls	r3, r5, #31
 800a6b0:	d50a      	bpl.n	800a6c8 <__pow5mult+0x84>
 800a6b2:	4631      	mov	r1, r6
 800a6b4:	4622      	mov	r2, r4
 800a6b6:	4638      	mov	r0, r7
 800a6b8:	f7ff ff1a 	bl	800a4f0 <__multiply>
 800a6bc:	4631      	mov	r1, r6
 800a6be:	4680      	mov	r8, r0
 800a6c0:	4638      	mov	r0, r7
 800a6c2:	f7ff fe01 	bl	800a2c8 <_Bfree>
 800a6c6:	4646      	mov	r6, r8
 800a6c8:	106d      	asrs	r5, r5, #1
 800a6ca:	d00b      	beq.n	800a6e4 <__pow5mult+0xa0>
 800a6cc:	6820      	ldr	r0, [r4, #0]
 800a6ce:	b938      	cbnz	r0, 800a6e0 <__pow5mult+0x9c>
 800a6d0:	4622      	mov	r2, r4
 800a6d2:	4621      	mov	r1, r4
 800a6d4:	4638      	mov	r0, r7
 800a6d6:	f7ff ff0b 	bl	800a4f0 <__multiply>
 800a6da:	6020      	str	r0, [r4, #0]
 800a6dc:	f8c0 9000 	str.w	r9, [r0]
 800a6e0:	4604      	mov	r4, r0
 800a6e2:	e7e4      	b.n	800a6ae <__pow5mult+0x6a>
 800a6e4:	4630      	mov	r0, r6
 800a6e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6ea:	bf00      	nop
 800a6ec:	0800d30c 	.word	0x0800d30c
 800a6f0:	0800d230 	.word	0x0800d230
 800a6f4:	0800d2b0 	.word	0x0800d2b0

0800a6f8 <__lshift>:
 800a6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6fc:	460c      	mov	r4, r1
 800a6fe:	6849      	ldr	r1, [r1, #4]
 800a700:	6923      	ldr	r3, [r4, #16]
 800a702:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a706:	68a3      	ldr	r3, [r4, #8]
 800a708:	4607      	mov	r7, r0
 800a70a:	4691      	mov	r9, r2
 800a70c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a710:	f108 0601 	add.w	r6, r8, #1
 800a714:	42b3      	cmp	r3, r6
 800a716:	db0b      	blt.n	800a730 <__lshift+0x38>
 800a718:	4638      	mov	r0, r7
 800a71a:	f7ff fd95 	bl	800a248 <_Balloc>
 800a71e:	4605      	mov	r5, r0
 800a720:	b948      	cbnz	r0, 800a736 <__lshift+0x3e>
 800a722:	4602      	mov	r2, r0
 800a724:	4b28      	ldr	r3, [pc, #160]	@ (800a7c8 <__lshift+0xd0>)
 800a726:	4829      	ldr	r0, [pc, #164]	@ (800a7cc <__lshift+0xd4>)
 800a728:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a72c:	f002 f84c 	bl	800c7c8 <__assert_func>
 800a730:	3101      	adds	r1, #1
 800a732:	005b      	lsls	r3, r3, #1
 800a734:	e7ee      	b.n	800a714 <__lshift+0x1c>
 800a736:	2300      	movs	r3, #0
 800a738:	f100 0114 	add.w	r1, r0, #20
 800a73c:	f100 0210 	add.w	r2, r0, #16
 800a740:	4618      	mov	r0, r3
 800a742:	4553      	cmp	r3, sl
 800a744:	db33      	blt.n	800a7ae <__lshift+0xb6>
 800a746:	6920      	ldr	r0, [r4, #16]
 800a748:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a74c:	f104 0314 	add.w	r3, r4, #20
 800a750:	f019 091f 	ands.w	r9, r9, #31
 800a754:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a758:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a75c:	d02b      	beq.n	800a7b6 <__lshift+0xbe>
 800a75e:	f1c9 0e20 	rsb	lr, r9, #32
 800a762:	468a      	mov	sl, r1
 800a764:	2200      	movs	r2, #0
 800a766:	6818      	ldr	r0, [r3, #0]
 800a768:	fa00 f009 	lsl.w	r0, r0, r9
 800a76c:	4310      	orrs	r0, r2
 800a76e:	f84a 0b04 	str.w	r0, [sl], #4
 800a772:	f853 2b04 	ldr.w	r2, [r3], #4
 800a776:	459c      	cmp	ip, r3
 800a778:	fa22 f20e 	lsr.w	r2, r2, lr
 800a77c:	d8f3      	bhi.n	800a766 <__lshift+0x6e>
 800a77e:	ebac 0304 	sub.w	r3, ip, r4
 800a782:	3b15      	subs	r3, #21
 800a784:	f023 0303 	bic.w	r3, r3, #3
 800a788:	3304      	adds	r3, #4
 800a78a:	f104 0015 	add.w	r0, r4, #21
 800a78e:	4584      	cmp	ip, r0
 800a790:	bf38      	it	cc
 800a792:	2304      	movcc	r3, #4
 800a794:	50ca      	str	r2, [r1, r3]
 800a796:	b10a      	cbz	r2, 800a79c <__lshift+0xa4>
 800a798:	f108 0602 	add.w	r6, r8, #2
 800a79c:	3e01      	subs	r6, #1
 800a79e:	4638      	mov	r0, r7
 800a7a0:	612e      	str	r6, [r5, #16]
 800a7a2:	4621      	mov	r1, r4
 800a7a4:	f7ff fd90 	bl	800a2c8 <_Bfree>
 800a7a8:	4628      	mov	r0, r5
 800a7aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ae:	f842 0f04 	str.w	r0, [r2, #4]!
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	e7c5      	b.n	800a742 <__lshift+0x4a>
 800a7b6:	3904      	subs	r1, #4
 800a7b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7bc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a7c0:	459c      	cmp	ip, r3
 800a7c2:	d8f9      	bhi.n	800a7b8 <__lshift+0xc0>
 800a7c4:	e7ea      	b.n	800a79c <__lshift+0xa4>
 800a7c6:	bf00      	nop
 800a7c8:	0800d29f 	.word	0x0800d29f
 800a7cc:	0800d2b0 	.word	0x0800d2b0

0800a7d0 <__mcmp>:
 800a7d0:	690a      	ldr	r2, [r1, #16]
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	6900      	ldr	r0, [r0, #16]
 800a7d6:	1a80      	subs	r0, r0, r2
 800a7d8:	b530      	push	{r4, r5, lr}
 800a7da:	d10e      	bne.n	800a7fa <__mcmp+0x2a>
 800a7dc:	3314      	adds	r3, #20
 800a7de:	3114      	adds	r1, #20
 800a7e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a7e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a7e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a7ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a7f0:	4295      	cmp	r5, r2
 800a7f2:	d003      	beq.n	800a7fc <__mcmp+0x2c>
 800a7f4:	d205      	bcs.n	800a802 <__mcmp+0x32>
 800a7f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a7fa:	bd30      	pop	{r4, r5, pc}
 800a7fc:	42a3      	cmp	r3, r4
 800a7fe:	d3f3      	bcc.n	800a7e8 <__mcmp+0x18>
 800a800:	e7fb      	b.n	800a7fa <__mcmp+0x2a>
 800a802:	2001      	movs	r0, #1
 800a804:	e7f9      	b.n	800a7fa <__mcmp+0x2a>
	...

0800a808 <__mdiff>:
 800a808:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a80c:	4689      	mov	r9, r1
 800a80e:	4606      	mov	r6, r0
 800a810:	4611      	mov	r1, r2
 800a812:	4648      	mov	r0, r9
 800a814:	4614      	mov	r4, r2
 800a816:	f7ff ffdb 	bl	800a7d0 <__mcmp>
 800a81a:	1e05      	subs	r5, r0, #0
 800a81c:	d112      	bne.n	800a844 <__mdiff+0x3c>
 800a81e:	4629      	mov	r1, r5
 800a820:	4630      	mov	r0, r6
 800a822:	f7ff fd11 	bl	800a248 <_Balloc>
 800a826:	4602      	mov	r2, r0
 800a828:	b928      	cbnz	r0, 800a836 <__mdiff+0x2e>
 800a82a:	4b3f      	ldr	r3, [pc, #252]	@ (800a928 <__mdiff+0x120>)
 800a82c:	f240 2137 	movw	r1, #567	@ 0x237
 800a830:	483e      	ldr	r0, [pc, #248]	@ (800a92c <__mdiff+0x124>)
 800a832:	f001 ffc9 	bl	800c7c8 <__assert_func>
 800a836:	2301      	movs	r3, #1
 800a838:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a83c:	4610      	mov	r0, r2
 800a83e:	b003      	add	sp, #12
 800a840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a844:	bfbc      	itt	lt
 800a846:	464b      	movlt	r3, r9
 800a848:	46a1      	movlt	r9, r4
 800a84a:	4630      	mov	r0, r6
 800a84c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a850:	bfba      	itte	lt
 800a852:	461c      	movlt	r4, r3
 800a854:	2501      	movlt	r5, #1
 800a856:	2500      	movge	r5, #0
 800a858:	f7ff fcf6 	bl	800a248 <_Balloc>
 800a85c:	4602      	mov	r2, r0
 800a85e:	b918      	cbnz	r0, 800a868 <__mdiff+0x60>
 800a860:	4b31      	ldr	r3, [pc, #196]	@ (800a928 <__mdiff+0x120>)
 800a862:	f240 2145 	movw	r1, #581	@ 0x245
 800a866:	e7e3      	b.n	800a830 <__mdiff+0x28>
 800a868:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a86c:	6926      	ldr	r6, [r4, #16]
 800a86e:	60c5      	str	r5, [r0, #12]
 800a870:	f109 0310 	add.w	r3, r9, #16
 800a874:	f109 0514 	add.w	r5, r9, #20
 800a878:	f104 0e14 	add.w	lr, r4, #20
 800a87c:	f100 0b14 	add.w	fp, r0, #20
 800a880:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a884:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a888:	9301      	str	r3, [sp, #4]
 800a88a:	46d9      	mov	r9, fp
 800a88c:	f04f 0c00 	mov.w	ip, #0
 800a890:	9b01      	ldr	r3, [sp, #4]
 800a892:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a896:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a89a:	9301      	str	r3, [sp, #4]
 800a89c:	fa1f f38a 	uxth.w	r3, sl
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	b283      	uxth	r3, r0
 800a8a4:	1acb      	subs	r3, r1, r3
 800a8a6:	0c00      	lsrs	r0, r0, #16
 800a8a8:	4463      	add	r3, ip
 800a8aa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a8ae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a8b8:	4576      	cmp	r6, lr
 800a8ba:	f849 3b04 	str.w	r3, [r9], #4
 800a8be:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a8c2:	d8e5      	bhi.n	800a890 <__mdiff+0x88>
 800a8c4:	1b33      	subs	r3, r6, r4
 800a8c6:	3b15      	subs	r3, #21
 800a8c8:	f023 0303 	bic.w	r3, r3, #3
 800a8cc:	3415      	adds	r4, #21
 800a8ce:	3304      	adds	r3, #4
 800a8d0:	42a6      	cmp	r6, r4
 800a8d2:	bf38      	it	cc
 800a8d4:	2304      	movcc	r3, #4
 800a8d6:	441d      	add	r5, r3
 800a8d8:	445b      	add	r3, fp
 800a8da:	461e      	mov	r6, r3
 800a8dc:	462c      	mov	r4, r5
 800a8de:	4544      	cmp	r4, r8
 800a8e0:	d30e      	bcc.n	800a900 <__mdiff+0xf8>
 800a8e2:	f108 0103 	add.w	r1, r8, #3
 800a8e6:	1b49      	subs	r1, r1, r5
 800a8e8:	f021 0103 	bic.w	r1, r1, #3
 800a8ec:	3d03      	subs	r5, #3
 800a8ee:	45a8      	cmp	r8, r5
 800a8f0:	bf38      	it	cc
 800a8f2:	2100      	movcc	r1, #0
 800a8f4:	440b      	add	r3, r1
 800a8f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a8fa:	b191      	cbz	r1, 800a922 <__mdiff+0x11a>
 800a8fc:	6117      	str	r7, [r2, #16]
 800a8fe:	e79d      	b.n	800a83c <__mdiff+0x34>
 800a900:	f854 1b04 	ldr.w	r1, [r4], #4
 800a904:	46e6      	mov	lr, ip
 800a906:	0c08      	lsrs	r0, r1, #16
 800a908:	fa1c fc81 	uxtah	ip, ip, r1
 800a90c:	4471      	add	r1, lr
 800a90e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a912:	b289      	uxth	r1, r1
 800a914:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a918:	f846 1b04 	str.w	r1, [r6], #4
 800a91c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a920:	e7dd      	b.n	800a8de <__mdiff+0xd6>
 800a922:	3f01      	subs	r7, #1
 800a924:	e7e7      	b.n	800a8f6 <__mdiff+0xee>
 800a926:	bf00      	nop
 800a928:	0800d29f 	.word	0x0800d29f
 800a92c:	0800d2b0 	.word	0x0800d2b0

0800a930 <__ulp>:
 800a930:	b082      	sub	sp, #8
 800a932:	ed8d 0b00 	vstr	d0, [sp]
 800a936:	9a01      	ldr	r2, [sp, #4]
 800a938:	4b0f      	ldr	r3, [pc, #60]	@ (800a978 <__ulp+0x48>)
 800a93a:	4013      	ands	r3, r2
 800a93c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a940:	2b00      	cmp	r3, #0
 800a942:	dc08      	bgt.n	800a956 <__ulp+0x26>
 800a944:	425b      	negs	r3, r3
 800a946:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a94a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a94e:	da04      	bge.n	800a95a <__ulp+0x2a>
 800a950:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a954:	4113      	asrs	r3, r2
 800a956:	2200      	movs	r2, #0
 800a958:	e008      	b.n	800a96c <__ulp+0x3c>
 800a95a:	f1a2 0314 	sub.w	r3, r2, #20
 800a95e:	2b1e      	cmp	r3, #30
 800a960:	bfda      	itte	le
 800a962:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a966:	40da      	lsrle	r2, r3
 800a968:	2201      	movgt	r2, #1
 800a96a:	2300      	movs	r3, #0
 800a96c:	4619      	mov	r1, r3
 800a96e:	4610      	mov	r0, r2
 800a970:	ec41 0b10 	vmov	d0, r0, r1
 800a974:	b002      	add	sp, #8
 800a976:	4770      	bx	lr
 800a978:	7ff00000 	.word	0x7ff00000

0800a97c <__b2d>:
 800a97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a980:	6906      	ldr	r6, [r0, #16]
 800a982:	f100 0814 	add.w	r8, r0, #20
 800a986:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a98a:	1f37      	subs	r7, r6, #4
 800a98c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a990:	4610      	mov	r0, r2
 800a992:	f7ff fd4b 	bl	800a42c <__hi0bits>
 800a996:	f1c0 0320 	rsb	r3, r0, #32
 800a99a:	280a      	cmp	r0, #10
 800a99c:	600b      	str	r3, [r1, #0]
 800a99e:	491b      	ldr	r1, [pc, #108]	@ (800aa0c <__b2d+0x90>)
 800a9a0:	dc15      	bgt.n	800a9ce <__b2d+0x52>
 800a9a2:	f1c0 0c0b 	rsb	ip, r0, #11
 800a9a6:	fa22 f30c 	lsr.w	r3, r2, ip
 800a9aa:	45b8      	cmp	r8, r7
 800a9ac:	ea43 0501 	orr.w	r5, r3, r1
 800a9b0:	bf34      	ite	cc
 800a9b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a9b6:	2300      	movcs	r3, #0
 800a9b8:	3015      	adds	r0, #21
 800a9ba:	fa02 f000 	lsl.w	r0, r2, r0
 800a9be:	fa23 f30c 	lsr.w	r3, r3, ip
 800a9c2:	4303      	orrs	r3, r0
 800a9c4:	461c      	mov	r4, r3
 800a9c6:	ec45 4b10 	vmov	d0, r4, r5
 800a9ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9ce:	45b8      	cmp	r8, r7
 800a9d0:	bf3a      	itte	cc
 800a9d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a9d6:	f1a6 0708 	subcc.w	r7, r6, #8
 800a9da:	2300      	movcs	r3, #0
 800a9dc:	380b      	subs	r0, #11
 800a9de:	d012      	beq.n	800aa06 <__b2d+0x8a>
 800a9e0:	f1c0 0120 	rsb	r1, r0, #32
 800a9e4:	fa23 f401 	lsr.w	r4, r3, r1
 800a9e8:	4082      	lsls	r2, r0
 800a9ea:	4322      	orrs	r2, r4
 800a9ec:	4547      	cmp	r7, r8
 800a9ee:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a9f2:	bf8c      	ite	hi
 800a9f4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a9f8:	2200      	movls	r2, #0
 800a9fa:	4083      	lsls	r3, r0
 800a9fc:	40ca      	lsrs	r2, r1
 800a9fe:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800aa02:	4313      	orrs	r3, r2
 800aa04:	e7de      	b.n	800a9c4 <__b2d+0x48>
 800aa06:	ea42 0501 	orr.w	r5, r2, r1
 800aa0a:	e7db      	b.n	800a9c4 <__b2d+0x48>
 800aa0c:	3ff00000 	.word	0x3ff00000

0800aa10 <__d2b>:
 800aa10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa14:	460f      	mov	r7, r1
 800aa16:	2101      	movs	r1, #1
 800aa18:	ec59 8b10 	vmov	r8, r9, d0
 800aa1c:	4616      	mov	r6, r2
 800aa1e:	f7ff fc13 	bl	800a248 <_Balloc>
 800aa22:	4604      	mov	r4, r0
 800aa24:	b930      	cbnz	r0, 800aa34 <__d2b+0x24>
 800aa26:	4602      	mov	r2, r0
 800aa28:	4b23      	ldr	r3, [pc, #140]	@ (800aab8 <__d2b+0xa8>)
 800aa2a:	4824      	ldr	r0, [pc, #144]	@ (800aabc <__d2b+0xac>)
 800aa2c:	f240 310f 	movw	r1, #783	@ 0x30f
 800aa30:	f001 feca 	bl	800c7c8 <__assert_func>
 800aa34:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aa38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa3c:	b10d      	cbz	r5, 800aa42 <__d2b+0x32>
 800aa3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa42:	9301      	str	r3, [sp, #4]
 800aa44:	f1b8 0300 	subs.w	r3, r8, #0
 800aa48:	d023      	beq.n	800aa92 <__d2b+0x82>
 800aa4a:	4668      	mov	r0, sp
 800aa4c:	9300      	str	r3, [sp, #0]
 800aa4e:	f7ff fd0c 	bl	800a46a <__lo0bits>
 800aa52:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aa56:	b1d0      	cbz	r0, 800aa8e <__d2b+0x7e>
 800aa58:	f1c0 0320 	rsb	r3, r0, #32
 800aa5c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa60:	430b      	orrs	r3, r1
 800aa62:	40c2      	lsrs	r2, r0
 800aa64:	6163      	str	r3, [r4, #20]
 800aa66:	9201      	str	r2, [sp, #4]
 800aa68:	9b01      	ldr	r3, [sp, #4]
 800aa6a:	61a3      	str	r3, [r4, #24]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	bf0c      	ite	eq
 800aa70:	2201      	moveq	r2, #1
 800aa72:	2202      	movne	r2, #2
 800aa74:	6122      	str	r2, [r4, #16]
 800aa76:	b1a5      	cbz	r5, 800aaa2 <__d2b+0x92>
 800aa78:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aa7c:	4405      	add	r5, r0
 800aa7e:	603d      	str	r5, [r7, #0]
 800aa80:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aa84:	6030      	str	r0, [r6, #0]
 800aa86:	4620      	mov	r0, r4
 800aa88:	b003      	add	sp, #12
 800aa8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa8e:	6161      	str	r1, [r4, #20]
 800aa90:	e7ea      	b.n	800aa68 <__d2b+0x58>
 800aa92:	a801      	add	r0, sp, #4
 800aa94:	f7ff fce9 	bl	800a46a <__lo0bits>
 800aa98:	9b01      	ldr	r3, [sp, #4]
 800aa9a:	6163      	str	r3, [r4, #20]
 800aa9c:	3020      	adds	r0, #32
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	e7e8      	b.n	800aa74 <__d2b+0x64>
 800aaa2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aaa6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aaaa:	6038      	str	r0, [r7, #0]
 800aaac:	6918      	ldr	r0, [r3, #16]
 800aaae:	f7ff fcbd 	bl	800a42c <__hi0bits>
 800aab2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aab6:	e7e5      	b.n	800aa84 <__d2b+0x74>
 800aab8:	0800d29f 	.word	0x0800d29f
 800aabc:	0800d2b0 	.word	0x0800d2b0

0800aac0 <__ratio>:
 800aac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac4:	b085      	sub	sp, #20
 800aac6:	e9cd 1000 	strd	r1, r0, [sp]
 800aaca:	a902      	add	r1, sp, #8
 800aacc:	f7ff ff56 	bl	800a97c <__b2d>
 800aad0:	9800      	ldr	r0, [sp, #0]
 800aad2:	a903      	add	r1, sp, #12
 800aad4:	ec55 4b10 	vmov	r4, r5, d0
 800aad8:	f7ff ff50 	bl	800a97c <__b2d>
 800aadc:	9b01      	ldr	r3, [sp, #4]
 800aade:	6919      	ldr	r1, [r3, #16]
 800aae0:	9b00      	ldr	r3, [sp, #0]
 800aae2:	691b      	ldr	r3, [r3, #16]
 800aae4:	1ac9      	subs	r1, r1, r3
 800aae6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800aaea:	1a9b      	subs	r3, r3, r2
 800aaec:	ec5b ab10 	vmov	sl, fp, d0
 800aaf0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	bfce      	itee	gt
 800aaf8:	462a      	movgt	r2, r5
 800aafa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aafe:	465a      	movle	r2, fp
 800ab00:	462f      	mov	r7, r5
 800ab02:	46d9      	mov	r9, fp
 800ab04:	bfcc      	ite	gt
 800ab06:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ab0a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ab0e:	464b      	mov	r3, r9
 800ab10:	4652      	mov	r2, sl
 800ab12:	4620      	mov	r0, r4
 800ab14:	4639      	mov	r1, r7
 800ab16:	f7f5 fea1 	bl	800085c <__aeabi_ddiv>
 800ab1a:	ec41 0b10 	vmov	d0, r0, r1
 800ab1e:	b005      	add	sp, #20
 800ab20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab24 <__copybits>:
 800ab24:	3901      	subs	r1, #1
 800ab26:	b570      	push	{r4, r5, r6, lr}
 800ab28:	1149      	asrs	r1, r1, #5
 800ab2a:	6914      	ldr	r4, [r2, #16]
 800ab2c:	3101      	adds	r1, #1
 800ab2e:	f102 0314 	add.w	r3, r2, #20
 800ab32:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ab36:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ab3a:	1f05      	subs	r5, r0, #4
 800ab3c:	42a3      	cmp	r3, r4
 800ab3e:	d30c      	bcc.n	800ab5a <__copybits+0x36>
 800ab40:	1aa3      	subs	r3, r4, r2
 800ab42:	3b11      	subs	r3, #17
 800ab44:	f023 0303 	bic.w	r3, r3, #3
 800ab48:	3211      	adds	r2, #17
 800ab4a:	42a2      	cmp	r2, r4
 800ab4c:	bf88      	it	hi
 800ab4e:	2300      	movhi	r3, #0
 800ab50:	4418      	add	r0, r3
 800ab52:	2300      	movs	r3, #0
 800ab54:	4288      	cmp	r0, r1
 800ab56:	d305      	bcc.n	800ab64 <__copybits+0x40>
 800ab58:	bd70      	pop	{r4, r5, r6, pc}
 800ab5a:	f853 6b04 	ldr.w	r6, [r3], #4
 800ab5e:	f845 6f04 	str.w	r6, [r5, #4]!
 800ab62:	e7eb      	b.n	800ab3c <__copybits+0x18>
 800ab64:	f840 3b04 	str.w	r3, [r0], #4
 800ab68:	e7f4      	b.n	800ab54 <__copybits+0x30>

0800ab6a <__any_on>:
 800ab6a:	f100 0214 	add.w	r2, r0, #20
 800ab6e:	6900      	ldr	r0, [r0, #16]
 800ab70:	114b      	asrs	r3, r1, #5
 800ab72:	4298      	cmp	r0, r3
 800ab74:	b510      	push	{r4, lr}
 800ab76:	db11      	blt.n	800ab9c <__any_on+0x32>
 800ab78:	dd0a      	ble.n	800ab90 <__any_on+0x26>
 800ab7a:	f011 011f 	ands.w	r1, r1, #31
 800ab7e:	d007      	beq.n	800ab90 <__any_on+0x26>
 800ab80:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ab84:	fa24 f001 	lsr.w	r0, r4, r1
 800ab88:	fa00 f101 	lsl.w	r1, r0, r1
 800ab8c:	428c      	cmp	r4, r1
 800ab8e:	d10b      	bne.n	800aba8 <__any_on+0x3e>
 800ab90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d803      	bhi.n	800aba0 <__any_on+0x36>
 800ab98:	2000      	movs	r0, #0
 800ab9a:	bd10      	pop	{r4, pc}
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	e7f7      	b.n	800ab90 <__any_on+0x26>
 800aba0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aba4:	2900      	cmp	r1, #0
 800aba6:	d0f5      	beq.n	800ab94 <__any_on+0x2a>
 800aba8:	2001      	movs	r0, #1
 800abaa:	e7f6      	b.n	800ab9a <__any_on+0x30>

0800abac <sulp>:
 800abac:	b570      	push	{r4, r5, r6, lr}
 800abae:	4604      	mov	r4, r0
 800abb0:	460d      	mov	r5, r1
 800abb2:	ec45 4b10 	vmov	d0, r4, r5
 800abb6:	4616      	mov	r6, r2
 800abb8:	f7ff feba 	bl	800a930 <__ulp>
 800abbc:	ec51 0b10 	vmov	r0, r1, d0
 800abc0:	b17e      	cbz	r6, 800abe2 <sulp+0x36>
 800abc2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800abc6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800abca:	2b00      	cmp	r3, #0
 800abcc:	dd09      	ble.n	800abe2 <sulp+0x36>
 800abce:	051b      	lsls	r3, r3, #20
 800abd0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800abd4:	2400      	movs	r4, #0
 800abd6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800abda:	4622      	mov	r2, r4
 800abdc:	462b      	mov	r3, r5
 800abde:	f7f5 fd13 	bl	8000608 <__aeabi_dmul>
 800abe2:	ec41 0b10 	vmov	d0, r0, r1
 800abe6:	bd70      	pop	{r4, r5, r6, pc}

0800abe8 <_strtod_l>:
 800abe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abec:	b09f      	sub	sp, #124	@ 0x7c
 800abee:	460c      	mov	r4, r1
 800abf0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800abf2:	2200      	movs	r2, #0
 800abf4:	921a      	str	r2, [sp, #104]	@ 0x68
 800abf6:	9005      	str	r0, [sp, #20]
 800abf8:	f04f 0a00 	mov.w	sl, #0
 800abfc:	f04f 0b00 	mov.w	fp, #0
 800ac00:	460a      	mov	r2, r1
 800ac02:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac04:	7811      	ldrb	r1, [r2, #0]
 800ac06:	292b      	cmp	r1, #43	@ 0x2b
 800ac08:	d04a      	beq.n	800aca0 <_strtod_l+0xb8>
 800ac0a:	d838      	bhi.n	800ac7e <_strtod_l+0x96>
 800ac0c:	290d      	cmp	r1, #13
 800ac0e:	d832      	bhi.n	800ac76 <_strtod_l+0x8e>
 800ac10:	2908      	cmp	r1, #8
 800ac12:	d832      	bhi.n	800ac7a <_strtod_l+0x92>
 800ac14:	2900      	cmp	r1, #0
 800ac16:	d03b      	beq.n	800ac90 <_strtod_l+0xa8>
 800ac18:	2200      	movs	r2, #0
 800ac1a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ac1c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ac1e:	782a      	ldrb	r2, [r5, #0]
 800ac20:	2a30      	cmp	r2, #48	@ 0x30
 800ac22:	f040 80b3 	bne.w	800ad8c <_strtod_l+0x1a4>
 800ac26:	786a      	ldrb	r2, [r5, #1]
 800ac28:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ac2c:	2a58      	cmp	r2, #88	@ 0x58
 800ac2e:	d16e      	bne.n	800ad0e <_strtod_l+0x126>
 800ac30:	9302      	str	r3, [sp, #8]
 800ac32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac34:	9301      	str	r3, [sp, #4]
 800ac36:	ab1a      	add	r3, sp, #104	@ 0x68
 800ac38:	9300      	str	r3, [sp, #0]
 800ac3a:	4a8e      	ldr	r2, [pc, #568]	@ (800ae74 <_strtod_l+0x28c>)
 800ac3c:	9805      	ldr	r0, [sp, #20]
 800ac3e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ac40:	a919      	add	r1, sp, #100	@ 0x64
 800ac42:	f001 fe5b 	bl	800c8fc <__gethex>
 800ac46:	f010 060f 	ands.w	r6, r0, #15
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	d005      	beq.n	800ac5a <_strtod_l+0x72>
 800ac4e:	2e06      	cmp	r6, #6
 800ac50:	d128      	bne.n	800aca4 <_strtod_l+0xbc>
 800ac52:	3501      	adds	r5, #1
 800ac54:	2300      	movs	r3, #0
 800ac56:	9519      	str	r5, [sp, #100]	@ 0x64
 800ac58:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	f040 858e 	bne.w	800b77e <_strtod_l+0xb96>
 800ac62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac64:	b1cb      	cbz	r3, 800ac9a <_strtod_l+0xb2>
 800ac66:	4652      	mov	r2, sl
 800ac68:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ac6c:	ec43 2b10 	vmov	d0, r2, r3
 800ac70:	b01f      	add	sp, #124	@ 0x7c
 800ac72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac76:	2920      	cmp	r1, #32
 800ac78:	d1ce      	bne.n	800ac18 <_strtod_l+0x30>
 800ac7a:	3201      	adds	r2, #1
 800ac7c:	e7c1      	b.n	800ac02 <_strtod_l+0x1a>
 800ac7e:	292d      	cmp	r1, #45	@ 0x2d
 800ac80:	d1ca      	bne.n	800ac18 <_strtod_l+0x30>
 800ac82:	2101      	movs	r1, #1
 800ac84:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ac86:	1c51      	adds	r1, r2, #1
 800ac88:	9119      	str	r1, [sp, #100]	@ 0x64
 800ac8a:	7852      	ldrb	r2, [r2, #1]
 800ac8c:	2a00      	cmp	r2, #0
 800ac8e:	d1c5      	bne.n	800ac1c <_strtod_l+0x34>
 800ac90:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ac92:	9419      	str	r4, [sp, #100]	@ 0x64
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f040 8570 	bne.w	800b77a <_strtod_l+0xb92>
 800ac9a:	4652      	mov	r2, sl
 800ac9c:	465b      	mov	r3, fp
 800ac9e:	e7e5      	b.n	800ac6c <_strtod_l+0x84>
 800aca0:	2100      	movs	r1, #0
 800aca2:	e7ef      	b.n	800ac84 <_strtod_l+0x9c>
 800aca4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800aca6:	b13a      	cbz	r2, 800acb8 <_strtod_l+0xd0>
 800aca8:	2135      	movs	r1, #53	@ 0x35
 800acaa:	a81c      	add	r0, sp, #112	@ 0x70
 800acac:	f7ff ff3a 	bl	800ab24 <__copybits>
 800acb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800acb2:	9805      	ldr	r0, [sp, #20]
 800acb4:	f7ff fb08 	bl	800a2c8 <_Bfree>
 800acb8:	3e01      	subs	r6, #1
 800acba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800acbc:	2e04      	cmp	r6, #4
 800acbe:	d806      	bhi.n	800acce <_strtod_l+0xe6>
 800acc0:	e8df f006 	tbb	[pc, r6]
 800acc4:	201d0314 	.word	0x201d0314
 800acc8:	14          	.byte	0x14
 800acc9:	00          	.byte	0x00
 800acca:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800acce:	05e1      	lsls	r1, r4, #23
 800acd0:	bf48      	it	mi
 800acd2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800acd6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800acda:	0d1b      	lsrs	r3, r3, #20
 800acdc:	051b      	lsls	r3, r3, #20
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d1bb      	bne.n	800ac5a <_strtod_l+0x72>
 800ace2:	f7fe fb21 	bl	8009328 <__errno>
 800ace6:	2322      	movs	r3, #34	@ 0x22
 800ace8:	6003      	str	r3, [r0, #0]
 800acea:	e7b6      	b.n	800ac5a <_strtod_l+0x72>
 800acec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800acf0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800acf4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800acf8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800acfc:	e7e7      	b.n	800acce <_strtod_l+0xe6>
 800acfe:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ae7c <_strtod_l+0x294>
 800ad02:	e7e4      	b.n	800acce <_strtod_l+0xe6>
 800ad04:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ad08:	f04f 3aff 	mov.w	sl, #4294967295
 800ad0c:	e7df      	b.n	800acce <_strtod_l+0xe6>
 800ad0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad10:	1c5a      	adds	r2, r3, #1
 800ad12:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad14:	785b      	ldrb	r3, [r3, #1]
 800ad16:	2b30      	cmp	r3, #48	@ 0x30
 800ad18:	d0f9      	beq.n	800ad0e <_strtod_l+0x126>
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d09d      	beq.n	800ac5a <_strtod_l+0x72>
 800ad1e:	2301      	movs	r3, #1
 800ad20:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad24:	930c      	str	r3, [sp, #48]	@ 0x30
 800ad26:	2300      	movs	r3, #0
 800ad28:	9308      	str	r3, [sp, #32]
 800ad2a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad2c:	461f      	mov	r7, r3
 800ad2e:	220a      	movs	r2, #10
 800ad30:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ad32:	7805      	ldrb	r5, [r0, #0]
 800ad34:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ad38:	b2d9      	uxtb	r1, r3
 800ad3a:	2909      	cmp	r1, #9
 800ad3c:	d928      	bls.n	800ad90 <_strtod_l+0x1a8>
 800ad3e:	494e      	ldr	r1, [pc, #312]	@ (800ae78 <_strtod_l+0x290>)
 800ad40:	2201      	movs	r2, #1
 800ad42:	f7fe fa95 	bl	8009270 <strncmp>
 800ad46:	2800      	cmp	r0, #0
 800ad48:	d032      	beq.n	800adb0 <_strtod_l+0x1c8>
 800ad4a:	2000      	movs	r0, #0
 800ad4c:	462a      	mov	r2, r5
 800ad4e:	4681      	mov	r9, r0
 800ad50:	463d      	mov	r5, r7
 800ad52:	4603      	mov	r3, r0
 800ad54:	2a65      	cmp	r2, #101	@ 0x65
 800ad56:	d001      	beq.n	800ad5c <_strtod_l+0x174>
 800ad58:	2a45      	cmp	r2, #69	@ 0x45
 800ad5a:	d114      	bne.n	800ad86 <_strtod_l+0x19e>
 800ad5c:	b91d      	cbnz	r5, 800ad66 <_strtod_l+0x17e>
 800ad5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad60:	4302      	orrs	r2, r0
 800ad62:	d095      	beq.n	800ac90 <_strtod_l+0xa8>
 800ad64:	2500      	movs	r5, #0
 800ad66:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ad68:	1c62      	adds	r2, r4, #1
 800ad6a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad6c:	7862      	ldrb	r2, [r4, #1]
 800ad6e:	2a2b      	cmp	r2, #43	@ 0x2b
 800ad70:	d077      	beq.n	800ae62 <_strtod_l+0x27a>
 800ad72:	2a2d      	cmp	r2, #45	@ 0x2d
 800ad74:	d07b      	beq.n	800ae6e <_strtod_l+0x286>
 800ad76:	f04f 0c00 	mov.w	ip, #0
 800ad7a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ad7e:	2909      	cmp	r1, #9
 800ad80:	f240 8082 	bls.w	800ae88 <_strtod_l+0x2a0>
 800ad84:	9419      	str	r4, [sp, #100]	@ 0x64
 800ad86:	f04f 0800 	mov.w	r8, #0
 800ad8a:	e0a2      	b.n	800aed2 <_strtod_l+0x2ea>
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	e7c7      	b.n	800ad20 <_strtod_l+0x138>
 800ad90:	2f08      	cmp	r7, #8
 800ad92:	bfd5      	itete	le
 800ad94:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ad96:	9908      	ldrgt	r1, [sp, #32]
 800ad98:	fb02 3301 	mlale	r3, r2, r1, r3
 800ad9c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ada0:	f100 0001 	add.w	r0, r0, #1
 800ada4:	bfd4      	ite	le
 800ada6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ada8:	9308      	strgt	r3, [sp, #32]
 800adaa:	3701      	adds	r7, #1
 800adac:	9019      	str	r0, [sp, #100]	@ 0x64
 800adae:	e7bf      	b.n	800ad30 <_strtod_l+0x148>
 800adb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800adb2:	1c5a      	adds	r2, r3, #1
 800adb4:	9219      	str	r2, [sp, #100]	@ 0x64
 800adb6:	785a      	ldrb	r2, [r3, #1]
 800adb8:	b37f      	cbz	r7, 800ae1a <_strtod_l+0x232>
 800adba:	4681      	mov	r9, r0
 800adbc:	463d      	mov	r5, r7
 800adbe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800adc2:	2b09      	cmp	r3, #9
 800adc4:	d912      	bls.n	800adec <_strtod_l+0x204>
 800adc6:	2301      	movs	r3, #1
 800adc8:	e7c4      	b.n	800ad54 <_strtod_l+0x16c>
 800adca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800adcc:	1c5a      	adds	r2, r3, #1
 800adce:	9219      	str	r2, [sp, #100]	@ 0x64
 800add0:	785a      	ldrb	r2, [r3, #1]
 800add2:	3001      	adds	r0, #1
 800add4:	2a30      	cmp	r2, #48	@ 0x30
 800add6:	d0f8      	beq.n	800adca <_strtod_l+0x1e2>
 800add8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800addc:	2b08      	cmp	r3, #8
 800adde:	f200 84d3 	bhi.w	800b788 <_strtod_l+0xba0>
 800ade2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ade4:	930c      	str	r3, [sp, #48]	@ 0x30
 800ade6:	4681      	mov	r9, r0
 800ade8:	2000      	movs	r0, #0
 800adea:	4605      	mov	r5, r0
 800adec:	3a30      	subs	r2, #48	@ 0x30
 800adee:	f100 0301 	add.w	r3, r0, #1
 800adf2:	d02a      	beq.n	800ae4a <_strtod_l+0x262>
 800adf4:	4499      	add	r9, r3
 800adf6:	eb00 0c05 	add.w	ip, r0, r5
 800adfa:	462b      	mov	r3, r5
 800adfc:	210a      	movs	r1, #10
 800adfe:	4563      	cmp	r3, ip
 800ae00:	d10d      	bne.n	800ae1e <_strtod_l+0x236>
 800ae02:	1c69      	adds	r1, r5, #1
 800ae04:	4401      	add	r1, r0
 800ae06:	4428      	add	r0, r5
 800ae08:	2808      	cmp	r0, #8
 800ae0a:	dc16      	bgt.n	800ae3a <_strtod_l+0x252>
 800ae0c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ae0e:	230a      	movs	r3, #10
 800ae10:	fb03 2300 	mla	r3, r3, r0, r2
 800ae14:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae16:	2300      	movs	r3, #0
 800ae18:	e018      	b.n	800ae4c <_strtod_l+0x264>
 800ae1a:	4638      	mov	r0, r7
 800ae1c:	e7da      	b.n	800add4 <_strtod_l+0x1ec>
 800ae1e:	2b08      	cmp	r3, #8
 800ae20:	f103 0301 	add.w	r3, r3, #1
 800ae24:	dc03      	bgt.n	800ae2e <_strtod_l+0x246>
 800ae26:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ae28:	434e      	muls	r6, r1
 800ae2a:	960a      	str	r6, [sp, #40]	@ 0x28
 800ae2c:	e7e7      	b.n	800adfe <_strtod_l+0x216>
 800ae2e:	2b10      	cmp	r3, #16
 800ae30:	bfde      	ittt	le
 800ae32:	9e08      	ldrle	r6, [sp, #32]
 800ae34:	434e      	mulle	r6, r1
 800ae36:	9608      	strle	r6, [sp, #32]
 800ae38:	e7e1      	b.n	800adfe <_strtod_l+0x216>
 800ae3a:	280f      	cmp	r0, #15
 800ae3c:	dceb      	bgt.n	800ae16 <_strtod_l+0x22e>
 800ae3e:	9808      	ldr	r0, [sp, #32]
 800ae40:	230a      	movs	r3, #10
 800ae42:	fb03 2300 	mla	r3, r3, r0, r2
 800ae46:	9308      	str	r3, [sp, #32]
 800ae48:	e7e5      	b.n	800ae16 <_strtod_l+0x22e>
 800ae4a:	4629      	mov	r1, r5
 800ae4c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae4e:	1c50      	adds	r0, r2, #1
 800ae50:	9019      	str	r0, [sp, #100]	@ 0x64
 800ae52:	7852      	ldrb	r2, [r2, #1]
 800ae54:	4618      	mov	r0, r3
 800ae56:	460d      	mov	r5, r1
 800ae58:	e7b1      	b.n	800adbe <_strtod_l+0x1d6>
 800ae5a:	f04f 0900 	mov.w	r9, #0
 800ae5e:	2301      	movs	r3, #1
 800ae60:	e77d      	b.n	800ad5e <_strtod_l+0x176>
 800ae62:	f04f 0c00 	mov.w	ip, #0
 800ae66:	1ca2      	adds	r2, r4, #2
 800ae68:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae6a:	78a2      	ldrb	r2, [r4, #2]
 800ae6c:	e785      	b.n	800ad7a <_strtod_l+0x192>
 800ae6e:	f04f 0c01 	mov.w	ip, #1
 800ae72:	e7f8      	b.n	800ae66 <_strtod_l+0x27e>
 800ae74:	0800d420 	.word	0x0800d420
 800ae78:	0800d408 	.word	0x0800d408
 800ae7c:	7ff00000 	.word	0x7ff00000
 800ae80:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae82:	1c51      	adds	r1, r2, #1
 800ae84:	9119      	str	r1, [sp, #100]	@ 0x64
 800ae86:	7852      	ldrb	r2, [r2, #1]
 800ae88:	2a30      	cmp	r2, #48	@ 0x30
 800ae8a:	d0f9      	beq.n	800ae80 <_strtod_l+0x298>
 800ae8c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ae90:	2908      	cmp	r1, #8
 800ae92:	f63f af78 	bhi.w	800ad86 <_strtod_l+0x19e>
 800ae96:	3a30      	subs	r2, #48	@ 0x30
 800ae98:	920e      	str	r2, [sp, #56]	@ 0x38
 800ae9a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae9c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ae9e:	f04f 080a 	mov.w	r8, #10
 800aea2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aea4:	1c56      	adds	r6, r2, #1
 800aea6:	9619      	str	r6, [sp, #100]	@ 0x64
 800aea8:	7852      	ldrb	r2, [r2, #1]
 800aeaa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800aeae:	f1be 0f09 	cmp.w	lr, #9
 800aeb2:	d939      	bls.n	800af28 <_strtod_l+0x340>
 800aeb4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800aeb6:	1a76      	subs	r6, r6, r1
 800aeb8:	2e08      	cmp	r6, #8
 800aeba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800aebe:	dc03      	bgt.n	800aec8 <_strtod_l+0x2e0>
 800aec0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800aec2:	4588      	cmp	r8, r1
 800aec4:	bfa8      	it	ge
 800aec6:	4688      	movge	r8, r1
 800aec8:	f1bc 0f00 	cmp.w	ip, #0
 800aecc:	d001      	beq.n	800aed2 <_strtod_l+0x2ea>
 800aece:	f1c8 0800 	rsb	r8, r8, #0
 800aed2:	2d00      	cmp	r5, #0
 800aed4:	d14e      	bne.n	800af74 <_strtod_l+0x38c>
 800aed6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aed8:	4308      	orrs	r0, r1
 800aeda:	f47f aebe 	bne.w	800ac5a <_strtod_l+0x72>
 800aede:	2b00      	cmp	r3, #0
 800aee0:	f47f aed6 	bne.w	800ac90 <_strtod_l+0xa8>
 800aee4:	2a69      	cmp	r2, #105	@ 0x69
 800aee6:	d028      	beq.n	800af3a <_strtod_l+0x352>
 800aee8:	dc25      	bgt.n	800af36 <_strtod_l+0x34e>
 800aeea:	2a49      	cmp	r2, #73	@ 0x49
 800aeec:	d025      	beq.n	800af3a <_strtod_l+0x352>
 800aeee:	2a4e      	cmp	r2, #78	@ 0x4e
 800aef0:	f47f aece 	bne.w	800ac90 <_strtod_l+0xa8>
 800aef4:	499b      	ldr	r1, [pc, #620]	@ (800b164 <_strtod_l+0x57c>)
 800aef6:	a819      	add	r0, sp, #100	@ 0x64
 800aef8:	f001 ff22 	bl	800cd40 <__match>
 800aefc:	2800      	cmp	r0, #0
 800aefe:	f43f aec7 	beq.w	800ac90 <_strtod_l+0xa8>
 800af02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	2b28      	cmp	r3, #40	@ 0x28
 800af08:	d12e      	bne.n	800af68 <_strtod_l+0x380>
 800af0a:	4997      	ldr	r1, [pc, #604]	@ (800b168 <_strtod_l+0x580>)
 800af0c:	aa1c      	add	r2, sp, #112	@ 0x70
 800af0e:	a819      	add	r0, sp, #100	@ 0x64
 800af10:	f001 ff2a 	bl	800cd68 <__hexnan>
 800af14:	2805      	cmp	r0, #5
 800af16:	d127      	bne.n	800af68 <_strtod_l+0x380>
 800af18:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800af1a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800af1e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800af22:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800af26:	e698      	b.n	800ac5a <_strtod_l+0x72>
 800af28:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800af2a:	fb08 2101 	mla	r1, r8, r1, r2
 800af2e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800af32:	920e      	str	r2, [sp, #56]	@ 0x38
 800af34:	e7b5      	b.n	800aea2 <_strtod_l+0x2ba>
 800af36:	2a6e      	cmp	r2, #110	@ 0x6e
 800af38:	e7da      	b.n	800aef0 <_strtod_l+0x308>
 800af3a:	498c      	ldr	r1, [pc, #560]	@ (800b16c <_strtod_l+0x584>)
 800af3c:	a819      	add	r0, sp, #100	@ 0x64
 800af3e:	f001 feff 	bl	800cd40 <__match>
 800af42:	2800      	cmp	r0, #0
 800af44:	f43f aea4 	beq.w	800ac90 <_strtod_l+0xa8>
 800af48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af4a:	4989      	ldr	r1, [pc, #548]	@ (800b170 <_strtod_l+0x588>)
 800af4c:	3b01      	subs	r3, #1
 800af4e:	a819      	add	r0, sp, #100	@ 0x64
 800af50:	9319      	str	r3, [sp, #100]	@ 0x64
 800af52:	f001 fef5 	bl	800cd40 <__match>
 800af56:	b910      	cbnz	r0, 800af5e <_strtod_l+0x376>
 800af58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af5a:	3301      	adds	r3, #1
 800af5c:	9319      	str	r3, [sp, #100]	@ 0x64
 800af5e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b180 <_strtod_l+0x598>
 800af62:	f04f 0a00 	mov.w	sl, #0
 800af66:	e678      	b.n	800ac5a <_strtod_l+0x72>
 800af68:	4882      	ldr	r0, [pc, #520]	@ (800b174 <_strtod_l+0x58c>)
 800af6a:	f001 fc25 	bl	800c7b8 <nan>
 800af6e:	ec5b ab10 	vmov	sl, fp, d0
 800af72:	e672      	b.n	800ac5a <_strtod_l+0x72>
 800af74:	eba8 0309 	sub.w	r3, r8, r9
 800af78:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800af7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800af7c:	2f00      	cmp	r7, #0
 800af7e:	bf08      	it	eq
 800af80:	462f      	moveq	r7, r5
 800af82:	2d10      	cmp	r5, #16
 800af84:	462c      	mov	r4, r5
 800af86:	bfa8      	it	ge
 800af88:	2410      	movge	r4, #16
 800af8a:	f7f5 fac3 	bl	8000514 <__aeabi_ui2d>
 800af8e:	2d09      	cmp	r5, #9
 800af90:	4682      	mov	sl, r0
 800af92:	468b      	mov	fp, r1
 800af94:	dc13      	bgt.n	800afbe <_strtod_l+0x3d6>
 800af96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af98:	2b00      	cmp	r3, #0
 800af9a:	f43f ae5e 	beq.w	800ac5a <_strtod_l+0x72>
 800af9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afa0:	dd78      	ble.n	800b094 <_strtod_l+0x4ac>
 800afa2:	2b16      	cmp	r3, #22
 800afa4:	dc5f      	bgt.n	800b066 <_strtod_l+0x47e>
 800afa6:	4974      	ldr	r1, [pc, #464]	@ (800b178 <_strtod_l+0x590>)
 800afa8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800afac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afb0:	4652      	mov	r2, sl
 800afb2:	465b      	mov	r3, fp
 800afb4:	f7f5 fb28 	bl	8000608 <__aeabi_dmul>
 800afb8:	4682      	mov	sl, r0
 800afba:	468b      	mov	fp, r1
 800afbc:	e64d      	b.n	800ac5a <_strtod_l+0x72>
 800afbe:	4b6e      	ldr	r3, [pc, #440]	@ (800b178 <_strtod_l+0x590>)
 800afc0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800afc4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800afc8:	f7f5 fb1e 	bl	8000608 <__aeabi_dmul>
 800afcc:	4682      	mov	sl, r0
 800afce:	9808      	ldr	r0, [sp, #32]
 800afd0:	468b      	mov	fp, r1
 800afd2:	f7f5 fa9f 	bl	8000514 <__aeabi_ui2d>
 800afd6:	4602      	mov	r2, r0
 800afd8:	460b      	mov	r3, r1
 800afda:	4650      	mov	r0, sl
 800afdc:	4659      	mov	r1, fp
 800afde:	f7f5 f95d 	bl	800029c <__adddf3>
 800afe2:	2d0f      	cmp	r5, #15
 800afe4:	4682      	mov	sl, r0
 800afe6:	468b      	mov	fp, r1
 800afe8:	ddd5      	ble.n	800af96 <_strtod_l+0x3ae>
 800afea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afec:	1b2c      	subs	r4, r5, r4
 800afee:	441c      	add	r4, r3
 800aff0:	2c00      	cmp	r4, #0
 800aff2:	f340 8096 	ble.w	800b122 <_strtod_l+0x53a>
 800aff6:	f014 030f 	ands.w	r3, r4, #15
 800affa:	d00a      	beq.n	800b012 <_strtod_l+0x42a>
 800affc:	495e      	ldr	r1, [pc, #376]	@ (800b178 <_strtod_l+0x590>)
 800affe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b002:	4652      	mov	r2, sl
 800b004:	465b      	mov	r3, fp
 800b006:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b00a:	f7f5 fafd 	bl	8000608 <__aeabi_dmul>
 800b00e:	4682      	mov	sl, r0
 800b010:	468b      	mov	fp, r1
 800b012:	f034 040f 	bics.w	r4, r4, #15
 800b016:	d073      	beq.n	800b100 <_strtod_l+0x518>
 800b018:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b01c:	dd48      	ble.n	800b0b0 <_strtod_l+0x4c8>
 800b01e:	2400      	movs	r4, #0
 800b020:	46a0      	mov	r8, r4
 800b022:	940a      	str	r4, [sp, #40]	@ 0x28
 800b024:	46a1      	mov	r9, r4
 800b026:	9a05      	ldr	r2, [sp, #20]
 800b028:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b180 <_strtod_l+0x598>
 800b02c:	2322      	movs	r3, #34	@ 0x22
 800b02e:	6013      	str	r3, [r2, #0]
 800b030:	f04f 0a00 	mov.w	sl, #0
 800b034:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b036:	2b00      	cmp	r3, #0
 800b038:	f43f ae0f 	beq.w	800ac5a <_strtod_l+0x72>
 800b03c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b03e:	9805      	ldr	r0, [sp, #20]
 800b040:	f7ff f942 	bl	800a2c8 <_Bfree>
 800b044:	9805      	ldr	r0, [sp, #20]
 800b046:	4649      	mov	r1, r9
 800b048:	f7ff f93e 	bl	800a2c8 <_Bfree>
 800b04c:	9805      	ldr	r0, [sp, #20]
 800b04e:	4641      	mov	r1, r8
 800b050:	f7ff f93a 	bl	800a2c8 <_Bfree>
 800b054:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b056:	9805      	ldr	r0, [sp, #20]
 800b058:	f7ff f936 	bl	800a2c8 <_Bfree>
 800b05c:	9805      	ldr	r0, [sp, #20]
 800b05e:	4621      	mov	r1, r4
 800b060:	f7ff f932 	bl	800a2c8 <_Bfree>
 800b064:	e5f9      	b.n	800ac5a <_strtod_l+0x72>
 800b066:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b068:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b06c:	4293      	cmp	r3, r2
 800b06e:	dbbc      	blt.n	800afea <_strtod_l+0x402>
 800b070:	4c41      	ldr	r4, [pc, #260]	@ (800b178 <_strtod_l+0x590>)
 800b072:	f1c5 050f 	rsb	r5, r5, #15
 800b076:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b07a:	4652      	mov	r2, sl
 800b07c:	465b      	mov	r3, fp
 800b07e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b082:	f7f5 fac1 	bl	8000608 <__aeabi_dmul>
 800b086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b088:	1b5d      	subs	r5, r3, r5
 800b08a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b08e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b092:	e78f      	b.n	800afb4 <_strtod_l+0x3cc>
 800b094:	3316      	adds	r3, #22
 800b096:	dba8      	blt.n	800afea <_strtod_l+0x402>
 800b098:	4b37      	ldr	r3, [pc, #220]	@ (800b178 <_strtod_l+0x590>)
 800b09a:	eba9 0808 	sub.w	r8, r9, r8
 800b09e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b0a2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b0a6:	4650      	mov	r0, sl
 800b0a8:	4659      	mov	r1, fp
 800b0aa:	f7f5 fbd7 	bl	800085c <__aeabi_ddiv>
 800b0ae:	e783      	b.n	800afb8 <_strtod_l+0x3d0>
 800b0b0:	4b32      	ldr	r3, [pc, #200]	@ (800b17c <_strtod_l+0x594>)
 800b0b2:	9308      	str	r3, [sp, #32]
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	1124      	asrs	r4, r4, #4
 800b0b8:	4650      	mov	r0, sl
 800b0ba:	4659      	mov	r1, fp
 800b0bc:	461e      	mov	r6, r3
 800b0be:	2c01      	cmp	r4, #1
 800b0c0:	dc21      	bgt.n	800b106 <_strtod_l+0x51e>
 800b0c2:	b10b      	cbz	r3, 800b0c8 <_strtod_l+0x4e0>
 800b0c4:	4682      	mov	sl, r0
 800b0c6:	468b      	mov	fp, r1
 800b0c8:	492c      	ldr	r1, [pc, #176]	@ (800b17c <_strtod_l+0x594>)
 800b0ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b0ce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b0d2:	4652      	mov	r2, sl
 800b0d4:	465b      	mov	r3, fp
 800b0d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0da:	f7f5 fa95 	bl	8000608 <__aeabi_dmul>
 800b0de:	4b28      	ldr	r3, [pc, #160]	@ (800b180 <_strtod_l+0x598>)
 800b0e0:	460a      	mov	r2, r1
 800b0e2:	400b      	ands	r3, r1
 800b0e4:	4927      	ldr	r1, [pc, #156]	@ (800b184 <_strtod_l+0x59c>)
 800b0e6:	428b      	cmp	r3, r1
 800b0e8:	4682      	mov	sl, r0
 800b0ea:	d898      	bhi.n	800b01e <_strtod_l+0x436>
 800b0ec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b0f0:	428b      	cmp	r3, r1
 800b0f2:	bf86      	itte	hi
 800b0f4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b188 <_strtod_l+0x5a0>
 800b0f8:	f04f 3aff 	movhi.w	sl, #4294967295
 800b0fc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b100:	2300      	movs	r3, #0
 800b102:	9308      	str	r3, [sp, #32]
 800b104:	e07a      	b.n	800b1fc <_strtod_l+0x614>
 800b106:	07e2      	lsls	r2, r4, #31
 800b108:	d505      	bpl.n	800b116 <_strtod_l+0x52e>
 800b10a:	9b08      	ldr	r3, [sp, #32]
 800b10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b110:	f7f5 fa7a 	bl	8000608 <__aeabi_dmul>
 800b114:	2301      	movs	r3, #1
 800b116:	9a08      	ldr	r2, [sp, #32]
 800b118:	3208      	adds	r2, #8
 800b11a:	3601      	adds	r6, #1
 800b11c:	1064      	asrs	r4, r4, #1
 800b11e:	9208      	str	r2, [sp, #32]
 800b120:	e7cd      	b.n	800b0be <_strtod_l+0x4d6>
 800b122:	d0ed      	beq.n	800b100 <_strtod_l+0x518>
 800b124:	4264      	negs	r4, r4
 800b126:	f014 020f 	ands.w	r2, r4, #15
 800b12a:	d00a      	beq.n	800b142 <_strtod_l+0x55a>
 800b12c:	4b12      	ldr	r3, [pc, #72]	@ (800b178 <_strtod_l+0x590>)
 800b12e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b132:	4650      	mov	r0, sl
 800b134:	4659      	mov	r1, fp
 800b136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13a:	f7f5 fb8f 	bl	800085c <__aeabi_ddiv>
 800b13e:	4682      	mov	sl, r0
 800b140:	468b      	mov	fp, r1
 800b142:	1124      	asrs	r4, r4, #4
 800b144:	d0dc      	beq.n	800b100 <_strtod_l+0x518>
 800b146:	2c1f      	cmp	r4, #31
 800b148:	dd20      	ble.n	800b18c <_strtod_l+0x5a4>
 800b14a:	2400      	movs	r4, #0
 800b14c:	46a0      	mov	r8, r4
 800b14e:	940a      	str	r4, [sp, #40]	@ 0x28
 800b150:	46a1      	mov	r9, r4
 800b152:	9a05      	ldr	r2, [sp, #20]
 800b154:	2322      	movs	r3, #34	@ 0x22
 800b156:	f04f 0a00 	mov.w	sl, #0
 800b15a:	f04f 0b00 	mov.w	fp, #0
 800b15e:	6013      	str	r3, [r2, #0]
 800b160:	e768      	b.n	800b034 <_strtod_l+0x44c>
 800b162:	bf00      	nop
 800b164:	0800d1f9 	.word	0x0800d1f9
 800b168:	0800d40c 	.word	0x0800d40c
 800b16c:	0800d1f1 	.word	0x0800d1f1
 800b170:	0800d226 	.word	0x0800d226
 800b174:	0800d5d0 	.word	0x0800d5d0
 800b178:	0800d340 	.word	0x0800d340
 800b17c:	0800d318 	.word	0x0800d318
 800b180:	7ff00000 	.word	0x7ff00000
 800b184:	7ca00000 	.word	0x7ca00000
 800b188:	7fefffff 	.word	0x7fefffff
 800b18c:	f014 0310 	ands.w	r3, r4, #16
 800b190:	bf18      	it	ne
 800b192:	236a      	movne	r3, #106	@ 0x6a
 800b194:	4ea9      	ldr	r6, [pc, #676]	@ (800b43c <_strtod_l+0x854>)
 800b196:	9308      	str	r3, [sp, #32]
 800b198:	4650      	mov	r0, sl
 800b19a:	4659      	mov	r1, fp
 800b19c:	2300      	movs	r3, #0
 800b19e:	07e2      	lsls	r2, r4, #31
 800b1a0:	d504      	bpl.n	800b1ac <_strtod_l+0x5c4>
 800b1a2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b1a6:	f7f5 fa2f 	bl	8000608 <__aeabi_dmul>
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	1064      	asrs	r4, r4, #1
 800b1ae:	f106 0608 	add.w	r6, r6, #8
 800b1b2:	d1f4      	bne.n	800b19e <_strtod_l+0x5b6>
 800b1b4:	b10b      	cbz	r3, 800b1ba <_strtod_l+0x5d2>
 800b1b6:	4682      	mov	sl, r0
 800b1b8:	468b      	mov	fp, r1
 800b1ba:	9b08      	ldr	r3, [sp, #32]
 800b1bc:	b1b3      	cbz	r3, 800b1ec <_strtod_l+0x604>
 800b1be:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b1c2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	4659      	mov	r1, fp
 800b1ca:	dd0f      	ble.n	800b1ec <_strtod_l+0x604>
 800b1cc:	2b1f      	cmp	r3, #31
 800b1ce:	dd55      	ble.n	800b27c <_strtod_l+0x694>
 800b1d0:	2b34      	cmp	r3, #52	@ 0x34
 800b1d2:	bfde      	ittt	le
 800b1d4:	f04f 33ff 	movle.w	r3, #4294967295
 800b1d8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b1dc:	4093      	lslle	r3, r2
 800b1de:	f04f 0a00 	mov.w	sl, #0
 800b1e2:	bfcc      	ite	gt
 800b1e4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b1e8:	ea03 0b01 	andle.w	fp, r3, r1
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	4650      	mov	r0, sl
 800b1f2:	4659      	mov	r1, fp
 800b1f4:	f7f5 fc70 	bl	8000ad8 <__aeabi_dcmpeq>
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	d1a6      	bne.n	800b14a <_strtod_l+0x562>
 800b1fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1fe:	9300      	str	r3, [sp, #0]
 800b200:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b202:	9805      	ldr	r0, [sp, #20]
 800b204:	462b      	mov	r3, r5
 800b206:	463a      	mov	r2, r7
 800b208:	f7ff f8c6 	bl	800a398 <__s2b>
 800b20c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b20e:	2800      	cmp	r0, #0
 800b210:	f43f af05 	beq.w	800b01e <_strtod_l+0x436>
 800b214:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b216:	2a00      	cmp	r2, #0
 800b218:	eba9 0308 	sub.w	r3, r9, r8
 800b21c:	bfa8      	it	ge
 800b21e:	2300      	movge	r3, #0
 800b220:	9312      	str	r3, [sp, #72]	@ 0x48
 800b222:	2400      	movs	r4, #0
 800b224:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b228:	9316      	str	r3, [sp, #88]	@ 0x58
 800b22a:	46a0      	mov	r8, r4
 800b22c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b22e:	9805      	ldr	r0, [sp, #20]
 800b230:	6859      	ldr	r1, [r3, #4]
 800b232:	f7ff f809 	bl	800a248 <_Balloc>
 800b236:	4681      	mov	r9, r0
 800b238:	2800      	cmp	r0, #0
 800b23a:	f43f aef4 	beq.w	800b026 <_strtod_l+0x43e>
 800b23e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b240:	691a      	ldr	r2, [r3, #16]
 800b242:	3202      	adds	r2, #2
 800b244:	f103 010c 	add.w	r1, r3, #12
 800b248:	0092      	lsls	r2, r2, #2
 800b24a:	300c      	adds	r0, #12
 800b24c:	f7fe f899 	bl	8009382 <memcpy>
 800b250:	ec4b ab10 	vmov	d0, sl, fp
 800b254:	9805      	ldr	r0, [sp, #20]
 800b256:	aa1c      	add	r2, sp, #112	@ 0x70
 800b258:	a91b      	add	r1, sp, #108	@ 0x6c
 800b25a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b25e:	f7ff fbd7 	bl	800aa10 <__d2b>
 800b262:	901a      	str	r0, [sp, #104]	@ 0x68
 800b264:	2800      	cmp	r0, #0
 800b266:	f43f aede 	beq.w	800b026 <_strtod_l+0x43e>
 800b26a:	9805      	ldr	r0, [sp, #20]
 800b26c:	2101      	movs	r1, #1
 800b26e:	f7ff f929 	bl	800a4c4 <__i2b>
 800b272:	4680      	mov	r8, r0
 800b274:	b948      	cbnz	r0, 800b28a <_strtod_l+0x6a2>
 800b276:	f04f 0800 	mov.w	r8, #0
 800b27a:	e6d4      	b.n	800b026 <_strtod_l+0x43e>
 800b27c:	f04f 32ff 	mov.w	r2, #4294967295
 800b280:	fa02 f303 	lsl.w	r3, r2, r3
 800b284:	ea03 0a0a 	and.w	sl, r3, sl
 800b288:	e7b0      	b.n	800b1ec <_strtod_l+0x604>
 800b28a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b28c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b28e:	2d00      	cmp	r5, #0
 800b290:	bfab      	itete	ge
 800b292:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b294:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b296:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b298:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b29a:	bfac      	ite	ge
 800b29c:	18ef      	addge	r7, r5, r3
 800b29e:	1b5e      	sublt	r6, r3, r5
 800b2a0:	9b08      	ldr	r3, [sp, #32]
 800b2a2:	1aed      	subs	r5, r5, r3
 800b2a4:	4415      	add	r5, r2
 800b2a6:	4b66      	ldr	r3, [pc, #408]	@ (800b440 <_strtod_l+0x858>)
 800b2a8:	3d01      	subs	r5, #1
 800b2aa:	429d      	cmp	r5, r3
 800b2ac:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b2b0:	da50      	bge.n	800b354 <_strtod_l+0x76c>
 800b2b2:	1b5b      	subs	r3, r3, r5
 800b2b4:	2b1f      	cmp	r3, #31
 800b2b6:	eba2 0203 	sub.w	r2, r2, r3
 800b2ba:	f04f 0101 	mov.w	r1, #1
 800b2be:	dc3d      	bgt.n	800b33c <_strtod_l+0x754>
 800b2c0:	fa01 f303 	lsl.w	r3, r1, r3
 800b2c4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	9310      	str	r3, [sp, #64]	@ 0x40
 800b2ca:	18bd      	adds	r5, r7, r2
 800b2cc:	9b08      	ldr	r3, [sp, #32]
 800b2ce:	42af      	cmp	r7, r5
 800b2d0:	4416      	add	r6, r2
 800b2d2:	441e      	add	r6, r3
 800b2d4:	463b      	mov	r3, r7
 800b2d6:	bfa8      	it	ge
 800b2d8:	462b      	movge	r3, r5
 800b2da:	42b3      	cmp	r3, r6
 800b2dc:	bfa8      	it	ge
 800b2de:	4633      	movge	r3, r6
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	bfc2      	ittt	gt
 800b2e4:	1aed      	subgt	r5, r5, r3
 800b2e6:	1af6      	subgt	r6, r6, r3
 800b2e8:	1aff      	subgt	r7, r7, r3
 800b2ea:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	dd16      	ble.n	800b31e <_strtod_l+0x736>
 800b2f0:	4641      	mov	r1, r8
 800b2f2:	9805      	ldr	r0, [sp, #20]
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	f7ff f9a5 	bl	800a644 <__pow5mult>
 800b2fa:	4680      	mov	r8, r0
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	d0ba      	beq.n	800b276 <_strtod_l+0x68e>
 800b300:	4601      	mov	r1, r0
 800b302:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b304:	9805      	ldr	r0, [sp, #20]
 800b306:	f7ff f8f3 	bl	800a4f0 <__multiply>
 800b30a:	900e      	str	r0, [sp, #56]	@ 0x38
 800b30c:	2800      	cmp	r0, #0
 800b30e:	f43f ae8a 	beq.w	800b026 <_strtod_l+0x43e>
 800b312:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b314:	9805      	ldr	r0, [sp, #20]
 800b316:	f7fe ffd7 	bl	800a2c8 <_Bfree>
 800b31a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b31c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b31e:	2d00      	cmp	r5, #0
 800b320:	dc1d      	bgt.n	800b35e <_strtod_l+0x776>
 800b322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b324:	2b00      	cmp	r3, #0
 800b326:	dd23      	ble.n	800b370 <_strtod_l+0x788>
 800b328:	4649      	mov	r1, r9
 800b32a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b32c:	9805      	ldr	r0, [sp, #20]
 800b32e:	f7ff f989 	bl	800a644 <__pow5mult>
 800b332:	4681      	mov	r9, r0
 800b334:	b9e0      	cbnz	r0, 800b370 <_strtod_l+0x788>
 800b336:	f04f 0900 	mov.w	r9, #0
 800b33a:	e674      	b.n	800b026 <_strtod_l+0x43e>
 800b33c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b340:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b344:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b348:	35e2      	adds	r5, #226	@ 0xe2
 800b34a:	fa01 f305 	lsl.w	r3, r1, r5
 800b34e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b350:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b352:	e7ba      	b.n	800b2ca <_strtod_l+0x6e2>
 800b354:	2300      	movs	r3, #0
 800b356:	9310      	str	r3, [sp, #64]	@ 0x40
 800b358:	2301      	movs	r3, #1
 800b35a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b35c:	e7b5      	b.n	800b2ca <_strtod_l+0x6e2>
 800b35e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b360:	9805      	ldr	r0, [sp, #20]
 800b362:	462a      	mov	r2, r5
 800b364:	f7ff f9c8 	bl	800a6f8 <__lshift>
 800b368:	901a      	str	r0, [sp, #104]	@ 0x68
 800b36a:	2800      	cmp	r0, #0
 800b36c:	d1d9      	bne.n	800b322 <_strtod_l+0x73a>
 800b36e:	e65a      	b.n	800b026 <_strtod_l+0x43e>
 800b370:	2e00      	cmp	r6, #0
 800b372:	dd07      	ble.n	800b384 <_strtod_l+0x79c>
 800b374:	4649      	mov	r1, r9
 800b376:	9805      	ldr	r0, [sp, #20]
 800b378:	4632      	mov	r2, r6
 800b37a:	f7ff f9bd 	bl	800a6f8 <__lshift>
 800b37e:	4681      	mov	r9, r0
 800b380:	2800      	cmp	r0, #0
 800b382:	d0d8      	beq.n	800b336 <_strtod_l+0x74e>
 800b384:	2f00      	cmp	r7, #0
 800b386:	dd08      	ble.n	800b39a <_strtod_l+0x7b2>
 800b388:	4641      	mov	r1, r8
 800b38a:	9805      	ldr	r0, [sp, #20]
 800b38c:	463a      	mov	r2, r7
 800b38e:	f7ff f9b3 	bl	800a6f8 <__lshift>
 800b392:	4680      	mov	r8, r0
 800b394:	2800      	cmp	r0, #0
 800b396:	f43f ae46 	beq.w	800b026 <_strtod_l+0x43e>
 800b39a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b39c:	9805      	ldr	r0, [sp, #20]
 800b39e:	464a      	mov	r2, r9
 800b3a0:	f7ff fa32 	bl	800a808 <__mdiff>
 800b3a4:	4604      	mov	r4, r0
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	f43f ae3d 	beq.w	800b026 <_strtod_l+0x43e>
 800b3ac:	68c3      	ldr	r3, [r0, #12]
 800b3ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	60c3      	str	r3, [r0, #12]
 800b3b4:	4641      	mov	r1, r8
 800b3b6:	f7ff fa0b 	bl	800a7d0 <__mcmp>
 800b3ba:	2800      	cmp	r0, #0
 800b3bc:	da46      	bge.n	800b44c <_strtod_l+0x864>
 800b3be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3c0:	ea53 030a 	orrs.w	r3, r3, sl
 800b3c4:	d16c      	bne.n	800b4a0 <_strtod_l+0x8b8>
 800b3c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d168      	bne.n	800b4a0 <_strtod_l+0x8b8>
 800b3ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b3d2:	0d1b      	lsrs	r3, r3, #20
 800b3d4:	051b      	lsls	r3, r3, #20
 800b3d6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b3da:	d961      	bls.n	800b4a0 <_strtod_l+0x8b8>
 800b3dc:	6963      	ldr	r3, [r4, #20]
 800b3de:	b913      	cbnz	r3, 800b3e6 <_strtod_l+0x7fe>
 800b3e0:	6923      	ldr	r3, [r4, #16]
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	dd5c      	ble.n	800b4a0 <_strtod_l+0x8b8>
 800b3e6:	4621      	mov	r1, r4
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	9805      	ldr	r0, [sp, #20]
 800b3ec:	f7ff f984 	bl	800a6f8 <__lshift>
 800b3f0:	4641      	mov	r1, r8
 800b3f2:	4604      	mov	r4, r0
 800b3f4:	f7ff f9ec 	bl	800a7d0 <__mcmp>
 800b3f8:	2800      	cmp	r0, #0
 800b3fa:	dd51      	ble.n	800b4a0 <_strtod_l+0x8b8>
 800b3fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b400:	9a08      	ldr	r2, [sp, #32]
 800b402:	0d1b      	lsrs	r3, r3, #20
 800b404:	051b      	lsls	r3, r3, #20
 800b406:	2a00      	cmp	r2, #0
 800b408:	d06b      	beq.n	800b4e2 <_strtod_l+0x8fa>
 800b40a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b40e:	d868      	bhi.n	800b4e2 <_strtod_l+0x8fa>
 800b410:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b414:	f67f ae9d 	bls.w	800b152 <_strtod_l+0x56a>
 800b418:	4b0a      	ldr	r3, [pc, #40]	@ (800b444 <_strtod_l+0x85c>)
 800b41a:	4650      	mov	r0, sl
 800b41c:	4659      	mov	r1, fp
 800b41e:	2200      	movs	r2, #0
 800b420:	f7f5 f8f2 	bl	8000608 <__aeabi_dmul>
 800b424:	4b08      	ldr	r3, [pc, #32]	@ (800b448 <_strtod_l+0x860>)
 800b426:	400b      	ands	r3, r1
 800b428:	4682      	mov	sl, r0
 800b42a:	468b      	mov	fp, r1
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	f47f ae05 	bne.w	800b03c <_strtod_l+0x454>
 800b432:	9a05      	ldr	r2, [sp, #20]
 800b434:	2322      	movs	r3, #34	@ 0x22
 800b436:	6013      	str	r3, [r2, #0]
 800b438:	e600      	b.n	800b03c <_strtod_l+0x454>
 800b43a:	bf00      	nop
 800b43c:	0800d438 	.word	0x0800d438
 800b440:	fffffc02 	.word	0xfffffc02
 800b444:	39500000 	.word	0x39500000
 800b448:	7ff00000 	.word	0x7ff00000
 800b44c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b450:	d165      	bne.n	800b51e <_strtod_l+0x936>
 800b452:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b454:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b458:	b35a      	cbz	r2, 800b4b2 <_strtod_l+0x8ca>
 800b45a:	4a9f      	ldr	r2, [pc, #636]	@ (800b6d8 <_strtod_l+0xaf0>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d12b      	bne.n	800b4b8 <_strtod_l+0x8d0>
 800b460:	9b08      	ldr	r3, [sp, #32]
 800b462:	4651      	mov	r1, sl
 800b464:	b303      	cbz	r3, 800b4a8 <_strtod_l+0x8c0>
 800b466:	4b9d      	ldr	r3, [pc, #628]	@ (800b6dc <_strtod_l+0xaf4>)
 800b468:	465a      	mov	r2, fp
 800b46a:	4013      	ands	r3, r2
 800b46c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b470:	f04f 32ff 	mov.w	r2, #4294967295
 800b474:	d81b      	bhi.n	800b4ae <_strtod_l+0x8c6>
 800b476:	0d1b      	lsrs	r3, r3, #20
 800b478:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b47c:	fa02 f303 	lsl.w	r3, r2, r3
 800b480:	4299      	cmp	r1, r3
 800b482:	d119      	bne.n	800b4b8 <_strtod_l+0x8d0>
 800b484:	4b96      	ldr	r3, [pc, #600]	@ (800b6e0 <_strtod_l+0xaf8>)
 800b486:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b488:	429a      	cmp	r2, r3
 800b48a:	d102      	bne.n	800b492 <_strtod_l+0x8aa>
 800b48c:	3101      	adds	r1, #1
 800b48e:	f43f adca 	beq.w	800b026 <_strtod_l+0x43e>
 800b492:	4b92      	ldr	r3, [pc, #584]	@ (800b6dc <_strtod_l+0xaf4>)
 800b494:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b496:	401a      	ands	r2, r3
 800b498:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b49c:	f04f 0a00 	mov.w	sl, #0
 800b4a0:	9b08      	ldr	r3, [sp, #32]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d1b8      	bne.n	800b418 <_strtod_l+0x830>
 800b4a6:	e5c9      	b.n	800b03c <_strtod_l+0x454>
 800b4a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ac:	e7e8      	b.n	800b480 <_strtod_l+0x898>
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	e7e6      	b.n	800b480 <_strtod_l+0x898>
 800b4b2:	ea53 030a 	orrs.w	r3, r3, sl
 800b4b6:	d0a1      	beq.n	800b3fc <_strtod_l+0x814>
 800b4b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b4ba:	b1db      	cbz	r3, 800b4f4 <_strtod_l+0x90c>
 800b4bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b4be:	4213      	tst	r3, r2
 800b4c0:	d0ee      	beq.n	800b4a0 <_strtod_l+0x8b8>
 800b4c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4c4:	9a08      	ldr	r2, [sp, #32]
 800b4c6:	4650      	mov	r0, sl
 800b4c8:	4659      	mov	r1, fp
 800b4ca:	b1bb      	cbz	r3, 800b4fc <_strtod_l+0x914>
 800b4cc:	f7ff fb6e 	bl	800abac <sulp>
 800b4d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4d4:	ec53 2b10 	vmov	r2, r3, d0
 800b4d8:	f7f4 fee0 	bl	800029c <__adddf3>
 800b4dc:	4682      	mov	sl, r0
 800b4de:	468b      	mov	fp, r1
 800b4e0:	e7de      	b.n	800b4a0 <_strtod_l+0x8b8>
 800b4e2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b4e6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b4ea:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b4ee:	f04f 3aff 	mov.w	sl, #4294967295
 800b4f2:	e7d5      	b.n	800b4a0 <_strtod_l+0x8b8>
 800b4f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b4f6:	ea13 0f0a 	tst.w	r3, sl
 800b4fa:	e7e1      	b.n	800b4c0 <_strtod_l+0x8d8>
 800b4fc:	f7ff fb56 	bl	800abac <sulp>
 800b500:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b504:	ec53 2b10 	vmov	r2, r3, d0
 800b508:	f7f4 fec6 	bl	8000298 <__aeabi_dsub>
 800b50c:	2200      	movs	r2, #0
 800b50e:	2300      	movs	r3, #0
 800b510:	4682      	mov	sl, r0
 800b512:	468b      	mov	fp, r1
 800b514:	f7f5 fae0 	bl	8000ad8 <__aeabi_dcmpeq>
 800b518:	2800      	cmp	r0, #0
 800b51a:	d0c1      	beq.n	800b4a0 <_strtod_l+0x8b8>
 800b51c:	e619      	b.n	800b152 <_strtod_l+0x56a>
 800b51e:	4641      	mov	r1, r8
 800b520:	4620      	mov	r0, r4
 800b522:	f7ff facd 	bl	800aac0 <__ratio>
 800b526:	ec57 6b10 	vmov	r6, r7, d0
 800b52a:	2200      	movs	r2, #0
 800b52c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b530:	4630      	mov	r0, r6
 800b532:	4639      	mov	r1, r7
 800b534:	f7f5 fae4 	bl	8000b00 <__aeabi_dcmple>
 800b538:	2800      	cmp	r0, #0
 800b53a:	d06f      	beq.n	800b61c <_strtod_l+0xa34>
 800b53c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d17a      	bne.n	800b638 <_strtod_l+0xa50>
 800b542:	f1ba 0f00 	cmp.w	sl, #0
 800b546:	d158      	bne.n	800b5fa <_strtod_l+0xa12>
 800b548:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b54a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d15a      	bne.n	800b608 <_strtod_l+0xa20>
 800b552:	4b64      	ldr	r3, [pc, #400]	@ (800b6e4 <_strtod_l+0xafc>)
 800b554:	2200      	movs	r2, #0
 800b556:	4630      	mov	r0, r6
 800b558:	4639      	mov	r1, r7
 800b55a:	f7f5 fac7 	bl	8000aec <__aeabi_dcmplt>
 800b55e:	2800      	cmp	r0, #0
 800b560:	d159      	bne.n	800b616 <_strtod_l+0xa2e>
 800b562:	4630      	mov	r0, r6
 800b564:	4639      	mov	r1, r7
 800b566:	4b60      	ldr	r3, [pc, #384]	@ (800b6e8 <_strtod_l+0xb00>)
 800b568:	2200      	movs	r2, #0
 800b56a:	f7f5 f84d 	bl	8000608 <__aeabi_dmul>
 800b56e:	4606      	mov	r6, r0
 800b570:	460f      	mov	r7, r1
 800b572:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b576:	9606      	str	r6, [sp, #24]
 800b578:	9307      	str	r3, [sp, #28]
 800b57a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b57e:	4d57      	ldr	r5, [pc, #348]	@ (800b6dc <_strtod_l+0xaf4>)
 800b580:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b584:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b586:	401d      	ands	r5, r3
 800b588:	4b58      	ldr	r3, [pc, #352]	@ (800b6ec <_strtod_l+0xb04>)
 800b58a:	429d      	cmp	r5, r3
 800b58c:	f040 80b2 	bne.w	800b6f4 <_strtod_l+0xb0c>
 800b590:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b592:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b596:	ec4b ab10 	vmov	d0, sl, fp
 800b59a:	f7ff f9c9 	bl	800a930 <__ulp>
 800b59e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b5a2:	ec51 0b10 	vmov	r0, r1, d0
 800b5a6:	f7f5 f82f 	bl	8000608 <__aeabi_dmul>
 800b5aa:	4652      	mov	r2, sl
 800b5ac:	465b      	mov	r3, fp
 800b5ae:	f7f4 fe75 	bl	800029c <__adddf3>
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	4949      	ldr	r1, [pc, #292]	@ (800b6dc <_strtod_l+0xaf4>)
 800b5b6:	4a4e      	ldr	r2, [pc, #312]	@ (800b6f0 <_strtod_l+0xb08>)
 800b5b8:	4019      	ands	r1, r3
 800b5ba:	4291      	cmp	r1, r2
 800b5bc:	4682      	mov	sl, r0
 800b5be:	d942      	bls.n	800b646 <_strtod_l+0xa5e>
 800b5c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b5c2:	4b47      	ldr	r3, [pc, #284]	@ (800b6e0 <_strtod_l+0xaf8>)
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d103      	bne.n	800b5d0 <_strtod_l+0x9e8>
 800b5c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	f43f ad2b 	beq.w	800b026 <_strtod_l+0x43e>
 800b5d0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b6e0 <_strtod_l+0xaf8>
 800b5d4:	f04f 3aff 	mov.w	sl, #4294967295
 800b5d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b5da:	9805      	ldr	r0, [sp, #20]
 800b5dc:	f7fe fe74 	bl	800a2c8 <_Bfree>
 800b5e0:	9805      	ldr	r0, [sp, #20]
 800b5e2:	4649      	mov	r1, r9
 800b5e4:	f7fe fe70 	bl	800a2c8 <_Bfree>
 800b5e8:	9805      	ldr	r0, [sp, #20]
 800b5ea:	4641      	mov	r1, r8
 800b5ec:	f7fe fe6c 	bl	800a2c8 <_Bfree>
 800b5f0:	9805      	ldr	r0, [sp, #20]
 800b5f2:	4621      	mov	r1, r4
 800b5f4:	f7fe fe68 	bl	800a2c8 <_Bfree>
 800b5f8:	e618      	b.n	800b22c <_strtod_l+0x644>
 800b5fa:	f1ba 0f01 	cmp.w	sl, #1
 800b5fe:	d103      	bne.n	800b608 <_strtod_l+0xa20>
 800b600:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b602:	2b00      	cmp	r3, #0
 800b604:	f43f ada5 	beq.w	800b152 <_strtod_l+0x56a>
 800b608:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b6b8 <_strtod_l+0xad0>
 800b60c:	4f35      	ldr	r7, [pc, #212]	@ (800b6e4 <_strtod_l+0xafc>)
 800b60e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b612:	2600      	movs	r6, #0
 800b614:	e7b1      	b.n	800b57a <_strtod_l+0x992>
 800b616:	4f34      	ldr	r7, [pc, #208]	@ (800b6e8 <_strtod_l+0xb00>)
 800b618:	2600      	movs	r6, #0
 800b61a:	e7aa      	b.n	800b572 <_strtod_l+0x98a>
 800b61c:	4b32      	ldr	r3, [pc, #200]	@ (800b6e8 <_strtod_l+0xb00>)
 800b61e:	4630      	mov	r0, r6
 800b620:	4639      	mov	r1, r7
 800b622:	2200      	movs	r2, #0
 800b624:	f7f4 fff0 	bl	8000608 <__aeabi_dmul>
 800b628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b62a:	4606      	mov	r6, r0
 800b62c:	460f      	mov	r7, r1
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d09f      	beq.n	800b572 <_strtod_l+0x98a>
 800b632:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b636:	e7a0      	b.n	800b57a <_strtod_l+0x992>
 800b638:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b6c0 <_strtod_l+0xad8>
 800b63c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b640:	ec57 6b17 	vmov	r6, r7, d7
 800b644:	e799      	b.n	800b57a <_strtod_l+0x992>
 800b646:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b64a:	9b08      	ldr	r3, [sp, #32]
 800b64c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b650:	2b00      	cmp	r3, #0
 800b652:	d1c1      	bne.n	800b5d8 <_strtod_l+0x9f0>
 800b654:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b658:	0d1b      	lsrs	r3, r3, #20
 800b65a:	051b      	lsls	r3, r3, #20
 800b65c:	429d      	cmp	r5, r3
 800b65e:	d1bb      	bne.n	800b5d8 <_strtod_l+0x9f0>
 800b660:	4630      	mov	r0, r6
 800b662:	4639      	mov	r1, r7
 800b664:	f7f5 fb30 	bl	8000cc8 <__aeabi_d2lz>
 800b668:	f7f4 ffa0 	bl	80005ac <__aeabi_l2d>
 800b66c:	4602      	mov	r2, r0
 800b66e:	460b      	mov	r3, r1
 800b670:	4630      	mov	r0, r6
 800b672:	4639      	mov	r1, r7
 800b674:	f7f4 fe10 	bl	8000298 <__aeabi_dsub>
 800b678:	460b      	mov	r3, r1
 800b67a:	4602      	mov	r2, r0
 800b67c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b680:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b684:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b686:	ea46 060a 	orr.w	r6, r6, sl
 800b68a:	431e      	orrs	r6, r3
 800b68c:	d06f      	beq.n	800b76e <_strtod_l+0xb86>
 800b68e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b6c8 <_strtod_l+0xae0>)
 800b690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b694:	f7f5 fa2a 	bl	8000aec <__aeabi_dcmplt>
 800b698:	2800      	cmp	r0, #0
 800b69a:	f47f accf 	bne.w	800b03c <_strtod_l+0x454>
 800b69e:	a30c      	add	r3, pc, #48	@ (adr r3, 800b6d0 <_strtod_l+0xae8>)
 800b6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b6a8:	f7f5 fa3e 	bl	8000b28 <__aeabi_dcmpgt>
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	d093      	beq.n	800b5d8 <_strtod_l+0x9f0>
 800b6b0:	e4c4      	b.n	800b03c <_strtod_l+0x454>
 800b6b2:	bf00      	nop
 800b6b4:	f3af 8000 	nop.w
 800b6b8:	00000000 	.word	0x00000000
 800b6bc:	bff00000 	.word	0xbff00000
 800b6c0:	00000000 	.word	0x00000000
 800b6c4:	3ff00000 	.word	0x3ff00000
 800b6c8:	94a03595 	.word	0x94a03595
 800b6cc:	3fdfffff 	.word	0x3fdfffff
 800b6d0:	35afe535 	.word	0x35afe535
 800b6d4:	3fe00000 	.word	0x3fe00000
 800b6d8:	000fffff 	.word	0x000fffff
 800b6dc:	7ff00000 	.word	0x7ff00000
 800b6e0:	7fefffff 	.word	0x7fefffff
 800b6e4:	3ff00000 	.word	0x3ff00000
 800b6e8:	3fe00000 	.word	0x3fe00000
 800b6ec:	7fe00000 	.word	0x7fe00000
 800b6f0:	7c9fffff 	.word	0x7c9fffff
 800b6f4:	9b08      	ldr	r3, [sp, #32]
 800b6f6:	b323      	cbz	r3, 800b742 <_strtod_l+0xb5a>
 800b6f8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b6fc:	d821      	bhi.n	800b742 <_strtod_l+0xb5a>
 800b6fe:	a328      	add	r3, pc, #160	@ (adr r3, 800b7a0 <_strtod_l+0xbb8>)
 800b700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b704:	4630      	mov	r0, r6
 800b706:	4639      	mov	r1, r7
 800b708:	f7f5 f9fa 	bl	8000b00 <__aeabi_dcmple>
 800b70c:	b1a0      	cbz	r0, 800b738 <_strtod_l+0xb50>
 800b70e:	4639      	mov	r1, r7
 800b710:	4630      	mov	r0, r6
 800b712:	f7f5 fa51 	bl	8000bb8 <__aeabi_d2uiz>
 800b716:	2801      	cmp	r0, #1
 800b718:	bf38      	it	cc
 800b71a:	2001      	movcc	r0, #1
 800b71c:	f7f4 fefa 	bl	8000514 <__aeabi_ui2d>
 800b720:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b722:	4606      	mov	r6, r0
 800b724:	460f      	mov	r7, r1
 800b726:	b9fb      	cbnz	r3, 800b768 <_strtod_l+0xb80>
 800b728:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b72c:	9014      	str	r0, [sp, #80]	@ 0x50
 800b72e:	9315      	str	r3, [sp, #84]	@ 0x54
 800b730:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b734:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b738:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b73a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b73e:	1b5b      	subs	r3, r3, r5
 800b740:	9311      	str	r3, [sp, #68]	@ 0x44
 800b742:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b746:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b74a:	f7ff f8f1 	bl	800a930 <__ulp>
 800b74e:	4650      	mov	r0, sl
 800b750:	ec53 2b10 	vmov	r2, r3, d0
 800b754:	4659      	mov	r1, fp
 800b756:	f7f4 ff57 	bl	8000608 <__aeabi_dmul>
 800b75a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b75e:	f7f4 fd9d 	bl	800029c <__adddf3>
 800b762:	4682      	mov	sl, r0
 800b764:	468b      	mov	fp, r1
 800b766:	e770      	b.n	800b64a <_strtod_l+0xa62>
 800b768:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b76c:	e7e0      	b.n	800b730 <_strtod_l+0xb48>
 800b76e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b7a8 <_strtod_l+0xbc0>)
 800b770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b774:	f7f5 f9ba 	bl	8000aec <__aeabi_dcmplt>
 800b778:	e798      	b.n	800b6ac <_strtod_l+0xac4>
 800b77a:	2300      	movs	r3, #0
 800b77c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b77e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b780:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b782:	6013      	str	r3, [r2, #0]
 800b784:	f7ff ba6d 	b.w	800ac62 <_strtod_l+0x7a>
 800b788:	2a65      	cmp	r2, #101	@ 0x65
 800b78a:	f43f ab66 	beq.w	800ae5a <_strtod_l+0x272>
 800b78e:	2a45      	cmp	r2, #69	@ 0x45
 800b790:	f43f ab63 	beq.w	800ae5a <_strtod_l+0x272>
 800b794:	2301      	movs	r3, #1
 800b796:	f7ff bb9e 	b.w	800aed6 <_strtod_l+0x2ee>
 800b79a:	bf00      	nop
 800b79c:	f3af 8000 	nop.w
 800b7a0:	ffc00000 	.word	0xffc00000
 800b7a4:	41dfffff 	.word	0x41dfffff
 800b7a8:	94a03595 	.word	0x94a03595
 800b7ac:	3fcfffff 	.word	0x3fcfffff

0800b7b0 <_strtod_r>:
 800b7b0:	4b01      	ldr	r3, [pc, #4]	@ (800b7b8 <_strtod_r+0x8>)
 800b7b2:	f7ff ba19 	b.w	800abe8 <_strtod_l>
 800b7b6:	bf00      	nop
 800b7b8:	20000068 	.word	0x20000068

0800b7bc <_strtol_l.constprop.0>:
 800b7bc:	2b24      	cmp	r3, #36	@ 0x24
 800b7be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7c2:	4686      	mov	lr, r0
 800b7c4:	4690      	mov	r8, r2
 800b7c6:	d801      	bhi.n	800b7cc <_strtol_l.constprop.0+0x10>
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d106      	bne.n	800b7da <_strtol_l.constprop.0+0x1e>
 800b7cc:	f7fd fdac 	bl	8009328 <__errno>
 800b7d0:	2316      	movs	r3, #22
 800b7d2:	6003      	str	r3, [r0, #0]
 800b7d4:	2000      	movs	r0, #0
 800b7d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7da:	4834      	ldr	r0, [pc, #208]	@ (800b8ac <_strtol_l.constprop.0+0xf0>)
 800b7dc:	460d      	mov	r5, r1
 800b7de:	462a      	mov	r2, r5
 800b7e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b7e4:	5d06      	ldrb	r6, [r0, r4]
 800b7e6:	f016 0608 	ands.w	r6, r6, #8
 800b7ea:	d1f8      	bne.n	800b7de <_strtol_l.constprop.0+0x22>
 800b7ec:	2c2d      	cmp	r4, #45	@ 0x2d
 800b7ee:	d12d      	bne.n	800b84c <_strtol_l.constprop.0+0x90>
 800b7f0:	782c      	ldrb	r4, [r5, #0]
 800b7f2:	2601      	movs	r6, #1
 800b7f4:	1c95      	adds	r5, r2, #2
 800b7f6:	f033 0210 	bics.w	r2, r3, #16
 800b7fa:	d109      	bne.n	800b810 <_strtol_l.constprop.0+0x54>
 800b7fc:	2c30      	cmp	r4, #48	@ 0x30
 800b7fe:	d12a      	bne.n	800b856 <_strtol_l.constprop.0+0x9a>
 800b800:	782a      	ldrb	r2, [r5, #0]
 800b802:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b806:	2a58      	cmp	r2, #88	@ 0x58
 800b808:	d125      	bne.n	800b856 <_strtol_l.constprop.0+0x9a>
 800b80a:	786c      	ldrb	r4, [r5, #1]
 800b80c:	2310      	movs	r3, #16
 800b80e:	3502      	adds	r5, #2
 800b810:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b814:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b818:	2200      	movs	r2, #0
 800b81a:	fbbc f9f3 	udiv	r9, ip, r3
 800b81e:	4610      	mov	r0, r2
 800b820:	fb03 ca19 	mls	sl, r3, r9, ip
 800b824:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b828:	2f09      	cmp	r7, #9
 800b82a:	d81b      	bhi.n	800b864 <_strtol_l.constprop.0+0xa8>
 800b82c:	463c      	mov	r4, r7
 800b82e:	42a3      	cmp	r3, r4
 800b830:	dd27      	ble.n	800b882 <_strtol_l.constprop.0+0xc6>
 800b832:	1c57      	adds	r7, r2, #1
 800b834:	d007      	beq.n	800b846 <_strtol_l.constprop.0+0x8a>
 800b836:	4581      	cmp	r9, r0
 800b838:	d320      	bcc.n	800b87c <_strtol_l.constprop.0+0xc0>
 800b83a:	d101      	bne.n	800b840 <_strtol_l.constprop.0+0x84>
 800b83c:	45a2      	cmp	sl, r4
 800b83e:	db1d      	blt.n	800b87c <_strtol_l.constprop.0+0xc0>
 800b840:	fb00 4003 	mla	r0, r0, r3, r4
 800b844:	2201      	movs	r2, #1
 800b846:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b84a:	e7eb      	b.n	800b824 <_strtol_l.constprop.0+0x68>
 800b84c:	2c2b      	cmp	r4, #43	@ 0x2b
 800b84e:	bf04      	itt	eq
 800b850:	782c      	ldrbeq	r4, [r5, #0]
 800b852:	1c95      	addeq	r5, r2, #2
 800b854:	e7cf      	b.n	800b7f6 <_strtol_l.constprop.0+0x3a>
 800b856:	2b00      	cmp	r3, #0
 800b858:	d1da      	bne.n	800b810 <_strtol_l.constprop.0+0x54>
 800b85a:	2c30      	cmp	r4, #48	@ 0x30
 800b85c:	bf0c      	ite	eq
 800b85e:	2308      	moveq	r3, #8
 800b860:	230a      	movne	r3, #10
 800b862:	e7d5      	b.n	800b810 <_strtol_l.constprop.0+0x54>
 800b864:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b868:	2f19      	cmp	r7, #25
 800b86a:	d801      	bhi.n	800b870 <_strtol_l.constprop.0+0xb4>
 800b86c:	3c37      	subs	r4, #55	@ 0x37
 800b86e:	e7de      	b.n	800b82e <_strtol_l.constprop.0+0x72>
 800b870:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b874:	2f19      	cmp	r7, #25
 800b876:	d804      	bhi.n	800b882 <_strtol_l.constprop.0+0xc6>
 800b878:	3c57      	subs	r4, #87	@ 0x57
 800b87a:	e7d8      	b.n	800b82e <_strtol_l.constprop.0+0x72>
 800b87c:	f04f 32ff 	mov.w	r2, #4294967295
 800b880:	e7e1      	b.n	800b846 <_strtol_l.constprop.0+0x8a>
 800b882:	1c53      	adds	r3, r2, #1
 800b884:	d108      	bne.n	800b898 <_strtol_l.constprop.0+0xdc>
 800b886:	2322      	movs	r3, #34	@ 0x22
 800b888:	f8ce 3000 	str.w	r3, [lr]
 800b88c:	4660      	mov	r0, ip
 800b88e:	f1b8 0f00 	cmp.w	r8, #0
 800b892:	d0a0      	beq.n	800b7d6 <_strtol_l.constprop.0+0x1a>
 800b894:	1e69      	subs	r1, r5, #1
 800b896:	e006      	b.n	800b8a6 <_strtol_l.constprop.0+0xea>
 800b898:	b106      	cbz	r6, 800b89c <_strtol_l.constprop.0+0xe0>
 800b89a:	4240      	negs	r0, r0
 800b89c:	f1b8 0f00 	cmp.w	r8, #0
 800b8a0:	d099      	beq.n	800b7d6 <_strtol_l.constprop.0+0x1a>
 800b8a2:	2a00      	cmp	r2, #0
 800b8a4:	d1f6      	bne.n	800b894 <_strtol_l.constprop.0+0xd8>
 800b8a6:	f8c8 1000 	str.w	r1, [r8]
 800b8aa:	e794      	b.n	800b7d6 <_strtol_l.constprop.0+0x1a>
 800b8ac:	0800d461 	.word	0x0800d461

0800b8b0 <_strtol_r>:
 800b8b0:	f7ff bf84 	b.w	800b7bc <_strtol_l.constprop.0>

0800b8b4 <__ssputs_r>:
 800b8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8b8:	688e      	ldr	r6, [r1, #8]
 800b8ba:	461f      	mov	r7, r3
 800b8bc:	42be      	cmp	r6, r7
 800b8be:	680b      	ldr	r3, [r1, #0]
 800b8c0:	4682      	mov	sl, r0
 800b8c2:	460c      	mov	r4, r1
 800b8c4:	4690      	mov	r8, r2
 800b8c6:	d82d      	bhi.n	800b924 <__ssputs_r+0x70>
 800b8c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b8cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b8d0:	d026      	beq.n	800b920 <__ssputs_r+0x6c>
 800b8d2:	6965      	ldr	r5, [r4, #20]
 800b8d4:	6909      	ldr	r1, [r1, #16]
 800b8d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b8da:	eba3 0901 	sub.w	r9, r3, r1
 800b8de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b8e2:	1c7b      	adds	r3, r7, #1
 800b8e4:	444b      	add	r3, r9
 800b8e6:	106d      	asrs	r5, r5, #1
 800b8e8:	429d      	cmp	r5, r3
 800b8ea:	bf38      	it	cc
 800b8ec:	461d      	movcc	r5, r3
 800b8ee:	0553      	lsls	r3, r2, #21
 800b8f0:	d527      	bpl.n	800b942 <__ssputs_r+0x8e>
 800b8f2:	4629      	mov	r1, r5
 800b8f4:	f7fe fc1c 	bl	800a130 <_malloc_r>
 800b8f8:	4606      	mov	r6, r0
 800b8fa:	b360      	cbz	r0, 800b956 <__ssputs_r+0xa2>
 800b8fc:	6921      	ldr	r1, [r4, #16]
 800b8fe:	464a      	mov	r2, r9
 800b900:	f7fd fd3f 	bl	8009382 <memcpy>
 800b904:	89a3      	ldrh	r3, [r4, #12]
 800b906:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b90a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b90e:	81a3      	strh	r3, [r4, #12]
 800b910:	6126      	str	r6, [r4, #16]
 800b912:	6165      	str	r5, [r4, #20]
 800b914:	444e      	add	r6, r9
 800b916:	eba5 0509 	sub.w	r5, r5, r9
 800b91a:	6026      	str	r6, [r4, #0]
 800b91c:	60a5      	str	r5, [r4, #8]
 800b91e:	463e      	mov	r6, r7
 800b920:	42be      	cmp	r6, r7
 800b922:	d900      	bls.n	800b926 <__ssputs_r+0x72>
 800b924:	463e      	mov	r6, r7
 800b926:	6820      	ldr	r0, [r4, #0]
 800b928:	4632      	mov	r2, r6
 800b92a:	4641      	mov	r1, r8
 800b92c:	f000 fef7 	bl	800c71e <memmove>
 800b930:	68a3      	ldr	r3, [r4, #8]
 800b932:	1b9b      	subs	r3, r3, r6
 800b934:	60a3      	str	r3, [r4, #8]
 800b936:	6823      	ldr	r3, [r4, #0]
 800b938:	4433      	add	r3, r6
 800b93a:	6023      	str	r3, [r4, #0]
 800b93c:	2000      	movs	r0, #0
 800b93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b942:	462a      	mov	r2, r5
 800b944:	f001 fabd 	bl	800cec2 <_realloc_r>
 800b948:	4606      	mov	r6, r0
 800b94a:	2800      	cmp	r0, #0
 800b94c:	d1e0      	bne.n	800b910 <__ssputs_r+0x5c>
 800b94e:	6921      	ldr	r1, [r4, #16]
 800b950:	4650      	mov	r0, sl
 800b952:	f7fe fb79 	bl	800a048 <_free_r>
 800b956:	230c      	movs	r3, #12
 800b958:	f8ca 3000 	str.w	r3, [sl]
 800b95c:	89a3      	ldrh	r3, [r4, #12]
 800b95e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b962:	81a3      	strh	r3, [r4, #12]
 800b964:	f04f 30ff 	mov.w	r0, #4294967295
 800b968:	e7e9      	b.n	800b93e <__ssputs_r+0x8a>
	...

0800b96c <_svfiprintf_r>:
 800b96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b970:	4698      	mov	r8, r3
 800b972:	898b      	ldrh	r3, [r1, #12]
 800b974:	061b      	lsls	r3, r3, #24
 800b976:	b09d      	sub	sp, #116	@ 0x74
 800b978:	4607      	mov	r7, r0
 800b97a:	460d      	mov	r5, r1
 800b97c:	4614      	mov	r4, r2
 800b97e:	d510      	bpl.n	800b9a2 <_svfiprintf_r+0x36>
 800b980:	690b      	ldr	r3, [r1, #16]
 800b982:	b973      	cbnz	r3, 800b9a2 <_svfiprintf_r+0x36>
 800b984:	2140      	movs	r1, #64	@ 0x40
 800b986:	f7fe fbd3 	bl	800a130 <_malloc_r>
 800b98a:	6028      	str	r0, [r5, #0]
 800b98c:	6128      	str	r0, [r5, #16]
 800b98e:	b930      	cbnz	r0, 800b99e <_svfiprintf_r+0x32>
 800b990:	230c      	movs	r3, #12
 800b992:	603b      	str	r3, [r7, #0]
 800b994:	f04f 30ff 	mov.w	r0, #4294967295
 800b998:	b01d      	add	sp, #116	@ 0x74
 800b99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b99e:	2340      	movs	r3, #64	@ 0x40
 800b9a0:	616b      	str	r3, [r5, #20]
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9a6:	2320      	movs	r3, #32
 800b9a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b9ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9b0:	2330      	movs	r3, #48	@ 0x30
 800b9b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bb50 <_svfiprintf_r+0x1e4>
 800b9b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b9ba:	f04f 0901 	mov.w	r9, #1
 800b9be:	4623      	mov	r3, r4
 800b9c0:	469a      	mov	sl, r3
 800b9c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9c6:	b10a      	cbz	r2, 800b9cc <_svfiprintf_r+0x60>
 800b9c8:	2a25      	cmp	r2, #37	@ 0x25
 800b9ca:	d1f9      	bne.n	800b9c0 <_svfiprintf_r+0x54>
 800b9cc:	ebba 0b04 	subs.w	fp, sl, r4
 800b9d0:	d00b      	beq.n	800b9ea <_svfiprintf_r+0x7e>
 800b9d2:	465b      	mov	r3, fp
 800b9d4:	4622      	mov	r2, r4
 800b9d6:	4629      	mov	r1, r5
 800b9d8:	4638      	mov	r0, r7
 800b9da:	f7ff ff6b 	bl	800b8b4 <__ssputs_r>
 800b9de:	3001      	adds	r0, #1
 800b9e0:	f000 80a7 	beq.w	800bb32 <_svfiprintf_r+0x1c6>
 800b9e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9e6:	445a      	add	r2, fp
 800b9e8:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9ea:	f89a 3000 	ldrb.w	r3, [sl]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	f000 809f 	beq.w	800bb32 <_svfiprintf_r+0x1c6>
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b9fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9fe:	f10a 0a01 	add.w	sl, sl, #1
 800ba02:	9304      	str	r3, [sp, #16]
 800ba04:	9307      	str	r3, [sp, #28]
 800ba06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ba0a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ba0c:	4654      	mov	r4, sl
 800ba0e:	2205      	movs	r2, #5
 800ba10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba14:	484e      	ldr	r0, [pc, #312]	@ (800bb50 <_svfiprintf_r+0x1e4>)
 800ba16:	f7f4 fbe3 	bl	80001e0 <memchr>
 800ba1a:	9a04      	ldr	r2, [sp, #16]
 800ba1c:	b9d8      	cbnz	r0, 800ba56 <_svfiprintf_r+0xea>
 800ba1e:	06d0      	lsls	r0, r2, #27
 800ba20:	bf44      	itt	mi
 800ba22:	2320      	movmi	r3, #32
 800ba24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba28:	0711      	lsls	r1, r2, #28
 800ba2a:	bf44      	itt	mi
 800ba2c:	232b      	movmi	r3, #43	@ 0x2b
 800ba2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba32:	f89a 3000 	ldrb.w	r3, [sl]
 800ba36:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba38:	d015      	beq.n	800ba66 <_svfiprintf_r+0xfa>
 800ba3a:	9a07      	ldr	r2, [sp, #28]
 800ba3c:	4654      	mov	r4, sl
 800ba3e:	2000      	movs	r0, #0
 800ba40:	f04f 0c0a 	mov.w	ip, #10
 800ba44:	4621      	mov	r1, r4
 800ba46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba4a:	3b30      	subs	r3, #48	@ 0x30
 800ba4c:	2b09      	cmp	r3, #9
 800ba4e:	d94b      	bls.n	800bae8 <_svfiprintf_r+0x17c>
 800ba50:	b1b0      	cbz	r0, 800ba80 <_svfiprintf_r+0x114>
 800ba52:	9207      	str	r2, [sp, #28]
 800ba54:	e014      	b.n	800ba80 <_svfiprintf_r+0x114>
 800ba56:	eba0 0308 	sub.w	r3, r0, r8
 800ba5a:	fa09 f303 	lsl.w	r3, r9, r3
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	9304      	str	r3, [sp, #16]
 800ba62:	46a2      	mov	sl, r4
 800ba64:	e7d2      	b.n	800ba0c <_svfiprintf_r+0xa0>
 800ba66:	9b03      	ldr	r3, [sp, #12]
 800ba68:	1d19      	adds	r1, r3, #4
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	9103      	str	r1, [sp, #12]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	bfbb      	ittet	lt
 800ba72:	425b      	neglt	r3, r3
 800ba74:	f042 0202 	orrlt.w	r2, r2, #2
 800ba78:	9307      	strge	r3, [sp, #28]
 800ba7a:	9307      	strlt	r3, [sp, #28]
 800ba7c:	bfb8      	it	lt
 800ba7e:	9204      	strlt	r2, [sp, #16]
 800ba80:	7823      	ldrb	r3, [r4, #0]
 800ba82:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba84:	d10a      	bne.n	800ba9c <_svfiprintf_r+0x130>
 800ba86:	7863      	ldrb	r3, [r4, #1]
 800ba88:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba8a:	d132      	bne.n	800baf2 <_svfiprintf_r+0x186>
 800ba8c:	9b03      	ldr	r3, [sp, #12]
 800ba8e:	1d1a      	adds	r2, r3, #4
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	9203      	str	r2, [sp, #12]
 800ba94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba98:	3402      	adds	r4, #2
 800ba9a:	9305      	str	r3, [sp, #20]
 800ba9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bb60 <_svfiprintf_r+0x1f4>
 800baa0:	7821      	ldrb	r1, [r4, #0]
 800baa2:	2203      	movs	r2, #3
 800baa4:	4650      	mov	r0, sl
 800baa6:	f7f4 fb9b 	bl	80001e0 <memchr>
 800baaa:	b138      	cbz	r0, 800babc <_svfiprintf_r+0x150>
 800baac:	9b04      	ldr	r3, [sp, #16]
 800baae:	eba0 000a 	sub.w	r0, r0, sl
 800bab2:	2240      	movs	r2, #64	@ 0x40
 800bab4:	4082      	lsls	r2, r0
 800bab6:	4313      	orrs	r3, r2
 800bab8:	3401      	adds	r4, #1
 800baba:	9304      	str	r3, [sp, #16]
 800babc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bac0:	4824      	ldr	r0, [pc, #144]	@ (800bb54 <_svfiprintf_r+0x1e8>)
 800bac2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bac6:	2206      	movs	r2, #6
 800bac8:	f7f4 fb8a 	bl	80001e0 <memchr>
 800bacc:	2800      	cmp	r0, #0
 800bace:	d036      	beq.n	800bb3e <_svfiprintf_r+0x1d2>
 800bad0:	4b21      	ldr	r3, [pc, #132]	@ (800bb58 <_svfiprintf_r+0x1ec>)
 800bad2:	bb1b      	cbnz	r3, 800bb1c <_svfiprintf_r+0x1b0>
 800bad4:	9b03      	ldr	r3, [sp, #12]
 800bad6:	3307      	adds	r3, #7
 800bad8:	f023 0307 	bic.w	r3, r3, #7
 800badc:	3308      	adds	r3, #8
 800bade:	9303      	str	r3, [sp, #12]
 800bae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bae2:	4433      	add	r3, r6
 800bae4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bae6:	e76a      	b.n	800b9be <_svfiprintf_r+0x52>
 800bae8:	fb0c 3202 	mla	r2, ip, r2, r3
 800baec:	460c      	mov	r4, r1
 800baee:	2001      	movs	r0, #1
 800baf0:	e7a8      	b.n	800ba44 <_svfiprintf_r+0xd8>
 800baf2:	2300      	movs	r3, #0
 800baf4:	3401      	adds	r4, #1
 800baf6:	9305      	str	r3, [sp, #20]
 800baf8:	4619      	mov	r1, r3
 800bafa:	f04f 0c0a 	mov.w	ip, #10
 800bafe:	4620      	mov	r0, r4
 800bb00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb04:	3a30      	subs	r2, #48	@ 0x30
 800bb06:	2a09      	cmp	r2, #9
 800bb08:	d903      	bls.n	800bb12 <_svfiprintf_r+0x1a6>
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d0c6      	beq.n	800ba9c <_svfiprintf_r+0x130>
 800bb0e:	9105      	str	r1, [sp, #20]
 800bb10:	e7c4      	b.n	800ba9c <_svfiprintf_r+0x130>
 800bb12:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb16:	4604      	mov	r4, r0
 800bb18:	2301      	movs	r3, #1
 800bb1a:	e7f0      	b.n	800bafe <_svfiprintf_r+0x192>
 800bb1c:	ab03      	add	r3, sp, #12
 800bb1e:	9300      	str	r3, [sp, #0]
 800bb20:	462a      	mov	r2, r5
 800bb22:	4b0e      	ldr	r3, [pc, #56]	@ (800bb5c <_svfiprintf_r+0x1f0>)
 800bb24:	a904      	add	r1, sp, #16
 800bb26:	4638      	mov	r0, r7
 800bb28:	f7fc fbe8 	bl	80082fc <_printf_float>
 800bb2c:	1c42      	adds	r2, r0, #1
 800bb2e:	4606      	mov	r6, r0
 800bb30:	d1d6      	bne.n	800bae0 <_svfiprintf_r+0x174>
 800bb32:	89ab      	ldrh	r3, [r5, #12]
 800bb34:	065b      	lsls	r3, r3, #25
 800bb36:	f53f af2d 	bmi.w	800b994 <_svfiprintf_r+0x28>
 800bb3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb3c:	e72c      	b.n	800b998 <_svfiprintf_r+0x2c>
 800bb3e:	ab03      	add	r3, sp, #12
 800bb40:	9300      	str	r3, [sp, #0]
 800bb42:	462a      	mov	r2, r5
 800bb44:	4b05      	ldr	r3, [pc, #20]	@ (800bb5c <_svfiprintf_r+0x1f0>)
 800bb46:	a904      	add	r1, sp, #16
 800bb48:	4638      	mov	r0, r7
 800bb4a:	f7fc fe6f 	bl	800882c <_printf_i>
 800bb4e:	e7ed      	b.n	800bb2c <_svfiprintf_r+0x1c0>
 800bb50:	0800d561 	.word	0x0800d561
 800bb54:	0800d56b 	.word	0x0800d56b
 800bb58:	080082fd 	.word	0x080082fd
 800bb5c:	0800b8b5 	.word	0x0800b8b5
 800bb60:	0800d567 	.word	0x0800d567

0800bb64 <_sungetc_r>:
 800bb64:	b538      	push	{r3, r4, r5, lr}
 800bb66:	1c4b      	adds	r3, r1, #1
 800bb68:	4614      	mov	r4, r2
 800bb6a:	d103      	bne.n	800bb74 <_sungetc_r+0x10>
 800bb6c:	f04f 35ff 	mov.w	r5, #4294967295
 800bb70:	4628      	mov	r0, r5
 800bb72:	bd38      	pop	{r3, r4, r5, pc}
 800bb74:	8993      	ldrh	r3, [r2, #12]
 800bb76:	f023 0320 	bic.w	r3, r3, #32
 800bb7a:	8193      	strh	r3, [r2, #12]
 800bb7c:	6853      	ldr	r3, [r2, #4]
 800bb7e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800bb80:	b2cd      	uxtb	r5, r1
 800bb82:	b18a      	cbz	r2, 800bba8 <_sungetc_r+0x44>
 800bb84:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800bb86:	429a      	cmp	r2, r3
 800bb88:	dd08      	ble.n	800bb9c <_sungetc_r+0x38>
 800bb8a:	6823      	ldr	r3, [r4, #0]
 800bb8c:	1e5a      	subs	r2, r3, #1
 800bb8e:	6022      	str	r2, [r4, #0]
 800bb90:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bb94:	6863      	ldr	r3, [r4, #4]
 800bb96:	3301      	adds	r3, #1
 800bb98:	6063      	str	r3, [r4, #4]
 800bb9a:	e7e9      	b.n	800bb70 <_sungetc_r+0xc>
 800bb9c:	4621      	mov	r1, r4
 800bb9e:	f000 fd84 	bl	800c6aa <__submore>
 800bba2:	2800      	cmp	r0, #0
 800bba4:	d0f1      	beq.n	800bb8a <_sungetc_r+0x26>
 800bba6:	e7e1      	b.n	800bb6c <_sungetc_r+0x8>
 800bba8:	6921      	ldr	r1, [r4, #16]
 800bbaa:	6822      	ldr	r2, [r4, #0]
 800bbac:	b141      	cbz	r1, 800bbc0 <_sungetc_r+0x5c>
 800bbae:	4291      	cmp	r1, r2
 800bbb0:	d206      	bcs.n	800bbc0 <_sungetc_r+0x5c>
 800bbb2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800bbb6:	42a9      	cmp	r1, r5
 800bbb8:	d102      	bne.n	800bbc0 <_sungetc_r+0x5c>
 800bbba:	3a01      	subs	r2, #1
 800bbbc:	6022      	str	r2, [r4, #0]
 800bbbe:	e7ea      	b.n	800bb96 <_sungetc_r+0x32>
 800bbc0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800bbc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bbc8:	6363      	str	r3, [r4, #52]	@ 0x34
 800bbca:	2303      	movs	r3, #3
 800bbcc:	63a3      	str	r3, [r4, #56]	@ 0x38
 800bbce:	4623      	mov	r3, r4
 800bbd0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bbd4:	6023      	str	r3, [r4, #0]
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	e7de      	b.n	800bb98 <_sungetc_r+0x34>

0800bbda <__ssrefill_r>:
 800bbda:	b510      	push	{r4, lr}
 800bbdc:	460c      	mov	r4, r1
 800bbde:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800bbe0:	b169      	cbz	r1, 800bbfe <__ssrefill_r+0x24>
 800bbe2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bbe6:	4299      	cmp	r1, r3
 800bbe8:	d001      	beq.n	800bbee <__ssrefill_r+0x14>
 800bbea:	f7fe fa2d 	bl	800a048 <_free_r>
 800bbee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bbf0:	6063      	str	r3, [r4, #4]
 800bbf2:	2000      	movs	r0, #0
 800bbf4:	6360      	str	r0, [r4, #52]	@ 0x34
 800bbf6:	b113      	cbz	r3, 800bbfe <__ssrefill_r+0x24>
 800bbf8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bbfa:	6023      	str	r3, [r4, #0]
 800bbfc:	bd10      	pop	{r4, pc}
 800bbfe:	6923      	ldr	r3, [r4, #16]
 800bc00:	6023      	str	r3, [r4, #0]
 800bc02:	2300      	movs	r3, #0
 800bc04:	6063      	str	r3, [r4, #4]
 800bc06:	89a3      	ldrh	r3, [r4, #12]
 800bc08:	f043 0320 	orr.w	r3, r3, #32
 800bc0c:	81a3      	strh	r3, [r4, #12]
 800bc0e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc12:	e7f3      	b.n	800bbfc <__ssrefill_r+0x22>

0800bc14 <__ssvfiscanf_r>:
 800bc14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc18:	460c      	mov	r4, r1
 800bc1a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800bc1e:	2100      	movs	r1, #0
 800bc20:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800bc24:	49a5      	ldr	r1, [pc, #660]	@ (800bebc <__ssvfiscanf_r+0x2a8>)
 800bc26:	91a0      	str	r1, [sp, #640]	@ 0x280
 800bc28:	f10d 0804 	add.w	r8, sp, #4
 800bc2c:	49a4      	ldr	r1, [pc, #656]	@ (800bec0 <__ssvfiscanf_r+0x2ac>)
 800bc2e:	4fa5      	ldr	r7, [pc, #660]	@ (800bec4 <__ssvfiscanf_r+0x2b0>)
 800bc30:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800bc34:	4606      	mov	r6, r0
 800bc36:	91a1      	str	r1, [sp, #644]	@ 0x284
 800bc38:	9300      	str	r3, [sp, #0]
 800bc3a:	7813      	ldrb	r3, [r2, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	f000 8158 	beq.w	800bef2 <__ssvfiscanf_r+0x2de>
 800bc42:	5cf9      	ldrb	r1, [r7, r3]
 800bc44:	f011 0108 	ands.w	r1, r1, #8
 800bc48:	f102 0501 	add.w	r5, r2, #1
 800bc4c:	d019      	beq.n	800bc82 <__ssvfiscanf_r+0x6e>
 800bc4e:	6863      	ldr	r3, [r4, #4]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	dd0f      	ble.n	800bc74 <__ssvfiscanf_r+0x60>
 800bc54:	6823      	ldr	r3, [r4, #0]
 800bc56:	781a      	ldrb	r2, [r3, #0]
 800bc58:	5cba      	ldrb	r2, [r7, r2]
 800bc5a:	0712      	lsls	r2, r2, #28
 800bc5c:	d401      	bmi.n	800bc62 <__ssvfiscanf_r+0x4e>
 800bc5e:	462a      	mov	r2, r5
 800bc60:	e7eb      	b.n	800bc3a <__ssvfiscanf_r+0x26>
 800bc62:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800bc64:	3201      	adds	r2, #1
 800bc66:	9245      	str	r2, [sp, #276]	@ 0x114
 800bc68:	6862      	ldr	r2, [r4, #4]
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	3a01      	subs	r2, #1
 800bc6e:	6062      	str	r2, [r4, #4]
 800bc70:	6023      	str	r3, [r4, #0]
 800bc72:	e7ec      	b.n	800bc4e <__ssvfiscanf_r+0x3a>
 800bc74:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bc76:	4621      	mov	r1, r4
 800bc78:	4630      	mov	r0, r6
 800bc7a:	4798      	blx	r3
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	d0e9      	beq.n	800bc54 <__ssvfiscanf_r+0x40>
 800bc80:	e7ed      	b.n	800bc5e <__ssvfiscanf_r+0x4a>
 800bc82:	2b25      	cmp	r3, #37	@ 0x25
 800bc84:	d012      	beq.n	800bcac <__ssvfiscanf_r+0x98>
 800bc86:	4699      	mov	r9, r3
 800bc88:	6863      	ldr	r3, [r4, #4]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	f340 8093 	ble.w	800bdb6 <__ssvfiscanf_r+0x1a2>
 800bc90:	6822      	ldr	r2, [r4, #0]
 800bc92:	7813      	ldrb	r3, [r2, #0]
 800bc94:	454b      	cmp	r3, r9
 800bc96:	f040 812c 	bne.w	800bef2 <__ssvfiscanf_r+0x2de>
 800bc9a:	6863      	ldr	r3, [r4, #4]
 800bc9c:	3b01      	subs	r3, #1
 800bc9e:	6063      	str	r3, [r4, #4]
 800bca0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800bca2:	3201      	adds	r2, #1
 800bca4:	3301      	adds	r3, #1
 800bca6:	6022      	str	r2, [r4, #0]
 800bca8:	9345      	str	r3, [sp, #276]	@ 0x114
 800bcaa:	e7d8      	b.n	800bc5e <__ssvfiscanf_r+0x4a>
 800bcac:	9141      	str	r1, [sp, #260]	@ 0x104
 800bcae:	9143      	str	r1, [sp, #268]	@ 0x10c
 800bcb0:	7853      	ldrb	r3, [r2, #1]
 800bcb2:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcb4:	bf02      	ittt	eq
 800bcb6:	2310      	moveq	r3, #16
 800bcb8:	1c95      	addeq	r5, r2, #2
 800bcba:	9341      	streq	r3, [sp, #260]	@ 0x104
 800bcbc:	220a      	movs	r2, #10
 800bcbe:	46a9      	mov	r9, r5
 800bcc0:	f819 1b01 	ldrb.w	r1, [r9], #1
 800bcc4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800bcc8:	2b09      	cmp	r3, #9
 800bcca:	d91e      	bls.n	800bd0a <__ssvfiscanf_r+0xf6>
 800bccc:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800bec8 <__ssvfiscanf_r+0x2b4>
 800bcd0:	2203      	movs	r2, #3
 800bcd2:	4650      	mov	r0, sl
 800bcd4:	f7f4 fa84 	bl	80001e0 <memchr>
 800bcd8:	b138      	cbz	r0, 800bcea <__ssvfiscanf_r+0xd6>
 800bcda:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bcdc:	eba0 000a 	sub.w	r0, r0, sl
 800bce0:	2301      	movs	r3, #1
 800bce2:	4083      	lsls	r3, r0
 800bce4:	4313      	orrs	r3, r2
 800bce6:	9341      	str	r3, [sp, #260]	@ 0x104
 800bce8:	464d      	mov	r5, r9
 800bcea:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bcee:	2b78      	cmp	r3, #120	@ 0x78
 800bcf0:	d806      	bhi.n	800bd00 <__ssvfiscanf_r+0xec>
 800bcf2:	2b57      	cmp	r3, #87	@ 0x57
 800bcf4:	d810      	bhi.n	800bd18 <__ssvfiscanf_r+0x104>
 800bcf6:	2b25      	cmp	r3, #37	@ 0x25
 800bcf8:	d0c5      	beq.n	800bc86 <__ssvfiscanf_r+0x72>
 800bcfa:	d857      	bhi.n	800bdac <__ssvfiscanf_r+0x198>
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d065      	beq.n	800bdcc <__ssvfiscanf_r+0x1b8>
 800bd00:	2303      	movs	r3, #3
 800bd02:	9347      	str	r3, [sp, #284]	@ 0x11c
 800bd04:	230a      	movs	r3, #10
 800bd06:	9342      	str	r3, [sp, #264]	@ 0x108
 800bd08:	e078      	b.n	800bdfc <__ssvfiscanf_r+0x1e8>
 800bd0a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800bd0c:	fb02 1103 	mla	r1, r2, r3, r1
 800bd10:	3930      	subs	r1, #48	@ 0x30
 800bd12:	9143      	str	r1, [sp, #268]	@ 0x10c
 800bd14:	464d      	mov	r5, r9
 800bd16:	e7d2      	b.n	800bcbe <__ssvfiscanf_r+0xaa>
 800bd18:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800bd1c:	2a20      	cmp	r2, #32
 800bd1e:	d8ef      	bhi.n	800bd00 <__ssvfiscanf_r+0xec>
 800bd20:	a101      	add	r1, pc, #4	@ (adr r1, 800bd28 <__ssvfiscanf_r+0x114>)
 800bd22:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bd26:	bf00      	nop
 800bd28:	0800bddb 	.word	0x0800bddb
 800bd2c:	0800bd01 	.word	0x0800bd01
 800bd30:	0800bd01 	.word	0x0800bd01
 800bd34:	0800be35 	.word	0x0800be35
 800bd38:	0800bd01 	.word	0x0800bd01
 800bd3c:	0800bd01 	.word	0x0800bd01
 800bd40:	0800bd01 	.word	0x0800bd01
 800bd44:	0800bd01 	.word	0x0800bd01
 800bd48:	0800bd01 	.word	0x0800bd01
 800bd4c:	0800bd01 	.word	0x0800bd01
 800bd50:	0800bd01 	.word	0x0800bd01
 800bd54:	0800be4b 	.word	0x0800be4b
 800bd58:	0800be31 	.word	0x0800be31
 800bd5c:	0800bdb3 	.word	0x0800bdb3
 800bd60:	0800bdb3 	.word	0x0800bdb3
 800bd64:	0800bdb3 	.word	0x0800bdb3
 800bd68:	0800bd01 	.word	0x0800bd01
 800bd6c:	0800bded 	.word	0x0800bded
 800bd70:	0800bd01 	.word	0x0800bd01
 800bd74:	0800bd01 	.word	0x0800bd01
 800bd78:	0800bd01 	.word	0x0800bd01
 800bd7c:	0800bd01 	.word	0x0800bd01
 800bd80:	0800be5b 	.word	0x0800be5b
 800bd84:	0800bdf5 	.word	0x0800bdf5
 800bd88:	0800bdd3 	.word	0x0800bdd3
 800bd8c:	0800bd01 	.word	0x0800bd01
 800bd90:	0800bd01 	.word	0x0800bd01
 800bd94:	0800be57 	.word	0x0800be57
 800bd98:	0800bd01 	.word	0x0800bd01
 800bd9c:	0800be31 	.word	0x0800be31
 800bda0:	0800bd01 	.word	0x0800bd01
 800bda4:	0800bd01 	.word	0x0800bd01
 800bda8:	0800bddb 	.word	0x0800bddb
 800bdac:	3b45      	subs	r3, #69	@ 0x45
 800bdae:	2b02      	cmp	r3, #2
 800bdb0:	d8a6      	bhi.n	800bd00 <__ssvfiscanf_r+0xec>
 800bdb2:	2305      	movs	r3, #5
 800bdb4:	e021      	b.n	800bdfa <__ssvfiscanf_r+0x1e6>
 800bdb6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bdb8:	4621      	mov	r1, r4
 800bdba:	4630      	mov	r0, r6
 800bdbc:	4798      	blx	r3
 800bdbe:	2800      	cmp	r0, #0
 800bdc0:	f43f af66 	beq.w	800bc90 <__ssvfiscanf_r+0x7c>
 800bdc4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800bdc6:	2800      	cmp	r0, #0
 800bdc8:	f040 808b 	bne.w	800bee2 <__ssvfiscanf_r+0x2ce>
 800bdcc:	f04f 30ff 	mov.w	r0, #4294967295
 800bdd0:	e08b      	b.n	800beea <__ssvfiscanf_r+0x2d6>
 800bdd2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bdd4:	f042 0220 	orr.w	r2, r2, #32
 800bdd8:	9241      	str	r2, [sp, #260]	@ 0x104
 800bdda:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bddc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bde0:	9241      	str	r2, [sp, #260]	@ 0x104
 800bde2:	2210      	movs	r2, #16
 800bde4:	2b6e      	cmp	r3, #110	@ 0x6e
 800bde6:	9242      	str	r2, [sp, #264]	@ 0x108
 800bde8:	d902      	bls.n	800bdf0 <__ssvfiscanf_r+0x1dc>
 800bdea:	e005      	b.n	800bdf8 <__ssvfiscanf_r+0x1e4>
 800bdec:	2300      	movs	r3, #0
 800bdee:	9342      	str	r3, [sp, #264]	@ 0x108
 800bdf0:	2303      	movs	r3, #3
 800bdf2:	e002      	b.n	800bdfa <__ssvfiscanf_r+0x1e6>
 800bdf4:	2308      	movs	r3, #8
 800bdf6:	9342      	str	r3, [sp, #264]	@ 0x108
 800bdf8:	2304      	movs	r3, #4
 800bdfa:	9347      	str	r3, [sp, #284]	@ 0x11c
 800bdfc:	6863      	ldr	r3, [r4, #4]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	dd39      	ble.n	800be76 <__ssvfiscanf_r+0x262>
 800be02:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800be04:	0659      	lsls	r1, r3, #25
 800be06:	d404      	bmi.n	800be12 <__ssvfiscanf_r+0x1fe>
 800be08:	6823      	ldr	r3, [r4, #0]
 800be0a:	781a      	ldrb	r2, [r3, #0]
 800be0c:	5cba      	ldrb	r2, [r7, r2]
 800be0e:	0712      	lsls	r2, r2, #28
 800be10:	d438      	bmi.n	800be84 <__ssvfiscanf_r+0x270>
 800be12:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800be14:	2b02      	cmp	r3, #2
 800be16:	dc47      	bgt.n	800bea8 <__ssvfiscanf_r+0x294>
 800be18:	466b      	mov	r3, sp
 800be1a:	4622      	mov	r2, r4
 800be1c:	a941      	add	r1, sp, #260	@ 0x104
 800be1e:	4630      	mov	r0, r6
 800be20:	f000 f9ae 	bl	800c180 <_scanf_chars>
 800be24:	2801      	cmp	r0, #1
 800be26:	d064      	beq.n	800bef2 <__ssvfiscanf_r+0x2de>
 800be28:	2802      	cmp	r0, #2
 800be2a:	f47f af18 	bne.w	800bc5e <__ssvfiscanf_r+0x4a>
 800be2e:	e7c9      	b.n	800bdc4 <__ssvfiscanf_r+0x1b0>
 800be30:	220a      	movs	r2, #10
 800be32:	e7d7      	b.n	800bde4 <__ssvfiscanf_r+0x1d0>
 800be34:	4629      	mov	r1, r5
 800be36:	4640      	mov	r0, r8
 800be38:	f000 fbfe 	bl	800c638 <__sccl>
 800be3c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800be3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be42:	9341      	str	r3, [sp, #260]	@ 0x104
 800be44:	4605      	mov	r5, r0
 800be46:	2301      	movs	r3, #1
 800be48:	e7d7      	b.n	800bdfa <__ssvfiscanf_r+0x1e6>
 800be4a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800be4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be50:	9341      	str	r3, [sp, #260]	@ 0x104
 800be52:	2300      	movs	r3, #0
 800be54:	e7d1      	b.n	800bdfa <__ssvfiscanf_r+0x1e6>
 800be56:	2302      	movs	r3, #2
 800be58:	e7cf      	b.n	800bdfa <__ssvfiscanf_r+0x1e6>
 800be5a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800be5c:	06c3      	lsls	r3, r0, #27
 800be5e:	f53f aefe 	bmi.w	800bc5e <__ssvfiscanf_r+0x4a>
 800be62:	9b00      	ldr	r3, [sp, #0]
 800be64:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800be66:	1d19      	adds	r1, r3, #4
 800be68:	9100      	str	r1, [sp, #0]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	07c0      	lsls	r0, r0, #31
 800be6e:	bf4c      	ite	mi
 800be70:	801a      	strhmi	r2, [r3, #0]
 800be72:	601a      	strpl	r2, [r3, #0]
 800be74:	e6f3      	b.n	800bc5e <__ssvfiscanf_r+0x4a>
 800be76:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800be78:	4621      	mov	r1, r4
 800be7a:	4630      	mov	r0, r6
 800be7c:	4798      	blx	r3
 800be7e:	2800      	cmp	r0, #0
 800be80:	d0bf      	beq.n	800be02 <__ssvfiscanf_r+0x1ee>
 800be82:	e79f      	b.n	800bdc4 <__ssvfiscanf_r+0x1b0>
 800be84:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800be86:	3201      	adds	r2, #1
 800be88:	9245      	str	r2, [sp, #276]	@ 0x114
 800be8a:	6862      	ldr	r2, [r4, #4]
 800be8c:	3a01      	subs	r2, #1
 800be8e:	2a00      	cmp	r2, #0
 800be90:	6062      	str	r2, [r4, #4]
 800be92:	dd02      	ble.n	800be9a <__ssvfiscanf_r+0x286>
 800be94:	3301      	adds	r3, #1
 800be96:	6023      	str	r3, [r4, #0]
 800be98:	e7b6      	b.n	800be08 <__ssvfiscanf_r+0x1f4>
 800be9a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800be9c:	4621      	mov	r1, r4
 800be9e:	4630      	mov	r0, r6
 800bea0:	4798      	blx	r3
 800bea2:	2800      	cmp	r0, #0
 800bea4:	d0b0      	beq.n	800be08 <__ssvfiscanf_r+0x1f4>
 800bea6:	e78d      	b.n	800bdc4 <__ssvfiscanf_r+0x1b0>
 800bea8:	2b04      	cmp	r3, #4
 800beaa:	dc0f      	bgt.n	800becc <__ssvfiscanf_r+0x2b8>
 800beac:	466b      	mov	r3, sp
 800beae:	4622      	mov	r2, r4
 800beb0:	a941      	add	r1, sp, #260	@ 0x104
 800beb2:	4630      	mov	r0, r6
 800beb4:	f000 f9be 	bl	800c234 <_scanf_i>
 800beb8:	e7b4      	b.n	800be24 <__ssvfiscanf_r+0x210>
 800beba:	bf00      	nop
 800bebc:	0800bb65 	.word	0x0800bb65
 800bec0:	0800bbdb 	.word	0x0800bbdb
 800bec4:	0800d461 	.word	0x0800d461
 800bec8:	0800d567 	.word	0x0800d567
 800becc:	4b0a      	ldr	r3, [pc, #40]	@ (800bef8 <__ssvfiscanf_r+0x2e4>)
 800bece:	2b00      	cmp	r3, #0
 800bed0:	f43f aec5 	beq.w	800bc5e <__ssvfiscanf_r+0x4a>
 800bed4:	466b      	mov	r3, sp
 800bed6:	4622      	mov	r2, r4
 800bed8:	a941      	add	r1, sp, #260	@ 0x104
 800beda:	4630      	mov	r0, r6
 800bedc:	f7fc fdc6 	bl	8008a6c <_scanf_float>
 800bee0:	e7a0      	b.n	800be24 <__ssvfiscanf_r+0x210>
 800bee2:	89a3      	ldrh	r3, [r4, #12]
 800bee4:	065b      	lsls	r3, r3, #25
 800bee6:	f53f af71 	bmi.w	800bdcc <__ssvfiscanf_r+0x1b8>
 800beea:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800beee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bef2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800bef4:	e7f9      	b.n	800beea <__ssvfiscanf_r+0x2d6>
 800bef6:	bf00      	nop
 800bef8:	08008a6d 	.word	0x08008a6d

0800befc <__sfputc_r>:
 800befc:	6893      	ldr	r3, [r2, #8]
 800befe:	3b01      	subs	r3, #1
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	b410      	push	{r4}
 800bf04:	6093      	str	r3, [r2, #8]
 800bf06:	da08      	bge.n	800bf1a <__sfputc_r+0x1e>
 800bf08:	6994      	ldr	r4, [r2, #24]
 800bf0a:	42a3      	cmp	r3, r4
 800bf0c:	db01      	blt.n	800bf12 <__sfputc_r+0x16>
 800bf0e:	290a      	cmp	r1, #10
 800bf10:	d103      	bne.n	800bf1a <__sfputc_r+0x1e>
 800bf12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf16:	f7fd b90e 	b.w	8009136 <__swbuf_r>
 800bf1a:	6813      	ldr	r3, [r2, #0]
 800bf1c:	1c58      	adds	r0, r3, #1
 800bf1e:	6010      	str	r0, [r2, #0]
 800bf20:	7019      	strb	r1, [r3, #0]
 800bf22:	4608      	mov	r0, r1
 800bf24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf28:	4770      	bx	lr

0800bf2a <__sfputs_r>:
 800bf2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf2c:	4606      	mov	r6, r0
 800bf2e:	460f      	mov	r7, r1
 800bf30:	4614      	mov	r4, r2
 800bf32:	18d5      	adds	r5, r2, r3
 800bf34:	42ac      	cmp	r4, r5
 800bf36:	d101      	bne.n	800bf3c <__sfputs_r+0x12>
 800bf38:	2000      	movs	r0, #0
 800bf3a:	e007      	b.n	800bf4c <__sfputs_r+0x22>
 800bf3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf40:	463a      	mov	r2, r7
 800bf42:	4630      	mov	r0, r6
 800bf44:	f7ff ffda 	bl	800befc <__sfputc_r>
 800bf48:	1c43      	adds	r3, r0, #1
 800bf4a:	d1f3      	bne.n	800bf34 <__sfputs_r+0xa>
 800bf4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bf50 <_vfiprintf_r>:
 800bf50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf54:	460d      	mov	r5, r1
 800bf56:	b09d      	sub	sp, #116	@ 0x74
 800bf58:	4614      	mov	r4, r2
 800bf5a:	4698      	mov	r8, r3
 800bf5c:	4606      	mov	r6, r0
 800bf5e:	b118      	cbz	r0, 800bf68 <_vfiprintf_r+0x18>
 800bf60:	6a03      	ldr	r3, [r0, #32]
 800bf62:	b90b      	cbnz	r3, 800bf68 <_vfiprintf_r+0x18>
 800bf64:	f7fd f822 	bl	8008fac <__sinit>
 800bf68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf6a:	07d9      	lsls	r1, r3, #31
 800bf6c:	d405      	bmi.n	800bf7a <_vfiprintf_r+0x2a>
 800bf6e:	89ab      	ldrh	r3, [r5, #12]
 800bf70:	059a      	lsls	r2, r3, #22
 800bf72:	d402      	bmi.n	800bf7a <_vfiprintf_r+0x2a>
 800bf74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf76:	f7fd fa02 	bl	800937e <__retarget_lock_acquire_recursive>
 800bf7a:	89ab      	ldrh	r3, [r5, #12]
 800bf7c:	071b      	lsls	r3, r3, #28
 800bf7e:	d501      	bpl.n	800bf84 <_vfiprintf_r+0x34>
 800bf80:	692b      	ldr	r3, [r5, #16]
 800bf82:	b99b      	cbnz	r3, 800bfac <_vfiprintf_r+0x5c>
 800bf84:	4629      	mov	r1, r5
 800bf86:	4630      	mov	r0, r6
 800bf88:	f7fd f914 	bl	80091b4 <__swsetup_r>
 800bf8c:	b170      	cbz	r0, 800bfac <_vfiprintf_r+0x5c>
 800bf8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf90:	07dc      	lsls	r4, r3, #31
 800bf92:	d504      	bpl.n	800bf9e <_vfiprintf_r+0x4e>
 800bf94:	f04f 30ff 	mov.w	r0, #4294967295
 800bf98:	b01d      	add	sp, #116	@ 0x74
 800bf9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf9e:	89ab      	ldrh	r3, [r5, #12]
 800bfa0:	0598      	lsls	r0, r3, #22
 800bfa2:	d4f7      	bmi.n	800bf94 <_vfiprintf_r+0x44>
 800bfa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bfa6:	f7fd f9eb 	bl	8009380 <__retarget_lock_release_recursive>
 800bfaa:	e7f3      	b.n	800bf94 <_vfiprintf_r+0x44>
 800bfac:	2300      	movs	r3, #0
 800bfae:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfb0:	2320      	movs	r3, #32
 800bfb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bfb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfba:	2330      	movs	r3, #48	@ 0x30
 800bfbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c16c <_vfiprintf_r+0x21c>
 800bfc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bfc4:	f04f 0901 	mov.w	r9, #1
 800bfc8:	4623      	mov	r3, r4
 800bfca:	469a      	mov	sl, r3
 800bfcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfd0:	b10a      	cbz	r2, 800bfd6 <_vfiprintf_r+0x86>
 800bfd2:	2a25      	cmp	r2, #37	@ 0x25
 800bfd4:	d1f9      	bne.n	800bfca <_vfiprintf_r+0x7a>
 800bfd6:	ebba 0b04 	subs.w	fp, sl, r4
 800bfda:	d00b      	beq.n	800bff4 <_vfiprintf_r+0xa4>
 800bfdc:	465b      	mov	r3, fp
 800bfde:	4622      	mov	r2, r4
 800bfe0:	4629      	mov	r1, r5
 800bfe2:	4630      	mov	r0, r6
 800bfe4:	f7ff ffa1 	bl	800bf2a <__sfputs_r>
 800bfe8:	3001      	adds	r0, #1
 800bfea:	f000 80a7 	beq.w	800c13c <_vfiprintf_r+0x1ec>
 800bfee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bff0:	445a      	add	r2, fp
 800bff2:	9209      	str	r2, [sp, #36]	@ 0x24
 800bff4:	f89a 3000 	ldrb.w	r3, [sl]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	f000 809f 	beq.w	800c13c <_vfiprintf_r+0x1ec>
 800bffe:	2300      	movs	r3, #0
 800c000:	f04f 32ff 	mov.w	r2, #4294967295
 800c004:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c008:	f10a 0a01 	add.w	sl, sl, #1
 800c00c:	9304      	str	r3, [sp, #16]
 800c00e:	9307      	str	r3, [sp, #28]
 800c010:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c014:	931a      	str	r3, [sp, #104]	@ 0x68
 800c016:	4654      	mov	r4, sl
 800c018:	2205      	movs	r2, #5
 800c01a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c01e:	4853      	ldr	r0, [pc, #332]	@ (800c16c <_vfiprintf_r+0x21c>)
 800c020:	f7f4 f8de 	bl	80001e0 <memchr>
 800c024:	9a04      	ldr	r2, [sp, #16]
 800c026:	b9d8      	cbnz	r0, 800c060 <_vfiprintf_r+0x110>
 800c028:	06d1      	lsls	r1, r2, #27
 800c02a:	bf44      	itt	mi
 800c02c:	2320      	movmi	r3, #32
 800c02e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c032:	0713      	lsls	r3, r2, #28
 800c034:	bf44      	itt	mi
 800c036:	232b      	movmi	r3, #43	@ 0x2b
 800c038:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c03c:	f89a 3000 	ldrb.w	r3, [sl]
 800c040:	2b2a      	cmp	r3, #42	@ 0x2a
 800c042:	d015      	beq.n	800c070 <_vfiprintf_r+0x120>
 800c044:	9a07      	ldr	r2, [sp, #28]
 800c046:	4654      	mov	r4, sl
 800c048:	2000      	movs	r0, #0
 800c04a:	f04f 0c0a 	mov.w	ip, #10
 800c04e:	4621      	mov	r1, r4
 800c050:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c054:	3b30      	subs	r3, #48	@ 0x30
 800c056:	2b09      	cmp	r3, #9
 800c058:	d94b      	bls.n	800c0f2 <_vfiprintf_r+0x1a2>
 800c05a:	b1b0      	cbz	r0, 800c08a <_vfiprintf_r+0x13a>
 800c05c:	9207      	str	r2, [sp, #28]
 800c05e:	e014      	b.n	800c08a <_vfiprintf_r+0x13a>
 800c060:	eba0 0308 	sub.w	r3, r0, r8
 800c064:	fa09 f303 	lsl.w	r3, r9, r3
 800c068:	4313      	orrs	r3, r2
 800c06a:	9304      	str	r3, [sp, #16]
 800c06c:	46a2      	mov	sl, r4
 800c06e:	e7d2      	b.n	800c016 <_vfiprintf_r+0xc6>
 800c070:	9b03      	ldr	r3, [sp, #12]
 800c072:	1d19      	adds	r1, r3, #4
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	9103      	str	r1, [sp, #12]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	bfbb      	ittet	lt
 800c07c:	425b      	neglt	r3, r3
 800c07e:	f042 0202 	orrlt.w	r2, r2, #2
 800c082:	9307      	strge	r3, [sp, #28]
 800c084:	9307      	strlt	r3, [sp, #28]
 800c086:	bfb8      	it	lt
 800c088:	9204      	strlt	r2, [sp, #16]
 800c08a:	7823      	ldrb	r3, [r4, #0]
 800c08c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c08e:	d10a      	bne.n	800c0a6 <_vfiprintf_r+0x156>
 800c090:	7863      	ldrb	r3, [r4, #1]
 800c092:	2b2a      	cmp	r3, #42	@ 0x2a
 800c094:	d132      	bne.n	800c0fc <_vfiprintf_r+0x1ac>
 800c096:	9b03      	ldr	r3, [sp, #12]
 800c098:	1d1a      	adds	r2, r3, #4
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	9203      	str	r2, [sp, #12]
 800c09e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c0a2:	3402      	adds	r4, #2
 800c0a4:	9305      	str	r3, [sp, #20]
 800c0a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c17c <_vfiprintf_r+0x22c>
 800c0aa:	7821      	ldrb	r1, [r4, #0]
 800c0ac:	2203      	movs	r2, #3
 800c0ae:	4650      	mov	r0, sl
 800c0b0:	f7f4 f896 	bl	80001e0 <memchr>
 800c0b4:	b138      	cbz	r0, 800c0c6 <_vfiprintf_r+0x176>
 800c0b6:	9b04      	ldr	r3, [sp, #16]
 800c0b8:	eba0 000a 	sub.w	r0, r0, sl
 800c0bc:	2240      	movs	r2, #64	@ 0x40
 800c0be:	4082      	lsls	r2, r0
 800c0c0:	4313      	orrs	r3, r2
 800c0c2:	3401      	adds	r4, #1
 800c0c4:	9304      	str	r3, [sp, #16]
 800c0c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0ca:	4829      	ldr	r0, [pc, #164]	@ (800c170 <_vfiprintf_r+0x220>)
 800c0cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c0d0:	2206      	movs	r2, #6
 800c0d2:	f7f4 f885 	bl	80001e0 <memchr>
 800c0d6:	2800      	cmp	r0, #0
 800c0d8:	d03f      	beq.n	800c15a <_vfiprintf_r+0x20a>
 800c0da:	4b26      	ldr	r3, [pc, #152]	@ (800c174 <_vfiprintf_r+0x224>)
 800c0dc:	bb1b      	cbnz	r3, 800c126 <_vfiprintf_r+0x1d6>
 800c0de:	9b03      	ldr	r3, [sp, #12]
 800c0e0:	3307      	adds	r3, #7
 800c0e2:	f023 0307 	bic.w	r3, r3, #7
 800c0e6:	3308      	adds	r3, #8
 800c0e8:	9303      	str	r3, [sp, #12]
 800c0ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0ec:	443b      	add	r3, r7
 800c0ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0f0:	e76a      	b.n	800bfc8 <_vfiprintf_r+0x78>
 800c0f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0f6:	460c      	mov	r4, r1
 800c0f8:	2001      	movs	r0, #1
 800c0fa:	e7a8      	b.n	800c04e <_vfiprintf_r+0xfe>
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	3401      	adds	r4, #1
 800c100:	9305      	str	r3, [sp, #20]
 800c102:	4619      	mov	r1, r3
 800c104:	f04f 0c0a 	mov.w	ip, #10
 800c108:	4620      	mov	r0, r4
 800c10a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c10e:	3a30      	subs	r2, #48	@ 0x30
 800c110:	2a09      	cmp	r2, #9
 800c112:	d903      	bls.n	800c11c <_vfiprintf_r+0x1cc>
 800c114:	2b00      	cmp	r3, #0
 800c116:	d0c6      	beq.n	800c0a6 <_vfiprintf_r+0x156>
 800c118:	9105      	str	r1, [sp, #20]
 800c11a:	e7c4      	b.n	800c0a6 <_vfiprintf_r+0x156>
 800c11c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c120:	4604      	mov	r4, r0
 800c122:	2301      	movs	r3, #1
 800c124:	e7f0      	b.n	800c108 <_vfiprintf_r+0x1b8>
 800c126:	ab03      	add	r3, sp, #12
 800c128:	9300      	str	r3, [sp, #0]
 800c12a:	462a      	mov	r2, r5
 800c12c:	4b12      	ldr	r3, [pc, #72]	@ (800c178 <_vfiprintf_r+0x228>)
 800c12e:	a904      	add	r1, sp, #16
 800c130:	4630      	mov	r0, r6
 800c132:	f7fc f8e3 	bl	80082fc <_printf_float>
 800c136:	4607      	mov	r7, r0
 800c138:	1c78      	adds	r0, r7, #1
 800c13a:	d1d6      	bne.n	800c0ea <_vfiprintf_r+0x19a>
 800c13c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c13e:	07d9      	lsls	r1, r3, #31
 800c140:	d405      	bmi.n	800c14e <_vfiprintf_r+0x1fe>
 800c142:	89ab      	ldrh	r3, [r5, #12]
 800c144:	059a      	lsls	r2, r3, #22
 800c146:	d402      	bmi.n	800c14e <_vfiprintf_r+0x1fe>
 800c148:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c14a:	f7fd f919 	bl	8009380 <__retarget_lock_release_recursive>
 800c14e:	89ab      	ldrh	r3, [r5, #12]
 800c150:	065b      	lsls	r3, r3, #25
 800c152:	f53f af1f 	bmi.w	800bf94 <_vfiprintf_r+0x44>
 800c156:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c158:	e71e      	b.n	800bf98 <_vfiprintf_r+0x48>
 800c15a:	ab03      	add	r3, sp, #12
 800c15c:	9300      	str	r3, [sp, #0]
 800c15e:	462a      	mov	r2, r5
 800c160:	4b05      	ldr	r3, [pc, #20]	@ (800c178 <_vfiprintf_r+0x228>)
 800c162:	a904      	add	r1, sp, #16
 800c164:	4630      	mov	r0, r6
 800c166:	f7fc fb61 	bl	800882c <_printf_i>
 800c16a:	e7e4      	b.n	800c136 <_vfiprintf_r+0x1e6>
 800c16c:	0800d561 	.word	0x0800d561
 800c170:	0800d56b 	.word	0x0800d56b
 800c174:	080082fd 	.word	0x080082fd
 800c178:	0800bf2b 	.word	0x0800bf2b
 800c17c:	0800d567 	.word	0x0800d567

0800c180 <_scanf_chars>:
 800c180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c184:	4615      	mov	r5, r2
 800c186:	688a      	ldr	r2, [r1, #8]
 800c188:	4680      	mov	r8, r0
 800c18a:	460c      	mov	r4, r1
 800c18c:	b932      	cbnz	r2, 800c19c <_scanf_chars+0x1c>
 800c18e:	698a      	ldr	r2, [r1, #24]
 800c190:	2a00      	cmp	r2, #0
 800c192:	bf14      	ite	ne
 800c194:	f04f 32ff 	movne.w	r2, #4294967295
 800c198:	2201      	moveq	r2, #1
 800c19a:	608a      	str	r2, [r1, #8]
 800c19c:	6822      	ldr	r2, [r4, #0]
 800c19e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800c230 <_scanf_chars+0xb0>
 800c1a2:	06d1      	lsls	r1, r2, #27
 800c1a4:	bf5f      	itttt	pl
 800c1a6:	681a      	ldrpl	r2, [r3, #0]
 800c1a8:	1d11      	addpl	r1, r2, #4
 800c1aa:	6019      	strpl	r1, [r3, #0]
 800c1ac:	6816      	ldrpl	r6, [r2, #0]
 800c1ae:	2700      	movs	r7, #0
 800c1b0:	69a0      	ldr	r0, [r4, #24]
 800c1b2:	b188      	cbz	r0, 800c1d8 <_scanf_chars+0x58>
 800c1b4:	2801      	cmp	r0, #1
 800c1b6:	d107      	bne.n	800c1c8 <_scanf_chars+0x48>
 800c1b8:	682b      	ldr	r3, [r5, #0]
 800c1ba:	781a      	ldrb	r2, [r3, #0]
 800c1bc:	6963      	ldr	r3, [r4, #20]
 800c1be:	5c9b      	ldrb	r3, [r3, r2]
 800c1c0:	b953      	cbnz	r3, 800c1d8 <_scanf_chars+0x58>
 800c1c2:	2f00      	cmp	r7, #0
 800c1c4:	d031      	beq.n	800c22a <_scanf_chars+0xaa>
 800c1c6:	e022      	b.n	800c20e <_scanf_chars+0x8e>
 800c1c8:	2802      	cmp	r0, #2
 800c1ca:	d120      	bne.n	800c20e <_scanf_chars+0x8e>
 800c1cc:	682b      	ldr	r3, [r5, #0]
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c1d4:	071b      	lsls	r3, r3, #28
 800c1d6:	d41a      	bmi.n	800c20e <_scanf_chars+0x8e>
 800c1d8:	6823      	ldr	r3, [r4, #0]
 800c1da:	06da      	lsls	r2, r3, #27
 800c1dc:	bf5e      	ittt	pl
 800c1de:	682b      	ldrpl	r3, [r5, #0]
 800c1e0:	781b      	ldrbpl	r3, [r3, #0]
 800c1e2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c1e6:	682a      	ldr	r2, [r5, #0]
 800c1e8:	686b      	ldr	r3, [r5, #4]
 800c1ea:	3201      	adds	r2, #1
 800c1ec:	602a      	str	r2, [r5, #0]
 800c1ee:	68a2      	ldr	r2, [r4, #8]
 800c1f0:	3b01      	subs	r3, #1
 800c1f2:	3a01      	subs	r2, #1
 800c1f4:	606b      	str	r3, [r5, #4]
 800c1f6:	3701      	adds	r7, #1
 800c1f8:	60a2      	str	r2, [r4, #8]
 800c1fa:	b142      	cbz	r2, 800c20e <_scanf_chars+0x8e>
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	dcd7      	bgt.n	800c1b0 <_scanf_chars+0x30>
 800c200:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c204:	4629      	mov	r1, r5
 800c206:	4640      	mov	r0, r8
 800c208:	4798      	blx	r3
 800c20a:	2800      	cmp	r0, #0
 800c20c:	d0d0      	beq.n	800c1b0 <_scanf_chars+0x30>
 800c20e:	6823      	ldr	r3, [r4, #0]
 800c210:	f013 0310 	ands.w	r3, r3, #16
 800c214:	d105      	bne.n	800c222 <_scanf_chars+0xa2>
 800c216:	68e2      	ldr	r2, [r4, #12]
 800c218:	3201      	adds	r2, #1
 800c21a:	60e2      	str	r2, [r4, #12]
 800c21c:	69a2      	ldr	r2, [r4, #24]
 800c21e:	b102      	cbz	r2, 800c222 <_scanf_chars+0xa2>
 800c220:	7033      	strb	r3, [r6, #0]
 800c222:	6923      	ldr	r3, [r4, #16]
 800c224:	443b      	add	r3, r7
 800c226:	6123      	str	r3, [r4, #16]
 800c228:	2000      	movs	r0, #0
 800c22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c22e:	bf00      	nop
 800c230:	0800d461 	.word	0x0800d461

0800c234 <_scanf_i>:
 800c234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c238:	4698      	mov	r8, r3
 800c23a:	4b74      	ldr	r3, [pc, #464]	@ (800c40c <_scanf_i+0x1d8>)
 800c23c:	460c      	mov	r4, r1
 800c23e:	4682      	mov	sl, r0
 800c240:	4616      	mov	r6, r2
 800c242:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c246:	b087      	sub	sp, #28
 800c248:	ab03      	add	r3, sp, #12
 800c24a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c24e:	4b70      	ldr	r3, [pc, #448]	@ (800c410 <_scanf_i+0x1dc>)
 800c250:	69a1      	ldr	r1, [r4, #24]
 800c252:	4a70      	ldr	r2, [pc, #448]	@ (800c414 <_scanf_i+0x1e0>)
 800c254:	2903      	cmp	r1, #3
 800c256:	bf08      	it	eq
 800c258:	461a      	moveq	r2, r3
 800c25a:	68a3      	ldr	r3, [r4, #8]
 800c25c:	9201      	str	r2, [sp, #4]
 800c25e:	1e5a      	subs	r2, r3, #1
 800c260:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c264:	bf88      	it	hi
 800c266:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c26a:	4627      	mov	r7, r4
 800c26c:	bf82      	ittt	hi
 800c26e:	eb03 0905 	addhi.w	r9, r3, r5
 800c272:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c276:	60a3      	strhi	r3, [r4, #8]
 800c278:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c27c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800c280:	bf98      	it	ls
 800c282:	f04f 0900 	movls.w	r9, #0
 800c286:	6023      	str	r3, [r4, #0]
 800c288:	463d      	mov	r5, r7
 800c28a:	f04f 0b00 	mov.w	fp, #0
 800c28e:	6831      	ldr	r1, [r6, #0]
 800c290:	ab03      	add	r3, sp, #12
 800c292:	7809      	ldrb	r1, [r1, #0]
 800c294:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c298:	2202      	movs	r2, #2
 800c29a:	f7f3 ffa1 	bl	80001e0 <memchr>
 800c29e:	b328      	cbz	r0, 800c2ec <_scanf_i+0xb8>
 800c2a0:	f1bb 0f01 	cmp.w	fp, #1
 800c2a4:	d159      	bne.n	800c35a <_scanf_i+0x126>
 800c2a6:	6862      	ldr	r2, [r4, #4]
 800c2a8:	b92a      	cbnz	r2, 800c2b6 <_scanf_i+0x82>
 800c2aa:	6822      	ldr	r2, [r4, #0]
 800c2ac:	2108      	movs	r1, #8
 800c2ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c2b2:	6061      	str	r1, [r4, #4]
 800c2b4:	6022      	str	r2, [r4, #0]
 800c2b6:	6822      	ldr	r2, [r4, #0]
 800c2b8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800c2bc:	6022      	str	r2, [r4, #0]
 800c2be:	68a2      	ldr	r2, [r4, #8]
 800c2c0:	1e51      	subs	r1, r2, #1
 800c2c2:	60a1      	str	r1, [r4, #8]
 800c2c4:	b192      	cbz	r2, 800c2ec <_scanf_i+0xb8>
 800c2c6:	6832      	ldr	r2, [r6, #0]
 800c2c8:	1c51      	adds	r1, r2, #1
 800c2ca:	6031      	str	r1, [r6, #0]
 800c2cc:	7812      	ldrb	r2, [r2, #0]
 800c2ce:	f805 2b01 	strb.w	r2, [r5], #1
 800c2d2:	6872      	ldr	r2, [r6, #4]
 800c2d4:	3a01      	subs	r2, #1
 800c2d6:	2a00      	cmp	r2, #0
 800c2d8:	6072      	str	r2, [r6, #4]
 800c2da:	dc07      	bgt.n	800c2ec <_scanf_i+0xb8>
 800c2dc:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800c2e0:	4631      	mov	r1, r6
 800c2e2:	4650      	mov	r0, sl
 800c2e4:	4790      	blx	r2
 800c2e6:	2800      	cmp	r0, #0
 800c2e8:	f040 8085 	bne.w	800c3f6 <_scanf_i+0x1c2>
 800c2ec:	f10b 0b01 	add.w	fp, fp, #1
 800c2f0:	f1bb 0f03 	cmp.w	fp, #3
 800c2f4:	d1cb      	bne.n	800c28e <_scanf_i+0x5a>
 800c2f6:	6863      	ldr	r3, [r4, #4]
 800c2f8:	b90b      	cbnz	r3, 800c2fe <_scanf_i+0xca>
 800c2fa:	230a      	movs	r3, #10
 800c2fc:	6063      	str	r3, [r4, #4]
 800c2fe:	6863      	ldr	r3, [r4, #4]
 800c300:	4945      	ldr	r1, [pc, #276]	@ (800c418 <_scanf_i+0x1e4>)
 800c302:	6960      	ldr	r0, [r4, #20]
 800c304:	1ac9      	subs	r1, r1, r3
 800c306:	f000 f997 	bl	800c638 <__sccl>
 800c30a:	f04f 0b00 	mov.w	fp, #0
 800c30e:	68a3      	ldr	r3, [r4, #8]
 800c310:	6822      	ldr	r2, [r4, #0]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d03d      	beq.n	800c392 <_scanf_i+0x15e>
 800c316:	6831      	ldr	r1, [r6, #0]
 800c318:	6960      	ldr	r0, [r4, #20]
 800c31a:	f891 c000 	ldrb.w	ip, [r1]
 800c31e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c322:	2800      	cmp	r0, #0
 800c324:	d035      	beq.n	800c392 <_scanf_i+0x15e>
 800c326:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800c32a:	d124      	bne.n	800c376 <_scanf_i+0x142>
 800c32c:	0510      	lsls	r0, r2, #20
 800c32e:	d522      	bpl.n	800c376 <_scanf_i+0x142>
 800c330:	f10b 0b01 	add.w	fp, fp, #1
 800c334:	f1b9 0f00 	cmp.w	r9, #0
 800c338:	d003      	beq.n	800c342 <_scanf_i+0x10e>
 800c33a:	3301      	adds	r3, #1
 800c33c:	f109 39ff 	add.w	r9, r9, #4294967295
 800c340:	60a3      	str	r3, [r4, #8]
 800c342:	6873      	ldr	r3, [r6, #4]
 800c344:	3b01      	subs	r3, #1
 800c346:	2b00      	cmp	r3, #0
 800c348:	6073      	str	r3, [r6, #4]
 800c34a:	dd1b      	ble.n	800c384 <_scanf_i+0x150>
 800c34c:	6833      	ldr	r3, [r6, #0]
 800c34e:	3301      	adds	r3, #1
 800c350:	6033      	str	r3, [r6, #0]
 800c352:	68a3      	ldr	r3, [r4, #8]
 800c354:	3b01      	subs	r3, #1
 800c356:	60a3      	str	r3, [r4, #8]
 800c358:	e7d9      	b.n	800c30e <_scanf_i+0xda>
 800c35a:	f1bb 0f02 	cmp.w	fp, #2
 800c35e:	d1ae      	bne.n	800c2be <_scanf_i+0x8a>
 800c360:	6822      	ldr	r2, [r4, #0]
 800c362:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800c366:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800c36a:	d1bf      	bne.n	800c2ec <_scanf_i+0xb8>
 800c36c:	2110      	movs	r1, #16
 800c36e:	6061      	str	r1, [r4, #4]
 800c370:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c374:	e7a2      	b.n	800c2bc <_scanf_i+0x88>
 800c376:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800c37a:	6022      	str	r2, [r4, #0]
 800c37c:	780b      	ldrb	r3, [r1, #0]
 800c37e:	f805 3b01 	strb.w	r3, [r5], #1
 800c382:	e7de      	b.n	800c342 <_scanf_i+0x10e>
 800c384:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c388:	4631      	mov	r1, r6
 800c38a:	4650      	mov	r0, sl
 800c38c:	4798      	blx	r3
 800c38e:	2800      	cmp	r0, #0
 800c390:	d0df      	beq.n	800c352 <_scanf_i+0x11e>
 800c392:	6823      	ldr	r3, [r4, #0]
 800c394:	05d9      	lsls	r1, r3, #23
 800c396:	d50d      	bpl.n	800c3b4 <_scanf_i+0x180>
 800c398:	42bd      	cmp	r5, r7
 800c39a:	d909      	bls.n	800c3b0 <_scanf_i+0x17c>
 800c39c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c3a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c3a4:	4632      	mov	r2, r6
 800c3a6:	4650      	mov	r0, sl
 800c3a8:	4798      	blx	r3
 800c3aa:	f105 39ff 	add.w	r9, r5, #4294967295
 800c3ae:	464d      	mov	r5, r9
 800c3b0:	42bd      	cmp	r5, r7
 800c3b2:	d028      	beq.n	800c406 <_scanf_i+0x1d2>
 800c3b4:	6822      	ldr	r2, [r4, #0]
 800c3b6:	f012 0210 	ands.w	r2, r2, #16
 800c3ba:	d113      	bne.n	800c3e4 <_scanf_i+0x1b0>
 800c3bc:	702a      	strb	r2, [r5, #0]
 800c3be:	6863      	ldr	r3, [r4, #4]
 800c3c0:	9e01      	ldr	r6, [sp, #4]
 800c3c2:	4639      	mov	r1, r7
 800c3c4:	4650      	mov	r0, sl
 800c3c6:	47b0      	blx	r6
 800c3c8:	f8d8 3000 	ldr.w	r3, [r8]
 800c3cc:	6821      	ldr	r1, [r4, #0]
 800c3ce:	1d1a      	adds	r2, r3, #4
 800c3d0:	f8c8 2000 	str.w	r2, [r8]
 800c3d4:	f011 0f20 	tst.w	r1, #32
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	d00f      	beq.n	800c3fc <_scanf_i+0x1c8>
 800c3dc:	6018      	str	r0, [r3, #0]
 800c3de:	68e3      	ldr	r3, [r4, #12]
 800c3e0:	3301      	adds	r3, #1
 800c3e2:	60e3      	str	r3, [r4, #12]
 800c3e4:	6923      	ldr	r3, [r4, #16]
 800c3e6:	1bed      	subs	r5, r5, r7
 800c3e8:	445d      	add	r5, fp
 800c3ea:	442b      	add	r3, r5
 800c3ec:	6123      	str	r3, [r4, #16]
 800c3ee:	2000      	movs	r0, #0
 800c3f0:	b007      	add	sp, #28
 800c3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3f6:	f04f 0b00 	mov.w	fp, #0
 800c3fa:	e7ca      	b.n	800c392 <_scanf_i+0x15e>
 800c3fc:	07ca      	lsls	r2, r1, #31
 800c3fe:	bf4c      	ite	mi
 800c400:	8018      	strhmi	r0, [r3, #0]
 800c402:	6018      	strpl	r0, [r3, #0]
 800c404:	e7eb      	b.n	800c3de <_scanf_i+0x1aa>
 800c406:	2001      	movs	r0, #1
 800c408:	e7f2      	b.n	800c3f0 <_scanf_i+0x1bc>
 800c40a:	bf00      	nop
 800c40c:	0800d1ac 	.word	0x0800d1ac
 800c410:	0800b8b1 	.word	0x0800b8b1
 800c414:	0800cffd 	.word	0x0800cffd
 800c418:	0800d582 	.word	0x0800d582

0800c41c <__sflush_r>:
 800c41c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c424:	0716      	lsls	r6, r2, #28
 800c426:	4605      	mov	r5, r0
 800c428:	460c      	mov	r4, r1
 800c42a:	d454      	bmi.n	800c4d6 <__sflush_r+0xba>
 800c42c:	684b      	ldr	r3, [r1, #4]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	dc02      	bgt.n	800c438 <__sflush_r+0x1c>
 800c432:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c434:	2b00      	cmp	r3, #0
 800c436:	dd48      	ble.n	800c4ca <__sflush_r+0xae>
 800c438:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c43a:	2e00      	cmp	r6, #0
 800c43c:	d045      	beq.n	800c4ca <__sflush_r+0xae>
 800c43e:	2300      	movs	r3, #0
 800c440:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c444:	682f      	ldr	r7, [r5, #0]
 800c446:	6a21      	ldr	r1, [r4, #32]
 800c448:	602b      	str	r3, [r5, #0]
 800c44a:	d030      	beq.n	800c4ae <__sflush_r+0x92>
 800c44c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c44e:	89a3      	ldrh	r3, [r4, #12]
 800c450:	0759      	lsls	r1, r3, #29
 800c452:	d505      	bpl.n	800c460 <__sflush_r+0x44>
 800c454:	6863      	ldr	r3, [r4, #4]
 800c456:	1ad2      	subs	r2, r2, r3
 800c458:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c45a:	b10b      	cbz	r3, 800c460 <__sflush_r+0x44>
 800c45c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c45e:	1ad2      	subs	r2, r2, r3
 800c460:	2300      	movs	r3, #0
 800c462:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c464:	6a21      	ldr	r1, [r4, #32]
 800c466:	4628      	mov	r0, r5
 800c468:	47b0      	blx	r6
 800c46a:	1c43      	adds	r3, r0, #1
 800c46c:	89a3      	ldrh	r3, [r4, #12]
 800c46e:	d106      	bne.n	800c47e <__sflush_r+0x62>
 800c470:	6829      	ldr	r1, [r5, #0]
 800c472:	291d      	cmp	r1, #29
 800c474:	d82b      	bhi.n	800c4ce <__sflush_r+0xb2>
 800c476:	4a2a      	ldr	r2, [pc, #168]	@ (800c520 <__sflush_r+0x104>)
 800c478:	410a      	asrs	r2, r1
 800c47a:	07d6      	lsls	r6, r2, #31
 800c47c:	d427      	bmi.n	800c4ce <__sflush_r+0xb2>
 800c47e:	2200      	movs	r2, #0
 800c480:	6062      	str	r2, [r4, #4]
 800c482:	04d9      	lsls	r1, r3, #19
 800c484:	6922      	ldr	r2, [r4, #16]
 800c486:	6022      	str	r2, [r4, #0]
 800c488:	d504      	bpl.n	800c494 <__sflush_r+0x78>
 800c48a:	1c42      	adds	r2, r0, #1
 800c48c:	d101      	bne.n	800c492 <__sflush_r+0x76>
 800c48e:	682b      	ldr	r3, [r5, #0]
 800c490:	b903      	cbnz	r3, 800c494 <__sflush_r+0x78>
 800c492:	6560      	str	r0, [r4, #84]	@ 0x54
 800c494:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c496:	602f      	str	r7, [r5, #0]
 800c498:	b1b9      	cbz	r1, 800c4ca <__sflush_r+0xae>
 800c49a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c49e:	4299      	cmp	r1, r3
 800c4a0:	d002      	beq.n	800c4a8 <__sflush_r+0x8c>
 800c4a2:	4628      	mov	r0, r5
 800c4a4:	f7fd fdd0 	bl	800a048 <_free_r>
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	6363      	str	r3, [r4, #52]	@ 0x34
 800c4ac:	e00d      	b.n	800c4ca <__sflush_r+0xae>
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	4628      	mov	r0, r5
 800c4b2:	47b0      	blx	r6
 800c4b4:	4602      	mov	r2, r0
 800c4b6:	1c50      	adds	r0, r2, #1
 800c4b8:	d1c9      	bne.n	800c44e <__sflush_r+0x32>
 800c4ba:	682b      	ldr	r3, [r5, #0]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d0c6      	beq.n	800c44e <__sflush_r+0x32>
 800c4c0:	2b1d      	cmp	r3, #29
 800c4c2:	d001      	beq.n	800c4c8 <__sflush_r+0xac>
 800c4c4:	2b16      	cmp	r3, #22
 800c4c6:	d11e      	bne.n	800c506 <__sflush_r+0xea>
 800c4c8:	602f      	str	r7, [r5, #0]
 800c4ca:	2000      	movs	r0, #0
 800c4cc:	e022      	b.n	800c514 <__sflush_r+0xf8>
 800c4ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4d2:	b21b      	sxth	r3, r3
 800c4d4:	e01b      	b.n	800c50e <__sflush_r+0xf2>
 800c4d6:	690f      	ldr	r7, [r1, #16]
 800c4d8:	2f00      	cmp	r7, #0
 800c4da:	d0f6      	beq.n	800c4ca <__sflush_r+0xae>
 800c4dc:	0793      	lsls	r3, r2, #30
 800c4de:	680e      	ldr	r6, [r1, #0]
 800c4e0:	bf08      	it	eq
 800c4e2:	694b      	ldreq	r3, [r1, #20]
 800c4e4:	600f      	str	r7, [r1, #0]
 800c4e6:	bf18      	it	ne
 800c4e8:	2300      	movne	r3, #0
 800c4ea:	eba6 0807 	sub.w	r8, r6, r7
 800c4ee:	608b      	str	r3, [r1, #8]
 800c4f0:	f1b8 0f00 	cmp.w	r8, #0
 800c4f4:	dde9      	ble.n	800c4ca <__sflush_r+0xae>
 800c4f6:	6a21      	ldr	r1, [r4, #32]
 800c4f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c4fa:	4643      	mov	r3, r8
 800c4fc:	463a      	mov	r2, r7
 800c4fe:	4628      	mov	r0, r5
 800c500:	47b0      	blx	r6
 800c502:	2800      	cmp	r0, #0
 800c504:	dc08      	bgt.n	800c518 <__sflush_r+0xfc>
 800c506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c50a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c50e:	81a3      	strh	r3, [r4, #12]
 800c510:	f04f 30ff 	mov.w	r0, #4294967295
 800c514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c518:	4407      	add	r7, r0
 800c51a:	eba8 0800 	sub.w	r8, r8, r0
 800c51e:	e7e7      	b.n	800c4f0 <__sflush_r+0xd4>
 800c520:	dfbffffe 	.word	0xdfbffffe

0800c524 <_fflush_r>:
 800c524:	b538      	push	{r3, r4, r5, lr}
 800c526:	690b      	ldr	r3, [r1, #16]
 800c528:	4605      	mov	r5, r0
 800c52a:	460c      	mov	r4, r1
 800c52c:	b913      	cbnz	r3, 800c534 <_fflush_r+0x10>
 800c52e:	2500      	movs	r5, #0
 800c530:	4628      	mov	r0, r5
 800c532:	bd38      	pop	{r3, r4, r5, pc}
 800c534:	b118      	cbz	r0, 800c53e <_fflush_r+0x1a>
 800c536:	6a03      	ldr	r3, [r0, #32]
 800c538:	b90b      	cbnz	r3, 800c53e <_fflush_r+0x1a>
 800c53a:	f7fc fd37 	bl	8008fac <__sinit>
 800c53e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d0f3      	beq.n	800c52e <_fflush_r+0xa>
 800c546:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c548:	07d0      	lsls	r0, r2, #31
 800c54a:	d404      	bmi.n	800c556 <_fflush_r+0x32>
 800c54c:	0599      	lsls	r1, r3, #22
 800c54e:	d402      	bmi.n	800c556 <_fflush_r+0x32>
 800c550:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c552:	f7fc ff14 	bl	800937e <__retarget_lock_acquire_recursive>
 800c556:	4628      	mov	r0, r5
 800c558:	4621      	mov	r1, r4
 800c55a:	f7ff ff5f 	bl	800c41c <__sflush_r>
 800c55e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c560:	07da      	lsls	r2, r3, #31
 800c562:	4605      	mov	r5, r0
 800c564:	d4e4      	bmi.n	800c530 <_fflush_r+0xc>
 800c566:	89a3      	ldrh	r3, [r4, #12]
 800c568:	059b      	lsls	r3, r3, #22
 800c56a:	d4e1      	bmi.n	800c530 <_fflush_r+0xc>
 800c56c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c56e:	f7fc ff07 	bl	8009380 <__retarget_lock_release_recursive>
 800c572:	e7dd      	b.n	800c530 <_fflush_r+0xc>

0800c574 <__swhatbuf_r>:
 800c574:	b570      	push	{r4, r5, r6, lr}
 800c576:	460c      	mov	r4, r1
 800c578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c57c:	2900      	cmp	r1, #0
 800c57e:	b096      	sub	sp, #88	@ 0x58
 800c580:	4615      	mov	r5, r2
 800c582:	461e      	mov	r6, r3
 800c584:	da0d      	bge.n	800c5a2 <__swhatbuf_r+0x2e>
 800c586:	89a3      	ldrh	r3, [r4, #12]
 800c588:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c58c:	f04f 0100 	mov.w	r1, #0
 800c590:	bf14      	ite	ne
 800c592:	2340      	movne	r3, #64	@ 0x40
 800c594:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c598:	2000      	movs	r0, #0
 800c59a:	6031      	str	r1, [r6, #0]
 800c59c:	602b      	str	r3, [r5, #0]
 800c59e:	b016      	add	sp, #88	@ 0x58
 800c5a0:	bd70      	pop	{r4, r5, r6, pc}
 800c5a2:	466a      	mov	r2, sp
 800c5a4:	f000 f8d6 	bl	800c754 <_fstat_r>
 800c5a8:	2800      	cmp	r0, #0
 800c5aa:	dbec      	blt.n	800c586 <__swhatbuf_r+0x12>
 800c5ac:	9901      	ldr	r1, [sp, #4]
 800c5ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c5b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c5b6:	4259      	negs	r1, r3
 800c5b8:	4159      	adcs	r1, r3
 800c5ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c5be:	e7eb      	b.n	800c598 <__swhatbuf_r+0x24>

0800c5c0 <__smakebuf_r>:
 800c5c0:	898b      	ldrh	r3, [r1, #12]
 800c5c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5c4:	079d      	lsls	r5, r3, #30
 800c5c6:	4606      	mov	r6, r0
 800c5c8:	460c      	mov	r4, r1
 800c5ca:	d507      	bpl.n	800c5dc <__smakebuf_r+0x1c>
 800c5cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c5d0:	6023      	str	r3, [r4, #0]
 800c5d2:	6123      	str	r3, [r4, #16]
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	6163      	str	r3, [r4, #20]
 800c5d8:	b003      	add	sp, #12
 800c5da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5dc:	ab01      	add	r3, sp, #4
 800c5de:	466a      	mov	r2, sp
 800c5e0:	f7ff ffc8 	bl	800c574 <__swhatbuf_r>
 800c5e4:	9f00      	ldr	r7, [sp, #0]
 800c5e6:	4605      	mov	r5, r0
 800c5e8:	4639      	mov	r1, r7
 800c5ea:	4630      	mov	r0, r6
 800c5ec:	f7fd fda0 	bl	800a130 <_malloc_r>
 800c5f0:	b948      	cbnz	r0, 800c606 <__smakebuf_r+0x46>
 800c5f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5f6:	059a      	lsls	r2, r3, #22
 800c5f8:	d4ee      	bmi.n	800c5d8 <__smakebuf_r+0x18>
 800c5fa:	f023 0303 	bic.w	r3, r3, #3
 800c5fe:	f043 0302 	orr.w	r3, r3, #2
 800c602:	81a3      	strh	r3, [r4, #12]
 800c604:	e7e2      	b.n	800c5cc <__smakebuf_r+0xc>
 800c606:	89a3      	ldrh	r3, [r4, #12]
 800c608:	6020      	str	r0, [r4, #0]
 800c60a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c60e:	81a3      	strh	r3, [r4, #12]
 800c610:	9b01      	ldr	r3, [sp, #4]
 800c612:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c616:	b15b      	cbz	r3, 800c630 <__smakebuf_r+0x70>
 800c618:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c61c:	4630      	mov	r0, r6
 800c61e:	f000 f8ab 	bl	800c778 <_isatty_r>
 800c622:	b128      	cbz	r0, 800c630 <__smakebuf_r+0x70>
 800c624:	89a3      	ldrh	r3, [r4, #12]
 800c626:	f023 0303 	bic.w	r3, r3, #3
 800c62a:	f043 0301 	orr.w	r3, r3, #1
 800c62e:	81a3      	strh	r3, [r4, #12]
 800c630:	89a3      	ldrh	r3, [r4, #12]
 800c632:	431d      	orrs	r5, r3
 800c634:	81a5      	strh	r5, [r4, #12]
 800c636:	e7cf      	b.n	800c5d8 <__smakebuf_r+0x18>

0800c638 <__sccl>:
 800c638:	b570      	push	{r4, r5, r6, lr}
 800c63a:	780b      	ldrb	r3, [r1, #0]
 800c63c:	4604      	mov	r4, r0
 800c63e:	2b5e      	cmp	r3, #94	@ 0x5e
 800c640:	bf0b      	itete	eq
 800c642:	784b      	ldrbeq	r3, [r1, #1]
 800c644:	1c4a      	addne	r2, r1, #1
 800c646:	1c8a      	addeq	r2, r1, #2
 800c648:	2100      	movne	r1, #0
 800c64a:	bf08      	it	eq
 800c64c:	2101      	moveq	r1, #1
 800c64e:	3801      	subs	r0, #1
 800c650:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800c654:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c658:	42a8      	cmp	r0, r5
 800c65a:	d1fb      	bne.n	800c654 <__sccl+0x1c>
 800c65c:	b90b      	cbnz	r3, 800c662 <__sccl+0x2a>
 800c65e:	1e50      	subs	r0, r2, #1
 800c660:	bd70      	pop	{r4, r5, r6, pc}
 800c662:	f081 0101 	eor.w	r1, r1, #1
 800c666:	54e1      	strb	r1, [r4, r3]
 800c668:	4610      	mov	r0, r2
 800c66a:	4602      	mov	r2, r0
 800c66c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c670:	2d2d      	cmp	r5, #45	@ 0x2d
 800c672:	d005      	beq.n	800c680 <__sccl+0x48>
 800c674:	2d5d      	cmp	r5, #93	@ 0x5d
 800c676:	d016      	beq.n	800c6a6 <__sccl+0x6e>
 800c678:	2d00      	cmp	r5, #0
 800c67a:	d0f1      	beq.n	800c660 <__sccl+0x28>
 800c67c:	462b      	mov	r3, r5
 800c67e:	e7f2      	b.n	800c666 <__sccl+0x2e>
 800c680:	7846      	ldrb	r6, [r0, #1]
 800c682:	2e5d      	cmp	r6, #93	@ 0x5d
 800c684:	d0fa      	beq.n	800c67c <__sccl+0x44>
 800c686:	42b3      	cmp	r3, r6
 800c688:	dcf8      	bgt.n	800c67c <__sccl+0x44>
 800c68a:	3002      	adds	r0, #2
 800c68c:	461a      	mov	r2, r3
 800c68e:	3201      	adds	r2, #1
 800c690:	4296      	cmp	r6, r2
 800c692:	54a1      	strb	r1, [r4, r2]
 800c694:	dcfb      	bgt.n	800c68e <__sccl+0x56>
 800c696:	1af2      	subs	r2, r6, r3
 800c698:	3a01      	subs	r2, #1
 800c69a:	1c5d      	adds	r5, r3, #1
 800c69c:	42b3      	cmp	r3, r6
 800c69e:	bfa8      	it	ge
 800c6a0:	2200      	movge	r2, #0
 800c6a2:	18ab      	adds	r3, r5, r2
 800c6a4:	e7e1      	b.n	800c66a <__sccl+0x32>
 800c6a6:	4610      	mov	r0, r2
 800c6a8:	e7da      	b.n	800c660 <__sccl+0x28>

0800c6aa <__submore>:
 800c6aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ae:	460c      	mov	r4, r1
 800c6b0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c6b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c6b6:	4299      	cmp	r1, r3
 800c6b8:	d11d      	bne.n	800c6f6 <__submore+0x4c>
 800c6ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c6be:	f7fd fd37 	bl	800a130 <_malloc_r>
 800c6c2:	b918      	cbnz	r0, 800c6cc <__submore+0x22>
 800c6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c6d0:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c6d2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800c6d6:	6360      	str	r0, [r4, #52]	@ 0x34
 800c6d8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800c6dc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c6e0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800c6e4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c6e8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800c6ec:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800c6f0:	6020      	str	r0, [r4, #0]
 800c6f2:	2000      	movs	r0, #0
 800c6f4:	e7e8      	b.n	800c6c8 <__submore+0x1e>
 800c6f6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800c6f8:	0077      	lsls	r7, r6, #1
 800c6fa:	463a      	mov	r2, r7
 800c6fc:	f000 fbe1 	bl	800cec2 <_realloc_r>
 800c700:	4605      	mov	r5, r0
 800c702:	2800      	cmp	r0, #0
 800c704:	d0de      	beq.n	800c6c4 <__submore+0x1a>
 800c706:	eb00 0806 	add.w	r8, r0, r6
 800c70a:	4601      	mov	r1, r0
 800c70c:	4632      	mov	r2, r6
 800c70e:	4640      	mov	r0, r8
 800c710:	f7fc fe37 	bl	8009382 <memcpy>
 800c714:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800c718:	f8c4 8000 	str.w	r8, [r4]
 800c71c:	e7e9      	b.n	800c6f2 <__submore+0x48>

0800c71e <memmove>:
 800c71e:	4288      	cmp	r0, r1
 800c720:	b510      	push	{r4, lr}
 800c722:	eb01 0402 	add.w	r4, r1, r2
 800c726:	d902      	bls.n	800c72e <memmove+0x10>
 800c728:	4284      	cmp	r4, r0
 800c72a:	4623      	mov	r3, r4
 800c72c:	d807      	bhi.n	800c73e <memmove+0x20>
 800c72e:	1e43      	subs	r3, r0, #1
 800c730:	42a1      	cmp	r1, r4
 800c732:	d008      	beq.n	800c746 <memmove+0x28>
 800c734:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c738:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c73c:	e7f8      	b.n	800c730 <memmove+0x12>
 800c73e:	4402      	add	r2, r0
 800c740:	4601      	mov	r1, r0
 800c742:	428a      	cmp	r2, r1
 800c744:	d100      	bne.n	800c748 <memmove+0x2a>
 800c746:	bd10      	pop	{r4, pc}
 800c748:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c74c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c750:	e7f7      	b.n	800c742 <memmove+0x24>
	...

0800c754 <_fstat_r>:
 800c754:	b538      	push	{r3, r4, r5, lr}
 800c756:	4d07      	ldr	r5, [pc, #28]	@ (800c774 <_fstat_r+0x20>)
 800c758:	2300      	movs	r3, #0
 800c75a:	4604      	mov	r4, r0
 800c75c:	4608      	mov	r0, r1
 800c75e:	4611      	mov	r1, r2
 800c760:	602b      	str	r3, [r5, #0]
 800c762:	f7f5 fe8b 	bl	800247c <_fstat>
 800c766:	1c43      	adds	r3, r0, #1
 800c768:	d102      	bne.n	800c770 <_fstat_r+0x1c>
 800c76a:	682b      	ldr	r3, [r5, #0]
 800c76c:	b103      	cbz	r3, 800c770 <_fstat_r+0x1c>
 800c76e:	6023      	str	r3, [r4, #0]
 800c770:	bd38      	pop	{r3, r4, r5, pc}
 800c772:	bf00      	nop
 800c774:	20000830 	.word	0x20000830

0800c778 <_isatty_r>:
 800c778:	b538      	push	{r3, r4, r5, lr}
 800c77a:	4d06      	ldr	r5, [pc, #24]	@ (800c794 <_isatty_r+0x1c>)
 800c77c:	2300      	movs	r3, #0
 800c77e:	4604      	mov	r4, r0
 800c780:	4608      	mov	r0, r1
 800c782:	602b      	str	r3, [r5, #0]
 800c784:	f7f5 fe8a 	bl	800249c <_isatty>
 800c788:	1c43      	adds	r3, r0, #1
 800c78a:	d102      	bne.n	800c792 <_isatty_r+0x1a>
 800c78c:	682b      	ldr	r3, [r5, #0]
 800c78e:	b103      	cbz	r3, 800c792 <_isatty_r+0x1a>
 800c790:	6023      	str	r3, [r4, #0]
 800c792:	bd38      	pop	{r3, r4, r5, pc}
 800c794:	20000830 	.word	0x20000830

0800c798 <_sbrk_r>:
 800c798:	b538      	push	{r3, r4, r5, lr}
 800c79a:	4d06      	ldr	r5, [pc, #24]	@ (800c7b4 <_sbrk_r+0x1c>)
 800c79c:	2300      	movs	r3, #0
 800c79e:	4604      	mov	r4, r0
 800c7a0:	4608      	mov	r0, r1
 800c7a2:	602b      	str	r3, [r5, #0]
 800c7a4:	f7f5 fe92 	bl	80024cc <_sbrk>
 800c7a8:	1c43      	adds	r3, r0, #1
 800c7aa:	d102      	bne.n	800c7b2 <_sbrk_r+0x1a>
 800c7ac:	682b      	ldr	r3, [r5, #0]
 800c7ae:	b103      	cbz	r3, 800c7b2 <_sbrk_r+0x1a>
 800c7b0:	6023      	str	r3, [r4, #0]
 800c7b2:	bd38      	pop	{r3, r4, r5, pc}
 800c7b4:	20000830 	.word	0x20000830

0800c7b8 <nan>:
 800c7b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c7c0 <nan+0x8>
 800c7bc:	4770      	bx	lr
 800c7be:	bf00      	nop
 800c7c0:	00000000 	.word	0x00000000
 800c7c4:	7ff80000 	.word	0x7ff80000

0800c7c8 <__assert_func>:
 800c7c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c7ca:	4614      	mov	r4, r2
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	4b09      	ldr	r3, [pc, #36]	@ (800c7f4 <__assert_func+0x2c>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	4605      	mov	r5, r0
 800c7d4:	68d8      	ldr	r0, [r3, #12]
 800c7d6:	b954      	cbnz	r4, 800c7ee <__assert_func+0x26>
 800c7d8:	4b07      	ldr	r3, [pc, #28]	@ (800c7f8 <__assert_func+0x30>)
 800c7da:	461c      	mov	r4, r3
 800c7dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c7e0:	9100      	str	r1, [sp, #0]
 800c7e2:	462b      	mov	r3, r5
 800c7e4:	4905      	ldr	r1, [pc, #20]	@ (800c7fc <__assert_func+0x34>)
 800c7e6:	f000 fc19 	bl	800d01c <fiprintf>
 800c7ea:	f000 fc29 	bl	800d040 <abort>
 800c7ee:	4b04      	ldr	r3, [pc, #16]	@ (800c800 <__assert_func+0x38>)
 800c7f0:	e7f4      	b.n	800c7dc <__assert_func+0x14>
 800c7f2:	bf00      	nop
 800c7f4:	20000018 	.word	0x20000018
 800c7f8:	0800d5d0 	.word	0x0800d5d0
 800c7fc:	0800d5a2 	.word	0x0800d5a2
 800c800:	0800d595 	.word	0x0800d595

0800c804 <_calloc_r>:
 800c804:	b570      	push	{r4, r5, r6, lr}
 800c806:	fba1 5402 	umull	r5, r4, r1, r2
 800c80a:	b93c      	cbnz	r4, 800c81c <_calloc_r+0x18>
 800c80c:	4629      	mov	r1, r5
 800c80e:	f7fd fc8f 	bl	800a130 <_malloc_r>
 800c812:	4606      	mov	r6, r0
 800c814:	b928      	cbnz	r0, 800c822 <_calloc_r+0x1e>
 800c816:	2600      	movs	r6, #0
 800c818:	4630      	mov	r0, r6
 800c81a:	bd70      	pop	{r4, r5, r6, pc}
 800c81c:	220c      	movs	r2, #12
 800c81e:	6002      	str	r2, [r0, #0]
 800c820:	e7f9      	b.n	800c816 <_calloc_r+0x12>
 800c822:	462a      	mov	r2, r5
 800c824:	4621      	mov	r1, r4
 800c826:	f7fc fd1b 	bl	8009260 <memset>
 800c82a:	e7f5      	b.n	800c818 <_calloc_r+0x14>

0800c82c <rshift>:
 800c82c:	6903      	ldr	r3, [r0, #16]
 800c82e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c832:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c836:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c83a:	f100 0414 	add.w	r4, r0, #20
 800c83e:	dd45      	ble.n	800c8cc <rshift+0xa0>
 800c840:	f011 011f 	ands.w	r1, r1, #31
 800c844:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c848:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c84c:	d10c      	bne.n	800c868 <rshift+0x3c>
 800c84e:	f100 0710 	add.w	r7, r0, #16
 800c852:	4629      	mov	r1, r5
 800c854:	42b1      	cmp	r1, r6
 800c856:	d334      	bcc.n	800c8c2 <rshift+0x96>
 800c858:	1a9b      	subs	r3, r3, r2
 800c85a:	009b      	lsls	r3, r3, #2
 800c85c:	1eea      	subs	r2, r5, #3
 800c85e:	4296      	cmp	r6, r2
 800c860:	bf38      	it	cc
 800c862:	2300      	movcc	r3, #0
 800c864:	4423      	add	r3, r4
 800c866:	e015      	b.n	800c894 <rshift+0x68>
 800c868:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c86c:	f1c1 0820 	rsb	r8, r1, #32
 800c870:	40cf      	lsrs	r7, r1
 800c872:	f105 0e04 	add.w	lr, r5, #4
 800c876:	46a1      	mov	r9, r4
 800c878:	4576      	cmp	r6, lr
 800c87a:	46f4      	mov	ip, lr
 800c87c:	d815      	bhi.n	800c8aa <rshift+0x7e>
 800c87e:	1a9a      	subs	r2, r3, r2
 800c880:	0092      	lsls	r2, r2, #2
 800c882:	3a04      	subs	r2, #4
 800c884:	3501      	adds	r5, #1
 800c886:	42ae      	cmp	r6, r5
 800c888:	bf38      	it	cc
 800c88a:	2200      	movcc	r2, #0
 800c88c:	18a3      	adds	r3, r4, r2
 800c88e:	50a7      	str	r7, [r4, r2]
 800c890:	b107      	cbz	r7, 800c894 <rshift+0x68>
 800c892:	3304      	adds	r3, #4
 800c894:	1b1a      	subs	r2, r3, r4
 800c896:	42a3      	cmp	r3, r4
 800c898:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c89c:	bf08      	it	eq
 800c89e:	2300      	moveq	r3, #0
 800c8a0:	6102      	str	r2, [r0, #16]
 800c8a2:	bf08      	it	eq
 800c8a4:	6143      	streq	r3, [r0, #20]
 800c8a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8aa:	f8dc c000 	ldr.w	ip, [ip]
 800c8ae:	fa0c fc08 	lsl.w	ip, ip, r8
 800c8b2:	ea4c 0707 	orr.w	r7, ip, r7
 800c8b6:	f849 7b04 	str.w	r7, [r9], #4
 800c8ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c8be:	40cf      	lsrs	r7, r1
 800c8c0:	e7da      	b.n	800c878 <rshift+0x4c>
 800c8c2:	f851 cb04 	ldr.w	ip, [r1], #4
 800c8c6:	f847 cf04 	str.w	ip, [r7, #4]!
 800c8ca:	e7c3      	b.n	800c854 <rshift+0x28>
 800c8cc:	4623      	mov	r3, r4
 800c8ce:	e7e1      	b.n	800c894 <rshift+0x68>

0800c8d0 <__hexdig_fun>:
 800c8d0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c8d4:	2b09      	cmp	r3, #9
 800c8d6:	d802      	bhi.n	800c8de <__hexdig_fun+0xe>
 800c8d8:	3820      	subs	r0, #32
 800c8da:	b2c0      	uxtb	r0, r0
 800c8dc:	4770      	bx	lr
 800c8de:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c8e2:	2b05      	cmp	r3, #5
 800c8e4:	d801      	bhi.n	800c8ea <__hexdig_fun+0x1a>
 800c8e6:	3847      	subs	r0, #71	@ 0x47
 800c8e8:	e7f7      	b.n	800c8da <__hexdig_fun+0xa>
 800c8ea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c8ee:	2b05      	cmp	r3, #5
 800c8f0:	d801      	bhi.n	800c8f6 <__hexdig_fun+0x26>
 800c8f2:	3827      	subs	r0, #39	@ 0x27
 800c8f4:	e7f1      	b.n	800c8da <__hexdig_fun+0xa>
 800c8f6:	2000      	movs	r0, #0
 800c8f8:	4770      	bx	lr
	...

0800c8fc <__gethex>:
 800c8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c900:	b085      	sub	sp, #20
 800c902:	468a      	mov	sl, r1
 800c904:	9302      	str	r3, [sp, #8]
 800c906:	680b      	ldr	r3, [r1, #0]
 800c908:	9001      	str	r0, [sp, #4]
 800c90a:	4690      	mov	r8, r2
 800c90c:	1c9c      	adds	r4, r3, #2
 800c90e:	46a1      	mov	r9, r4
 800c910:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c914:	2830      	cmp	r0, #48	@ 0x30
 800c916:	d0fa      	beq.n	800c90e <__gethex+0x12>
 800c918:	eba9 0303 	sub.w	r3, r9, r3
 800c91c:	f1a3 0b02 	sub.w	fp, r3, #2
 800c920:	f7ff ffd6 	bl	800c8d0 <__hexdig_fun>
 800c924:	4605      	mov	r5, r0
 800c926:	2800      	cmp	r0, #0
 800c928:	d168      	bne.n	800c9fc <__gethex+0x100>
 800c92a:	49a0      	ldr	r1, [pc, #640]	@ (800cbac <__gethex+0x2b0>)
 800c92c:	2201      	movs	r2, #1
 800c92e:	4648      	mov	r0, r9
 800c930:	f7fc fc9e 	bl	8009270 <strncmp>
 800c934:	4607      	mov	r7, r0
 800c936:	2800      	cmp	r0, #0
 800c938:	d167      	bne.n	800ca0a <__gethex+0x10e>
 800c93a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c93e:	4626      	mov	r6, r4
 800c940:	f7ff ffc6 	bl	800c8d0 <__hexdig_fun>
 800c944:	2800      	cmp	r0, #0
 800c946:	d062      	beq.n	800ca0e <__gethex+0x112>
 800c948:	4623      	mov	r3, r4
 800c94a:	7818      	ldrb	r0, [r3, #0]
 800c94c:	2830      	cmp	r0, #48	@ 0x30
 800c94e:	4699      	mov	r9, r3
 800c950:	f103 0301 	add.w	r3, r3, #1
 800c954:	d0f9      	beq.n	800c94a <__gethex+0x4e>
 800c956:	f7ff ffbb 	bl	800c8d0 <__hexdig_fun>
 800c95a:	fab0 f580 	clz	r5, r0
 800c95e:	096d      	lsrs	r5, r5, #5
 800c960:	f04f 0b01 	mov.w	fp, #1
 800c964:	464a      	mov	r2, r9
 800c966:	4616      	mov	r6, r2
 800c968:	3201      	adds	r2, #1
 800c96a:	7830      	ldrb	r0, [r6, #0]
 800c96c:	f7ff ffb0 	bl	800c8d0 <__hexdig_fun>
 800c970:	2800      	cmp	r0, #0
 800c972:	d1f8      	bne.n	800c966 <__gethex+0x6a>
 800c974:	498d      	ldr	r1, [pc, #564]	@ (800cbac <__gethex+0x2b0>)
 800c976:	2201      	movs	r2, #1
 800c978:	4630      	mov	r0, r6
 800c97a:	f7fc fc79 	bl	8009270 <strncmp>
 800c97e:	2800      	cmp	r0, #0
 800c980:	d13f      	bne.n	800ca02 <__gethex+0x106>
 800c982:	b944      	cbnz	r4, 800c996 <__gethex+0x9a>
 800c984:	1c74      	adds	r4, r6, #1
 800c986:	4622      	mov	r2, r4
 800c988:	4616      	mov	r6, r2
 800c98a:	3201      	adds	r2, #1
 800c98c:	7830      	ldrb	r0, [r6, #0]
 800c98e:	f7ff ff9f 	bl	800c8d0 <__hexdig_fun>
 800c992:	2800      	cmp	r0, #0
 800c994:	d1f8      	bne.n	800c988 <__gethex+0x8c>
 800c996:	1ba4      	subs	r4, r4, r6
 800c998:	00a7      	lsls	r7, r4, #2
 800c99a:	7833      	ldrb	r3, [r6, #0]
 800c99c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c9a0:	2b50      	cmp	r3, #80	@ 0x50
 800c9a2:	d13e      	bne.n	800ca22 <__gethex+0x126>
 800c9a4:	7873      	ldrb	r3, [r6, #1]
 800c9a6:	2b2b      	cmp	r3, #43	@ 0x2b
 800c9a8:	d033      	beq.n	800ca12 <__gethex+0x116>
 800c9aa:	2b2d      	cmp	r3, #45	@ 0x2d
 800c9ac:	d034      	beq.n	800ca18 <__gethex+0x11c>
 800c9ae:	1c71      	adds	r1, r6, #1
 800c9b0:	2400      	movs	r4, #0
 800c9b2:	7808      	ldrb	r0, [r1, #0]
 800c9b4:	f7ff ff8c 	bl	800c8d0 <__hexdig_fun>
 800c9b8:	1e43      	subs	r3, r0, #1
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	2b18      	cmp	r3, #24
 800c9be:	d830      	bhi.n	800ca22 <__gethex+0x126>
 800c9c0:	f1a0 0210 	sub.w	r2, r0, #16
 800c9c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c9c8:	f7ff ff82 	bl	800c8d0 <__hexdig_fun>
 800c9cc:	f100 3cff 	add.w	ip, r0, #4294967295
 800c9d0:	fa5f fc8c 	uxtb.w	ip, ip
 800c9d4:	f1bc 0f18 	cmp.w	ip, #24
 800c9d8:	f04f 030a 	mov.w	r3, #10
 800c9dc:	d91e      	bls.n	800ca1c <__gethex+0x120>
 800c9de:	b104      	cbz	r4, 800c9e2 <__gethex+0xe6>
 800c9e0:	4252      	negs	r2, r2
 800c9e2:	4417      	add	r7, r2
 800c9e4:	f8ca 1000 	str.w	r1, [sl]
 800c9e8:	b1ed      	cbz	r5, 800ca26 <__gethex+0x12a>
 800c9ea:	f1bb 0f00 	cmp.w	fp, #0
 800c9ee:	bf0c      	ite	eq
 800c9f0:	2506      	moveq	r5, #6
 800c9f2:	2500      	movne	r5, #0
 800c9f4:	4628      	mov	r0, r5
 800c9f6:	b005      	add	sp, #20
 800c9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9fc:	2500      	movs	r5, #0
 800c9fe:	462c      	mov	r4, r5
 800ca00:	e7b0      	b.n	800c964 <__gethex+0x68>
 800ca02:	2c00      	cmp	r4, #0
 800ca04:	d1c7      	bne.n	800c996 <__gethex+0x9a>
 800ca06:	4627      	mov	r7, r4
 800ca08:	e7c7      	b.n	800c99a <__gethex+0x9e>
 800ca0a:	464e      	mov	r6, r9
 800ca0c:	462f      	mov	r7, r5
 800ca0e:	2501      	movs	r5, #1
 800ca10:	e7c3      	b.n	800c99a <__gethex+0x9e>
 800ca12:	2400      	movs	r4, #0
 800ca14:	1cb1      	adds	r1, r6, #2
 800ca16:	e7cc      	b.n	800c9b2 <__gethex+0xb6>
 800ca18:	2401      	movs	r4, #1
 800ca1a:	e7fb      	b.n	800ca14 <__gethex+0x118>
 800ca1c:	fb03 0002 	mla	r0, r3, r2, r0
 800ca20:	e7ce      	b.n	800c9c0 <__gethex+0xc4>
 800ca22:	4631      	mov	r1, r6
 800ca24:	e7de      	b.n	800c9e4 <__gethex+0xe8>
 800ca26:	eba6 0309 	sub.w	r3, r6, r9
 800ca2a:	3b01      	subs	r3, #1
 800ca2c:	4629      	mov	r1, r5
 800ca2e:	2b07      	cmp	r3, #7
 800ca30:	dc0a      	bgt.n	800ca48 <__gethex+0x14c>
 800ca32:	9801      	ldr	r0, [sp, #4]
 800ca34:	f7fd fc08 	bl	800a248 <_Balloc>
 800ca38:	4604      	mov	r4, r0
 800ca3a:	b940      	cbnz	r0, 800ca4e <__gethex+0x152>
 800ca3c:	4b5c      	ldr	r3, [pc, #368]	@ (800cbb0 <__gethex+0x2b4>)
 800ca3e:	4602      	mov	r2, r0
 800ca40:	21e4      	movs	r1, #228	@ 0xe4
 800ca42:	485c      	ldr	r0, [pc, #368]	@ (800cbb4 <__gethex+0x2b8>)
 800ca44:	f7ff fec0 	bl	800c7c8 <__assert_func>
 800ca48:	3101      	adds	r1, #1
 800ca4a:	105b      	asrs	r3, r3, #1
 800ca4c:	e7ef      	b.n	800ca2e <__gethex+0x132>
 800ca4e:	f100 0a14 	add.w	sl, r0, #20
 800ca52:	2300      	movs	r3, #0
 800ca54:	4655      	mov	r5, sl
 800ca56:	469b      	mov	fp, r3
 800ca58:	45b1      	cmp	r9, r6
 800ca5a:	d337      	bcc.n	800cacc <__gethex+0x1d0>
 800ca5c:	f845 bb04 	str.w	fp, [r5], #4
 800ca60:	eba5 050a 	sub.w	r5, r5, sl
 800ca64:	10ad      	asrs	r5, r5, #2
 800ca66:	6125      	str	r5, [r4, #16]
 800ca68:	4658      	mov	r0, fp
 800ca6a:	f7fd fcdf 	bl	800a42c <__hi0bits>
 800ca6e:	016d      	lsls	r5, r5, #5
 800ca70:	f8d8 6000 	ldr.w	r6, [r8]
 800ca74:	1a2d      	subs	r5, r5, r0
 800ca76:	42b5      	cmp	r5, r6
 800ca78:	dd54      	ble.n	800cb24 <__gethex+0x228>
 800ca7a:	1bad      	subs	r5, r5, r6
 800ca7c:	4629      	mov	r1, r5
 800ca7e:	4620      	mov	r0, r4
 800ca80:	f7fe f873 	bl	800ab6a <__any_on>
 800ca84:	4681      	mov	r9, r0
 800ca86:	b178      	cbz	r0, 800caa8 <__gethex+0x1ac>
 800ca88:	1e6b      	subs	r3, r5, #1
 800ca8a:	1159      	asrs	r1, r3, #5
 800ca8c:	f003 021f 	and.w	r2, r3, #31
 800ca90:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ca94:	f04f 0901 	mov.w	r9, #1
 800ca98:	fa09 f202 	lsl.w	r2, r9, r2
 800ca9c:	420a      	tst	r2, r1
 800ca9e:	d003      	beq.n	800caa8 <__gethex+0x1ac>
 800caa0:	454b      	cmp	r3, r9
 800caa2:	dc36      	bgt.n	800cb12 <__gethex+0x216>
 800caa4:	f04f 0902 	mov.w	r9, #2
 800caa8:	4629      	mov	r1, r5
 800caaa:	4620      	mov	r0, r4
 800caac:	f7ff febe 	bl	800c82c <rshift>
 800cab0:	442f      	add	r7, r5
 800cab2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cab6:	42bb      	cmp	r3, r7
 800cab8:	da42      	bge.n	800cb40 <__gethex+0x244>
 800caba:	9801      	ldr	r0, [sp, #4]
 800cabc:	4621      	mov	r1, r4
 800cabe:	f7fd fc03 	bl	800a2c8 <_Bfree>
 800cac2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cac4:	2300      	movs	r3, #0
 800cac6:	6013      	str	r3, [r2, #0]
 800cac8:	25a3      	movs	r5, #163	@ 0xa3
 800caca:	e793      	b.n	800c9f4 <__gethex+0xf8>
 800cacc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800cad0:	2a2e      	cmp	r2, #46	@ 0x2e
 800cad2:	d012      	beq.n	800cafa <__gethex+0x1fe>
 800cad4:	2b20      	cmp	r3, #32
 800cad6:	d104      	bne.n	800cae2 <__gethex+0x1e6>
 800cad8:	f845 bb04 	str.w	fp, [r5], #4
 800cadc:	f04f 0b00 	mov.w	fp, #0
 800cae0:	465b      	mov	r3, fp
 800cae2:	7830      	ldrb	r0, [r6, #0]
 800cae4:	9303      	str	r3, [sp, #12]
 800cae6:	f7ff fef3 	bl	800c8d0 <__hexdig_fun>
 800caea:	9b03      	ldr	r3, [sp, #12]
 800caec:	f000 000f 	and.w	r0, r0, #15
 800caf0:	4098      	lsls	r0, r3
 800caf2:	ea4b 0b00 	orr.w	fp, fp, r0
 800caf6:	3304      	adds	r3, #4
 800caf8:	e7ae      	b.n	800ca58 <__gethex+0x15c>
 800cafa:	45b1      	cmp	r9, r6
 800cafc:	d8ea      	bhi.n	800cad4 <__gethex+0x1d8>
 800cafe:	492b      	ldr	r1, [pc, #172]	@ (800cbac <__gethex+0x2b0>)
 800cb00:	9303      	str	r3, [sp, #12]
 800cb02:	2201      	movs	r2, #1
 800cb04:	4630      	mov	r0, r6
 800cb06:	f7fc fbb3 	bl	8009270 <strncmp>
 800cb0a:	9b03      	ldr	r3, [sp, #12]
 800cb0c:	2800      	cmp	r0, #0
 800cb0e:	d1e1      	bne.n	800cad4 <__gethex+0x1d8>
 800cb10:	e7a2      	b.n	800ca58 <__gethex+0x15c>
 800cb12:	1ea9      	subs	r1, r5, #2
 800cb14:	4620      	mov	r0, r4
 800cb16:	f7fe f828 	bl	800ab6a <__any_on>
 800cb1a:	2800      	cmp	r0, #0
 800cb1c:	d0c2      	beq.n	800caa4 <__gethex+0x1a8>
 800cb1e:	f04f 0903 	mov.w	r9, #3
 800cb22:	e7c1      	b.n	800caa8 <__gethex+0x1ac>
 800cb24:	da09      	bge.n	800cb3a <__gethex+0x23e>
 800cb26:	1b75      	subs	r5, r6, r5
 800cb28:	4621      	mov	r1, r4
 800cb2a:	9801      	ldr	r0, [sp, #4]
 800cb2c:	462a      	mov	r2, r5
 800cb2e:	f7fd fde3 	bl	800a6f8 <__lshift>
 800cb32:	1b7f      	subs	r7, r7, r5
 800cb34:	4604      	mov	r4, r0
 800cb36:	f100 0a14 	add.w	sl, r0, #20
 800cb3a:	f04f 0900 	mov.w	r9, #0
 800cb3e:	e7b8      	b.n	800cab2 <__gethex+0x1b6>
 800cb40:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cb44:	42bd      	cmp	r5, r7
 800cb46:	dd6f      	ble.n	800cc28 <__gethex+0x32c>
 800cb48:	1bed      	subs	r5, r5, r7
 800cb4a:	42ae      	cmp	r6, r5
 800cb4c:	dc34      	bgt.n	800cbb8 <__gethex+0x2bc>
 800cb4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cb52:	2b02      	cmp	r3, #2
 800cb54:	d022      	beq.n	800cb9c <__gethex+0x2a0>
 800cb56:	2b03      	cmp	r3, #3
 800cb58:	d024      	beq.n	800cba4 <__gethex+0x2a8>
 800cb5a:	2b01      	cmp	r3, #1
 800cb5c:	d115      	bne.n	800cb8a <__gethex+0x28e>
 800cb5e:	42ae      	cmp	r6, r5
 800cb60:	d113      	bne.n	800cb8a <__gethex+0x28e>
 800cb62:	2e01      	cmp	r6, #1
 800cb64:	d10b      	bne.n	800cb7e <__gethex+0x282>
 800cb66:	9a02      	ldr	r2, [sp, #8]
 800cb68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cb6c:	6013      	str	r3, [r2, #0]
 800cb6e:	2301      	movs	r3, #1
 800cb70:	6123      	str	r3, [r4, #16]
 800cb72:	f8ca 3000 	str.w	r3, [sl]
 800cb76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb78:	2562      	movs	r5, #98	@ 0x62
 800cb7a:	601c      	str	r4, [r3, #0]
 800cb7c:	e73a      	b.n	800c9f4 <__gethex+0xf8>
 800cb7e:	1e71      	subs	r1, r6, #1
 800cb80:	4620      	mov	r0, r4
 800cb82:	f7fd fff2 	bl	800ab6a <__any_on>
 800cb86:	2800      	cmp	r0, #0
 800cb88:	d1ed      	bne.n	800cb66 <__gethex+0x26a>
 800cb8a:	9801      	ldr	r0, [sp, #4]
 800cb8c:	4621      	mov	r1, r4
 800cb8e:	f7fd fb9b 	bl	800a2c8 <_Bfree>
 800cb92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb94:	2300      	movs	r3, #0
 800cb96:	6013      	str	r3, [r2, #0]
 800cb98:	2550      	movs	r5, #80	@ 0x50
 800cb9a:	e72b      	b.n	800c9f4 <__gethex+0xf8>
 800cb9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d1f3      	bne.n	800cb8a <__gethex+0x28e>
 800cba2:	e7e0      	b.n	800cb66 <__gethex+0x26a>
 800cba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d1dd      	bne.n	800cb66 <__gethex+0x26a>
 800cbaa:	e7ee      	b.n	800cb8a <__gethex+0x28e>
 800cbac:	0800d408 	.word	0x0800d408
 800cbb0:	0800d29f 	.word	0x0800d29f
 800cbb4:	0800d5d1 	.word	0x0800d5d1
 800cbb8:	1e6f      	subs	r7, r5, #1
 800cbba:	f1b9 0f00 	cmp.w	r9, #0
 800cbbe:	d130      	bne.n	800cc22 <__gethex+0x326>
 800cbc0:	b127      	cbz	r7, 800cbcc <__gethex+0x2d0>
 800cbc2:	4639      	mov	r1, r7
 800cbc4:	4620      	mov	r0, r4
 800cbc6:	f7fd ffd0 	bl	800ab6a <__any_on>
 800cbca:	4681      	mov	r9, r0
 800cbcc:	117a      	asrs	r2, r7, #5
 800cbce:	2301      	movs	r3, #1
 800cbd0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cbd4:	f007 071f 	and.w	r7, r7, #31
 800cbd8:	40bb      	lsls	r3, r7
 800cbda:	4213      	tst	r3, r2
 800cbdc:	4629      	mov	r1, r5
 800cbde:	4620      	mov	r0, r4
 800cbe0:	bf18      	it	ne
 800cbe2:	f049 0902 	orrne.w	r9, r9, #2
 800cbe6:	f7ff fe21 	bl	800c82c <rshift>
 800cbea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cbee:	1b76      	subs	r6, r6, r5
 800cbf0:	2502      	movs	r5, #2
 800cbf2:	f1b9 0f00 	cmp.w	r9, #0
 800cbf6:	d047      	beq.n	800cc88 <__gethex+0x38c>
 800cbf8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cbfc:	2b02      	cmp	r3, #2
 800cbfe:	d015      	beq.n	800cc2c <__gethex+0x330>
 800cc00:	2b03      	cmp	r3, #3
 800cc02:	d017      	beq.n	800cc34 <__gethex+0x338>
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d109      	bne.n	800cc1c <__gethex+0x320>
 800cc08:	f019 0f02 	tst.w	r9, #2
 800cc0c:	d006      	beq.n	800cc1c <__gethex+0x320>
 800cc0e:	f8da 3000 	ldr.w	r3, [sl]
 800cc12:	ea49 0903 	orr.w	r9, r9, r3
 800cc16:	f019 0f01 	tst.w	r9, #1
 800cc1a:	d10e      	bne.n	800cc3a <__gethex+0x33e>
 800cc1c:	f045 0510 	orr.w	r5, r5, #16
 800cc20:	e032      	b.n	800cc88 <__gethex+0x38c>
 800cc22:	f04f 0901 	mov.w	r9, #1
 800cc26:	e7d1      	b.n	800cbcc <__gethex+0x2d0>
 800cc28:	2501      	movs	r5, #1
 800cc2a:	e7e2      	b.n	800cbf2 <__gethex+0x2f6>
 800cc2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc2e:	f1c3 0301 	rsb	r3, r3, #1
 800cc32:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cc34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d0f0      	beq.n	800cc1c <__gethex+0x320>
 800cc3a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cc3e:	f104 0314 	add.w	r3, r4, #20
 800cc42:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cc46:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cc4a:	f04f 0c00 	mov.w	ip, #0
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc54:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cc58:	d01b      	beq.n	800cc92 <__gethex+0x396>
 800cc5a:	3201      	adds	r2, #1
 800cc5c:	6002      	str	r2, [r0, #0]
 800cc5e:	2d02      	cmp	r5, #2
 800cc60:	f104 0314 	add.w	r3, r4, #20
 800cc64:	d13c      	bne.n	800cce0 <__gethex+0x3e4>
 800cc66:	f8d8 2000 	ldr.w	r2, [r8]
 800cc6a:	3a01      	subs	r2, #1
 800cc6c:	42b2      	cmp	r2, r6
 800cc6e:	d109      	bne.n	800cc84 <__gethex+0x388>
 800cc70:	1171      	asrs	r1, r6, #5
 800cc72:	2201      	movs	r2, #1
 800cc74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cc78:	f006 061f 	and.w	r6, r6, #31
 800cc7c:	fa02 f606 	lsl.w	r6, r2, r6
 800cc80:	421e      	tst	r6, r3
 800cc82:	d13a      	bne.n	800ccfa <__gethex+0x3fe>
 800cc84:	f045 0520 	orr.w	r5, r5, #32
 800cc88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc8a:	601c      	str	r4, [r3, #0]
 800cc8c:	9b02      	ldr	r3, [sp, #8]
 800cc8e:	601f      	str	r7, [r3, #0]
 800cc90:	e6b0      	b.n	800c9f4 <__gethex+0xf8>
 800cc92:	4299      	cmp	r1, r3
 800cc94:	f843 cc04 	str.w	ip, [r3, #-4]
 800cc98:	d8d9      	bhi.n	800cc4e <__gethex+0x352>
 800cc9a:	68a3      	ldr	r3, [r4, #8]
 800cc9c:	459b      	cmp	fp, r3
 800cc9e:	db17      	blt.n	800ccd0 <__gethex+0x3d4>
 800cca0:	6861      	ldr	r1, [r4, #4]
 800cca2:	9801      	ldr	r0, [sp, #4]
 800cca4:	3101      	adds	r1, #1
 800cca6:	f7fd facf 	bl	800a248 <_Balloc>
 800ccaa:	4681      	mov	r9, r0
 800ccac:	b918      	cbnz	r0, 800ccb6 <__gethex+0x3ba>
 800ccae:	4b1a      	ldr	r3, [pc, #104]	@ (800cd18 <__gethex+0x41c>)
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	2184      	movs	r1, #132	@ 0x84
 800ccb4:	e6c5      	b.n	800ca42 <__gethex+0x146>
 800ccb6:	6922      	ldr	r2, [r4, #16]
 800ccb8:	3202      	adds	r2, #2
 800ccba:	f104 010c 	add.w	r1, r4, #12
 800ccbe:	0092      	lsls	r2, r2, #2
 800ccc0:	300c      	adds	r0, #12
 800ccc2:	f7fc fb5e 	bl	8009382 <memcpy>
 800ccc6:	4621      	mov	r1, r4
 800ccc8:	9801      	ldr	r0, [sp, #4]
 800ccca:	f7fd fafd 	bl	800a2c8 <_Bfree>
 800ccce:	464c      	mov	r4, r9
 800ccd0:	6923      	ldr	r3, [r4, #16]
 800ccd2:	1c5a      	adds	r2, r3, #1
 800ccd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ccd8:	6122      	str	r2, [r4, #16]
 800ccda:	2201      	movs	r2, #1
 800ccdc:	615a      	str	r2, [r3, #20]
 800ccde:	e7be      	b.n	800cc5e <__gethex+0x362>
 800cce0:	6922      	ldr	r2, [r4, #16]
 800cce2:	455a      	cmp	r2, fp
 800cce4:	dd0b      	ble.n	800ccfe <__gethex+0x402>
 800cce6:	2101      	movs	r1, #1
 800cce8:	4620      	mov	r0, r4
 800ccea:	f7ff fd9f 	bl	800c82c <rshift>
 800ccee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ccf2:	3701      	adds	r7, #1
 800ccf4:	42bb      	cmp	r3, r7
 800ccf6:	f6ff aee0 	blt.w	800caba <__gethex+0x1be>
 800ccfa:	2501      	movs	r5, #1
 800ccfc:	e7c2      	b.n	800cc84 <__gethex+0x388>
 800ccfe:	f016 061f 	ands.w	r6, r6, #31
 800cd02:	d0fa      	beq.n	800ccfa <__gethex+0x3fe>
 800cd04:	4453      	add	r3, sl
 800cd06:	f1c6 0620 	rsb	r6, r6, #32
 800cd0a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cd0e:	f7fd fb8d 	bl	800a42c <__hi0bits>
 800cd12:	42b0      	cmp	r0, r6
 800cd14:	dbe7      	blt.n	800cce6 <__gethex+0x3ea>
 800cd16:	e7f0      	b.n	800ccfa <__gethex+0x3fe>
 800cd18:	0800d29f 	.word	0x0800d29f

0800cd1c <L_shift>:
 800cd1c:	f1c2 0208 	rsb	r2, r2, #8
 800cd20:	0092      	lsls	r2, r2, #2
 800cd22:	b570      	push	{r4, r5, r6, lr}
 800cd24:	f1c2 0620 	rsb	r6, r2, #32
 800cd28:	6843      	ldr	r3, [r0, #4]
 800cd2a:	6804      	ldr	r4, [r0, #0]
 800cd2c:	fa03 f506 	lsl.w	r5, r3, r6
 800cd30:	432c      	orrs	r4, r5
 800cd32:	40d3      	lsrs	r3, r2
 800cd34:	6004      	str	r4, [r0, #0]
 800cd36:	f840 3f04 	str.w	r3, [r0, #4]!
 800cd3a:	4288      	cmp	r0, r1
 800cd3c:	d3f4      	bcc.n	800cd28 <L_shift+0xc>
 800cd3e:	bd70      	pop	{r4, r5, r6, pc}

0800cd40 <__match>:
 800cd40:	b530      	push	{r4, r5, lr}
 800cd42:	6803      	ldr	r3, [r0, #0]
 800cd44:	3301      	adds	r3, #1
 800cd46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd4a:	b914      	cbnz	r4, 800cd52 <__match+0x12>
 800cd4c:	6003      	str	r3, [r0, #0]
 800cd4e:	2001      	movs	r0, #1
 800cd50:	bd30      	pop	{r4, r5, pc}
 800cd52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd56:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cd5a:	2d19      	cmp	r5, #25
 800cd5c:	bf98      	it	ls
 800cd5e:	3220      	addls	r2, #32
 800cd60:	42a2      	cmp	r2, r4
 800cd62:	d0f0      	beq.n	800cd46 <__match+0x6>
 800cd64:	2000      	movs	r0, #0
 800cd66:	e7f3      	b.n	800cd50 <__match+0x10>

0800cd68 <__hexnan>:
 800cd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd6c:	680b      	ldr	r3, [r1, #0]
 800cd6e:	6801      	ldr	r1, [r0, #0]
 800cd70:	115e      	asrs	r6, r3, #5
 800cd72:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cd76:	f013 031f 	ands.w	r3, r3, #31
 800cd7a:	b087      	sub	sp, #28
 800cd7c:	bf18      	it	ne
 800cd7e:	3604      	addne	r6, #4
 800cd80:	2500      	movs	r5, #0
 800cd82:	1f37      	subs	r7, r6, #4
 800cd84:	4682      	mov	sl, r0
 800cd86:	4690      	mov	r8, r2
 800cd88:	9301      	str	r3, [sp, #4]
 800cd8a:	f846 5c04 	str.w	r5, [r6, #-4]
 800cd8e:	46b9      	mov	r9, r7
 800cd90:	463c      	mov	r4, r7
 800cd92:	9502      	str	r5, [sp, #8]
 800cd94:	46ab      	mov	fp, r5
 800cd96:	784a      	ldrb	r2, [r1, #1]
 800cd98:	1c4b      	adds	r3, r1, #1
 800cd9a:	9303      	str	r3, [sp, #12]
 800cd9c:	b342      	cbz	r2, 800cdf0 <__hexnan+0x88>
 800cd9e:	4610      	mov	r0, r2
 800cda0:	9105      	str	r1, [sp, #20]
 800cda2:	9204      	str	r2, [sp, #16]
 800cda4:	f7ff fd94 	bl	800c8d0 <__hexdig_fun>
 800cda8:	2800      	cmp	r0, #0
 800cdaa:	d151      	bne.n	800ce50 <__hexnan+0xe8>
 800cdac:	9a04      	ldr	r2, [sp, #16]
 800cdae:	9905      	ldr	r1, [sp, #20]
 800cdb0:	2a20      	cmp	r2, #32
 800cdb2:	d818      	bhi.n	800cde6 <__hexnan+0x7e>
 800cdb4:	9b02      	ldr	r3, [sp, #8]
 800cdb6:	459b      	cmp	fp, r3
 800cdb8:	dd13      	ble.n	800cde2 <__hexnan+0x7a>
 800cdba:	454c      	cmp	r4, r9
 800cdbc:	d206      	bcs.n	800cdcc <__hexnan+0x64>
 800cdbe:	2d07      	cmp	r5, #7
 800cdc0:	dc04      	bgt.n	800cdcc <__hexnan+0x64>
 800cdc2:	462a      	mov	r2, r5
 800cdc4:	4649      	mov	r1, r9
 800cdc6:	4620      	mov	r0, r4
 800cdc8:	f7ff ffa8 	bl	800cd1c <L_shift>
 800cdcc:	4544      	cmp	r4, r8
 800cdce:	d952      	bls.n	800ce76 <__hexnan+0x10e>
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	f1a4 0904 	sub.w	r9, r4, #4
 800cdd6:	f844 3c04 	str.w	r3, [r4, #-4]
 800cdda:	f8cd b008 	str.w	fp, [sp, #8]
 800cdde:	464c      	mov	r4, r9
 800cde0:	461d      	mov	r5, r3
 800cde2:	9903      	ldr	r1, [sp, #12]
 800cde4:	e7d7      	b.n	800cd96 <__hexnan+0x2e>
 800cde6:	2a29      	cmp	r2, #41	@ 0x29
 800cde8:	d157      	bne.n	800ce9a <__hexnan+0x132>
 800cdea:	3102      	adds	r1, #2
 800cdec:	f8ca 1000 	str.w	r1, [sl]
 800cdf0:	f1bb 0f00 	cmp.w	fp, #0
 800cdf4:	d051      	beq.n	800ce9a <__hexnan+0x132>
 800cdf6:	454c      	cmp	r4, r9
 800cdf8:	d206      	bcs.n	800ce08 <__hexnan+0xa0>
 800cdfa:	2d07      	cmp	r5, #7
 800cdfc:	dc04      	bgt.n	800ce08 <__hexnan+0xa0>
 800cdfe:	462a      	mov	r2, r5
 800ce00:	4649      	mov	r1, r9
 800ce02:	4620      	mov	r0, r4
 800ce04:	f7ff ff8a 	bl	800cd1c <L_shift>
 800ce08:	4544      	cmp	r4, r8
 800ce0a:	d936      	bls.n	800ce7a <__hexnan+0x112>
 800ce0c:	f1a8 0204 	sub.w	r2, r8, #4
 800ce10:	4623      	mov	r3, r4
 800ce12:	f853 1b04 	ldr.w	r1, [r3], #4
 800ce16:	f842 1f04 	str.w	r1, [r2, #4]!
 800ce1a:	429f      	cmp	r7, r3
 800ce1c:	d2f9      	bcs.n	800ce12 <__hexnan+0xaa>
 800ce1e:	1b3b      	subs	r3, r7, r4
 800ce20:	f023 0303 	bic.w	r3, r3, #3
 800ce24:	3304      	adds	r3, #4
 800ce26:	3401      	adds	r4, #1
 800ce28:	3e03      	subs	r6, #3
 800ce2a:	42b4      	cmp	r4, r6
 800ce2c:	bf88      	it	hi
 800ce2e:	2304      	movhi	r3, #4
 800ce30:	4443      	add	r3, r8
 800ce32:	2200      	movs	r2, #0
 800ce34:	f843 2b04 	str.w	r2, [r3], #4
 800ce38:	429f      	cmp	r7, r3
 800ce3a:	d2fb      	bcs.n	800ce34 <__hexnan+0xcc>
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	b91b      	cbnz	r3, 800ce48 <__hexnan+0xe0>
 800ce40:	4547      	cmp	r7, r8
 800ce42:	d128      	bne.n	800ce96 <__hexnan+0x12e>
 800ce44:	2301      	movs	r3, #1
 800ce46:	603b      	str	r3, [r7, #0]
 800ce48:	2005      	movs	r0, #5
 800ce4a:	b007      	add	sp, #28
 800ce4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce50:	3501      	adds	r5, #1
 800ce52:	2d08      	cmp	r5, #8
 800ce54:	f10b 0b01 	add.w	fp, fp, #1
 800ce58:	dd06      	ble.n	800ce68 <__hexnan+0x100>
 800ce5a:	4544      	cmp	r4, r8
 800ce5c:	d9c1      	bls.n	800cde2 <__hexnan+0x7a>
 800ce5e:	2300      	movs	r3, #0
 800ce60:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce64:	2501      	movs	r5, #1
 800ce66:	3c04      	subs	r4, #4
 800ce68:	6822      	ldr	r2, [r4, #0]
 800ce6a:	f000 000f 	and.w	r0, r0, #15
 800ce6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ce72:	6020      	str	r0, [r4, #0]
 800ce74:	e7b5      	b.n	800cde2 <__hexnan+0x7a>
 800ce76:	2508      	movs	r5, #8
 800ce78:	e7b3      	b.n	800cde2 <__hexnan+0x7a>
 800ce7a:	9b01      	ldr	r3, [sp, #4]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d0dd      	beq.n	800ce3c <__hexnan+0xd4>
 800ce80:	f1c3 0320 	rsb	r3, r3, #32
 800ce84:	f04f 32ff 	mov.w	r2, #4294967295
 800ce88:	40da      	lsrs	r2, r3
 800ce8a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ce8e:	4013      	ands	r3, r2
 800ce90:	f846 3c04 	str.w	r3, [r6, #-4]
 800ce94:	e7d2      	b.n	800ce3c <__hexnan+0xd4>
 800ce96:	3f04      	subs	r7, #4
 800ce98:	e7d0      	b.n	800ce3c <__hexnan+0xd4>
 800ce9a:	2004      	movs	r0, #4
 800ce9c:	e7d5      	b.n	800ce4a <__hexnan+0xe2>

0800ce9e <__ascii_mbtowc>:
 800ce9e:	b082      	sub	sp, #8
 800cea0:	b901      	cbnz	r1, 800cea4 <__ascii_mbtowc+0x6>
 800cea2:	a901      	add	r1, sp, #4
 800cea4:	b142      	cbz	r2, 800ceb8 <__ascii_mbtowc+0x1a>
 800cea6:	b14b      	cbz	r3, 800cebc <__ascii_mbtowc+0x1e>
 800cea8:	7813      	ldrb	r3, [r2, #0]
 800ceaa:	600b      	str	r3, [r1, #0]
 800ceac:	7812      	ldrb	r2, [r2, #0]
 800ceae:	1e10      	subs	r0, r2, #0
 800ceb0:	bf18      	it	ne
 800ceb2:	2001      	movne	r0, #1
 800ceb4:	b002      	add	sp, #8
 800ceb6:	4770      	bx	lr
 800ceb8:	4610      	mov	r0, r2
 800ceba:	e7fb      	b.n	800ceb4 <__ascii_mbtowc+0x16>
 800cebc:	f06f 0001 	mvn.w	r0, #1
 800cec0:	e7f8      	b.n	800ceb4 <__ascii_mbtowc+0x16>

0800cec2 <_realloc_r>:
 800cec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cec6:	4680      	mov	r8, r0
 800cec8:	4615      	mov	r5, r2
 800ceca:	460c      	mov	r4, r1
 800cecc:	b921      	cbnz	r1, 800ced8 <_realloc_r+0x16>
 800cece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ced2:	4611      	mov	r1, r2
 800ced4:	f7fd b92c 	b.w	800a130 <_malloc_r>
 800ced8:	b92a      	cbnz	r2, 800cee6 <_realloc_r+0x24>
 800ceda:	f7fd f8b5 	bl	800a048 <_free_r>
 800cede:	2400      	movs	r4, #0
 800cee0:	4620      	mov	r0, r4
 800cee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cee6:	f000 f8b2 	bl	800d04e <_malloc_usable_size_r>
 800ceea:	4285      	cmp	r5, r0
 800ceec:	4606      	mov	r6, r0
 800ceee:	d802      	bhi.n	800cef6 <_realloc_r+0x34>
 800cef0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cef4:	d8f4      	bhi.n	800cee0 <_realloc_r+0x1e>
 800cef6:	4629      	mov	r1, r5
 800cef8:	4640      	mov	r0, r8
 800cefa:	f7fd f919 	bl	800a130 <_malloc_r>
 800cefe:	4607      	mov	r7, r0
 800cf00:	2800      	cmp	r0, #0
 800cf02:	d0ec      	beq.n	800cede <_realloc_r+0x1c>
 800cf04:	42b5      	cmp	r5, r6
 800cf06:	462a      	mov	r2, r5
 800cf08:	4621      	mov	r1, r4
 800cf0a:	bf28      	it	cs
 800cf0c:	4632      	movcs	r2, r6
 800cf0e:	f7fc fa38 	bl	8009382 <memcpy>
 800cf12:	4621      	mov	r1, r4
 800cf14:	4640      	mov	r0, r8
 800cf16:	f7fd f897 	bl	800a048 <_free_r>
 800cf1a:	463c      	mov	r4, r7
 800cf1c:	e7e0      	b.n	800cee0 <_realloc_r+0x1e>
	...

0800cf20 <_strtoul_l.constprop.0>:
 800cf20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf24:	4e34      	ldr	r6, [pc, #208]	@ (800cff8 <_strtoul_l.constprop.0+0xd8>)
 800cf26:	4686      	mov	lr, r0
 800cf28:	460d      	mov	r5, r1
 800cf2a:	4628      	mov	r0, r5
 800cf2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf30:	5d37      	ldrb	r7, [r6, r4]
 800cf32:	f017 0708 	ands.w	r7, r7, #8
 800cf36:	d1f8      	bne.n	800cf2a <_strtoul_l.constprop.0+0xa>
 800cf38:	2c2d      	cmp	r4, #45	@ 0x2d
 800cf3a:	d12f      	bne.n	800cf9c <_strtoul_l.constprop.0+0x7c>
 800cf3c:	782c      	ldrb	r4, [r5, #0]
 800cf3e:	2701      	movs	r7, #1
 800cf40:	1c85      	adds	r5, r0, #2
 800cf42:	f033 0010 	bics.w	r0, r3, #16
 800cf46:	d109      	bne.n	800cf5c <_strtoul_l.constprop.0+0x3c>
 800cf48:	2c30      	cmp	r4, #48	@ 0x30
 800cf4a:	d12c      	bne.n	800cfa6 <_strtoul_l.constprop.0+0x86>
 800cf4c:	7828      	ldrb	r0, [r5, #0]
 800cf4e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800cf52:	2858      	cmp	r0, #88	@ 0x58
 800cf54:	d127      	bne.n	800cfa6 <_strtoul_l.constprop.0+0x86>
 800cf56:	786c      	ldrb	r4, [r5, #1]
 800cf58:	2310      	movs	r3, #16
 800cf5a:	3502      	adds	r5, #2
 800cf5c:	f04f 38ff 	mov.w	r8, #4294967295
 800cf60:	2600      	movs	r6, #0
 800cf62:	fbb8 f8f3 	udiv	r8, r8, r3
 800cf66:	fb03 f908 	mul.w	r9, r3, r8
 800cf6a:	ea6f 0909 	mvn.w	r9, r9
 800cf6e:	4630      	mov	r0, r6
 800cf70:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800cf74:	f1bc 0f09 	cmp.w	ip, #9
 800cf78:	d81c      	bhi.n	800cfb4 <_strtoul_l.constprop.0+0x94>
 800cf7a:	4664      	mov	r4, ip
 800cf7c:	42a3      	cmp	r3, r4
 800cf7e:	dd2a      	ble.n	800cfd6 <_strtoul_l.constprop.0+0xb6>
 800cf80:	f1b6 3fff 	cmp.w	r6, #4294967295
 800cf84:	d007      	beq.n	800cf96 <_strtoul_l.constprop.0+0x76>
 800cf86:	4580      	cmp	r8, r0
 800cf88:	d322      	bcc.n	800cfd0 <_strtoul_l.constprop.0+0xb0>
 800cf8a:	d101      	bne.n	800cf90 <_strtoul_l.constprop.0+0x70>
 800cf8c:	45a1      	cmp	r9, r4
 800cf8e:	db1f      	blt.n	800cfd0 <_strtoul_l.constprop.0+0xb0>
 800cf90:	fb00 4003 	mla	r0, r0, r3, r4
 800cf94:	2601      	movs	r6, #1
 800cf96:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf9a:	e7e9      	b.n	800cf70 <_strtoul_l.constprop.0+0x50>
 800cf9c:	2c2b      	cmp	r4, #43	@ 0x2b
 800cf9e:	bf04      	itt	eq
 800cfa0:	782c      	ldrbeq	r4, [r5, #0]
 800cfa2:	1c85      	addeq	r5, r0, #2
 800cfa4:	e7cd      	b.n	800cf42 <_strtoul_l.constprop.0+0x22>
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d1d8      	bne.n	800cf5c <_strtoul_l.constprop.0+0x3c>
 800cfaa:	2c30      	cmp	r4, #48	@ 0x30
 800cfac:	bf0c      	ite	eq
 800cfae:	2308      	moveq	r3, #8
 800cfb0:	230a      	movne	r3, #10
 800cfb2:	e7d3      	b.n	800cf5c <_strtoul_l.constprop.0+0x3c>
 800cfb4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800cfb8:	f1bc 0f19 	cmp.w	ip, #25
 800cfbc:	d801      	bhi.n	800cfc2 <_strtoul_l.constprop.0+0xa2>
 800cfbe:	3c37      	subs	r4, #55	@ 0x37
 800cfc0:	e7dc      	b.n	800cf7c <_strtoul_l.constprop.0+0x5c>
 800cfc2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800cfc6:	f1bc 0f19 	cmp.w	ip, #25
 800cfca:	d804      	bhi.n	800cfd6 <_strtoul_l.constprop.0+0xb6>
 800cfcc:	3c57      	subs	r4, #87	@ 0x57
 800cfce:	e7d5      	b.n	800cf7c <_strtoul_l.constprop.0+0x5c>
 800cfd0:	f04f 36ff 	mov.w	r6, #4294967295
 800cfd4:	e7df      	b.n	800cf96 <_strtoul_l.constprop.0+0x76>
 800cfd6:	1c73      	adds	r3, r6, #1
 800cfd8:	d106      	bne.n	800cfe8 <_strtoul_l.constprop.0+0xc8>
 800cfda:	2322      	movs	r3, #34	@ 0x22
 800cfdc:	f8ce 3000 	str.w	r3, [lr]
 800cfe0:	4630      	mov	r0, r6
 800cfe2:	b932      	cbnz	r2, 800cff2 <_strtoul_l.constprop.0+0xd2>
 800cfe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfe8:	b107      	cbz	r7, 800cfec <_strtoul_l.constprop.0+0xcc>
 800cfea:	4240      	negs	r0, r0
 800cfec:	2a00      	cmp	r2, #0
 800cfee:	d0f9      	beq.n	800cfe4 <_strtoul_l.constprop.0+0xc4>
 800cff0:	b106      	cbz	r6, 800cff4 <_strtoul_l.constprop.0+0xd4>
 800cff2:	1e69      	subs	r1, r5, #1
 800cff4:	6011      	str	r1, [r2, #0]
 800cff6:	e7f5      	b.n	800cfe4 <_strtoul_l.constprop.0+0xc4>
 800cff8:	0800d461 	.word	0x0800d461

0800cffc <_strtoul_r>:
 800cffc:	f7ff bf90 	b.w	800cf20 <_strtoul_l.constprop.0>

0800d000 <__ascii_wctomb>:
 800d000:	4603      	mov	r3, r0
 800d002:	4608      	mov	r0, r1
 800d004:	b141      	cbz	r1, 800d018 <__ascii_wctomb+0x18>
 800d006:	2aff      	cmp	r2, #255	@ 0xff
 800d008:	d904      	bls.n	800d014 <__ascii_wctomb+0x14>
 800d00a:	228a      	movs	r2, #138	@ 0x8a
 800d00c:	601a      	str	r2, [r3, #0]
 800d00e:	f04f 30ff 	mov.w	r0, #4294967295
 800d012:	4770      	bx	lr
 800d014:	700a      	strb	r2, [r1, #0]
 800d016:	2001      	movs	r0, #1
 800d018:	4770      	bx	lr
	...

0800d01c <fiprintf>:
 800d01c:	b40e      	push	{r1, r2, r3}
 800d01e:	b503      	push	{r0, r1, lr}
 800d020:	4601      	mov	r1, r0
 800d022:	ab03      	add	r3, sp, #12
 800d024:	4805      	ldr	r0, [pc, #20]	@ (800d03c <fiprintf+0x20>)
 800d026:	f853 2b04 	ldr.w	r2, [r3], #4
 800d02a:	6800      	ldr	r0, [r0, #0]
 800d02c:	9301      	str	r3, [sp, #4]
 800d02e:	f7fe ff8f 	bl	800bf50 <_vfiprintf_r>
 800d032:	b002      	add	sp, #8
 800d034:	f85d eb04 	ldr.w	lr, [sp], #4
 800d038:	b003      	add	sp, #12
 800d03a:	4770      	bx	lr
 800d03c:	20000018 	.word	0x20000018

0800d040 <abort>:
 800d040:	b508      	push	{r3, lr}
 800d042:	2006      	movs	r0, #6
 800d044:	f000 f834 	bl	800d0b0 <raise>
 800d048:	2001      	movs	r0, #1
 800d04a:	f7f5 f9c7 	bl	80023dc <_exit>

0800d04e <_malloc_usable_size_r>:
 800d04e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d052:	1f18      	subs	r0, r3, #4
 800d054:	2b00      	cmp	r3, #0
 800d056:	bfbc      	itt	lt
 800d058:	580b      	ldrlt	r3, [r1, r0]
 800d05a:	18c0      	addlt	r0, r0, r3
 800d05c:	4770      	bx	lr

0800d05e <_raise_r>:
 800d05e:	291f      	cmp	r1, #31
 800d060:	b538      	push	{r3, r4, r5, lr}
 800d062:	4605      	mov	r5, r0
 800d064:	460c      	mov	r4, r1
 800d066:	d904      	bls.n	800d072 <_raise_r+0x14>
 800d068:	2316      	movs	r3, #22
 800d06a:	6003      	str	r3, [r0, #0]
 800d06c:	f04f 30ff 	mov.w	r0, #4294967295
 800d070:	bd38      	pop	{r3, r4, r5, pc}
 800d072:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d074:	b112      	cbz	r2, 800d07c <_raise_r+0x1e>
 800d076:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d07a:	b94b      	cbnz	r3, 800d090 <_raise_r+0x32>
 800d07c:	4628      	mov	r0, r5
 800d07e:	f000 f831 	bl	800d0e4 <_getpid_r>
 800d082:	4622      	mov	r2, r4
 800d084:	4601      	mov	r1, r0
 800d086:	4628      	mov	r0, r5
 800d088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d08c:	f000 b818 	b.w	800d0c0 <_kill_r>
 800d090:	2b01      	cmp	r3, #1
 800d092:	d00a      	beq.n	800d0aa <_raise_r+0x4c>
 800d094:	1c59      	adds	r1, r3, #1
 800d096:	d103      	bne.n	800d0a0 <_raise_r+0x42>
 800d098:	2316      	movs	r3, #22
 800d09a:	6003      	str	r3, [r0, #0]
 800d09c:	2001      	movs	r0, #1
 800d09e:	e7e7      	b.n	800d070 <_raise_r+0x12>
 800d0a0:	2100      	movs	r1, #0
 800d0a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	4798      	blx	r3
 800d0aa:	2000      	movs	r0, #0
 800d0ac:	e7e0      	b.n	800d070 <_raise_r+0x12>
	...

0800d0b0 <raise>:
 800d0b0:	4b02      	ldr	r3, [pc, #8]	@ (800d0bc <raise+0xc>)
 800d0b2:	4601      	mov	r1, r0
 800d0b4:	6818      	ldr	r0, [r3, #0]
 800d0b6:	f7ff bfd2 	b.w	800d05e <_raise_r>
 800d0ba:	bf00      	nop
 800d0bc:	20000018 	.word	0x20000018

0800d0c0 <_kill_r>:
 800d0c0:	b538      	push	{r3, r4, r5, lr}
 800d0c2:	4d07      	ldr	r5, [pc, #28]	@ (800d0e0 <_kill_r+0x20>)
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	4604      	mov	r4, r0
 800d0c8:	4608      	mov	r0, r1
 800d0ca:	4611      	mov	r1, r2
 800d0cc:	602b      	str	r3, [r5, #0]
 800d0ce:	f7f5 f975 	bl	80023bc <_kill>
 800d0d2:	1c43      	adds	r3, r0, #1
 800d0d4:	d102      	bne.n	800d0dc <_kill_r+0x1c>
 800d0d6:	682b      	ldr	r3, [r5, #0]
 800d0d8:	b103      	cbz	r3, 800d0dc <_kill_r+0x1c>
 800d0da:	6023      	str	r3, [r4, #0]
 800d0dc:	bd38      	pop	{r3, r4, r5, pc}
 800d0de:	bf00      	nop
 800d0e0:	20000830 	.word	0x20000830

0800d0e4 <_getpid_r>:
 800d0e4:	f7f5 b962 	b.w	80023ac <_getpid>

0800d0e8 <_init>:
 800d0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ea:	bf00      	nop
 800d0ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0ee:	bc08      	pop	{r3}
 800d0f0:	469e      	mov	lr, r3
 800d0f2:	4770      	bx	lr

0800d0f4 <_fini>:
 800d0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0f6:	bf00      	nop
 800d0f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0fa:	bc08      	pop	{r3}
 800d0fc:	469e      	mov	lr, r3
 800d0fe:	4770      	bx	lr
