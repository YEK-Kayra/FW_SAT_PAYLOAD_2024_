
gorevyuku1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001376c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a90  08013910  08013910  00014910  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080143a0  080143a0  000161f8  2**0
                  CONTENTS
  4 .ARM          00000008  080143a0  080143a0  000153a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080143a8  080143a8  000161f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080143a8  080143a8  000153a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080143ac  080143ac  000153ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  080143b0  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c28  200001f8  080145a8  000161f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002e20  080145a8  00016e20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000161f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021d59  00000000  00000000  00016228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050a2  00000000  00000000  00037f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c70  00000000  00000000  0003d028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015f9  00000000  00000000  0003ec98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f034  00000000  00000000  00040291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028866  00000000  00000000  0005f2c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9114  00000000  00000000  00087b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130c3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008fe8  00000000  00000000  00130c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00139c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080138f4 	.word	0x080138f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	080138f4 	.word	0x080138f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <ARAS_CheckSystem>:




void ARAS_CheckSystem()
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0

	CheckAras.CARR_LandSpeed;  //lora ile gelen veriden alınır
	CheckAras.PAYL_LandSpeed  = MS5611_VertSpeed;
 8000ff8:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <ARAS_CheckSystem+0x50>)
 8000ffa:	edd3 7a00 	vldr	s15, [r3]
 8000ffe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001002:	ee17 3a90 	vmov	r3, s15
 8001006:	b21a      	sxth	r2, r3
 8001008:	4b0f      	ldr	r3, [pc, #60]	@ (8001048 <ARAS_CheckSystem+0x54>)
 800100a:	805a      	strh	r2, [r3, #2]
	CheckAras.CARR_Press;	   //lora ile gelen veriden alınır
	CheckAras.PAYL_GPS_Lat 	  = GPS_Latitude ;
 800100c:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <ARAS_CheckSystem+0x58>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0d      	ldr	r2, [pc, #52]	@ (8001048 <ARAS_CheckSystem+0x54>)
 8001012:	6093      	str	r3, [r2, #8]
	CheckAras.PAYL_GPS_Long   = GPS_Longitude;
 8001014:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <ARAS_CheckSystem+0x5c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0b      	ldr	r2, [pc, #44]	@ (8001048 <ARAS_CheckSystem+0x54>)
 800101a:	60d3      	str	r3, [r2, #12]
	CheckAras.PAYL_GPS_Alt    = GPS_Altitude;
 800101c:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <ARAS_CheckSystem+0x60>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a09      	ldr	r2, [pc, #36]	@ (8001048 <ARAS_CheckSystem+0x54>)
 8001022:	6113      	str	r3, [r2, #16]
	CheckAras.Seperation_State; // Ayrılma yapılırsa high(1) yapılamadıysa low(0) olcak


	SubSys_ArasCntrl_Sat_LandingSpeed();       //Uydu iniş hızı 12-14m/s; değilse = 1xxxx , ise = 0xxxx
 8001024:	f000 f81c 	bl	8001060 <SubSys_ArasCntrl_Sat_LandingSpeed>

	SubSys_ArasCntrl_Payload_LandingSpeed();	  //Görev yükü iniş hızı 6-8m/s; değilse = x1xxx , ise = x0xxx
 8001028:	f000 f846 	bl	80010b8 <SubSys_ArasCntrl_Payload_LandingSpeed>

	SubSys_ArasCntrl_Carr_Pressure();		  //Taşıyıcıdan basınç verisi; alınamıyorsa = xx1xx , alınıyorsa = xx0xx
 800102c:	f000 f866 	bl	80010fc <SubSys_ArasCntrl_Carr_Pressure>

	SubSys_ArasCntrl_Payload_LocationData();   //Görev yükü konum verisi; alınamıyorsa = xxx1x , alınıyorsa = xxx0x
 8001030:	f000 f886 	bl	8001140 <SubSys_ArasCntrl_Payload_LocationData>

	SubSys_ArasCntrl_Sat_SeperationCheck();		  // Ayrılma; gerçekleşmediyse = xxxx1 , gerçekleştiyse = xxxx0
 8001034:	f000 f8b4 	bl	80011a0 <SubSys_ArasCntrl_Sat_SeperationCheck>

	/* !Son değerini alan "toplam" değişkeni fonksiyonun geri dönüş değeri olarak yazılır*/
	SatelliteErrorCode = total_err;
 8001038:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <ARAS_CheckSystem+0x64>)
 800103a:	781a      	ldrb	r2, [r3, #0]
 800103c:	4b07      	ldr	r3, [pc, #28]	@ (800105c <ARAS_CheckSystem+0x68>)
 800103e:	701a      	strb	r2, [r3, #0]
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20002a2c 	.word	0x20002a2c
 8001048:	20000214 	.word	0x20000214
 800104c:	20002a48 	.word	0x20002a48
 8001050:	20002a44 	.word	0x20002a44
 8001054:	20002a40 	.word	0x20002a40
 8001058:	2000022c 	.word	0x2000022c
 800105c:	20002c81 	.word	0x20002c81

08001060 <SubSys_ArasCntrl_Sat_LandingSpeed>:

/*!
 * @brief Model Satellite (Payload & Carrier) Descent Speed Status
 */
void SubSys_ArasCntrl_Sat_LandingSpeed(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0


	if( ((12 <= CheckAras.CARR_LandSpeed) && (CheckAras.CARR_LandSpeed <= 14))
 8001064:	4b12      	ldr	r3, [pc, #72]	@ (80010b0 <SubSys_ArasCntrl_Sat_LandingSpeed+0x50>)
 8001066:	f9b3 3000 	ldrsh.w	r3, [r3]
 800106a:	2b0b      	cmp	r3, #11
 800106c:	dd04      	ble.n	8001078 <SubSys_ArasCntrl_Sat_LandingSpeed+0x18>
 800106e:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <SubSys_ArasCntrl_Sat_LandingSpeed+0x50>)
 8001070:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001074:	2b0e      	cmp	r3, #14
 8001076:	dd09      	ble.n	800108c <SubSys_ArasCntrl_Sat_LandingSpeed+0x2c>
										  ||
	    ((12 <= CheckAras.PAYL_LandSpeed) && (CheckAras.PAYL_LandSpeed <= 14)) )
 8001078:	4b0d      	ldr	r3, [pc, #52]	@ (80010b0 <SubSys_ArasCntrl_Sat_LandingSpeed+0x50>)
 800107a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
										  ||
 800107e:	2b0b      	cmp	r3, #11
 8001080:	dd09      	ble.n	8001096 <SubSys_ArasCntrl_Sat_LandingSpeed+0x36>
	    ((12 <= CheckAras.PAYL_LandSpeed) && (CheckAras.PAYL_LandSpeed <= 14)) )
 8001082:	4b0b      	ldr	r3, [pc, #44]	@ (80010b0 <SubSys_ArasCntrl_Sat_LandingSpeed+0x50>)
 8001084:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001088:	2b0e      	cmp	r3, #14
 800108a:	dc04      	bgt.n	8001096 <SubSys_ArasCntrl_Sat_LandingSpeed+0x36>
	{
		total_err += 0;
 800108c:	4b09      	ldr	r3, [pc, #36]	@ (80010b4 <SubSys_ArasCntrl_Sat_LandingSpeed+0x54>)
 800108e:	781a      	ldrb	r2, [r3, #0]
 8001090:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <SubSys_ArasCntrl_Sat_LandingSpeed+0x54>)
 8001092:	701a      	strb	r2, [r3, #0]
 8001094:	e006      	b.n	80010a4 <SubSys_ArasCntrl_Sat_LandingSpeed+0x44>
	}else{
		total_err += 16;
 8001096:	4b07      	ldr	r3, [pc, #28]	@ (80010b4 <SubSys_ArasCntrl_Sat_LandingSpeed+0x54>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	3310      	adds	r3, #16
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <SubSys_ArasCntrl_Sat_LandingSpeed+0x54>)
 80010a0:	701a      	strb	r2, [r3, #0]
	}

}
 80010a2:	bf00      	nop
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000214 	.word	0x20000214
 80010b4:	2000022c 	.word	0x2000022c

080010b8 <SubSys_ArasCntrl_Payload_LandingSpeed>:

/*!
 * @brief Payload Descent Speed Status
 */
void SubSys_ArasCntrl_Payload_LandingSpeed(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
	if( ((6 <= CheckAras.PAYL_LandSpeed) && (CheckAras.PAYL_LandSpeed <= 8)) )
 80010bc:	4b0d      	ldr	r3, [pc, #52]	@ (80010f4 <SubSys_ArasCntrl_Payload_LandingSpeed+0x3c>)
 80010be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010c2:	2b05      	cmp	r3, #5
 80010c4:	dd09      	ble.n	80010da <SubSys_ArasCntrl_Payload_LandingSpeed+0x22>
 80010c6:	4b0b      	ldr	r3, [pc, #44]	@ (80010f4 <SubSys_ArasCntrl_Payload_LandingSpeed+0x3c>)
 80010c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010cc:	2b08      	cmp	r3, #8
 80010ce:	dc04      	bgt.n	80010da <SubSys_ArasCntrl_Payload_LandingSpeed+0x22>
	{
		total_err += 0;
 80010d0:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <SubSys_ArasCntrl_Payload_LandingSpeed+0x40>)
 80010d2:	781a      	ldrb	r2, [r3, #0]
 80010d4:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <SubSys_ArasCntrl_Payload_LandingSpeed+0x40>)
 80010d6:	701a      	strb	r2, [r3, #0]
 80010d8:	e006      	b.n	80010e8 <SubSys_ArasCntrl_Payload_LandingSpeed+0x30>
	}else{
		total_err += 8;
 80010da:	4b07      	ldr	r3, [pc, #28]	@ (80010f8 <SubSys_ArasCntrl_Payload_LandingSpeed+0x40>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	3308      	adds	r3, #8
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b05      	ldr	r3, [pc, #20]	@ (80010f8 <SubSys_ArasCntrl_Payload_LandingSpeed+0x40>)
 80010e4:	701a      	strb	r2, [r3, #0]
	}
}
 80010e6:	bf00      	nop
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	20000214 	.word	0x20000214
 80010f8:	2000022c 	.word	0x2000022c

080010fc <SubSys_ArasCntrl_Carr_Pressure>:

/*!
 * @brief Carrier Open Air Pressure Status
 */
void SubSys_ArasCntrl_Carr_Pressure(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0

	if( (((CheckAras.CARR_Press)!=0) && ((CheckAras.CARR_Press)<=101325)) )
 8001100:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <SubSys_ArasCntrl_Carr_Pressure+0x38>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d009      	beq.n	800111c <SubSys_ArasCntrl_Carr_Pressure+0x20>
 8001108:	4b0a      	ldr	r3, [pc, #40]	@ (8001134 <SubSys_ArasCntrl_Carr_Pressure+0x38>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	4a0a      	ldr	r2, [pc, #40]	@ (8001138 <SubSys_ArasCntrl_Carr_Pressure+0x3c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d804      	bhi.n	800111c <SubSys_ArasCntrl_Carr_Pressure+0x20>
	{
		total_err += 0;
 8001112:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <SubSys_ArasCntrl_Carr_Pressure+0x40>)
 8001114:	781a      	ldrb	r2, [r3, #0]
 8001116:	4b09      	ldr	r3, [pc, #36]	@ (800113c <SubSys_ArasCntrl_Carr_Pressure+0x40>)
 8001118:	701a      	strb	r2, [r3, #0]
 800111a:	e006      	b.n	800112a <SubSys_ArasCntrl_Carr_Pressure+0x2e>
	}else{
		total_err += 4;
 800111c:	4b07      	ldr	r3, [pc, #28]	@ (800113c <SubSys_ArasCntrl_Carr_Pressure+0x40>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	3304      	adds	r3, #4
 8001122:	b2da      	uxtb	r2, r3
 8001124:	4b05      	ldr	r3, [pc, #20]	@ (800113c <SubSys_ArasCntrl_Carr_Pressure+0x40>)
 8001126:	701a      	strb	r2, [r3, #0]
	}
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	20000214 	.word	0x20000214
 8001138:	00018bcd 	.word	0x00018bcd
 800113c:	2000022c 	.word	0x2000022c

08001140 <SubSys_ArasCntrl_Payload_LocationData>:

/*!
 * @brief Payload Location Status
 */
void SubSys_ArasCntrl_Payload_LocationData(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
	if( ((CheckAras.PAYL_GPS_Lat)!=0) && ((CheckAras.PAYL_GPS_Long)!=0) && ((CheckAras.PAYL_GPS_Alt)!=0) )
 8001144:	4b14      	ldr	r3, [pc, #80]	@ (8001198 <SubSys_ArasCntrl_Payload_LocationData+0x58>)
 8001146:	edd3 7a02 	vldr	s15, [r3, #8]
 800114a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800114e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001152:	d014      	beq.n	800117e <SubSys_ArasCntrl_Payload_LocationData+0x3e>
 8001154:	4b10      	ldr	r3, [pc, #64]	@ (8001198 <SubSys_ArasCntrl_Payload_LocationData+0x58>)
 8001156:	edd3 7a03 	vldr	s15, [r3, #12]
 800115a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800115e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001162:	d00c      	beq.n	800117e <SubSys_ArasCntrl_Payload_LocationData+0x3e>
 8001164:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <SubSys_ArasCntrl_Payload_LocationData+0x58>)
 8001166:	edd3 7a04 	vldr	s15, [r3, #16]
 800116a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800116e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001172:	d004      	beq.n	800117e <SubSys_ArasCntrl_Payload_LocationData+0x3e>
	{
		total_err += 0;
 8001174:	4b09      	ldr	r3, [pc, #36]	@ (800119c <SubSys_ArasCntrl_Payload_LocationData+0x5c>)
 8001176:	781a      	ldrb	r2, [r3, #0]
 8001178:	4b08      	ldr	r3, [pc, #32]	@ (800119c <SubSys_ArasCntrl_Payload_LocationData+0x5c>)
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	e006      	b.n	800118c <SubSys_ArasCntrl_Payload_LocationData+0x4c>
	}else{
		total_err += 2;
 800117e:	4b07      	ldr	r3, [pc, #28]	@ (800119c <SubSys_ArasCntrl_Payload_LocationData+0x5c>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	3302      	adds	r3, #2
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4b05      	ldr	r3, [pc, #20]	@ (800119c <SubSys_ArasCntrl_Payload_LocationData+0x5c>)
 8001188:	701a      	strb	r2, [r3, #0]
	}

}
 800118a:	bf00      	nop
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000214 	.word	0x20000214
 800119c:	2000022c 	.word	0x2000022c

080011a0 <SubSys_ArasCntrl_Sat_SeperationCheck>:

/*!
 * @brief Model Satellite Separation Status
 */
void SubSys_ArasCntrl_Sat_SeperationCheck(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
	if(CheckAras.Seperation_State == 1)
 80011a4:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <SubSys_ArasCntrl_Sat_SeperationCheck+0x2c>)
 80011a6:	7d1b      	ldrb	r3, [r3, #20]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d104      	bne.n	80011b6 <SubSys_ArasCntrl_Sat_SeperationCheck+0x16>
	{
		total_err += 0;
 80011ac:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <SubSys_ArasCntrl_Sat_SeperationCheck+0x30>)
 80011ae:	781a      	ldrb	r2, [r3, #0]
 80011b0:	4b07      	ldr	r3, [pc, #28]	@ (80011d0 <SubSys_ArasCntrl_Sat_SeperationCheck+0x30>)
 80011b2:	701a      	strb	r2, [r3, #0]
	}else{
		total_err += 1;
	}

}
 80011b4:	e005      	b.n	80011c2 <SubSys_ArasCntrl_Sat_SeperationCheck+0x22>
		total_err += 1;
 80011b6:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <SubSys_ArasCntrl_Sat_SeperationCheck+0x30>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	3301      	adds	r3, #1
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4b04      	ldr	r3, [pc, #16]	@ (80011d0 <SubSys_ArasCntrl_Sat_SeperationCheck+0x30>)
 80011c0:	701a      	strb	r2, [r3, #0]
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	20000214 	.word	0x20000214
 80011d0:	2000022c 	.word	0x2000022c

080011d4 <SubSys_Actuator_Servo_Init>:
 * @param *dev,  Connect struct parameter htim_X, tim_channel_in as given below
 *
 * @retval none
 */
extern TIM_HandleTypeDef htim1;
void SubSys_Actuator_Servo_Init(Actuator_Servo_HandleTypeDef *dev){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Start(dev->htim_X);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f007 fb51 	bl	8008888 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(dev->htim_X,dev->tim_channel_in);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	4619      	mov	r1, r3
 80011f0:	4610      	mov	r0, r2
 80011f2:	f007 fbf3 	bl	80089dc <HAL_TIM_PWM_Start>

}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <SubSys_Actuator_Servo_MoveTo>:
 * 		   The correct duty cycle range is between 2% and 12%.
 *
 * @param *dev, Connect struct parameter htim_X, tim_channel_in as given below
 * @param Angle The desired angle for the motor to turn.
 */
void SubSys_Actuator_Servo_MoveTo(Actuator_Servo_HandleTypeDef *dev, uint16_t Angle){
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	807b      	strh	r3, [r7, #2]

	if(dev == &dev_Servo_Separation){
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a17      	ldr	r2, [pc, #92]	@ (800126c <SubSys_Actuator_Servo_MoveTo+0x6c>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d110      	bne.n	8001236 <SubSys_Actuator_Servo_MoveTo+0x36>
		dev->htim_X->Instance->CCR2 = (((Angle*100)/180)+20);
 8001214:	887b      	ldrh	r3, [r7, #2]
 8001216:	2264      	movs	r2, #100	@ 0x64
 8001218:	fb02 f303 	mul.w	r3, r2, r3
 800121c:	4a14      	ldr	r2, [pc, #80]	@ (8001270 <SubSys_Actuator_Servo_MoveTo+0x70>)
 800121e:	fb82 1203 	smull	r1, r2, r2, r3
 8001222:	441a      	add	r2, r3
 8001224:	11d2      	asrs	r2, r2, #7
 8001226:	17db      	asrs	r3, r3, #31
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	f103 0214 	add.w	r2, r3, #20
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	639a      	str	r2, [r3, #56]	@ 0x38
	}

	if(dev == &dev_Servo_ColorFilter){
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a0e      	ldr	r2, [pc, #56]	@ (8001274 <SubSys_Actuator_Servo_MoveTo+0x74>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d110      	bne.n	8001260 <SubSys_Actuator_Servo_MoveTo+0x60>
		dev->htim_X->Instance->CCR1 = (((Angle*100)/180)+20);
 800123e:	887b      	ldrh	r3, [r7, #2]
 8001240:	2264      	movs	r2, #100	@ 0x64
 8001242:	fb02 f303 	mul.w	r3, r2, r3
 8001246:	4a0a      	ldr	r2, [pc, #40]	@ (8001270 <SubSys_Actuator_Servo_MoveTo+0x70>)
 8001248:	fb82 1203 	smull	r1, r2, r2, r3
 800124c:	441a      	add	r2, r3
 800124e:	11d2      	asrs	r2, r2, #7
 8001250:	17db      	asrs	r3, r3, #31
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	f103 0214 	add.w	r2, r3, #20
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	635a      	str	r2, [r3, #52]	@ 0x34
	}

}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	20002c6c 	.word	0x20002c6c
 8001270:	b60b60b7 	.word	0xb60b60b7
 8001274:	20002c74 	.word	0x20002c74

08001278 <PassiveBuzz_ON>:
 * @brief : Buzzer is set when the function is called(DutyCycle is configurated by the CCRx REG)
 * @param :  htim_X        : it's set by &htimX. X is the number of timers
 * @param :  PWM_Channel_X :  it's set by TIM_CHANNEL_X . X is the number of timer's channels
 * @retval: None
 */
void PassiveBuzz_ON(TIM_HandleTypeDef *htim_X, uint32_t PWM_Channel_X){
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]

	switch (PWM_Channel_X){
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	2b0c      	cmp	r3, #12
 8001286:	d875      	bhi.n	8001374 <PassiveBuzz_ON+0xfc>
 8001288:	a201      	add	r2, pc, #4	@ (adr r2, 8001290 <PassiveBuzz_ON+0x18>)
 800128a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128e:	bf00      	nop
 8001290:	080012c5 	.word	0x080012c5
 8001294:	08001375 	.word	0x08001375
 8001298:	08001375 	.word	0x08001375
 800129c:	08001375 	.word	0x08001375
 80012a0:	080012f1 	.word	0x080012f1
 80012a4:	08001375 	.word	0x08001375
 80012a8:	08001375 	.word	0x08001375
 80012ac:	08001375 	.word	0x08001375
 80012b0:	0800131d 	.word	0x0800131d
 80012b4:	08001375 	.word	0x08001375
 80012b8:	08001375 	.word	0x08001375
 80012bc:	08001375 	.word	0x08001375
 80012c0:	08001349 	.word	0x08001349

	case TIM_CHANNEL_1 :
		htim_X->Instance->CCR1 =  0.5 * (htim_X->Instance->ARR);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f922 	bl	8000514 <__aeabi_ui2d>
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	4b29      	ldr	r3, [pc, #164]	@ (800137c <PassiveBuzz_ON+0x104>)
 80012d6:	f7ff f997 	bl	8000608 <__aeabi_dmul>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681c      	ldr	r4, [r3, #0]
 80012e6:	f7ff fc67 	bl	8000bb8 <__aeabi_d2uiz>
 80012ea:	4603      	mov	r3, r0
 80012ec:	6363      	str	r3, [r4, #52]	@ 0x34
	break;
 80012ee:	e041      	b.n	8001374 <PassiveBuzz_ON+0xfc>

	case TIM_CHANNEL_2 :
		htim_X->Instance->CCR2 =  0.5 * (htim_X->Instance->ARR);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f90c 	bl	8000514 <__aeabi_ui2d>
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	4b1e      	ldr	r3, [pc, #120]	@ (800137c <PassiveBuzz_ON+0x104>)
 8001302:	f7ff f981 	bl	8000608 <__aeabi_dmul>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4610      	mov	r0, r2
 800130c:	4619      	mov	r1, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681c      	ldr	r4, [r3, #0]
 8001312:	f7ff fc51 	bl	8000bb8 <__aeabi_d2uiz>
 8001316:	4603      	mov	r3, r0
 8001318:	63a3      	str	r3, [r4, #56]	@ 0x38
	break;
 800131a:	e02b      	b.n	8001374 <PassiveBuzz_ON+0xfc>

	case TIM_CHANNEL_3 :
		htim_X->Instance->CCR3 =  0.5 * (htim_X->Instance->ARR);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f8f6 	bl	8000514 <__aeabi_ui2d>
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	4b13      	ldr	r3, [pc, #76]	@ (800137c <PassiveBuzz_ON+0x104>)
 800132e:	f7ff f96b 	bl	8000608 <__aeabi_dmul>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681c      	ldr	r4, [r3, #0]
 800133e:	f7ff fc3b 	bl	8000bb8 <__aeabi_d2uiz>
 8001342:	4603      	mov	r3, r0
 8001344:	63e3      	str	r3, [r4, #60]	@ 0x3c
	break;
 8001346:	e015      	b.n	8001374 <PassiveBuzz_ON+0xfc>

	case TIM_CHANNEL_4 :
		htim_X->Instance->CCR4 =  0.5 * (htim_X->Instance->ARR);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f8e0 	bl	8000514 <__aeabi_ui2d>
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	4b08      	ldr	r3, [pc, #32]	@ (800137c <PassiveBuzz_ON+0x104>)
 800135a:	f7ff f955 	bl	8000608 <__aeabi_dmul>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4610      	mov	r0, r2
 8001364:	4619      	mov	r1, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681c      	ldr	r4, [r3, #0]
 800136a:	f7ff fc25 	bl	8000bb8 <__aeabi_d2uiz>
 800136e:	4603      	mov	r3, r0
 8001370:	6423      	str	r3, [r4, #64]	@ 0x40
	break;
 8001372:	bf00      	nop
	}


}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	bd90      	pop	{r4, r7, pc}
 800137c:	3fe00000 	.word	0x3fe00000

08001380 <SubSys_ColorFilterMechanism_TurnTo>:
#include "SubSys_ColorFilterControl_Driver.h"


void SubSys_ColorFilterMechanism_TurnTo(SubSys_ColorFilter_MagazineColor Color){
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]

	switch(Color)
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	2b03      	cmp	r3, #3
 800138e:	d81f      	bhi.n	80013d0 <SubSys_ColorFilterMechanism_TurnTo+0x50>
 8001390:	a201      	add	r2, pc, #4	@ (adr r2, 8001398 <SubSys_ColorFilterMechanism_TurnTo+0x18>)
 8001392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001396:	bf00      	nop
 8001398:	080013a9 	.word	0x080013a9
 800139c:	080013b3 	.word	0x080013b3
 80013a0:	080013bd 	.word	0x080013bd
 80013a4:	080013c7 	.word	0x080013c7
	{

		case Filter_None :
			SubSys_Actuator_Servo_MoveTo(&dev_Servo_ColorFilter, 0);
 80013a8:	2100      	movs	r1, #0
 80013aa:	480b      	ldr	r0, [pc, #44]	@ (80013d8 <SubSys_ColorFilterMechanism_TurnTo+0x58>)
 80013ac:	f7ff ff28 	bl	8001200 <SubSys_Actuator_Servo_MoveTo>
			break;
 80013b0:	e00e      	b.n	80013d0 <SubSys_ColorFilterMechanism_TurnTo+0x50>

		case filter_Red :
			SubSys_Actuator_Servo_MoveTo(&dev_Servo_ColorFilter, 60);
 80013b2:	213c      	movs	r1, #60	@ 0x3c
 80013b4:	4808      	ldr	r0, [pc, #32]	@ (80013d8 <SubSys_ColorFilterMechanism_TurnTo+0x58>)
 80013b6:	f7ff ff23 	bl	8001200 <SubSys_Actuator_Servo_MoveTo>
			break;
 80013ba:	e009      	b.n	80013d0 <SubSys_ColorFilterMechanism_TurnTo+0x50>

		case filter_Green :
			SubSys_Actuator_Servo_MoveTo(&dev_Servo_ColorFilter, 120);
 80013bc:	2178      	movs	r1, #120	@ 0x78
 80013be:	4806      	ldr	r0, [pc, #24]	@ (80013d8 <SubSys_ColorFilterMechanism_TurnTo+0x58>)
 80013c0:	f7ff ff1e 	bl	8001200 <SubSys_Actuator_Servo_MoveTo>
			break;
 80013c4:	e004      	b.n	80013d0 <SubSys_ColorFilterMechanism_TurnTo+0x50>

		case filter_Blue :
			SubSys_Actuator_Servo_MoveTo(&dev_Servo_ColorFilter, 180);
 80013c6:	21b4      	movs	r1, #180	@ 0xb4
 80013c8:	4803      	ldr	r0, [pc, #12]	@ (80013d8 <SubSys_ColorFilterMechanism_TurnTo+0x58>)
 80013ca:	f7ff ff19 	bl	8001200 <SubSys_Actuator_Servo_MoveTo>
			break;
 80013ce:	bf00      	nop

	}

}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20002c74 	.word	0x20002c74

080013dc <SubSys_SatelliteMission_Continue>:

#include "SubSys_Payload_FlightStatus.h"


void SubSys_SatelliteMission_Continue(){
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0


	SubSys_Payload_MissionRetryLoop();
 80013e0:	f000 f8a4 	bl	800152c <SubSys_Payload_MissionRetryLoop>

	/*! Model Satellite is on the ground*/
	if( ((-2 <= MS5611_VertSpeed) && (MS5611_VertSpeed <= 4)) && (SatelliteStatus == ReadyForLaunch) )
 80013e4:	4b4a      	ldr	r3, [pc, #296]	@ (8001510 <SubSys_SatelliteMission_Continue+0x134>)
 80013e6:	edd3 7a00 	vldr	s15, [r3]
 80013ea:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80013ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f6:	db0f      	blt.n	8001418 <SubSys_SatelliteMission_Continue+0x3c>
 80013f8:	4b45      	ldr	r3, [pc, #276]	@ (8001510 <SubSys_SatelliteMission_Continue+0x134>)
 80013fa:	edd3 7a00 	vldr	s15, [r3]
 80013fe:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001402:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140a:	d805      	bhi.n	8001418 <SubSys_SatelliteMission_Continue+0x3c>
 800140c:	4b41      	ldr	r3, [pc, #260]	@ (8001514 <SubSys_SatelliteMission_Continue+0x138>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d101      	bne.n	8001418 <SubSys_SatelliteMission_Continue+0x3c>
	{
		__NOP();
 8001414:	bf00      	nop
					PassiveBuzz_ON(&htim3, TIM_CHANNEL_1);		/*! The payload of the satellite has made contact with the ground */
				}

	     }

}
 8001416:	e078      	b.n	800150a <SubSys_SatelliteMission_Continue+0x12e>
		SatelliteStatus = Ascent;
 8001418:	4b3e      	ldr	r3, [pc, #248]	@ (8001514 <SubSys_SatelliteMission_Continue+0x138>)
 800141a:	2201      	movs	r2, #1
 800141c:	701a      	strb	r2, [r3, #0]
				if( ((0 <= MS5611_VertSpeed) && (MS5611_VertSpeed <= 3))  && (SatelliteStatus == Ascent) )	//TODO: Euler angles will be added
 800141e:	4b3c      	ldr	r3, [pc, #240]	@ (8001510 <SubSys_SatelliteMission_Continue+0x134>)
 8001420:	edd3 7a00 	vldr	s15, [r3]
 8001424:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142c:	db10      	blt.n	8001450 <SubSys_SatelliteMission_Continue+0x74>
 800142e:	4b38      	ldr	r3, [pc, #224]	@ (8001510 <SubSys_SatelliteMission_Continue+0x134>)
 8001430:	edd3 7a00 	vldr	s15, [r3]
 8001434:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001438:	eef4 7ac7 	vcmpe.f32	s15, s14
 800143c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001440:	d806      	bhi.n	8001450 <SubSys_SatelliteMission_Continue+0x74>
 8001442:	4b34      	ldr	r3, [pc, #208]	@ (8001514 <SubSys_SatelliteMission_Continue+0x138>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d102      	bne.n	8001450 <SubSys_SatelliteMission_Continue+0x74>
					SatelliteStatus = ModelSatelliteDescent;
 800144a:	4b32      	ldr	r3, [pc, #200]	@ (8001514 <SubSys_SatelliteMission_Continue+0x138>)
 800144c:	2202      	movs	r2, #2
 800144e:	701a      	strb	r2, [r3, #0]
				if( ((-14 <= MS5611_VertSpeed) && (MS5611_VertSpeed <= -12)) && (SatelliteStatus == ModelSatelliteDescent) )
 8001450:	4b2f      	ldr	r3, [pc, #188]	@ (8001510 <SubSys_SatelliteMission_Continue+0x134>)
 8001452:	edd3 7a00 	vldr	s15, [r3]
 8001456:	eeba 7a0c 	vmov.f32	s14, #172	@ 0xc1600000 -14.0
 800145a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800145e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001462:	db13      	blt.n	800148c <SubSys_SatelliteMission_Continue+0xb0>
 8001464:	4b2a      	ldr	r3, [pc, #168]	@ (8001510 <SubSys_SatelliteMission_Continue+0x134>)
 8001466:	edd3 7a00 	vldr	s15, [r3]
 800146a:	eeba 7a08 	vmov.f32	s14, #168	@ 0xc1400000 -12.0
 800146e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001476:	d809      	bhi.n	800148c <SubSys_SatelliteMission_Continue+0xb0>
 8001478:	4b26      	ldr	r3, [pc, #152]	@ (8001514 <SubSys_SatelliteMission_Continue+0x138>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b02      	cmp	r3, #2
 800147e:	d105      	bne.n	800148c <SubSys_SatelliteMission_Continue+0xb0>
					SatelliteStatus = Separation;
 8001480:	4b24      	ldr	r3, [pc, #144]	@ (8001514 <SubSys_SatelliteMission_Continue+0x138>)
 8001482:	2203      	movs	r2, #3
 8001484:	701a      	strb	r2, [r3, #0]
					AutonomoSeparationStatus = Permission_OK;
 8001486:	4b24      	ldr	r3, [pc, #144]	@ (8001518 <SubSys_SatelliteMission_Continue+0x13c>)
 8001488:	2201      	movs	r2, #1
 800148a:	701a      	strb	r2, [r3, #0]
				if( ((390 <= MS5611_Altitude) && (MS5611_Altitude <= 410)) && (AutonomoSeparationStatus = Permission_OK) && (SatelliteStatus == Separation) )
 800148c:	4b23      	ldr	r3, [pc, #140]	@ (800151c <SubSys_SatelliteMission_Continue+0x140>)
 800148e:	edd3 7a00 	vldr	s15, [r3]
 8001492:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001520 <SubSys_SatelliteMission_Continue+0x144>
 8001496:	eef4 7ac7 	vcmpe.f32	s15, s14
 800149a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149e:	db15      	blt.n	80014cc <SubSys_SatelliteMission_Continue+0xf0>
 80014a0:	4b1e      	ldr	r3, [pc, #120]	@ (800151c <SubSys_SatelliteMission_Continue+0x140>)
 80014a2:	edd3 7a00 	vldr	s15, [r3]
 80014a6:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001524 <SubSys_SatelliteMission_Continue+0x148>
 80014aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b2:	d80b      	bhi.n	80014cc <SubSys_SatelliteMission_Continue+0xf0>
 80014b4:	4b18      	ldr	r3, [pc, #96]	@ (8001518 <SubSys_SatelliteMission_Continue+0x13c>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	701a      	strb	r2, [r3, #0]
 80014ba:	4b16      	ldr	r3, [pc, #88]	@ (8001514 <SubSys_SatelliteMission_Continue+0x138>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d104      	bne.n	80014cc <SubSys_SatelliteMission_Continue+0xf0>
					SatelliteStatus = PayloadDescent;
 80014c2:	4b14      	ldr	r3, [pc, #80]	@ (8001514 <SubSys_SatelliteMission_Continue+0x138>)
 80014c4:	2204      	movs	r2, #4
 80014c6:	701a      	strb	r2, [r3, #0]
					SubSys_SeparationMechanism_UnLock_PayloadFromCarrier();
 80014c8:	f001 fb50 	bl	8002b6c <SubSys_SeparationMechanism_UnLock_PayloadFromCarrier>
				if( ((0 <= MS5611_Altitude) && (MS5611_Altitude <= 2)) && (SatelliteStatus == PayloadDescent) )
 80014cc:	4b13      	ldr	r3, [pc, #76]	@ (800151c <SubSys_SatelliteMission_Continue+0x140>)
 80014ce:	edd3 7a00 	vldr	s15, [r3]
 80014d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014da:	da00      	bge.n	80014de <SubSys_SatelliteMission_Continue+0x102>
}
 80014dc:	e015      	b.n	800150a <SubSys_SatelliteMission_Continue+0x12e>
				if( ((0 <= MS5611_Altitude) && (MS5611_Altitude <= 2)) && (SatelliteStatus == PayloadDescent) )
 80014de:	4b0f      	ldr	r3, [pc, #60]	@ (800151c <SubSys_SatelliteMission_Continue+0x140>)
 80014e0:	edd3 7a00 	vldr	s15, [r3]
 80014e4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80014e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f0:	d900      	bls.n	80014f4 <SubSys_SatelliteMission_Continue+0x118>
}
 80014f2:	e00a      	b.n	800150a <SubSys_SatelliteMission_Continue+0x12e>
				if( ((0 <= MS5611_Altitude) && (MS5611_Altitude <= 2)) && (SatelliteStatus == PayloadDescent) )
 80014f4:	4b07      	ldr	r3, [pc, #28]	@ (8001514 <SubSys_SatelliteMission_Continue+0x138>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b04      	cmp	r3, #4
 80014fa:	d106      	bne.n	800150a <SubSys_SatelliteMission_Continue+0x12e>
					SatelliteStatus = Recovery;
 80014fc:	4b05      	ldr	r3, [pc, #20]	@ (8001514 <SubSys_SatelliteMission_Continue+0x138>)
 80014fe:	2205      	movs	r2, #5
 8001500:	701a      	strb	r2, [r3, #0]
					PassiveBuzz_ON(&htim3, TIM_CHANNEL_1);		/*! The payload of the satellite has made contact with the ground */
 8001502:	2100      	movs	r1, #0
 8001504:	4808      	ldr	r0, [pc, #32]	@ (8001528 <SubSys_SatelliteMission_Continue+0x14c>)
 8001506:	f7ff feb7 	bl	8001278 <PassiveBuzz_ON>
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20002a2c 	.word	0x20002a2c
 8001514:	20002c80 	.word	0x20002c80
 8001518:	20002c82 	.word	0x20002c82
 800151c:	20002a28 	.word	0x20002a28
 8001520:	43c30000 	.word	0x43c30000
 8001524:	43cd0000 	.word	0x43cd0000
 8001528:	200028e0 	.word	0x200028e0

0800152c <SubSys_Payload_MissionRetryLoop>:

#include "SubSys_Payload_PeriodicReattempt.h"

void SubSys_Payload_MissionRetryLoop(){
 800152c:	b598      	push	{r3, r4, r7, lr}
 800152e:	af00      	add	r7, sp, #0

	/*! At the beginning of each loop, the system retrieves the last recorded milliseconds */
	SystemTick = HAL_GetTick();
 8001530:	f002 ff24 	bl	800437c <HAL_GetTick>
 8001534:	4603      	mov	r3, r0
 8001536:	4a14      	ldr	r2, [pc, #80]	@ (8001588 <SubSys_Payload_MissionRetryLoop+0x5c>)
 8001538:	6013      	str	r3, [r2, #0]


	/*! Get current Date & Time */
	DS1307_GetAllDatas();
 800153a:	f000 fe6d 	bl	8002218 <DS1307_GetAllDatas>
	* (P) = Pressure
	* (G) = G force
	* (V) = Vertical Speed
	* (H) = Vertical Height
	**/
	MS5611_Read_ActVal(&MS5611);
 800153e:	4813      	ldr	r0, [pc, #76]	@ (800158c <SubSys_Payload_MissionRetryLoop+0x60>)
 8001540:	f001 fa32 	bl	80029a8 <MS5611_Read_ActVal>

	/*! It reads the battery voltage and stores it */
	ReadBatteryVoltage(&hadc1);
 8001544:	4812      	ldr	r0, [pc, #72]	@ (8001590 <SubSys_Payload_MissionRetryLoop+0x64>)
 8001546:	f000 fa4b 	bl	80019e0 <ReadBatteryVoltage>

	/*! Get ARAS status data and save value into the "SatelliteErrorCode"*/
	ARAS_CheckSystem();
 800154a:	f7ff fd53 	bl	8000ff4 <ARAS_CheckSystem>

	/*! Get the Roll, Pitch, and Yaw values from the IMU sensor variables. */
	IMU_GetEulerVector();
 800154e:	f000 fe1d 	bl	800218c <IMU_GetEulerVector>

	/*! GPS datas will be getting at the background */

	/*! The collected data is stored into variables that created for the SD card */
	SD_FillVariables();
 8001552:	f000 f825 	bl	80015a0 <SD_FillVariables>
	/*! The recorded variables are written to the SD card */
	SD_Write(SdDatasBuf, "SAT_PAY/STM32.TXT");
 8001556:	490f      	ldr	r1, [pc, #60]	@ (8001594 <SubSys_Payload_MissionRetryLoop+0x68>)
 8001558:	480f      	ldr	r0, [pc, #60]	@ (8001598 <SubSys_Payload_MissionRetryLoop+0x6c>)
 800155a:	f000 fa15 	bl	8001988 <SD_Write>

	/*! Transfer all necessary datas from Carrier to Payload of Satellite*/
	SubSys_WirelessCom_Telemetry_Transfer_From_To(Sat_Payload, GroundStation, &dev_WirelessComApp);
 800155e:	4a0f      	ldr	r2, [pc, #60]	@ (800159c <SubSys_Payload_MissionRetryLoop+0x70>)
 8001560:	2103      	movs	r1, #3
 8001562:	2002      	movs	r0, #2
 8001564:	f001 fb68 	bl	8002c38 <SubSys_WirelessCom_Telemetry_Transfer_From_To>


	/*! The system time is retrieved again and the loop waits until the elapsed time reaches 1000 milliseconds*/
	HAL_Delay(abs(1000 - (HAL_GetTick() - SystemTick)));
 8001568:	4b07      	ldr	r3, [pc, #28]	@ (8001588 <SubSys_Payload_MissionRetryLoop+0x5c>)
 800156a:	681c      	ldr	r4, [r3, #0]
 800156c:	f002 ff06 	bl	800437c <HAL_GetTick>
 8001570:	4603      	mov	r3, r0
 8001572:	1ae3      	subs	r3, r4, r3
 8001574:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001578:	2b00      	cmp	r3, #0
 800157a:	bfb8      	it	lt
 800157c:	425b      	neglt	r3, r3
 800157e:	4618      	mov	r0, r3
 8001580:	f002 ff08 	bl	8004394 <HAL_Delay>

}
 8001584:	bf00      	nop
 8001586:	bd98      	pop	{r3, r4, r7, pc}
 8001588:	20002c7c 	.word	0x20002c7c
 800158c:	200029b8 	.word	0x200029b8
 8001590:	200025c8 	.word	0x200025c8
 8001594:	08013910 	.word	0x08013910
 8001598:	200022f0 	.word	0x200022f0
 800159c:	20002a70 	.word	0x20002a70

080015a0 <SD_FillVariables>:

extern uint32_t Race_TeamNo;



void SD_FillVariables(void){
 80015a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015a4:	b0cf      	sub	sp, #316	@ 0x13c
 80015a6:	af2c      	add	r7, sp, #176	@ 0xb0


		SD_Data.PAY_PacketNo 	= NumberOfTelePacket;
 80015a8:	4b99      	ldr	r3, [pc, #612]	@ (8001810 <SD_FillVariables+0x270>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a99      	ldr	r2, [pc, #612]	@ (8001814 <SD_FillVariables+0x274>)
 80015ae:	6013      	str	r3, [r2, #0]
		SD_Data.PAY_SAT_Status  = SatelliteStatus;
 80015b0:	4b99      	ldr	r3, [pc, #612]	@ (8001818 <SD_FillVariables+0x278>)
 80015b2:	781a      	ldrb	r2, [r3, #0]
 80015b4:	4b97      	ldr	r3, [pc, #604]	@ (8001814 <SD_FillVariables+0x274>)
 80015b6:	711a      	strb	r2, [r3, #4]
		SD_Data.PAY_ErrorCode   = SatelliteErrorCode;
 80015b8:	4b98      	ldr	r3, [pc, #608]	@ (800181c <SD_FillVariables+0x27c>)
 80015ba:	781a      	ldrb	r2, [r3, #0]
 80015bc:	4b95      	ldr	r3, [pc, #596]	@ (8001814 <SD_FillVariables+0x274>)
 80015be:	715a      	strb	r2, [r3, #5]

		SD_Data.PAY_DateTime[0] = date;
 80015c0:	4b97      	ldr	r3, [pc, #604]	@ (8001820 <SD_FillVariables+0x280>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b93      	ldr	r3, [pc, #588]	@ (8001814 <SD_FillVariables+0x274>)
 80015c8:	80da      	strh	r2, [r3, #6]
		SD_Data.PAY_DateTime[1] = month;
 80015ca:	4b96      	ldr	r3, [pc, #600]	@ (8001824 <SD_FillVariables+0x284>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b90      	ldr	r3, [pc, #576]	@ (8001814 <SD_FillVariables+0x274>)
 80015d2:	811a      	strh	r2, [r3, #8]
		SD_Data.PAY_DateTime[2] = year;
 80015d4:	4b94      	ldr	r3, [pc, #592]	@ (8001828 <SD_FillVariables+0x288>)
 80015d6:	881a      	ldrh	r2, [r3, #0]
 80015d8:	4b8e      	ldr	r3, [pc, #568]	@ (8001814 <SD_FillVariables+0x274>)
 80015da:	815a      	strh	r2, [r3, #10]
		SD_Data.PAY_DateTime[3] = hour;
 80015dc:	4b93      	ldr	r3, [pc, #588]	@ (800182c <SD_FillVariables+0x28c>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b8c      	ldr	r3, [pc, #560]	@ (8001814 <SD_FillVariables+0x274>)
 80015e4:	819a      	strh	r2, [r3, #12]
		SD_Data.PAY_DateTime[4] = minute;
 80015e6:	4b92      	ldr	r3, [pc, #584]	@ (8001830 <SD_FillVariables+0x290>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b89      	ldr	r3, [pc, #548]	@ (8001814 <SD_FillVariables+0x274>)
 80015ee:	81da      	strh	r2, [r3, #14]
		SD_Data.PAY_DateTime[5] = second;
 80015f0:	4b90      	ldr	r3, [pc, #576]	@ (8001834 <SD_FillVariables+0x294>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b87      	ldr	r3, [pc, #540]	@ (8001814 <SD_FillVariables+0x274>)
 80015f8:	821a      	strh	r2, [r3, #16]

		SD_Data.PAY_Pressure 	= MS5611_Press;
 80015fa:	4b8f      	ldr	r3, [pc, #572]	@ (8001838 <SD_FillVariables+0x298>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a85      	ldr	r2, [pc, #532]	@ (8001814 <SD_FillVariables+0x274>)
 8001600:	6153      	str	r3, [r2, #20]
		SD_Data.CAR_Pressure;
		SD_Data.PAY_Height 		= MS5611_Altitude;
 8001602:	4b8e      	ldr	r3, [pc, #568]	@ (800183c <SD_FillVariables+0x29c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a83      	ldr	r2, [pc, #524]	@ (8001814 <SD_FillVariables+0x274>)
 8001608:	61d3      	str	r3, [r2, #28]
		SD_Data.CAR_Height;
		SD_Data.PAY2CAR_DiffHeight = (SD_Data.PAY_Height-SD_Data.CAR_Height);
 800160a:	4b82      	ldr	r3, [pc, #520]	@ (8001814 <SD_FillVariables+0x274>)
 800160c:	ed93 7a07 	vldr	s14, [r3, #28]
 8001610:	4b80      	ldr	r3, [pc, #512]	@ (8001814 <SD_FillVariables+0x274>)
 8001612:	edd3 7a08 	vldr	s15, [r3, #32]
 8001616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800161a:	4b7e      	ldr	r3, [pc, #504]	@ (8001814 <SD_FillVariables+0x274>)
 800161c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		SD_Data.PAY_VertSpeed 	= MS5611_VertSpeed;
 8001620:	4b87      	ldr	r3, [pc, #540]	@ (8001840 <SD_FillVariables+0x2a0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a7b      	ldr	r2, [pc, #492]	@ (8001814 <SD_FillVariables+0x274>)
 8001626:	6293      	str	r3, [r2, #40]	@ 0x28
		SD_Data.PAY_Temparature = MS5611_Temp;
 8001628:	4b86      	ldr	r3, [pc, #536]	@ (8001844 <SD_FillVariables+0x2a4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a79      	ldr	r2, [pc, #484]	@ (8001814 <SD_FillVariables+0x274>)
 800162e:	62d3      	str	r3, [r2, #44]	@ 0x2c
		SD_Data.PAY_Voltage 	= BatteryVoltage;
 8001630:	4b85      	ldr	r3, [pc, #532]	@ (8001848 <SD_FillVariables+0x2a8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a77      	ldr	r2, [pc, #476]	@ (8001814 <SD_FillVariables+0x274>)
 8001636:	6313      	str	r3, [r2, #48]	@ 0x30

		SD_Data.PAY_GPS_Latitude  = GPS_Latitude;
 8001638:	4b84      	ldr	r3, [pc, #528]	@ (800184c <SD_FillVariables+0x2ac>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a75      	ldr	r2, [pc, #468]	@ (8001814 <SD_FillVariables+0x274>)
 800163e:	6353      	str	r3, [r2, #52]	@ 0x34
		SD_Data.PAY_GPS_Longitude = GPS_Longitude;
 8001640:	4b83      	ldr	r3, [pc, #524]	@ (8001850 <SD_FillVariables+0x2b0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a73      	ldr	r2, [pc, #460]	@ (8001814 <SD_FillVariables+0x274>)
 8001646:	6393      	str	r3, [r2, #56]	@ 0x38
		SD_Data.PAY_GPS_Altitude  = GPS_Altitude;
 8001648:	4b82      	ldr	r3, [pc, #520]	@ (8001854 <SD_FillVariables+0x2b4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a71      	ldr	r2, [pc, #452]	@ (8001814 <SD_FillVariables+0x274>)
 800164e:	63d3      	str	r3, [r2, #60]	@ 0x3c

		SD_Data.PAY_Pitch = euler_pitch;
 8001650:	4b81      	ldr	r3, [pc, #516]	@ (8001858 <SD_FillVariables+0x2b8>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a6f      	ldr	r2, [pc, #444]	@ (8001814 <SD_FillVariables+0x274>)
 8001656:	6413      	str	r3, [r2, #64]	@ 0x40
		SD_Data.PAY_Roll  = euler_roll;
 8001658:	4b80      	ldr	r3, [pc, #512]	@ (800185c <SD_FillVariables+0x2bc>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a6d      	ldr	r2, [pc, #436]	@ (8001814 <SD_FillVariables+0x274>)
 800165e:	6453      	str	r3, [r2, #68]	@ 0x44
		SD_Data.PAY_Yaw   = euler_yaw;
 8001660:	4b7f      	ldr	r3, [pc, #508]	@ (8001860 <SD_FillVariables+0x2c0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a6b      	ldr	r2, [pc, #428]	@ (8001814 <SD_FillVariables+0x274>)
 8001666:	6493      	str	r3, [r2, #72]	@ 0x48
		SD_Data.PAY_RHRH[1];
		SD_Data.PAY_RHRH[2];
		SD_Data.PAY_RHRH[3];

		SD_Data.Station_IOTdata;
		SD_Data.TeamNo = Race_TeamNo;
 8001668:	4b7e      	ldr	r3, [pc, #504]	@ (8001864 <SD_FillVariables+0x2c4>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a69      	ldr	r2, [pc, #420]	@ (8001814 <SD_FillVariables+0x274>)
 800166e:	6553      	str	r3, [r2, #84]	@ 0x54


    	sprintf(SdDatasBuf,"<%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.6f>,<%.6f>,<%.2f>, <%.2f>,<%.2f>,<%.2f>, <%c,%c,%c,%c>, <%.2f>, <%d>,\n",
 8001670:	4b68      	ldr	r3, [pc, #416]	@ (8001814 <SD_FillVariables+0x274>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
																					SD_Data.PAY_PacketNo     ,SD_Data.PAY_SAT_Status   ,
 8001678:	4b66      	ldr	r3, [pc, #408]	@ (8001814 <SD_FillVariables+0x274>)
 800167a:	791b      	ldrb	r3, [r3, #4]
    	sprintf(SdDatasBuf,"<%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.6f>,<%.6f>,<%.2f>, <%.2f>,<%.2f>,<%.2f>, <%c,%c,%c,%c>, <%.2f>, <%d>,\n",
 800167c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
																					SD_Data.PAY_ErrorCode  	 ,SD_Data.PAY_DateTime[0]  ,
 8001680:	4b64      	ldr	r3, [pc, #400]	@ (8001814 <SD_FillVariables+0x274>)
 8001682:	795b      	ldrb	r3, [r3, #5]
    	sprintf(SdDatasBuf,"<%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.6f>,<%.6f>,<%.2f>, <%.2f>,<%.2f>,<%.2f>, <%c,%c,%c,%c>, <%.2f>, <%d>,\n",
 8001684:	67fb      	str	r3, [r7, #124]	@ 0x7c
																					SD_Data.PAY_ErrorCode  	 ,SD_Data.PAY_DateTime[0]  ,
 8001686:	4b63      	ldr	r3, [pc, #396]	@ (8001814 <SD_FillVariables+0x274>)
 8001688:	88db      	ldrh	r3, [r3, #6]
    	sprintf(SdDatasBuf,"<%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.6f>,<%.6f>,<%.2f>, <%.2f>,<%.2f>,<%.2f>, <%c,%c,%c,%c>, <%.2f>, <%d>,\n",
 800168a:	67bb      	str	r3, [r7, #120]	@ 0x78
																					SD_Data.PAY_DateTime[1]  ,SD_Data.PAY_DateTime[2]  ,
 800168c:	4b61      	ldr	r3, [pc, #388]	@ (8001814 <SD_FillVariables+0x274>)
 800168e:	891b      	ldrh	r3, [r3, #8]
    	sprintf(SdDatasBuf,"<%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.6f>,<%.6f>,<%.2f>, <%.2f>,<%.2f>,<%.2f>, <%c,%c,%c,%c>, <%.2f>, <%d>,\n",
 8001690:	677b      	str	r3, [r7, #116]	@ 0x74
																					SD_Data.PAY_DateTime[1]  ,SD_Data.PAY_DateTime[2]  ,
 8001692:	4b60      	ldr	r3, [pc, #384]	@ (8001814 <SD_FillVariables+0x274>)
 8001694:	895b      	ldrh	r3, [r3, #10]
    	sprintf(SdDatasBuf,"<%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.6f>,<%.6f>,<%.2f>, <%.2f>,<%.2f>,<%.2f>, <%c,%c,%c,%c>, <%.2f>, <%d>,\n",
 8001696:	673b      	str	r3, [r7, #112]	@ 0x70
																					SD_Data.PAY_DateTime[3]  ,SD_Data.PAY_DateTime[4]  ,
 8001698:	4b5e      	ldr	r3, [pc, #376]	@ (8001814 <SD_FillVariables+0x274>)
 800169a:	899b      	ldrh	r3, [r3, #12]
    	sprintf(SdDatasBuf,"<%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.6f>,<%.6f>,<%.2f>, <%.2f>,<%.2f>,<%.2f>, <%c,%c,%c,%c>, <%.2f>, <%d>,\n",
 800169c:	66fb      	str	r3, [r7, #108]	@ 0x6c
																					SD_Data.PAY_DateTime[3]  ,SD_Data.PAY_DateTime[4]  ,
 800169e:	4b5d      	ldr	r3, [pc, #372]	@ (8001814 <SD_FillVariables+0x274>)
 80016a0:	89db      	ldrh	r3, [r3, #14]
    	sprintf(SdDatasBuf,"<%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.6f>,<%.6f>,<%.2f>, <%.2f>,<%.2f>,<%.2f>, <%c,%c,%c,%c>, <%.2f>, <%d>,\n",
 80016a2:	66bb      	str	r3, [r7, #104]	@ 0x68
																					SD_Data.PAY_DateTime[5]  ,SD_Data.PAY_Pressure	   ,
 80016a4:	4b5b      	ldr	r3, [pc, #364]	@ (8001814 <SD_FillVariables+0x274>)
 80016a6:	8a1b      	ldrh	r3, [r3, #16]
    	sprintf(SdDatasBuf,"<%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.6f>,<%.6f>,<%.2f>, <%.2f>,<%.2f>,<%.2f>, <%c,%c,%c,%c>, <%.2f>, <%d>,\n",
 80016a8:	667b      	str	r3, [r7, #100]	@ 0x64
																					SD_Data.PAY_DateTime[5]  ,SD_Data.PAY_Pressure	   ,
 80016aa:	4b5a      	ldr	r3, [pc, #360]	@ (8001814 <SD_FillVariables+0x274>)
 80016ac:	695b      	ldr	r3, [r3, #20]
    	sprintf(SdDatasBuf,"<%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.6f>,<%.6f>,<%.2f>, <%.2f>,<%.2f>,<%.2f>, <%c,%c,%c,%c>, <%.2f>, <%d>,\n",
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe ff52 	bl	8000558 <__aeabi_f2d>
 80016b4:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
																					SD_Data.CAR_Pressure   	 ,SD_Data.PAY_Height	   ,
 80016b8:	4b56      	ldr	r3, [pc, #344]	@ (8001814 <SD_FillVariables+0x274>)
 80016ba:	699b      	ldr	r3, [r3, #24]
    	sprintf(SdDatasBuf,"<%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.6f>,<%.6f>,<%.2f>, <%.2f>,<%.2f>,<%.2f>, <%c,%c,%c,%c>, <%.2f>, <%d>,\n",
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe ff4b 	bl	8000558 <__aeabi_f2d>
 80016c2:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
																					SD_Data.CAR_Pressure   	 ,SD_Data.PAY_Height	   ,
 80016c6:	4b53      	ldr	r3, [pc, #332]	@ (8001814 <SD_FillVariables+0x274>)
 80016c8:	69db      	ldr	r3, [r3, #28]
    	sprintf(SdDatasBuf,"<%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.6f>,<%.6f>,<%.2f>, <%.2f>,<%.2f>,<%.2f>, <%c,%c,%c,%c>, <%.2f>, <%d>,\n",
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe ff44 	bl	8000558 <__aeabi_f2d>
 80016d0:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
																					SD_Data.CAR_Height	 	 ,SD_Data.PAY2CAR_DiffHeight,
 80016d4:	4b4f      	ldr	r3, [pc, #316]	@ (8001814 <SD_FillVariables+0x274>)
 80016d6:	6a1b      	ldr	r3, [r3, #32]
    	sprintf(SdDatasBuf,"<%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.6f>,<%.6f>,<%.2f>, <%.2f>,<%.2f>,<%.2f>, <%c,%c,%c,%c>, <%.2f>, <%d>,\n",
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe ff3d 	bl	8000558 <__aeabi_f2d>
 80016de:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
																					SD_Data.CAR_Height	 	 ,SD_Data.PAY2CAR_DiffHeight,
 80016e2:	4b4c      	ldr	r3, [pc, #304]	@ (8001814 <SD_FillVariables+0x274>)
 80016e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    	sprintf(SdDatasBuf,"<%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.6f>,<%.6f>,<%.2f>, <%.2f>,<%.2f>,<%.2f>, <%c,%c,%c,%c>, <%.2f>, <%d>,\n",
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe ff36 	bl	8000558 <__aeabi_f2d>
 80016ec:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
																					SD_Data.PAY_VertSpeed  	 ,SD_Data.PAY_Temparature   ,
 80016f0:	4b48      	ldr	r3, [pc, #288]	@ (8001814 <SD_FillVariables+0x274>)
 80016f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    	sprintf(SdDatasBuf,"<%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.6f>,<%.6f>,<%.2f>, <%.2f>,<%.2f>,<%.2f>, <%c,%c,%c,%c>, <%.2f>, <%d>,\n",
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe ff2f 	bl	8000558 <__aeabi_f2d>
 80016fa:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
																					SD_Data.PAY_VertSpeed  	 ,SD_Data.PAY_Temparature   ,
 80016fe:	4b45      	ldr	r3, [pc, #276]	@ (8001814 <SD_FillVariables+0x274>)
 8001700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    	sprintf(SdDatasBuf,"<%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.6f>,<%.6f>,<%.2f>, <%.2f>,<%.2f>,<%.2f>, <%c,%c,%c,%c>, <%.2f>, <%d>,\n",
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe ff28 	bl	8000558 <__aeabi_f2d>
 8001708:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
																					SD_Data.PAY_Voltage	 	 ,SD_Data.PAY_GPS_Latitude  ,
 800170c:	4b41      	ldr	r3, [pc, #260]	@ (8001814 <SD_FillVariables+0x274>)
 800170e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    	sprintf(SdDatasBuf,"<%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.6f>,<%.6f>,<%.2f>, <%.2f>,<%.2f>,<%.2f>, <%c,%c,%c,%c>, <%.2f>, <%d>,\n",
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe ff21 	bl	8000558 <__aeabi_f2d>
 8001716:	e9c7 0108 	strd	r0, r1, [r7, #32]
																					SD_Data.PAY_Voltage	 	 ,SD_Data.PAY_GPS_Latitude  ,
 800171a:	4b3e      	ldr	r3, [pc, #248]	@ (8001814 <SD_FillVariables+0x274>)
 800171c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    	sprintf(SdDatasBuf,"<%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.6f>,<%.6f>,<%.2f>, <%.2f>,<%.2f>,<%.2f>, <%c,%c,%c,%c>, <%.2f>, <%d>,\n",
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe ff1a 	bl	8000558 <__aeabi_f2d>
 8001724:	e9c7 0106 	strd	r0, r1, [r7, #24]
																					SD_Data.PAY_GPS_Longitude,SD_Data.PAY_GPS_Altitude ,
 8001728:	4b3a      	ldr	r3, [pc, #232]	@ (8001814 <SD_FillVariables+0x274>)
 800172a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    	sprintf(SdDatasBuf,"<%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.6f>,<%.6f>,<%.2f>, <%.2f>,<%.2f>,<%.2f>, <%c,%c,%c,%c>, <%.2f>, <%d>,\n",
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe ff13 	bl	8000558 <__aeabi_f2d>
 8001732:	e9c7 0104 	strd	r0, r1, [r7, #16]
																					SD_Data.PAY_GPS_Longitude,SD_Data.PAY_GPS_Altitude ,
 8001736:	4b37      	ldr	r3, [pc, #220]	@ (8001814 <SD_FillVariables+0x274>)
 8001738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    	sprintf(SdDatasBuf,"<%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.6f>,<%.6f>,<%.2f>, <%.2f>,<%.2f>,<%.2f>, <%c,%c,%c,%c>, <%.2f>, <%d>,\n",
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe ff0c 	bl	8000558 <__aeabi_f2d>
 8001740:	e9c7 0102 	strd	r0, r1, [r7, #8]
																					SD_Data.PAY_Pitch		 ,SD_Data.PAY_Roll		   ,
 8001744:	4b33      	ldr	r3, [pc, #204]	@ (8001814 <SD_FillVariables+0x274>)
 8001746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    	sprintf(SdDatasBuf,"<%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.6f>,<%.6f>,<%.2f>, <%.2f>,<%.2f>,<%.2f>, <%c,%c,%c,%c>, <%.2f>, <%d>,\n",
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe ff05 	bl	8000558 <__aeabi_f2d>
 800174e:	4682      	mov	sl, r0
 8001750:	468b      	mov	fp, r1
																					SD_Data.PAY_Pitch		 ,SD_Data.PAY_Roll		   ,
 8001752:	4b30      	ldr	r3, [pc, #192]	@ (8001814 <SD_FillVariables+0x274>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    	sprintf(SdDatasBuf,"<%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.6f>,<%.6f>,<%.2f>, <%.2f>,<%.2f>,<%.2f>, <%c,%c,%c,%c>, <%.2f>, <%d>,\n",
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe fefe 	bl	8000558 <__aeabi_f2d>
 800175c:	4680      	mov	r8, r0
 800175e:	4689      	mov	r9, r1
																					SD_Data.PAY_Yaw			 ,SD_Data.PAY_RHRH[0]	   ,
 8001760:	4b2c      	ldr	r3, [pc, #176]	@ (8001814 <SD_FillVariables+0x274>)
 8001762:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    	sprintf(SdDatasBuf,"<%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.6f>,<%.6f>,<%.2f>, <%.2f>,<%.2f>,<%.2f>, <%c,%c,%c,%c>, <%.2f>, <%d>,\n",
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe fef7 	bl	8000558 <__aeabi_f2d>
 800176a:	4604      	mov	r4, r0
 800176c:	460d      	mov	r5, r1
																					SD_Data.PAY_Yaw			 ,SD_Data.PAY_RHRH[0]	   ,
 800176e:	4b29      	ldr	r3, [pc, #164]	@ (8001814 <SD_FillVariables+0x274>)
 8001770:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
    	sprintf(SdDatasBuf,"<%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.6f>,<%.6f>,<%.2f>, <%.2f>,<%.2f>,<%.2f>, <%c,%c,%c,%c>, <%.2f>, <%d>,\n",
 8001774:	663b      	str	r3, [r7, #96]	@ 0x60
																					SD_Data.PAY_RHRH[1]	 	 ,SD_Data.PAY_RHRH[2]	   ,
 8001776:	4b27      	ldr	r3, [pc, #156]	@ (8001814 <SD_FillVariables+0x274>)
 8001778:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
    	sprintf(SdDatasBuf,"<%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.6f>,<%.6f>,<%.2f>, <%.2f>,<%.2f>,<%.2f>, <%c,%c,%c,%c>, <%.2f>, <%d>,\n",
 800177c:	607b      	str	r3, [r7, #4]
																					SD_Data.PAY_RHRH[1]	 	 ,SD_Data.PAY_RHRH[2]	   ,
 800177e:	4b25      	ldr	r3, [pc, #148]	@ (8001814 <SD_FillVariables+0x274>)
 8001780:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
    	sprintf(SdDatasBuf,"<%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.6f>,<%.6f>,<%.2f>, <%.2f>,<%.2f>,<%.2f>, <%c,%c,%c,%c>, <%.2f>, <%d>,\n",
 8001784:	603b      	str	r3, [r7, #0]
																					SD_Data.PAY_RHRH[3]	 	 ,SD_Data.Station_IOTdata  ,
 8001786:	4b23      	ldr	r3, [pc, #140]	@ (8001814 <SD_FillVariables+0x274>)
 8001788:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
    	sprintf(SdDatasBuf,"<%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.6f>,<%.6f>,<%.2f>, <%.2f>,<%.2f>,<%.2f>, <%c,%c,%c,%c>, <%.2f>, <%d>,\n",
 800178c:	461e      	mov	r6, r3
																					SD_Data.PAY_RHRH[3]	 	 ,SD_Data.Station_IOTdata  ,
 800178e:	4b21      	ldr	r3, [pc, #132]	@ (8001814 <SD_FillVariables+0x274>)
 8001790:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    	sprintf(SdDatasBuf,"<%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.6f>,<%.6f>,<%.2f>, <%.2f>,<%.2f>,<%.2f>, <%c,%c,%c,%c>, <%.2f>, <%d>,\n",
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fee0 	bl	8000558 <__aeabi_f2d>
 8001798:	4b1e      	ldr	r3, [pc, #120]	@ (8001814 <SD_FillVariables+0x274>)
 800179a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800179c:	932a      	str	r3, [sp, #168]	@ 0xa8
 800179e:	e9cd 0128 	strd	r0, r1, [sp, #160]	@ 0xa0
 80017a2:	9627      	str	r6, [sp, #156]	@ 0x9c
 80017a4:	6839      	ldr	r1, [r7, #0]
 80017a6:	9126      	str	r1, [sp, #152]	@ 0x98
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	9125      	str	r1, [sp, #148]	@ 0x94
 80017ac:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80017ae:	9124      	str	r1, [sp, #144]	@ 0x90
 80017b0:	e9cd 4522 	strd	r4, r5, [sp, #136]	@ 0x88
 80017b4:	e9cd 8920 	strd	r8, r9, [sp, #128]	@ 0x80
 80017b8:	e9cd ab1e 	strd	sl, fp, [sp, #120]	@ 0x78
 80017bc:	ed97 7b02 	vldr	d7, [r7, #8]
 80017c0:	ed8d 7b1c 	vstr	d7, [sp, #112]	@ 0x70
 80017c4:	ed97 7b04 	vldr	d7, [r7, #16]
 80017c8:	ed8d 7b1a 	vstr	d7, [sp, #104]	@ 0x68
 80017cc:	ed97 7b06 	vldr	d7, [r7, #24]
 80017d0:	ed8d 7b18 	vstr	d7, [sp, #96]	@ 0x60
 80017d4:	ed97 7b08 	vldr	d7, [r7, #32]
 80017d8:	ed8d 7b16 	vstr	d7, [sp, #88]	@ 0x58
 80017dc:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 80017e0:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 80017e4:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80017e8:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 80017ec:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 80017f0:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 80017f4:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 80017f8:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80017fc:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8001800:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8001804:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8001808:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800180c:	e02c      	b.n	8001868 <SD_FillVariables+0x2c8>
 800180e:	bf00      	nop
 8001810:	20002c84 	.word	0x20002c84
 8001814:	20002298 	.word	0x20002298
 8001818:	20002c80 	.word	0x20002c80
 800181c:	20002c81 	.word	0x20002c81
 8001820:	20002c64 	.word	0x20002c64
 8001824:	20002c65 	.word	0x20002c65
 8001828:	20002c66 	.word	0x20002c66
 800182c:	20002c68 	.word	0x20002c68
 8001830:	20002c69 	.word	0x20002c69
 8001834:	20002c6a 	.word	0x20002c6a
 8001838:	20002a20 	.word	0x20002a20
 800183c:	20002a28 	.word	0x20002a28
 8001840:	20002a2c 	.word	0x20002a2c
 8001844:	20002a24 	.word	0x20002a24
 8001848:	20002a3c 	.word	0x20002a3c
 800184c:	20002a48 	.word	0x20002a48
 8001850:	20002a44 	.word	0x20002a44
 8001854:	20002a40 	.word	0x20002a40
 8001858:	20002c5c 	.word	0x20002c5c
 800185c:	20002c58 	.word	0x20002c58
 8001860:	20002c60 	.word	0x20002c60
 8001864:	08013e68 	.word	0x08013e68
 8001868:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 800186c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001870:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8001872:	9106      	str	r1, [sp, #24]
 8001874:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001876:	9105      	str	r1, [sp, #20]
 8001878:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800187a:	9104      	str	r1, [sp, #16]
 800187c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800187e:	9103      	str	r1, [sp, #12]
 8001880:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8001882:	9102      	str	r1, [sp, #8]
 8001884:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8001886:	9101      	str	r1, [sp, #4]
 8001888:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800188a:	9100      	str	r1, [sp, #0]
 800188c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001890:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001894:	4904      	ldr	r1, [pc, #16]	@ (80018a8 <SD_FillVariables+0x308>)
 8001896:	4805      	ldr	r0, [pc, #20]	@ (80018ac <SD_FillVariables+0x30c>)
 8001898:	f00d f866 	bl	800e968 <siprintf>
																					SD_Data.TeamNo);

}
 800189c:	bf00      	nop
 800189e:	378c      	adds	r7, #140	@ 0x8c
 80018a0:	46bd      	mov	sp, r7
 80018a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018a6:	bf00      	nop
 80018a8:	08013a34 	.word	0x08013a34
 80018ac:	200022f0 	.word	0x200022f0

080018b0 <SD_Mount>:


FRESULT SD_Mount (const TCHAR* SD_path, BYTE Mount_Op)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	70fb      	strb	r3, [r7, #3]

	SD_result = f_mount(&FATFS_Ob, SD_path, Mount_Op);
 80018bc:	78fb      	ldrb	r3, [r7, #3]
 80018be:	461a      	mov	r2, r3
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	4808      	ldr	r0, [pc, #32]	@ (80018e4 <SD_Mount+0x34>)
 80018c4:	f00b fb00 	bl	800cec8 <f_mount>
 80018c8:	4603      	mov	r3, r0
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <SD_Mount+0x38>)
 80018ce:	701a      	strb	r2, [r3, #0]

	if(SD_result != FR_OK){
 80018d0:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <SD_Mount+0x38>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <SD_Mount+0x2c>
		 */
		//while(1);
	}
	else{

		return FR_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	e7ff      	b.n	80018dc <SD_Mount+0x2c>

	}
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000230 	.word	0x20000230
 80018e8:	20002294 	.word	0x20002294

080018ec <SD_Create_Dir_File>:


FRESULT SD_Create_Dir_File(const TCHAR* SD_Dir,const TCHAR* SD_FileName,char* SD_Buffer){
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]

	SD_result = f_mkdir(SD_Dir);
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f00b ff2f 	bl	800d75c <f_mkdir>
 80018fe:	4603      	mov	r3, r0
 8001900:	461a      	mov	r2, r3
 8001902:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <SD_Create_Dir_File+0x88>)
 8001904:	701a      	strb	r2, [r3, #0]

	if((SD_result != FR_OK)&&(SD_result != FR_EXIST)){
 8001906:	4b1b      	ldr	r3, [pc, #108]	@ (8001974 <SD_Create_Dir_File+0x88>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d005      	beq.n	800191a <SD_Create_Dir_File+0x2e>
 800190e:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <SD_Create_Dir_File+0x88>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b08      	cmp	r3, #8
 8001914:	d001      	beq.n	800191a <SD_Create_Dir_File+0x2e>
		/**
		 * Buzzer will be activated like biiip biip bip
		 */
		while(1);
 8001916:	bf00      	nop
 8001918:	e7fd      	b.n	8001916 <SD_Create_Dir_File+0x2a>
	}
	else{

		SD_result = f_open(&FilePage, SD_FileName, FA_CREATE_ALWAYS | FA_WRITE);
 800191a:	220a      	movs	r2, #10
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	4816      	ldr	r0, [pc, #88]	@ (8001978 <SD_Create_Dir_File+0x8c>)
 8001920:	f00b fb18 	bl	800cf54 <f_open>
 8001924:	4603      	mov	r3, r0
 8001926:	461a      	mov	r2, r3
 8001928:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <SD_Create_Dir_File+0x88>)
 800192a:	701a      	strb	r2, [r3, #0]
		SD_result = f_close(&FilePage);
 800192c:	4812      	ldr	r0, [pc, #72]	@ (8001978 <SD_Create_Dir_File+0x8c>)
 800192e:	f00b feeb 	bl	800d708 <f_close>
 8001932:	4603      	mov	r3, r0
 8001934:	461a      	mov	r2, r3
 8001936:	4b0f      	ldr	r3, [pc, #60]	@ (8001974 <SD_Create_Dir_File+0x88>)
 8001938:	701a      	strb	r2, [r3, #0]

		sprintf(SD_Buffer,"%s\n",DataTopFrame);
 800193a:	4b10      	ldr	r3, [pc, #64]	@ (800197c <SD_Create_Dir_File+0x90>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	490f      	ldr	r1, [pc, #60]	@ (8001980 <SD_Create_Dir_File+0x94>)
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f00d f810 	bl	800e968 <siprintf>
		SD_Write(SD_Buffer,"SAT_PAY/STM32.TXT");
 8001948:	490e      	ldr	r1, [pc, #56]	@ (8001984 <SD_Create_Dir_File+0x98>)
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 f81c 	bl	8001988 <SD_Write>

		if(SD_result != FR_OK){
 8001950:	4b08      	ldr	r3, [pc, #32]	@ (8001974 <SD_Create_Dir_File+0x88>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <SD_Create_Dir_File+0x70>
				/**
				 * Send to ground station error message
			     */
				while(1);
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <SD_Create_Dir_File+0x6c>
			}
		SD_result = f_close(&FilePage); //invalid object hatası verdi
 800195c:	4806      	ldr	r0, [pc, #24]	@ (8001978 <SD_Create_Dir_File+0x8c>)
 800195e:	f00b fed3 	bl	800d708 <f_close>
 8001962:	4603      	mov	r3, r0
 8001964:	461a      	mov	r2, r3
 8001966:	4b03      	ldr	r3, [pc, #12]	@ (8001974 <SD_Create_Dir_File+0x88>)
 8001968:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800196a:	2300      	movs	r3, #0
	}

}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20002294 	.word	0x20002294
 8001978:	20001264 	.word	0x20001264
 800197c:	20000000 	.word	0x20000000
 8001980:	08013af4 	.word	0x08013af4
 8001984:	08013af8 	.word	0x08013af8

08001988 <SD_Write>:


FRESULT SD_Write(char* SD_Buffer,const TCHAR* SD_FileName){
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]

	UINT written;

	SD_result = f_open(&FilePage, SD_FileName, FA_OPEN_APPEND | FA_WRITE);
 8001992:	2232      	movs	r2, #50	@ 0x32
 8001994:	6839      	ldr	r1, [r7, #0]
 8001996:	4810      	ldr	r0, [pc, #64]	@ (80019d8 <SD_Write+0x50>)
 8001998:	f00b fadc 	bl	800cf54 <f_open>
 800199c:	4603      	mov	r3, r0
 800199e:	461a      	mov	r2, r3
 80019a0:	4b0e      	ldr	r3, [pc, #56]	@ (80019dc <SD_Write+0x54>)
 80019a2:	701a      	strb	r2, [r3, #0]

	SD_result =  f_write(&FilePage,SD_Buffer,strlen(SD_Buffer),&written);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7fe fc6b 	bl	8000280 <strlen>
 80019aa:	4602      	mov	r2, r0
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	4809      	ldr	r0, [pc, #36]	@ (80019d8 <SD_Write+0x50>)
 80019b4:	f00b fc96 	bl	800d2e4 <f_write>
 80019b8:	4603      	mov	r3, r0
 80019ba:	461a      	mov	r2, r3
 80019bc:	4b07      	ldr	r3, [pc, #28]	@ (80019dc <SD_Write+0x54>)
 80019be:	701a      	strb	r2, [r3, #0]

	SD_result = f_close(&FilePage);
 80019c0:	4805      	ldr	r0, [pc, #20]	@ (80019d8 <SD_Write+0x50>)
 80019c2:	f00b fea1 	bl	800d708 <f_close>
 80019c6:	4603      	mov	r3, r0
 80019c8:	461a      	mov	r2, r3
 80019ca:	4b04      	ldr	r3, [pc, #16]	@ (80019dc <SD_Write+0x54>)
 80019cc:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20001264 	.word	0x20001264
 80019dc:	20002294 	.word	0x20002294

080019e0 <ReadBatteryVoltage>:
 * @brief Read value of battery voltage by using ADC
 * @param hadc
 * @retval Value of Battery Voltage
 */

float ReadBatteryVoltage(ADC_HandleTypeDef *hadc){
 80019e0:	b5b0      	push	{r4, r5, r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

   HAL_ADC_Start(hadc);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f002 fd3b 	bl	8004464 <HAL_ADC_Start>

   if(HAL_ADC_PollForConversion(hadc, 1000)==HAL_OK)
 80019ee:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f002 fe1d 	bl	8004632 <HAL_ADC_PollForConversion>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d139      	bne.n	8001a72 <ReadBatteryVoltage+0x92>
   {

      Value_ADC = HAL_ADC_GetValue(hadc);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f002 fea2 	bl	8004748 <HAL_ADC_GetValue>
 8001a04:	4603      	mov	r3, r0
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	4b23      	ldr	r3, [pc, #140]	@ (8001a98 <ReadBatteryVoltage+0xb8>)
 8001a0a:	801a      	strh	r2, [r3, #0]
      BatteryVoltage = (Value_ADC * (ConstantOfReferanceVoltage / ResolationValueOfBits)  *  ConstantOfVoltage);
 8001a0c:	4b22      	ldr	r3, [pc, #136]	@ (8001a98 <ReadBatteryVoltage+0xb8>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fd8f 	bl	8000534 <__aeabi_i2d>
 8001a16:	a31e      	add	r3, pc, #120	@ (adr r3, 8001a90 <ReadBatteryVoltage+0xb0>)
 8001a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1c:	f7fe fdf4 	bl	8000608 <__aeabi_dmul>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4614      	mov	r4, r2
 8001a26:	461d      	mov	r5, r3
 8001a28:	4b1c      	ldr	r3, [pc, #112]	@ (8001a9c <ReadBatteryVoltage+0xbc>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fd93 	bl	8000558 <__aeabi_f2d>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4620      	mov	r0, r4
 8001a38:	4629      	mov	r1, r5
 8001a3a:	f7fe fde5 	bl	8000608 <__aeabi_dmul>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	f7ff f8d7 	bl	8000bf8 <__aeabi_d2f>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4a14      	ldr	r2, [pc, #80]	@ (8001aa0 <ReadBatteryVoltage+0xc0>)
 8001a4e:	6013      	str	r3, [r2, #0]

         if(BatteryVoltage <= MinLimitVoltage)
 8001a50:	4b13      	ldr	r3, [pc, #76]	@ (8001aa0 <ReadBatteryVoltage+0xc0>)
 8001a52:	ed93 7a00 	vldr	s14, [r3]
 8001a56:	4b13      	ldr	r3, [pc, #76]	@ (8001aa4 <ReadBatteryVoltage+0xc4>)
 8001a58:	edd3 7a00 	vldr	s15, [r3]
 8001a5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a64:	d805      	bhi.n	8001a72 <ReadBatteryVoltage+0x92>
         {
        	PassiveBuzz_ON(&htim3, TIM_CHANNEL_1);		/*! System voltage level is within the critical range, alert is active */
 8001a66:	2100      	movs	r1, #0
 8001a68:	480f      	ldr	r0, [pc, #60]	@ (8001aa8 <ReadBatteryVoltage+0xc8>)
 8001a6a:	f7ff fc05 	bl	8001278 <PassiveBuzz_ON>
        	while(1);
 8001a6e:	bf00      	nop
 8001a70:	e7fd      	b.n	8001a6e <ReadBatteryVoltage+0x8e>
         }

   }

   HAL_ADC_Stop(hadc);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f002 fdaa 	bl	80045cc <HAL_ADC_Stop>
   return BatteryVoltage;
 8001a78:	4b09      	ldr	r3, [pc, #36]	@ (8001aa0 <ReadBatteryVoltage+0xc0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	ee07 3a90 	vmov	s15, r3
}
 8001a80:	eeb0 0a67 	vmov.f32	s0, s15
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bdb0      	pop	{r4, r5, r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	f3af 8000 	nop.w
 8001a90:	e734d9b4 	.word	0xe734d9b4
 8001a94:	3f4a680c 	.word	0x3f4a680c
 8001a98:	200024d0 	.word	0x200024d0
 8001a9c:	200024d4 	.word	0x200024d4
 8001aa0:	20002a3c 	.word	0x20002a3c
 8001aa4:	200024d8 	.word	0x200024d8
 8001aa8:	200028e0 	.word	0x200028e0

08001aac <GPS_UART_CallBack>:
{
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
}


void GPS_UART_CallBack(){
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8001ab0:	4b16      	ldr	r3, [pc, #88]	@ (8001b0c <GPS_UART_CallBack+0x60>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b0a      	cmp	r3, #10
 8001ab6:	d010      	beq.n	8001ada <GPS_UART_CallBack+0x2e>
 8001ab8:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <GPS_UART_CallBack+0x64>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	b25b      	sxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	db0b      	blt.n	8001ada <GPS_UART_CallBack+0x2e>
		rx_buffer[rx_index++] = rx_data;
 8001ac2:	4b13      	ldr	r3, [pc, #76]	@ (8001b10 <GPS_UART_CallBack+0x64>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	b2d1      	uxtb	r1, r2
 8001aca:	4a11      	ldr	r2, [pc, #68]	@ (8001b10 <GPS_UART_CallBack+0x64>)
 8001acc:	7011      	strb	r1, [r2, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8001b0c <GPS_UART_CallBack+0x60>)
 8001ad2:	7819      	ldrb	r1, [r3, #0]
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b14 <GPS_UART_CallBack+0x68>)
 8001ad6:	5499      	strb	r1, [r3, r2]
 8001ad8:	e010      	b.n	8001afc <GPS_UART_CallBack+0x50>
	} else {

		if(GPS_validate((char*) rx_buffer))
 8001ada:	480e      	ldr	r0, [pc, #56]	@ (8001b14 <GPS_UART_CallBack+0x68>)
 8001adc:	f000 f81e 	bl	8001b1c <GPS_validate>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d002      	beq.n	8001aec <GPS_UART_CallBack+0x40>
			GPS_parse((char*) rx_buffer);
 8001ae6:	480b      	ldr	r0, [pc, #44]	@ (8001b14 <GPS_UART_CallBack+0x68>)
 8001ae8:	f000 f87a 	bl	8001be0 <GPS_parse>
		rx_index = 0;
 8001aec:	4b08      	ldr	r3, [pc, #32]	@ (8001b10 <GPS_UART_CallBack+0x64>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 8001af2:	2280      	movs	r2, #128	@ 0x80
 8001af4:	2100      	movs	r1, #0
 8001af6:	4807      	ldr	r0, [pc, #28]	@ (8001b14 <GPS_UART_CallBack+0x68>)
 8001af8:	f00d f85a 	bl	800ebb0 <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001afc:	2201      	movs	r2, #1
 8001afe:	4903      	ldr	r1, [pc, #12]	@ (8001b0c <GPS_UART_CallBack+0x60>)
 8001b00:	4805      	ldr	r0, [pc, #20]	@ (8001b18 <GPS_UART_CallBack+0x6c>)
 8001b02:	f007 fcb6 	bl	8009472 <HAL_UART_Receive_IT>
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200024dc 	.word	0x200024dc
 8001b10:	20002560 	.word	0x20002560
 8001b14:	200024e0 	.word	0x200024e0
 8001b18:	20002928 	.word	0x20002928

08001b1c <GPS_validate>:


int GPS_validate(char *nmeastr){
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b24      	cmp	r3, #36	@ 0x24
 8001b36:	d103      	bne.n	8001b40 <GPS_validate+0x24>
        i++;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001b3e:	e00c      	b.n	8001b5a <GPS_validate+0x3e>
        return 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	e047      	b.n	8001bd4 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4053      	eors	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        i++;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	3301      	adds	r3, #1
 8001b58:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	4413      	add	r3, r2
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d008      	beq.n	8001b78 <GPS_validate+0x5c>
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b70:	d002      	beq.n	8001b78 <GPS_validate+0x5c>
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	2b4a      	cmp	r3, #74	@ 0x4a
 8001b76:	dde5      	ble.n	8001b44 <GPS_validate+0x28>
    }

    if(i >= 75){
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	2b4a      	cmp	r3, #74	@ 0x4a
 8001b7c:	dd01      	ble.n	8001b82 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e028      	b.n	8001bd4 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	4413      	add	r3, r2
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b8c:	d119      	bne.n	8001bc2 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	3301      	adds	r3, #1
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8001baa:	f107 0308 	add.w	r3, r7, #8
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	490a      	ldr	r1, [pc, #40]	@ (8001bdc <GPS_validate+0xc0>)
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f00c fed8 	bl	800e968 <siprintf>
    return((checkcalcstr[0] == check[0])
 8001bb8:	7a3a      	ldrb	r2, [r7, #8]
 8001bba:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d108      	bne.n	8001bd2 <GPS_validate+0xb6>
 8001bc0:	e001      	b.n	8001bc6 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	e006      	b.n	8001bd4 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001bc6:	7a7a      	ldrb	r2, [r7, #9]
 8001bc8:	7b7b      	ldrb	r3, [r7, #13]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d101      	bne.n	8001bd2 <GPS_validate+0xb6>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <GPS_validate+0xb8>
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	08013b0c 	.word	0x08013b0c

08001be0 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	@ 0x28
 8001be4:	af08      	add	r7, sp, #32
 8001be6:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8001be8:	2206      	movs	r2, #6
 8001bea:	4950      	ldr	r1, [pc, #320]	@ (8001d2c <GPS_parse+0x14c>)
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f00c ffe7 	bl	800ebc0 <strncmp>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d143      	bne.n	8001c80 <GPS_parse+0xa0>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8001bf8:	4b4d      	ldr	r3, [pc, #308]	@ (8001d30 <GPS_parse+0x150>)
 8001bfa:	9307      	str	r3, [sp, #28]
 8001bfc:	4b4d      	ldr	r3, [pc, #308]	@ (8001d34 <GPS_parse+0x154>)
 8001bfe:	9306      	str	r3, [sp, #24]
 8001c00:	4b4d      	ldr	r3, [pc, #308]	@ (8001d38 <GPS_parse+0x158>)
 8001c02:	9305      	str	r3, [sp, #20]
 8001c04:	4b4d      	ldr	r3, [pc, #308]	@ (8001d3c <GPS_parse+0x15c>)
 8001c06:	9304      	str	r3, [sp, #16]
 8001c08:	4b4d      	ldr	r3, [pc, #308]	@ (8001d40 <GPS_parse+0x160>)
 8001c0a:	9303      	str	r3, [sp, #12]
 8001c0c:	4b4d      	ldr	r3, [pc, #308]	@ (8001d44 <GPS_parse+0x164>)
 8001c0e:	9302      	str	r3, [sp, #8]
 8001c10:	4b4d      	ldr	r3, [pc, #308]	@ (8001d48 <GPS_parse+0x168>)
 8001c12:	9301      	str	r3, [sp, #4]
 8001c14:	4b4d      	ldr	r3, [pc, #308]	@ (8001d4c <GPS_parse+0x16c>)
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	4b4d      	ldr	r3, [pc, #308]	@ (8001d50 <GPS_parse+0x170>)
 8001c1a:	4a4e      	ldr	r2, [pc, #312]	@ (8001d54 <GPS_parse+0x174>)
 8001c1c:	494e      	ldr	r1, [pc, #312]	@ (8001d58 <GPS_parse+0x178>)
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f00c fec2 	bl	800e9a8 <siscanf>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	dd7c      	ble.n	8001d24 <GPS_parse+0x144>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001c2a:	4b4c      	ldr	r3, [pc, #304]	@ (8001d5c <GPS_parse+0x17c>)
 8001c2c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c30:	4b4a      	ldr	r3, [pc, #296]	@ (8001d5c <GPS_parse+0x17c>)
 8001c32:	7e1b      	ldrb	r3, [r3, #24]
 8001c34:	4618      	mov	r0, r3
 8001c36:	eeb0 0a67 	vmov.f32	s0, s15
 8001c3a:	f000 f8b9 	bl	8001db0 <GPS_nmea_to_dec>
 8001c3e:	eef0 7a40 	vmov.f32	s15, s0
 8001c42:	4b46      	ldr	r3, [pc, #280]	@ (8001d5c <GPS_parse+0x17c>)
 8001c44:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001c48:	4b44      	ldr	r3, [pc, #272]	@ (8001d5c <GPS_parse+0x17c>)
 8001c4a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c4e:	4b43      	ldr	r3, [pc, #268]	@ (8001d5c <GPS_parse+0x17c>)
 8001c50:	7e5b      	ldrb	r3, [r3, #25]
 8001c52:	4618      	mov	r0, r3
 8001c54:	eeb0 0a67 	vmov.f32	s0, s15
 8001c58:	f000 f8aa 	bl	8001db0 <GPS_nmea_to_dec>
 8001c5c:	eef0 7a40 	vmov.f32	s15, s0
 8001c60:	4b3e      	ldr	r3, [pc, #248]	@ (8001d5c <GPS_parse+0x17c>)
 8001c62:	edc3 7a00 	vstr	s15, [r3]

    		GPS_Latitude = GPS.dec_latitude;
 8001c66:	4b3d      	ldr	r3, [pc, #244]	@ (8001d5c <GPS_parse+0x17c>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	4a3d      	ldr	r2, [pc, #244]	@ (8001d60 <GPS_parse+0x180>)
 8001c6c:	6013      	str	r3, [r2, #0]
    		GPS_Longitude = GPS.dec_longitude;
 8001c6e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d5c <GPS_parse+0x17c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a3c      	ldr	r2, [pc, #240]	@ (8001d64 <GPS_parse+0x184>)
 8001c74:	6013      	str	r3, [r2, #0]
			GPS_Altitude = GPS.msl_altitude;
 8001c76:	4b39      	ldr	r3, [pc, #228]	@ (8001d5c <GPS_parse+0x17c>)
 8001c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c7a:	4a3b      	ldr	r2, [pc, #236]	@ (8001d68 <GPS_parse+0x188>)
 8001c7c:	6013      	str	r3, [r2, #0]
    		return;
 8001c7e:	e051      	b.n	8001d24 <GPS_parse+0x144>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 8001c80:	2206      	movs	r2, #6
 8001c82:	493a      	ldr	r1, [pc, #232]	@ (8001d6c <GPS_parse+0x18c>)
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f00c ff9b 	bl	800ebc0 <strncmp>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d114      	bne.n	8001cba <GPS_parse+0xda>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 8001c90:	4b37      	ldr	r3, [pc, #220]	@ (8001d70 <GPS_parse+0x190>)
 8001c92:	9305      	str	r3, [sp, #20]
 8001c94:	4b37      	ldr	r3, [pc, #220]	@ (8001d74 <GPS_parse+0x194>)
 8001c96:	9304      	str	r3, [sp, #16]
 8001c98:	4b37      	ldr	r3, [pc, #220]	@ (8001d78 <GPS_parse+0x198>)
 8001c9a:	9303      	str	r3, [sp, #12]
 8001c9c:	4b29      	ldr	r3, [pc, #164]	@ (8001d44 <GPS_parse+0x164>)
 8001c9e:	9302      	str	r3, [sp, #8]
 8001ca0:	4b29      	ldr	r3, [pc, #164]	@ (8001d48 <GPS_parse+0x168>)
 8001ca2:	9301      	str	r3, [sp, #4]
 8001ca4:	4b29      	ldr	r3, [pc, #164]	@ (8001d4c <GPS_parse+0x16c>)
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	4b29      	ldr	r3, [pc, #164]	@ (8001d50 <GPS_parse+0x170>)
 8001caa:	4a2a      	ldr	r2, [pc, #168]	@ (8001d54 <GPS_parse+0x174>)
 8001cac:	4933      	ldr	r1, [pc, #204]	@ (8001d7c <GPS_parse+0x19c>)
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f00c fe7a 	bl	800e9a8 <siscanf>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	e034      	b.n	8001d24 <GPS_parse+0x144>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 8001cba:	2206      	movs	r2, #6
 8001cbc:	4930      	ldr	r1, [pc, #192]	@ (8001d80 <GPS_parse+0x1a0>)
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f00c ff7e 	bl	800ebc0 <strncmp>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d110      	bne.n	8001cec <GPS_parse+0x10c>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 8001cca:	4b2e      	ldr	r3, [pc, #184]	@ (8001d84 <GPS_parse+0x1a4>)
 8001ccc:	9303      	str	r3, [sp, #12]
 8001cce:	4b21      	ldr	r3, [pc, #132]	@ (8001d54 <GPS_parse+0x174>)
 8001cd0:	9302      	str	r3, [sp, #8]
 8001cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d44 <GPS_parse+0x164>)
 8001cd4:	9301      	str	r3, [sp, #4]
 8001cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d48 <GPS_parse+0x168>)
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	4b1c      	ldr	r3, [pc, #112]	@ (8001d4c <GPS_parse+0x16c>)
 8001cdc:	4a1c      	ldr	r2, [pc, #112]	@ (8001d50 <GPS_parse+0x170>)
 8001cde:	492a      	ldr	r1, [pc, #168]	@ (8001d88 <GPS_parse+0x1a8>)
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f00c fe61 	bl	800e9a8 <siscanf>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	e01b      	b.n	8001d24 <GPS_parse+0x144>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 8001cec:	2206      	movs	r2, #6
 8001cee:	4927      	ldr	r1, [pc, #156]	@ (8001d8c <GPS_parse+0x1ac>)
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f00c ff65 	bl	800ebc0 <strncmp>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d113      	bne.n	8001d24 <GPS_parse+0x144>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001cfc:	4b24      	ldr	r3, [pc, #144]	@ (8001d90 <GPS_parse+0x1b0>)
 8001cfe:	9305      	str	r3, [sp, #20]
 8001d00:	4b24      	ldr	r3, [pc, #144]	@ (8001d94 <GPS_parse+0x1b4>)
 8001d02:	9304      	str	r3, [sp, #16]
 8001d04:	4b24      	ldr	r3, [pc, #144]	@ (8001d98 <GPS_parse+0x1b8>)
 8001d06:	9303      	str	r3, [sp, #12]
 8001d08:	4b1b      	ldr	r3, [pc, #108]	@ (8001d78 <GPS_parse+0x198>)
 8001d0a:	9302      	str	r3, [sp, #8]
 8001d0c:	4b23      	ldr	r3, [pc, #140]	@ (8001d9c <GPS_parse+0x1bc>)
 8001d0e:	9301      	str	r3, [sp, #4]
 8001d10:	4b23      	ldr	r3, [pc, #140]	@ (8001da0 <GPS_parse+0x1c0>)
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	4b23      	ldr	r3, [pc, #140]	@ (8001da4 <GPS_parse+0x1c4>)
 8001d16:	4a24      	ldr	r2, [pc, #144]	@ (8001da8 <GPS_parse+0x1c8>)
 8001d18:	4924      	ldr	r1, [pc, #144]	@ (8001dac <GPS_parse+0x1cc>)
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f00c fe44 	bl	800e9a8 <siscanf>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
            return;
    }
}
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	08013b14 	.word	0x08013b14
 8001d30:	20002590 	.word	0x20002590
 8001d34:	2000258c 	.word	0x2000258c
 8001d38:	20002588 	.word	0x20002588
 8001d3c:	20002584 	.word	0x20002584
 8001d40:	20002580 	.word	0x20002580
 8001d44:	2000257d 	.word	0x2000257d
 8001d48:	20002570 	.word	0x20002570
 8001d4c:	2000257c 	.word	0x2000257c
 8001d50:	20002574 	.word	0x20002574
 8001d54:	20002578 	.word	0x20002578
 8001d58:	08013b1c 	.word	0x08013b1c
 8001d5c:	20002564 	.word	0x20002564
 8001d60:	20002a48 	.word	0x20002a48
 8001d64:	20002a44 	.word	0x20002a44
 8001d68:	20002a40 	.word	0x20002a40
 8001d6c:	08013b44 	.word	0x08013b44
 8001d70:	2000259c 	.word	0x2000259c
 8001d74:	20002598 	.word	0x20002598
 8001d78:	20002594 	.word	0x20002594
 8001d7c:	08013b4c 	.word	0x08013b4c
 8001d80:	08013b6c 	.word	0x08013b6c
 8001d84:	200025a0 	.word	0x200025a0
 8001d88:	08013b74 	.word	0x08013b74
 8001d8c:	08013b90 	.word	0x08013b90
 8001d90:	200025b8 	.word	0x200025b8
 8001d94:	200025b4 	.word	0x200025b4
 8001d98:	200025b1 	.word	0x200025b1
 8001d9c:	200025b0 	.word	0x200025b0
 8001da0:	200025ac 	.word	0x200025ac
 8001da4:	200025a8 	.word	0x200025a8
 8001da8:	200025a4 	.word	0x200025a4
 8001dac:	08013b98 	.word	0x08013b98

08001db0 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001db0:	b480      	push	{r7}
 8001db2:	b087      	sub	sp, #28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	ed87 0a01 	vstr	s0, [r7, #4]
 8001dba:	4603      	mov	r3, r0
 8001dbc:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8001dbe:	ed97 7a01 	vldr	s14, [r7, #4]
 8001dc2:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001e44 <GPS_nmea_to_dec+0x94>
 8001dc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dce:	ee17 3a90 	vmov	r3, s15
 8001dd2:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	2264      	movs	r2, #100	@ 0x64
 8001dd8:	fb02 f303 	mul.w	r3, r2, r3
 8001ddc:	ee07 3a90 	vmov	s15, r3
 8001de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001de8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dec:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8001df0:	ed97 7a03 	vldr	s14, [r7, #12]
 8001df4:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001e48 <GPS_nmea_to_dec+0x98>
 8001df8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dfc:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	ee07 3a90 	vmov	s15, r3
 8001e06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e0a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e12:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8001e16:	78fb      	ldrb	r3, [r7, #3]
 8001e18:	2b53      	cmp	r3, #83	@ 0x53
 8001e1a:	d002      	beq.n	8001e22 <GPS_nmea_to_dec+0x72>
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	2b57      	cmp	r3, #87	@ 0x57
 8001e20:	d105      	bne.n	8001e2e <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8001e22:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e26:	eef1 7a67 	vneg.f32	s15, s15
 8001e2a:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	ee07 3a90 	vmov	s15, r3
}
 8001e34:	eeb0 0a67 	vmov.f32	s0, s15
 8001e38:	371c      	adds	r7, #28
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	42c80000 	.word	0x42c80000
 8001e48:	42700000 	.word	0x42700000

08001e4c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
	GPS_UART_CallBack();
 8001e54:	f7ff fe2a 	bl	8001aac <GPS_UART_CallBack>
   // do nothing here
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <bno055_setPage>:
extern 	bno055_vector_t vectorIMU;
extern float euler_roll;
extern float euler_pitch;
extern float euler_yaw;

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	2007      	movs	r0, #7
 8001e70:	f000 ffe4 	bl	8002e3c <bno055_writeData>
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8001e7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e80:	b09e      	sub	sp, #120	@ 0x78
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	4603      	mov	r3, r0
 8001e86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f7ff ffe8 	bl	8001e60 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001e90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e94:	2b20      	cmp	r3, #32
 8001e96:	d108      	bne.n	8001eaa <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001e98:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ea0:	2208      	movs	r2, #8
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f001 f8b6 	bl	8003014 <bno055_readData>
 8001ea8:	e007      	b.n	8001eba <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8001eaa:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001eae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001eb2:	2206      	movs	r2, #6
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f001 f8ad 	bl	8003014 <bno055_readData>

  double scale = 1;
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	4b8b      	ldr	r3, [pc, #556]	@ (80020ec <bno055_getVector+0x270>)
 8001ec0:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ec8:	2b0e      	cmp	r3, #14
 8001eca:	d109      	bne.n	8001ee0 <bno055_getVector+0x64>
    scale = magScale;
 8001ecc:	4b88      	ldr	r3, [pc, #544]	@ (80020f0 <bno055_getVector+0x274>)
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe fb1f 	bl	8000514 <__aeabi_ui2d>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001ede:	e03e      	b.n	8001f5e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	d007      	beq.n	8001ef8 <bno055_getVector+0x7c>
 8001ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001eec:	2b28      	cmp	r3, #40	@ 0x28
 8001eee:	d003      	beq.n	8001ef8 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8001ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ef4:	2b2e      	cmp	r3, #46	@ 0x2e
 8001ef6:	d109      	bne.n	8001f0c <bno055_getVector+0x90>
    scale = accelScale;
 8001ef8:	4b7e      	ldr	r3, [pc, #504]	@ (80020f4 <bno055_getVector+0x278>)
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe fb09 	bl	8000514 <__aeabi_ui2d>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001f0a:	e028      	b.n	8001f5e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f10:	2b14      	cmp	r3, #20
 8001f12:	d109      	bne.n	8001f28 <bno055_getVector+0xac>
    scale = angularRateScale;
 8001f14:	4b78      	ldr	r3, [pc, #480]	@ (80020f8 <bno055_getVector+0x27c>)
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7fe fafb 	bl	8000514 <__aeabi_ui2d>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001f26:	e01a      	b.n	8001f5e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001f28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f2c:	2b1a      	cmp	r3, #26
 8001f2e:	d109      	bne.n	8001f44 <bno055_getVector+0xc8>
    scale = eulerScale;
 8001f30:	4b72      	ldr	r3, [pc, #456]	@ (80020fc <bno055_getVector+0x280>)
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe faed 	bl	8000514 <__aeabi_ui2d>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001f42:	e00c      	b.n	8001f5e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8001f44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f48:	2b20      	cmp	r3, #32
 8001f4a:	d108      	bne.n	8001f5e <bno055_getVector+0xe2>
    scale = quaScale;
 8001f4c:	4b6c      	ldr	r3, [pc, #432]	@ (8002100 <bno055_getVector+0x284>)
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe fadf 	bl	8000514 <__aeabi_ui2d>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8001f5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f62:	2220      	movs	r2, #32
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f00c fe22 	bl	800ebb0 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f70:	2b20      	cmp	r3, #32
 8001f72:	d150      	bne.n	8002016 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001f74:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001f78:	021b      	lsls	r3, r3, #8
 8001f7a:	b21a      	sxth	r2, r3
 8001f7c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001f80:	b21b      	sxth	r3, r3
 8001f82:	4313      	orrs	r3, r2
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe fad4 	bl	8000534 <__aeabi_i2d>
 8001f8c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001f90:	f7fe fc64 	bl	800085c <__aeabi_ddiv>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001f9c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	b21a      	sxth	r2, r3
 8001fa4:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001fa8:	b21b      	sxth	r3, r3
 8001faa:	4313      	orrs	r3, r2
 8001fac:	b21b      	sxth	r3, r3
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fac0 	bl	8000534 <__aeabi_i2d>
 8001fb4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001fb8:	f7fe fc50 	bl	800085c <__aeabi_ddiv>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001fc4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001fc8:	021b      	lsls	r3, r3, #8
 8001fca:	b21a      	sxth	r2, r3
 8001fcc:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001fd0:	b21b      	sxth	r3, r3
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	b21b      	sxth	r3, r3
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe faac 	bl	8000534 <__aeabi_i2d>
 8001fdc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001fe0:	f7fe fc3c 	bl	800085c <__aeabi_ddiv>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001fec:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001ff0:	021b      	lsls	r3, r3, #8
 8001ff2:	b21a      	sxth	r2, r3
 8001ff4:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001ff8:	b21b      	sxth	r3, r3
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	b21b      	sxth	r3, r3
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fa98 	bl	8000534 <__aeabi_i2d>
 8002004:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002008:	f7fe fc28 	bl	800085c <__aeabi_ddiv>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8002014:	e03b      	b.n	800208e <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8002016:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800201a:	021b      	lsls	r3, r3, #8
 800201c:	b21a      	sxth	r2, r3
 800201e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002022:	b21b      	sxth	r3, r3
 8002024:	4313      	orrs	r3, r2
 8002026:	b21b      	sxth	r3, r3
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe fa83 	bl	8000534 <__aeabi_i2d>
 800202e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002032:	f7fe fc13 	bl	800085c <__aeabi_ddiv>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800203e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	b21a      	sxth	r2, r3
 8002046:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800204a:	b21b      	sxth	r3, r3
 800204c:	4313      	orrs	r3, r2
 800204e:	b21b      	sxth	r3, r3
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fa6f 	bl	8000534 <__aeabi_i2d>
 8002056:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800205a:	f7fe fbff 	bl	800085c <__aeabi_ddiv>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8002066:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800206a:	021b      	lsls	r3, r3, #8
 800206c:	b21a      	sxth	r2, r3
 800206e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002072:	b21b      	sxth	r3, r3
 8002074:	4313      	orrs	r3, r2
 8002076:	b21b      	sxth	r3, r3
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe fa5b 	bl	8000534 <__aeabi_i2d>
 800207e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002082:	f7fe fbeb 	bl	800085c <__aeabi_ddiv>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 800208e:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8002092:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8002096:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002098:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800209a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800209e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80020a2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80020a6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80020aa:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80020ae:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80020b2:	ec49 8b14 	vmov	d4, r8, r9
 80020b6:	ec45 4b15 	vmov	d5, r4, r5
 80020ba:	ec41 0b16 	vmov	d6, r0, r1
 80020be:	ec43 2b17 	vmov	d7, r2, r3
}
 80020c2:	eeb0 0a44 	vmov.f32	s0, s8
 80020c6:	eef0 0a64 	vmov.f32	s1, s9
 80020ca:	eeb0 1a45 	vmov.f32	s2, s10
 80020ce:	eef0 1a65 	vmov.f32	s3, s11
 80020d2:	eeb0 2a46 	vmov.f32	s4, s12
 80020d6:	eef0 2a66 	vmov.f32	s5, s13
 80020da:	eeb0 3a47 	vmov.f32	s6, s14
 80020de:	eef0 3a67 	vmov.f32	s7, s15
 80020e2:	3778      	adds	r7, #120	@ 0x78
 80020e4:	46bd      	mov	sp, r7
 80020e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80020ea:	bf00      	nop
 80020ec:	3ff00000 	.word	0x3ff00000
 80020f0:	2000000a 	.word	0x2000000a
 80020f4:	20000004 	.word	0x20000004
 80020f8:	20000006 	.word	0x20000006
 80020fc:	20000008 	.word	0x20000008
 8002100:	2000000c 	.word	0x2000000c

08002104 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8002104:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002108:	b090      	sub	sp, #64	@ 0x40
 800210a:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 800210c:	201a      	movs	r0, #26
 800210e:	f7ff feb5 	bl	8001e7c <bno055_getVector>
 8002112:	eeb0 4a40 	vmov.f32	s8, s0
 8002116:	eef0 4a60 	vmov.f32	s9, s1
 800211a:	eeb0 5a41 	vmov.f32	s10, s2
 800211e:	eef0 5a61 	vmov.f32	s11, s3
 8002122:	eeb0 6a42 	vmov.f32	s12, s4
 8002126:	eef0 6a62 	vmov.f32	s13, s5
 800212a:	eeb0 7a43 	vmov.f32	s14, s6
 800212e:	eef0 7a63 	vmov.f32	s15, s7
 8002132:	ed87 4b08 	vstr	d4, [r7, #32]
 8002136:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 800213a:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 800213e:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8002142:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002146:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800214a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800214e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002152:	ec49 8b14 	vmov	d4, r8, r9
 8002156:	ec45 4b15 	vmov	d5, r4, r5
 800215a:	ec41 0b16 	vmov	d6, r0, r1
 800215e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002162:	eeb0 0a44 	vmov.f32	s0, s8
 8002166:	eef0 0a64 	vmov.f32	s1, s9
 800216a:	eeb0 1a45 	vmov.f32	s2, s10
 800216e:	eef0 1a65 	vmov.f32	s3, s11
 8002172:	eeb0 2a46 	vmov.f32	s4, s12
 8002176:	eef0 2a66 	vmov.f32	s5, s13
 800217a:	eeb0 3a47 	vmov.f32	s6, s14
 800217e:	eef0 3a67 	vmov.f32	s7, s15
 8002182:	3740      	adds	r7, #64	@ 0x40
 8002184:	46bd      	mov	sp, r7
 8002186:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800218c <IMU_GetEulerVector>:
  bno055_writeData(BNO055_AXIS_MAP_CONFIG, axisRemap);
  bno055_writeData(BNO055_AXIS_MAP_SIGN, axisMapSign);
}


void IMU_GetEulerVector(){
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
	  vectorIMU = bno055_getVectorEuler();
 8002190:	f7ff ffb8 	bl	8002104 <bno055_getVectorEuler>
 8002194:	eeb0 4a40 	vmov.f32	s8, s0
 8002198:	eef0 4a60 	vmov.f32	s9, s1
 800219c:	eeb0 5a41 	vmov.f32	s10, s2
 80021a0:	eef0 5a61 	vmov.f32	s11, s3
 80021a4:	eeb0 6a42 	vmov.f32	s12, s4
 80021a8:	eef0 6a62 	vmov.f32	s13, s5
 80021ac:	eeb0 7a43 	vmov.f32	s14, s6
 80021b0:	eef0 7a63 	vmov.f32	s15, s7
 80021b4:	4b14      	ldr	r3, [pc, #80]	@ (8002208 <IMU_GetEulerVector+0x7c>)
 80021b6:	ed83 4b00 	vstr	d4, [r3]
 80021ba:	ed83 5b02 	vstr	d5, [r3, #8]
 80021be:	ed83 6b04 	vstr	d6, [r3, #16]
 80021c2:	ed83 7b06 	vstr	d7, [r3, #24]
	  euler_roll = vectorIMU.z;
 80021c6:	4b10      	ldr	r3, [pc, #64]	@ (8002208 <IMU_GetEulerVector+0x7c>)
 80021c8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80021cc:	4610      	mov	r0, r2
 80021ce:	4619      	mov	r1, r3
 80021d0:	f7fe fd12 	bl	8000bf8 <__aeabi_d2f>
 80021d4:	4603      	mov	r3, r0
 80021d6:	4a0d      	ldr	r2, [pc, #52]	@ (800220c <IMU_GetEulerVector+0x80>)
 80021d8:	6013      	str	r3, [r2, #0]
	  euler_pitch= vectorIMU.y;
 80021da:	4b0b      	ldr	r3, [pc, #44]	@ (8002208 <IMU_GetEulerVector+0x7c>)
 80021dc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f7fe fd08 	bl	8000bf8 <__aeabi_d2f>
 80021e8:	4603      	mov	r3, r0
 80021ea:	4a09      	ldr	r2, [pc, #36]	@ (8002210 <IMU_GetEulerVector+0x84>)
 80021ec:	6013      	str	r3, [r2, #0]
	  euler_yaw = vectorIMU.x;
 80021ee:	4b06      	ldr	r3, [pc, #24]	@ (8002208 <IMU_GetEulerVector+0x7c>)
 80021f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80021f4:	4610      	mov	r0, r2
 80021f6:	4619      	mov	r1, r3
 80021f8:	f7fe fcfe 	bl	8000bf8 <__aeabi_d2f>
 80021fc:	4603      	mov	r3, r0
 80021fe:	4a05      	ldr	r2, [pc, #20]	@ (8002214 <IMU_GetEulerVector+0x88>)
 8002200:	6013      	str	r3, [r2, #0]
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20002c38 	.word	0x20002c38
 800220c:	20002c58 	.word	0x20002c58
 8002210:	20002c5c 	.word	0x20002c5c
 8002214:	20002c60 	.word	0x20002c60

08002218 <DS1307_GetAllDatas>:

/**
 * @brief Get all date and time info from the sensor and It has been used to organize the code
 *
 */
void DS1307_GetAllDatas(){
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
	 date   = DS1307_GetDate();
 800221c:	f000 f852 	bl	80022c4 <DS1307_GetDate>
 8002220:	4603      	mov	r3, r0
 8002222:	461a      	mov	r2, r3
 8002224:	4b10      	ldr	r3, [pc, #64]	@ (8002268 <DS1307_GetAllDatas+0x50>)
 8002226:	701a      	strb	r2, [r3, #0]
	 month  = DS1307_GetMonth();
 8002228:	f000 f858 	bl	80022dc <DS1307_GetMonth>
 800222c:	4603      	mov	r3, r0
 800222e:	461a      	mov	r2, r3
 8002230:	4b0e      	ldr	r3, [pc, #56]	@ (800226c <DS1307_GetAllDatas+0x54>)
 8002232:	701a      	strb	r2, [r3, #0]
	 year   = DS1307_GetYear();
 8002234:	f000 f85e 	bl	80022f4 <DS1307_GetYear>
 8002238:	4603      	mov	r3, r0
 800223a:	461a      	mov	r2, r3
 800223c:	4b0c      	ldr	r3, [pc, #48]	@ (8002270 <DS1307_GetAllDatas+0x58>)
 800223e:	801a      	strh	r2, [r3, #0]
	 hour   = DS1307_GetHour();
 8002240:	f000 f879 	bl	8002336 <DS1307_GetHour>
 8002244:	4603      	mov	r3, r0
 8002246:	461a      	mov	r2, r3
 8002248:	4b0a      	ldr	r3, [pc, #40]	@ (8002274 <DS1307_GetAllDatas+0x5c>)
 800224a:	701a      	strb	r2, [r3, #0]
	 minute = DS1307_GetMinute();
 800224c:	f000 f882 	bl	8002354 <DS1307_GetMinute>
 8002250:	4603      	mov	r3, r0
 8002252:	461a      	mov	r2, r3
 8002254:	4b08      	ldr	r3, [pc, #32]	@ (8002278 <DS1307_GetAllDatas+0x60>)
 8002256:	701a      	strb	r2, [r3, #0]
	 second = DS1307_GetSecond();
 8002258:	f000 f888 	bl	800236c <DS1307_GetSecond>
 800225c:	4603      	mov	r3, r0
 800225e:	461a      	mov	r2, r3
 8002260:	4b06      	ldr	r3, [pc, #24]	@ (800227c <DS1307_GetAllDatas+0x64>)
 8002262:	701a      	strb	r2, [r3, #0]
}
 8002264:	bf00      	nop
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20002c64 	.word	0x20002c64
 800226c:	20002c65 	.word	0x20002c65
 8002270:	20002c66 	.word	0x20002c66
 8002274:	20002c68 	.word	0x20002c68
 8002278:	20002c69 	.word	0x20002c69
 800227c:	20002c6a 	.word	0x20002c6a

08002280 <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af02      	add	r7, sp, #8
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 800228a:	4b0d      	ldr	r3, [pc, #52]	@ (80022c0 <DS1307_GetRegByte+0x40>)
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	1dfa      	adds	r2, r7, #7
 8002290:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	2301      	movs	r3, #1
 8002298:	21d0      	movs	r1, #208	@ 0xd0
 800229a:	f003 fc93 	bl	8005bc4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 800229e:	4b08      	ldr	r3, [pc, #32]	@ (80022c0 <DS1307_GetRegByte+0x40>)
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	f107 020f 	add.w	r2, r7, #15
 80022a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	2301      	movs	r3, #1
 80022ae:	21d0      	movs	r1, #208	@ 0xd0
 80022b0:	f003 fd86 	bl	8005dc0 <HAL_I2C_Master_Receive>
	return val;
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	200025bc 	.word	0x200025bc

080022c4 <DS1307_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS1307_GetDate(void) {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 80022c8:	2004      	movs	r0, #4
 80022ca:	f7ff ffd9 	bl	8002280 <DS1307_GetRegByte>
 80022ce:	4603      	mov	r3, r0
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 f85a 	bl	800238a <DS1307_DecodeBCD>
 80022d6:	4603      	mov	r3, r0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	bd80      	pop	{r7, pc}

080022dc <DS1307_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS1307_GetMonth(void) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 80022e0:	2005      	movs	r0, #5
 80022e2:	f7ff ffcd 	bl	8002280 <DS1307_GetRegByte>
 80022e6:	4603      	mov	r3, r0
 80022e8:	4618      	mov	r0, r3
 80022ea:	f000 f84e 	bl	800238a <DS1307_DecodeBCD>
 80022ee:	4603      	mov	r3, r0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <DS1307_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2099.
 */
uint16_t DS1307_GetYear(void) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 80022fa:	2010      	movs	r0, #16
 80022fc:	f7ff ffc0 	bl	8002280 <DS1307_GetRegByte>
 8002300:	4603      	mov	r3, r0
 8002302:	461a      	mov	r2, r3
 8002304:	0092      	lsls	r2, r2, #2
 8002306:	4413      	add	r3, r2
 8002308:	461a      	mov	r2, r3
 800230a:	0091      	lsls	r1, r2, #2
 800230c:	461a      	mov	r2, r3
 800230e:	460b      	mov	r3, r1
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	80fb      	strh	r3, [r7, #6]
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 8002316:	2006      	movs	r0, #6
 8002318:	f7ff ffb2 	bl	8002280 <DS1307_GetRegByte>
 800231c:	4603      	mov	r3, r0
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f833 	bl	800238a <DS1307_DecodeBCD>
 8002324:	4603      	mov	r3, r0
 8002326:	461a      	mov	r2, r3
 8002328:	88fb      	ldrh	r3, [r7, #6]
 800232a:	4413      	add	r3, r2
 800232c:	b29b      	uxth	r3, r3
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 8002336:	b580      	push	{r7, lr}
 8002338:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 800233a:	2002      	movs	r0, #2
 800233c:	f7ff ffa0 	bl	8002280 <DS1307_GetRegByte>
 8002340:	4603      	mov	r3, r0
 8002342:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002346:	b2db      	uxtb	r3, r3
 8002348:	4618      	mov	r0, r3
 800234a:	f000 f81e 	bl	800238a <DS1307_DecodeBCD>
 800234e:	4603      	mov	r3, r0
}
 8002350:	4618      	mov	r0, r3
 8002352:	bd80      	pop	{r7, pc}

08002354 <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 8002358:	2001      	movs	r0, #1
 800235a:	f7ff ff91 	bl	8002280 <DS1307_GetRegByte>
 800235e:	4603      	mov	r3, r0
 8002360:	4618      	mov	r0, r3
 8002362:	f000 f812 	bl	800238a <DS1307_DecodeBCD>
 8002366:	4603      	mov	r3, r0
}
 8002368:	4618      	mov	r0, r3
 800236a:	bd80      	pop	{r7, pc}

0800236c <DS1307_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS1307_GetSecond(void) {
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 8002370:	2000      	movs	r0, #0
 8002372:	f7ff ff85 	bl	8002280 <DS1307_GetRegByte>
 8002376:	4603      	mov	r3, r0
 8002378:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800237c:	b2db      	uxtb	r3, r3
 800237e:	4618      	mov	r0, r3
 8002380:	f000 f803 	bl	800238a <DS1307_DecodeBCD>
 8002384:	4603      	mov	r3, r0
}
 8002386:	4618      	mov	r0, r3
 8002388:	bd80      	pop	{r7, pc}

0800238a <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	4603      	mov	r3, r0
 8002392:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	091b      	lsrs	r3, r3, #4
 8002398:	b2db      	uxtb	r3, r3
 800239a:	461a      	mov	r2, r3
 800239c:	0092      	lsls	r2, r2, #2
 800239e:	4413      	add	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	4413      	add	r3, r2
 80023ae:	b2db      	uxtb	r3, r3
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <MS5611_ReadRaw_Press_Temp>:
	dev->Clb_Cf.crc = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;

}


void MS5611_ReadRaw_Press_Temp(MS5611_HandleTypeDef *dev){
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af02      	add	r7, sp, #8
 80023c2:	6078      	str	r0, [r7, #4]

	uint8_t RawDataD1[3]  = {0}; /*! D1 = Raw pressure value that will be compensated at other functions*/
 80023c4:	4b38      	ldr	r3, [pc, #224]	@ (80024a8 <MS5611_ReadRaw_Press_Temp+0xec>)
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	81bb      	strh	r3, [r7, #12]
 80023ca:	2300      	movs	r3, #0
 80023cc:	73bb      	strb	r3, [r7, #14]
	uint8_t RawDataD2[3]  = {0}; /*! D2 = Raw temperature value that will be compensated at other functions*/
 80023ce:	4b36      	ldr	r3, [pc, #216]	@ (80024a8 <MS5611_ReadRaw_Press_Temp+0xec>)
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	813b      	strh	r3, [r7, #8]
 80023d4:	2300      	movs	r3, #0
 80023d6:	72bb      	strb	r3, [r7, #10]
	 *
	 * @Attention! you must wait minimum 15 milisecond after each i2c command because of clock line and calculation times.
	 */

	/*! Gets D1(Raw Pressure)*/
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &osrs_4096_D1, 1, 1000); //(1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6818      	ldr	r0, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	8899      	ldrh	r1, [r3, #4]
 80023e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	2301      	movs	r3, #1
 80023e8:	4a30      	ldr	r2, [pc, #192]	@ (80024ac <MS5611_ReadRaw_Press_Temp+0xf0>)
 80023ea:	f003 fbeb 	bl	8005bc4 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80023ee:	2014      	movs	r0, #20
 80023f0:	f001 ffd0 	bl	8004394 <HAL_Delay>
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &adcReadCom , 1, 1000);	 //(2)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6818      	ldr	r0, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	8899      	ldrh	r1, [r3, #4]
 80023fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	2301      	movs	r3, #1
 8002404:	4a2a      	ldr	r2, [pc, #168]	@ (80024b0 <MS5611_ReadRaw_Press_Temp+0xf4>)
 8002406:	f003 fbdd 	bl	8005bc4 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800240a:	2014      	movs	r0, #20
 800240c:	f001 ffc2 	bl	8004394 <HAL_Delay>
	HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &RawDataD1[0], 3, 10000);	 //(3)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	8899      	ldrh	r1, [r3, #4]
 8002418:	f107 020c 	add.w	r2, r7, #12
 800241c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	2303      	movs	r3, #3
 8002424:	f003 fccc 	bl	8005dc0 <HAL_I2C_Master_Receive>
	dev->ClcPrms.D1 = (uint32_t)((RawDataD1[0]<<16) | (RawDataD1[1]<<8) | (RawDataD1[2]<<0)); // MSB|LSB|XLSB
 8002428:	7b3b      	ldrb	r3, [r7, #12]
 800242a:	041a      	lsls	r2, r3, #16
 800242c:	7b7b      	ldrb	r3, [r7, #13]
 800242e:	021b      	lsls	r3, r3, #8
 8002430:	4313      	orrs	r3, r2
 8002432:	7bba      	ldrb	r2, [r7, #14]
 8002434:	4313      	orrs	r3, r2
 8002436:	461a      	mov	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	615a      	str	r2, [r3, #20]

	/*! Gets D2(Raw Temperature)*/
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &osrs_4096_D2, 1, 1000); //(1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6818      	ldr	r0, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	8899      	ldrh	r1, [r3, #4]
 8002444:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	2301      	movs	r3, #1
 800244c:	4a19      	ldr	r2, [pc, #100]	@ (80024b4 <MS5611_ReadRaw_Press_Temp+0xf8>)
 800244e:	f003 fbb9 	bl	8005bc4 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8002452:	2014      	movs	r0, #20
 8002454:	f001 ff9e 	bl	8004394 <HAL_Delay>
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &adcReadCom , 1, 1000);  	 //(2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	8899      	ldrh	r1, [r3, #4]
 8002460:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	2301      	movs	r3, #1
 8002468:	4a11      	ldr	r2, [pc, #68]	@ (80024b0 <MS5611_ReadRaw_Press_Temp+0xf4>)
 800246a:	f003 fbab 	bl	8005bc4 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800246e:	2014      	movs	r0, #20
 8002470:	f001 ff90 	bl	8004394 <HAL_Delay>
	HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &RawDataD2[0], 3, 1000);  //(3)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6818      	ldr	r0, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	8899      	ldrh	r1, [r3, #4]
 800247c:	f107 0208 	add.w	r2, r7, #8
 8002480:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	2303      	movs	r3, #3
 8002488:	f003 fc9a 	bl	8005dc0 <HAL_I2C_Master_Receive>
	dev->ClcPrms.D2 = (uint32_t)((RawDataD2[0]<<16) | (RawDataD2[1]<<8) | (RawDataD2[2]<<0)); // MSB|LSB|XLSB
 800248c:	7a3b      	ldrb	r3, [r7, #8]
 800248e:	041a      	lsls	r2, r3, #16
 8002490:	7a7b      	ldrb	r3, [r7, #9]
 8002492:	021b      	lsls	r3, r3, #8
 8002494:	4313      	orrs	r3, r2
 8002496:	7aba      	ldrb	r2, [r7, #10]
 8002498:	4313      	orrs	r3, r2
 800249a:	461a      	mov	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	619a      	str	r2, [r3, #24]

}
 80024a0:	bf00      	nop
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	08013bc0 	.word	0x08013bc0
 80024ac:	2000000e 	.word	0x2000000e
 80024b0:	200025c0 	.word	0x200025c0
 80024b4:	2000000f 	.word	0x2000000f

080024b8 <MS5611_FirstCalculateDatas>:


void MS5611_FirstCalculateDatas(MS5611_HandleTypeDef *dev){
 80024b8:	b5b0      	push	{r4, r5, r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]

	/*! Calculate 1st order temperature and pressure  according to MS5611 1st order algorithm */
	dev->ClcPrms.dT   = dev->ClcPrms.D2 - dev->Clb_Cf.C5 * pow(2,8);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe f825 	bl	8000514 <__aeabi_ui2d>
 80024ca:	4604      	mov	r4, r0
 80024cc:	460d      	mov	r5, r1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	89db      	ldrh	r3, [r3, #14]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe f82e 	bl	8000534 <__aeabi_i2d>
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	4b69      	ldr	r3, [pc, #420]	@ (8002684 <MS5611_FirstCalculateDatas+0x1cc>)
 80024de:	f7fe f893 	bl	8000608 <__aeabi_dmul>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4620      	mov	r0, r4
 80024e8:	4629      	mov	r1, r5
 80024ea:	f7fd fed5 	bl	8000298 <__aeabi_dsub>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4610      	mov	r0, r2
 80024f4:	4619      	mov	r1, r3
 80024f6:	f7fe fb7f 	bl	8000bf8 <__aeabi_d2f>
 80024fa:	4602      	mov	r2, r0
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	61da      	str	r2, [r3, #28]
	dev->ClcPrms.OFF  = dev->Clb_Cf.C2 * pow(2,17) + (dev->Clb_Cf.C4 * dev->ClcPrms.dT) / pow(2,6);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	891b      	ldrh	r3, [r3, #8]
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe f815 	bl	8000534 <__aeabi_i2d>
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8002512:	f7fe f879 	bl	8000608 <__aeabi_dmul>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4614      	mov	r4, r2
 800251c:	461d      	mov	r5, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	899b      	ldrh	r3, [r3, #12]
 8002522:	ee07 3a90 	vmov	s15, r3
 8002526:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002534:	ee17 0a90 	vmov	r0, s15
 8002538:	f7fe f80e 	bl	8000558 <__aeabi_f2d>
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	4b51      	ldr	r3, [pc, #324]	@ (8002688 <MS5611_FirstCalculateDatas+0x1d0>)
 8002542:	f7fe f98b 	bl	800085c <__aeabi_ddiv>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4620      	mov	r0, r4
 800254c:	4629      	mov	r1, r5
 800254e:	f7fd fea5 	bl	800029c <__adddf3>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4610      	mov	r0, r2
 8002558:	4619      	mov	r1, r3
 800255a:	f7fe fb4d 	bl	8000bf8 <__aeabi_d2f>
 800255e:	4602      	mov	r2, r0
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	629a      	str	r2, [r3, #40]	@ 0x28
	dev->ClcPrms.SENS = dev->Clb_Cf.C1 * pow(2,16) + (dev->Clb_Cf.C3 * dev->ClcPrms.dT) / pow(2,7);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	88db      	ldrh	r3, [r3, #6]
 8002568:	4618      	mov	r0, r3
 800256a:	f7fd ffe3 	bl	8000534 <__aeabi_i2d>
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	4b46      	ldr	r3, [pc, #280]	@ (800268c <MS5611_FirstCalculateDatas+0x1d4>)
 8002574:	f7fe f848 	bl	8000608 <__aeabi_dmul>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4614      	mov	r4, r2
 800257e:	461d      	mov	r5, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	895b      	ldrh	r3, [r3, #10]
 8002584:	ee07 3a90 	vmov	s15, r3
 8002588:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002596:	ee17 0a90 	vmov	r0, s15
 800259a:	f7fd ffdd 	bl	8000558 <__aeabi_f2d>
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002690 <MS5611_FirstCalculateDatas+0x1d8>)
 80025a4:	f7fe f95a 	bl	800085c <__aeabi_ddiv>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4620      	mov	r0, r4
 80025ae:	4629      	mov	r1, r5
 80025b0:	f7fd fe74 	bl	800029c <__adddf3>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	f7fe fb1c 	bl	8000bf8 <__aeabi_d2f>
 80025c0:	4602      	mov	r2, r0
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	62da      	str	r2, [r3, #44]	@ 0x2c

	dev->ClcPrms.TEMP = 2000 + dev->ClcPrms.dT * dev->Clb_Cf.C6 / pow(2,23);								//Actual temperature data
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	ed93 7a07 	vldr	s14, [r3, #28]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	8a1b      	ldrh	r3, [r3, #16]
 80025d0:	ee07 3a90 	vmov	s15, r3
 80025d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025dc:	ee17 0a90 	vmov	r0, s15
 80025e0:	f7fd ffba 	bl	8000558 <__aeabi_f2d>
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002694 <MS5611_FirstCalculateDatas+0x1dc>)
 80025ea:	f7fe f937 	bl	800085c <__aeabi_ddiv>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4610      	mov	r0, r2
 80025f4:	4619      	mov	r1, r3
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	4b27      	ldr	r3, [pc, #156]	@ (8002698 <MS5611_FirstCalculateDatas+0x1e0>)
 80025fc:	f7fd fe4e 	bl	800029c <__adddf3>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4610      	mov	r0, r2
 8002606:	4619      	mov	r1, r3
 8002608:	f7fe faf6 	bl	8000bf8 <__aeabi_d2f>
 800260c:	4602      	mov	r2, r0
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	621a      	str	r2, [r3, #32]
	dev->ClcPrms.P	  = ((dev->ClcPrms.D1 * dev->ClcPrms.SENS / pow(2,21) - dev->ClcPrms.OFF))/pow(2,15);	//Actual pressure data
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	ee07 3a90 	vmov	s15, r3
 800261a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002628:	ee17 0a90 	vmov	r0, s15
 800262c:	f7fd ff94 	bl	8000558 <__aeabi_f2d>
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	4b19      	ldr	r3, [pc, #100]	@ (800269c <MS5611_FirstCalculateDatas+0x1e4>)
 8002636:	f7fe f911 	bl	800085c <__aeabi_ddiv>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4614      	mov	r4, r2
 8002640:	461d      	mov	r5, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002646:	4618      	mov	r0, r3
 8002648:	f7fd ff86 	bl	8000558 <__aeabi_f2d>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4620      	mov	r0, r4
 8002652:	4629      	mov	r1, r5
 8002654:	f7fd fe20 	bl	8000298 <__aeabi_dsub>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4610      	mov	r0, r2
 800265e:	4619      	mov	r1, r3
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	4b0e      	ldr	r3, [pc, #56]	@ (80026a0 <MS5611_FirstCalculateDatas+0x1e8>)
 8002666:	f7fe f8f9 	bl	800085c <__aeabi_ddiv>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	4610      	mov	r0, r2
 8002670:	4619      	mov	r1, r3
 8002672:	f7fe fac1 	bl	8000bf8 <__aeabi_d2f>
 8002676:	4602      	mov	r2, r0
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	625a      	str	r2, [r3, #36]	@ 0x24

}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bdb0      	pop	{r4, r5, r7, pc}
 8002684:	40700000 	.word	0x40700000
 8002688:	40500000 	.word	0x40500000
 800268c:	40f00000 	.word	0x40f00000
 8002690:	40600000 	.word	0x40600000
 8002694:	41600000 	.word	0x41600000
 8002698:	409f4000 	.word	0x409f4000
 800269c:	41400000 	.word	0x41400000
 80026a0:	40e00000 	.word	0x40e00000

080026a4 <MS5611_SecondCalculateDatas>:


void MS5611_SecondCalculateDatas(MS5611_HandleTypeDef *dev){
 80026a4:	b5b0      	push	{r4, r5, r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]

	if(dev->ClcPrms.TEMP < 2000){
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	edd3 7a08 	vldr	s15, [r3, #32]
 80026b2:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 80028ec <MS5611_SecondCalculateDatas+0x248>
 80026b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026be:	f140 80e3 	bpl.w	8002888 <MS5611_SecondCalculateDatas+0x1e4>

			/*! Low Temperature */
			dev->ClcPrms.TEMP2 = (dev->ClcPrms.dT * dev->ClcPrms.dT) / pow(2,31);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	ed93 7a07 	vldr	s14, [r3, #28]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	edd3 7a07 	vldr	s15, [r3, #28]
 80026ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026d2:	eddf 6a87 	vldr	s13, [pc, #540]	@ 80028f0 <MS5611_SecondCalculateDatas+0x24c>
 80026d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			dev->ClcPrms.OFF2  = 5 * ((dev->ClcPrms.TEMP - 2000) * (dev->ClcPrms.TEMP - 2000)) / pow(2,1);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	edd3 7a08 	vldr	s15, [r3, #32]
 80026e6:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 80028ec <MS5611_SecondCalculateDatas+0x248>
 80026ea:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	edd3 7a08 	vldr	s15, [r3, #32]
 80026f4:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 80028ec <MS5611_SecondCalculateDatas+0x248>
 80026f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80026fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002700:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002704:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002708:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800270c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
			dev->ClcPrms.SENS2 = 5 * ((dev->ClcPrms.TEMP - 2000) * (dev->ClcPrms.TEMP - 2000)) / pow(2,2);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	edd3 7a08 	vldr	s15, [r3, #32]
 800271c:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 80028ec <MS5611_SecondCalculateDatas+0x248>
 8002720:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	edd3 7a08 	vldr	s15, [r3, #32]
 800272a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80028ec <MS5611_SecondCalculateDatas+0x248>
 800272e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002736:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800273a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800273e:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002742:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

					if(dev->ClcPrms.TEMP < -1500){
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002752:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80028f4 <MS5611_SecondCalculateDatas+0x250>
 8002756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800275a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275e:	d571      	bpl.n	8002844 <MS5611_SecondCalculateDatas+0x1a0>
						/*! Very Low Temperature */
						dev->ClcPrms.OFF2  = dev->ClcPrms.OFF2 + 7 * ((dev->ClcPrms.TEMP + 1500) * (dev->ClcPrms.TEMP + 1500));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	edd3 7a08 	vldr	s15, [r3, #32]
 800276c:	eddf 6a62 	vldr	s13, [pc, #392]	@ 80028f8 <MS5611_SecondCalculateDatas+0x254>
 8002770:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	edd3 7a08 	vldr	s15, [r3, #32]
 800277a:	ed9f 6a5f 	vldr	s12, [pc, #380]	@ 80028f8 <MS5611_SecondCalculateDatas+0x254>
 800277e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002782:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002786:	eef1 6a0c 	vmov.f32	s13, #28	@ 0x40e00000  7.0
 800278a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800278e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
						dev->ClcPrms.SENS2 = dev->ClcPrms.SENS2 + 11 * ((dev->ClcPrms.TEMP + 1500) * (dev->ClcPrms.TEMP + 1500)) / pow(2,1);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800279c:	4618      	mov	r0, r3
 800279e:	f7fd fedb 	bl	8000558 <__aeabi_f2d>
 80027a2:	4604      	mov	r4, r0
 80027a4:	460d      	mov	r5, r1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	edd3 7a08 	vldr	s15, [r3, #32]
 80027ac:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80028f8 <MS5611_SecondCalculateDatas+0x254>
 80027b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	edd3 7a08 	vldr	s15, [r3, #32]
 80027ba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80028f8 <MS5611_SecondCalculateDatas+0x254>
 80027be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c6:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 80027ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027ce:	ee17 0a90 	vmov	r0, s15
 80027d2:	f7fd fec1 	bl	8000558 <__aeabi_f2d>
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80027de:	f7fe f83d 	bl	800085c <__aeabi_ddiv>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	4620      	mov	r0, r4
 80027e8:	4629      	mov	r1, r5
 80027ea:	f7fd fd57 	bl	800029c <__adddf3>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4610      	mov	r0, r2
 80027f4:	4619      	mov	r1, r3
 80027f6:	f7fe f9ff 	bl	8000bf8 <__aeabi_d2f>
 80027fa:	4602      	mov	r2, r0
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	635a      	str	r2, [r3, #52]	@ 0x34

						dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	ed93 7a08 	vldr	s14, [r3, #32]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800280c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	edc3 7a08 	vstr	s15, [r3, #32]
						dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002822:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
						dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002838:	ee77 7a67 	vsub.f32	s15, s14, s15
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
			dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
			dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
			dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;

		}
}
 8002842:	e04e      	b.n	80028e2 <MS5611_SecondCalculateDatas+0x23e>
						dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	ed93 7a08 	vldr	s14, [r3, #32]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002850:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	edc3 7a08 	vstr	s15, [r3, #32]
						dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002866:	ee77 7a67 	vsub.f32	s15, s14, s15
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
						dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800287c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 8002886:	e02c      	b.n	80028e2 <MS5611_SecondCalculateDatas+0x23e>
			dev->ClcPrms.TEMP2 = 0;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	639a      	str	r2, [r3, #56]	@ 0x38
			dev->ClcPrms.OFF2  = 0;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	631a      	str	r2, [r3, #48]	@ 0x30
			dev->ClcPrms.SENS2 = 0;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	635a      	str	r2, [r3, #52]	@ 0x34
			dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	ed93 7a08 	vldr	s14, [r3, #32]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80028ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	edc3 7a08 	vstr	s15, [r3, #32]
			dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80028c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
			dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80028d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bdb0      	pop	{r4, r5, r7, pc}
 80028ea:	bf00      	nop
 80028ec:	44fa0000 	.word	0x44fa0000
 80028f0:	4f000000 	.word	0x4f000000
 80028f4:	c4bb8000 	.word	0xc4bb8000
 80028f8:	44bb8000 	.word	0x44bb8000
 80028fc:	00000000 	.word	0x00000000

08002900 <MS5611_Calc_Altitude>:


float MS5611_Calc_Altitude(MS5611_HandleTypeDef *dev){
 8002900:	b5b0      	push	{r4, r5, r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

	return  ((SeaLevelTemp  / GradientTemp)
			* (1 - pow(((dev->ClcPrms.P/2) / SeaLevelPress),((GasCoefficient * GradientTemp)/GravityAccel)))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800290e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002912:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002916:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80029a0 <MS5611_Calc_Altitude+0xa0>
 800291a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800291e:	ee16 0a90 	vmov	r0, s13
 8002922:	f7fd fe19 	bl	8000558 <__aeabi_f2d>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	ed9f 1b19 	vldr	d1, [pc, #100]	@ 8002990 <MS5611_Calc_Altitude+0x90>
 800292e:	ec43 2b10 	vmov	d0, r2, r3
 8002932:	f010 f881 	bl	8012a38 <pow>
 8002936:	ec53 2b10 	vmov	r2, r3, d0
 800293a:	f04f 0000 	mov.w	r0, #0
 800293e:	4919      	ldr	r1, [pc, #100]	@ (80029a4 <MS5611_Calc_Altitude+0xa4>)
 8002940:	f7fd fcaa 	bl	8000298 <__aeabi_dsub>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4610      	mov	r0, r2
 800294a:	4619      	mov	r1, r3
 800294c:	a312      	add	r3, pc, #72	@ (adr r3, 8002998 <MS5611_Calc_Altitude+0x98>)
 800294e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002952:	f7fd fe59 	bl	8000608 <__aeabi_dmul>
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	4614      	mov	r4, r2
 800295c:	461d      	mov	r5, r3
			- dev->FixedAltitude) ;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002962:	4618      	mov	r0, r3
 8002964:	f7fd fdf8 	bl	8000558 <__aeabi_f2d>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4620      	mov	r0, r4
 800296e:	4629      	mov	r1, r5
 8002970:	f7fd fc92 	bl	8000298 <__aeabi_dsub>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	4610      	mov	r0, r2
 800297a:	4619      	mov	r1, r3
 800297c:	f7fe f93c 	bl	8000bf8 <__aeabi_d2f>
 8002980:	4603      	mov	r3, r0
 8002982:	ee07 3a90 	vmov	s15, r3

}
 8002986:	eeb0 0a67 	vmov.f32	s0, s15
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bdb0      	pop	{r4, r5, r7, pc}
 8002990:	fd017917 	.word	0xfd017917
 8002994:	3fc85ace 	.word	0x3fc85ace
 8002998:	9d89d89d 	.word	0x9d89d89d
 800299c:	40e5a558 	.word	0x40e5a558
 80029a0:	47c5e680 	.word	0x47c5e680
 80029a4:	3ff00000 	.word	0x3ff00000

080029a8 <MS5611_Read_ActVal>:


void MS5611_Read_ActVal(MS5611_HandleTypeDef *dev){
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]

	/*! Read raw pressure and temperature MSB | LSB | XLSB values from the sensor*/
	MS5611_ReadRaw_Press_Temp(dev);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff fd03 	bl	80023bc <MS5611_ReadRaw_Press_Temp>

	/*! Calculate 1st order temperature and pressure  according to MS5611 1st order algorithm */
	MS5611_FirstCalculateDatas(dev);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff fd7e 	bl	80024b8 <MS5611_FirstCalculateDatas>

	/*! If it's needed, Calculate 2st order temperature and pressure  according to MS5611 2st order algorithm */
	MS5611_SecondCalculateDatas(dev);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff fe71 	bl	80026a4 <MS5611_SecondCalculateDatas>

	/*! Vertical Altitude is calculated by using pressure and some coefficients */
	MS5611_Altitude = MS5611_Calc_Altitude(dev);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff ff9c 	bl	8002900 <MS5611_Calc_Altitude>
 80029c8:	eef0 7a40 	vmov.f32	s15, s0
 80029cc:	4b24      	ldr	r3, [pc, #144]	@ (8002a60 <MS5611_Read_ActVal+0xb8>)
 80029ce:	edc3 7a00 	vstr	s15, [r3]

	/*! Vertical Speed is calculated by using differential of locations */
	MS5611_Calc_VertSpd(dev, MS5611_Altitude, &MS5611_VertSpeed);
 80029d2:	4b23      	ldr	r3, [pc, #140]	@ (8002a60 <MS5611_Read_ActVal+0xb8>)
 80029d4:	edd3 7a00 	vldr	s15, [r3]
 80029d8:	4922      	ldr	r1, [pc, #136]	@ (8002a64 <MS5611_Read_ActVal+0xbc>)
 80029da:	eeb0 0a67 	vmov.f32	s0, s15
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f84c 	bl	8002a7c <MS5611_Calc_VertSpd>

	/*! Vertical acceleration is calculated by using differential of speed */
	MS5611_Calc_VertAcc(dev, MS5611_VertSpeed, &MS5611_VertAcc);
 80029e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002a64 <MS5611_Read_ActVal+0xbc>)
 80029e6:	edd3 7a00 	vldr	s15, [r3]
 80029ea:	491f      	ldr	r1, [pc, #124]	@ (8002a68 <MS5611_Read_ActVal+0xc0>)
 80029ec:	eeb0 0a67 	vmov.f32	s0, s15
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f862 	bl	8002aba <MS5611_Calc_VertAcc>

	/*! It's applied force on to the object that is given mass from the user */
	MS5611_Calc_gForce(dev, &MS5611_gForce, SatCar_Mass, MS5611_VertAcc);
 80029f6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a6c <MS5611_Read_ActVal+0xc4>)
 80029f8:	edd3 7a00 	vldr	s15, [r3]
 80029fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002a68 <MS5611_Read_ActVal+0xc0>)
 80029fe:	ed93 7a00 	vldr	s14, [r3]
 8002a02:	eef0 0a47 	vmov.f32	s1, s14
 8002a06:	eeb0 0a67 	vmov.f32	s0, s15
 8002a0a:	4919      	ldr	r1, [pc, #100]	@ (8002a70 <MS5611_Read_ActVal+0xc8>)
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f873 	bl	8002af8 <MS5611_Calc_gForce>

	/*! Pressure unit is mBar and Temperature unit is celcius degress*/
	MS5611_Press = dev->ClcPrms.P/2 ;			//@e.g :
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8002a18:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002a1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a20:	4b14      	ldr	r3, [pc, #80]	@ (8002a74 <MS5611_Read_ActVal+0xcc>)
 8002a22:	edc3 7a00 	vstr	s15, [r3]
	MS5611_Temp  = dev->ClcPrms.TEMP * 0.01; 		//@e.g : 25.57 CelciusDegress
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fd fd94 	bl	8000558 <__aeabi_f2d>
 8002a30:	a309      	add	r3, pc, #36	@ (adr r3, 8002a58 <MS5611_Read_ActVal+0xb0>)
 8002a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a36:	f7fd fde7 	bl	8000608 <__aeabi_dmul>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4610      	mov	r0, r2
 8002a40:	4619      	mov	r1, r3
 8002a42:	f7fe f8d9 	bl	8000bf8 <__aeabi_d2f>
 8002a46:	4603      	mov	r3, r0
 8002a48:	4a0b      	ldr	r2, [pc, #44]	@ (8002a78 <MS5611_Read_ActVal+0xd0>)
 8002a4a:	6013      	str	r3, [r2, #0]

}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	f3af 8000 	nop.w
 8002a58:	47ae147b 	.word	0x47ae147b
 8002a5c:	3f847ae1 	.word	0x3f847ae1
 8002a60:	20002a28 	.word	0x20002a28
 8002a64:	20002a2c 	.word	0x20002a2c
 8002a68:	20002a30 	.word	0x20002a30
 8002a6c:	20002a38 	.word	0x20002a38
 8002a70:	20002a34 	.word	0x20002a34
 8002a74:	20002a20 	.word	0x20002a20
 8002a78:	20002a24 	.word	0x20002a24

08002a7c <MS5611_Calc_VertSpd>:

}


/*!Vertical Speed is calculated by using differential of locations "V = (X1 - X0) /1 second" */
void MS5611_Calc_VertSpd(MS5611_HandleTypeDef *dev, float MS5611_Altitude, float *MS5611_VertSpeed){
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	ed87 0a02 	vstr	s0, [r7, #8]
 8002a88:	6079      	str	r1, [r7, #4]

	dev->DeltaData.alt1 = (MS5611_Altitude);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	641a      	str	r2, [r3, #64]	@ 0x40
	(*MS5611_VertSpeed) = (dev->DeltaData.alt1 - dev->DeltaData.alt0);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002a9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	edc3 7a00 	vstr	s15, [r3]
	dev->DeltaData.alt0 = dev->DeltaData.alt1;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 8002aae:	bf00      	nop
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <MS5611_Calc_VertAcc>:

/*! Vertical acceleration is calculated by using differential of speed "a = (V1 - V0) / 1 second"  */
void MS5611_Calc_VertAcc(MS5611_HandleTypeDef *dev, float MS5611_VertSpeed,float *MS5611_VertAcc){
 8002aba:	b480      	push	{r7}
 8002abc:	b085      	sub	sp, #20
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	ed87 0a02 	vstr	s0, [r7, #8]
 8002ac6:	6079      	str	r1, [r7, #4]

	dev->DeltaData.spd1 = (MS5611_VertSpeed);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	659a      	str	r2, [r3, #88]	@ 0x58
	(*MS5611_VertAcc)	= (dev->DeltaData.spd1 - dev->DeltaData.spd0);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002ada:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	edc3 7a00 	vstr	s15, [r3]
	dev->DeltaData.spd0 = dev->DeltaData.spd1;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	655a      	str	r2, [r3, #84]	@ 0x54

}
 8002aec:	bf00      	nop
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <MS5611_Calc_gForce>:

/*! It's applied force on to the object that is given mass from the user. =" gForce = ObjectMass * (VerticalAcceleration / 9.80) " */
void MS5611_Calc_gForce(MS5611_HandleTypeDef *dev, float *MS5611_gForce, float SatCar_Mass, float MS5611_VertAcc){
 8002af8:	b5b0      	push	{r4, r5, r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	ed87 0a01 	vstr	s0, [r7, #4]
 8002b06:	edc7 0a00 	vstr	s1, [r7]

	(*MS5611_gForce) = (((MS5611_VertAcc)/GravityAccel)*(SatCar_Mass));
 8002b0a:	6838      	ldr	r0, [r7, #0]
 8002b0c:	f7fd fd24 	bl	8000558 <__aeabi_f2d>
 8002b10:	a30f      	add	r3, pc, #60	@ (adr r3, 8002b50 <MS5611_Calc_gForce+0x58>)
 8002b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b16:	f7fd fea1 	bl	800085c <__aeabi_ddiv>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	4614      	mov	r4, r2
 8002b20:	461d      	mov	r5, r3
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7fd fd18 	bl	8000558 <__aeabi_f2d>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	4629      	mov	r1, r5
 8002b30:	f7fd fd6a 	bl	8000608 <__aeabi_dmul>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f7fe f85c 	bl	8000bf8 <__aeabi_d2f>
 8002b40:	4602      	mov	r2, r0
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	601a      	str	r2, [r3, #0]

}
 8002b46:	bf00      	nop
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	3f141206 	.word	0x3f141206
 8002b54:	40239cc6 	.word	0x40239cc6

08002b58 <SubSys_SeparationMechanism_Lock_PayloadToCarrier>:
#include "SubSys_SeparationControl_Driver.h"


void SubSys_SeparationMechanism_Lock_PayloadToCarrier(){
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0

	SubSys_Actuator_Servo_MoveTo(&dev_Servo_Separation,0);
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	4802      	ldr	r0, [pc, #8]	@ (8002b68 <SubSys_SeparationMechanism_Lock_PayloadToCarrier+0x10>)
 8002b60:	f7fe fb4e 	bl	8001200 <SubSys_Actuator_Servo_MoveTo>

}
 8002b64:	bf00      	nop
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	20002c6c 	.word	0x20002c6c

08002b6c <SubSys_SeparationMechanism_UnLock_PayloadFromCarrier>:
void SubSys_SeparationMechanism_UnLock_PayloadFromCarrier(){
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0

	SubSys_Actuator_Servo_MoveTo(&dev_Servo_Separation,90);
 8002b70:	215a      	movs	r1, #90	@ 0x5a
 8002b72:	4802      	ldr	r0, [pc, #8]	@ (8002b7c <SubSys_SeparationMechanism_UnLock_PayloadFromCarrier+0x10>)
 8002b74:	f7fe fb44 	bl	8001200 <SubSys_Actuator_Servo_MoveTo>

}
 8002b78:	bf00      	nop
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	20002c6c 	.word	0x20002c6c

08002b80 <SubSys_WirelessCom_Config_WORK_MODE>:
	}

}


void SubSys_WirelessCom_Config_WORK_MODE(SubSys_WirelesscomConfig_HandleTypeDef    *dev){
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]

	switch(dev->Mode_SW){
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	7ddb      	ldrb	r3, [r3, #23]
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d84f      	bhi.n	8002c30 <SubSys_WirelessCom_Config_WORK_MODE+0xb0>
 8002b90:	a201      	add	r2, pc, #4	@ (adr r2, 8002b98 <SubSys_WirelessCom_Config_WORK_MODE+0x18>)
 8002b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b96:	bf00      	nop
 8002b98:	08002ba9 	.word	0x08002ba9
 8002b9c:	08002bcb 	.word	0x08002bcb
 8002ba0:	08002bed 	.word	0x08002bed
 8002ba4:	08002c0f 	.word	0x08002c0f

		case NormalMode :	/*! UART and wireless channel are open, transparent transmission is on*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_RESET);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6858      	ldr	r0, [r3, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	8b5b      	ldrh	r3, [r3, #26]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f002 fea8 	bl	8005908 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_RESET);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6858      	ldr	r0, [r3, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	8b1b      	ldrh	r3, [r3, #24]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	f002 fea0 	bl	8005908 <HAL_GPIO_WritePin>
		break;
 8002bc8:	e032      	b.n	8002c30 <SubSys_WirelessCom_Config_WORK_MODE+0xb0>

		case WORsending :	/*! WOR Transmitter (it sends packet in every period)*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_RESET);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6858      	ldr	r0, [r3, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	8b5b      	ldrh	r3, [r3, #26]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f002 fe97 	bl	8005908 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_SET);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6858      	ldr	r0, [r3, #4]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	8b1b      	ldrh	r3, [r3, #24]
 8002be2:	2201      	movs	r2, #1
 8002be4:	4619      	mov	r1, r3
 8002be6:	f002 fe8f 	bl	8005908 <HAL_GPIO_WritePin>
		break;
 8002bea:	e021      	b.n	8002c30 <SubSys_WirelessCom_Config_WORK_MODE+0xb0>

		case WORreceiving :	/*! WOR Receiver (it sends packet in every period)*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_SET);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6858      	ldr	r0, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	8b5b      	ldrh	r3, [r3, #26]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	f002 fe86 	bl	8005908 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_RESET);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6858      	ldr	r0, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	8b1b      	ldrh	r3, [r3, #24]
 8002c04:	2200      	movs	r2, #0
 8002c06:	4619      	mov	r1, r3
 8002c08:	f002 fe7e 	bl	8005908 <HAL_GPIO_WritePin>
		break;
 8002c0c:	e010      	b.n	8002c30 <SubSys_WirelessCom_Config_WORK_MODE+0xb0>

		case DeepSleep :	/*! Module goes to sleep so provides you to configure settings*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_SET);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6858      	ldr	r0, [r3, #4]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	8b5b      	ldrh	r3, [r3, #26]
 8002c16:	2201      	movs	r2, #1
 8002c18:	4619      	mov	r1, r3
 8002c1a:	f002 fe75 	bl	8005908 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_SET);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6858      	ldr	r0, [r3, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	8b1b      	ldrh	r3, [r3, #24]
 8002c26:	2201      	movs	r2, #1
 8002c28:	4619      	mov	r1, r3
 8002c2a:	f002 fe6d 	bl	8005908 <HAL_GPIO_WritePin>
		break;
 8002c2e:	bf00      	nop

	}

}
 8002c30:	bf00      	nop
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <SubSys_WirelessCom_Telemetry_Transfer_From_To>:
  * 																 	  @arg 1 : Sat_Payload
  * 																  	  @arg 2 : Ground_Sation
  * @param SubSys_WirelessCom_APP_HandleTypeDef *dev_WirelessComApp , created object for wireless communication
  * @retval NONE
  */
void SubSys_WirelessCom_Telemetry_Transfer_From_To(MissionUnit From_X, MissionUnit To_Y, SubSys_WirelessCom_APP_HandleTypeDef *dev_WirelessComApp){
 8002c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c3c:	b09b      	sub	sp, #108	@ 0x6c
 8002c3e:	af0e      	add	r7, sp, #56	@ 0x38
 8002c40:	4603      	mov	r3, r0
 8002c42:	623a      	str	r2, [r7, #32]
 8002c44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002c48:	460b      	mov	r3, r1
 8002c4a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/*! Use it when working on Sat_Carrier flight software*/
	if(From_X == Sat_Payload && To_Y == GroundStation){
 8002c4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	f040 808b 	bne.w	8002d6e <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x136>
 8002c58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	f040 8086 	bne.w	8002d6e <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x136>

		/*! Create message packet for Carrier for sending to the Payload*/
		SubSys_WirelessCom_Telemetry_Create_Packet_For(Sat_Payload, dev_WirelessComApp);
 8002c62:	6a39      	ldr	r1, [r7, #32]
 8002c64:	2002      	movs	r0, #2
 8002c66:	f000 f88b 	bl	8002d80 <SubSys_WirelessCom_Telemetry_Create_Packet_For>

				/* 8 pairs of '<>' and y Byte data are x Byte as total budget*/
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	f103 06c8 	add.w	r6, r3, #200	@ 0xc8
																		"<%.2f><%.2f><%.1f><%.1f><%.2f><%.4f><%.4f><%.1f>\n",
																															dev_WirelessComApp->Variable.Carr_Pressure,
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fd fc6e 	bl	8000558 <__aeabi_f2d>
 8002c7c:	e9c7 0106 	strd	r0, r1, [r7, #24]
																															dev_WirelessComApp->Variable.Carr_Temperature,
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fc66 	bl	8000558 <__aeabi_f2d>
 8002c8c:	4682      	mov	sl, r0
 8002c8e:	468b      	mov	fp, r1
																															dev_WirelessComApp->Variable.Carr_VertHeight,
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fd fc5e 	bl	8000558 <__aeabi_f2d>
 8002c9c:	e9c7 0104 	strd	r0, r1, [r7, #16]
																															dev_WirelessComApp->Variable.Carr_VertSpeed,
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fd fc56 	bl	8000558 <__aeabi_f2d>
 8002cac:	e9c7 0102 	strd	r0, r1, [r7, #8]
																															dev_WirelessComApp->Variable.Carr_BatteryVoltage,
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fd fc4e 	bl	8000558 <__aeabi_f2d>
 8002cbc:	e9c7 0100 	strd	r0, r1, [r7]
																															dev_WirelessComApp->Variable.Carr_GPS_Latitude,
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fd fc46 	bl	8000558 <__aeabi_f2d>
 8002ccc:	4680      	mov	r8, r0
 8002cce:	4689      	mov	r9, r1
																															dev_WirelessComApp->Variable.Carr_GPS_Longitude,
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fd fc3e 	bl	8000558 <__aeabi_f2d>
 8002cdc:	4604      	mov	r4, r0
 8002cde:	460d      	mov	r5, r1
																															dev_WirelessComApp->Variable.Carr_GPS_Altitude);
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fd fc36 	bl	8000558 <__aeabi_f2d>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8002cf4:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 8002cf8:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8002cfc:	ed97 7b00 	vldr	d7, [r7]
 8002d00:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002d04:	ed97 7b02 	vldr	d7, [r7, #8]
 8002d08:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002d0c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002d10:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002d14:	e9cd ab00 	strd	sl, fp, [sp]
 8002d18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d1c:	4916      	ldr	r1, [pc, #88]	@ (8002d78 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x140>)
 8002d1e:	4630      	mov	r0, r6
 8002d20:	f00b fe22 	bl	800e968 <siprintf>
 8002d24:	4603      	mov	r3, r0
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	4b14      	ldr	r3, [pc, #80]	@ (8002d7c <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x144>)
 8002d2a:	801a      	strh	r2, [r3, #0]

				for(int i = 0 ; i < Written_Bytes ; i++){
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d30:	e00b      	b.n	8002d4a <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x112>

					dev_WirelessComApp->Buffer.Tx[i+3] = dev_WirelessComApp->Buffer.Temp[i];
 8002d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d34:	3303      	adds	r3, #3
 8002d36:	6a39      	ldr	r1, [r7, #32]
 8002d38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d3a:	440a      	add	r2, r1
 8002d3c:	32c8      	adds	r2, #200	@ 0xc8
 8002d3e:	7811      	ldrb	r1, [r2, #0]
 8002d40:	6a3a      	ldr	r2, [r7, #32]
 8002d42:	54d1      	strb	r1, [r2, r3]
				for(int i = 0 ; i < Written_Bytes ; i++){
 8002d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d46:	3301      	adds	r3, #1
 8002d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d7c <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x144>)
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d52:	4293      	cmp	r3, r2
 8002d54:	dbed      	blt.n	8002d32 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0xfa>
				}




				HAL_UART_Transmit(dev_WirelessComApp->huartX, dev_WirelessComApp->Buffer.Tx , (Written_Bytes+3), 1000);
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	f8d3 01b4 	ldr.w	r0, [r3, #436]	@ 0x1b4
 8002d5c:	6a39      	ldr	r1, [r7, #32]
 8002d5e:	4b07      	ldr	r3, [pc, #28]	@ (8002d7c <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x144>)
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	3303      	adds	r3, #3
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d6a:	f006 faf7 	bl	800935c <HAL_UART_Transmit>
	}

}
 8002d6e:	bf00      	nop
 8002d70:	3734      	adds	r7, #52	@ 0x34
 8002d72:	46bd      	mov	sp, r7
 8002d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d78:	08013bc4 	.word	0x08013bc4
 8002d7c:	200025c2 	.word	0x200025c2

08002d80 <SubSys_WirelessCom_Telemetry_Create_Packet_For>:
 * 																	   @arg 1 : Sat_Payload
 * 																	   @arg 2 : Ground_Sation
 * @param  : SubSys_WirelessCom_APP_HandleTypeDef *dev_WirelessComApp , created object for wireless communication
 * @retval NONE
 */
void SubSys_WirelessCom_Telemetry_Create_Packet_For(MissionUnit x,SubSys_WirelessCom_APP_HandleTypeDef *dev_WirelessComApp){
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	6039      	str	r1, [r7, #0]
 8002d8a:	71fb      	strb	r3, [r7, #7]

	switch(x){
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d13e      	bne.n	8002e10 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x90>
		case Sat_Payload :

			/*-------------TARGET DEVICE ADDRESS AND CHANNEL INFO----------------*/
			/*! Target device will be Satellite's Payload*/
			dev_WirelessComApp->Buffer.Tx[0] = dev_WirelessComApp->Target_ADDH;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	f893 21c0 	ldrb.w	r2, [r3, #448]	@ 0x1c0
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	701a      	strb	r2, [r3, #0]
			dev_WirelessComApp->Buffer.Tx[1] = dev_WirelessComApp->Target_ADDL;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	f893 21c1 	ldrb.w	r2, [r3, #449]	@ 0x1c1
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	705a      	strb	r2, [r3, #1]
			dev_WirelessComApp->Buffer.Tx[2] = dev_WirelessComApp->Target_Ch;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	f893 21c2 	ldrb.w	r2, [r3, #450]	@ 0x1c2
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	709a      	strb	r2, [r3, #2]

			/*-------------YOUR DEVICE VARIABLE THAT YOU WİLL SEND----------------*/ /*Note : Will be system variable opposite to variables*/
			/*From MS5611*/
			dev_WirelessComApp->Variable.Carr_Pressure    = MS5611_Press;
 8002db0:	4b1a      	ldr	r3, [pc, #104]	@ (8002e1c <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x9c>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
			dev_WirelessComApp->Variable.Carr_Temperature = MS5611_Temp;
 8002dba:	4b19      	ldr	r3, [pc, #100]	@ (8002e20 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0xa0>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
			dev_WirelessComApp->Variable.Carr_VertHeight  = MS5611_Altitude;
 8002dc4:	4b17      	ldr	r3, [pc, #92]	@ (8002e24 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0xa4>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
			dev_WirelessComApp->Variable.Carr_VertSpeed   = MS5611_VertSpeed;
 8002dce:	4b16      	ldr	r3, [pc, #88]	@ (8002e28 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0xa8>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194

			/*From ADC*/
			dev_WirelessComApp->Variable.Carr_BatteryVoltage = BatteryVoltage;
 8002dd8:	4b14      	ldr	r3, [pc, #80]	@ (8002e2c <SubSys_WirelessCom_Telemetry_Create_Packet_For+0xac>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0

			/*From L-86GPS*/
			dev_WirelessComApp->Variable.Carr_GPS_Latitude  = GPS_Latitude;
 8002de2:	4b13      	ldr	r3, [pc, #76]	@ (8002e30 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0xb0>)
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
			dev_WirelessComApp->Variable.Carr_GPS_Longitude = GPS_Longitude;
 8002dec:	4b11      	ldr	r3, [pc, #68]	@ (8002e34 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0xb4>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
			dev_WirelessComApp->Variable.Carr_GPS_Altitude  = GPS_Altitude;
 8002df6:	4b10      	ldr	r3, [pc, #64]	@ (8002e38 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0xb8>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac

			/*! Each time a packet is generated, the count will increase by 1*/
			dev_WirelessComApp->Variable.NumOfPacket++;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 8002e06:	1c5a      	adds	r2, r3, #1
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0

			break;
 8002e0e:	bf00      	nop

		   }

}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	20002a20 	.word	0x20002a20
 8002e20:	20002a24 	.word	0x20002a24
 8002e24:	20002a28 	.word	0x20002a28
 8002e28:	20002a2c 	.word	0x20002a2c
 8002e2c:	20002a3c 	.word	0x20002a3c
 8002e30:	20002a48 	.word	0x20002a48
 8002e34:	20002a44 	.word	0x20002a44
 8002e38:	20002a40 	.word	0x20002a40

08002e3c <bno055_writeData>:
#else
  HAL_Delay(time);
#endif
}

void bno055_writeData(uint8_t reg, uint8_t data) {
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	4603      	mov	r3, r0
 8002e44:	460a      	mov	r2, r1
 8002e46:	71fb      	strb	r3, [r7, #7]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8002e4c:	79fb      	ldrb	r3, [r7, #7]
 8002e4e:	733b      	strb	r3, [r7, #12]
 8002e50:	79bb      	ldrb	r3, [r7, #6]
 8002e52:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8002e54:	4b5a      	ldr	r3, [pc, #360]	@ (8002fc0 <bno055_writeData+0x184>)
 8002e56:	6818      	ldr	r0, [r3, #0]
 8002e58:	f107 020c 	add.w	r2, r7, #12
 8002e5c:	230a      	movs	r3, #10
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	2302      	movs	r3, #2
 8002e62:	2150      	movs	r1, #80	@ 0x50
 8002e64:	f002 feae 	bl	8005bc4 <HAL_I2C_Master_Transmit>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 80a0 	beq.w	8002fb4 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8002e74:	7dfb      	ldrb	r3, [r7, #23]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d103      	bne.n	8002e82 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8002e7a:	4852      	ldr	r0, [pc, #328]	@ (8002fc4 <bno055_writeData+0x188>)
 8002e7c:	f00b fd6c 	bl	800e958 <puts>
 8002e80:	e012      	b.n	8002ea8 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8002e82:	7dfb      	ldrb	r3, [r7, #23]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d103      	bne.n	8002e90 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8002e88:	484f      	ldr	r0, [pc, #316]	@ (8002fc8 <bno055_writeData+0x18c>)
 8002e8a:	f00b fd65 	bl	800e958 <puts>
 8002e8e:	e00b      	b.n	8002ea8 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8002e90:	7dfb      	ldrb	r3, [r7, #23]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d103      	bne.n	8002e9e <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8002e96:	484d      	ldr	r0, [pc, #308]	@ (8002fcc <bno055_writeData+0x190>)
 8002e98:	f00b fd5e 	bl	800e958 <puts>
 8002e9c:	e004      	b.n	8002ea8 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8002e9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	484b      	ldr	r0, [pc, #300]	@ (8002fd0 <bno055_writeData+0x194>)
 8002ea4:	f00b fcf0 	bl	800e888 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8002ea8:	4b45      	ldr	r3, [pc, #276]	@ (8002fc0 <bno055_writeData+0x184>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f003 f9c7 	bl	8006240 <HAL_I2C_GetError>
 8002eb2:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d07e      	beq.n	8002fb8 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d103      	bne.n	8002ec8 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8002ec0:	4844      	ldr	r0, [pc, #272]	@ (8002fd4 <bno055_writeData+0x198>)
 8002ec2:	f00b fd49 	bl	800e958 <puts>
 8002ec6:	e021      	b.n	8002f0c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d103      	bne.n	8002ed6 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8002ece:	4842      	ldr	r0, [pc, #264]	@ (8002fd8 <bno055_writeData+0x19c>)
 8002ed0:	f00b fd42 	bl	800e958 <puts>
 8002ed4:	e01a      	b.n	8002f0c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d103      	bne.n	8002ee4 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8002edc:	483f      	ldr	r0, [pc, #252]	@ (8002fdc <bno055_writeData+0x1a0>)
 8002ede:	f00b fd3b 	bl	800e958 <puts>
 8002ee2:	e013      	b.n	8002f0c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d103      	bne.n	8002ef2 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8002eea:	483d      	ldr	r0, [pc, #244]	@ (8002fe0 <bno055_writeData+0x1a4>)
 8002eec:	f00b fd34 	bl	800e958 <puts>
 8002ef0:	e00c      	b.n	8002f0c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	2b10      	cmp	r3, #16
 8002ef6:	d103      	bne.n	8002f00 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8002ef8:	483a      	ldr	r0, [pc, #232]	@ (8002fe4 <bno055_writeData+0x1a8>)
 8002efa:	f00b fd2d 	bl	800e958 <puts>
 8002efe:	e005      	b.n	8002f0c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d102      	bne.n	8002f0c <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8002f06:	4838      	ldr	r0, [pc, #224]	@ (8002fe8 <bno055_writeData+0x1ac>)
 8002f08:	f00b fd26 	bl	800e958 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8002f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8002fc0 <bno055_writeData+0x184>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f003 f987 	bl	8006224 <HAL_I2C_GetState>
 8002f16:	4603      	mov	r3, r0
 8002f18:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d103      	bne.n	8002f28 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8002f20:	4832      	ldr	r0, [pc, #200]	@ (8002fec <bno055_writeData+0x1b0>)
 8002f22:	f00b fd19 	bl	800e958 <puts>
 8002f26:	e048      	b.n	8002fba <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	2b20      	cmp	r3, #32
 8002f2c:	d103      	bne.n	8002f36 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8002f2e:	482f      	ldr	r0, [pc, #188]	@ (8002fec <bno055_writeData+0x1b0>)
 8002f30:	f00b fd12 	bl	800e958 <puts>
 8002f34:	e041      	b.n	8002fba <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	2b24      	cmp	r3, #36	@ 0x24
 8002f3a:	d103      	bne.n	8002f44 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8002f3c:	482c      	ldr	r0, [pc, #176]	@ (8002ff0 <bno055_writeData+0x1b4>)
 8002f3e:	f00b fd0b 	bl	800e958 <puts>
 8002f42:	e03a      	b.n	8002fba <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	2b21      	cmp	r3, #33	@ 0x21
 8002f48:	d103      	bne.n	8002f52 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8002f4a:	482a      	ldr	r0, [pc, #168]	@ (8002ff4 <bno055_writeData+0x1b8>)
 8002f4c:	f00b fd04 	bl	800e958 <puts>
 8002f50:	e033      	b.n	8002fba <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	2b22      	cmp	r3, #34	@ 0x22
 8002f56:	d103      	bne.n	8002f60 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8002f58:	4827      	ldr	r0, [pc, #156]	@ (8002ff8 <bno055_writeData+0x1bc>)
 8002f5a:	f00b fcfd 	bl	800e958 <puts>
 8002f5e:	e02c      	b.n	8002fba <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
 8002f62:	2b28      	cmp	r3, #40	@ 0x28
 8002f64:	d103      	bne.n	8002f6e <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8002f66:	4825      	ldr	r0, [pc, #148]	@ (8002ffc <bno055_writeData+0x1c0>)
 8002f68:	f00b fcf6 	bl	800e958 <puts>
 8002f6c:	e025      	b.n	8002fba <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
 8002f70:	2b29      	cmp	r3, #41	@ 0x29
 8002f72:	d103      	bne.n	8002f7c <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8002f74:	4822      	ldr	r0, [pc, #136]	@ (8003000 <bno055_writeData+0x1c4>)
 8002f76:	f00b fcef 	bl	800e958 <puts>
 8002f7a:	e01e      	b.n	8002fba <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f80:	d103      	bne.n	8002f8a <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8002f82:	4820      	ldr	r0, [pc, #128]	@ (8003004 <bno055_writeData+0x1c8>)
 8002f84:	f00b fce8 	bl	800e958 <puts>
 8002f88:	e017      	b.n	8002fba <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	2b60      	cmp	r3, #96	@ 0x60
 8002f8e:	d103      	bne.n	8002f98 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8002f90:	481d      	ldr	r0, [pc, #116]	@ (8003008 <bno055_writeData+0x1cc>)
 8002f92:	f00b fce1 	bl	800e958 <puts>
 8002f96:	e010      	b.n	8002fba <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
 8002f9a:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f9c:	d103      	bne.n	8002fa6 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8002f9e:	481b      	ldr	r0, [pc, #108]	@ (800300c <bno055_writeData+0x1d0>)
 8002fa0:	f00b fcda 	bl	800e958 <puts>
 8002fa4:	e009      	b.n	8002fba <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
 8002fa8:	2be0      	cmp	r3, #224	@ 0xe0
 8002faa:	d106      	bne.n	8002fba <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8002fac:	4818      	ldr	r0, [pc, #96]	@ (8003010 <bno055_writeData+0x1d4>)
 8002fae:	f00b fcd3 	bl	800e958 <puts>
 8002fb2:	e002      	b.n	8002fba <bno055_writeData+0x17e>
    return;
 8002fb4:	bf00      	nop
 8002fb6:	e000      	b.n	8002fba <bno055_writeData+0x17e>
    return;
 8002fb8:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	200025c4 	.word	0x200025c4
 8002fc4:	08013bf8 	.word	0x08013bf8
 8002fc8:	08013c1c 	.word	0x08013c1c
 8002fcc:	08013c44 	.word	0x08013c44
 8002fd0:	08013c68 	.word	0x08013c68
 8002fd4:	08013c80 	.word	0x08013c80
 8002fd8:	08013c94 	.word	0x08013c94
 8002fdc:	08013ca8 	.word	0x08013ca8
 8002fe0:	08013cbc 	.word	0x08013cbc
 8002fe4:	08013cd0 	.word	0x08013cd0
 8002fe8:	08013ce4 	.word	0x08013ce4
 8002fec:	08013cfc 	.word	0x08013cfc
 8002ff0:	08013d14 	.word	0x08013d14
 8002ff4:	08013d28 	.word	0x08013d28
 8002ff8:	08013d40 	.word	0x08013d40
 8002ffc:	08013d58 	.word	0x08013d58
 8003000:	08013d70 	.word	0x08013d70
 8003004:	08013d90 	.word	0x08013d90
 8003008:	08013db0 	.word	0x08013db0
 800300c:	08013dc8 	.word	0x08013dc8
 8003010:	08013de0 	.word	0x08013de0

08003014 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af02      	add	r7, sp, #8
 800301a:	4603      	mov	r3, r0
 800301c:	6039      	str	r1, [r7, #0]
 800301e:	71fb      	strb	r3, [r7, #7]
 8003020:	4613      	mov	r3, r2
 8003022:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8003024:	4b0b      	ldr	r3, [pc, #44]	@ (8003054 <bno055_readData+0x40>)
 8003026:	6818      	ldr	r0, [r3, #0]
 8003028:	1dfa      	adds	r2, r7, #7
 800302a:	2364      	movs	r3, #100	@ 0x64
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	2301      	movs	r3, #1
 8003030:	2150      	movs	r1, #80	@ 0x50
 8003032:	f002 fdc7 	bl	8005bc4 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8003036:	4b07      	ldr	r3, [pc, #28]	@ (8003054 <bno055_readData+0x40>)
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	79bb      	ldrb	r3, [r7, #6]
 800303c:	b29b      	uxth	r3, r3
 800303e:	2264      	movs	r2, #100	@ 0x64
 8003040:	9200      	str	r2, [sp, #0]
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	2150      	movs	r1, #80	@ 0x50
 8003046:	f002 febb 	bl	8005dc0 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 800304a:	bf00      	nop
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	200025c4 	.word	0x200025c4

08003058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800305c:	f001 f928 	bl	80042b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003060:	f000 f876 	bl	8003150 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003064:	f000 fb8e 	bl	8003784 <MX_GPIO_Init>
  MX_DMA_Init();
 8003068:	f000 fb64 	bl	8003734 <MX_DMA_Init>
  MX_I2C1_Init();
 800306c:	f000 f92a 	bl	80032c4 <MX_I2C1_Init>
  MX_ADC1_Init();
 8003070:	f000 f8d6 	bl	8003220 <MX_ADC1_Init>
  MX_TIM3_Init();
 8003074:	f000 fab0 	bl	80035d8 <MX_TIM3_Init>
  MX_SDIO_SD_Init();
 8003078:	f000 f9ae 	bl	80033d8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800307c:	f007 fee8 	bl	800ae50 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8003080:	f000 fb04 	bl	800368c <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8003084:	f000 f94c 	bl	8003320 <MX_I2C2_Init>
  MX_TIM1_Init();
 8003088:	f000 f9c8 	bl	800341c <MX_TIM1_Init>
  MX_TIM2_Init();
 800308c:	f000 fa4a 	bl	8003524 <MX_TIM2_Init>
  MX_I2C3_Init();
 8003090:	f000 f974 	bl	800337c <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8003094:	f000 fb24 	bl	80036e0 <MX_USART2_UART_Init>
	#ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_SDCARD_H
	/*! We create a buffer that contains the satellite's variables, and we fill it with variables from SD_Data objects */
	extern char SdDatasBuf[LineSize];

	/*!(@warning)	Don't write "E:" , "e:",  "e\" */
	SD_Mount("E/", 0);
 8003098:	2100      	movs	r1, #0
 800309a:	4821      	ldr	r0, [pc, #132]	@ (8003120 <main+0xc8>)
 800309c:	f7fe fc08 	bl	80018b0 <SD_Mount>
	 * 				Finally put our variable buffer
	 *
	 * @Attention!   : If you use lowercase letters, this function will reverse the name to uppercase letters as given below
	 * 					(e.g)CAR_Raw ==> CAR_RAW
	 */
	SD_Create_Dir_File("SAT_CAR", "SAT_CAR/STM32.TXT", SdDatasBuf);
 80030a0:	4a20      	ldr	r2, [pc, #128]	@ (8003124 <main+0xcc>)
 80030a2:	4921      	ldr	r1, [pc, #132]	@ (8003128 <main+0xd0>)
 80030a4:	4821      	ldr	r0, [pc, #132]	@ (800312c <main+0xd4>)
 80030a6:	f7fe fc21 	bl	80018ec <SD_Create_Dir_File>
	 SubSys_WirelessCom_Config_Init(&dev_WirelessComConfig);
	 #endif

	 #ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_WIRELESSCOMMUNICATION_TELEMETRY_H
	 /*! Will be filled for your dev that use now*/
	 dev_WirelessComApp.huartX = &huart2;
 80030aa:	4b21      	ldr	r3, [pc, #132]	@ (8003130 <main+0xd8>)
 80030ac:	4a21      	ldr	r2, [pc, #132]	@ (8003134 <main+0xdc>)
 80030ae:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
	 dev_WirelessComConfig.Mode_SW = NormalMode; 		/*! UART and wireless channel are open, transparent transmission is on*/
 80030b2:	4b21      	ldr	r3, [pc, #132]	@ (8003138 <main+0xe0>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	75da      	strb	r2, [r3, #23]
	 SubSys_WirelessCom_Config_WORK_MODE(&dev_WirelessComConfig);
 80030b8:	481f      	ldr	r0, [pc, #124]	@ (8003138 <main+0xe0>)
 80030ba:	f7ff fd61 	bl	8002b80 <SubSys_WirelessCom_Config_WORK_MODE>

	 /*! Will be filled for the Ground Station(Target) Device */
	 dev_WirelessComApp.Target_ADDH = 0x20;
 80030be:	4b1c      	ldr	r3, [pc, #112]	@ (8003130 <main+0xd8>)
 80030c0:	2220      	movs	r2, #32
 80030c2:	f883 21c0 	strb.w	r2, [r3, #448]	@ 0x1c0
	 dev_WirelessComApp.Target_ADDL = 0x23;
 80030c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003130 <main+0xd8>)
 80030c8:	2223      	movs	r2, #35	@ 0x23
 80030ca:	f883 21c1 	strb.w	r2, [r3, #449]	@ 0x1c1
	 dev_WirelessComApp.Target_Ch   = 0x10;
 80030ce:	4b18      	ldr	r3, [pc, #96]	@ (8003130 <main+0xd8>)
 80030d0:	2210      	movs	r2, #16
 80030d2:	f883 21c2 	strb.w	r2, [r3, #450]	@ 0x1c2

	/******>>> SERVO SYSTEM INITIALIZATION BEGIN >>>******/
#ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_ACTUATOR_SERVO_H

	/*! Separation system Servo control parameters*/
	dev_Servo_Separation.htim_X 		= &htim1;
 80030d6:	4b19      	ldr	r3, [pc, #100]	@ (800313c <main+0xe4>)
 80030d8:	4a19      	ldr	r2, [pc, #100]	@ (8003140 <main+0xe8>)
 80030da:	601a      	str	r2, [r3, #0]
	dev_Servo_Separation.tim_channel_in = TIM_CHANNEL_2;
 80030dc:	4b17      	ldr	r3, [pc, #92]	@ (800313c <main+0xe4>)
 80030de:	2204      	movs	r2, #4
 80030e0:	605a      	str	r2, [r3, #4]
	SubSys_Actuator_Servo_Init(&dev_Servo_Separation);
 80030e2:	4816      	ldr	r0, [pc, #88]	@ (800313c <main+0xe4>)
 80030e4:	f7fe f876 	bl	80011d4 <SubSys_Actuator_Servo_Init>
		SubSys_Actuator_Servo_MoveTo(&dev_Servo_Separation, 180);
	#endif

	/*! Color Filtering system Servo control parameters*/
	/*! Succes */
	dev_Servo_ColorFilter.htim_X = &htim2;
 80030e8:	4b16      	ldr	r3, [pc, #88]	@ (8003144 <main+0xec>)
 80030ea:	4a17      	ldr	r2, [pc, #92]	@ (8003148 <main+0xf0>)
 80030ec:	601a      	str	r2, [r3, #0]
	dev_Servo_ColorFilter.tim_channel_in = TIM_CHANNEL_1;
 80030ee:	4b15      	ldr	r3, [pc, #84]	@ (8003144 <main+0xec>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	605a      	str	r2, [r3, #4]
	SubSys_Actuator_Servo_Init(&dev_Servo_ColorFilter);
 80030f4:	4813      	ldr	r0, [pc, #76]	@ (8003144 <main+0xec>)
 80030f6:	f7fe f86d 	bl	80011d4 <SubSys_Actuator_Servo_Init>
	/******<<< RTC SYSTEML INITIALIZATION END <<<******/


	/******>>> SEPARATION CONTROL INITIALIZATION BEGIN >>>******/
	#ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_SEPARATION_CONTROL_H
		HAL_Delay(5000);
 80030fa:	f241 3088 	movw	r0, #5000	@ 0x1388
 80030fe:	f001 f949 	bl	8004394 <HAL_Delay>
		SubSys_SeparationMechanism_Lock_PayloadToCarrier();
 8003102:	f7ff fd29 	bl	8002b58 <SubSys_SeparationMechanism_Lock_PayloadToCarrier>


	/******>>> COLOR FILTER CONTROL INITIALIZATION BEGIN >>>******/
	#ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_COLORFILTER_CONTROL_H
		/*! Will be added init code block in here */
		SubSys_ColorFilterMechanism_TurnTo(Filter_None);
 8003106:	2000      	movs	r0, #0
 8003108:	f7fe f93a 	bl	8001380 <SubSys_ColorFilterMechanism_TurnTo>
	#endif
	/******<<< COLOR FILTER CONTROL INITIALIZATION END <<<******/


	/******>>> CAMERA ACTIVE INITIALIZATION BEGIN >>>******/
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800310c:	2201      	movs	r2, #1
 800310e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003112:	480e      	ldr	r0, [pc, #56]	@ (800314c <main+0xf4>)
 8003114:	f002 fbf8 	bl	8005908 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 SubSys_SatelliteMission_Continue();
 8003118:	f7fe f960 	bl	80013dc <SubSys_SatelliteMission_Continue>
 800311c:	e7fc      	b.n	8003118 <main+0xc0>
 800311e:	bf00      	nop
 8003120:	08013df8 	.word	0x08013df8
 8003124:	200022f0 	.word	0x200022f0
 8003128:	08013dfc 	.word	0x08013dfc
 800312c:	08013e10 	.word	0x08013e10
 8003130:	20002a70 	.word	0x20002a70
 8003134:	20002970 	.word	0x20002970
 8003138:	20002a4c 	.word	0x20002a4c
 800313c:	20002c6c 	.word	0x20002c6c
 8003140:	20002850 	.word	0x20002850
 8003144:	20002c74 	.word	0x20002c74
 8003148:	20002898 	.word	0x20002898
 800314c:	40020400 	.word	0x40020400

08003150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b094      	sub	sp, #80	@ 0x50
 8003154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003156:	f107 0320 	add.w	r3, r7, #32
 800315a:	2230      	movs	r2, #48	@ 0x30
 800315c:	2100      	movs	r1, #0
 800315e:	4618      	mov	r0, r3
 8003160:	f00b fd26 	bl	800ebb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003164:	f107 030c 	add.w	r3, r7, #12
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	609a      	str	r2, [r3, #8]
 8003170:	60da      	str	r2, [r3, #12]
 8003172:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003174:	2300      	movs	r3, #0
 8003176:	60bb      	str	r3, [r7, #8]
 8003178:	4b27      	ldr	r3, [pc, #156]	@ (8003218 <SystemClock_Config+0xc8>)
 800317a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317c:	4a26      	ldr	r2, [pc, #152]	@ (8003218 <SystemClock_Config+0xc8>)
 800317e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003182:	6413      	str	r3, [r2, #64]	@ 0x40
 8003184:	4b24      	ldr	r3, [pc, #144]	@ (8003218 <SystemClock_Config+0xc8>)
 8003186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003188:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003190:	2300      	movs	r3, #0
 8003192:	607b      	str	r3, [r7, #4]
 8003194:	4b21      	ldr	r3, [pc, #132]	@ (800321c <SystemClock_Config+0xcc>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a20      	ldr	r2, [pc, #128]	@ (800321c <SystemClock_Config+0xcc>)
 800319a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	4b1e      	ldr	r3, [pc, #120]	@ (800321c <SystemClock_Config+0xcc>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80031a8:	607b      	str	r3, [r7, #4]
 80031aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80031ac:	2302      	movs	r3, #2
 80031ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031b0:	2301      	movs	r3, #1
 80031b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031b4:	2310      	movs	r3, #16
 80031b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031b8:	2302      	movs	r3, #2
 80031ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80031bc:	2300      	movs	r3, #0
 80031be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80031c0:	2308      	movs	r3, #8
 80031c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80031c4:	2348      	movs	r3, #72	@ 0x48
 80031c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031c8:	2302      	movs	r3, #2
 80031ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80031cc:	2303      	movs	r3, #3
 80031ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031d0:	f107 0320 	add.w	r3, r7, #32
 80031d4:	4618      	mov	r0, r3
 80031d6:	f003 fbc5 	bl	8006964 <HAL_RCC_OscConfig>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80031e0:	f000 fb52 	bl	8003888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031e4:	230f      	movs	r3, #15
 80031e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031e8:	2302      	movs	r3, #2
 80031ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80031f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80031fa:	f107 030c 	add.w	r3, r7, #12
 80031fe:	2102      	movs	r1, #2
 8003200:	4618      	mov	r0, r3
 8003202:	f003 fe27 	bl	8006e54 <HAL_RCC_ClockConfig>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800320c:	f000 fb3c 	bl	8003888 <Error_Handler>
  }
}
 8003210:	bf00      	nop
 8003212:	3750      	adds	r7, #80	@ 0x50
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40023800 	.word	0x40023800
 800321c:	40007000 	.word	0x40007000

08003220 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003226:	463b      	mov	r3, r7
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003232:	4b21      	ldr	r3, [pc, #132]	@ (80032b8 <MX_ADC1_Init+0x98>)
 8003234:	4a21      	ldr	r2, [pc, #132]	@ (80032bc <MX_ADC1_Init+0x9c>)
 8003236:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003238:	4b1f      	ldr	r3, [pc, #124]	@ (80032b8 <MX_ADC1_Init+0x98>)
 800323a:	2200      	movs	r2, #0
 800323c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800323e:	4b1e      	ldr	r3, [pc, #120]	@ (80032b8 <MX_ADC1_Init+0x98>)
 8003240:	2200      	movs	r2, #0
 8003242:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003244:	4b1c      	ldr	r3, [pc, #112]	@ (80032b8 <MX_ADC1_Init+0x98>)
 8003246:	2200      	movs	r2, #0
 8003248:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800324a:	4b1b      	ldr	r3, [pc, #108]	@ (80032b8 <MX_ADC1_Init+0x98>)
 800324c:	2201      	movs	r2, #1
 800324e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003250:	4b19      	ldr	r3, [pc, #100]	@ (80032b8 <MX_ADC1_Init+0x98>)
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003258:	4b17      	ldr	r3, [pc, #92]	@ (80032b8 <MX_ADC1_Init+0x98>)
 800325a:	2200      	movs	r2, #0
 800325c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800325e:	4b16      	ldr	r3, [pc, #88]	@ (80032b8 <MX_ADC1_Init+0x98>)
 8003260:	4a17      	ldr	r2, [pc, #92]	@ (80032c0 <MX_ADC1_Init+0xa0>)
 8003262:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003264:	4b14      	ldr	r3, [pc, #80]	@ (80032b8 <MX_ADC1_Init+0x98>)
 8003266:	2200      	movs	r2, #0
 8003268:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800326a:	4b13      	ldr	r3, [pc, #76]	@ (80032b8 <MX_ADC1_Init+0x98>)
 800326c:	2201      	movs	r2, #1
 800326e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003270:	4b11      	ldr	r3, [pc, #68]	@ (80032b8 <MX_ADC1_Init+0x98>)
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003278:	4b0f      	ldr	r3, [pc, #60]	@ (80032b8 <MX_ADC1_Init+0x98>)
 800327a:	2201      	movs	r2, #1
 800327c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800327e:	480e      	ldr	r0, [pc, #56]	@ (80032b8 <MX_ADC1_Init+0x98>)
 8003280:	f001 f8ac 	bl	80043dc <HAL_ADC_Init>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800328a:	f000 fafd 	bl	8003888 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800328e:	2300      	movs	r3, #0
 8003290:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003292:	2301      	movs	r3, #1
 8003294:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003296:	2300      	movs	r3, #0
 8003298:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800329a:	463b      	mov	r3, r7
 800329c:	4619      	mov	r1, r3
 800329e:	4806      	ldr	r0, [pc, #24]	@ (80032b8 <MX_ADC1_Init+0x98>)
 80032a0:	f001 fa60 	bl	8004764 <HAL_ADC_ConfigChannel>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80032aa:	f000 faed 	bl	8003888 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80032ae:	bf00      	nop
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	200025c8 	.word	0x200025c8
 80032bc:	40012000 	.word	0x40012000
 80032c0:	0f000001 	.word	0x0f000001

080032c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80032c8:	4b12      	ldr	r3, [pc, #72]	@ (8003314 <MX_I2C1_Init+0x50>)
 80032ca:	4a13      	ldr	r2, [pc, #76]	@ (8003318 <MX_I2C1_Init+0x54>)
 80032cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80032ce:	4b11      	ldr	r3, [pc, #68]	@ (8003314 <MX_I2C1_Init+0x50>)
 80032d0:	4a12      	ldr	r2, [pc, #72]	@ (800331c <MX_I2C1_Init+0x58>)
 80032d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80032d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003314 <MX_I2C1_Init+0x50>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80032da:	4b0e      	ldr	r3, [pc, #56]	@ (8003314 <MX_I2C1_Init+0x50>)
 80032dc:	2200      	movs	r2, #0
 80032de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003314 <MX_I2C1_Init+0x50>)
 80032e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80032e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003314 <MX_I2C1_Init+0x50>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80032ee:	4b09      	ldr	r3, [pc, #36]	@ (8003314 <MX_I2C1_Init+0x50>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032f4:	4b07      	ldr	r3, [pc, #28]	@ (8003314 <MX_I2C1_Init+0x50>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032fa:	4b06      	ldr	r3, [pc, #24]	@ (8003314 <MX_I2C1_Init+0x50>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003300:	4804      	ldr	r0, [pc, #16]	@ (8003314 <MX_I2C1_Init+0x50>)
 8003302:	f002 fb1b 	bl	800593c <HAL_I2C_Init>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800330c:	f000 fabc 	bl	8003888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003310:	bf00      	nop
 8003312:	bd80      	pop	{r7, pc}
 8003314:	20002610 	.word	0x20002610
 8003318:	40005400 	.word	0x40005400
 800331c:	000186a0 	.word	0x000186a0

08003320 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003324:	4b12      	ldr	r3, [pc, #72]	@ (8003370 <MX_I2C2_Init+0x50>)
 8003326:	4a13      	ldr	r2, [pc, #76]	@ (8003374 <MX_I2C2_Init+0x54>)
 8003328:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800332a:	4b11      	ldr	r3, [pc, #68]	@ (8003370 <MX_I2C2_Init+0x50>)
 800332c:	4a12      	ldr	r2, [pc, #72]	@ (8003378 <MX_I2C2_Init+0x58>)
 800332e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003330:	4b0f      	ldr	r3, [pc, #60]	@ (8003370 <MX_I2C2_Init+0x50>)
 8003332:	2200      	movs	r2, #0
 8003334:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003336:	4b0e      	ldr	r3, [pc, #56]	@ (8003370 <MX_I2C2_Init+0x50>)
 8003338:	2200      	movs	r2, #0
 800333a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800333c:	4b0c      	ldr	r3, [pc, #48]	@ (8003370 <MX_I2C2_Init+0x50>)
 800333e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003342:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003344:	4b0a      	ldr	r3, [pc, #40]	@ (8003370 <MX_I2C2_Init+0x50>)
 8003346:	2200      	movs	r2, #0
 8003348:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800334a:	4b09      	ldr	r3, [pc, #36]	@ (8003370 <MX_I2C2_Init+0x50>)
 800334c:	2200      	movs	r2, #0
 800334e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003350:	4b07      	ldr	r3, [pc, #28]	@ (8003370 <MX_I2C2_Init+0x50>)
 8003352:	2200      	movs	r2, #0
 8003354:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003356:	4b06      	ldr	r3, [pc, #24]	@ (8003370 <MX_I2C2_Init+0x50>)
 8003358:	2200      	movs	r2, #0
 800335a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800335c:	4804      	ldr	r0, [pc, #16]	@ (8003370 <MX_I2C2_Init+0x50>)
 800335e:	f002 faed 	bl	800593c <HAL_I2C_Init>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003368:	f000 fa8e 	bl	8003888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800336c:	bf00      	nop
 800336e:	bd80      	pop	{r7, pc}
 8003370:	20002664 	.word	0x20002664
 8003374:	40005800 	.word	0x40005800
 8003378:	000186a0 	.word	0x000186a0

0800337c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003380:	4b12      	ldr	r3, [pc, #72]	@ (80033cc <MX_I2C3_Init+0x50>)
 8003382:	4a13      	ldr	r2, [pc, #76]	@ (80033d0 <MX_I2C3_Init+0x54>)
 8003384:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003386:	4b11      	ldr	r3, [pc, #68]	@ (80033cc <MX_I2C3_Init+0x50>)
 8003388:	4a12      	ldr	r2, [pc, #72]	@ (80033d4 <MX_I2C3_Init+0x58>)
 800338a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800338c:	4b0f      	ldr	r3, [pc, #60]	@ (80033cc <MX_I2C3_Init+0x50>)
 800338e:	2200      	movs	r2, #0
 8003390:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003392:	4b0e      	ldr	r3, [pc, #56]	@ (80033cc <MX_I2C3_Init+0x50>)
 8003394:	2200      	movs	r2, #0
 8003396:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003398:	4b0c      	ldr	r3, [pc, #48]	@ (80033cc <MX_I2C3_Init+0x50>)
 800339a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800339e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033a0:	4b0a      	ldr	r3, [pc, #40]	@ (80033cc <MX_I2C3_Init+0x50>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80033a6:	4b09      	ldr	r3, [pc, #36]	@ (80033cc <MX_I2C3_Init+0x50>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033ac:	4b07      	ldr	r3, [pc, #28]	@ (80033cc <MX_I2C3_Init+0x50>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033b2:	4b06      	ldr	r3, [pc, #24]	@ (80033cc <MX_I2C3_Init+0x50>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80033b8:	4804      	ldr	r0, [pc, #16]	@ (80033cc <MX_I2C3_Init+0x50>)
 80033ba:	f002 fabf 	bl	800593c <HAL_I2C_Init>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80033c4:	f000 fa60 	bl	8003888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80033c8:	bf00      	nop
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	200026b8 	.word	0x200026b8
 80033d0:	40005c00 	.word	0x40005c00
 80033d4:	000186a0 	.word	0x000186a0

080033d8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80033dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003414 <MX_SDIO_SD_Init+0x3c>)
 80033de:	4a0e      	ldr	r2, [pc, #56]	@ (8003418 <MX_SDIO_SD_Init+0x40>)
 80033e0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80033e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003414 <MX_SDIO_SD_Init+0x3c>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80033e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003414 <MX_SDIO_SD_Init+0x3c>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80033ee:	4b09      	ldr	r3, [pc, #36]	@ (8003414 <MX_SDIO_SD_Init+0x3c>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 80033f4:	4b07      	ldr	r3, [pc, #28]	@ (8003414 <MX_SDIO_SD_Init+0x3c>)
 80033f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033fa:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80033fc:	4b05      	ldr	r3, [pc, #20]	@ (8003414 <MX_SDIO_SD_Init+0x3c>)
 80033fe:	2200      	movs	r2, #0
 8003400:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8003402:	4b04      	ldr	r3, [pc, #16]	@ (8003414 <MX_SDIO_SD_Init+0x3c>)
 8003404:	2200      	movs	r2, #0
 8003406:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8003408:	bf00      	nop
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	2000270c 	.word	0x2000270c
 8003418:	40012c00 	.word	0x40012c00

0800341c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b092      	sub	sp, #72	@ 0x48
 8003420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003422:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800342c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	60da      	str	r2, [r3, #12]
 800343a:	611a      	str	r2, [r3, #16]
 800343c:	615a      	str	r2, [r3, #20]
 800343e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003440:	1d3b      	adds	r3, r7, #4
 8003442:	2220      	movs	r2, #32
 8003444:	2100      	movs	r1, #0
 8003446:	4618      	mov	r0, r3
 8003448:	f00b fbb2 	bl	800ebb0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800344c:	4b33      	ldr	r3, [pc, #204]	@ (800351c <MX_TIM1_Init+0x100>)
 800344e:	4a34      	ldr	r2, [pc, #208]	@ (8003520 <MX_TIM1_Init+0x104>)
 8003450:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1440-1;
 8003452:	4b32      	ldr	r3, [pc, #200]	@ (800351c <MX_TIM1_Init+0x100>)
 8003454:	f240 529f 	movw	r2, #1439	@ 0x59f
 8003458:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800345a:	4b30      	ldr	r3, [pc, #192]	@ (800351c <MX_TIM1_Init+0x100>)
 800345c:	2200      	movs	r2, #0
 800345e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8003460:	4b2e      	ldr	r3, [pc, #184]	@ (800351c <MX_TIM1_Init+0x100>)
 8003462:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003466:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003468:	4b2c      	ldr	r3, [pc, #176]	@ (800351c <MX_TIM1_Init+0x100>)
 800346a:	2200      	movs	r2, #0
 800346c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800346e:	4b2b      	ldr	r3, [pc, #172]	@ (800351c <MX_TIM1_Init+0x100>)
 8003470:	2200      	movs	r2, #0
 8003472:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003474:	4b29      	ldr	r3, [pc, #164]	@ (800351c <MX_TIM1_Init+0x100>)
 8003476:	2200      	movs	r2, #0
 8003478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800347a:	4828      	ldr	r0, [pc, #160]	@ (800351c <MX_TIM1_Init+0x100>)
 800347c:	f005 fa5e 	bl	800893c <HAL_TIM_PWM_Init>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003486:	f000 f9ff 	bl	8003888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800348a:	2300      	movs	r3, #0
 800348c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800348e:	2300      	movs	r3, #0
 8003490:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003492:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003496:	4619      	mov	r1, r3
 8003498:	4820      	ldr	r0, [pc, #128]	@ (800351c <MX_TIM1_Init+0x100>)
 800349a:	f005 fe4f 	bl	800913c <HAL_TIMEx_MasterConfigSynchronization>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80034a4:	f000 f9f0 	bl	8003888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034a8:	2360      	movs	r3, #96	@ 0x60
 80034aa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034b0:	2300      	movs	r3, #0
 80034b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80034b4:	2300      	movs	r3, #0
 80034b6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034b8:	2300      	movs	r3, #0
 80034ba:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80034bc:	2300      	movs	r3, #0
 80034be:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80034c0:	2300      	movs	r3, #0
 80034c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80034c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034c8:	2204      	movs	r2, #4
 80034ca:	4619      	mov	r1, r3
 80034cc:	4813      	ldr	r0, [pc, #76]	@ (800351c <MX_TIM1_Init+0x100>)
 80034ce:	f005 fb35 	bl	8008b3c <HAL_TIM_PWM_ConfigChannel>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80034d8:	f000 f9d6 	bl	8003888 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80034dc:	2300      	movs	r3, #0
 80034de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80034e0:	2300      	movs	r3, #0
 80034e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80034e4:	2300      	movs	r3, #0
 80034e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80034ec:	2300      	movs	r3, #0
 80034ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80034f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80034f6:	2300      	movs	r3, #0
 80034f8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80034fa:	1d3b      	adds	r3, r7, #4
 80034fc:	4619      	mov	r1, r3
 80034fe:	4807      	ldr	r0, [pc, #28]	@ (800351c <MX_TIM1_Init+0x100>)
 8003500:	f005 fe8a 	bl	8009218 <HAL_TIMEx_ConfigBreakDeadTime>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 800350a:	f000 f9bd 	bl	8003888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800350e:	4803      	ldr	r0, [pc, #12]	@ (800351c <MX_TIM1_Init+0x100>)
 8003510:	f000 fc6a 	bl	8003de8 <HAL_TIM_MspPostInit>

}
 8003514:	bf00      	nop
 8003516:	3748      	adds	r7, #72	@ 0x48
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	20002850 	.word	0x20002850
 8003520:	40010000 	.word	0x40010000

08003524 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b08a      	sub	sp, #40	@ 0x28
 8003528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800352a:	f107 0320 	add.w	r3, r7, #32
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003534:	1d3b      	adds	r3, r7, #4
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	605a      	str	r2, [r3, #4]
 800353c:	609a      	str	r2, [r3, #8]
 800353e:	60da      	str	r2, [r3, #12]
 8003540:	611a      	str	r2, [r3, #16]
 8003542:	615a      	str	r2, [r3, #20]
 8003544:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003546:	4b23      	ldr	r3, [pc, #140]	@ (80035d4 <MX_TIM2_Init+0xb0>)
 8003548:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800354c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440-1;
 800354e:	4b21      	ldr	r3, [pc, #132]	@ (80035d4 <MX_TIM2_Init+0xb0>)
 8003550:	f240 529f 	movw	r2, #1439	@ 0x59f
 8003554:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003556:	4b1f      	ldr	r3, [pc, #124]	@ (80035d4 <MX_TIM2_Init+0xb0>)
 8003558:	2200      	movs	r2, #0
 800355a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800355c:	4b1d      	ldr	r3, [pc, #116]	@ (80035d4 <MX_TIM2_Init+0xb0>)
 800355e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003562:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003564:	4b1b      	ldr	r3, [pc, #108]	@ (80035d4 <MX_TIM2_Init+0xb0>)
 8003566:	2200      	movs	r2, #0
 8003568:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800356a:	4b1a      	ldr	r3, [pc, #104]	@ (80035d4 <MX_TIM2_Init+0xb0>)
 800356c:	2200      	movs	r2, #0
 800356e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003570:	4818      	ldr	r0, [pc, #96]	@ (80035d4 <MX_TIM2_Init+0xb0>)
 8003572:	f005 f9e3 	bl	800893c <HAL_TIM_PWM_Init>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800357c:	f000 f984 	bl	8003888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003580:	2300      	movs	r3, #0
 8003582:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003584:	2300      	movs	r3, #0
 8003586:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003588:	f107 0320 	add.w	r3, r7, #32
 800358c:	4619      	mov	r1, r3
 800358e:	4811      	ldr	r0, [pc, #68]	@ (80035d4 <MX_TIM2_Init+0xb0>)
 8003590:	f005 fdd4 	bl	800913c <HAL_TIMEx_MasterConfigSynchronization>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800359a:	f000 f975 	bl	8003888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800359e:	2360      	movs	r3, #96	@ 0x60
 80035a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80035a2:	2300      	movs	r3, #0
 80035a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035ae:	1d3b      	adds	r3, r7, #4
 80035b0:	2200      	movs	r2, #0
 80035b2:	4619      	mov	r1, r3
 80035b4:	4807      	ldr	r0, [pc, #28]	@ (80035d4 <MX_TIM2_Init+0xb0>)
 80035b6:	f005 fac1 	bl	8008b3c <HAL_TIM_PWM_ConfigChannel>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80035c0:	f000 f962 	bl	8003888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80035c4:	4803      	ldr	r0, [pc, #12]	@ (80035d4 <MX_TIM2_Init+0xb0>)
 80035c6:	f000 fc0f 	bl	8003de8 <HAL_TIM_MspPostInit>

}
 80035ca:	bf00      	nop
 80035cc:	3728      	adds	r7, #40	@ 0x28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20002898 	.word	0x20002898

080035d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08a      	sub	sp, #40	@ 0x28
 80035dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035de:	f107 0320 	add.w	r3, r7, #32
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035e8:	1d3b      	adds	r3, r7, #4
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	605a      	str	r2, [r3, #4]
 80035f0:	609a      	str	r2, [r3, #8]
 80035f2:	60da      	str	r2, [r3, #12]
 80035f4:	611a      	str	r2, [r3, #16]
 80035f6:	615a      	str	r2, [r3, #20]
 80035f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80035fa:	4b22      	ldr	r3, [pc, #136]	@ (8003684 <MX_TIM3_Init+0xac>)
 80035fc:	4a22      	ldr	r2, [pc, #136]	@ (8003688 <MX_TIM3_Init+0xb0>)
 80035fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 263-1;
 8003600:	4b20      	ldr	r3, [pc, #128]	@ (8003684 <MX_TIM3_Init+0xac>)
 8003602:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8003606:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003608:	4b1e      	ldr	r3, [pc, #120]	@ (8003684 <MX_TIM3_Init+0xac>)
 800360a:	2200      	movs	r2, #0
 800360c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800360e:	4b1d      	ldr	r3, [pc, #116]	@ (8003684 <MX_TIM3_Init+0xac>)
 8003610:	2263      	movs	r2, #99	@ 0x63
 8003612:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003614:	4b1b      	ldr	r3, [pc, #108]	@ (8003684 <MX_TIM3_Init+0xac>)
 8003616:	2200      	movs	r2, #0
 8003618:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800361a:	4b1a      	ldr	r3, [pc, #104]	@ (8003684 <MX_TIM3_Init+0xac>)
 800361c:	2200      	movs	r2, #0
 800361e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003620:	4818      	ldr	r0, [pc, #96]	@ (8003684 <MX_TIM3_Init+0xac>)
 8003622:	f005 f98b 	bl	800893c <HAL_TIM_PWM_Init>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800362c:	f000 f92c 	bl	8003888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003630:	2300      	movs	r3, #0
 8003632:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003634:	2300      	movs	r3, #0
 8003636:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003638:	f107 0320 	add.w	r3, r7, #32
 800363c:	4619      	mov	r1, r3
 800363e:	4811      	ldr	r0, [pc, #68]	@ (8003684 <MX_TIM3_Init+0xac>)
 8003640:	f005 fd7c 	bl	800913c <HAL_TIMEx_MasterConfigSynchronization>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800364a:	f000 f91d 	bl	8003888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800364e:	2360      	movs	r3, #96	@ 0x60
 8003650:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003652:	2300      	movs	r3, #0
 8003654:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800365a:	2300      	movs	r3, #0
 800365c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800365e:	1d3b      	adds	r3, r7, #4
 8003660:	2200      	movs	r2, #0
 8003662:	4619      	mov	r1, r3
 8003664:	4807      	ldr	r0, [pc, #28]	@ (8003684 <MX_TIM3_Init+0xac>)
 8003666:	f005 fa69 	bl	8008b3c <HAL_TIM_PWM_ConfigChannel>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8003670:	f000 f90a 	bl	8003888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003674:	4803      	ldr	r0, [pc, #12]	@ (8003684 <MX_TIM3_Init+0xac>)
 8003676:	f000 fbb7 	bl	8003de8 <HAL_TIM_MspPostInit>

}
 800367a:	bf00      	nop
 800367c:	3728      	adds	r7, #40	@ 0x28
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	200028e0 	.word	0x200028e0
 8003688:	40000400 	.word	0x40000400

0800368c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003690:	4b11      	ldr	r3, [pc, #68]	@ (80036d8 <MX_USART1_UART_Init+0x4c>)
 8003692:	4a12      	ldr	r2, [pc, #72]	@ (80036dc <MX_USART1_UART_Init+0x50>)
 8003694:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003696:	4b10      	ldr	r3, [pc, #64]	@ (80036d8 <MX_USART1_UART_Init+0x4c>)
 8003698:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800369c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800369e:	4b0e      	ldr	r3, [pc, #56]	@ (80036d8 <MX_USART1_UART_Init+0x4c>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80036a4:	4b0c      	ldr	r3, [pc, #48]	@ (80036d8 <MX_USART1_UART_Init+0x4c>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80036aa:	4b0b      	ldr	r3, [pc, #44]	@ (80036d8 <MX_USART1_UART_Init+0x4c>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80036b0:	4b09      	ldr	r3, [pc, #36]	@ (80036d8 <MX_USART1_UART_Init+0x4c>)
 80036b2:	220c      	movs	r2, #12
 80036b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036b6:	4b08      	ldr	r3, [pc, #32]	@ (80036d8 <MX_USART1_UART_Init+0x4c>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80036bc:	4b06      	ldr	r3, [pc, #24]	@ (80036d8 <MX_USART1_UART_Init+0x4c>)
 80036be:	2200      	movs	r2, #0
 80036c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80036c2:	4805      	ldr	r0, [pc, #20]	@ (80036d8 <MX_USART1_UART_Init+0x4c>)
 80036c4:	f005 fdfa 	bl	80092bc <HAL_UART_Init>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80036ce:	f000 f8db 	bl	8003888 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80036d2:	bf00      	nop
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20002928 	.word	0x20002928
 80036dc:	40011000 	.word	0x40011000

080036e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80036e4:	4b11      	ldr	r3, [pc, #68]	@ (800372c <MX_USART2_UART_Init+0x4c>)
 80036e6:	4a12      	ldr	r2, [pc, #72]	@ (8003730 <MX_USART2_UART_Init+0x50>)
 80036e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80036ea:	4b10      	ldr	r3, [pc, #64]	@ (800372c <MX_USART2_UART_Init+0x4c>)
 80036ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80036f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80036f2:	4b0e      	ldr	r3, [pc, #56]	@ (800372c <MX_USART2_UART_Init+0x4c>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80036f8:	4b0c      	ldr	r3, [pc, #48]	@ (800372c <MX_USART2_UART_Init+0x4c>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80036fe:	4b0b      	ldr	r3, [pc, #44]	@ (800372c <MX_USART2_UART_Init+0x4c>)
 8003700:	2200      	movs	r2, #0
 8003702:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003704:	4b09      	ldr	r3, [pc, #36]	@ (800372c <MX_USART2_UART_Init+0x4c>)
 8003706:	220c      	movs	r2, #12
 8003708:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800370a:	4b08      	ldr	r3, [pc, #32]	@ (800372c <MX_USART2_UART_Init+0x4c>)
 800370c:	2200      	movs	r2, #0
 800370e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003710:	4b06      	ldr	r3, [pc, #24]	@ (800372c <MX_USART2_UART_Init+0x4c>)
 8003712:	2200      	movs	r2, #0
 8003714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003716:	4805      	ldr	r0, [pc, #20]	@ (800372c <MX_USART2_UART_Init+0x4c>)
 8003718:	f005 fdd0 	bl	80092bc <HAL_UART_Init>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003722:	f000 f8b1 	bl	8003888 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003726:	bf00      	nop
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20002970 	.word	0x20002970
 8003730:	40004400 	.word	0x40004400

08003734 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800373a:	2300      	movs	r3, #0
 800373c:	607b      	str	r3, [r7, #4]
 800373e:	4b10      	ldr	r3, [pc, #64]	@ (8003780 <MX_DMA_Init+0x4c>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003742:	4a0f      	ldr	r2, [pc, #60]	@ (8003780 <MX_DMA_Init+0x4c>)
 8003744:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003748:	6313      	str	r3, [r2, #48]	@ 0x30
 800374a:	4b0d      	ldr	r3, [pc, #52]	@ (8003780 <MX_DMA_Init+0x4c>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003752:	607b      	str	r3, [r7, #4]
 8003754:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003756:	2200      	movs	r2, #0
 8003758:	2100      	movs	r1, #0
 800375a:	203b      	movs	r0, #59	@ 0x3b
 800375c:	f001 fb0b 	bl	8004d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003760:	203b      	movs	r0, #59	@ 0x3b
 8003762:	f001 fb24 	bl	8004dae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8003766:	2200      	movs	r2, #0
 8003768:	2100      	movs	r1, #0
 800376a:	2045      	movs	r0, #69	@ 0x45
 800376c:	f001 fb03 	bl	8004d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003770:	2045      	movs	r0, #69	@ 0x45
 8003772:	f001 fb1c 	bl	8004dae <HAL_NVIC_EnableIRQ>

}
 8003776:	bf00      	nop
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40023800 	.word	0x40023800

08003784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08a      	sub	sp, #40	@ 0x28
 8003788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800378a:	f107 0314 	add.w	r3, r7, #20
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	605a      	str	r2, [r3, #4]
 8003794:	609a      	str	r2, [r3, #8]
 8003796:	60da      	str	r2, [r3, #12]
 8003798:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800379a:	2300      	movs	r3, #0
 800379c:	613b      	str	r3, [r7, #16]
 800379e:	4b37      	ldr	r3, [pc, #220]	@ (800387c <MX_GPIO_Init+0xf8>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a2:	4a36      	ldr	r2, [pc, #216]	@ (800387c <MX_GPIO_Init+0xf8>)
 80037a4:	f043 0304 	orr.w	r3, r3, #4
 80037a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80037aa:	4b34      	ldr	r3, [pc, #208]	@ (800387c <MX_GPIO_Init+0xf8>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	613b      	str	r3, [r7, #16]
 80037b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	4b30      	ldr	r3, [pc, #192]	@ (800387c <MX_GPIO_Init+0xf8>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037be:	4a2f      	ldr	r2, [pc, #188]	@ (800387c <MX_GPIO_Init+0xf8>)
 80037c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80037c6:	4b2d      	ldr	r3, [pc, #180]	@ (800387c <MX_GPIO_Init+0xf8>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	4b29      	ldr	r3, [pc, #164]	@ (800387c <MX_GPIO_Init+0xf8>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037da:	4a28      	ldr	r2, [pc, #160]	@ (800387c <MX_GPIO_Init+0xf8>)
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80037e2:	4b26      	ldr	r3, [pc, #152]	@ (800387c <MX_GPIO_Init+0xf8>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	607b      	str	r3, [r7, #4]
 80037f2:	4b22      	ldr	r3, [pc, #136]	@ (800387c <MX_GPIO_Init+0xf8>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f6:	4a21      	ldr	r2, [pc, #132]	@ (800387c <MX_GPIO_Init+0xf8>)
 80037f8:	f043 0302 	orr.w	r3, r3, #2
 80037fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80037fe:	4b1f      	ldr	r3, [pc, #124]	@ (800387c <MX_GPIO_Init+0xf8>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	607b      	str	r3, [r7, #4]
 8003808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800380a:	2200      	movs	r2, #0
 800380c:	2133      	movs	r1, #51	@ 0x33
 800380e:	481c      	ldr	r0, [pc, #112]	@ (8003880 <MX_GPIO_Init+0xfc>)
 8003810:	f002 f87a 	bl	8005908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8003814:	2200      	movs	r2, #0
 8003816:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800381a:	481a      	ldr	r0, [pc, #104]	@ (8003884 <MX_GPIO_Init+0x100>)
 800381c:	f002 f874 	bl	8005908 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003820:	2333      	movs	r3, #51	@ 0x33
 8003822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003824:	2301      	movs	r3, #1
 8003826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003828:	2300      	movs	r3, #0
 800382a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800382c:	2300      	movs	r3, #0
 800382e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003830:	f107 0314 	add.w	r3, r7, #20
 8003834:	4619      	mov	r1, r3
 8003836:	4812      	ldr	r0, [pc, #72]	@ (8003880 <MX_GPIO_Init+0xfc>)
 8003838:	f001 fee2 	bl	8005600 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800383c:	2304      	movs	r3, #4
 800383e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003840:	2300      	movs	r3, #0
 8003842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003844:	2300      	movs	r3, #0
 8003846:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003848:	f107 0314 	add.w	r3, r7, #20
 800384c:	4619      	mov	r1, r3
 800384e:	480c      	ldr	r0, [pc, #48]	@ (8003880 <MX_GPIO_Init+0xfc>)
 8003850:	f001 fed6 	bl	8005600 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003854:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800385a:	2301      	movs	r3, #1
 800385c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385e:	2300      	movs	r3, #0
 8003860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003862:	2300      	movs	r3, #0
 8003864:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003866:	f107 0314 	add.w	r3, r7, #20
 800386a:	4619      	mov	r1, r3
 800386c:	4805      	ldr	r0, [pc, #20]	@ (8003884 <MX_GPIO_Init+0x100>)
 800386e:	f001 fec7 	bl	8005600 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003872:	bf00      	nop
 8003874:	3728      	adds	r7, #40	@ 0x28
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	40023800 	.word	0x40023800
 8003880:	40020800 	.word	0x40020800
 8003884:	40020400 	.word	0x40020400

08003888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800388c:	b672      	cpsid	i
}
 800388e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003890:	bf00      	nop
 8003892:	e7fd      	b.n	8003890 <Error_Handler+0x8>

08003894 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800389a:	2300      	movs	r3, #0
 800389c:	607b      	str	r3, [r7, #4]
 800389e:	4b10      	ldr	r3, [pc, #64]	@ (80038e0 <HAL_MspInit+0x4c>)
 80038a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a2:	4a0f      	ldr	r2, [pc, #60]	@ (80038e0 <HAL_MspInit+0x4c>)
 80038a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80038aa:	4b0d      	ldr	r3, [pc, #52]	@ (80038e0 <HAL_MspInit+0x4c>)
 80038ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038b2:	607b      	str	r3, [r7, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038b6:	2300      	movs	r3, #0
 80038b8:	603b      	str	r3, [r7, #0]
 80038ba:	4b09      	ldr	r3, [pc, #36]	@ (80038e0 <HAL_MspInit+0x4c>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038be:	4a08      	ldr	r2, [pc, #32]	@ (80038e0 <HAL_MspInit+0x4c>)
 80038c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80038c6:	4b06      	ldr	r3, [pc, #24]	@ (80038e0 <HAL_MspInit+0x4c>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ce:	603b      	str	r3, [r7, #0]
 80038d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40023800 	.word	0x40023800

080038e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b08a      	sub	sp, #40	@ 0x28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ec:	f107 0314 	add.w	r3, r7, #20
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	605a      	str	r2, [r3, #4]
 80038f6:	609a      	str	r2, [r3, #8]
 80038f8:	60da      	str	r2, [r3, #12]
 80038fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a17      	ldr	r2, [pc, #92]	@ (8003960 <HAL_ADC_MspInit+0x7c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d127      	bne.n	8003956 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003906:	2300      	movs	r3, #0
 8003908:	613b      	str	r3, [r7, #16]
 800390a:	4b16      	ldr	r3, [pc, #88]	@ (8003964 <HAL_ADC_MspInit+0x80>)
 800390c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800390e:	4a15      	ldr	r2, [pc, #84]	@ (8003964 <HAL_ADC_MspInit+0x80>)
 8003910:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003914:	6453      	str	r3, [r2, #68]	@ 0x44
 8003916:	4b13      	ldr	r3, [pc, #76]	@ (8003964 <HAL_ADC_MspInit+0x80>)
 8003918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800391e:	613b      	str	r3, [r7, #16]
 8003920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	4b0f      	ldr	r3, [pc, #60]	@ (8003964 <HAL_ADC_MspInit+0x80>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392a:	4a0e      	ldr	r2, [pc, #56]	@ (8003964 <HAL_ADC_MspInit+0x80>)
 800392c:	f043 0301 	orr.w	r3, r3, #1
 8003930:	6313      	str	r3, [r2, #48]	@ 0x30
 8003932:	4b0c      	ldr	r3, [pc, #48]	@ (8003964 <HAL_ADC_MspInit+0x80>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800393e:	2301      	movs	r3, #1
 8003940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003942:	2303      	movs	r3, #3
 8003944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003946:	2300      	movs	r3, #0
 8003948:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800394a:	f107 0314 	add.w	r3, r7, #20
 800394e:	4619      	mov	r1, r3
 8003950:	4805      	ldr	r0, [pc, #20]	@ (8003968 <HAL_ADC_MspInit+0x84>)
 8003952:	f001 fe55 	bl	8005600 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003956:	bf00      	nop
 8003958:	3728      	adds	r7, #40	@ 0x28
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40012000 	.word	0x40012000
 8003964:	40023800 	.word	0x40023800
 8003968:	40020000 	.word	0x40020000

0800396c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08e      	sub	sp, #56	@ 0x38
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003974:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	605a      	str	r2, [r3, #4]
 800397e:	609a      	str	r2, [r3, #8]
 8003980:	60da      	str	r2, [r3, #12]
 8003982:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a63      	ldr	r2, [pc, #396]	@ (8003b18 <HAL_I2C_MspInit+0x1ac>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d12c      	bne.n	80039e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	623b      	str	r3, [r7, #32]
 8003992:	4b62      	ldr	r3, [pc, #392]	@ (8003b1c <HAL_I2C_MspInit+0x1b0>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003996:	4a61      	ldr	r2, [pc, #388]	@ (8003b1c <HAL_I2C_MspInit+0x1b0>)
 8003998:	f043 0302 	orr.w	r3, r3, #2
 800399c:	6313      	str	r3, [r2, #48]	@ 0x30
 800399e:	4b5f      	ldr	r3, [pc, #380]	@ (8003b1c <HAL_I2C_MspInit+0x1b0>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	623b      	str	r3, [r7, #32]
 80039a8:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80039aa:	23c0      	movs	r3, #192	@ 0xc0
 80039ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039ae:	2312      	movs	r3, #18
 80039b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b6:	2303      	movs	r3, #3
 80039b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80039ba:	2304      	movs	r3, #4
 80039bc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039c2:	4619      	mov	r1, r3
 80039c4:	4856      	ldr	r0, [pc, #344]	@ (8003b20 <HAL_I2C_MspInit+0x1b4>)
 80039c6:	f001 fe1b 	bl	8005600 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80039ca:	2300      	movs	r3, #0
 80039cc:	61fb      	str	r3, [r7, #28]
 80039ce:	4b53      	ldr	r3, [pc, #332]	@ (8003b1c <HAL_I2C_MspInit+0x1b0>)
 80039d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d2:	4a52      	ldr	r2, [pc, #328]	@ (8003b1c <HAL_I2C_MspInit+0x1b0>)
 80039d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80039d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80039da:	4b50      	ldr	r3, [pc, #320]	@ (8003b1c <HAL_I2C_MspInit+0x1b0>)
 80039dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039e2:	61fb      	str	r3, [r7, #28]
 80039e4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80039e6:	e092      	b.n	8003b0e <HAL_I2C_MspInit+0x1a2>
  else if(hi2c->Instance==I2C2)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a4d      	ldr	r2, [pc, #308]	@ (8003b24 <HAL_I2C_MspInit+0x1b8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d13d      	bne.n	8003a6e <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039f2:	2300      	movs	r3, #0
 80039f4:	61bb      	str	r3, [r7, #24]
 80039f6:	4b49      	ldr	r3, [pc, #292]	@ (8003b1c <HAL_I2C_MspInit+0x1b0>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fa:	4a48      	ldr	r2, [pc, #288]	@ (8003b1c <HAL_I2C_MspInit+0x1b0>)
 80039fc:	f043 0302 	orr.w	r3, r3, #2
 8003a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a02:	4b46      	ldr	r3, [pc, #280]	@ (8003b1c <HAL_I2C_MspInit+0x1b0>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	61bb      	str	r3, [r7, #24]
 8003a0c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003a0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a14:	2312      	movs	r3, #18
 8003a16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003a20:	2304      	movs	r3, #4
 8003a22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a28:	4619      	mov	r1, r3
 8003a2a:	483d      	ldr	r0, [pc, #244]	@ (8003b20 <HAL_I2C_MspInit+0x1b4>)
 8003a2c:	f001 fde8 	bl	8005600 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a30:	2308      	movs	r3, #8
 8003a32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a34:	2312      	movs	r3, #18
 8003a36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003a40:	2309      	movs	r3, #9
 8003a42:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4835      	ldr	r0, [pc, #212]	@ (8003b20 <HAL_I2C_MspInit+0x1b4>)
 8003a4c:	f001 fdd8 	bl	8005600 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003a50:	2300      	movs	r3, #0
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	4b31      	ldr	r3, [pc, #196]	@ (8003b1c <HAL_I2C_MspInit+0x1b0>)
 8003a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a58:	4a30      	ldr	r2, [pc, #192]	@ (8003b1c <HAL_I2C_MspInit+0x1b0>)
 8003a5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003a5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a60:	4b2e      	ldr	r3, [pc, #184]	@ (8003b1c <HAL_I2C_MspInit+0x1b0>)
 8003a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a68:	617b      	str	r3, [r7, #20]
 8003a6a:	697b      	ldr	r3, [r7, #20]
}
 8003a6c:	e04f      	b.n	8003b0e <HAL_I2C_MspInit+0x1a2>
  else if(hi2c->Instance==I2C3)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a2d      	ldr	r2, [pc, #180]	@ (8003b28 <HAL_I2C_MspInit+0x1bc>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d14a      	bne.n	8003b0e <HAL_I2C_MspInit+0x1a2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a78:	2300      	movs	r3, #0
 8003a7a:	613b      	str	r3, [r7, #16]
 8003a7c:	4b27      	ldr	r3, [pc, #156]	@ (8003b1c <HAL_I2C_MspInit+0x1b0>)
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a80:	4a26      	ldr	r2, [pc, #152]	@ (8003b1c <HAL_I2C_MspInit+0x1b0>)
 8003a82:	f043 0301 	orr.w	r3, r3, #1
 8003a86:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a88:	4b24      	ldr	r3, [pc, #144]	@ (8003b1c <HAL_I2C_MspInit+0x1b0>)
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	613b      	str	r3, [r7, #16]
 8003a92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	4b20      	ldr	r3, [pc, #128]	@ (8003b1c <HAL_I2C_MspInit+0x1b0>)
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9c:	4a1f      	ldr	r2, [pc, #124]	@ (8003b1c <HAL_I2C_MspInit+0x1b0>)
 8003a9e:	f043 0302 	orr.w	r3, r3, #2
 8003aa2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b1c <HAL_I2C_MspInit+0x1b0>)
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003ab0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ab4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ab6:	2312      	movs	r3, #18
 8003ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003ac2:	2304      	movs	r3, #4
 8003ac4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003aca:	4619      	mov	r1, r3
 8003acc:	4817      	ldr	r0, [pc, #92]	@ (8003b2c <HAL_I2C_MspInit+0x1c0>)
 8003ace:	f001 fd97 	bl	8005600 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003ad2:	2310      	movs	r3, #16
 8003ad4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ad6:	2312      	movs	r3, #18
 8003ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8003ae2:	2309      	movs	r3, #9
 8003ae4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ae6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003aea:	4619      	mov	r1, r3
 8003aec:	480c      	ldr	r0, [pc, #48]	@ (8003b20 <HAL_I2C_MspInit+0x1b4>)
 8003aee:	f001 fd87 	bl	8005600 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003af2:	2300      	movs	r3, #0
 8003af4:	60bb      	str	r3, [r7, #8]
 8003af6:	4b09      	ldr	r3, [pc, #36]	@ (8003b1c <HAL_I2C_MspInit+0x1b0>)
 8003af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afa:	4a08      	ldr	r2, [pc, #32]	@ (8003b1c <HAL_I2C_MspInit+0x1b0>)
 8003afc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b02:	4b06      	ldr	r3, [pc, #24]	@ (8003b1c <HAL_I2C_MspInit+0x1b0>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b0a:	60bb      	str	r3, [r7, #8]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
}
 8003b0e:	bf00      	nop
 8003b10:	3738      	adds	r7, #56	@ 0x38
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40005400 	.word	0x40005400
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	40020400 	.word	0x40020400
 8003b24:	40005800 	.word	0x40005800
 8003b28:	40005c00 	.word	0x40005c00
 8003b2c:	40020000 	.word	0x40020000

08003b30 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08c      	sub	sp, #48	@ 0x30
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b38:	f107 031c 	add.w	r3, r7, #28
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	605a      	str	r2, [r3, #4]
 8003b42:	609a      	str	r2, [r3, #8]
 8003b44:	60da      	str	r2, [r3, #12]
 8003b46:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a77      	ldr	r2, [pc, #476]	@ (8003d2c <HAL_SD_MspInit+0x1fc>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	f040 80e8 	bne.w	8003d24 <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003b54:	2300      	movs	r3, #0
 8003b56:	61bb      	str	r3, [r7, #24]
 8003b58:	4b75      	ldr	r3, [pc, #468]	@ (8003d30 <HAL_SD_MspInit+0x200>)
 8003b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5c:	4a74      	ldr	r2, [pc, #464]	@ (8003d30 <HAL_SD_MspInit+0x200>)
 8003b5e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003b62:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b64:	4b72      	ldr	r3, [pc, #456]	@ (8003d30 <HAL_SD_MspInit+0x200>)
 8003b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b6c:	61bb      	str	r3, [r7, #24]
 8003b6e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	4b6e      	ldr	r3, [pc, #440]	@ (8003d30 <HAL_SD_MspInit+0x200>)
 8003b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b78:	4a6d      	ldr	r2, [pc, #436]	@ (8003d30 <HAL_SD_MspInit+0x200>)
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
 8003b7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b80:	4b6b      	ldr	r3, [pc, #428]	@ (8003d30 <HAL_SD_MspInit+0x200>)
 8003b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	4b67      	ldr	r3, [pc, #412]	@ (8003d30 <HAL_SD_MspInit+0x200>)
 8003b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b94:	4a66      	ldr	r2, [pc, #408]	@ (8003d30 <HAL_SD_MspInit+0x200>)
 8003b96:	f043 0302 	orr.w	r3, r3, #2
 8003b9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b9c:	4b64      	ldr	r3, [pc, #400]	@ (8003d30 <HAL_SD_MspInit+0x200>)
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	4b60      	ldr	r3, [pc, #384]	@ (8003d30 <HAL_SD_MspInit+0x200>)
 8003bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb0:	4a5f      	ldr	r2, [pc, #380]	@ (8003d30 <HAL_SD_MspInit+0x200>)
 8003bb2:	f043 0304 	orr.w	r3, r3, #4
 8003bb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bb8:	4b5d      	ldr	r3, [pc, #372]	@ (8003d30 <HAL_SD_MspInit+0x200>)
 8003bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003bc4:	2340      	movs	r3, #64	@ 0x40
 8003bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003bd4:	230c      	movs	r3, #12
 8003bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bd8:	f107 031c 	add.w	r3, r7, #28
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4855      	ldr	r0, [pc, #340]	@ (8003d34 <HAL_SD_MspInit+0x204>)
 8003be0:	f001 fd0e 	bl	8005600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003be4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bea:	2302      	movs	r3, #2
 8003bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003bf6:	230c      	movs	r3, #12
 8003bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bfa:	f107 031c 	add.w	r3, r7, #28
 8003bfe:	4619      	mov	r1, r3
 8003c00:	484d      	ldr	r0, [pc, #308]	@ (8003d38 <HAL_SD_MspInit+0x208>)
 8003c02:	f001 fcfd 	bl	8005600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003c06:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c14:	2303      	movs	r3, #3
 8003c16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003c18:	230c      	movs	r3, #12
 8003c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c1c:	f107 031c 	add.w	r3, r7, #28
 8003c20:	4619      	mov	r1, r3
 8003c22:	4846      	ldr	r0, [pc, #280]	@ (8003d3c <HAL_SD_MspInit+0x20c>)
 8003c24:	f001 fcec 	bl	8005600 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8003c28:	4b45      	ldr	r3, [pc, #276]	@ (8003d40 <HAL_SD_MspInit+0x210>)
 8003c2a:	4a46      	ldr	r2, [pc, #280]	@ (8003d44 <HAL_SD_MspInit+0x214>)
 8003c2c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8003c2e:	4b44      	ldr	r3, [pc, #272]	@ (8003d40 <HAL_SD_MspInit+0x210>)
 8003c30:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003c34:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c36:	4b42      	ldr	r3, [pc, #264]	@ (8003d40 <HAL_SD_MspInit+0x210>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c3c:	4b40      	ldr	r3, [pc, #256]	@ (8003d40 <HAL_SD_MspInit+0x210>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c42:	4b3f      	ldr	r3, [pc, #252]	@ (8003d40 <HAL_SD_MspInit+0x210>)
 8003c44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c48:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003c4a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d40 <HAL_SD_MspInit+0x210>)
 8003c4c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003c50:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003c52:	4b3b      	ldr	r3, [pc, #236]	@ (8003d40 <HAL_SD_MspInit+0x210>)
 8003c54:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003c58:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8003c5a:	4b39      	ldr	r3, [pc, #228]	@ (8003d40 <HAL_SD_MspInit+0x210>)
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c60:	4b37      	ldr	r3, [pc, #220]	@ (8003d40 <HAL_SD_MspInit+0x210>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003c66:	4b36      	ldr	r3, [pc, #216]	@ (8003d40 <HAL_SD_MspInit+0x210>)
 8003c68:	2204      	movs	r2, #4
 8003c6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003c6c:	4b34      	ldr	r3, [pc, #208]	@ (8003d40 <HAL_SD_MspInit+0x210>)
 8003c6e:	2203      	movs	r2, #3
 8003c70:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003c72:	4b33      	ldr	r3, [pc, #204]	@ (8003d40 <HAL_SD_MspInit+0x210>)
 8003c74:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003c78:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003c7a:	4b31      	ldr	r3, [pc, #196]	@ (8003d40 <HAL_SD_MspInit+0x210>)
 8003c7c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003c80:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8003c82:	482f      	ldr	r0, [pc, #188]	@ (8003d40 <HAL_SD_MspInit+0x210>)
 8003c84:	f001 f8ae 	bl	8004de4 <HAL_DMA_Init>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_SD_MspInit+0x162>
    {
      Error_Handler();
 8003c8e:	f7ff fdfb 	bl	8003888 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a2a      	ldr	r2, [pc, #168]	@ (8003d40 <HAL_SD_MspInit+0x210>)
 8003c96:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c98:	4a29      	ldr	r2, [pc, #164]	@ (8003d40 <HAL_SD_MspInit+0x210>)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8003c9e:	4b2a      	ldr	r3, [pc, #168]	@ (8003d48 <HAL_SD_MspInit+0x218>)
 8003ca0:	4a2a      	ldr	r2, [pc, #168]	@ (8003d4c <HAL_SD_MspInit+0x21c>)
 8003ca2:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8003ca4:	4b28      	ldr	r3, [pc, #160]	@ (8003d48 <HAL_SD_MspInit+0x218>)
 8003ca6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003caa:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003cac:	4b26      	ldr	r3, [pc, #152]	@ (8003d48 <HAL_SD_MspInit+0x218>)
 8003cae:	2240      	movs	r2, #64	@ 0x40
 8003cb0:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cb2:	4b25      	ldr	r3, [pc, #148]	@ (8003d48 <HAL_SD_MspInit+0x218>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003cb8:	4b23      	ldr	r3, [pc, #140]	@ (8003d48 <HAL_SD_MspInit+0x218>)
 8003cba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cbe:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003cc0:	4b21      	ldr	r3, [pc, #132]	@ (8003d48 <HAL_SD_MspInit+0x218>)
 8003cc2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003cc6:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8003d48 <HAL_SD_MspInit+0x218>)
 8003cca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003cce:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8003cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8003d48 <HAL_SD_MspInit+0x218>)
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8003d48 <HAL_SD_MspInit+0x218>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8003d48 <HAL_SD_MspInit+0x218>)
 8003cde:	2204      	movs	r2, #4
 8003ce0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003ce2:	4b19      	ldr	r3, [pc, #100]	@ (8003d48 <HAL_SD_MspInit+0x218>)
 8003ce4:	2203      	movs	r2, #3
 8003ce6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8003ce8:	4b17      	ldr	r3, [pc, #92]	@ (8003d48 <HAL_SD_MspInit+0x218>)
 8003cea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003cee:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003cf0:	4b15      	ldr	r3, [pc, #84]	@ (8003d48 <HAL_SD_MspInit+0x218>)
 8003cf2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003cf6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8003cf8:	4813      	ldr	r0, [pc, #76]	@ (8003d48 <HAL_SD_MspInit+0x218>)
 8003cfa:	f001 f873 	bl	8004de4 <HAL_DMA_Init>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <HAL_SD_MspInit+0x1d8>
    {
      Error_Handler();
 8003d04:	f7ff fdc0 	bl	8003888 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a0f      	ldr	r2, [pc, #60]	@ (8003d48 <HAL_SD_MspInit+0x218>)
 8003d0c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003d0e:	4a0e      	ldr	r2, [pc, #56]	@ (8003d48 <HAL_SD_MspInit+0x218>)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8003d14:	2200      	movs	r2, #0
 8003d16:	2100      	movs	r1, #0
 8003d18:	2031      	movs	r0, #49	@ 0x31
 8003d1a:	f001 f82c 	bl	8004d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8003d1e:	2031      	movs	r0, #49	@ 0x31
 8003d20:	f001 f845 	bl	8004dae <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8003d24:	bf00      	nop
 8003d26:	3730      	adds	r7, #48	@ 0x30
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40023800 	.word	0x40023800
 8003d34:	40020000 	.word	0x40020000
 8003d38:	40020400 	.word	0x40020400
 8003d3c:	40020800 	.word	0x40020800
 8003d40:	20002790 	.word	0x20002790
 8003d44:	40026458 	.word	0x40026458
 8003d48:	200027f0 	.word	0x200027f0
 8003d4c:	400264a0 	.word	0x400264a0

08003d50 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b087      	sub	sp, #28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a1f      	ldr	r2, [pc, #124]	@ (8003ddc <HAL_TIM_PWM_MspInit+0x8c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d10e      	bne.n	8003d80 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	4b1e      	ldr	r3, [pc, #120]	@ (8003de0 <HAL_TIM_PWM_MspInit+0x90>)
 8003d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6a:	4a1d      	ldr	r2, [pc, #116]	@ (8003de0 <HAL_TIM_PWM_MspInit+0x90>)
 8003d6c:	f043 0301 	orr.w	r3, r3, #1
 8003d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d72:	4b1b      	ldr	r3, [pc, #108]	@ (8003de0 <HAL_TIM_PWM_MspInit+0x90>)
 8003d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003d7e:	e026      	b.n	8003dce <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d88:	d10e      	bne.n	8003da8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	613b      	str	r3, [r7, #16]
 8003d8e:	4b14      	ldr	r3, [pc, #80]	@ (8003de0 <HAL_TIM_PWM_MspInit+0x90>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d92:	4a13      	ldr	r2, [pc, #76]	@ (8003de0 <HAL_TIM_PWM_MspInit+0x90>)
 8003d94:	f043 0301 	orr.w	r3, r3, #1
 8003d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d9a:	4b11      	ldr	r3, [pc, #68]	@ (8003de0 <HAL_TIM_PWM_MspInit+0x90>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	613b      	str	r3, [r7, #16]
 8003da4:	693b      	ldr	r3, [r7, #16]
}
 8003da6:	e012      	b.n	8003dce <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a0d      	ldr	r2, [pc, #52]	@ (8003de4 <HAL_TIM_PWM_MspInit+0x94>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d10d      	bne.n	8003dce <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]
 8003db6:	4b0a      	ldr	r3, [pc, #40]	@ (8003de0 <HAL_TIM_PWM_MspInit+0x90>)
 8003db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dba:	4a09      	ldr	r2, [pc, #36]	@ (8003de0 <HAL_TIM_PWM_MspInit+0x90>)
 8003dbc:	f043 0302 	orr.w	r3, r3, #2
 8003dc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dc2:	4b07      	ldr	r3, [pc, #28]	@ (8003de0 <HAL_TIM_PWM_MspInit+0x90>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
}
 8003dce:	bf00      	nop
 8003dd0:	371c      	adds	r7, #28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40010000 	.word	0x40010000
 8003de0:	40023800 	.word	0x40023800
 8003de4:	40000400 	.word	0x40000400

08003de8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08a      	sub	sp, #40	@ 0x28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df0:	f107 0314 	add.w	r3, r7, #20
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	605a      	str	r2, [r3, #4]
 8003dfa:	609a      	str	r2, [r3, #8]
 8003dfc:	60da      	str	r2, [r3, #12]
 8003dfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a36      	ldr	r2, [pc, #216]	@ (8003ee0 <HAL_TIM_MspPostInit+0xf8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d11f      	bne.n	8003e4a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	613b      	str	r3, [r7, #16]
 8003e0e:	4b35      	ldr	r3, [pc, #212]	@ (8003ee4 <HAL_TIM_MspPostInit+0xfc>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e12:	4a34      	ldr	r2, [pc, #208]	@ (8003ee4 <HAL_TIM_MspPostInit+0xfc>)
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e1a:	4b32      	ldr	r3, [pc, #200]	@ (8003ee4 <HAL_TIM_MspPostInit+0xfc>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	613b      	str	r3, [r7, #16]
 8003e24:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e30:	2300      	movs	r3, #0
 8003e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e34:	2300      	movs	r3, #0
 8003e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e3c:	f107 0314 	add.w	r3, r7, #20
 8003e40:	4619      	mov	r1, r3
 8003e42:	4829      	ldr	r0, [pc, #164]	@ (8003ee8 <HAL_TIM_MspPostInit+0x100>)
 8003e44:	f001 fbdc 	bl	8005600 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003e48:	e046      	b.n	8003ed8 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM2)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e52:	d11e      	bne.n	8003e92 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e54:	2300      	movs	r3, #0
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	4b22      	ldr	r3, [pc, #136]	@ (8003ee4 <HAL_TIM_MspPostInit+0xfc>)
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5c:	4a21      	ldr	r2, [pc, #132]	@ (8003ee4 <HAL_TIM_MspPostInit+0xfc>)
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e64:	4b1f      	ldr	r3, [pc, #124]	@ (8003ee4 <HAL_TIM_MspPostInit+0xfc>)
 8003e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003e70:	2320      	movs	r3, #32
 8003e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e74:	2302      	movs	r3, #2
 8003e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e80:	2301      	movs	r3, #1
 8003e82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e84:	f107 0314 	add.w	r3, r7, #20
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4817      	ldr	r0, [pc, #92]	@ (8003ee8 <HAL_TIM_MspPostInit+0x100>)
 8003e8c:	f001 fbb8 	bl	8005600 <HAL_GPIO_Init>
}
 8003e90:	e022      	b.n	8003ed8 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a15      	ldr	r2, [pc, #84]	@ (8003eec <HAL_TIM_MspPostInit+0x104>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d11d      	bne.n	8003ed8 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	60bb      	str	r3, [r7, #8]
 8003ea0:	4b10      	ldr	r3, [pc, #64]	@ (8003ee4 <HAL_TIM_MspPostInit+0xfc>)
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea4:	4a0f      	ldr	r2, [pc, #60]	@ (8003ee4 <HAL_TIM_MspPostInit+0xfc>)
 8003ea6:	f043 0304 	orr.w	r3, r3, #4
 8003eaa:	6313      	str	r3, [r2, #48]	@ 0x30
 8003eac:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee4 <HAL_TIM_MspPostInit+0xfc>)
 8003eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	60bb      	str	r3, [r7, #8]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003eb8:	2340      	movs	r3, #64	@ 0x40
 8003eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003ec8:	2302      	movs	r3, #2
 8003eca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ecc:	f107 0314 	add.w	r3, r7, #20
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4807      	ldr	r0, [pc, #28]	@ (8003ef0 <HAL_TIM_MspPostInit+0x108>)
 8003ed4:	f001 fb94 	bl	8005600 <HAL_GPIO_Init>
}
 8003ed8:	bf00      	nop
 8003eda:	3728      	adds	r7, #40	@ 0x28
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40010000 	.word	0x40010000
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	40020000 	.word	0x40020000
 8003eec:	40000400 	.word	0x40000400
 8003ef0:	40020800 	.word	0x40020800

08003ef4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08c      	sub	sp, #48	@ 0x30
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003efc:	f107 031c 	add.w	r3, r7, #28
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	605a      	str	r2, [r3, #4]
 8003f06:	609a      	str	r2, [r3, #8]
 8003f08:	60da      	str	r2, [r3, #12]
 8003f0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a36      	ldr	r2, [pc, #216]	@ (8003fec <HAL_UART_MspInit+0xf8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d135      	bne.n	8003f82 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f16:	2300      	movs	r3, #0
 8003f18:	61bb      	str	r3, [r7, #24]
 8003f1a:	4b35      	ldr	r3, [pc, #212]	@ (8003ff0 <HAL_UART_MspInit+0xfc>)
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1e:	4a34      	ldr	r2, [pc, #208]	@ (8003ff0 <HAL_UART_MspInit+0xfc>)
 8003f20:	f043 0310 	orr.w	r3, r3, #16
 8003f24:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f26:	4b32      	ldr	r3, [pc, #200]	@ (8003ff0 <HAL_UART_MspInit+0xfc>)
 8003f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2a:	f003 0310 	and.w	r3, r3, #16
 8003f2e:	61bb      	str	r3, [r7, #24]
 8003f30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f32:	2300      	movs	r3, #0
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	4b2e      	ldr	r3, [pc, #184]	@ (8003ff0 <HAL_UART_MspInit+0xfc>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3a:	4a2d      	ldr	r2, [pc, #180]	@ (8003ff0 <HAL_UART_MspInit+0xfc>)
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f42:	4b2b      	ldr	r3, [pc, #172]	@ (8003ff0 <HAL_UART_MspInit+0xfc>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8003f4e:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8003f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f54:	2302      	movs	r3, #2
 8003f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f60:	2307      	movs	r3, #7
 8003f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f64:	f107 031c 	add.w	r3, r7, #28
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4822      	ldr	r0, [pc, #136]	@ (8003ff4 <HAL_UART_MspInit+0x100>)
 8003f6c:	f001 fb48 	bl	8005600 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003f70:	2200      	movs	r2, #0
 8003f72:	2100      	movs	r1, #0
 8003f74:	2025      	movs	r0, #37	@ 0x25
 8003f76:	f000 fefe 	bl	8004d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003f7a:	2025      	movs	r0, #37	@ 0x25
 8003f7c:	f000 ff17 	bl	8004dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003f80:	e030      	b.n	8003fe4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a1c      	ldr	r2, [pc, #112]	@ (8003ff8 <HAL_UART_MspInit+0x104>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d12b      	bne.n	8003fe4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	613b      	str	r3, [r7, #16]
 8003f90:	4b17      	ldr	r3, [pc, #92]	@ (8003ff0 <HAL_UART_MspInit+0xfc>)
 8003f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f94:	4a16      	ldr	r2, [pc, #88]	@ (8003ff0 <HAL_UART_MspInit+0xfc>)
 8003f96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f9c:	4b14      	ldr	r3, [pc, #80]	@ (8003ff0 <HAL_UART_MspInit+0xfc>)
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa4:	613b      	str	r3, [r7, #16]
 8003fa6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	4b10      	ldr	r3, [pc, #64]	@ (8003ff0 <HAL_UART_MspInit+0xfc>)
 8003fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb0:	4a0f      	ldr	r2, [pc, #60]	@ (8003ff0 <HAL_UART_MspInit+0xfc>)
 8003fb2:	f043 0301 	orr.w	r3, r3, #1
 8003fb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff0 <HAL_UART_MspInit+0xfc>)
 8003fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003fc4:	230c      	movs	r3, #12
 8003fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc8:	2302      	movs	r3, #2
 8003fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003fd4:	2307      	movs	r3, #7
 8003fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fd8:	f107 031c 	add.w	r3, r7, #28
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4805      	ldr	r0, [pc, #20]	@ (8003ff4 <HAL_UART_MspInit+0x100>)
 8003fe0:	f001 fb0e 	bl	8005600 <HAL_GPIO_Init>
}
 8003fe4:	bf00      	nop
 8003fe6:	3730      	adds	r7, #48	@ 0x30
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40011000 	.word	0x40011000
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	40020000 	.word	0x40020000
 8003ff8:	40004400 	.word	0x40004400

08003ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004000:	bf00      	nop
 8004002:	e7fd      	b.n	8004000 <NMI_Handler+0x4>

08004004 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004008:	bf00      	nop
 800400a:	e7fd      	b.n	8004008 <HardFault_Handler+0x4>

0800400c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004010:	bf00      	nop
 8004012:	e7fd      	b.n	8004010 <MemManage_Handler+0x4>

08004014 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004018:	bf00      	nop
 800401a:	e7fd      	b.n	8004018 <BusFault_Handler+0x4>

0800401c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004020:	bf00      	nop
 8004022:	e7fd      	b.n	8004020 <UsageFault_Handler+0x4>

08004024 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004028:	bf00      	nop
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004032:	b480      	push	{r7}
 8004034:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004036:	bf00      	nop
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004044:	bf00      	nop
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004052:	f000 f97f 	bl	8004354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004056:	bf00      	nop
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004060:	4802      	ldr	r0, [pc, #8]	@ (800406c <USART1_IRQHandler+0x10>)
 8004062:	f005 fa2b 	bl	80094bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004066:	bf00      	nop
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20002928 	.word	0x20002928

08004070 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8004074:	4802      	ldr	r0, [pc, #8]	@ (8004080 <SDIO_IRQHandler+0x10>)
 8004076:	f003 fb45 	bl	8007704 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800407a:	bf00      	nop
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	2000270c 	.word	0x2000270c

08004084 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8004088:	4802      	ldr	r0, [pc, #8]	@ (8004094 <DMA2_Stream3_IRQHandler+0x10>)
 800408a:	f001 f843 	bl	8005114 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800408e:	bf00      	nop
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	20002790 	.word	0x20002790

08004098 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800409c:	4802      	ldr	r0, [pc, #8]	@ (80040a8 <DMA2_Stream6_IRQHandler+0x10>)
 800409e:	f001 f839 	bl	8005114 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80040a2:	bf00      	nop
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	200027f0 	.word	0x200027f0

080040ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  return 1;
 80040b0:	2301      	movs	r3, #1
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <_kill>:

int _kill(int pid, int sig)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80040c6:	f00a fdd7 	bl	800ec78 <__errno>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2216      	movs	r2, #22
 80040ce:	601a      	str	r2, [r3, #0]
  return -1;
 80040d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <_exit>:

void _exit (int status)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80040e4:	f04f 31ff 	mov.w	r1, #4294967295
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7ff ffe7 	bl	80040bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80040ee:	bf00      	nop
 80040f0:	e7fd      	b.n	80040ee <_exit+0x12>

080040f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b086      	sub	sp, #24
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040fe:	2300      	movs	r3, #0
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	e00a      	b.n	800411a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004104:	f3af 8000 	nop.w
 8004108:	4601      	mov	r1, r0
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	60ba      	str	r2, [r7, #8]
 8004110:	b2ca      	uxtb	r2, r1
 8004112:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	3301      	adds	r3, #1
 8004118:	617b      	str	r3, [r7, #20]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	429a      	cmp	r2, r3
 8004120:	dbf0      	blt.n	8004104 <_read+0x12>
  }

  return len;
 8004122:	687b      	ldr	r3, [r7, #4]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3718      	adds	r7, #24
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004138:	2300      	movs	r3, #0
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	e009      	b.n	8004152 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	60ba      	str	r2, [r7, #8]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	3301      	adds	r3, #1
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	429a      	cmp	r2, r3
 8004158:	dbf1      	blt.n	800413e <_write+0x12>
  }
  return len;
 800415a:	687b      	ldr	r3, [r7, #4]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <_close>:

int _close(int file)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800416c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004170:	4618      	mov	r0, r3
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800418c:	605a      	str	r2, [r3, #4]
  return 0;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <_isatty>:

int _isatty(int file)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80041a4:	2301      	movs	r3, #1
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b085      	sub	sp, #20
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	60f8      	str	r0, [r7, #12]
 80041ba:	60b9      	str	r1, [r7, #8]
 80041bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041d4:	4a14      	ldr	r2, [pc, #80]	@ (8004228 <_sbrk+0x5c>)
 80041d6:	4b15      	ldr	r3, [pc, #84]	@ (800422c <_sbrk+0x60>)
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041e0:	4b13      	ldr	r3, [pc, #76]	@ (8004230 <_sbrk+0x64>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d102      	bne.n	80041ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041e8:	4b11      	ldr	r3, [pc, #68]	@ (8004230 <_sbrk+0x64>)
 80041ea:	4a12      	ldr	r2, [pc, #72]	@ (8004234 <_sbrk+0x68>)
 80041ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041ee:	4b10      	ldr	r3, [pc, #64]	@ (8004230 <_sbrk+0x64>)
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4413      	add	r3, r2
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d207      	bcs.n	800420c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041fc:	f00a fd3c 	bl	800ec78 <__errno>
 8004200:	4603      	mov	r3, r0
 8004202:	220c      	movs	r2, #12
 8004204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004206:	f04f 33ff 	mov.w	r3, #4294967295
 800420a:	e009      	b.n	8004220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800420c:	4b08      	ldr	r3, [pc, #32]	@ (8004230 <_sbrk+0x64>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004212:	4b07      	ldr	r3, [pc, #28]	@ (8004230 <_sbrk+0x64>)
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4413      	add	r3, r2
 800421a:	4a05      	ldr	r2, [pc, #20]	@ (8004230 <_sbrk+0x64>)
 800421c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800421e:	68fb      	ldr	r3, [r7, #12]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	20020000 	.word	0x20020000
 800422c:	00000400 	.word	0x00000400
 8004230:	20002c88 	.word	0x20002c88
 8004234:	20002e20 	.word	0x20002e20

08004238 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800423c:	4b06      	ldr	r3, [pc, #24]	@ (8004258 <SystemInit+0x20>)
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004242:	4a05      	ldr	r2, [pc, #20]	@ (8004258 <SystemInit+0x20>)
 8004244:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004248:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800424c:	bf00      	nop
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	e000ed00 	.word	0xe000ed00

0800425c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800425c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004294 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004260:	f7ff ffea 	bl	8004238 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004264:	480c      	ldr	r0, [pc, #48]	@ (8004298 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004266:	490d      	ldr	r1, [pc, #52]	@ (800429c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004268:	4a0d      	ldr	r2, [pc, #52]	@ (80042a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800426a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800426c:	e002      	b.n	8004274 <LoopCopyDataInit>

0800426e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800426e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004272:	3304      	adds	r3, #4

08004274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004278:	d3f9      	bcc.n	800426e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800427a:	4a0a      	ldr	r2, [pc, #40]	@ (80042a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800427c:	4c0a      	ldr	r4, [pc, #40]	@ (80042a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800427e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004280:	e001      	b.n	8004286 <LoopFillZerobss>

08004282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004284:	3204      	adds	r2, #4

08004286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004288:	d3fb      	bcc.n	8004282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800428a:	f00a fcfb 	bl	800ec84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800428e:	f7fe fee3 	bl	8003058 <main>
  bx  lr    
 8004292:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004294:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800429c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80042a0:	080143b0 	.word	0x080143b0
  ldr r2, =_sbss
 80042a4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80042a8:	20002e20 	.word	0x20002e20

080042ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042ac:	e7fe      	b.n	80042ac <ADC_IRQHandler>
	...

080042b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042b4:	4b0e      	ldr	r3, [pc, #56]	@ (80042f0 <HAL_Init+0x40>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a0d      	ldr	r2, [pc, #52]	@ (80042f0 <HAL_Init+0x40>)
 80042ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80042c0:	4b0b      	ldr	r3, [pc, #44]	@ (80042f0 <HAL_Init+0x40>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a0a      	ldr	r2, [pc, #40]	@ (80042f0 <HAL_Init+0x40>)
 80042c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042cc:	4b08      	ldr	r3, [pc, #32]	@ (80042f0 <HAL_Init+0x40>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a07      	ldr	r2, [pc, #28]	@ (80042f0 <HAL_Init+0x40>)
 80042d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042d8:	2003      	movs	r0, #3
 80042da:	f000 fd41 	bl	8004d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042de:	200f      	movs	r0, #15
 80042e0:	f000 f808 	bl	80042f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042e4:	f7ff fad6 	bl	8003894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	40023c00 	.word	0x40023c00

080042f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042fc:	4b12      	ldr	r3, [pc, #72]	@ (8004348 <HAL_InitTick+0x54>)
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	4b12      	ldr	r3, [pc, #72]	@ (800434c <HAL_InitTick+0x58>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	4619      	mov	r1, r3
 8004306:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800430a:	fbb3 f3f1 	udiv	r3, r3, r1
 800430e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004312:	4618      	mov	r0, r3
 8004314:	f000 fd59 	bl	8004dca <HAL_SYSTICK_Config>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e00e      	b.n	8004340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b0f      	cmp	r3, #15
 8004326:	d80a      	bhi.n	800433e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004328:	2200      	movs	r2, #0
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	f04f 30ff 	mov.w	r0, #4294967295
 8004330:	f000 fd21 	bl	8004d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004334:	4a06      	ldr	r2, [pc, #24]	@ (8004350 <HAL_InitTick+0x5c>)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	e000      	b.n	8004340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
}
 8004340:	4618      	mov	r0, r3
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	20000010 	.word	0x20000010
 800434c:	20000018 	.word	0x20000018
 8004350:	20000014 	.word	0x20000014

08004354 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004358:	4b06      	ldr	r3, [pc, #24]	@ (8004374 <HAL_IncTick+0x20>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	461a      	mov	r2, r3
 800435e:	4b06      	ldr	r3, [pc, #24]	@ (8004378 <HAL_IncTick+0x24>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4413      	add	r3, r2
 8004364:	4a04      	ldr	r2, [pc, #16]	@ (8004378 <HAL_IncTick+0x24>)
 8004366:	6013      	str	r3, [r2, #0]
}
 8004368:	bf00      	nop
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	20000018 	.word	0x20000018
 8004378:	20002c8c 	.word	0x20002c8c

0800437c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  return uwTick;
 8004380:	4b03      	ldr	r3, [pc, #12]	@ (8004390 <HAL_GetTick+0x14>)
 8004382:	681b      	ldr	r3, [r3, #0]
}
 8004384:	4618      	mov	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	20002c8c 	.word	0x20002c8c

08004394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800439c:	f7ff ffee 	bl	800437c <HAL_GetTick>
 80043a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ac:	d005      	beq.n	80043ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043ae:	4b0a      	ldr	r3, [pc, #40]	@ (80043d8 <HAL_Delay+0x44>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4413      	add	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80043ba:	bf00      	nop
 80043bc:	f7ff ffde 	bl	800437c <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d8f7      	bhi.n	80043bc <HAL_Delay+0x28>
  {
  }
}
 80043cc:	bf00      	nop
 80043ce:	bf00      	nop
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	20000018 	.word	0x20000018

080043dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043e4:	2300      	movs	r3, #0
 80043e6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e033      	b.n	800445a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d109      	bne.n	800440e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7ff fa72 	bl	80038e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004412:	f003 0310 	and.w	r3, r3, #16
 8004416:	2b00      	cmp	r3, #0
 8004418:	d118      	bne.n	800444c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004422:	f023 0302 	bic.w	r3, r3, #2
 8004426:	f043 0202 	orr.w	r2, r3, #2
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 faca 	bl	80049c8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443e:	f023 0303 	bic.w	r3, r3, #3
 8004442:	f043 0201 	orr.w	r2, r3, #1
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	641a      	str	r2, [r3, #64]	@ 0x40
 800444a:	e001      	b.n	8004450 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004458:	7bfb      	ldrb	r3, [r7, #15]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
	...

08004464 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <HAL_ADC_Start+0x1a>
 800447a:	2302      	movs	r3, #2
 800447c:	e097      	b.n	80045ae <HAL_ADC_Start+0x14a>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b01      	cmp	r3, #1
 8004492:	d018      	beq.n	80044c6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0201 	orr.w	r2, r2, #1
 80044a2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80044a4:	4b45      	ldr	r3, [pc, #276]	@ (80045bc <HAL_ADC_Start+0x158>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a45      	ldr	r2, [pc, #276]	@ (80045c0 <HAL_ADC_Start+0x15c>)
 80044aa:	fba2 2303 	umull	r2, r3, r2, r3
 80044ae:	0c9a      	lsrs	r2, r3, #18
 80044b0:	4613      	mov	r3, r2
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	4413      	add	r3, r2
 80044b6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80044b8:	e002      	b.n	80044c0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	3b01      	subs	r3, #1
 80044be:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1f9      	bne.n	80044ba <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d15f      	bne.n	8004594 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80044dc:	f023 0301 	bic.w	r3, r3, #1
 80044e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d007      	beq.n	8004506 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80044fe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800450e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004512:	d106      	bne.n	8004522 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004518:	f023 0206 	bic.w	r2, r3, #6
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	645a      	str	r2, [r3, #68]	@ 0x44
 8004520:	e002      	b.n	8004528 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004530:	4b24      	ldr	r3, [pc, #144]	@ (80045c4 <HAL_ADC_Start+0x160>)
 8004532:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800453c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f003 031f 	and.w	r3, r3, #31
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10f      	bne.n	800456a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d129      	bne.n	80045ac <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689a      	ldr	r2, [r3, #8]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004566:	609a      	str	r2, [r3, #8]
 8004568:	e020      	b.n	80045ac <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a16      	ldr	r2, [pc, #88]	@ (80045c8 <HAL_ADC_Start+0x164>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d11b      	bne.n	80045ac <HAL_ADC_Start+0x148>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d114      	bne.n	80045ac <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004590:	609a      	str	r2, [r3, #8]
 8004592:	e00b      	b.n	80045ac <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004598:	f043 0210 	orr.w	r2, r3, #16
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a4:	f043 0201 	orr.w	r2, r3, #1
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	20000010 	.word	0x20000010
 80045c0:	431bde83 	.word	0x431bde83
 80045c4:	40012300 	.word	0x40012300
 80045c8:	40012000 	.word	0x40012000

080045cc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d101      	bne.n	80045e2 <HAL_ADC_Stop+0x16>
 80045de:	2302      	movs	r3, #2
 80045e0:	e021      	b.n	8004626 <HAL_ADC_Stop+0x5a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0201 	bic.w	r2, r2, #1
 80045f8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d109      	bne.n	800461c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004610:	f023 0301 	bic.w	r3, r3, #1
 8004614:	f043 0201 	orr.w	r2, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b084      	sub	sp, #16
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800464a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800464e:	d113      	bne.n	8004678 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800465a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800465e:	d10b      	bne.n	8004678 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004664:	f043 0220 	orr.w	r2, r3, #32
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e063      	b.n	8004740 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004678:	f7ff fe80 	bl	800437c <HAL_GetTick>
 800467c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800467e:	e021      	b.n	80046c4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004686:	d01d      	beq.n	80046c4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d007      	beq.n	800469e <HAL_ADC_PollForConversion+0x6c>
 800468e:	f7ff fe75 	bl	800437c <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d212      	bcs.n	80046c4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d00b      	beq.n	80046c4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b0:	f043 0204 	orr.w	r2, r3, #4
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e03d      	b.n	8004740 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d1d6      	bne.n	8004680 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f06f 0212 	mvn.w	r2, #18
 80046da:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d123      	bne.n	800473e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d11f      	bne.n	800473e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004704:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004708:	2b00      	cmp	r3, #0
 800470a:	d006      	beq.n	800471a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004716:	2b00      	cmp	r3, #0
 8004718:	d111      	bne.n	800473e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d105      	bne.n	800473e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004736:	f043 0201 	orr.w	r2, r3, #1
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004756:	4618      	mov	r0, r3
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
	...

08004764 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800476e:	2300      	movs	r3, #0
 8004770:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x1c>
 800477c:	2302      	movs	r3, #2
 800477e:	e113      	b.n	80049a8 <HAL_ADC_ConfigChannel+0x244>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b09      	cmp	r3, #9
 800478e:	d925      	bls.n	80047dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68d9      	ldr	r1, [r3, #12]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	b29b      	uxth	r3, r3
 800479c:	461a      	mov	r2, r3
 800479e:	4613      	mov	r3, r2
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	4413      	add	r3, r2
 80047a4:	3b1e      	subs	r3, #30
 80047a6:	2207      	movs	r2, #7
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	43da      	mvns	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	400a      	ands	r2, r1
 80047b4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68d9      	ldr	r1, [r3, #12]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	4618      	mov	r0, r3
 80047c8:	4603      	mov	r3, r0
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	4403      	add	r3, r0
 80047ce:	3b1e      	subs	r3, #30
 80047d0:	409a      	lsls	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	60da      	str	r2, [r3, #12]
 80047da:	e022      	b.n	8004822 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6919      	ldr	r1, [r3, #16]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	461a      	mov	r2, r3
 80047ea:	4613      	mov	r3, r2
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	4413      	add	r3, r2
 80047f0:	2207      	movs	r2, #7
 80047f2:	fa02 f303 	lsl.w	r3, r2, r3
 80047f6:	43da      	mvns	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	400a      	ands	r2, r1
 80047fe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6919      	ldr	r1, [r3, #16]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	b29b      	uxth	r3, r3
 8004810:	4618      	mov	r0, r3
 8004812:	4603      	mov	r3, r0
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	4403      	add	r3, r0
 8004818:	409a      	lsls	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b06      	cmp	r3, #6
 8004828:	d824      	bhi.n	8004874 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	4613      	mov	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	3b05      	subs	r3, #5
 800483c:	221f      	movs	r2, #31
 800483e:	fa02 f303 	lsl.w	r3, r2, r3
 8004842:	43da      	mvns	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	400a      	ands	r2, r1
 800484a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	b29b      	uxth	r3, r3
 8004858:	4618      	mov	r0, r3
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	4613      	mov	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4413      	add	r3, r2
 8004864:	3b05      	subs	r3, #5
 8004866:	fa00 f203 	lsl.w	r2, r0, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	635a      	str	r2, [r3, #52]	@ 0x34
 8004872:	e04c      	b.n	800490e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	2b0c      	cmp	r3, #12
 800487a:	d824      	bhi.n	80048c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	4613      	mov	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	3b23      	subs	r3, #35	@ 0x23
 800488e:	221f      	movs	r2, #31
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	43da      	mvns	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	400a      	ands	r2, r1
 800489c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	4618      	mov	r0, r3
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	4613      	mov	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	3b23      	subs	r3, #35	@ 0x23
 80048b8:	fa00 f203 	lsl.w	r2, r0, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80048c4:	e023      	b.n	800490e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	4613      	mov	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	3b41      	subs	r3, #65	@ 0x41
 80048d8:	221f      	movs	r2, #31
 80048da:	fa02 f303 	lsl.w	r3, r2, r3
 80048de:	43da      	mvns	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	400a      	ands	r2, r1
 80048e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	4618      	mov	r0, r3
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	3b41      	subs	r3, #65	@ 0x41
 8004902:	fa00 f203 	lsl.w	r2, r0, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800490e:	4b29      	ldr	r3, [pc, #164]	@ (80049b4 <HAL_ADC_ConfigChannel+0x250>)
 8004910:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a28      	ldr	r2, [pc, #160]	@ (80049b8 <HAL_ADC_ConfigChannel+0x254>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d10f      	bne.n	800493c <HAL_ADC_ConfigChannel+0x1d8>
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b12      	cmp	r3, #18
 8004922:	d10b      	bne.n	800493c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a1d      	ldr	r2, [pc, #116]	@ (80049b8 <HAL_ADC_ConfigChannel+0x254>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d12b      	bne.n	800499e <HAL_ADC_ConfigChannel+0x23a>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a1c      	ldr	r2, [pc, #112]	@ (80049bc <HAL_ADC_ConfigChannel+0x258>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d003      	beq.n	8004958 <HAL_ADC_ConfigChannel+0x1f4>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b11      	cmp	r3, #17
 8004956:	d122      	bne.n	800499e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a11      	ldr	r2, [pc, #68]	@ (80049bc <HAL_ADC_ConfigChannel+0x258>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d111      	bne.n	800499e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800497a:	4b11      	ldr	r3, [pc, #68]	@ (80049c0 <HAL_ADC_ConfigChannel+0x25c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a11      	ldr	r2, [pc, #68]	@ (80049c4 <HAL_ADC_ConfigChannel+0x260>)
 8004980:	fba2 2303 	umull	r2, r3, r2, r3
 8004984:	0c9a      	lsrs	r2, r3, #18
 8004986:	4613      	mov	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004990:	e002      	b.n	8004998 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	3b01      	subs	r3, #1
 8004996:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f9      	bne.n	8004992 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	40012300 	.word	0x40012300
 80049b8:	40012000 	.word	0x40012000
 80049bc:	10000012 	.word	0x10000012
 80049c0:	20000010 	.word	0x20000010
 80049c4:	431bde83 	.word	0x431bde83

080049c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049d0:	4b79      	ldr	r3, [pc, #484]	@ (8004bb8 <ADC_Init+0x1f0>)
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	431a      	orrs	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6859      	ldr	r1, [r3, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	021a      	lsls	r2, r3, #8
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004a20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6859      	ldr	r1, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689a      	ldr	r2, [r3, #8]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6899      	ldr	r1, [r3, #8]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5a:	4a58      	ldr	r2, [pc, #352]	@ (8004bbc <ADC_Init+0x1f4>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d022      	beq.n	8004aa6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004a6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6899      	ldr	r1, [r3, #8]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004a90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6899      	ldr	r1, [r3, #8]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	609a      	str	r2, [r3, #8]
 8004aa4:	e00f      	b.n	8004ac6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004ab4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004ac4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0202 	bic.w	r2, r2, #2
 8004ad4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6899      	ldr	r1, [r3, #8]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	7e1b      	ldrb	r3, [r3, #24]
 8004ae0:	005a      	lsls	r2, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d01b      	beq.n	8004b2c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b02:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004b12:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6859      	ldr	r1, [r3, #4]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	035a      	lsls	r2, r3, #13
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	605a      	str	r2, [r3, #4]
 8004b2a:	e007      	b.n	8004b3c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b3a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	051a      	lsls	r2, r3, #20
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004b70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6899      	ldr	r1, [r3, #8]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004b7e:	025a      	lsls	r2, r3, #9
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689a      	ldr	r2, [r3, #8]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6899      	ldr	r1, [r3, #8]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	029a      	lsls	r2, r3, #10
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	609a      	str	r2, [r3, #8]
}
 8004bac:	bf00      	nop
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	40012300 	.word	0x40012300
 8004bbc:	0f000001 	.word	0x0f000001

08004bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f003 0307 	and.w	r3, r3, #7
 8004bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8004c04 <__NVIC_SetPriorityGrouping+0x44>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004bdc:	4013      	ands	r3, r2
 8004bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004be8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004bec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bf2:	4a04      	ldr	r2, [pc, #16]	@ (8004c04 <__NVIC_SetPriorityGrouping+0x44>)
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	60d3      	str	r3, [r2, #12]
}
 8004bf8:	bf00      	nop
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	e000ed00 	.word	0xe000ed00

08004c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c0c:	4b04      	ldr	r3, [pc, #16]	@ (8004c20 <__NVIC_GetPriorityGrouping+0x18>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	0a1b      	lsrs	r3, r3, #8
 8004c12:	f003 0307 	and.w	r3, r3, #7
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	e000ed00 	.word	0xe000ed00

08004c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	db0b      	blt.n	8004c4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c36:	79fb      	ldrb	r3, [r7, #7]
 8004c38:	f003 021f 	and.w	r2, r3, #31
 8004c3c:	4907      	ldr	r1, [pc, #28]	@ (8004c5c <__NVIC_EnableIRQ+0x38>)
 8004c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c42:	095b      	lsrs	r3, r3, #5
 8004c44:	2001      	movs	r0, #1
 8004c46:	fa00 f202 	lsl.w	r2, r0, r2
 8004c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	e000e100 	.word	0xe000e100

08004c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	4603      	mov	r3, r0
 8004c68:	6039      	str	r1, [r7, #0]
 8004c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	db0a      	blt.n	8004c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	490c      	ldr	r1, [pc, #48]	@ (8004cac <__NVIC_SetPriority+0x4c>)
 8004c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c7e:	0112      	lsls	r2, r2, #4
 8004c80:	b2d2      	uxtb	r2, r2
 8004c82:	440b      	add	r3, r1
 8004c84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c88:	e00a      	b.n	8004ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	4908      	ldr	r1, [pc, #32]	@ (8004cb0 <__NVIC_SetPriority+0x50>)
 8004c90:	79fb      	ldrb	r3, [r7, #7]
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	3b04      	subs	r3, #4
 8004c98:	0112      	lsls	r2, r2, #4
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	761a      	strb	r2, [r3, #24]
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	e000e100 	.word	0xe000e100
 8004cb0:	e000ed00 	.word	0xe000ed00

08004cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b089      	sub	sp, #36	@ 0x24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f1c3 0307 	rsb	r3, r3, #7
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	bf28      	it	cs
 8004cd2:	2304      	movcs	r3, #4
 8004cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	2b06      	cmp	r3, #6
 8004cdc:	d902      	bls.n	8004ce4 <NVIC_EncodePriority+0x30>
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	3b03      	subs	r3, #3
 8004ce2:	e000      	b.n	8004ce6 <NVIC_EncodePriority+0x32>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf2:	43da      	mvns	r2, r3
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	401a      	ands	r2, r3
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	fa01 f303 	lsl.w	r3, r1, r3
 8004d06:	43d9      	mvns	r1, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d0c:	4313      	orrs	r3, r2
         );
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3724      	adds	r7, #36	@ 0x24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
	...

08004d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3b01      	subs	r3, #1
 8004d28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d2c:	d301      	bcc.n	8004d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e00f      	b.n	8004d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d32:	4a0a      	ldr	r2, [pc, #40]	@ (8004d5c <SysTick_Config+0x40>)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d3a:	210f      	movs	r1, #15
 8004d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d40:	f7ff ff8e 	bl	8004c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d44:	4b05      	ldr	r3, [pc, #20]	@ (8004d5c <SysTick_Config+0x40>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d4a:	4b04      	ldr	r3, [pc, #16]	@ (8004d5c <SysTick_Config+0x40>)
 8004d4c:	2207      	movs	r2, #7
 8004d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	e000e010 	.word	0xe000e010

08004d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7ff ff29 	bl	8004bc0 <__NVIC_SetPriorityGrouping>
}
 8004d6e:	bf00      	nop
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b086      	sub	sp, #24
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	607a      	str	r2, [r7, #4]
 8004d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d88:	f7ff ff3e 	bl	8004c08 <__NVIC_GetPriorityGrouping>
 8004d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	68b9      	ldr	r1, [r7, #8]
 8004d92:	6978      	ldr	r0, [r7, #20]
 8004d94:	f7ff ff8e 	bl	8004cb4 <NVIC_EncodePriority>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d9e:	4611      	mov	r1, r2
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7ff ff5d 	bl	8004c60 <__NVIC_SetPriority>
}
 8004da6:	bf00      	nop
 8004da8:	3718      	adds	r7, #24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b082      	sub	sp, #8
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	4603      	mov	r3, r0
 8004db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7ff ff31 	bl	8004c24 <__NVIC_EnableIRQ>
}
 8004dc2:	bf00      	nop
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b082      	sub	sp, #8
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7ff ffa2 	bl	8004d1c <SysTick_Config>
 8004dd8:	4603      	mov	r3, r0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004df0:	f7ff fac4 	bl	800437c <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e099      	b.n	8004f34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0201 	bic.w	r2, r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e20:	e00f      	b.n	8004e42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e22:	f7ff faab 	bl	800437c <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b05      	cmp	r3, #5
 8004e2e:	d908      	bls.n	8004e42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2220      	movs	r2, #32
 8004e34:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2203      	movs	r2, #3
 8004e3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e078      	b.n	8004f34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1e8      	bne.n	8004e22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	4b38      	ldr	r3, [pc, #224]	@ (8004f3c <HAL_DMA_Init+0x158>)
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e98:	2b04      	cmp	r3, #4
 8004e9a:	d107      	bne.n	8004eac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f023 0307 	bic.w	r3, r3, #7
 8004ec2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d117      	bne.n	8004f06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00e      	beq.n	8004f06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 fb0d 	bl	8005508 <DMA_CheckFifoParam>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d008      	beq.n	8004f06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2240      	movs	r2, #64	@ 0x40
 8004ef8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004f02:	2301      	movs	r3, #1
 8004f04:	e016      	b.n	8004f34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fac4 	bl	800549c <DMA_CalcBaseAndBitshift>
 8004f14:	4603      	mov	r3, r0
 8004f16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f1c:	223f      	movs	r2, #63	@ 0x3f
 8004f1e:	409a      	lsls	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3718      	adds	r7, #24
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	f010803f 	.word	0xf010803f

08004f40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_DMA_Start_IT+0x26>
 8004f62:	2302      	movs	r3, #2
 8004f64:	e040      	b.n	8004fe8 <HAL_DMA_Start_IT+0xa8>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d12f      	bne.n	8004fda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2202      	movs	r2, #2
 8004f7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	68b9      	ldr	r1, [r7, #8]
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 fa56 	bl	8005440 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f98:	223f      	movs	r2, #63	@ 0x3f
 8004f9a:	409a      	lsls	r2, r3
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0216 	orr.w	r2, r2, #22
 8004fae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d007      	beq.n	8004fc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0208 	orr.w	r2, r2, #8
 8004fc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0201 	orr.w	r2, r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	e005      	b.n	8004fe6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3718      	adds	r7, #24
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ffc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004ffe:	f7ff f9bd 	bl	800437c <HAL_GetTick>
 8005002:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d008      	beq.n	8005022 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2280      	movs	r2, #128	@ 0x80
 8005014:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e052      	b.n	80050c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0216 	bic.w	r2, r2, #22
 8005030:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695a      	ldr	r2, [r3, #20]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005040:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005046:	2b00      	cmp	r3, #0
 8005048:	d103      	bne.n	8005052 <HAL_DMA_Abort+0x62>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800504e:	2b00      	cmp	r3, #0
 8005050:	d007      	beq.n	8005062 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0208 	bic.w	r2, r2, #8
 8005060:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0201 	bic.w	r2, r2, #1
 8005070:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005072:	e013      	b.n	800509c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005074:	f7ff f982 	bl	800437c <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b05      	cmp	r3, #5
 8005080:	d90c      	bls.n	800509c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2220      	movs	r2, #32
 8005086:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2203      	movs	r2, #3
 800508c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e015      	b.n	80050c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1e4      	bne.n	8005074 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ae:	223f      	movs	r2, #63	@ 0x3f
 80050b0:	409a      	lsls	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d004      	beq.n	80050ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2280      	movs	r2, #128	@ 0x80
 80050e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e00c      	b.n	8005108 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2205      	movs	r2, #5
 80050f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0201 	bic.w	r2, r2, #1
 8005104:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005120:	4b8e      	ldr	r3, [pc, #568]	@ (800535c <HAL_DMA_IRQHandler+0x248>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a8e      	ldr	r2, [pc, #568]	@ (8005360 <HAL_DMA_IRQHandler+0x24c>)
 8005126:	fba2 2303 	umull	r2, r3, r2, r3
 800512a:	0a9b      	lsrs	r3, r3, #10
 800512c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005132:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800513e:	2208      	movs	r2, #8
 8005140:	409a      	lsls	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4013      	ands	r3, r2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d01a      	beq.n	8005180 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b00      	cmp	r3, #0
 8005156:	d013      	beq.n	8005180 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0204 	bic.w	r2, r2, #4
 8005166:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800516c:	2208      	movs	r2, #8
 800516e:	409a      	lsls	r2, r3
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005178:	f043 0201 	orr.w	r2, r3, #1
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005184:	2201      	movs	r2, #1
 8005186:	409a      	lsls	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4013      	ands	r3, r2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d012      	beq.n	80051b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00b      	beq.n	80051b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051a2:	2201      	movs	r2, #1
 80051a4:	409a      	lsls	r2, r3
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ae:	f043 0202 	orr.w	r2, r3, #2
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ba:	2204      	movs	r2, #4
 80051bc:	409a      	lsls	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4013      	ands	r3, r2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d012      	beq.n	80051ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00b      	beq.n	80051ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051d8:	2204      	movs	r2, #4
 80051da:	409a      	lsls	r2, r3
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051e4:	f043 0204 	orr.w	r2, r3, #4
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051f0:	2210      	movs	r2, #16
 80051f2:	409a      	lsls	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4013      	ands	r3, r2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d043      	beq.n	8005284 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0308 	and.w	r3, r3, #8
 8005206:	2b00      	cmp	r3, #0
 8005208:	d03c      	beq.n	8005284 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800520e:	2210      	movs	r2, #16
 8005210:	409a      	lsls	r2, r3
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d018      	beq.n	8005256 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d108      	bne.n	8005244 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005236:	2b00      	cmp	r3, #0
 8005238:	d024      	beq.n	8005284 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	4798      	blx	r3
 8005242:	e01f      	b.n	8005284 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005248:	2b00      	cmp	r3, #0
 800524a:	d01b      	beq.n	8005284 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	4798      	blx	r3
 8005254:	e016      	b.n	8005284 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005260:	2b00      	cmp	r3, #0
 8005262:	d107      	bne.n	8005274 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0208 	bic.w	r2, r2, #8
 8005272:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005288:	2220      	movs	r2, #32
 800528a:	409a      	lsls	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4013      	ands	r3, r2
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 808f 	beq.w	80053b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0310 	and.w	r3, r3, #16
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 8087 	beq.w	80053b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052aa:	2220      	movs	r2, #32
 80052ac:	409a      	lsls	r2, r3
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b05      	cmp	r3, #5
 80052bc:	d136      	bne.n	800532c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 0216 	bic.w	r2, r2, #22
 80052cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	695a      	ldr	r2, [r3, #20]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d103      	bne.n	80052ee <HAL_DMA_IRQHandler+0x1da>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d007      	beq.n	80052fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 0208 	bic.w	r2, r2, #8
 80052fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005302:	223f      	movs	r2, #63	@ 0x3f
 8005304:	409a      	lsls	r2, r3
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800531e:	2b00      	cmp	r3, #0
 8005320:	d07e      	beq.n	8005420 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	4798      	blx	r3
        }
        return;
 800532a:	e079      	b.n	8005420 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d01d      	beq.n	8005376 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10d      	bne.n	8005364 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800534c:	2b00      	cmp	r3, #0
 800534e:	d031      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	4798      	blx	r3
 8005358:	e02c      	b.n	80053b4 <HAL_DMA_IRQHandler+0x2a0>
 800535a:	bf00      	nop
 800535c:	20000010 	.word	0x20000010
 8005360:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005368:	2b00      	cmp	r3, #0
 800536a:	d023      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	4798      	blx	r3
 8005374:	e01e      	b.n	80053b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10f      	bne.n	80053a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0210 	bic.w	r2, r2, #16
 8005392:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d032      	beq.n	8005422 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d022      	beq.n	800540e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2205      	movs	r2, #5
 80053cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 0201 	bic.w	r2, r2, #1
 80053de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	3301      	adds	r3, #1
 80053e4:	60bb      	str	r3, [r7, #8]
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d307      	bcc.n	80053fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1f2      	bne.n	80053e0 <HAL_DMA_IRQHandler+0x2cc>
 80053fa:	e000      	b.n	80053fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80053fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005412:	2b00      	cmp	r3, #0
 8005414:	d005      	beq.n	8005422 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	4798      	blx	r3
 800541e:	e000      	b.n	8005422 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005420:	bf00      	nop
    }
  }
}
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005434:	4618      	mov	r0, r3
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
 800544c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800545c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	2b40      	cmp	r3, #64	@ 0x40
 800546c:	d108      	bne.n	8005480 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800547e:	e007      	b.n	8005490 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	60da      	str	r2, [r3, #12]
}
 8005490:	bf00      	nop
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	3b10      	subs	r3, #16
 80054ac:	4a14      	ldr	r2, [pc, #80]	@ (8005500 <DMA_CalcBaseAndBitshift+0x64>)
 80054ae:	fba2 2303 	umull	r2, r3, r2, r3
 80054b2:	091b      	lsrs	r3, r3, #4
 80054b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80054b6:	4a13      	ldr	r2, [pc, #76]	@ (8005504 <DMA_CalcBaseAndBitshift+0x68>)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4413      	add	r3, r2
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2b03      	cmp	r3, #3
 80054c8:	d909      	bls.n	80054de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80054d2:	f023 0303 	bic.w	r3, r3, #3
 80054d6:	1d1a      	adds	r2, r3, #4
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	659a      	str	r2, [r3, #88]	@ 0x58
 80054dc:	e007      	b.n	80054ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80054e6:	f023 0303 	bic.w	r3, r3, #3
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	aaaaaaab 	.word	0xaaaaaaab
 8005504:	08013e84 	.word	0x08013e84

08005508 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005510:	2300      	movs	r3, #0
 8005512:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005518:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d11f      	bne.n	8005562 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	2b03      	cmp	r3, #3
 8005526:	d856      	bhi.n	80055d6 <DMA_CheckFifoParam+0xce>
 8005528:	a201      	add	r2, pc, #4	@ (adr r2, 8005530 <DMA_CheckFifoParam+0x28>)
 800552a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552e:	bf00      	nop
 8005530:	08005541 	.word	0x08005541
 8005534:	08005553 	.word	0x08005553
 8005538:	08005541 	.word	0x08005541
 800553c:	080055d7 	.word	0x080055d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005544:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d046      	beq.n	80055da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005550:	e043      	b.n	80055da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005556:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800555a:	d140      	bne.n	80055de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005560:	e03d      	b.n	80055de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800556a:	d121      	bne.n	80055b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2b03      	cmp	r3, #3
 8005570:	d837      	bhi.n	80055e2 <DMA_CheckFifoParam+0xda>
 8005572:	a201      	add	r2, pc, #4	@ (adr r2, 8005578 <DMA_CheckFifoParam+0x70>)
 8005574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005578:	08005589 	.word	0x08005589
 800557c:	0800558f 	.word	0x0800558f
 8005580:	08005589 	.word	0x08005589
 8005584:	080055a1 	.word	0x080055a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	73fb      	strb	r3, [r7, #15]
      break;
 800558c:	e030      	b.n	80055f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005592:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d025      	beq.n	80055e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800559e:	e022      	b.n	80055e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80055a8:	d11f      	bne.n	80055ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80055ae:	e01c      	b.n	80055ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d903      	bls.n	80055be <DMA_CheckFifoParam+0xb6>
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b03      	cmp	r3, #3
 80055ba:	d003      	beq.n	80055c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80055bc:	e018      	b.n	80055f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	73fb      	strb	r3, [r7, #15]
      break;
 80055c2:	e015      	b.n	80055f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00e      	beq.n	80055ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	73fb      	strb	r3, [r7, #15]
      break;
 80055d4:	e00b      	b.n	80055ee <DMA_CheckFifoParam+0xe6>
      break;
 80055d6:	bf00      	nop
 80055d8:	e00a      	b.n	80055f0 <DMA_CheckFifoParam+0xe8>
      break;
 80055da:	bf00      	nop
 80055dc:	e008      	b.n	80055f0 <DMA_CheckFifoParam+0xe8>
      break;
 80055de:	bf00      	nop
 80055e0:	e006      	b.n	80055f0 <DMA_CheckFifoParam+0xe8>
      break;
 80055e2:	bf00      	nop
 80055e4:	e004      	b.n	80055f0 <DMA_CheckFifoParam+0xe8>
      break;
 80055e6:	bf00      	nop
 80055e8:	e002      	b.n	80055f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80055ea:	bf00      	nop
 80055ec:	e000      	b.n	80055f0 <DMA_CheckFifoParam+0xe8>
      break;
 80055ee:	bf00      	nop
    }
  } 
  
  return status; 
 80055f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop

08005600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005600:	b480      	push	{r7}
 8005602:	b089      	sub	sp, #36	@ 0x24
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800560a:	2300      	movs	r3, #0
 800560c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800560e:	2300      	movs	r3, #0
 8005610:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005612:	2300      	movs	r3, #0
 8005614:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005616:	2300      	movs	r3, #0
 8005618:	61fb      	str	r3, [r7, #28]
 800561a:	e159      	b.n	80058d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800561c:	2201      	movs	r2, #1
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	fa02 f303 	lsl.w	r3, r2, r3
 8005624:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	4013      	ands	r3, r2
 800562e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	429a      	cmp	r2, r3
 8005636:	f040 8148 	bne.w	80058ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f003 0303 	and.w	r3, r3, #3
 8005642:	2b01      	cmp	r3, #1
 8005644:	d005      	beq.n	8005652 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800564e:	2b02      	cmp	r3, #2
 8005650:	d130      	bne.n	80056b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	2203      	movs	r2, #3
 800565e:	fa02 f303 	lsl.w	r3, r2, r3
 8005662:	43db      	mvns	r3, r3
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	4013      	ands	r3, r2
 8005668:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	fa02 f303 	lsl.w	r3, r2, r3
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	4313      	orrs	r3, r2
 800567a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005688:	2201      	movs	r2, #1
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	fa02 f303 	lsl.w	r3, r2, r3
 8005690:	43db      	mvns	r3, r3
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	4013      	ands	r3, r2
 8005696:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	091b      	lsrs	r3, r3, #4
 800569e:	f003 0201 	and.w	r2, r3, #1
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	fa02 f303 	lsl.w	r3, r2, r3
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f003 0303 	and.w	r3, r3, #3
 80056bc:	2b03      	cmp	r3, #3
 80056be:	d017      	beq.n	80056f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	2203      	movs	r2, #3
 80056cc:	fa02 f303 	lsl.w	r3, r2, r3
 80056d0:	43db      	mvns	r3, r3
 80056d2:	69ba      	ldr	r2, [r7, #24]
 80056d4:	4013      	ands	r3, r2
 80056d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	005b      	lsls	r3, r3, #1
 80056e0:	fa02 f303 	lsl.w	r3, r2, r3
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f003 0303 	and.w	r3, r3, #3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d123      	bne.n	8005744 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	08da      	lsrs	r2, r3, #3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3208      	adds	r2, #8
 8005704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005708:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	220f      	movs	r2, #15
 8005714:	fa02 f303 	lsl.w	r3, r2, r3
 8005718:	43db      	mvns	r3, r3
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	4013      	ands	r3, r2
 800571e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	691a      	ldr	r2, [r3, #16]
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	f003 0307 	and.w	r3, r3, #7
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	fa02 f303 	lsl.w	r3, r2, r3
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	4313      	orrs	r3, r2
 8005734:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	08da      	lsrs	r2, r3, #3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	3208      	adds	r2, #8
 800573e:	69b9      	ldr	r1, [r7, #24]
 8005740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	005b      	lsls	r3, r3, #1
 800574e:	2203      	movs	r2, #3
 8005750:	fa02 f303 	lsl.w	r3, r2, r3
 8005754:	43db      	mvns	r3, r3
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	4013      	ands	r3, r2
 800575a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f003 0203 	and.w	r2, r3, #3
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	fa02 f303 	lsl.w	r3, r2, r3
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	4313      	orrs	r3, r2
 8005770:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 80a2 	beq.w	80058ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005786:	2300      	movs	r3, #0
 8005788:	60fb      	str	r3, [r7, #12]
 800578a:	4b57      	ldr	r3, [pc, #348]	@ (80058e8 <HAL_GPIO_Init+0x2e8>)
 800578c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800578e:	4a56      	ldr	r2, [pc, #344]	@ (80058e8 <HAL_GPIO_Init+0x2e8>)
 8005790:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005794:	6453      	str	r3, [r2, #68]	@ 0x44
 8005796:	4b54      	ldr	r3, [pc, #336]	@ (80058e8 <HAL_GPIO_Init+0x2e8>)
 8005798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800579a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800579e:	60fb      	str	r3, [r7, #12]
 80057a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057a2:	4a52      	ldr	r2, [pc, #328]	@ (80058ec <HAL_GPIO_Init+0x2ec>)
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	089b      	lsrs	r3, r3, #2
 80057a8:	3302      	adds	r3, #2
 80057aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	220f      	movs	r2, #15
 80057ba:	fa02 f303 	lsl.w	r3, r2, r3
 80057be:	43db      	mvns	r3, r3
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	4013      	ands	r3, r2
 80057c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a49      	ldr	r2, [pc, #292]	@ (80058f0 <HAL_GPIO_Init+0x2f0>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d019      	beq.n	8005802 <HAL_GPIO_Init+0x202>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a48      	ldr	r2, [pc, #288]	@ (80058f4 <HAL_GPIO_Init+0x2f4>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d013      	beq.n	80057fe <HAL_GPIO_Init+0x1fe>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a47      	ldr	r2, [pc, #284]	@ (80058f8 <HAL_GPIO_Init+0x2f8>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d00d      	beq.n	80057fa <HAL_GPIO_Init+0x1fa>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a46      	ldr	r2, [pc, #280]	@ (80058fc <HAL_GPIO_Init+0x2fc>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d007      	beq.n	80057f6 <HAL_GPIO_Init+0x1f6>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a45      	ldr	r2, [pc, #276]	@ (8005900 <HAL_GPIO_Init+0x300>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d101      	bne.n	80057f2 <HAL_GPIO_Init+0x1f2>
 80057ee:	2304      	movs	r3, #4
 80057f0:	e008      	b.n	8005804 <HAL_GPIO_Init+0x204>
 80057f2:	2307      	movs	r3, #7
 80057f4:	e006      	b.n	8005804 <HAL_GPIO_Init+0x204>
 80057f6:	2303      	movs	r3, #3
 80057f8:	e004      	b.n	8005804 <HAL_GPIO_Init+0x204>
 80057fa:	2302      	movs	r3, #2
 80057fc:	e002      	b.n	8005804 <HAL_GPIO_Init+0x204>
 80057fe:	2301      	movs	r3, #1
 8005800:	e000      	b.n	8005804 <HAL_GPIO_Init+0x204>
 8005802:	2300      	movs	r3, #0
 8005804:	69fa      	ldr	r2, [r7, #28]
 8005806:	f002 0203 	and.w	r2, r2, #3
 800580a:	0092      	lsls	r2, r2, #2
 800580c:	4093      	lsls	r3, r2
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	4313      	orrs	r3, r2
 8005812:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005814:	4935      	ldr	r1, [pc, #212]	@ (80058ec <HAL_GPIO_Init+0x2ec>)
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	089b      	lsrs	r3, r3, #2
 800581a:	3302      	adds	r3, #2
 800581c:	69ba      	ldr	r2, [r7, #24]
 800581e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005822:	4b38      	ldr	r3, [pc, #224]	@ (8005904 <HAL_GPIO_Init+0x304>)
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	43db      	mvns	r3, r3
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	4013      	ands	r3, r2
 8005830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005846:	4a2f      	ldr	r2, [pc, #188]	@ (8005904 <HAL_GPIO_Init+0x304>)
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800584c:	4b2d      	ldr	r3, [pc, #180]	@ (8005904 <HAL_GPIO_Init+0x304>)
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	43db      	mvns	r3, r3
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	4013      	ands	r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d003      	beq.n	8005870 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	4313      	orrs	r3, r2
 800586e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005870:	4a24      	ldr	r2, [pc, #144]	@ (8005904 <HAL_GPIO_Init+0x304>)
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005876:	4b23      	ldr	r3, [pc, #140]	@ (8005904 <HAL_GPIO_Init+0x304>)
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	43db      	mvns	r3, r3
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	4013      	ands	r3, r2
 8005884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005892:	69ba      	ldr	r2, [r7, #24]
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	4313      	orrs	r3, r2
 8005898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800589a:	4a1a      	ldr	r2, [pc, #104]	@ (8005904 <HAL_GPIO_Init+0x304>)
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058a0:	4b18      	ldr	r3, [pc, #96]	@ (8005904 <HAL_GPIO_Init+0x304>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	43db      	mvns	r3, r3
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	4013      	ands	r3, r2
 80058ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d003      	beq.n	80058c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80058c4:	4a0f      	ldr	r2, [pc, #60]	@ (8005904 <HAL_GPIO_Init+0x304>)
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	3301      	adds	r3, #1
 80058ce:	61fb      	str	r3, [r7, #28]
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	2b0f      	cmp	r3, #15
 80058d4:	f67f aea2 	bls.w	800561c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80058d8:	bf00      	nop
 80058da:	bf00      	nop
 80058dc:	3724      	adds	r7, #36	@ 0x24
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	40023800 	.word	0x40023800
 80058ec:	40013800 	.word	0x40013800
 80058f0:	40020000 	.word	0x40020000
 80058f4:	40020400 	.word	0x40020400
 80058f8:	40020800 	.word	0x40020800
 80058fc:	40020c00 	.word	0x40020c00
 8005900:	40021000 	.word	0x40021000
 8005904:	40013c00 	.word	0x40013c00

08005908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	460b      	mov	r3, r1
 8005912:	807b      	strh	r3, [r7, #2]
 8005914:	4613      	mov	r3, r2
 8005916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005918:	787b      	ldrb	r3, [r7, #1]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800591e:	887a      	ldrh	r2, [r7, #2]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005924:	e003      	b.n	800592e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005926:	887b      	ldrh	r3, [r7, #2]
 8005928:	041a      	lsls	r2, r3, #16
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	619a      	str	r2, [r3, #24]
}
 800592e:	bf00      	nop
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
	...

0800593c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e12b      	b.n	8005ba6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d106      	bne.n	8005968 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7fe f802 	bl	800396c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2224      	movs	r2, #36	@ 0x24
 800596c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0201 	bic.w	r2, r2, #1
 800597e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800598e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800599e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80059a0:	f001 fc10 	bl	80071c4 <HAL_RCC_GetPCLK1Freq>
 80059a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	4a81      	ldr	r2, [pc, #516]	@ (8005bb0 <HAL_I2C_Init+0x274>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d807      	bhi.n	80059c0 <HAL_I2C_Init+0x84>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	4a80      	ldr	r2, [pc, #512]	@ (8005bb4 <HAL_I2C_Init+0x278>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	bf94      	ite	ls
 80059b8:	2301      	movls	r3, #1
 80059ba:	2300      	movhi	r3, #0
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	e006      	b.n	80059ce <HAL_I2C_Init+0x92>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4a7d      	ldr	r2, [pc, #500]	@ (8005bb8 <HAL_I2C_Init+0x27c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	bf94      	ite	ls
 80059c8:	2301      	movls	r3, #1
 80059ca:	2300      	movhi	r3, #0
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e0e7      	b.n	8005ba6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	4a78      	ldr	r2, [pc, #480]	@ (8005bbc <HAL_I2C_Init+0x280>)
 80059da:	fba2 2303 	umull	r2, r3, r2, r3
 80059de:	0c9b      	lsrs	r3, r3, #18
 80059e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	4a6a      	ldr	r2, [pc, #424]	@ (8005bb0 <HAL_I2C_Init+0x274>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d802      	bhi.n	8005a10 <HAL_I2C_Init+0xd4>
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	e009      	b.n	8005a24 <HAL_I2C_Init+0xe8>
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005a16:	fb02 f303 	mul.w	r3, r2, r3
 8005a1a:	4a69      	ldr	r2, [pc, #420]	@ (8005bc0 <HAL_I2C_Init+0x284>)
 8005a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a20:	099b      	lsrs	r3, r3, #6
 8005a22:	3301      	adds	r3, #1
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6812      	ldr	r2, [r2, #0]
 8005a28:	430b      	orrs	r3, r1
 8005a2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005a36:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	495c      	ldr	r1, [pc, #368]	@ (8005bb0 <HAL_I2C_Init+0x274>)
 8005a40:	428b      	cmp	r3, r1
 8005a42:	d819      	bhi.n	8005a78 <HAL_I2C_Init+0x13c>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	1e59      	subs	r1, r3, #1
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a52:	1c59      	adds	r1, r3, #1
 8005a54:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005a58:	400b      	ands	r3, r1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <HAL_I2C_Init+0x138>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	1e59      	subs	r1, r3, #1
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a72:	e051      	b.n	8005b18 <HAL_I2C_Init+0x1dc>
 8005a74:	2304      	movs	r3, #4
 8005a76:	e04f      	b.n	8005b18 <HAL_I2C_Init+0x1dc>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d111      	bne.n	8005aa4 <HAL_I2C_Init+0x168>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	1e58      	subs	r0, r3, #1
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6859      	ldr	r1, [r3, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	440b      	add	r3, r1
 8005a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a92:	3301      	adds	r3, #1
 8005a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	bf0c      	ite	eq
 8005a9c:	2301      	moveq	r3, #1
 8005a9e:	2300      	movne	r3, #0
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	e012      	b.n	8005aca <HAL_I2C_Init+0x18e>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	1e58      	subs	r0, r3, #1
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6859      	ldr	r1, [r3, #4]
 8005aac:	460b      	mov	r3, r1
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	440b      	add	r3, r1
 8005ab2:	0099      	lsls	r1, r3, #2
 8005ab4:	440b      	add	r3, r1
 8005ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aba:	3301      	adds	r3, #1
 8005abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	bf0c      	ite	eq
 8005ac4:	2301      	moveq	r3, #1
 8005ac6:	2300      	movne	r3, #0
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <HAL_I2C_Init+0x196>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e022      	b.n	8005b18 <HAL_I2C_Init+0x1dc>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10e      	bne.n	8005af8 <HAL_I2C_Init+0x1bc>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	1e58      	subs	r0, r3, #1
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6859      	ldr	r1, [r3, #4]
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	440b      	add	r3, r1
 8005ae8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aec:	3301      	adds	r3, #1
 8005aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005af2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005af6:	e00f      	b.n	8005b18 <HAL_I2C_Init+0x1dc>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	1e58      	subs	r0, r3, #1
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6859      	ldr	r1, [r3, #4]
 8005b00:	460b      	mov	r3, r1
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	440b      	add	r3, r1
 8005b06:	0099      	lsls	r1, r3, #2
 8005b08:	440b      	add	r3, r1
 8005b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b0e:	3301      	adds	r3, #1
 8005b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b18:	6879      	ldr	r1, [r7, #4]
 8005b1a:	6809      	ldr	r1, [r1, #0]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	69da      	ldr	r2, [r3, #28]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005b46:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	6911      	ldr	r1, [r2, #16]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	68d2      	ldr	r2, [r2, #12]
 8005b52:	4311      	orrs	r1, r2
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6812      	ldr	r2, [r2, #0]
 8005b58:	430b      	orrs	r3, r1
 8005b5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	695a      	ldr	r2, [r3, #20]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 0201 	orr.w	r2, r2, #1
 8005b86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2220      	movs	r2, #32
 8005b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	000186a0 	.word	0x000186a0
 8005bb4:	001e847f 	.word	0x001e847f
 8005bb8:	003d08ff 	.word	0x003d08ff
 8005bbc:	431bde83 	.word	0x431bde83
 8005bc0:	10624dd3 	.word	0x10624dd3

08005bc4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b088      	sub	sp, #32
 8005bc8:	af02      	add	r7, sp, #8
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	607a      	str	r2, [r7, #4]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	817b      	strh	r3, [r7, #10]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005bd8:	f7fe fbd0 	bl	800437c <HAL_GetTick>
 8005bdc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b20      	cmp	r3, #32
 8005be8:	f040 80e0 	bne.w	8005dac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	2319      	movs	r3, #25
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	4970      	ldr	r1, [pc, #448]	@ (8005db8 <HAL_I2C_Master_Transmit+0x1f4>)
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f000 fc7e 	bl	80064f8 <I2C_WaitOnFlagUntilTimeout>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005c02:	2302      	movs	r3, #2
 8005c04:	e0d3      	b.n	8005dae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d101      	bne.n	8005c14 <HAL_I2C_Master_Transmit+0x50>
 8005c10:	2302      	movs	r3, #2
 8005c12:	e0cc      	b.n	8005dae <HAL_I2C_Master_Transmit+0x1ea>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d007      	beq.n	8005c3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f042 0201 	orr.w	r2, r2, #1
 8005c38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2221      	movs	r2, #33	@ 0x21
 8005c4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2210      	movs	r2, #16
 8005c56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	893a      	ldrh	r2, [r7, #8]
 8005c6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4a50      	ldr	r2, [pc, #320]	@ (8005dbc <HAL_I2C_Master_Transmit+0x1f8>)
 8005c7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005c7c:	8979      	ldrh	r1, [r7, #10]
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	6a3a      	ldr	r2, [r7, #32]
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 fae8 	bl	8006258 <I2C_MasterRequestWrite>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e08d      	b.n	8005dae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c92:	2300      	movs	r3, #0
 8005c94:	613b      	str	r3, [r7, #16]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	613b      	str	r3, [r7, #16]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	613b      	str	r3, [r7, #16]
 8005ca6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005ca8:	e066      	b.n	8005d78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	6a39      	ldr	r1, [r7, #32]
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f000 fd3c 	bl	800672c <I2C_WaitOnTXEFlagUntilTimeout>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00d      	beq.n	8005cd6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cbe:	2b04      	cmp	r3, #4
 8005cc0:	d107      	bne.n	8005cd2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e06b      	b.n	8005dae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cda:	781a      	ldrb	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce6:	1c5a      	adds	r2, r3, #1
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	f003 0304 	and.w	r3, r3, #4
 8005d10:	2b04      	cmp	r3, #4
 8005d12:	d11b      	bne.n	8005d4c <HAL_I2C_Master_Transmit+0x188>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d017      	beq.n	8005d4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d20:	781a      	ldrb	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d44:	3b01      	subs	r3, #1
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	6a39      	ldr	r1, [r7, #32]
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f000 fd33 	bl	80067bc <I2C_WaitOnBTFFlagUntilTimeout>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00d      	beq.n	8005d78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d60:	2b04      	cmp	r3, #4
 8005d62:	d107      	bne.n	8005d74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e01a      	b.n	8005dae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d194      	bne.n	8005caa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2220      	movs	r2, #32
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005da8:	2300      	movs	r3, #0
 8005daa:	e000      	b.n	8005dae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005dac:	2302      	movs	r3, #2
  }
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3718      	adds	r7, #24
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	00100002 	.word	0x00100002
 8005dbc:	ffff0000 	.word	0xffff0000

08005dc0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b08c      	sub	sp, #48	@ 0x30
 8005dc4:	af02      	add	r7, sp, #8
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	607a      	str	r2, [r7, #4]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	460b      	mov	r3, r1
 8005dce:	817b      	strh	r3, [r7, #10]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005dd4:	f7fe fad2 	bl	800437c <HAL_GetTick>
 8005dd8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b20      	cmp	r3, #32
 8005de4:	f040 8217 	bne.w	8006216 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	2319      	movs	r3, #25
 8005dee:	2201      	movs	r2, #1
 8005df0:	497c      	ldr	r1, [pc, #496]	@ (8005fe4 <HAL_I2C_Master_Receive+0x224>)
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 fb80 	bl	80064f8 <I2C_WaitOnFlagUntilTimeout>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005dfe:	2302      	movs	r3, #2
 8005e00:	e20a      	b.n	8006218 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d101      	bne.n	8005e10 <HAL_I2C_Master_Receive+0x50>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	e203      	b.n	8006218 <HAL_I2C_Master_Receive+0x458>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d007      	beq.n	8005e36 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f042 0201 	orr.w	r2, r2, #1
 8005e34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2222      	movs	r2, #34	@ 0x22
 8005e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2210      	movs	r2, #16
 8005e52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	893a      	ldrh	r2, [r7, #8]
 8005e66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4a5c      	ldr	r2, [pc, #368]	@ (8005fe8 <HAL_I2C_Master_Receive+0x228>)
 8005e76:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005e78:	8979      	ldrh	r1, [r7, #10]
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f000 fa6c 	bl	800635c <I2C_MasterRequestRead>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e1c4      	b.n	8006218 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d113      	bne.n	8005ebe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e96:	2300      	movs	r3, #0
 8005e98:	623b      	str	r3, [r7, #32]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	623b      	str	r3, [r7, #32]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	623b      	str	r3, [r7, #32]
 8005eaa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005eba:	601a      	str	r2, [r3, #0]
 8005ebc:	e198      	b.n	80061f0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d11b      	bne.n	8005efe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ed4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	61fb      	str	r3, [r7, #28]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	61fb      	str	r3, [r7, #28]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	61fb      	str	r3, [r7, #28]
 8005eea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005efa:	601a      	str	r2, [r3, #0]
 8005efc:	e178      	b.n	80061f0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d11b      	bne.n	8005f3e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f26:	2300      	movs	r3, #0
 8005f28:	61bb      	str	r3, [r7, #24]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	61bb      	str	r3, [r7, #24]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	61bb      	str	r3, [r7, #24]
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	e158      	b.n	80061f0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f4e:	2300      	movs	r3, #0
 8005f50:	617b      	str	r3, [r7, #20]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	617b      	str	r3, [r7, #20]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	617b      	str	r3, [r7, #20]
 8005f62:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005f64:	e144      	b.n	80061f0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f6a:	2b03      	cmp	r3, #3
 8005f6c:	f200 80f1 	bhi.w	8006152 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d123      	bne.n	8005fc0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f7a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f000 fc65 	bl	800684c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d001      	beq.n	8005f8c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e145      	b.n	8006218 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	691a      	ldr	r2, [r3, #16]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f96:	b2d2      	uxtb	r2, r2
 8005f98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005fbe:	e117      	b.n	80061f0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d14e      	bne.n	8006066 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fce:	2200      	movs	r2, #0
 8005fd0:	4906      	ldr	r1, [pc, #24]	@ (8005fec <HAL_I2C_Master_Receive+0x22c>)
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f000 fa90 	bl	80064f8 <I2C_WaitOnFlagUntilTimeout>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d008      	beq.n	8005ff0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e11a      	b.n	8006218 <HAL_I2C_Master_Receive+0x458>
 8005fe2:	bf00      	nop
 8005fe4:	00100002 	.word	0x00100002
 8005fe8:	ffff0000 	.word	0xffff0000
 8005fec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ffe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	691a      	ldr	r2, [r3, #16]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600a:	b2d2      	uxtb	r2, r2
 800600c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006012:	1c5a      	adds	r2, r3, #1
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800601c:	3b01      	subs	r3, #1
 800601e:	b29a      	uxth	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006028:	b29b      	uxth	r3, r3
 800602a:	3b01      	subs	r3, #1
 800602c:	b29a      	uxth	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	691a      	ldr	r2, [r3, #16]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603c:	b2d2      	uxtb	r2, r2
 800603e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006044:	1c5a      	adds	r2, r3, #1
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800604e:	3b01      	subs	r3, #1
 8006050:	b29a      	uxth	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800605a:	b29b      	uxth	r3, r3
 800605c:	3b01      	subs	r3, #1
 800605e:	b29a      	uxth	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006064:	e0c4      	b.n	80061f0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606c:	2200      	movs	r2, #0
 800606e:	496c      	ldr	r1, [pc, #432]	@ (8006220 <HAL_I2C_Master_Receive+0x460>)
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f000 fa41 	bl	80064f8 <I2C_WaitOnFlagUntilTimeout>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d001      	beq.n	8006080 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e0cb      	b.n	8006218 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800608e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	691a      	ldr	r2, [r3, #16]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609a:	b2d2      	uxtb	r2, r2
 800609c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	3b01      	subs	r3, #1
 80060bc:	b29a      	uxth	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80060c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c4:	9300      	str	r3, [sp, #0]
 80060c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c8:	2200      	movs	r2, #0
 80060ca:	4955      	ldr	r1, [pc, #340]	@ (8006220 <HAL_I2C_Master_Receive+0x460>)
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f000 fa13 	bl	80064f8 <I2C_WaitOnFlagUntilTimeout>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d001      	beq.n	80060dc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e09d      	b.n	8006218 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	691a      	ldr	r2, [r3, #16]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f6:	b2d2      	uxtb	r2, r2
 80060f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fe:	1c5a      	adds	r2, r3, #1
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006108:	3b01      	subs	r3, #1
 800610a:	b29a      	uxth	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006114:	b29b      	uxth	r3, r3
 8006116:	3b01      	subs	r3, #1
 8006118:	b29a      	uxth	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	691a      	ldr	r2, [r3, #16]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006128:	b2d2      	uxtb	r2, r2
 800612a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006130:	1c5a      	adds	r2, r3, #1
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800613a:	3b01      	subs	r3, #1
 800613c:	b29a      	uxth	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006146:	b29b      	uxth	r3, r3
 8006148:	3b01      	subs	r3, #1
 800614a:	b29a      	uxth	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006150:	e04e      	b.n	80061f0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006154:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f000 fb78 	bl	800684c <I2C_WaitOnRXNEFlagUntilTimeout>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e058      	b.n	8006218 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	691a      	ldr	r2, [r3, #16]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006170:	b2d2      	uxtb	r2, r2
 8006172:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006178:	1c5a      	adds	r2, r3, #1
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006182:	3b01      	subs	r3, #1
 8006184:	b29a      	uxth	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800618e:	b29b      	uxth	r3, r3
 8006190:	3b01      	subs	r3, #1
 8006192:	b29a      	uxth	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	f003 0304 	and.w	r3, r3, #4
 80061a2:	2b04      	cmp	r3, #4
 80061a4:	d124      	bne.n	80061f0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	d107      	bne.n	80061be <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061bc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	691a      	ldr	r2, [r3, #16]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c8:	b2d2      	uxtb	r2, r2
 80061ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061da:	3b01      	subs	r3, #1
 80061dc:	b29a      	uxth	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	3b01      	subs	r3, #1
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f47f aeb6 	bne.w	8005f66 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2220      	movs	r2, #32
 80061fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	e000      	b.n	8006218 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006216:	2302      	movs	r3, #2
  }
}
 8006218:	4618      	mov	r0, r3
 800621a:	3728      	adds	r7, #40	@ 0x28
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	00010004 	.word	0x00010004

08006224 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006232:	b2db      	uxtb	r3, r3
}
 8006234:	4618      	mov	r0, r3
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800624c:	4618      	mov	r0, r3
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b088      	sub	sp, #32
 800625c:	af02      	add	r7, sp, #8
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	607a      	str	r2, [r7, #4]
 8006262:	603b      	str	r3, [r7, #0]
 8006264:	460b      	mov	r3, r1
 8006266:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800626c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	2b08      	cmp	r3, #8
 8006272:	d006      	beq.n	8006282 <I2C_MasterRequestWrite+0x2a>
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d003      	beq.n	8006282 <I2C_MasterRequestWrite+0x2a>
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006280:	d108      	bne.n	8006294 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006290:	601a      	str	r2, [r3, #0]
 8006292:	e00b      	b.n	80062ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006298:	2b12      	cmp	r3, #18
 800629a:	d107      	bne.n	80062ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f000 f91d 	bl	80064f8 <I2C_WaitOnFlagUntilTimeout>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00d      	beq.n	80062e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062d2:	d103      	bne.n	80062dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e035      	b.n	800634c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062e8:	d108      	bne.n	80062fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062ea:	897b      	ldrh	r3, [r7, #10]
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	461a      	mov	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80062f8:	611a      	str	r2, [r3, #16]
 80062fa:	e01b      	b.n	8006334 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80062fc:	897b      	ldrh	r3, [r7, #10]
 80062fe:	11db      	asrs	r3, r3, #7
 8006300:	b2db      	uxtb	r3, r3
 8006302:	f003 0306 	and.w	r3, r3, #6
 8006306:	b2db      	uxtb	r3, r3
 8006308:	f063 030f 	orn	r3, r3, #15
 800630c:	b2da      	uxtb	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	490e      	ldr	r1, [pc, #56]	@ (8006354 <I2C_MasterRequestWrite+0xfc>)
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f000 f966 	bl	80065ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e010      	b.n	800634c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800632a:	897b      	ldrh	r3, [r7, #10]
 800632c:	b2da      	uxtb	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	4907      	ldr	r1, [pc, #28]	@ (8006358 <I2C_MasterRequestWrite+0x100>)
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f000 f956 	bl	80065ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d001      	beq.n	800634a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e000      	b.n	800634c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3718      	adds	r7, #24
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	00010008 	.word	0x00010008
 8006358:	00010002 	.word	0x00010002

0800635c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b088      	sub	sp, #32
 8006360:	af02      	add	r7, sp, #8
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	607a      	str	r2, [r7, #4]
 8006366:	603b      	str	r3, [r7, #0]
 8006368:	460b      	mov	r3, r1
 800636a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006370:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006380:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2b08      	cmp	r3, #8
 8006386:	d006      	beq.n	8006396 <I2C_MasterRequestRead+0x3a>
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d003      	beq.n	8006396 <I2C_MasterRequestRead+0x3a>
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006394:	d108      	bne.n	80063a8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	e00b      	b.n	80063c0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ac:	2b11      	cmp	r3, #17
 80063ae:	d107      	bne.n	80063c0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f000 f893 	bl	80064f8 <I2C_WaitOnFlagUntilTimeout>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00d      	beq.n	80063f4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063e6:	d103      	bne.n	80063f0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e079      	b.n	80064e8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063fc:	d108      	bne.n	8006410 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80063fe:	897b      	ldrh	r3, [r7, #10]
 8006400:	b2db      	uxtb	r3, r3
 8006402:	f043 0301 	orr.w	r3, r3, #1
 8006406:	b2da      	uxtb	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	611a      	str	r2, [r3, #16]
 800640e:	e05f      	b.n	80064d0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006410:	897b      	ldrh	r3, [r7, #10]
 8006412:	11db      	asrs	r3, r3, #7
 8006414:	b2db      	uxtb	r3, r3
 8006416:	f003 0306 	and.w	r3, r3, #6
 800641a:	b2db      	uxtb	r3, r3
 800641c:	f063 030f 	orn	r3, r3, #15
 8006420:	b2da      	uxtb	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	4930      	ldr	r1, [pc, #192]	@ (80064f0 <I2C_MasterRequestRead+0x194>)
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f000 f8dc 	bl	80065ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d001      	beq.n	800643e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e054      	b.n	80064e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800643e:	897b      	ldrh	r3, [r7, #10]
 8006440:	b2da      	uxtb	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	4929      	ldr	r1, [pc, #164]	@ (80064f4 <I2C_MasterRequestRead+0x198>)
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 f8cc 	bl	80065ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e044      	b.n	80064e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800645e:	2300      	movs	r3, #0
 8006460:	613b      	str	r3, [r7, #16]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	613b      	str	r3, [r7, #16]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	613b      	str	r3, [r7, #16]
 8006472:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006482:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 f831 	bl	80064f8 <I2C_WaitOnFlagUntilTimeout>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00d      	beq.n	80064b8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064aa:	d103      	bne.n	80064b4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064b2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e017      	b.n	80064e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80064b8:	897b      	ldrh	r3, [r7, #10]
 80064ba:	11db      	asrs	r3, r3, #7
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	f003 0306 	and.w	r3, r3, #6
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	f063 030e 	orn	r3, r3, #14
 80064c8:	b2da      	uxtb	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	4907      	ldr	r1, [pc, #28]	@ (80064f4 <I2C_MasterRequestRead+0x198>)
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f000 f888 	bl	80065ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e000      	b.n	80064e8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3718      	adds	r7, #24
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	00010008 	.word	0x00010008
 80064f4:	00010002 	.word	0x00010002

080064f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	603b      	str	r3, [r7, #0]
 8006504:	4613      	mov	r3, r2
 8006506:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006508:	e048      	b.n	800659c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006510:	d044      	beq.n	800659c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006512:	f7fd ff33 	bl	800437c <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	429a      	cmp	r2, r3
 8006520:	d302      	bcc.n	8006528 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d139      	bne.n	800659c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	0c1b      	lsrs	r3, r3, #16
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b01      	cmp	r3, #1
 8006530:	d10d      	bne.n	800654e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	43da      	mvns	r2, r3
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	4013      	ands	r3, r2
 800653e:	b29b      	uxth	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	bf0c      	ite	eq
 8006544:	2301      	moveq	r3, #1
 8006546:	2300      	movne	r3, #0
 8006548:	b2db      	uxtb	r3, r3
 800654a:	461a      	mov	r2, r3
 800654c:	e00c      	b.n	8006568 <I2C_WaitOnFlagUntilTimeout+0x70>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	43da      	mvns	r2, r3
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	4013      	ands	r3, r2
 800655a:	b29b      	uxth	r3, r3
 800655c:	2b00      	cmp	r3, #0
 800655e:	bf0c      	ite	eq
 8006560:	2301      	moveq	r3, #1
 8006562:	2300      	movne	r3, #0
 8006564:	b2db      	uxtb	r3, r3
 8006566:	461a      	mov	r2, r3
 8006568:	79fb      	ldrb	r3, [r7, #7]
 800656a:	429a      	cmp	r2, r3
 800656c:	d116      	bne.n	800659c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2220      	movs	r2, #32
 8006578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006588:	f043 0220 	orr.w	r2, r3, #32
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e023      	b.n	80065e4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	0c1b      	lsrs	r3, r3, #16
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d10d      	bne.n	80065c2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	43da      	mvns	r2, r3
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	4013      	ands	r3, r2
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	bf0c      	ite	eq
 80065b8:	2301      	moveq	r3, #1
 80065ba:	2300      	movne	r3, #0
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	461a      	mov	r2, r3
 80065c0:	e00c      	b.n	80065dc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	43da      	mvns	r2, r3
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	4013      	ands	r3, r2
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	bf0c      	ite	eq
 80065d4:	2301      	moveq	r3, #1
 80065d6:	2300      	movne	r3, #0
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	461a      	mov	r2, r3
 80065dc:	79fb      	ldrb	r3, [r7, #7]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d093      	beq.n	800650a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
 80065f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065fa:	e071      	b.n	80066e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006606:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800660a:	d123      	bne.n	8006654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800661a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006624:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2220      	movs	r2, #32
 8006630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006640:	f043 0204 	orr.w	r2, r3, #4
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e067      	b.n	8006724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665a:	d041      	beq.n	80066e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800665c:	f7fd fe8e 	bl	800437c <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	429a      	cmp	r2, r3
 800666a:	d302      	bcc.n	8006672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d136      	bne.n	80066e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	0c1b      	lsrs	r3, r3, #16
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b01      	cmp	r3, #1
 800667a:	d10c      	bne.n	8006696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	43da      	mvns	r2, r3
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	4013      	ands	r3, r2
 8006688:	b29b      	uxth	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	bf14      	ite	ne
 800668e:	2301      	movne	r3, #1
 8006690:	2300      	moveq	r3, #0
 8006692:	b2db      	uxtb	r3, r3
 8006694:	e00b      	b.n	80066ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	43da      	mvns	r2, r3
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	4013      	ands	r3, r2
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	bf14      	ite	ne
 80066a8:	2301      	movne	r3, #1
 80066aa:	2300      	moveq	r3, #0
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d016      	beq.n	80066e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2220      	movs	r2, #32
 80066bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066cc:	f043 0220 	orr.w	r2, r3, #32
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e021      	b.n	8006724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	0c1b      	lsrs	r3, r3, #16
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d10c      	bne.n	8006704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	43da      	mvns	r2, r3
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	4013      	ands	r3, r2
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	bf14      	ite	ne
 80066fc:	2301      	movne	r3, #1
 80066fe:	2300      	moveq	r3, #0
 8006700:	b2db      	uxtb	r3, r3
 8006702:	e00b      	b.n	800671c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	43da      	mvns	r2, r3
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	4013      	ands	r3, r2
 8006710:	b29b      	uxth	r3, r3
 8006712:	2b00      	cmp	r3, #0
 8006714:	bf14      	ite	ne
 8006716:	2301      	movne	r3, #1
 8006718:	2300      	moveq	r3, #0
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b00      	cmp	r3, #0
 800671e:	f47f af6d 	bne.w	80065fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006738:	e034      	b.n	80067a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f000 f8e3 	bl	8006906 <I2C_IsAcknowledgeFailed>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d001      	beq.n	800674a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e034      	b.n	80067b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006750:	d028      	beq.n	80067a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006752:	f7fd fe13 	bl	800437c <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	429a      	cmp	r2, r3
 8006760:	d302      	bcc.n	8006768 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d11d      	bne.n	80067a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006772:	2b80      	cmp	r3, #128	@ 0x80
 8006774:	d016      	beq.n	80067a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2220      	movs	r2, #32
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006790:	f043 0220 	orr.w	r2, r3, #32
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e007      	b.n	80067b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ae:	2b80      	cmp	r3, #128	@ 0x80
 80067b0:	d1c3      	bne.n	800673a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80067c8:	e034      	b.n	8006834 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f000 f89b 	bl	8006906 <I2C_IsAcknowledgeFailed>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d001      	beq.n	80067da <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e034      	b.n	8006844 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e0:	d028      	beq.n	8006834 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067e2:	f7fd fdcb 	bl	800437c <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d302      	bcc.n	80067f8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d11d      	bne.n	8006834 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	f003 0304 	and.w	r3, r3, #4
 8006802:	2b04      	cmp	r3, #4
 8006804:	d016      	beq.n	8006834 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2220      	movs	r2, #32
 8006810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006820:	f043 0220 	orr.w	r2, r3, #32
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e007      	b.n	8006844 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	f003 0304 	and.w	r3, r3, #4
 800683e:	2b04      	cmp	r3, #4
 8006840:	d1c3      	bne.n	80067ca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006858:	e049      	b.n	80068ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	f003 0310 	and.w	r3, r3, #16
 8006864:	2b10      	cmp	r3, #16
 8006866:	d119      	bne.n	800689c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f06f 0210 	mvn.w	r2, #16
 8006870:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2220      	movs	r2, #32
 800687c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e030      	b.n	80068fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800689c:	f7fd fd6e 	bl	800437c <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d302      	bcc.n	80068b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d11d      	bne.n	80068ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068bc:	2b40      	cmp	r3, #64	@ 0x40
 80068be:	d016      	beq.n	80068ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2220      	movs	r2, #32
 80068ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068da:	f043 0220 	orr.w	r2, r3, #32
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e007      	b.n	80068fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068f8:	2b40      	cmp	r3, #64	@ 0x40
 80068fa:	d1ae      	bne.n	800685a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006906:	b480      	push	{r7}
 8006908:	b083      	sub	sp, #12
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006918:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800691c:	d11b      	bne.n	8006956 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006926:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2220      	movs	r2, #32
 8006932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006942:	f043 0204 	orr.w	r2, r3, #4
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e000      	b.n	8006958 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b086      	sub	sp, #24
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d101      	bne.n	8006976 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e267      	b.n	8006e46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b00      	cmp	r3, #0
 8006980:	d075      	beq.n	8006a6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006982:	4b88      	ldr	r3, [pc, #544]	@ (8006ba4 <HAL_RCC_OscConfig+0x240>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f003 030c 	and.w	r3, r3, #12
 800698a:	2b04      	cmp	r3, #4
 800698c:	d00c      	beq.n	80069a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800698e:	4b85      	ldr	r3, [pc, #532]	@ (8006ba4 <HAL_RCC_OscConfig+0x240>)
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006996:	2b08      	cmp	r3, #8
 8006998:	d112      	bne.n	80069c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800699a:	4b82      	ldr	r3, [pc, #520]	@ (8006ba4 <HAL_RCC_OscConfig+0x240>)
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069a6:	d10b      	bne.n	80069c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069a8:	4b7e      	ldr	r3, [pc, #504]	@ (8006ba4 <HAL_RCC_OscConfig+0x240>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d05b      	beq.n	8006a6c <HAL_RCC_OscConfig+0x108>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d157      	bne.n	8006a6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e242      	b.n	8006e46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069c8:	d106      	bne.n	80069d8 <HAL_RCC_OscConfig+0x74>
 80069ca:	4b76      	ldr	r3, [pc, #472]	@ (8006ba4 <HAL_RCC_OscConfig+0x240>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a75      	ldr	r2, [pc, #468]	@ (8006ba4 <HAL_RCC_OscConfig+0x240>)
 80069d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069d4:	6013      	str	r3, [r2, #0]
 80069d6:	e01d      	b.n	8006a14 <HAL_RCC_OscConfig+0xb0>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80069e0:	d10c      	bne.n	80069fc <HAL_RCC_OscConfig+0x98>
 80069e2:	4b70      	ldr	r3, [pc, #448]	@ (8006ba4 <HAL_RCC_OscConfig+0x240>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a6f      	ldr	r2, [pc, #444]	@ (8006ba4 <HAL_RCC_OscConfig+0x240>)
 80069e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	4b6d      	ldr	r3, [pc, #436]	@ (8006ba4 <HAL_RCC_OscConfig+0x240>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a6c      	ldr	r2, [pc, #432]	@ (8006ba4 <HAL_RCC_OscConfig+0x240>)
 80069f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069f8:	6013      	str	r3, [r2, #0]
 80069fa:	e00b      	b.n	8006a14 <HAL_RCC_OscConfig+0xb0>
 80069fc:	4b69      	ldr	r3, [pc, #420]	@ (8006ba4 <HAL_RCC_OscConfig+0x240>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a68      	ldr	r2, [pc, #416]	@ (8006ba4 <HAL_RCC_OscConfig+0x240>)
 8006a02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a06:	6013      	str	r3, [r2, #0]
 8006a08:	4b66      	ldr	r3, [pc, #408]	@ (8006ba4 <HAL_RCC_OscConfig+0x240>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a65      	ldr	r2, [pc, #404]	@ (8006ba4 <HAL_RCC_OscConfig+0x240>)
 8006a0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d013      	beq.n	8006a44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a1c:	f7fd fcae 	bl	800437c <HAL_GetTick>
 8006a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a22:	e008      	b.n	8006a36 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a24:	f7fd fcaa 	bl	800437c <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	2b64      	cmp	r3, #100	@ 0x64
 8006a30:	d901      	bls.n	8006a36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e207      	b.n	8006e46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a36:	4b5b      	ldr	r3, [pc, #364]	@ (8006ba4 <HAL_RCC_OscConfig+0x240>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0f0      	beq.n	8006a24 <HAL_RCC_OscConfig+0xc0>
 8006a42:	e014      	b.n	8006a6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a44:	f7fd fc9a 	bl	800437c <HAL_GetTick>
 8006a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a4a:	e008      	b.n	8006a5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a4c:	f7fd fc96 	bl	800437c <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	2b64      	cmp	r3, #100	@ 0x64
 8006a58:	d901      	bls.n	8006a5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e1f3      	b.n	8006e46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a5e:	4b51      	ldr	r3, [pc, #324]	@ (8006ba4 <HAL_RCC_OscConfig+0x240>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1f0      	bne.n	8006a4c <HAL_RCC_OscConfig+0xe8>
 8006a6a:	e000      	b.n	8006a6e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0302 	and.w	r3, r3, #2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d063      	beq.n	8006b42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006a7a:	4b4a      	ldr	r3, [pc, #296]	@ (8006ba4 <HAL_RCC_OscConfig+0x240>)
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f003 030c 	and.w	r3, r3, #12
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00b      	beq.n	8006a9e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a86:	4b47      	ldr	r3, [pc, #284]	@ (8006ba4 <HAL_RCC_OscConfig+0x240>)
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006a8e:	2b08      	cmp	r3, #8
 8006a90:	d11c      	bne.n	8006acc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a92:	4b44      	ldr	r3, [pc, #272]	@ (8006ba4 <HAL_RCC_OscConfig+0x240>)
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d116      	bne.n	8006acc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a9e:	4b41      	ldr	r3, [pc, #260]	@ (8006ba4 <HAL_RCC_OscConfig+0x240>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d005      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x152>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d001      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e1c7      	b.n	8006e46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8006ba4 <HAL_RCC_OscConfig+0x240>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	00db      	lsls	r3, r3, #3
 8006ac4:	4937      	ldr	r1, [pc, #220]	@ (8006ba4 <HAL_RCC_OscConfig+0x240>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006aca:	e03a      	b.n	8006b42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d020      	beq.n	8006b16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ad4:	4b34      	ldr	r3, [pc, #208]	@ (8006ba8 <HAL_RCC_OscConfig+0x244>)
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ada:	f7fd fc4f 	bl	800437c <HAL_GetTick>
 8006ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ae0:	e008      	b.n	8006af4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ae2:	f7fd fc4b 	bl	800437c <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d901      	bls.n	8006af4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e1a8      	b.n	8006e46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006af4:	4b2b      	ldr	r3, [pc, #172]	@ (8006ba4 <HAL_RCC_OscConfig+0x240>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0302 	and.w	r3, r3, #2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d0f0      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b00:	4b28      	ldr	r3, [pc, #160]	@ (8006ba4 <HAL_RCC_OscConfig+0x240>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	00db      	lsls	r3, r3, #3
 8006b0e:	4925      	ldr	r1, [pc, #148]	@ (8006ba4 <HAL_RCC_OscConfig+0x240>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	600b      	str	r3, [r1, #0]
 8006b14:	e015      	b.n	8006b42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b16:	4b24      	ldr	r3, [pc, #144]	@ (8006ba8 <HAL_RCC_OscConfig+0x244>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b1c:	f7fd fc2e 	bl	800437c <HAL_GetTick>
 8006b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b22:	e008      	b.n	8006b36 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b24:	f7fd fc2a 	bl	800437c <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d901      	bls.n	8006b36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e187      	b.n	8006e46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b36:	4b1b      	ldr	r3, [pc, #108]	@ (8006ba4 <HAL_RCC_OscConfig+0x240>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1f0      	bne.n	8006b24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0308 	and.w	r3, r3, #8
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d036      	beq.n	8006bbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d016      	beq.n	8006b84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b56:	4b15      	ldr	r3, [pc, #84]	@ (8006bac <HAL_RCC_OscConfig+0x248>)
 8006b58:	2201      	movs	r2, #1
 8006b5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b5c:	f7fd fc0e 	bl	800437c <HAL_GetTick>
 8006b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b62:	e008      	b.n	8006b76 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b64:	f7fd fc0a 	bl	800437c <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d901      	bls.n	8006b76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e167      	b.n	8006e46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b76:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba4 <HAL_RCC_OscConfig+0x240>)
 8006b78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d0f0      	beq.n	8006b64 <HAL_RCC_OscConfig+0x200>
 8006b82:	e01b      	b.n	8006bbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b84:	4b09      	ldr	r3, [pc, #36]	@ (8006bac <HAL_RCC_OscConfig+0x248>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b8a:	f7fd fbf7 	bl	800437c <HAL_GetTick>
 8006b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b90:	e00e      	b.n	8006bb0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b92:	f7fd fbf3 	bl	800437c <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d907      	bls.n	8006bb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e150      	b.n	8006e46 <HAL_RCC_OscConfig+0x4e2>
 8006ba4:	40023800 	.word	0x40023800
 8006ba8:	42470000 	.word	0x42470000
 8006bac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bb0:	4b88      	ldr	r3, [pc, #544]	@ (8006dd4 <HAL_RCC_OscConfig+0x470>)
 8006bb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bb4:	f003 0302 	and.w	r3, r3, #2
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1ea      	bne.n	8006b92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0304 	and.w	r3, r3, #4
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 8097 	beq.w	8006cf8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bce:	4b81      	ldr	r3, [pc, #516]	@ (8006dd4 <HAL_RCC_OscConfig+0x470>)
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10f      	bne.n	8006bfa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60bb      	str	r3, [r7, #8]
 8006bde:	4b7d      	ldr	r3, [pc, #500]	@ (8006dd4 <HAL_RCC_OscConfig+0x470>)
 8006be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be2:	4a7c      	ldr	r2, [pc, #496]	@ (8006dd4 <HAL_RCC_OscConfig+0x470>)
 8006be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8006bea:	4b7a      	ldr	r3, [pc, #488]	@ (8006dd4 <HAL_RCC_OscConfig+0x470>)
 8006bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bf2:	60bb      	str	r3, [r7, #8]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bfa:	4b77      	ldr	r3, [pc, #476]	@ (8006dd8 <HAL_RCC_OscConfig+0x474>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d118      	bne.n	8006c38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c06:	4b74      	ldr	r3, [pc, #464]	@ (8006dd8 <HAL_RCC_OscConfig+0x474>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a73      	ldr	r2, [pc, #460]	@ (8006dd8 <HAL_RCC_OscConfig+0x474>)
 8006c0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c12:	f7fd fbb3 	bl	800437c <HAL_GetTick>
 8006c16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c18:	e008      	b.n	8006c2c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c1a:	f7fd fbaf 	bl	800437c <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d901      	bls.n	8006c2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e10c      	b.n	8006e46 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c2c:	4b6a      	ldr	r3, [pc, #424]	@ (8006dd8 <HAL_RCC_OscConfig+0x474>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d0f0      	beq.n	8006c1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d106      	bne.n	8006c4e <HAL_RCC_OscConfig+0x2ea>
 8006c40:	4b64      	ldr	r3, [pc, #400]	@ (8006dd4 <HAL_RCC_OscConfig+0x470>)
 8006c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c44:	4a63      	ldr	r2, [pc, #396]	@ (8006dd4 <HAL_RCC_OscConfig+0x470>)
 8006c46:	f043 0301 	orr.w	r3, r3, #1
 8006c4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c4c:	e01c      	b.n	8006c88 <HAL_RCC_OscConfig+0x324>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	2b05      	cmp	r3, #5
 8006c54:	d10c      	bne.n	8006c70 <HAL_RCC_OscConfig+0x30c>
 8006c56:	4b5f      	ldr	r3, [pc, #380]	@ (8006dd4 <HAL_RCC_OscConfig+0x470>)
 8006c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c5a:	4a5e      	ldr	r2, [pc, #376]	@ (8006dd4 <HAL_RCC_OscConfig+0x470>)
 8006c5c:	f043 0304 	orr.w	r3, r3, #4
 8006c60:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c62:	4b5c      	ldr	r3, [pc, #368]	@ (8006dd4 <HAL_RCC_OscConfig+0x470>)
 8006c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c66:	4a5b      	ldr	r2, [pc, #364]	@ (8006dd4 <HAL_RCC_OscConfig+0x470>)
 8006c68:	f043 0301 	orr.w	r3, r3, #1
 8006c6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c6e:	e00b      	b.n	8006c88 <HAL_RCC_OscConfig+0x324>
 8006c70:	4b58      	ldr	r3, [pc, #352]	@ (8006dd4 <HAL_RCC_OscConfig+0x470>)
 8006c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c74:	4a57      	ldr	r2, [pc, #348]	@ (8006dd4 <HAL_RCC_OscConfig+0x470>)
 8006c76:	f023 0301 	bic.w	r3, r3, #1
 8006c7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c7c:	4b55      	ldr	r3, [pc, #340]	@ (8006dd4 <HAL_RCC_OscConfig+0x470>)
 8006c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c80:	4a54      	ldr	r2, [pc, #336]	@ (8006dd4 <HAL_RCC_OscConfig+0x470>)
 8006c82:	f023 0304 	bic.w	r3, r3, #4
 8006c86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d015      	beq.n	8006cbc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c90:	f7fd fb74 	bl	800437c <HAL_GetTick>
 8006c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c96:	e00a      	b.n	8006cae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c98:	f7fd fb70 	bl	800437c <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e0cb      	b.n	8006e46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cae:	4b49      	ldr	r3, [pc, #292]	@ (8006dd4 <HAL_RCC_OscConfig+0x470>)
 8006cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d0ee      	beq.n	8006c98 <HAL_RCC_OscConfig+0x334>
 8006cba:	e014      	b.n	8006ce6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cbc:	f7fd fb5e 	bl	800437c <HAL_GetTick>
 8006cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cc2:	e00a      	b.n	8006cda <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cc4:	f7fd fb5a 	bl	800437c <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d901      	bls.n	8006cda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e0b5      	b.n	8006e46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cda:	4b3e      	ldr	r3, [pc, #248]	@ (8006dd4 <HAL_RCC_OscConfig+0x470>)
 8006cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1ee      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006ce6:	7dfb      	ldrb	r3, [r7, #23]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d105      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cec:	4b39      	ldr	r3, [pc, #228]	@ (8006dd4 <HAL_RCC_OscConfig+0x470>)
 8006cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cf0:	4a38      	ldr	r2, [pc, #224]	@ (8006dd4 <HAL_RCC_OscConfig+0x470>)
 8006cf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cf6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 80a1 	beq.w	8006e44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d02:	4b34      	ldr	r3, [pc, #208]	@ (8006dd4 <HAL_RCC_OscConfig+0x470>)
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f003 030c 	and.w	r3, r3, #12
 8006d0a:	2b08      	cmp	r3, #8
 8006d0c:	d05c      	beq.n	8006dc8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d141      	bne.n	8006d9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d16:	4b31      	ldr	r3, [pc, #196]	@ (8006ddc <HAL_RCC_OscConfig+0x478>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d1c:	f7fd fb2e 	bl	800437c <HAL_GetTick>
 8006d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d22:	e008      	b.n	8006d36 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d24:	f7fd fb2a 	bl	800437c <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d901      	bls.n	8006d36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e087      	b.n	8006e46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d36:	4b27      	ldr	r3, [pc, #156]	@ (8006dd4 <HAL_RCC_OscConfig+0x470>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1f0      	bne.n	8006d24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	69da      	ldr	r2, [r3, #28]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d50:	019b      	lsls	r3, r3, #6
 8006d52:	431a      	orrs	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d58:	085b      	lsrs	r3, r3, #1
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	041b      	lsls	r3, r3, #16
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d64:	061b      	lsls	r3, r3, #24
 8006d66:	491b      	ldr	r1, [pc, #108]	@ (8006dd4 <HAL_RCC_OscConfig+0x470>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8006ddc <HAL_RCC_OscConfig+0x478>)
 8006d6e:	2201      	movs	r2, #1
 8006d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d72:	f7fd fb03 	bl	800437c <HAL_GetTick>
 8006d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d78:	e008      	b.n	8006d8c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d7a:	f7fd faff 	bl	800437c <HAL_GetTick>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d901      	bls.n	8006d8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e05c      	b.n	8006e46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d8c:	4b11      	ldr	r3, [pc, #68]	@ (8006dd4 <HAL_RCC_OscConfig+0x470>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d0f0      	beq.n	8006d7a <HAL_RCC_OscConfig+0x416>
 8006d98:	e054      	b.n	8006e44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d9a:	4b10      	ldr	r3, [pc, #64]	@ (8006ddc <HAL_RCC_OscConfig+0x478>)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006da0:	f7fd faec 	bl	800437c <HAL_GetTick>
 8006da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006da6:	e008      	b.n	8006dba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006da8:	f7fd fae8 	bl	800437c <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d901      	bls.n	8006dba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e045      	b.n	8006e46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dba:	4b06      	ldr	r3, [pc, #24]	@ (8006dd4 <HAL_RCC_OscConfig+0x470>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1f0      	bne.n	8006da8 <HAL_RCC_OscConfig+0x444>
 8006dc6:	e03d      	b.n	8006e44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d107      	bne.n	8006de0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e038      	b.n	8006e46 <HAL_RCC_OscConfig+0x4e2>
 8006dd4:	40023800 	.word	0x40023800
 8006dd8:	40007000 	.word	0x40007000
 8006ddc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006de0:	4b1b      	ldr	r3, [pc, #108]	@ (8006e50 <HAL_RCC_OscConfig+0x4ec>)
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d028      	beq.n	8006e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d121      	bne.n	8006e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d11a      	bne.n	8006e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006e10:	4013      	ands	r3, r2
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006e16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d111      	bne.n	8006e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e26:	085b      	lsrs	r3, r3, #1
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d107      	bne.n	8006e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d001      	beq.n	8006e44 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e000      	b.n	8006e46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3718      	adds	r7, #24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	40023800 	.word	0x40023800

08006e54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d101      	bne.n	8006e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e0cc      	b.n	8007002 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e68:	4b68      	ldr	r3, [pc, #416]	@ (800700c <HAL_RCC_ClockConfig+0x1b8>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0307 	and.w	r3, r3, #7
 8006e70:	683a      	ldr	r2, [r7, #0]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d90c      	bls.n	8006e90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e76:	4b65      	ldr	r3, [pc, #404]	@ (800700c <HAL_RCC_ClockConfig+0x1b8>)
 8006e78:	683a      	ldr	r2, [r7, #0]
 8006e7a:	b2d2      	uxtb	r2, r2
 8006e7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e7e:	4b63      	ldr	r3, [pc, #396]	@ (800700c <HAL_RCC_ClockConfig+0x1b8>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0307 	and.w	r3, r3, #7
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d001      	beq.n	8006e90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e0b8      	b.n	8007002 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0302 	and.w	r3, r3, #2
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d020      	beq.n	8006ede <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0304 	and.w	r3, r3, #4
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d005      	beq.n	8006eb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ea8:	4b59      	ldr	r3, [pc, #356]	@ (8007010 <HAL_RCC_ClockConfig+0x1bc>)
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	4a58      	ldr	r2, [pc, #352]	@ (8007010 <HAL_RCC_ClockConfig+0x1bc>)
 8006eae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006eb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0308 	and.w	r3, r3, #8
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d005      	beq.n	8006ecc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ec0:	4b53      	ldr	r3, [pc, #332]	@ (8007010 <HAL_RCC_ClockConfig+0x1bc>)
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	4a52      	ldr	r2, [pc, #328]	@ (8007010 <HAL_RCC_ClockConfig+0x1bc>)
 8006ec6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006eca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ecc:	4b50      	ldr	r3, [pc, #320]	@ (8007010 <HAL_RCC_ClockConfig+0x1bc>)
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	494d      	ldr	r1, [pc, #308]	@ (8007010 <HAL_RCC_ClockConfig+0x1bc>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0301 	and.w	r3, r3, #1
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d044      	beq.n	8006f74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d107      	bne.n	8006f02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ef2:	4b47      	ldr	r3, [pc, #284]	@ (8007010 <HAL_RCC_ClockConfig+0x1bc>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d119      	bne.n	8006f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e07f      	b.n	8007002 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d003      	beq.n	8006f12 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f0e:	2b03      	cmp	r3, #3
 8006f10:	d107      	bne.n	8006f22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f12:	4b3f      	ldr	r3, [pc, #252]	@ (8007010 <HAL_RCC_ClockConfig+0x1bc>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d109      	bne.n	8006f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e06f      	b.n	8007002 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f22:	4b3b      	ldr	r3, [pc, #236]	@ (8007010 <HAL_RCC_ClockConfig+0x1bc>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0302 	and.w	r3, r3, #2
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e067      	b.n	8007002 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f32:	4b37      	ldr	r3, [pc, #220]	@ (8007010 <HAL_RCC_ClockConfig+0x1bc>)
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f023 0203 	bic.w	r2, r3, #3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	4934      	ldr	r1, [pc, #208]	@ (8007010 <HAL_RCC_ClockConfig+0x1bc>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f44:	f7fd fa1a 	bl	800437c <HAL_GetTick>
 8006f48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f4a:	e00a      	b.n	8006f62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f4c:	f7fd fa16 	bl	800437c <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d901      	bls.n	8006f62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e04f      	b.n	8007002 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f62:	4b2b      	ldr	r3, [pc, #172]	@ (8007010 <HAL_RCC_ClockConfig+0x1bc>)
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f003 020c 	and.w	r2, r3, #12
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d1eb      	bne.n	8006f4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f74:	4b25      	ldr	r3, [pc, #148]	@ (800700c <HAL_RCC_ClockConfig+0x1b8>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0307 	and.w	r3, r3, #7
 8006f7c:	683a      	ldr	r2, [r7, #0]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d20c      	bcs.n	8006f9c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f82:	4b22      	ldr	r3, [pc, #136]	@ (800700c <HAL_RCC_ClockConfig+0x1b8>)
 8006f84:	683a      	ldr	r2, [r7, #0]
 8006f86:	b2d2      	uxtb	r2, r2
 8006f88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f8a:	4b20      	ldr	r3, [pc, #128]	@ (800700c <HAL_RCC_ClockConfig+0x1b8>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0307 	and.w	r3, r3, #7
 8006f92:	683a      	ldr	r2, [r7, #0]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d001      	beq.n	8006f9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e032      	b.n	8007002 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0304 	and.w	r3, r3, #4
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d008      	beq.n	8006fba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fa8:	4b19      	ldr	r3, [pc, #100]	@ (8007010 <HAL_RCC_ClockConfig+0x1bc>)
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	4916      	ldr	r1, [pc, #88]	@ (8007010 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0308 	and.w	r3, r3, #8
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d009      	beq.n	8006fda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fc6:	4b12      	ldr	r3, [pc, #72]	@ (8007010 <HAL_RCC_ClockConfig+0x1bc>)
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	00db      	lsls	r3, r3, #3
 8006fd4:	490e      	ldr	r1, [pc, #56]	@ (8007010 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006fda:	f000 f821 	bl	8007020 <HAL_RCC_GetSysClockFreq>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8007010 <HAL_RCC_ClockConfig+0x1bc>)
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	091b      	lsrs	r3, r3, #4
 8006fe6:	f003 030f 	and.w	r3, r3, #15
 8006fea:	490a      	ldr	r1, [pc, #40]	@ (8007014 <HAL_RCC_ClockConfig+0x1c0>)
 8006fec:	5ccb      	ldrb	r3, [r1, r3]
 8006fee:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff2:	4a09      	ldr	r2, [pc, #36]	@ (8007018 <HAL_RCC_ClockConfig+0x1c4>)
 8006ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006ff6:	4b09      	ldr	r3, [pc, #36]	@ (800701c <HAL_RCC_ClockConfig+0x1c8>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7fd f97a 	bl	80042f4 <HAL_InitTick>

  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	40023c00 	.word	0x40023c00
 8007010:	40023800 	.word	0x40023800
 8007014:	08013e6c 	.word	0x08013e6c
 8007018:	20000010 	.word	0x20000010
 800701c:	20000014 	.word	0x20000014

08007020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007024:	b090      	sub	sp, #64	@ 0x40
 8007026:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007028:	2300      	movs	r3, #0
 800702a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800702c:	2300      	movs	r3, #0
 800702e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007038:	4b59      	ldr	r3, [pc, #356]	@ (80071a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f003 030c 	and.w	r3, r3, #12
 8007040:	2b08      	cmp	r3, #8
 8007042:	d00d      	beq.n	8007060 <HAL_RCC_GetSysClockFreq+0x40>
 8007044:	2b08      	cmp	r3, #8
 8007046:	f200 80a1 	bhi.w	800718c <HAL_RCC_GetSysClockFreq+0x16c>
 800704a:	2b00      	cmp	r3, #0
 800704c:	d002      	beq.n	8007054 <HAL_RCC_GetSysClockFreq+0x34>
 800704e:	2b04      	cmp	r3, #4
 8007050:	d003      	beq.n	800705a <HAL_RCC_GetSysClockFreq+0x3a>
 8007052:	e09b      	b.n	800718c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007054:	4b53      	ldr	r3, [pc, #332]	@ (80071a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007056:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007058:	e09b      	b.n	8007192 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800705a:	4b53      	ldr	r3, [pc, #332]	@ (80071a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800705c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800705e:	e098      	b.n	8007192 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007060:	4b4f      	ldr	r3, [pc, #316]	@ (80071a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007068:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800706a:	4b4d      	ldr	r3, [pc, #308]	@ (80071a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d028      	beq.n	80070c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007076:	4b4a      	ldr	r3, [pc, #296]	@ (80071a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	099b      	lsrs	r3, r3, #6
 800707c:	2200      	movs	r2, #0
 800707e:	623b      	str	r3, [r7, #32]
 8007080:	627a      	str	r2, [r7, #36]	@ 0x24
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007088:	2100      	movs	r1, #0
 800708a:	4b47      	ldr	r3, [pc, #284]	@ (80071a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800708c:	fb03 f201 	mul.w	r2, r3, r1
 8007090:	2300      	movs	r3, #0
 8007092:	fb00 f303 	mul.w	r3, r0, r3
 8007096:	4413      	add	r3, r2
 8007098:	4a43      	ldr	r2, [pc, #268]	@ (80071a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800709a:	fba0 1202 	umull	r1, r2, r0, r2
 800709e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070a0:	460a      	mov	r2, r1
 80070a2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80070a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070a6:	4413      	add	r3, r2
 80070a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ac:	2200      	movs	r2, #0
 80070ae:	61bb      	str	r3, [r7, #24]
 80070b0:	61fa      	str	r2, [r7, #28]
 80070b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80070ba:	f7f9 fded 	bl	8000c98 <__aeabi_uldivmod>
 80070be:	4602      	mov	r2, r0
 80070c0:	460b      	mov	r3, r1
 80070c2:	4613      	mov	r3, r2
 80070c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070c6:	e053      	b.n	8007170 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070c8:	4b35      	ldr	r3, [pc, #212]	@ (80071a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	099b      	lsrs	r3, r3, #6
 80070ce:	2200      	movs	r2, #0
 80070d0:	613b      	str	r3, [r7, #16]
 80070d2:	617a      	str	r2, [r7, #20]
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80070da:	f04f 0b00 	mov.w	fp, #0
 80070de:	4652      	mov	r2, sl
 80070e0:	465b      	mov	r3, fp
 80070e2:	f04f 0000 	mov.w	r0, #0
 80070e6:	f04f 0100 	mov.w	r1, #0
 80070ea:	0159      	lsls	r1, r3, #5
 80070ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070f0:	0150      	lsls	r0, r2, #5
 80070f2:	4602      	mov	r2, r0
 80070f4:	460b      	mov	r3, r1
 80070f6:	ebb2 080a 	subs.w	r8, r2, sl
 80070fa:	eb63 090b 	sbc.w	r9, r3, fp
 80070fe:	f04f 0200 	mov.w	r2, #0
 8007102:	f04f 0300 	mov.w	r3, #0
 8007106:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800710a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800710e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007112:	ebb2 0408 	subs.w	r4, r2, r8
 8007116:	eb63 0509 	sbc.w	r5, r3, r9
 800711a:	f04f 0200 	mov.w	r2, #0
 800711e:	f04f 0300 	mov.w	r3, #0
 8007122:	00eb      	lsls	r3, r5, #3
 8007124:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007128:	00e2      	lsls	r2, r4, #3
 800712a:	4614      	mov	r4, r2
 800712c:	461d      	mov	r5, r3
 800712e:	eb14 030a 	adds.w	r3, r4, sl
 8007132:	603b      	str	r3, [r7, #0]
 8007134:	eb45 030b 	adc.w	r3, r5, fp
 8007138:	607b      	str	r3, [r7, #4]
 800713a:	f04f 0200 	mov.w	r2, #0
 800713e:	f04f 0300 	mov.w	r3, #0
 8007142:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007146:	4629      	mov	r1, r5
 8007148:	028b      	lsls	r3, r1, #10
 800714a:	4621      	mov	r1, r4
 800714c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007150:	4621      	mov	r1, r4
 8007152:	028a      	lsls	r2, r1, #10
 8007154:	4610      	mov	r0, r2
 8007156:	4619      	mov	r1, r3
 8007158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800715a:	2200      	movs	r2, #0
 800715c:	60bb      	str	r3, [r7, #8]
 800715e:	60fa      	str	r2, [r7, #12]
 8007160:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007164:	f7f9 fd98 	bl	8000c98 <__aeabi_uldivmod>
 8007168:	4602      	mov	r2, r0
 800716a:	460b      	mov	r3, r1
 800716c:	4613      	mov	r3, r2
 800716e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007170:	4b0b      	ldr	r3, [pc, #44]	@ (80071a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	0c1b      	lsrs	r3, r3, #16
 8007176:	f003 0303 	and.w	r3, r3, #3
 800717a:	3301      	adds	r3, #1
 800717c:	005b      	lsls	r3, r3, #1
 800717e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007180:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007184:	fbb2 f3f3 	udiv	r3, r2, r3
 8007188:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800718a:	e002      	b.n	8007192 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800718c:	4b05      	ldr	r3, [pc, #20]	@ (80071a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800718e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007190:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007194:	4618      	mov	r0, r3
 8007196:	3740      	adds	r7, #64	@ 0x40
 8007198:	46bd      	mov	sp, r7
 800719a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800719e:	bf00      	nop
 80071a0:	40023800 	.word	0x40023800
 80071a4:	00f42400 	.word	0x00f42400
 80071a8:	017d7840 	.word	0x017d7840

080071ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071ac:	b480      	push	{r7}
 80071ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071b0:	4b03      	ldr	r3, [pc, #12]	@ (80071c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80071b2:	681b      	ldr	r3, [r3, #0]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	20000010 	.word	0x20000010

080071c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80071c8:	f7ff fff0 	bl	80071ac <HAL_RCC_GetHCLKFreq>
 80071cc:	4602      	mov	r2, r0
 80071ce:	4b05      	ldr	r3, [pc, #20]	@ (80071e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	0a9b      	lsrs	r3, r3, #10
 80071d4:	f003 0307 	and.w	r3, r3, #7
 80071d8:	4903      	ldr	r1, [pc, #12]	@ (80071e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071da:	5ccb      	ldrb	r3, [r1, r3]
 80071dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	40023800 	.word	0x40023800
 80071e8:	08013e7c 	.word	0x08013e7c

080071ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80071f0:	f7ff ffdc 	bl	80071ac <HAL_RCC_GetHCLKFreq>
 80071f4:	4602      	mov	r2, r0
 80071f6:	4b05      	ldr	r3, [pc, #20]	@ (800720c <HAL_RCC_GetPCLK2Freq+0x20>)
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	0b5b      	lsrs	r3, r3, #13
 80071fc:	f003 0307 	and.w	r3, r3, #7
 8007200:	4903      	ldr	r1, [pc, #12]	@ (8007210 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007202:	5ccb      	ldrb	r3, [r1, r3]
 8007204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007208:	4618      	mov	r0, r3
 800720a:	bd80      	pop	{r7, pc}
 800720c:	40023800 	.word	0x40023800
 8007210:	08013e7c 	.word	0x08013e7c

08007214 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e022      	b.n	800726c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b00      	cmp	r3, #0
 8007230:	d105      	bne.n	800723e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f7fc fc79 	bl	8003b30 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2203      	movs	r2, #3
 8007242:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f814 	bl	8007274 <HAL_SD_InitCard>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e00a      	b.n	800726c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007274:	b5b0      	push	{r4, r5, r7, lr}
 8007276:	b08e      	sub	sp, #56	@ 0x38
 8007278:	af04      	add	r7, sp, #16
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800727c:	2300      	movs	r3, #0
 800727e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007280:	2300      	movs	r3, #0
 8007282:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007284:	2300      	movs	r3, #0
 8007286:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007288:	2300      	movs	r3, #0
 800728a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800728c:	2300      	movs	r3, #0
 800728e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007290:	2376      	movs	r3, #118	@ 0x76
 8007292:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681d      	ldr	r5, [r3, #0]
 8007298:	466c      	mov	r4, sp
 800729a:	f107 0314 	add.w	r3, r7, #20
 800729e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80072a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80072a6:	f107 0308 	add.w	r3, r7, #8
 80072aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80072ac:	4628      	mov	r0, r5
 80072ae:	f003 f85b 	bl	800a368 <SDIO_Init>
 80072b2:	4603      	mov	r3, r0
 80072b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80072b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d001      	beq.n	80072c4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e04f      	b.n	8007364 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80072c4:	4b29      	ldr	r3, [pc, #164]	@ (800736c <HAL_SD_InitCard+0xf8>)
 80072c6:	2200      	movs	r2, #0
 80072c8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4618      	mov	r0, r3
 80072d0:	f003 f893 	bl	800a3fa <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80072d4:	4b25      	ldr	r3, [pc, #148]	@ (800736c <HAL_SD_InitCard+0xf8>)
 80072d6:	2201      	movs	r2, #1
 80072d8:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80072da:	2002      	movs	r0, #2
 80072dc:	f7fd f85a 	bl	8004394 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f001 f805 	bl	80082f0 <SD_PowerON>
 80072e6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072e8:	6a3b      	ldr	r3, [r7, #32]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00b      	beq.n	8007306 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072fa:	6a3b      	ldr	r3, [r7, #32]
 80072fc:	431a      	orrs	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e02e      	b.n	8007364 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 ff24 	bl	8008154 <SD_InitCard>
 800730c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00b      	beq.n	800732c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	431a      	orrs	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e01b      	b.n	8007364 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007334:	4618      	mov	r0, r3
 8007336:	f003 f8f2 	bl	800a51e <SDMMC_CmdBlockLength>
 800733a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800733c:	6a3b      	ldr	r3, [r7, #32]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00f      	beq.n	8007362 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a0a      	ldr	r2, [pc, #40]	@ (8007370 <HAL_SD_InitCard+0xfc>)
 8007348:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800734e:	6a3b      	ldr	r3, [r7, #32]
 8007350:	431a      	orrs	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2201      	movs	r2, #1
 800735a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e000      	b.n	8007364 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3728      	adds	r7, #40	@ 0x28
 8007368:	46bd      	mov	sp, r7
 800736a:	bdb0      	pop	{r4, r5, r7, pc}
 800736c:	422580a0 	.word	0x422580a0
 8007370:	004005ff 	.word	0x004005ff

08007374 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b08c      	sub	sp, #48	@ 0x30
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]
 8007380:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d107      	bne.n	800739c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007390:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	e0c0      	b.n	800751e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	f040 80b9 	bne.w	800751c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80073b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	441a      	add	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d907      	bls.n	80073ce <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e0a7      	b.n	800751e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2203      	movs	r2, #3
 80073d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2200      	movs	r2, #0
 80073dc:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	6812      	ldr	r2, [r2, #0]
 80073e8:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 80073ec:	f043 0302 	orr.w	r3, r3, #2
 80073f0:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f6:	4a4c      	ldr	r2, [pc, #304]	@ (8007528 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80073f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073fe:	4a4b      	ldr	r2, [pc, #300]	@ (800752c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007400:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007406:	2200      	movs	r2, #0
 8007408:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740e:	2200      	movs	r2, #0
 8007410:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007422:	689a      	ldr	r2, [r3, #8]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	430a      	orrs	r2, r1
 800742c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	3380      	adds	r3, #128	@ 0x80
 8007438:	4619      	mov	r1, r3
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	025b      	lsls	r3, r3, #9
 8007440:	089b      	lsrs	r3, r3, #2
 8007442:	f7fd fd7d 	bl	8004f40 <HAL_DMA_Start_IT>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d017      	beq.n	800747c <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800745a:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a33      	ldr	r2, [pc, #204]	@ (8007530 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007462:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007468:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	e050      	b.n	800751e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800747c:	4b2d      	ldr	r3, [pc, #180]	@ (8007534 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800747e:	2201      	movs	r2, #1
 8007480:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007486:	2b01      	cmp	r3, #1
 8007488:	d002      	beq.n	8007490 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800748a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800748c:	025b      	lsls	r3, r3, #9
 800748e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007490:	f04f 33ff 	mov.w	r3, #4294967295
 8007494:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	025b      	lsls	r3, r3, #9
 800749a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800749c:	2390      	movs	r3, #144	@ 0x90
 800749e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80074a0:	2302      	movs	r3, #2
 80074a2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80074a4:	2300      	movs	r3, #0
 80074a6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80074a8:	2301      	movs	r3, #1
 80074aa:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f107 0210 	add.w	r2, r7, #16
 80074b4:	4611      	mov	r1, r2
 80074b6:	4618      	mov	r0, r3
 80074b8:	f003 f805 	bl	800a4c6 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d90a      	bls.n	80074d8 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2282      	movs	r2, #130	@ 0x82
 80074c6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074ce:	4618      	mov	r0, r3
 80074d0:	f003 f869 	bl	800a5a6 <SDMMC_CmdReadMultiBlock>
 80074d4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80074d6:	e009      	b.n	80074ec <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2281      	movs	r2, #129	@ 0x81
 80074dc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074e4:	4618      	mov	r0, r3
 80074e6:	f003 f83c 	bl	800a562 <SDMMC_CmdReadSingleBlock>
 80074ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80074ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d012      	beq.n	8007518 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a0e      	ldr	r2, [pc, #56]	@ (8007530 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80074f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007500:	431a      	orrs	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e002      	b.n	800751e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8007518:	2300      	movs	r3, #0
 800751a:	e000      	b.n	800751e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800751c:	2302      	movs	r3, #2
  }
}
 800751e:	4618      	mov	r0, r3
 8007520:	3730      	adds	r7, #48	@ 0x30
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	08007f63 	.word	0x08007f63
 800752c:	08007fd5 	.word	0x08007fd5
 8007530:	004005ff 	.word	0x004005ff
 8007534:	4225858c 	.word	0x4225858c

08007538 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b08c      	sub	sp, #48	@ 0x30
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
 8007544:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d107      	bne.n	8007560 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007554:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	e0c5      	b.n	80076ec <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b01      	cmp	r3, #1
 800756a:	f040 80be 	bne.w	80076ea <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007574:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	441a      	add	r2, r3
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800757e:	429a      	cmp	r2, r3
 8007580:	d907      	bls.n	8007592 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007586:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e0ac      	b.n	80076ec <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2203      	movs	r2, #3
 8007596:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2200      	movs	r2, #0
 80075a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	6812      	ldr	r2, [r2, #0]
 80075ac:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 80075b0:	f043 0302 	orr.w	r3, r3, #2
 80075b4:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ba:	4a4e      	ldr	r2, [pc, #312]	@ (80076f4 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80075bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075c2:	4a4d      	ldr	r2, [pc, #308]	@ (80076f8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80075c4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ca:	2200      	movs	r2, #0
 80075cc:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d002      	beq.n	80075dc <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80075d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d8:	025b      	lsls	r3, r3, #9
 80075da:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d90a      	bls.n	80075f8 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	22a0      	movs	r2, #160	@ 0xa0
 80075e6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075ee:	4618      	mov	r0, r3
 80075f0:	f003 f81d 	bl	800a62e <SDMMC_CmdWriteMultiBlock>
 80075f4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80075f6:	e009      	b.n	800760c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2290      	movs	r2, #144	@ 0x90
 80075fc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007604:	4618      	mov	r0, r3
 8007606:	f002 fff0 	bl	800a5ea <SDMMC_CmdWriteSingleBlock>
 800760a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800760c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800760e:	2b00      	cmp	r3, #0
 8007610:	d012      	beq.n	8007638 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a39      	ldr	r2, [pc, #228]	@ (80076fc <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8007618:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800761e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007620:	431a      	orrs	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e059      	b.n	80076ec <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007638:	4b31      	ldr	r3, [pc, #196]	@ (8007700 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800763a:	2201      	movs	r2, #1
 800763c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007642:	2240      	movs	r2, #64	@ 0x40
 8007644:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007656:	689a      	ldr	r2, [r3, #8]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	430a      	orrs	r2, r1
 8007660:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007666:	68b9      	ldr	r1, [r7, #8]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	3380      	adds	r3, #128	@ 0x80
 800766e:	461a      	mov	r2, r3
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	025b      	lsls	r3, r3, #9
 8007674:	089b      	lsrs	r3, r3, #2
 8007676:	f7fd fc63 	bl	8004f40 <HAL_DMA_Start_IT>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d01c      	beq.n	80076ba <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	6812      	ldr	r2, [r2, #0]
 800768a:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 800768e:	f023 0302 	bic.w	r3, r3, #2
 8007692:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a18      	ldr	r2, [pc, #96]	@ (80076fc <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800769a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e018      	b.n	80076ec <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80076ba:	f04f 33ff 	mov.w	r3, #4294967295
 80076be:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	025b      	lsls	r3, r3, #9
 80076c4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80076c6:	2390      	movs	r3, #144	@ 0x90
 80076c8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80076ca:	2300      	movs	r3, #0
 80076cc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80076d2:	2301      	movs	r3, #1
 80076d4:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f107 0210 	add.w	r2, r7, #16
 80076de:	4611      	mov	r1, r2
 80076e0:	4618      	mov	r0, r3
 80076e2:	f002 fef0 	bl	800a4c6 <SDIO_ConfigData>

      return HAL_OK;
 80076e6:	2300      	movs	r3, #0
 80076e8:	e000      	b.n	80076ec <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80076ea:	2302      	movs	r3, #2
  }
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3730      	adds	r7, #48	@ 0x30
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	08007f39 	.word	0x08007f39
 80076f8:	08007fd5 	.word	0x08007fd5
 80076fc:	004005ff 	.word	0x004005ff
 8007700:	4225858c 	.word	0x4225858c

08007704 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007710:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007718:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d008      	beq.n	8007732 <HAL_SD_IRQHandler+0x2e>
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f003 0308 	and.w	r3, r3, #8
 8007726:	2b00      	cmp	r3, #0
 8007728:	d003      	beq.n	8007732 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f001 f806 	bl	800873c <SD_Read_IT>
 8007730:	e165      	b.n	80079fe <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 808f 	beq.w	8007860 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800774a:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	6812      	ldr	r2, [r2, #0]
 8007756:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 800775a:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800775e:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f022 0201 	bic.w	r2, r2, #1
 800776e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f003 0308 	and.w	r3, r3, #8
 8007776:	2b00      	cmp	r3, #0
 8007778:	d039      	beq.n	80077ee <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f003 0302 	and.w	r3, r3, #2
 8007780:	2b00      	cmp	r3, #0
 8007782:	d104      	bne.n	800778e <HAL_SD_IRQHandler+0x8a>
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f003 0320 	and.w	r3, r3, #32
 800778a:	2b00      	cmp	r3, #0
 800778c:	d011      	beq.n	80077b2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4618      	mov	r0, r3
 8007794:	f002 ff6e 	bl	800a674 <SDMMC_CmdStopTransfer>
 8007798:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d008      	beq.n	80077b2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	431a      	orrs	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 f92f 	bl	8007a10 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80077ba:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f003 0301 	and.w	r3, r3, #1
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d104      	bne.n	80077de <HAL_SD_IRQHandler+0xda>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d003      	beq.n	80077e6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f003 fbdc 	bl	800af9c <HAL_SD_RxCpltCallback>
 80077e4:	e10b      	b.n	80079fe <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f003 fbce 	bl	800af88 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80077ec:	e107      	b.n	80079fe <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 8102 	beq.w	80079fe <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f003 0320 	and.w	r3, r3, #32
 8007800:	2b00      	cmp	r3, #0
 8007802:	d011      	beq.n	8007828 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4618      	mov	r0, r3
 800780a:	f002 ff33 	bl	800a674 <SDMMC_CmdStopTransfer>
 800780e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d008      	beq.n	8007828 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	431a      	orrs	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f8f4 	bl	8007a10 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	2b00      	cmp	r3, #0
 8007830:	f040 80e5 	bne.w	80079fe <HAL_SD_IRQHandler+0x2fa>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	2b00      	cmp	r3, #0
 800783c:	f040 80df 	bne.w	80079fe <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f022 0208 	bic.w	r2, r2, #8
 800784e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f003 fb95 	bl	800af88 <HAL_SD_TxCpltCallback>
}
 800785e:	e0ce      	b.n	80079fe <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007866:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d008      	beq.n	8007880 <HAL_SD_IRQHandler+0x17c>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f003 0308 	and.w	r3, r3, #8
 8007874:	2b00      	cmp	r3, #0
 8007876:	d003      	beq.n	8007880 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 ffb0 	bl	80087de <SD_Write_IT>
 800787e:	e0be      	b.n	80079fe <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007886:	f240 233a 	movw	r3, #570	@ 0x23a
 800788a:	4013      	ands	r3, r2
 800788c:	2b00      	cmp	r3, #0
 800788e:	f000 80b6 	beq.w	80079fe <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007898:	f003 0302 	and.w	r3, r3, #2
 800789c:	2b00      	cmp	r3, #0
 800789e:	d005      	beq.n	80078ac <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a4:	f043 0202 	orr.w	r2, r3, #2
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078b2:	f003 0308 	and.w	r3, r3, #8
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d005      	beq.n	80078c6 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078be:	f043 0208 	orr.w	r2, r3, #8
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078cc:	f003 0320 	and.w	r3, r3, #32
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d005      	beq.n	80078e0 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d8:	f043 0220 	orr.w	r2, r3, #32
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078e6:	f003 0310 	and.w	r3, r3, #16
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d005      	beq.n	80078fa <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078f2:	f043 0210 	orr.w	r2, r3, #16
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007900:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007904:	2b00      	cmp	r3, #0
 8007906:	d005      	beq.n	8007914 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800790c:	f043 0208 	orr.w	r2, r3, #8
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f240 723a 	movw	r2, #1850	@ 0x73a
 800791c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	6812      	ldr	r2, [r2, #0]
 8007928:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 800792c:	f023 0302 	bic.w	r3, r3, #2
 8007930:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4618      	mov	r0, r3
 8007938:	f002 fe9c 	bl	800a674 <SDMMC_CmdStopTransfer>
 800793c:	4602      	mov	r2, r0
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007942:	431a      	orrs	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f003 0308 	and.w	r3, r3, #8
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00a      	beq.n	8007968 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f855 	bl	8007a10 <HAL_SD_ErrorCallback>
}
 8007966:	e04a      	b.n	80079fe <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800796e:	2b00      	cmp	r3, #0
 8007970:	d045      	beq.n	80079fe <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f003 0310 	and.w	r3, r3, #16
 8007978:	2b00      	cmp	r3, #0
 800797a:	d104      	bne.n	8007986 <HAL_SD_IRQHandler+0x282>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f003 0320 	and.w	r3, r3, #32
 8007982:	2b00      	cmp	r3, #0
 8007984:	d011      	beq.n	80079aa <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800798a:	4a1f      	ldr	r2, [pc, #124]	@ (8007a08 <HAL_SD_IRQHandler+0x304>)
 800798c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007992:	4618      	mov	r0, r3
 8007994:	f7fd fb9c 	bl	80050d0 <HAL_DMA_Abort_IT>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d02f      	beq.n	80079fe <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 fb68 	bl	8008078 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80079a8:	e029      	b.n	80079fe <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d104      	bne.n	80079be <HAL_SD_IRQHandler+0x2ba>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f003 0302 	and.w	r3, r3, #2
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d011      	beq.n	80079e2 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079c2:	4a12      	ldr	r2, [pc, #72]	@ (8007a0c <HAL_SD_IRQHandler+0x308>)
 80079c4:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7fd fb80 	bl	80050d0 <HAL_DMA_Abort_IT>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d013      	beq.n	80079fe <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 fb83 	bl	80080e6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80079e0:	e00d      	b.n	80079fe <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f003 fabc 	bl	800af74 <HAL_SD_AbortCallback>
}
 80079fc:	e7ff      	b.n	80079fe <HAL_SD_IRQHandler+0x2fa>
 80079fe:	bf00      	nop
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	08008079 	.word	0x08008079
 8007a0c:	080080e7 	.word	0x080080e7

08007a10 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007a18:	bf00      	nop
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a32:	0f9b      	lsrs	r3, r3, #30
 8007a34:	b2da      	uxtb	r2, r3
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a3e:	0e9b      	lsrs	r3, r3, #26
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	f003 030f 	and.w	r3, r3, #15
 8007a46:	b2da      	uxtb	r2, r3
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a50:	0e1b      	lsrs	r3, r3, #24
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	f003 0303 	and.w	r3, r3, #3
 8007a58:	b2da      	uxtb	r2, r3
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a62:	0c1b      	lsrs	r3, r3, #16
 8007a64:	b2da      	uxtb	r2, r3
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a6e:	0a1b      	lsrs	r3, r3, #8
 8007a70:	b2da      	uxtb	r2, r3
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a84:	0d1b      	lsrs	r3, r3, #20
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a90:	0c1b      	lsrs	r3, r3, #16
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	f003 030f 	and.w	r3, r3, #15
 8007a98:	b2da      	uxtb	r2, r3
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007aa2:	0bdb      	lsrs	r3, r3, #15
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	b2da      	uxtb	r2, r3
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ab4:	0b9b      	lsrs	r3, r3, #14
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	f003 0301 	and.w	r3, r3, #1
 8007abc:	b2da      	uxtb	r2, r3
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ac6:	0b5b      	lsrs	r3, r3, #13
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	f003 0301 	and.w	r3, r3, #1
 8007ace:	b2da      	uxtb	r2, r3
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ad8:	0b1b      	lsrs	r3, r3, #12
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	f003 0301 	and.w	r3, r3, #1
 8007ae0:	b2da      	uxtb	r2, r3
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d163      	bne.n	8007bbc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007af8:	009a      	lsls	r2, r3, #2
 8007afa:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007afe:	4013      	ands	r3, r2
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8007b04:	0f92      	lsrs	r2, r2, #30
 8007b06:	431a      	orrs	r2, r3
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b10:	0edb      	lsrs	r3, r3, #27
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	f003 0307 	and.w	r3, r3, #7
 8007b18:	b2da      	uxtb	r2, r3
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b22:	0e1b      	lsrs	r3, r3, #24
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	f003 0307 	and.w	r3, r3, #7
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b34:	0d5b      	lsrs	r3, r3, #21
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	f003 0307 	and.w	r3, r3, #7
 8007b3c:	b2da      	uxtb	r2, r3
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b46:	0c9b      	lsrs	r3, r3, #18
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	f003 0307 	and.w	r3, r3, #7
 8007b4e:	b2da      	uxtb	r2, r3
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b58:	0bdb      	lsrs	r3, r3, #15
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	f003 0307 	and.w	r3, r3, #7
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	1c5a      	adds	r2, r3, #1
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	7e1b      	ldrb	r3, [r3, #24]
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	f003 0307 	and.w	r3, r3, #7
 8007b7a:	3302      	adds	r3, #2
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007b86:	fb03 f202 	mul.w	r2, r3, r2
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	7a1b      	ldrb	r3, [r3, #8]
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	f003 030f 	and.w	r3, r3, #15
 8007b98:	2201      	movs	r2, #1
 8007b9a:	409a      	lsls	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007ba8:	0a52      	lsrs	r2, r2, #9
 8007baa:	fb03 f202 	mul.w	r2, r3, r2
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007bb8:	661a      	str	r2, [r3, #96]	@ 0x60
 8007bba:	e031      	b.n	8007c20 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d11d      	bne.n	8007c00 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007bc8:	041b      	lsls	r3, r3, #16
 8007bca:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bd2:	0c1b      	lsrs	r3, r3, #16
 8007bd4:	431a      	orrs	r2, r3
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	3301      	adds	r3, #1
 8007be0:	029a      	lsls	r2, r3, #10
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007bf4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	661a      	str	r2, [r3, #96]	@ 0x60
 8007bfe:	e00f      	b.n	8007c20 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a58      	ldr	r2, [pc, #352]	@ (8007d68 <HAL_SD_GetCardCSD+0x344>)
 8007c06:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c0c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e09d      	b.n	8007d5c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c24:	0b9b      	lsrs	r3, r3, #14
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	f003 0301 	and.w	r3, r3, #1
 8007c2c:	b2da      	uxtb	r2, r3
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c36:	09db      	lsrs	r3, r3, #7
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c3e:	b2da      	uxtb	r2, r3
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c4e:	b2da      	uxtb	r2, r3
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c58:	0fdb      	lsrs	r3, r3, #31
 8007c5a:	b2da      	uxtb	r2, r3
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c64:	0f5b      	lsrs	r3, r3, #29
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	f003 0303 	and.w	r3, r3, #3
 8007c6c:	b2da      	uxtb	r2, r3
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c76:	0e9b      	lsrs	r3, r3, #26
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	f003 0307 	and.w	r3, r3, #7
 8007c7e:	b2da      	uxtb	r2, r3
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c88:	0d9b      	lsrs	r3, r3, #22
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	f003 030f 	and.w	r3, r3, #15
 8007c90:	b2da      	uxtb	r2, r3
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c9a:	0d5b      	lsrs	r3, r3, #21
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	f003 0301 	and.w	r3, r3, #1
 8007ca2:	b2da      	uxtb	r2, r3
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cb6:	0c1b      	lsrs	r3, r3, #16
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	b2da      	uxtb	r2, r3
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cca:	0bdb      	lsrs	r3, r3, #15
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	b2da      	uxtb	r2, r3
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cde:	0b9b      	lsrs	r3, r3, #14
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	f003 0301 	and.w	r3, r3, #1
 8007ce6:	b2da      	uxtb	r2, r3
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cf2:	0b5b      	lsrs	r3, r3, #13
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	b2da      	uxtb	r2, r3
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d06:	0b1b      	lsrs	r3, r3, #12
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	f003 0301 	and.w	r3, r3, #1
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d1a:	0a9b      	lsrs	r3, r3, #10
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	f003 0303 	and.w	r3, r3, #3
 8007d22:	b2da      	uxtb	r2, r3
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d2e:	0a1b      	lsrs	r3, r3, #8
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	f003 0303 	and.w	r3, r3, #3
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d42:	085b      	lsrs	r3, r3, #1
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d4a:	b2da      	uxtb	r2, r3
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	2201      	movs	r2, #1
 8007d56:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	004005ff 	.word	0x004005ff

08007d6c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007dc4:	b5b0      	push	{r4, r5, r7, lr}
 8007dc6:	b08e      	sub	sp, #56	@ 0x38
 8007dc8:	af04      	add	r7, sp, #16
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2203      	movs	r2, #3
 8007dd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007de0:	2b03      	cmp	r3, #3
 8007de2:	d02e      	beq.n	8007e42 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dea:	d106      	bne.n	8007dfa <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	639a      	str	r2, [r3, #56]	@ 0x38
 8007df8:	e029      	b.n	8007e4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e00:	d10a      	bne.n	8007e18 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 fb2a 	bl	800845c <SD_WideBus_Enable>
 8007e08:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e0e:	6a3b      	ldr	r3, [r7, #32]
 8007e10:	431a      	orrs	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	639a      	str	r2, [r3, #56]	@ 0x38
 8007e16:	e01a      	b.n	8007e4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10a      	bne.n	8007e34 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 fb67 	bl	80084f2 <SD_WideBus_Disable>
 8007e24:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e2a:	6a3b      	ldr	r3, [r7, #32]
 8007e2c:	431a      	orrs	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	639a      	str	r2, [r3, #56]	@ 0x38
 8007e32:	e00c      	b.n	8007e4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e38:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007e40:	e005      	b.n	8007e4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e46:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00b      	beq.n	8007e6e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a26      	ldr	r2, [pc, #152]	@ (8007ef4 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007e5c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007e6c:	e01f      	b.n	8007eae <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681d      	ldr	r5, [r3, #0]
 8007e94:	466c      	mov	r4, sp
 8007e96:	f107 0314 	add.w	r3, r7, #20
 8007e9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007e9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007ea2:	f107 0308 	add.w	r3, r7, #8
 8007ea6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	f002 fa5d 	bl	800a368 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f002 fb31 	bl	800a51e <SDMMC_CmdBlockLength>
 8007ebc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ebe:	6a3b      	ldr	r3, [r7, #32]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00c      	beq.n	8007ede <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a0a      	ldr	r2, [pc, #40]	@ (8007ef4 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007eca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ed0:	6a3b      	ldr	r3, [r7, #32]
 8007ed2:	431a      	orrs	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8007ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3728      	adds	r7, #40	@ 0x28
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bdb0      	pop	{r4, r5, r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	004005ff 	.word	0x004005ff

08007ef8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007f00:	2300      	movs	r3, #0
 8007f02:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007f04:	f107 030c 	add.w	r3, r7, #12
 8007f08:	4619      	mov	r1, r3
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 fa7e 	bl	800840c <SD_SendStatus>
 8007f10:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d005      	beq.n	8007f24 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	431a      	orrs	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	0a5b      	lsrs	r3, r3, #9
 8007f28:	f003 030f 	and.w	r3, r3, #15
 8007f2c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007f2e:	693b      	ldr	r3, [r7, #16]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3718      	adds	r7, #24
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b085      	sub	sp, #20
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f44:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f54:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8007f56:	bf00      	nop
 8007f58:	3714      	adds	r7, #20
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr

08007f62 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b084      	sub	sp, #16
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f6e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f74:	2b82      	cmp	r3, #130	@ 0x82
 8007f76:	d111      	bne.n	8007f9c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f002 fb79 	bl	800a674 <SDMMC_CmdStopTransfer>
 8007f82:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d008      	beq.n	8007f9c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	431a      	orrs	r2, r3
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	f7ff fd3a 	bl	8007a10 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f022 0208 	bic.w	r2, r2, #8
 8007faa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007fb4:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f002 ffe9 	bl	800af9c <HAL_SD_RxCpltCallback>
#endif
}
 8007fca:	bf00      	nop
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
	...

08007fd4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b086      	sub	sp, #24
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fe0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f7fd fa20 	bl	8005428 <HAL_DMA_GetError>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d03e      	beq.n	800806c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ff4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ffc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d002      	beq.n	800800a <SD_DMAError+0x36>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d12d      	bne.n	8008066 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a19      	ldr	r2, [pc, #100]	@ (8008074 <SD_DMAError+0xa0>)
 8008010:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8008020:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008026:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800802e:	6978      	ldr	r0, [r7, #20]
 8008030:	f7ff ff62 	bl	8007ef8 <HAL_SD_GetCardState>
 8008034:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	2b06      	cmp	r3, #6
 800803a:	d002      	beq.n	8008042 <SD_DMAError+0x6e>
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	2b05      	cmp	r3, #5
 8008040:	d10a      	bne.n	8008058 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4618      	mov	r0, r3
 8008048:	f002 fb14 	bl	800a674 <SDMMC_CmdStopTransfer>
 800804c:	4602      	mov	r2, r0
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008052:	431a      	orrs	r2, r3
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	2200      	movs	r2, #0
 8008064:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008066:	6978      	ldr	r0, [r7, #20]
 8008068:	f7ff fcd2 	bl	8007a10 <HAL_SD_ErrorCallback>
#endif
  }
}
 800806c:	bf00      	nop
 800806e:	3718      	adds	r7, #24
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	004005ff 	.word	0x004005ff

08008078 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008084:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800808e:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f7ff ff31 	bl	8007ef8 <HAL_SD_GetCardState>
 8008096:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	2b06      	cmp	r3, #6
 80080aa:	d002      	beq.n	80080b2 <SD_DMATxAbort+0x3a>
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	2b05      	cmp	r3, #5
 80080b0:	d10a      	bne.n	80080c8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f002 fadc 	bl	800a674 <SDMMC_CmdStopTransfer>
 80080bc:	4602      	mov	r2, r0
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c2:	431a      	orrs	r2, r3
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d103      	bne.n	80080d8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f002 ff4f 	bl	800af74 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80080d6:	e002      	b.n	80080de <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f7ff fc99 	bl	8007a10 <HAL_SD_ErrorCallback>
}
 80080de:	bf00      	nop
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b084      	sub	sp, #16
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f240 523a 	movw	r2, #1338	@ 0x53a
 80080fc:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f7ff fefa 	bl	8007ef8 <HAL_SD_GetCardState>
 8008104:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	2b06      	cmp	r3, #6
 8008118:	d002      	beq.n	8008120 <SD_DMARxAbort+0x3a>
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	2b05      	cmp	r3, #5
 800811e:	d10a      	bne.n	8008136 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4618      	mov	r0, r3
 8008126:	f002 faa5 	bl	800a674 <SDMMC_CmdStopTransfer>
 800812a:	4602      	mov	r2, r0
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008130:	431a      	orrs	r2, r3
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800813a:	2b00      	cmp	r3, #0
 800813c:	d103      	bne.n	8008146 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f002 ff18 	bl	800af74 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008144:	e002      	b.n	800814c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f7ff fc62 	bl	8007a10 <HAL_SD_ErrorCallback>
}
 800814c:	bf00      	nop
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008154:	b5b0      	push	{r4, r5, r7, lr}
 8008156:	b094      	sub	sp, #80	@ 0x50
 8008158:	af04      	add	r7, sp, #16
 800815a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800815c:	2301      	movs	r3, #1
 800815e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4618      	mov	r0, r3
 8008166:	f002 f956 	bl	800a416 <SDIO_GetPowerState>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d102      	bne.n	8008176 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008170:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008174:	e0b8      	b.n	80082e8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800817a:	2b03      	cmp	r3, #3
 800817c:	d02f      	beq.n	80081de <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4618      	mov	r0, r3
 8008184:	f002 fb80 	bl	800a888 <SDMMC_CmdSendCID>
 8008188:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800818a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800818c:	2b00      	cmp	r3, #0
 800818e:	d001      	beq.n	8008194 <SD_InitCard+0x40>
    {
      return errorstate;
 8008190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008192:	e0a9      	b.n	80082e8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2100      	movs	r1, #0
 800819a:	4618      	mov	r0, r3
 800819c:	f002 f980 	bl	800a4a0 <SDIO_GetResponse>
 80081a0:	4602      	mov	r2, r0
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2104      	movs	r1, #4
 80081ac:	4618      	mov	r0, r3
 80081ae:	f002 f977 	bl	800a4a0 <SDIO_GetResponse>
 80081b2:	4602      	mov	r2, r0
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2108      	movs	r1, #8
 80081be:	4618      	mov	r0, r3
 80081c0:	f002 f96e 	bl	800a4a0 <SDIO_GetResponse>
 80081c4:	4602      	mov	r2, r0
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	210c      	movs	r1, #12
 80081d0:	4618      	mov	r0, r3
 80081d2:	f002 f965 	bl	800a4a0 <SDIO_GetResponse>
 80081d6:	4602      	mov	r2, r0
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081e2:	2b03      	cmp	r3, #3
 80081e4:	d00d      	beq.n	8008202 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f107 020e 	add.w	r2, r7, #14
 80081ee:	4611      	mov	r1, r2
 80081f0:	4618      	mov	r0, r3
 80081f2:	f002 fb86 	bl	800a902 <SDMMC_CmdSetRelAdd>
 80081f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80081f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <SD_InitCard+0xae>
    {
      return errorstate;
 80081fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008200:	e072      	b.n	80082e8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008206:	2b03      	cmp	r3, #3
 8008208:	d036      	beq.n	8008278 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800820a:	89fb      	ldrh	r3, [r7, #14]
 800820c:	461a      	mov	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800821a:	041b      	lsls	r3, r3, #16
 800821c:	4619      	mov	r1, r3
 800821e:	4610      	mov	r0, r2
 8008220:	f002 fb50 	bl	800a8c4 <SDMMC_CmdSendCSD>
 8008224:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008228:	2b00      	cmp	r3, #0
 800822a:	d001      	beq.n	8008230 <SD_InitCard+0xdc>
    {
      return errorstate;
 800822c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800822e:	e05b      	b.n	80082e8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2100      	movs	r1, #0
 8008236:	4618      	mov	r0, r3
 8008238:	f002 f932 	bl	800a4a0 <SDIO_GetResponse>
 800823c:	4602      	mov	r2, r0
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2104      	movs	r1, #4
 8008248:	4618      	mov	r0, r3
 800824a:	f002 f929 	bl	800a4a0 <SDIO_GetResponse>
 800824e:	4602      	mov	r2, r0
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2108      	movs	r1, #8
 800825a:	4618      	mov	r0, r3
 800825c:	f002 f920 	bl	800a4a0 <SDIO_GetResponse>
 8008260:	4602      	mov	r2, r0
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	210c      	movs	r1, #12
 800826c:	4618      	mov	r0, r3
 800826e:	f002 f917 	bl	800a4a0 <SDIO_GetResponse>
 8008272:	4602      	mov	r2, r0
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2104      	movs	r1, #4
 800827e:	4618      	mov	r0, r3
 8008280:	f002 f90e 	bl	800a4a0 <SDIO_GetResponse>
 8008284:	4603      	mov	r3, r0
 8008286:	0d1a      	lsrs	r2, r3, #20
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800828c:	f107 0310 	add.w	r3, r7, #16
 8008290:	4619      	mov	r1, r3
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f7ff fbc6 	bl	8007a24 <HAL_SD_GetCardCSD>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d002      	beq.n	80082a4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800829e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80082a2:	e021      	b.n	80082e8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6819      	ldr	r1, [r3, #0]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082ac:	041b      	lsls	r3, r3, #16
 80082ae:	2200      	movs	r2, #0
 80082b0:	461c      	mov	r4, r3
 80082b2:	4615      	mov	r5, r2
 80082b4:	4622      	mov	r2, r4
 80082b6:	462b      	mov	r3, r5
 80082b8:	4608      	mov	r0, r1
 80082ba:	f002 f9fd 	bl	800a6b8 <SDMMC_CmdSelDesel>
 80082be:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80082c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d001      	beq.n	80082ca <SD_InitCard+0x176>
  {
    return errorstate;
 80082c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082c8:	e00e      	b.n	80082e8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681d      	ldr	r5, [r3, #0]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	466c      	mov	r4, sp
 80082d2:	f103 0210 	add.w	r2, r3, #16
 80082d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80082d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80082dc:	3304      	adds	r3, #4
 80082de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80082e0:	4628      	mov	r0, r5
 80082e2:	f002 f841 	bl	800a368 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3740      	adds	r7, #64	@ 0x40
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bdb0      	pop	{r4, r5, r7, pc}

080082f0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082f8:	2300      	movs	r3, #0
 80082fa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80082fc:	2300      	movs	r3, #0
 80082fe:	617b      	str	r3, [r7, #20]
 8008300:	2300      	movs	r3, #0
 8008302:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4618      	mov	r0, r3
 800830a:	f002 f9f8 	bl	800a6fe <SDMMC_CmdGoIdleState>
 800830e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d001      	beq.n	800831a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	e072      	b.n	8008400 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4618      	mov	r0, r3
 8008320:	f002 fa0b 	bl	800a73a <SDMMC_CmdOperCond>
 8008324:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00d      	beq.n	8008348 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4618      	mov	r0, r3
 8008338:	f002 f9e1 	bl	800a6fe <SDMMC_CmdGoIdleState>
 800833c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d004      	beq.n	800834e <SD_PowerON+0x5e>
    {
      return errorstate;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	e05b      	b.n	8008400 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008352:	2b01      	cmp	r3, #1
 8008354:	d137      	bne.n	80083c6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2100      	movs	r1, #0
 800835c:	4618      	mov	r0, r3
 800835e:	f002 fa0b 	bl	800a778 <SDMMC_CmdAppCommand>
 8008362:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d02d      	beq.n	80083c6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800836a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800836e:	e047      	b.n	8008400 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2100      	movs	r1, #0
 8008376:	4618      	mov	r0, r3
 8008378:	f002 f9fe 	bl	800a778 <SDMMC_CmdAppCommand>
 800837c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <SD_PowerON+0x98>
    {
      return errorstate;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	e03b      	b.n	8008400 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	491e      	ldr	r1, [pc, #120]	@ (8008408 <SD_PowerON+0x118>)
 800838e:	4618      	mov	r0, r3
 8008390:	f002 fa14 	bl	800a7bc <SDMMC_CmdAppOperCommand>
 8008394:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d002      	beq.n	80083a2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800839c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80083a0:	e02e      	b.n	8008400 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2100      	movs	r1, #0
 80083a8:	4618      	mov	r0, r3
 80083aa:	f002 f879 	bl	800a4a0 <SDIO_GetResponse>
 80083ae:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	0fdb      	lsrs	r3, r3, #31
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d101      	bne.n	80083bc <SD_PowerON+0xcc>
 80083b8:	2301      	movs	r3, #1
 80083ba:	e000      	b.n	80083be <SD_PowerON+0xce>
 80083bc:	2300      	movs	r3, #0
 80083be:	613b      	str	r3, [r7, #16]

    count++;
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	3301      	adds	r3, #1
 80083c4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d802      	bhi.n	80083d6 <SD_PowerON+0xe6>
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d0cc      	beq.n	8008370 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80083dc:	4293      	cmp	r3, r2
 80083de:	d902      	bls.n	80083e6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80083e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80083e4:	e00c      	b.n	8008400 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d003      	beq.n	80083f8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	645a      	str	r2, [r3, #68]	@ 0x44
 80083f6:	e002      	b.n	80083fe <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3718      	adds	r7, #24
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	c1100000 	.word	0xc1100000

0800840c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d102      	bne.n	8008422 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800841c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008420:	e018      	b.n	8008454 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800842a:	041b      	lsls	r3, r3, #16
 800842c:	4619      	mov	r1, r3
 800842e:	4610      	mov	r0, r2
 8008430:	f002 fa88 	bl	800a944 <SDMMC_CmdSendStatus>
 8008434:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d001      	beq.n	8008440 <SD_SendStatus+0x34>
  {
    return errorstate;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	e009      	b.n	8008454 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2100      	movs	r1, #0
 8008446:	4618      	mov	r0, r3
 8008448:	f002 f82a 	bl	800a4a0 <SDIO_GetResponse>
 800844c:	4602      	mov	r2, r0
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b086      	sub	sp, #24
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008464:	2300      	movs	r3, #0
 8008466:	60fb      	str	r3, [r7, #12]
 8008468:	2300      	movs	r3, #0
 800846a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2100      	movs	r1, #0
 8008472:	4618      	mov	r0, r3
 8008474:	f002 f814 	bl	800a4a0 <SDIO_GetResponse>
 8008478:	4603      	mov	r3, r0
 800847a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800847e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008482:	d102      	bne.n	800848a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008484:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008488:	e02f      	b.n	80084ea <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800848a:	f107 030c 	add.w	r3, r7, #12
 800848e:	4619      	mov	r1, r3
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 f879 	bl	8008588 <SD_FindSCR>
 8008496:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	e023      	b.n	80084ea <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d01c      	beq.n	80084e6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084b4:	041b      	lsls	r3, r3, #16
 80084b6:	4619      	mov	r1, r3
 80084b8:	4610      	mov	r0, r2
 80084ba:	f002 f95d 	bl	800a778 <SDMMC_CmdAppCommand>
 80084be:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d001      	beq.n	80084ca <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	e00f      	b.n	80084ea <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2102      	movs	r1, #2
 80084d0:	4618      	mov	r0, r3
 80084d2:	f002 f996 	bl	800a802 <SDMMC_CmdBusWidth>
 80084d6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d001      	beq.n	80084e2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	e003      	b.n	80084ea <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80084e2:	2300      	movs	r3, #0
 80084e4:	e001      	b.n	80084ea <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80084e6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3718      	adds	r7, #24
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b086      	sub	sp, #24
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80084fa:	2300      	movs	r3, #0
 80084fc:	60fb      	str	r3, [r7, #12]
 80084fe:	2300      	movs	r3, #0
 8008500:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2100      	movs	r1, #0
 8008508:	4618      	mov	r0, r3
 800850a:	f001 ffc9 	bl	800a4a0 <SDIO_GetResponse>
 800850e:	4603      	mov	r3, r0
 8008510:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008514:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008518:	d102      	bne.n	8008520 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800851a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800851e:	e02f      	b.n	8008580 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008520:	f107 030c 	add.w	r3, r7, #12
 8008524:	4619      	mov	r1, r3
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 f82e 	bl	8008588 <SD_FindSCR>
 800852c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d001      	beq.n	8008538 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	e023      	b.n	8008580 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800853e:	2b00      	cmp	r3, #0
 8008540:	d01c      	beq.n	800857c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800854a:	041b      	lsls	r3, r3, #16
 800854c:	4619      	mov	r1, r3
 800854e:	4610      	mov	r0, r2
 8008550:	f002 f912 	bl	800a778 <SDMMC_CmdAppCommand>
 8008554:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d001      	beq.n	8008560 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	e00f      	b.n	8008580 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2100      	movs	r1, #0
 8008566:	4618      	mov	r0, r3
 8008568:	f002 f94b 	bl	800a802 <SDMMC_CmdBusWidth>
 800856c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d001      	beq.n	8008578 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	e003      	b.n	8008580 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008578:	2300      	movs	r3, #0
 800857a:	e001      	b.n	8008580 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800857c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008580:	4618      	mov	r0, r3
 8008582:	3718      	adds	r7, #24
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008588:	b590      	push	{r4, r7, lr}
 800858a:	b08f      	sub	sp, #60	@ 0x3c
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008592:	f7fb fef3 	bl	800437c <HAL_GetTick>
 8008596:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8008598:	2300      	movs	r3, #0
 800859a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800859c:	2300      	movs	r3, #0
 800859e:	60bb      	str	r3, [r7, #8]
 80085a0:	2300      	movs	r3, #0
 80085a2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2108      	movs	r1, #8
 80085ae:	4618      	mov	r0, r3
 80085b0:	f001 ffb5 	bl	800a51e <SDMMC_CmdBlockLength>
 80085b4:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80085b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d001      	beq.n	80085c0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80085bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085be:	e0b9      	b.n	8008734 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085c8:	041b      	lsls	r3, r3, #16
 80085ca:	4619      	mov	r1, r3
 80085cc:	4610      	mov	r0, r2
 80085ce:	f002 f8d3 	bl	800a778 <SDMMC_CmdAppCommand>
 80085d2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80085d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d001      	beq.n	80085de <SD_FindSCR+0x56>
  {
    return errorstate;
 80085da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085dc:	e0aa      	b.n	8008734 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80085de:	f04f 33ff 	mov.w	r3, #4294967295
 80085e2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80085e4:	2308      	movs	r3, #8
 80085e6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80085e8:	2330      	movs	r3, #48	@ 0x30
 80085ea:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80085ec:	2302      	movs	r3, #2
 80085ee:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80085f0:	2300      	movs	r3, #0
 80085f2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80085f4:	2301      	movs	r3, #1
 80085f6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f107 0210 	add.w	r2, r7, #16
 8008600:	4611      	mov	r1, r2
 8008602:	4618      	mov	r0, r3
 8008604:	f001 ff5f 	bl	800a4c6 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4618      	mov	r0, r3
 800860e:	f002 f91a 	bl	800a846 <SDMMC_CmdSendSCR>
 8008612:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008616:	2b00      	cmp	r3, #0
 8008618:	d02a      	beq.n	8008670 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800861a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800861c:	e08a      	b.n	8008734 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008624:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00f      	beq.n	800864c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6819      	ldr	r1, [r3, #0]
 8008630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	f107 0208 	add.w	r2, r7, #8
 8008638:	18d4      	adds	r4, r2, r3
 800863a:	4608      	mov	r0, r1
 800863c:	f001 febf 	bl	800a3be <SDIO_ReadFIFO>
 8008640:	4603      	mov	r3, r0
 8008642:	6023      	str	r3, [r4, #0]
      index++;
 8008644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008646:	3301      	adds	r3, #1
 8008648:	637b      	str	r3, [r7, #52]	@ 0x34
 800864a:	e006      	b.n	800865a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008652:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d012      	beq.n	8008680 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800865a:	f7fb fe8f 	bl	800437c <HAL_GetTick>
 800865e:	4602      	mov	r2, r0
 8008660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008668:	d102      	bne.n	8008670 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800866a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800866e:	e061      	b.n	8008734 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008676:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800867a:	2b00      	cmp	r3, #0
 800867c:	d0cf      	beq.n	800861e <SD_FindSCR+0x96>
 800867e:	e000      	b.n	8008682 <SD_FindSCR+0xfa>
      break;
 8008680:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008688:	f003 0308 	and.w	r3, r3, #8
 800868c:	2b00      	cmp	r3, #0
 800868e:	d106      	bne.n	800869e <SD_FindSCR+0x116>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008696:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800869a:	2b00      	cmp	r3, #0
 800869c:	d005      	beq.n	80086aa <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2208      	movs	r2, #8
 80086a4:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80086a6:	2308      	movs	r3, #8
 80086a8:	e044      	b.n	8008734 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086b0:	f003 0302 	and.w	r3, r3, #2
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d005      	beq.n	80086c4 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2202      	movs	r2, #2
 80086be:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80086c0:	2302      	movs	r3, #2
 80086c2:	e037      	b.n	8008734 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086ca:	f003 0320 	and.w	r3, r3, #32
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d005      	beq.n	80086de <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2220      	movs	r2, #32
 80086d8:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80086da:	2320      	movs	r3, #32
 80086dc:	e02a      	b.n	8008734 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f240 523a 	movw	r2, #1338	@ 0x53a
 80086e6:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	061a      	lsls	r2, r3, #24
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	021b      	lsls	r3, r3, #8
 80086f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80086f4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	0a1b      	lsrs	r3, r3, #8
 80086fa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80086fe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	0e1b      	lsrs	r3, r3, #24
 8008704:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008708:	601a      	str	r2, [r3, #0]
    scr++;
 800870a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800870c:	3304      	adds	r3, #4
 800870e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	061a      	lsls	r2, r3, #24
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	021b      	lsls	r3, r3, #8
 8008718:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800871c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	0a1b      	lsrs	r3, r3, #8
 8008722:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008726:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	0e1b      	lsrs	r3, r3, #24
 800872c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800872e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008730:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	373c      	adds	r7, #60	@ 0x3c
 8008738:	46bd      	mov	sp, r7
 800873a:	bd90      	pop	{r4, r7, pc}

0800873c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b086      	sub	sp, #24
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008748:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800874e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d03f      	beq.n	80087d6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008756:	2300      	movs	r3, #0
 8008758:	617b      	str	r3, [r7, #20]
 800875a:	e033      	b.n	80087c4 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4618      	mov	r0, r3
 8008762:	f001 fe2c 	bl	800a3be <SDIO_ReadFIFO>
 8008766:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	b2da      	uxtb	r2, r3
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	3301      	adds	r3, #1
 8008774:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	3b01      	subs	r3, #1
 800877a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	0a1b      	lsrs	r3, r3, #8
 8008780:	b2da      	uxtb	r2, r3
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	3301      	adds	r3, #1
 800878a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	3b01      	subs	r3, #1
 8008790:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	0c1b      	lsrs	r3, r3, #16
 8008796:	b2da      	uxtb	r2, r3
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	3301      	adds	r3, #1
 80087a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	3b01      	subs	r3, #1
 80087a6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	0e1b      	lsrs	r3, r3, #24
 80087ac:	b2da      	uxtb	r2, r3
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	3301      	adds	r3, #1
 80087b6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	3b01      	subs	r3, #1
 80087bc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	3301      	adds	r3, #1
 80087c2:	617b      	str	r3, [r7, #20]
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	2b07      	cmp	r3, #7
 80087c8:	d9c8      	bls.n	800875c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	693a      	ldr	r2, [r7, #16]
 80087d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 80087d6:	bf00      	nop
 80087d8:	3718      	adds	r7, #24
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b086      	sub	sp, #24
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6a1b      	ldr	r3, [r3, #32]
 80087ea:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d043      	beq.n	8008880 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80087f8:	2300      	movs	r3, #0
 80087fa:	617b      	str	r3, [r7, #20]
 80087fc:	e037      	b.n	800886e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	3301      	adds	r3, #1
 8008808:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	3b01      	subs	r3, #1
 800880e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	021a      	lsls	r2, r3, #8
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	4313      	orrs	r3, r2
 800881a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	3301      	adds	r3, #1
 8008820:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	3b01      	subs	r3, #1
 8008826:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	041a      	lsls	r2, r3, #16
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	4313      	orrs	r3, r2
 8008832:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	3301      	adds	r3, #1
 8008838:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	3b01      	subs	r3, #1
 800883e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	061a      	lsls	r2, r3, #24
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	4313      	orrs	r3, r2
 800884a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	3301      	adds	r3, #1
 8008850:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	3b01      	subs	r3, #1
 8008856:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f107 0208 	add.w	r2, r7, #8
 8008860:	4611      	mov	r1, r2
 8008862:	4618      	mov	r0, r3
 8008864:	f001 fdb8 	bl	800a3d8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	3301      	adds	r3, #1
 800886c:	617b      	str	r3, [r7, #20]
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	2b07      	cmp	r3, #7
 8008872:	d9c4      	bls.n	80087fe <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8008880:	bf00      	nop
 8008882:	3718      	adds	r7, #24
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b01      	cmp	r3, #1
 800889a:	d001      	beq.n	80088a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	e03c      	b.n	800891a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2202      	movs	r2, #2
 80088a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a1e      	ldr	r2, [pc, #120]	@ (8008928 <HAL_TIM_Base_Start+0xa0>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d018      	beq.n	80088e4 <HAL_TIM_Base_Start+0x5c>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088ba:	d013      	beq.n	80088e4 <HAL_TIM_Base_Start+0x5c>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a1a      	ldr	r2, [pc, #104]	@ (800892c <HAL_TIM_Base_Start+0xa4>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d00e      	beq.n	80088e4 <HAL_TIM_Base_Start+0x5c>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a19      	ldr	r2, [pc, #100]	@ (8008930 <HAL_TIM_Base_Start+0xa8>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d009      	beq.n	80088e4 <HAL_TIM_Base_Start+0x5c>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a17      	ldr	r2, [pc, #92]	@ (8008934 <HAL_TIM_Base_Start+0xac>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d004      	beq.n	80088e4 <HAL_TIM_Base_Start+0x5c>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a16      	ldr	r2, [pc, #88]	@ (8008938 <HAL_TIM_Base_Start+0xb0>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d111      	bne.n	8008908 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	f003 0307 	and.w	r3, r3, #7
 80088ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2b06      	cmp	r3, #6
 80088f4:	d010      	beq.n	8008918 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f042 0201 	orr.w	r2, r2, #1
 8008904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008906:	e007      	b.n	8008918 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f042 0201 	orr.w	r2, r2, #1
 8008916:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	3714      	adds	r7, #20
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	40010000 	.word	0x40010000
 800892c:	40000400 	.word	0x40000400
 8008930:	40000800 	.word	0x40000800
 8008934:	40000c00 	.word	0x40000c00
 8008938:	40014000 	.word	0x40014000

0800893c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d101      	bne.n	800894e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e041      	b.n	80089d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008954:	b2db      	uxtb	r3, r3
 8008956:	2b00      	cmp	r3, #0
 8008958:	d106      	bne.n	8008968 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7fb f9f4 	bl	8003d50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2202      	movs	r2, #2
 800896c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	3304      	adds	r3, #4
 8008978:	4619      	mov	r1, r3
 800897a:	4610      	mov	r0, r2
 800897c:	f000 f9a0 	bl	8008cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2201      	movs	r2, #1
 800898c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2201      	movs	r2, #1
 80089a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3708      	adds	r7, #8
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
	...

080089dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d109      	bne.n	8008a00 <HAL_TIM_PWM_Start+0x24>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	bf14      	ite	ne
 80089f8:	2301      	movne	r3, #1
 80089fa:	2300      	moveq	r3, #0
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	e022      	b.n	8008a46 <HAL_TIM_PWM_Start+0x6a>
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	2b04      	cmp	r3, #4
 8008a04:	d109      	bne.n	8008a1a <HAL_TIM_PWM_Start+0x3e>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	bf14      	ite	ne
 8008a12:	2301      	movne	r3, #1
 8008a14:	2300      	moveq	r3, #0
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	e015      	b.n	8008a46 <HAL_TIM_PWM_Start+0x6a>
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	2b08      	cmp	r3, #8
 8008a1e:	d109      	bne.n	8008a34 <HAL_TIM_PWM_Start+0x58>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	bf14      	ite	ne
 8008a2c:	2301      	movne	r3, #1
 8008a2e:	2300      	moveq	r3, #0
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	e008      	b.n	8008a46 <HAL_TIM_PWM_Start+0x6a>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	bf14      	ite	ne
 8008a40:	2301      	movne	r3, #1
 8008a42:	2300      	moveq	r3, #0
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d001      	beq.n	8008a4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e068      	b.n	8008b20 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d104      	bne.n	8008a5e <HAL_TIM_PWM_Start+0x82>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2202      	movs	r2, #2
 8008a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a5c:	e013      	b.n	8008a86 <HAL_TIM_PWM_Start+0xaa>
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	2b04      	cmp	r3, #4
 8008a62:	d104      	bne.n	8008a6e <HAL_TIM_PWM_Start+0x92>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2202      	movs	r2, #2
 8008a68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a6c:	e00b      	b.n	8008a86 <HAL_TIM_PWM_Start+0xaa>
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	2b08      	cmp	r3, #8
 8008a72:	d104      	bne.n	8008a7e <HAL_TIM_PWM_Start+0xa2>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2202      	movs	r2, #2
 8008a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a7c:	e003      	b.n	8008a86 <HAL_TIM_PWM_Start+0xaa>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2202      	movs	r2, #2
 8008a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	6839      	ldr	r1, [r7, #0]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 fb2e 	bl	80090f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a23      	ldr	r2, [pc, #140]	@ (8008b28 <HAL_TIM_PWM_Start+0x14c>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d107      	bne.n	8008aae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008aac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a1d      	ldr	r2, [pc, #116]	@ (8008b28 <HAL_TIM_PWM_Start+0x14c>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d018      	beq.n	8008aea <HAL_TIM_PWM_Start+0x10e>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ac0:	d013      	beq.n	8008aea <HAL_TIM_PWM_Start+0x10e>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a19      	ldr	r2, [pc, #100]	@ (8008b2c <HAL_TIM_PWM_Start+0x150>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d00e      	beq.n	8008aea <HAL_TIM_PWM_Start+0x10e>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a17      	ldr	r2, [pc, #92]	@ (8008b30 <HAL_TIM_PWM_Start+0x154>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d009      	beq.n	8008aea <HAL_TIM_PWM_Start+0x10e>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a16      	ldr	r2, [pc, #88]	@ (8008b34 <HAL_TIM_PWM_Start+0x158>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d004      	beq.n	8008aea <HAL_TIM_PWM_Start+0x10e>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a14      	ldr	r2, [pc, #80]	@ (8008b38 <HAL_TIM_PWM_Start+0x15c>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d111      	bne.n	8008b0e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	f003 0307 	and.w	r3, r3, #7
 8008af4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2b06      	cmp	r3, #6
 8008afa:	d010      	beq.n	8008b1e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f042 0201 	orr.w	r2, r2, #1
 8008b0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b0c:	e007      	b.n	8008b1e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f042 0201 	orr.w	r2, r2, #1
 8008b1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	40010000 	.word	0x40010000
 8008b2c:	40000400 	.word	0x40000400
 8008b30:	40000800 	.word	0x40000800
 8008b34:	40000c00 	.word	0x40000c00
 8008b38:	40014000 	.word	0x40014000

08008b3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b086      	sub	sp, #24
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d101      	bne.n	8008b5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008b56:	2302      	movs	r3, #2
 8008b58:	e0ae      	b.n	8008cb8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2b0c      	cmp	r3, #12
 8008b66:	f200 809f 	bhi.w	8008ca8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8008b70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b70:	08008ba5 	.word	0x08008ba5
 8008b74:	08008ca9 	.word	0x08008ca9
 8008b78:	08008ca9 	.word	0x08008ca9
 8008b7c:	08008ca9 	.word	0x08008ca9
 8008b80:	08008be5 	.word	0x08008be5
 8008b84:	08008ca9 	.word	0x08008ca9
 8008b88:	08008ca9 	.word	0x08008ca9
 8008b8c:	08008ca9 	.word	0x08008ca9
 8008b90:	08008c27 	.word	0x08008c27
 8008b94:	08008ca9 	.word	0x08008ca9
 8008b98:	08008ca9 	.word	0x08008ca9
 8008b9c:	08008ca9 	.word	0x08008ca9
 8008ba0:	08008c67 	.word	0x08008c67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68b9      	ldr	r1, [r7, #8]
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 f914 	bl	8008dd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	699a      	ldr	r2, [r3, #24]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f042 0208 	orr.w	r2, r2, #8
 8008bbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	699a      	ldr	r2, [r3, #24]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f022 0204 	bic.w	r2, r2, #4
 8008bce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	6999      	ldr	r1, [r3, #24]
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	691a      	ldr	r2, [r3, #16]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	430a      	orrs	r2, r1
 8008be0:	619a      	str	r2, [r3, #24]
      break;
 8008be2:	e064      	b.n	8008cae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68b9      	ldr	r1, [r7, #8]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f000 f95a 	bl	8008ea4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	699a      	ldr	r2, [r3, #24]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008bfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	699a      	ldr	r2, [r3, #24]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6999      	ldr	r1, [r3, #24]
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	021a      	lsls	r2, r3, #8
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	430a      	orrs	r2, r1
 8008c22:	619a      	str	r2, [r3, #24]
      break;
 8008c24:	e043      	b.n	8008cae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68b9      	ldr	r1, [r7, #8]
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f000 f9a5 	bl	8008f7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	69da      	ldr	r2, [r3, #28]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f042 0208 	orr.w	r2, r2, #8
 8008c40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	69da      	ldr	r2, [r3, #28]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f022 0204 	bic.w	r2, r2, #4
 8008c50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	69d9      	ldr	r1, [r3, #28]
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	691a      	ldr	r2, [r3, #16]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	430a      	orrs	r2, r1
 8008c62:	61da      	str	r2, [r3, #28]
      break;
 8008c64:	e023      	b.n	8008cae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	68b9      	ldr	r1, [r7, #8]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f000 f9ef 	bl	8009050 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	69da      	ldr	r2, [r3, #28]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	69da      	ldr	r2, [r3, #28]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	69d9      	ldr	r1, [r3, #28]
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	021a      	lsls	r2, r3, #8
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	430a      	orrs	r2, r1
 8008ca4:	61da      	str	r2, [r3, #28]
      break;
 8008ca6:	e002      	b.n	8008cae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	75fb      	strb	r3, [r7, #23]
      break;
 8008cac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3718      	adds	r7, #24
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a3a      	ldr	r2, [pc, #232]	@ (8008dbc <TIM_Base_SetConfig+0xfc>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d00f      	beq.n	8008cf8 <TIM_Base_SetConfig+0x38>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cde:	d00b      	beq.n	8008cf8 <TIM_Base_SetConfig+0x38>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a37      	ldr	r2, [pc, #220]	@ (8008dc0 <TIM_Base_SetConfig+0x100>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d007      	beq.n	8008cf8 <TIM_Base_SetConfig+0x38>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a36      	ldr	r2, [pc, #216]	@ (8008dc4 <TIM_Base_SetConfig+0x104>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d003      	beq.n	8008cf8 <TIM_Base_SetConfig+0x38>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a35      	ldr	r2, [pc, #212]	@ (8008dc8 <TIM_Base_SetConfig+0x108>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d108      	bne.n	8008d0a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	68fa      	ldr	r2, [r7, #12]
 8008d06:	4313      	orrs	r3, r2
 8008d08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a2b      	ldr	r2, [pc, #172]	@ (8008dbc <TIM_Base_SetConfig+0xfc>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d01b      	beq.n	8008d4a <TIM_Base_SetConfig+0x8a>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d18:	d017      	beq.n	8008d4a <TIM_Base_SetConfig+0x8a>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a28      	ldr	r2, [pc, #160]	@ (8008dc0 <TIM_Base_SetConfig+0x100>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d013      	beq.n	8008d4a <TIM_Base_SetConfig+0x8a>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a27      	ldr	r2, [pc, #156]	@ (8008dc4 <TIM_Base_SetConfig+0x104>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d00f      	beq.n	8008d4a <TIM_Base_SetConfig+0x8a>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a26      	ldr	r2, [pc, #152]	@ (8008dc8 <TIM_Base_SetConfig+0x108>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d00b      	beq.n	8008d4a <TIM_Base_SetConfig+0x8a>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a25      	ldr	r2, [pc, #148]	@ (8008dcc <TIM_Base_SetConfig+0x10c>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d007      	beq.n	8008d4a <TIM_Base_SetConfig+0x8a>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a24      	ldr	r2, [pc, #144]	@ (8008dd0 <TIM_Base_SetConfig+0x110>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d003      	beq.n	8008d4a <TIM_Base_SetConfig+0x8a>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a23      	ldr	r2, [pc, #140]	@ (8008dd4 <TIM_Base_SetConfig+0x114>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d108      	bne.n	8008d5c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	695b      	ldr	r3, [r3, #20]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	689a      	ldr	r2, [r3, #8]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a0e      	ldr	r2, [pc, #56]	@ (8008dbc <TIM_Base_SetConfig+0xfc>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d103      	bne.n	8008d90 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	691a      	ldr	r2, [r3, #16]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	f003 0301 	and.w	r3, r3, #1
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d105      	bne.n	8008dae <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	f023 0201 	bic.w	r2, r3, #1
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	611a      	str	r2, [r3, #16]
  }
}
 8008dae:	bf00      	nop
 8008db0:	3714      	adds	r7, #20
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	40010000 	.word	0x40010000
 8008dc0:	40000400 	.word	0x40000400
 8008dc4:	40000800 	.word	0x40000800
 8008dc8:	40000c00 	.word	0x40000c00
 8008dcc:	40014000 	.word	0x40014000
 8008dd0:	40014400 	.word	0x40014400
 8008dd4:	40014800 	.word	0x40014800

08008dd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b087      	sub	sp, #28
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6a1b      	ldr	r3, [r3, #32]
 8008de6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6a1b      	ldr	r3, [r3, #32]
 8008dec:	f023 0201 	bic.w	r2, r3, #1
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f023 0303 	bic.w	r3, r3, #3
 8008e0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	f023 0302 	bic.w	r3, r3, #2
 8008e20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	697a      	ldr	r2, [r7, #20]
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a1c      	ldr	r2, [pc, #112]	@ (8008ea0 <TIM_OC1_SetConfig+0xc8>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d10c      	bne.n	8008e4e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	f023 0308 	bic.w	r3, r3, #8
 8008e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	697a      	ldr	r2, [r7, #20]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	f023 0304 	bic.w	r3, r3, #4
 8008e4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4a13      	ldr	r2, [pc, #76]	@ (8008ea0 <TIM_OC1_SetConfig+0xc8>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d111      	bne.n	8008e7a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008e64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	695b      	ldr	r3, [r3, #20]
 8008e6a:	693a      	ldr	r2, [r7, #16]
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	699b      	ldr	r3, [r3, #24]
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	4313      	orrs	r3, r2
 8008e78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	693a      	ldr	r2, [r7, #16]
 8008e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	68fa      	ldr	r2, [r7, #12]
 8008e84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	685a      	ldr	r2, [r3, #4]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	697a      	ldr	r2, [r7, #20]
 8008e92:	621a      	str	r2, [r3, #32]
}
 8008e94:	bf00      	nop
 8008e96:	371c      	adds	r7, #28
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr
 8008ea0:	40010000 	.word	0x40010000

08008ea4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b087      	sub	sp, #28
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a1b      	ldr	r3, [r3, #32]
 8008eb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a1b      	ldr	r3, [r3, #32]
 8008eb8:	f023 0210 	bic.w	r2, r3, #16
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	699b      	ldr	r3, [r3, #24]
 8008eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008eda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	021b      	lsls	r3, r3, #8
 8008ee2:	68fa      	ldr	r2, [r7, #12]
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	f023 0320 	bic.w	r3, r3, #32
 8008eee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	011b      	lsls	r3, r3, #4
 8008ef6:	697a      	ldr	r2, [r7, #20]
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4a1e      	ldr	r2, [pc, #120]	@ (8008f78 <TIM_OC2_SetConfig+0xd4>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d10d      	bne.n	8008f20 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	011b      	lsls	r3, r3, #4
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	4313      	orrs	r3, r2
 8008f16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4a15      	ldr	r2, [pc, #84]	@ (8008f78 <TIM_OC2_SetConfig+0xd4>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d113      	bne.n	8008f50 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008f2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	695b      	ldr	r3, [r3, #20]
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	693a      	ldr	r2, [r7, #16]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	699b      	ldr	r3, [r3, #24]
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	693a      	ldr	r2, [r7, #16]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	693a      	ldr	r2, [r7, #16]
 8008f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	685a      	ldr	r2, [r3, #4]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	697a      	ldr	r2, [r7, #20]
 8008f68:	621a      	str	r2, [r3, #32]
}
 8008f6a:	bf00      	nop
 8008f6c:	371c      	adds	r7, #28
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	40010000 	.word	0x40010000

08008f7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b087      	sub	sp, #28
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a1b      	ldr	r3, [r3, #32]
 8008f8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6a1b      	ldr	r3, [r3, #32]
 8008f90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	69db      	ldr	r3, [r3, #28]
 8008fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f023 0303 	bic.w	r3, r3, #3
 8008fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008fc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	021b      	lsls	r3, r3, #8
 8008fcc:	697a      	ldr	r2, [r7, #20]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800904c <TIM_OC3_SetConfig+0xd0>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d10d      	bne.n	8008ff6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008fe0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	021b      	lsls	r3, r3, #8
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ff4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4a14      	ldr	r2, [pc, #80]	@ (800904c <TIM_OC3_SetConfig+0xd0>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d113      	bne.n	8009026 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800900c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	695b      	ldr	r3, [r3, #20]
 8009012:	011b      	lsls	r3, r3, #4
 8009014:	693a      	ldr	r2, [r7, #16]
 8009016:	4313      	orrs	r3, r2
 8009018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	699b      	ldr	r3, [r3, #24]
 800901e:	011b      	lsls	r3, r3, #4
 8009020:	693a      	ldr	r2, [r7, #16]
 8009022:	4313      	orrs	r3, r2
 8009024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	693a      	ldr	r2, [r7, #16]
 800902a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	685a      	ldr	r2, [r3, #4]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	697a      	ldr	r2, [r7, #20]
 800903e:	621a      	str	r2, [r3, #32]
}
 8009040:	bf00      	nop
 8009042:	371c      	adds	r7, #28
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr
 800904c:	40010000 	.word	0x40010000

08009050 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009050:	b480      	push	{r7}
 8009052:	b087      	sub	sp, #28
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a1b      	ldr	r3, [r3, #32]
 800905e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6a1b      	ldr	r3, [r3, #32]
 8009064:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	69db      	ldr	r3, [r3, #28]
 8009076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800907e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	021b      	lsls	r3, r3, #8
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	4313      	orrs	r3, r2
 8009092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800909a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	031b      	lsls	r3, r3, #12
 80090a2:	693a      	ldr	r2, [r7, #16]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a10      	ldr	r2, [pc, #64]	@ (80090ec <TIM_OC4_SetConfig+0x9c>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d109      	bne.n	80090c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	695b      	ldr	r3, [r3, #20]
 80090bc:	019b      	lsls	r3, r3, #6
 80090be:	697a      	ldr	r2, [r7, #20]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	697a      	ldr	r2, [r7, #20]
 80090c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	685a      	ldr	r2, [r3, #4]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	693a      	ldr	r2, [r7, #16]
 80090dc:	621a      	str	r2, [r3, #32]
}
 80090de:	bf00      	nop
 80090e0:	371c      	adds	r7, #28
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	40010000 	.word	0x40010000

080090f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b087      	sub	sp, #28
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	f003 031f 	and.w	r3, r3, #31
 8009102:	2201      	movs	r2, #1
 8009104:	fa02 f303 	lsl.w	r3, r2, r3
 8009108:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	6a1a      	ldr	r2, [r3, #32]
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	43db      	mvns	r3, r3
 8009112:	401a      	ands	r2, r3
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6a1a      	ldr	r2, [r3, #32]
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	f003 031f 	and.w	r3, r3, #31
 8009122:	6879      	ldr	r1, [r7, #4]
 8009124:	fa01 f303 	lsl.w	r3, r1, r3
 8009128:	431a      	orrs	r2, r3
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	621a      	str	r2, [r3, #32]
}
 800912e:	bf00      	nop
 8009130:	371c      	adds	r7, #28
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr
	...

0800913c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800914c:	2b01      	cmp	r3, #1
 800914e:	d101      	bne.n	8009154 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009150:	2302      	movs	r3, #2
 8009152:	e050      	b.n	80091f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2202      	movs	r2, #2
 8009160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800917a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	4313      	orrs	r3, r2
 8009184:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a1c      	ldr	r2, [pc, #112]	@ (8009204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d018      	beq.n	80091ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091a0:	d013      	beq.n	80091ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a18      	ldr	r2, [pc, #96]	@ (8009208 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d00e      	beq.n	80091ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a16      	ldr	r2, [pc, #88]	@ (800920c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d009      	beq.n	80091ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a15      	ldr	r2, [pc, #84]	@ (8009210 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d004      	beq.n	80091ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a13      	ldr	r2, [pc, #76]	@ (8009214 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d10c      	bne.n	80091e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	4313      	orrs	r3, r2
 80091da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68ba      	ldr	r2, [r7, #8]
 80091e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80091f4:	2300      	movs	r3, #0
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3714      	adds	r7, #20
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	40010000 	.word	0x40010000
 8009208:	40000400 	.word	0x40000400
 800920c:	40000800 	.word	0x40000800
 8009210:	40000c00 	.word	0x40000c00
 8009214:	40014000 	.word	0x40014000

08009218 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009222:	2300      	movs	r3, #0
 8009224:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800922c:	2b01      	cmp	r3, #1
 800922e:	d101      	bne.n	8009234 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009230:	2302      	movs	r3, #2
 8009232:	e03d      	b.n	80092b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2201      	movs	r2, #1
 8009238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	4313      	orrs	r3, r2
 8009248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	4313      	orrs	r3, r2
 8009256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	4313      	orrs	r3, r2
 8009264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4313      	orrs	r3, r2
 8009272:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	4313      	orrs	r3, r2
 8009280:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	695b      	ldr	r3, [r3, #20]
 800928c:	4313      	orrs	r3, r2
 800928e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	69db      	ldr	r3, [r3, #28]
 800929a:	4313      	orrs	r3, r2
 800929c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3714      	adds	r7, #20
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d101      	bne.n	80092ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e042      	b.n	8009354 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d106      	bne.n	80092e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f7fa fe06 	bl	8003ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2224      	movs	r2, #36	@ 0x24
 80092ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68da      	ldr	r2, [r3, #12]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80092fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 fdbd 	bl	8009e80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	691a      	ldr	r2, [r3, #16]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009314:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	695a      	ldr	r2, [r3, #20]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009324:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68da      	ldr	r2, [r3, #12]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009334:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2220      	movs	r2, #32
 8009340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2220      	movs	r2, #32
 8009348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009352:	2300      	movs	r3, #0
}
 8009354:	4618      	mov	r0, r3
 8009356:	3708      	adds	r7, #8
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b08a      	sub	sp, #40	@ 0x28
 8009360:	af02      	add	r7, sp, #8
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	603b      	str	r3, [r7, #0]
 8009368:	4613      	mov	r3, r2
 800936a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800936c:	2300      	movs	r3, #0
 800936e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009376:	b2db      	uxtb	r3, r3
 8009378:	2b20      	cmp	r3, #32
 800937a:	d175      	bne.n	8009468 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d002      	beq.n	8009388 <HAL_UART_Transmit+0x2c>
 8009382:	88fb      	ldrh	r3, [r7, #6]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d101      	bne.n	800938c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009388:	2301      	movs	r3, #1
 800938a:	e06e      	b.n	800946a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2200      	movs	r2, #0
 8009390:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2221      	movs	r2, #33	@ 0x21
 8009396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800939a:	f7fa ffef 	bl	800437c <HAL_GetTick>
 800939e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	88fa      	ldrh	r2, [r7, #6]
 80093a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	88fa      	ldrh	r2, [r7, #6]
 80093aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093b4:	d108      	bne.n	80093c8 <HAL_UART_Transmit+0x6c>
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d104      	bne.n	80093c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80093be:	2300      	movs	r3, #0
 80093c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	61bb      	str	r3, [r7, #24]
 80093c6:	e003      	b.n	80093d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80093cc:	2300      	movs	r3, #0
 80093ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80093d0:	e02e      	b.n	8009430 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	9300      	str	r3, [sp, #0]
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	2200      	movs	r2, #0
 80093da:	2180      	movs	r1, #128	@ 0x80
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	f000 fb1f 	bl	8009a20 <UART_WaitOnFlagUntilTimeout>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d005      	beq.n	80093f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2220      	movs	r2, #32
 80093ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80093f0:	2303      	movs	r3, #3
 80093f2:	e03a      	b.n	800946a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d10b      	bne.n	8009412 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	881b      	ldrh	r3, [r3, #0]
 80093fe:	461a      	mov	r2, r3
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009408:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	3302      	adds	r3, #2
 800940e:	61bb      	str	r3, [r7, #24]
 8009410:	e007      	b.n	8009422 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	781a      	ldrb	r2, [r3, #0]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	3301      	adds	r3, #1
 8009420:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009426:	b29b      	uxth	r3, r3
 8009428:	3b01      	subs	r3, #1
 800942a:	b29a      	uxth	r2, r3
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009434:	b29b      	uxth	r3, r3
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1cb      	bne.n	80093d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	9300      	str	r3, [sp, #0]
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	2200      	movs	r2, #0
 8009442:	2140      	movs	r1, #64	@ 0x40
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f000 faeb 	bl	8009a20 <UART_WaitOnFlagUntilTimeout>
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d005      	beq.n	800945c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2220      	movs	r2, #32
 8009454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009458:	2303      	movs	r3, #3
 800945a:	e006      	b.n	800946a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2220      	movs	r2, #32
 8009460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009464:	2300      	movs	r3, #0
 8009466:	e000      	b.n	800946a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009468:	2302      	movs	r3, #2
  }
}
 800946a:	4618      	mov	r0, r3
 800946c:	3720      	adds	r7, #32
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b084      	sub	sp, #16
 8009476:	af00      	add	r7, sp, #0
 8009478:	60f8      	str	r0, [r7, #12]
 800947a:	60b9      	str	r1, [r7, #8]
 800947c:	4613      	mov	r3, r2
 800947e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009486:	b2db      	uxtb	r3, r3
 8009488:	2b20      	cmp	r3, #32
 800948a:	d112      	bne.n	80094b2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d002      	beq.n	8009498 <HAL_UART_Receive_IT+0x26>
 8009492:	88fb      	ldrh	r3, [r7, #6]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d101      	bne.n	800949c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	e00b      	b.n	80094b4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2200      	movs	r2, #0
 80094a0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80094a2:	88fb      	ldrh	r3, [r7, #6]
 80094a4:	461a      	mov	r2, r3
 80094a6:	68b9      	ldr	r1, [r7, #8]
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	f000 fb12 	bl	8009ad2 <UART_Start_Receive_IT>
 80094ae:	4603      	mov	r3, r0
 80094b0:	e000      	b.n	80094b4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80094b2:	2302      	movs	r3, #2
  }
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b0ba      	sub	sp, #232	@ 0xe8
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80094e2:	2300      	movs	r3, #0
 80094e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80094e8:	2300      	movs	r3, #0
 80094ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80094ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094f2:	f003 030f 	and.w	r3, r3, #15
 80094f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80094fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10f      	bne.n	8009522 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009506:	f003 0320 	and.w	r3, r3, #32
 800950a:	2b00      	cmp	r3, #0
 800950c:	d009      	beq.n	8009522 <HAL_UART_IRQHandler+0x66>
 800950e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009512:	f003 0320 	and.w	r3, r3, #32
 8009516:	2b00      	cmp	r3, #0
 8009518:	d003      	beq.n	8009522 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 fbf2 	bl	8009d04 <UART_Receive_IT>
      return;
 8009520:	e25b      	b.n	80099da <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009522:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009526:	2b00      	cmp	r3, #0
 8009528:	f000 80de 	beq.w	80096e8 <HAL_UART_IRQHandler+0x22c>
 800952c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009530:	f003 0301 	and.w	r3, r3, #1
 8009534:	2b00      	cmp	r3, #0
 8009536:	d106      	bne.n	8009546 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800953c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009540:	2b00      	cmp	r3, #0
 8009542:	f000 80d1 	beq.w	80096e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800954a:	f003 0301 	and.w	r3, r3, #1
 800954e:	2b00      	cmp	r3, #0
 8009550:	d00b      	beq.n	800956a <HAL_UART_IRQHandler+0xae>
 8009552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800955a:	2b00      	cmp	r3, #0
 800955c:	d005      	beq.n	800956a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009562:	f043 0201 	orr.w	r2, r3, #1
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800956a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800956e:	f003 0304 	and.w	r3, r3, #4
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00b      	beq.n	800958e <HAL_UART_IRQHandler+0xd2>
 8009576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800957a:	f003 0301 	and.w	r3, r3, #1
 800957e:	2b00      	cmp	r3, #0
 8009580:	d005      	beq.n	800958e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009586:	f043 0202 	orr.w	r2, r3, #2
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800958e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009592:	f003 0302 	and.w	r3, r3, #2
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00b      	beq.n	80095b2 <HAL_UART_IRQHandler+0xf6>
 800959a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800959e:	f003 0301 	and.w	r3, r3, #1
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d005      	beq.n	80095b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095aa:	f043 0204 	orr.w	r2, r3, #4
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80095b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095b6:	f003 0308 	and.w	r3, r3, #8
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d011      	beq.n	80095e2 <HAL_UART_IRQHandler+0x126>
 80095be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095c2:	f003 0320 	and.w	r3, r3, #32
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d105      	bne.n	80095d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80095ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095ce:	f003 0301 	and.w	r3, r3, #1
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d005      	beq.n	80095e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095da:	f043 0208 	orr.w	r2, r3, #8
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	f000 81f2 	beq.w	80099d0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80095ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095f0:	f003 0320 	and.w	r3, r3, #32
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d008      	beq.n	800960a <HAL_UART_IRQHandler+0x14e>
 80095f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095fc:	f003 0320 	and.w	r3, r3, #32
 8009600:	2b00      	cmp	r3, #0
 8009602:	d002      	beq.n	800960a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 fb7d 	bl	8009d04 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	695b      	ldr	r3, [r3, #20]
 8009610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009614:	2b40      	cmp	r3, #64	@ 0x40
 8009616:	bf0c      	ite	eq
 8009618:	2301      	moveq	r3, #1
 800961a:	2300      	movne	r3, #0
 800961c:	b2db      	uxtb	r3, r3
 800961e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009626:	f003 0308 	and.w	r3, r3, #8
 800962a:	2b00      	cmp	r3, #0
 800962c:	d103      	bne.n	8009636 <HAL_UART_IRQHandler+0x17a>
 800962e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009632:	2b00      	cmp	r3, #0
 8009634:	d04f      	beq.n	80096d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fa85 	bl	8009b46 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	695b      	ldr	r3, [r3, #20]
 8009642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009646:	2b40      	cmp	r3, #64	@ 0x40
 8009648:	d141      	bne.n	80096ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	3314      	adds	r3, #20
 8009650:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009654:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009658:	e853 3f00 	ldrex	r3, [r3]
 800965c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009660:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009664:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009668:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	3314      	adds	r3, #20
 8009672:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009676:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800967a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009682:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009686:	e841 2300 	strex	r3, r2, [r1]
 800968a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800968e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d1d9      	bne.n	800964a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800969a:	2b00      	cmp	r3, #0
 800969c:	d013      	beq.n	80096c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096a2:	4a7e      	ldr	r2, [pc, #504]	@ (800989c <HAL_UART_IRQHandler+0x3e0>)
 80096a4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7fb fd10 	bl	80050d0 <HAL_DMA_Abort_IT>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d016      	beq.n	80096e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80096c0:	4610      	mov	r0, r2
 80096c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096c4:	e00e      	b.n	80096e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 f994 	bl	80099f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096cc:	e00a      	b.n	80096e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 f990 	bl	80099f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096d4:	e006      	b.n	80096e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f98c 	bl	80099f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80096e2:	e175      	b.n	80099d0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096e4:	bf00      	nop
    return;
 80096e6:	e173      	b.n	80099d0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	f040 814f 	bne.w	8009990 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80096f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096f6:	f003 0310 	and.w	r3, r3, #16
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f000 8148 	beq.w	8009990 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009704:	f003 0310 	and.w	r3, r3, #16
 8009708:	2b00      	cmp	r3, #0
 800970a:	f000 8141 	beq.w	8009990 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800970e:	2300      	movs	r3, #0
 8009710:	60bb      	str	r3, [r7, #8]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	60bb      	str	r3, [r7, #8]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	60bb      	str	r3, [r7, #8]
 8009722:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	695b      	ldr	r3, [r3, #20]
 800972a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800972e:	2b40      	cmp	r3, #64	@ 0x40
 8009730:	f040 80b6 	bne.w	80098a0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009740:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009744:	2b00      	cmp	r3, #0
 8009746:	f000 8145 	beq.w	80099d4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800974e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009752:	429a      	cmp	r2, r3
 8009754:	f080 813e 	bcs.w	80099d4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800975e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009764:	69db      	ldr	r3, [r3, #28]
 8009766:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800976a:	f000 8088 	beq.w	800987e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	330c      	adds	r3, #12
 8009774:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009778:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800977c:	e853 3f00 	ldrex	r3, [r3]
 8009780:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009784:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009788:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800978c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	330c      	adds	r3, #12
 8009796:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800979a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800979e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80097a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80097aa:	e841 2300 	strex	r3, r2, [r1]
 80097ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80097b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d1d9      	bne.n	800976e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	3314      	adds	r3, #20
 80097c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80097c4:	e853 3f00 	ldrex	r3, [r3]
 80097c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80097ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80097cc:	f023 0301 	bic.w	r3, r3, #1
 80097d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	3314      	adds	r3, #20
 80097da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80097de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80097e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80097e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80097ea:	e841 2300 	strex	r3, r2, [r1]
 80097ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80097f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d1e1      	bne.n	80097ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	3314      	adds	r3, #20
 80097fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009800:	e853 3f00 	ldrex	r3, [r3]
 8009804:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009806:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009808:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800980c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	3314      	adds	r3, #20
 8009816:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800981a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800981c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009820:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009822:	e841 2300 	strex	r3, r2, [r1]
 8009826:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009828:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1e3      	bne.n	80097f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2220      	movs	r2, #32
 8009832:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	330c      	adds	r3, #12
 8009842:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009844:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009846:	e853 3f00 	ldrex	r3, [r3]
 800984a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800984c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800984e:	f023 0310 	bic.w	r3, r3, #16
 8009852:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	330c      	adds	r3, #12
 800985c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009860:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009862:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009864:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009866:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009868:	e841 2300 	strex	r3, r2, [r1]
 800986c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800986e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009870:	2b00      	cmp	r3, #0
 8009872:	d1e3      	bne.n	800983c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009878:	4618      	mov	r0, r3
 800987a:	f7fb fbb9 	bl	8004ff0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2202      	movs	r2, #2
 8009882:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800988c:	b29b      	uxth	r3, r3
 800988e:	1ad3      	subs	r3, r2, r3
 8009890:	b29b      	uxth	r3, r3
 8009892:	4619      	mov	r1, r3
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 f8b7 	bl	8009a08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800989a:	e09b      	b.n	80099d4 <HAL_UART_IRQHandler+0x518>
 800989c:	08009c0d 	.word	0x08009c0d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	1ad3      	subs	r3, r2, r3
 80098ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f000 808e 	beq.w	80099d8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80098bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f000 8089 	beq.w	80099d8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	330c      	adds	r3, #12
 80098cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098d0:	e853 3f00 	ldrex	r3, [r3]
 80098d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80098d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	330c      	adds	r3, #12
 80098e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80098ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80098ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80098f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098f2:	e841 2300 	strex	r3, r2, [r1]
 80098f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80098f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d1e3      	bne.n	80098c6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	3314      	adds	r3, #20
 8009904:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009908:	e853 3f00 	ldrex	r3, [r3]
 800990c:	623b      	str	r3, [r7, #32]
   return(result);
 800990e:	6a3b      	ldr	r3, [r7, #32]
 8009910:	f023 0301 	bic.w	r3, r3, #1
 8009914:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	3314      	adds	r3, #20
 800991e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009922:	633a      	str	r2, [r7, #48]	@ 0x30
 8009924:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009926:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009928:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800992a:	e841 2300 	strex	r3, r2, [r1]
 800992e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1e3      	bne.n	80098fe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2220      	movs	r2, #32
 800993a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	330c      	adds	r3, #12
 800994a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	e853 3f00 	ldrex	r3, [r3]
 8009952:	60fb      	str	r3, [r7, #12]
   return(result);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f023 0310 	bic.w	r3, r3, #16
 800995a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	330c      	adds	r3, #12
 8009964:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009968:	61fa      	str	r2, [r7, #28]
 800996a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996c:	69b9      	ldr	r1, [r7, #24]
 800996e:	69fa      	ldr	r2, [r7, #28]
 8009970:	e841 2300 	strex	r3, r2, [r1]
 8009974:	617b      	str	r3, [r7, #20]
   return(result);
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d1e3      	bne.n	8009944 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2202      	movs	r2, #2
 8009980:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009982:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009986:	4619      	mov	r1, r3
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 f83d 	bl	8009a08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800998e:	e023      	b.n	80099d8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009998:	2b00      	cmp	r3, #0
 800999a:	d009      	beq.n	80099b0 <HAL_UART_IRQHandler+0x4f4>
 800999c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d003      	beq.n	80099b0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 f943 	bl	8009c34 <UART_Transmit_IT>
    return;
 80099ae:	e014      	b.n	80099da <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80099b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00e      	beq.n	80099da <HAL_UART_IRQHandler+0x51e>
 80099bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d008      	beq.n	80099da <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 f983 	bl	8009cd4 <UART_EndTransmit_IT>
    return;
 80099ce:	e004      	b.n	80099da <HAL_UART_IRQHandler+0x51e>
    return;
 80099d0:	bf00      	nop
 80099d2:	e002      	b.n	80099da <HAL_UART_IRQHandler+0x51e>
      return;
 80099d4:	bf00      	nop
 80099d6:	e000      	b.n	80099da <HAL_UART_IRQHandler+0x51e>
      return;
 80099d8:	bf00      	nop
  }
}
 80099da:	37e8      	adds	r7, #232	@ 0xe8
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80099e8:	bf00      	nop
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80099fc:	bf00      	nop
 80099fe:	370c      	adds	r7, #12
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr

08009a08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	460b      	mov	r3, r1
 8009a12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a14:	bf00      	nop
 8009a16:	370c      	adds	r7, #12
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b086      	sub	sp, #24
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	603b      	str	r3, [r7, #0]
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a30:	e03b      	b.n	8009aaa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a32:	6a3b      	ldr	r3, [r7, #32]
 8009a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a38:	d037      	beq.n	8009aaa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a3a:	f7fa fc9f 	bl	800437c <HAL_GetTick>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	1ad3      	subs	r3, r2, r3
 8009a44:	6a3a      	ldr	r2, [r7, #32]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d302      	bcc.n	8009a50 <UART_WaitOnFlagUntilTimeout+0x30>
 8009a4a:	6a3b      	ldr	r3, [r7, #32]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d101      	bne.n	8009a54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009a50:	2303      	movs	r3, #3
 8009a52:	e03a      	b.n	8009aca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	f003 0304 	and.w	r3, r3, #4
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d023      	beq.n	8009aaa <UART_WaitOnFlagUntilTimeout+0x8a>
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	2b80      	cmp	r3, #128	@ 0x80
 8009a66:	d020      	beq.n	8009aaa <UART_WaitOnFlagUntilTimeout+0x8a>
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	2b40      	cmp	r3, #64	@ 0x40
 8009a6c:	d01d      	beq.n	8009aaa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f003 0308 	and.w	r3, r3, #8
 8009a78:	2b08      	cmp	r3, #8
 8009a7a:	d116      	bne.n	8009aaa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	617b      	str	r3, [r7, #20]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	617b      	str	r3, [r7, #20]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	617b      	str	r3, [r7, #20]
 8009a90:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f000 f857 	bl	8009b46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2208      	movs	r2, #8
 8009a9c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e00f      	b.n	8009aca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	4013      	ands	r3, r2
 8009ab4:	68ba      	ldr	r2, [r7, #8]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	bf0c      	ite	eq
 8009aba:	2301      	moveq	r3, #1
 8009abc:	2300      	movne	r3, #0
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	79fb      	ldrb	r3, [r7, #7]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d0b4      	beq.n	8009a32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3718      	adds	r7, #24
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ad2:	b480      	push	{r7}
 8009ad4:	b085      	sub	sp, #20
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	60f8      	str	r0, [r7, #12]
 8009ada:	60b9      	str	r1, [r7, #8]
 8009adc:	4613      	mov	r3, r2
 8009ade:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	68ba      	ldr	r2, [r7, #8]
 8009ae4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	88fa      	ldrh	r2, [r7, #6]
 8009aea:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	88fa      	ldrh	r2, [r7, #6]
 8009af0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2200      	movs	r2, #0
 8009af6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2222      	movs	r2, #34	@ 0x22
 8009afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	691b      	ldr	r3, [r3, #16]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d007      	beq.n	8009b18 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68da      	ldr	r2, [r3, #12]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009b16:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	695a      	ldr	r2, [r3, #20]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f042 0201 	orr.w	r2, r2, #1
 8009b26:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68da      	ldr	r2, [r3, #12]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f042 0220 	orr.w	r2, r2, #32
 8009b36:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009b38:	2300      	movs	r3, #0
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3714      	adds	r7, #20
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr

08009b46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b46:	b480      	push	{r7}
 8009b48:	b095      	sub	sp, #84	@ 0x54
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	330c      	adds	r3, #12
 8009b54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b58:	e853 3f00 	ldrex	r3, [r3]
 8009b5c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	330c      	adds	r3, #12
 8009b6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009b6e:	643a      	str	r2, [r7, #64]	@ 0x40
 8009b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009b74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b76:	e841 2300 	strex	r3, r2, [r1]
 8009b7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1e5      	bne.n	8009b4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	3314      	adds	r3, #20
 8009b88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8a:	6a3b      	ldr	r3, [r7, #32]
 8009b8c:	e853 3f00 	ldrex	r3, [r3]
 8009b90:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	f023 0301 	bic.w	r3, r3, #1
 8009b98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	3314      	adds	r3, #20
 8009ba0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ba2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ba8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009baa:	e841 2300 	strex	r3, r2, [r1]
 8009bae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d1e5      	bne.n	8009b82 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d119      	bne.n	8009bf2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	330c      	adds	r3, #12
 8009bc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	e853 3f00 	ldrex	r3, [r3]
 8009bcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	f023 0310 	bic.w	r3, r3, #16
 8009bd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	330c      	adds	r3, #12
 8009bdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009bde:	61ba      	str	r2, [r7, #24]
 8009be0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be2:	6979      	ldr	r1, [r7, #20]
 8009be4:	69ba      	ldr	r2, [r7, #24]
 8009be6:	e841 2300 	strex	r3, r2, [r1]
 8009bea:	613b      	str	r3, [r7, #16]
   return(result);
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d1e5      	bne.n	8009bbe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2220      	movs	r2, #32
 8009bf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009c00:	bf00      	nop
 8009c02:	3754      	adds	r7, #84	@ 0x54
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2200      	movs	r2, #0
 8009c24:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c26:	68f8      	ldr	r0, [r7, #12]
 8009c28:	f7ff fee4 	bl	80099f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c2c:	bf00      	nop
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b085      	sub	sp, #20
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	2b21      	cmp	r3, #33	@ 0x21
 8009c46:	d13e      	bne.n	8009cc6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c50:	d114      	bne.n	8009c7c <UART_Transmit_IT+0x48>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d110      	bne.n	8009c7c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6a1b      	ldr	r3, [r3, #32]
 8009c5e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	881b      	ldrh	r3, [r3, #0]
 8009c64:	461a      	mov	r2, r3
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c6e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6a1b      	ldr	r3, [r3, #32]
 8009c74:	1c9a      	adds	r2, r3, #2
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	621a      	str	r2, [r3, #32]
 8009c7a:	e008      	b.n	8009c8e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6a1b      	ldr	r3, [r3, #32]
 8009c80:	1c59      	adds	r1, r3, #1
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	6211      	str	r1, [r2, #32]
 8009c86:	781a      	ldrb	r2, [r3, #0]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	3b01      	subs	r3, #1
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d10f      	bne.n	8009cc2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68da      	ldr	r2, [r3, #12]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009cb0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	68da      	ldr	r2, [r3, #12]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009cc0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	e000      	b.n	8009cc8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009cc6:	2302      	movs	r3, #2
  }
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3714      	adds	r7, #20
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	68da      	ldr	r2, [r3, #12]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009cea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2220      	movs	r2, #32
 8009cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f7ff fe73 	bl	80099e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009cfa:	2300      	movs	r3, #0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3708      	adds	r7, #8
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b08c      	sub	sp, #48	@ 0x30
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	2b22      	cmp	r3, #34	@ 0x22
 8009d16:	f040 80ae 	bne.w	8009e76 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d22:	d117      	bne.n	8009d54 <UART_Receive_IT+0x50>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	691b      	ldr	r3, [r3, #16]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d113      	bne.n	8009d54 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d34:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d46:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d4c:	1c9a      	adds	r2, r3, #2
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	629a      	str	r2, [r3, #40]	@ 0x28
 8009d52:	e026      	b.n	8009da2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d66:	d007      	beq.n	8009d78 <UART_Receive_IT+0x74>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d10a      	bne.n	8009d86 <UART_Receive_IT+0x82>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	691b      	ldr	r3, [r3, #16]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d106      	bne.n	8009d86 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	b2da      	uxtb	r2, r3
 8009d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d82:	701a      	strb	r2, [r3, #0]
 8009d84:	e008      	b.n	8009d98 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d92:	b2da      	uxtb	r2, r3
 8009d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d96:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d9c:	1c5a      	adds	r2, r3, #1
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	3b01      	subs	r3, #1
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	4619      	mov	r1, r3
 8009db0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d15d      	bne.n	8009e72 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	68da      	ldr	r2, [r3, #12]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f022 0220 	bic.w	r2, r2, #32
 8009dc4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	68da      	ldr	r2, [r3, #12]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009dd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	695a      	ldr	r2, [r3, #20]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f022 0201 	bic.w	r2, r2, #1
 8009de4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2220      	movs	r2, #32
 8009dea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d135      	bne.n	8009e68 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	330c      	adds	r3, #12
 8009e08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	e853 3f00 	ldrex	r3, [r3]
 8009e10:	613b      	str	r3, [r7, #16]
   return(result);
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	f023 0310 	bic.w	r3, r3, #16
 8009e18:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	330c      	adds	r3, #12
 8009e20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e22:	623a      	str	r2, [r7, #32]
 8009e24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e26:	69f9      	ldr	r1, [r7, #28]
 8009e28:	6a3a      	ldr	r2, [r7, #32]
 8009e2a:	e841 2300 	strex	r3, r2, [r1]
 8009e2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e30:	69bb      	ldr	r3, [r7, #24]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d1e5      	bne.n	8009e02 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f003 0310 	and.w	r3, r3, #16
 8009e40:	2b10      	cmp	r3, #16
 8009e42:	d10a      	bne.n	8009e5a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009e44:	2300      	movs	r3, #0
 8009e46:	60fb      	str	r3, [r7, #12]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	60fb      	str	r3, [r7, #12]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	60fb      	str	r3, [r7, #12]
 8009e58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009e5e:	4619      	mov	r1, r3
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f7ff fdd1 	bl	8009a08 <HAL_UARTEx_RxEventCallback>
 8009e66:	e002      	b.n	8009e6e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f7f7 ffef 	bl	8001e4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	e002      	b.n	8009e78 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009e72:	2300      	movs	r3, #0
 8009e74:	e000      	b.n	8009e78 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009e76:	2302      	movs	r3, #2
  }
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3730      	adds	r7, #48	@ 0x30
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e84:	b0c0      	sub	sp, #256	@ 0x100
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	691b      	ldr	r3, [r3, #16]
 8009e94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e9c:	68d9      	ldr	r1, [r3, #12]
 8009e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	ea40 0301 	orr.w	r3, r0, r1
 8009ea8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009eae:	689a      	ldr	r2, [r3, #8]
 8009eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009eb4:	691b      	ldr	r3, [r3, #16]
 8009eb6:	431a      	orrs	r2, r3
 8009eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ebc:	695b      	ldr	r3, [r3, #20]
 8009ebe:	431a      	orrs	r2, r3
 8009ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ec4:	69db      	ldr	r3, [r3, #28]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	68db      	ldr	r3, [r3, #12]
 8009ed4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009ed8:	f021 010c 	bic.w	r1, r1, #12
 8009edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009ee6:	430b      	orrs	r3, r1
 8009ee8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	695b      	ldr	r3, [r3, #20]
 8009ef2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009efa:	6999      	ldr	r1, [r3, #24]
 8009efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	ea40 0301 	orr.w	r3, r0, r1
 8009f06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	4b8f      	ldr	r3, [pc, #572]	@ (800a14c <UART_SetConfig+0x2cc>)
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d005      	beq.n	8009f20 <UART_SetConfig+0xa0>
 8009f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	4b8d      	ldr	r3, [pc, #564]	@ (800a150 <UART_SetConfig+0x2d0>)
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d104      	bne.n	8009f2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009f20:	f7fd f964 	bl	80071ec <HAL_RCC_GetPCLK2Freq>
 8009f24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009f28:	e003      	b.n	8009f32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009f2a:	f7fd f94b 	bl	80071c4 <HAL_RCC_GetPCLK1Freq>
 8009f2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f36:	69db      	ldr	r3, [r3, #28]
 8009f38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f3c:	f040 810c 	bne.w	800a158 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009f40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f44:	2200      	movs	r2, #0
 8009f46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009f4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009f4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009f52:	4622      	mov	r2, r4
 8009f54:	462b      	mov	r3, r5
 8009f56:	1891      	adds	r1, r2, r2
 8009f58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009f5a:	415b      	adcs	r3, r3
 8009f5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009f62:	4621      	mov	r1, r4
 8009f64:	eb12 0801 	adds.w	r8, r2, r1
 8009f68:	4629      	mov	r1, r5
 8009f6a:	eb43 0901 	adc.w	r9, r3, r1
 8009f6e:	f04f 0200 	mov.w	r2, #0
 8009f72:	f04f 0300 	mov.w	r3, #0
 8009f76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009f7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009f7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009f82:	4690      	mov	r8, r2
 8009f84:	4699      	mov	r9, r3
 8009f86:	4623      	mov	r3, r4
 8009f88:	eb18 0303 	adds.w	r3, r8, r3
 8009f8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009f90:	462b      	mov	r3, r5
 8009f92:	eb49 0303 	adc.w	r3, r9, r3
 8009f96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009fa6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009faa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009fae:	460b      	mov	r3, r1
 8009fb0:	18db      	adds	r3, r3, r3
 8009fb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	eb42 0303 	adc.w	r3, r2, r3
 8009fba:	657b      	str	r3, [r7, #84]	@ 0x54
 8009fbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009fc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009fc4:	f7f6 fe68 	bl	8000c98 <__aeabi_uldivmod>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	460b      	mov	r3, r1
 8009fcc:	4b61      	ldr	r3, [pc, #388]	@ (800a154 <UART_SetConfig+0x2d4>)
 8009fce:	fba3 2302 	umull	r2, r3, r3, r2
 8009fd2:	095b      	lsrs	r3, r3, #5
 8009fd4:	011c      	lsls	r4, r3, #4
 8009fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009fe0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009fe4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009fe8:	4642      	mov	r2, r8
 8009fea:	464b      	mov	r3, r9
 8009fec:	1891      	adds	r1, r2, r2
 8009fee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009ff0:	415b      	adcs	r3, r3
 8009ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ff4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009ff8:	4641      	mov	r1, r8
 8009ffa:	eb12 0a01 	adds.w	sl, r2, r1
 8009ffe:	4649      	mov	r1, r9
 800a000:	eb43 0b01 	adc.w	fp, r3, r1
 800a004:	f04f 0200 	mov.w	r2, #0
 800a008:	f04f 0300 	mov.w	r3, #0
 800a00c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a010:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a014:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a018:	4692      	mov	sl, r2
 800a01a:	469b      	mov	fp, r3
 800a01c:	4643      	mov	r3, r8
 800a01e:	eb1a 0303 	adds.w	r3, sl, r3
 800a022:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a026:	464b      	mov	r3, r9
 800a028:	eb4b 0303 	adc.w	r3, fp, r3
 800a02c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a03c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a040:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a044:	460b      	mov	r3, r1
 800a046:	18db      	adds	r3, r3, r3
 800a048:	643b      	str	r3, [r7, #64]	@ 0x40
 800a04a:	4613      	mov	r3, r2
 800a04c:	eb42 0303 	adc.w	r3, r2, r3
 800a050:	647b      	str	r3, [r7, #68]	@ 0x44
 800a052:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a056:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a05a:	f7f6 fe1d 	bl	8000c98 <__aeabi_uldivmod>
 800a05e:	4602      	mov	r2, r0
 800a060:	460b      	mov	r3, r1
 800a062:	4611      	mov	r1, r2
 800a064:	4b3b      	ldr	r3, [pc, #236]	@ (800a154 <UART_SetConfig+0x2d4>)
 800a066:	fba3 2301 	umull	r2, r3, r3, r1
 800a06a:	095b      	lsrs	r3, r3, #5
 800a06c:	2264      	movs	r2, #100	@ 0x64
 800a06e:	fb02 f303 	mul.w	r3, r2, r3
 800a072:	1acb      	subs	r3, r1, r3
 800a074:	00db      	lsls	r3, r3, #3
 800a076:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a07a:	4b36      	ldr	r3, [pc, #216]	@ (800a154 <UART_SetConfig+0x2d4>)
 800a07c:	fba3 2302 	umull	r2, r3, r3, r2
 800a080:	095b      	lsrs	r3, r3, #5
 800a082:	005b      	lsls	r3, r3, #1
 800a084:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a088:	441c      	add	r4, r3
 800a08a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a08e:	2200      	movs	r2, #0
 800a090:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a094:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a098:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a09c:	4642      	mov	r2, r8
 800a09e:	464b      	mov	r3, r9
 800a0a0:	1891      	adds	r1, r2, r2
 800a0a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a0a4:	415b      	adcs	r3, r3
 800a0a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a0ac:	4641      	mov	r1, r8
 800a0ae:	1851      	adds	r1, r2, r1
 800a0b0:	6339      	str	r1, [r7, #48]	@ 0x30
 800a0b2:	4649      	mov	r1, r9
 800a0b4:	414b      	adcs	r3, r1
 800a0b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0b8:	f04f 0200 	mov.w	r2, #0
 800a0bc:	f04f 0300 	mov.w	r3, #0
 800a0c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a0c4:	4659      	mov	r1, fp
 800a0c6:	00cb      	lsls	r3, r1, #3
 800a0c8:	4651      	mov	r1, sl
 800a0ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a0ce:	4651      	mov	r1, sl
 800a0d0:	00ca      	lsls	r2, r1, #3
 800a0d2:	4610      	mov	r0, r2
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	4642      	mov	r2, r8
 800a0da:	189b      	adds	r3, r3, r2
 800a0dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a0e0:	464b      	mov	r3, r9
 800a0e2:	460a      	mov	r2, r1
 800a0e4:	eb42 0303 	adc.w	r3, r2, r3
 800a0e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a0ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a0f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a0fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a100:	460b      	mov	r3, r1
 800a102:	18db      	adds	r3, r3, r3
 800a104:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a106:	4613      	mov	r3, r2
 800a108:	eb42 0303 	adc.w	r3, r2, r3
 800a10c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a10e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a112:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a116:	f7f6 fdbf 	bl	8000c98 <__aeabi_uldivmod>
 800a11a:	4602      	mov	r2, r0
 800a11c:	460b      	mov	r3, r1
 800a11e:	4b0d      	ldr	r3, [pc, #52]	@ (800a154 <UART_SetConfig+0x2d4>)
 800a120:	fba3 1302 	umull	r1, r3, r3, r2
 800a124:	095b      	lsrs	r3, r3, #5
 800a126:	2164      	movs	r1, #100	@ 0x64
 800a128:	fb01 f303 	mul.w	r3, r1, r3
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	00db      	lsls	r3, r3, #3
 800a130:	3332      	adds	r3, #50	@ 0x32
 800a132:	4a08      	ldr	r2, [pc, #32]	@ (800a154 <UART_SetConfig+0x2d4>)
 800a134:	fba2 2303 	umull	r2, r3, r2, r3
 800a138:	095b      	lsrs	r3, r3, #5
 800a13a:	f003 0207 	and.w	r2, r3, #7
 800a13e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4422      	add	r2, r4
 800a146:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a148:	e106      	b.n	800a358 <UART_SetConfig+0x4d8>
 800a14a:	bf00      	nop
 800a14c:	40011000 	.word	0x40011000
 800a150:	40011400 	.word	0x40011400
 800a154:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a158:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a15c:	2200      	movs	r2, #0
 800a15e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a162:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a166:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a16a:	4642      	mov	r2, r8
 800a16c:	464b      	mov	r3, r9
 800a16e:	1891      	adds	r1, r2, r2
 800a170:	6239      	str	r1, [r7, #32]
 800a172:	415b      	adcs	r3, r3
 800a174:	627b      	str	r3, [r7, #36]	@ 0x24
 800a176:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a17a:	4641      	mov	r1, r8
 800a17c:	1854      	adds	r4, r2, r1
 800a17e:	4649      	mov	r1, r9
 800a180:	eb43 0501 	adc.w	r5, r3, r1
 800a184:	f04f 0200 	mov.w	r2, #0
 800a188:	f04f 0300 	mov.w	r3, #0
 800a18c:	00eb      	lsls	r3, r5, #3
 800a18e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a192:	00e2      	lsls	r2, r4, #3
 800a194:	4614      	mov	r4, r2
 800a196:	461d      	mov	r5, r3
 800a198:	4643      	mov	r3, r8
 800a19a:	18e3      	adds	r3, r4, r3
 800a19c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a1a0:	464b      	mov	r3, r9
 800a1a2:	eb45 0303 	adc.w	r3, r5, r3
 800a1a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a1aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a1b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a1ba:	f04f 0200 	mov.w	r2, #0
 800a1be:	f04f 0300 	mov.w	r3, #0
 800a1c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a1c6:	4629      	mov	r1, r5
 800a1c8:	008b      	lsls	r3, r1, #2
 800a1ca:	4621      	mov	r1, r4
 800a1cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a1d0:	4621      	mov	r1, r4
 800a1d2:	008a      	lsls	r2, r1, #2
 800a1d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a1d8:	f7f6 fd5e 	bl	8000c98 <__aeabi_uldivmod>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	460b      	mov	r3, r1
 800a1e0:	4b60      	ldr	r3, [pc, #384]	@ (800a364 <UART_SetConfig+0x4e4>)
 800a1e2:	fba3 2302 	umull	r2, r3, r3, r2
 800a1e6:	095b      	lsrs	r3, r3, #5
 800a1e8:	011c      	lsls	r4, r3, #4
 800a1ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a1f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a1f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a1fc:	4642      	mov	r2, r8
 800a1fe:	464b      	mov	r3, r9
 800a200:	1891      	adds	r1, r2, r2
 800a202:	61b9      	str	r1, [r7, #24]
 800a204:	415b      	adcs	r3, r3
 800a206:	61fb      	str	r3, [r7, #28]
 800a208:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a20c:	4641      	mov	r1, r8
 800a20e:	1851      	adds	r1, r2, r1
 800a210:	6139      	str	r1, [r7, #16]
 800a212:	4649      	mov	r1, r9
 800a214:	414b      	adcs	r3, r1
 800a216:	617b      	str	r3, [r7, #20]
 800a218:	f04f 0200 	mov.w	r2, #0
 800a21c:	f04f 0300 	mov.w	r3, #0
 800a220:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a224:	4659      	mov	r1, fp
 800a226:	00cb      	lsls	r3, r1, #3
 800a228:	4651      	mov	r1, sl
 800a22a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a22e:	4651      	mov	r1, sl
 800a230:	00ca      	lsls	r2, r1, #3
 800a232:	4610      	mov	r0, r2
 800a234:	4619      	mov	r1, r3
 800a236:	4603      	mov	r3, r0
 800a238:	4642      	mov	r2, r8
 800a23a:	189b      	adds	r3, r3, r2
 800a23c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a240:	464b      	mov	r3, r9
 800a242:	460a      	mov	r2, r1
 800a244:	eb42 0303 	adc.w	r3, r2, r3
 800a248:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a24c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	2200      	movs	r2, #0
 800a254:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a256:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a258:	f04f 0200 	mov.w	r2, #0
 800a25c:	f04f 0300 	mov.w	r3, #0
 800a260:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a264:	4649      	mov	r1, r9
 800a266:	008b      	lsls	r3, r1, #2
 800a268:	4641      	mov	r1, r8
 800a26a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a26e:	4641      	mov	r1, r8
 800a270:	008a      	lsls	r2, r1, #2
 800a272:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a276:	f7f6 fd0f 	bl	8000c98 <__aeabi_uldivmod>
 800a27a:	4602      	mov	r2, r0
 800a27c:	460b      	mov	r3, r1
 800a27e:	4611      	mov	r1, r2
 800a280:	4b38      	ldr	r3, [pc, #224]	@ (800a364 <UART_SetConfig+0x4e4>)
 800a282:	fba3 2301 	umull	r2, r3, r3, r1
 800a286:	095b      	lsrs	r3, r3, #5
 800a288:	2264      	movs	r2, #100	@ 0x64
 800a28a:	fb02 f303 	mul.w	r3, r2, r3
 800a28e:	1acb      	subs	r3, r1, r3
 800a290:	011b      	lsls	r3, r3, #4
 800a292:	3332      	adds	r3, #50	@ 0x32
 800a294:	4a33      	ldr	r2, [pc, #204]	@ (800a364 <UART_SetConfig+0x4e4>)
 800a296:	fba2 2303 	umull	r2, r3, r2, r3
 800a29a:	095b      	lsrs	r3, r3, #5
 800a29c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a2a0:	441c      	add	r4, r3
 800a2a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	673b      	str	r3, [r7, #112]	@ 0x70
 800a2aa:	677a      	str	r2, [r7, #116]	@ 0x74
 800a2ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a2b0:	4642      	mov	r2, r8
 800a2b2:	464b      	mov	r3, r9
 800a2b4:	1891      	adds	r1, r2, r2
 800a2b6:	60b9      	str	r1, [r7, #8]
 800a2b8:	415b      	adcs	r3, r3
 800a2ba:	60fb      	str	r3, [r7, #12]
 800a2bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a2c0:	4641      	mov	r1, r8
 800a2c2:	1851      	adds	r1, r2, r1
 800a2c4:	6039      	str	r1, [r7, #0]
 800a2c6:	4649      	mov	r1, r9
 800a2c8:	414b      	adcs	r3, r1
 800a2ca:	607b      	str	r3, [r7, #4]
 800a2cc:	f04f 0200 	mov.w	r2, #0
 800a2d0:	f04f 0300 	mov.w	r3, #0
 800a2d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a2d8:	4659      	mov	r1, fp
 800a2da:	00cb      	lsls	r3, r1, #3
 800a2dc:	4651      	mov	r1, sl
 800a2de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a2e2:	4651      	mov	r1, sl
 800a2e4:	00ca      	lsls	r2, r1, #3
 800a2e6:	4610      	mov	r0, r2
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	4642      	mov	r2, r8
 800a2ee:	189b      	adds	r3, r3, r2
 800a2f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a2f2:	464b      	mov	r3, r9
 800a2f4:	460a      	mov	r2, r1
 800a2f6:	eb42 0303 	adc.w	r3, r2, r3
 800a2fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a2fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	663b      	str	r3, [r7, #96]	@ 0x60
 800a306:	667a      	str	r2, [r7, #100]	@ 0x64
 800a308:	f04f 0200 	mov.w	r2, #0
 800a30c:	f04f 0300 	mov.w	r3, #0
 800a310:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a314:	4649      	mov	r1, r9
 800a316:	008b      	lsls	r3, r1, #2
 800a318:	4641      	mov	r1, r8
 800a31a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a31e:	4641      	mov	r1, r8
 800a320:	008a      	lsls	r2, r1, #2
 800a322:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a326:	f7f6 fcb7 	bl	8000c98 <__aeabi_uldivmod>
 800a32a:	4602      	mov	r2, r0
 800a32c:	460b      	mov	r3, r1
 800a32e:	4b0d      	ldr	r3, [pc, #52]	@ (800a364 <UART_SetConfig+0x4e4>)
 800a330:	fba3 1302 	umull	r1, r3, r3, r2
 800a334:	095b      	lsrs	r3, r3, #5
 800a336:	2164      	movs	r1, #100	@ 0x64
 800a338:	fb01 f303 	mul.w	r3, r1, r3
 800a33c:	1ad3      	subs	r3, r2, r3
 800a33e:	011b      	lsls	r3, r3, #4
 800a340:	3332      	adds	r3, #50	@ 0x32
 800a342:	4a08      	ldr	r2, [pc, #32]	@ (800a364 <UART_SetConfig+0x4e4>)
 800a344:	fba2 2303 	umull	r2, r3, r2, r3
 800a348:	095b      	lsrs	r3, r3, #5
 800a34a:	f003 020f 	and.w	r2, r3, #15
 800a34e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4422      	add	r2, r4
 800a356:	609a      	str	r2, [r3, #8]
}
 800a358:	bf00      	nop
 800a35a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a35e:	46bd      	mov	sp, r7
 800a360:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a364:	51eb851f 	.word	0x51eb851f

0800a368 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a368:	b084      	sub	sp, #16
 800a36a:	b480      	push	{r7}
 800a36c:	b085      	sub	sp, #20
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
 800a372:	f107 001c 	add.w	r0, r7, #28
 800a376:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a37a:	2300      	movs	r3, #0
 800a37c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a37e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a380:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a382:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800a386:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800a38a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a38c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800a38e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800a392:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a394:	68fa      	ldr	r2, [r7, #12]
 800a396:	4313      	orrs	r3, r2
 800a398:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800a3a2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a3a6:	68fa      	ldr	r2, [r7, #12]
 800a3a8:	431a      	orrs	r2, r3
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a3ae:	2300      	movs	r3, #0
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3714      	adds	r7, #20
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	b004      	add	sp, #16
 800a3bc:	4770      	bx	lr

0800a3be <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a3be:	b480      	push	{r7}
 800a3c0:	b083      	sub	sp, #12
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a3d8:	b480      	push	{r7}
 800a3da:	b083      	sub	sp, #12
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	681a      	ldr	r2, [r3, #0]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a3ec:	2300      	movs	r3, #0
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	370c      	adds	r7, #12
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a3fa:	b480      	push	{r7}
 800a3fc:	b083      	sub	sp, #12
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2203      	movs	r2, #3
 800a406:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a408:	2300      	movs	r3, #0
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	370c      	adds	r7, #12
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr

0800a416 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a416:	b480      	push	{r7}
 800a418:	b083      	sub	sp, #12
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f003 0303 	and.w	r3, r3, #3
}
 800a426:	4618      	mov	r0, r3
 800a428:	370c      	adds	r7, #12
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr

0800a432 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a432:	b480      	push	{r7}
 800a434:	b085      	sub	sp, #20
 800a436:	af00      	add	r7, sp, #0
 800a438:	6078      	str	r0, [r7, #4]
 800a43a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a43c:	2300      	movs	r3, #0
 800a43e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a450:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a456:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a45c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a45e:	68fa      	ldr	r2, [r7, #12]
 800a460:	4313      	orrs	r3, r2
 800a462:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a46c:	f023 030f 	bic.w	r3, r3, #15
 800a470:	68fa      	ldr	r2, [r7, #12]
 800a472:	431a      	orrs	r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3714      	adds	r7, #20
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr

0800a486 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a486:	b480      	push	{r7}
 800a488:	b083      	sub	sp, #12
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	691b      	ldr	r3, [r3, #16]
 800a492:	b2db      	uxtb	r3, r3
}
 800a494:	4618      	mov	r0, r3
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	3314      	adds	r3, #20
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
}  
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3714      	adds	r7, #20
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr

0800a4c6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a4c6:	b480      	push	{r7}
 800a4c8:	b085      	sub	sp, #20
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	685a      	ldr	r2, [r3, #4]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a4ec:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a4f2:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a4f8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a504:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	431a      	orrs	r2, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a510:	2300      	movs	r3, #0

}
 800a512:	4618      	mov	r0, r3
 800a514:	3714      	adds	r7, #20
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr

0800a51e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b088      	sub	sp, #32
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
 800a526:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a52c:	2310      	movs	r3, #16
 800a52e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a530:	2340      	movs	r3, #64	@ 0x40
 800a532:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a534:	2300      	movs	r3, #0
 800a536:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a538:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a53c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a53e:	f107 0308 	add.w	r3, r7, #8
 800a542:	4619      	mov	r1, r3
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f7ff ff74 	bl	800a432 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a54a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a54e:	2110      	movs	r1, #16
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 fa19 	bl	800a988 <SDMMC_GetCmdResp1>
 800a556:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a558:	69fb      	ldr	r3, [r7, #28]
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3720      	adds	r7, #32
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b088      	sub	sp, #32
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
 800a56a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a570:	2311      	movs	r3, #17
 800a572:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a574:	2340      	movs	r3, #64	@ 0x40
 800a576:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a578:	2300      	movs	r3, #0
 800a57a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a57c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a580:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a582:	f107 0308 	add.w	r3, r7, #8
 800a586:	4619      	mov	r1, r3
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f7ff ff52 	bl	800a432 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a58e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a592:	2111      	movs	r1, #17
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 f9f7 	bl	800a988 <SDMMC_GetCmdResp1>
 800a59a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a59c:	69fb      	ldr	r3, [r7, #28]
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3720      	adds	r7, #32
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b088      	sub	sp, #32
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a5b4:	2312      	movs	r3, #18
 800a5b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a5b8:	2340      	movs	r3, #64	@ 0x40
 800a5ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5c6:	f107 0308 	add.w	r3, r7, #8
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f7ff ff30 	bl	800a432 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a5d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a5d6:	2112      	movs	r1, #18
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 f9d5 	bl	800a988 <SDMMC_GetCmdResp1>
 800a5de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5e0:	69fb      	ldr	r3, [r7, #28]
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3720      	adds	r7, #32
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b088      	sub	sp, #32
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
 800a5f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a5f8:	2318      	movs	r3, #24
 800a5fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a5fc:	2340      	movs	r3, #64	@ 0x40
 800a5fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a600:	2300      	movs	r3, #0
 800a602:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a604:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a608:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a60a:	f107 0308 	add.w	r3, r7, #8
 800a60e:	4619      	mov	r1, r3
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f7ff ff0e 	bl	800a432 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a61a:	2118      	movs	r1, #24
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 f9b3 	bl	800a988 <SDMMC_GetCmdResp1>
 800a622:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a624:	69fb      	ldr	r3, [r7, #28]
}
 800a626:	4618      	mov	r0, r3
 800a628:	3720      	adds	r7, #32
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}

0800a62e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a62e:	b580      	push	{r7, lr}
 800a630:	b088      	sub	sp, #32
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
 800a636:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a63c:	2319      	movs	r3, #25
 800a63e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a640:	2340      	movs	r3, #64	@ 0x40
 800a642:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a644:	2300      	movs	r3, #0
 800a646:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a648:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a64c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a64e:	f107 0308 	add.w	r3, r7, #8
 800a652:	4619      	mov	r1, r3
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f7ff feec 	bl	800a432 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a65a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a65e:	2119      	movs	r1, #25
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 f991 	bl	800a988 <SDMMC_GetCmdResp1>
 800a666:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a668:	69fb      	ldr	r3, [r7, #28]
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3720      	adds	r7, #32
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
	...

0800a674 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b088      	sub	sp, #32
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a67c:	2300      	movs	r3, #0
 800a67e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a680:	230c      	movs	r3, #12
 800a682:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a684:	2340      	movs	r3, #64	@ 0x40
 800a686:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a688:	2300      	movs	r3, #0
 800a68a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a68c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a690:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a692:	f107 0308 	add.w	r3, r7, #8
 800a696:	4619      	mov	r1, r3
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f7ff feca 	bl	800a432 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a69e:	4a05      	ldr	r2, [pc, #20]	@ (800a6b4 <SDMMC_CmdStopTransfer+0x40>)
 800a6a0:	210c      	movs	r1, #12
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 f970 	bl	800a988 <SDMMC_GetCmdResp1>
 800a6a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6aa:	69fb      	ldr	r3, [r7, #28]
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3720      	adds	r7, #32
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	05f5e100 	.word	0x05f5e100

0800a6b8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b08a      	sub	sp, #40	@ 0x28
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a6c8:	2307      	movs	r3, #7
 800a6ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a6cc:	2340      	movs	r3, #64	@ 0x40
 800a6ce:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a6d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6d8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6da:	f107 0310 	add.w	r3, r7, #16
 800a6de:	4619      	mov	r1, r3
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f7ff fea6 	bl	800a432 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a6e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6ea:	2107      	movs	r1, #7
 800a6ec:	68f8      	ldr	r0, [r7, #12]
 800a6ee:	f000 f94b 	bl	800a988 <SDMMC_GetCmdResp1>
 800a6f2:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3728      	adds	r7, #40	@ 0x28
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b088      	sub	sp, #32
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a706:	2300      	movs	r3, #0
 800a708:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a70a:	2300      	movs	r3, #0
 800a70c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a70e:	2300      	movs	r3, #0
 800a710:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a712:	2300      	movs	r3, #0
 800a714:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a716:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a71a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a71c:	f107 0308 	add.w	r3, r7, #8
 800a720:	4619      	mov	r1, r3
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f7ff fe85 	bl	800a432 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f000 fb65 	bl	800adf8 <SDMMC_GetCmdError>
 800a72e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a730:	69fb      	ldr	r3, [r7, #28]
}
 800a732:	4618      	mov	r0, r3
 800a734:	3720      	adds	r7, #32
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b088      	sub	sp, #32
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a742:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a746:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a748:	2308      	movs	r3, #8
 800a74a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a74c:	2340      	movs	r3, #64	@ 0x40
 800a74e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a750:	2300      	movs	r3, #0
 800a752:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a754:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a758:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a75a:	f107 0308 	add.w	r3, r7, #8
 800a75e:	4619      	mov	r1, r3
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f7ff fe66 	bl	800a432 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 faf8 	bl	800ad5c <SDMMC_GetCmdResp7>
 800a76c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a76e:	69fb      	ldr	r3, [r7, #28]
}
 800a770:	4618      	mov	r0, r3
 800a772:	3720      	adds	r7, #32
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b088      	sub	sp, #32
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a786:	2337      	movs	r3, #55	@ 0x37
 800a788:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a78a:	2340      	movs	r3, #64	@ 0x40
 800a78c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a78e:	2300      	movs	r3, #0
 800a790:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a792:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a796:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a798:	f107 0308 	add.w	r3, r7, #8
 800a79c:	4619      	mov	r1, r3
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f7ff fe47 	bl	800a432 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a7a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7a8:	2137      	movs	r1, #55	@ 0x37
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 f8ec 	bl	800a988 <SDMMC_GetCmdResp1>
 800a7b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7b2:	69fb      	ldr	r3, [r7, #28]
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3720      	adds	r7, #32
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b088      	sub	sp, #32
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a7cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a7d2:	2329      	movs	r3, #41	@ 0x29
 800a7d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a7d6:	2340      	movs	r3, #64	@ 0x40
 800a7d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a7de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a7e4:	f107 0308 	add.w	r3, r7, #8
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f7ff fe21 	bl	800a432 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 f9ff 	bl	800abf4 <SDMMC_GetCmdResp3>
 800a7f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7f8:	69fb      	ldr	r3, [r7, #28]
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3720      	adds	r7, #32
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}

0800a802 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a802:	b580      	push	{r7, lr}
 800a804:	b088      	sub	sp, #32
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
 800a80a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a810:	2306      	movs	r3, #6
 800a812:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a814:	2340      	movs	r3, #64	@ 0x40
 800a816:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a818:	2300      	movs	r3, #0
 800a81a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a81c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a820:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a822:	f107 0308 	add.w	r3, r7, #8
 800a826:	4619      	mov	r1, r3
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f7ff fe02 	bl	800a432 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a82e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a832:	2106      	movs	r1, #6
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 f8a7 	bl	800a988 <SDMMC_GetCmdResp1>
 800a83a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a83c:	69fb      	ldr	r3, [r7, #28]
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3720      	adds	r7, #32
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}

0800a846 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a846:	b580      	push	{r7, lr}
 800a848:	b088      	sub	sp, #32
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a84e:	2300      	movs	r3, #0
 800a850:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a852:	2333      	movs	r3, #51	@ 0x33
 800a854:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a856:	2340      	movs	r3, #64	@ 0x40
 800a858:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a85a:	2300      	movs	r3, #0
 800a85c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a85e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a862:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a864:	f107 0308 	add.w	r3, r7, #8
 800a868:	4619      	mov	r1, r3
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f7ff fde1 	bl	800a432 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a870:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a874:	2133      	movs	r1, #51	@ 0x33
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 f886 	bl	800a988 <SDMMC_GetCmdResp1>
 800a87c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a87e:	69fb      	ldr	r3, [r7, #28]
}
 800a880:	4618      	mov	r0, r3
 800a882:	3720      	adds	r7, #32
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b088      	sub	sp, #32
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a890:	2300      	movs	r3, #0
 800a892:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a894:	2302      	movs	r3, #2
 800a896:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a898:	23c0      	movs	r3, #192	@ 0xc0
 800a89a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a89c:	2300      	movs	r3, #0
 800a89e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a8a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a8a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a8a6:	f107 0308 	add.w	r3, r7, #8
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f7ff fdc0 	bl	800a432 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 f956 	bl	800ab64 <SDMMC_GetCmdResp2>
 800a8b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8ba:	69fb      	ldr	r3, [r7, #28]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3720      	adds	r7, #32
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b088      	sub	sp, #32
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a8d2:	2309      	movs	r3, #9
 800a8d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a8d6:	23c0      	movs	r3, #192	@ 0xc0
 800a8d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a8de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a8e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a8e4:	f107 0308 	add.w	r3, r7, #8
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f7ff fda1 	bl	800a432 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f000 f937 	bl	800ab64 <SDMMC_GetCmdResp2>
 800a8f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8f8:	69fb      	ldr	r3, [r7, #28]
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3720      	adds	r7, #32
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b088      	sub	sp, #32
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
 800a90a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a90c:	2300      	movs	r3, #0
 800a90e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a910:	2303      	movs	r3, #3
 800a912:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a914:	2340      	movs	r3, #64	@ 0x40
 800a916:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a918:	2300      	movs	r3, #0
 800a91a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a91c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a920:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a922:	f107 0308 	add.w	r3, r7, #8
 800a926:	4619      	mov	r1, r3
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f7ff fd82 	bl	800a432 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a92e:	683a      	ldr	r2, [r7, #0]
 800a930:	2103      	movs	r1, #3
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 f99c 	bl	800ac70 <SDMMC_GetCmdResp6>
 800a938:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a93a:	69fb      	ldr	r3, [r7, #28]
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3720      	adds	r7, #32
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b088      	sub	sp, #32
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a952:	230d      	movs	r3, #13
 800a954:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a956:	2340      	movs	r3, #64	@ 0x40
 800a958:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a95a:	2300      	movs	r3, #0
 800a95c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a95e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a962:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a964:	f107 0308 	add.w	r3, r7, #8
 800a968:	4619      	mov	r1, r3
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f7ff fd61 	bl	800a432 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a970:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a974:	210d      	movs	r1, #13
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 f806 	bl	800a988 <SDMMC_GetCmdResp1>
 800a97c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a97e:	69fb      	ldr	r3, [r7, #28]
}
 800a980:	4618      	mov	r0, r3
 800a982:	3720      	adds	r7, #32
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b088      	sub	sp, #32
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	460b      	mov	r3, r1
 800a992:	607a      	str	r2, [r7, #4]
 800a994:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a996:	4b70      	ldr	r3, [pc, #448]	@ (800ab58 <SDMMC_GetCmdResp1+0x1d0>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a70      	ldr	r2, [pc, #448]	@ (800ab5c <SDMMC_GetCmdResp1+0x1d4>)
 800a99c:	fba2 2303 	umull	r2, r3, r2, r3
 800a9a0:	0a5a      	lsrs	r2, r3, #9
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	fb02 f303 	mul.w	r3, r2, r3
 800a9a8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a9aa:	69fb      	ldr	r3, [r7, #28]
 800a9ac:	1e5a      	subs	r2, r3, #1
 800a9ae:	61fa      	str	r2, [r7, #28]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d102      	bne.n	800a9ba <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a9b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a9b8:	e0c9      	b.n	800ab4e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9be:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a9c0:	69bb      	ldr	r3, [r7, #24]
 800a9c2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d0ef      	beq.n	800a9aa <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d1ea      	bne.n	800a9aa <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9d8:	f003 0304 	and.w	r3, r3, #4
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d004      	beq.n	800a9ea <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2204      	movs	r2, #4
 800a9e4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a9e6:	2304      	movs	r3, #4
 800a9e8:	e0b1      	b.n	800ab4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9ee:	f003 0301 	and.w	r3, r3, #1
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d004      	beq.n	800aa00 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	e0a6      	b.n	800ab4e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	22c5      	movs	r2, #197	@ 0xc5
 800aa04:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800aa06:	68f8      	ldr	r0, [r7, #12]
 800aa08:	f7ff fd3d 	bl	800a486 <SDIO_GetCommandResponse>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	461a      	mov	r2, r3
 800aa10:	7afb      	ldrb	r3, [r7, #11]
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d001      	beq.n	800aa1a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa16:	2301      	movs	r3, #1
 800aa18:	e099      	b.n	800ab4e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800aa1a:	2100      	movs	r1, #0
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f7ff fd3f 	bl	800a4a0 <SDIO_GetResponse>
 800aa22:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800aa24:	697a      	ldr	r2, [r7, #20]
 800aa26:	4b4e      	ldr	r3, [pc, #312]	@ (800ab60 <SDMMC_GetCmdResp1+0x1d8>)
 800aa28:	4013      	ands	r3, r2
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d101      	bne.n	800aa32 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	e08d      	b.n	800ab4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	da02      	bge.n	800aa3e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800aa38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800aa3c:	e087      	b.n	800ab4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d001      	beq.n	800aa4c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800aa48:	2340      	movs	r3, #64	@ 0x40
 800aa4a:	e080      	b.n	800ab4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d001      	beq.n	800aa5a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800aa56:	2380      	movs	r3, #128	@ 0x80
 800aa58:	e079      	b.n	800ab4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d002      	beq.n	800aa6a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800aa64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aa68:	e071      	b.n	800ab4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d002      	beq.n	800aa7a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800aa74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa78:	e069      	b.n	800ab4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d002      	beq.n	800aa8a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800aa84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa88:	e061      	b.n	800ab4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d002      	beq.n	800aa9a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800aa94:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800aa98:	e059      	b.n	800ab4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d002      	beq.n	800aaaa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800aaa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aaa8:	e051      	b.n	800ab4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d002      	beq.n	800aaba <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800aab4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800aab8:	e049      	b.n	800ab4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d002      	beq.n	800aaca <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800aac4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800aac8:	e041      	b.n	800ab4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d002      	beq.n	800aada <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800aad4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aad8:	e039      	b.n	800ab4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d002      	beq.n	800aaea <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800aae4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800aae8:	e031      	b.n	800ab4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d002      	beq.n	800aafa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800aaf4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800aaf8:	e029      	b.n	800ab4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d002      	beq.n	800ab0a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ab04:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ab08:	e021      	b.n	800ab4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d002      	beq.n	800ab1a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ab14:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ab18:	e019      	b.n	800ab4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d002      	beq.n	800ab2a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ab24:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800ab28:	e011      	b.n	800ab4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d002      	beq.n	800ab3a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ab34:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800ab38:	e009      	b.n	800ab4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	f003 0308 	and.w	r3, r3, #8
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d002      	beq.n	800ab4a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ab44:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800ab48:	e001      	b.n	800ab4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ab4a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3720      	adds	r7, #32
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop
 800ab58:	20000010 	.word	0x20000010
 800ab5c:	10624dd3 	.word	0x10624dd3
 800ab60:	fdffe008 	.word	0xfdffe008

0800ab64 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ab6c:	4b1f      	ldr	r3, [pc, #124]	@ (800abec <SDMMC_GetCmdResp2+0x88>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a1f      	ldr	r2, [pc, #124]	@ (800abf0 <SDMMC_GetCmdResp2+0x8c>)
 800ab72:	fba2 2303 	umull	r2, r3, r2, r3
 800ab76:	0a5b      	lsrs	r3, r3, #9
 800ab78:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab7c:	fb02 f303 	mul.w	r3, r2, r3
 800ab80:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	1e5a      	subs	r2, r3, #1
 800ab86:	60fa      	str	r2, [r7, #12]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d102      	bne.n	800ab92 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab8c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ab90:	e026      	b.n	800abe0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab96:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d0ef      	beq.n	800ab82 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d1ea      	bne.n	800ab82 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abb0:	f003 0304 	and.w	r3, r3, #4
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d004      	beq.n	800abc2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2204      	movs	r2, #4
 800abbc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800abbe:	2304      	movs	r3, #4
 800abc0:	e00e      	b.n	800abe0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abc6:	f003 0301 	and.w	r3, r3, #1
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d004      	beq.n	800abd8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2201      	movs	r2, #1
 800abd2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800abd4:	2301      	movs	r3, #1
 800abd6:	e003      	b.n	800abe0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	22c5      	movs	r2, #197	@ 0xc5
 800abdc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800abde:	2300      	movs	r3, #0
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3714      	adds	r7, #20
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr
 800abec:	20000010 	.word	0x20000010
 800abf0:	10624dd3 	.word	0x10624dd3

0800abf4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b085      	sub	sp, #20
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800abfc:	4b1a      	ldr	r3, [pc, #104]	@ (800ac68 <SDMMC_GetCmdResp3+0x74>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a1a      	ldr	r2, [pc, #104]	@ (800ac6c <SDMMC_GetCmdResp3+0x78>)
 800ac02:	fba2 2303 	umull	r2, r3, r2, r3
 800ac06:	0a5b      	lsrs	r3, r3, #9
 800ac08:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac0c:	fb02 f303 	mul.w	r3, r2, r3
 800ac10:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	1e5a      	subs	r2, r3, #1
 800ac16:	60fa      	str	r2, [r7, #12]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d102      	bne.n	800ac22 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac1c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ac20:	e01b      	b.n	800ac5a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac26:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d0ef      	beq.n	800ac12 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d1ea      	bne.n	800ac12 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac40:	f003 0304 	and.w	r3, r3, #4
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d004      	beq.n	800ac52 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2204      	movs	r2, #4
 800ac4c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac4e:	2304      	movs	r3, #4
 800ac50:	e003      	b.n	800ac5a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	22c5      	movs	r2, #197	@ 0xc5
 800ac56:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ac58:	2300      	movs	r3, #0
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3714      	adds	r7, #20
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr
 800ac66:	bf00      	nop
 800ac68:	20000010 	.word	0x20000010
 800ac6c:	10624dd3 	.word	0x10624dd3

0800ac70 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b088      	sub	sp, #32
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	460b      	mov	r3, r1
 800ac7a:	607a      	str	r2, [r7, #4]
 800ac7c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ac7e:	4b35      	ldr	r3, [pc, #212]	@ (800ad54 <SDMMC_GetCmdResp6+0xe4>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4a35      	ldr	r2, [pc, #212]	@ (800ad58 <SDMMC_GetCmdResp6+0xe8>)
 800ac84:	fba2 2303 	umull	r2, r3, r2, r3
 800ac88:	0a5b      	lsrs	r3, r3, #9
 800ac8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac8e:	fb02 f303 	mul.w	r3, r2, r3
 800ac92:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	1e5a      	subs	r2, r3, #1
 800ac98:	61fa      	str	r2, [r7, #28]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d102      	bne.n	800aca4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac9e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aca2:	e052      	b.n	800ad4a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aca8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800acaa:	69bb      	ldr	r3, [r7, #24]
 800acac:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d0ef      	beq.n	800ac94 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800acb4:	69bb      	ldr	r3, [r7, #24]
 800acb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d1ea      	bne.n	800ac94 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acc2:	f003 0304 	and.w	r3, r3, #4
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d004      	beq.n	800acd4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2204      	movs	r2, #4
 800acce:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800acd0:	2304      	movs	r3, #4
 800acd2:	e03a      	b.n	800ad4a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acd8:	f003 0301 	and.w	r3, r3, #1
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d004      	beq.n	800acea <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2201      	movs	r2, #1
 800ace4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ace6:	2301      	movs	r3, #1
 800ace8:	e02f      	b.n	800ad4a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800acea:	68f8      	ldr	r0, [r7, #12]
 800acec:	f7ff fbcb 	bl	800a486 <SDIO_GetCommandResponse>
 800acf0:	4603      	mov	r3, r0
 800acf2:	461a      	mov	r2, r3
 800acf4:	7afb      	ldrb	r3, [r7, #11]
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d001      	beq.n	800acfe <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800acfa:	2301      	movs	r3, #1
 800acfc:	e025      	b.n	800ad4a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	22c5      	movs	r2, #197	@ 0xc5
 800ad02:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ad04:	2100      	movs	r1, #0
 800ad06:	68f8      	ldr	r0, [r7, #12]
 800ad08:	f7ff fbca 	bl	800a4a0 <SDIO_GetResponse>
 800ad0c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d106      	bne.n	800ad26 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	0c1b      	lsrs	r3, r3, #16
 800ad1c:	b29a      	uxth	r2, r3
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ad22:	2300      	movs	r3, #0
 800ad24:	e011      	b.n	800ad4a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d002      	beq.n	800ad36 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ad30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ad34:	e009      	b.n	800ad4a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d002      	beq.n	800ad46 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ad40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ad44:	e001      	b.n	800ad4a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ad46:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3720      	adds	r7, #32
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	20000010 	.word	0x20000010
 800ad58:	10624dd3 	.word	0x10624dd3

0800ad5c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b085      	sub	sp, #20
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ad64:	4b22      	ldr	r3, [pc, #136]	@ (800adf0 <SDMMC_GetCmdResp7+0x94>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4a22      	ldr	r2, [pc, #136]	@ (800adf4 <SDMMC_GetCmdResp7+0x98>)
 800ad6a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad6e:	0a5b      	lsrs	r3, r3, #9
 800ad70:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad74:	fb02 f303 	mul.w	r3, r2, r3
 800ad78:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	1e5a      	subs	r2, r3, #1
 800ad7e:	60fa      	str	r2, [r7, #12]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d102      	bne.n	800ad8a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad84:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ad88:	e02c      	b.n	800ade4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad8e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d0ef      	beq.n	800ad7a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d1ea      	bne.n	800ad7a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ada8:	f003 0304 	and.w	r3, r3, #4
 800adac:	2b00      	cmp	r3, #0
 800adae:	d004      	beq.n	800adba <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2204      	movs	r2, #4
 800adb4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800adb6:	2304      	movs	r3, #4
 800adb8:	e014      	b.n	800ade4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adbe:	f003 0301 	and.w	r3, r3, #1
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d004      	beq.n	800add0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2201      	movs	r2, #1
 800adca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800adcc:	2301      	movs	r3, #1
 800adce:	e009      	b.n	800ade4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800add4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800add8:	2b00      	cmp	r3, #0
 800adda:	d002      	beq.n	800ade2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2240      	movs	r2, #64	@ 0x40
 800ade0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ade2:	2300      	movs	r3, #0
  
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3714      	adds	r7, #20
 800ade8:	46bd      	mov	sp, r7
 800adea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adee:	4770      	bx	lr
 800adf0:	20000010 	.word	0x20000010
 800adf4:	10624dd3 	.word	0x10624dd3

0800adf8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b085      	sub	sp, #20
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ae00:	4b11      	ldr	r3, [pc, #68]	@ (800ae48 <SDMMC_GetCmdError+0x50>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4a11      	ldr	r2, [pc, #68]	@ (800ae4c <SDMMC_GetCmdError+0x54>)
 800ae06:	fba2 2303 	umull	r2, r3, r2, r3
 800ae0a:	0a5b      	lsrs	r3, r3, #9
 800ae0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae10:	fb02 f303 	mul.w	r3, r2, r3
 800ae14:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	1e5a      	subs	r2, r3, #1
 800ae1a:	60fa      	str	r2, [r7, #12]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d102      	bne.n	800ae26 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae20:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ae24:	e009      	b.n	800ae3a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d0f1      	beq.n	800ae16 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	22c5      	movs	r2, #197	@ 0xc5
 800ae36:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800ae38:	2300      	movs	r3, #0
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3714      	adds	r7, #20
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr
 800ae46:	bf00      	nop
 800ae48:	20000010 	.word	0x20000010
 800ae4c:	10624dd3 	.word	0x10624dd3

0800ae50 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ae54:	4904      	ldr	r1, [pc, #16]	@ (800ae68 <MX_FATFS_Init+0x18>)
 800ae56:	4805      	ldr	r0, [pc, #20]	@ (800ae6c <MX_FATFS_Init+0x1c>)
 800ae58:	f002 fdda 	bl	800da10 <FATFS_LinkDriver>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	461a      	mov	r2, r3
 800ae60:	4b03      	ldr	r3, [pc, #12]	@ (800ae70 <MX_FATFS_Init+0x20>)
 800ae62:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ae64:	bf00      	nop
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	20002c94 	.word	0x20002c94
 800ae6c:	08013e8c 	.word	0x08013e8c
 800ae70:	20002c90 	.word	0x20002c90

0800ae74 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ae74:	b480      	push	{r7}
 800ae76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ae78:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b082      	sub	sp, #8
 800ae88:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ae8e:	f000 f896 	bl	800afbe <BSP_SD_IsDetected>
 800ae92:	4603      	mov	r3, r0
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d001      	beq.n	800ae9c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	e012      	b.n	800aec2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ae9c:	480b      	ldr	r0, [pc, #44]	@ (800aecc <BSP_SD_Init+0x48>)
 800ae9e:	f7fc f9b9 	bl	8007214 <HAL_SD_Init>
 800aea2:	4603      	mov	r3, r0
 800aea4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800aea6:	79fb      	ldrb	r3, [r7, #7]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d109      	bne.n	800aec0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800aeac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800aeb0:	4806      	ldr	r0, [pc, #24]	@ (800aecc <BSP_SD_Init+0x48>)
 800aeb2:	f7fc ff87 	bl	8007dc4 <HAL_SD_ConfigWideBusOperation>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d001      	beq.n	800aec0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800aebc:	2301      	movs	r3, #1
 800aebe:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800aec0:	79fb      	ldrb	r3, [r7, #7]
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3708      	adds	r7, #8
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	2000270c 	.word	0x2000270c

0800aed0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b086      	sub	sp, #24
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	60b9      	str	r1, [r7, #8]
 800aeda:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800aedc:	2300      	movs	r3, #0
 800aede:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	68ba      	ldr	r2, [r7, #8]
 800aee4:	68f9      	ldr	r1, [r7, #12]
 800aee6:	4806      	ldr	r0, [pc, #24]	@ (800af00 <BSP_SD_ReadBlocks_DMA+0x30>)
 800aee8:	f7fc fa44 	bl	8007374 <HAL_SD_ReadBlocks_DMA>
 800aeec:	4603      	mov	r3, r0
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d001      	beq.n	800aef6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800aef2:	2301      	movs	r3, #1
 800aef4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800aef6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3718      	adds	r7, #24
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	2000270c 	.word	0x2000270c

0800af04 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b086      	sub	sp, #24
 800af08:	af00      	add	r7, sp, #0
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	60b9      	str	r1, [r7, #8]
 800af0e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800af10:	2300      	movs	r3, #0
 800af12:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	68ba      	ldr	r2, [r7, #8]
 800af18:	68f9      	ldr	r1, [r7, #12]
 800af1a:	4806      	ldr	r0, [pc, #24]	@ (800af34 <BSP_SD_WriteBlocks_DMA+0x30>)
 800af1c:	f7fc fb0c 	bl	8007538 <HAL_SD_WriteBlocks_DMA>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d001      	beq.n	800af2a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800af26:	2301      	movs	r3, #1
 800af28:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800af2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3718      	adds	r7, #24
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}
 800af34:	2000270c 	.word	0x2000270c

0800af38 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800af3c:	4805      	ldr	r0, [pc, #20]	@ (800af54 <BSP_SD_GetCardState+0x1c>)
 800af3e:	f7fc ffdb 	bl	8007ef8 <HAL_SD_GetCardState>
 800af42:	4603      	mov	r3, r0
 800af44:	2b04      	cmp	r3, #4
 800af46:	bf14      	ite	ne
 800af48:	2301      	movne	r3, #1
 800af4a:	2300      	moveq	r3, #0
 800af4c:	b2db      	uxtb	r3, r3
}
 800af4e:	4618      	mov	r0, r3
 800af50:	bd80      	pop	{r7, pc}
 800af52:	bf00      	nop
 800af54:	2000270c 	.word	0x2000270c

0800af58 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800af60:	6879      	ldr	r1, [r7, #4]
 800af62:	4803      	ldr	r0, [pc, #12]	@ (800af70 <BSP_SD_GetCardInfo+0x18>)
 800af64:	f7fc ff02 	bl	8007d6c <HAL_SD_GetCardInfo>
}
 800af68:	bf00      	nop
 800af6a:	3708      	adds	r7, #8
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}
 800af70:	2000270c 	.word	0x2000270c

0800af74 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b082      	sub	sp, #8
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800af7c:	f000 f818 	bl	800afb0 <BSP_SD_AbortCallback>
}
 800af80:	bf00      	nop
 800af82:	3708      	adds	r7, #8
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800af90:	f000 f98c 	bl	800b2ac <BSP_SD_WriteCpltCallback>
}
 800af94:	bf00      	nop
 800af96:	3708      	adds	r7, #8
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800afa4:	f000 f98e 	bl	800b2c4 <BSP_SD_ReadCpltCallback>
}
 800afa8:	bf00      	nop
 800afaa:	3708      	adds	r7, #8
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800afb0:	b480      	push	{r7}
 800afb2:	af00      	add	r7, sp, #0

}
 800afb4:	bf00      	nop
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr

0800afbe <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800afbe:	b480      	push	{r7}
 800afc0:	b083      	sub	sp, #12
 800afc2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800afc4:	2301      	movs	r3, #1
 800afc6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800afc8:	79fb      	ldrb	r3, [r7, #7]
 800afca:	b2db      	uxtb	r3, r3
}
 800afcc:	4618      	mov	r0, r3
 800afce:	370c      	adds	r7, #12
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800afe0:	f7f9 f9cc 	bl	800437c <HAL_GetTick>
 800afe4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800afe6:	e006      	b.n	800aff6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800afe8:	f7ff ffa6 	bl	800af38 <BSP_SD_GetCardState>
 800afec:	4603      	mov	r3, r0
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d101      	bne.n	800aff6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800aff2:	2300      	movs	r3, #0
 800aff4:	e009      	b.n	800b00a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800aff6:	f7f9 f9c1 	bl	800437c <HAL_GetTick>
 800affa:	4602      	mov	r2, r0
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	1ad3      	subs	r3, r2, r3
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	429a      	cmp	r2, r3
 800b004:	d8f0      	bhi.n	800afe8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b006:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3710      	adds	r7, #16
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
	...

0800b014 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	4603      	mov	r3, r0
 800b01c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b01e:	4b0b      	ldr	r3, [pc, #44]	@ (800b04c <SD_CheckStatus+0x38>)
 800b020:	2201      	movs	r2, #1
 800b022:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b024:	f7ff ff88 	bl	800af38 <BSP_SD_GetCardState>
 800b028:	4603      	mov	r3, r0
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d107      	bne.n	800b03e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b02e:	4b07      	ldr	r3, [pc, #28]	@ (800b04c <SD_CheckStatus+0x38>)
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	b2db      	uxtb	r3, r3
 800b034:	f023 0301 	bic.w	r3, r3, #1
 800b038:	b2da      	uxtb	r2, r3
 800b03a:	4b04      	ldr	r3, [pc, #16]	@ (800b04c <SD_CheckStatus+0x38>)
 800b03c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b03e:	4b03      	ldr	r3, [pc, #12]	@ (800b04c <SD_CheckStatus+0x38>)
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	b2db      	uxtb	r3, r3
}
 800b044:	4618      	mov	r0, r3
 800b046:	3708      	adds	r7, #8
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	20000019 	.word	0x20000019

0800b050 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
 800b056:	4603      	mov	r3, r0
 800b058:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b05a:	f7ff ff13 	bl	800ae84 <BSP_SD_Init>
 800b05e:	4603      	mov	r3, r0
 800b060:	2b00      	cmp	r3, #0
 800b062:	d107      	bne.n	800b074 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800b064:	79fb      	ldrb	r3, [r7, #7]
 800b066:	4618      	mov	r0, r3
 800b068:	f7ff ffd4 	bl	800b014 <SD_CheckStatus>
 800b06c:	4603      	mov	r3, r0
 800b06e:	461a      	mov	r2, r3
 800b070:	4b04      	ldr	r3, [pc, #16]	@ (800b084 <SD_initialize+0x34>)
 800b072:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b074:	4b03      	ldr	r3, [pc, #12]	@ (800b084 <SD_initialize+0x34>)
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	b2db      	uxtb	r3, r3
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3708      	adds	r7, #8
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	20000019 	.word	0x20000019

0800b088 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	4603      	mov	r3, r0
 800b090:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b092:	79fb      	ldrb	r3, [r7, #7]
 800b094:	4618      	mov	r0, r3
 800b096:	f7ff ffbd 	bl	800b014 <SD_CheckStatus>
 800b09a:	4603      	mov	r3, r0
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3708      	adds	r7, #8
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b086      	sub	sp, #24
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	60b9      	str	r1, [r7, #8]
 800b0ac:	607a      	str	r2, [r7, #4]
 800b0ae:	603b      	str	r3, [r7, #0]
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b0b8:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b0bc:	f7ff ff8c 	bl	800afd8 <SD_CheckStatusWithTimeout>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	da01      	bge.n	800b0ca <SD_read+0x26>
  {
    return res;
 800b0c6:	7dfb      	ldrb	r3, [r7, #23]
 800b0c8:	e03b      	b.n	800b142 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b0ca:	683a      	ldr	r2, [r7, #0]
 800b0cc:	6879      	ldr	r1, [r7, #4]
 800b0ce:	68b8      	ldr	r0, [r7, #8]
 800b0d0:	f7ff fefe 	bl	800aed0 <BSP_SD_ReadBlocks_DMA>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d132      	bne.n	800b140 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b0da:	4b1c      	ldr	r3, [pc, #112]	@ (800b14c <SD_read+0xa8>)
 800b0dc:	2200      	movs	r2, #0
 800b0de:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b0e0:	f7f9 f94c 	bl	800437c <HAL_GetTick>
 800b0e4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b0e6:	bf00      	nop
 800b0e8:	4b18      	ldr	r3, [pc, #96]	@ (800b14c <SD_read+0xa8>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d108      	bne.n	800b102 <SD_read+0x5e>
 800b0f0:	f7f9 f944 	bl	800437c <HAL_GetTick>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	1ad3      	subs	r3, r2, r3
 800b0fa:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d9f2      	bls.n	800b0e8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800b102:	4b12      	ldr	r3, [pc, #72]	@ (800b14c <SD_read+0xa8>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d102      	bne.n	800b110 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800b10a:	2301      	movs	r3, #1
 800b10c:	75fb      	strb	r3, [r7, #23]
 800b10e:	e017      	b.n	800b140 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800b110:	4b0e      	ldr	r3, [pc, #56]	@ (800b14c <SD_read+0xa8>)
 800b112:	2200      	movs	r2, #0
 800b114:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b116:	f7f9 f931 	bl	800437c <HAL_GetTick>
 800b11a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b11c:	e007      	b.n	800b12e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b11e:	f7ff ff0b 	bl	800af38 <BSP_SD_GetCardState>
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d102      	bne.n	800b12e <SD_read+0x8a>
          {
            res = RES_OK;
 800b128:	2300      	movs	r3, #0
 800b12a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b12c:	e008      	b.n	800b140 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b12e:	f7f9 f925 	bl	800437c <HAL_GetTick>
 800b132:	4602      	mov	r2, r0
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	1ad3      	subs	r3, r2, r3
 800b138:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d9ee      	bls.n	800b11e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800b140:	7dfb      	ldrb	r3, [r7, #23]
}
 800b142:	4618      	mov	r0, r3
 800b144:	3718      	adds	r7, #24
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	20002c9c 	.word	0x20002c9c

0800b150 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b086      	sub	sp, #24
 800b154:	af00      	add	r7, sp, #0
 800b156:	60b9      	str	r1, [r7, #8]
 800b158:	607a      	str	r2, [r7, #4]
 800b15a:	603b      	str	r3, [r7, #0]
 800b15c:	4603      	mov	r3, r0
 800b15e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b160:	2301      	movs	r3, #1
 800b162:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800b164:	4b24      	ldr	r3, [pc, #144]	@ (800b1f8 <SD_write+0xa8>)
 800b166:	2200      	movs	r2, #0
 800b168:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b16a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b16e:	f7ff ff33 	bl	800afd8 <SD_CheckStatusWithTimeout>
 800b172:	4603      	mov	r3, r0
 800b174:	2b00      	cmp	r3, #0
 800b176:	da01      	bge.n	800b17c <SD_write+0x2c>
  {
    return res;
 800b178:	7dfb      	ldrb	r3, [r7, #23]
 800b17a:	e038      	b.n	800b1ee <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b17c:	683a      	ldr	r2, [r7, #0]
 800b17e:	6879      	ldr	r1, [r7, #4]
 800b180:	68b8      	ldr	r0, [r7, #8]
 800b182:	f7ff febf 	bl	800af04 <BSP_SD_WriteBlocks_DMA>
 800b186:	4603      	mov	r3, r0
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d12f      	bne.n	800b1ec <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800b18c:	f7f9 f8f6 	bl	800437c <HAL_GetTick>
 800b190:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b192:	bf00      	nop
 800b194:	4b18      	ldr	r3, [pc, #96]	@ (800b1f8 <SD_write+0xa8>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d108      	bne.n	800b1ae <SD_write+0x5e>
 800b19c:	f7f9 f8ee 	bl	800437c <HAL_GetTick>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	1ad3      	subs	r3, r2, r3
 800b1a6:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d9f2      	bls.n	800b194 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800b1ae:	4b12      	ldr	r3, [pc, #72]	@ (800b1f8 <SD_write+0xa8>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d102      	bne.n	800b1bc <SD_write+0x6c>
      {
        res = RES_ERROR;
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	75fb      	strb	r3, [r7, #23]
 800b1ba:	e017      	b.n	800b1ec <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800b1bc:	4b0e      	ldr	r3, [pc, #56]	@ (800b1f8 <SD_write+0xa8>)
 800b1be:	2200      	movs	r2, #0
 800b1c0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b1c2:	f7f9 f8db 	bl	800437c <HAL_GetTick>
 800b1c6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b1c8:	e007      	b.n	800b1da <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b1ca:	f7ff feb5 	bl	800af38 <BSP_SD_GetCardState>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d102      	bne.n	800b1da <SD_write+0x8a>
          {
            res = RES_OK;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	75fb      	strb	r3, [r7, #23]
            break;
 800b1d8:	e008      	b.n	800b1ec <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b1da:	f7f9 f8cf 	bl	800437c <HAL_GetTick>
 800b1de:	4602      	mov	r2, r0
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	1ad3      	subs	r3, r2, r3
 800b1e4:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d9ee      	bls.n	800b1ca <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800b1ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3718      	adds	r7, #24
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	20002c98 	.word	0x20002c98

0800b1fc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b08c      	sub	sp, #48	@ 0x30
 800b200:	af00      	add	r7, sp, #0
 800b202:	4603      	mov	r3, r0
 800b204:	603a      	str	r2, [r7, #0]
 800b206:	71fb      	strb	r3, [r7, #7]
 800b208:	460b      	mov	r3, r1
 800b20a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b20c:	2301      	movs	r3, #1
 800b20e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b212:	4b25      	ldr	r3, [pc, #148]	@ (800b2a8 <SD_ioctl+0xac>)
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	b2db      	uxtb	r3, r3
 800b218:	f003 0301 	and.w	r3, r3, #1
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d001      	beq.n	800b224 <SD_ioctl+0x28>
 800b220:	2303      	movs	r3, #3
 800b222:	e03c      	b.n	800b29e <SD_ioctl+0xa2>

  switch (cmd)
 800b224:	79bb      	ldrb	r3, [r7, #6]
 800b226:	2b03      	cmp	r3, #3
 800b228:	d834      	bhi.n	800b294 <SD_ioctl+0x98>
 800b22a:	a201      	add	r2, pc, #4	@ (adr r2, 800b230 <SD_ioctl+0x34>)
 800b22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b230:	0800b241 	.word	0x0800b241
 800b234:	0800b249 	.word	0x0800b249
 800b238:	0800b261 	.word	0x0800b261
 800b23c:	0800b27b 	.word	0x0800b27b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b240:	2300      	movs	r3, #0
 800b242:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b246:	e028      	b.n	800b29a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b248:	f107 030c 	add.w	r3, r7, #12
 800b24c:	4618      	mov	r0, r3
 800b24e:	f7ff fe83 	bl	800af58 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b258:	2300      	movs	r3, #0
 800b25a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b25e:	e01c      	b.n	800b29a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b260:	f107 030c 	add.w	r3, r7, #12
 800b264:	4618      	mov	r0, r3
 800b266:	f7ff fe77 	bl	800af58 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b26c:	b29a      	uxth	r2, r3
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b272:	2300      	movs	r3, #0
 800b274:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b278:	e00f      	b.n	800b29a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b27a:	f107 030c 	add.w	r3, r7, #12
 800b27e:	4618      	mov	r0, r3
 800b280:	f7ff fe6a 	bl	800af58 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b286:	0a5a      	lsrs	r2, r3, #9
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b28c:	2300      	movs	r3, #0
 800b28e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b292:	e002      	b.n	800b29a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b294:	2304      	movs	r3, #4
 800b296:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800b29a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3730      	adds	r7, #48	@ 0x30
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	20000019 	.word	0x20000019

0800b2ac <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800b2b0:	4b03      	ldr	r3, [pc, #12]	@ (800b2c0 <BSP_SD_WriteCpltCallback+0x14>)
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	601a      	str	r2, [r3, #0]
}
 800b2b6:	bf00      	nop
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr
 800b2c0:	20002c98 	.word	0x20002c98

0800b2c4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800b2c8:	4b03      	ldr	r3, [pc, #12]	@ (800b2d8 <BSP_SD_ReadCpltCallback+0x14>)
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	601a      	str	r2, [r3, #0]
}
 800b2ce:	bf00      	nop
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr
 800b2d8:	20002c9c 	.word	0x20002c9c

0800b2dc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b084      	sub	sp, #16
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b2e6:	79fb      	ldrb	r3, [r7, #7]
 800b2e8:	4a08      	ldr	r2, [pc, #32]	@ (800b30c <disk_status+0x30>)
 800b2ea:	009b      	lsls	r3, r3, #2
 800b2ec:	4413      	add	r3, r2
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	79fa      	ldrb	r2, [r7, #7]
 800b2f4:	4905      	ldr	r1, [pc, #20]	@ (800b30c <disk_status+0x30>)
 800b2f6:	440a      	add	r2, r1
 800b2f8:	7a12      	ldrb	r2, [r2, #8]
 800b2fa:	4610      	mov	r0, r2
 800b2fc:	4798      	blx	r3
 800b2fe:	4603      	mov	r3, r0
 800b300:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b302:	7bfb      	ldrb	r3, [r7, #15]
}
 800b304:	4618      	mov	r0, r3
 800b306:	3710      	adds	r7, #16
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}
 800b30c:	20002cc8 	.word	0x20002cc8

0800b310 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	4603      	mov	r3, r0
 800b318:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b31a:	2300      	movs	r3, #0
 800b31c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b31e:	79fb      	ldrb	r3, [r7, #7]
 800b320:	4a0e      	ldr	r2, [pc, #56]	@ (800b35c <disk_initialize+0x4c>)
 800b322:	5cd3      	ldrb	r3, [r2, r3]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d114      	bne.n	800b352 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b328:	79fb      	ldrb	r3, [r7, #7]
 800b32a:	4a0c      	ldr	r2, [pc, #48]	@ (800b35c <disk_initialize+0x4c>)
 800b32c:	009b      	lsls	r3, r3, #2
 800b32e:	4413      	add	r3, r2
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	79fa      	ldrb	r2, [r7, #7]
 800b336:	4909      	ldr	r1, [pc, #36]	@ (800b35c <disk_initialize+0x4c>)
 800b338:	440a      	add	r2, r1
 800b33a:	7a12      	ldrb	r2, [r2, #8]
 800b33c:	4610      	mov	r0, r2
 800b33e:	4798      	blx	r3
 800b340:	4603      	mov	r3, r0
 800b342:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800b344:	7bfb      	ldrb	r3, [r7, #15]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d103      	bne.n	800b352 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800b34a:	79fb      	ldrb	r3, [r7, #7]
 800b34c:	4a03      	ldr	r2, [pc, #12]	@ (800b35c <disk_initialize+0x4c>)
 800b34e:	2101      	movs	r1, #1
 800b350:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800b352:	7bfb      	ldrb	r3, [r7, #15]
}
 800b354:	4618      	mov	r0, r3
 800b356:	3710      	adds	r7, #16
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	20002cc8 	.word	0x20002cc8

0800b360 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b360:	b590      	push	{r4, r7, lr}
 800b362:	b087      	sub	sp, #28
 800b364:	af00      	add	r7, sp, #0
 800b366:	60b9      	str	r1, [r7, #8]
 800b368:	607a      	str	r2, [r7, #4]
 800b36a:	603b      	str	r3, [r7, #0]
 800b36c:	4603      	mov	r3, r0
 800b36e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b370:	7bfb      	ldrb	r3, [r7, #15]
 800b372:	4a0a      	ldr	r2, [pc, #40]	@ (800b39c <disk_read+0x3c>)
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	4413      	add	r3, r2
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	689c      	ldr	r4, [r3, #8]
 800b37c:	7bfb      	ldrb	r3, [r7, #15]
 800b37e:	4a07      	ldr	r2, [pc, #28]	@ (800b39c <disk_read+0x3c>)
 800b380:	4413      	add	r3, r2
 800b382:	7a18      	ldrb	r0, [r3, #8]
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	687a      	ldr	r2, [r7, #4]
 800b388:	68b9      	ldr	r1, [r7, #8]
 800b38a:	47a0      	blx	r4
 800b38c:	4603      	mov	r3, r0
 800b38e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b390:	7dfb      	ldrb	r3, [r7, #23]
}
 800b392:	4618      	mov	r0, r3
 800b394:	371c      	adds	r7, #28
 800b396:	46bd      	mov	sp, r7
 800b398:	bd90      	pop	{r4, r7, pc}
 800b39a:	bf00      	nop
 800b39c:	20002cc8 	.word	0x20002cc8

0800b3a0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b3a0:	b590      	push	{r4, r7, lr}
 800b3a2:	b087      	sub	sp, #28
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	60b9      	str	r1, [r7, #8]
 800b3a8:	607a      	str	r2, [r7, #4]
 800b3aa:	603b      	str	r3, [r7, #0]
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b3b0:	7bfb      	ldrb	r3, [r7, #15]
 800b3b2:	4a0a      	ldr	r2, [pc, #40]	@ (800b3dc <disk_write+0x3c>)
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	4413      	add	r3, r2
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	68dc      	ldr	r4, [r3, #12]
 800b3bc:	7bfb      	ldrb	r3, [r7, #15]
 800b3be:	4a07      	ldr	r2, [pc, #28]	@ (800b3dc <disk_write+0x3c>)
 800b3c0:	4413      	add	r3, r2
 800b3c2:	7a18      	ldrb	r0, [r3, #8]
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	68b9      	ldr	r1, [r7, #8]
 800b3ca:	47a0      	blx	r4
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	75fb      	strb	r3, [r7, #23]
  return res;
 800b3d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	371c      	adds	r7, #28
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd90      	pop	{r4, r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	20002cc8 	.word	0x20002cc8

0800b3e0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	603a      	str	r2, [r7, #0]
 800b3ea:	71fb      	strb	r3, [r7, #7]
 800b3ec:	460b      	mov	r3, r1
 800b3ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b3f0:	79fb      	ldrb	r3, [r7, #7]
 800b3f2:	4a09      	ldr	r2, [pc, #36]	@ (800b418 <disk_ioctl+0x38>)
 800b3f4:	009b      	lsls	r3, r3, #2
 800b3f6:	4413      	add	r3, r2
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	691b      	ldr	r3, [r3, #16]
 800b3fc:	79fa      	ldrb	r2, [r7, #7]
 800b3fe:	4906      	ldr	r1, [pc, #24]	@ (800b418 <disk_ioctl+0x38>)
 800b400:	440a      	add	r2, r1
 800b402:	7a10      	ldrb	r0, [r2, #8]
 800b404:	79b9      	ldrb	r1, [r7, #6]
 800b406:	683a      	ldr	r2, [r7, #0]
 800b408:	4798      	blx	r3
 800b40a:	4603      	mov	r3, r0
 800b40c:	73fb      	strb	r3, [r7, #15]
  return res;
 800b40e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b410:	4618      	mov	r0, r3
 800b412:	3710      	adds	r7, #16
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	20002cc8 	.word	0x20002cc8

0800b41c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b41c:	b480      	push	{r7}
 800b41e:	b085      	sub	sp, #20
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	3301      	adds	r3, #1
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b42c:	89fb      	ldrh	r3, [r7, #14]
 800b42e:	021b      	lsls	r3, r3, #8
 800b430:	b21a      	sxth	r2, r3
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	b21b      	sxth	r3, r3
 800b438:	4313      	orrs	r3, r2
 800b43a:	b21b      	sxth	r3, r3
 800b43c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b43e:	89fb      	ldrh	r3, [r7, #14]
}
 800b440:	4618      	mov	r0, r3
 800b442:	3714      	adds	r7, #20
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr

0800b44c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b44c:	b480      	push	{r7}
 800b44e:	b085      	sub	sp, #20
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	3303      	adds	r3, #3
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	021b      	lsls	r3, r3, #8
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	3202      	adds	r2, #2
 800b464:	7812      	ldrb	r2, [r2, #0]
 800b466:	4313      	orrs	r3, r2
 800b468:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	021b      	lsls	r3, r3, #8
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	3201      	adds	r2, #1
 800b472:	7812      	ldrb	r2, [r2, #0]
 800b474:	4313      	orrs	r3, r2
 800b476:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	021b      	lsls	r3, r3, #8
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	7812      	ldrb	r2, [r2, #0]
 800b480:	4313      	orrs	r3, r2
 800b482:	60fb      	str	r3, [r7, #12]
	return rv;
 800b484:	68fb      	ldr	r3, [r7, #12]
}
 800b486:	4618      	mov	r0, r3
 800b488:	3714      	adds	r7, #20
 800b48a:	46bd      	mov	sp, r7
 800b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b490:	4770      	bx	lr

0800b492 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b492:	b480      	push	{r7}
 800b494:	b083      	sub	sp, #12
 800b496:	af00      	add	r7, sp, #0
 800b498:	6078      	str	r0, [r7, #4]
 800b49a:	460b      	mov	r3, r1
 800b49c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	1c5a      	adds	r2, r3, #1
 800b4a2:	607a      	str	r2, [r7, #4]
 800b4a4:	887a      	ldrh	r2, [r7, #2]
 800b4a6:	b2d2      	uxtb	r2, r2
 800b4a8:	701a      	strb	r2, [r3, #0]
 800b4aa:	887b      	ldrh	r3, [r7, #2]
 800b4ac:	0a1b      	lsrs	r3, r3, #8
 800b4ae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	1c5a      	adds	r2, r3, #1
 800b4b4:	607a      	str	r2, [r7, #4]
 800b4b6:	887a      	ldrh	r2, [r7, #2]
 800b4b8:	b2d2      	uxtb	r2, r2
 800b4ba:	701a      	strb	r2, [r3, #0]
}
 800b4bc:	bf00      	nop
 800b4be:	370c      	adds	r7, #12
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	1c5a      	adds	r2, r3, #1
 800b4d6:	607a      	str	r2, [r7, #4]
 800b4d8:	683a      	ldr	r2, [r7, #0]
 800b4da:	b2d2      	uxtb	r2, r2
 800b4dc:	701a      	strb	r2, [r3, #0]
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	0a1b      	lsrs	r3, r3, #8
 800b4e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	1c5a      	adds	r2, r3, #1
 800b4e8:	607a      	str	r2, [r7, #4]
 800b4ea:	683a      	ldr	r2, [r7, #0]
 800b4ec:	b2d2      	uxtb	r2, r2
 800b4ee:	701a      	strb	r2, [r3, #0]
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	0a1b      	lsrs	r3, r3, #8
 800b4f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	1c5a      	adds	r2, r3, #1
 800b4fa:	607a      	str	r2, [r7, #4]
 800b4fc:	683a      	ldr	r2, [r7, #0]
 800b4fe:	b2d2      	uxtb	r2, r2
 800b500:	701a      	strb	r2, [r3, #0]
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	0a1b      	lsrs	r3, r3, #8
 800b506:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	1c5a      	adds	r2, r3, #1
 800b50c:	607a      	str	r2, [r7, #4]
 800b50e:	683a      	ldr	r2, [r7, #0]
 800b510:	b2d2      	uxtb	r2, r2
 800b512:	701a      	strb	r2, [r3, #0]
}
 800b514:	bf00      	nop
 800b516:	370c      	adds	r7, #12
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b520:	b480      	push	{r7}
 800b522:	b087      	sub	sp, #28
 800b524:	af00      	add	r7, sp, #0
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d00d      	beq.n	800b556 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b53a:	693a      	ldr	r2, [r7, #16]
 800b53c:	1c53      	adds	r3, r2, #1
 800b53e:	613b      	str	r3, [r7, #16]
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	1c59      	adds	r1, r3, #1
 800b544:	6179      	str	r1, [r7, #20]
 800b546:	7812      	ldrb	r2, [r2, #0]
 800b548:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	3b01      	subs	r3, #1
 800b54e:	607b      	str	r3, [r7, #4]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d1f1      	bne.n	800b53a <mem_cpy+0x1a>
	}
}
 800b556:	bf00      	nop
 800b558:	371c      	adds	r7, #28
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr

0800b562 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b562:	b480      	push	{r7}
 800b564:	b087      	sub	sp, #28
 800b566:	af00      	add	r7, sp, #0
 800b568:	60f8      	str	r0, [r7, #12]
 800b56a:	60b9      	str	r1, [r7, #8]
 800b56c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	1c5a      	adds	r2, r3, #1
 800b576:	617a      	str	r2, [r7, #20]
 800b578:	68ba      	ldr	r2, [r7, #8]
 800b57a:	b2d2      	uxtb	r2, r2
 800b57c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	3b01      	subs	r3, #1
 800b582:	607b      	str	r3, [r7, #4]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d1f3      	bne.n	800b572 <mem_set+0x10>
}
 800b58a:	bf00      	nop
 800b58c:	bf00      	nop
 800b58e:	371c      	adds	r7, #28
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr

0800b598 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b598:	b480      	push	{r7}
 800b59a:	b089      	sub	sp, #36	@ 0x24
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	60f8      	str	r0, [r7, #12]
 800b5a0:	60b9      	str	r1, [r7, #8]
 800b5a2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	61fb      	str	r3, [r7, #28]
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	1c5a      	adds	r2, r3, #1
 800b5b4:	61fa      	str	r2, [r7, #28]
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	69bb      	ldr	r3, [r7, #24]
 800b5bc:	1c5a      	adds	r2, r3, #1
 800b5be:	61ba      	str	r2, [r7, #24]
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	1acb      	subs	r3, r1, r3
 800b5c4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	3b01      	subs	r3, #1
 800b5ca:	607b      	str	r3, [r7, #4]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d002      	beq.n	800b5d8 <mem_cmp+0x40>
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d0eb      	beq.n	800b5b0 <mem_cmp+0x18>

	return r;
 800b5d8:	697b      	ldr	r3, [r7, #20]
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3724      	adds	r7, #36	@ 0x24
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr

0800b5e6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b5e6:	b480      	push	{r7}
 800b5e8:	b083      	sub	sp, #12
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
 800b5ee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b5f0:	e002      	b.n	800b5f8 <chk_chr+0x12>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	607b      	str	r3, [r7, #4]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d005      	beq.n	800b60c <chk_chr+0x26>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	781b      	ldrb	r3, [r3, #0]
 800b604:	461a      	mov	r2, r3
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	4293      	cmp	r3, r2
 800b60a:	d1f2      	bne.n	800b5f2 <chk_chr+0xc>
	return *str;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	781b      	ldrb	r3, [r3, #0]
}
 800b610:	4618      	mov	r0, r3
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b085      	sub	sp, #20
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b626:	2300      	movs	r3, #0
 800b628:	60bb      	str	r3, [r7, #8]
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	60fb      	str	r3, [r7, #12]
 800b62e:	e029      	b.n	800b684 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b630:	4a27      	ldr	r2, [pc, #156]	@ (800b6d0 <chk_lock+0xb4>)
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	011b      	lsls	r3, r3, #4
 800b636:	4413      	add	r3, r2
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d01d      	beq.n	800b67a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b63e:	4a24      	ldr	r2, [pc, #144]	@ (800b6d0 <chk_lock+0xb4>)
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	011b      	lsls	r3, r3, #4
 800b644:	4413      	add	r3, r2
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d116      	bne.n	800b67e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b650:	4a1f      	ldr	r2, [pc, #124]	@ (800b6d0 <chk_lock+0xb4>)
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	011b      	lsls	r3, r3, #4
 800b656:	4413      	add	r3, r2
 800b658:	3304      	adds	r3, #4
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b660:	429a      	cmp	r2, r3
 800b662:	d10c      	bne.n	800b67e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b664:	4a1a      	ldr	r2, [pc, #104]	@ (800b6d0 <chk_lock+0xb4>)
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	011b      	lsls	r3, r3, #4
 800b66a:	4413      	add	r3, r2
 800b66c:	3308      	adds	r3, #8
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b674:	429a      	cmp	r2, r3
 800b676:	d102      	bne.n	800b67e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b678:	e007      	b.n	800b68a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b67a:	2301      	movs	r3, #1
 800b67c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	3301      	adds	r3, #1
 800b682:	60fb      	str	r3, [r7, #12]
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2b01      	cmp	r3, #1
 800b688:	d9d2      	bls.n	800b630 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2b02      	cmp	r3, #2
 800b68e:	d109      	bne.n	800b6a4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d102      	bne.n	800b69c <chk_lock+0x80>
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	2b02      	cmp	r3, #2
 800b69a:	d101      	bne.n	800b6a0 <chk_lock+0x84>
 800b69c:	2300      	movs	r3, #0
 800b69e:	e010      	b.n	800b6c2 <chk_lock+0xa6>
 800b6a0:	2312      	movs	r3, #18
 800b6a2:	e00e      	b.n	800b6c2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d108      	bne.n	800b6bc <chk_lock+0xa0>
 800b6aa:	4a09      	ldr	r2, [pc, #36]	@ (800b6d0 <chk_lock+0xb4>)
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	011b      	lsls	r3, r3, #4
 800b6b0:	4413      	add	r3, r2
 800b6b2:	330c      	adds	r3, #12
 800b6b4:	881b      	ldrh	r3, [r3, #0]
 800b6b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6ba:	d101      	bne.n	800b6c0 <chk_lock+0xa4>
 800b6bc:	2310      	movs	r3, #16
 800b6be:	e000      	b.n	800b6c2 <chk_lock+0xa6>
 800b6c0:	2300      	movs	r3, #0
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3714      	adds	r7, #20
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr
 800b6ce:	bf00      	nop
 800b6d0:	20002ca8 	.word	0x20002ca8

0800b6d4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	607b      	str	r3, [r7, #4]
 800b6de:	e002      	b.n	800b6e6 <enq_lock+0x12>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	607b      	str	r3, [r7, #4]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	d806      	bhi.n	800b6fa <enq_lock+0x26>
 800b6ec:	4a09      	ldr	r2, [pc, #36]	@ (800b714 <enq_lock+0x40>)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	011b      	lsls	r3, r3, #4
 800b6f2:	4413      	add	r3, r2
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d1f2      	bne.n	800b6e0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2b02      	cmp	r3, #2
 800b6fe:	bf14      	ite	ne
 800b700:	2301      	movne	r3, #1
 800b702:	2300      	moveq	r3, #0
 800b704:	b2db      	uxtb	r3, r3
}
 800b706:	4618      	mov	r0, r3
 800b708:	370c      	adds	r7, #12
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr
 800b712:	bf00      	nop
 800b714:	20002ca8 	.word	0x20002ca8

0800b718 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b718:	b480      	push	{r7}
 800b71a:	b085      	sub	sp, #20
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b722:	2300      	movs	r3, #0
 800b724:	60fb      	str	r3, [r7, #12]
 800b726:	e01f      	b.n	800b768 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b728:	4a41      	ldr	r2, [pc, #260]	@ (800b830 <inc_lock+0x118>)
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	011b      	lsls	r3, r3, #4
 800b72e:	4413      	add	r3, r2
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	429a      	cmp	r2, r3
 800b738:	d113      	bne.n	800b762 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b73a:	4a3d      	ldr	r2, [pc, #244]	@ (800b830 <inc_lock+0x118>)
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	011b      	lsls	r3, r3, #4
 800b740:	4413      	add	r3, r2
 800b742:	3304      	adds	r3, #4
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d109      	bne.n	800b762 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b74e:	4a38      	ldr	r2, [pc, #224]	@ (800b830 <inc_lock+0x118>)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	011b      	lsls	r3, r3, #4
 800b754:	4413      	add	r3, r2
 800b756:	3308      	adds	r3, #8
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b75e:	429a      	cmp	r2, r3
 800b760:	d006      	beq.n	800b770 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	3301      	adds	r3, #1
 800b766:	60fb      	str	r3, [r7, #12]
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d9dc      	bls.n	800b728 <inc_lock+0x10>
 800b76e:	e000      	b.n	800b772 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b770:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2b02      	cmp	r3, #2
 800b776:	d132      	bne.n	800b7de <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b778:	2300      	movs	r3, #0
 800b77a:	60fb      	str	r3, [r7, #12]
 800b77c:	e002      	b.n	800b784 <inc_lock+0x6c>
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	3301      	adds	r3, #1
 800b782:	60fb      	str	r3, [r7, #12]
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	2b01      	cmp	r3, #1
 800b788:	d806      	bhi.n	800b798 <inc_lock+0x80>
 800b78a:	4a29      	ldr	r2, [pc, #164]	@ (800b830 <inc_lock+0x118>)
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	011b      	lsls	r3, r3, #4
 800b790:	4413      	add	r3, r2
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d1f2      	bne.n	800b77e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2b02      	cmp	r3, #2
 800b79c:	d101      	bne.n	800b7a2 <inc_lock+0x8a>
 800b79e:	2300      	movs	r3, #0
 800b7a0:	e040      	b.n	800b824 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681a      	ldr	r2, [r3, #0]
 800b7a6:	4922      	ldr	r1, [pc, #136]	@ (800b830 <inc_lock+0x118>)
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	011b      	lsls	r3, r3, #4
 800b7ac:	440b      	add	r3, r1
 800b7ae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	689a      	ldr	r2, [r3, #8]
 800b7b4:	491e      	ldr	r1, [pc, #120]	@ (800b830 <inc_lock+0x118>)
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	011b      	lsls	r3, r3, #4
 800b7ba:	440b      	add	r3, r1
 800b7bc:	3304      	adds	r3, #4
 800b7be:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	695a      	ldr	r2, [r3, #20]
 800b7c4:	491a      	ldr	r1, [pc, #104]	@ (800b830 <inc_lock+0x118>)
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	011b      	lsls	r3, r3, #4
 800b7ca:	440b      	add	r3, r1
 800b7cc:	3308      	adds	r3, #8
 800b7ce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b7d0:	4a17      	ldr	r2, [pc, #92]	@ (800b830 <inc_lock+0x118>)
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	011b      	lsls	r3, r3, #4
 800b7d6:	4413      	add	r3, r2
 800b7d8:	330c      	adds	r3, #12
 800b7da:	2200      	movs	r2, #0
 800b7dc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d009      	beq.n	800b7f8 <inc_lock+0xe0>
 800b7e4:	4a12      	ldr	r2, [pc, #72]	@ (800b830 <inc_lock+0x118>)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	011b      	lsls	r3, r3, #4
 800b7ea:	4413      	add	r3, r2
 800b7ec:	330c      	adds	r3, #12
 800b7ee:	881b      	ldrh	r3, [r3, #0]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d001      	beq.n	800b7f8 <inc_lock+0xe0>
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	e015      	b.n	800b824 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d108      	bne.n	800b810 <inc_lock+0xf8>
 800b7fe:	4a0c      	ldr	r2, [pc, #48]	@ (800b830 <inc_lock+0x118>)
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	011b      	lsls	r3, r3, #4
 800b804:	4413      	add	r3, r2
 800b806:	330c      	adds	r3, #12
 800b808:	881b      	ldrh	r3, [r3, #0]
 800b80a:	3301      	adds	r3, #1
 800b80c:	b29a      	uxth	r2, r3
 800b80e:	e001      	b.n	800b814 <inc_lock+0xfc>
 800b810:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b814:	4906      	ldr	r1, [pc, #24]	@ (800b830 <inc_lock+0x118>)
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	011b      	lsls	r3, r3, #4
 800b81a:	440b      	add	r3, r1
 800b81c:	330c      	adds	r3, #12
 800b81e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	3301      	adds	r3, #1
}
 800b824:	4618      	mov	r0, r3
 800b826:	3714      	adds	r7, #20
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr
 800b830:	20002ca8 	.word	0x20002ca8

0800b834 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b834:	b480      	push	{r7}
 800b836:	b085      	sub	sp, #20
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	3b01      	subs	r3, #1
 800b840:	607b      	str	r3, [r7, #4]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2b01      	cmp	r3, #1
 800b846:	d825      	bhi.n	800b894 <dec_lock+0x60>
		n = Files[i].ctr;
 800b848:	4a17      	ldr	r2, [pc, #92]	@ (800b8a8 <dec_lock+0x74>)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	011b      	lsls	r3, r3, #4
 800b84e:	4413      	add	r3, r2
 800b850:	330c      	adds	r3, #12
 800b852:	881b      	ldrh	r3, [r3, #0]
 800b854:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b856:	89fb      	ldrh	r3, [r7, #14]
 800b858:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b85c:	d101      	bne.n	800b862 <dec_lock+0x2e>
 800b85e:	2300      	movs	r3, #0
 800b860:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b862:	89fb      	ldrh	r3, [r7, #14]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d002      	beq.n	800b86e <dec_lock+0x3a>
 800b868:	89fb      	ldrh	r3, [r7, #14]
 800b86a:	3b01      	subs	r3, #1
 800b86c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b86e:	4a0e      	ldr	r2, [pc, #56]	@ (800b8a8 <dec_lock+0x74>)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	011b      	lsls	r3, r3, #4
 800b874:	4413      	add	r3, r2
 800b876:	330c      	adds	r3, #12
 800b878:	89fa      	ldrh	r2, [r7, #14]
 800b87a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b87c:	89fb      	ldrh	r3, [r7, #14]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d105      	bne.n	800b88e <dec_lock+0x5a>
 800b882:	4a09      	ldr	r2, [pc, #36]	@ (800b8a8 <dec_lock+0x74>)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	011b      	lsls	r3, r3, #4
 800b888:	4413      	add	r3, r2
 800b88a:	2200      	movs	r2, #0
 800b88c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b88e:	2300      	movs	r3, #0
 800b890:	737b      	strb	r3, [r7, #13]
 800b892:	e001      	b.n	800b898 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b894:	2302      	movs	r3, #2
 800b896:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b898:	7b7b      	ldrb	r3, [r7, #13]
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3714      	adds	r7, #20
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a4:	4770      	bx	lr
 800b8a6:	bf00      	nop
 800b8a8:	20002ca8 	.word	0x20002ca8

0800b8ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b085      	sub	sp, #20
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	60fb      	str	r3, [r7, #12]
 800b8b8:	e010      	b.n	800b8dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b8ba:	4a0d      	ldr	r2, [pc, #52]	@ (800b8f0 <clear_lock+0x44>)
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	011b      	lsls	r3, r3, #4
 800b8c0:	4413      	add	r3, r2
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d105      	bne.n	800b8d6 <clear_lock+0x2a>
 800b8ca:	4a09      	ldr	r2, [pc, #36]	@ (800b8f0 <clear_lock+0x44>)
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	011b      	lsls	r3, r3, #4
 800b8d0:	4413      	add	r3, r2
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	3301      	adds	r3, #1
 800b8da:	60fb      	str	r3, [r7, #12]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d9eb      	bls.n	800b8ba <clear_lock+0xe>
	}
}
 800b8e2:	bf00      	nop
 800b8e4:	bf00      	nop
 800b8e6:	3714      	adds	r7, #20
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr
 800b8f0:	20002ca8 	.word	0x20002ca8

0800b8f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b086      	sub	sp, #24
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	78db      	ldrb	r3, [r3, #3]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d034      	beq.n	800b972 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b90c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	7858      	ldrb	r0, [r3, #1]
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b918:	2301      	movs	r3, #1
 800b91a:	697a      	ldr	r2, [r7, #20]
 800b91c:	f7ff fd40 	bl	800b3a0 <disk_write>
 800b920:	4603      	mov	r3, r0
 800b922:	2b00      	cmp	r3, #0
 800b924:	d002      	beq.n	800b92c <sync_window+0x38>
			res = FR_DISK_ERR;
 800b926:	2301      	movs	r3, #1
 800b928:	73fb      	strb	r3, [r7, #15]
 800b92a:	e022      	b.n	800b972 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2200      	movs	r2, #0
 800b930:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b936:	697a      	ldr	r2, [r7, #20]
 800b938:	1ad2      	subs	r2, r2, r3
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	69db      	ldr	r3, [r3, #28]
 800b93e:	429a      	cmp	r2, r3
 800b940:	d217      	bcs.n	800b972 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	789b      	ldrb	r3, [r3, #2]
 800b946:	613b      	str	r3, [r7, #16]
 800b948:	e010      	b.n	800b96c <sync_window+0x78>
					wsect += fs->fsize;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	69db      	ldr	r3, [r3, #28]
 800b94e:	697a      	ldr	r2, [r7, #20]
 800b950:	4413      	add	r3, r2
 800b952:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	7858      	ldrb	r0, [r3, #1]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b95e:	2301      	movs	r3, #1
 800b960:	697a      	ldr	r2, [r7, #20]
 800b962:	f7ff fd1d 	bl	800b3a0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	3b01      	subs	r3, #1
 800b96a:	613b      	str	r3, [r7, #16]
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d8eb      	bhi.n	800b94a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b972:	7bfb      	ldrb	r3, [r7, #15]
}
 800b974:	4618      	mov	r0, r3
 800b976:	3718      	adds	r7, #24
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b084      	sub	sp, #16
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b986:	2300      	movs	r3, #0
 800b988:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b98e:	683a      	ldr	r2, [r7, #0]
 800b990:	429a      	cmp	r2, r3
 800b992:	d01b      	beq.n	800b9cc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f7ff ffad 	bl	800b8f4 <sync_window>
 800b99a:	4603      	mov	r3, r0
 800b99c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b99e:	7bfb      	ldrb	r3, [r7, #15]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d113      	bne.n	800b9cc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	7858      	ldrb	r0, [r3, #1]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	683a      	ldr	r2, [r7, #0]
 800b9b2:	f7ff fcd5 	bl	800b360 <disk_read>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d004      	beq.n	800b9c6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b9bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b9c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	683a      	ldr	r2, [r7, #0]
 800b9ca:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800b9cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3710      	adds	r7, #16
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
	...

0800b9d8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f7ff ff87 	bl	800b8f4 <sync_window>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b9ea:	7bfb      	ldrb	r3, [r7, #15]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d159      	bne.n	800baa4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	781b      	ldrb	r3, [r3, #0]
 800b9f4:	2b03      	cmp	r3, #3
 800b9f6:	d149      	bne.n	800ba8c <sync_fs+0xb4>
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	791b      	ldrb	r3, [r3, #4]
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d145      	bne.n	800ba8c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	899b      	ldrh	r3, [r3, #12]
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	2100      	movs	r1, #0
 800ba0e:	f7ff fda8 	bl	800b562 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	3334      	adds	r3, #52	@ 0x34
 800ba16:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ba1a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7ff fd37 	bl	800b492 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	3334      	adds	r3, #52	@ 0x34
 800ba28:	4921      	ldr	r1, [pc, #132]	@ (800bab0 <sync_fs+0xd8>)
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f7ff fd4c 	bl	800b4c8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	3334      	adds	r3, #52	@ 0x34
 800ba34:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ba38:	491e      	ldr	r1, [pc, #120]	@ (800bab4 <sync_fs+0xdc>)
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7ff fd44 	bl	800b4c8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	3334      	adds	r3, #52	@ 0x34
 800ba44:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	695b      	ldr	r3, [r3, #20]
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	4610      	mov	r0, r2
 800ba50:	f7ff fd3a 	bl	800b4c8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	3334      	adds	r3, #52	@ 0x34
 800ba58:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	691b      	ldr	r3, [r3, #16]
 800ba60:	4619      	mov	r1, r3
 800ba62:	4610      	mov	r0, r2
 800ba64:	f7ff fd30 	bl	800b4c8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6a1b      	ldr	r3, [r3, #32]
 800ba6c:	1c5a      	adds	r2, r3, #1
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	7858      	ldrb	r0, [r3, #1]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba80:	2301      	movs	r3, #1
 800ba82:	f7ff fc8d 	bl	800b3a0 <disk_write>
			fs->fsi_flag = 0;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	785b      	ldrb	r3, [r3, #1]
 800ba90:	2200      	movs	r2, #0
 800ba92:	2100      	movs	r1, #0
 800ba94:	4618      	mov	r0, r3
 800ba96:	f7ff fca3 	bl	800b3e0 <disk_ioctl>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d001      	beq.n	800baa4 <sync_fs+0xcc>
 800baa0:	2301      	movs	r3, #1
 800baa2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800baa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3710      	adds	r7, #16
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	41615252 	.word	0x41615252
 800bab4:	61417272 	.word	0x61417272

0800bab8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bab8:	b480      	push	{r7}
 800baba:	b083      	sub	sp, #12
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	3b02      	subs	r3, #2
 800bac6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	699b      	ldr	r3, [r3, #24]
 800bacc:	3b02      	subs	r3, #2
 800bace:	683a      	ldr	r2, [r7, #0]
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d301      	bcc.n	800bad8 <clust2sect+0x20>
 800bad4:	2300      	movs	r3, #0
 800bad6:	e008      	b.n	800baea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	895b      	ldrh	r3, [r3, #10]
 800badc:	461a      	mov	r2, r3
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	fb03 f202 	mul.w	r2, r3, r2
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bae8:	4413      	add	r3, r2
}
 800baea:	4618      	mov	r0, r3
 800baec:	370c      	adds	r7, #12
 800baee:	46bd      	mov	sp, r7
 800baf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf4:	4770      	bx	lr

0800baf6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800baf6:	b580      	push	{r7, lr}
 800baf8:	b086      	sub	sp, #24
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	6078      	str	r0, [r7, #4]
 800bafe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d904      	bls.n	800bb16 <get_fat+0x20>
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	699b      	ldr	r3, [r3, #24]
 800bb10:	683a      	ldr	r2, [r7, #0]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d302      	bcc.n	800bb1c <get_fat+0x26>
		val = 1;	/* Internal error */
 800bb16:	2301      	movs	r3, #1
 800bb18:	617b      	str	r3, [r7, #20]
 800bb1a:	e0ba      	b.n	800bc92 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bb1c:	f04f 33ff 	mov.w	r3, #4294967295
 800bb20:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	781b      	ldrb	r3, [r3, #0]
 800bb26:	2b03      	cmp	r3, #3
 800bb28:	f000 8082 	beq.w	800bc30 <get_fat+0x13a>
 800bb2c:	2b03      	cmp	r3, #3
 800bb2e:	f300 80a6 	bgt.w	800bc7e <get_fat+0x188>
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d002      	beq.n	800bb3c <get_fat+0x46>
 800bb36:	2b02      	cmp	r3, #2
 800bb38:	d055      	beq.n	800bbe6 <get_fat+0xf0>
 800bb3a:	e0a0      	b.n	800bc7e <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	60fb      	str	r3, [r7, #12]
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	085b      	lsrs	r3, r3, #1
 800bb44:	68fa      	ldr	r2, [r7, #12]
 800bb46:	4413      	add	r3, r2
 800bb48:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	899b      	ldrh	r3, [r3, #12]
 800bb52:	4619      	mov	r1, r3
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb5a:	4413      	add	r3, r2
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	6938      	ldr	r0, [r7, #16]
 800bb60:	f7ff ff0c 	bl	800b97c <move_window>
 800bb64:	4603      	mov	r3, r0
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	f040 808c 	bne.w	800bc84 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	1c5a      	adds	r2, r3, #1
 800bb70:	60fa      	str	r2, [r7, #12]
 800bb72:	693a      	ldr	r2, [r7, #16]
 800bb74:	8992      	ldrh	r2, [r2, #12]
 800bb76:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb7a:	fb01 f202 	mul.w	r2, r1, r2
 800bb7e:	1a9b      	subs	r3, r3, r2
 800bb80:	693a      	ldr	r2, [r7, #16]
 800bb82:	4413      	add	r3, r2
 800bb84:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bb88:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	899b      	ldrh	r3, [r3, #12]
 800bb92:	4619      	mov	r1, r3
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb9a:	4413      	add	r3, r2
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	6938      	ldr	r0, [r7, #16]
 800bba0:	f7ff feec 	bl	800b97c <move_window>
 800bba4:	4603      	mov	r3, r0
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d16e      	bne.n	800bc88 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	899b      	ldrh	r3, [r3, #12]
 800bbae:	461a      	mov	r2, r3
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	fbb3 f1f2 	udiv	r1, r3, r2
 800bbb6:	fb01 f202 	mul.w	r2, r1, r2
 800bbba:	1a9b      	subs	r3, r3, r2
 800bbbc:	693a      	ldr	r2, [r7, #16]
 800bbbe:	4413      	add	r3, r2
 800bbc0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bbc4:	021b      	lsls	r3, r3, #8
 800bbc6:	68ba      	ldr	r2, [r7, #8]
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	f003 0301 	and.w	r3, r3, #1
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d002      	beq.n	800bbdc <get_fat+0xe6>
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	091b      	lsrs	r3, r3, #4
 800bbda:	e002      	b.n	800bbe2 <get_fat+0xec>
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bbe2:	617b      	str	r3, [r7, #20]
			break;
 800bbe4:	e055      	b.n	800bc92 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	899b      	ldrh	r3, [r3, #12]
 800bbee:	085b      	lsrs	r3, r3, #1
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	fbb3 f3f1 	udiv	r3, r3, r1
 800bbfa:	4413      	add	r3, r2
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	6938      	ldr	r0, [r7, #16]
 800bc00:	f7ff febc 	bl	800b97c <move_window>
 800bc04:	4603      	mov	r3, r0
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d140      	bne.n	800bc8c <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	005b      	lsls	r3, r3, #1
 800bc14:	693a      	ldr	r2, [r7, #16]
 800bc16:	8992      	ldrh	r2, [r2, #12]
 800bc18:	fbb3 f0f2 	udiv	r0, r3, r2
 800bc1c:	fb00 f202 	mul.w	r2, r0, r2
 800bc20:	1a9b      	subs	r3, r3, r2
 800bc22:	440b      	add	r3, r1
 800bc24:	4618      	mov	r0, r3
 800bc26:	f7ff fbf9 	bl	800b41c <ld_word>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	617b      	str	r3, [r7, #20]
			break;
 800bc2e:	e030      	b.n	800bc92 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	899b      	ldrh	r3, [r3, #12]
 800bc38:	089b      	lsrs	r3, r3, #2
 800bc3a:	b29b      	uxth	r3, r3
 800bc3c:	4619      	mov	r1, r3
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	fbb3 f3f1 	udiv	r3, r3, r1
 800bc44:	4413      	add	r3, r2
 800bc46:	4619      	mov	r1, r3
 800bc48:	6938      	ldr	r0, [r7, #16]
 800bc4a:	f7ff fe97 	bl	800b97c <move_window>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d11d      	bne.n	800bc90 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	009b      	lsls	r3, r3, #2
 800bc5e:	693a      	ldr	r2, [r7, #16]
 800bc60:	8992      	ldrh	r2, [r2, #12]
 800bc62:	fbb3 f0f2 	udiv	r0, r3, r2
 800bc66:	fb00 f202 	mul.w	r2, r0, r2
 800bc6a:	1a9b      	subs	r3, r3, r2
 800bc6c:	440b      	add	r3, r1
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f7ff fbec 	bl	800b44c <ld_dword>
 800bc74:	4603      	mov	r3, r0
 800bc76:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800bc7a:	617b      	str	r3, [r7, #20]
			break;
 800bc7c:	e009      	b.n	800bc92 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bc7e:	2301      	movs	r3, #1
 800bc80:	617b      	str	r3, [r7, #20]
 800bc82:	e006      	b.n	800bc92 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc84:	bf00      	nop
 800bc86:	e004      	b.n	800bc92 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc88:	bf00      	nop
 800bc8a:	e002      	b.n	800bc92 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bc8c:	bf00      	nop
 800bc8e:	e000      	b.n	800bc92 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bc90:	bf00      	nop
		}
	}

	return val;
 800bc92:	697b      	ldr	r3, [r7, #20]
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3718      	adds	r7, #24
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bc9c:	b590      	push	{r4, r7, lr}
 800bc9e:	b089      	sub	sp, #36	@ 0x24
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	60f8      	str	r0, [r7, #12]
 800bca4:	60b9      	str	r1, [r7, #8]
 800bca6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bca8:	2302      	movs	r3, #2
 800bcaa:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	2b01      	cmp	r3, #1
 800bcb0:	f240 8109 	bls.w	800bec6 <put_fat+0x22a>
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	699b      	ldr	r3, [r3, #24]
 800bcb8:	68ba      	ldr	r2, [r7, #8]
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	f080 8103 	bcs.w	800bec6 <put_fat+0x22a>
		switch (fs->fs_type) {
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	2b03      	cmp	r3, #3
 800bcc6:	f000 80b6 	beq.w	800be36 <put_fat+0x19a>
 800bcca:	2b03      	cmp	r3, #3
 800bccc:	f300 80fb 	bgt.w	800bec6 <put_fat+0x22a>
 800bcd0:	2b01      	cmp	r3, #1
 800bcd2:	d003      	beq.n	800bcdc <put_fat+0x40>
 800bcd4:	2b02      	cmp	r3, #2
 800bcd6:	f000 8083 	beq.w	800bde0 <put_fat+0x144>
 800bcda:	e0f4      	b.n	800bec6 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	61bb      	str	r3, [r7, #24]
 800bce0:	69bb      	ldr	r3, [r7, #24]
 800bce2:	085b      	lsrs	r3, r3, #1
 800bce4:	69ba      	ldr	r2, [r7, #24]
 800bce6:	4413      	add	r3, r2
 800bce8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	899b      	ldrh	r3, [r3, #12]
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	69bb      	ldr	r3, [r7, #24]
 800bcf6:	fbb3 f3f1 	udiv	r3, r3, r1
 800bcfa:	4413      	add	r3, r2
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	68f8      	ldr	r0, [r7, #12]
 800bd00:	f7ff fe3c 	bl	800b97c <move_window>
 800bd04:	4603      	mov	r3, r0
 800bd06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd08:	7ffb      	ldrb	r3, [r7, #31]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	f040 80d4 	bne.w	800beb8 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bd16:	69bb      	ldr	r3, [r7, #24]
 800bd18:	1c5a      	adds	r2, r3, #1
 800bd1a:	61ba      	str	r2, [r7, #24]
 800bd1c:	68fa      	ldr	r2, [r7, #12]
 800bd1e:	8992      	ldrh	r2, [r2, #12]
 800bd20:	fbb3 f0f2 	udiv	r0, r3, r2
 800bd24:	fb00 f202 	mul.w	r2, r0, r2
 800bd28:	1a9b      	subs	r3, r3, r2
 800bd2a:	440b      	add	r3, r1
 800bd2c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	f003 0301 	and.w	r3, r3, #1
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d00d      	beq.n	800bd54 <put_fat+0xb8>
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	b25b      	sxtb	r3, r3
 800bd3e:	f003 030f 	and.w	r3, r3, #15
 800bd42:	b25a      	sxtb	r2, r3
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	b2db      	uxtb	r3, r3
 800bd48:	011b      	lsls	r3, r3, #4
 800bd4a:	b25b      	sxtb	r3, r3
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	b25b      	sxtb	r3, r3
 800bd50:	b2db      	uxtb	r3, r3
 800bd52:	e001      	b.n	800bd58 <put_fat+0xbc>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	697a      	ldr	r2, [r7, #20]
 800bd5a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	2201      	movs	r2, #1
 800bd60:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	899b      	ldrh	r3, [r3, #12]
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	69bb      	ldr	r3, [r7, #24]
 800bd6e:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd72:	4413      	add	r3, r2
 800bd74:	4619      	mov	r1, r3
 800bd76:	68f8      	ldr	r0, [r7, #12]
 800bd78:	f7ff fe00 	bl	800b97c <move_window>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd80:	7ffb      	ldrb	r3, [r7, #31]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	f040 809a 	bne.w	800bebc <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	899b      	ldrh	r3, [r3, #12]
 800bd92:	461a      	mov	r2, r3
 800bd94:	69bb      	ldr	r3, [r7, #24]
 800bd96:	fbb3 f0f2 	udiv	r0, r3, r2
 800bd9a:	fb00 f202 	mul.w	r2, r0, r2
 800bd9e:	1a9b      	subs	r3, r3, r2
 800bda0:	440b      	add	r3, r1
 800bda2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	f003 0301 	and.w	r3, r3, #1
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d003      	beq.n	800bdb6 <put_fat+0x11a>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	091b      	lsrs	r3, r3, #4
 800bdb2:	b2db      	uxtb	r3, r3
 800bdb4:	e00e      	b.n	800bdd4 <put_fat+0x138>
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	b25b      	sxtb	r3, r3
 800bdbc:	f023 030f 	bic.w	r3, r3, #15
 800bdc0:	b25a      	sxtb	r2, r3
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	0a1b      	lsrs	r3, r3, #8
 800bdc6:	b25b      	sxtb	r3, r3
 800bdc8:	f003 030f 	and.w	r3, r3, #15
 800bdcc:	b25b      	sxtb	r3, r3
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	b25b      	sxtb	r3, r3
 800bdd2:	b2db      	uxtb	r3, r3
 800bdd4:	697a      	ldr	r2, [r7, #20]
 800bdd6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2201      	movs	r2, #1
 800bddc:	70da      	strb	r2, [r3, #3]
			break;
 800bdde:	e072      	b.n	800bec6 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	899b      	ldrh	r3, [r3, #12]
 800bde8:	085b      	lsrs	r3, r3, #1
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	4619      	mov	r1, r3
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	fbb3 f3f1 	udiv	r3, r3, r1
 800bdf4:	4413      	add	r3, r2
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	68f8      	ldr	r0, [r7, #12]
 800bdfa:	f7ff fdbf 	bl	800b97c <move_window>
 800bdfe:	4603      	mov	r3, r0
 800be00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be02:	7ffb      	ldrb	r3, [r7, #31]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d15b      	bne.n	800bec0 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	005b      	lsls	r3, r3, #1
 800be12:	68fa      	ldr	r2, [r7, #12]
 800be14:	8992      	ldrh	r2, [r2, #12]
 800be16:	fbb3 f0f2 	udiv	r0, r3, r2
 800be1a:	fb00 f202 	mul.w	r2, r0, r2
 800be1e:	1a9b      	subs	r3, r3, r2
 800be20:	440b      	add	r3, r1
 800be22:	687a      	ldr	r2, [r7, #4]
 800be24:	b292      	uxth	r2, r2
 800be26:	4611      	mov	r1, r2
 800be28:	4618      	mov	r0, r3
 800be2a:	f7ff fb32 	bl	800b492 <st_word>
			fs->wflag = 1;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	2201      	movs	r2, #1
 800be32:	70da      	strb	r2, [r3, #3]
			break;
 800be34:	e047      	b.n	800bec6 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	899b      	ldrh	r3, [r3, #12]
 800be3e:	089b      	lsrs	r3, r3, #2
 800be40:	b29b      	uxth	r3, r3
 800be42:	4619      	mov	r1, r3
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	fbb3 f3f1 	udiv	r3, r3, r1
 800be4a:	4413      	add	r3, r2
 800be4c:	4619      	mov	r1, r3
 800be4e:	68f8      	ldr	r0, [r7, #12]
 800be50:	f7ff fd94 	bl	800b97c <move_window>
 800be54:	4603      	mov	r3, r0
 800be56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be58:	7ffb      	ldrb	r3, [r7, #31]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d132      	bne.n	800bec4 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	009b      	lsls	r3, r3, #2
 800be6e:	68fa      	ldr	r2, [r7, #12]
 800be70:	8992      	ldrh	r2, [r2, #12]
 800be72:	fbb3 f0f2 	udiv	r0, r3, r2
 800be76:	fb00 f202 	mul.w	r2, r0, r2
 800be7a:	1a9b      	subs	r3, r3, r2
 800be7c:	440b      	add	r3, r1
 800be7e:	4618      	mov	r0, r3
 800be80:	f7ff fae4 	bl	800b44c <ld_dword>
 800be84:	4603      	mov	r3, r0
 800be86:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800be8a:	4323      	orrs	r3, r4
 800be8c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	68fa      	ldr	r2, [r7, #12]
 800be9a:	8992      	ldrh	r2, [r2, #12]
 800be9c:	fbb3 f0f2 	udiv	r0, r3, r2
 800bea0:	fb00 f202 	mul.w	r2, r0, r2
 800bea4:	1a9b      	subs	r3, r3, r2
 800bea6:	440b      	add	r3, r1
 800bea8:	6879      	ldr	r1, [r7, #4]
 800beaa:	4618      	mov	r0, r3
 800beac:	f7ff fb0c 	bl	800b4c8 <st_dword>
			fs->wflag = 1;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	2201      	movs	r2, #1
 800beb4:	70da      	strb	r2, [r3, #3]
			break;
 800beb6:	e006      	b.n	800bec6 <put_fat+0x22a>
			if (res != FR_OK) break;
 800beb8:	bf00      	nop
 800beba:	e004      	b.n	800bec6 <put_fat+0x22a>
			if (res != FR_OK) break;
 800bebc:	bf00      	nop
 800bebe:	e002      	b.n	800bec6 <put_fat+0x22a>
			if (res != FR_OK) break;
 800bec0:	bf00      	nop
 800bec2:	e000      	b.n	800bec6 <put_fat+0x22a>
			if (res != FR_OK) break;
 800bec4:	bf00      	nop
		}
	}
	return res;
 800bec6:	7ffb      	ldrb	r3, [r7, #31]
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3724      	adds	r7, #36	@ 0x24
 800becc:	46bd      	mov	sp, r7
 800bece:	bd90      	pop	{r4, r7, pc}

0800bed0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b088      	sub	sp, #32
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	60f8      	str	r0, [r7, #12]
 800bed8:	60b9      	str	r1, [r7, #8]
 800beda:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bedc:	2300      	movs	r3, #0
 800bede:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d904      	bls.n	800bef6 <remove_chain+0x26>
 800beec:	69bb      	ldr	r3, [r7, #24]
 800beee:	699b      	ldr	r3, [r3, #24]
 800bef0:	68ba      	ldr	r2, [r7, #8]
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d301      	bcc.n	800befa <remove_chain+0x2a>
 800bef6:	2302      	movs	r3, #2
 800bef8:	e04b      	b.n	800bf92 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d00c      	beq.n	800bf1a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bf00:	f04f 32ff 	mov.w	r2, #4294967295
 800bf04:	6879      	ldr	r1, [r7, #4]
 800bf06:	69b8      	ldr	r0, [r7, #24]
 800bf08:	f7ff fec8 	bl	800bc9c <put_fat>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bf10:	7ffb      	ldrb	r3, [r7, #31]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d001      	beq.n	800bf1a <remove_chain+0x4a>
 800bf16:	7ffb      	ldrb	r3, [r7, #31]
 800bf18:	e03b      	b.n	800bf92 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bf1a:	68b9      	ldr	r1, [r7, #8]
 800bf1c:	68f8      	ldr	r0, [r7, #12]
 800bf1e:	f7ff fdea 	bl	800baf6 <get_fat>
 800bf22:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d031      	beq.n	800bf8e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d101      	bne.n	800bf34 <remove_chain+0x64>
 800bf30:	2302      	movs	r3, #2
 800bf32:	e02e      	b.n	800bf92 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf3a:	d101      	bne.n	800bf40 <remove_chain+0x70>
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	e028      	b.n	800bf92 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bf40:	2200      	movs	r2, #0
 800bf42:	68b9      	ldr	r1, [r7, #8]
 800bf44:	69b8      	ldr	r0, [r7, #24]
 800bf46:	f7ff fea9 	bl	800bc9c <put_fat>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bf4e:	7ffb      	ldrb	r3, [r7, #31]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d001      	beq.n	800bf58 <remove_chain+0x88>
 800bf54:	7ffb      	ldrb	r3, [r7, #31]
 800bf56:	e01c      	b.n	800bf92 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	695a      	ldr	r2, [r3, #20]
 800bf5c:	69bb      	ldr	r3, [r7, #24]
 800bf5e:	699b      	ldr	r3, [r3, #24]
 800bf60:	3b02      	subs	r3, #2
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d20b      	bcs.n	800bf7e <remove_chain+0xae>
			fs->free_clst++;
 800bf66:	69bb      	ldr	r3, [r7, #24]
 800bf68:	695b      	ldr	r3, [r3, #20]
 800bf6a:	1c5a      	adds	r2, r3, #1
 800bf6c:	69bb      	ldr	r3, [r7, #24]
 800bf6e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	791b      	ldrb	r3, [r3, #4]
 800bf74:	f043 0301 	orr.w	r3, r3, #1
 800bf78:	b2da      	uxtb	r2, r3
 800bf7a:	69bb      	ldr	r3, [r7, #24]
 800bf7c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bf82:	69bb      	ldr	r3, [r7, #24]
 800bf84:	699b      	ldr	r3, [r3, #24]
 800bf86:	68ba      	ldr	r2, [r7, #8]
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d3c6      	bcc.n	800bf1a <remove_chain+0x4a>
 800bf8c:	e000      	b.n	800bf90 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bf8e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bf90:	2300      	movs	r3, #0
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3720      	adds	r7, #32
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}

0800bf9a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bf9a:	b580      	push	{r7, lr}
 800bf9c:	b088      	sub	sp, #32
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	6078      	str	r0, [r7, #4]
 800bfa2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d10d      	bne.n	800bfcc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	691b      	ldr	r3, [r3, #16]
 800bfb4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bfb6:	69bb      	ldr	r3, [r7, #24]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d004      	beq.n	800bfc6 <create_chain+0x2c>
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	699b      	ldr	r3, [r3, #24]
 800bfc0:	69ba      	ldr	r2, [r7, #24]
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d31b      	bcc.n	800bffe <create_chain+0x64>
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	61bb      	str	r3, [r7, #24]
 800bfca:	e018      	b.n	800bffe <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bfcc:	6839      	ldr	r1, [r7, #0]
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f7ff fd91 	bl	800baf6 <get_fat>
 800bfd4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	d801      	bhi.n	800bfe0 <create_chain+0x46>
 800bfdc:	2301      	movs	r3, #1
 800bfde:	e070      	b.n	800c0c2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfe6:	d101      	bne.n	800bfec <create_chain+0x52>
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	e06a      	b.n	800c0c2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	699b      	ldr	r3, [r3, #24]
 800bff0:	68fa      	ldr	r2, [r7, #12]
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d201      	bcs.n	800bffa <create_chain+0x60>
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	e063      	b.n	800c0c2 <create_chain+0x128>
		scl = clst;
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bffe:	69bb      	ldr	r3, [r7, #24]
 800c000:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c002:	69fb      	ldr	r3, [r7, #28]
 800c004:	3301      	adds	r3, #1
 800c006:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	699b      	ldr	r3, [r3, #24]
 800c00c:	69fa      	ldr	r2, [r7, #28]
 800c00e:	429a      	cmp	r2, r3
 800c010:	d307      	bcc.n	800c022 <create_chain+0x88>
				ncl = 2;
 800c012:	2302      	movs	r3, #2
 800c014:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c016:	69fa      	ldr	r2, [r7, #28]
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d901      	bls.n	800c022 <create_chain+0x88>
 800c01e:	2300      	movs	r3, #0
 800c020:	e04f      	b.n	800c0c2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c022:	69f9      	ldr	r1, [r7, #28]
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f7ff fd66 	bl	800baf6 <get_fat>
 800c02a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d00e      	beq.n	800c050 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2b01      	cmp	r3, #1
 800c036:	d003      	beq.n	800c040 <create_chain+0xa6>
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c03e:	d101      	bne.n	800c044 <create_chain+0xaa>
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	e03e      	b.n	800c0c2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c044:	69fa      	ldr	r2, [r7, #28]
 800c046:	69bb      	ldr	r3, [r7, #24]
 800c048:	429a      	cmp	r2, r3
 800c04a:	d1da      	bne.n	800c002 <create_chain+0x68>
 800c04c:	2300      	movs	r3, #0
 800c04e:	e038      	b.n	800c0c2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c050:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c052:	f04f 32ff 	mov.w	r2, #4294967295
 800c056:	69f9      	ldr	r1, [r7, #28]
 800c058:	6938      	ldr	r0, [r7, #16]
 800c05a:	f7ff fe1f 	bl	800bc9c <put_fat>
 800c05e:	4603      	mov	r3, r0
 800c060:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c062:	7dfb      	ldrb	r3, [r7, #23]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d109      	bne.n	800c07c <create_chain+0xe2>
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d006      	beq.n	800c07c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c06e:	69fa      	ldr	r2, [r7, #28]
 800c070:	6839      	ldr	r1, [r7, #0]
 800c072:	6938      	ldr	r0, [r7, #16]
 800c074:	f7ff fe12 	bl	800bc9c <put_fat>
 800c078:	4603      	mov	r3, r0
 800c07a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c07c:	7dfb      	ldrb	r3, [r7, #23]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d116      	bne.n	800c0b0 <create_chain+0x116>
		fs->last_clst = ncl;
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	69fa      	ldr	r2, [r7, #28]
 800c086:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	695a      	ldr	r2, [r3, #20]
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	699b      	ldr	r3, [r3, #24]
 800c090:	3b02      	subs	r3, #2
 800c092:	429a      	cmp	r2, r3
 800c094:	d804      	bhi.n	800c0a0 <create_chain+0x106>
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	695b      	ldr	r3, [r3, #20]
 800c09a:	1e5a      	subs	r2, r3, #1
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	791b      	ldrb	r3, [r3, #4]
 800c0a4:	f043 0301 	orr.w	r3, r3, #1
 800c0a8:	b2da      	uxtb	r2, r3
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	711a      	strb	r2, [r3, #4]
 800c0ae:	e007      	b.n	800c0c0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c0b0:	7dfb      	ldrb	r3, [r7, #23]
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	d102      	bne.n	800c0bc <create_chain+0x122>
 800c0b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c0ba:	e000      	b.n	800c0be <create_chain+0x124>
 800c0bc:	2301      	movs	r3, #1
 800c0be:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c0c0:	69fb      	ldr	r3, [r7, #28]
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3720      	adds	r7, #32
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}

0800c0ca <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c0ca:	b480      	push	{r7}
 800c0cc:	b087      	sub	sp, #28
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	6078      	str	r0, [r7, #4]
 800c0d2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0de:	3304      	adds	r3, #4
 800c0e0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	899b      	ldrh	r3, [r3, #12]
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0ee:	68fa      	ldr	r2, [r7, #12]
 800c0f0:	8952      	ldrh	r2, [r2, #10]
 800c0f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0f6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	1d1a      	adds	r2, r3, #4
 800c0fc:	613a      	str	r2, [r7, #16]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d101      	bne.n	800c10c <clmt_clust+0x42>
 800c108:	2300      	movs	r3, #0
 800c10a:	e010      	b.n	800c12e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800c10c:	697a      	ldr	r2, [r7, #20]
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	429a      	cmp	r2, r3
 800c112:	d307      	bcc.n	800c124 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800c114:	697a      	ldr	r2, [r7, #20]
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	1ad3      	subs	r3, r2, r3
 800c11a:	617b      	str	r3, [r7, #20]
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	3304      	adds	r3, #4
 800c120:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c122:	e7e9      	b.n	800c0f8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800c124:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	681a      	ldr	r2, [r3, #0]
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	4413      	add	r3, r2
}
 800c12e:	4618      	mov	r0, r3
 800c130:	371c      	adds	r7, #28
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr

0800c13a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c13a:	b580      	push	{r7, lr}
 800c13c:	b086      	sub	sp, #24
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6078      	str	r0, [r7, #4]
 800c142:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c150:	d204      	bcs.n	800c15c <dir_sdi+0x22>
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	f003 031f 	and.w	r3, r3, #31
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d001      	beq.n	800c160 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c15c:	2302      	movs	r3, #2
 800c15e:	e071      	b.n	800c244 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	683a      	ldr	r2, [r7, #0]
 800c164:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	689b      	ldr	r3, [r3, #8]
 800c16a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d106      	bne.n	800c180 <dir_sdi+0x46>
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	2b02      	cmp	r3, #2
 800c178:	d902      	bls.n	800c180 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c17e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d10c      	bne.n	800c1a0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	095b      	lsrs	r3, r3, #5
 800c18a:	693a      	ldr	r2, [r7, #16]
 800c18c:	8912      	ldrh	r2, [r2, #8]
 800c18e:	4293      	cmp	r3, r2
 800c190:	d301      	bcc.n	800c196 <dir_sdi+0x5c>
 800c192:	2302      	movs	r3, #2
 800c194:	e056      	b.n	800c244 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	61da      	str	r2, [r3, #28]
 800c19e:	e02d      	b.n	800c1fc <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	895b      	ldrh	r3, [r3, #10]
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	899b      	ldrh	r3, [r3, #12]
 800c1aa:	fb02 f303 	mul.w	r3, r2, r3
 800c1ae:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c1b0:	e019      	b.n	800c1e6 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6979      	ldr	r1, [r7, #20]
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7ff fc9d 	bl	800baf6 <get_fat>
 800c1bc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1c4:	d101      	bne.n	800c1ca <dir_sdi+0x90>
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	e03c      	b.n	800c244 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	d904      	bls.n	800c1da <dir_sdi+0xa0>
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	699b      	ldr	r3, [r3, #24]
 800c1d4:	697a      	ldr	r2, [r7, #20]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d301      	bcc.n	800c1de <dir_sdi+0xa4>
 800c1da:	2302      	movs	r3, #2
 800c1dc:	e032      	b.n	800c244 <dir_sdi+0x10a>
			ofs -= csz;
 800c1de:	683a      	ldr	r2, [r7, #0]
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	1ad3      	subs	r3, r2, r3
 800c1e4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c1e6:	683a      	ldr	r2, [r7, #0]
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d2e1      	bcs.n	800c1b2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800c1ee:	6979      	ldr	r1, [r7, #20]
 800c1f0:	6938      	ldr	r0, [r7, #16]
 800c1f2:	f7ff fc61 	bl	800bab8 <clust2sect>
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	697a      	ldr	r2, [r7, #20]
 800c200:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	69db      	ldr	r3, [r3, #28]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d101      	bne.n	800c20e <dir_sdi+0xd4>
 800c20a:	2302      	movs	r3, #2
 800c20c:	e01a      	b.n	800c244 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	69da      	ldr	r2, [r3, #28]
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	899b      	ldrh	r3, [r3, #12]
 800c216:	4619      	mov	r1, r3
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	fbb3 f3f1 	udiv	r3, r3, r1
 800c21e:	441a      	add	r2, r3
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	899b      	ldrh	r3, [r3, #12]
 800c22e:	461a      	mov	r2, r3
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	fbb3 f0f2 	udiv	r0, r3, r2
 800c236:	fb00 f202 	mul.w	r2, r0, r2
 800c23a:	1a9b      	subs	r3, r3, r2
 800c23c:	18ca      	adds	r2, r1, r3
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c242:	2300      	movs	r3, #0
}
 800c244:	4618      	mov	r0, r3
 800c246:	3718      	adds	r7, #24
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b086      	sub	sp, #24
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	695b      	ldr	r3, [r3, #20]
 800c260:	3320      	adds	r3, #32
 800c262:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	69db      	ldr	r3, [r3, #28]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d003      	beq.n	800c274 <dir_next+0x28>
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c272:	d301      	bcc.n	800c278 <dir_next+0x2c>
 800c274:	2304      	movs	r3, #4
 800c276:	e0bb      	b.n	800c3f0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	899b      	ldrh	r3, [r3, #12]
 800c27c:	461a      	mov	r2, r3
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	fbb3 f1f2 	udiv	r1, r3, r2
 800c284:	fb01 f202 	mul.w	r2, r1, r2
 800c288:	1a9b      	subs	r3, r3, r2
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	f040 809d 	bne.w	800c3ca <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	69db      	ldr	r3, [r3, #28]
 800c294:	1c5a      	adds	r2, r3, #1
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	699b      	ldr	r3, [r3, #24]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d10b      	bne.n	800c2ba <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	095b      	lsrs	r3, r3, #5
 800c2a6:	68fa      	ldr	r2, [r7, #12]
 800c2a8:	8912      	ldrh	r2, [r2, #8]
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	f0c0 808d 	bcc.w	800c3ca <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	61da      	str	r2, [r3, #28]
 800c2b6:	2304      	movs	r3, #4
 800c2b8:	e09a      	b.n	800c3f0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	899b      	ldrh	r3, [r3, #12]
 800c2be:	461a      	mov	r2, r3
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2c6:	68fa      	ldr	r2, [r7, #12]
 800c2c8:	8952      	ldrh	r2, [r2, #10]
 800c2ca:	3a01      	subs	r2, #1
 800c2cc:	4013      	ands	r3, r2
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d17b      	bne.n	800c3ca <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	699b      	ldr	r3, [r3, #24]
 800c2d8:	4619      	mov	r1, r3
 800c2da:	4610      	mov	r0, r2
 800c2dc:	f7ff fc0b 	bl	800baf6 <get_fat>
 800c2e0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d801      	bhi.n	800c2ec <dir_next+0xa0>
 800c2e8:	2302      	movs	r3, #2
 800c2ea:	e081      	b.n	800c3f0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2f2:	d101      	bne.n	800c2f8 <dir_next+0xac>
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	e07b      	b.n	800c3f0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	699b      	ldr	r3, [r3, #24]
 800c2fc:	697a      	ldr	r2, [r7, #20]
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d359      	bcc.n	800c3b6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d104      	bne.n	800c312 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2200      	movs	r2, #0
 800c30c:	61da      	str	r2, [r3, #28]
 800c30e:	2304      	movs	r3, #4
 800c310:	e06e      	b.n	800c3f0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c312:	687a      	ldr	r2, [r7, #4]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	699b      	ldr	r3, [r3, #24]
 800c318:	4619      	mov	r1, r3
 800c31a:	4610      	mov	r0, r2
 800c31c:	f7ff fe3d 	bl	800bf9a <create_chain>
 800c320:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d101      	bne.n	800c32c <dir_next+0xe0>
 800c328:	2307      	movs	r3, #7
 800c32a:	e061      	b.n	800c3f0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	2b01      	cmp	r3, #1
 800c330:	d101      	bne.n	800c336 <dir_next+0xea>
 800c332:	2302      	movs	r3, #2
 800c334:	e05c      	b.n	800c3f0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c33c:	d101      	bne.n	800c342 <dir_next+0xf6>
 800c33e:	2301      	movs	r3, #1
 800c340:	e056      	b.n	800c3f0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c342:	68f8      	ldr	r0, [r7, #12]
 800c344:	f7ff fad6 	bl	800b8f4 <sync_window>
 800c348:	4603      	mov	r3, r0
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d001      	beq.n	800c352 <dir_next+0x106>
 800c34e:	2301      	movs	r3, #1
 800c350:	e04e      	b.n	800c3f0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	899b      	ldrh	r3, [r3, #12]
 800c35c:	461a      	mov	r2, r3
 800c35e:	2100      	movs	r1, #0
 800c360:	f7ff f8ff 	bl	800b562 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c364:	2300      	movs	r3, #0
 800c366:	613b      	str	r3, [r7, #16]
 800c368:	6979      	ldr	r1, [r7, #20]
 800c36a:	68f8      	ldr	r0, [r7, #12]
 800c36c:	f7ff fba4 	bl	800bab8 <clust2sect>
 800c370:	4602      	mov	r2, r0
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	631a      	str	r2, [r3, #48]	@ 0x30
 800c376:	e012      	b.n	800c39e <dir_next+0x152>
						fs->wflag = 1;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2201      	movs	r2, #1
 800c37c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c37e:	68f8      	ldr	r0, [r7, #12]
 800c380:	f7ff fab8 	bl	800b8f4 <sync_window>
 800c384:	4603      	mov	r3, r0
 800c386:	2b00      	cmp	r3, #0
 800c388:	d001      	beq.n	800c38e <dir_next+0x142>
 800c38a:	2301      	movs	r3, #1
 800c38c:	e030      	b.n	800c3f0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	3301      	adds	r3, #1
 800c392:	613b      	str	r3, [r7, #16]
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c398:	1c5a      	adds	r2, r3, #1
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	631a      	str	r2, [r3, #48]	@ 0x30
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	895b      	ldrh	r3, [r3, #10]
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d3e6      	bcc.n	800c378 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	1ad2      	subs	r2, r2, r3
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	697a      	ldr	r2, [r7, #20]
 800c3ba:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c3bc:	6979      	ldr	r1, [r7, #20]
 800c3be:	68f8      	ldr	r0, [r7, #12]
 800c3c0:	f7ff fb7a 	bl	800bab8 <clust2sect>
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	68ba      	ldr	r2, [r7, #8]
 800c3ce:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	899b      	ldrh	r3, [r3, #12]
 800c3da:	461a      	mov	r2, r3
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	fbb3 f0f2 	udiv	r0, r3, r2
 800c3e2:	fb00 f202 	mul.w	r2, r0, r2
 800c3e6:	1a9b      	subs	r3, r3, r2
 800c3e8:	18ca      	adds	r2, r1, r3
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c3ee:	2300      	movs	r3, #0
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3718      	adds	r7, #24
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b086      	sub	sp, #24
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c408:	2100      	movs	r1, #0
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f7ff fe95 	bl	800c13a <dir_sdi>
 800c410:	4603      	mov	r3, r0
 800c412:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c414:	7dfb      	ldrb	r3, [r7, #23]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d12b      	bne.n	800c472 <dir_alloc+0x7a>
		n = 0;
 800c41a:	2300      	movs	r3, #0
 800c41c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	69db      	ldr	r3, [r3, #28]
 800c422:	4619      	mov	r1, r3
 800c424:	68f8      	ldr	r0, [r7, #12]
 800c426:	f7ff faa9 	bl	800b97c <move_window>
 800c42a:	4603      	mov	r3, r0
 800c42c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c42e:	7dfb      	ldrb	r3, [r7, #23]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d11d      	bne.n	800c470 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6a1b      	ldr	r3, [r3, #32]
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	2be5      	cmp	r3, #229	@ 0xe5
 800c43c:	d004      	beq.n	800c448 <dir_alloc+0x50>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6a1b      	ldr	r3, [r3, #32]
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d107      	bne.n	800c458 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	3301      	adds	r3, #1
 800c44c:	613b      	str	r3, [r7, #16]
 800c44e:	693a      	ldr	r2, [r7, #16]
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	429a      	cmp	r2, r3
 800c454:	d102      	bne.n	800c45c <dir_alloc+0x64>
 800c456:	e00c      	b.n	800c472 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c458:	2300      	movs	r3, #0
 800c45a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c45c:	2101      	movs	r1, #1
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f7ff fef4 	bl	800c24c <dir_next>
 800c464:	4603      	mov	r3, r0
 800c466:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c468:	7dfb      	ldrb	r3, [r7, #23]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d0d7      	beq.n	800c41e <dir_alloc+0x26>
 800c46e:	e000      	b.n	800c472 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c470:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c472:	7dfb      	ldrb	r3, [r7, #23]
 800c474:	2b04      	cmp	r3, #4
 800c476:	d101      	bne.n	800c47c <dir_alloc+0x84>
 800c478:	2307      	movs	r3, #7
 800c47a:	75fb      	strb	r3, [r7, #23]
	return res;
 800c47c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3718      	adds	r7, #24
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}

0800c486 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c486:	b580      	push	{r7, lr}
 800c488:	b084      	sub	sp, #16
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	6078      	str	r0, [r7, #4]
 800c48e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	331a      	adds	r3, #26
 800c494:	4618      	mov	r0, r3
 800c496:	f7fe ffc1 	bl	800b41c <ld_word>
 800c49a:	4603      	mov	r3, r0
 800c49c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	2b03      	cmp	r3, #3
 800c4a4:	d109      	bne.n	800c4ba <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	3314      	adds	r3, #20
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7fe ffb6 	bl	800b41c <ld_word>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	041b      	lsls	r3, r3, #16
 800c4b4:	68fa      	ldr	r2, [r7, #12]
 800c4b6:	4313      	orrs	r3, r2
 800c4b8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3710      	adds	r7, #16
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b084      	sub	sp, #16
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	60f8      	str	r0, [r7, #12]
 800c4cc:	60b9      	str	r1, [r7, #8]
 800c4ce:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	331a      	adds	r3, #26
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	b292      	uxth	r2, r2
 800c4d8:	4611      	mov	r1, r2
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f7fe ffd9 	bl	800b492 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	2b03      	cmp	r3, #3
 800c4e6:	d109      	bne.n	800c4fc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	f103 0214 	add.w	r2, r3, #20
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	0c1b      	lsrs	r3, r3, #16
 800c4f2:	b29b      	uxth	r3, r3
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	4610      	mov	r0, r2
 800c4f8:	f7fe ffcb 	bl	800b492 <st_word>
	}
}
 800c4fc:	bf00      	nop
 800c4fe:	3710      	adds	r7, #16
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b086      	sub	sp, #24
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c512:	2100      	movs	r1, #0
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f7ff fe10 	bl	800c13a <dir_sdi>
 800c51a:	4603      	mov	r3, r0
 800c51c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c51e:	7dfb      	ldrb	r3, [r7, #23]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d001      	beq.n	800c528 <dir_find+0x24>
 800c524:	7dfb      	ldrb	r3, [r7, #23]
 800c526:	e03e      	b.n	800c5a6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	69db      	ldr	r3, [r3, #28]
 800c52c:	4619      	mov	r1, r3
 800c52e:	6938      	ldr	r0, [r7, #16]
 800c530:	f7ff fa24 	bl	800b97c <move_window>
 800c534:	4603      	mov	r3, r0
 800c536:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c538:	7dfb      	ldrb	r3, [r7, #23]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d12f      	bne.n	800c59e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6a1b      	ldr	r3, [r3, #32]
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c546:	7bfb      	ldrb	r3, [r7, #15]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d102      	bne.n	800c552 <dir_find+0x4e>
 800c54c:	2304      	movs	r3, #4
 800c54e:	75fb      	strb	r3, [r7, #23]
 800c550:	e028      	b.n	800c5a4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6a1b      	ldr	r3, [r3, #32]
 800c556:	330b      	adds	r3, #11
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c55e:	b2da      	uxtb	r2, r3
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6a1b      	ldr	r3, [r3, #32]
 800c568:	330b      	adds	r3, #11
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	f003 0308 	and.w	r3, r3, #8
 800c570:	2b00      	cmp	r3, #0
 800c572:	d10a      	bne.n	800c58a <dir_find+0x86>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6a18      	ldr	r0, [r3, #32]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	3324      	adds	r3, #36	@ 0x24
 800c57c:	220b      	movs	r2, #11
 800c57e:	4619      	mov	r1, r3
 800c580:	f7ff f80a 	bl	800b598 <mem_cmp>
 800c584:	4603      	mov	r3, r0
 800c586:	2b00      	cmp	r3, #0
 800c588:	d00b      	beq.n	800c5a2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c58a:	2100      	movs	r1, #0
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f7ff fe5d 	bl	800c24c <dir_next>
 800c592:	4603      	mov	r3, r0
 800c594:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c596:	7dfb      	ldrb	r3, [r7, #23]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d0c5      	beq.n	800c528 <dir_find+0x24>
 800c59c:	e002      	b.n	800c5a4 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c59e:	bf00      	nop
 800c5a0:	e000      	b.n	800c5a4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c5a2:	bf00      	nop

	return res;
 800c5a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3718      	adds	r7, #24
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}

0800c5ae <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c5ae:	b580      	push	{r7, lr}
 800c5b0:	b084      	sub	sp, #16
 800c5b2:	af00      	add	r7, sp, #0
 800c5b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c5bc:	2101      	movs	r1, #1
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f7ff ff1a 	bl	800c3f8 <dir_alloc>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c5c8:	7bfb      	ldrb	r3, [r7, #15]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d11c      	bne.n	800c608 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	69db      	ldr	r3, [r3, #28]
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	68b8      	ldr	r0, [r7, #8]
 800c5d6:	f7ff f9d1 	bl	800b97c <move_window>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c5de:	7bfb      	ldrb	r3, [r7, #15]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d111      	bne.n	800c608 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6a1b      	ldr	r3, [r3, #32]
 800c5e8:	2220      	movs	r2, #32
 800c5ea:	2100      	movs	r1, #0
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7fe ffb8 	bl	800b562 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6a18      	ldr	r0, [r3, #32]
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	3324      	adds	r3, #36	@ 0x24
 800c5fa:	220b      	movs	r2, #11
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	f7fe ff8f 	bl	800b520 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	2201      	movs	r2, #1
 800c606:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c608:	7bfb      	ldrb	r3, [r7, #15]
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3710      	adds	r7, #16
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
	...

0800c614 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b088      	sub	sp, #32
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	60fb      	str	r3, [r7, #12]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	3324      	adds	r3, #36	@ 0x24
 800c628:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c62a:	220b      	movs	r2, #11
 800c62c:	2120      	movs	r1, #32
 800c62e:	68b8      	ldr	r0, [r7, #8]
 800c630:	f7fe ff97 	bl	800b562 <mem_set>
	si = i = 0; ni = 8;
 800c634:	2300      	movs	r3, #0
 800c636:	613b      	str	r3, [r7, #16]
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	61fb      	str	r3, [r7, #28]
 800c63c:	2308      	movs	r3, #8
 800c63e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c640:	69fb      	ldr	r3, [r7, #28]
 800c642:	1c5a      	adds	r2, r3, #1
 800c644:	61fa      	str	r2, [r7, #28]
 800c646:	68fa      	ldr	r2, [r7, #12]
 800c648:	4413      	add	r3, r2
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c64e:	7efb      	ldrb	r3, [r7, #27]
 800c650:	2b20      	cmp	r3, #32
 800c652:	d94e      	bls.n	800c6f2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c654:	7efb      	ldrb	r3, [r7, #27]
 800c656:	2b2f      	cmp	r3, #47	@ 0x2f
 800c658:	d006      	beq.n	800c668 <create_name+0x54>
 800c65a:	7efb      	ldrb	r3, [r7, #27]
 800c65c:	2b5c      	cmp	r3, #92	@ 0x5c
 800c65e:	d110      	bne.n	800c682 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c660:	e002      	b.n	800c668 <create_name+0x54>
 800c662:	69fb      	ldr	r3, [r7, #28]
 800c664:	3301      	adds	r3, #1
 800c666:	61fb      	str	r3, [r7, #28]
 800c668:	68fa      	ldr	r2, [r7, #12]
 800c66a:	69fb      	ldr	r3, [r7, #28]
 800c66c:	4413      	add	r3, r2
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	2b2f      	cmp	r3, #47	@ 0x2f
 800c672:	d0f6      	beq.n	800c662 <create_name+0x4e>
 800c674:	68fa      	ldr	r2, [r7, #12]
 800c676:	69fb      	ldr	r3, [r7, #28]
 800c678:	4413      	add	r3, r2
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	2b5c      	cmp	r3, #92	@ 0x5c
 800c67e:	d0f0      	beq.n	800c662 <create_name+0x4e>
			break;
 800c680:	e038      	b.n	800c6f4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c682:	7efb      	ldrb	r3, [r7, #27]
 800c684:	2b2e      	cmp	r3, #46	@ 0x2e
 800c686:	d003      	beq.n	800c690 <create_name+0x7c>
 800c688:	693a      	ldr	r2, [r7, #16]
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d30c      	bcc.n	800c6aa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	2b0b      	cmp	r3, #11
 800c694:	d002      	beq.n	800c69c <create_name+0x88>
 800c696:	7efb      	ldrb	r3, [r7, #27]
 800c698:	2b2e      	cmp	r3, #46	@ 0x2e
 800c69a:	d001      	beq.n	800c6a0 <create_name+0x8c>
 800c69c:	2306      	movs	r3, #6
 800c69e:	e044      	b.n	800c72a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c6a0:	2308      	movs	r3, #8
 800c6a2:	613b      	str	r3, [r7, #16]
 800c6a4:	230b      	movs	r3, #11
 800c6a6:	617b      	str	r3, [r7, #20]
			continue;
 800c6a8:	e022      	b.n	800c6f0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c6aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	da04      	bge.n	800c6bc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c6b2:	7efb      	ldrb	r3, [r7, #27]
 800c6b4:	3b80      	subs	r3, #128	@ 0x80
 800c6b6:	4a1f      	ldr	r2, [pc, #124]	@ (800c734 <create_name+0x120>)
 800c6b8:	5cd3      	ldrb	r3, [r2, r3]
 800c6ba:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c6bc:	7efb      	ldrb	r3, [r7, #27]
 800c6be:	4619      	mov	r1, r3
 800c6c0:	481d      	ldr	r0, [pc, #116]	@ (800c738 <create_name+0x124>)
 800c6c2:	f7fe ff90 	bl	800b5e6 <chk_chr>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d001      	beq.n	800c6d0 <create_name+0xbc>
 800c6cc:	2306      	movs	r3, #6
 800c6ce:	e02c      	b.n	800c72a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c6d0:	7efb      	ldrb	r3, [r7, #27]
 800c6d2:	2b60      	cmp	r3, #96	@ 0x60
 800c6d4:	d905      	bls.n	800c6e2 <create_name+0xce>
 800c6d6:	7efb      	ldrb	r3, [r7, #27]
 800c6d8:	2b7a      	cmp	r3, #122	@ 0x7a
 800c6da:	d802      	bhi.n	800c6e2 <create_name+0xce>
 800c6dc:	7efb      	ldrb	r3, [r7, #27]
 800c6de:	3b20      	subs	r3, #32
 800c6e0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	1c5a      	adds	r2, r3, #1
 800c6e6:	613a      	str	r2, [r7, #16]
 800c6e8:	68ba      	ldr	r2, [r7, #8]
 800c6ea:	4413      	add	r3, r2
 800c6ec:	7efa      	ldrb	r2, [r7, #27]
 800c6ee:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c6f0:	e7a6      	b.n	800c640 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c6f2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c6f4:	68fa      	ldr	r2, [r7, #12]
 800c6f6:	69fb      	ldr	r3, [r7, #28]
 800c6f8:	441a      	add	r2, r3
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d101      	bne.n	800c708 <create_name+0xf4>
 800c704:	2306      	movs	r3, #6
 800c706:	e010      	b.n	800c72a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	781b      	ldrb	r3, [r3, #0]
 800c70c:	2be5      	cmp	r3, #229	@ 0xe5
 800c70e:	d102      	bne.n	800c716 <create_name+0x102>
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	2205      	movs	r2, #5
 800c714:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c716:	7efb      	ldrb	r3, [r7, #27]
 800c718:	2b20      	cmp	r3, #32
 800c71a:	d801      	bhi.n	800c720 <create_name+0x10c>
 800c71c:	2204      	movs	r2, #4
 800c71e:	e000      	b.n	800c722 <create_name+0x10e>
 800c720:	2200      	movs	r2, #0
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	330b      	adds	r3, #11
 800c726:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c728:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3720      	adds	r7, #32
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	08013ea0 	.word	0x08013ea0
 800c738:	08013e18 	.word	0x08013e18

0800c73c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b086      	sub	sp, #24
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c750:	e002      	b.n	800c758 <follow_path+0x1c>
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	3301      	adds	r3, #1
 800c756:	603b      	str	r3, [r7, #0]
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	781b      	ldrb	r3, [r3, #0]
 800c75c:	2b2f      	cmp	r3, #47	@ 0x2f
 800c75e:	d0f8      	beq.n	800c752 <follow_path+0x16>
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	2b5c      	cmp	r3, #92	@ 0x5c
 800c766:	d0f4      	beq.n	800c752 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	2200      	movs	r2, #0
 800c76c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	2b1f      	cmp	r3, #31
 800c774:	d80a      	bhi.n	800c78c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2280      	movs	r2, #128	@ 0x80
 800c77a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c77e:	2100      	movs	r1, #0
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f7ff fcda 	bl	800c13a <dir_sdi>
 800c786:	4603      	mov	r3, r0
 800c788:	75fb      	strb	r3, [r7, #23]
 800c78a:	e048      	b.n	800c81e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c78c:	463b      	mov	r3, r7
 800c78e:	4619      	mov	r1, r3
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f7ff ff3f 	bl	800c614 <create_name>
 800c796:	4603      	mov	r3, r0
 800c798:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c79a:	7dfb      	ldrb	r3, [r7, #23]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d139      	bne.n	800c814 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f7ff feaf 	bl	800c504 <dir_find>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c7b0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c7b2:	7dfb      	ldrb	r3, [r7, #23]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d00a      	beq.n	800c7ce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c7b8:	7dfb      	ldrb	r3, [r7, #23]
 800c7ba:	2b04      	cmp	r3, #4
 800c7bc:	d12c      	bne.n	800c818 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c7be:	7afb      	ldrb	r3, [r7, #11]
 800c7c0:	f003 0304 	and.w	r3, r3, #4
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d127      	bne.n	800c818 <follow_path+0xdc>
 800c7c8:	2305      	movs	r3, #5
 800c7ca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c7cc:	e024      	b.n	800c818 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c7ce:	7afb      	ldrb	r3, [r7, #11]
 800c7d0:	f003 0304 	and.w	r3, r3, #4
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d121      	bne.n	800c81c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	799b      	ldrb	r3, [r3, #6]
 800c7dc:	f003 0310 	and.w	r3, r3, #16
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d102      	bne.n	800c7ea <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c7e4:	2305      	movs	r3, #5
 800c7e6:	75fb      	strb	r3, [r7, #23]
 800c7e8:	e019      	b.n	800c81e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	695b      	ldr	r3, [r3, #20]
 800c7f4:	68fa      	ldr	r2, [r7, #12]
 800c7f6:	8992      	ldrh	r2, [r2, #12]
 800c7f8:	fbb3 f0f2 	udiv	r0, r3, r2
 800c7fc:	fb00 f202 	mul.w	r2, r0, r2
 800c800:	1a9b      	subs	r3, r3, r2
 800c802:	440b      	add	r3, r1
 800c804:	4619      	mov	r1, r3
 800c806:	68f8      	ldr	r0, [r7, #12]
 800c808:	f7ff fe3d 	bl	800c486 <ld_clust>
 800c80c:	4602      	mov	r2, r0
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c812:	e7bb      	b.n	800c78c <follow_path+0x50>
			if (res != FR_OK) break;
 800c814:	bf00      	nop
 800c816:	e002      	b.n	800c81e <follow_path+0xe2>
				break;
 800c818:	bf00      	nop
 800c81a:	e000      	b.n	800c81e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c81c:	bf00      	nop
			}
		}
	}

	return res;
 800c81e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c820:	4618      	mov	r0, r3
 800c822:	3718      	adds	r7, #24
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c828:	b480      	push	{r7}
 800c82a:	b087      	sub	sp, #28
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c830:	f04f 33ff 	mov.w	r3, #4294967295
 800c834:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d031      	beq.n	800c8a2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	617b      	str	r3, [r7, #20]
 800c844:	e002      	b.n	800c84c <get_ldnumber+0x24>
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	3301      	adds	r3, #1
 800c84a:	617b      	str	r3, [r7, #20]
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	2b20      	cmp	r3, #32
 800c852:	d903      	bls.n	800c85c <get_ldnumber+0x34>
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	2b3a      	cmp	r3, #58	@ 0x3a
 800c85a:	d1f4      	bne.n	800c846 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	781b      	ldrb	r3, [r3, #0]
 800c860:	2b3a      	cmp	r3, #58	@ 0x3a
 800c862:	d11c      	bne.n	800c89e <get_ldnumber+0x76>
			tp = *path;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	1c5a      	adds	r2, r3, #1
 800c86e:	60fa      	str	r2, [r7, #12]
 800c870:	781b      	ldrb	r3, [r3, #0]
 800c872:	3b30      	subs	r3, #48	@ 0x30
 800c874:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	2b09      	cmp	r3, #9
 800c87a:	d80e      	bhi.n	800c89a <get_ldnumber+0x72>
 800c87c:	68fa      	ldr	r2, [r7, #12]
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	429a      	cmp	r2, r3
 800c882:	d10a      	bne.n	800c89a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d107      	bne.n	800c89a <get_ldnumber+0x72>
					vol = (int)i;
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	3301      	adds	r3, #1
 800c892:	617b      	str	r3, [r7, #20]
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	697a      	ldr	r2, [r7, #20]
 800c898:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	e002      	b.n	800c8a4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c89e:	2300      	movs	r3, #0
 800c8a0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c8a2:	693b      	ldr	r3, [r7, #16]
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	371c      	adds	r7, #28
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ae:	4770      	bx	lr

0800c8b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	70da      	strb	r2, [r3, #3]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c8c6:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c8c8:	6839      	ldr	r1, [r7, #0]
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f7ff f856 	bl	800b97c <move_window>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d001      	beq.n	800c8da <check_fs+0x2a>
 800c8d6:	2304      	movs	r3, #4
 800c8d8:	e038      	b.n	800c94c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	3334      	adds	r3, #52	@ 0x34
 800c8de:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f7fe fd9a 	bl	800b41c <ld_word>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d001      	beq.n	800c8f8 <check_fs+0x48>
 800c8f4:	2303      	movs	r3, #3
 800c8f6:	e029      	b.n	800c94c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c8fe:	2be9      	cmp	r3, #233	@ 0xe9
 800c900:	d009      	beq.n	800c916 <check_fs+0x66>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c908:	2beb      	cmp	r3, #235	@ 0xeb
 800c90a:	d11e      	bne.n	800c94a <check_fs+0x9a>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800c912:	2b90      	cmp	r3, #144	@ 0x90
 800c914:	d119      	bne.n	800c94a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	3334      	adds	r3, #52	@ 0x34
 800c91a:	3336      	adds	r3, #54	@ 0x36
 800c91c:	4618      	mov	r0, r3
 800c91e:	f7fe fd95 	bl	800b44c <ld_dword>
 800c922:	4603      	mov	r3, r0
 800c924:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c928:	4a0a      	ldr	r2, [pc, #40]	@ (800c954 <check_fs+0xa4>)
 800c92a:	4293      	cmp	r3, r2
 800c92c:	d101      	bne.n	800c932 <check_fs+0x82>
 800c92e:	2300      	movs	r3, #0
 800c930:	e00c      	b.n	800c94c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	3334      	adds	r3, #52	@ 0x34
 800c936:	3352      	adds	r3, #82	@ 0x52
 800c938:	4618      	mov	r0, r3
 800c93a:	f7fe fd87 	bl	800b44c <ld_dword>
 800c93e:	4603      	mov	r3, r0
 800c940:	4a05      	ldr	r2, [pc, #20]	@ (800c958 <check_fs+0xa8>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d101      	bne.n	800c94a <check_fs+0x9a>
 800c946:	2300      	movs	r3, #0
 800c948:	e000      	b.n	800c94c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c94a:	2302      	movs	r3, #2
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3708      	adds	r7, #8
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}
 800c954:	00544146 	.word	0x00544146
 800c958:	33544146 	.word	0x33544146

0800c95c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b096      	sub	sp, #88	@ 0x58
 800c960:	af00      	add	r7, sp, #0
 800c962:	60f8      	str	r0, [r7, #12]
 800c964:	60b9      	str	r1, [r7, #8]
 800c966:	4613      	mov	r3, r2
 800c968:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	2200      	movs	r2, #0
 800c96e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c970:	68f8      	ldr	r0, [r7, #12]
 800c972:	f7ff ff59 	bl	800c828 <get_ldnumber>
 800c976:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	da01      	bge.n	800c982 <find_volume+0x26>
 800c97e:	230b      	movs	r3, #11
 800c980:	e262      	b.n	800ce48 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c982:	4a9f      	ldr	r2, [pc, #636]	@ (800cc00 <find_volume+0x2a4>)
 800c984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c98a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c98c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d101      	bne.n	800c996 <find_volume+0x3a>
 800c992:	230c      	movs	r3, #12
 800c994:	e258      	b.n	800ce48 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c99a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c99c:	79fb      	ldrb	r3, [r7, #7]
 800c99e:	f023 0301 	bic.w	r3, r3, #1
 800c9a2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c9a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9a6:	781b      	ldrb	r3, [r3, #0]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d01a      	beq.n	800c9e2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c9ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ae:	785b      	ldrb	r3, [r3, #1]
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f7fe fc93 	bl	800b2dc <disk_status>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c9bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c9c0:	f003 0301 	and.w	r3, r3, #1
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d10c      	bne.n	800c9e2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c9c8:	79fb      	ldrb	r3, [r7, #7]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d007      	beq.n	800c9de <find_volume+0x82>
 800c9ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c9d2:	f003 0304 	and.w	r3, r3, #4
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d001      	beq.n	800c9de <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c9da:	230a      	movs	r3, #10
 800c9dc:	e234      	b.n	800ce48 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800c9de:	2300      	movs	r3, #0
 800c9e0:	e232      	b.n	800ce48 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c9e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c9e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9ea:	b2da      	uxtb	r2, r3
 800c9ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c9f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9f2:	785b      	ldrb	r3, [r3, #1]
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f7fe fc8b 	bl	800b310 <disk_initialize>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ca00:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ca04:	f003 0301 	and.w	r3, r3, #1
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d001      	beq.n	800ca10 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ca0c:	2303      	movs	r3, #3
 800ca0e:	e21b      	b.n	800ce48 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ca10:	79fb      	ldrb	r3, [r7, #7]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d007      	beq.n	800ca26 <find_volume+0xca>
 800ca16:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ca1a:	f003 0304 	and.w	r3, r3, #4
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d001      	beq.n	800ca26 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ca22:	230a      	movs	r3, #10
 800ca24:	e210      	b.n	800ce48 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ca26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca28:	7858      	ldrb	r0, [r3, #1]
 800ca2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca2c:	330c      	adds	r3, #12
 800ca2e:	461a      	mov	r2, r3
 800ca30:	2102      	movs	r1, #2
 800ca32:	f7fe fcd5 	bl	800b3e0 <disk_ioctl>
 800ca36:	4603      	mov	r3, r0
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d001      	beq.n	800ca40 <find_volume+0xe4>
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	e203      	b.n	800ce48 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ca40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca42:	899b      	ldrh	r3, [r3, #12]
 800ca44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca48:	d80d      	bhi.n	800ca66 <find_volume+0x10a>
 800ca4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca4c:	899b      	ldrh	r3, [r3, #12]
 800ca4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca52:	d308      	bcc.n	800ca66 <find_volume+0x10a>
 800ca54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca56:	899b      	ldrh	r3, [r3, #12]
 800ca58:	461a      	mov	r2, r3
 800ca5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca5c:	899b      	ldrh	r3, [r3, #12]
 800ca5e:	3b01      	subs	r3, #1
 800ca60:	4013      	ands	r3, r2
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d001      	beq.n	800ca6a <find_volume+0x10e>
 800ca66:	2301      	movs	r3, #1
 800ca68:	e1ee      	b.n	800ce48 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ca6e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ca70:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ca72:	f7ff ff1d 	bl	800c8b0 <check_fs>
 800ca76:	4603      	mov	r3, r0
 800ca78:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ca7c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ca80:	2b02      	cmp	r3, #2
 800ca82:	d149      	bne.n	800cb18 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ca84:	2300      	movs	r3, #0
 800ca86:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca88:	e01e      	b.n	800cac8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ca8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca8c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ca90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca92:	011b      	lsls	r3, r3, #4
 800ca94:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800ca98:	4413      	add	r3, r2
 800ca9a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ca9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca9e:	3304      	adds	r3, #4
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d006      	beq.n	800cab4 <find_volume+0x158>
 800caa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caa8:	3308      	adds	r3, #8
 800caaa:	4618      	mov	r0, r3
 800caac:	f7fe fcce 	bl	800b44c <ld_dword>
 800cab0:	4602      	mov	r2, r0
 800cab2:	e000      	b.n	800cab6 <find_volume+0x15a>
 800cab4:	2200      	movs	r2, #0
 800cab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cab8:	009b      	lsls	r3, r3, #2
 800caba:	3358      	adds	r3, #88	@ 0x58
 800cabc:	443b      	add	r3, r7
 800cabe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cac2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cac4:	3301      	adds	r3, #1
 800cac6:	643b      	str	r3, [r7, #64]	@ 0x40
 800cac8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800caca:	2b03      	cmp	r3, #3
 800cacc:	d9dd      	bls.n	800ca8a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cace:	2300      	movs	r3, #0
 800cad0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800cad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d002      	beq.n	800cade <find_volume+0x182>
 800cad8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cada:	3b01      	subs	r3, #1
 800cadc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cade:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	3358      	adds	r3, #88	@ 0x58
 800cae4:	443b      	add	r3, r7
 800cae6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800caea:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800caec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d005      	beq.n	800cafe <find_volume+0x1a2>
 800caf2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800caf4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800caf6:	f7ff fedb 	bl	800c8b0 <check_fs>
 800cafa:	4603      	mov	r3, r0
 800cafc:	e000      	b.n	800cb00 <find_volume+0x1a4>
 800cafe:	2303      	movs	r3, #3
 800cb00:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cb04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cb08:	2b01      	cmp	r3, #1
 800cb0a:	d905      	bls.n	800cb18 <find_volume+0x1bc>
 800cb0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb0e:	3301      	adds	r3, #1
 800cb10:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb14:	2b03      	cmp	r3, #3
 800cb16:	d9e2      	bls.n	800cade <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cb18:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cb1c:	2b04      	cmp	r3, #4
 800cb1e:	d101      	bne.n	800cb24 <find_volume+0x1c8>
 800cb20:	2301      	movs	r3, #1
 800cb22:	e191      	b.n	800ce48 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cb24:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cb28:	2b01      	cmp	r3, #1
 800cb2a:	d901      	bls.n	800cb30 <find_volume+0x1d4>
 800cb2c:	230d      	movs	r3, #13
 800cb2e:	e18b      	b.n	800ce48 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cb30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb32:	3334      	adds	r3, #52	@ 0x34
 800cb34:	330b      	adds	r3, #11
 800cb36:	4618      	mov	r0, r3
 800cb38:	f7fe fc70 	bl	800b41c <ld_word>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	461a      	mov	r2, r3
 800cb40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb42:	899b      	ldrh	r3, [r3, #12]
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d001      	beq.n	800cb4c <find_volume+0x1f0>
 800cb48:	230d      	movs	r3, #13
 800cb4a:	e17d      	b.n	800ce48 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cb4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb4e:	3334      	adds	r3, #52	@ 0x34
 800cb50:	3316      	adds	r3, #22
 800cb52:	4618      	mov	r0, r3
 800cb54:	f7fe fc62 	bl	800b41c <ld_word>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cb5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d106      	bne.n	800cb70 <find_volume+0x214>
 800cb62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb64:	3334      	adds	r3, #52	@ 0x34
 800cb66:	3324      	adds	r3, #36	@ 0x24
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f7fe fc6f 	bl	800b44c <ld_dword>
 800cb6e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800cb70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cb74:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cb76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb78:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800cb7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb7e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cb80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb82:	789b      	ldrb	r3, [r3, #2]
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d005      	beq.n	800cb94 <find_volume+0x238>
 800cb88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb8a:	789b      	ldrb	r3, [r3, #2]
 800cb8c:	2b02      	cmp	r3, #2
 800cb8e:	d001      	beq.n	800cb94 <find_volume+0x238>
 800cb90:	230d      	movs	r3, #13
 800cb92:	e159      	b.n	800ce48 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cb94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb96:	789b      	ldrb	r3, [r3, #2]
 800cb98:	461a      	mov	r2, r3
 800cb9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb9c:	fb02 f303 	mul.w	r3, r2, r3
 800cba0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cba4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cba8:	461a      	mov	r2, r3
 800cbaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cbae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbb0:	895b      	ldrh	r3, [r3, #10]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d008      	beq.n	800cbc8 <find_volume+0x26c>
 800cbb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbb8:	895b      	ldrh	r3, [r3, #10]
 800cbba:	461a      	mov	r2, r3
 800cbbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbbe:	895b      	ldrh	r3, [r3, #10]
 800cbc0:	3b01      	subs	r3, #1
 800cbc2:	4013      	ands	r3, r2
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d001      	beq.n	800cbcc <find_volume+0x270>
 800cbc8:	230d      	movs	r3, #13
 800cbca:	e13d      	b.n	800ce48 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cbcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbce:	3334      	adds	r3, #52	@ 0x34
 800cbd0:	3311      	adds	r3, #17
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7fe fc22 	bl	800b41c <ld_word>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	461a      	mov	r2, r3
 800cbdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbde:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cbe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbe2:	891b      	ldrh	r3, [r3, #8]
 800cbe4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cbe6:	8992      	ldrh	r2, [r2, #12]
 800cbe8:	0952      	lsrs	r2, r2, #5
 800cbea:	b292      	uxth	r2, r2
 800cbec:	fbb3 f1f2 	udiv	r1, r3, r2
 800cbf0:	fb01 f202 	mul.w	r2, r1, r2
 800cbf4:	1a9b      	subs	r3, r3, r2
 800cbf6:	b29b      	uxth	r3, r3
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d003      	beq.n	800cc04 <find_volume+0x2a8>
 800cbfc:	230d      	movs	r3, #13
 800cbfe:	e123      	b.n	800ce48 <find_volume+0x4ec>
 800cc00:	20002ca0 	.word	0x20002ca0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cc04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc06:	3334      	adds	r3, #52	@ 0x34
 800cc08:	3313      	adds	r3, #19
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f7fe fc06 	bl	800b41c <ld_word>
 800cc10:	4603      	mov	r3, r0
 800cc12:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cc14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d106      	bne.n	800cc28 <find_volume+0x2cc>
 800cc1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc1c:	3334      	adds	r3, #52	@ 0x34
 800cc1e:	3320      	adds	r3, #32
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7fe fc13 	bl	800b44c <ld_dword>
 800cc26:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cc28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc2a:	3334      	adds	r3, #52	@ 0x34
 800cc2c:	330e      	adds	r3, #14
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f7fe fbf4 	bl	800b41c <ld_word>
 800cc34:	4603      	mov	r3, r0
 800cc36:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cc38:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d101      	bne.n	800cc42 <find_volume+0x2e6>
 800cc3e:	230d      	movs	r3, #13
 800cc40:	e102      	b.n	800ce48 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cc42:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cc44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc46:	4413      	add	r3, r2
 800cc48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc4a:	8911      	ldrh	r1, [r2, #8]
 800cc4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc4e:	8992      	ldrh	r2, [r2, #12]
 800cc50:	0952      	lsrs	r2, r2, #5
 800cc52:	b292      	uxth	r2, r2
 800cc54:	fbb1 f2f2 	udiv	r2, r1, r2
 800cc58:	b292      	uxth	r2, r2
 800cc5a:	4413      	add	r3, r2
 800cc5c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cc5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cc60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d201      	bcs.n	800cc6a <find_volume+0x30e>
 800cc66:	230d      	movs	r3, #13
 800cc68:	e0ee      	b.n	800ce48 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cc6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cc6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc6e:	1ad3      	subs	r3, r2, r3
 800cc70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc72:	8952      	ldrh	r2, [r2, #10]
 800cc74:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc78:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cc7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d101      	bne.n	800cc84 <find_volume+0x328>
 800cc80:	230d      	movs	r3, #13
 800cc82:	e0e1      	b.n	800ce48 <find_volume+0x4ec>
		fmt = FS_FAT32;
 800cc84:	2303      	movs	r3, #3
 800cc86:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cc8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc8c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800cc90:	4293      	cmp	r3, r2
 800cc92:	d802      	bhi.n	800cc9a <find_volume+0x33e>
 800cc94:	2302      	movs	r3, #2
 800cc96:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cc9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc9c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d802      	bhi.n	800ccaa <find_volume+0x34e>
 800cca4:	2301      	movs	r3, #1
 800cca6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ccaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccac:	1c9a      	adds	r2, r3, #2
 800ccae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb0:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ccb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ccb6:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ccb8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ccba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccbc:	441a      	add	r2, r3
 800ccbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccc0:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800ccc2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ccc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccc6:	441a      	add	r2, r3
 800ccc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccca:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800cccc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ccd0:	2b03      	cmp	r3, #3
 800ccd2:	d11e      	bne.n	800cd12 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ccd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccd6:	3334      	adds	r3, #52	@ 0x34
 800ccd8:	332a      	adds	r3, #42	@ 0x2a
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7fe fb9e 	bl	800b41c <ld_word>
 800cce0:	4603      	mov	r3, r0
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d001      	beq.n	800ccea <find_volume+0x38e>
 800cce6:	230d      	movs	r3, #13
 800cce8:	e0ae      	b.n	800ce48 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ccea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccec:	891b      	ldrh	r3, [r3, #8]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d001      	beq.n	800ccf6 <find_volume+0x39a>
 800ccf2:	230d      	movs	r3, #13
 800ccf4:	e0a8      	b.n	800ce48 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ccf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccf8:	3334      	adds	r3, #52	@ 0x34
 800ccfa:	332c      	adds	r3, #44	@ 0x2c
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f7fe fba5 	bl	800b44c <ld_dword>
 800cd02:	4602      	mov	r2, r0
 800cd04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd06:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cd08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd0a:	699b      	ldr	r3, [r3, #24]
 800cd0c:	009b      	lsls	r3, r3, #2
 800cd0e:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd10:	e01f      	b.n	800cd52 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cd12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd14:	891b      	ldrh	r3, [r3, #8]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d101      	bne.n	800cd1e <find_volume+0x3c2>
 800cd1a:	230d      	movs	r3, #13
 800cd1c:	e094      	b.n	800ce48 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cd1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cd22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd24:	441a      	add	r2, r3
 800cd26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd28:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cd2a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cd2e:	2b02      	cmp	r3, #2
 800cd30:	d103      	bne.n	800cd3a <find_volume+0x3de>
 800cd32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd34:	699b      	ldr	r3, [r3, #24]
 800cd36:	005b      	lsls	r3, r3, #1
 800cd38:	e00a      	b.n	800cd50 <find_volume+0x3f4>
 800cd3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd3c:	699a      	ldr	r2, [r3, #24]
 800cd3e:	4613      	mov	r3, r2
 800cd40:	005b      	lsls	r3, r3, #1
 800cd42:	4413      	add	r3, r2
 800cd44:	085a      	lsrs	r2, r3, #1
 800cd46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd48:	699b      	ldr	r3, [r3, #24]
 800cd4a:	f003 0301 	and.w	r3, r3, #1
 800cd4e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cd50:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cd52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd54:	69da      	ldr	r2, [r3, #28]
 800cd56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd58:	899b      	ldrh	r3, [r3, #12]
 800cd5a:	4619      	mov	r1, r3
 800cd5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd5e:	440b      	add	r3, r1
 800cd60:	3b01      	subs	r3, #1
 800cd62:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cd64:	8989      	ldrh	r1, [r1, #12]
 800cd66:	fbb3 f3f1 	udiv	r3, r3, r1
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d201      	bcs.n	800cd72 <find_volume+0x416>
 800cd6e:	230d      	movs	r3, #13
 800cd70:	e06a      	b.n	800ce48 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cd72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd74:	f04f 32ff 	mov.w	r2, #4294967295
 800cd78:	615a      	str	r2, [r3, #20]
 800cd7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd7c:	695a      	ldr	r2, [r3, #20]
 800cd7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd80:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800cd82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd84:	2280      	movs	r2, #128	@ 0x80
 800cd86:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cd88:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cd8c:	2b03      	cmp	r3, #3
 800cd8e:	d149      	bne.n	800ce24 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cd90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd92:	3334      	adds	r3, #52	@ 0x34
 800cd94:	3330      	adds	r3, #48	@ 0x30
 800cd96:	4618      	mov	r0, r3
 800cd98:	f7fe fb40 	bl	800b41c <ld_word>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	2b01      	cmp	r3, #1
 800cda0:	d140      	bne.n	800ce24 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cda2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cda4:	3301      	adds	r3, #1
 800cda6:	4619      	mov	r1, r3
 800cda8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cdaa:	f7fe fde7 	bl	800b97c <move_window>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d137      	bne.n	800ce24 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800cdb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cdba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdbc:	3334      	adds	r3, #52	@ 0x34
 800cdbe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f7fe fb2a 	bl	800b41c <ld_word>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	461a      	mov	r2, r3
 800cdcc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d127      	bne.n	800ce24 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cdd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdd6:	3334      	adds	r3, #52	@ 0x34
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7fe fb37 	bl	800b44c <ld_dword>
 800cdde:	4603      	mov	r3, r0
 800cde0:	4a1b      	ldr	r2, [pc, #108]	@ (800ce50 <find_volume+0x4f4>)
 800cde2:	4293      	cmp	r3, r2
 800cde4:	d11e      	bne.n	800ce24 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cde6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cde8:	3334      	adds	r3, #52	@ 0x34
 800cdea:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f7fe fb2c 	bl	800b44c <ld_dword>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	4a17      	ldr	r2, [pc, #92]	@ (800ce54 <find_volume+0x4f8>)
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	d113      	bne.n	800ce24 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cdfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdfe:	3334      	adds	r3, #52	@ 0x34
 800ce00:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7fe fb21 	bl	800b44c <ld_dword>
 800ce0a:	4602      	mov	r2, r0
 800ce0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce0e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ce10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce12:	3334      	adds	r3, #52	@ 0x34
 800ce14:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7fe fb17 	bl	800b44c <ld_dword>
 800ce1e:	4602      	mov	r2, r0
 800ce20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce22:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ce24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce26:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800ce2a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ce2c:	4b0a      	ldr	r3, [pc, #40]	@ (800ce58 <find_volume+0x4fc>)
 800ce2e:	881b      	ldrh	r3, [r3, #0]
 800ce30:	3301      	adds	r3, #1
 800ce32:	b29a      	uxth	r2, r3
 800ce34:	4b08      	ldr	r3, [pc, #32]	@ (800ce58 <find_volume+0x4fc>)
 800ce36:	801a      	strh	r2, [r3, #0]
 800ce38:	4b07      	ldr	r3, [pc, #28]	@ (800ce58 <find_volume+0x4fc>)
 800ce3a:	881a      	ldrh	r2, [r3, #0]
 800ce3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce3e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ce40:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ce42:	f7fe fd33 	bl	800b8ac <clear_lock>
#endif
	return FR_OK;
 800ce46:	2300      	movs	r3, #0
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3758      	adds	r7, #88	@ 0x58
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}
 800ce50:	41615252 	.word	0x41615252
 800ce54:	61417272 	.word	0x61417272
 800ce58:	20002ca4 	.word	0x20002ca4

0800ce5c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b084      	sub	sp, #16
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ce66:	2309      	movs	r3, #9
 800ce68:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d01c      	beq.n	800ceaa <validate+0x4e>
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d018      	beq.n	800ceaa <validate+0x4e>
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	781b      	ldrb	r3, [r3, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d013      	beq.n	800ceaa <validate+0x4e>
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	889a      	ldrh	r2, [r3, #4]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	88db      	ldrh	r3, [r3, #6]
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d10c      	bne.n	800ceaa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	785b      	ldrb	r3, [r3, #1]
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7fe fa20 	bl	800b2dc <disk_status>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	f003 0301 	and.w	r3, r3, #1
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d101      	bne.n	800ceaa <validate+0x4e>
			res = FR_OK;
 800cea6:	2300      	movs	r3, #0
 800cea8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ceaa:	7bfb      	ldrb	r3, [r7, #15]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d102      	bne.n	800ceb6 <validate+0x5a>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	e000      	b.n	800ceb8 <validate+0x5c>
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	683a      	ldr	r2, [r7, #0]
 800ceba:	6013      	str	r3, [r2, #0]
	return res;
 800cebc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3710      	adds	r7, #16
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
	...

0800cec8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b088      	sub	sp, #32
 800cecc:	af00      	add	r7, sp, #0
 800cece:	60f8      	str	r0, [r7, #12]
 800ced0:	60b9      	str	r1, [r7, #8]
 800ced2:	4613      	mov	r3, r2
 800ced4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ceda:	f107 0310 	add.w	r3, r7, #16
 800cede:	4618      	mov	r0, r3
 800cee0:	f7ff fca2 	bl	800c828 <get_ldnumber>
 800cee4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cee6:	69fb      	ldr	r3, [r7, #28]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	da01      	bge.n	800cef0 <f_mount+0x28>
 800ceec:	230b      	movs	r3, #11
 800ceee:	e02b      	b.n	800cf48 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cef0:	4a17      	ldr	r2, [pc, #92]	@ (800cf50 <f_mount+0x88>)
 800cef2:	69fb      	ldr	r3, [r7, #28]
 800cef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cef8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cefa:	69bb      	ldr	r3, [r7, #24]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d005      	beq.n	800cf0c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cf00:	69b8      	ldr	r0, [r7, #24]
 800cf02:	f7fe fcd3 	bl	800b8ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cf06:	69bb      	ldr	r3, [r7, #24]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d002      	beq.n	800cf18 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	2200      	movs	r2, #0
 800cf16:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cf18:	68fa      	ldr	r2, [r7, #12]
 800cf1a:	490d      	ldr	r1, [pc, #52]	@ (800cf50 <f_mount+0x88>)
 800cf1c:	69fb      	ldr	r3, [r7, #28]
 800cf1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d002      	beq.n	800cf2e <f_mount+0x66>
 800cf28:	79fb      	ldrb	r3, [r7, #7]
 800cf2a:	2b01      	cmp	r3, #1
 800cf2c:	d001      	beq.n	800cf32 <f_mount+0x6a>
 800cf2e:	2300      	movs	r3, #0
 800cf30:	e00a      	b.n	800cf48 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cf32:	f107 010c 	add.w	r1, r7, #12
 800cf36:	f107 0308 	add.w	r3, r7, #8
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7ff fd0d 	bl	800c95c <find_volume>
 800cf42:	4603      	mov	r3, r0
 800cf44:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cf46:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	3720      	adds	r7, #32
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}
 800cf50:	20002ca0 	.word	0x20002ca0

0800cf54 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b098      	sub	sp, #96	@ 0x60
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	60f8      	str	r0, [r7, #12]
 800cf5c:	60b9      	str	r1, [r7, #8]
 800cf5e:	4613      	mov	r3, r2
 800cf60:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d101      	bne.n	800cf6c <f_open+0x18>
 800cf68:	2309      	movs	r3, #9
 800cf6a:	e1b7      	b.n	800d2dc <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cf6c:	79fb      	ldrb	r3, [r7, #7]
 800cf6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cf72:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cf74:	79fa      	ldrb	r2, [r7, #7]
 800cf76:	f107 0110 	add.w	r1, r7, #16
 800cf7a:	f107 0308 	add.w	r3, r7, #8
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f7ff fcec 	bl	800c95c <find_volume>
 800cf84:	4603      	mov	r3, r0
 800cf86:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800cf8a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	f040 819b 	bne.w	800d2ca <f_open+0x376>
		dj.obj.fs = fs;
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cf98:	68ba      	ldr	r2, [r7, #8]
 800cf9a:	f107 0314 	add.w	r3, r7, #20
 800cf9e:	4611      	mov	r1, r2
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f7ff fbcb 	bl	800c73c <follow_path>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cfac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d118      	bne.n	800cfe6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cfb4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cfb8:	b25b      	sxtb	r3, r3
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	da03      	bge.n	800cfc6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800cfbe:	2306      	movs	r3, #6
 800cfc0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cfc4:	e00f      	b.n	800cfe6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cfc6:	79fb      	ldrb	r3, [r7, #7]
 800cfc8:	2b01      	cmp	r3, #1
 800cfca:	bf8c      	ite	hi
 800cfcc:	2301      	movhi	r3, #1
 800cfce:	2300      	movls	r3, #0
 800cfd0:	b2db      	uxtb	r3, r3
 800cfd2:	461a      	mov	r2, r3
 800cfd4:	f107 0314 	add.w	r3, r7, #20
 800cfd8:	4611      	mov	r1, r2
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f7fe fb1e 	bl	800b61c <chk_lock>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cfe6:	79fb      	ldrb	r3, [r7, #7]
 800cfe8:	f003 031c 	and.w	r3, r3, #28
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d07f      	beq.n	800d0f0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800cff0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d017      	beq.n	800d028 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cff8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cffc:	2b04      	cmp	r3, #4
 800cffe:	d10e      	bne.n	800d01e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d000:	f7fe fb68 	bl	800b6d4 <enq_lock>
 800d004:	4603      	mov	r3, r0
 800d006:	2b00      	cmp	r3, #0
 800d008:	d006      	beq.n	800d018 <f_open+0xc4>
 800d00a:	f107 0314 	add.w	r3, r7, #20
 800d00e:	4618      	mov	r0, r3
 800d010:	f7ff facd 	bl	800c5ae <dir_register>
 800d014:	4603      	mov	r3, r0
 800d016:	e000      	b.n	800d01a <f_open+0xc6>
 800d018:	2312      	movs	r3, #18
 800d01a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d01e:	79fb      	ldrb	r3, [r7, #7]
 800d020:	f043 0308 	orr.w	r3, r3, #8
 800d024:	71fb      	strb	r3, [r7, #7]
 800d026:	e010      	b.n	800d04a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d028:	7ebb      	ldrb	r3, [r7, #26]
 800d02a:	f003 0311 	and.w	r3, r3, #17
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d003      	beq.n	800d03a <f_open+0xe6>
					res = FR_DENIED;
 800d032:	2307      	movs	r3, #7
 800d034:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d038:	e007      	b.n	800d04a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d03a:	79fb      	ldrb	r3, [r7, #7]
 800d03c:	f003 0304 	and.w	r3, r3, #4
 800d040:	2b00      	cmp	r3, #0
 800d042:	d002      	beq.n	800d04a <f_open+0xf6>
 800d044:	2308      	movs	r3, #8
 800d046:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d04a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d168      	bne.n	800d124 <f_open+0x1d0>
 800d052:	79fb      	ldrb	r3, [r7, #7]
 800d054:	f003 0308 	and.w	r3, r3, #8
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d063      	beq.n	800d124 <f_open+0x1d0>
				dw = GET_FATTIME();
 800d05c:	f7fd ff0a 	bl	800ae74 <get_fattime>
 800d060:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d064:	330e      	adds	r3, #14
 800d066:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d068:	4618      	mov	r0, r3
 800d06a:	f7fe fa2d 	bl	800b4c8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d06e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d070:	3316      	adds	r3, #22
 800d072:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d074:	4618      	mov	r0, r3
 800d076:	f7fe fa27 	bl	800b4c8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d07a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d07c:	330b      	adds	r3, #11
 800d07e:	2220      	movs	r2, #32
 800d080:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d086:	4611      	mov	r1, r2
 800d088:	4618      	mov	r0, r3
 800d08a:	f7ff f9fc 	bl	800c486 <ld_clust>
 800d08e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d094:	2200      	movs	r2, #0
 800d096:	4618      	mov	r0, r3
 800d098:	f7ff fa14 	bl	800c4c4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d09c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d09e:	331c      	adds	r3, #28
 800d0a0:	2100      	movs	r1, #0
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7fe fa10 	bl	800b4c8 <st_dword>
					fs->wflag = 1;
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d0ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d037      	beq.n	800d124 <f_open+0x1d0>
						dw = fs->winsect;
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0b8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d0ba:	f107 0314 	add.w	r3, r7, #20
 800d0be:	2200      	movs	r2, #0
 800d0c0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7fe ff04 	bl	800bed0 <remove_chain>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800d0ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d126      	bne.n	800d124 <f_open+0x1d0>
							res = move_window(fs, dw);
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7fe fc4e 	bl	800b97c <move_window>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d0ea:	3a01      	subs	r2, #1
 800d0ec:	611a      	str	r2, [r3, #16]
 800d0ee:	e019      	b.n	800d124 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d0f0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d115      	bne.n	800d124 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d0f8:	7ebb      	ldrb	r3, [r7, #26]
 800d0fa:	f003 0310 	and.w	r3, r3, #16
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d003      	beq.n	800d10a <f_open+0x1b6>
					res = FR_NO_FILE;
 800d102:	2304      	movs	r3, #4
 800d104:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d108:	e00c      	b.n	800d124 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d10a:	79fb      	ldrb	r3, [r7, #7]
 800d10c:	f003 0302 	and.w	r3, r3, #2
 800d110:	2b00      	cmp	r3, #0
 800d112:	d007      	beq.n	800d124 <f_open+0x1d0>
 800d114:	7ebb      	ldrb	r3, [r7, #26]
 800d116:	f003 0301 	and.w	r3, r3, #1
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d002      	beq.n	800d124 <f_open+0x1d0>
						res = FR_DENIED;
 800d11e:	2307      	movs	r3, #7
 800d120:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d124:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d126      	bne.n	800d17a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d12c:	79fb      	ldrb	r3, [r7, #7]
 800d12e:	f003 0308 	and.w	r3, r3, #8
 800d132:	2b00      	cmp	r3, #0
 800d134:	d003      	beq.n	800d13e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800d136:	79fb      	ldrb	r3, [r7, #7]
 800d138:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d13c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800d146:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d14c:	79fb      	ldrb	r3, [r7, #7]
 800d14e:	2b01      	cmp	r3, #1
 800d150:	bf8c      	ite	hi
 800d152:	2301      	movhi	r3, #1
 800d154:	2300      	movls	r3, #0
 800d156:	b2db      	uxtb	r3, r3
 800d158:	461a      	mov	r2, r3
 800d15a:	f107 0314 	add.w	r3, r7, #20
 800d15e:	4611      	mov	r1, r2
 800d160:	4618      	mov	r0, r3
 800d162:	f7fe fad9 	bl	800b718 <inc_lock>
 800d166:	4602      	mov	r2, r0
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	691b      	ldr	r3, [r3, #16]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d102      	bne.n	800d17a <f_open+0x226>
 800d174:	2302      	movs	r3, #2
 800d176:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d17a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d17e:	2b00      	cmp	r3, #0
 800d180:	f040 80a3 	bne.w	800d2ca <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d188:	4611      	mov	r1, r2
 800d18a:	4618      	mov	r0, r3
 800d18c:	f7ff f97b 	bl	800c486 <ld_clust>
 800d190:	4602      	mov	r2, r0
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d198:	331c      	adds	r3, #28
 800d19a:	4618      	mov	r0, r3
 800d19c:	f7fe f956 	bl	800b44c <ld_dword>
 800d1a0:	4602      	mov	r2, r0
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d1ac:	693a      	ldr	r2, [r7, #16]
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	88da      	ldrh	r2, [r3, #6]
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	79fa      	ldrb	r2, [r7, #7]
 800d1be:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	3330      	adds	r3, #48	@ 0x30
 800d1d6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800d1da:	2100      	movs	r1, #0
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f7fe f9c0 	bl	800b562 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d1e2:	79fb      	ldrb	r3, [r7, #7]
 800d1e4:	f003 0320 	and.w	r3, r3, #32
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d06e      	beq.n	800d2ca <f_open+0x376>
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	68db      	ldr	r3, [r3, #12]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d06a      	beq.n	800d2ca <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	68da      	ldr	r2, [r3, #12]
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	895b      	ldrh	r3, [r3, #10]
 800d200:	461a      	mov	r2, r3
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	899b      	ldrh	r3, [r3, #12]
 800d206:	fb02 f303 	mul.w	r3, r2, r3
 800d20a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	689b      	ldr	r3, [r3, #8]
 800d210:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	68db      	ldr	r3, [r3, #12]
 800d216:	657b      	str	r3, [r7, #84]	@ 0x54
 800d218:	e016      	b.n	800d248 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d21e:	4618      	mov	r0, r3
 800d220:	f7fe fc69 	bl	800baf6 <get_fat>
 800d224:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d226:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d228:	2b01      	cmp	r3, #1
 800d22a:	d802      	bhi.n	800d232 <f_open+0x2de>
 800d22c:	2302      	movs	r3, #2
 800d22e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d232:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d234:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d238:	d102      	bne.n	800d240 <f_open+0x2ec>
 800d23a:	2301      	movs	r3, #1
 800d23c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d240:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d242:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d244:	1ad3      	subs	r3, r2, r3
 800d246:	657b      	str	r3, [r7, #84]	@ 0x54
 800d248:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d103      	bne.n	800d258 <f_open+0x304>
 800d250:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d252:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d254:	429a      	cmp	r2, r3
 800d256:	d8e0      	bhi.n	800d21a <f_open+0x2c6>
				}
				fp->clust = clst;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d25c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d25e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d262:	2b00      	cmp	r3, #0
 800d264:	d131      	bne.n	800d2ca <f_open+0x376>
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	899b      	ldrh	r3, [r3, #12]
 800d26a:	461a      	mov	r2, r3
 800d26c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d26e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d272:	fb01 f202 	mul.w	r2, r1, r2
 800d276:	1a9b      	subs	r3, r3, r2
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d026      	beq.n	800d2ca <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d27c:	693b      	ldr	r3, [r7, #16]
 800d27e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d280:	4618      	mov	r0, r3
 800d282:	f7fe fc19 	bl	800bab8 <clust2sect>
 800d286:	6478      	str	r0, [r7, #68]	@ 0x44
 800d288:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d103      	bne.n	800d296 <f_open+0x342>
						res = FR_INT_ERR;
 800d28e:	2302      	movs	r3, #2
 800d290:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d294:	e019      	b.n	800d2ca <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	899b      	ldrh	r3, [r3, #12]
 800d29a:	461a      	mov	r2, r3
 800d29c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d29e:	fbb3 f2f2 	udiv	r2, r3, r2
 800d2a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2a4:	441a      	add	r2, r3
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	7858      	ldrb	r0, [r3, #1]
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	6a1a      	ldr	r2, [r3, #32]
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	f7fe f851 	bl	800b360 <disk_read>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d002      	beq.n	800d2ca <f_open+0x376>
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d2ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d002      	beq.n	800d2d8 <f_open+0x384>
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d2d8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3760      	adds	r7, #96	@ 0x60
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}

0800d2e4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b08c      	sub	sp, #48	@ 0x30
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	60f8      	str	r0, [r7, #12]
 800d2ec:	60b9      	str	r1, [r7, #8]
 800d2ee:	607a      	str	r2, [r7, #4]
 800d2f0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	f107 0210 	add.w	r2, r7, #16
 800d302:	4611      	mov	r1, r2
 800d304:	4618      	mov	r0, r3
 800d306:	f7ff fda9 	bl	800ce5c <validate>
 800d30a:	4603      	mov	r3, r0
 800d30c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d310:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d314:	2b00      	cmp	r3, #0
 800d316:	d107      	bne.n	800d328 <f_write+0x44>
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	7d5b      	ldrb	r3, [r3, #21]
 800d31c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d320:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d324:	2b00      	cmp	r3, #0
 800d326:	d002      	beq.n	800d32e <f_write+0x4a>
 800d328:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d32c:	e16a      	b.n	800d604 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	7d1b      	ldrb	r3, [r3, #20]
 800d332:	f003 0302 	and.w	r3, r3, #2
 800d336:	2b00      	cmp	r3, #0
 800d338:	d101      	bne.n	800d33e <f_write+0x5a>
 800d33a:	2307      	movs	r3, #7
 800d33c:	e162      	b.n	800d604 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	699a      	ldr	r2, [r3, #24]
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	441a      	add	r2, r3
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	699b      	ldr	r3, [r3, #24]
 800d34a:	429a      	cmp	r2, r3
 800d34c:	f080 814c 	bcs.w	800d5e8 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	699b      	ldr	r3, [r3, #24]
 800d354:	43db      	mvns	r3, r3
 800d356:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d358:	e146      	b.n	800d5e8 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	699b      	ldr	r3, [r3, #24]
 800d35e:	693a      	ldr	r2, [r7, #16]
 800d360:	8992      	ldrh	r2, [r2, #12]
 800d362:	fbb3 f1f2 	udiv	r1, r3, r2
 800d366:	fb01 f202 	mul.w	r2, r1, r2
 800d36a:	1a9b      	subs	r3, r3, r2
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	f040 80f1 	bne.w	800d554 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	699b      	ldr	r3, [r3, #24]
 800d376:	693a      	ldr	r2, [r7, #16]
 800d378:	8992      	ldrh	r2, [r2, #12]
 800d37a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d37e:	693a      	ldr	r2, [r7, #16]
 800d380:	8952      	ldrh	r2, [r2, #10]
 800d382:	3a01      	subs	r2, #1
 800d384:	4013      	ands	r3, r2
 800d386:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d388:	69bb      	ldr	r3, [r7, #24]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d143      	bne.n	800d416 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	699b      	ldr	r3, [r3, #24]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d10c      	bne.n	800d3b0 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	689b      	ldr	r3, [r3, #8]
 800d39a:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d39c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d11a      	bne.n	800d3d8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	2100      	movs	r1, #0
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f7fe fdf7 	bl	800bf9a <create_chain>
 800d3ac:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d3ae:	e013      	b.n	800d3d8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d007      	beq.n	800d3c8 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	699b      	ldr	r3, [r3, #24]
 800d3bc:	4619      	mov	r1, r3
 800d3be:	68f8      	ldr	r0, [r7, #12]
 800d3c0:	f7fe fe83 	bl	800c0ca <clmt_clust>
 800d3c4:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d3c6:	e007      	b.n	800d3d8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d3c8:	68fa      	ldr	r2, [r7, #12]
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	69db      	ldr	r3, [r3, #28]
 800d3ce:	4619      	mov	r1, r3
 800d3d0:	4610      	mov	r0, r2
 800d3d2:	f7fe fde2 	bl	800bf9a <create_chain>
 800d3d6:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d3d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	f000 8109 	beq.w	800d5f2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d3e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3e2:	2b01      	cmp	r3, #1
 800d3e4:	d104      	bne.n	800d3f0 <f_write+0x10c>
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	2202      	movs	r2, #2
 800d3ea:	755a      	strb	r2, [r3, #21]
 800d3ec:	2302      	movs	r3, #2
 800d3ee:	e109      	b.n	800d604 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d3f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3f6:	d104      	bne.n	800d402 <f_write+0x11e>
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	2201      	movs	r2, #1
 800d3fc:	755a      	strb	r2, [r3, #21]
 800d3fe:	2301      	movs	r3, #1
 800d400:	e100      	b.n	800d604 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d406:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	689b      	ldr	r3, [r3, #8]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d102      	bne.n	800d416 <f_write+0x132>
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d414:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	7d1b      	ldrb	r3, [r3, #20]
 800d41a:	b25b      	sxtb	r3, r3
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	da18      	bge.n	800d452 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d420:	693b      	ldr	r3, [r7, #16]
 800d422:	7858      	ldrb	r0, [r3, #1]
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	6a1a      	ldr	r2, [r3, #32]
 800d42e:	2301      	movs	r3, #1
 800d430:	f7fd ffb6 	bl	800b3a0 <disk_write>
 800d434:	4603      	mov	r3, r0
 800d436:	2b00      	cmp	r3, #0
 800d438:	d004      	beq.n	800d444 <f_write+0x160>
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	2201      	movs	r2, #1
 800d43e:	755a      	strb	r2, [r3, #21]
 800d440:	2301      	movs	r3, #1
 800d442:	e0df      	b.n	800d604 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	7d1b      	ldrb	r3, [r3, #20]
 800d448:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d44c:	b2da      	uxtb	r2, r3
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d452:	693a      	ldr	r2, [r7, #16]
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	69db      	ldr	r3, [r3, #28]
 800d458:	4619      	mov	r1, r3
 800d45a:	4610      	mov	r0, r2
 800d45c:	f7fe fb2c 	bl	800bab8 <clust2sect>
 800d460:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d104      	bne.n	800d472 <f_write+0x18e>
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	2202      	movs	r2, #2
 800d46c:	755a      	strb	r2, [r3, #21]
 800d46e:	2302      	movs	r3, #2
 800d470:	e0c8      	b.n	800d604 <f_write+0x320>
			sect += csect;
 800d472:	697a      	ldr	r2, [r7, #20]
 800d474:	69bb      	ldr	r3, [r7, #24]
 800d476:	4413      	add	r3, r2
 800d478:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	899b      	ldrh	r3, [r3, #12]
 800d47e:	461a      	mov	r2, r3
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	fbb3 f3f2 	udiv	r3, r3, r2
 800d486:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d488:	6a3b      	ldr	r3, [r7, #32]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d043      	beq.n	800d516 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d48e:	69ba      	ldr	r2, [r7, #24]
 800d490:	6a3b      	ldr	r3, [r7, #32]
 800d492:	4413      	add	r3, r2
 800d494:	693a      	ldr	r2, [r7, #16]
 800d496:	8952      	ldrh	r2, [r2, #10]
 800d498:	4293      	cmp	r3, r2
 800d49a:	d905      	bls.n	800d4a8 <f_write+0x1c4>
					cc = fs->csize - csect;
 800d49c:	693b      	ldr	r3, [r7, #16]
 800d49e:	895b      	ldrh	r3, [r3, #10]
 800d4a0:	461a      	mov	r2, r3
 800d4a2:	69bb      	ldr	r3, [r7, #24]
 800d4a4:	1ad3      	subs	r3, r2, r3
 800d4a6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	7858      	ldrb	r0, [r3, #1]
 800d4ac:	6a3b      	ldr	r3, [r7, #32]
 800d4ae:	697a      	ldr	r2, [r7, #20]
 800d4b0:	69f9      	ldr	r1, [r7, #28]
 800d4b2:	f7fd ff75 	bl	800b3a0 <disk_write>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d004      	beq.n	800d4c6 <f_write+0x1e2>
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	2201      	movs	r2, #1
 800d4c0:	755a      	strb	r2, [r3, #21]
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	e09e      	b.n	800d604 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	6a1a      	ldr	r2, [r3, #32]
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	1ad3      	subs	r3, r2, r3
 800d4ce:	6a3a      	ldr	r2, [r7, #32]
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d918      	bls.n	800d506 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	6a1a      	ldr	r2, [r3, #32]
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	1ad3      	subs	r3, r2, r3
 800d4e2:	693a      	ldr	r2, [r7, #16]
 800d4e4:	8992      	ldrh	r2, [r2, #12]
 800d4e6:	fb02 f303 	mul.w	r3, r2, r3
 800d4ea:	69fa      	ldr	r2, [r7, #28]
 800d4ec:	18d1      	adds	r1, r2, r3
 800d4ee:	693b      	ldr	r3, [r7, #16]
 800d4f0:	899b      	ldrh	r3, [r3, #12]
 800d4f2:	461a      	mov	r2, r3
 800d4f4:	f7fe f814 	bl	800b520 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	7d1b      	ldrb	r3, [r3, #20]
 800d4fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d500:	b2da      	uxtb	r2, r3
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	899b      	ldrh	r3, [r3, #12]
 800d50a:	461a      	mov	r2, r3
 800d50c:	6a3b      	ldr	r3, [r7, #32]
 800d50e:	fb02 f303 	mul.w	r3, r2, r3
 800d512:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800d514:	e04b      	b.n	800d5ae <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	6a1b      	ldr	r3, [r3, #32]
 800d51a:	697a      	ldr	r2, [r7, #20]
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d016      	beq.n	800d54e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	699a      	ldr	r2, [r3, #24]
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d528:	429a      	cmp	r2, r3
 800d52a:	d210      	bcs.n	800d54e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	7858      	ldrb	r0, [r3, #1]
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d536:	2301      	movs	r3, #1
 800d538:	697a      	ldr	r2, [r7, #20]
 800d53a:	f7fd ff11 	bl	800b360 <disk_read>
 800d53e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d540:	2b00      	cmp	r3, #0
 800d542:	d004      	beq.n	800d54e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2201      	movs	r2, #1
 800d548:	755a      	strb	r2, [r3, #21]
 800d54a:	2301      	movs	r3, #1
 800d54c:	e05a      	b.n	800d604 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	697a      	ldr	r2, [r7, #20]
 800d552:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	899b      	ldrh	r3, [r3, #12]
 800d558:	4618      	mov	r0, r3
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	699b      	ldr	r3, [r3, #24]
 800d55e:	693a      	ldr	r2, [r7, #16]
 800d560:	8992      	ldrh	r2, [r2, #12]
 800d562:	fbb3 f1f2 	udiv	r1, r3, r2
 800d566:	fb01 f202 	mul.w	r2, r1, r2
 800d56a:	1a9b      	subs	r3, r3, r2
 800d56c:	1ac3      	subs	r3, r0, r3
 800d56e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	429a      	cmp	r2, r3
 800d576:	d901      	bls.n	800d57c <f_write+0x298>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	699b      	ldr	r3, [r3, #24]
 800d586:	693a      	ldr	r2, [r7, #16]
 800d588:	8992      	ldrh	r2, [r2, #12]
 800d58a:	fbb3 f0f2 	udiv	r0, r3, r2
 800d58e:	fb00 f202 	mul.w	r2, r0, r2
 800d592:	1a9b      	subs	r3, r3, r2
 800d594:	440b      	add	r3, r1
 800d596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d598:	69f9      	ldr	r1, [r7, #28]
 800d59a:	4618      	mov	r0, r3
 800d59c:	f7fd ffc0 	bl	800b520 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	7d1b      	ldrb	r3, [r3, #20]
 800d5a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d5a8:	b2da      	uxtb	r2, r3
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d5ae:	69fa      	ldr	r2, [r7, #28]
 800d5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b2:	4413      	add	r3, r2
 800d5b4:	61fb      	str	r3, [r7, #28]
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	699a      	ldr	r2, [r3, #24]
 800d5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5bc:	441a      	add	r2, r3
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	619a      	str	r2, [r3, #24]
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	68da      	ldr	r2, [r3, #12]
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	699b      	ldr	r3, [r3, #24]
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	bf38      	it	cc
 800d5ce:	461a      	movcc	r2, r3
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	60da      	str	r2, [r3, #12]
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	681a      	ldr	r2, [r3, #0]
 800d5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5da:	441a      	add	r2, r3
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	601a      	str	r2, [r3, #0]
 800d5e0:	687a      	ldr	r2, [r7, #4]
 800d5e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5e4:	1ad3      	subs	r3, r2, r3
 800d5e6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	f47f aeb5 	bne.w	800d35a <f_write+0x76>
 800d5f0:	e000      	b.n	800d5f4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d5f2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	7d1b      	ldrb	r3, [r3, #20]
 800d5f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5fc:	b2da      	uxtb	r2, r3
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d602:	2300      	movs	r3, #0
}
 800d604:	4618      	mov	r0, r3
 800d606:	3730      	adds	r7, #48	@ 0x30
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}

0800d60c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b086      	sub	sp, #24
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f107 0208 	add.w	r2, r7, #8
 800d61a:	4611      	mov	r1, r2
 800d61c:	4618      	mov	r0, r3
 800d61e:	f7ff fc1d 	bl	800ce5c <validate>
 800d622:	4603      	mov	r3, r0
 800d624:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d626:	7dfb      	ldrb	r3, [r7, #23]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d168      	bne.n	800d6fe <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	7d1b      	ldrb	r3, [r3, #20]
 800d630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d634:	2b00      	cmp	r3, #0
 800d636:	d062      	beq.n	800d6fe <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	7d1b      	ldrb	r3, [r3, #20]
 800d63c:	b25b      	sxtb	r3, r3
 800d63e:	2b00      	cmp	r3, #0
 800d640:	da15      	bge.n	800d66e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	7858      	ldrb	r0, [r3, #1]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6a1a      	ldr	r2, [r3, #32]
 800d650:	2301      	movs	r3, #1
 800d652:	f7fd fea5 	bl	800b3a0 <disk_write>
 800d656:	4603      	mov	r3, r0
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d001      	beq.n	800d660 <f_sync+0x54>
 800d65c:	2301      	movs	r3, #1
 800d65e:	e04f      	b.n	800d700 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	7d1b      	ldrb	r3, [r3, #20]
 800d664:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d668:	b2da      	uxtb	r2, r3
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d66e:	f7fd fc01 	bl	800ae74 <get_fattime>
 800d672:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d674:	68ba      	ldr	r2, [r7, #8]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d67a:	4619      	mov	r1, r3
 800d67c:	4610      	mov	r0, r2
 800d67e:	f7fe f97d 	bl	800b97c <move_window>
 800d682:	4603      	mov	r3, r0
 800d684:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d686:	7dfb      	ldrb	r3, [r7, #23]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d138      	bne.n	800d6fe <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d690:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	330b      	adds	r3, #11
 800d696:	781a      	ldrb	r2, [r3, #0]
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	330b      	adds	r3, #11
 800d69c:	f042 0220 	orr.w	r2, r2, #32
 800d6a0:	b2d2      	uxtb	r2, r2
 800d6a2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6818      	ldr	r0, [r3, #0]
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	689b      	ldr	r3, [r3, #8]
 800d6ac:	461a      	mov	r2, r3
 800d6ae:	68f9      	ldr	r1, [r7, #12]
 800d6b0:	f7fe ff08 	bl	800c4c4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	f103 021c 	add.w	r2, r3, #28
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	68db      	ldr	r3, [r3, #12]
 800d6be:	4619      	mov	r1, r3
 800d6c0:	4610      	mov	r0, r2
 800d6c2:	f7fd ff01 	bl	800b4c8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	3316      	adds	r3, #22
 800d6ca:	6939      	ldr	r1, [r7, #16]
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7fd fefb 	bl	800b4c8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	3312      	adds	r3, #18
 800d6d6:	2100      	movs	r1, #0
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f7fd feda 	bl	800b492 <st_word>
					fs->wflag = 1;
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	2201      	movs	r2, #1
 800d6e2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f7fe f976 	bl	800b9d8 <sync_fs>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	7d1b      	ldrb	r3, [r3, #20]
 800d6f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d6f8:	b2da      	uxtb	r2, r3
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d6fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800d700:	4618      	mov	r0, r3
 800d702:	3718      	adds	r7, #24
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}

0800d708 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b084      	sub	sp, #16
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f7ff ff7b 	bl	800d60c <f_sync>
 800d716:	4603      	mov	r3, r0
 800d718:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d71a:	7bfb      	ldrb	r3, [r7, #15]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d118      	bne.n	800d752 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f107 0208 	add.w	r2, r7, #8
 800d726:	4611      	mov	r1, r2
 800d728:	4618      	mov	r0, r3
 800d72a:	f7ff fb97 	bl	800ce5c <validate>
 800d72e:	4603      	mov	r3, r0
 800d730:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d732:	7bfb      	ldrb	r3, [r7, #15]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d10c      	bne.n	800d752 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	691b      	ldr	r3, [r3, #16]
 800d73c:	4618      	mov	r0, r3
 800d73e:	f7fe f879 	bl	800b834 <dec_lock>
 800d742:	4603      	mov	r3, r0
 800d744:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d746:	7bfb      	ldrb	r3, [r7, #15]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d102      	bne.n	800d752 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2200      	movs	r2, #0
 800d750:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d752:	7bfb      	ldrb	r3, [r7, #15]
}
 800d754:	4618      	mov	r0, r3
 800d756:	3710      	adds	r7, #16
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}

0800d75c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b096      	sub	sp, #88	@ 0x58
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800d764:	f107 0108 	add.w	r1, r7, #8
 800d768:	1d3b      	adds	r3, r7, #4
 800d76a:	2202      	movs	r2, #2
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7ff f8f5 	bl	800c95c <find_volume>
 800d772:	4603      	mov	r3, r0
 800d774:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800d77c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d780:	2b00      	cmp	r3, #0
 800d782:	f040 80f2 	bne.w	800d96a <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800d786:	687a      	ldr	r2, [r7, #4]
 800d788:	f107 030c 	add.w	r3, r7, #12
 800d78c:	4611      	mov	r1, r2
 800d78e:	4618      	mov	r0, r3
 800d790:	f7fe ffd4 	bl	800c73c <follow_path>
 800d794:	4603      	mov	r3, r0
 800d796:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800d79a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d102      	bne.n	800d7a8 <f_mkdir+0x4c>
 800d7a2:	2308      	movs	r3, #8
 800d7a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800d7a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d7ac:	2b04      	cmp	r3, #4
 800d7ae:	f040 80dc 	bne.w	800d96a <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800d7b2:	f107 030c 	add.w	r3, r7, #12
 800d7b6:	2100      	movs	r1, #0
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f7fe fbee 	bl	800bf9a <create_chain>
 800d7be:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	895b      	ldrh	r3, [r3, #10]
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	68bb      	ldr	r3, [r7, #8]
 800d7c8:	899b      	ldrh	r3, [r3, #12]
 800d7ca:	fb02 f303 	mul.w	r3, r2, r3
 800d7ce:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800d7d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d102      	bne.n	800d7e2 <f_mkdir+0x86>
 800d7dc:	2307      	movs	r3, #7
 800d7de:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800d7e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	d102      	bne.n	800d7ee <f_mkdir+0x92>
 800d7e8:	2302      	movs	r3, #2
 800d7ea:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d7ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7f4:	d102      	bne.n	800d7fc <f_mkdir+0xa0>
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800d7fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d800:	2b00      	cmp	r3, #0
 800d802:	d106      	bne.n	800d812 <f_mkdir+0xb6>
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	4618      	mov	r0, r3
 800d808:	f7fe f874 	bl	800b8f4 <sync_window>
 800d80c:	4603      	mov	r3, r0
 800d80e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 800d812:	f7fd fb2f 	bl	800ae74 <get_fattime>
 800d816:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800d818:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d16c      	bne.n	800d8fa <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d824:	4618      	mov	r0, r3
 800d826:	f7fe f947 	bl	800bab8 <clust2sect>
 800d82a:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	3334      	adds	r3, #52	@ 0x34
 800d830:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	899b      	ldrh	r3, [r3, #12]
 800d836:	461a      	mov	r2, r3
 800d838:	2100      	movs	r1, #0
 800d83a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d83c:	f7fd fe91 	bl	800b562 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800d840:	220b      	movs	r2, #11
 800d842:	2120      	movs	r1, #32
 800d844:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d846:	f7fd fe8c 	bl	800b562 <mem_set>
					dir[DIR_Name] = '.';
 800d84a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d84c:	222e      	movs	r2, #46	@ 0x2e
 800d84e:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800d850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d852:	330b      	adds	r3, #11
 800d854:	2210      	movs	r2, #16
 800d856:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800d858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d85a:	3316      	adds	r3, #22
 800d85c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d85e:	4618      	mov	r0, r3
 800d860:	f7fd fe32 	bl	800b4c8 <st_dword>
					st_clust(fs, dir, dcl);
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d868:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7fe fe2a 	bl	800c4c4 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800d870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d872:	3320      	adds	r3, #32
 800d874:	2220      	movs	r2, #32
 800d876:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d878:	4618      	mov	r0, r3
 800d87a:	f7fd fe51 	bl	800b520 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800d87e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d880:	3321      	adds	r3, #33	@ 0x21
 800d882:	222e      	movs	r2, #46	@ 0x2e
 800d884:	701a      	strb	r2, [r3, #0]
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	781b      	ldrb	r3, [r3, #0]
 800d88e:	2b03      	cmp	r3, #3
 800d890:	d106      	bne.n	800d8a0 <f_mkdir+0x144>
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d896:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d898:	429a      	cmp	r2, r3
 800d89a:	d101      	bne.n	800d8a0 <f_mkdir+0x144>
 800d89c:	2300      	movs	r3, #0
 800d89e:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800d8a0:	68b8      	ldr	r0, [r7, #8]
 800d8a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8a4:	3320      	adds	r3, #32
 800d8a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	f7fe fe0b 	bl	800c4c4 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	895b      	ldrh	r3, [r3, #10]
 800d8b2:	653b      	str	r3, [r7, #80]	@ 0x50
 800d8b4:	e01c      	b.n	800d8f0 <f_mkdir+0x194>
					fs->winsect = dsc++;
 800d8b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8b8:	1c5a      	adds	r2, r3, #1
 800d8ba:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800d8bc:	68ba      	ldr	r2, [r7, #8]
 800d8be:	6313      	str	r3, [r2, #48]	@ 0x30
					fs->wflag = 1;
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f7fe f813 	bl	800b8f4 <sync_window>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 800d8d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d10d      	bne.n	800d8f8 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	899b      	ldrh	r3, [r3, #12]
 800d8e0:	461a      	mov	r2, r3
 800d8e2:	2100      	movs	r1, #0
 800d8e4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d8e6:	f7fd fe3c 	bl	800b562 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800d8ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8ec:	3b01      	subs	r3, #1
 800d8ee:	653b      	str	r3, [r7, #80]	@ 0x50
 800d8f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d1df      	bne.n	800d8b6 <f_mkdir+0x15a>
 800d8f6:	e000      	b.n	800d8fa <f_mkdir+0x19e>
					if (res != FR_OK) break;
 800d8f8:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800d8fa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d107      	bne.n	800d912 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800d902:	f107 030c 	add.w	r3, r7, #12
 800d906:	4618      	mov	r0, r3
 800d908:	f7fe fe51 	bl	800c5ae <dir_register>
 800d90c:	4603      	mov	r3, r0
 800d90e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 800d912:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d916:	2b00      	cmp	r3, #0
 800d918:	d120      	bne.n	800d95c <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800d91a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d91c:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800d91e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d920:	3316      	adds	r3, #22
 800d922:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d924:	4618      	mov	r0, r3
 800d926:	f7fd fdcf 	bl	800b4c8 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d92e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d930:	4618      	mov	r0, r3
 800d932:	f7fe fdc7 	bl	800c4c4 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800d936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d938:	330b      	adds	r3, #11
 800d93a:	2210      	movs	r2, #16
 800d93c:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	2201      	movs	r2, #1
 800d942:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800d944:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d10e      	bne.n	800d96a <f_mkdir+0x20e>
					res = sync_fs(fs);
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	4618      	mov	r0, r3
 800d950:	f7fe f842 	bl	800b9d8 <sync_fs>
 800d954:	4603      	mov	r3, r0
 800d956:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800d95a:	e006      	b.n	800d96a <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800d95c:	f107 030c 	add.w	r3, r7, #12
 800d960:	2200      	movs	r2, #0
 800d962:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d964:	4618      	mov	r0, r3
 800d966:	f7fe fab3 	bl	800bed0 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800d96a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 800d96e:	4618      	mov	r0, r3
 800d970:	3758      	adds	r7, #88	@ 0x58
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}
	...

0800d978 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d978:	b480      	push	{r7}
 800d97a:	b087      	sub	sp, #28
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	60f8      	str	r0, [r7, #12]
 800d980:	60b9      	str	r1, [r7, #8]
 800d982:	4613      	mov	r3, r2
 800d984:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d986:	2301      	movs	r3, #1
 800d988:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d98a:	2300      	movs	r3, #0
 800d98c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d98e:	4b1f      	ldr	r3, [pc, #124]	@ (800da0c <FATFS_LinkDriverEx+0x94>)
 800d990:	7a5b      	ldrb	r3, [r3, #9]
 800d992:	b2db      	uxtb	r3, r3
 800d994:	2b00      	cmp	r3, #0
 800d996:	d131      	bne.n	800d9fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d998:	4b1c      	ldr	r3, [pc, #112]	@ (800da0c <FATFS_LinkDriverEx+0x94>)
 800d99a:	7a5b      	ldrb	r3, [r3, #9]
 800d99c:	b2db      	uxtb	r3, r3
 800d99e:	461a      	mov	r2, r3
 800d9a0:	4b1a      	ldr	r3, [pc, #104]	@ (800da0c <FATFS_LinkDriverEx+0x94>)
 800d9a2:	2100      	movs	r1, #0
 800d9a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d9a6:	4b19      	ldr	r3, [pc, #100]	@ (800da0c <FATFS_LinkDriverEx+0x94>)
 800d9a8:	7a5b      	ldrb	r3, [r3, #9]
 800d9aa:	b2db      	uxtb	r3, r3
 800d9ac:	4a17      	ldr	r2, [pc, #92]	@ (800da0c <FATFS_LinkDriverEx+0x94>)
 800d9ae:	009b      	lsls	r3, r3, #2
 800d9b0:	4413      	add	r3, r2
 800d9b2:	68fa      	ldr	r2, [r7, #12]
 800d9b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d9b6:	4b15      	ldr	r3, [pc, #84]	@ (800da0c <FATFS_LinkDriverEx+0x94>)
 800d9b8:	7a5b      	ldrb	r3, [r3, #9]
 800d9ba:	b2db      	uxtb	r3, r3
 800d9bc:	461a      	mov	r2, r3
 800d9be:	4b13      	ldr	r3, [pc, #76]	@ (800da0c <FATFS_LinkDriverEx+0x94>)
 800d9c0:	4413      	add	r3, r2
 800d9c2:	79fa      	ldrb	r2, [r7, #7]
 800d9c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d9c6:	4b11      	ldr	r3, [pc, #68]	@ (800da0c <FATFS_LinkDriverEx+0x94>)
 800d9c8:	7a5b      	ldrb	r3, [r3, #9]
 800d9ca:	b2db      	uxtb	r3, r3
 800d9cc:	1c5a      	adds	r2, r3, #1
 800d9ce:	b2d1      	uxtb	r1, r2
 800d9d0:	4a0e      	ldr	r2, [pc, #56]	@ (800da0c <FATFS_LinkDriverEx+0x94>)
 800d9d2:	7251      	strb	r1, [r2, #9]
 800d9d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d9d6:	7dbb      	ldrb	r3, [r7, #22]
 800d9d8:	3330      	adds	r3, #48	@ 0x30
 800d9da:	b2da      	uxtb	r2, r3
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	223a      	movs	r2, #58	@ 0x3a
 800d9e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	3302      	adds	r3, #2
 800d9ec:	222f      	movs	r2, #47	@ 0x2f
 800d9ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	3303      	adds	r3, #3
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d9fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	371c      	adds	r7, #28
 800da02:	46bd      	mov	sp, r7
 800da04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da08:	4770      	bx	lr
 800da0a:	bf00      	nop
 800da0c:	20002cc8 	.word	0x20002cc8

0800da10 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b082      	sub	sp, #8
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
 800da18:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800da1a:	2200      	movs	r2, #0
 800da1c:	6839      	ldr	r1, [r7, #0]
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f7ff ffaa 	bl	800d978 <FATFS_LinkDriverEx>
 800da24:	4603      	mov	r3, r0
}
 800da26:	4618      	mov	r0, r3
 800da28:	3708      	adds	r7, #8
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}

0800da2e <__cvt>:
 800da2e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da32:	ec57 6b10 	vmov	r6, r7, d0
 800da36:	2f00      	cmp	r7, #0
 800da38:	460c      	mov	r4, r1
 800da3a:	4619      	mov	r1, r3
 800da3c:	463b      	mov	r3, r7
 800da3e:	bfbb      	ittet	lt
 800da40:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800da44:	461f      	movlt	r7, r3
 800da46:	2300      	movge	r3, #0
 800da48:	232d      	movlt	r3, #45	@ 0x2d
 800da4a:	700b      	strb	r3, [r1, #0]
 800da4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800da4e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800da52:	4691      	mov	r9, r2
 800da54:	f023 0820 	bic.w	r8, r3, #32
 800da58:	bfbc      	itt	lt
 800da5a:	4632      	movlt	r2, r6
 800da5c:	4616      	movlt	r6, r2
 800da5e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800da62:	d005      	beq.n	800da70 <__cvt+0x42>
 800da64:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800da68:	d100      	bne.n	800da6c <__cvt+0x3e>
 800da6a:	3401      	adds	r4, #1
 800da6c:	2102      	movs	r1, #2
 800da6e:	e000      	b.n	800da72 <__cvt+0x44>
 800da70:	2103      	movs	r1, #3
 800da72:	ab03      	add	r3, sp, #12
 800da74:	9301      	str	r3, [sp, #4]
 800da76:	ab02      	add	r3, sp, #8
 800da78:	9300      	str	r3, [sp, #0]
 800da7a:	ec47 6b10 	vmov	d0, r6, r7
 800da7e:	4653      	mov	r3, sl
 800da80:	4622      	mov	r2, r4
 800da82:	f001 f9c5 	bl	800ee10 <_dtoa_r>
 800da86:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800da8a:	4605      	mov	r5, r0
 800da8c:	d119      	bne.n	800dac2 <__cvt+0x94>
 800da8e:	f019 0f01 	tst.w	r9, #1
 800da92:	d00e      	beq.n	800dab2 <__cvt+0x84>
 800da94:	eb00 0904 	add.w	r9, r0, r4
 800da98:	2200      	movs	r2, #0
 800da9a:	2300      	movs	r3, #0
 800da9c:	4630      	mov	r0, r6
 800da9e:	4639      	mov	r1, r7
 800daa0:	f7f3 f81a 	bl	8000ad8 <__aeabi_dcmpeq>
 800daa4:	b108      	cbz	r0, 800daaa <__cvt+0x7c>
 800daa6:	f8cd 900c 	str.w	r9, [sp, #12]
 800daaa:	2230      	movs	r2, #48	@ 0x30
 800daac:	9b03      	ldr	r3, [sp, #12]
 800daae:	454b      	cmp	r3, r9
 800dab0:	d31e      	bcc.n	800daf0 <__cvt+0xc2>
 800dab2:	9b03      	ldr	r3, [sp, #12]
 800dab4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dab6:	1b5b      	subs	r3, r3, r5
 800dab8:	4628      	mov	r0, r5
 800daba:	6013      	str	r3, [r2, #0]
 800dabc:	b004      	add	sp, #16
 800dabe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dac2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800dac6:	eb00 0904 	add.w	r9, r0, r4
 800daca:	d1e5      	bne.n	800da98 <__cvt+0x6a>
 800dacc:	7803      	ldrb	r3, [r0, #0]
 800dace:	2b30      	cmp	r3, #48	@ 0x30
 800dad0:	d10a      	bne.n	800dae8 <__cvt+0xba>
 800dad2:	2200      	movs	r2, #0
 800dad4:	2300      	movs	r3, #0
 800dad6:	4630      	mov	r0, r6
 800dad8:	4639      	mov	r1, r7
 800dada:	f7f2 fffd 	bl	8000ad8 <__aeabi_dcmpeq>
 800dade:	b918      	cbnz	r0, 800dae8 <__cvt+0xba>
 800dae0:	f1c4 0401 	rsb	r4, r4, #1
 800dae4:	f8ca 4000 	str.w	r4, [sl]
 800dae8:	f8da 3000 	ldr.w	r3, [sl]
 800daec:	4499      	add	r9, r3
 800daee:	e7d3      	b.n	800da98 <__cvt+0x6a>
 800daf0:	1c59      	adds	r1, r3, #1
 800daf2:	9103      	str	r1, [sp, #12]
 800daf4:	701a      	strb	r2, [r3, #0]
 800daf6:	e7d9      	b.n	800daac <__cvt+0x7e>

0800daf8 <__exponent>:
 800daf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dafa:	2900      	cmp	r1, #0
 800dafc:	bfba      	itte	lt
 800dafe:	4249      	neglt	r1, r1
 800db00:	232d      	movlt	r3, #45	@ 0x2d
 800db02:	232b      	movge	r3, #43	@ 0x2b
 800db04:	2909      	cmp	r1, #9
 800db06:	7002      	strb	r2, [r0, #0]
 800db08:	7043      	strb	r3, [r0, #1]
 800db0a:	dd29      	ble.n	800db60 <__exponent+0x68>
 800db0c:	f10d 0307 	add.w	r3, sp, #7
 800db10:	461d      	mov	r5, r3
 800db12:	270a      	movs	r7, #10
 800db14:	461a      	mov	r2, r3
 800db16:	fbb1 f6f7 	udiv	r6, r1, r7
 800db1a:	fb07 1416 	mls	r4, r7, r6, r1
 800db1e:	3430      	adds	r4, #48	@ 0x30
 800db20:	f802 4c01 	strb.w	r4, [r2, #-1]
 800db24:	460c      	mov	r4, r1
 800db26:	2c63      	cmp	r4, #99	@ 0x63
 800db28:	f103 33ff 	add.w	r3, r3, #4294967295
 800db2c:	4631      	mov	r1, r6
 800db2e:	dcf1      	bgt.n	800db14 <__exponent+0x1c>
 800db30:	3130      	adds	r1, #48	@ 0x30
 800db32:	1e94      	subs	r4, r2, #2
 800db34:	f803 1c01 	strb.w	r1, [r3, #-1]
 800db38:	1c41      	adds	r1, r0, #1
 800db3a:	4623      	mov	r3, r4
 800db3c:	42ab      	cmp	r3, r5
 800db3e:	d30a      	bcc.n	800db56 <__exponent+0x5e>
 800db40:	f10d 0309 	add.w	r3, sp, #9
 800db44:	1a9b      	subs	r3, r3, r2
 800db46:	42ac      	cmp	r4, r5
 800db48:	bf88      	it	hi
 800db4a:	2300      	movhi	r3, #0
 800db4c:	3302      	adds	r3, #2
 800db4e:	4403      	add	r3, r0
 800db50:	1a18      	subs	r0, r3, r0
 800db52:	b003      	add	sp, #12
 800db54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db56:	f813 6b01 	ldrb.w	r6, [r3], #1
 800db5a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800db5e:	e7ed      	b.n	800db3c <__exponent+0x44>
 800db60:	2330      	movs	r3, #48	@ 0x30
 800db62:	3130      	adds	r1, #48	@ 0x30
 800db64:	7083      	strb	r3, [r0, #2]
 800db66:	70c1      	strb	r1, [r0, #3]
 800db68:	1d03      	adds	r3, r0, #4
 800db6a:	e7f1      	b.n	800db50 <__exponent+0x58>

0800db6c <_printf_float>:
 800db6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db70:	b08d      	sub	sp, #52	@ 0x34
 800db72:	460c      	mov	r4, r1
 800db74:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800db78:	4616      	mov	r6, r2
 800db7a:	461f      	mov	r7, r3
 800db7c:	4605      	mov	r5, r0
 800db7e:	f001 f831 	bl	800ebe4 <_localeconv_r>
 800db82:	6803      	ldr	r3, [r0, #0]
 800db84:	9304      	str	r3, [sp, #16]
 800db86:	4618      	mov	r0, r3
 800db88:	f7f2 fb7a 	bl	8000280 <strlen>
 800db8c:	2300      	movs	r3, #0
 800db8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800db90:	f8d8 3000 	ldr.w	r3, [r8]
 800db94:	9005      	str	r0, [sp, #20]
 800db96:	3307      	adds	r3, #7
 800db98:	f023 0307 	bic.w	r3, r3, #7
 800db9c:	f103 0208 	add.w	r2, r3, #8
 800dba0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800dba4:	f8d4 b000 	ldr.w	fp, [r4]
 800dba8:	f8c8 2000 	str.w	r2, [r8]
 800dbac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dbb0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800dbb4:	9307      	str	r3, [sp, #28]
 800dbb6:	f8cd 8018 	str.w	r8, [sp, #24]
 800dbba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800dbbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dbc2:	4b9c      	ldr	r3, [pc, #624]	@ (800de34 <_printf_float+0x2c8>)
 800dbc4:	f04f 32ff 	mov.w	r2, #4294967295
 800dbc8:	f7f2 ffb8 	bl	8000b3c <__aeabi_dcmpun>
 800dbcc:	bb70      	cbnz	r0, 800dc2c <_printf_float+0xc0>
 800dbce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dbd2:	4b98      	ldr	r3, [pc, #608]	@ (800de34 <_printf_float+0x2c8>)
 800dbd4:	f04f 32ff 	mov.w	r2, #4294967295
 800dbd8:	f7f2 ff92 	bl	8000b00 <__aeabi_dcmple>
 800dbdc:	bb30      	cbnz	r0, 800dc2c <_printf_float+0xc0>
 800dbde:	2200      	movs	r2, #0
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	4640      	mov	r0, r8
 800dbe4:	4649      	mov	r1, r9
 800dbe6:	f7f2 ff81 	bl	8000aec <__aeabi_dcmplt>
 800dbea:	b110      	cbz	r0, 800dbf2 <_printf_float+0x86>
 800dbec:	232d      	movs	r3, #45	@ 0x2d
 800dbee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dbf2:	4a91      	ldr	r2, [pc, #580]	@ (800de38 <_printf_float+0x2cc>)
 800dbf4:	4b91      	ldr	r3, [pc, #580]	@ (800de3c <_printf_float+0x2d0>)
 800dbf6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800dbfa:	bf94      	ite	ls
 800dbfc:	4690      	movls	r8, r2
 800dbfe:	4698      	movhi	r8, r3
 800dc00:	2303      	movs	r3, #3
 800dc02:	6123      	str	r3, [r4, #16]
 800dc04:	f02b 0304 	bic.w	r3, fp, #4
 800dc08:	6023      	str	r3, [r4, #0]
 800dc0a:	f04f 0900 	mov.w	r9, #0
 800dc0e:	9700      	str	r7, [sp, #0]
 800dc10:	4633      	mov	r3, r6
 800dc12:	aa0b      	add	r2, sp, #44	@ 0x2c
 800dc14:	4621      	mov	r1, r4
 800dc16:	4628      	mov	r0, r5
 800dc18:	f000 f9d2 	bl	800dfc0 <_printf_common>
 800dc1c:	3001      	adds	r0, #1
 800dc1e:	f040 808d 	bne.w	800dd3c <_printf_float+0x1d0>
 800dc22:	f04f 30ff 	mov.w	r0, #4294967295
 800dc26:	b00d      	add	sp, #52	@ 0x34
 800dc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc2c:	4642      	mov	r2, r8
 800dc2e:	464b      	mov	r3, r9
 800dc30:	4640      	mov	r0, r8
 800dc32:	4649      	mov	r1, r9
 800dc34:	f7f2 ff82 	bl	8000b3c <__aeabi_dcmpun>
 800dc38:	b140      	cbz	r0, 800dc4c <_printf_float+0xe0>
 800dc3a:	464b      	mov	r3, r9
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	bfbc      	itt	lt
 800dc40:	232d      	movlt	r3, #45	@ 0x2d
 800dc42:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800dc46:	4a7e      	ldr	r2, [pc, #504]	@ (800de40 <_printf_float+0x2d4>)
 800dc48:	4b7e      	ldr	r3, [pc, #504]	@ (800de44 <_printf_float+0x2d8>)
 800dc4a:	e7d4      	b.n	800dbf6 <_printf_float+0x8a>
 800dc4c:	6863      	ldr	r3, [r4, #4]
 800dc4e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800dc52:	9206      	str	r2, [sp, #24]
 800dc54:	1c5a      	adds	r2, r3, #1
 800dc56:	d13b      	bne.n	800dcd0 <_printf_float+0x164>
 800dc58:	2306      	movs	r3, #6
 800dc5a:	6063      	str	r3, [r4, #4]
 800dc5c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800dc60:	2300      	movs	r3, #0
 800dc62:	6022      	str	r2, [r4, #0]
 800dc64:	9303      	str	r3, [sp, #12]
 800dc66:	ab0a      	add	r3, sp, #40	@ 0x28
 800dc68:	e9cd a301 	strd	sl, r3, [sp, #4]
 800dc6c:	ab09      	add	r3, sp, #36	@ 0x24
 800dc6e:	9300      	str	r3, [sp, #0]
 800dc70:	6861      	ldr	r1, [r4, #4]
 800dc72:	ec49 8b10 	vmov	d0, r8, r9
 800dc76:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800dc7a:	4628      	mov	r0, r5
 800dc7c:	f7ff fed7 	bl	800da2e <__cvt>
 800dc80:	9b06      	ldr	r3, [sp, #24]
 800dc82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dc84:	2b47      	cmp	r3, #71	@ 0x47
 800dc86:	4680      	mov	r8, r0
 800dc88:	d129      	bne.n	800dcde <_printf_float+0x172>
 800dc8a:	1cc8      	adds	r0, r1, #3
 800dc8c:	db02      	blt.n	800dc94 <_printf_float+0x128>
 800dc8e:	6863      	ldr	r3, [r4, #4]
 800dc90:	4299      	cmp	r1, r3
 800dc92:	dd41      	ble.n	800dd18 <_printf_float+0x1ac>
 800dc94:	f1aa 0a02 	sub.w	sl, sl, #2
 800dc98:	fa5f fa8a 	uxtb.w	sl, sl
 800dc9c:	3901      	subs	r1, #1
 800dc9e:	4652      	mov	r2, sl
 800dca0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800dca4:	9109      	str	r1, [sp, #36]	@ 0x24
 800dca6:	f7ff ff27 	bl	800daf8 <__exponent>
 800dcaa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dcac:	1813      	adds	r3, r2, r0
 800dcae:	2a01      	cmp	r2, #1
 800dcb0:	4681      	mov	r9, r0
 800dcb2:	6123      	str	r3, [r4, #16]
 800dcb4:	dc02      	bgt.n	800dcbc <_printf_float+0x150>
 800dcb6:	6822      	ldr	r2, [r4, #0]
 800dcb8:	07d2      	lsls	r2, r2, #31
 800dcba:	d501      	bpl.n	800dcc0 <_printf_float+0x154>
 800dcbc:	3301      	adds	r3, #1
 800dcbe:	6123      	str	r3, [r4, #16]
 800dcc0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d0a2      	beq.n	800dc0e <_printf_float+0xa2>
 800dcc8:	232d      	movs	r3, #45	@ 0x2d
 800dcca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dcce:	e79e      	b.n	800dc0e <_printf_float+0xa2>
 800dcd0:	9a06      	ldr	r2, [sp, #24]
 800dcd2:	2a47      	cmp	r2, #71	@ 0x47
 800dcd4:	d1c2      	bne.n	800dc5c <_printf_float+0xf0>
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d1c0      	bne.n	800dc5c <_printf_float+0xf0>
 800dcda:	2301      	movs	r3, #1
 800dcdc:	e7bd      	b.n	800dc5a <_printf_float+0xee>
 800dcde:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dce2:	d9db      	bls.n	800dc9c <_printf_float+0x130>
 800dce4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800dce8:	d118      	bne.n	800dd1c <_printf_float+0x1b0>
 800dcea:	2900      	cmp	r1, #0
 800dcec:	6863      	ldr	r3, [r4, #4]
 800dcee:	dd0b      	ble.n	800dd08 <_printf_float+0x19c>
 800dcf0:	6121      	str	r1, [r4, #16]
 800dcf2:	b913      	cbnz	r3, 800dcfa <_printf_float+0x18e>
 800dcf4:	6822      	ldr	r2, [r4, #0]
 800dcf6:	07d0      	lsls	r0, r2, #31
 800dcf8:	d502      	bpl.n	800dd00 <_printf_float+0x194>
 800dcfa:	3301      	adds	r3, #1
 800dcfc:	440b      	add	r3, r1
 800dcfe:	6123      	str	r3, [r4, #16]
 800dd00:	65a1      	str	r1, [r4, #88]	@ 0x58
 800dd02:	f04f 0900 	mov.w	r9, #0
 800dd06:	e7db      	b.n	800dcc0 <_printf_float+0x154>
 800dd08:	b913      	cbnz	r3, 800dd10 <_printf_float+0x1a4>
 800dd0a:	6822      	ldr	r2, [r4, #0]
 800dd0c:	07d2      	lsls	r2, r2, #31
 800dd0e:	d501      	bpl.n	800dd14 <_printf_float+0x1a8>
 800dd10:	3302      	adds	r3, #2
 800dd12:	e7f4      	b.n	800dcfe <_printf_float+0x192>
 800dd14:	2301      	movs	r3, #1
 800dd16:	e7f2      	b.n	800dcfe <_printf_float+0x192>
 800dd18:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800dd1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd1e:	4299      	cmp	r1, r3
 800dd20:	db05      	blt.n	800dd2e <_printf_float+0x1c2>
 800dd22:	6823      	ldr	r3, [r4, #0]
 800dd24:	6121      	str	r1, [r4, #16]
 800dd26:	07d8      	lsls	r0, r3, #31
 800dd28:	d5ea      	bpl.n	800dd00 <_printf_float+0x194>
 800dd2a:	1c4b      	adds	r3, r1, #1
 800dd2c:	e7e7      	b.n	800dcfe <_printf_float+0x192>
 800dd2e:	2900      	cmp	r1, #0
 800dd30:	bfd4      	ite	le
 800dd32:	f1c1 0202 	rsble	r2, r1, #2
 800dd36:	2201      	movgt	r2, #1
 800dd38:	4413      	add	r3, r2
 800dd3a:	e7e0      	b.n	800dcfe <_printf_float+0x192>
 800dd3c:	6823      	ldr	r3, [r4, #0]
 800dd3e:	055a      	lsls	r2, r3, #21
 800dd40:	d407      	bmi.n	800dd52 <_printf_float+0x1e6>
 800dd42:	6923      	ldr	r3, [r4, #16]
 800dd44:	4642      	mov	r2, r8
 800dd46:	4631      	mov	r1, r6
 800dd48:	4628      	mov	r0, r5
 800dd4a:	47b8      	blx	r7
 800dd4c:	3001      	adds	r0, #1
 800dd4e:	d12b      	bne.n	800dda8 <_printf_float+0x23c>
 800dd50:	e767      	b.n	800dc22 <_printf_float+0xb6>
 800dd52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dd56:	f240 80dd 	bls.w	800df14 <_printf_float+0x3a8>
 800dd5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dd5e:	2200      	movs	r2, #0
 800dd60:	2300      	movs	r3, #0
 800dd62:	f7f2 feb9 	bl	8000ad8 <__aeabi_dcmpeq>
 800dd66:	2800      	cmp	r0, #0
 800dd68:	d033      	beq.n	800ddd2 <_printf_float+0x266>
 800dd6a:	4a37      	ldr	r2, [pc, #220]	@ (800de48 <_printf_float+0x2dc>)
 800dd6c:	2301      	movs	r3, #1
 800dd6e:	4631      	mov	r1, r6
 800dd70:	4628      	mov	r0, r5
 800dd72:	47b8      	blx	r7
 800dd74:	3001      	adds	r0, #1
 800dd76:	f43f af54 	beq.w	800dc22 <_printf_float+0xb6>
 800dd7a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800dd7e:	4543      	cmp	r3, r8
 800dd80:	db02      	blt.n	800dd88 <_printf_float+0x21c>
 800dd82:	6823      	ldr	r3, [r4, #0]
 800dd84:	07d8      	lsls	r0, r3, #31
 800dd86:	d50f      	bpl.n	800dda8 <_printf_float+0x23c>
 800dd88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd8c:	4631      	mov	r1, r6
 800dd8e:	4628      	mov	r0, r5
 800dd90:	47b8      	blx	r7
 800dd92:	3001      	adds	r0, #1
 800dd94:	f43f af45 	beq.w	800dc22 <_printf_float+0xb6>
 800dd98:	f04f 0900 	mov.w	r9, #0
 800dd9c:	f108 38ff 	add.w	r8, r8, #4294967295
 800dda0:	f104 0a1a 	add.w	sl, r4, #26
 800dda4:	45c8      	cmp	r8, r9
 800dda6:	dc09      	bgt.n	800ddbc <_printf_float+0x250>
 800dda8:	6823      	ldr	r3, [r4, #0]
 800ddaa:	079b      	lsls	r3, r3, #30
 800ddac:	f100 8103 	bmi.w	800dfb6 <_printf_float+0x44a>
 800ddb0:	68e0      	ldr	r0, [r4, #12]
 800ddb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ddb4:	4298      	cmp	r0, r3
 800ddb6:	bfb8      	it	lt
 800ddb8:	4618      	movlt	r0, r3
 800ddba:	e734      	b.n	800dc26 <_printf_float+0xba>
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	4652      	mov	r2, sl
 800ddc0:	4631      	mov	r1, r6
 800ddc2:	4628      	mov	r0, r5
 800ddc4:	47b8      	blx	r7
 800ddc6:	3001      	adds	r0, #1
 800ddc8:	f43f af2b 	beq.w	800dc22 <_printf_float+0xb6>
 800ddcc:	f109 0901 	add.w	r9, r9, #1
 800ddd0:	e7e8      	b.n	800dda4 <_printf_float+0x238>
 800ddd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	dc39      	bgt.n	800de4c <_printf_float+0x2e0>
 800ddd8:	4a1b      	ldr	r2, [pc, #108]	@ (800de48 <_printf_float+0x2dc>)
 800ddda:	2301      	movs	r3, #1
 800dddc:	4631      	mov	r1, r6
 800ddde:	4628      	mov	r0, r5
 800dde0:	47b8      	blx	r7
 800dde2:	3001      	adds	r0, #1
 800dde4:	f43f af1d 	beq.w	800dc22 <_printf_float+0xb6>
 800dde8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ddec:	ea59 0303 	orrs.w	r3, r9, r3
 800ddf0:	d102      	bne.n	800ddf8 <_printf_float+0x28c>
 800ddf2:	6823      	ldr	r3, [r4, #0]
 800ddf4:	07d9      	lsls	r1, r3, #31
 800ddf6:	d5d7      	bpl.n	800dda8 <_printf_float+0x23c>
 800ddf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ddfc:	4631      	mov	r1, r6
 800ddfe:	4628      	mov	r0, r5
 800de00:	47b8      	blx	r7
 800de02:	3001      	adds	r0, #1
 800de04:	f43f af0d 	beq.w	800dc22 <_printf_float+0xb6>
 800de08:	f04f 0a00 	mov.w	sl, #0
 800de0c:	f104 0b1a 	add.w	fp, r4, #26
 800de10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de12:	425b      	negs	r3, r3
 800de14:	4553      	cmp	r3, sl
 800de16:	dc01      	bgt.n	800de1c <_printf_float+0x2b0>
 800de18:	464b      	mov	r3, r9
 800de1a:	e793      	b.n	800dd44 <_printf_float+0x1d8>
 800de1c:	2301      	movs	r3, #1
 800de1e:	465a      	mov	r2, fp
 800de20:	4631      	mov	r1, r6
 800de22:	4628      	mov	r0, r5
 800de24:	47b8      	blx	r7
 800de26:	3001      	adds	r0, #1
 800de28:	f43f aefb 	beq.w	800dc22 <_printf_float+0xb6>
 800de2c:	f10a 0a01 	add.w	sl, sl, #1
 800de30:	e7ee      	b.n	800de10 <_printf_float+0x2a4>
 800de32:	bf00      	nop
 800de34:	7fefffff 	.word	0x7fefffff
 800de38:	08013f20 	.word	0x08013f20
 800de3c:	08013f24 	.word	0x08013f24
 800de40:	08013f28 	.word	0x08013f28
 800de44:	08013f2c 	.word	0x08013f2c
 800de48:	080142c0 	.word	0x080142c0
 800de4c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800de4e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800de52:	4553      	cmp	r3, sl
 800de54:	bfa8      	it	ge
 800de56:	4653      	movge	r3, sl
 800de58:	2b00      	cmp	r3, #0
 800de5a:	4699      	mov	r9, r3
 800de5c:	dc36      	bgt.n	800decc <_printf_float+0x360>
 800de5e:	f04f 0b00 	mov.w	fp, #0
 800de62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800de66:	f104 021a 	add.w	r2, r4, #26
 800de6a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800de6c:	9306      	str	r3, [sp, #24]
 800de6e:	eba3 0309 	sub.w	r3, r3, r9
 800de72:	455b      	cmp	r3, fp
 800de74:	dc31      	bgt.n	800deda <_printf_float+0x36e>
 800de76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de78:	459a      	cmp	sl, r3
 800de7a:	dc3a      	bgt.n	800def2 <_printf_float+0x386>
 800de7c:	6823      	ldr	r3, [r4, #0]
 800de7e:	07da      	lsls	r2, r3, #31
 800de80:	d437      	bmi.n	800def2 <_printf_float+0x386>
 800de82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de84:	ebaa 0903 	sub.w	r9, sl, r3
 800de88:	9b06      	ldr	r3, [sp, #24]
 800de8a:	ebaa 0303 	sub.w	r3, sl, r3
 800de8e:	4599      	cmp	r9, r3
 800de90:	bfa8      	it	ge
 800de92:	4699      	movge	r9, r3
 800de94:	f1b9 0f00 	cmp.w	r9, #0
 800de98:	dc33      	bgt.n	800df02 <_printf_float+0x396>
 800de9a:	f04f 0800 	mov.w	r8, #0
 800de9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dea2:	f104 0b1a 	add.w	fp, r4, #26
 800dea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dea8:	ebaa 0303 	sub.w	r3, sl, r3
 800deac:	eba3 0309 	sub.w	r3, r3, r9
 800deb0:	4543      	cmp	r3, r8
 800deb2:	f77f af79 	ble.w	800dda8 <_printf_float+0x23c>
 800deb6:	2301      	movs	r3, #1
 800deb8:	465a      	mov	r2, fp
 800deba:	4631      	mov	r1, r6
 800debc:	4628      	mov	r0, r5
 800debe:	47b8      	blx	r7
 800dec0:	3001      	adds	r0, #1
 800dec2:	f43f aeae 	beq.w	800dc22 <_printf_float+0xb6>
 800dec6:	f108 0801 	add.w	r8, r8, #1
 800deca:	e7ec      	b.n	800dea6 <_printf_float+0x33a>
 800decc:	4642      	mov	r2, r8
 800dece:	4631      	mov	r1, r6
 800ded0:	4628      	mov	r0, r5
 800ded2:	47b8      	blx	r7
 800ded4:	3001      	adds	r0, #1
 800ded6:	d1c2      	bne.n	800de5e <_printf_float+0x2f2>
 800ded8:	e6a3      	b.n	800dc22 <_printf_float+0xb6>
 800deda:	2301      	movs	r3, #1
 800dedc:	4631      	mov	r1, r6
 800dede:	4628      	mov	r0, r5
 800dee0:	9206      	str	r2, [sp, #24]
 800dee2:	47b8      	blx	r7
 800dee4:	3001      	adds	r0, #1
 800dee6:	f43f ae9c 	beq.w	800dc22 <_printf_float+0xb6>
 800deea:	9a06      	ldr	r2, [sp, #24]
 800deec:	f10b 0b01 	add.w	fp, fp, #1
 800def0:	e7bb      	b.n	800de6a <_printf_float+0x2fe>
 800def2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800def6:	4631      	mov	r1, r6
 800def8:	4628      	mov	r0, r5
 800defa:	47b8      	blx	r7
 800defc:	3001      	adds	r0, #1
 800defe:	d1c0      	bne.n	800de82 <_printf_float+0x316>
 800df00:	e68f      	b.n	800dc22 <_printf_float+0xb6>
 800df02:	9a06      	ldr	r2, [sp, #24]
 800df04:	464b      	mov	r3, r9
 800df06:	4442      	add	r2, r8
 800df08:	4631      	mov	r1, r6
 800df0a:	4628      	mov	r0, r5
 800df0c:	47b8      	blx	r7
 800df0e:	3001      	adds	r0, #1
 800df10:	d1c3      	bne.n	800de9a <_printf_float+0x32e>
 800df12:	e686      	b.n	800dc22 <_printf_float+0xb6>
 800df14:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800df18:	f1ba 0f01 	cmp.w	sl, #1
 800df1c:	dc01      	bgt.n	800df22 <_printf_float+0x3b6>
 800df1e:	07db      	lsls	r3, r3, #31
 800df20:	d536      	bpl.n	800df90 <_printf_float+0x424>
 800df22:	2301      	movs	r3, #1
 800df24:	4642      	mov	r2, r8
 800df26:	4631      	mov	r1, r6
 800df28:	4628      	mov	r0, r5
 800df2a:	47b8      	blx	r7
 800df2c:	3001      	adds	r0, #1
 800df2e:	f43f ae78 	beq.w	800dc22 <_printf_float+0xb6>
 800df32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df36:	4631      	mov	r1, r6
 800df38:	4628      	mov	r0, r5
 800df3a:	47b8      	blx	r7
 800df3c:	3001      	adds	r0, #1
 800df3e:	f43f ae70 	beq.w	800dc22 <_printf_float+0xb6>
 800df42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800df46:	2200      	movs	r2, #0
 800df48:	2300      	movs	r3, #0
 800df4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800df4e:	f7f2 fdc3 	bl	8000ad8 <__aeabi_dcmpeq>
 800df52:	b9c0      	cbnz	r0, 800df86 <_printf_float+0x41a>
 800df54:	4653      	mov	r3, sl
 800df56:	f108 0201 	add.w	r2, r8, #1
 800df5a:	4631      	mov	r1, r6
 800df5c:	4628      	mov	r0, r5
 800df5e:	47b8      	blx	r7
 800df60:	3001      	adds	r0, #1
 800df62:	d10c      	bne.n	800df7e <_printf_float+0x412>
 800df64:	e65d      	b.n	800dc22 <_printf_float+0xb6>
 800df66:	2301      	movs	r3, #1
 800df68:	465a      	mov	r2, fp
 800df6a:	4631      	mov	r1, r6
 800df6c:	4628      	mov	r0, r5
 800df6e:	47b8      	blx	r7
 800df70:	3001      	adds	r0, #1
 800df72:	f43f ae56 	beq.w	800dc22 <_printf_float+0xb6>
 800df76:	f108 0801 	add.w	r8, r8, #1
 800df7a:	45d0      	cmp	r8, sl
 800df7c:	dbf3      	blt.n	800df66 <_printf_float+0x3fa>
 800df7e:	464b      	mov	r3, r9
 800df80:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800df84:	e6df      	b.n	800dd46 <_printf_float+0x1da>
 800df86:	f04f 0800 	mov.w	r8, #0
 800df8a:	f104 0b1a 	add.w	fp, r4, #26
 800df8e:	e7f4      	b.n	800df7a <_printf_float+0x40e>
 800df90:	2301      	movs	r3, #1
 800df92:	4642      	mov	r2, r8
 800df94:	e7e1      	b.n	800df5a <_printf_float+0x3ee>
 800df96:	2301      	movs	r3, #1
 800df98:	464a      	mov	r2, r9
 800df9a:	4631      	mov	r1, r6
 800df9c:	4628      	mov	r0, r5
 800df9e:	47b8      	blx	r7
 800dfa0:	3001      	adds	r0, #1
 800dfa2:	f43f ae3e 	beq.w	800dc22 <_printf_float+0xb6>
 800dfa6:	f108 0801 	add.w	r8, r8, #1
 800dfaa:	68e3      	ldr	r3, [r4, #12]
 800dfac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dfae:	1a5b      	subs	r3, r3, r1
 800dfb0:	4543      	cmp	r3, r8
 800dfb2:	dcf0      	bgt.n	800df96 <_printf_float+0x42a>
 800dfb4:	e6fc      	b.n	800ddb0 <_printf_float+0x244>
 800dfb6:	f04f 0800 	mov.w	r8, #0
 800dfba:	f104 0919 	add.w	r9, r4, #25
 800dfbe:	e7f4      	b.n	800dfaa <_printf_float+0x43e>

0800dfc0 <_printf_common>:
 800dfc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfc4:	4616      	mov	r6, r2
 800dfc6:	4698      	mov	r8, r3
 800dfc8:	688a      	ldr	r2, [r1, #8]
 800dfca:	690b      	ldr	r3, [r1, #16]
 800dfcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dfd0:	4293      	cmp	r3, r2
 800dfd2:	bfb8      	it	lt
 800dfd4:	4613      	movlt	r3, r2
 800dfd6:	6033      	str	r3, [r6, #0]
 800dfd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dfdc:	4607      	mov	r7, r0
 800dfde:	460c      	mov	r4, r1
 800dfe0:	b10a      	cbz	r2, 800dfe6 <_printf_common+0x26>
 800dfe2:	3301      	adds	r3, #1
 800dfe4:	6033      	str	r3, [r6, #0]
 800dfe6:	6823      	ldr	r3, [r4, #0]
 800dfe8:	0699      	lsls	r1, r3, #26
 800dfea:	bf42      	ittt	mi
 800dfec:	6833      	ldrmi	r3, [r6, #0]
 800dfee:	3302      	addmi	r3, #2
 800dff0:	6033      	strmi	r3, [r6, #0]
 800dff2:	6825      	ldr	r5, [r4, #0]
 800dff4:	f015 0506 	ands.w	r5, r5, #6
 800dff8:	d106      	bne.n	800e008 <_printf_common+0x48>
 800dffa:	f104 0a19 	add.w	sl, r4, #25
 800dffe:	68e3      	ldr	r3, [r4, #12]
 800e000:	6832      	ldr	r2, [r6, #0]
 800e002:	1a9b      	subs	r3, r3, r2
 800e004:	42ab      	cmp	r3, r5
 800e006:	dc26      	bgt.n	800e056 <_printf_common+0x96>
 800e008:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e00c:	6822      	ldr	r2, [r4, #0]
 800e00e:	3b00      	subs	r3, #0
 800e010:	bf18      	it	ne
 800e012:	2301      	movne	r3, #1
 800e014:	0692      	lsls	r2, r2, #26
 800e016:	d42b      	bmi.n	800e070 <_printf_common+0xb0>
 800e018:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e01c:	4641      	mov	r1, r8
 800e01e:	4638      	mov	r0, r7
 800e020:	47c8      	blx	r9
 800e022:	3001      	adds	r0, #1
 800e024:	d01e      	beq.n	800e064 <_printf_common+0xa4>
 800e026:	6823      	ldr	r3, [r4, #0]
 800e028:	6922      	ldr	r2, [r4, #16]
 800e02a:	f003 0306 	and.w	r3, r3, #6
 800e02e:	2b04      	cmp	r3, #4
 800e030:	bf02      	ittt	eq
 800e032:	68e5      	ldreq	r5, [r4, #12]
 800e034:	6833      	ldreq	r3, [r6, #0]
 800e036:	1aed      	subeq	r5, r5, r3
 800e038:	68a3      	ldr	r3, [r4, #8]
 800e03a:	bf0c      	ite	eq
 800e03c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e040:	2500      	movne	r5, #0
 800e042:	4293      	cmp	r3, r2
 800e044:	bfc4      	itt	gt
 800e046:	1a9b      	subgt	r3, r3, r2
 800e048:	18ed      	addgt	r5, r5, r3
 800e04a:	2600      	movs	r6, #0
 800e04c:	341a      	adds	r4, #26
 800e04e:	42b5      	cmp	r5, r6
 800e050:	d11a      	bne.n	800e088 <_printf_common+0xc8>
 800e052:	2000      	movs	r0, #0
 800e054:	e008      	b.n	800e068 <_printf_common+0xa8>
 800e056:	2301      	movs	r3, #1
 800e058:	4652      	mov	r2, sl
 800e05a:	4641      	mov	r1, r8
 800e05c:	4638      	mov	r0, r7
 800e05e:	47c8      	blx	r9
 800e060:	3001      	adds	r0, #1
 800e062:	d103      	bne.n	800e06c <_printf_common+0xac>
 800e064:	f04f 30ff 	mov.w	r0, #4294967295
 800e068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e06c:	3501      	adds	r5, #1
 800e06e:	e7c6      	b.n	800dffe <_printf_common+0x3e>
 800e070:	18e1      	adds	r1, r4, r3
 800e072:	1c5a      	adds	r2, r3, #1
 800e074:	2030      	movs	r0, #48	@ 0x30
 800e076:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e07a:	4422      	add	r2, r4
 800e07c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e080:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e084:	3302      	adds	r3, #2
 800e086:	e7c7      	b.n	800e018 <_printf_common+0x58>
 800e088:	2301      	movs	r3, #1
 800e08a:	4622      	mov	r2, r4
 800e08c:	4641      	mov	r1, r8
 800e08e:	4638      	mov	r0, r7
 800e090:	47c8      	blx	r9
 800e092:	3001      	adds	r0, #1
 800e094:	d0e6      	beq.n	800e064 <_printf_common+0xa4>
 800e096:	3601      	adds	r6, #1
 800e098:	e7d9      	b.n	800e04e <_printf_common+0x8e>
	...

0800e09c <_printf_i>:
 800e09c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e0a0:	7e0f      	ldrb	r7, [r1, #24]
 800e0a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e0a4:	2f78      	cmp	r7, #120	@ 0x78
 800e0a6:	4691      	mov	r9, r2
 800e0a8:	4680      	mov	r8, r0
 800e0aa:	460c      	mov	r4, r1
 800e0ac:	469a      	mov	sl, r3
 800e0ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e0b2:	d807      	bhi.n	800e0c4 <_printf_i+0x28>
 800e0b4:	2f62      	cmp	r7, #98	@ 0x62
 800e0b6:	d80a      	bhi.n	800e0ce <_printf_i+0x32>
 800e0b8:	2f00      	cmp	r7, #0
 800e0ba:	f000 80d2 	beq.w	800e262 <_printf_i+0x1c6>
 800e0be:	2f58      	cmp	r7, #88	@ 0x58
 800e0c0:	f000 80b9 	beq.w	800e236 <_printf_i+0x19a>
 800e0c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e0c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e0cc:	e03a      	b.n	800e144 <_printf_i+0xa8>
 800e0ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e0d2:	2b15      	cmp	r3, #21
 800e0d4:	d8f6      	bhi.n	800e0c4 <_printf_i+0x28>
 800e0d6:	a101      	add	r1, pc, #4	@ (adr r1, 800e0dc <_printf_i+0x40>)
 800e0d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e0dc:	0800e135 	.word	0x0800e135
 800e0e0:	0800e149 	.word	0x0800e149
 800e0e4:	0800e0c5 	.word	0x0800e0c5
 800e0e8:	0800e0c5 	.word	0x0800e0c5
 800e0ec:	0800e0c5 	.word	0x0800e0c5
 800e0f0:	0800e0c5 	.word	0x0800e0c5
 800e0f4:	0800e149 	.word	0x0800e149
 800e0f8:	0800e0c5 	.word	0x0800e0c5
 800e0fc:	0800e0c5 	.word	0x0800e0c5
 800e100:	0800e0c5 	.word	0x0800e0c5
 800e104:	0800e0c5 	.word	0x0800e0c5
 800e108:	0800e249 	.word	0x0800e249
 800e10c:	0800e173 	.word	0x0800e173
 800e110:	0800e203 	.word	0x0800e203
 800e114:	0800e0c5 	.word	0x0800e0c5
 800e118:	0800e0c5 	.word	0x0800e0c5
 800e11c:	0800e26b 	.word	0x0800e26b
 800e120:	0800e0c5 	.word	0x0800e0c5
 800e124:	0800e173 	.word	0x0800e173
 800e128:	0800e0c5 	.word	0x0800e0c5
 800e12c:	0800e0c5 	.word	0x0800e0c5
 800e130:	0800e20b 	.word	0x0800e20b
 800e134:	6833      	ldr	r3, [r6, #0]
 800e136:	1d1a      	adds	r2, r3, #4
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	6032      	str	r2, [r6, #0]
 800e13c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e140:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e144:	2301      	movs	r3, #1
 800e146:	e09d      	b.n	800e284 <_printf_i+0x1e8>
 800e148:	6833      	ldr	r3, [r6, #0]
 800e14a:	6820      	ldr	r0, [r4, #0]
 800e14c:	1d19      	adds	r1, r3, #4
 800e14e:	6031      	str	r1, [r6, #0]
 800e150:	0606      	lsls	r6, r0, #24
 800e152:	d501      	bpl.n	800e158 <_printf_i+0xbc>
 800e154:	681d      	ldr	r5, [r3, #0]
 800e156:	e003      	b.n	800e160 <_printf_i+0xc4>
 800e158:	0645      	lsls	r5, r0, #25
 800e15a:	d5fb      	bpl.n	800e154 <_printf_i+0xb8>
 800e15c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e160:	2d00      	cmp	r5, #0
 800e162:	da03      	bge.n	800e16c <_printf_i+0xd0>
 800e164:	232d      	movs	r3, #45	@ 0x2d
 800e166:	426d      	negs	r5, r5
 800e168:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e16c:	4859      	ldr	r0, [pc, #356]	@ (800e2d4 <_printf_i+0x238>)
 800e16e:	230a      	movs	r3, #10
 800e170:	e011      	b.n	800e196 <_printf_i+0xfa>
 800e172:	6821      	ldr	r1, [r4, #0]
 800e174:	6833      	ldr	r3, [r6, #0]
 800e176:	0608      	lsls	r0, r1, #24
 800e178:	f853 5b04 	ldr.w	r5, [r3], #4
 800e17c:	d402      	bmi.n	800e184 <_printf_i+0xe8>
 800e17e:	0649      	lsls	r1, r1, #25
 800e180:	bf48      	it	mi
 800e182:	b2ad      	uxthmi	r5, r5
 800e184:	2f6f      	cmp	r7, #111	@ 0x6f
 800e186:	4853      	ldr	r0, [pc, #332]	@ (800e2d4 <_printf_i+0x238>)
 800e188:	6033      	str	r3, [r6, #0]
 800e18a:	bf14      	ite	ne
 800e18c:	230a      	movne	r3, #10
 800e18e:	2308      	moveq	r3, #8
 800e190:	2100      	movs	r1, #0
 800e192:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e196:	6866      	ldr	r6, [r4, #4]
 800e198:	60a6      	str	r6, [r4, #8]
 800e19a:	2e00      	cmp	r6, #0
 800e19c:	bfa2      	ittt	ge
 800e19e:	6821      	ldrge	r1, [r4, #0]
 800e1a0:	f021 0104 	bicge.w	r1, r1, #4
 800e1a4:	6021      	strge	r1, [r4, #0]
 800e1a6:	b90d      	cbnz	r5, 800e1ac <_printf_i+0x110>
 800e1a8:	2e00      	cmp	r6, #0
 800e1aa:	d04b      	beq.n	800e244 <_printf_i+0x1a8>
 800e1ac:	4616      	mov	r6, r2
 800e1ae:	fbb5 f1f3 	udiv	r1, r5, r3
 800e1b2:	fb03 5711 	mls	r7, r3, r1, r5
 800e1b6:	5dc7      	ldrb	r7, [r0, r7]
 800e1b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e1bc:	462f      	mov	r7, r5
 800e1be:	42bb      	cmp	r3, r7
 800e1c0:	460d      	mov	r5, r1
 800e1c2:	d9f4      	bls.n	800e1ae <_printf_i+0x112>
 800e1c4:	2b08      	cmp	r3, #8
 800e1c6:	d10b      	bne.n	800e1e0 <_printf_i+0x144>
 800e1c8:	6823      	ldr	r3, [r4, #0]
 800e1ca:	07df      	lsls	r7, r3, #31
 800e1cc:	d508      	bpl.n	800e1e0 <_printf_i+0x144>
 800e1ce:	6923      	ldr	r3, [r4, #16]
 800e1d0:	6861      	ldr	r1, [r4, #4]
 800e1d2:	4299      	cmp	r1, r3
 800e1d4:	bfde      	ittt	le
 800e1d6:	2330      	movle	r3, #48	@ 0x30
 800e1d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e1dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e1e0:	1b92      	subs	r2, r2, r6
 800e1e2:	6122      	str	r2, [r4, #16]
 800e1e4:	f8cd a000 	str.w	sl, [sp]
 800e1e8:	464b      	mov	r3, r9
 800e1ea:	aa03      	add	r2, sp, #12
 800e1ec:	4621      	mov	r1, r4
 800e1ee:	4640      	mov	r0, r8
 800e1f0:	f7ff fee6 	bl	800dfc0 <_printf_common>
 800e1f4:	3001      	adds	r0, #1
 800e1f6:	d14a      	bne.n	800e28e <_printf_i+0x1f2>
 800e1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e1fc:	b004      	add	sp, #16
 800e1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e202:	6823      	ldr	r3, [r4, #0]
 800e204:	f043 0320 	orr.w	r3, r3, #32
 800e208:	6023      	str	r3, [r4, #0]
 800e20a:	4833      	ldr	r0, [pc, #204]	@ (800e2d8 <_printf_i+0x23c>)
 800e20c:	2778      	movs	r7, #120	@ 0x78
 800e20e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e212:	6823      	ldr	r3, [r4, #0]
 800e214:	6831      	ldr	r1, [r6, #0]
 800e216:	061f      	lsls	r7, r3, #24
 800e218:	f851 5b04 	ldr.w	r5, [r1], #4
 800e21c:	d402      	bmi.n	800e224 <_printf_i+0x188>
 800e21e:	065f      	lsls	r7, r3, #25
 800e220:	bf48      	it	mi
 800e222:	b2ad      	uxthmi	r5, r5
 800e224:	6031      	str	r1, [r6, #0]
 800e226:	07d9      	lsls	r1, r3, #31
 800e228:	bf44      	itt	mi
 800e22a:	f043 0320 	orrmi.w	r3, r3, #32
 800e22e:	6023      	strmi	r3, [r4, #0]
 800e230:	b11d      	cbz	r5, 800e23a <_printf_i+0x19e>
 800e232:	2310      	movs	r3, #16
 800e234:	e7ac      	b.n	800e190 <_printf_i+0xf4>
 800e236:	4827      	ldr	r0, [pc, #156]	@ (800e2d4 <_printf_i+0x238>)
 800e238:	e7e9      	b.n	800e20e <_printf_i+0x172>
 800e23a:	6823      	ldr	r3, [r4, #0]
 800e23c:	f023 0320 	bic.w	r3, r3, #32
 800e240:	6023      	str	r3, [r4, #0]
 800e242:	e7f6      	b.n	800e232 <_printf_i+0x196>
 800e244:	4616      	mov	r6, r2
 800e246:	e7bd      	b.n	800e1c4 <_printf_i+0x128>
 800e248:	6833      	ldr	r3, [r6, #0]
 800e24a:	6825      	ldr	r5, [r4, #0]
 800e24c:	6961      	ldr	r1, [r4, #20]
 800e24e:	1d18      	adds	r0, r3, #4
 800e250:	6030      	str	r0, [r6, #0]
 800e252:	062e      	lsls	r6, r5, #24
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	d501      	bpl.n	800e25c <_printf_i+0x1c0>
 800e258:	6019      	str	r1, [r3, #0]
 800e25a:	e002      	b.n	800e262 <_printf_i+0x1c6>
 800e25c:	0668      	lsls	r0, r5, #25
 800e25e:	d5fb      	bpl.n	800e258 <_printf_i+0x1bc>
 800e260:	8019      	strh	r1, [r3, #0]
 800e262:	2300      	movs	r3, #0
 800e264:	6123      	str	r3, [r4, #16]
 800e266:	4616      	mov	r6, r2
 800e268:	e7bc      	b.n	800e1e4 <_printf_i+0x148>
 800e26a:	6833      	ldr	r3, [r6, #0]
 800e26c:	1d1a      	adds	r2, r3, #4
 800e26e:	6032      	str	r2, [r6, #0]
 800e270:	681e      	ldr	r6, [r3, #0]
 800e272:	6862      	ldr	r2, [r4, #4]
 800e274:	2100      	movs	r1, #0
 800e276:	4630      	mov	r0, r6
 800e278:	f7f1 ffb2 	bl	80001e0 <memchr>
 800e27c:	b108      	cbz	r0, 800e282 <_printf_i+0x1e6>
 800e27e:	1b80      	subs	r0, r0, r6
 800e280:	6060      	str	r0, [r4, #4]
 800e282:	6863      	ldr	r3, [r4, #4]
 800e284:	6123      	str	r3, [r4, #16]
 800e286:	2300      	movs	r3, #0
 800e288:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e28c:	e7aa      	b.n	800e1e4 <_printf_i+0x148>
 800e28e:	6923      	ldr	r3, [r4, #16]
 800e290:	4632      	mov	r2, r6
 800e292:	4649      	mov	r1, r9
 800e294:	4640      	mov	r0, r8
 800e296:	47d0      	blx	sl
 800e298:	3001      	adds	r0, #1
 800e29a:	d0ad      	beq.n	800e1f8 <_printf_i+0x15c>
 800e29c:	6823      	ldr	r3, [r4, #0]
 800e29e:	079b      	lsls	r3, r3, #30
 800e2a0:	d413      	bmi.n	800e2ca <_printf_i+0x22e>
 800e2a2:	68e0      	ldr	r0, [r4, #12]
 800e2a4:	9b03      	ldr	r3, [sp, #12]
 800e2a6:	4298      	cmp	r0, r3
 800e2a8:	bfb8      	it	lt
 800e2aa:	4618      	movlt	r0, r3
 800e2ac:	e7a6      	b.n	800e1fc <_printf_i+0x160>
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	4632      	mov	r2, r6
 800e2b2:	4649      	mov	r1, r9
 800e2b4:	4640      	mov	r0, r8
 800e2b6:	47d0      	blx	sl
 800e2b8:	3001      	adds	r0, #1
 800e2ba:	d09d      	beq.n	800e1f8 <_printf_i+0x15c>
 800e2bc:	3501      	adds	r5, #1
 800e2be:	68e3      	ldr	r3, [r4, #12]
 800e2c0:	9903      	ldr	r1, [sp, #12]
 800e2c2:	1a5b      	subs	r3, r3, r1
 800e2c4:	42ab      	cmp	r3, r5
 800e2c6:	dcf2      	bgt.n	800e2ae <_printf_i+0x212>
 800e2c8:	e7eb      	b.n	800e2a2 <_printf_i+0x206>
 800e2ca:	2500      	movs	r5, #0
 800e2cc:	f104 0619 	add.w	r6, r4, #25
 800e2d0:	e7f5      	b.n	800e2be <_printf_i+0x222>
 800e2d2:	bf00      	nop
 800e2d4:	08013f30 	.word	0x08013f30
 800e2d8:	08013f41 	.word	0x08013f41

0800e2dc <_scanf_float>:
 800e2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e0:	b087      	sub	sp, #28
 800e2e2:	4617      	mov	r7, r2
 800e2e4:	9303      	str	r3, [sp, #12]
 800e2e6:	688b      	ldr	r3, [r1, #8]
 800e2e8:	1e5a      	subs	r2, r3, #1
 800e2ea:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e2ee:	bf81      	itttt	hi
 800e2f0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e2f4:	eb03 0b05 	addhi.w	fp, r3, r5
 800e2f8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e2fc:	608b      	strhi	r3, [r1, #8]
 800e2fe:	680b      	ldr	r3, [r1, #0]
 800e300:	460a      	mov	r2, r1
 800e302:	f04f 0500 	mov.w	r5, #0
 800e306:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e30a:	f842 3b1c 	str.w	r3, [r2], #28
 800e30e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e312:	4680      	mov	r8, r0
 800e314:	460c      	mov	r4, r1
 800e316:	bf98      	it	ls
 800e318:	f04f 0b00 	movls.w	fp, #0
 800e31c:	9201      	str	r2, [sp, #4]
 800e31e:	4616      	mov	r6, r2
 800e320:	46aa      	mov	sl, r5
 800e322:	46a9      	mov	r9, r5
 800e324:	9502      	str	r5, [sp, #8]
 800e326:	68a2      	ldr	r2, [r4, #8]
 800e328:	b152      	cbz	r2, 800e340 <_scanf_float+0x64>
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	781b      	ldrb	r3, [r3, #0]
 800e32e:	2b4e      	cmp	r3, #78	@ 0x4e
 800e330:	d864      	bhi.n	800e3fc <_scanf_float+0x120>
 800e332:	2b40      	cmp	r3, #64	@ 0x40
 800e334:	d83c      	bhi.n	800e3b0 <_scanf_float+0xd4>
 800e336:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e33a:	b2c8      	uxtb	r0, r1
 800e33c:	280e      	cmp	r0, #14
 800e33e:	d93a      	bls.n	800e3b6 <_scanf_float+0xda>
 800e340:	f1b9 0f00 	cmp.w	r9, #0
 800e344:	d003      	beq.n	800e34e <_scanf_float+0x72>
 800e346:	6823      	ldr	r3, [r4, #0]
 800e348:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e34c:	6023      	str	r3, [r4, #0]
 800e34e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e352:	f1ba 0f01 	cmp.w	sl, #1
 800e356:	f200 8117 	bhi.w	800e588 <_scanf_float+0x2ac>
 800e35a:	9b01      	ldr	r3, [sp, #4]
 800e35c:	429e      	cmp	r6, r3
 800e35e:	f200 8108 	bhi.w	800e572 <_scanf_float+0x296>
 800e362:	2001      	movs	r0, #1
 800e364:	b007      	add	sp, #28
 800e366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e36a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e36e:	2a0d      	cmp	r2, #13
 800e370:	d8e6      	bhi.n	800e340 <_scanf_float+0x64>
 800e372:	a101      	add	r1, pc, #4	@ (adr r1, 800e378 <_scanf_float+0x9c>)
 800e374:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e378:	0800e4bf 	.word	0x0800e4bf
 800e37c:	0800e341 	.word	0x0800e341
 800e380:	0800e341 	.word	0x0800e341
 800e384:	0800e341 	.word	0x0800e341
 800e388:	0800e51f 	.word	0x0800e51f
 800e38c:	0800e4f7 	.word	0x0800e4f7
 800e390:	0800e341 	.word	0x0800e341
 800e394:	0800e341 	.word	0x0800e341
 800e398:	0800e4cd 	.word	0x0800e4cd
 800e39c:	0800e341 	.word	0x0800e341
 800e3a0:	0800e341 	.word	0x0800e341
 800e3a4:	0800e341 	.word	0x0800e341
 800e3a8:	0800e341 	.word	0x0800e341
 800e3ac:	0800e485 	.word	0x0800e485
 800e3b0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e3b4:	e7db      	b.n	800e36e <_scanf_float+0x92>
 800e3b6:	290e      	cmp	r1, #14
 800e3b8:	d8c2      	bhi.n	800e340 <_scanf_float+0x64>
 800e3ba:	a001      	add	r0, pc, #4	@ (adr r0, 800e3c0 <_scanf_float+0xe4>)
 800e3bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e3c0:	0800e475 	.word	0x0800e475
 800e3c4:	0800e341 	.word	0x0800e341
 800e3c8:	0800e475 	.word	0x0800e475
 800e3cc:	0800e50b 	.word	0x0800e50b
 800e3d0:	0800e341 	.word	0x0800e341
 800e3d4:	0800e41d 	.word	0x0800e41d
 800e3d8:	0800e45b 	.word	0x0800e45b
 800e3dc:	0800e45b 	.word	0x0800e45b
 800e3e0:	0800e45b 	.word	0x0800e45b
 800e3e4:	0800e45b 	.word	0x0800e45b
 800e3e8:	0800e45b 	.word	0x0800e45b
 800e3ec:	0800e45b 	.word	0x0800e45b
 800e3f0:	0800e45b 	.word	0x0800e45b
 800e3f4:	0800e45b 	.word	0x0800e45b
 800e3f8:	0800e45b 	.word	0x0800e45b
 800e3fc:	2b6e      	cmp	r3, #110	@ 0x6e
 800e3fe:	d809      	bhi.n	800e414 <_scanf_float+0x138>
 800e400:	2b60      	cmp	r3, #96	@ 0x60
 800e402:	d8b2      	bhi.n	800e36a <_scanf_float+0x8e>
 800e404:	2b54      	cmp	r3, #84	@ 0x54
 800e406:	d07b      	beq.n	800e500 <_scanf_float+0x224>
 800e408:	2b59      	cmp	r3, #89	@ 0x59
 800e40a:	d199      	bne.n	800e340 <_scanf_float+0x64>
 800e40c:	2d07      	cmp	r5, #7
 800e40e:	d197      	bne.n	800e340 <_scanf_float+0x64>
 800e410:	2508      	movs	r5, #8
 800e412:	e02c      	b.n	800e46e <_scanf_float+0x192>
 800e414:	2b74      	cmp	r3, #116	@ 0x74
 800e416:	d073      	beq.n	800e500 <_scanf_float+0x224>
 800e418:	2b79      	cmp	r3, #121	@ 0x79
 800e41a:	e7f6      	b.n	800e40a <_scanf_float+0x12e>
 800e41c:	6821      	ldr	r1, [r4, #0]
 800e41e:	05c8      	lsls	r0, r1, #23
 800e420:	d51b      	bpl.n	800e45a <_scanf_float+0x17e>
 800e422:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e426:	6021      	str	r1, [r4, #0]
 800e428:	f109 0901 	add.w	r9, r9, #1
 800e42c:	f1bb 0f00 	cmp.w	fp, #0
 800e430:	d003      	beq.n	800e43a <_scanf_float+0x15e>
 800e432:	3201      	adds	r2, #1
 800e434:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e438:	60a2      	str	r2, [r4, #8]
 800e43a:	68a3      	ldr	r3, [r4, #8]
 800e43c:	3b01      	subs	r3, #1
 800e43e:	60a3      	str	r3, [r4, #8]
 800e440:	6923      	ldr	r3, [r4, #16]
 800e442:	3301      	adds	r3, #1
 800e444:	6123      	str	r3, [r4, #16]
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	3b01      	subs	r3, #1
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	607b      	str	r3, [r7, #4]
 800e44e:	f340 8087 	ble.w	800e560 <_scanf_float+0x284>
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	3301      	adds	r3, #1
 800e456:	603b      	str	r3, [r7, #0]
 800e458:	e765      	b.n	800e326 <_scanf_float+0x4a>
 800e45a:	eb1a 0105 	adds.w	r1, sl, r5
 800e45e:	f47f af6f 	bne.w	800e340 <_scanf_float+0x64>
 800e462:	6822      	ldr	r2, [r4, #0]
 800e464:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e468:	6022      	str	r2, [r4, #0]
 800e46a:	460d      	mov	r5, r1
 800e46c:	468a      	mov	sl, r1
 800e46e:	f806 3b01 	strb.w	r3, [r6], #1
 800e472:	e7e2      	b.n	800e43a <_scanf_float+0x15e>
 800e474:	6822      	ldr	r2, [r4, #0]
 800e476:	0610      	lsls	r0, r2, #24
 800e478:	f57f af62 	bpl.w	800e340 <_scanf_float+0x64>
 800e47c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e480:	6022      	str	r2, [r4, #0]
 800e482:	e7f4      	b.n	800e46e <_scanf_float+0x192>
 800e484:	f1ba 0f00 	cmp.w	sl, #0
 800e488:	d10e      	bne.n	800e4a8 <_scanf_float+0x1cc>
 800e48a:	f1b9 0f00 	cmp.w	r9, #0
 800e48e:	d10e      	bne.n	800e4ae <_scanf_float+0x1d2>
 800e490:	6822      	ldr	r2, [r4, #0]
 800e492:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e496:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e49a:	d108      	bne.n	800e4ae <_scanf_float+0x1d2>
 800e49c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e4a0:	6022      	str	r2, [r4, #0]
 800e4a2:	f04f 0a01 	mov.w	sl, #1
 800e4a6:	e7e2      	b.n	800e46e <_scanf_float+0x192>
 800e4a8:	f1ba 0f02 	cmp.w	sl, #2
 800e4ac:	d055      	beq.n	800e55a <_scanf_float+0x27e>
 800e4ae:	2d01      	cmp	r5, #1
 800e4b0:	d002      	beq.n	800e4b8 <_scanf_float+0x1dc>
 800e4b2:	2d04      	cmp	r5, #4
 800e4b4:	f47f af44 	bne.w	800e340 <_scanf_float+0x64>
 800e4b8:	3501      	adds	r5, #1
 800e4ba:	b2ed      	uxtb	r5, r5
 800e4bc:	e7d7      	b.n	800e46e <_scanf_float+0x192>
 800e4be:	f1ba 0f01 	cmp.w	sl, #1
 800e4c2:	f47f af3d 	bne.w	800e340 <_scanf_float+0x64>
 800e4c6:	f04f 0a02 	mov.w	sl, #2
 800e4ca:	e7d0      	b.n	800e46e <_scanf_float+0x192>
 800e4cc:	b97d      	cbnz	r5, 800e4ee <_scanf_float+0x212>
 800e4ce:	f1b9 0f00 	cmp.w	r9, #0
 800e4d2:	f47f af38 	bne.w	800e346 <_scanf_float+0x6a>
 800e4d6:	6822      	ldr	r2, [r4, #0]
 800e4d8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e4dc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e4e0:	f040 8108 	bne.w	800e6f4 <_scanf_float+0x418>
 800e4e4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e4e8:	6022      	str	r2, [r4, #0]
 800e4ea:	2501      	movs	r5, #1
 800e4ec:	e7bf      	b.n	800e46e <_scanf_float+0x192>
 800e4ee:	2d03      	cmp	r5, #3
 800e4f0:	d0e2      	beq.n	800e4b8 <_scanf_float+0x1dc>
 800e4f2:	2d05      	cmp	r5, #5
 800e4f4:	e7de      	b.n	800e4b4 <_scanf_float+0x1d8>
 800e4f6:	2d02      	cmp	r5, #2
 800e4f8:	f47f af22 	bne.w	800e340 <_scanf_float+0x64>
 800e4fc:	2503      	movs	r5, #3
 800e4fe:	e7b6      	b.n	800e46e <_scanf_float+0x192>
 800e500:	2d06      	cmp	r5, #6
 800e502:	f47f af1d 	bne.w	800e340 <_scanf_float+0x64>
 800e506:	2507      	movs	r5, #7
 800e508:	e7b1      	b.n	800e46e <_scanf_float+0x192>
 800e50a:	6822      	ldr	r2, [r4, #0]
 800e50c:	0591      	lsls	r1, r2, #22
 800e50e:	f57f af17 	bpl.w	800e340 <_scanf_float+0x64>
 800e512:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e516:	6022      	str	r2, [r4, #0]
 800e518:	f8cd 9008 	str.w	r9, [sp, #8]
 800e51c:	e7a7      	b.n	800e46e <_scanf_float+0x192>
 800e51e:	6822      	ldr	r2, [r4, #0]
 800e520:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e524:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e528:	d006      	beq.n	800e538 <_scanf_float+0x25c>
 800e52a:	0550      	lsls	r0, r2, #21
 800e52c:	f57f af08 	bpl.w	800e340 <_scanf_float+0x64>
 800e530:	f1b9 0f00 	cmp.w	r9, #0
 800e534:	f000 80de 	beq.w	800e6f4 <_scanf_float+0x418>
 800e538:	0591      	lsls	r1, r2, #22
 800e53a:	bf58      	it	pl
 800e53c:	9902      	ldrpl	r1, [sp, #8]
 800e53e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e542:	bf58      	it	pl
 800e544:	eba9 0101 	subpl.w	r1, r9, r1
 800e548:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e54c:	bf58      	it	pl
 800e54e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e552:	6022      	str	r2, [r4, #0]
 800e554:	f04f 0900 	mov.w	r9, #0
 800e558:	e789      	b.n	800e46e <_scanf_float+0x192>
 800e55a:	f04f 0a03 	mov.w	sl, #3
 800e55e:	e786      	b.n	800e46e <_scanf_float+0x192>
 800e560:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e564:	4639      	mov	r1, r7
 800e566:	4640      	mov	r0, r8
 800e568:	4798      	blx	r3
 800e56a:	2800      	cmp	r0, #0
 800e56c:	f43f aedb 	beq.w	800e326 <_scanf_float+0x4a>
 800e570:	e6e6      	b.n	800e340 <_scanf_float+0x64>
 800e572:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e576:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e57a:	463a      	mov	r2, r7
 800e57c:	4640      	mov	r0, r8
 800e57e:	4798      	blx	r3
 800e580:	6923      	ldr	r3, [r4, #16]
 800e582:	3b01      	subs	r3, #1
 800e584:	6123      	str	r3, [r4, #16]
 800e586:	e6e8      	b.n	800e35a <_scanf_float+0x7e>
 800e588:	1e6b      	subs	r3, r5, #1
 800e58a:	2b06      	cmp	r3, #6
 800e58c:	d824      	bhi.n	800e5d8 <_scanf_float+0x2fc>
 800e58e:	2d02      	cmp	r5, #2
 800e590:	d836      	bhi.n	800e600 <_scanf_float+0x324>
 800e592:	9b01      	ldr	r3, [sp, #4]
 800e594:	429e      	cmp	r6, r3
 800e596:	f67f aee4 	bls.w	800e362 <_scanf_float+0x86>
 800e59a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e59e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e5a2:	463a      	mov	r2, r7
 800e5a4:	4640      	mov	r0, r8
 800e5a6:	4798      	blx	r3
 800e5a8:	6923      	ldr	r3, [r4, #16]
 800e5aa:	3b01      	subs	r3, #1
 800e5ac:	6123      	str	r3, [r4, #16]
 800e5ae:	e7f0      	b.n	800e592 <_scanf_float+0x2b6>
 800e5b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e5b4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e5b8:	463a      	mov	r2, r7
 800e5ba:	4640      	mov	r0, r8
 800e5bc:	4798      	blx	r3
 800e5be:	6923      	ldr	r3, [r4, #16]
 800e5c0:	3b01      	subs	r3, #1
 800e5c2:	6123      	str	r3, [r4, #16]
 800e5c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e5c8:	fa5f fa8a 	uxtb.w	sl, sl
 800e5cc:	f1ba 0f02 	cmp.w	sl, #2
 800e5d0:	d1ee      	bne.n	800e5b0 <_scanf_float+0x2d4>
 800e5d2:	3d03      	subs	r5, #3
 800e5d4:	b2ed      	uxtb	r5, r5
 800e5d6:	1b76      	subs	r6, r6, r5
 800e5d8:	6823      	ldr	r3, [r4, #0]
 800e5da:	05da      	lsls	r2, r3, #23
 800e5dc:	d530      	bpl.n	800e640 <_scanf_float+0x364>
 800e5de:	055b      	lsls	r3, r3, #21
 800e5e0:	d511      	bpl.n	800e606 <_scanf_float+0x32a>
 800e5e2:	9b01      	ldr	r3, [sp, #4]
 800e5e4:	429e      	cmp	r6, r3
 800e5e6:	f67f aebc 	bls.w	800e362 <_scanf_float+0x86>
 800e5ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e5ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e5f2:	463a      	mov	r2, r7
 800e5f4:	4640      	mov	r0, r8
 800e5f6:	4798      	blx	r3
 800e5f8:	6923      	ldr	r3, [r4, #16]
 800e5fa:	3b01      	subs	r3, #1
 800e5fc:	6123      	str	r3, [r4, #16]
 800e5fe:	e7f0      	b.n	800e5e2 <_scanf_float+0x306>
 800e600:	46aa      	mov	sl, r5
 800e602:	46b3      	mov	fp, r6
 800e604:	e7de      	b.n	800e5c4 <_scanf_float+0x2e8>
 800e606:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e60a:	6923      	ldr	r3, [r4, #16]
 800e60c:	2965      	cmp	r1, #101	@ 0x65
 800e60e:	f103 33ff 	add.w	r3, r3, #4294967295
 800e612:	f106 35ff 	add.w	r5, r6, #4294967295
 800e616:	6123      	str	r3, [r4, #16]
 800e618:	d00c      	beq.n	800e634 <_scanf_float+0x358>
 800e61a:	2945      	cmp	r1, #69	@ 0x45
 800e61c:	d00a      	beq.n	800e634 <_scanf_float+0x358>
 800e61e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e622:	463a      	mov	r2, r7
 800e624:	4640      	mov	r0, r8
 800e626:	4798      	blx	r3
 800e628:	6923      	ldr	r3, [r4, #16]
 800e62a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e62e:	3b01      	subs	r3, #1
 800e630:	1eb5      	subs	r5, r6, #2
 800e632:	6123      	str	r3, [r4, #16]
 800e634:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e638:	463a      	mov	r2, r7
 800e63a:	4640      	mov	r0, r8
 800e63c:	4798      	blx	r3
 800e63e:	462e      	mov	r6, r5
 800e640:	6822      	ldr	r2, [r4, #0]
 800e642:	f012 0210 	ands.w	r2, r2, #16
 800e646:	d001      	beq.n	800e64c <_scanf_float+0x370>
 800e648:	2000      	movs	r0, #0
 800e64a:	e68b      	b.n	800e364 <_scanf_float+0x88>
 800e64c:	7032      	strb	r2, [r6, #0]
 800e64e:	6823      	ldr	r3, [r4, #0]
 800e650:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e654:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e658:	d11c      	bne.n	800e694 <_scanf_float+0x3b8>
 800e65a:	9b02      	ldr	r3, [sp, #8]
 800e65c:	454b      	cmp	r3, r9
 800e65e:	eba3 0209 	sub.w	r2, r3, r9
 800e662:	d123      	bne.n	800e6ac <_scanf_float+0x3d0>
 800e664:	9901      	ldr	r1, [sp, #4]
 800e666:	2200      	movs	r2, #0
 800e668:	4640      	mov	r0, r8
 800e66a:	f002 fd49 	bl	8011100 <_strtod_r>
 800e66e:	9b03      	ldr	r3, [sp, #12]
 800e670:	6821      	ldr	r1, [r4, #0]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	f011 0f02 	tst.w	r1, #2
 800e678:	ec57 6b10 	vmov	r6, r7, d0
 800e67c:	f103 0204 	add.w	r2, r3, #4
 800e680:	d01f      	beq.n	800e6c2 <_scanf_float+0x3e6>
 800e682:	9903      	ldr	r1, [sp, #12]
 800e684:	600a      	str	r2, [r1, #0]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	e9c3 6700 	strd	r6, r7, [r3]
 800e68c:	68e3      	ldr	r3, [r4, #12]
 800e68e:	3301      	adds	r3, #1
 800e690:	60e3      	str	r3, [r4, #12]
 800e692:	e7d9      	b.n	800e648 <_scanf_float+0x36c>
 800e694:	9b04      	ldr	r3, [sp, #16]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d0e4      	beq.n	800e664 <_scanf_float+0x388>
 800e69a:	9905      	ldr	r1, [sp, #20]
 800e69c:	230a      	movs	r3, #10
 800e69e:	3101      	adds	r1, #1
 800e6a0:	4640      	mov	r0, r8
 800e6a2:	f002 fdad 	bl	8011200 <_strtol_r>
 800e6a6:	9b04      	ldr	r3, [sp, #16]
 800e6a8:	9e05      	ldr	r6, [sp, #20]
 800e6aa:	1ac2      	subs	r2, r0, r3
 800e6ac:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e6b0:	429e      	cmp	r6, r3
 800e6b2:	bf28      	it	cs
 800e6b4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e6b8:	4910      	ldr	r1, [pc, #64]	@ (800e6fc <_scanf_float+0x420>)
 800e6ba:	4630      	mov	r0, r6
 800e6bc:	f000 f954 	bl	800e968 <siprintf>
 800e6c0:	e7d0      	b.n	800e664 <_scanf_float+0x388>
 800e6c2:	f011 0f04 	tst.w	r1, #4
 800e6c6:	9903      	ldr	r1, [sp, #12]
 800e6c8:	600a      	str	r2, [r1, #0]
 800e6ca:	d1dc      	bne.n	800e686 <_scanf_float+0x3aa>
 800e6cc:	681d      	ldr	r5, [r3, #0]
 800e6ce:	4632      	mov	r2, r6
 800e6d0:	463b      	mov	r3, r7
 800e6d2:	4630      	mov	r0, r6
 800e6d4:	4639      	mov	r1, r7
 800e6d6:	f7f2 fa31 	bl	8000b3c <__aeabi_dcmpun>
 800e6da:	b128      	cbz	r0, 800e6e8 <_scanf_float+0x40c>
 800e6dc:	4808      	ldr	r0, [pc, #32]	@ (800e700 <_scanf_float+0x424>)
 800e6de:	f000 fb07 	bl	800ecf0 <nanf>
 800e6e2:	ed85 0a00 	vstr	s0, [r5]
 800e6e6:	e7d1      	b.n	800e68c <_scanf_float+0x3b0>
 800e6e8:	4630      	mov	r0, r6
 800e6ea:	4639      	mov	r1, r7
 800e6ec:	f7f2 fa84 	bl	8000bf8 <__aeabi_d2f>
 800e6f0:	6028      	str	r0, [r5, #0]
 800e6f2:	e7cb      	b.n	800e68c <_scanf_float+0x3b0>
 800e6f4:	f04f 0900 	mov.w	r9, #0
 800e6f8:	e629      	b.n	800e34e <_scanf_float+0x72>
 800e6fa:	bf00      	nop
 800e6fc:	08013f52 	.word	0x08013f52
 800e700:	08014308 	.word	0x08014308

0800e704 <std>:
 800e704:	2300      	movs	r3, #0
 800e706:	b510      	push	{r4, lr}
 800e708:	4604      	mov	r4, r0
 800e70a:	e9c0 3300 	strd	r3, r3, [r0]
 800e70e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e712:	6083      	str	r3, [r0, #8]
 800e714:	8181      	strh	r1, [r0, #12]
 800e716:	6643      	str	r3, [r0, #100]	@ 0x64
 800e718:	81c2      	strh	r2, [r0, #14]
 800e71a:	6183      	str	r3, [r0, #24]
 800e71c:	4619      	mov	r1, r3
 800e71e:	2208      	movs	r2, #8
 800e720:	305c      	adds	r0, #92	@ 0x5c
 800e722:	f000 fa45 	bl	800ebb0 <memset>
 800e726:	4b0d      	ldr	r3, [pc, #52]	@ (800e75c <std+0x58>)
 800e728:	6263      	str	r3, [r4, #36]	@ 0x24
 800e72a:	4b0d      	ldr	r3, [pc, #52]	@ (800e760 <std+0x5c>)
 800e72c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e72e:	4b0d      	ldr	r3, [pc, #52]	@ (800e764 <std+0x60>)
 800e730:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e732:	4b0d      	ldr	r3, [pc, #52]	@ (800e768 <std+0x64>)
 800e734:	6323      	str	r3, [r4, #48]	@ 0x30
 800e736:	4b0d      	ldr	r3, [pc, #52]	@ (800e76c <std+0x68>)
 800e738:	6224      	str	r4, [r4, #32]
 800e73a:	429c      	cmp	r4, r3
 800e73c:	d006      	beq.n	800e74c <std+0x48>
 800e73e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e742:	4294      	cmp	r4, r2
 800e744:	d002      	beq.n	800e74c <std+0x48>
 800e746:	33d0      	adds	r3, #208	@ 0xd0
 800e748:	429c      	cmp	r4, r3
 800e74a:	d105      	bne.n	800e758 <std+0x54>
 800e74c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e754:	f000 baba 	b.w	800eccc <__retarget_lock_init_recursive>
 800e758:	bd10      	pop	{r4, pc}
 800e75a:	bf00      	nop
 800e75c:	0800e9fd 	.word	0x0800e9fd
 800e760:	0800ea23 	.word	0x0800ea23
 800e764:	0800ea5b 	.word	0x0800ea5b
 800e768:	0800ea7f 	.word	0x0800ea7f
 800e76c:	20002cd4 	.word	0x20002cd4

0800e770 <stdio_exit_handler>:
 800e770:	4a02      	ldr	r2, [pc, #8]	@ (800e77c <stdio_exit_handler+0xc>)
 800e772:	4903      	ldr	r1, [pc, #12]	@ (800e780 <stdio_exit_handler+0x10>)
 800e774:	4803      	ldr	r0, [pc, #12]	@ (800e784 <stdio_exit_handler+0x14>)
 800e776:	f000 b869 	b.w	800e84c <_fwalk_sglue>
 800e77a:	bf00      	nop
 800e77c:	2000001c 	.word	0x2000001c
 800e780:	08011e75 	.word	0x08011e75
 800e784:	2000002c 	.word	0x2000002c

0800e788 <cleanup_stdio>:
 800e788:	6841      	ldr	r1, [r0, #4]
 800e78a:	4b0c      	ldr	r3, [pc, #48]	@ (800e7bc <cleanup_stdio+0x34>)
 800e78c:	4299      	cmp	r1, r3
 800e78e:	b510      	push	{r4, lr}
 800e790:	4604      	mov	r4, r0
 800e792:	d001      	beq.n	800e798 <cleanup_stdio+0x10>
 800e794:	f003 fb6e 	bl	8011e74 <_fflush_r>
 800e798:	68a1      	ldr	r1, [r4, #8]
 800e79a:	4b09      	ldr	r3, [pc, #36]	@ (800e7c0 <cleanup_stdio+0x38>)
 800e79c:	4299      	cmp	r1, r3
 800e79e:	d002      	beq.n	800e7a6 <cleanup_stdio+0x1e>
 800e7a0:	4620      	mov	r0, r4
 800e7a2:	f003 fb67 	bl	8011e74 <_fflush_r>
 800e7a6:	68e1      	ldr	r1, [r4, #12]
 800e7a8:	4b06      	ldr	r3, [pc, #24]	@ (800e7c4 <cleanup_stdio+0x3c>)
 800e7aa:	4299      	cmp	r1, r3
 800e7ac:	d004      	beq.n	800e7b8 <cleanup_stdio+0x30>
 800e7ae:	4620      	mov	r0, r4
 800e7b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7b4:	f003 bb5e 	b.w	8011e74 <_fflush_r>
 800e7b8:	bd10      	pop	{r4, pc}
 800e7ba:	bf00      	nop
 800e7bc:	20002cd4 	.word	0x20002cd4
 800e7c0:	20002d3c 	.word	0x20002d3c
 800e7c4:	20002da4 	.word	0x20002da4

0800e7c8 <global_stdio_init.part.0>:
 800e7c8:	b510      	push	{r4, lr}
 800e7ca:	4b0b      	ldr	r3, [pc, #44]	@ (800e7f8 <global_stdio_init.part.0+0x30>)
 800e7cc:	4c0b      	ldr	r4, [pc, #44]	@ (800e7fc <global_stdio_init.part.0+0x34>)
 800e7ce:	4a0c      	ldr	r2, [pc, #48]	@ (800e800 <global_stdio_init.part.0+0x38>)
 800e7d0:	601a      	str	r2, [r3, #0]
 800e7d2:	4620      	mov	r0, r4
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	2104      	movs	r1, #4
 800e7d8:	f7ff ff94 	bl	800e704 <std>
 800e7dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e7e0:	2201      	movs	r2, #1
 800e7e2:	2109      	movs	r1, #9
 800e7e4:	f7ff ff8e 	bl	800e704 <std>
 800e7e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e7ec:	2202      	movs	r2, #2
 800e7ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7f2:	2112      	movs	r1, #18
 800e7f4:	f7ff bf86 	b.w	800e704 <std>
 800e7f8:	20002e0c 	.word	0x20002e0c
 800e7fc:	20002cd4 	.word	0x20002cd4
 800e800:	0800e771 	.word	0x0800e771

0800e804 <__sfp_lock_acquire>:
 800e804:	4801      	ldr	r0, [pc, #4]	@ (800e80c <__sfp_lock_acquire+0x8>)
 800e806:	f000 ba62 	b.w	800ecce <__retarget_lock_acquire_recursive>
 800e80a:	bf00      	nop
 800e80c:	20002e15 	.word	0x20002e15

0800e810 <__sfp_lock_release>:
 800e810:	4801      	ldr	r0, [pc, #4]	@ (800e818 <__sfp_lock_release+0x8>)
 800e812:	f000 ba5d 	b.w	800ecd0 <__retarget_lock_release_recursive>
 800e816:	bf00      	nop
 800e818:	20002e15 	.word	0x20002e15

0800e81c <__sinit>:
 800e81c:	b510      	push	{r4, lr}
 800e81e:	4604      	mov	r4, r0
 800e820:	f7ff fff0 	bl	800e804 <__sfp_lock_acquire>
 800e824:	6a23      	ldr	r3, [r4, #32]
 800e826:	b11b      	cbz	r3, 800e830 <__sinit+0x14>
 800e828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e82c:	f7ff bff0 	b.w	800e810 <__sfp_lock_release>
 800e830:	4b04      	ldr	r3, [pc, #16]	@ (800e844 <__sinit+0x28>)
 800e832:	6223      	str	r3, [r4, #32]
 800e834:	4b04      	ldr	r3, [pc, #16]	@ (800e848 <__sinit+0x2c>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d1f5      	bne.n	800e828 <__sinit+0xc>
 800e83c:	f7ff ffc4 	bl	800e7c8 <global_stdio_init.part.0>
 800e840:	e7f2      	b.n	800e828 <__sinit+0xc>
 800e842:	bf00      	nop
 800e844:	0800e789 	.word	0x0800e789
 800e848:	20002e0c 	.word	0x20002e0c

0800e84c <_fwalk_sglue>:
 800e84c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e850:	4607      	mov	r7, r0
 800e852:	4688      	mov	r8, r1
 800e854:	4614      	mov	r4, r2
 800e856:	2600      	movs	r6, #0
 800e858:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e85c:	f1b9 0901 	subs.w	r9, r9, #1
 800e860:	d505      	bpl.n	800e86e <_fwalk_sglue+0x22>
 800e862:	6824      	ldr	r4, [r4, #0]
 800e864:	2c00      	cmp	r4, #0
 800e866:	d1f7      	bne.n	800e858 <_fwalk_sglue+0xc>
 800e868:	4630      	mov	r0, r6
 800e86a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e86e:	89ab      	ldrh	r3, [r5, #12]
 800e870:	2b01      	cmp	r3, #1
 800e872:	d907      	bls.n	800e884 <_fwalk_sglue+0x38>
 800e874:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e878:	3301      	adds	r3, #1
 800e87a:	d003      	beq.n	800e884 <_fwalk_sglue+0x38>
 800e87c:	4629      	mov	r1, r5
 800e87e:	4638      	mov	r0, r7
 800e880:	47c0      	blx	r8
 800e882:	4306      	orrs	r6, r0
 800e884:	3568      	adds	r5, #104	@ 0x68
 800e886:	e7e9      	b.n	800e85c <_fwalk_sglue+0x10>

0800e888 <iprintf>:
 800e888:	b40f      	push	{r0, r1, r2, r3}
 800e88a:	b507      	push	{r0, r1, r2, lr}
 800e88c:	4906      	ldr	r1, [pc, #24]	@ (800e8a8 <iprintf+0x20>)
 800e88e:	ab04      	add	r3, sp, #16
 800e890:	6808      	ldr	r0, [r1, #0]
 800e892:	f853 2b04 	ldr.w	r2, [r3], #4
 800e896:	6881      	ldr	r1, [r0, #8]
 800e898:	9301      	str	r3, [sp, #4]
 800e89a:	f003 f801 	bl	80118a0 <_vfiprintf_r>
 800e89e:	b003      	add	sp, #12
 800e8a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e8a4:	b004      	add	sp, #16
 800e8a6:	4770      	bx	lr
 800e8a8:	20000028 	.word	0x20000028

0800e8ac <_puts_r>:
 800e8ac:	6a03      	ldr	r3, [r0, #32]
 800e8ae:	b570      	push	{r4, r5, r6, lr}
 800e8b0:	6884      	ldr	r4, [r0, #8]
 800e8b2:	4605      	mov	r5, r0
 800e8b4:	460e      	mov	r6, r1
 800e8b6:	b90b      	cbnz	r3, 800e8bc <_puts_r+0x10>
 800e8b8:	f7ff ffb0 	bl	800e81c <__sinit>
 800e8bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e8be:	07db      	lsls	r3, r3, #31
 800e8c0:	d405      	bmi.n	800e8ce <_puts_r+0x22>
 800e8c2:	89a3      	ldrh	r3, [r4, #12]
 800e8c4:	0598      	lsls	r0, r3, #22
 800e8c6:	d402      	bmi.n	800e8ce <_puts_r+0x22>
 800e8c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e8ca:	f000 fa00 	bl	800ecce <__retarget_lock_acquire_recursive>
 800e8ce:	89a3      	ldrh	r3, [r4, #12]
 800e8d0:	0719      	lsls	r1, r3, #28
 800e8d2:	d502      	bpl.n	800e8da <_puts_r+0x2e>
 800e8d4:	6923      	ldr	r3, [r4, #16]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d135      	bne.n	800e946 <_puts_r+0x9a>
 800e8da:	4621      	mov	r1, r4
 800e8dc:	4628      	mov	r0, r5
 800e8de:	f000 f911 	bl	800eb04 <__swsetup_r>
 800e8e2:	b380      	cbz	r0, 800e946 <_puts_r+0x9a>
 800e8e4:	f04f 35ff 	mov.w	r5, #4294967295
 800e8e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e8ea:	07da      	lsls	r2, r3, #31
 800e8ec:	d405      	bmi.n	800e8fa <_puts_r+0x4e>
 800e8ee:	89a3      	ldrh	r3, [r4, #12]
 800e8f0:	059b      	lsls	r3, r3, #22
 800e8f2:	d402      	bmi.n	800e8fa <_puts_r+0x4e>
 800e8f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e8f6:	f000 f9eb 	bl	800ecd0 <__retarget_lock_release_recursive>
 800e8fa:	4628      	mov	r0, r5
 800e8fc:	bd70      	pop	{r4, r5, r6, pc}
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	da04      	bge.n	800e90c <_puts_r+0x60>
 800e902:	69a2      	ldr	r2, [r4, #24]
 800e904:	429a      	cmp	r2, r3
 800e906:	dc17      	bgt.n	800e938 <_puts_r+0x8c>
 800e908:	290a      	cmp	r1, #10
 800e90a:	d015      	beq.n	800e938 <_puts_r+0x8c>
 800e90c:	6823      	ldr	r3, [r4, #0]
 800e90e:	1c5a      	adds	r2, r3, #1
 800e910:	6022      	str	r2, [r4, #0]
 800e912:	7019      	strb	r1, [r3, #0]
 800e914:	68a3      	ldr	r3, [r4, #8]
 800e916:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e91a:	3b01      	subs	r3, #1
 800e91c:	60a3      	str	r3, [r4, #8]
 800e91e:	2900      	cmp	r1, #0
 800e920:	d1ed      	bne.n	800e8fe <_puts_r+0x52>
 800e922:	2b00      	cmp	r3, #0
 800e924:	da11      	bge.n	800e94a <_puts_r+0x9e>
 800e926:	4622      	mov	r2, r4
 800e928:	210a      	movs	r1, #10
 800e92a:	4628      	mov	r0, r5
 800e92c:	f000 f8ab 	bl	800ea86 <__swbuf_r>
 800e930:	3001      	adds	r0, #1
 800e932:	d0d7      	beq.n	800e8e4 <_puts_r+0x38>
 800e934:	250a      	movs	r5, #10
 800e936:	e7d7      	b.n	800e8e8 <_puts_r+0x3c>
 800e938:	4622      	mov	r2, r4
 800e93a:	4628      	mov	r0, r5
 800e93c:	f000 f8a3 	bl	800ea86 <__swbuf_r>
 800e940:	3001      	adds	r0, #1
 800e942:	d1e7      	bne.n	800e914 <_puts_r+0x68>
 800e944:	e7ce      	b.n	800e8e4 <_puts_r+0x38>
 800e946:	3e01      	subs	r6, #1
 800e948:	e7e4      	b.n	800e914 <_puts_r+0x68>
 800e94a:	6823      	ldr	r3, [r4, #0]
 800e94c:	1c5a      	adds	r2, r3, #1
 800e94e:	6022      	str	r2, [r4, #0]
 800e950:	220a      	movs	r2, #10
 800e952:	701a      	strb	r2, [r3, #0]
 800e954:	e7ee      	b.n	800e934 <_puts_r+0x88>
	...

0800e958 <puts>:
 800e958:	4b02      	ldr	r3, [pc, #8]	@ (800e964 <puts+0xc>)
 800e95a:	4601      	mov	r1, r0
 800e95c:	6818      	ldr	r0, [r3, #0]
 800e95e:	f7ff bfa5 	b.w	800e8ac <_puts_r>
 800e962:	bf00      	nop
 800e964:	20000028 	.word	0x20000028

0800e968 <siprintf>:
 800e968:	b40e      	push	{r1, r2, r3}
 800e96a:	b500      	push	{lr}
 800e96c:	b09c      	sub	sp, #112	@ 0x70
 800e96e:	ab1d      	add	r3, sp, #116	@ 0x74
 800e970:	9002      	str	r0, [sp, #8]
 800e972:	9006      	str	r0, [sp, #24]
 800e974:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e978:	4809      	ldr	r0, [pc, #36]	@ (800e9a0 <siprintf+0x38>)
 800e97a:	9107      	str	r1, [sp, #28]
 800e97c:	9104      	str	r1, [sp, #16]
 800e97e:	4909      	ldr	r1, [pc, #36]	@ (800e9a4 <siprintf+0x3c>)
 800e980:	f853 2b04 	ldr.w	r2, [r3], #4
 800e984:	9105      	str	r1, [sp, #20]
 800e986:	6800      	ldr	r0, [r0, #0]
 800e988:	9301      	str	r3, [sp, #4]
 800e98a:	a902      	add	r1, sp, #8
 800e98c:	f002 fc96 	bl	80112bc <_svfiprintf_r>
 800e990:	9b02      	ldr	r3, [sp, #8]
 800e992:	2200      	movs	r2, #0
 800e994:	701a      	strb	r2, [r3, #0]
 800e996:	b01c      	add	sp, #112	@ 0x70
 800e998:	f85d eb04 	ldr.w	lr, [sp], #4
 800e99c:	b003      	add	sp, #12
 800e99e:	4770      	bx	lr
 800e9a0:	20000028 	.word	0x20000028
 800e9a4:	ffff0208 	.word	0xffff0208

0800e9a8 <siscanf>:
 800e9a8:	b40e      	push	{r1, r2, r3}
 800e9aa:	b530      	push	{r4, r5, lr}
 800e9ac:	b09c      	sub	sp, #112	@ 0x70
 800e9ae:	ac1f      	add	r4, sp, #124	@ 0x7c
 800e9b0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800e9b4:	f854 5b04 	ldr.w	r5, [r4], #4
 800e9b8:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e9bc:	9002      	str	r0, [sp, #8]
 800e9be:	9006      	str	r0, [sp, #24]
 800e9c0:	f7f1 fc5e 	bl	8000280 <strlen>
 800e9c4:	4b0b      	ldr	r3, [pc, #44]	@ (800e9f4 <siscanf+0x4c>)
 800e9c6:	9003      	str	r0, [sp, #12]
 800e9c8:	9007      	str	r0, [sp, #28]
 800e9ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e9cc:	480a      	ldr	r0, [pc, #40]	@ (800e9f8 <siscanf+0x50>)
 800e9ce:	9401      	str	r4, [sp, #4]
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e9d4:	9314      	str	r3, [sp, #80]	@ 0x50
 800e9d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e9da:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e9de:	462a      	mov	r2, r5
 800e9e0:	4623      	mov	r3, r4
 800e9e2:	a902      	add	r1, sp, #8
 800e9e4:	6800      	ldr	r0, [r0, #0]
 800e9e6:	f002 fdbd 	bl	8011564 <__ssvfiscanf_r>
 800e9ea:	b01c      	add	sp, #112	@ 0x70
 800e9ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e9f0:	b003      	add	sp, #12
 800e9f2:	4770      	bx	lr
 800e9f4:	0800ea1f 	.word	0x0800ea1f
 800e9f8:	20000028 	.word	0x20000028

0800e9fc <__sread>:
 800e9fc:	b510      	push	{r4, lr}
 800e9fe:	460c      	mov	r4, r1
 800ea00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea04:	f000 f914 	bl	800ec30 <_read_r>
 800ea08:	2800      	cmp	r0, #0
 800ea0a:	bfab      	itete	ge
 800ea0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ea0e:	89a3      	ldrhlt	r3, [r4, #12]
 800ea10:	181b      	addge	r3, r3, r0
 800ea12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ea16:	bfac      	ite	ge
 800ea18:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ea1a:	81a3      	strhlt	r3, [r4, #12]
 800ea1c:	bd10      	pop	{r4, pc}

0800ea1e <__seofread>:
 800ea1e:	2000      	movs	r0, #0
 800ea20:	4770      	bx	lr

0800ea22 <__swrite>:
 800ea22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea26:	461f      	mov	r7, r3
 800ea28:	898b      	ldrh	r3, [r1, #12]
 800ea2a:	05db      	lsls	r3, r3, #23
 800ea2c:	4605      	mov	r5, r0
 800ea2e:	460c      	mov	r4, r1
 800ea30:	4616      	mov	r6, r2
 800ea32:	d505      	bpl.n	800ea40 <__swrite+0x1e>
 800ea34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea38:	2302      	movs	r3, #2
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	f000 f8e6 	bl	800ec0c <_lseek_r>
 800ea40:	89a3      	ldrh	r3, [r4, #12]
 800ea42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ea4a:	81a3      	strh	r3, [r4, #12]
 800ea4c:	4632      	mov	r2, r6
 800ea4e:	463b      	mov	r3, r7
 800ea50:	4628      	mov	r0, r5
 800ea52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea56:	f000 b8fd 	b.w	800ec54 <_write_r>

0800ea5a <__sseek>:
 800ea5a:	b510      	push	{r4, lr}
 800ea5c:	460c      	mov	r4, r1
 800ea5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea62:	f000 f8d3 	bl	800ec0c <_lseek_r>
 800ea66:	1c43      	adds	r3, r0, #1
 800ea68:	89a3      	ldrh	r3, [r4, #12]
 800ea6a:	bf15      	itete	ne
 800ea6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ea6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ea72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ea76:	81a3      	strheq	r3, [r4, #12]
 800ea78:	bf18      	it	ne
 800ea7a:	81a3      	strhne	r3, [r4, #12]
 800ea7c:	bd10      	pop	{r4, pc}

0800ea7e <__sclose>:
 800ea7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea82:	f000 b8b3 	b.w	800ebec <_close_r>

0800ea86 <__swbuf_r>:
 800ea86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea88:	460e      	mov	r6, r1
 800ea8a:	4614      	mov	r4, r2
 800ea8c:	4605      	mov	r5, r0
 800ea8e:	b118      	cbz	r0, 800ea98 <__swbuf_r+0x12>
 800ea90:	6a03      	ldr	r3, [r0, #32]
 800ea92:	b90b      	cbnz	r3, 800ea98 <__swbuf_r+0x12>
 800ea94:	f7ff fec2 	bl	800e81c <__sinit>
 800ea98:	69a3      	ldr	r3, [r4, #24]
 800ea9a:	60a3      	str	r3, [r4, #8]
 800ea9c:	89a3      	ldrh	r3, [r4, #12]
 800ea9e:	071a      	lsls	r2, r3, #28
 800eaa0:	d501      	bpl.n	800eaa6 <__swbuf_r+0x20>
 800eaa2:	6923      	ldr	r3, [r4, #16]
 800eaa4:	b943      	cbnz	r3, 800eab8 <__swbuf_r+0x32>
 800eaa6:	4621      	mov	r1, r4
 800eaa8:	4628      	mov	r0, r5
 800eaaa:	f000 f82b 	bl	800eb04 <__swsetup_r>
 800eaae:	b118      	cbz	r0, 800eab8 <__swbuf_r+0x32>
 800eab0:	f04f 37ff 	mov.w	r7, #4294967295
 800eab4:	4638      	mov	r0, r7
 800eab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eab8:	6823      	ldr	r3, [r4, #0]
 800eaba:	6922      	ldr	r2, [r4, #16]
 800eabc:	1a98      	subs	r0, r3, r2
 800eabe:	6963      	ldr	r3, [r4, #20]
 800eac0:	b2f6      	uxtb	r6, r6
 800eac2:	4283      	cmp	r3, r0
 800eac4:	4637      	mov	r7, r6
 800eac6:	dc05      	bgt.n	800ead4 <__swbuf_r+0x4e>
 800eac8:	4621      	mov	r1, r4
 800eaca:	4628      	mov	r0, r5
 800eacc:	f003 f9d2 	bl	8011e74 <_fflush_r>
 800ead0:	2800      	cmp	r0, #0
 800ead2:	d1ed      	bne.n	800eab0 <__swbuf_r+0x2a>
 800ead4:	68a3      	ldr	r3, [r4, #8]
 800ead6:	3b01      	subs	r3, #1
 800ead8:	60a3      	str	r3, [r4, #8]
 800eada:	6823      	ldr	r3, [r4, #0]
 800eadc:	1c5a      	adds	r2, r3, #1
 800eade:	6022      	str	r2, [r4, #0]
 800eae0:	701e      	strb	r6, [r3, #0]
 800eae2:	6962      	ldr	r2, [r4, #20]
 800eae4:	1c43      	adds	r3, r0, #1
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d004      	beq.n	800eaf4 <__swbuf_r+0x6e>
 800eaea:	89a3      	ldrh	r3, [r4, #12]
 800eaec:	07db      	lsls	r3, r3, #31
 800eaee:	d5e1      	bpl.n	800eab4 <__swbuf_r+0x2e>
 800eaf0:	2e0a      	cmp	r6, #10
 800eaf2:	d1df      	bne.n	800eab4 <__swbuf_r+0x2e>
 800eaf4:	4621      	mov	r1, r4
 800eaf6:	4628      	mov	r0, r5
 800eaf8:	f003 f9bc 	bl	8011e74 <_fflush_r>
 800eafc:	2800      	cmp	r0, #0
 800eafe:	d0d9      	beq.n	800eab4 <__swbuf_r+0x2e>
 800eb00:	e7d6      	b.n	800eab0 <__swbuf_r+0x2a>
	...

0800eb04 <__swsetup_r>:
 800eb04:	b538      	push	{r3, r4, r5, lr}
 800eb06:	4b29      	ldr	r3, [pc, #164]	@ (800ebac <__swsetup_r+0xa8>)
 800eb08:	4605      	mov	r5, r0
 800eb0a:	6818      	ldr	r0, [r3, #0]
 800eb0c:	460c      	mov	r4, r1
 800eb0e:	b118      	cbz	r0, 800eb18 <__swsetup_r+0x14>
 800eb10:	6a03      	ldr	r3, [r0, #32]
 800eb12:	b90b      	cbnz	r3, 800eb18 <__swsetup_r+0x14>
 800eb14:	f7ff fe82 	bl	800e81c <__sinit>
 800eb18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb1c:	0719      	lsls	r1, r3, #28
 800eb1e:	d422      	bmi.n	800eb66 <__swsetup_r+0x62>
 800eb20:	06da      	lsls	r2, r3, #27
 800eb22:	d407      	bmi.n	800eb34 <__swsetup_r+0x30>
 800eb24:	2209      	movs	r2, #9
 800eb26:	602a      	str	r2, [r5, #0]
 800eb28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb2c:	81a3      	strh	r3, [r4, #12]
 800eb2e:	f04f 30ff 	mov.w	r0, #4294967295
 800eb32:	e033      	b.n	800eb9c <__swsetup_r+0x98>
 800eb34:	0758      	lsls	r0, r3, #29
 800eb36:	d512      	bpl.n	800eb5e <__swsetup_r+0x5a>
 800eb38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eb3a:	b141      	cbz	r1, 800eb4e <__swsetup_r+0x4a>
 800eb3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eb40:	4299      	cmp	r1, r3
 800eb42:	d002      	beq.n	800eb4a <__swsetup_r+0x46>
 800eb44:	4628      	mov	r0, r5
 800eb46:	f000 ff27 	bl	800f998 <_free_r>
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	6363      	str	r3, [r4, #52]	@ 0x34
 800eb4e:	89a3      	ldrh	r3, [r4, #12]
 800eb50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800eb54:	81a3      	strh	r3, [r4, #12]
 800eb56:	2300      	movs	r3, #0
 800eb58:	6063      	str	r3, [r4, #4]
 800eb5a:	6923      	ldr	r3, [r4, #16]
 800eb5c:	6023      	str	r3, [r4, #0]
 800eb5e:	89a3      	ldrh	r3, [r4, #12]
 800eb60:	f043 0308 	orr.w	r3, r3, #8
 800eb64:	81a3      	strh	r3, [r4, #12]
 800eb66:	6923      	ldr	r3, [r4, #16]
 800eb68:	b94b      	cbnz	r3, 800eb7e <__swsetup_r+0x7a>
 800eb6a:	89a3      	ldrh	r3, [r4, #12]
 800eb6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800eb70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eb74:	d003      	beq.n	800eb7e <__swsetup_r+0x7a>
 800eb76:	4621      	mov	r1, r4
 800eb78:	4628      	mov	r0, r5
 800eb7a:	f003 f9c9 	bl	8011f10 <__smakebuf_r>
 800eb7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb82:	f013 0201 	ands.w	r2, r3, #1
 800eb86:	d00a      	beq.n	800eb9e <__swsetup_r+0x9a>
 800eb88:	2200      	movs	r2, #0
 800eb8a:	60a2      	str	r2, [r4, #8]
 800eb8c:	6962      	ldr	r2, [r4, #20]
 800eb8e:	4252      	negs	r2, r2
 800eb90:	61a2      	str	r2, [r4, #24]
 800eb92:	6922      	ldr	r2, [r4, #16]
 800eb94:	b942      	cbnz	r2, 800eba8 <__swsetup_r+0xa4>
 800eb96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800eb9a:	d1c5      	bne.n	800eb28 <__swsetup_r+0x24>
 800eb9c:	bd38      	pop	{r3, r4, r5, pc}
 800eb9e:	0799      	lsls	r1, r3, #30
 800eba0:	bf58      	it	pl
 800eba2:	6962      	ldrpl	r2, [r4, #20]
 800eba4:	60a2      	str	r2, [r4, #8]
 800eba6:	e7f4      	b.n	800eb92 <__swsetup_r+0x8e>
 800eba8:	2000      	movs	r0, #0
 800ebaa:	e7f7      	b.n	800eb9c <__swsetup_r+0x98>
 800ebac:	20000028 	.word	0x20000028

0800ebb0 <memset>:
 800ebb0:	4402      	add	r2, r0
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	4293      	cmp	r3, r2
 800ebb6:	d100      	bne.n	800ebba <memset+0xa>
 800ebb8:	4770      	bx	lr
 800ebba:	f803 1b01 	strb.w	r1, [r3], #1
 800ebbe:	e7f9      	b.n	800ebb4 <memset+0x4>

0800ebc0 <strncmp>:
 800ebc0:	b510      	push	{r4, lr}
 800ebc2:	b16a      	cbz	r2, 800ebe0 <strncmp+0x20>
 800ebc4:	3901      	subs	r1, #1
 800ebc6:	1884      	adds	r4, r0, r2
 800ebc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ebcc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ebd0:	429a      	cmp	r2, r3
 800ebd2:	d103      	bne.n	800ebdc <strncmp+0x1c>
 800ebd4:	42a0      	cmp	r0, r4
 800ebd6:	d001      	beq.n	800ebdc <strncmp+0x1c>
 800ebd8:	2a00      	cmp	r2, #0
 800ebda:	d1f5      	bne.n	800ebc8 <strncmp+0x8>
 800ebdc:	1ad0      	subs	r0, r2, r3
 800ebde:	bd10      	pop	{r4, pc}
 800ebe0:	4610      	mov	r0, r2
 800ebe2:	e7fc      	b.n	800ebde <strncmp+0x1e>

0800ebe4 <_localeconv_r>:
 800ebe4:	4800      	ldr	r0, [pc, #0]	@ (800ebe8 <_localeconv_r+0x4>)
 800ebe6:	4770      	bx	lr
 800ebe8:	20000168 	.word	0x20000168

0800ebec <_close_r>:
 800ebec:	b538      	push	{r3, r4, r5, lr}
 800ebee:	4d06      	ldr	r5, [pc, #24]	@ (800ec08 <_close_r+0x1c>)
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	4604      	mov	r4, r0
 800ebf4:	4608      	mov	r0, r1
 800ebf6:	602b      	str	r3, [r5, #0]
 800ebf8:	f7f5 fab4 	bl	8004164 <_close>
 800ebfc:	1c43      	adds	r3, r0, #1
 800ebfe:	d102      	bne.n	800ec06 <_close_r+0x1a>
 800ec00:	682b      	ldr	r3, [r5, #0]
 800ec02:	b103      	cbz	r3, 800ec06 <_close_r+0x1a>
 800ec04:	6023      	str	r3, [r4, #0]
 800ec06:	bd38      	pop	{r3, r4, r5, pc}
 800ec08:	20002e10 	.word	0x20002e10

0800ec0c <_lseek_r>:
 800ec0c:	b538      	push	{r3, r4, r5, lr}
 800ec0e:	4d07      	ldr	r5, [pc, #28]	@ (800ec2c <_lseek_r+0x20>)
 800ec10:	4604      	mov	r4, r0
 800ec12:	4608      	mov	r0, r1
 800ec14:	4611      	mov	r1, r2
 800ec16:	2200      	movs	r2, #0
 800ec18:	602a      	str	r2, [r5, #0]
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	f7f5 fac9 	bl	80041b2 <_lseek>
 800ec20:	1c43      	adds	r3, r0, #1
 800ec22:	d102      	bne.n	800ec2a <_lseek_r+0x1e>
 800ec24:	682b      	ldr	r3, [r5, #0]
 800ec26:	b103      	cbz	r3, 800ec2a <_lseek_r+0x1e>
 800ec28:	6023      	str	r3, [r4, #0]
 800ec2a:	bd38      	pop	{r3, r4, r5, pc}
 800ec2c:	20002e10 	.word	0x20002e10

0800ec30 <_read_r>:
 800ec30:	b538      	push	{r3, r4, r5, lr}
 800ec32:	4d07      	ldr	r5, [pc, #28]	@ (800ec50 <_read_r+0x20>)
 800ec34:	4604      	mov	r4, r0
 800ec36:	4608      	mov	r0, r1
 800ec38:	4611      	mov	r1, r2
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	602a      	str	r2, [r5, #0]
 800ec3e:	461a      	mov	r2, r3
 800ec40:	f7f5 fa57 	bl	80040f2 <_read>
 800ec44:	1c43      	adds	r3, r0, #1
 800ec46:	d102      	bne.n	800ec4e <_read_r+0x1e>
 800ec48:	682b      	ldr	r3, [r5, #0]
 800ec4a:	b103      	cbz	r3, 800ec4e <_read_r+0x1e>
 800ec4c:	6023      	str	r3, [r4, #0]
 800ec4e:	bd38      	pop	{r3, r4, r5, pc}
 800ec50:	20002e10 	.word	0x20002e10

0800ec54 <_write_r>:
 800ec54:	b538      	push	{r3, r4, r5, lr}
 800ec56:	4d07      	ldr	r5, [pc, #28]	@ (800ec74 <_write_r+0x20>)
 800ec58:	4604      	mov	r4, r0
 800ec5a:	4608      	mov	r0, r1
 800ec5c:	4611      	mov	r1, r2
 800ec5e:	2200      	movs	r2, #0
 800ec60:	602a      	str	r2, [r5, #0]
 800ec62:	461a      	mov	r2, r3
 800ec64:	f7f5 fa62 	bl	800412c <_write>
 800ec68:	1c43      	adds	r3, r0, #1
 800ec6a:	d102      	bne.n	800ec72 <_write_r+0x1e>
 800ec6c:	682b      	ldr	r3, [r5, #0]
 800ec6e:	b103      	cbz	r3, 800ec72 <_write_r+0x1e>
 800ec70:	6023      	str	r3, [r4, #0]
 800ec72:	bd38      	pop	{r3, r4, r5, pc}
 800ec74:	20002e10 	.word	0x20002e10

0800ec78 <__errno>:
 800ec78:	4b01      	ldr	r3, [pc, #4]	@ (800ec80 <__errno+0x8>)
 800ec7a:	6818      	ldr	r0, [r3, #0]
 800ec7c:	4770      	bx	lr
 800ec7e:	bf00      	nop
 800ec80:	20000028 	.word	0x20000028

0800ec84 <__libc_init_array>:
 800ec84:	b570      	push	{r4, r5, r6, lr}
 800ec86:	4d0d      	ldr	r5, [pc, #52]	@ (800ecbc <__libc_init_array+0x38>)
 800ec88:	4c0d      	ldr	r4, [pc, #52]	@ (800ecc0 <__libc_init_array+0x3c>)
 800ec8a:	1b64      	subs	r4, r4, r5
 800ec8c:	10a4      	asrs	r4, r4, #2
 800ec8e:	2600      	movs	r6, #0
 800ec90:	42a6      	cmp	r6, r4
 800ec92:	d109      	bne.n	800eca8 <__libc_init_array+0x24>
 800ec94:	4d0b      	ldr	r5, [pc, #44]	@ (800ecc4 <__libc_init_array+0x40>)
 800ec96:	4c0c      	ldr	r4, [pc, #48]	@ (800ecc8 <__libc_init_array+0x44>)
 800ec98:	f004 fe2c 	bl	80138f4 <_init>
 800ec9c:	1b64      	subs	r4, r4, r5
 800ec9e:	10a4      	asrs	r4, r4, #2
 800eca0:	2600      	movs	r6, #0
 800eca2:	42a6      	cmp	r6, r4
 800eca4:	d105      	bne.n	800ecb2 <__libc_init_array+0x2e>
 800eca6:	bd70      	pop	{r4, r5, r6, pc}
 800eca8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecac:	4798      	blx	r3
 800ecae:	3601      	adds	r6, #1
 800ecb0:	e7ee      	b.n	800ec90 <__libc_init_array+0xc>
 800ecb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecb6:	4798      	blx	r3
 800ecb8:	3601      	adds	r6, #1
 800ecba:	e7f2      	b.n	800eca2 <__libc_init_array+0x1e>
 800ecbc:	080143a8 	.word	0x080143a8
 800ecc0:	080143a8 	.word	0x080143a8
 800ecc4:	080143a8 	.word	0x080143a8
 800ecc8:	080143ac 	.word	0x080143ac

0800eccc <__retarget_lock_init_recursive>:
 800eccc:	4770      	bx	lr

0800ecce <__retarget_lock_acquire_recursive>:
 800ecce:	4770      	bx	lr

0800ecd0 <__retarget_lock_release_recursive>:
 800ecd0:	4770      	bx	lr

0800ecd2 <memcpy>:
 800ecd2:	440a      	add	r2, r1
 800ecd4:	4291      	cmp	r1, r2
 800ecd6:	f100 33ff 	add.w	r3, r0, #4294967295
 800ecda:	d100      	bne.n	800ecde <memcpy+0xc>
 800ecdc:	4770      	bx	lr
 800ecde:	b510      	push	{r4, lr}
 800ece0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ece4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ece8:	4291      	cmp	r1, r2
 800ecea:	d1f9      	bne.n	800ece0 <memcpy+0xe>
 800ecec:	bd10      	pop	{r4, pc}
	...

0800ecf0 <nanf>:
 800ecf0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ecf8 <nanf+0x8>
 800ecf4:	4770      	bx	lr
 800ecf6:	bf00      	nop
 800ecf8:	7fc00000 	.word	0x7fc00000

0800ecfc <quorem>:
 800ecfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed00:	6903      	ldr	r3, [r0, #16]
 800ed02:	690c      	ldr	r4, [r1, #16]
 800ed04:	42a3      	cmp	r3, r4
 800ed06:	4607      	mov	r7, r0
 800ed08:	db7e      	blt.n	800ee08 <quorem+0x10c>
 800ed0a:	3c01      	subs	r4, #1
 800ed0c:	f101 0814 	add.w	r8, r1, #20
 800ed10:	00a3      	lsls	r3, r4, #2
 800ed12:	f100 0514 	add.w	r5, r0, #20
 800ed16:	9300      	str	r3, [sp, #0]
 800ed18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ed1c:	9301      	str	r3, [sp, #4]
 800ed1e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ed22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ed26:	3301      	adds	r3, #1
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ed2e:	fbb2 f6f3 	udiv	r6, r2, r3
 800ed32:	d32e      	bcc.n	800ed92 <quorem+0x96>
 800ed34:	f04f 0a00 	mov.w	sl, #0
 800ed38:	46c4      	mov	ip, r8
 800ed3a:	46ae      	mov	lr, r5
 800ed3c:	46d3      	mov	fp, sl
 800ed3e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ed42:	b298      	uxth	r0, r3
 800ed44:	fb06 a000 	mla	r0, r6, r0, sl
 800ed48:	0c02      	lsrs	r2, r0, #16
 800ed4a:	0c1b      	lsrs	r3, r3, #16
 800ed4c:	fb06 2303 	mla	r3, r6, r3, r2
 800ed50:	f8de 2000 	ldr.w	r2, [lr]
 800ed54:	b280      	uxth	r0, r0
 800ed56:	b292      	uxth	r2, r2
 800ed58:	1a12      	subs	r2, r2, r0
 800ed5a:	445a      	add	r2, fp
 800ed5c:	f8de 0000 	ldr.w	r0, [lr]
 800ed60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ed64:	b29b      	uxth	r3, r3
 800ed66:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ed6a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ed6e:	b292      	uxth	r2, r2
 800ed70:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ed74:	45e1      	cmp	r9, ip
 800ed76:	f84e 2b04 	str.w	r2, [lr], #4
 800ed7a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ed7e:	d2de      	bcs.n	800ed3e <quorem+0x42>
 800ed80:	9b00      	ldr	r3, [sp, #0]
 800ed82:	58eb      	ldr	r3, [r5, r3]
 800ed84:	b92b      	cbnz	r3, 800ed92 <quorem+0x96>
 800ed86:	9b01      	ldr	r3, [sp, #4]
 800ed88:	3b04      	subs	r3, #4
 800ed8a:	429d      	cmp	r5, r3
 800ed8c:	461a      	mov	r2, r3
 800ed8e:	d32f      	bcc.n	800edf0 <quorem+0xf4>
 800ed90:	613c      	str	r4, [r7, #16]
 800ed92:	4638      	mov	r0, r7
 800ed94:	f001 f9c4 	bl	8010120 <__mcmp>
 800ed98:	2800      	cmp	r0, #0
 800ed9a:	db25      	blt.n	800ede8 <quorem+0xec>
 800ed9c:	4629      	mov	r1, r5
 800ed9e:	2000      	movs	r0, #0
 800eda0:	f858 2b04 	ldr.w	r2, [r8], #4
 800eda4:	f8d1 c000 	ldr.w	ip, [r1]
 800eda8:	fa1f fe82 	uxth.w	lr, r2
 800edac:	fa1f f38c 	uxth.w	r3, ip
 800edb0:	eba3 030e 	sub.w	r3, r3, lr
 800edb4:	4403      	add	r3, r0
 800edb6:	0c12      	lsrs	r2, r2, #16
 800edb8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800edbc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800edc0:	b29b      	uxth	r3, r3
 800edc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800edc6:	45c1      	cmp	r9, r8
 800edc8:	f841 3b04 	str.w	r3, [r1], #4
 800edcc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800edd0:	d2e6      	bcs.n	800eda0 <quorem+0xa4>
 800edd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800edd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800edda:	b922      	cbnz	r2, 800ede6 <quorem+0xea>
 800eddc:	3b04      	subs	r3, #4
 800edde:	429d      	cmp	r5, r3
 800ede0:	461a      	mov	r2, r3
 800ede2:	d30b      	bcc.n	800edfc <quorem+0x100>
 800ede4:	613c      	str	r4, [r7, #16]
 800ede6:	3601      	adds	r6, #1
 800ede8:	4630      	mov	r0, r6
 800edea:	b003      	add	sp, #12
 800edec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edf0:	6812      	ldr	r2, [r2, #0]
 800edf2:	3b04      	subs	r3, #4
 800edf4:	2a00      	cmp	r2, #0
 800edf6:	d1cb      	bne.n	800ed90 <quorem+0x94>
 800edf8:	3c01      	subs	r4, #1
 800edfa:	e7c6      	b.n	800ed8a <quorem+0x8e>
 800edfc:	6812      	ldr	r2, [r2, #0]
 800edfe:	3b04      	subs	r3, #4
 800ee00:	2a00      	cmp	r2, #0
 800ee02:	d1ef      	bne.n	800ede4 <quorem+0xe8>
 800ee04:	3c01      	subs	r4, #1
 800ee06:	e7ea      	b.n	800edde <quorem+0xe2>
 800ee08:	2000      	movs	r0, #0
 800ee0a:	e7ee      	b.n	800edea <quorem+0xee>
 800ee0c:	0000      	movs	r0, r0
	...

0800ee10 <_dtoa_r>:
 800ee10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee14:	69c7      	ldr	r7, [r0, #28]
 800ee16:	b099      	sub	sp, #100	@ 0x64
 800ee18:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ee1c:	ec55 4b10 	vmov	r4, r5, d0
 800ee20:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ee22:	9109      	str	r1, [sp, #36]	@ 0x24
 800ee24:	4683      	mov	fp, r0
 800ee26:	920e      	str	r2, [sp, #56]	@ 0x38
 800ee28:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ee2a:	b97f      	cbnz	r7, 800ee4c <_dtoa_r+0x3c>
 800ee2c:	2010      	movs	r0, #16
 800ee2e:	f000 fdfd 	bl	800fa2c <malloc>
 800ee32:	4602      	mov	r2, r0
 800ee34:	f8cb 001c 	str.w	r0, [fp, #28]
 800ee38:	b920      	cbnz	r0, 800ee44 <_dtoa_r+0x34>
 800ee3a:	4ba7      	ldr	r3, [pc, #668]	@ (800f0d8 <_dtoa_r+0x2c8>)
 800ee3c:	21ef      	movs	r1, #239	@ 0xef
 800ee3e:	48a7      	ldr	r0, [pc, #668]	@ (800f0dc <_dtoa_r+0x2cc>)
 800ee40:	f003 f96a 	bl	8012118 <__assert_func>
 800ee44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ee48:	6007      	str	r7, [r0, #0]
 800ee4a:	60c7      	str	r7, [r0, #12]
 800ee4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ee50:	6819      	ldr	r1, [r3, #0]
 800ee52:	b159      	cbz	r1, 800ee6c <_dtoa_r+0x5c>
 800ee54:	685a      	ldr	r2, [r3, #4]
 800ee56:	604a      	str	r2, [r1, #4]
 800ee58:	2301      	movs	r3, #1
 800ee5a:	4093      	lsls	r3, r2
 800ee5c:	608b      	str	r3, [r1, #8]
 800ee5e:	4658      	mov	r0, fp
 800ee60:	f000 feda 	bl	800fc18 <_Bfree>
 800ee64:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	601a      	str	r2, [r3, #0]
 800ee6c:	1e2b      	subs	r3, r5, #0
 800ee6e:	bfb9      	ittee	lt
 800ee70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ee74:	9303      	strlt	r3, [sp, #12]
 800ee76:	2300      	movge	r3, #0
 800ee78:	6033      	strge	r3, [r6, #0]
 800ee7a:	9f03      	ldr	r7, [sp, #12]
 800ee7c:	4b98      	ldr	r3, [pc, #608]	@ (800f0e0 <_dtoa_r+0x2d0>)
 800ee7e:	bfbc      	itt	lt
 800ee80:	2201      	movlt	r2, #1
 800ee82:	6032      	strlt	r2, [r6, #0]
 800ee84:	43bb      	bics	r3, r7
 800ee86:	d112      	bne.n	800eeae <_dtoa_r+0x9e>
 800ee88:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ee8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ee8e:	6013      	str	r3, [r2, #0]
 800ee90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ee94:	4323      	orrs	r3, r4
 800ee96:	f000 854d 	beq.w	800f934 <_dtoa_r+0xb24>
 800ee9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ee9c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f0f4 <_dtoa_r+0x2e4>
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	f000 854f 	beq.w	800f944 <_dtoa_r+0xb34>
 800eea6:	f10a 0303 	add.w	r3, sl, #3
 800eeaa:	f000 bd49 	b.w	800f940 <_dtoa_r+0xb30>
 800eeae:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	ec51 0b17 	vmov	r0, r1, d7
 800eeb8:	2300      	movs	r3, #0
 800eeba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800eebe:	f7f1 fe0b 	bl	8000ad8 <__aeabi_dcmpeq>
 800eec2:	4680      	mov	r8, r0
 800eec4:	b158      	cbz	r0, 800eede <_dtoa_r+0xce>
 800eec6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800eec8:	2301      	movs	r3, #1
 800eeca:	6013      	str	r3, [r2, #0]
 800eecc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800eece:	b113      	cbz	r3, 800eed6 <_dtoa_r+0xc6>
 800eed0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800eed2:	4b84      	ldr	r3, [pc, #528]	@ (800f0e4 <_dtoa_r+0x2d4>)
 800eed4:	6013      	str	r3, [r2, #0]
 800eed6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f0f8 <_dtoa_r+0x2e8>
 800eeda:	f000 bd33 	b.w	800f944 <_dtoa_r+0xb34>
 800eede:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800eee2:	aa16      	add	r2, sp, #88	@ 0x58
 800eee4:	a917      	add	r1, sp, #92	@ 0x5c
 800eee6:	4658      	mov	r0, fp
 800eee8:	f001 fa3a 	bl	8010360 <__d2b>
 800eeec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800eef0:	4681      	mov	r9, r0
 800eef2:	2e00      	cmp	r6, #0
 800eef4:	d077      	beq.n	800efe6 <_dtoa_r+0x1d6>
 800eef6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eef8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800eefc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ef00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ef04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ef08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ef0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ef10:	4619      	mov	r1, r3
 800ef12:	2200      	movs	r2, #0
 800ef14:	4b74      	ldr	r3, [pc, #464]	@ (800f0e8 <_dtoa_r+0x2d8>)
 800ef16:	f7f1 f9bf 	bl	8000298 <__aeabi_dsub>
 800ef1a:	a369      	add	r3, pc, #420	@ (adr r3, 800f0c0 <_dtoa_r+0x2b0>)
 800ef1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef20:	f7f1 fb72 	bl	8000608 <__aeabi_dmul>
 800ef24:	a368      	add	r3, pc, #416	@ (adr r3, 800f0c8 <_dtoa_r+0x2b8>)
 800ef26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef2a:	f7f1 f9b7 	bl	800029c <__adddf3>
 800ef2e:	4604      	mov	r4, r0
 800ef30:	4630      	mov	r0, r6
 800ef32:	460d      	mov	r5, r1
 800ef34:	f7f1 fafe 	bl	8000534 <__aeabi_i2d>
 800ef38:	a365      	add	r3, pc, #404	@ (adr r3, 800f0d0 <_dtoa_r+0x2c0>)
 800ef3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef3e:	f7f1 fb63 	bl	8000608 <__aeabi_dmul>
 800ef42:	4602      	mov	r2, r0
 800ef44:	460b      	mov	r3, r1
 800ef46:	4620      	mov	r0, r4
 800ef48:	4629      	mov	r1, r5
 800ef4a:	f7f1 f9a7 	bl	800029c <__adddf3>
 800ef4e:	4604      	mov	r4, r0
 800ef50:	460d      	mov	r5, r1
 800ef52:	f7f1 fe09 	bl	8000b68 <__aeabi_d2iz>
 800ef56:	2200      	movs	r2, #0
 800ef58:	4607      	mov	r7, r0
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	4620      	mov	r0, r4
 800ef5e:	4629      	mov	r1, r5
 800ef60:	f7f1 fdc4 	bl	8000aec <__aeabi_dcmplt>
 800ef64:	b140      	cbz	r0, 800ef78 <_dtoa_r+0x168>
 800ef66:	4638      	mov	r0, r7
 800ef68:	f7f1 fae4 	bl	8000534 <__aeabi_i2d>
 800ef6c:	4622      	mov	r2, r4
 800ef6e:	462b      	mov	r3, r5
 800ef70:	f7f1 fdb2 	bl	8000ad8 <__aeabi_dcmpeq>
 800ef74:	b900      	cbnz	r0, 800ef78 <_dtoa_r+0x168>
 800ef76:	3f01      	subs	r7, #1
 800ef78:	2f16      	cmp	r7, #22
 800ef7a:	d851      	bhi.n	800f020 <_dtoa_r+0x210>
 800ef7c:	4b5b      	ldr	r3, [pc, #364]	@ (800f0ec <_dtoa_r+0x2dc>)
 800ef7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ef82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ef8a:	f7f1 fdaf 	bl	8000aec <__aeabi_dcmplt>
 800ef8e:	2800      	cmp	r0, #0
 800ef90:	d048      	beq.n	800f024 <_dtoa_r+0x214>
 800ef92:	3f01      	subs	r7, #1
 800ef94:	2300      	movs	r3, #0
 800ef96:	9312      	str	r3, [sp, #72]	@ 0x48
 800ef98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ef9a:	1b9b      	subs	r3, r3, r6
 800ef9c:	1e5a      	subs	r2, r3, #1
 800ef9e:	bf44      	itt	mi
 800efa0:	f1c3 0801 	rsbmi	r8, r3, #1
 800efa4:	2300      	movmi	r3, #0
 800efa6:	9208      	str	r2, [sp, #32]
 800efa8:	bf54      	ite	pl
 800efaa:	f04f 0800 	movpl.w	r8, #0
 800efae:	9308      	strmi	r3, [sp, #32]
 800efb0:	2f00      	cmp	r7, #0
 800efb2:	db39      	blt.n	800f028 <_dtoa_r+0x218>
 800efb4:	9b08      	ldr	r3, [sp, #32]
 800efb6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800efb8:	443b      	add	r3, r7
 800efba:	9308      	str	r3, [sp, #32]
 800efbc:	2300      	movs	r3, #0
 800efbe:	930a      	str	r3, [sp, #40]	@ 0x28
 800efc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efc2:	2b09      	cmp	r3, #9
 800efc4:	d864      	bhi.n	800f090 <_dtoa_r+0x280>
 800efc6:	2b05      	cmp	r3, #5
 800efc8:	bfc4      	itt	gt
 800efca:	3b04      	subgt	r3, #4
 800efcc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800efce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efd0:	f1a3 0302 	sub.w	r3, r3, #2
 800efd4:	bfcc      	ite	gt
 800efd6:	2400      	movgt	r4, #0
 800efd8:	2401      	movle	r4, #1
 800efda:	2b03      	cmp	r3, #3
 800efdc:	d863      	bhi.n	800f0a6 <_dtoa_r+0x296>
 800efde:	e8df f003 	tbb	[pc, r3]
 800efe2:	372a      	.short	0x372a
 800efe4:	5535      	.short	0x5535
 800efe6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800efea:	441e      	add	r6, r3
 800efec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800eff0:	2b20      	cmp	r3, #32
 800eff2:	bfc1      	itttt	gt
 800eff4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800eff8:	409f      	lslgt	r7, r3
 800effa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800effe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f002:	bfd6      	itet	le
 800f004:	f1c3 0320 	rsble	r3, r3, #32
 800f008:	ea47 0003 	orrgt.w	r0, r7, r3
 800f00c:	fa04 f003 	lslle.w	r0, r4, r3
 800f010:	f7f1 fa80 	bl	8000514 <__aeabi_ui2d>
 800f014:	2201      	movs	r2, #1
 800f016:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f01a:	3e01      	subs	r6, #1
 800f01c:	9214      	str	r2, [sp, #80]	@ 0x50
 800f01e:	e777      	b.n	800ef10 <_dtoa_r+0x100>
 800f020:	2301      	movs	r3, #1
 800f022:	e7b8      	b.n	800ef96 <_dtoa_r+0x186>
 800f024:	9012      	str	r0, [sp, #72]	@ 0x48
 800f026:	e7b7      	b.n	800ef98 <_dtoa_r+0x188>
 800f028:	427b      	negs	r3, r7
 800f02a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f02c:	2300      	movs	r3, #0
 800f02e:	eba8 0807 	sub.w	r8, r8, r7
 800f032:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f034:	e7c4      	b.n	800efc0 <_dtoa_r+0x1b0>
 800f036:	2300      	movs	r3, #0
 800f038:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f03a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	dc35      	bgt.n	800f0ac <_dtoa_r+0x29c>
 800f040:	2301      	movs	r3, #1
 800f042:	9300      	str	r3, [sp, #0]
 800f044:	9307      	str	r3, [sp, #28]
 800f046:	461a      	mov	r2, r3
 800f048:	920e      	str	r2, [sp, #56]	@ 0x38
 800f04a:	e00b      	b.n	800f064 <_dtoa_r+0x254>
 800f04c:	2301      	movs	r3, #1
 800f04e:	e7f3      	b.n	800f038 <_dtoa_r+0x228>
 800f050:	2300      	movs	r3, #0
 800f052:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f054:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f056:	18fb      	adds	r3, r7, r3
 800f058:	9300      	str	r3, [sp, #0]
 800f05a:	3301      	adds	r3, #1
 800f05c:	2b01      	cmp	r3, #1
 800f05e:	9307      	str	r3, [sp, #28]
 800f060:	bfb8      	it	lt
 800f062:	2301      	movlt	r3, #1
 800f064:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f068:	2100      	movs	r1, #0
 800f06a:	2204      	movs	r2, #4
 800f06c:	f102 0514 	add.w	r5, r2, #20
 800f070:	429d      	cmp	r5, r3
 800f072:	d91f      	bls.n	800f0b4 <_dtoa_r+0x2a4>
 800f074:	6041      	str	r1, [r0, #4]
 800f076:	4658      	mov	r0, fp
 800f078:	f000 fd8e 	bl	800fb98 <_Balloc>
 800f07c:	4682      	mov	sl, r0
 800f07e:	2800      	cmp	r0, #0
 800f080:	d13c      	bne.n	800f0fc <_dtoa_r+0x2ec>
 800f082:	4b1b      	ldr	r3, [pc, #108]	@ (800f0f0 <_dtoa_r+0x2e0>)
 800f084:	4602      	mov	r2, r0
 800f086:	f240 11af 	movw	r1, #431	@ 0x1af
 800f08a:	e6d8      	b.n	800ee3e <_dtoa_r+0x2e>
 800f08c:	2301      	movs	r3, #1
 800f08e:	e7e0      	b.n	800f052 <_dtoa_r+0x242>
 800f090:	2401      	movs	r4, #1
 800f092:	2300      	movs	r3, #0
 800f094:	9309      	str	r3, [sp, #36]	@ 0x24
 800f096:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f098:	f04f 33ff 	mov.w	r3, #4294967295
 800f09c:	9300      	str	r3, [sp, #0]
 800f09e:	9307      	str	r3, [sp, #28]
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	2312      	movs	r3, #18
 800f0a4:	e7d0      	b.n	800f048 <_dtoa_r+0x238>
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f0aa:	e7f5      	b.n	800f098 <_dtoa_r+0x288>
 800f0ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f0ae:	9300      	str	r3, [sp, #0]
 800f0b0:	9307      	str	r3, [sp, #28]
 800f0b2:	e7d7      	b.n	800f064 <_dtoa_r+0x254>
 800f0b4:	3101      	adds	r1, #1
 800f0b6:	0052      	lsls	r2, r2, #1
 800f0b8:	e7d8      	b.n	800f06c <_dtoa_r+0x25c>
 800f0ba:	bf00      	nop
 800f0bc:	f3af 8000 	nop.w
 800f0c0:	636f4361 	.word	0x636f4361
 800f0c4:	3fd287a7 	.word	0x3fd287a7
 800f0c8:	8b60c8b3 	.word	0x8b60c8b3
 800f0cc:	3fc68a28 	.word	0x3fc68a28
 800f0d0:	509f79fb 	.word	0x509f79fb
 800f0d4:	3fd34413 	.word	0x3fd34413
 800f0d8:	08013f64 	.word	0x08013f64
 800f0dc:	08013f7b 	.word	0x08013f7b
 800f0e0:	7ff00000 	.word	0x7ff00000
 800f0e4:	080142c1 	.word	0x080142c1
 800f0e8:	3ff80000 	.word	0x3ff80000
 800f0ec:	08014078 	.word	0x08014078
 800f0f0:	08013fd3 	.word	0x08013fd3
 800f0f4:	08013f60 	.word	0x08013f60
 800f0f8:	080142c0 	.word	0x080142c0
 800f0fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f100:	6018      	str	r0, [r3, #0]
 800f102:	9b07      	ldr	r3, [sp, #28]
 800f104:	2b0e      	cmp	r3, #14
 800f106:	f200 80a4 	bhi.w	800f252 <_dtoa_r+0x442>
 800f10a:	2c00      	cmp	r4, #0
 800f10c:	f000 80a1 	beq.w	800f252 <_dtoa_r+0x442>
 800f110:	2f00      	cmp	r7, #0
 800f112:	dd33      	ble.n	800f17c <_dtoa_r+0x36c>
 800f114:	4bad      	ldr	r3, [pc, #692]	@ (800f3cc <_dtoa_r+0x5bc>)
 800f116:	f007 020f 	and.w	r2, r7, #15
 800f11a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f11e:	ed93 7b00 	vldr	d7, [r3]
 800f122:	05f8      	lsls	r0, r7, #23
 800f124:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f128:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f12c:	d516      	bpl.n	800f15c <_dtoa_r+0x34c>
 800f12e:	4ba8      	ldr	r3, [pc, #672]	@ (800f3d0 <_dtoa_r+0x5c0>)
 800f130:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f134:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f138:	f7f1 fb90 	bl	800085c <__aeabi_ddiv>
 800f13c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f140:	f004 040f 	and.w	r4, r4, #15
 800f144:	2603      	movs	r6, #3
 800f146:	4da2      	ldr	r5, [pc, #648]	@ (800f3d0 <_dtoa_r+0x5c0>)
 800f148:	b954      	cbnz	r4, 800f160 <_dtoa_r+0x350>
 800f14a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f14e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f152:	f7f1 fb83 	bl	800085c <__aeabi_ddiv>
 800f156:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f15a:	e028      	b.n	800f1ae <_dtoa_r+0x39e>
 800f15c:	2602      	movs	r6, #2
 800f15e:	e7f2      	b.n	800f146 <_dtoa_r+0x336>
 800f160:	07e1      	lsls	r1, r4, #31
 800f162:	d508      	bpl.n	800f176 <_dtoa_r+0x366>
 800f164:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f168:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f16c:	f7f1 fa4c 	bl	8000608 <__aeabi_dmul>
 800f170:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f174:	3601      	adds	r6, #1
 800f176:	1064      	asrs	r4, r4, #1
 800f178:	3508      	adds	r5, #8
 800f17a:	e7e5      	b.n	800f148 <_dtoa_r+0x338>
 800f17c:	f000 80d2 	beq.w	800f324 <_dtoa_r+0x514>
 800f180:	427c      	negs	r4, r7
 800f182:	4b92      	ldr	r3, [pc, #584]	@ (800f3cc <_dtoa_r+0x5bc>)
 800f184:	4d92      	ldr	r5, [pc, #584]	@ (800f3d0 <_dtoa_r+0x5c0>)
 800f186:	f004 020f 	and.w	r2, r4, #15
 800f18a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f192:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f196:	f7f1 fa37 	bl	8000608 <__aeabi_dmul>
 800f19a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f19e:	1124      	asrs	r4, r4, #4
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	2602      	movs	r6, #2
 800f1a4:	2c00      	cmp	r4, #0
 800f1a6:	f040 80b2 	bne.w	800f30e <_dtoa_r+0x4fe>
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d1d3      	bne.n	800f156 <_dtoa_r+0x346>
 800f1ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f1b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	f000 80b7 	beq.w	800f328 <_dtoa_r+0x518>
 800f1ba:	4b86      	ldr	r3, [pc, #536]	@ (800f3d4 <_dtoa_r+0x5c4>)
 800f1bc:	2200      	movs	r2, #0
 800f1be:	4620      	mov	r0, r4
 800f1c0:	4629      	mov	r1, r5
 800f1c2:	f7f1 fc93 	bl	8000aec <__aeabi_dcmplt>
 800f1c6:	2800      	cmp	r0, #0
 800f1c8:	f000 80ae 	beq.w	800f328 <_dtoa_r+0x518>
 800f1cc:	9b07      	ldr	r3, [sp, #28]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	f000 80aa 	beq.w	800f328 <_dtoa_r+0x518>
 800f1d4:	9b00      	ldr	r3, [sp, #0]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	dd37      	ble.n	800f24a <_dtoa_r+0x43a>
 800f1da:	1e7b      	subs	r3, r7, #1
 800f1dc:	9304      	str	r3, [sp, #16]
 800f1de:	4620      	mov	r0, r4
 800f1e0:	4b7d      	ldr	r3, [pc, #500]	@ (800f3d8 <_dtoa_r+0x5c8>)
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	4629      	mov	r1, r5
 800f1e6:	f7f1 fa0f 	bl	8000608 <__aeabi_dmul>
 800f1ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f1ee:	9c00      	ldr	r4, [sp, #0]
 800f1f0:	3601      	adds	r6, #1
 800f1f2:	4630      	mov	r0, r6
 800f1f4:	f7f1 f99e 	bl	8000534 <__aeabi_i2d>
 800f1f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f1fc:	f7f1 fa04 	bl	8000608 <__aeabi_dmul>
 800f200:	4b76      	ldr	r3, [pc, #472]	@ (800f3dc <_dtoa_r+0x5cc>)
 800f202:	2200      	movs	r2, #0
 800f204:	f7f1 f84a 	bl	800029c <__adddf3>
 800f208:	4605      	mov	r5, r0
 800f20a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f20e:	2c00      	cmp	r4, #0
 800f210:	f040 808d 	bne.w	800f32e <_dtoa_r+0x51e>
 800f214:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f218:	4b71      	ldr	r3, [pc, #452]	@ (800f3e0 <_dtoa_r+0x5d0>)
 800f21a:	2200      	movs	r2, #0
 800f21c:	f7f1 f83c 	bl	8000298 <__aeabi_dsub>
 800f220:	4602      	mov	r2, r0
 800f222:	460b      	mov	r3, r1
 800f224:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f228:	462a      	mov	r2, r5
 800f22a:	4633      	mov	r3, r6
 800f22c:	f7f1 fc7c 	bl	8000b28 <__aeabi_dcmpgt>
 800f230:	2800      	cmp	r0, #0
 800f232:	f040 828b 	bne.w	800f74c <_dtoa_r+0x93c>
 800f236:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f23a:	462a      	mov	r2, r5
 800f23c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f240:	f7f1 fc54 	bl	8000aec <__aeabi_dcmplt>
 800f244:	2800      	cmp	r0, #0
 800f246:	f040 8128 	bne.w	800f49a <_dtoa_r+0x68a>
 800f24a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f24e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f252:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f254:	2b00      	cmp	r3, #0
 800f256:	f2c0 815a 	blt.w	800f50e <_dtoa_r+0x6fe>
 800f25a:	2f0e      	cmp	r7, #14
 800f25c:	f300 8157 	bgt.w	800f50e <_dtoa_r+0x6fe>
 800f260:	4b5a      	ldr	r3, [pc, #360]	@ (800f3cc <_dtoa_r+0x5bc>)
 800f262:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f266:	ed93 7b00 	vldr	d7, [r3]
 800f26a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	ed8d 7b00 	vstr	d7, [sp]
 800f272:	da03      	bge.n	800f27c <_dtoa_r+0x46c>
 800f274:	9b07      	ldr	r3, [sp, #28]
 800f276:	2b00      	cmp	r3, #0
 800f278:	f340 8101 	ble.w	800f47e <_dtoa_r+0x66e>
 800f27c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f280:	4656      	mov	r6, sl
 800f282:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f286:	4620      	mov	r0, r4
 800f288:	4629      	mov	r1, r5
 800f28a:	f7f1 fae7 	bl	800085c <__aeabi_ddiv>
 800f28e:	f7f1 fc6b 	bl	8000b68 <__aeabi_d2iz>
 800f292:	4680      	mov	r8, r0
 800f294:	f7f1 f94e 	bl	8000534 <__aeabi_i2d>
 800f298:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f29c:	f7f1 f9b4 	bl	8000608 <__aeabi_dmul>
 800f2a0:	4602      	mov	r2, r0
 800f2a2:	460b      	mov	r3, r1
 800f2a4:	4620      	mov	r0, r4
 800f2a6:	4629      	mov	r1, r5
 800f2a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f2ac:	f7f0 fff4 	bl	8000298 <__aeabi_dsub>
 800f2b0:	f806 4b01 	strb.w	r4, [r6], #1
 800f2b4:	9d07      	ldr	r5, [sp, #28]
 800f2b6:	eba6 040a 	sub.w	r4, r6, sl
 800f2ba:	42a5      	cmp	r5, r4
 800f2bc:	4602      	mov	r2, r0
 800f2be:	460b      	mov	r3, r1
 800f2c0:	f040 8117 	bne.w	800f4f2 <_dtoa_r+0x6e2>
 800f2c4:	f7f0 ffea 	bl	800029c <__adddf3>
 800f2c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f2cc:	4604      	mov	r4, r0
 800f2ce:	460d      	mov	r5, r1
 800f2d0:	f7f1 fc2a 	bl	8000b28 <__aeabi_dcmpgt>
 800f2d4:	2800      	cmp	r0, #0
 800f2d6:	f040 80f9 	bne.w	800f4cc <_dtoa_r+0x6bc>
 800f2da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f2de:	4620      	mov	r0, r4
 800f2e0:	4629      	mov	r1, r5
 800f2e2:	f7f1 fbf9 	bl	8000ad8 <__aeabi_dcmpeq>
 800f2e6:	b118      	cbz	r0, 800f2f0 <_dtoa_r+0x4e0>
 800f2e8:	f018 0f01 	tst.w	r8, #1
 800f2ec:	f040 80ee 	bne.w	800f4cc <_dtoa_r+0x6bc>
 800f2f0:	4649      	mov	r1, r9
 800f2f2:	4658      	mov	r0, fp
 800f2f4:	f000 fc90 	bl	800fc18 <_Bfree>
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	7033      	strb	r3, [r6, #0]
 800f2fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f2fe:	3701      	adds	r7, #1
 800f300:	601f      	str	r7, [r3, #0]
 800f302:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f304:	2b00      	cmp	r3, #0
 800f306:	f000 831d 	beq.w	800f944 <_dtoa_r+0xb34>
 800f30a:	601e      	str	r6, [r3, #0]
 800f30c:	e31a      	b.n	800f944 <_dtoa_r+0xb34>
 800f30e:	07e2      	lsls	r2, r4, #31
 800f310:	d505      	bpl.n	800f31e <_dtoa_r+0x50e>
 800f312:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f316:	f7f1 f977 	bl	8000608 <__aeabi_dmul>
 800f31a:	3601      	adds	r6, #1
 800f31c:	2301      	movs	r3, #1
 800f31e:	1064      	asrs	r4, r4, #1
 800f320:	3508      	adds	r5, #8
 800f322:	e73f      	b.n	800f1a4 <_dtoa_r+0x394>
 800f324:	2602      	movs	r6, #2
 800f326:	e742      	b.n	800f1ae <_dtoa_r+0x39e>
 800f328:	9c07      	ldr	r4, [sp, #28]
 800f32a:	9704      	str	r7, [sp, #16]
 800f32c:	e761      	b.n	800f1f2 <_dtoa_r+0x3e2>
 800f32e:	4b27      	ldr	r3, [pc, #156]	@ (800f3cc <_dtoa_r+0x5bc>)
 800f330:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f332:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f336:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f33a:	4454      	add	r4, sl
 800f33c:	2900      	cmp	r1, #0
 800f33e:	d053      	beq.n	800f3e8 <_dtoa_r+0x5d8>
 800f340:	4928      	ldr	r1, [pc, #160]	@ (800f3e4 <_dtoa_r+0x5d4>)
 800f342:	2000      	movs	r0, #0
 800f344:	f7f1 fa8a 	bl	800085c <__aeabi_ddiv>
 800f348:	4633      	mov	r3, r6
 800f34a:	462a      	mov	r2, r5
 800f34c:	f7f0 ffa4 	bl	8000298 <__aeabi_dsub>
 800f350:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f354:	4656      	mov	r6, sl
 800f356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f35a:	f7f1 fc05 	bl	8000b68 <__aeabi_d2iz>
 800f35e:	4605      	mov	r5, r0
 800f360:	f7f1 f8e8 	bl	8000534 <__aeabi_i2d>
 800f364:	4602      	mov	r2, r0
 800f366:	460b      	mov	r3, r1
 800f368:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f36c:	f7f0 ff94 	bl	8000298 <__aeabi_dsub>
 800f370:	3530      	adds	r5, #48	@ 0x30
 800f372:	4602      	mov	r2, r0
 800f374:	460b      	mov	r3, r1
 800f376:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f37a:	f806 5b01 	strb.w	r5, [r6], #1
 800f37e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f382:	f7f1 fbb3 	bl	8000aec <__aeabi_dcmplt>
 800f386:	2800      	cmp	r0, #0
 800f388:	d171      	bne.n	800f46e <_dtoa_r+0x65e>
 800f38a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f38e:	4911      	ldr	r1, [pc, #68]	@ (800f3d4 <_dtoa_r+0x5c4>)
 800f390:	2000      	movs	r0, #0
 800f392:	f7f0 ff81 	bl	8000298 <__aeabi_dsub>
 800f396:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f39a:	f7f1 fba7 	bl	8000aec <__aeabi_dcmplt>
 800f39e:	2800      	cmp	r0, #0
 800f3a0:	f040 8095 	bne.w	800f4ce <_dtoa_r+0x6be>
 800f3a4:	42a6      	cmp	r6, r4
 800f3a6:	f43f af50 	beq.w	800f24a <_dtoa_r+0x43a>
 800f3aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f3ae:	4b0a      	ldr	r3, [pc, #40]	@ (800f3d8 <_dtoa_r+0x5c8>)
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	f7f1 f929 	bl	8000608 <__aeabi_dmul>
 800f3b6:	4b08      	ldr	r3, [pc, #32]	@ (800f3d8 <_dtoa_r+0x5c8>)
 800f3b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f3bc:	2200      	movs	r2, #0
 800f3be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f3c2:	f7f1 f921 	bl	8000608 <__aeabi_dmul>
 800f3c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3ca:	e7c4      	b.n	800f356 <_dtoa_r+0x546>
 800f3cc:	08014078 	.word	0x08014078
 800f3d0:	08014050 	.word	0x08014050
 800f3d4:	3ff00000 	.word	0x3ff00000
 800f3d8:	40240000 	.word	0x40240000
 800f3dc:	401c0000 	.word	0x401c0000
 800f3e0:	40140000 	.word	0x40140000
 800f3e4:	3fe00000 	.word	0x3fe00000
 800f3e8:	4631      	mov	r1, r6
 800f3ea:	4628      	mov	r0, r5
 800f3ec:	f7f1 f90c 	bl	8000608 <__aeabi_dmul>
 800f3f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f3f4:	9415      	str	r4, [sp, #84]	@ 0x54
 800f3f6:	4656      	mov	r6, sl
 800f3f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f3fc:	f7f1 fbb4 	bl	8000b68 <__aeabi_d2iz>
 800f400:	4605      	mov	r5, r0
 800f402:	f7f1 f897 	bl	8000534 <__aeabi_i2d>
 800f406:	4602      	mov	r2, r0
 800f408:	460b      	mov	r3, r1
 800f40a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f40e:	f7f0 ff43 	bl	8000298 <__aeabi_dsub>
 800f412:	3530      	adds	r5, #48	@ 0x30
 800f414:	f806 5b01 	strb.w	r5, [r6], #1
 800f418:	4602      	mov	r2, r0
 800f41a:	460b      	mov	r3, r1
 800f41c:	42a6      	cmp	r6, r4
 800f41e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f422:	f04f 0200 	mov.w	r2, #0
 800f426:	d124      	bne.n	800f472 <_dtoa_r+0x662>
 800f428:	4bac      	ldr	r3, [pc, #688]	@ (800f6dc <_dtoa_r+0x8cc>)
 800f42a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f42e:	f7f0 ff35 	bl	800029c <__adddf3>
 800f432:	4602      	mov	r2, r0
 800f434:	460b      	mov	r3, r1
 800f436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f43a:	f7f1 fb75 	bl	8000b28 <__aeabi_dcmpgt>
 800f43e:	2800      	cmp	r0, #0
 800f440:	d145      	bne.n	800f4ce <_dtoa_r+0x6be>
 800f442:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f446:	49a5      	ldr	r1, [pc, #660]	@ (800f6dc <_dtoa_r+0x8cc>)
 800f448:	2000      	movs	r0, #0
 800f44a:	f7f0 ff25 	bl	8000298 <__aeabi_dsub>
 800f44e:	4602      	mov	r2, r0
 800f450:	460b      	mov	r3, r1
 800f452:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f456:	f7f1 fb49 	bl	8000aec <__aeabi_dcmplt>
 800f45a:	2800      	cmp	r0, #0
 800f45c:	f43f aef5 	beq.w	800f24a <_dtoa_r+0x43a>
 800f460:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f462:	1e73      	subs	r3, r6, #1
 800f464:	9315      	str	r3, [sp, #84]	@ 0x54
 800f466:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f46a:	2b30      	cmp	r3, #48	@ 0x30
 800f46c:	d0f8      	beq.n	800f460 <_dtoa_r+0x650>
 800f46e:	9f04      	ldr	r7, [sp, #16]
 800f470:	e73e      	b.n	800f2f0 <_dtoa_r+0x4e0>
 800f472:	4b9b      	ldr	r3, [pc, #620]	@ (800f6e0 <_dtoa_r+0x8d0>)
 800f474:	f7f1 f8c8 	bl	8000608 <__aeabi_dmul>
 800f478:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f47c:	e7bc      	b.n	800f3f8 <_dtoa_r+0x5e8>
 800f47e:	d10c      	bne.n	800f49a <_dtoa_r+0x68a>
 800f480:	4b98      	ldr	r3, [pc, #608]	@ (800f6e4 <_dtoa_r+0x8d4>)
 800f482:	2200      	movs	r2, #0
 800f484:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f488:	f7f1 f8be 	bl	8000608 <__aeabi_dmul>
 800f48c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f490:	f7f1 fb40 	bl	8000b14 <__aeabi_dcmpge>
 800f494:	2800      	cmp	r0, #0
 800f496:	f000 8157 	beq.w	800f748 <_dtoa_r+0x938>
 800f49a:	2400      	movs	r4, #0
 800f49c:	4625      	mov	r5, r4
 800f49e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f4a0:	43db      	mvns	r3, r3
 800f4a2:	9304      	str	r3, [sp, #16]
 800f4a4:	4656      	mov	r6, sl
 800f4a6:	2700      	movs	r7, #0
 800f4a8:	4621      	mov	r1, r4
 800f4aa:	4658      	mov	r0, fp
 800f4ac:	f000 fbb4 	bl	800fc18 <_Bfree>
 800f4b0:	2d00      	cmp	r5, #0
 800f4b2:	d0dc      	beq.n	800f46e <_dtoa_r+0x65e>
 800f4b4:	b12f      	cbz	r7, 800f4c2 <_dtoa_r+0x6b2>
 800f4b6:	42af      	cmp	r7, r5
 800f4b8:	d003      	beq.n	800f4c2 <_dtoa_r+0x6b2>
 800f4ba:	4639      	mov	r1, r7
 800f4bc:	4658      	mov	r0, fp
 800f4be:	f000 fbab 	bl	800fc18 <_Bfree>
 800f4c2:	4629      	mov	r1, r5
 800f4c4:	4658      	mov	r0, fp
 800f4c6:	f000 fba7 	bl	800fc18 <_Bfree>
 800f4ca:	e7d0      	b.n	800f46e <_dtoa_r+0x65e>
 800f4cc:	9704      	str	r7, [sp, #16]
 800f4ce:	4633      	mov	r3, r6
 800f4d0:	461e      	mov	r6, r3
 800f4d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f4d6:	2a39      	cmp	r2, #57	@ 0x39
 800f4d8:	d107      	bne.n	800f4ea <_dtoa_r+0x6da>
 800f4da:	459a      	cmp	sl, r3
 800f4dc:	d1f8      	bne.n	800f4d0 <_dtoa_r+0x6c0>
 800f4de:	9a04      	ldr	r2, [sp, #16]
 800f4e0:	3201      	adds	r2, #1
 800f4e2:	9204      	str	r2, [sp, #16]
 800f4e4:	2230      	movs	r2, #48	@ 0x30
 800f4e6:	f88a 2000 	strb.w	r2, [sl]
 800f4ea:	781a      	ldrb	r2, [r3, #0]
 800f4ec:	3201      	adds	r2, #1
 800f4ee:	701a      	strb	r2, [r3, #0]
 800f4f0:	e7bd      	b.n	800f46e <_dtoa_r+0x65e>
 800f4f2:	4b7b      	ldr	r3, [pc, #492]	@ (800f6e0 <_dtoa_r+0x8d0>)
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	f7f1 f887 	bl	8000608 <__aeabi_dmul>
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	4604      	mov	r4, r0
 800f500:	460d      	mov	r5, r1
 800f502:	f7f1 fae9 	bl	8000ad8 <__aeabi_dcmpeq>
 800f506:	2800      	cmp	r0, #0
 800f508:	f43f aebb 	beq.w	800f282 <_dtoa_r+0x472>
 800f50c:	e6f0      	b.n	800f2f0 <_dtoa_r+0x4e0>
 800f50e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f510:	2a00      	cmp	r2, #0
 800f512:	f000 80db 	beq.w	800f6cc <_dtoa_r+0x8bc>
 800f516:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f518:	2a01      	cmp	r2, #1
 800f51a:	f300 80bf 	bgt.w	800f69c <_dtoa_r+0x88c>
 800f51e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f520:	2a00      	cmp	r2, #0
 800f522:	f000 80b7 	beq.w	800f694 <_dtoa_r+0x884>
 800f526:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f52a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f52c:	4646      	mov	r6, r8
 800f52e:	9a08      	ldr	r2, [sp, #32]
 800f530:	2101      	movs	r1, #1
 800f532:	441a      	add	r2, r3
 800f534:	4658      	mov	r0, fp
 800f536:	4498      	add	r8, r3
 800f538:	9208      	str	r2, [sp, #32]
 800f53a:	f000 fc6b 	bl	800fe14 <__i2b>
 800f53e:	4605      	mov	r5, r0
 800f540:	b15e      	cbz	r6, 800f55a <_dtoa_r+0x74a>
 800f542:	9b08      	ldr	r3, [sp, #32]
 800f544:	2b00      	cmp	r3, #0
 800f546:	dd08      	ble.n	800f55a <_dtoa_r+0x74a>
 800f548:	42b3      	cmp	r3, r6
 800f54a:	9a08      	ldr	r2, [sp, #32]
 800f54c:	bfa8      	it	ge
 800f54e:	4633      	movge	r3, r6
 800f550:	eba8 0803 	sub.w	r8, r8, r3
 800f554:	1af6      	subs	r6, r6, r3
 800f556:	1ad3      	subs	r3, r2, r3
 800f558:	9308      	str	r3, [sp, #32]
 800f55a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f55c:	b1f3      	cbz	r3, 800f59c <_dtoa_r+0x78c>
 800f55e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f560:	2b00      	cmp	r3, #0
 800f562:	f000 80b7 	beq.w	800f6d4 <_dtoa_r+0x8c4>
 800f566:	b18c      	cbz	r4, 800f58c <_dtoa_r+0x77c>
 800f568:	4629      	mov	r1, r5
 800f56a:	4622      	mov	r2, r4
 800f56c:	4658      	mov	r0, fp
 800f56e:	f000 fd11 	bl	800ff94 <__pow5mult>
 800f572:	464a      	mov	r2, r9
 800f574:	4601      	mov	r1, r0
 800f576:	4605      	mov	r5, r0
 800f578:	4658      	mov	r0, fp
 800f57a:	f000 fc61 	bl	800fe40 <__multiply>
 800f57e:	4649      	mov	r1, r9
 800f580:	9004      	str	r0, [sp, #16]
 800f582:	4658      	mov	r0, fp
 800f584:	f000 fb48 	bl	800fc18 <_Bfree>
 800f588:	9b04      	ldr	r3, [sp, #16]
 800f58a:	4699      	mov	r9, r3
 800f58c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f58e:	1b1a      	subs	r2, r3, r4
 800f590:	d004      	beq.n	800f59c <_dtoa_r+0x78c>
 800f592:	4649      	mov	r1, r9
 800f594:	4658      	mov	r0, fp
 800f596:	f000 fcfd 	bl	800ff94 <__pow5mult>
 800f59a:	4681      	mov	r9, r0
 800f59c:	2101      	movs	r1, #1
 800f59e:	4658      	mov	r0, fp
 800f5a0:	f000 fc38 	bl	800fe14 <__i2b>
 800f5a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f5a6:	4604      	mov	r4, r0
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	f000 81cf 	beq.w	800f94c <_dtoa_r+0xb3c>
 800f5ae:	461a      	mov	r2, r3
 800f5b0:	4601      	mov	r1, r0
 800f5b2:	4658      	mov	r0, fp
 800f5b4:	f000 fcee 	bl	800ff94 <__pow5mult>
 800f5b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5ba:	2b01      	cmp	r3, #1
 800f5bc:	4604      	mov	r4, r0
 800f5be:	f300 8095 	bgt.w	800f6ec <_dtoa_r+0x8dc>
 800f5c2:	9b02      	ldr	r3, [sp, #8]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	f040 8087 	bne.w	800f6d8 <_dtoa_r+0x8c8>
 800f5ca:	9b03      	ldr	r3, [sp, #12]
 800f5cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	f040 8089 	bne.w	800f6e8 <_dtoa_r+0x8d8>
 800f5d6:	9b03      	ldr	r3, [sp, #12]
 800f5d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f5dc:	0d1b      	lsrs	r3, r3, #20
 800f5de:	051b      	lsls	r3, r3, #20
 800f5e0:	b12b      	cbz	r3, 800f5ee <_dtoa_r+0x7de>
 800f5e2:	9b08      	ldr	r3, [sp, #32]
 800f5e4:	3301      	adds	r3, #1
 800f5e6:	9308      	str	r3, [sp, #32]
 800f5e8:	f108 0801 	add.w	r8, r8, #1
 800f5ec:	2301      	movs	r3, #1
 800f5ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800f5f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	f000 81b0 	beq.w	800f958 <_dtoa_r+0xb48>
 800f5f8:	6923      	ldr	r3, [r4, #16]
 800f5fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f5fe:	6918      	ldr	r0, [r3, #16]
 800f600:	f000 fbbc 	bl	800fd7c <__hi0bits>
 800f604:	f1c0 0020 	rsb	r0, r0, #32
 800f608:	9b08      	ldr	r3, [sp, #32]
 800f60a:	4418      	add	r0, r3
 800f60c:	f010 001f 	ands.w	r0, r0, #31
 800f610:	d077      	beq.n	800f702 <_dtoa_r+0x8f2>
 800f612:	f1c0 0320 	rsb	r3, r0, #32
 800f616:	2b04      	cmp	r3, #4
 800f618:	dd6b      	ble.n	800f6f2 <_dtoa_r+0x8e2>
 800f61a:	9b08      	ldr	r3, [sp, #32]
 800f61c:	f1c0 001c 	rsb	r0, r0, #28
 800f620:	4403      	add	r3, r0
 800f622:	4480      	add	r8, r0
 800f624:	4406      	add	r6, r0
 800f626:	9308      	str	r3, [sp, #32]
 800f628:	f1b8 0f00 	cmp.w	r8, #0
 800f62c:	dd05      	ble.n	800f63a <_dtoa_r+0x82a>
 800f62e:	4649      	mov	r1, r9
 800f630:	4642      	mov	r2, r8
 800f632:	4658      	mov	r0, fp
 800f634:	f000 fd08 	bl	8010048 <__lshift>
 800f638:	4681      	mov	r9, r0
 800f63a:	9b08      	ldr	r3, [sp, #32]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	dd05      	ble.n	800f64c <_dtoa_r+0x83c>
 800f640:	4621      	mov	r1, r4
 800f642:	461a      	mov	r2, r3
 800f644:	4658      	mov	r0, fp
 800f646:	f000 fcff 	bl	8010048 <__lshift>
 800f64a:	4604      	mov	r4, r0
 800f64c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d059      	beq.n	800f706 <_dtoa_r+0x8f6>
 800f652:	4621      	mov	r1, r4
 800f654:	4648      	mov	r0, r9
 800f656:	f000 fd63 	bl	8010120 <__mcmp>
 800f65a:	2800      	cmp	r0, #0
 800f65c:	da53      	bge.n	800f706 <_dtoa_r+0x8f6>
 800f65e:	1e7b      	subs	r3, r7, #1
 800f660:	9304      	str	r3, [sp, #16]
 800f662:	4649      	mov	r1, r9
 800f664:	2300      	movs	r3, #0
 800f666:	220a      	movs	r2, #10
 800f668:	4658      	mov	r0, fp
 800f66a:	f000 faf7 	bl	800fc5c <__multadd>
 800f66e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f670:	4681      	mov	r9, r0
 800f672:	2b00      	cmp	r3, #0
 800f674:	f000 8172 	beq.w	800f95c <_dtoa_r+0xb4c>
 800f678:	2300      	movs	r3, #0
 800f67a:	4629      	mov	r1, r5
 800f67c:	220a      	movs	r2, #10
 800f67e:	4658      	mov	r0, fp
 800f680:	f000 faec 	bl	800fc5c <__multadd>
 800f684:	9b00      	ldr	r3, [sp, #0]
 800f686:	2b00      	cmp	r3, #0
 800f688:	4605      	mov	r5, r0
 800f68a:	dc67      	bgt.n	800f75c <_dtoa_r+0x94c>
 800f68c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f68e:	2b02      	cmp	r3, #2
 800f690:	dc41      	bgt.n	800f716 <_dtoa_r+0x906>
 800f692:	e063      	b.n	800f75c <_dtoa_r+0x94c>
 800f694:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f696:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f69a:	e746      	b.n	800f52a <_dtoa_r+0x71a>
 800f69c:	9b07      	ldr	r3, [sp, #28]
 800f69e:	1e5c      	subs	r4, r3, #1
 800f6a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f6a2:	42a3      	cmp	r3, r4
 800f6a4:	bfbf      	itttt	lt
 800f6a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f6a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f6aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f6ac:	1ae3      	sublt	r3, r4, r3
 800f6ae:	bfb4      	ite	lt
 800f6b0:	18d2      	addlt	r2, r2, r3
 800f6b2:	1b1c      	subge	r4, r3, r4
 800f6b4:	9b07      	ldr	r3, [sp, #28]
 800f6b6:	bfbc      	itt	lt
 800f6b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f6ba:	2400      	movlt	r4, #0
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	bfb5      	itete	lt
 800f6c0:	eba8 0603 	sublt.w	r6, r8, r3
 800f6c4:	9b07      	ldrge	r3, [sp, #28]
 800f6c6:	2300      	movlt	r3, #0
 800f6c8:	4646      	movge	r6, r8
 800f6ca:	e730      	b.n	800f52e <_dtoa_r+0x71e>
 800f6cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f6ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f6d0:	4646      	mov	r6, r8
 800f6d2:	e735      	b.n	800f540 <_dtoa_r+0x730>
 800f6d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f6d6:	e75c      	b.n	800f592 <_dtoa_r+0x782>
 800f6d8:	2300      	movs	r3, #0
 800f6da:	e788      	b.n	800f5ee <_dtoa_r+0x7de>
 800f6dc:	3fe00000 	.word	0x3fe00000
 800f6e0:	40240000 	.word	0x40240000
 800f6e4:	40140000 	.word	0x40140000
 800f6e8:	9b02      	ldr	r3, [sp, #8]
 800f6ea:	e780      	b.n	800f5ee <_dtoa_r+0x7de>
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800f6f0:	e782      	b.n	800f5f8 <_dtoa_r+0x7e8>
 800f6f2:	d099      	beq.n	800f628 <_dtoa_r+0x818>
 800f6f4:	9a08      	ldr	r2, [sp, #32]
 800f6f6:	331c      	adds	r3, #28
 800f6f8:	441a      	add	r2, r3
 800f6fa:	4498      	add	r8, r3
 800f6fc:	441e      	add	r6, r3
 800f6fe:	9208      	str	r2, [sp, #32]
 800f700:	e792      	b.n	800f628 <_dtoa_r+0x818>
 800f702:	4603      	mov	r3, r0
 800f704:	e7f6      	b.n	800f6f4 <_dtoa_r+0x8e4>
 800f706:	9b07      	ldr	r3, [sp, #28]
 800f708:	9704      	str	r7, [sp, #16]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	dc20      	bgt.n	800f750 <_dtoa_r+0x940>
 800f70e:	9300      	str	r3, [sp, #0]
 800f710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f712:	2b02      	cmp	r3, #2
 800f714:	dd1e      	ble.n	800f754 <_dtoa_r+0x944>
 800f716:	9b00      	ldr	r3, [sp, #0]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	f47f aec0 	bne.w	800f49e <_dtoa_r+0x68e>
 800f71e:	4621      	mov	r1, r4
 800f720:	2205      	movs	r2, #5
 800f722:	4658      	mov	r0, fp
 800f724:	f000 fa9a 	bl	800fc5c <__multadd>
 800f728:	4601      	mov	r1, r0
 800f72a:	4604      	mov	r4, r0
 800f72c:	4648      	mov	r0, r9
 800f72e:	f000 fcf7 	bl	8010120 <__mcmp>
 800f732:	2800      	cmp	r0, #0
 800f734:	f77f aeb3 	ble.w	800f49e <_dtoa_r+0x68e>
 800f738:	4656      	mov	r6, sl
 800f73a:	2331      	movs	r3, #49	@ 0x31
 800f73c:	f806 3b01 	strb.w	r3, [r6], #1
 800f740:	9b04      	ldr	r3, [sp, #16]
 800f742:	3301      	adds	r3, #1
 800f744:	9304      	str	r3, [sp, #16]
 800f746:	e6ae      	b.n	800f4a6 <_dtoa_r+0x696>
 800f748:	9c07      	ldr	r4, [sp, #28]
 800f74a:	9704      	str	r7, [sp, #16]
 800f74c:	4625      	mov	r5, r4
 800f74e:	e7f3      	b.n	800f738 <_dtoa_r+0x928>
 800f750:	9b07      	ldr	r3, [sp, #28]
 800f752:	9300      	str	r3, [sp, #0]
 800f754:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f756:	2b00      	cmp	r3, #0
 800f758:	f000 8104 	beq.w	800f964 <_dtoa_r+0xb54>
 800f75c:	2e00      	cmp	r6, #0
 800f75e:	dd05      	ble.n	800f76c <_dtoa_r+0x95c>
 800f760:	4629      	mov	r1, r5
 800f762:	4632      	mov	r2, r6
 800f764:	4658      	mov	r0, fp
 800f766:	f000 fc6f 	bl	8010048 <__lshift>
 800f76a:	4605      	mov	r5, r0
 800f76c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d05a      	beq.n	800f828 <_dtoa_r+0xa18>
 800f772:	6869      	ldr	r1, [r5, #4]
 800f774:	4658      	mov	r0, fp
 800f776:	f000 fa0f 	bl	800fb98 <_Balloc>
 800f77a:	4606      	mov	r6, r0
 800f77c:	b928      	cbnz	r0, 800f78a <_dtoa_r+0x97a>
 800f77e:	4b84      	ldr	r3, [pc, #528]	@ (800f990 <_dtoa_r+0xb80>)
 800f780:	4602      	mov	r2, r0
 800f782:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f786:	f7ff bb5a 	b.w	800ee3e <_dtoa_r+0x2e>
 800f78a:	692a      	ldr	r2, [r5, #16]
 800f78c:	3202      	adds	r2, #2
 800f78e:	0092      	lsls	r2, r2, #2
 800f790:	f105 010c 	add.w	r1, r5, #12
 800f794:	300c      	adds	r0, #12
 800f796:	f7ff fa9c 	bl	800ecd2 <memcpy>
 800f79a:	2201      	movs	r2, #1
 800f79c:	4631      	mov	r1, r6
 800f79e:	4658      	mov	r0, fp
 800f7a0:	f000 fc52 	bl	8010048 <__lshift>
 800f7a4:	f10a 0301 	add.w	r3, sl, #1
 800f7a8:	9307      	str	r3, [sp, #28]
 800f7aa:	9b00      	ldr	r3, [sp, #0]
 800f7ac:	4453      	add	r3, sl
 800f7ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f7b0:	9b02      	ldr	r3, [sp, #8]
 800f7b2:	f003 0301 	and.w	r3, r3, #1
 800f7b6:	462f      	mov	r7, r5
 800f7b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800f7ba:	4605      	mov	r5, r0
 800f7bc:	9b07      	ldr	r3, [sp, #28]
 800f7be:	4621      	mov	r1, r4
 800f7c0:	3b01      	subs	r3, #1
 800f7c2:	4648      	mov	r0, r9
 800f7c4:	9300      	str	r3, [sp, #0]
 800f7c6:	f7ff fa99 	bl	800ecfc <quorem>
 800f7ca:	4639      	mov	r1, r7
 800f7cc:	9002      	str	r0, [sp, #8]
 800f7ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f7d2:	4648      	mov	r0, r9
 800f7d4:	f000 fca4 	bl	8010120 <__mcmp>
 800f7d8:	462a      	mov	r2, r5
 800f7da:	9008      	str	r0, [sp, #32]
 800f7dc:	4621      	mov	r1, r4
 800f7de:	4658      	mov	r0, fp
 800f7e0:	f000 fcba 	bl	8010158 <__mdiff>
 800f7e4:	68c2      	ldr	r2, [r0, #12]
 800f7e6:	4606      	mov	r6, r0
 800f7e8:	bb02      	cbnz	r2, 800f82c <_dtoa_r+0xa1c>
 800f7ea:	4601      	mov	r1, r0
 800f7ec:	4648      	mov	r0, r9
 800f7ee:	f000 fc97 	bl	8010120 <__mcmp>
 800f7f2:	4602      	mov	r2, r0
 800f7f4:	4631      	mov	r1, r6
 800f7f6:	4658      	mov	r0, fp
 800f7f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800f7fa:	f000 fa0d 	bl	800fc18 <_Bfree>
 800f7fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f800:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f802:	9e07      	ldr	r6, [sp, #28]
 800f804:	ea43 0102 	orr.w	r1, r3, r2
 800f808:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f80a:	4319      	orrs	r1, r3
 800f80c:	d110      	bne.n	800f830 <_dtoa_r+0xa20>
 800f80e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f812:	d029      	beq.n	800f868 <_dtoa_r+0xa58>
 800f814:	9b08      	ldr	r3, [sp, #32]
 800f816:	2b00      	cmp	r3, #0
 800f818:	dd02      	ble.n	800f820 <_dtoa_r+0xa10>
 800f81a:	9b02      	ldr	r3, [sp, #8]
 800f81c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f820:	9b00      	ldr	r3, [sp, #0]
 800f822:	f883 8000 	strb.w	r8, [r3]
 800f826:	e63f      	b.n	800f4a8 <_dtoa_r+0x698>
 800f828:	4628      	mov	r0, r5
 800f82a:	e7bb      	b.n	800f7a4 <_dtoa_r+0x994>
 800f82c:	2201      	movs	r2, #1
 800f82e:	e7e1      	b.n	800f7f4 <_dtoa_r+0x9e4>
 800f830:	9b08      	ldr	r3, [sp, #32]
 800f832:	2b00      	cmp	r3, #0
 800f834:	db04      	blt.n	800f840 <_dtoa_r+0xa30>
 800f836:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f838:	430b      	orrs	r3, r1
 800f83a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f83c:	430b      	orrs	r3, r1
 800f83e:	d120      	bne.n	800f882 <_dtoa_r+0xa72>
 800f840:	2a00      	cmp	r2, #0
 800f842:	dded      	ble.n	800f820 <_dtoa_r+0xa10>
 800f844:	4649      	mov	r1, r9
 800f846:	2201      	movs	r2, #1
 800f848:	4658      	mov	r0, fp
 800f84a:	f000 fbfd 	bl	8010048 <__lshift>
 800f84e:	4621      	mov	r1, r4
 800f850:	4681      	mov	r9, r0
 800f852:	f000 fc65 	bl	8010120 <__mcmp>
 800f856:	2800      	cmp	r0, #0
 800f858:	dc03      	bgt.n	800f862 <_dtoa_r+0xa52>
 800f85a:	d1e1      	bne.n	800f820 <_dtoa_r+0xa10>
 800f85c:	f018 0f01 	tst.w	r8, #1
 800f860:	d0de      	beq.n	800f820 <_dtoa_r+0xa10>
 800f862:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f866:	d1d8      	bne.n	800f81a <_dtoa_r+0xa0a>
 800f868:	9a00      	ldr	r2, [sp, #0]
 800f86a:	2339      	movs	r3, #57	@ 0x39
 800f86c:	7013      	strb	r3, [r2, #0]
 800f86e:	4633      	mov	r3, r6
 800f870:	461e      	mov	r6, r3
 800f872:	3b01      	subs	r3, #1
 800f874:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f878:	2a39      	cmp	r2, #57	@ 0x39
 800f87a:	d052      	beq.n	800f922 <_dtoa_r+0xb12>
 800f87c:	3201      	adds	r2, #1
 800f87e:	701a      	strb	r2, [r3, #0]
 800f880:	e612      	b.n	800f4a8 <_dtoa_r+0x698>
 800f882:	2a00      	cmp	r2, #0
 800f884:	dd07      	ble.n	800f896 <_dtoa_r+0xa86>
 800f886:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f88a:	d0ed      	beq.n	800f868 <_dtoa_r+0xa58>
 800f88c:	9a00      	ldr	r2, [sp, #0]
 800f88e:	f108 0301 	add.w	r3, r8, #1
 800f892:	7013      	strb	r3, [r2, #0]
 800f894:	e608      	b.n	800f4a8 <_dtoa_r+0x698>
 800f896:	9b07      	ldr	r3, [sp, #28]
 800f898:	9a07      	ldr	r2, [sp, #28]
 800f89a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f89e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f8a0:	4293      	cmp	r3, r2
 800f8a2:	d028      	beq.n	800f8f6 <_dtoa_r+0xae6>
 800f8a4:	4649      	mov	r1, r9
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	220a      	movs	r2, #10
 800f8aa:	4658      	mov	r0, fp
 800f8ac:	f000 f9d6 	bl	800fc5c <__multadd>
 800f8b0:	42af      	cmp	r7, r5
 800f8b2:	4681      	mov	r9, r0
 800f8b4:	f04f 0300 	mov.w	r3, #0
 800f8b8:	f04f 020a 	mov.w	r2, #10
 800f8bc:	4639      	mov	r1, r7
 800f8be:	4658      	mov	r0, fp
 800f8c0:	d107      	bne.n	800f8d2 <_dtoa_r+0xac2>
 800f8c2:	f000 f9cb 	bl	800fc5c <__multadd>
 800f8c6:	4607      	mov	r7, r0
 800f8c8:	4605      	mov	r5, r0
 800f8ca:	9b07      	ldr	r3, [sp, #28]
 800f8cc:	3301      	adds	r3, #1
 800f8ce:	9307      	str	r3, [sp, #28]
 800f8d0:	e774      	b.n	800f7bc <_dtoa_r+0x9ac>
 800f8d2:	f000 f9c3 	bl	800fc5c <__multadd>
 800f8d6:	4629      	mov	r1, r5
 800f8d8:	4607      	mov	r7, r0
 800f8da:	2300      	movs	r3, #0
 800f8dc:	220a      	movs	r2, #10
 800f8de:	4658      	mov	r0, fp
 800f8e0:	f000 f9bc 	bl	800fc5c <__multadd>
 800f8e4:	4605      	mov	r5, r0
 800f8e6:	e7f0      	b.n	800f8ca <_dtoa_r+0xaba>
 800f8e8:	9b00      	ldr	r3, [sp, #0]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	bfcc      	ite	gt
 800f8ee:	461e      	movgt	r6, r3
 800f8f0:	2601      	movle	r6, #1
 800f8f2:	4456      	add	r6, sl
 800f8f4:	2700      	movs	r7, #0
 800f8f6:	4649      	mov	r1, r9
 800f8f8:	2201      	movs	r2, #1
 800f8fa:	4658      	mov	r0, fp
 800f8fc:	f000 fba4 	bl	8010048 <__lshift>
 800f900:	4621      	mov	r1, r4
 800f902:	4681      	mov	r9, r0
 800f904:	f000 fc0c 	bl	8010120 <__mcmp>
 800f908:	2800      	cmp	r0, #0
 800f90a:	dcb0      	bgt.n	800f86e <_dtoa_r+0xa5e>
 800f90c:	d102      	bne.n	800f914 <_dtoa_r+0xb04>
 800f90e:	f018 0f01 	tst.w	r8, #1
 800f912:	d1ac      	bne.n	800f86e <_dtoa_r+0xa5e>
 800f914:	4633      	mov	r3, r6
 800f916:	461e      	mov	r6, r3
 800f918:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f91c:	2a30      	cmp	r2, #48	@ 0x30
 800f91e:	d0fa      	beq.n	800f916 <_dtoa_r+0xb06>
 800f920:	e5c2      	b.n	800f4a8 <_dtoa_r+0x698>
 800f922:	459a      	cmp	sl, r3
 800f924:	d1a4      	bne.n	800f870 <_dtoa_r+0xa60>
 800f926:	9b04      	ldr	r3, [sp, #16]
 800f928:	3301      	adds	r3, #1
 800f92a:	9304      	str	r3, [sp, #16]
 800f92c:	2331      	movs	r3, #49	@ 0x31
 800f92e:	f88a 3000 	strb.w	r3, [sl]
 800f932:	e5b9      	b.n	800f4a8 <_dtoa_r+0x698>
 800f934:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f936:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f994 <_dtoa_r+0xb84>
 800f93a:	b11b      	cbz	r3, 800f944 <_dtoa_r+0xb34>
 800f93c:	f10a 0308 	add.w	r3, sl, #8
 800f940:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f942:	6013      	str	r3, [r2, #0]
 800f944:	4650      	mov	r0, sl
 800f946:	b019      	add	sp, #100	@ 0x64
 800f948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f94c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f94e:	2b01      	cmp	r3, #1
 800f950:	f77f ae37 	ble.w	800f5c2 <_dtoa_r+0x7b2>
 800f954:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f956:	930a      	str	r3, [sp, #40]	@ 0x28
 800f958:	2001      	movs	r0, #1
 800f95a:	e655      	b.n	800f608 <_dtoa_r+0x7f8>
 800f95c:	9b00      	ldr	r3, [sp, #0]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	f77f aed6 	ble.w	800f710 <_dtoa_r+0x900>
 800f964:	4656      	mov	r6, sl
 800f966:	4621      	mov	r1, r4
 800f968:	4648      	mov	r0, r9
 800f96a:	f7ff f9c7 	bl	800ecfc <quorem>
 800f96e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f972:	f806 8b01 	strb.w	r8, [r6], #1
 800f976:	9b00      	ldr	r3, [sp, #0]
 800f978:	eba6 020a 	sub.w	r2, r6, sl
 800f97c:	4293      	cmp	r3, r2
 800f97e:	ddb3      	ble.n	800f8e8 <_dtoa_r+0xad8>
 800f980:	4649      	mov	r1, r9
 800f982:	2300      	movs	r3, #0
 800f984:	220a      	movs	r2, #10
 800f986:	4658      	mov	r0, fp
 800f988:	f000 f968 	bl	800fc5c <__multadd>
 800f98c:	4681      	mov	r9, r0
 800f98e:	e7ea      	b.n	800f966 <_dtoa_r+0xb56>
 800f990:	08013fd3 	.word	0x08013fd3
 800f994:	08013f57 	.word	0x08013f57

0800f998 <_free_r>:
 800f998:	b538      	push	{r3, r4, r5, lr}
 800f99a:	4605      	mov	r5, r0
 800f99c:	2900      	cmp	r1, #0
 800f99e:	d041      	beq.n	800fa24 <_free_r+0x8c>
 800f9a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f9a4:	1f0c      	subs	r4, r1, #4
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	bfb8      	it	lt
 800f9aa:	18e4      	addlt	r4, r4, r3
 800f9ac:	f000 f8e8 	bl	800fb80 <__malloc_lock>
 800f9b0:	4a1d      	ldr	r2, [pc, #116]	@ (800fa28 <_free_r+0x90>)
 800f9b2:	6813      	ldr	r3, [r2, #0]
 800f9b4:	b933      	cbnz	r3, 800f9c4 <_free_r+0x2c>
 800f9b6:	6063      	str	r3, [r4, #4]
 800f9b8:	6014      	str	r4, [r2, #0]
 800f9ba:	4628      	mov	r0, r5
 800f9bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f9c0:	f000 b8e4 	b.w	800fb8c <__malloc_unlock>
 800f9c4:	42a3      	cmp	r3, r4
 800f9c6:	d908      	bls.n	800f9da <_free_r+0x42>
 800f9c8:	6820      	ldr	r0, [r4, #0]
 800f9ca:	1821      	adds	r1, r4, r0
 800f9cc:	428b      	cmp	r3, r1
 800f9ce:	bf01      	itttt	eq
 800f9d0:	6819      	ldreq	r1, [r3, #0]
 800f9d2:	685b      	ldreq	r3, [r3, #4]
 800f9d4:	1809      	addeq	r1, r1, r0
 800f9d6:	6021      	streq	r1, [r4, #0]
 800f9d8:	e7ed      	b.n	800f9b6 <_free_r+0x1e>
 800f9da:	461a      	mov	r2, r3
 800f9dc:	685b      	ldr	r3, [r3, #4]
 800f9de:	b10b      	cbz	r3, 800f9e4 <_free_r+0x4c>
 800f9e0:	42a3      	cmp	r3, r4
 800f9e2:	d9fa      	bls.n	800f9da <_free_r+0x42>
 800f9e4:	6811      	ldr	r1, [r2, #0]
 800f9e6:	1850      	adds	r0, r2, r1
 800f9e8:	42a0      	cmp	r0, r4
 800f9ea:	d10b      	bne.n	800fa04 <_free_r+0x6c>
 800f9ec:	6820      	ldr	r0, [r4, #0]
 800f9ee:	4401      	add	r1, r0
 800f9f0:	1850      	adds	r0, r2, r1
 800f9f2:	4283      	cmp	r3, r0
 800f9f4:	6011      	str	r1, [r2, #0]
 800f9f6:	d1e0      	bne.n	800f9ba <_free_r+0x22>
 800f9f8:	6818      	ldr	r0, [r3, #0]
 800f9fa:	685b      	ldr	r3, [r3, #4]
 800f9fc:	6053      	str	r3, [r2, #4]
 800f9fe:	4408      	add	r0, r1
 800fa00:	6010      	str	r0, [r2, #0]
 800fa02:	e7da      	b.n	800f9ba <_free_r+0x22>
 800fa04:	d902      	bls.n	800fa0c <_free_r+0x74>
 800fa06:	230c      	movs	r3, #12
 800fa08:	602b      	str	r3, [r5, #0]
 800fa0a:	e7d6      	b.n	800f9ba <_free_r+0x22>
 800fa0c:	6820      	ldr	r0, [r4, #0]
 800fa0e:	1821      	adds	r1, r4, r0
 800fa10:	428b      	cmp	r3, r1
 800fa12:	bf04      	itt	eq
 800fa14:	6819      	ldreq	r1, [r3, #0]
 800fa16:	685b      	ldreq	r3, [r3, #4]
 800fa18:	6063      	str	r3, [r4, #4]
 800fa1a:	bf04      	itt	eq
 800fa1c:	1809      	addeq	r1, r1, r0
 800fa1e:	6021      	streq	r1, [r4, #0]
 800fa20:	6054      	str	r4, [r2, #4]
 800fa22:	e7ca      	b.n	800f9ba <_free_r+0x22>
 800fa24:	bd38      	pop	{r3, r4, r5, pc}
 800fa26:	bf00      	nop
 800fa28:	20002e1c 	.word	0x20002e1c

0800fa2c <malloc>:
 800fa2c:	4b02      	ldr	r3, [pc, #8]	@ (800fa38 <malloc+0xc>)
 800fa2e:	4601      	mov	r1, r0
 800fa30:	6818      	ldr	r0, [r3, #0]
 800fa32:	f000 b825 	b.w	800fa80 <_malloc_r>
 800fa36:	bf00      	nop
 800fa38:	20000028 	.word	0x20000028

0800fa3c <sbrk_aligned>:
 800fa3c:	b570      	push	{r4, r5, r6, lr}
 800fa3e:	4e0f      	ldr	r6, [pc, #60]	@ (800fa7c <sbrk_aligned+0x40>)
 800fa40:	460c      	mov	r4, r1
 800fa42:	6831      	ldr	r1, [r6, #0]
 800fa44:	4605      	mov	r5, r0
 800fa46:	b911      	cbnz	r1, 800fa4e <sbrk_aligned+0x12>
 800fa48:	f002 fb4e 	bl	80120e8 <_sbrk_r>
 800fa4c:	6030      	str	r0, [r6, #0]
 800fa4e:	4621      	mov	r1, r4
 800fa50:	4628      	mov	r0, r5
 800fa52:	f002 fb49 	bl	80120e8 <_sbrk_r>
 800fa56:	1c43      	adds	r3, r0, #1
 800fa58:	d103      	bne.n	800fa62 <sbrk_aligned+0x26>
 800fa5a:	f04f 34ff 	mov.w	r4, #4294967295
 800fa5e:	4620      	mov	r0, r4
 800fa60:	bd70      	pop	{r4, r5, r6, pc}
 800fa62:	1cc4      	adds	r4, r0, #3
 800fa64:	f024 0403 	bic.w	r4, r4, #3
 800fa68:	42a0      	cmp	r0, r4
 800fa6a:	d0f8      	beq.n	800fa5e <sbrk_aligned+0x22>
 800fa6c:	1a21      	subs	r1, r4, r0
 800fa6e:	4628      	mov	r0, r5
 800fa70:	f002 fb3a 	bl	80120e8 <_sbrk_r>
 800fa74:	3001      	adds	r0, #1
 800fa76:	d1f2      	bne.n	800fa5e <sbrk_aligned+0x22>
 800fa78:	e7ef      	b.n	800fa5a <sbrk_aligned+0x1e>
 800fa7a:	bf00      	nop
 800fa7c:	20002e18 	.word	0x20002e18

0800fa80 <_malloc_r>:
 800fa80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa84:	1ccd      	adds	r5, r1, #3
 800fa86:	f025 0503 	bic.w	r5, r5, #3
 800fa8a:	3508      	adds	r5, #8
 800fa8c:	2d0c      	cmp	r5, #12
 800fa8e:	bf38      	it	cc
 800fa90:	250c      	movcc	r5, #12
 800fa92:	2d00      	cmp	r5, #0
 800fa94:	4606      	mov	r6, r0
 800fa96:	db01      	blt.n	800fa9c <_malloc_r+0x1c>
 800fa98:	42a9      	cmp	r1, r5
 800fa9a:	d904      	bls.n	800faa6 <_malloc_r+0x26>
 800fa9c:	230c      	movs	r3, #12
 800fa9e:	6033      	str	r3, [r6, #0]
 800faa0:	2000      	movs	r0, #0
 800faa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800faa6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fb7c <_malloc_r+0xfc>
 800faaa:	f000 f869 	bl	800fb80 <__malloc_lock>
 800faae:	f8d8 3000 	ldr.w	r3, [r8]
 800fab2:	461c      	mov	r4, r3
 800fab4:	bb44      	cbnz	r4, 800fb08 <_malloc_r+0x88>
 800fab6:	4629      	mov	r1, r5
 800fab8:	4630      	mov	r0, r6
 800faba:	f7ff ffbf 	bl	800fa3c <sbrk_aligned>
 800fabe:	1c43      	adds	r3, r0, #1
 800fac0:	4604      	mov	r4, r0
 800fac2:	d158      	bne.n	800fb76 <_malloc_r+0xf6>
 800fac4:	f8d8 4000 	ldr.w	r4, [r8]
 800fac8:	4627      	mov	r7, r4
 800faca:	2f00      	cmp	r7, #0
 800facc:	d143      	bne.n	800fb56 <_malloc_r+0xd6>
 800face:	2c00      	cmp	r4, #0
 800fad0:	d04b      	beq.n	800fb6a <_malloc_r+0xea>
 800fad2:	6823      	ldr	r3, [r4, #0]
 800fad4:	4639      	mov	r1, r7
 800fad6:	4630      	mov	r0, r6
 800fad8:	eb04 0903 	add.w	r9, r4, r3
 800fadc:	f002 fb04 	bl	80120e8 <_sbrk_r>
 800fae0:	4581      	cmp	r9, r0
 800fae2:	d142      	bne.n	800fb6a <_malloc_r+0xea>
 800fae4:	6821      	ldr	r1, [r4, #0]
 800fae6:	1a6d      	subs	r5, r5, r1
 800fae8:	4629      	mov	r1, r5
 800faea:	4630      	mov	r0, r6
 800faec:	f7ff ffa6 	bl	800fa3c <sbrk_aligned>
 800faf0:	3001      	adds	r0, #1
 800faf2:	d03a      	beq.n	800fb6a <_malloc_r+0xea>
 800faf4:	6823      	ldr	r3, [r4, #0]
 800faf6:	442b      	add	r3, r5
 800faf8:	6023      	str	r3, [r4, #0]
 800fafa:	f8d8 3000 	ldr.w	r3, [r8]
 800fafe:	685a      	ldr	r2, [r3, #4]
 800fb00:	bb62      	cbnz	r2, 800fb5c <_malloc_r+0xdc>
 800fb02:	f8c8 7000 	str.w	r7, [r8]
 800fb06:	e00f      	b.n	800fb28 <_malloc_r+0xa8>
 800fb08:	6822      	ldr	r2, [r4, #0]
 800fb0a:	1b52      	subs	r2, r2, r5
 800fb0c:	d420      	bmi.n	800fb50 <_malloc_r+0xd0>
 800fb0e:	2a0b      	cmp	r2, #11
 800fb10:	d917      	bls.n	800fb42 <_malloc_r+0xc2>
 800fb12:	1961      	adds	r1, r4, r5
 800fb14:	42a3      	cmp	r3, r4
 800fb16:	6025      	str	r5, [r4, #0]
 800fb18:	bf18      	it	ne
 800fb1a:	6059      	strne	r1, [r3, #4]
 800fb1c:	6863      	ldr	r3, [r4, #4]
 800fb1e:	bf08      	it	eq
 800fb20:	f8c8 1000 	streq.w	r1, [r8]
 800fb24:	5162      	str	r2, [r4, r5]
 800fb26:	604b      	str	r3, [r1, #4]
 800fb28:	4630      	mov	r0, r6
 800fb2a:	f000 f82f 	bl	800fb8c <__malloc_unlock>
 800fb2e:	f104 000b 	add.w	r0, r4, #11
 800fb32:	1d23      	adds	r3, r4, #4
 800fb34:	f020 0007 	bic.w	r0, r0, #7
 800fb38:	1ac2      	subs	r2, r0, r3
 800fb3a:	bf1c      	itt	ne
 800fb3c:	1a1b      	subne	r3, r3, r0
 800fb3e:	50a3      	strne	r3, [r4, r2]
 800fb40:	e7af      	b.n	800faa2 <_malloc_r+0x22>
 800fb42:	6862      	ldr	r2, [r4, #4]
 800fb44:	42a3      	cmp	r3, r4
 800fb46:	bf0c      	ite	eq
 800fb48:	f8c8 2000 	streq.w	r2, [r8]
 800fb4c:	605a      	strne	r2, [r3, #4]
 800fb4e:	e7eb      	b.n	800fb28 <_malloc_r+0xa8>
 800fb50:	4623      	mov	r3, r4
 800fb52:	6864      	ldr	r4, [r4, #4]
 800fb54:	e7ae      	b.n	800fab4 <_malloc_r+0x34>
 800fb56:	463c      	mov	r4, r7
 800fb58:	687f      	ldr	r7, [r7, #4]
 800fb5a:	e7b6      	b.n	800faca <_malloc_r+0x4a>
 800fb5c:	461a      	mov	r2, r3
 800fb5e:	685b      	ldr	r3, [r3, #4]
 800fb60:	42a3      	cmp	r3, r4
 800fb62:	d1fb      	bne.n	800fb5c <_malloc_r+0xdc>
 800fb64:	2300      	movs	r3, #0
 800fb66:	6053      	str	r3, [r2, #4]
 800fb68:	e7de      	b.n	800fb28 <_malloc_r+0xa8>
 800fb6a:	230c      	movs	r3, #12
 800fb6c:	6033      	str	r3, [r6, #0]
 800fb6e:	4630      	mov	r0, r6
 800fb70:	f000 f80c 	bl	800fb8c <__malloc_unlock>
 800fb74:	e794      	b.n	800faa0 <_malloc_r+0x20>
 800fb76:	6005      	str	r5, [r0, #0]
 800fb78:	e7d6      	b.n	800fb28 <_malloc_r+0xa8>
 800fb7a:	bf00      	nop
 800fb7c:	20002e1c 	.word	0x20002e1c

0800fb80 <__malloc_lock>:
 800fb80:	4801      	ldr	r0, [pc, #4]	@ (800fb88 <__malloc_lock+0x8>)
 800fb82:	f7ff b8a4 	b.w	800ecce <__retarget_lock_acquire_recursive>
 800fb86:	bf00      	nop
 800fb88:	20002e14 	.word	0x20002e14

0800fb8c <__malloc_unlock>:
 800fb8c:	4801      	ldr	r0, [pc, #4]	@ (800fb94 <__malloc_unlock+0x8>)
 800fb8e:	f7ff b89f 	b.w	800ecd0 <__retarget_lock_release_recursive>
 800fb92:	bf00      	nop
 800fb94:	20002e14 	.word	0x20002e14

0800fb98 <_Balloc>:
 800fb98:	b570      	push	{r4, r5, r6, lr}
 800fb9a:	69c6      	ldr	r6, [r0, #28]
 800fb9c:	4604      	mov	r4, r0
 800fb9e:	460d      	mov	r5, r1
 800fba0:	b976      	cbnz	r6, 800fbc0 <_Balloc+0x28>
 800fba2:	2010      	movs	r0, #16
 800fba4:	f7ff ff42 	bl	800fa2c <malloc>
 800fba8:	4602      	mov	r2, r0
 800fbaa:	61e0      	str	r0, [r4, #28]
 800fbac:	b920      	cbnz	r0, 800fbb8 <_Balloc+0x20>
 800fbae:	4b18      	ldr	r3, [pc, #96]	@ (800fc10 <_Balloc+0x78>)
 800fbb0:	4818      	ldr	r0, [pc, #96]	@ (800fc14 <_Balloc+0x7c>)
 800fbb2:	216b      	movs	r1, #107	@ 0x6b
 800fbb4:	f002 fab0 	bl	8012118 <__assert_func>
 800fbb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fbbc:	6006      	str	r6, [r0, #0]
 800fbbe:	60c6      	str	r6, [r0, #12]
 800fbc0:	69e6      	ldr	r6, [r4, #28]
 800fbc2:	68f3      	ldr	r3, [r6, #12]
 800fbc4:	b183      	cbz	r3, 800fbe8 <_Balloc+0x50>
 800fbc6:	69e3      	ldr	r3, [r4, #28]
 800fbc8:	68db      	ldr	r3, [r3, #12]
 800fbca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fbce:	b9b8      	cbnz	r0, 800fc00 <_Balloc+0x68>
 800fbd0:	2101      	movs	r1, #1
 800fbd2:	fa01 f605 	lsl.w	r6, r1, r5
 800fbd6:	1d72      	adds	r2, r6, #5
 800fbd8:	0092      	lsls	r2, r2, #2
 800fbda:	4620      	mov	r0, r4
 800fbdc:	f002 faba 	bl	8012154 <_calloc_r>
 800fbe0:	b160      	cbz	r0, 800fbfc <_Balloc+0x64>
 800fbe2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fbe6:	e00e      	b.n	800fc06 <_Balloc+0x6e>
 800fbe8:	2221      	movs	r2, #33	@ 0x21
 800fbea:	2104      	movs	r1, #4
 800fbec:	4620      	mov	r0, r4
 800fbee:	f002 fab1 	bl	8012154 <_calloc_r>
 800fbf2:	69e3      	ldr	r3, [r4, #28]
 800fbf4:	60f0      	str	r0, [r6, #12]
 800fbf6:	68db      	ldr	r3, [r3, #12]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d1e4      	bne.n	800fbc6 <_Balloc+0x2e>
 800fbfc:	2000      	movs	r0, #0
 800fbfe:	bd70      	pop	{r4, r5, r6, pc}
 800fc00:	6802      	ldr	r2, [r0, #0]
 800fc02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fc06:	2300      	movs	r3, #0
 800fc08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fc0c:	e7f7      	b.n	800fbfe <_Balloc+0x66>
 800fc0e:	bf00      	nop
 800fc10:	08013f64 	.word	0x08013f64
 800fc14:	08013fe4 	.word	0x08013fe4

0800fc18 <_Bfree>:
 800fc18:	b570      	push	{r4, r5, r6, lr}
 800fc1a:	69c6      	ldr	r6, [r0, #28]
 800fc1c:	4605      	mov	r5, r0
 800fc1e:	460c      	mov	r4, r1
 800fc20:	b976      	cbnz	r6, 800fc40 <_Bfree+0x28>
 800fc22:	2010      	movs	r0, #16
 800fc24:	f7ff ff02 	bl	800fa2c <malloc>
 800fc28:	4602      	mov	r2, r0
 800fc2a:	61e8      	str	r0, [r5, #28]
 800fc2c:	b920      	cbnz	r0, 800fc38 <_Bfree+0x20>
 800fc2e:	4b09      	ldr	r3, [pc, #36]	@ (800fc54 <_Bfree+0x3c>)
 800fc30:	4809      	ldr	r0, [pc, #36]	@ (800fc58 <_Bfree+0x40>)
 800fc32:	218f      	movs	r1, #143	@ 0x8f
 800fc34:	f002 fa70 	bl	8012118 <__assert_func>
 800fc38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc3c:	6006      	str	r6, [r0, #0]
 800fc3e:	60c6      	str	r6, [r0, #12]
 800fc40:	b13c      	cbz	r4, 800fc52 <_Bfree+0x3a>
 800fc42:	69eb      	ldr	r3, [r5, #28]
 800fc44:	6862      	ldr	r2, [r4, #4]
 800fc46:	68db      	ldr	r3, [r3, #12]
 800fc48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fc4c:	6021      	str	r1, [r4, #0]
 800fc4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fc52:	bd70      	pop	{r4, r5, r6, pc}
 800fc54:	08013f64 	.word	0x08013f64
 800fc58:	08013fe4 	.word	0x08013fe4

0800fc5c <__multadd>:
 800fc5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc60:	690d      	ldr	r5, [r1, #16]
 800fc62:	4607      	mov	r7, r0
 800fc64:	460c      	mov	r4, r1
 800fc66:	461e      	mov	r6, r3
 800fc68:	f101 0c14 	add.w	ip, r1, #20
 800fc6c:	2000      	movs	r0, #0
 800fc6e:	f8dc 3000 	ldr.w	r3, [ip]
 800fc72:	b299      	uxth	r1, r3
 800fc74:	fb02 6101 	mla	r1, r2, r1, r6
 800fc78:	0c1e      	lsrs	r6, r3, #16
 800fc7a:	0c0b      	lsrs	r3, r1, #16
 800fc7c:	fb02 3306 	mla	r3, r2, r6, r3
 800fc80:	b289      	uxth	r1, r1
 800fc82:	3001      	adds	r0, #1
 800fc84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fc88:	4285      	cmp	r5, r0
 800fc8a:	f84c 1b04 	str.w	r1, [ip], #4
 800fc8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fc92:	dcec      	bgt.n	800fc6e <__multadd+0x12>
 800fc94:	b30e      	cbz	r6, 800fcda <__multadd+0x7e>
 800fc96:	68a3      	ldr	r3, [r4, #8]
 800fc98:	42ab      	cmp	r3, r5
 800fc9a:	dc19      	bgt.n	800fcd0 <__multadd+0x74>
 800fc9c:	6861      	ldr	r1, [r4, #4]
 800fc9e:	4638      	mov	r0, r7
 800fca0:	3101      	adds	r1, #1
 800fca2:	f7ff ff79 	bl	800fb98 <_Balloc>
 800fca6:	4680      	mov	r8, r0
 800fca8:	b928      	cbnz	r0, 800fcb6 <__multadd+0x5a>
 800fcaa:	4602      	mov	r2, r0
 800fcac:	4b0c      	ldr	r3, [pc, #48]	@ (800fce0 <__multadd+0x84>)
 800fcae:	480d      	ldr	r0, [pc, #52]	@ (800fce4 <__multadd+0x88>)
 800fcb0:	21ba      	movs	r1, #186	@ 0xba
 800fcb2:	f002 fa31 	bl	8012118 <__assert_func>
 800fcb6:	6922      	ldr	r2, [r4, #16]
 800fcb8:	3202      	adds	r2, #2
 800fcba:	f104 010c 	add.w	r1, r4, #12
 800fcbe:	0092      	lsls	r2, r2, #2
 800fcc0:	300c      	adds	r0, #12
 800fcc2:	f7ff f806 	bl	800ecd2 <memcpy>
 800fcc6:	4621      	mov	r1, r4
 800fcc8:	4638      	mov	r0, r7
 800fcca:	f7ff ffa5 	bl	800fc18 <_Bfree>
 800fcce:	4644      	mov	r4, r8
 800fcd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fcd4:	3501      	adds	r5, #1
 800fcd6:	615e      	str	r6, [r3, #20]
 800fcd8:	6125      	str	r5, [r4, #16]
 800fcda:	4620      	mov	r0, r4
 800fcdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fce0:	08013fd3 	.word	0x08013fd3
 800fce4:	08013fe4 	.word	0x08013fe4

0800fce8 <__s2b>:
 800fce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcec:	460c      	mov	r4, r1
 800fcee:	4615      	mov	r5, r2
 800fcf0:	461f      	mov	r7, r3
 800fcf2:	2209      	movs	r2, #9
 800fcf4:	3308      	adds	r3, #8
 800fcf6:	4606      	mov	r6, r0
 800fcf8:	fb93 f3f2 	sdiv	r3, r3, r2
 800fcfc:	2100      	movs	r1, #0
 800fcfe:	2201      	movs	r2, #1
 800fd00:	429a      	cmp	r2, r3
 800fd02:	db09      	blt.n	800fd18 <__s2b+0x30>
 800fd04:	4630      	mov	r0, r6
 800fd06:	f7ff ff47 	bl	800fb98 <_Balloc>
 800fd0a:	b940      	cbnz	r0, 800fd1e <__s2b+0x36>
 800fd0c:	4602      	mov	r2, r0
 800fd0e:	4b19      	ldr	r3, [pc, #100]	@ (800fd74 <__s2b+0x8c>)
 800fd10:	4819      	ldr	r0, [pc, #100]	@ (800fd78 <__s2b+0x90>)
 800fd12:	21d3      	movs	r1, #211	@ 0xd3
 800fd14:	f002 fa00 	bl	8012118 <__assert_func>
 800fd18:	0052      	lsls	r2, r2, #1
 800fd1a:	3101      	adds	r1, #1
 800fd1c:	e7f0      	b.n	800fd00 <__s2b+0x18>
 800fd1e:	9b08      	ldr	r3, [sp, #32]
 800fd20:	6143      	str	r3, [r0, #20]
 800fd22:	2d09      	cmp	r5, #9
 800fd24:	f04f 0301 	mov.w	r3, #1
 800fd28:	6103      	str	r3, [r0, #16]
 800fd2a:	dd16      	ble.n	800fd5a <__s2b+0x72>
 800fd2c:	f104 0909 	add.w	r9, r4, #9
 800fd30:	46c8      	mov	r8, r9
 800fd32:	442c      	add	r4, r5
 800fd34:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fd38:	4601      	mov	r1, r0
 800fd3a:	3b30      	subs	r3, #48	@ 0x30
 800fd3c:	220a      	movs	r2, #10
 800fd3e:	4630      	mov	r0, r6
 800fd40:	f7ff ff8c 	bl	800fc5c <__multadd>
 800fd44:	45a0      	cmp	r8, r4
 800fd46:	d1f5      	bne.n	800fd34 <__s2b+0x4c>
 800fd48:	f1a5 0408 	sub.w	r4, r5, #8
 800fd4c:	444c      	add	r4, r9
 800fd4e:	1b2d      	subs	r5, r5, r4
 800fd50:	1963      	adds	r3, r4, r5
 800fd52:	42bb      	cmp	r3, r7
 800fd54:	db04      	blt.n	800fd60 <__s2b+0x78>
 800fd56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd5a:	340a      	adds	r4, #10
 800fd5c:	2509      	movs	r5, #9
 800fd5e:	e7f6      	b.n	800fd4e <__s2b+0x66>
 800fd60:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fd64:	4601      	mov	r1, r0
 800fd66:	3b30      	subs	r3, #48	@ 0x30
 800fd68:	220a      	movs	r2, #10
 800fd6a:	4630      	mov	r0, r6
 800fd6c:	f7ff ff76 	bl	800fc5c <__multadd>
 800fd70:	e7ee      	b.n	800fd50 <__s2b+0x68>
 800fd72:	bf00      	nop
 800fd74:	08013fd3 	.word	0x08013fd3
 800fd78:	08013fe4 	.word	0x08013fe4

0800fd7c <__hi0bits>:
 800fd7c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fd80:	4603      	mov	r3, r0
 800fd82:	bf36      	itet	cc
 800fd84:	0403      	lslcc	r3, r0, #16
 800fd86:	2000      	movcs	r0, #0
 800fd88:	2010      	movcc	r0, #16
 800fd8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fd8e:	bf3c      	itt	cc
 800fd90:	021b      	lslcc	r3, r3, #8
 800fd92:	3008      	addcc	r0, #8
 800fd94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fd98:	bf3c      	itt	cc
 800fd9a:	011b      	lslcc	r3, r3, #4
 800fd9c:	3004      	addcc	r0, #4
 800fd9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fda2:	bf3c      	itt	cc
 800fda4:	009b      	lslcc	r3, r3, #2
 800fda6:	3002      	addcc	r0, #2
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	db05      	blt.n	800fdb8 <__hi0bits+0x3c>
 800fdac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fdb0:	f100 0001 	add.w	r0, r0, #1
 800fdb4:	bf08      	it	eq
 800fdb6:	2020      	moveq	r0, #32
 800fdb8:	4770      	bx	lr

0800fdba <__lo0bits>:
 800fdba:	6803      	ldr	r3, [r0, #0]
 800fdbc:	4602      	mov	r2, r0
 800fdbe:	f013 0007 	ands.w	r0, r3, #7
 800fdc2:	d00b      	beq.n	800fddc <__lo0bits+0x22>
 800fdc4:	07d9      	lsls	r1, r3, #31
 800fdc6:	d421      	bmi.n	800fe0c <__lo0bits+0x52>
 800fdc8:	0798      	lsls	r0, r3, #30
 800fdca:	bf49      	itett	mi
 800fdcc:	085b      	lsrmi	r3, r3, #1
 800fdce:	089b      	lsrpl	r3, r3, #2
 800fdd0:	2001      	movmi	r0, #1
 800fdd2:	6013      	strmi	r3, [r2, #0]
 800fdd4:	bf5c      	itt	pl
 800fdd6:	6013      	strpl	r3, [r2, #0]
 800fdd8:	2002      	movpl	r0, #2
 800fdda:	4770      	bx	lr
 800fddc:	b299      	uxth	r1, r3
 800fdde:	b909      	cbnz	r1, 800fde4 <__lo0bits+0x2a>
 800fde0:	0c1b      	lsrs	r3, r3, #16
 800fde2:	2010      	movs	r0, #16
 800fde4:	b2d9      	uxtb	r1, r3
 800fde6:	b909      	cbnz	r1, 800fdec <__lo0bits+0x32>
 800fde8:	3008      	adds	r0, #8
 800fdea:	0a1b      	lsrs	r3, r3, #8
 800fdec:	0719      	lsls	r1, r3, #28
 800fdee:	bf04      	itt	eq
 800fdf0:	091b      	lsreq	r3, r3, #4
 800fdf2:	3004      	addeq	r0, #4
 800fdf4:	0799      	lsls	r1, r3, #30
 800fdf6:	bf04      	itt	eq
 800fdf8:	089b      	lsreq	r3, r3, #2
 800fdfa:	3002      	addeq	r0, #2
 800fdfc:	07d9      	lsls	r1, r3, #31
 800fdfe:	d403      	bmi.n	800fe08 <__lo0bits+0x4e>
 800fe00:	085b      	lsrs	r3, r3, #1
 800fe02:	f100 0001 	add.w	r0, r0, #1
 800fe06:	d003      	beq.n	800fe10 <__lo0bits+0x56>
 800fe08:	6013      	str	r3, [r2, #0]
 800fe0a:	4770      	bx	lr
 800fe0c:	2000      	movs	r0, #0
 800fe0e:	4770      	bx	lr
 800fe10:	2020      	movs	r0, #32
 800fe12:	4770      	bx	lr

0800fe14 <__i2b>:
 800fe14:	b510      	push	{r4, lr}
 800fe16:	460c      	mov	r4, r1
 800fe18:	2101      	movs	r1, #1
 800fe1a:	f7ff febd 	bl	800fb98 <_Balloc>
 800fe1e:	4602      	mov	r2, r0
 800fe20:	b928      	cbnz	r0, 800fe2e <__i2b+0x1a>
 800fe22:	4b05      	ldr	r3, [pc, #20]	@ (800fe38 <__i2b+0x24>)
 800fe24:	4805      	ldr	r0, [pc, #20]	@ (800fe3c <__i2b+0x28>)
 800fe26:	f240 1145 	movw	r1, #325	@ 0x145
 800fe2a:	f002 f975 	bl	8012118 <__assert_func>
 800fe2e:	2301      	movs	r3, #1
 800fe30:	6144      	str	r4, [r0, #20]
 800fe32:	6103      	str	r3, [r0, #16]
 800fe34:	bd10      	pop	{r4, pc}
 800fe36:	bf00      	nop
 800fe38:	08013fd3 	.word	0x08013fd3
 800fe3c:	08013fe4 	.word	0x08013fe4

0800fe40 <__multiply>:
 800fe40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe44:	4614      	mov	r4, r2
 800fe46:	690a      	ldr	r2, [r1, #16]
 800fe48:	6923      	ldr	r3, [r4, #16]
 800fe4a:	429a      	cmp	r2, r3
 800fe4c:	bfa8      	it	ge
 800fe4e:	4623      	movge	r3, r4
 800fe50:	460f      	mov	r7, r1
 800fe52:	bfa4      	itt	ge
 800fe54:	460c      	movge	r4, r1
 800fe56:	461f      	movge	r7, r3
 800fe58:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fe5c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fe60:	68a3      	ldr	r3, [r4, #8]
 800fe62:	6861      	ldr	r1, [r4, #4]
 800fe64:	eb0a 0609 	add.w	r6, sl, r9
 800fe68:	42b3      	cmp	r3, r6
 800fe6a:	b085      	sub	sp, #20
 800fe6c:	bfb8      	it	lt
 800fe6e:	3101      	addlt	r1, #1
 800fe70:	f7ff fe92 	bl	800fb98 <_Balloc>
 800fe74:	b930      	cbnz	r0, 800fe84 <__multiply+0x44>
 800fe76:	4602      	mov	r2, r0
 800fe78:	4b44      	ldr	r3, [pc, #272]	@ (800ff8c <__multiply+0x14c>)
 800fe7a:	4845      	ldr	r0, [pc, #276]	@ (800ff90 <__multiply+0x150>)
 800fe7c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fe80:	f002 f94a 	bl	8012118 <__assert_func>
 800fe84:	f100 0514 	add.w	r5, r0, #20
 800fe88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fe8c:	462b      	mov	r3, r5
 800fe8e:	2200      	movs	r2, #0
 800fe90:	4543      	cmp	r3, r8
 800fe92:	d321      	bcc.n	800fed8 <__multiply+0x98>
 800fe94:	f107 0114 	add.w	r1, r7, #20
 800fe98:	f104 0214 	add.w	r2, r4, #20
 800fe9c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fea0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fea4:	9302      	str	r3, [sp, #8]
 800fea6:	1b13      	subs	r3, r2, r4
 800fea8:	3b15      	subs	r3, #21
 800feaa:	f023 0303 	bic.w	r3, r3, #3
 800feae:	3304      	adds	r3, #4
 800feb0:	f104 0715 	add.w	r7, r4, #21
 800feb4:	42ba      	cmp	r2, r7
 800feb6:	bf38      	it	cc
 800feb8:	2304      	movcc	r3, #4
 800feba:	9301      	str	r3, [sp, #4]
 800febc:	9b02      	ldr	r3, [sp, #8]
 800febe:	9103      	str	r1, [sp, #12]
 800fec0:	428b      	cmp	r3, r1
 800fec2:	d80c      	bhi.n	800fede <__multiply+0x9e>
 800fec4:	2e00      	cmp	r6, #0
 800fec6:	dd03      	ble.n	800fed0 <__multiply+0x90>
 800fec8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d05b      	beq.n	800ff88 <__multiply+0x148>
 800fed0:	6106      	str	r6, [r0, #16]
 800fed2:	b005      	add	sp, #20
 800fed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fed8:	f843 2b04 	str.w	r2, [r3], #4
 800fedc:	e7d8      	b.n	800fe90 <__multiply+0x50>
 800fede:	f8b1 a000 	ldrh.w	sl, [r1]
 800fee2:	f1ba 0f00 	cmp.w	sl, #0
 800fee6:	d024      	beq.n	800ff32 <__multiply+0xf2>
 800fee8:	f104 0e14 	add.w	lr, r4, #20
 800feec:	46a9      	mov	r9, r5
 800feee:	f04f 0c00 	mov.w	ip, #0
 800fef2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fef6:	f8d9 3000 	ldr.w	r3, [r9]
 800fefa:	fa1f fb87 	uxth.w	fp, r7
 800fefe:	b29b      	uxth	r3, r3
 800ff00:	fb0a 330b 	mla	r3, sl, fp, r3
 800ff04:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ff08:	f8d9 7000 	ldr.w	r7, [r9]
 800ff0c:	4463      	add	r3, ip
 800ff0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ff12:	fb0a c70b 	mla	r7, sl, fp, ip
 800ff16:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ff1a:	b29b      	uxth	r3, r3
 800ff1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ff20:	4572      	cmp	r2, lr
 800ff22:	f849 3b04 	str.w	r3, [r9], #4
 800ff26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ff2a:	d8e2      	bhi.n	800fef2 <__multiply+0xb2>
 800ff2c:	9b01      	ldr	r3, [sp, #4]
 800ff2e:	f845 c003 	str.w	ip, [r5, r3]
 800ff32:	9b03      	ldr	r3, [sp, #12]
 800ff34:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ff38:	3104      	adds	r1, #4
 800ff3a:	f1b9 0f00 	cmp.w	r9, #0
 800ff3e:	d021      	beq.n	800ff84 <__multiply+0x144>
 800ff40:	682b      	ldr	r3, [r5, #0]
 800ff42:	f104 0c14 	add.w	ip, r4, #20
 800ff46:	46ae      	mov	lr, r5
 800ff48:	f04f 0a00 	mov.w	sl, #0
 800ff4c:	f8bc b000 	ldrh.w	fp, [ip]
 800ff50:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ff54:	fb09 770b 	mla	r7, r9, fp, r7
 800ff58:	4457      	add	r7, sl
 800ff5a:	b29b      	uxth	r3, r3
 800ff5c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ff60:	f84e 3b04 	str.w	r3, [lr], #4
 800ff64:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ff68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ff6c:	f8be 3000 	ldrh.w	r3, [lr]
 800ff70:	fb09 330a 	mla	r3, r9, sl, r3
 800ff74:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ff78:	4562      	cmp	r2, ip
 800ff7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ff7e:	d8e5      	bhi.n	800ff4c <__multiply+0x10c>
 800ff80:	9f01      	ldr	r7, [sp, #4]
 800ff82:	51eb      	str	r3, [r5, r7]
 800ff84:	3504      	adds	r5, #4
 800ff86:	e799      	b.n	800febc <__multiply+0x7c>
 800ff88:	3e01      	subs	r6, #1
 800ff8a:	e79b      	b.n	800fec4 <__multiply+0x84>
 800ff8c:	08013fd3 	.word	0x08013fd3
 800ff90:	08013fe4 	.word	0x08013fe4

0800ff94 <__pow5mult>:
 800ff94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff98:	4615      	mov	r5, r2
 800ff9a:	f012 0203 	ands.w	r2, r2, #3
 800ff9e:	4607      	mov	r7, r0
 800ffa0:	460e      	mov	r6, r1
 800ffa2:	d007      	beq.n	800ffb4 <__pow5mult+0x20>
 800ffa4:	4c25      	ldr	r4, [pc, #148]	@ (801003c <__pow5mult+0xa8>)
 800ffa6:	3a01      	subs	r2, #1
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ffae:	f7ff fe55 	bl	800fc5c <__multadd>
 800ffb2:	4606      	mov	r6, r0
 800ffb4:	10ad      	asrs	r5, r5, #2
 800ffb6:	d03d      	beq.n	8010034 <__pow5mult+0xa0>
 800ffb8:	69fc      	ldr	r4, [r7, #28]
 800ffba:	b97c      	cbnz	r4, 800ffdc <__pow5mult+0x48>
 800ffbc:	2010      	movs	r0, #16
 800ffbe:	f7ff fd35 	bl	800fa2c <malloc>
 800ffc2:	4602      	mov	r2, r0
 800ffc4:	61f8      	str	r0, [r7, #28]
 800ffc6:	b928      	cbnz	r0, 800ffd4 <__pow5mult+0x40>
 800ffc8:	4b1d      	ldr	r3, [pc, #116]	@ (8010040 <__pow5mult+0xac>)
 800ffca:	481e      	ldr	r0, [pc, #120]	@ (8010044 <__pow5mult+0xb0>)
 800ffcc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ffd0:	f002 f8a2 	bl	8012118 <__assert_func>
 800ffd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ffd8:	6004      	str	r4, [r0, #0]
 800ffda:	60c4      	str	r4, [r0, #12]
 800ffdc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ffe0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ffe4:	b94c      	cbnz	r4, 800fffa <__pow5mult+0x66>
 800ffe6:	f240 2171 	movw	r1, #625	@ 0x271
 800ffea:	4638      	mov	r0, r7
 800ffec:	f7ff ff12 	bl	800fe14 <__i2b>
 800fff0:	2300      	movs	r3, #0
 800fff2:	f8c8 0008 	str.w	r0, [r8, #8]
 800fff6:	4604      	mov	r4, r0
 800fff8:	6003      	str	r3, [r0, #0]
 800fffa:	f04f 0900 	mov.w	r9, #0
 800fffe:	07eb      	lsls	r3, r5, #31
 8010000:	d50a      	bpl.n	8010018 <__pow5mult+0x84>
 8010002:	4631      	mov	r1, r6
 8010004:	4622      	mov	r2, r4
 8010006:	4638      	mov	r0, r7
 8010008:	f7ff ff1a 	bl	800fe40 <__multiply>
 801000c:	4631      	mov	r1, r6
 801000e:	4680      	mov	r8, r0
 8010010:	4638      	mov	r0, r7
 8010012:	f7ff fe01 	bl	800fc18 <_Bfree>
 8010016:	4646      	mov	r6, r8
 8010018:	106d      	asrs	r5, r5, #1
 801001a:	d00b      	beq.n	8010034 <__pow5mult+0xa0>
 801001c:	6820      	ldr	r0, [r4, #0]
 801001e:	b938      	cbnz	r0, 8010030 <__pow5mult+0x9c>
 8010020:	4622      	mov	r2, r4
 8010022:	4621      	mov	r1, r4
 8010024:	4638      	mov	r0, r7
 8010026:	f7ff ff0b 	bl	800fe40 <__multiply>
 801002a:	6020      	str	r0, [r4, #0]
 801002c:	f8c0 9000 	str.w	r9, [r0]
 8010030:	4604      	mov	r4, r0
 8010032:	e7e4      	b.n	800fffe <__pow5mult+0x6a>
 8010034:	4630      	mov	r0, r6
 8010036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801003a:	bf00      	nop
 801003c:	08014040 	.word	0x08014040
 8010040:	08013f64 	.word	0x08013f64
 8010044:	08013fe4 	.word	0x08013fe4

08010048 <__lshift>:
 8010048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801004c:	460c      	mov	r4, r1
 801004e:	6849      	ldr	r1, [r1, #4]
 8010050:	6923      	ldr	r3, [r4, #16]
 8010052:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010056:	68a3      	ldr	r3, [r4, #8]
 8010058:	4607      	mov	r7, r0
 801005a:	4691      	mov	r9, r2
 801005c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010060:	f108 0601 	add.w	r6, r8, #1
 8010064:	42b3      	cmp	r3, r6
 8010066:	db0b      	blt.n	8010080 <__lshift+0x38>
 8010068:	4638      	mov	r0, r7
 801006a:	f7ff fd95 	bl	800fb98 <_Balloc>
 801006e:	4605      	mov	r5, r0
 8010070:	b948      	cbnz	r0, 8010086 <__lshift+0x3e>
 8010072:	4602      	mov	r2, r0
 8010074:	4b28      	ldr	r3, [pc, #160]	@ (8010118 <__lshift+0xd0>)
 8010076:	4829      	ldr	r0, [pc, #164]	@ (801011c <__lshift+0xd4>)
 8010078:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801007c:	f002 f84c 	bl	8012118 <__assert_func>
 8010080:	3101      	adds	r1, #1
 8010082:	005b      	lsls	r3, r3, #1
 8010084:	e7ee      	b.n	8010064 <__lshift+0x1c>
 8010086:	2300      	movs	r3, #0
 8010088:	f100 0114 	add.w	r1, r0, #20
 801008c:	f100 0210 	add.w	r2, r0, #16
 8010090:	4618      	mov	r0, r3
 8010092:	4553      	cmp	r3, sl
 8010094:	db33      	blt.n	80100fe <__lshift+0xb6>
 8010096:	6920      	ldr	r0, [r4, #16]
 8010098:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801009c:	f104 0314 	add.w	r3, r4, #20
 80100a0:	f019 091f 	ands.w	r9, r9, #31
 80100a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80100a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80100ac:	d02b      	beq.n	8010106 <__lshift+0xbe>
 80100ae:	f1c9 0e20 	rsb	lr, r9, #32
 80100b2:	468a      	mov	sl, r1
 80100b4:	2200      	movs	r2, #0
 80100b6:	6818      	ldr	r0, [r3, #0]
 80100b8:	fa00 f009 	lsl.w	r0, r0, r9
 80100bc:	4310      	orrs	r0, r2
 80100be:	f84a 0b04 	str.w	r0, [sl], #4
 80100c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80100c6:	459c      	cmp	ip, r3
 80100c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80100cc:	d8f3      	bhi.n	80100b6 <__lshift+0x6e>
 80100ce:	ebac 0304 	sub.w	r3, ip, r4
 80100d2:	3b15      	subs	r3, #21
 80100d4:	f023 0303 	bic.w	r3, r3, #3
 80100d8:	3304      	adds	r3, #4
 80100da:	f104 0015 	add.w	r0, r4, #21
 80100de:	4584      	cmp	ip, r0
 80100e0:	bf38      	it	cc
 80100e2:	2304      	movcc	r3, #4
 80100e4:	50ca      	str	r2, [r1, r3]
 80100e6:	b10a      	cbz	r2, 80100ec <__lshift+0xa4>
 80100e8:	f108 0602 	add.w	r6, r8, #2
 80100ec:	3e01      	subs	r6, #1
 80100ee:	4638      	mov	r0, r7
 80100f0:	612e      	str	r6, [r5, #16]
 80100f2:	4621      	mov	r1, r4
 80100f4:	f7ff fd90 	bl	800fc18 <_Bfree>
 80100f8:	4628      	mov	r0, r5
 80100fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8010102:	3301      	adds	r3, #1
 8010104:	e7c5      	b.n	8010092 <__lshift+0x4a>
 8010106:	3904      	subs	r1, #4
 8010108:	f853 2b04 	ldr.w	r2, [r3], #4
 801010c:	f841 2f04 	str.w	r2, [r1, #4]!
 8010110:	459c      	cmp	ip, r3
 8010112:	d8f9      	bhi.n	8010108 <__lshift+0xc0>
 8010114:	e7ea      	b.n	80100ec <__lshift+0xa4>
 8010116:	bf00      	nop
 8010118:	08013fd3 	.word	0x08013fd3
 801011c:	08013fe4 	.word	0x08013fe4

08010120 <__mcmp>:
 8010120:	690a      	ldr	r2, [r1, #16]
 8010122:	4603      	mov	r3, r0
 8010124:	6900      	ldr	r0, [r0, #16]
 8010126:	1a80      	subs	r0, r0, r2
 8010128:	b530      	push	{r4, r5, lr}
 801012a:	d10e      	bne.n	801014a <__mcmp+0x2a>
 801012c:	3314      	adds	r3, #20
 801012e:	3114      	adds	r1, #20
 8010130:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010134:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010138:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801013c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010140:	4295      	cmp	r5, r2
 8010142:	d003      	beq.n	801014c <__mcmp+0x2c>
 8010144:	d205      	bcs.n	8010152 <__mcmp+0x32>
 8010146:	f04f 30ff 	mov.w	r0, #4294967295
 801014a:	bd30      	pop	{r4, r5, pc}
 801014c:	42a3      	cmp	r3, r4
 801014e:	d3f3      	bcc.n	8010138 <__mcmp+0x18>
 8010150:	e7fb      	b.n	801014a <__mcmp+0x2a>
 8010152:	2001      	movs	r0, #1
 8010154:	e7f9      	b.n	801014a <__mcmp+0x2a>
	...

08010158 <__mdiff>:
 8010158:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801015c:	4689      	mov	r9, r1
 801015e:	4606      	mov	r6, r0
 8010160:	4611      	mov	r1, r2
 8010162:	4648      	mov	r0, r9
 8010164:	4614      	mov	r4, r2
 8010166:	f7ff ffdb 	bl	8010120 <__mcmp>
 801016a:	1e05      	subs	r5, r0, #0
 801016c:	d112      	bne.n	8010194 <__mdiff+0x3c>
 801016e:	4629      	mov	r1, r5
 8010170:	4630      	mov	r0, r6
 8010172:	f7ff fd11 	bl	800fb98 <_Balloc>
 8010176:	4602      	mov	r2, r0
 8010178:	b928      	cbnz	r0, 8010186 <__mdiff+0x2e>
 801017a:	4b3f      	ldr	r3, [pc, #252]	@ (8010278 <__mdiff+0x120>)
 801017c:	f240 2137 	movw	r1, #567	@ 0x237
 8010180:	483e      	ldr	r0, [pc, #248]	@ (801027c <__mdiff+0x124>)
 8010182:	f001 ffc9 	bl	8012118 <__assert_func>
 8010186:	2301      	movs	r3, #1
 8010188:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801018c:	4610      	mov	r0, r2
 801018e:	b003      	add	sp, #12
 8010190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010194:	bfbc      	itt	lt
 8010196:	464b      	movlt	r3, r9
 8010198:	46a1      	movlt	r9, r4
 801019a:	4630      	mov	r0, r6
 801019c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80101a0:	bfba      	itte	lt
 80101a2:	461c      	movlt	r4, r3
 80101a4:	2501      	movlt	r5, #1
 80101a6:	2500      	movge	r5, #0
 80101a8:	f7ff fcf6 	bl	800fb98 <_Balloc>
 80101ac:	4602      	mov	r2, r0
 80101ae:	b918      	cbnz	r0, 80101b8 <__mdiff+0x60>
 80101b0:	4b31      	ldr	r3, [pc, #196]	@ (8010278 <__mdiff+0x120>)
 80101b2:	f240 2145 	movw	r1, #581	@ 0x245
 80101b6:	e7e3      	b.n	8010180 <__mdiff+0x28>
 80101b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80101bc:	6926      	ldr	r6, [r4, #16]
 80101be:	60c5      	str	r5, [r0, #12]
 80101c0:	f109 0310 	add.w	r3, r9, #16
 80101c4:	f109 0514 	add.w	r5, r9, #20
 80101c8:	f104 0e14 	add.w	lr, r4, #20
 80101cc:	f100 0b14 	add.w	fp, r0, #20
 80101d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80101d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80101d8:	9301      	str	r3, [sp, #4]
 80101da:	46d9      	mov	r9, fp
 80101dc:	f04f 0c00 	mov.w	ip, #0
 80101e0:	9b01      	ldr	r3, [sp, #4]
 80101e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80101e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80101ea:	9301      	str	r3, [sp, #4]
 80101ec:	fa1f f38a 	uxth.w	r3, sl
 80101f0:	4619      	mov	r1, r3
 80101f2:	b283      	uxth	r3, r0
 80101f4:	1acb      	subs	r3, r1, r3
 80101f6:	0c00      	lsrs	r0, r0, #16
 80101f8:	4463      	add	r3, ip
 80101fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80101fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010202:	b29b      	uxth	r3, r3
 8010204:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010208:	4576      	cmp	r6, lr
 801020a:	f849 3b04 	str.w	r3, [r9], #4
 801020e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010212:	d8e5      	bhi.n	80101e0 <__mdiff+0x88>
 8010214:	1b33      	subs	r3, r6, r4
 8010216:	3b15      	subs	r3, #21
 8010218:	f023 0303 	bic.w	r3, r3, #3
 801021c:	3415      	adds	r4, #21
 801021e:	3304      	adds	r3, #4
 8010220:	42a6      	cmp	r6, r4
 8010222:	bf38      	it	cc
 8010224:	2304      	movcc	r3, #4
 8010226:	441d      	add	r5, r3
 8010228:	445b      	add	r3, fp
 801022a:	461e      	mov	r6, r3
 801022c:	462c      	mov	r4, r5
 801022e:	4544      	cmp	r4, r8
 8010230:	d30e      	bcc.n	8010250 <__mdiff+0xf8>
 8010232:	f108 0103 	add.w	r1, r8, #3
 8010236:	1b49      	subs	r1, r1, r5
 8010238:	f021 0103 	bic.w	r1, r1, #3
 801023c:	3d03      	subs	r5, #3
 801023e:	45a8      	cmp	r8, r5
 8010240:	bf38      	it	cc
 8010242:	2100      	movcc	r1, #0
 8010244:	440b      	add	r3, r1
 8010246:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801024a:	b191      	cbz	r1, 8010272 <__mdiff+0x11a>
 801024c:	6117      	str	r7, [r2, #16]
 801024e:	e79d      	b.n	801018c <__mdiff+0x34>
 8010250:	f854 1b04 	ldr.w	r1, [r4], #4
 8010254:	46e6      	mov	lr, ip
 8010256:	0c08      	lsrs	r0, r1, #16
 8010258:	fa1c fc81 	uxtah	ip, ip, r1
 801025c:	4471      	add	r1, lr
 801025e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010262:	b289      	uxth	r1, r1
 8010264:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010268:	f846 1b04 	str.w	r1, [r6], #4
 801026c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010270:	e7dd      	b.n	801022e <__mdiff+0xd6>
 8010272:	3f01      	subs	r7, #1
 8010274:	e7e7      	b.n	8010246 <__mdiff+0xee>
 8010276:	bf00      	nop
 8010278:	08013fd3 	.word	0x08013fd3
 801027c:	08013fe4 	.word	0x08013fe4

08010280 <__ulp>:
 8010280:	b082      	sub	sp, #8
 8010282:	ed8d 0b00 	vstr	d0, [sp]
 8010286:	9a01      	ldr	r2, [sp, #4]
 8010288:	4b0f      	ldr	r3, [pc, #60]	@ (80102c8 <__ulp+0x48>)
 801028a:	4013      	ands	r3, r2
 801028c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010290:	2b00      	cmp	r3, #0
 8010292:	dc08      	bgt.n	80102a6 <__ulp+0x26>
 8010294:	425b      	negs	r3, r3
 8010296:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801029a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801029e:	da04      	bge.n	80102aa <__ulp+0x2a>
 80102a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80102a4:	4113      	asrs	r3, r2
 80102a6:	2200      	movs	r2, #0
 80102a8:	e008      	b.n	80102bc <__ulp+0x3c>
 80102aa:	f1a2 0314 	sub.w	r3, r2, #20
 80102ae:	2b1e      	cmp	r3, #30
 80102b0:	bfda      	itte	le
 80102b2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80102b6:	40da      	lsrle	r2, r3
 80102b8:	2201      	movgt	r2, #1
 80102ba:	2300      	movs	r3, #0
 80102bc:	4619      	mov	r1, r3
 80102be:	4610      	mov	r0, r2
 80102c0:	ec41 0b10 	vmov	d0, r0, r1
 80102c4:	b002      	add	sp, #8
 80102c6:	4770      	bx	lr
 80102c8:	7ff00000 	.word	0x7ff00000

080102cc <__b2d>:
 80102cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102d0:	6906      	ldr	r6, [r0, #16]
 80102d2:	f100 0814 	add.w	r8, r0, #20
 80102d6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80102da:	1f37      	subs	r7, r6, #4
 80102dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80102e0:	4610      	mov	r0, r2
 80102e2:	f7ff fd4b 	bl	800fd7c <__hi0bits>
 80102e6:	f1c0 0320 	rsb	r3, r0, #32
 80102ea:	280a      	cmp	r0, #10
 80102ec:	600b      	str	r3, [r1, #0]
 80102ee:	491b      	ldr	r1, [pc, #108]	@ (801035c <__b2d+0x90>)
 80102f0:	dc15      	bgt.n	801031e <__b2d+0x52>
 80102f2:	f1c0 0c0b 	rsb	ip, r0, #11
 80102f6:	fa22 f30c 	lsr.w	r3, r2, ip
 80102fa:	45b8      	cmp	r8, r7
 80102fc:	ea43 0501 	orr.w	r5, r3, r1
 8010300:	bf34      	ite	cc
 8010302:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010306:	2300      	movcs	r3, #0
 8010308:	3015      	adds	r0, #21
 801030a:	fa02 f000 	lsl.w	r0, r2, r0
 801030e:	fa23 f30c 	lsr.w	r3, r3, ip
 8010312:	4303      	orrs	r3, r0
 8010314:	461c      	mov	r4, r3
 8010316:	ec45 4b10 	vmov	d0, r4, r5
 801031a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801031e:	45b8      	cmp	r8, r7
 8010320:	bf3a      	itte	cc
 8010322:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010326:	f1a6 0708 	subcc.w	r7, r6, #8
 801032a:	2300      	movcs	r3, #0
 801032c:	380b      	subs	r0, #11
 801032e:	d012      	beq.n	8010356 <__b2d+0x8a>
 8010330:	f1c0 0120 	rsb	r1, r0, #32
 8010334:	fa23 f401 	lsr.w	r4, r3, r1
 8010338:	4082      	lsls	r2, r0
 801033a:	4322      	orrs	r2, r4
 801033c:	4547      	cmp	r7, r8
 801033e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010342:	bf8c      	ite	hi
 8010344:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010348:	2200      	movls	r2, #0
 801034a:	4083      	lsls	r3, r0
 801034c:	40ca      	lsrs	r2, r1
 801034e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010352:	4313      	orrs	r3, r2
 8010354:	e7de      	b.n	8010314 <__b2d+0x48>
 8010356:	ea42 0501 	orr.w	r5, r2, r1
 801035a:	e7db      	b.n	8010314 <__b2d+0x48>
 801035c:	3ff00000 	.word	0x3ff00000

08010360 <__d2b>:
 8010360:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010364:	460f      	mov	r7, r1
 8010366:	2101      	movs	r1, #1
 8010368:	ec59 8b10 	vmov	r8, r9, d0
 801036c:	4616      	mov	r6, r2
 801036e:	f7ff fc13 	bl	800fb98 <_Balloc>
 8010372:	4604      	mov	r4, r0
 8010374:	b930      	cbnz	r0, 8010384 <__d2b+0x24>
 8010376:	4602      	mov	r2, r0
 8010378:	4b23      	ldr	r3, [pc, #140]	@ (8010408 <__d2b+0xa8>)
 801037a:	4824      	ldr	r0, [pc, #144]	@ (801040c <__d2b+0xac>)
 801037c:	f240 310f 	movw	r1, #783	@ 0x30f
 8010380:	f001 feca 	bl	8012118 <__assert_func>
 8010384:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010388:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801038c:	b10d      	cbz	r5, 8010392 <__d2b+0x32>
 801038e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010392:	9301      	str	r3, [sp, #4]
 8010394:	f1b8 0300 	subs.w	r3, r8, #0
 8010398:	d023      	beq.n	80103e2 <__d2b+0x82>
 801039a:	4668      	mov	r0, sp
 801039c:	9300      	str	r3, [sp, #0]
 801039e:	f7ff fd0c 	bl	800fdba <__lo0bits>
 80103a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80103a6:	b1d0      	cbz	r0, 80103de <__d2b+0x7e>
 80103a8:	f1c0 0320 	rsb	r3, r0, #32
 80103ac:	fa02 f303 	lsl.w	r3, r2, r3
 80103b0:	430b      	orrs	r3, r1
 80103b2:	40c2      	lsrs	r2, r0
 80103b4:	6163      	str	r3, [r4, #20]
 80103b6:	9201      	str	r2, [sp, #4]
 80103b8:	9b01      	ldr	r3, [sp, #4]
 80103ba:	61a3      	str	r3, [r4, #24]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	bf0c      	ite	eq
 80103c0:	2201      	moveq	r2, #1
 80103c2:	2202      	movne	r2, #2
 80103c4:	6122      	str	r2, [r4, #16]
 80103c6:	b1a5      	cbz	r5, 80103f2 <__d2b+0x92>
 80103c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80103cc:	4405      	add	r5, r0
 80103ce:	603d      	str	r5, [r7, #0]
 80103d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80103d4:	6030      	str	r0, [r6, #0]
 80103d6:	4620      	mov	r0, r4
 80103d8:	b003      	add	sp, #12
 80103da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103de:	6161      	str	r1, [r4, #20]
 80103e0:	e7ea      	b.n	80103b8 <__d2b+0x58>
 80103e2:	a801      	add	r0, sp, #4
 80103e4:	f7ff fce9 	bl	800fdba <__lo0bits>
 80103e8:	9b01      	ldr	r3, [sp, #4]
 80103ea:	6163      	str	r3, [r4, #20]
 80103ec:	3020      	adds	r0, #32
 80103ee:	2201      	movs	r2, #1
 80103f0:	e7e8      	b.n	80103c4 <__d2b+0x64>
 80103f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80103f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80103fa:	6038      	str	r0, [r7, #0]
 80103fc:	6918      	ldr	r0, [r3, #16]
 80103fe:	f7ff fcbd 	bl	800fd7c <__hi0bits>
 8010402:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010406:	e7e5      	b.n	80103d4 <__d2b+0x74>
 8010408:	08013fd3 	.word	0x08013fd3
 801040c:	08013fe4 	.word	0x08013fe4

08010410 <__ratio>:
 8010410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010414:	b085      	sub	sp, #20
 8010416:	e9cd 1000 	strd	r1, r0, [sp]
 801041a:	a902      	add	r1, sp, #8
 801041c:	f7ff ff56 	bl	80102cc <__b2d>
 8010420:	9800      	ldr	r0, [sp, #0]
 8010422:	a903      	add	r1, sp, #12
 8010424:	ec55 4b10 	vmov	r4, r5, d0
 8010428:	f7ff ff50 	bl	80102cc <__b2d>
 801042c:	9b01      	ldr	r3, [sp, #4]
 801042e:	6919      	ldr	r1, [r3, #16]
 8010430:	9b00      	ldr	r3, [sp, #0]
 8010432:	691b      	ldr	r3, [r3, #16]
 8010434:	1ac9      	subs	r1, r1, r3
 8010436:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801043a:	1a9b      	subs	r3, r3, r2
 801043c:	ec5b ab10 	vmov	sl, fp, d0
 8010440:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010444:	2b00      	cmp	r3, #0
 8010446:	bfce      	itee	gt
 8010448:	462a      	movgt	r2, r5
 801044a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801044e:	465a      	movle	r2, fp
 8010450:	462f      	mov	r7, r5
 8010452:	46d9      	mov	r9, fp
 8010454:	bfcc      	ite	gt
 8010456:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801045a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801045e:	464b      	mov	r3, r9
 8010460:	4652      	mov	r2, sl
 8010462:	4620      	mov	r0, r4
 8010464:	4639      	mov	r1, r7
 8010466:	f7f0 f9f9 	bl	800085c <__aeabi_ddiv>
 801046a:	ec41 0b10 	vmov	d0, r0, r1
 801046e:	b005      	add	sp, #20
 8010470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010474 <__copybits>:
 8010474:	3901      	subs	r1, #1
 8010476:	b570      	push	{r4, r5, r6, lr}
 8010478:	1149      	asrs	r1, r1, #5
 801047a:	6914      	ldr	r4, [r2, #16]
 801047c:	3101      	adds	r1, #1
 801047e:	f102 0314 	add.w	r3, r2, #20
 8010482:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010486:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801048a:	1f05      	subs	r5, r0, #4
 801048c:	42a3      	cmp	r3, r4
 801048e:	d30c      	bcc.n	80104aa <__copybits+0x36>
 8010490:	1aa3      	subs	r3, r4, r2
 8010492:	3b11      	subs	r3, #17
 8010494:	f023 0303 	bic.w	r3, r3, #3
 8010498:	3211      	adds	r2, #17
 801049a:	42a2      	cmp	r2, r4
 801049c:	bf88      	it	hi
 801049e:	2300      	movhi	r3, #0
 80104a0:	4418      	add	r0, r3
 80104a2:	2300      	movs	r3, #0
 80104a4:	4288      	cmp	r0, r1
 80104a6:	d305      	bcc.n	80104b4 <__copybits+0x40>
 80104a8:	bd70      	pop	{r4, r5, r6, pc}
 80104aa:	f853 6b04 	ldr.w	r6, [r3], #4
 80104ae:	f845 6f04 	str.w	r6, [r5, #4]!
 80104b2:	e7eb      	b.n	801048c <__copybits+0x18>
 80104b4:	f840 3b04 	str.w	r3, [r0], #4
 80104b8:	e7f4      	b.n	80104a4 <__copybits+0x30>

080104ba <__any_on>:
 80104ba:	f100 0214 	add.w	r2, r0, #20
 80104be:	6900      	ldr	r0, [r0, #16]
 80104c0:	114b      	asrs	r3, r1, #5
 80104c2:	4298      	cmp	r0, r3
 80104c4:	b510      	push	{r4, lr}
 80104c6:	db11      	blt.n	80104ec <__any_on+0x32>
 80104c8:	dd0a      	ble.n	80104e0 <__any_on+0x26>
 80104ca:	f011 011f 	ands.w	r1, r1, #31
 80104ce:	d007      	beq.n	80104e0 <__any_on+0x26>
 80104d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80104d4:	fa24 f001 	lsr.w	r0, r4, r1
 80104d8:	fa00 f101 	lsl.w	r1, r0, r1
 80104dc:	428c      	cmp	r4, r1
 80104de:	d10b      	bne.n	80104f8 <__any_on+0x3e>
 80104e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80104e4:	4293      	cmp	r3, r2
 80104e6:	d803      	bhi.n	80104f0 <__any_on+0x36>
 80104e8:	2000      	movs	r0, #0
 80104ea:	bd10      	pop	{r4, pc}
 80104ec:	4603      	mov	r3, r0
 80104ee:	e7f7      	b.n	80104e0 <__any_on+0x26>
 80104f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80104f4:	2900      	cmp	r1, #0
 80104f6:	d0f5      	beq.n	80104e4 <__any_on+0x2a>
 80104f8:	2001      	movs	r0, #1
 80104fa:	e7f6      	b.n	80104ea <__any_on+0x30>

080104fc <sulp>:
 80104fc:	b570      	push	{r4, r5, r6, lr}
 80104fe:	4604      	mov	r4, r0
 8010500:	460d      	mov	r5, r1
 8010502:	ec45 4b10 	vmov	d0, r4, r5
 8010506:	4616      	mov	r6, r2
 8010508:	f7ff feba 	bl	8010280 <__ulp>
 801050c:	ec51 0b10 	vmov	r0, r1, d0
 8010510:	b17e      	cbz	r6, 8010532 <sulp+0x36>
 8010512:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010516:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801051a:	2b00      	cmp	r3, #0
 801051c:	dd09      	ble.n	8010532 <sulp+0x36>
 801051e:	051b      	lsls	r3, r3, #20
 8010520:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8010524:	2400      	movs	r4, #0
 8010526:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801052a:	4622      	mov	r2, r4
 801052c:	462b      	mov	r3, r5
 801052e:	f7f0 f86b 	bl	8000608 <__aeabi_dmul>
 8010532:	ec41 0b10 	vmov	d0, r0, r1
 8010536:	bd70      	pop	{r4, r5, r6, pc}

08010538 <_strtod_l>:
 8010538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801053c:	b09f      	sub	sp, #124	@ 0x7c
 801053e:	460c      	mov	r4, r1
 8010540:	9217      	str	r2, [sp, #92]	@ 0x5c
 8010542:	2200      	movs	r2, #0
 8010544:	921a      	str	r2, [sp, #104]	@ 0x68
 8010546:	9005      	str	r0, [sp, #20]
 8010548:	f04f 0a00 	mov.w	sl, #0
 801054c:	f04f 0b00 	mov.w	fp, #0
 8010550:	460a      	mov	r2, r1
 8010552:	9219      	str	r2, [sp, #100]	@ 0x64
 8010554:	7811      	ldrb	r1, [r2, #0]
 8010556:	292b      	cmp	r1, #43	@ 0x2b
 8010558:	d04a      	beq.n	80105f0 <_strtod_l+0xb8>
 801055a:	d838      	bhi.n	80105ce <_strtod_l+0x96>
 801055c:	290d      	cmp	r1, #13
 801055e:	d832      	bhi.n	80105c6 <_strtod_l+0x8e>
 8010560:	2908      	cmp	r1, #8
 8010562:	d832      	bhi.n	80105ca <_strtod_l+0x92>
 8010564:	2900      	cmp	r1, #0
 8010566:	d03b      	beq.n	80105e0 <_strtod_l+0xa8>
 8010568:	2200      	movs	r2, #0
 801056a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801056c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801056e:	782a      	ldrb	r2, [r5, #0]
 8010570:	2a30      	cmp	r2, #48	@ 0x30
 8010572:	f040 80b3 	bne.w	80106dc <_strtod_l+0x1a4>
 8010576:	786a      	ldrb	r2, [r5, #1]
 8010578:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801057c:	2a58      	cmp	r2, #88	@ 0x58
 801057e:	d16e      	bne.n	801065e <_strtod_l+0x126>
 8010580:	9302      	str	r3, [sp, #8]
 8010582:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010584:	9301      	str	r3, [sp, #4]
 8010586:	ab1a      	add	r3, sp, #104	@ 0x68
 8010588:	9300      	str	r3, [sp, #0]
 801058a:	4a8e      	ldr	r2, [pc, #568]	@ (80107c4 <_strtod_l+0x28c>)
 801058c:	9805      	ldr	r0, [sp, #20]
 801058e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010590:	a919      	add	r1, sp, #100	@ 0x64
 8010592:	f001 fe5b 	bl	801224c <__gethex>
 8010596:	f010 060f 	ands.w	r6, r0, #15
 801059a:	4604      	mov	r4, r0
 801059c:	d005      	beq.n	80105aa <_strtod_l+0x72>
 801059e:	2e06      	cmp	r6, #6
 80105a0:	d128      	bne.n	80105f4 <_strtod_l+0xbc>
 80105a2:	3501      	adds	r5, #1
 80105a4:	2300      	movs	r3, #0
 80105a6:	9519      	str	r5, [sp, #100]	@ 0x64
 80105a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80105aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	f040 858e 	bne.w	80110ce <_strtod_l+0xb96>
 80105b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80105b4:	b1cb      	cbz	r3, 80105ea <_strtod_l+0xb2>
 80105b6:	4652      	mov	r2, sl
 80105b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80105bc:	ec43 2b10 	vmov	d0, r2, r3
 80105c0:	b01f      	add	sp, #124	@ 0x7c
 80105c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105c6:	2920      	cmp	r1, #32
 80105c8:	d1ce      	bne.n	8010568 <_strtod_l+0x30>
 80105ca:	3201      	adds	r2, #1
 80105cc:	e7c1      	b.n	8010552 <_strtod_l+0x1a>
 80105ce:	292d      	cmp	r1, #45	@ 0x2d
 80105d0:	d1ca      	bne.n	8010568 <_strtod_l+0x30>
 80105d2:	2101      	movs	r1, #1
 80105d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80105d6:	1c51      	adds	r1, r2, #1
 80105d8:	9119      	str	r1, [sp, #100]	@ 0x64
 80105da:	7852      	ldrb	r2, [r2, #1]
 80105dc:	2a00      	cmp	r2, #0
 80105de:	d1c5      	bne.n	801056c <_strtod_l+0x34>
 80105e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80105e2:	9419      	str	r4, [sp, #100]	@ 0x64
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	f040 8570 	bne.w	80110ca <_strtod_l+0xb92>
 80105ea:	4652      	mov	r2, sl
 80105ec:	465b      	mov	r3, fp
 80105ee:	e7e5      	b.n	80105bc <_strtod_l+0x84>
 80105f0:	2100      	movs	r1, #0
 80105f2:	e7ef      	b.n	80105d4 <_strtod_l+0x9c>
 80105f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80105f6:	b13a      	cbz	r2, 8010608 <_strtod_l+0xd0>
 80105f8:	2135      	movs	r1, #53	@ 0x35
 80105fa:	a81c      	add	r0, sp, #112	@ 0x70
 80105fc:	f7ff ff3a 	bl	8010474 <__copybits>
 8010600:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010602:	9805      	ldr	r0, [sp, #20]
 8010604:	f7ff fb08 	bl	800fc18 <_Bfree>
 8010608:	3e01      	subs	r6, #1
 801060a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801060c:	2e04      	cmp	r6, #4
 801060e:	d806      	bhi.n	801061e <_strtod_l+0xe6>
 8010610:	e8df f006 	tbb	[pc, r6]
 8010614:	201d0314 	.word	0x201d0314
 8010618:	14          	.byte	0x14
 8010619:	00          	.byte	0x00
 801061a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801061e:	05e1      	lsls	r1, r4, #23
 8010620:	bf48      	it	mi
 8010622:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010626:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801062a:	0d1b      	lsrs	r3, r3, #20
 801062c:	051b      	lsls	r3, r3, #20
 801062e:	2b00      	cmp	r3, #0
 8010630:	d1bb      	bne.n	80105aa <_strtod_l+0x72>
 8010632:	f7fe fb21 	bl	800ec78 <__errno>
 8010636:	2322      	movs	r3, #34	@ 0x22
 8010638:	6003      	str	r3, [r0, #0]
 801063a:	e7b6      	b.n	80105aa <_strtod_l+0x72>
 801063c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8010640:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010644:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010648:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801064c:	e7e7      	b.n	801061e <_strtod_l+0xe6>
 801064e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80107cc <_strtod_l+0x294>
 8010652:	e7e4      	b.n	801061e <_strtod_l+0xe6>
 8010654:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010658:	f04f 3aff 	mov.w	sl, #4294967295
 801065c:	e7df      	b.n	801061e <_strtod_l+0xe6>
 801065e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010660:	1c5a      	adds	r2, r3, #1
 8010662:	9219      	str	r2, [sp, #100]	@ 0x64
 8010664:	785b      	ldrb	r3, [r3, #1]
 8010666:	2b30      	cmp	r3, #48	@ 0x30
 8010668:	d0f9      	beq.n	801065e <_strtod_l+0x126>
 801066a:	2b00      	cmp	r3, #0
 801066c:	d09d      	beq.n	80105aa <_strtod_l+0x72>
 801066e:	2301      	movs	r3, #1
 8010670:	9309      	str	r3, [sp, #36]	@ 0x24
 8010672:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010674:	930c      	str	r3, [sp, #48]	@ 0x30
 8010676:	2300      	movs	r3, #0
 8010678:	9308      	str	r3, [sp, #32]
 801067a:	930a      	str	r3, [sp, #40]	@ 0x28
 801067c:	461f      	mov	r7, r3
 801067e:	220a      	movs	r2, #10
 8010680:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8010682:	7805      	ldrb	r5, [r0, #0]
 8010684:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8010688:	b2d9      	uxtb	r1, r3
 801068a:	2909      	cmp	r1, #9
 801068c:	d928      	bls.n	80106e0 <_strtod_l+0x1a8>
 801068e:	494e      	ldr	r1, [pc, #312]	@ (80107c8 <_strtod_l+0x290>)
 8010690:	2201      	movs	r2, #1
 8010692:	f7fe fa95 	bl	800ebc0 <strncmp>
 8010696:	2800      	cmp	r0, #0
 8010698:	d032      	beq.n	8010700 <_strtod_l+0x1c8>
 801069a:	2000      	movs	r0, #0
 801069c:	462a      	mov	r2, r5
 801069e:	4681      	mov	r9, r0
 80106a0:	463d      	mov	r5, r7
 80106a2:	4603      	mov	r3, r0
 80106a4:	2a65      	cmp	r2, #101	@ 0x65
 80106a6:	d001      	beq.n	80106ac <_strtod_l+0x174>
 80106a8:	2a45      	cmp	r2, #69	@ 0x45
 80106aa:	d114      	bne.n	80106d6 <_strtod_l+0x19e>
 80106ac:	b91d      	cbnz	r5, 80106b6 <_strtod_l+0x17e>
 80106ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80106b0:	4302      	orrs	r2, r0
 80106b2:	d095      	beq.n	80105e0 <_strtod_l+0xa8>
 80106b4:	2500      	movs	r5, #0
 80106b6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80106b8:	1c62      	adds	r2, r4, #1
 80106ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80106bc:	7862      	ldrb	r2, [r4, #1]
 80106be:	2a2b      	cmp	r2, #43	@ 0x2b
 80106c0:	d077      	beq.n	80107b2 <_strtod_l+0x27a>
 80106c2:	2a2d      	cmp	r2, #45	@ 0x2d
 80106c4:	d07b      	beq.n	80107be <_strtod_l+0x286>
 80106c6:	f04f 0c00 	mov.w	ip, #0
 80106ca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80106ce:	2909      	cmp	r1, #9
 80106d0:	f240 8082 	bls.w	80107d8 <_strtod_l+0x2a0>
 80106d4:	9419      	str	r4, [sp, #100]	@ 0x64
 80106d6:	f04f 0800 	mov.w	r8, #0
 80106da:	e0a2      	b.n	8010822 <_strtod_l+0x2ea>
 80106dc:	2300      	movs	r3, #0
 80106de:	e7c7      	b.n	8010670 <_strtod_l+0x138>
 80106e0:	2f08      	cmp	r7, #8
 80106e2:	bfd5      	itete	le
 80106e4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80106e6:	9908      	ldrgt	r1, [sp, #32]
 80106e8:	fb02 3301 	mlale	r3, r2, r1, r3
 80106ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 80106f0:	f100 0001 	add.w	r0, r0, #1
 80106f4:	bfd4      	ite	le
 80106f6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80106f8:	9308      	strgt	r3, [sp, #32]
 80106fa:	3701      	adds	r7, #1
 80106fc:	9019      	str	r0, [sp, #100]	@ 0x64
 80106fe:	e7bf      	b.n	8010680 <_strtod_l+0x148>
 8010700:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010702:	1c5a      	adds	r2, r3, #1
 8010704:	9219      	str	r2, [sp, #100]	@ 0x64
 8010706:	785a      	ldrb	r2, [r3, #1]
 8010708:	b37f      	cbz	r7, 801076a <_strtod_l+0x232>
 801070a:	4681      	mov	r9, r0
 801070c:	463d      	mov	r5, r7
 801070e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8010712:	2b09      	cmp	r3, #9
 8010714:	d912      	bls.n	801073c <_strtod_l+0x204>
 8010716:	2301      	movs	r3, #1
 8010718:	e7c4      	b.n	80106a4 <_strtod_l+0x16c>
 801071a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801071c:	1c5a      	adds	r2, r3, #1
 801071e:	9219      	str	r2, [sp, #100]	@ 0x64
 8010720:	785a      	ldrb	r2, [r3, #1]
 8010722:	3001      	adds	r0, #1
 8010724:	2a30      	cmp	r2, #48	@ 0x30
 8010726:	d0f8      	beq.n	801071a <_strtod_l+0x1e2>
 8010728:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801072c:	2b08      	cmp	r3, #8
 801072e:	f200 84d3 	bhi.w	80110d8 <_strtod_l+0xba0>
 8010732:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010734:	930c      	str	r3, [sp, #48]	@ 0x30
 8010736:	4681      	mov	r9, r0
 8010738:	2000      	movs	r0, #0
 801073a:	4605      	mov	r5, r0
 801073c:	3a30      	subs	r2, #48	@ 0x30
 801073e:	f100 0301 	add.w	r3, r0, #1
 8010742:	d02a      	beq.n	801079a <_strtod_l+0x262>
 8010744:	4499      	add	r9, r3
 8010746:	eb00 0c05 	add.w	ip, r0, r5
 801074a:	462b      	mov	r3, r5
 801074c:	210a      	movs	r1, #10
 801074e:	4563      	cmp	r3, ip
 8010750:	d10d      	bne.n	801076e <_strtod_l+0x236>
 8010752:	1c69      	adds	r1, r5, #1
 8010754:	4401      	add	r1, r0
 8010756:	4428      	add	r0, r5
 8010758:	2808      	cmp	r0, #8
 801075a:	dc16      	bgt.n	801078a <_strtod_l+0x252>
 801075c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801075e:	230a      	movs	r3, #10
 8010760:	fb03 2300 	mla	r3, r3, r0, r2
 8010764:	930a      	str	r3, [sp, #40]	@ 0x28
 8010766:	2300      	movs	r3, #0
 8010768:	e018      	b.n	801079c <_strtod_l+0x264>
 801076a:	4638      	mov	r0, r7
 801076c:	e7da      	b.n	8010724 <_strtod_l+0x1ec>
 801076e:	2b08      	cmp	r3, #8
 8010770:	f103 0301 	add.w	r3, r3, #1
 8010774:	dc03      	bgt.n	801077e <_strtod_l+0x246>
 8010776:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010778:	434e      	muls	r6, r1
 801077a:	960a      	str	r6, [sp, #40]	@ 0x28
 801077c:	e7e7      	b.n	801074e <_strtod_l+0x216>
 801077e:	2b10      	cmp	r3, #16
 8010780:	bfde      	ittt	le
 8010782:	9e08      	ldrle	r6, [sp, #32]
 8010784:	434e      	mulle	r6, r1
 8010786:	9608      	strle	r6, [sp, #32]
 8010788:	e7e1      	b.n	801074e <_strtod_l+0x216>
 801078a:	280f      	cmp	r0, #15
 801078c:	dceb      	bgt.n	8010766 <_strtod_l+0x22e>
 801078e:	9808      	ldr	r0, [sp, #32]
 8010790:	230a      	movs	r3, #10
 8010792:	fb03 2300 	mla	r3, r3, r0, r2
 8010796:	9308      	str	r3, [sp, #32]
 8010798:	e7e5      	b.n	8010766 <_strtod_l+0x22e>
 801079a:	4629      	mov	r1, r5
 801079c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801079e:	1c50      	adds	r0, r2, #1
 80107a0:	9019      	str	r0, [sp, #100]	@ 0x64
 80107a2:	7852      	ldrb	r2, [r2, #1]
 80107a4:	4618      	mov	r0, r3
 80107a6:	460d      	mov	r5, r1
 80107a8:	e7b1      	b.n	801070e <_strtod_l+0x1d6>
 80107aa:	f04f 0900 	mov.w	r9, #0
 80107ae:	2301      	movs	r3, #1
 80107b0:	e77d      	b.n	80106ae <_strtod_l+0x176>
 80107b2:	f04f 0c00 	mov.w	ip, #0
 80107b6:	1ca2      	adds	r2, r4, #2
 80107b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80107ba:	78a2      	ldrb	r2, [r4, #2]
 80107bc:	e785      	b.n	80106ca <_strtod_l+0x192>
 80107be:	f04f 0c01 	mov.w	ip, #1
 80107c2:	e7f8      	b.n	80107b6 <_strtod_l+0x27e>
 80107c4:	08014158 	.word	0x08014158
 80107c8:	08014140 	.word	0x08014140
 80107cc:	7ff00000 	.word	0x7ff00000
 80107d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80107d2:	1c51      	adds	r1, r2, #1
 80107d4:	9119      	str	r1, [sp, #100]	@ 0x64
 80107d6:	7852      	ldrb	r2, [r2, #1]
 80107d8:	2a30      	cmp	r2, #48	@ 0x30
 80107da:	d0f9      	beq.n	80107d0 <_strtod_l+0x298>
 80107dc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80107e0:	2908      	cmp	r1, #8
 80107e2:	f63f af78 	bhi.w	80106d6 <_strtod_l+0x19e>
 80107e6:	3a30      	subs	r2, #48	@ 0x30
 80107e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80107ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80107ec:	920f      	str	r2, [sp, #60]	@ 0x3c
 80107ee:	f04f 080a 	mov.w	r8, #10
 80107f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80107f4:	1c56      	adds	r6, r2, #1
 80107f6:	9619      	str	r6, [sp, #100]	@ 0x64
 80107f8:	7852      	ldrb	r2, [r2, #1]
 80107fa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80107fe:	f1be 0f09 	cmp.w	lr, #9
 8010802:	d939      	bls.n	8010878 <_strtod_l+0x340>
 8010804:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010806:	1a76      	subs	r6, r6, r1
 8010808:	2e08      	cmp	r6, #8
 801080a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801080e:	dc03      	bgt.n	8010818 <_strtod_l+0x2e0>
 8010810:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010812:	4588      	cmp	r8, r1
 8010814:	bfa8      	it	ge
 8010816:	4688      	movge	r8, r1
 8010818:	f1bc 0f00 	cmp.w	ip, #0
 801081c:	d001      	beq.n	8010822 <_strtod_l+0x2ea>
 801081e:	f1c8 0800 	rsb	r8, r8, #0
 8010822:	2d00      	cmp	r5, #0
 8010824:	d14e      	bne.n	80108c4 <_strtod_l+0x38c>
 8010826:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010828:	4308      	orrs	r0, r1
 801082a:	f47f aebe 	bne.w	80105aa <_strtod_l+0x72>
 801082e:	2b00      	cmp	r3, #0
 8010830:	f47f aed6 	bne.w	80105e0 <_strtod_l+0xa8>
 8010834:	2a69      	cmp	r2, #105	@ 0x69
 8010836:	d028      	beq.n	801088a <_strtod_l+0x352>
 8010838:	dc25      	bgt.n	8010886 <_strtod_l+0x34e>
 801083a:	2a49      	cmp	r2, #73	@ 0x49
 801083c:	d025      	beq.n	801088a <_strtod_l+0x352>
 801083e:	2a4e      	cmp	r2, #78	@ 0x4e
 8010840:	f47f aece 	bne.w	80105e0 <_strtod_l+0xa8>
 8010844:	499b      	ldr	r1, [pc, #620]	@ (8010ab4 <_strtod_l+0x57c>)
 8010846:	a819      	add	r0, sp, #100	@ 0x64
 8010848:	f001 ff22 	bl	8012690 <__match>
 801084c:	2800      	cmp	r0, #0
 801084e:	f43f aec7 	beq.w	80105e0 <_strtod_l+0xa8>
 8010852:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010854:	781b      	ldrb	r3, [r3, #0]
 8010856:	2b28      	cmp	r3, #40	@ 0x28
 8010858:	d12e      	bne.n	80108b8 <_strtod_l+0x380>
 801085a:	4997      	ldr	r1, [pc, #604]	@ (8010ab8 <_strtod_l+0x580>)
 801085c:	aa1c      	add	r2, sp, #112	@ 0x70
 801085e:	a819      	add	r0, sp, #100	@ 0x64
 8010860:	f001 ff2a 	bl	80126b8 <__hexnan>
 8010864:	2805      	cmp	r0, #5
 8010866:	d127      	bne.n	80108b8 <_strtod_l+0x380>
 8010868:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801086a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801086e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8010872:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8010876:	e698      	b.n	80105aa <_strtod_l+0x72>
 8010878:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801087a:	fb08 2101 	mla	r1, r8, r1, r2
 801087e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8010882:	920e      	str	r2, [sp, #56]	@ 0x38
 8010884:	e7b5      	b.n	80107f2 <_strtod_l+0x2ba>
 8010886:	2a6e      	cmp	r2, #110	@ 0x6e
 8010888:	e7da      	b.n	8010840 <_strtod_l+0x308>
 801088a:	498c      	ldr	r1, [pc, #560]	@ (8010abc <_strtod_l+0x584>)
 801088c:	a819      	add	r0, sp, #100	@ 0x64
 801088e:	f001 feff 	bl	8012690 <__match>
 8010892:	2800      	cmp	r0, #0
 8010894:	f43f aea4 	beq.w	80105e0 <_strtod_l+0xa8>
 8010898:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801089a:	4989      	ldr	r1, [pc, #548]	@ (8010ac0 <_strtod_l+0x588>)
 801089c:	3b01      	subs	r3, #1
 801089e:	a819      	add	r0, sp, #100	@ 0x64
 80108a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80108a2:	f001 fef5 	bl	8012690 <__match>
 80108a6:	b910      	cbnz	r0, 80108ae <_strtod_l+0x376>
 80108a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80108aa:	3301      	adds	r3, #1
 80108ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80108ae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8010ad0 <_strtod_l+0x598>
 80108b2:	f04f 0a00 	mov.w	sl, #0
 80108b6:	e678      	b.n	80105aa <_strtod_l+0x72>
 80108b8:	4882      	ldr	r0, [pc, #520]	@ (8010ac4 <_strtod_l+0x58c>)
 80108ba:	f001 fc25 	bl	8012108 <nan>
 80108be:	ec5b ab10 	vmov	sl, fp, d0
 80108c2:	e672      	b.n	80105aa <_strtod_l+0x72>
 80108c4:	eba8 0309 	sub.w	r3, r8, r9
 80108c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80108ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80108cc:	2f00      	cmp	r7, #0
 80108ce:	bf08      	it	eq
 80108d0:	462f      	moveq	r7, r5
 80108d2:	2d10      	cmp	r5, #16
 80108d4:	462c      	mov	r4, r5
 80108d6:	bfa8      	it	ge
 80108d8:	2410      	movge	r4, #16
 80108da:	f7ef fe1b 	bl	8000514 <__aeabi_ui2d>
 80108de:	2d09      	cmp	r5, #9
 80108e0:	4682      	mov	sl, r0
 80108e2:	468b      	mov	fp, r1
 80108e4:	dc13      	bgt.n	801090e <_strtod_l+0x3d6>
 80108e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	f43f ae5e 	beq.w	80105aa <_strtod_l+0x72>
 80108ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108f0:	dd78      	ble.n	80109e4 <_strtod_l+0x4ac>
 80108f2:	2b16      	cmp	r3, #22
 80108f4:	dc5f      	bgt.n	80109b6 <_strtod_l+0x47e>
 80108f6:	4974      	ldr	r1, [pc, #464]	@ (8010ac8 <_strtod_l+0x590>)
 80108f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80108fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010900:	4652      	mov	r2, sl
 8010902:	465b      	mov	r3, fp
 8010904:	f7ef fe80 	bl	8000608 <__aeabi_dmul>
 8010908:	4682      	mov	sl, r0
 801090a:	468b      	mov	fp, r1
 801090c:	e64d      	b.n	80105aa <_strtod_l+0x72>
 801090e:	4b6e      	ldr	r3, [pc, #440]	@ (8010ac8 <_strtod_l+0x590>)
 8010910:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010914:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010918:	f7ef fe76 	bl	8000608 <__aeabi_dmul>
 801091c:	4682      	mov	sl, r0
 801091e:	9808      	ldr	r0, [sp, #32]
 8010920:	468b      	mov	fp, r1
 8010922:	f7ef fdf7 	bl	8000514 <__aeabi_ui2d>
 8010926:	4602      	mov	r2, r0
 8010928:	460b      	mov	r3, r1
 801092a:	4650      	mov	r0, sl
 801092c:	4659      	mov	r1, fp
 801092e:	f7ef fcb5 	bl	800029c <__adddf3>
 8010932:	2d0f      	cmp	r5, #15
 8010934:	4682      	mov	sl, r0
 8010936:	468b      	mov	fp, r1
 8010938:	ddd5      	ble.n	80108e6 <_strtod_l+0x3ae>
 801093a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801093c:	1b2c      	subs	r4, r5, r4
 801093e:	441c      	add	r4, r3
 8010940:	2c00      	cmp	r4, #0
 8010942:	f340 8096 	ble.w	8010a72 <_strtod_l+0x53a>
 8010946:	f014 030f 	ands.w	r3, r4, #15
 801094a:	d00a      	beq.n	8010962 <_strtod_l+0x42a>
 801094c:	495e      	ldr	r1, [pc, #376]	@ (8010ac8 <_strtod_l+0x590>)
 801094e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010952:	4652      	mov	r2, sl
 8010954:	465b      	mov	r3, fp
 8010956:	e9d1 0100 	ldrd	r0, r1, [r1]
 801095a:	f7ef fe55 	bl	8000608 <__aeabi_dmul>
 801095e:	4682      	mov	sl, r0
 8010960:	468b      	mov	fp, r1
 8010962:	f034 040f 	bics.w	r4, r4, #15
 8010966:	d073      	beq.n	8010a50 <_strtod_l+0x518>
 8010968:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801096c:	dd48      	ble.n	8010a00 <_strtod_l+0x4c8>
 801096e:	2400      	movs	r4, #0
 8010970:	46a0      	mov	r8, r4
 8010972:	940a      	str	r4, [sp, #40]	@ 0x28
 8010974:	46a1      	mov	r9, r4
 8010976:	9a05      	ldr	r2, [sp, #20]
 8010978:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8010ad0 <_strtod_l+0x598>
 801097c:	2322      	movs	r3, #34	@ 0x22
 801097e:	6013      	str	r3, [r2, #0]
 8010980:	f04f 0a00 	mov.w	sl, #0
 8010984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010986:	2b00      	cmp	r3, #0
 8010988:	f43f ae0f 	beq.w	80105aa <_strtod_l+0x72>
 801098c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801098e:	9805      	ldr	r0, [sp, #20]
 8010990:	f7ff f942 	bl	800fc18 <_Bfree>
 8010994:	9805      	ldr	r0, [sp, #20]
 8010996:	4649      	mov	r1, r9
 8010998:	f7ff f93e 	bl	800fc18 <_Bfree>
 801099c:	9805      	ldr	r0, [sp, #20]
 801099e:	4641      	mov	r1, r8
 80109a0:	f7ff f93a 	bl	800fc18 <_Bfree>
 80109a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80109a6:	9805      	ldr	r0, [sp, #20]
 80109a8:	f7ff f936 	bl	800fc18 <_Bfree>
 80109ac:	9805      	ldr	r0, [sp, #20]
 80109ae:	4621      	mov	r1, r4
 80109b0:	f7ff f932 	bl	800fc18 <_Bfree>
 80109b4:	e5f9      	b.n	80105aa <_strtod_l+0x72>
 80109b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80109b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80109bc:	4293      	cmp	r3, r2
 80109be:	dbbc      	blt.n	801093a <_strtod_l+0x402>
 80109c0:	4c41      	ldr	r4, [pc, #260]	@ (8010ac8 <_strtod_l+0x590>)
 80109c2:	f1c5 050f 	rsb	r5, r5, #15
 80109c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80109ca:	4652      	mov	r2, sl
 80109cc:	465b      	mov	r3, fp
 80109ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109d2:	f7ef fe19 	bl	8000608 <__aeabi_dmul>
 80109d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109d8:	1b5d      	subs	r5, r3, r5
 80109da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80109de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80109e2:	e78f      	b.n	8010904 <_strtod_l+0x3cc>
 80109e4:	3316      	adds	r3, #22
 80109e6:	dba8      	blt.n	801093a <_strtod_l+0x402>
 80109e8:	4b37      	ldr	r3, [pc, #220]	@ (8010ac8 <_strtod_l+0x590>)
 80109ea:	eba9 0808 	sub.w	r8, r9, r8
 80109ee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80109f2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80109f6:	4650      	mov	r0, sl
 80109f8:	4659      	mov	r1, fp
 80109fa:	f7ef ff2f 	bl	800085c <__aeabi_ddiv>
 80109fe:	e783      	b.n	8010908 <_strtod_l+0x3d0>
 8010a00:	4b32      	ldr	r3, [pc, #200]	@ (8010acc <_strtod_l+0x594>)
 8010a02:	9308      	str	r3, [sp, #32]
 8010a04:	2300      	movs	r3, #0
 8010a06:	1124      	asrs	r4, r4, #4
 8010a08:	4650      	mov	r0, sl
 8010a0a:	4659      	mov	r1, fp
 8010a0c:	461e      	mov	r6, r3
 8010a0e:	2c01      	cmp	r4, #1
 8010a10:	dc21      	bgt.n	8010a56 <_strtod_l+0x51e>
 8010a12:	b10b      	cbz	r3, 8010a18 <_strtod_l+0x4e0>
 8010a14:	4682      	mov	sl, r0
 8010a16:	468b      	mov	fp, r1
 8010a18:	492c      	ldr	r1, [pc, #176]	@ (8010acc <_strtod_l+0x594>)
 8010a1a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010a1e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8010a22:	4652      	mov	r2, sl
 8010a24:	465b      	mov	r3, fp
 8010a26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a2a:	f7ef fded 	bl	8000608 <__aeabi_dmul>
 8010a2e:	4b28      	ldr	r3, [pc, #160]	@ (8010ad0 <_strtod_l+0x598>)
 8010a30:	460a      	mov	r2, r1
 8010a32:	400b      	ands	r3, r1
 8010a34:	4927      	ldr	r1, [pc, #156]	@ (8010ad4 <_strtod_l+0x59c>)
 8010a36:	428b      	cmp	r3, r1
 8010a38:	4682      	mov	sl, r0
 8010a3a:	d898      	bhi.n	801096e <_strtod_l+0x436>
 8010a3c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8010a40:	428b      	cmp	r3, r1
 8010a42:	bf86      	itte	hi
 8010a44:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8010ad8 <_strtod_l+0x5a0>
 8010a48:	f04f 3aff 	movhi.w	sl, #4294967295
 8010a4c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8010a50:	2300      	movs	r3, #0
 8010a52:	9308      	str	r3, [sp, #32]
 8010a54:	e07a      	b.n	8010b4c <_strtod_l+0x614>
 8010a56:	07e2      	lsls	r2, r4, #31
 8010a58:	d505      	bpl.n	8010a66 <_strtod_l+0x52e>
 8010a5a:	9b08      	ldr	r3, [sp, #32]
 8010a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a60:	f7ef fdd2 	bl	8000608 <__aeabi_dmul>
 8010a64:	2301      	movs	r3, #1
 8010a66:	9a08      	ldr	r2, [sp, #32]
 8010a68:	3208      	adds	r2, #8
 8010a6a:	3601      	adds	r6, #1
 8010a6c:	1064      	asrs	r4, r4, #1
 8010a6e:	9208      	str	r2, [sp, #32]
 8010a70:	e7cd      	b.n	8010a0e <_strtod_l+0x4d6>
 8010a72:	d0ed      	beq.n	8010a50 <_strtod_l+0x518>
 8010a74:	4264      	negs	r4, r4
 8010a76:	f014 020f 	ands.w	r2, r4, #15
 8010a7a:	d00a      	beq.n	8010a92 <_strtod_l+0x55a>
 8010a7c:	4b12      	ldr	r3, [pc, #72]	@ (8010ac8 <_strtod_l+0x590>)
 8010a7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a82:	4650      	mov	r0, sl
 8010a84:	4659      	mov	r1, fp
 8010a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a8a:	f7ef fee7 	bl	800085c <__aeabi_ddiv>
 8010a8e:	4682      	mov	sl, r0
 8010a90:	468b      	mov	fp, r1
 8010a92:	1124      	asrs	r4, r4, #4
 8010a94:	d0dc      	beq.n	8010a50 <_strtod_l+0x518>
 8010a96:	2c1f      	cmp	r4, #31
 8010a98:	dd20      	ble.n	8010adc <_strtod_l+0x5a4>
 8010a9a:	2400      	movs	r4, #0
 8010a9c:	46a0      	mov	r8, r4
 8010a9e:	940a      	str	r4, [sp, #40]	@ 0x28
 8010aa0:	46a1      	mov	r9, r4
 8010aa2:	9a05      	ldr	r2, [sp, #20]
 8010aa4:	2322      	movs	r3, #34	@ 0x22
 8010aa6:	f04f 0a00 	mov.w	sl, #0
 8010aaa:	f04f 0b00 	mov.w	fp, #0
 8010aae:	6013      	str	r3, [r2, #0]
 8010ab0:	e768      	b.n	8010984 <_strtod_l+0x44c>
 8010ab2:	bf00      	nop
 8010ab4:	08013f2d 	.word	0x08013f2d
 8010ab8:	08014144 	.word	0x08014144
 8010abc:	08013f25 	.word	0x08013f25
 8010ac0:	08013f5a 	.word	0x08013f5a
 8010ac4:	08014308 	.word	0x08014308
 8010ac8:	08014078 	.word	0x08014078
 8010acc:	08014050 	.word	0x08014050
 8010ad0:	7ff00000 	.word	0x7ff00000
 8010ad4:	7ca00000 	.word	0x7ca00000
 8010ad8:	7fefffff 	.word	0x7fefffff
 8010adc:	f014 0310 	ands.w	r3, r4, #16
 8010ae0:	bf18      	it	ne
 8010ae2:	236a      	movne	r3, #106	@ 0x6a
 8010ae4:	4ea9      	ldr	r6, [pc, #676]	@ (8010d8c <_strtod_l+0x854>)
 8010ae6:	9308      	str	r3, [sp, #32]
 8010ae8:	4650      	mov	r0, sl
 8010aea:	4659      	mov	r1, fp
 8010aec:	2300      	movs	r3, #0
 8010aee:	07e2      	lsls	r2, r4, #31
 8010af0:	d504      	bpl.n	8010afc <_strtod_l+0x5c4>
 8010af2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010af6:	f7ef fd87 	bl	8000608 <__aeabi_dmul>
 8010afa:	2301      	movs	r3, #1
 8010afc:	1064      	asrs	r4, r4, #1
 8010afe:	f106 0608 	add.w	r6, r6, #8
 8010b02:	d1f4      	bne.n	8010aee <_strtod_l+0x5b6>
 8010b04:	b10b      	cbz	r3, 8010b0a <_strtod_l+0x5d2>
 8010b06:	4682      	mov	sl, r0
 8010b08:	468b      	mov	fp, r1
 8010b0a:	9b08      	ldr	r3, [sp, #32]
 8010b0c:	b1b3      	cbz	r3, 8010b3c <_strtod_l+0x604>
 8010b0e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010b12:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	4659      	mov	r1, fp
 8010b1a:	dd0f      	ble.n	8010b3c <_strtod_l+0x604>
 8010b1c:	2b1f      	cmp	r3, #31
 8010b1e:	dd55      	ble.n	8010bcc <_strtod_l+0x694>
 8010b20:	2b34      	cmp	r3, #52	@ 0x34
 8010b22:	bfde      	ittt	le
 8010b24:	f04f 33ff 	movle.w	r3, #4294967295
 8010b28:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8010b2c:	4093      	lslle	r3, r2
 8010b2e:	f04f 0a00 	mov.w	sl, #0
 8010b32:	bfcc      	ite	gt
 8010b34:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8010b38:	ea03 0b01 	andle.w	fp, r3, r1
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	2300      	movs	r3, #0
 8010b40:	4650      	mov	r0, sl
 8010b42:	4659      	mov	r1, fp
 8010b44:	f7ef ffc8 	bl	8000ad8 <__aeabi_dcmpeq>
 8010b48:	2800      	cmp	r0, #0
 8010b4a:	d1a6      	bne.n	8010a9a <_strtod_l+0x562>
 8010b4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b4e:	9300      	str	r3, [sp, #0]
 8010b50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010b52:	9805      	ldr	r0, [sp, #20]
 8010b54:	462b      	mov	r3, r5
 8010b56:	463a      	mov	r2, r7
 8010b58:	f7ff f8c6 	bl	800fce8 <__s2b>
 8010b5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8010b5e:	2800      	cmp	r0, #0
 8010b60:	f43f af05 	beq.w	801096e <_strtod_l+0x436>
 8010b64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010b66:	2a00      	cmp	r2, #0
 8010b68:	eba9 0308 	sub.w	r3, r9, r8
 8010b6c:	bfa8      	it	ge
 8010b6e:	2300      	movge	r3, #0
 8010b70:	9312      	str	r3, [sp, #72]	@ 0x48
 8010b72:	2400      	movs	r4, #0
 8010b74:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010b78:	9316      	str	r3, [sp, #88]	@ 0x58
 8010b7a:	46a0      	mov	r8, r4
 8010b7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b7e:	9805      	ldr	r0, [sp, #20]
 8010b80:	6859      	ldr	r1, [r3, #4]
 8010b82:	f7ff f809 	bl	800fb98 <_Balloc>
 8010b86:	4681      	mov	r9, r0
 8010b88:	2800      	cmp	r0, #0
 8010b8a:	f43f aef4 	beq.w	8010976 <_strtod_l+0x43e>
 8010b8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b90:	691a      	ldr	r2, [r3, #16]
 8010b92:	3202      	adds	r2, #2
 8010b94:	f103 010c 	add.w	r1, r3, #12
 8010b98:	0092      	lsls	r2, r2, #2
 8010b9a:	300c      	adds	r0, #12
 8010b9c:	f7fe f899 	bl	800ecd2 <memcpy>
 8010ba0:	ec4b ab10 	vmov	d0, sl, fp
 8010ba4:	9805      	ldr	r0, [sp, #20]
 8010ba6:	aa1c      	add	r2, sp, #112	@ 0x70
 8010ba8:	a91b      	add	r1, sp, #108	@ 0x6c
 8010baa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8010bae:	f7ff fbd7 	bl	8010360 <__d2b>
 8010bb2:	901a      	str	r0, [sp, #104]	@ 0x68
 8010bb4:	2800      	cmp	r0, #0
 8010bb6:	f43f aede 	beq.w	8010976 <_strtod_l+0x43e>
 8010bba:	9805      	ldr	r0, [sp, #20]
 8010bbc:	2101      	movs	r1, #1
 8010bbe:	f7ff f929 	bl	800fe14 <__i2b>
 8010bc2:	4680      	mov	r8, r0
 8010bc4:	b948      	cbnz	r0, 8010bda <_strtod_l+0x6a2>
 8010bc6:	f04f 0800 	mov.w	r8, #0
 8010bca:	e6d4      	b.n	8010976 <_strtod_l+0x43e>
 8010bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8010bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8010bd4:	ea03 0a0a 	and.w	sl, r3, sl
 8010bd8:	e7b0      	b.n	8010b3c <_strtod_l+0x604>
 8010bda:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8010bdc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010bde:	2d00      	cmp	r5, #0
 8010be0:	bfab      	itete	ge
 8010be2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8010be4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8010be6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010be8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8010bea:	bfac      	ite	ge
 8010bec:	18ef      	addge	r7, r5, r3
 8010bee:	1b5e      	sublt	r6, r3, r5
 8010bf0:	9b08      	ldr	r3, [sp, #32]
 8010bf2:	1aed      	subs	r5, r5, r3
 8010bf4:	4415      	add	r5, r2
 8010bf6:	4b66      	ldr	r3, [pc, #408]	@ (8010d90 <_strtod_l+0x858>)
 8010bf8:	3d01      	subs	r5, #1
 8010bfa:	429d      	cmp	r5, r3
 8010bfc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010c00:	da50      	bge.n	8010ca4 <_strtod_l+0x76c>
 8010c02:	1b5b      	subs	r3, r3, r5
 8010c04:	2b1f      	cmp	r3, #31
 8010c06:	eba2 0203 	sub.w	r2, r2, r3
 8010c0a:	f04f 0101 	mov.w	r1, #1
 8010c0e:	dc3d      	bgt.n	8010c8c <_strtod_l+0x754>
 8010c10:	fa01 f303 	lsl.w	r3, r1, r3
 8010c14:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010c16:	2300      	movs	r3, #0
 8010c18:	9310      	str	r3, [sp, #64]	@ 0x40
 8010c1a:	18bd      	adds	r5, r7, r2
 8010c1c:	9b08      	ldr	r3, [sp, #32]
 8010c1e:	42af      	cmp	r7, r5
 8010c20:	4416      	add	r6, r2
 8010c22:	441e      	add	r6, r3
 8010c24:	463b      	mov	r3, r7
 8010c26:	bfa8      	it	ge
 8010c28:	462b      	movge	r3, r5
 8010c2a:	42b3      	cmp	r3, r6
 8010c2c:	bfa8      	it	ge
 8010c2e:	4633      	movge	r3, r6
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	bfc2      	ittt	gt
 8010c34:	1aed      	subgt	r5, r5, r3
 8010c36:	1af6      	subgt	r6, r6, r3
 8010c38:	1aff      	subgt	r7, r7, r3
 8010c3a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	dd16      	ble.n	8010c6e <_strtod_l+0x736>
 8010c40:	4641      	mov	r1, r8
 8010c42:	9805      	ldr	r0, [sp, #20]
 8010c44:	461a      	mov	r2, r3
 8010c46:	f7ff f9a5 	bl	800ff94 <__pow5mult>
 8010c4a:	4680      	mov	r8, r0
 8010c4c:	2800      	cmp	r0, #0
 8010c4e:	d0ba      	beq.n	8010bc6 <_strtod_l+0x68e>
 8010c50:	4601      	mov	r1, r0
 8010c52:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010c54:	9805      	ldr	r0, [sp, #20]
 8010c56:	f7ff f8f3 	bl	800fe40 <__multiply>
 8010c5a:	900e      	str	r0, [sp, #56]	@ 0x38
 8010c5c:	2800      	cmp	r0, #0
 8010c5e:	f43f ae8a 	beq.w	8010976 <_strtod_l+0x43e>
 8010c62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010c64:	9805      	ldr	r0, [sp, #20]
 8010c66:	f7fe ffd7 	bl	800fc18 <_Bfree>
 8010c6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8010c6e:	2d00      	cmp	r5, #0
 8010c70:	dc1d      	bgt.n	8010cae <_strtod_l+0x776>
 8010c72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	dd23      	ble.n	8010cc0 <_strtod_l+0x788>
 8010c78:	4649      	mov	r1, r9
 8010c7a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010c7c:	9805      	ldr	r0, [sp, #20]
 8010c7e:	f7ff f989 	bl	800ff94 <__pow5mult>
 8010c82:	4681      	mov	r9, r0
 8010c84:	b9e0      	cbnz	r0, 8010cc0 <_strtod_l+0x788>
 8010c86:	f04f 0900 	mov.w	r9, #0
 8010c8a:	e674      	b.n	8010976 <_strtod_l+0x43e>
 8010c8c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8010c90:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8010c94:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010c98:	35e2      	adds	r5, #226	@ 0xe2
 8010c9a:	fa01 f305 	lsl.w	r3, r1, r5
 8010c9e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010ca0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010ca2:	e7ba      	b.n	8010c1a <_strtod_l+0x6e2>
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	9310      	str	r3, [sp, #64]	@ 0x40
 8010ca8:	2301      	movs	r3, #1
 8010caa:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010cac:	e7b5      	b.n	8010c1a <_strtod_l+0x6e2>
 8010cae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010cb0:	9805      	ldr	r0, [sp, #20]
 8010cb2:	462a      	mov	r2, r5
 8010cb4:	f7ff f9c8 	bl	8010048 <__lshift>
 8010cb8:	901a      	str	r0, [sp, #104]	@ 0x68
 8010cba:	2800      	cmp	r0, #0
 8010cbc:	d1d9      	bne.n	8010c72 <_strtod_l+0x73a>
 8010cbe:	e65a      	b.n	8010976 <_strtod_l+0x43e>
 8010cc0:	2e00      	cmp	r6, #0
 8010cc2:	dd07      	ble.n	8010cd4 <_strtod_l+0x79c>
 8010cc4:	4649      	mov	r1, r9
 8010cc6:	9805      	ldr	r0, [sp, #20]
 8010cc8:	4632      	mov	r2, r6
 8010cca:	f7ff f9bd 	bl	8010048 <__lshift>
 8010cce:	4681      	mov	r9, r0
 8010cd0:	2800      	cmp	r0, #0
 8010cd2:	d0d8      	beq.n	8010c86 <_strtod_l+0x74e>
 8010cd4:	2f00      	cmp	r7, #0
 8010cd6:	dd08      	ble.n	8010cea <_strtod_l+0x7b2>
 8010cd8:	4641      	mov	r1, r8
 8010cda:	9805      	ldr	r0, [sp, #20]
 8010cdc:	463a      	mov	r2, r7
 8010cde:	f7ff f9b3 	bl	8010048 <__lshift>
 8010ce2:	4680      	mov	r8, r0
 8010ce4:	2800      	cmp	r0, #0
 8010ce6:	f43f ae46 	beq.w	8010976 <_strtod_l+0x43e>
 8010cea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010cec:	9805      	ldr	r0, [sp, #20]
 8010cee:	464a      	mov	r2, r9
 8010cf0:	f7ff fa32 	bl	8010158 <__mdiff>
 8010cf4:	4604      	mov	r4, r0
 8010cf6:	2800      	cmp	r0, #0
 8010cf8:	f43f ae3d 	beq.w	8010976 <_strtod_l+0x43e>
 8010cfc:	68c3      	ldr	r3, [r0, #12]
 8010cfe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010d00:	2300      	movs	r3, #0
 8010d02:	60c3      	str	r3, [r0, #12]
 8010d04:	4641      	mov	r1, r8
 8010d06:	f7ff fa0b 	bl	8010120 <__mcmp>
 8010d0a:	2800      	cmp	r0, #0
 8010d0c:	da46      	bge.n	8010d9c <_strtod_l+0x864>
 8010d0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d10:	ea53 030a 	orrs.w	r3, r3, sl
 8010d14:	d16c      	bne.n	8010df0 <_strtod_l+0x8b8>
 8010d16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d168      	bne.n	8010df0 <_strtod_l+0x8b8>
 8010d1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010d22:	0d1b      	lsrs	r3, r3, #20
 8010d24:	051b      	lsls	r3, r3, #20
 8010d26:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010d2a:	d961      	bls.n	8010df0 <_strtod_l+0x8b8>
 8010d2c:	6963      	ldr	r3, [r4, #20]
 8010d2e:	b913      	cbnz	r3, 8010d36 <_strtod_l+0x7fe>
 8010d30:	6923      	ldr	r3, [r4, #16]
 8010d32:	2b01      	cmp	r3, #1
 8010d34:	dd5c      	ble.n	8010df0 <_strtod_l+0x8b8>
 8010d36:	4621      	mov	r1, r4
 8010d38:	2201      	movs	r2, #1
 8010d3a:	9805      	ldr	r0, [sp, #20]
 8010d3c:	f7ff f984 	bl	8010048 <__lshift>
 8010d40:	4641      	mov	r1, r8
 8010d42:	4604      	mov	r4, r0
 8010d44:	f7ff f9ec 	bl	8010120 <__mcmp>
 8010d48:	2800      	cmp	r0, #0
 8010d4a:	dd51      	ble.n	8010df0 <_strtod_l+0x8b8>
 8010d4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010d50:	9a08      	ldr	r2, [sp, #32]
 8010d52:	0d1b      	lsrs	r3, r3, #20
 8010d54:	051b      	lsls	r3, r3, #20
 8010d56:	2a00      	cmp	r2, #0
 8010d58:	d06b      	beq.n	8010e32 <_strtod_l+0x8fa>
 8010d5a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010d5e:	d868      	bhi.n	8010e32 <_strtod_l+0x8fa>
 8010d60:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8010d64:	f67f ae9d 	bls.w	8010aa2 <_strtod_l+0x56a>
 8010d68:	4b0a      	ldr	r3, [pc, #40]	@ (8010d94 <_strtod_l+0x85c>)
 8010d6a:	4650      	mov	r0, sl
 8010d6c:	4659      	mov	r1, fp
 8010d6e:	2200      	movs	r2, #0
 8010d70:	f7ef fc4a 	bl	8000608 <__aeabi_dmul>
 8010d74:	4b08      	ldr	r3, [pc, #32]	@ (8010d98 <_strtod_l+0x860>)
 8010d76:	400b      	ands	r3, r1
 8010d78:	4682      	mov	sl, r0
 8010d7a:	468b      	mov	fp, r1
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	f47f ae05 	bne.w	801098c <_strtod_l+0x454>
 8010d82:	9a05      	ldr	r2, [sp, #20]
 8010d84:	2322      	movs	r3, #34	@ 0x22
 8010d86:	6013      	str	r3, [r2, #0]
 8010d88:	e600      	b.n	801098c <_strtod_l+0x454>
 8010d8a:	bf00      	nop
 8010d8c:	08014170 	.word	0x08014170
 8010d90:	fffffc02 	.word	0xfffffc02
 8010d94:	39500000 	.word	0x39500000
 8010d98:	7ff00000 	.word	0x7ff00000
 8010d9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010da0:	d165      	bne.n	8010e6e <_strtod_l+0x936>
 8010da2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010da4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010da8:	b35a      	cbz	r2, 8010e02 <_strtod_l+0x8ca>
 8010daa:	4a9f      	ldr	r2, [pc, #636]	@ (8011028 <_strtod_l+0xaf0>)
 8010dac:	4293      	cmp	r3, r2
 8010dae:	d12b      	bne.n	8010e08 <_strtod_l+0x8d0>
 8010db0:	9b08      	ldr	r3, [sp, #32]
 8010db2:	4651      	mov	r1, sl
 8010db4:	b303      	cbz	r3, 8010df8 <_strtod_l+0x8c0>
 8010db6:	4b9d      	ldr	r3, [pc, #628]	@ (801102c <_strtod_l+0xaf4>)
 8010db8:	465a      	mov	r2, fp
 8010dba:	4013      	ands	r3, r2
 8010dbc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8010dc4:	d81b      	bhi.n	8010dfe <_strtod_l+0x8c6>
 8010dc6:	0d1b      	lsrs	r3, r3, #20
 8010dc8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8010dd0:	4299      	cmp	r1, r3
 8010dd2:	d119      	bne.n	8010e08 <_strtod_l+0x8d0>
 8010dd4:	4b96      	ldr	r3, [pc, #600]	@ (8011030 <_strtod_l+0xaf8>)
 8010dd6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010dd8:	429a      	cmp	r2, r3
 8010dda:	d102      	bne.n	8010de2 <_strtod_l+0x8aa>
 8010ddc:	3101      	adds	r1, #1
 8010dde:	f43f adca 	beq.w	8010976 <_strtod_l+0x43e>
 8010de2:	4b92      	ldr	r3, [pc, #584]	@ (801102c <_strtod_l+0xaf4>)
 8010de4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010de6:	401a      	ands	r2, r3
 8010de8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8010dec:	f04f 0a00 	mov.w	sl, #0
 8010df0:	9b08      	ldr	r3, [sp, #32]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d1b8      	bne.n	8010d68 <_strtod_l+0x830>
 8010df6:	e5c9      	b.n	801098c <_strtod_l+0x454>
 8010df8:	f04f 33ff 	mov.w	r3, #4294967295
 8010dfc:	e7e8      	b.n	8010dd0 <_strtod_l+0x898>
 8010dfe:	4613      	mov	r3, r2
 8010e00:	e7e6      	b.n	8010dd0 <_strtod_l+0x898>
 8010e02:	ea53 030a 	orrs.w	r3, r3, sl
 8010e06:	d0a1      	beq.n	8010d4c <_strtod_l+0x814>
 8010e08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010e0a:	b1db      	cbz	r3, 8010e44 <_strtod_l+0x90c>
 8010e0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010e0e:	4213      	tst	r3, r2
 8010e10:	d0ee      	beq.n	8010df0 <_strtod_l+0x8b8>
 8010e12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e14:	9a08      	ldr	r2, [sp, #32]
 8010e16:	4650      	mov	r0, sl
 8010e18:	4659      	mov	r1, fp
 8010e1a:	b1bb      	cbz	r3, 8010e4c <_strtod_l+0x914>
 8010e1c:	f7ff fb6e 	bl	80104fc <sulp>
 8010e20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010e24:	ec53 2b10 	vmov	r2, r3, d0
 8010e28:	f7ef fa38 	bl	800029c <__adddf3>
 8010e2c:	4682      	mov	sl, r0
 8010e2e:	468b      	mov	fp, r1
 8010e30:	e7de      	b.n	8010df0 <_strtod_l+0x8b8>
 8010e32:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010e36:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010e3a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010e3e:	f04f 3aff 	mov.w	sl, #4294967295
 8010e42:	e7d5      	b.n	8010df0 <_strtod_l+0x8b8>
 8010e44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010e46:	ea13 0f0a 	tst.w	r3, sl
 8010e4a:	e7e1      	b.n	8010e10 <_strtod_l+0x8d8>
 8010e4c:	f7ff fb56 	bl	80104fc <sulp>
 8010e50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010e54:	ec53 2b10 	vmov	r2, r3, d0
 8010e58:	f7ef fa1e 	bl	8000298 <__aeabi_dsub>
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	2300      	movs	r3, #0
 8010e60:	4682      	mov	sl, r0
 8010e62:	468b      	mov	fp, r1
 8010e64:	f7ef fe38 	bl	8000ad8 <__aeabi_dcmpeq>
 8010e68:	2800      	cmp	r0, #0
 8010e6a:	d0c1      	beq.n	8010df0 <_strtod_l+0x8b8>
 8010e6c:	e619      	b.n	8010aa2 <_strtod_l+0x56a>
 8010e6e:	4641      	mov	r1, r8
 8010e70:	4620      	mov	r0, r4
 8010e72:	f7ff facd 	bl	8010410 <__ratio>
 8010e76:	ec57 6b10 	vmov	r6, r7, d0
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010e80:	4630      	mov	r0, r6
 8010e82:	4639      	mov	r1, r7
 8010e84:	f7ef fe3c 	bl	8000b00 <__aeabi_dcmple>
 8010e88:	2800      	cmp	r0, #0
 8010e8a:	d06f      	beq.n	8010f6c <_strtod_l+0xa34>
 8010e8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d17a      	bne.n	8010f88 <_strtod_l+0xa50>
 8010e92:	f1ba 0f00 	cmp.w	sl, #0
 8010e96:	d158      	bne.n	8010f4a <_strtod_l+0xa12>
 8010e98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010e9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d15a      	bne.n	8010f58 <_strtod_l+0xa20>
 8010ea2:	4b64      	ldr	r3, [pc, #400]	@ (8011034 <_strtod_l+0xafc>)
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	4630      	mov	r0, r6
 8010ea8:	4639      	mov	r1, r7
 8010eaa:	f7ef fe1f 	bl	8000aec <__aeabi_dcmplt>
 8010eae:	2800      	cmp	r0, #0
 8010eb0:	d159      	bne.n	8010f66 <_strtod_l+0xa2e>
 8010eb2:	4630      	mov	r0, r6
 8010eb4:	4639      	mov	r1, r7
 8010eb6:	4b60      	ldr	r3, [pc, #384]	@ (8011038 <_strtod_l+0xb00>)
 8010eb8:	2200      	movs	r2, #0
 8010eba:	f7ef fba5 	bl	8000608 <__aeabi_dmul>
 8010ebe:	4606      	mov	r6, r0
 8010ec0:	460f      	mov	r7, r1
 8010ec2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8010ec6:	9606      	str	r6, [sp, #24]
 8010ec8:	9307      	str	r3, [sp, #28]
 8010eca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010ece:	4d57      	ldr	r5, [pc, #348]	@ (801102c <_strtod_l+0xaf4>)
 8010ed0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010ed4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ed6:	401d      	ands	r5, r3
 8010ed8:	4b58      	ldr	r3, [pc, #352]	@ (801103c <_strtod_l+0xb04>)
 8010eda:	429d      	cmp	r5, r3
 8010edc:	f040 80b2 	bne.w	8011044 <_strtod_l+0xb0c>
 8010ee0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ee2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8010ee6:	ec4b ab10 	vmov	d0, sl, fp
 8010eea:	f7ff f9c9 	bl	8010280 <__ulp>
 8010eee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010ef2:	ec51 0b10 	vmov	r0, r1, d0
 8010ef6:	f7ef fb87 	bl	8000608 <__aeabi_dmul>
 8010efa:	4652      	mov	r2, sl
 8010efc:	465b      	mov	r3, fp
 8010efe:	f7ef f9cd 	bl	800029c <__adddf3>
 8010f02:	460b      	mov	r3, r1
 8010f04:	4949      	ldr	r1, [pc, #292]	@ (801102c <_strtod_l+0xaf4>)
 8010f06:	4a4e      	ldr	r2, [pc, #312]	@ (8011040 <_strtod_l+0xb08>)
 8010f08:	4019      	ands	r1, r3
 8010f0a:	4291      	cmp	r1, r2
 8010f0c:	4682      	mov	sl, r0
 8010f0e:	d942      	bls.n	8010f96 <_strtod_l+0xa5e>
 8010f10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010f12:	4b47      	ldr	r3, [pc, #284]	@ (8011030 <_strtod_l+0xaf8>)
 8010f14:	429a      	cmp	r2, r3
 8010f16:	d103      	bne.n	8010f20 <_strtod_l+0x9e8>
 8010f18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010f1a:	3301      	adds	r3, #1
 8010f1c:	f43f ad2b 	beq.w	8010976 <_strtod_l+0x43e>
 8010f20:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8011030 <_strtod_l+0xaf8>
 8010f24:	f04f 3aff 	mov.w	sl, #4294967295
 8010f28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010f2a:	9805      	ldr	r0, [sp, #20]
 8010f2c:	f7fe fe74 	bl	800fc18 <_Bfree>
 8010f30:	9805      	ldr	r0, [sp, #20]
 8010f32:	4649      	mov	r1, r9
 8010f34:	f7fe fe70 	bl	800fc18 <_Bfree>
 8010f38:	9805      	ldr	r0, [sp, #20]
 8010f3a:	4641      	mov	r1, r8
 8010f3c:	f7fe fe6c 	bl	800fc18 <_Bfree>
 8010f40:	9805      	ldr	r0, [sp, #20]
 8010f42:	4621      	mov	r1, r4
 8010f44:	f7fe fe68 	bl	800fc18 <_Bfree>
 8010f48:	e618      	b.n	8010b7c <_strtod_l+0x644>
 8010f4a:	f1ba 0f01 	cmp.w	sl, #1
 8010f4e:	d103      	bne.n	8010f58 <_strtod_l+0xa20>
 8010f50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	f43f ada5 	beq.w	8010aa2 <_strtod_l+0x56a>
 8010f58:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8011008 <_strtod_l+0xad0>
 8010f5c:	4f35      	ldr	r7, [pc, #212]	@ (8011034 <_strtod_l+0xafc>)
 8010f5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010f62:	2600      	movs	r6, #0
 8010f64:	e7b1      	b.n	8010eca <_strtod_l+0x992>
 8010f66:	4f34      	ldr	r7, [pc, #208]	@ (8011038 <_strtod_l+0xb00>)
 8010f68:	2600      	movs	r6, #0
 8010f6a:	e7aa      	b.n	8010ec2 <_strtod_l+0x98a>
 8010f6c:	4b32      	ldr	r3, [pc, #200]	@ (8011038 <_strtod_l+0xb00>)
 8010f6e:	4630      	mov	r0, r6
 8010f70:	4639      	mov	r1, r7
 8010f72:	2200      	movs	r2, #0
 8010f74:	f7ef fb48 	bl	8000608 <__aeabi_dmul>
 8010f78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010f7a:	4606      	mov	r6, r0
 8010f7c:	460f      	mov	r7, r1
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d09f      	beq.n	8010ec2 <_strtod_l+0x98a>
 8010f82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010f86:	e7a0      	b.n	8010eca <_strtod_l+0x992>
 8010f88:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8011010 <_strtod_l+0xad8>
 8010f8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010f90:	ec57 6b17 	vmov	r6, r7, d7
 8010f94:	e799      	b.n	8010eca <_strtod_l+0x992>
 8010f96:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010f9a:	9b08      	ldr	r3, [sp, #32]
 8010f9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d1c1      	bne.n	8010f28 <_strtod_l+0x9f0>
 8010fa4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010fa8:	0d1b      	lsrs	r3, r3, #20
 8010faa:	051b      	lsls	r3, r3, #20
 8010fac:	429d      	cmp	r5, r3
 8010fae:	d1bb      	bne.n	8010f28 <_strtod_l+0x9f0>
 8010fb0:	4630      	mov	r0, r6
 8010fb2:	4639      	mov	r1, r7
 8010fb4:	f7ef fe88 	bl	8000cc8 <__aeabi_d2lz>
 8010fb8:	f7ef faf8 	bl	80005ac <__aeabi_l2d>
 8010fbc:	4602      	mov	r2, r0
 8010fbe:	460b      	mov	r3, r1
 8010fc0:	4630      	mov	r0, r6
 8010fc2:	4639      	mov	r1, r7
 8010fc4:	f7ef f968 	bl	8000298 <__aeabi_dsub>
 8010fc8:	460b      	mov	r3, r1
 8010fca:	4602      	mov	r2, r0
 8010fcc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010fd0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8010fd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010fd6:	ea46 060a 	orr.w	r6, r6, sl
 8010fda:	431e      	orrs	r6, r3
 8010fdc:	d06f      	beq.n	80110be <_strtod_l+0xb86>
 8010fde:	a30e      	add	r3, pc, #56	@ (adr r3, 8011018 <_strtod_l+0xae0>)
 8010fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fe4:	f7ef fd82 	bl	8000aec <__aeabi_dcmplt>
 8010fe8:	2800      	cmp	r0, #0
 8010fea:	f47f accf 	bne.w	801098c <_strtod_l+0x454>
 8010fee:	a30c      	add	r3, pc, #48	@ (adr r3, 8011020 <_strtod_l+0xae8>)
 8010ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ff4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010ff8:	f7ef fd96 	bl	8000b28 <__aeabi_dcmpgt>
 8010ffc:	2800      	cmp	r0, #0
 8010ffe:	d093      	beq.n	8010f28 <_strtod_l+0x9f0>
 8011000:	e4c4      	b.n	801098c <_strtod_l+0x454>
 8011002:	bf00      	nop
 8011004:	f3af 8000 	nop.w
 8011008:	00000000 	.word	0x00000000
 801100c:	bff00000 	.word	0xbff00000
 8011010:	00000000 	.word	0x00000000
 8011014:	3ff00000 	.word	0x3ff00000
 8011018:	94a03595 	.word	0x94a03595
 801101c:	3fdfffff 	.word	0x3fdfffff
 8011020:	35afe535 	.word	0x35afe535
 8011024:	3fe00000 	.word	0x3fe00000
 8011028:	000fffff 	.word	0x000fffff
 801102c:	7ff00000 	.word	0x7ff00000
 8011030:	7fefffff 	.word	0x7fefffff
 8011034:	3ff00000 	.word	0x3ff00000
 8011038:	3fe00000 	.word	0x3fe00000
 801103c:	7fe00000 	.word	0x7fe00000
 8011040:	7c9fffff 	.word	0x7c9fffff
 8011044:	9b08      	ldr	r3, [sp, #32]
 8011046:	b323      	cbz	r3, 8011092 <_strtod_l+0xb5a>
 8011048:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801104c:	d821      	bhi.n	8011092 <_strtod_l+0xb5a>
 801104e:	a328      	add	r3, pc, #160	@ (adr r3, 80110f0 <_strtod_l+0xbb8>)
 8011050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011054:	4630      	mov	r0, r6
 8011056:	4639      	mov	r1, r7
 8011058:	f7ef fd52 	bl	8000b00 <__aeabi_dcmple>
 801105c:	b1a0      	cbz	r0, 8011088 <_strtod_l+0xb50>
 801105e:	4639      	mov	r1, r7
 8011060:	4630      	mov	r0, r6
 8011062:	f7ef fda9 	bl	8000bb8 <__aeabi_d2uiz>
 8011066:	2801      	cmp	r0, #1
 8011068:	bf38      	it	cc
 801106a:	2001      	movcc	r0, #1
 801106c:	f7ef fa52 	bl	8000514 <__aeabi_ui2d>
 8011070:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011072:	4606      	mov	r6, r0
 8011074:	460f      	mov	r7, r1
 8011076:	b9fb      	cbnz	r3, 80110b8 <_strtod_l+0xb80>
 8011078:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801107c:	9014      	str	r0, [sp, #80]	@ 0x50
 801107e:	9315      	str	r3, [sp, #84]	@ 0x54
 8011080:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8011084:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011088:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801108a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801108e:	1b5b      	subs	r3, r3, r5
 8011090:	9311      	str	r3, [sp, #68]	@ 0x44
 8011092:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011096:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801109a:	f7ff f8f1 	bl	8010280 <__ulp>
 801109e:	4650      	mov	r0, sl
 80110a0:	ec53 2b10 	vmov	r2, r3, d0
 80110a4:	4659      	mov	r1, fp
 80110a6:	f7ef faaf 	bl	8000608 <__aeabi_dmul>
 80110aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80110ae:	f7ef f8f5 	bl	800029c <__adddf3>
 80110b2:	4682      	mov	sl, r0
 80110b4:	468b      	mov	fp, r1
 80110b6:	e770      	b.n	8010f9a <_strtod_l+0xa62>
 80110b8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80110bc:	e7e0      	b.n	8011080 <_strtod_l+0xb48>
 80110be:	a30e      	add	r3, pc, #56	@ (adr r3, 80110f8 <_strtod_l+0xbc0>)
 80110c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110c4:	f7ef fd12 	bl	8000aec <__aeabi_dcmplt>
 80110c8:	e798      	b.n	8010ffc <_strtod_l+0xac4>
 80110ca:	2300      	movs	r3, #0
 80110cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80110ce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80110d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80110d2:	6013      	str	r3, [r2, #0]
 80110d4:	f7ff ba6d 	b.w	80105b2 <_strtod_l+0x7a>
 80110d8:	2a65      	cmp	r2, #101	@ 0x65
 80110da:	f43f ab66 	beq.w	80107aa <_strtod_l+0x272>
 80110de:	2a45      	cmp	r2, #69	@ 0x45
 80110e0:	f43f ab63 	beq.w	80107aa <_strtod_l+0x272>
 80110e4:	2301      	movs	r3, #1
 80110e6:	f7ff bb9e 	b.w	8010826 <_strtod_l+0x2ee>
 80110ea:	bf00      	nop
 80110ec:	f3af 8000 	nop.w
 80110f0:	ffc00000 	.word	0xffc00000
 80110f4:	41dfffff 	.word	0x41dfffff
 80110f8:	94a03595 	.word	0x94a03595
 80110fc:	3fcfffff 	.word	0x3fcfffff

08011100 <_strtod_r>:
 8011100:	4b01      	ldr	r3, [pc, #4]	@ (8011108 <_strtod_r+0x8>)
 8011102:	f7ff ba19 	b.w	8010538 <_strtod_l>
 8011106:	bf00      	nop
 8011108:	20000078 	.word	0x20000078

0801110c <_strtol_l.constprop.0>:
 801110c:	2b24      	cmp	r3, #36	@ 0x24
 801110e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011112:	4686      	mov	lr, r0
 8011114:	4690      	mov	r8, r2
 8011116:	d801      	bhi.n	801111c <_strtol_l.constprop.0+0x10>
 8011118:	2b01      	cmp	r3, #1
 801111a:	d106      	bne.n	801112a <_strtol_l.constprop.0+0x1e>
 801111c:	f7fd fdac 	bl	800ec78 <__errno>
 8011120:	2316      	movs	r3, #22
 8011122:	6003      	str	r3, [r0, #0]
 8011124:	2000      	movs	r0, #0
 8011126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801112a:	4834      	ldr	r0, [pc, #208]	@ (80111fc <_strtol_l.constprop.0+0xf0>)
 801112c:	460d      	mov	r5, r1
 801112e:	462a      	mov	r2, r5
 8011130:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011134:	5d06      	ldrb	r6, [r0, r4]
 8011136:	f016 0608 	ands.w	r6, r6, #8
 801113a:	d1f8      	bne.n	801112e <_strtol_l.constprop.0+0x22>
 801113c:	2c2d      	cmp	r4, #45	@ 0x2d
 801113e:	d12d      	bne.n	801119c <_strtol_l.constprop.0+0x90>
 8011140:	782c      	ldrb	r4, [r5, #0]
 8011142:	2601      	movs	r6, #1
 8011144:	1c95      	adds	r5, r2, #2
 8011146:	f033 0210 	bics.w	r2, r3, #16
 801114a:	d109      	bne.n	8011160 <_strtol_l.constprop.0+0x54>
 801114c:	2c30      	cmp	r4, #48	@ 0x30
 801114e:	d12a      	bne.n	80111a6 <_strtol_l.constprop.0+0x9a>
 8011150:	782a      	ldrb	r2, [r5, #0]
 8011152:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011156:	2a58      	cmp	r2, #88	@ 0x58
 8011158:	d125      	bne.n	80111a6 <_strtol_l.constprop.0+0x9a>
 801115a:	786c      	ldrb	r4, [r5, #1]
 801115c:	2310      	movs	r3, #16
 801115e:	3502      	adds	r5, #2
 8011160:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011164:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011168:	2200      	movs	r2, #0
 801116a:	fbbc f9f3 	udiv	r9, ip, r3
 801116e:	4610      	mov	r0, r2
 8011170:	fb03 ca19 	mls	sl, r3, r9, ip
 8011174:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011178:	2f09      	cmp	r7, #9
 801117a:	d81b      	bhi.n	80111b4 <_strtol_l.constprop.0+0xa8>
 801117c:	463c      	mov	r4, r7
 801117e:	42a3      	cmp	r3, r4
 8011180:	dd27      	ble.n	80111d2 <_strtol_l.constprop.0+0xc6>
 8011182:	1c57      	adds	r7, r2, #1
 8011184:	d007      	beq.n	8011196 <_strtol_l.constprop.0+0x8a>
 8011186:	4581      	cmp	r9, r0
 8011188:	d320      	bcc.n	80111cc <_strtol_l.constprop.0+0xc0>
 801118a:	d101      	bne.n	8011190 <_strtol_l.constprop.0+0x84>
 801118c:	45a2      	cmp	sl, r4
 801118e:	db1d      	blt.n	80111cc <_strtol_l.constprop.0+0xc0>
 8011190:	fb00 4003 	mla	r0, r0, r3, r4
 8011194:	2201      	movs	r2, #1
 8011196:	f815 4b01 	ldrb.w	r4, [r5], #1
 801119a:	e7eb      	b.n	8011174 <_strtol_l.constprop.0+0x68>
 801119c:	2c2b      	cmp	r4, #43	@ 0x2b
 801119e:	bf04      	itt	eq
 80111a0:	782c      	ldrbeq	r4, [r5, #0]
 80111a2:	1c95      	addeq	r5, r2, #2
 80111a4:	e7cf      	b.n	8011146 <_strtol_l.constprop.0+0x3a>
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d1da      	bne.n	8011160 <_strtol_l.constprop.0+0x54>
 80111aa:	2c30      	cmp	r4, #48	@ 0x30
 80111ac:	bf0c      	ite	eq
 80111ae:	2308      	moveq	r3, #8
 80111b0:	230a      	movne	r3, #10
 80111b2:	e7d5      	b.n	8011160 <_strtol_l.constprop.0+0x54>
 80111b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80111b8:	2f19      	cmp	r7, #25
 80111ba:	d801      	bhi.n	80111c0 <_strtol_l.constprop.0+0xb4>
 80111bc:	3c37      	subs	r4, #55	@ 0x37
 80111be:	e7de      	b.n	801117e <_strtol_l.constprop.0+0x72>
 80111c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80111c4:	2f19      	cmp	r7, #25
 80111c6:	d804      	bhi.n	80111d2 <_strtol_l.constprop.0+0xc6>
 80111c8:	3c57      	subs	r4, #87	@ 0x57
 80111ca:	e7d8      	b.n	801117e <_strtol_l.constprop.0+0x72>
 80111cc:	f04f 32ff 	mov.w	r2, #4294967295
 80111d0:	e7e1      	b.n	8011196 <_strtol_l.constprop.0+0x8a>
 80111d2:	1c53      	adds	r3, r2, #1
 80111d4:	d108      	bne.n	80111e8 <_strtol_l.constprop.0+0xdc>
 80111d6:	2322      	movs	r3, #34	@ 0x22
 80111d8:	f8ce 3000 	str.w	r3, [lr]
 80111dc:	4660      	mov	r0, ip
 80111de:	f1b8 0f00 	cmp.w	r8, #0
 80111e2:	d0a0      	beq.n	8011126 <_strtol_l.constprop.0+0x1a>
 80111e4:	1e69      	subs	r1, r5, #1
 80111e6:	e006      	b.n	80111f6 <_strtol_l.constprop.0+0xea>
 80111e8:	b106      	cbz	r6, 80111ec <_strtol_l.constprop.0+0xe0>
 80111ea:	4240      	negs	r0, r0
 80111ec:	f1b8 0f00 	cmp.w	r8, #0
 80111f0:	d099      	beq.n	8011126 <_strtol_l.constprop.0+0x1a>
 80111f2:	2a00      	cmp	r2, #0
 80111f4:	d1f6      	bne.n	80111e4 <_strtol_l.constprop.0+0xd8>
 80111f6:	f8c8 1000 	str.w	r1, [r8]
 80111fa:	e794      	b.n	8011126 <_strtol_l.constprop.0+0x1a>
 80111fc:	08014199 	.word	0x08014199

08011200 <_strtol_r>:
 8011200:	f7ff bf84 	b.w	801110c <_strtol_l.constprop.0>

08011204 <__ssputs_r>:
 8011204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011208:	688e      	ldr	r6, [r1, #8]
 801120a:	461f      	mov	r7, r3
 801120c:	42be      	cmp	r6, r7
 801120e:	680b      	ldr	r3, [r1, #0]
 8011210:	4682      	mov	sl, r0
 8011212:	460c      	mov	r4, r1
 8011214:	4690      	mov	r8, r2
 8011216:	d82d      	bhi.n	8011274 <__ssputs_r+0x70>
 8011218:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801121c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011220:	d026      	beq.n	8011270 <__ssputs_r+0x6c>
 8011222:	6965      	ldr	r5, [r4, #20]
 8011224:	6909      	ldr	r1, [r1, #16]
 8011226:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801122a:	eba3 0901 	sub.w	r9, r3, r1
 801122e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011232:	1c7b      	adds	r3, r7, #1
 8011234:	444b      	add	r3, r9
 8011236:	106d      	asrs	r5, r5, #1
 8011238:	429d      	cmp	r5, r3
 801123a:	bf38      	it	cc
 801123c:	461d      	movcc	r5, r3
 801123e:	0553      	lsls	r3, r2, #21
 8011240:	d527      	bpl.n	8011292 <__ssputs_r+0x8e>
 8011242:	4629      	mov	r1, r5
 8011244:	f7fe fc1c 	bl	800fa80 <_malloc_r>
 8011248:	4606      	mov	r6, r0
 801124a:	b360      	cbz	r0, 80112a6 <__ssputs_r+0xa2>
 801124c:	6921      	ldr	r1, [r4, #16]
 801124e:	464a      	mov	r2, r9
 8011250:	f7fd fd3f 	bl	800ecd2 <memcpy>
 8011254:	89a3      	ldrh	r3, [r4, #12]
 8011256:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801125a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801125e:	81a3      	strh	r3, [r4, #12]
 8011260:	6126      	str	r6, [r4, #16]
 8011262:	6165      	str	r5, [r4, #20]
 8011264:	444e      	add	r6, r9
 8011266:	eba5 0509 	sub.w	r5, r5, r9
 801126a:	6026      	str	r6, [r4, #0]
 801126c:	60a5      	str	r5, [r4, #8]
 801126e:	463e      	mov	r6, r7
 8011270:	42be      	cmp	r6, r7
 8011272:	d900      	bls.n	8011276 <__ssputs_r+0x72>
 8011274:	463e      	mov	r6, r7
 8011276:	6820      	ldr	r0, [r4, #0]
 8011278:	4632      	mov	r2, r6
 801127a:	4641      	mov	r1, r8
 801127c:	f000 fef7 	bl	801206e <memmove>
 8011280:	68a3      	ldr	r3, [r4, #8]
 8011282:	1b9b      	subs	r3, r3, r6
 8011284:	60a3      	str	r3, [r4, #8]
 8011286:	6823      	ldr	r3, [r4, #0]
 8011288:	4433      	add	r3, r6
 801128a:	6023      	str	r3, [r4, #0]
 801128c:	2000      	movs	r0, #0
 801128e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011292:	462a      	mov	r2, r5
 8011294:	f001 fabd 	bl	8012812 <_realloc_r>
 8011298:	4606      	mov	r6, r0
 801129a:	2800      	cmp	r0, #0
 801129c:	d1e0      	bne.n	8011260 <__ssputs_r+0x5c>
 801129e:	6921      	ldr	r1, [r4, #16]
 80112a0:	4650      	mov	r0, sl
 80112a2:	f7fe fb79 	bl	800f998 <_free_r>
 80112a6:	230c      	movs	r3, #12
 80112a8:	f8ca 3000 	str.w	r3, [sl]
 80112ac:	89a3      	ldrh	r3, [r4, #12]
 80112ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80112b2:	81a3      	strh	r3, [r4, #12]
 80112b4:	f04f 30ff 	mov.w	r0, #4294967295
 80112b8:	e7e9      	b.n	801128e <__ssputs_r+0x8a>
	...

080112bc <_svfiprintf_r>:
 80112bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112c0:	4698      	mov	r8, r3
 80112c2:	898b      	ldrh	r3, [r1, #12]
 80112c4:	061b      	lsls	r3, r3, #24
 80112c6:	b09d      	sub	sp, #116	@ 0x74
 80112c8:	4607      	mov	r7, r0
 80112ca:	460d      	mov	r5, r1
 80112cc:	4614      	mov	r4, r2
 80112ce:	d510      	bpl.n	80112f2 <_svfiprintf_r+0x36>
 80112d0:	690b      	ldr	r3, [r1, #16]
 80112d2:	b973      	cbnz	r3, 80112f2 <_svfiprintf_r+0x36>
 80112d4:	2140      	movs	r1, #64	@ 0x40
 80112d6:	f7fe fbd3 	bl	800fa80 <_malloc_r>
 80112da:	6028      	str	r0, [r5, #0]
 80112dc:	6128      	str	r0, [r5, #16]
 80112de:	b930      	cbnz	r0, 80112ee <_svfiprintf_r+0x32>
 80112e0:	230c      	movs	r3, #12
 80112e2:	603b      	str	r3, [r7, #0]
 80112e4:	f04f 30ff 	mov.w	r0, #4294967295
 80112e8:	b01d      	add	sp, #116	@ 0x74
 80112ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112ee:	2340      	movs	r3, #64	@ 0x40
 80112f0:	616b      	str	r3, [r5, #20]
 80112f2:	2300      	movs	r3, #0
 80112f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80112f6:	2320      	movs	r3, #32
 80112f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80112fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8011300:	2330      	movs	r3, #48	@ 0x30
 8011302:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80114a0 <_svfiprintf_r+0x1e4>
 8011306:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801130a:	f04f 0901 	mov.w	r9, #1
 801130e:	4623      	mov	r3, r4
 8011310:	469a      	mov	sl, r3
 8011312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011316:	b10a      	cbz	r2, 801131c <_svfiprintf_r+0x60>
 8011318:	2a25      	cmp	r2, #37	@ 0x25
 801131a:	d1f9      	bne.n	8011310 <_svfiprintf_r+0x54>
 801131c:	ebba 0b04 	subs.w	fp, sl, r4
 8011320:	d00b      	beq.n	801133a <_svfiprintf_r+0x7e>
 8011322:	465b      	mov	r3, fp
 8011324:	4622      	mov	r2, r4
 8011326:	4629      	mov	r1, r5
 8011328:	4638      	mov	r0, r7
 801132a:	f7ff ff6b 	bl	8011204 <__ssputs_r>
 801132e:	3001      	adds	r0, #1
 8011330:	f000 80a7 	beq.w	8011482 <_svfiprintf_r+0x1c6>
 8011334:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011336:	445a      	add	r2, fp
 8011338:	9209      	str	r2, [sp, #36]	@ 0x24
 801133a:	f89a 3000 	ldrb.w	r3, [sl]
 801133e:	2b00      	cmp	r3, #0
 8011340:	f000 809f 	beq.w	8011482 <_svfiprintf_r+0x1c6>
 8011344:	2300      	movs	r3, #0
 8011346:	f04f 32ff 	mov.w	r2, #4294967295
 801134a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801134e:	f10a 0a01 	add.w	sl, sl, #1
 8011352:	9304      	str	r3, [sp, #16]
 8011354:	9307      	str	r3, [sp, #28]
 8011356:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801135a:	931a      	str	r3, [sp, #104]	@ 0x68
 801135c:	4654      	mov	r4, sl
 801135e:	2205      	movs	r2, #5
 8011360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011364:	484e      	ldr	r0, [pc, #312]	@ (80114a0 <_svfiprintf_r+0x1e4>)
 8011366:	f7ee ff3b 	bl	80001e0 <memchr>
 801136a:	9a04      	ldr	r2, [sp, #16]
 801136c:	b9d8      	cbnz	r0, 80113a6 <_svfiprintf_r+0xea>
 801136e:	06d0      	lsls	r0, r2, #27
 8011370:	bf44      	itt	mi
 8011372:	2320      	movmi	r3, #32
 8011374:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011378:	0711      	lsls	r1, r2, #28
 801137a:	bf44      	itt	mi
 801137c:	232b      	movmi	r3, #43	@ 0x2b
 801137e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011382:	f89a 3000 	ldrb.w	r3, [sl]
 8011386:	2b2a      	cmp	r3, #42	@ 0x2a
 8011388:	d015      	beq.n	80113b6 <_svfiprintf_r+0xfa>
 801138a:	9a07      	ldr	r2, [sp, #28]
 801138c:	4654      	mov	r4, sl
 801138e:	2000      	movs	r0, #0
 8011390:	f04f 0c0a 	mov.w	ip, #10
 8011394:	4621      	mov	r1, r4
 8011396:	f811 3b01 	ldrb.w	r3, [r1], #1
 801139a:	3b30      	subs	r3, #48	@ 0x30
 801139c:	2b09      	cmp	r3, #9
 801139e:	d94b      	bls.n	8011438 <_svfiprintf_r+0x17c>
 80113a0:	b1b0      	cbz	r0, 80113d0 <_svfiprintf_r+0x114>
 80113a2:	9207      	str	r2, [sp, #28]
 80113a4:	e014      	b.n	80113d0 <_svfiprintf_r+0x114>
 80113a6:	eba0 0308 	sub.w	r3, r0, r8
 80113aa:	fa09 f303 	lsl.w	r3, r9, r3
 80113ae:	4313      	orrs	r3, r2
 80113b0:	9304      	str	r3, [sp, #16]
 80113b2:	46a2      	mov	sl, r4
 80113b4:	e7d2      	b.n	801135c <_svfiprintf_r+0xa0>
 80113b6:	9b03      	ldr	r3, [sp, #12]
 80113b8:	1d19      	adds	r1, r3, #4
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	9103      	str	r1, [sp, #12]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	bfbb      	ittet	lt
 80113c2:	425b      	neglt	r3, r3
 80113c4:	f042 0202 	orrlt.w	r2, r2, #2
 80113c8:	9307      	strge	r3, [sp, #28]
 80113ca:	9307      	strlt	r3, [sp, #28]
 80113cc:	bfb8      	it	lt
 80113ce:	9204      	strlt	r2, [sp, #16]
 80113d0:	7823      	ldrb	r3, [r4, #0]
 80113d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80113d4:	d10a      	bne.n	80113ec <_svfiprintf_r+0x130>
 80113d6:	7863      	ldrb	r3, [r4, #1]
 80113d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80113da:	d132      	bne.n	8011442 <_svfiprintf_r+0x186>
 80113dc:	9b03      	ldr	r3, [sp, #12]
 80113de:	1d1a      	adds	r2, r3, #4
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	9203      	str	r2, [sp, #12]
 80113e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80113e8:	3402      	adds	r4, #2
 80113ea:	9305      	str	r3, [sp, #20]
 80113ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80114b0 <_svfiprintf_r+0x1f4>
 80113f0:	7821      	ldrb	r1, [r4, #0]
 80113f2:	2203      	movs	r2, #3
 80113f4:	4650      	mov	r0, sl
 80113f6:	f7ee fef3 	bl	80001e0 <memchr>
 80113fa:	b138      	cbz	r0, 801140c <_svfiprintf_r+0x150>
 80113fc:	9b04      	ldr	r3, [sp, #16]
 80113fe:	eba0 000a 	sub.w	r0, r0, sl
 8011402:	2240      	movs	r2, #64	@ 0x40
 8011404:	4082      	lsls	r2, r0
 8011406:	4313      	orrs	r3, r2
 8011408:	3401      	adds	r4, #1
 801140a:	9304      	str	r3, [sp, #16]
 801140c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011410:	4824      	ldr	r0, [pc, #144]	@ (80114a4 <_svfiprintf_r+0x1e8>)
 8011412:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011416:	2206      	movs	r2, #6
 8011418:	f7ee fee2 	bl	80001e0 <memchr>
 801141c:	2800      	cmp	r0, #0
 801141e:	d036      	beq.n	801148e <_svfiprintf_r+0x1d2>
 8011420:	4b21      	ldr	r3, [pc, #132]	@ (80114a8 <_svfiprintf_r+0x1ec>)
 8011422:	bb1b      	cbnz	r3, 801146c <_svfiprintf_r+0x1b0>
 8011424:	9b03      	ldr	r3, [sp, #12]
 8011426:	3307      	adds	r3, #7
 8011428:	f023 0307 	bic.w	r3, r3, #7
 801142c:	3308      	adds	r3, #8
 801142e:	9303      	str	r3, [sp, #12]
 8011430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011432:	4433      	add	r3, r6
 8011434:	9309      	str	r3, [sp, #36]	@ 0x24
 8011436:	e76a      	b.n	801130e <_svfiprintf_r+0x52>
 8011438:	fb0c 3202 	mla	r2, ip, r2, r3
 801143c:	460c      	mov	r4, r1
 801143e:	2001      	movs	r0, #1
 8011440:	e7a8      	b.n	8011394 <_svfiprintf_r+0xd8>
 8011442:	2300      	movs	r3, #0
 8011444:	3401      	adds	r4, #1
 8011446:	9305      	str	r3, [sp, #20]
 8011448:	4619      	mov	r1, r3
 801144a:	f04f 0c0a 	mov.w	ip, #10
 801144e:	4620      	mov	r0, r4
 8011450:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011454:	3a30      	subs	r2, #48	@ 0x30
 8011456:	2a09      	cmp	r2, #9
 8011458:	d903      	bls.n	8011462 <_svfiprintf_r+0x1a6>
 801145a:	2b00      	cmp	r3, #0
 801145c:	d0c6      	beq.n	80113ec <_svfiprintf_r+0x130>
 801145e:	9105      	str	r1, [sp, #20]
 8011460:	e7c4      	b.n	80113ec <_svfiprintf_r+0x130>
 8011462:	fb0c 2101 	mla	r1, ip, r1, r2
 8011466:	4604      	mov	r4, r0
 8011468:	2301      	movs	r3, #1
 801146a:	e7f0      	b.n	801144e <_svfiprintf_r+0x192>
 801146c:	ab03      	add	r3, sp, #12
 801146e:	9300      	str	r3, [sp, #0]
 8011470:	462a      	mov	r2, r5
 8011472:	4b0e      	ldr	r3, [pc, #56]	@ (80114ac <_svfiprintf_r+0x1f0>)
 8011474:	a904      	add	r1, sp, #16
 8011476:	4638      	mov	r0, r7
 8011478:	f7fc fb78 	bl	800db6c <_printf_float>
 801147c:	1c42      	adds	r2, r0, #1
 801147e:	4606      	mov	r6, r0
 8011480:	d1d6      	bne.n	8011430 <_svfiprintf_r+0x174>
 8011482:	89ab      	ldrh	r3, [r5, #12]
 8011484:	065b      	lsls	r3, r3, #25
 8011486:	f53f af2d 	bmi.w	80112e4 <_svfiprintf_r+0x28>
 801148a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801148c:	e72c      	b.n	80112e8 <_svfiprintf_r+0x2c>
 801148e:	ab03      	add	r3, sp, #12
 8011490:	9300      	str	r3, [sp, #0]
 8011492:	462a      	mov	r2, r5
 8011494:	4b05      	ldr	r3, [pc, #20]	@ (80114ac <_svfiprintf_r+0x1f0>)
 8011496:	a904      	add	r1, sp, #16
 8011498:	4638      	mov	r0, r7
 801149a:	f7fc fdff 	bl	800e09c <_printf_i>
 801149e:	e7ed      	b.n	801147c <_svfiprintf_r+0x1c0>
 80114a0:	08014299 	.word	0x08014299
 80114a4:	080142a3 	.word	0x080142a3
 80114a8:	0800db6d 	.word	0x0800db6d
 80114ac:	08011205 	.word	0x08011205
 80114b0:	0801429f 	.word	0x0801429f

080114b4 <_sungetc_r>:
 80114b4:	b538      	push	{r3, r4, r5, lr}
 80114b6:	1c4b      	adds	r3, r1, #1
 80114b8:	4614      	mov	r4, r2
 80114ba:	d103      	bne.n	80114c4 <_sungetc_r+0x10>
 80114bc:	f04f 35ff 	mov.w	r5, #4294967295
 80114c0:	4628      	mov	r0, r5
 80114c2:	bd38      	pop	{r3, r4, r5, pc}
 80114c4:	8993      	ldrh	r3, [r2, #12]
 80114c6:	f023 0320 	bic.w	r3, r3, #32
 80114ca:	8193      	strh	r3, [r2, #12]
 80114cc:	6853      	ldr	r3, [r2, #4]
 80114ce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80114d0:	b2cd      	uxtb	r5, r1
 80114d2:	b18a      	cbz	r2, 80114f8 <_sungetc_r+0x44>
 80114d4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80114d6:	429a      	cmp	r2, r3
 80114d8:	dd08      	ble.n	80114ec <_sungetc_r+0x38>
 80114da:	6823      	ldr	r3, [r4, #0]
 80114dc:	1e5a      	subs	r2, r3, #1
 80114de:	6022      	str	r2, [r4, #0]
 80114e0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80114e4:	6863      	ldr	r3, [r4, #4]
 80114e6:	3301      	adds	r3, #1
 80114e8:	6063      	str	r3, [r4, #4]
 80114ea:	e7e9      	b.n	80114c0 <_sungetc_r+0xc>
 80114ec:	4621      	mov	r1, r4
 80114ee:	f000 fd84 	bl	8011ffa <__submore>
 80114f2:	2800      	cmp	r0, #0
 80114f4:	d0f1      	beq.n	80114da <_sungetc_r+0x26>
 80114f6:	e7e1      	b.n	80114bc <_sungetc_r+0x8>
 80114f8:	6921      	ldr	r1, [r4, #16]
 80114fa:	6822      	ldr	r2, [r4, #0]
 80114fc:	b141      	cbz	r1, 8011510 <_sungetc_r+0x5c>
 80114fe:	4291      	cmp	r1, r2
 8011500:	d206      	bcs.n	8011510 <_sungetc_r+0x5c>
 8011502:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8011506:	42a9      	cmp	r1, r5
 8011508:	d102      	bne.n	8011510 <_sungetc_r+0x5c>
 801150a:	3a01      	subs	r2, #1
 801150c:	6022      	str	r2, [r4, #0]
 801150e:	e7ea      	b.n	80114e6 <_sungetc_r+0x32>
 8011510:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8011514:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011518:	6363      	str	r3, [r4, #52]	@ 0x34
 801151a:	2303      	movs	r3, #3
 801151c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801151e:	4623      	mov	r3, r4
 8011520:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011524:	6023      	str	r3, [r4, #0]
 8011526:	2301      	movs	r3, #1
 8011528:	e7de      	b.n	80114e8 <_sungetc_r+0x34>

0801152a <__ssrefill_r>:
 801152a:	b510      	push	{r4, lr}
 801152c:	460c      	mov	r4, r1
 801152e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011530:	b169      	cbz	r1, 801154e <__ssrefill_r+0x24>
 8011532:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011536:	4299      	cmp	r1, r3
 8011538:	d001      	beq.n	801153e <__ssrefill_r+0x14>
 801153a:	f7fe fa2d 	bl	800f998 <_free_r>
 801153e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011540:	6063      	str	r3, [r4, #4]
 8011542:	2000      	movs	r0, #0
 8011544:	6360      	str	r0, [r4, #52]	@ 0x34
 8011546:	b113      	cbz	r3, 801154e <__ssrefill_r+0x24>
 8011548:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801154a:	6023      	str	r3, [r4, #0]
 801154c:	bd10      	pop	{r4, pc}
 801154e:	6923      	ldr	r3, [r4, #16]
 8011550:	6023      	str	r3, [r4, #0]
 8011552:	2300      	movs	r3, #0
 8011554:	6063      	str	r3, [r4, #4]
 8011556:	89a3      	ldrh	r3, [r4, #12]
 8011558:	f043 0320 	orr.w	r3, r3, #32
 801155c:	81a3      	strh	r3, [r4, #12]
 801155e:	f04f 30ff 	mov.w	r0, #4294967295
 8011562:	e7f3      	b.n	801154c <__ssrefill_r+0x22>

08011564 <__ssvfiscanf_r>:
 8011564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011568:	460c      	mov	r4, r1
 801156a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 801156e:	2100      	movs	r1, #0
 8011570:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8011574:	49a5      	ldr	r1, [pc, #660]	@ (801180c <__ssvfiscanf_r+0x2a8>)
 8011576:	91a0      	str	r1, [sp, #640]	@ 0x280
 8011578:	f10d 0804 	add.w	r8, sp, #4
 801157c:	49a4      	ldr	r1, [pc, #656]	@ (8011810 <__ssvfiscanf_r+0x2ac>)
 801157e:	4fa5      	ldr	r7, [pc, #660]	@ (8011814 <__ssvfiscanf_r+0x2b0>)
 8011580:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8011584:	4606      	mov	r6, r0
 8011586:	91a1      	str	r1, [sp, #644]	@ 0x284
 8011588:	9300      	str	r3, [sp, #0]
 801158a:	7813      	ldrb	r3, [r2, #0]
 801158c:	2b00      	cmp	r3, #0
 801158e:	f000 8158 	beq.w	8011842 <__ssvfiscanf_r+0x2de>
 8011592:	5cf9      	ldrb	r1, [r7, r3]
 8011594:	f011 0108 	ands.w	r1, r1, #8
 8011598:	f102 0501 	add.w	r5, r2, #1
 801159c:	d019      	beq.n	80115d2 <__ssvfiscanf_r+0x6e>
 801159e:	6863      	ldr	r3, [r4, #4]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	dd0f      	ble.n	80115c4 <__ssvfiscanf_r+0x60>
 80115a4:	6823      	ldr	r3, [r4, #0]
 80115a6:	781a      	ldrb	r2, [r3, #0]
 80115a8:	5cba      	ldrb	r2, [r7, r2]
 80115aa:	0712      	lsls	r2, r2, #28
 80115ac:	d401      	bmi.n	80115b2 <__ssvfiscanf_r+0x4e>
 80115ae:	462a      	mov	r2, r5
 80115b0:	e7eb      	b.n	801158a <__ssvfiscanf_r+0x26>
 80115b2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80115b4:	3201      	adds	r2, #1
 80115b6:	9245      	str	r2, [sp, #276]	@ 0x114
 80115b8:	6862      	ldr	r2, [r4, #4]
 80115ba:	3301      	adds	r3, #1
 80115bc:	3a01      	subs	r2, #1
 80115be:	6062      	str	r2, [r4, #4]
 80115c0:	6023      	str	r3, [r4, #0]
 80115c2:	e7ec      	b.n	801159e <__ssvfiscanf_r+0x3a>
 80115c4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80115c6:	4621      	mov	r1, r4
 80115c8:	4630      	mov	r0, r6
 80115ca:	4798      	blx	r3
 80115cc:	2800      	cmp	r0, #0
 80115ce:	d0e9      	beq.n	80115a4 <__ssvfiscanf_r+0x40>
 80115d0:	e7ed      	b.n	80115ae <__ssvfiscanf_r+0x4a>
 80115d2:	2b25      	cmp	r3, #37	@ 0x25
 80115d4:	d012      	beq.n	80115fc <__ssvfiscanf_r+0x98>
 80115d6:	4699      	mov	r9, r3
 80115d8:	6863      	ldr	r3, [r4, #4]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	f340 8093 	ble.w	8011706 <__ssvfiscanf_r+0x1a2>
 80115e0:	6822      	ldr	r2, [r4, #0]
 80115e2:	7813      	ldrb	r3, [r2, #0]
 80115e4:	454b      	cmp	r3, r9
 80115e6:	f040 812c 	bne.w	8011842 <__ssvfiscanf_r+0x2de>
 80115ea:	6863      	ldr	r3, [r4, #4]
 80115ec:	3b01      	subs	r3, #1
 80115ee:	6063      	str	r3, [r4, #4]
 80115f0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80115f2:	3201      	adds	r2, #1
 80115f4:	3301      	adds	r3, #1
 80115f6:	6022      	str	r2, [r4, #0]
 80115f8:	9345      	str	r3, [sp, #276]	@ 0x114
 80115fa:	e7d8      	b.n	80115ae <__ssvfiscanf_r+0x4a>
 80115fc:	9141      	str	r1, [sp, #260]	@ 0x104
 80115fe:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011600:	7853      	ldrb	r3, [r2, #1]
 8011602:	2b2a      	cmp	r3, #42	@ 0x2a
 8011604:	bf02      	ittt	eq
 8011606:	2310      	moveq	r3, #16
 8011608:	1c95      	addeq	r5, r2, #2
 801160a:	9341      	streq	r3, [sp, #260]	@ 0x104
 801160c:	220a      	movs	r2, #10
 801160e:	46a9      	mov	r9, r5
 8011610:	f819 1b01 	ldrb.w	r1, [r9], #1
 8011614:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8011618:	2b09      	cmp	r3, #9
 801161a:	d91e      	bls.n	801165a <__ssvfiscanf_r+0xf6>
 801161c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8011818 <__ssvfiscanf_r+0x2b4>
 8011620:	2203      	movs	r2, #3
 8011622:	4650      	mov	r0, sl
 8011624:	f7ee fddc 	bl	80001e0 <memchr>
 8011628:	b138      	cbz	r0, 801163a <__ssvfiscanf_r+0xd6>
 801162a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801162c:	eba0 000a 	sub.w	r0, r0, sl
 8011630:	2301      	movs	r3, #1
 8011632:	4083      	lsls	r3, r0
 8011634:	4313      	orrs	r3, r2
 8011636:	9341      	str	r3, [sp, #260]	@ 0x104
 8011638:	464d      	mov	r5, r9
 801163a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801163e:	2b78      	cmp	r3, #120	@ 0x78
 8011640:	d806      	bhi.n	8011650 <__ssvfiscanf_r+0xec>
 8011642:	2b57      	cmp	r3, #87	@ 0x57
 8011644:	d810      	bhi.n	8011668 <__ssvfiscanf_r+0x104>
 8011646:	2b25      	cmp	r3, #37	@ 0x25
 8011648:	d0c5      	beq.n	80115d6 <__ssvfiscanf_r+0x72>
 801164a:	d857      	bhi.n	80116fc <__ssvfiscanf_r+0x198>
 801164c:	2b00      	cmp	r3, #0
 801164e:	d065      	beq.n	801171c <__ssvfiscanf_r+0x1b8>
 8011650:	2303      	movs	r3, #3
 8011652:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011654:	230a      	movs	r3, #10
 8011656:	9342      	str	r3, [sp, #264]	@ 0x108
 8011658:	e078      	b.n	801174c <__ssvfiscanf_r+0x1e8>
 801165a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801165c:	fb02 1103 	mla	r1, r2, r3, r1
 8011660:	3930      	subs	r1, #48	@ 0x30
 8011662:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011664:	464d      	mov	r5, r9
 8011666:	e7d2      	b.n	801160e <__ssvfiscanf_r+0xaa>
 8011668:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801166c:	2a20      	cmp	r2, #32
 801166e:	d8ef      	bhi.n	8011650 <__ssvfiscanf_r+0xec>
 8011670:	a101      	add	r1, pc, #4	@ (adr r1, 8011678 <__ssvfiscanf_r+0x114>)
 8011672:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011676:	bf00      	nop
 8011678:	0801172b 	.word	0x0801172b
 801167c:	08011651 	.word	0x08011651
 8011680:	08011651 	.word	0x08011651
 8011684:	08011785 	.word	0x08011785
 8011688:	08011651 	.word	0x08011651
 801168c:	08011651 	.word	0x08011651
 8011690:	08011651 	.word	0x08011651
 8011694:	08011651 	.word	0x08011651
 8011698:	08011651 	.word	0x08011651
 801169c:	08011651 	.word	0x08011651
 80116a0:	08011651 	.word	0x08011651
 80116a4:	0801179b 	.word	0x0801179b
 80116a8:	08011781 	.word	0x08011781
 80116ac:	08011703 	.word	0x08011703
 80116b0:	08011703 	.word	0x08011703
 80116b4:	08011703 	.word	0x08011703
 80116b8:	08011651 	.word	0x08011651
 80116bc:	0801173d 	.word	0x0801173d
 80116c0:	08011651 	.word	0x08011651
 80116c4:	08011651 	.word	0x08011651
 80116c8:	08011651 	.word	0x08011651
 80116cc:	08011651 	.word	0x08011651
 80116d0:	080117ab 	.word	0x080117ab
 80116d4:	08011745 	.word	0x08011745
 80116d8:	08011723 	.word	0x08011723
 80116dc:	08011651 	.word	0x08011651
 80116e0:	08011651 	.word	0x08011651
 80116e4:	080117a7 	.word	0x080117a7
 80116e8:	08011651 	.word	0x08011651
 80116ec:	08011781 	.word	0x08011781
 80116f0:	08011651 	.word	0x08011651
 80116f4:	08011651 	.word	0x08011651
 80116f8:	0801172b 	.word	0x0801172b
 80116fc:	3b45      	subs	r3, #69	@ 0x45
 80116fe:	2b02      	cmp	r3, #2
 8011700:	d8a6      	bhi.n	8011650 <__ssvfiscanf_r+0xec>
 8011702:	2305      	movs	r3, #5
 8011704:	e021      	b.n	801174a <__ssvfiscanf_r+0x1e6>
 8011706:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011708:	4621      	mov	r1, r4
 801170a:	4630      	mov	r0, r6
 801170c:	4798      	blx	r3
 801170e:	2800      	cmp	r0, #0
 8011710:	f43f af66 	beq.w	80115e0 <__ssvfiscanf_r+0x7c>
 8011714:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011716:	2800      	cmp	r0, #0
 8011718:	f040 808b 	bne.w	8011832 <__ssvfiscanf_r+0x2ce>
 801171c:	f04f 30ff 	mov.w	r0, #4294967295
 8011720:	e08b      	b.n	801183a <__ssvfiscanf_r+0x2d6>
 8011722:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011724:	f042 0220 	orr.w	r2, r2, #32
 8011728:	9241      	str	r2, [sp, #260]	@ 0x104
 801172a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801172c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011730:	9241      	str	r2, [sp, #260]	@ 0x104
 8011732:	2210      	movs	r2, #16
 8011734:	2b6e      	cmp	r3, #110	@ 0x6e
 8011736:	9242      	str	r2, [sp, #264]	@ 0x108
 8011738:	d902      	bls.n	8011740 <__ssvfiscanf_r+0x1dc>
 801173a:	e005      	b.n	8011748 <__ssvfiscanf_r+0x1e4>
 801173c:	2300      	movs	r3, #0
 801173e:	9342      	str	r3, [sp, #264]	@ 0x108
 8011740:	2303      	movs	r3, #3
 8011742:	e002      	b.n	801174a <__ssvfiscanf_r+0x1e6>
 8011744:	2308      	movs	r3, #8
 8011746:	9342      	str	r3, [sp, #264]	@ 0x108
 8011748:	2304      	movs	r3, #4
 801174a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801174c:	6863      	ldr	r3, [r4, #4]
 801174e:	2b00      	cmp	r3, #0
 8011750:	dd39      	ble.n	80117c6 <__ssvfiscanf_r+0x262>
 8011752:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011754:	0659      	lsls	r1, r3, #25
 8011756:	d404      	bmi.n	8011762 <__ssvfiscanf_r+0x1fe>
 8011758:	6823      	ldr	r3, [r4, #0]
 801175a:	781a      	ldrb	r2, [r3, #0]
 801175c:	5cba      	ldrb	r2, [r7, r2]
 801175e:	0712      	lsls	r2, r2, #28
 8011760:	d438      	bmi.n	80117d4 <__ssvfiscanf_r+0x270>
 8011762:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8011764:	2b02      	cmp	r3, #2
 8011766:	dc47      	bgt.n	80117f8 <__ssvfiscanf_r+0x294>
 8011768:	466b      	mov	r3, sp
 801176a:	4622      	mov	r2, r4
 801176c:	a941      	add	r1, sp, #260	@ 0x104
 801176e:	4630      	mov	r0, r6
 8011770:	f000 f9ae 	bl	8011ad0 <_scanf_chars>
 8011774:	2801      	cmp	r0, #1
 8011776:	d064      	beq.n	8011842 <__ssvfiscanf_r+0x2de>
 8011778:	2802      	cmp	r0, #2
 801177a:	f47f af18 	bne.w	80115ae <__ssvfiscanf_r+0x4a>
 801177e:	e7c9      	b.n	8011714 <__ssvfiscanf_r+0x1b0>
 8011780:	220a      	movs	r2, #10
 8011782:	e7d7      	b.n	8011734 <__ssvfiscanf_r+0x1d0>
 8011784:	4629      	mov	r1, r5
 8011786:	4640      	mov	r0, r8
 8011788:	f000 fbfe 	bl	8011f88 <__sccl>
 801178c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801178e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011792:	9341      	str	r3, [sp, #260]	@ 0x104
 8011794:	4605      	mov	r5, r0
 8011796:	2301      	movs	r3, #1
 8011798:	e7d7      	b.n	801174a <__ssvfiscanf_r+0x1e6>
 801179a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801179c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80117a0:	9341      	str	r3, [sp, #260]	@ 0x104
 80117a2:	2300      	movs	r3, #0
 80117a4:	e7d1      	b.n	801174a <__ssvfiscanf_r+0x1e6>
 80117a6:	2302      	movs	r3, #2
 80117a8:	e7cf      	b.n	801174a <__ssvfiscanf_r+0x1e6>
 80117aa:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80117ac:	06c3      	lsls	r3, r0, #27
 80117ae:	f53f aefe 	bmi.w	80115ae <__ssvfiscanf_r+0x4a>
 80117b2:	9b00      	ldr	r3, [sp, #0]
 80117b4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80117b6:	1d19      	adds	r1, r3, #4
 80117b8:	9100      	str	r1, [sp, #0]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	07c0      	lsls	r0, r0, #31
 80117be:	bf4c      	ite	mi
 80117c0:	801a      	strhmi	r2, [r3, #0]
 80117c2:	601a      	strpl	r2, [r3, #0]
 80117c4:	e6f3      	b.n	80115ae <__ssvfiscanf_r+0x4a>
 80117c6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80117c8:	4621      	mov	r1, r4
 80117ca:	4630      	mov	r0, r6
 80117cc:	4798      	blx	r3
 80117ce:	2800      	cmp	r0, #0
 80117d0:	d0bf      	beq.n	8011752 <__ssvfiscanf_r+0x1ee>
 80117d2:	e79f      	b.n	8011714 <__ssvfiscanf_r+0x1b0>
 80117d4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80117d6:	3201      	adds	r2, #1
 80117d8:	9245      	str	r2, [sp, #276]	@ 0x114
 80117da:	6862      	ldr	r2, [r4, #4]
 80117dc:	3a01      	subs	r2, #1
 80117de:	2a00      	cmp	r2, #0
 80117e0:	6062      	str	r2, [r4, #4]
 80117e2:	dd02      	ble.n	80117ea <__ssvfiscanf_r+0x286>
 80117e4:	3301      	adds	r3, #1
 80117e6:	6023      	str	r3, [r4, #0]
 80117e8:	e7b6      	b.n	8011758 <__ssvfiscanf_r+0x1f4>
 80117ea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80117ec:	4621      	mov	r1, r4
 80117ee:	4630      	mov	r0, r6
 80117f0:	4798      	blx	r3
 80117f2:	2800      	cmp	r0, #0
 80117f4:	d0b0      	beq.n	8011758 <__ssvfiscanf_r+0x1f4>
 80117f6:	e78d      	b.n	8011714 <__ssvfiscanf_r+0x1b0>
 80117f8:	2b04      	cmp	r3, #4
 80117fa:	dc0f      	bgt.n	801181c <__ssvfiscanf_r+0x2b8>
 80117fc:	466b      	mov	r3, sp
 80117fe:	4622      	mov	r2, r4
 8011800:	a941      	add	r1, sp, #260	@ 0x104
 8011802:	4630      	mov	r0, r6
 8011804:	f000 f9be 	bl	8011b84 <_scanf_i>
 8011808:	e7b4      	b.n	8011774 <__ssvfiscanf_r+0x210>
 801180a:	bf00      	nop
 801180c:	080114b5 	.word	0x080114b5
 8011810:	0801152b 	.word	0x0801152b
 8011814:	08014199 	.word	0x08014199
 8011818:	0801429f 	.word	0x0801429f
 801181c:	4b0a      	ldr	r3, [pc, #40]	@ (8011848 <__ssvfiscanf_r+0x2e4>)
 801181e:	2b00      	cmp	r3, #0
 8011820:	f43f aec5 	beq.w	80115ae <__ssvfiscanf_r+0x4a>
 8011824:	466b      	mov	r3, sp
 8011826:	4622      	mov	r2, r4
 8011828:	a941      	add	r1, sp, #260	@ 0x104
 801182a:	4630      	mov	r0, r6
 801182c:	f7fc fd56 	bl	800e2dc <_scanf_float>
 8011830:	e7a0      	b.n	8011774 <__ssvfiscanf_r+0x210>
 8011832:	89a3      	ldrh	r3, [r4, #12]
 8011834:	065b      	lsls	r3, r3, #25
 8011836:	f53f af71 	bmi.w	801171c <__ssvfiscanf_r+0x1b8>
 801183a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801183e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011842:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011844:	e7f9      	b.n	801183a <__ssvfiscanf_r+0x2d6>
 8011846:	bf00      	nop
 8011848:	0800e2dd 	.word	0x0800e2dd

0801184c <__sfputc_r>:
 801184c:	6893      	ldr	r3, [r2, #8]
 801184e:	3b01      	subs	r3, #1
 8011850:	2b00      	cmp	r3, #0
 8011852:	b410      	push	{r4}
 8011854:	6093      	str	r3, [r2, #8]
 8011856:	da08      	bge.n	801186a <__sfputc_r+0x1e>
 8011858:	6994      	ldr	r4, [r2, #24]
 801185a:	42a3      	cmp	r3, r4
 801185c:	db01      	blt.n	8011862 <__sfputc_r+0x16>
 801185e:	290a      	cmp	r1, #10
 8011860:	d103      	bne.n	801186a <__sfputc_r+0x1e>
 8011862:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011866:	f7fd b90e 	b.w	800ea86 <__swbuf_r>
 801186a:	6813      	ldr	r3, [r2, #0]
 801186c:	1c58      	adds	r0, r3, #1
 801186e:	6010      	str	r0, [r2, #0]
 8011870:	7019      	strb	r1, [r3, #0]
 8011872:	4608      	mov	r0, r1
 8011874:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011878:	4770      	bx	lr

0801187a <__sfputs_r>:
 801187a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801187c:	4606      	mov	r6, r0
 801187e:	460f      	mov	r7, r1
 8011880:	4614      	mov	r4, r2
 8011882:	18d5      	adds	r5, r2, r3
 8011884:	42ac      	cmp	r4, r5
 8011886:	d101      	bne.n	801188c <__sfputs_r+0x12>
 8011888:	2000      	movs	r0, #0
 801188a:	e007      	b.n	801189c <__sfputs_r+0x22>
 801188c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011890:	463a      	mov	r2, r7
 8011892:	4630      	mov	r0, r6
 8011894:	f7ff ffda 	bl	801184c <__sfputc_r>
 8011898:	1c43      	adds	r3, r0, #1
 801189a:	d1f3      	bne.n	8011884 <__sfputs_r+0xa>
 801189c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080118a0 <_vfiprintf_r>:
 80118a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118a4:	460d      	mov	r5, r1
 80118a6:	b09d      	sub	sp, #116	@ 0x74
 80118a8:	4614      	mov	r4, r2
 80118aa:	4698      	mov	r8, r3
 80118ac:	4606      	mov	r6, r0
 80118ae:	b118      	cbz	r0, 80118b8 <_vfiprintf_r+0x18>
 80118b0:	6a03      	ldr	r3, [r0, #32]
 80118b2:	b90b      	cbnz	r3, 80118b8 <_vfiprintf_r+0x18>
 80118b4:	f7fc ffb2 	bl	800e81c <__sinit>
 80118b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80118ba:	07d9      	lsls	r1, r3, #31
 80118bc:	d405      	bmi.n	80118ca <_vfiprintf_r+0x2a>
 80118be:	89ab      	ldrh	r3, [r5, #12]
 80118c0:	059a      	lsls	r2, r3, #22
 80118c2:	d402      	bmi.n	80118ca <_vfiprintf_r+0x2a>
 80118c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80118c6:	f7fd fa02 	bl	800ecce <__retarget_lock_acquire_recursive>
 80118ca:	89ab      	ldrh	r3, [r5, #12]
 80118cc:	071b      	lsls	r3, r3, #28
 80118ce:	d501      	bpl.n	80118d4 <_vfiprintf_r+0x34>
 80118d0:	692b      	ldr	r3, [r5, #16]
 80118d2:	b99b      	cbnz	r3, 80118fc <_vfiprintf_r+0x5c>
 80118d4:	4629      	mov	r1, r5
 80118d6:	4630      	mov	r0, r6
 80118d8:	f7fd f914 	bl	800eb04 <__swsetup_r>
 80118dc:	b170      	cbz	r0, 80118fc <_vfiprintf_r+0x5c>
 80118de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80118e0:	07dc      	lsls	r4, r3, #31
 80118e2:	d504      	bpl.n	80118ee <_vfiprintf_r+0x4e>
 80118e4:	f04f 30ff 	mov.w	r0, #4294967295
 80118e8:	b01d      	add	sp, #116	@ 0x74
 80118ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118ee:	89ab      	ldrh	r3, [r5, #12]
 80118f0:	0598      	lsls	r0, r3, #22
 80118f2:	d4f7      	bmi.n	80118e4 <_vfiprintf_r+0x44>
 80118f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80118f6:	f7fd f9eb 	bl	800ecd0 <__retarget_lock_release_recursive>
 80118fa:	e7f3      	b.n	80118e4 <_vfiprintf_r+0x44>
 80118fc:	2300      	movs	r3, #0
 80118fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8011900:	2320      	movs	r3, #32
 8011902:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011906:	f8cd 800c 	str.w	r8, [sp, #12]
 801190a:	2330      	movs	r3, #48	@ 0x30
 801190c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011abc <_vfiprintf_r+0x21c>
 8011910:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011914:	f04f 0901 	mov.w	r9, #1
 8011918:	4623      	mov	r3, r4
 801191a:	469a      	mov	sl, r3
 801191c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011920:	b10a      	cbz	r2, 8011926 <_vfiprintf_r+0x86>
 8011922:	2a25      	cmp	r2, #37	@ 0x25
 8011924:	d1f9      	bne.n	801191a <_vfiprintf_r+0x7a>
 8011926:	ebba 0b04 	subs.w	fp, sl, r4
 801192a:	d00b      	beq.n	8011944 <_vfiprintf_r+0xa4>
 801192c:	465b      	mov	r3, fp
 801192e:	4622      	mov	r2, r4
 8011930:	4629      	mov	r1, r5
 8011932:	4630      	mov	r0, r6
 8011934:	f7ff ffa1 	bl	801187a <__sfputs_r>
 8011938:	3001      	adds	r0, #1
 801193a:	f000 80a7 	beq.w	8011a8c <_vfiprintf_r+0x1ec>
 801193e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011940:	445a      	add	r2, fp
 8011942:	9209      	str	r2, [sp, #36]	@ 0x24
 8011944:	f89a 3000 	ldrb.w	r3, [sl]
 8011948:	2b00      	cmp	r3, #0
 801194a:	f000 809f 	beq.w	8011a8c <_vfiprintf_r+0x1ec>
 801194e:	2300      	movs	r3, #0
 8011950:	f04f 32ff 	mov.w	r2, #4294967295
 8011954:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011958:	f10a 0a01 	add.w	sl, sl, #1
 801195c:	9304      	str	r3, [sp, #16]
 801195e:	9307      	str	r3, [sp, #28]
 8011960:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011964:	931a      	str	r3, [sp, #104]	@ 0x68
 8011966:	4654      	mov	r4, sl
 8011968:	2205      	movs	r2, #5
 801196a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801196e:	4853      	ldr	r0, [pc, #332]	@ (8011abc <_vfiprintf_r+0x21c>)
 8011970:	f7ee fc36 	bl	80001e0 <memchr>
 8011974:	9a04      	ldr	r2, [sp, #16]
 8011976:	b9d8      	cbnz	r0, 80119b0 <_vfiprintf_r+0x110>
 8011978:	06d1      	lsls	r1, r2, #27
 801197a:	bf44      	itt	mi
 801197c:	2320      	movmi	r3, #32
 801197e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011982:	0713      	lsls	r3, r2, #28
 8011984:	bf44      	itt	mi
 8011986:	232b      	movmi	r3, #43	@ 0x2b
 8011988:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801198c:	f89a 3000 	ldrb.w	r3, [sl]
 8011990:	2b2a      	cmp	r3, #42	@ 0x2a
 8011992:	d015      	beq.n	80119c0 <_vfiprintf_r+0x120>
 8011994:	9a07      	ldr	r2, [sp, #28]
 8011996:	4654      	mov	r4, sl
 8011998:	2000      	movs	r0, #0
 801199a:	f04f 0c0a 	mov.w	ip, #10
 801199e:	4621      	mov	r1, r4
 80119a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80119a4:	3b30      	subs	r3, #48	@ 0x30
 80119a6:	2b09      	cmp	r3, #9
 80119a8:	d94b      	bls.n	8011a42 <_vfiprintf_r+0x1a2>
 80119aa:	b1b0      	cbz	r0, 80119da <_vfiprintf_r+0x13a>
 80119ac:	9207      	str	r2, [sp, #28]
 80119ae:	e014      	b.n	80119da <_vfiprintf_r+0x13a>
 80119b0:	eba0 0308 	sub.w	r3, r0, r8
 80119b4:	fa09 f303 	lsl.w	r3, r9, r3
 80119b8:	4313      	orrs	r3, r2
 80119ba:	9304      	str	r3, [sp, #16]
 80119bc:	46a2      	mov	sl, r4
 80119be:	e7d2      	b.n	8011966 <_vfiprintf_r+0xc6>
 80119c0:	9b03      	ldr	r3, [sp, #12]
 80119c2:	1d19      	adds	r1, r3, #4
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	9103      	str	r1, [sp, #12]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	bfbb      	ittet	lt
 80119cc:	425b      	neglt	r3, r3
 80119ce:	f042 0202 	orrlt.w	r2, r2, #2
 80119d2:	9307      	strge	r3, [sp, #28]
 80119d4:	9307      	strlt	r3, [sp, #28]
 80119d6:	bfb8      	it	lt
 80119d8:	9204      	strlt	r2, [sp, #16]
 80119da:	7823      	ldrb	r3, [r4, #0]
 80119dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80119de:	d10a      	bne.n	80119f6 <_vfiprintf_r+0x156>
 80119e0:	7863      	ldrb	r3, [r4, #1]
 80119e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80119e4:	d132      	bne.n	8011a4c <_vfiprintf_r+0x1ac>
 80119e6:	9b03      	ldr	r3, [sp, #12]
 80119e8:	1d1a      	adds	r2, r3, #4
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	9203      	str	r2, [sp, #12]
 80119ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80119f2:	3402      	adds	r4, #2
 80119f4:	9305      	str	r3, [sp, #20]
 80119f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011acc <_vfiprintf_r+0x22c>
 80119fa:	7821      	ldrb	r1, [r4, #0]
 80119fc:	2203      	movs	r2, #3
 80119fe:	4650      	mov	r0, sl
 8011a00:	f7ee fbee 	bl	80001e0 <memchr>
 8011a04:	b138      	cbz	r0, 8011a16 <_vfiprintf_r+0x176>
 8011a06:	9b04      	ldr	r3, [sp, #16]
 8011a08:	eba0 000a 	sub.w	r0, r0, sl
 8011a0c:	2240      	movs	r2, #64	@ 0x40
 8011a0e:	4082      	lsls	r2, r0
 8011a10:	4313      	orrs	r3, r2
 8011a12:	3401      	adds	r4, #1
 8011a14:	9304      	str	r3, [sp, #16]
 8011a16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a1a:	4829      	ldr	r0, [pc, #164]	@ (8011ac0 <_vfiprintf_r+0x220>)
 8011a1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011a20:	2206      	movs	r2, #6
 8011a22:	f7ee fbdd 	bl	80001e0 <memchr>
 8011a26:	2800      	cmp	r0, #0
 8011a28:	d03f      	beq.n	8011aaa <_vfiprintf_r+0x20a>
 8011a2a:	4b26      	ldr	r3, [pc, #152]	@ (8011ac4 <_vfiprintf_r+0x224>)
 8011a2c:	bb1b      	cbnz	r3, 8011a76 <_vfiprintf_r+0x1d6>
 8011a2e:	9b03      	ldr	r3, [sp, #12]
 8011a30:	3307      	adds	r3, #7
 8011a32:	f023 0307 	bic.w	r3, r3, #7
 8011a36:	3308      	adds	r3, #8
 8011a38:	9303      	str	r3, [sp, #12]
 8011a3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a3c:	443b      	add	r3, r7
 8011a3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a40:	e76a      	b.n	8011918 <_vfiprintf_r+0x78>
 8011a42:	fb0c 3202 	mla	r2, ip, r2, r3
 8011a46:	460c      	mov	r4, r1
 8011a48:	2001      	movs	r0, #1
 8011a4a:	e7a8      	b.n	801199e <_vfiprintf_r+0xfe>
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	3401      	adds	r4, #1
 8011a50:	9305      	str	r3, [sp, #20]
 8011a52:	4619      	mov	r1, r3
 8011a54:	f04f 0c0a 	mov.w	ip, #10
 8011a58:	4620      	mov	r0, r4
 8011a5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a5e:	3a30      	subs	r2, #48	@ 0x30
 8011a60:	2a09      	cmp	r2, #9
 8011a62:	d903      	bls.n	8011a6c <_vfiprintf_r+0x1cc>
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d0c6      	beq.n	80119f6 <_vfiprintf_r+0x156>
 8011a68:	9105      	str	r1, [sp, #20]
 8011a6a:	e7c4      	b.n	80119f6 <_vfiprintf_r+0x156>
 8011a6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011a70:	4604      	mov	r4, r0
 8011a72:	2301      	movs	r3, #1
 8011a74:	e7f0      	b.n	8011a58 <_vfiprintf_r+0x1b8>
 8011a76:	ab03      	add	r3, sp, #12
 8011a78:	9300      	str	r3, [sp, #0]
 8011a7a:	462a      	mov	r2, r5
 8011a7c:	4b12      	ldr	r3, [pc, #72]	@ (8011ac8 <_vfiprintf_r+0x228>)
 8011a7e:	a904      	add	r1, sp, #16
 8011a80:	4630      	mov	r0, r6
 8011a82:	f7fc f873 	bl	800db6c <_printf_float>
 8011a86:	4607      	mov	r7, r0
 8011a88:	1c78      	adds	r0, r7, #1
 8011a8a:	d1d6      	bne.n	8011a3a <_vfiprintf_r+0x19a>
 8011a8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011a8e:	07d9      	lsls	r1, r3, #31
 8011a90:	d405      	bmi.n	8011a9e <_vfiprintf_r+0x1fe>
 8011a92:	89ab      	ldrh	r3, [r5, #12]
 8011a94:	059a      	lsls	r2, r3, #22
 8011a96:	d402      	bmi.n	8011a9e <_vfiprintf_r+0x1fe>
 8011a98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011a9a:	f7fd f919 	bl	800ecd0 <__retarget_lock_release_recursive>
 8011a9e:	89ab      	ldrh	r3, [r5, #12]
 8011aa0:	065b      	lsls	r3, r3, #25
 8011aa2:	f53f af1f 	bmi.w	80118e4 <_vfiprintf_r+0x44>
 8011aa6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011aa8:	e71e      	b.n	80118e8 <_vfiprintf_r+0x48>
 8011aaa:	ab03      	add	r3, sp, #12
 8011aac:	9300      	str	r3, [sp, #0]
 8011aae:	462a      	mov	r2, r5
 8011ab0:	4b05      	ldr	r3, [pc, #20]	@ (8011ac8 <_vfiprintf_r+0x228>)
 8011ab2:	a904      	add	r1, sp, #16
 8011ab4:	4630      	mov	r0, r6
 8011ab6:	f7fc faf1 	bl	800e09c <_printf_i>
 8011aba:	e7e4      	b.n	8011a86 <_vfiprintf_r+0x1e6>
 8011abc:	08014299 	.word	0x08014299
 8011ac0:	080142a3 	.word	0x080142a3
 8011ac4:	0800db6d 	.word	0x0800db6d
 8011ac8:	0801187b 	.word	0x0801187b
 8011acc:	0801429f 	.word	0x0801429f

08011ad0 <_scanf_chars>:
 8011ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ad4:	4615      	mov	r5, r2
 8011ad6:	688a      	ldr	r2, [r1, #8]
 8011ad8:	4680      	mov	r8, r0
 8011ada:	460c      	mov	r4, r1
 8011adc:	b932      	cbnz	r2, 8011aec <_scanf_chars+0x1c>
 8011ade:	698a      	ldr	r2, [r1, #24]
 8011ae0:	2a00      	cmp	r2, #0
 8011ae2:	bf14      	ite	ne
 8011ae4:	f04f 32ff 	movne.w	r2, #4294967295
 8011ae8:	2201      	moveq	r2, #1
 8011aea:	608a      	str	r2, [r1, #8]
 8011aec:	6822      	ldr	r2, [r4, #0]
 8011aee:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8011b80 <_scanf_chars+0xb0>
 8011af2:	06d1      	lsls	r1, r2, #27
 8011af4:	bf5f      	itttt	pl
 8011af6:	681a      	ldrpl	r2, [r3, #0]
 8011af8:	1d11      	addpl	r1, r2, #4
 8011afa:	6019      	strpl	r1, [r3, #0]
 8011afc:	6816      	ldrpl	r6, [r2, #0]
 8011afe:	2700      	movs	r7, #0
 8011b00:	69a0      	ldr	r0, [r4, #24]
 8011b02:	b188      	cbz	r0, 8011b28 <_scanf_chars+0x58>
 8011b04:	2801      	cmp	r0, #1
 8011b06:	d107      	bne.n	8011b18 <_scanf_chars+0x48>
 8011b08:	682b      	ldr	r3, [r5, #0]
 8011b0a:	781a      	ldrb	r2, [r3, #0]
 8011b0c:	6963      	ldr	r3, [r4, #20]
 8011b0e:	5c9b      	ldrb	r3, [r3, r2]
 8011b10:	b953      	cbnz	r3, 8011b28 <_scanf_chars+0x58>
 8011b12:	2f00      	cmp	r7, #0
 8011b14:	d031      	beq.n	8011b7a <_scanf_chars+0xaa>
 8011b16:	e022      	b.n	8011b5e <_scanf_chars+0x8e>
 8011b18:	2802      	cmp	r0, #2
 8011b1a:	d120      	bne.n	8011b5e <_scanf_chars+0x8e>
 8011b1c:	682b      	ldr	r3, [r5, #0]
 8011b1e:	781b      	ldrb	r3, [r3, #0]
 8011b20:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011b24:	071b      	lsls	r3, r3, #28
 8011b26:	d41a      	bmi.n	8011b5e <_scanf_chars+0x8e>
 8011b28:	6823      	ldr	r3, [r4, #0]
 8011b2a:	06da      	lsls	r2, r3, #27
 8011b2c:	bf5e      	ittt	pl
 8011b2e:	682b      	ldrpl	r3, [r5, #0]
 8011b30:	781b      	ldrbpl	r3, [r3, #0]
 8011b32:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011b36:	682a      	ldr	r2, [r5, #0]
 8011b38:	686b      	ldr	r3, [r5, #4]
 8011b3a:	3201      	adds	r2, #1
 8011b3c:	602a      	str	r2, [r5, #0]
 8011b3e:	68a2      	ldr	r2, [r4, #8]
 8011b40:	3b01      	subs	r3, #1
 8011b42:	3a01      	subs	r2, #1
 8011b44:	606b      	str	r3, [r5, #4]
 8011b46:	3701      	adds	r7, #1
 8011b48:	60a2      	str	r2, [r4, #8]
 8011b4a:	b142      	cbz	r2, 8011b5e <_scanf_chars+0x8e>
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	dcd7      	bgt.n	8011b00 <_scanf_chars+0x30>
 8011b50:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011b54:	4629      	mov	r1, r5
 8011b56:	4640      	mov	r0, r8
 8011b58:	4798      	blx	r3
 8011b5a:	2800      	cmp	r0, #0
 8011b5c:	d0d0      	beq.n	8011b00 <_scanf_chars+0x30>
 8011b5e:	6823      	ldr	r3, [r4, #0]
 8011b60:	f013 0310 	ands.w	r3, r3, #16
 8011b64:	d105      	bne.n	8011b72 <_scanf_chars+0xa2>
 8011b66:	68e2      	ldr	r2, [r4, #12]
 8011b68:	3201      	adds	r2, #1
 8011b6a:	60e2      	str	r2, [r4, #12]
 8011b6c:	69a2      	ldr	r2, [r4, #24]
 8011b6e:	b102      	cbz	r2, 8011b72 <_scanf_chars+0xa2>
 8011b70:	7033      	strb	r3, [r6, #0]
 8011b72:	6923      	ldr	r3, [r4, #16]
 8011b74:	443b      	add	r3, r7
 8011b76:	6123      	str	r3, [r4, #16]
 8011b78:	2000      	movs	r0, #0
 8011b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b7e:	bf00      	nop
 8011b80:	08014199 	.word	0x08014199

08011b84 <_scanf_i>:
 8011b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b88:	4698      	mov	r8, r3
 8011b8a:	4b74      	ldr	r3, [pc, #464]	@ (8011d5c <_scanf_i+0x1d8>)
 8011b8c:	460c      	mov	r4, r1
 8011b8e:	4682      	mov	sl, r0
 8011b90:	4616      	mov	r6, r2
 8011b92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011b96:	b087      	sub	sp, #28
 8011b98:	ab03      	add	r3, sp, #12
 8011b9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011b9e:	4b70      	ldr	r3, [pc, #448]	@ (8011d60 <_scanf_i+0x1dc>)
 8011ba0:	69a1      	ldr	r1, [r4, #24]
 8011ba2:	4a70      	ldr	r2, [pc, #448]	@ (8011d64 <_scanf_i+0x1e0>)
 8011ba4:	2903      	cmp	r1, #3
 8011ba6:	bf08      	it	eq
 8011ba8:	461a      	moveq	r2, r3
 8011baa:	68a3      	ldr	r3, [r4, #8]
 8011bac:	9201      	str	r2, [sp, #4]
 8011bae:	1e5a      	subs	r2, r3, #1
 8011bb0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8011bb4:	bf88      	it	hi
 8011bb6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011bba:	4627      	mov	r7, r4
 8011bbc:	bf82      	ittt	hi
 8011bbe:	eb03 0905 	addhi.w	r9, r3, r5
 8011bc2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8011bc6:	60a3      	strhi	r3, [r4, #8]
 8011bc8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8011bcc:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8011bd0:	bf98      	it	ls
 8011bd2:	f04f 0900 	movls.w	r9, #0
 8011bd6:	6023      	str	r3, [r4, #0]
 8011bd8:	463d      	mov	r5, r7
 8011bda:	f04f 0b00 	mov.w	fp, #0
 8011bde:	6831      	ldr	r1, [r6, #0]
 8011be0:	ab03      	add	r3, sp, #12
 8011be2:	7809      	ldrb	r1, [r1, #0]
 8011be4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8011be8:	2202      	movs	r2, #2
 8011bea:	f7ee faf9 	bl	80001e0 <memchr>
 8011bee:	b328      	cbz	r0, 8011c3c <_scanf_i+0xb8>
 8011bf0:	f1bb 0f01 	cmp.w	fp, #1
 8011bf4:	d159      	bne.n	8011caa <_scanf_i+0x126>
 8011bf6:	6862      	ldr	r2, [r4, #4]
 8011bf8:	b92a      	cbnz	r2, 8011c06 <_scanf_i+0x82>
 8011bfa:	6822      	ldr	r2, [r4, #0]
 8011bfc:	2108      	movs	r1, #8
 8011bfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011c02:	6061      	str	r1, [r4, #4]
 8011c04:	6022      	str	r2, [r4, #0]
 8011c06:	6822      	ldr	r2, [r4, #0]
 8011c08:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8011c0c:	6022      	str	r2, [r4, #0]
 8011c0e:	68a2      	ldr	r2, [r4, #8]
 8011c10:	1e51      	subs	r1, r2, #1
 8011c12:	60a1      	str	r1, [r4, #8]
 8011c14:	b192      	cbz	r2, 8011c3c <_scanf_i+0xb8>
 8011c16:	6832      	ldr	r2, [r6, #0]
 8011c18:	1c51      	adds	r1, r2, #1
 8011c1a:	6031      	str	r1, [r6, #0]
 8011c1c:	7812      	ldrb	r2, [r2, #0]
 8011c1e:	f805 2b01 	strb.w	r2, [r5], #1
 8011c22:	6872      	ldr	r2, [r6, #4]
 8011c24:	3a01      	subs	r2, #1
 8011c26:	2a00      	cmp	r2, #0
 8011c28:	6072      	str	r2, [r6, #4]
 8011c2a:	dc07      	bgt.n	8011c3c <_scanf_i+0xb8>
 8011c2c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8011c30:	4631      	mov	r1, r6
 8011c32:	4650      	mov	r0, sl
 8011c34:	4790      	blx	r2
 8011c36:	2800      	cmp	r0, #0
 8011c38:	f040 8085 	bne.w	8011d46 <_scanf_i+0x1c2>
 8011c3c:	f10b 0b01 	add.w	fp, fp, #1
 8011c40:	f1bb 0f03 	cmp.w	fp, #3
 8011c44:	d1cb      	bne.n	8011bde <_scanf_i+0x5a>
 8011c46:	6863      	ldr	r3, [r4, #4]
 8011c48:	b90b      	cbnz	r3, 8011c4e <_scanf_i+0xca>
 8011c4a:	230a      	movs	r3, #10
 8011c4c:	6063      	str	r3, [r4, #4]
 8011c4e:	6863      	ldr	r3, [r4, #4]
 8011c50:	4945      	ldr	r1, [pc, #276]	@ (8011d68 <_scanf_i+0x1e4>)
 8011c52:	6960      	ldr	r0, [r4, #20]
 8011c54:	1ac9      	subs	r1, r1, r3
 8011c56:	f000 f997 	bl	8011f88 <__sccl>
 8011c5a:	f04f 0b00 	mov.w	fp, #0
 8011c5e:	68a3      	ldr	r3, [r4, #8]
 8011c60:	6822      	ldr	r2, [r4, #0]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d03d      	beq.n	8011ce2 <_scanf_i+0x15e>
 8011c66:	6831      	ldr	r1, [r6, #0]
 8011c68:	6960      	ldr	r0, [r4, #20]
 8011c6a:	f891 c000 	ldrb.w	ip, [r1]
 8011c6e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8011c72:	2800      	cmp	r0, #0
 8011c74:	d035      	beq.n	8011ce2 <_scanf_i+0x15e>
 8011c76:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8011c7a:	d124      	bne.n	8011cc6 <_scanf_i+0x142>
 8011c7c:	0510      	lsls	r0, r2, #20
 8011c7e:	d522      	bpl.n	8011cc6 <_scanf_i+0x142>
 8011c80:	f10b 0b01 	add.w	fp, fp, #1
 8011c84:	f1b9 0f00 	cmp.w	r9, #0
 8011c88:	d003      	beq.n	8011c92 <_scanf_i+0x10e>
 8011c8a:	3301      	adds	r3, #1
 8011c8c:	f109 39ff 	add.w	r9, r9, #4294967295
 8011c90:	60a3      	str	r3, [r4, #8]
 8011c92:	6873      	ldr	r3, [r6, #4]
 8011c94:	3b01      	subs	r3, #1
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	6073      	str	r3, [r6, #4]
 8011c9a:	dd1b      	ble.n	8011cd4 <_scanf_i+0x150>
 8011c9c:	6833      	ldr	r3, [r6, #0]
 8011c9e:	3301      	adds	r3, #1
 8011ca0:	6033      	str	r3, [r6, #0]
 8011ca2:	68a3      	ldr	r3, [r4, #8]
 8011ca4:	3b01      	subs	r3, #1
 8011ca6:	60a3      	str	r3, [r4, #8]
 8011ca8:	e7d9      	b.n	8011c5e <_scanf_i+0xda>
 8011caa:	f1bb 0f02 	cmp.w	fp, #2
 8011cae:	d1ae      	bne.n	8011c0e <_scanf_i+0x8a>
 8011cb0:	6822      	ldr	r2, [r4, #0]
 8011cb2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8011cb6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8011cba:	d1bf      	bne.n	8011c3c <_scanf_i+0xb8>
 8011cbc:	2110      	movs	r1, #16
 8011cbe:	6061      	str	r1, [r4, #4]
 8011cc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011cc4:	e7a2      	b.n	8011c0c <_scanf_i+0x88>
 8011cc6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8011cca:	6022      	str	r2, [r4, #0]
 8011ccc:	780b      	ldrb	r3, [r1, #0]
 8011cce:	f805 3b01 	strb.w	r3, [r5], #1
 8011cd2:	e7de      	b.n	8011c92 <_scanf_i+0x10e>
 8011cd4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011cd8:	4631      	mov	r1, r6
 8011cda:	4650      	mov	r0, sl
 8011cdc:	4798      	blx	r3
 8011cde:	2800      	cmp	r0, #0
 8011ce0:	d0df      	beq.n	8011ca2 <_scanf_i+0x11e>
 8011ce2:	6823      	ldr	r3, [r4, #0]
 8011ce4:	05d9      	lsls	r1, r3, #23
 8011ce6:	d50d      	bpl.n	8011d04 <_scanf_i+0x180>
 8011ce8:	42bd      	cmp	r5, r7
 8011cea:	d909      	bls.n	8011d00 <_scanf_i+0x17c>
 8011cec:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011cf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011cf4:	4632      	mov	r2, r6
 8011cf6:	4650      	mov	r0, sl
 8011cf8:	4798      	blx	r3
 8011cfa:	f105 39ff 	add.w	r9, r5, #4294967295
 8011cfe:	464d      	mov	r5, r9
 8011d00:	42bd      	cmp	r5, r7
 8011d02:	d028      	beq.n	8011d56 <_scanf_i+0x1d2>
 8011d04:	6822      	ldr	r2, [r4, #0]
 8011d06:	f012 0210 	ands.w	r2, r2, #16
 8011d0a:	d113      	bne.n	8011d34 <_scanf_i+0x1b0>
 8011d0c:	702a      	strb	r2, [r5, #0]
 8011d0e:	6863      	ldr	r3, [r4, #4]
 8011d10:	9e01      	ldr	r6, [sp, #4]
 8011d12:	4639      	mov	r1, r7
 8011d14:	4650      	mov	r0, sl
 8011d16:	47b0      	blx	r6
 8011d18:	f8d8 3000 	ldr.w	r3, [r8]
 8011d1c:	6821      	ldr	r1, [r4, #0]
 8011d1e:	1d1a      	adds	r2, r3, #4
 8011d20:	f8c8 2000 	str.w	r2, [r8]
 8011d24:	f011 0f20 	tst.w	r1, #32
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	d00f      	beq.n	8011d4c <_scanf_i+0x1c8>
 8011d2c:	6018      	str	r0, [r3, #0]
 8011d2e:	68e3      	ldr	r3, [r4, #12]
 8011d30:	3301      	adds	r3, #1
 8011d32:	60e3      	str	r3, [r4, #12]
 8011d34:	6923      	ldr	r3, [r4, #16]
 8011d36:	1bed      	subs	r5, r5, r7
 8011d38:	445d      	add	r5, fp
 8011d3a:	442b      	add	r3, r5
 8011d3c:	6123      	str	r3, [r4, #16]
 8011d3e:	2000      	movs	r0, #0
 8011d40:	b007      	add	sp, #28
 8011d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d46:	f04f 0b00 	mov.w	fp, #0
 8011d4a:	e7ca      	b.n	8011ce2 <_scanf_i+0x15e>
 8011d4c:	07ca      	lsls	r2, r1, #31
 8011d4e:	bf4c      	ite	mi
 8011d50:	8018      	strhmi	r0, [r3, #0]
 8011d52:	6018      	strpl	r0, [r3, #0]
 8011d54:	e7eb      	b.n	8011d2e <_scanf_i+0x1aa>
 8011d56:	2001      	movs	r0, #1
 8011d58:	e7f2      	b.n	8011d40 <_scanf_i+0x1bc>
 8011d5a:	bf00      	nop
 8011d5c:	08013e5c 	.word	0x08013e5c
 8011d60:	08011201 	.word	0x08011201
 8011d64:	0801294d 	.word	0x0801294d
 8011d68:	080142ba 	.word	0x080142ba

08011d6c <__sflush_r>:
 8011d6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d74:	0716      	lsls	r6, r2, #28
 8011d76:	4605      	mov	r5, r0
 8011d78:	460c      	mov	r4, r1
 8011d7a:	d454      	bmi.n	8011e26 <__sflush_r+0xba>
 8011d7c:	684b      	ldr	r3, [r1, #4]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	dc02      	bgt.n	8011d88 <__sflush_r+0x1c>
 8011d82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	dd48      	ble.n	8011e1a <__sflush_r+0xae>
 8011d88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011d8a:	2e00      	cmp	r6, #0
 8011d8c:	d045      	beq.n	8011e1a <__sflush_r+0xae>
 8011d8e:	2300      	movs	r3, #0
 8011d90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011d94:	682f      	ldr	r7, [r5, #0]
 8011d96:	6a21      	ldr	r1, [r4, #32]
 8011d98:	602b      	str	r3, [r5, #0]
 8011d9a:	d030      	beq.n	8011dfe <__sflush_r+0x92>
 8011d9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011d9e:	89a3      	ldrh	r3, [r4, #12]
 8011da0:	0759      	lsls	r1, r3, #29
 8011da2:	d505      	bpl.n	8011db0 <__sflush_r+0x44>
 8011da4:	6863      	ldr	r3, [r4, #4]
 8011da6:	1ad2      	subs	r2, r2, r3
 8011da8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011daa:	b10b      	cbz	r3, 8011db0 <__sflush_r+0x44>
 8011dac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011dae:	1ad2      	subs	r2, r2, r3
 8011db0:	2300      	movs	r3, #0
 8011db2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011db4:	6a21      	ldr	r1, [r4, #32]
 8011db6:	4628      	mov	r0, r5
 8011db8:	47b0      	blx	r6
 8011dba:	1c43      	adds	r3, r0, #1
 8011dbc:	89a3      	ldrh	r3, [r4, #12]
 8011dbe:	d106      	bne.n	8011dce <__sflush_r+0x62>
 8011dc0:	6829      	ldr	r1, [r5, #0]
 8011dc2:	291d      	cmp	r1, #29
 8011dc4:	d82b      	bhi.n	8011e1e <__sflush_r+0xb2>
 8011dc6:	4a2a      	ldr	r2, [pc, #168]	@ (8011e70 <__sflush_r+0x104>)
 8011dc8:	410a      	asrs	r2, r1
 8011dca:	07d6      	lsls	r6, r2, #31
 8011dcc:	d427      	bmi.n	8011e1e <__sflush_r+0xb2>
 8011dce:	2200      	movs	r2, #0
 8011dd0:	6062      	str	r2, [r4, #4]
 8011dd2:	04d9      	lsls	r1, r3, #19
 8011dd4:	6922      	ldr	r2, [r4, #16]
 8011dd6:	6022      	str	r2, [r4, #0]
 8011dd8:	d504      	bpl.n	8011de4 <__sflush_r+0x78>
 8011dda:	1c42      	adds	r2, r0, #1
 8011ddc:	d101      	bne.n	8011de2 <__sflush_r+0x76>
 8011dde:	682b      	ldr	r3, [r5, #0]
 8011de0:	b903      	cbnz	r3, 8011de4 <__sflush_r+0x78>
 8011de2:	6560      	str	r0, [r4, #84]	@ 0x54
 8011de4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011de6:	602f      	str	r7, [r5, #0]
 8011de8:	b1b9      	cbz	r1, 8011e1a <__sflush_r+0xae>
 8011dea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011dee:	4299      	cmp	r1, r3
 8011df0:	d002      	beq.n	8011df8 <__sflush_r+0x8c>
 8011df2:	4628      	mov	r0, r5
 8011df4:	f7fd fdd0 	bl	800f998 <_free_r>
 8011df8:	2300      	movs	r3, #0
 8011dfa:	6363      	str	r3, [r4, #52]	@ 0x34
 8011dfc:	e00d      	b.n	8011e1a <__sflush_r+0xae>
 8011dfe:	2301      	movs	r3, #1
 8011e00:	4628      	mov	r0, r5
 8011e02:	47b0      	blx	r6
 8011e04:	4602      	mov	r2, r0
 8011e06:	1c50      	adds	r0, r2, #1
 8011e08:	d1c9      	bne.n	8011d9e <__sflush_r+0x32>
 8011e0a:	682b      	ldr	r3, [r5, #0]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d0c6      	beq.n	8011d9e <__sflush_r+0x32>
 8011e10:	2b1d      	cmp	r3, #29
 8011e12:	d001      	beq.n	8011e18 <__sflush_r+0xac>
 8011e14:	2b16      	cmp	r3, #22
 8011e16:	d11e      	bne.n	8011e56 <__sflush_r+0xea>
 8011e18:	602f      	str	r7, [r5, #0]
 8011e1a:	2000      	movs	r0, #0
 8011e1c:	e022      	b.n	8011e64 <__sflush_r+0xf8>
 8011e1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e22:	b21b      	sxth	r3, r3
 8011e24:	e01b      	b.n	8011e5e <__sflush_r+0xf2>
 8011e26:	690f      	ldr	r7, [r1, #16]
 8011e28:	2f00      	cmp	r7, #0
 8011e2a:	d0f6      	beq.n	8011e1a <__sflush_r+0xae>
 8011e2c:	0793      	lsls	r3, r2, #30
 8011e2e:	680e      	ldr	r6, [r1, #0]
 8011e30:	bf08      	it	eq
 8011e32:	694b      	ldreq	r3, [r1, #20]
 8011e34:	600f      	str	r7, [r1, #0]
 8011e36:	bf18      	it	ne
 8011e38:	2300      	movne	r3, #0
 8011e3a:	eba6 0807 	sub.w	r8, r6, r7
 8011e3e:	608b      	str	r3, [r1, #8]
 8011e40:	f1b8 0f00 	cmp.w	r8, #0
 8011e44:	dde9      	ble.n	8011e1a <__sflush_r+0xae>
 8011e46:	6a21      	ldr	r1, [r4, #32]
 8011e48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011e4a:	4643      	mov	r3, r8
 8011e4c:	463a      	mov	r2, r7
 8011e4e:	4628      	mov	r0, r5
 8011e50:	47b0      	blx	r6
 8011e52:	2800      	cmp	r0, #0
 8011e54:	dc08      	bgt.n	8011e68 <__sflush_r+0xfc>
 8011e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e5e:	81a3      	strh	r3, [r4, #12]
 8011e60:	f04f 30ff 	mov.w	r0, #4294967295
 8011e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e68:	4407      	add	r7, r0
 8011e6a:	eba8 0800 	sub.w	r8, r8, r0
 8011e6e:	e7e7      	b.n	8011e40 <__sflush_r+0xd4>
 8011e70:	dfbffffe 	.word	0xdfbffffe

08011e74 <_fflush_r>:
 8011e74:	b538      	push	{r3, r4, r5, lr}
 8011e76:	690b      	ldr	r3, [r1, #16]
 8011e78:	4605      	mov	r5, r0
 8011e7a:	460c      	mov	r4, r1
 8011e7c:	b913      	cbnz	r3, 8011e84 <_fflush_r+0x10>
 8011e7e:	2500      	movs	r5, #0
 8011e80:	4628      	mov	r0, r5
 8011e82:	bd38      	pop	{r3, r4, r5, pc}
 8011e84:	b118      	cbz	r0, 8011e8e <_fflush_r+0x1a>
 8011e86:	6a03      	ldr	r3, [r0, #32]
 8011e88:	b90b      	cbnz	r3, 8011e8e <_fflush_r+0x1a>
 8011e8a:	f7fc fcc7 	bl	800e81c <__sinit>
 8011e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d0f3      	beq.n	8011e7e <_fflush_r+0xa>
 8011e96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011e98:	07d0      	lsls	r0, r2, #31
 8011e9a:	d404      	bmi.n	8011ea6 <_fflush_r+0x32>
 8011e9c:	0599      	lsls	r1, r3, #22
 8011e9e:	d402      	bmi.n	8011ea6 <_fflush_r+0x32>
 8011ea0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ea2:	f7fc ff14 	bl	800ecce <__retarget_lock_acquire_recursive>
 8011ea6:	4628      	mov	r0, r5
 8011ea8:	4621      	mov	r1, r4
 8011eaa:	f7ff ff5f 	bl	8011d6c <__sflush_r>
 8011eae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011eb0:	07da      	lsls	r2, r3, #31
 8011eb2:	4605      	mov	r5, r0
 8011eb4:	d4e4      	bmi.n	8011e80 <_fflush_r+0xc>
 8011eb6:	89a3      	ldrh	r3, [r4, #12]
 8011eb8:	059b      	lsls	r3, r3, #22
 8011eba:	d4e1      	bmi.n	8011e80 <_fflush_r+0xc>
 8011ebc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ebe:	f7fc ff07 	bl	800ecd0 <__retarget_lock_release_recursive>
 8011ec2:	e7dd      	b.n	8011e80 <_fflush_r+0xc>

08011ec4 <__swhatbuf_r>:
 8011ec4:	b570      	push	{r4, r5, r6, lr}
 8011ec6:	460c      	mov	r4, r1
 8011ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ecc:	2900      	cmp	r1, #0
 8011ece:	b096      	sub	sp, #88	@ 0x58
 8011ed0:	4615      	mov	r5, r2
 8011ed2:	461e      	mov	r6, r3
 8011ed4:	da0d      	bge.n	8011ef2 <__swhatbuf_r+0x2e>
 8011ed6:	89a3      	ldrh	r3, [r4, #12]
 8011ed8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011edc:	f04f 0100 	mov.w	r1, #0
 8011ee0:	bf14      	ite	ne
 8011ee2:	2340      	movne	r3, #64	@ 0x40
 8011ee4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011ee8:	2000      	movs	r0, #0
 8011eea:	6031      	str	r1, [r6, #0]
 8011eec:	602b      	str	r3, [r5, #0]
 8011eee:	b016      	add	sp, #88	@ 0x58
 8011ef0:	bd70      	pop	{r4, r5, r6, pc}
 8011ef2:	466a      	mov	r2, sp
 8011ef4:	f000 f8d6 	bl	80120a4 <_fstat_r>
 8011ef8:	2800      	cmp	r0, #0
 8011efa:	dbec      	blt.n	8011ed6 <__swhatbuf_r+0x12>
 8011efc:	9901      	ldr	r1, [sp, #4]
 8011efe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011f02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011f06:	4259      	negs	r1, r3
 8011f08:	4159      	adcs	r1, r3
 8011f0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011f0e:	e7eb      	b.n	8011ee8 <__swhatbuf_r+0x24>

08011f10 <__smakebuf_r>:
 8011f10:	898b      	ldrh	r3, [r1, #12]
 8011f12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011f14:	079d      	lsls	r5, r3, #30
 8011f16:	4606      	mov	r6, r0
 8011f18:	460c      	mov	r4, r1
 8011f1a:	d507      	bpl.n	8011f2c <__smakebuf_r+0x1c>
 8011f1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011f20:	6023      	str	r3, [r4, #0]
 8011f22:	6123      	str	r3, [r4, #16]
 8011f24:	2301      	movs	r3, #1
 8011f26:	6163      	str	r3, [r4, #20]
 8011f28:	b003      	add	sp, #12
 8011f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f2c:	ab01      	add	r3, sp, #4
 8011f2e:	466a      	mov	r2, sp
 8011f30:	f7ff ffc8 	bl	8011ec4 <__swhatbuf_r>
 8011f34:	9f00      	ldr	r7, [sp, #0]
 8011f36:	4605      	mov	r5, r0
 8011f38:	4639      	mov	r1, r7
 8011f3a:	4630      	mov	r0, r6
 8011f3c:	f7fd fda0 	bl	800fa80 <_malloc_r>
 8011f40:	b948      	cbnz	r0, 8011f56 <__smakebuf_r+0x46>
 8011f42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f46:	059a      	lsls	r2, r3, #22
 8011f48:	d4ee      	bmi.n	8011f28 <__smakebuf_r+0x18>
 8011f4a:	f023 0303 	bic.w	r3, r3, #3
 8011f4e:	f043 0302 	orr.w	r3, r3, #2
 8011f52:	81a3      	strh	r3, [r4, #12]
 8011f54:	e7e2      	b.n	8011f1c <__smakebuf_r+0xc>
 8011f56:	89a3      	ldrh	r3, [r4, #12]
 8011f58:	6020      	str	r0, [r4, #0]
 8011f5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f5e:	81a3      	strh	r3, [r4, #12]
 8011f60:	9b01      	ldr	r3, [sp, #4]
 8011f62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011f66:	b15b      	cbz	r3, 8011f80 <__smakebuf_r+0x70>
 8011f68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f6c:	4630      	mov	r0, r6
 8011f6e:	f000 f8ab 	bl	80120c8 <_isatty_r>
 8011f72:	b128      	cbz	r0, 8011f80 <__smakebuf_r+0x70>
 8011f74:	89a3      	ldrh	r3, [r4, #12]
 8011f76:	f023 0303 	bic.w	r3, r3, #3
 8011f7a:	f043 0301 	orr.w	r3, r3, #1
 8011f7e:	81a3      	strh	r3, [r4, #12]
 8011f80:	89a3      	ldrh	r3, [r4, #12]
 8011f82:	431d      	orrs	r5, r3
 8011f84:	81a5      	strh	r5, [r4, #12]
 8011f86:	e7cf      	b.n	8011f28 <__smakebuf_r+0x18>

08011f88 <__sccl>:
 8011f88:	b570      	push	{r4, r5, r6, lr}
 8011f8a:	780b      	ldrb	r3, [r1, #0]
 8011f8c:	4604      	mov	r4, r0
 8011f8e:	2b5e      	cmp	r3, #94	@ 0x5e
 8011f90:	bf0b      	itete	eq
 8011f92:	784b      	ldrbeq	r3, [r1, #1]
 8011f94:	1c4a      	addne	r2, r1, #1
 8011f96:	1c8a      	addeq	r2, r1, #2
 8011f98:	2100      	movne	r1, #0
 8011f9a:	bf08      	it	eq
 8011f9c:	2101      	moveq	r1, #1
 8011f9e:	3801      	subs	r0, #1
 8011fa0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8011fa4:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011fa8:	42a8      	cmp	r0, r5
 8011faa:	d1fb      	bne.n	8011fa4 <__sccl+0x1c>
 8011fac:	b90b      	cbnz	r3, 8011fb2 <__sccl+0x2a>
 8011fae:	1e50      	subs	r0, r2, #1
 8011fb0:	bd70      	pop	{r4, r5, r6, pc}
 8011fb2:	f081 0101 	eor.w	r1, r1, #1
 8011fb6:	54e1      	strb	r1, [r4, r3]
 8011fb8:	4610      	mov	r0, r2
 8011fba:	4602      	mov	r2, r0
 8011fbc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011fc0:	2d2d      	cmp	r5, #45	@ 0x2d
 8011fc2:	d005      	beq.n	8011fd0 <__sccl+0x48>
 8011fc4:	2d5d      	cmp	r5, #93	@ 0x5d
 8011fc6:	d016      	beq.n	8011ff6 <__sccl+0x6e>
 8011fc8:	2d00      	cmp	r5, #0
 8011fca:	d0f1      	beq.n	8011fb0 <__sccl+0x28>
 8011fcc:	462b      	mov	r3, r5
 8011fce:	e7f2      	b.n	8011fb6 <__sccl+0x2e>
 8011fd0:	7846      	ldrb	r6, [r0, #1]
 8011fd2:	2e5d      	cmp	r6, #93	@ 0x5d
 8011fd4:	d0fa      	beq.n	8011fcc <__sccl+0x44>
 8011fd6:	42b3      	cmp	r3, r6
 8011fd8:	dcf8      	bgt.n	8011fcc <__sccl+0x44>
 8011fda:	3002      	adds	r0, #2
 8011fdc:	461a      	mov	r2, r3
 8011fde:	3201      	adds	r2, #1
 8011fe0:	4296      	cmp	r6, r2
 8011fe2:	54a1      	strb	r1, [r4, r2]
 8011fe4:	dcfb      	bgt.n	8011fde <__sccl+0x56>
 8011fe6:	1af2      	subs	r2, r6, r3
 8011fe8:	3a01      	subs	r2, #1
 8011fea:	1c5d      	adds	r5, r3, #1
 8011fec:	42b3      	cmp	r3, r6
 8011fee:	bfa8      	it	ge
 8011ff0:	2200      	movge	r2, #0
 8011ff2:	18ab      	adds	r3, r5, r2
 8011ff4:	e7e1      	b.n	8011fba <__sccl+0x32>
 8011ff6:	4610      	mov	r0, r2
 8011ff8:	e7da      	b.n	8011fb0 <__sccl+0x28>

08011ffa <__submore>:
 8011ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ffe:	460c      	mov	r4, r1
 8012000:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012002:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012006:	4299      	cmp	r1, r3
 8012008:	d11d      	bne.n	8012046 <__submore+0x4c>
 801200a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801200e:	f7fd fd37 	bl	800fa80 <_malloc_r>
 8012012:	b918      	cbnz	r0, 801201c <__submore+0x22>
 8012014:	f04f 30ff 	mov.w	r0, #4294967295
 8012018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801201c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012020:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012022:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8012026:	6360      	str	r0, [r4, #52]	@ 0x34
 8012028:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801202c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012030:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012034:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012038:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801203c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8012040:	6020      	str	r0, [r4, #0]
 8012042:	2000      	movs	r0, #0
 8012044:	e7e8      	b.n	8012018 <__submore+0x1e>
 8012046:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8012048:	0077      	lsls	r7, r6, #1
 801204a:	463a      	mov	r2, r7
 801204c:	f000 fbe1 	bl	8012812 <_realloc_r>
 8012050:	4605      	mov	r5, r0
 8012052:	2800      	cmp	r0, #0
 8012054:	d0de      	beq.n	8012014 <__submore+0x1a>
 8012056:	eb00 0806 	add.w	r8, r0, r6
 801205a:	4601      	mov	r1, r0
 801205c:	4632      	mov	r2, r6
 801205e:	4640      	mov	r0, r8
 8012060:	f7fc fe37 	bl	800ecd2 <memcpy>
 8012064:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8012068:	f8c4 8000 	str.w	r8, [r4]
 801206c:	e7e9      	b.n	8012042 <__submore+0x48>

0801206e <memmove>:
 801206e:	4288      	cmp	r0, r1
 8012070:	b510      	push	{r4, lr}
 8012072:	eb01 0402 	add.w	r4, r1, r2
 8012076:	d902      	bls.n	801207e <memmove+0x10>
 8012078:	4284      	cmp	r4, r0
 801207a:	4623      	mov	r3, r4
 801207c:	d807      	bhi.n	801208e <memmove+0x20>
 801207e:	1e43      	subs	r3, r0, #1
 8012080:	42a1      	cmp	r1, r4
 8012082:	d008      	beq.n	8012096 <memmove+0x28>
 8012084:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012088:	f803 2f01 	strb.w	r2, [r3, #1]!
 801208c:	e7f8      	b.n	8012080 <memmove+0x12>
 801208e:	4402      	add	r2, r0
 8012090:	4601      	mov	r1, r0
 8012092:	428a      	cmp	r2, r1
 8012094:	d100      	bne.n	8012098 <memmove+0x2a>
 8012096:	bd10      	pop	{r4, pc}
 8012098:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801209c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80120a0:	e7f7      	b.n	8012092 <memmove+0x24>
	...

080120a4 <_fstat_r>:
 80120a4:	b538      	push	{r3, r4, r5, lr}
 80120a6:	4d07      	ldr	r5, [pc, #28]	@ (80120c4 <_fstat_r+0x20>)
 80120a8:	2300      	movs	r3, #0
 80120aa:	4604      	mov	r4, r0
 80120ac:	4608      	mov	r0, r1
 80120ae:	4611      	mov	r1, r2
 80120b0:	602b      	str	r3, [r5, #0]
 80120b2:	f7f2 f863 	bl	800417c <_fstat>
 80120b6:	1c43      	adds	r3, r0, #1
 80120b8:	d102      	bne.n	80120c0 <_fstat_r+0x1c>
 80120ba:	682b      	ldr	r3, [r5, #0]
 80120bc:	b103      	cbz	r3, 80120c0 <_fstat_r+0x1c>
 80120be:	6023      	str	r3, [r4, #0]
 80120c0:	bd38      	pop	{r3, r4, r5, pc}
 80120c2:	bf00      	nop
 80120c4:	20002e10 	.word	0x20002e10

080120c8 <_isatty_r>:
 80120c8:	b538      	push	{r3, r4, r5, lr}
 80120ca:	4d06      	ldr	r5, [pc, #24]	@ (80120e4 <_isatty_r+0x1c>)
 80120cc:	2300      	movs	r3, #0
 80120ce:	4604      	mov	r4, r0
 80120d0:	4608      	mov	r0, r1
 80120d2:	602b      	str	r3, [r5, #0]
 80120d4:	f7f2 f862 	bl	800419c <_isatty>
 80120d8:	1c43      	adds	r3, r0, #1
 80120da:	d102      	bne.n	80120e2 <_isatty_r+0x1a>
 80120dc:	682b      	ldr	r3, [r5, #0]
 80120de:	b103      	cbz	r3, 80120e2 <_isatty_r+0x1a>
 80120e0:	6023      	str	r3, [r4, #0]
 80120e2:	bd38      	pop	{r3, r4, r5, pc}
 80120e4:	20002e10 	.word	0x20002e10

080120e8 <_sbrk_r>:
 80120e8:	b538      	push	{r3, r4, r5, lr}
 80120ea:	4d06      	ldr	r5, [pc, #24]	@ (8012104 <_sbrk_r+0x1c>)
 80120ec:	2300      	movs	r3, #0
 80120ee:	4604      	mov	r4, r0
 80120f0:	4608      	mov	r0, r1
 80120f2:	602b      	str	r3, [r5, #0]
 80120f4:	f7f2 f86a 	bl	80041cc <_sbrk>
 80120f8:	1c43      	adds	r3, r0, #1
 80120fa:	d102      	bne.n	8012102 <_sbrk_r+0x1a>
 80120fc:	682b      	ldr	r3, [r5, #0]
 80120fe:	b103      	cbz	r3, 8012102 <_sbrk_r+0x1a>
 8012100:	6023      	str	r3, [r4, #0]
 8012102:	bd38      	pop	{r3, r4, r5, pc}
 8012104:	20002e10 	.word	0x20002e10

08012108 <nan>:
 8012108:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012110 <nan+0x8>
 801210c:	4770      	bx	lr
 801210e:	bf00      	nop
 8012110:	00000000 	.word	0x00000000
 8012114:	7ff80000 	.word	0x7ff80000

08012118 <__assert_func>:
 8012118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801211a:	4614      	mov	r4, r2
 801211c:	461a      	mov	r2, r3
 801211e:	4b09      	ldr	r3, [pc, #36]	@ (8012144 <__assert_func+0x2c>)
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	4605      	mov	r5, r0
 8012124:	68d8      	ldr	r0, [r3, #12]
 8012126:	b954      	cbnz	r4, 801213e <__assert_func+0x26>
 8012128:	4b07      	ldr	r3, [pc, #28]	@ (8012148 <__assert_func+0x30>)
 801212a:	461c      	mov	r4, r3
 801212c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012130:	9100      	str	r1, [sp, #0]
 8012132:	462b      	mov	r3, r5
 8012134:	4905      	ldr	r1, [pc, #20]	@ (801214c <__assert_func+0x34>)
 8012136:	f000 fc19 	bl	801296c <fiprintf>
 801213a:	f000 fc29 	bl	8012990 <abort>
 801213e:	4b04      	ldr	r3, [pc, #16]	@ (8012150 <__assert_func+0x38>)
 8012140:	e7f4      	b.n	801212c <__assert_func+0x14>
 8012142:	bf00      	nop
 8012144:	20000028 	.word	0x20000028
 8012148:	08014308 	.word	0x08014308
 801214c:	080142da 	.word	0x080142da
 8012150:	080142cd 	.word	0x080142cd

08012154 <_calloc_r>:
 8012154:	b570      	push	{r4, r5, r6, lr}
 8012156:	fba1 5402 	umull	r5, r4, r1, r2
 801215a:	b93c      	cbnz	r4, 801216c <_calloc_r+0x18>
 801215c:	4629      	mov	r1, r5
 801215e:	f7fd fc8f 	bl	800fa80 <_malloc_r>
 8012162:	4606      	mov	r6, r0
 8012164:	b928      	cbnz	r0, 8012172 <_calloc_r+0x1e>
 8012166:	2600      	movs	r6, #0
 8012168:	4630      	mov	r0, r6
 801216a:	bd70      	pop	{r4, r5, r6, pc}
 801216c:	220c      	movs	r2, #12
 801216e:	6002      	str	r2, [r0, #0]
 8012170:	e7f9      	b.n	8012166 <_calloc_r+0x12>
 8012172:	462a      	mov	r2, r5
 8012174:	4621      	mov	r1, r4
 8012176:	f7fc fd1b 	bl	800ebb0 <memset>
 801217a:	e7f5      	b.n	8012168 <_calloc_r+0x14>

0801217c <rshift>:
 801217c:	6903      	ldr	r3, [r0, #16]
 801217e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012182:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012186:	ea4f 1261 	mov.w	r2, r1, asr #5
 801218a:	f100 0414 	add.w	r4, r0, #20
 801218e:	dd45      	ble.n	801221c <rshift+0xa0>
 8012190:	f011 011f 	ands.w	r1, r1, #31
 8012194:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012198:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801219c:	d10c      	bne.n	80121b8 <rshift+0x3c>
 801219e:	f100 0710 	add.w	r7, r0, #16
 80121a2:	4629      	mov	r1, r5
 80121a4:	42b1      	cmp	r1, r6
 80121a6:	d334      	bcc.n	8012212 <rshift+0x96>
 80121a8:	1a9b      	subs	r3, r3, r2
 80121aa:	009b      	lsls	r3, r3, #2
 80121ac:	1eea      	subs	r2, r5, #3
 80121ae:	4296      	cmp	r6, r2
 80121b0:	bf38      	it	cc
 80121b2:	2300      	movcc	r3, #0
 80121b4:	4423      	add	r3, r4
 80121b6:	e015      	b.n	80121e4 <rshift+0x68>
 80121b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80121bc:	f1c1 0820 	rsb	r8, r1, #32
 80121c0:	40cf      	lsrs	r7, r1
 80121c2:	f105 0e04 	add.w	lr, r5, #4
 80121c6:	46a1      	mov	r9, r4
 80121c8:	4576      	cmp	r6, lr
 80121ca:	46f4      	mov	ip, lr
 80121cc:	d815      	bhi.n	80121fa <rshift+0x7e>
 80121ce:	1a9a      	subs	r2, r3, r2
 80121d0:	0092      	lsls	r2, r2, #2
 80121d2:	3a04      	subs	r2, #4
 80121d4:	3501      	adds	r5, #1
 80121d6:	42ae      	cmp	r6, r5
 80121d8:	bf38      	it	cc
 80121da:	2200      	movcc	r2, #0
 80121dc:	18a3      	adds	r3, r4, r2
 80121de:	50a7      	str	r7, [r4, r2]
 80121e0:	b107      	cbz	r7, 80121e4 <rshift+0x68>
 80121e2:	3304      	adds	r3, #4
 80121e4:	1b1a      	subs	r2, r3, r4
 80121e6:	42a3      	cmp	r3, r4
 80121e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80121ec:	bf08      	it	eq
 80121ee:	2300      	moveq	r3, #0
 80121f0:	6102      	str	r2, [r0, #16]
 80121f2:	bf08      	it	eq
 80121f4:	6143      	streq	r3, [r0, #20]
 80121f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80121fa:	f8dc c000 	ldr.w	ip, [ip]
 80121fe:	fa0c fc08 	lsl.w	ip, ip, r8
 8012202:	ea4c 0707 	orr.w	r7, ip, r7
 8012206:	f849 7b04 	str.w	r7, [r9], #4
 801220a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801220e:	40cf      	lsrs	r7, r1
 8012210:	e7da      	b.n	80121c8 <rshift+0x4c>
 8012212:	f851 cb04 	ldr.w	ip, [r1], #4
 8012216:	f847 cf04 	str.w	ip, [r7, #4]!
 801221a:	e7c3      	b.n	80121a4 <rshift+0x28>
 801221c:	4623      	mov	r3, r4
 801221e:	e7e1      	b.n	80121e4 <rshift+0x68>

08012220 <__hexdig_fun>:
 8012220:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8012224:	2b09      	cmp	r3, #9
 8012226:	d802      	bhi.n	801222e <__hexdig_fun+0xe>
 8012228:	3820      	subs	r0, #32
 801222a:	b2c0      	uxtb	r0, r0
 801222c:	4770      	bx	lr
 801222e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8012232:	2b05      	cmp	r3, #5
 8012234:	d801      	bhi.n	801223a <__hexdig_fun+0x1a>
 8012236:	3847      	subs	r0, #71	@ 0x47
 8012238:	e7f7      	b.n	801222a <__hexdig_fun+0xa>
 801223a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801223e:	2b05      	cmp	r3, #5
 8012240:	d801      	bhi.n	8012246 <__hexdig_fun+0x26>
 8012242:	3827      	subs	r0, #39	@ 0x27
 8012244:	e7f1      	b.n	801222a <__hexdig_fun+0xa>
 8012246:	2000      	movs	r0, #0
 8012248:	4770      	bx	lr
	...

0801224c <__gethex>:
 801224c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012250:	b085      	sub	sp, #20
 8012252:	468a      	mov	sl, r1
 8012254:	9302      	str	r3, [sp, #8]
 8012256:	680b      	ldr	r3, [r1, #0]
 8012258:	9001      	str	r0, [sp, #4]
 801225a:	4690      	mov	r8, r2
 801225c:	1c9c      	adds	r4, r3, #2
 801225e:	46a1      	mov	r9, r4
 8012260:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012264:	2830      	cmp	r0, #48	@ 0x30
 8012266:	d0fa      	beq.n	801225e <__gethex+0x12>
 8012268:	eba9 0303 	sub.w	r3, r9, r3
 801226c:	f1a3 0b02 	sub.w	fp, r3, #2
 8012270:	f7ff ffd6 	bl	8012220 <__hexdig_fun>
 8012274:	4605      	mov	r5, r0
 8012276:	2800      	cmp	r0, #0
 8012278:	d168      	bne.n	801234c <__gethex+0x100>
 801227a:	49a0      	ldr	r1, [pc, #640]	@ (80124fc <__gethex+0x2b0>)
 801227c:	2201      	movs	r2, #1
 801227e:	4648      	mov	r0, r9
 8012280:	f7fc fc9e 	bl	800ebc0 <strncmp>
 8012284:	4607      	mov	r7, r0
 8012286:	2800      	cmp	r0, #0
 8012288:	d167      	bne.n	801235a <__gethex+0x10e>
 801228a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801228e:	4626      	mov	r6, r4
 8012290:	f7ff ffc6 	bl	8012220 <__hexdig_fun>
 8012294:	2800      	cmp	r0, #0
 8012296:	d062      	beq.n	801235e <__gethex+0x112>
 8012298:	4623      	mov	r3, r4
 801229a:	7818      	ldrb	r0, [r3, #0]
 801229c:	2830      	cmp	r0, #48	@ 0x30
 801229e:	4699      	mov	r9, r3
 80122a0:	f103 0301 	add.w	r3, r3, #1
 80122a4:	d0f9      	beq.n	801229a <__gethex+0x4e>
 80122a6:	f7ff ffbb 	bl	8012220 <__hexdig_fun>
 80122aa:	fab0 f580 	clz	r5, r0
 80122ae:	096d      	lsrs	r5, r5, #5
 80122b0:	f04f 0b01 	mov.w	fp, #1
 80122b4:	464a      	mov	r2, r9
 80122b6:	4616      	mov	r6, r2
 80122b8:	3201      	adds	r2, #1
 80122ba:	7830      	ldrb	r0, [r6, #0]
 80122bc:	f7ff ffb0 	bl	8012220 <__hexdig_fun>
 80122c0:	2800      	cmp	r0, #0
 80122c2:	d1f8      	bne.n	80122b6 <__gethex+0x6a>
 80122c4:	498d      	ldr	r1, [pc, #564]	@ (80124fc <__gethex+0x2b0>)
 80122c6:	2201      	movs	r2, #1
 80122c8:	4630      	mov	r0, r6
 80122ca:	f7fc fc79 	bl	800ebc0 <strncmp>
 80122ce:	2800      	cmp	r0, #0
 80122d0:	d13f      	bne.n	8012352 <__gethex+0x106>
 80122d2:	b944      	cbnz	r4, 80122e6 <__gethex+0x9a>
 80122d4:	1c74      	adds	r4, r6, #1
 80122d6:	4622      	mov	r2, r4
 80122d8:	4616      	mov	r6, r2
 80122da:	3201      	adds	r2, #1
 80122dc:	7830      	ldrb	r0, [r6, #0]
 80122de:	f7ff ff9f 	bl	8012220 <__hexdig_fun>
 80122e2:	2800      	cmp	r0, #0
 80122e4:	d1f8      	bne.n	80122d8 <__gethex+0x8c>
 80122e6:	1ba4      	subs	r4, r4, r6
 80122e8:	00a7      	lsls	r7, r4, #2
 80122ea:	7833      	ldrb	r3, [r6, #0]
 80122ec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80122f0:	2b50      	cmp	r3, #80	@ 0x50
 80122f2:	d13e      	bne.n	8012372 <__gethex+0x126>
 80122f4:	7873      	ldrb	r3, [r6, #1]
 80122f6:	2b2b      	cmp	r3, #43	@ 0x2b
 80122f8:	d033      	beq.n	8012362 <__gethex+0x116>
 80122fa:	2b2d      	cmp	r3, #45	@ 0x2d
 80122fc:	d034      	beq.n	8012368 <__gethex+0x11c>
 80122fe:	1c71      	adds	r1, r6, #1
 8012300:	2400      	movs	r4, #0
 8012302:	7808      	ldrb	r0, [r1, #0]
 8012304:	f7ff ff8c 	bl	8012220 <__hexdig_fun>
 8012308:	1e43      	subs	r3, r0, #1
 801230a:	b2db      	uxtb	r3, r3
 801230c:	2b18      	cmp	r3, #24
 801230e:	d830      	bhi.n	8012372 <__gethex+0x126>
 8012310:	f1a0 0210 	sub.w	r2, r0, #16
 8012314:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012318:	f7ff ff82 	bl	8012220 <__hexdig_fun>
 801231c:	f100 3cff 	add.w	ip, r0, #4294967295
 8012320:	fa5f fc8c 	uxtb.w	ip, ip
 8012324:	f1bc 0f18 	cmp.w	ip, #24
 8012328:	f04f 030a 	mov.w	r3, #10
 801232c:	d91e      	bls.n	801236c <__gethex+0x120>
 801232e:	b104      	cbz	r4, 8012332 <__gethex+0xe6>
 8012330:	4252      	negs	r2, r2
 8012332:	4417      	add	r7, r2
 8012334:	f8ca 1000 	str.w	r1, [sl]
 8012338:	b1ed      	cbz	r5, 8012376 <__gethex+0x12a>
 801233a:	f1bb 0f00 	cmp.w	fp, #0
 801233e:	bf0c      	ite	eq
 8012340:	2506      	moveq	r5, #6
 8012342:	2500      	movne	r5, #0
 8012344:	4628      	mov	r0, r5
 8012346:	b005      	add	sp, #20
 8012348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801234c:	2500      	movs	r5, #0
 801234e:	462c      	mov	r4, r5
 8012350:	e7b0      	b.n	80122b4 <__gethex+0x68>
 8012352:	2c00      	cmp	r4, #0
 8012354:	d1c7      	bne.n	80122e6 <__gethex+0x9a>
 8012356:	4627      	mov	r7, r4
 8012358:	e7c7      	b.n	80122ea <__gethex+0x9e>
 801235a:	464e      	mov	r6, r9
 801235c:	462f      	mov	r7, r5
 801235e:	2501      	movs	r5, #1
 8012360:	e7c3      	b.n	80122ea <__gethex+0x9e>
 8012362:	2400      	movs	r4, #0
 8012364:	1cb1      	adds	r1, r6, #2
 8012366:	e7cc      	b.n	8012302 <__gethex+0xb6>
 8012368:	2401      	movs	r4, #1
 801236a:	e7fb      	b.n	8012364 <__gethex+0x118>
 801236c:	fb03 0002 	mla	r0, r3, r2, r0
 8012370:	e7ce      	b.n	8012310 <__gethex+0xc4>
 8012372:	4631      	mov	r1, r6
 8012374:	e7de      	b.n	8012334 <__gethex+0xe8>
 8012376:	eba6 0309 	sub.w	r3, r6, r9
 801237a:	3b01      	subs	r3, #1
 801237c:	4629      	mov	r1, r5
 801237e:	2b07      	cmp	r3, #7
 8012380:	dc0a      	bgt.n	8012398 <__gethex+0x14c>
 8012382:	9801      	ldr	r0, [sp, #4]
 8012384:	f7fd fc08 	bl	800fb98 <_Balloc>
 8012388:	4604      	mov	r4, r0
 801238a:	b940      	cbnz	r0, 801239e <__gethex+0x152>
 801238c:	4b5c      	ldr	r3, [pc, #368]	@ (8012500 <__gethex+0x2b4>)
 801238e:	4602      	mov	r2, r0
 8012390:	21e4      	movs	r1, #228	@ 0xe4
 8012392:	485c      	ldr	r0, [pc, #368]	@ (8012504 <__gethex+0x2b8>)
 8012394:	f7ff fec0 	bl	8012118 <__assert_func>
 8012398:	3101      	adds	r1, #1
 801239a:	105b      	asrs	r3, r3, #1
 801239c:	e7ef      	b.n	801237e <__gethex+0x132>
 801239e:	f100 0a14 	add.w	sl, r0, #20
 80123a2:	2300      	movs	r3, #0
 80123a4:	4655      	mov	r5, sl
 80123a6:	469b      	mov	fp, r3
 80123a8:	45b1      	cmp	r9, r6
 80123aa:	d337      	bcc.n	801241c <__gethex+0x1d0>
 80123ac:	f845 bb04 	str.w	fp, [r5], #4
 80123b0:	eba5 050a 	sub.w	r5, r5, sl
 80123b4:	10ad      	asrs	r5, r5, #2
 80123b6:	6125      	str	r5, [r4, #16]
 80123b8:	4658      	mov	r0, fp
 80123ba:	f7fd fcdf 	bl	800fd7c <__hi0bits>
 80123be:	016d      	lsls	r5, r5, #5
 80123c0:	f8d8 6000 	ldr.w	r6, [r8]
 80123c4:	1a2d      	subs	r5, r5, r0
 80123c6:	42b5      	cmp	r5, r6
 80123c8:	dd54      	ble.n	8012474 <__gethex+0x228>
 80123ca:	1bad      	subs	r5, r5, r6
 80123cc:	4629      	mov	r1, r5
 80123ce:	4620      	mov	r0, r4
 80123d0:	f7fe f873 	bl	80104ba <__any_on>
 80123d4:	4681      	mov	r9, r0
 80123d6:	b178      	cbz	r0, 80123f8 <__gethex+0x1ac>
 80123d8:	1e6b      	subs	r3, r5, #1
 80123da:	1159      	asrs	r1, r3, #5
 80123dc:	f003 021f 	and.w	r2, r3, #31
 80123e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80123e4:	f04f 0901 	mov.w	r9, #1
 80123e8:	fa09 f202 	lsl.w	r2, r9, r2
 80123ec:	420a      	tst	r2, r1
 80123ee:	d003      	beq.n	80123f8 <__gethex+0x1ac>
 80123f0:	454b      	cmp	r3, r9
 80123f2:	dc36      	bgt.n	8012462 <__gethex+0x216>
 80123f4:	f04f 0902 	mov.w	r9, #2
 80123f8:	4629      	mov	r1, r5
 80123fa:	4620      	mov	r0, r4
 80123fc:	f7ff febe 	bl	801217c <rshift>
 8012400:	442f      	add	r7, r5
 8012402:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012406:	42bb      	cmp	r3, r7
 8012408:	da42      	bge.n	8012490 <__gethex+0x244>
 801240a:	9801      	ldr	r0, [sp, #4]
 801240c:	4621      	mov	r1, r4
 801240e:	f7fd fc03 	bl	800fc18 <_Bfree>
 8012412:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012414:	2300      	movs	r3, #0
 8012416:	6013      	str	r3, [r2, #0]
 8012418:	25a3      	movs	r5, #163	@ 0xa3
 801241a:	e793      	b.n	8012344 <__gethex+0xf8>
 801241c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012420:	2a2e      	cmp	r2, #46	@ 0x2e
 8012422:	d012      	beq.n	801244a <__gethex+0x1fe>
 8012424:	2b20      	cmp	r3, #32
 8012426:	d104      	bne.n	8012432 <__gethex+0x1e6>
 8012428:	f845 bb04 	str.w	fp, [r5], #4
 801242c:	f04f 0b00 	mov.w	fp, #0
 8012430:	465b      	mov	r3, fp
 8012432:	7830      	ldrb	r0, [r6, #0]
 8012434:	9303      	str	r3, [sp, #12]
 8012436:	f7ff fef3 	bl	8012220 <__hexdig_fun>
 801243a:	9b03      	ldr	r3, [sp, #12]
 801243c:	f000 000f 	and.w	r0, r0, #15
 8012440:	4098      	lsls	r0, r3
 8012442:	ea4b 0b00 	orr.w	fp, fp, r0
 8012446:	3304      	adds	r3, #4
 8012448:	e7ae      	b.n	80123a8 <__gethex+0x15c>
 801244a:	45b1      	cmp	r9, r6
 801244c:	d8ea      	bhi.n	8012424 <__gethex+0x1d8>
 801244e:	492b      	ldr	r1, [pc, #172]	@ (80124fc <__gethex+0x2b0>)
 8012450:	9303      	str	r3, [sp, #12]
 8012452:	2201      	movs	r2, #1
 8012454:	4630      	mov	r0, r6
 8012456:	f7fc fbb3 	bl	800ebc0 <strncmp>
 801245a:	9b03      	ldr	r3, [sp, #12]
 801245c:	2800      	cmp	r0, #0
 801245e:	d1e1      	bne.n	8012424 <__gethex+0x1d8>
 8012460:	e7a2      	b.n	80123a8 <__gethex+0x15c>
 8012462:	1ea9      	subs	r1, r5, #2
 8012464:	4620      	mov	r0, r4
 8012466:	f7fe f828 	bl	80104ba <__any_on>
 801246a:	2800      	cmp	r0, #0
 801246c:	d0c2      	beq.n	80123f4 <__gethex+0x1a8>
 801246e:	f04f 0903 	mov.w	r9, #3
 8012472:	e7c1      	b.n	80123f8 <__gethex+0x1ac>
 8012474:	da09      	bge.n	801248a <__gethex+0x23e>
 8012476:	1b75      	subs	r5, r6, r5
 8012478:	4621      	mov	r1, r4
 801247a:	9801      	ldr	r0, [sp, #4]
 801247c:	462a      	mov	r2, r5
 801247e:	f7fd fde3 	bl	8010048 <__lshift>
 8012482:	1b7f      	subs	r7, r7, r5
 8012484:	4604      	mov	r4, r0
 8012486:	f100 0a14 	add.w	sl, r0, #20
 801248a:	f04f 0900 	mov.w	r9, #0
 801248e:	e7b8      	b.n	8012402 <__gethex+0x1b6>
 8012490:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012494:	42bd      	cmp	r5, r7
 8012496:	dd6f      	ble.n	8012578 <__gethex+0x32c>
 8012498:	1bed      	subs	r5, r5, r7
 801249a:	42ae      	cmp	r6, r5
 801249c:	dc34      	bgt.n	8012508 <__gethex+0x2bc>
 801249e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80124a2:	2b02      	cmp	r3, #2
 80124a4:	d022      	beq.n	80124ec <__gethex+0x2a0>
 80124a6:	2b03      	cmp	r3, #3
 80124a8:	d024      	beq.n	80124f4 <__gethex+0x2a8>
 80124aa:	2b01      	cmp	r3, #1
 80124ac:	d115      	bne.n	80124da <__gethex+0x28e>
 80124ae:	42ae      	cmp	r6, r5
 80124b0:	d113      	bne.n	80124da <__gethex+0x28e>
 80124b2:	2e01      	cmp	r6, #1
 80124b4:	d10b      	bne.n	80124ce <__gethex+0x282>
 80124b6:	9a02      	ldr	r2, [sp, #8]
 80124b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80124bc:	6013      	str	r3, [r2, #0]
 80124be:	2301      	movs	r3, #1
 80124c0:	6123      	str	r3, [r4, #16]
 80124c2:	f8ca 3000 	str.w	r3, [sl]
 80124c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80124c8:	2562      	movs	r5, #98	@ 0x62
 80124ca:	601c      	str	r4, [r3, #0]
 80124cc:	e73a      	b.n	8012344 <__gethex+0xf8>
 80124ce:	1e71      	subs	r1, r6, #1
 80124d0:	4620      	mov	r0, r4
 80124d2:	f7fd fff2 	bl	80104ba <__any_on>
 80124d6:	2800      	cmp	r0, #0
 80124d8:	d1ed      	bne.n	80124b6 <__gethex+0x26a>
 80124da:	9801      	ldr	r0, [sp, #4]
 80124dc:	4621      	mov	r1, r4
 80124de:	f7fd fb9b 	bl	800fc18 <_Bfree>
 80124e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80124e4:	2300      	movs	r3, #0
 80124e6:	6013      	str	r3, [r2, #0]
 80124e8:	2550      	movs	r5, #80	@ 0x50
 80124ea:	e72b      	b.n	8012344 <__gethex+0xf8>
 80124ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d1f3      	bne.n	80124da <__gethex+0x28e>
 80124f2:	e7e0      	b.n	80124b6 <__gethex+0x26a>
 80124f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d1dd      	bne.n	80124b6 <__gethex+0x26a>
 80124fa:	e7ee      	b.n	80124da <__gethex+0x28e>
 80124fc:	08014140 	.word	0x08014140
 8012500:	08013fd3 	.word	0x08013fd3
 8012504:	08014309 	.word	0x08014309
 8012508:	1e6f      	subs	r7, r5, #1
 801250a:	f1b9 0f00 	cmp.w	r9, #0
 801250e:	d130      	bne.n	8012572 <__gethex+0x326>
 8012510:	b127      	cbz	r7, 801251c <__gethex+0x2d0>
 8012512:	4639      	mov	r1, r7
 8012514:	4620      	mov	r0, r4
 8012516:	f7fd ffd0 	bl	80104ba <__any_on>
 801251a:	4681      	mov	r9, r0
 801251c:	117a      	asrs	r2, r7, #5
 801251e:	2301      	movs	r3, #1
 8012520:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012524:	f007 071f 	and.w	r7, r7, #31
 8012528:	40bb      	lsls	r3, r7
 801252a:	4213      	tst	r3, r2
 801252c:	4629      	mov	r1, r5
 801252e:	4620      	mov	r0, r4
 8012530:	bf18      	it	ne
 8012532:	f049 0902 	orrne.w	r9, r9, #2
 8012536:	f7ff fe21 	bl	801217c <rshift>
 801253a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801253e:	1b76      	subs	r6, r6, r5
 8012540:	2502      	movs	r5, #2
 8012542:	f1b9 0f00 	cmp.w	r9, #0
 8012546:	d047      	beq.n	80125d8 <__gethex+0x38c>
 8012548:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801254c:	2b02      	cmp	r3, #2
 801254e:	d015      	beq.n	801257c <__gethex+0x330>
 8012550:	2b03      	cmp	r3, #3
 8012552:	d017      	beq.n	8012584 <__gethex+0x338>
 8012554:	2b01      	cmp	r3, #1
 8012556:	d109      	bne.n	801256c <__gethex+0x320>
 8012558:	f019 0f02 	tst.w	r9, #2
 801255c:	d006      	beq.n	801256c <__gethex+0x320>
 801255e:	f8da 3000 	ldr.w	r3, [sl]
 8012562:	ea49 0903 	orr.w	r9, r9, r3
 8012566:	f019 0f01 	tst.w	r9, #1
 801256a:	d10e      	bne.n	801258a <__gethex+0x33e>
 801256c:	f045 0510 	orr.w	r5, r5, #16
 8012570:	e032      	b.n	80125d8 <__gethex+0x38c>
 8012572:	f04f 0901 	mov.w	r9, #1
 8012576:	e7d1      	b.n	801251c <__gethex+0x2d0>
 8012578:	2501      	movs	r5, #1
 801257a:	e7e2      	b.n	8012542 <__gethex+0x2f6>
 801257c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801257e:	f1c3 0301 	rsb	r3, r3, #1
 8012582:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012584:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012586:	2b00      	cmp	r3, #0
 8012588:	d0f0      	beq.n	801256c <__gethex+0x320>
 801258a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801258e:	f104 0314 	add.w	r3, r4, #20
 8012592:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012596:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801259a:	f04f 0c00 	mov.w	ip, #0
 801259e:	4618      	mov	r0, r3
 80125a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80125a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80125a8:	d01b      	beq.n	80125e2 <__gethex+0x396>
 80125aa:	3201      	adds	r2, #1
 80125ac:	6002      	str	r2, [r0, #0]
 80125ae:	2d02      	cmp	r5, #2
 80125b0:	f104 0314 	add.w	r3, r4, #20
 80125b4:	d13c      	bne.n	8012630 <__gethex+0x3e4>
 80125b6:	f8d8 2000 	ldr.w	r2, [r8]
 80125ba:	3a01      	subs	r2, #1
 80125bc:	42b2      	cmp	r2, r6
 80125be:	d109      	bne.n	80125d4 <__gethex+0x388>
 80125c0:	1171      	asrs	r1, r6, #5
 80125c2:	2201      	movs	r2, #1
 80125c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80125c8:	f006 061f 	and.w	r6, r6, #31
 80125cc:	fa02 f606 	lsl.w	r6, r2, r6
 80125d0:	421e      	tst	r6, r3
 80125d2:	d13a      	bne.n	801264a <__gethex+0x3fe>
 80125d4:	f045 0520 	orr.w	r5, r5, #32
 80125d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80125da:	601c      	str	r4, [r3, #0]
 80125dc:	9b02      	ldr	r3, [sp, #8]
 80125de:	601f      	str	r7, [r3, #0]
 80125e0:	e6b0      	b.n	8012344 <__gethex+0xf8>
 80125e2:	4299      	cmp	r1, r3
 80125e4:	f843 cc04 	str.w	ip, [r3, #-4]
 80125e8:	d8d9      	bhi.n	801259e <__gethex+0x352>
 80125ea:	68a3      	ldr	r3, [r4, #8]
 80125ec:	459b      	cmp	fp, r3
 80125ee:	db17      	blt.n	8012620 <__gethex+0x3d4>
 80125f0:	6861      	ldr	r1, [r4, #4]
 80125f2:	9801      	ldr	r0, [sp, #4]
 80125f4:	3101      	adds	r1, #1
 80125f6:	f7fd facf 	bl	800fb98 <_Balloc>
 80125fa:	4681      	mov	r9, r0
 80125fc:	b918      	cbnz	r0, 8012606 <__gethex+0x3ba>
 80125fe:	4b1a      	ldr	r3, [pc, #104]	@ (8012668 <__gethex+0x41c>)
 8012600:	4602      	mov	r2, r0
 8012602:	2184      	movs	r1, #132	@ 0x84
 8012604:	e6c5      	b.n	8012392 <__gethex+0x146>
 8012606:	6922      	ldr	r2, [r4, #16]
 8012608:	3202      	adds	r2, #2
 801260a:	f104 010c 	add.w	r1, r4, #12
 801260e:	0092      	lsls	r2, r2, #2
 8012610:	300c      	adds	r0, #12
 8012612:	f7fc fb5e 	bl	800ecd2 <memcpy>
 8012616:	4621      	mov	r1, r4
 8012618:	9801      	ldr	r0, [sp, #4]
 801261a:	f7fd fafd 	bl	800fc18 <_Bfree>
 801261e:	464c      	mov	r4, r9
 8012620:	6923      	ldr	r3, [r4, #16]
 8012622:	1c5a      	adds	r2, r3, #1
 8012624:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012628:	6122      	str	r2, [r4, #16]
 801262a:	2201      	movs	r2, #1
 801262c:	615a      	str	r2, [r3, #20]
 801262e:	e7be      	b.n	80125ae <__gethex+0x362>
 8012630:	6922      	ldr	r2, [r4, #16]
 8012632:	455a      	cmp	r2, fp
 8012634:	dd0b      	ble.n	801264e <__gethex+0x402>
 8012636:	2101      	movs	r1, #1
 8012638:	4620      	mov	r0, r4
 801263a:	f7ff fd9f 	bl	801217c <rshift>
 801263e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012642:	3701      	adds	r7, #1
 8012644:	42bb      	cmp	r3, r7
 8012646:	f6ff aee0 	blt.w	801240a <__gethex+0x1be>
 801264a:	2501      	movs	r5, #1
 801264c:	e7c2      	b.n	80125d4 <__gethex+0x388>
 801264e:	f016 061f 	ands.w	r6, r6, #31
 8012652:	d0fa      	beq.n	801264a <__gethex+0x3fe>
 8012654:	4453      	add	r3, sl
 8012656:	f1c6 0620 	rsb	r6, r6, #32
 801265a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801265e:	f7fd fb8d 	bl	800fd7c <__hi0bits>
 8012662:	42b0      	cmp	r0, r6
 8012664:	dbe7      	blt.n	8012636 <__gethex+0x3ea>
 8012666:	e7f0      	b.n	801264a <__gethex+0x3fe>
 8012668:	08013fd3 	.word	0x08013fd3

0801266c <L_shift>:
 801266c:	f1c2 0208 	rsb	r2, r2, #8
 8012670:	0092      	lsls	r2, r2, #2
 8012672:	b570      	push	{r4, r5, r6, lr}
 8012674:	f1c2 0620 	rsb	r6, r2, #32
 8012678:	6843      	ldr	r3, [r0, #4]
 801267a:	6804      	ldr	r4, [r0, #0]
 801267c:	fa03 f506 	lsl.w	r5, r3, r6
 8012680:	432c      	orrs	r4, r5
 8012682:	40d3      	lsrs	r3, r2
 8012684:	6004      	str	r4, [r0, #0]
 8012686:	f840 3f04 	str.w	r3, [r0, #4]!
 801268a:	4288      	cmp	r0, r1
 801268c:	d3f4      	bcc.n	8012678 <L_shift+0xc>
 801268e:	bd70      	pop	{r4, r5, r6, pc}

08012690 <__match>:
 8012690:	b530      	push	{r4, r5, lr}
 8012692:	6803      	ldr	r3, [r0, #0]
 8012694:	3301      	adds	r3, #1
 8012696:	f811 4b01 	ldrb.w	r4, [r1], #1
 801269a:	b914      	cbnz	r4, 80126a2 <__match+0x12>
 801269c:	6003      	str	r3, [r0, #0]
 801269e:	2001      	movs	r0, #1
 80126a0:	bd30      	pop	{r4, r5, pc}
 80126a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80126a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80126aa:	2d19      	cmp	r5, #25
 80126ac:	bf98      	it	ls
 80126ae:	3220      	addls	r2, #32
 80126b0:	42a2      	cmp	r2, r4
 80126b2:	d0f0      	beq.n	8012696 <__match+0x6>
 80126b4:	2000      	movs	r0, #0
 80126b6:	e7f3      	b.n	80126a0 <__match+0x10>

080126b8 <__hexnan>:
 80126b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126bc:	680b      	ldr	r3, [r1, #0]
 80126be:	6801      	ldr	r1, [r0, #0]
 80126c0:	115e      	asrs	r6, r3, #5
 80126c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80126c6:	f013 031f 	ands.w	r3, r3, #31
 80126ca:	b087      	sub	sp, #28
 80126cc:	bf18      	it	ne
 80126ce:	3604      	addne	r6, #4
 80126d0:	2500      	movs	r5, #0
 80126d2:	1f37      	subs	r7, r6, #4
 80126d4:	4682      	mov	sl, r0
 80126d6:	4690      	mov	r8, r2
 80126d8:	9301      	str	r3, [sp, #4]
 80126da:	f846 5c04 	str.w	r5, [r6, #-4]
 80126de:	46b9      	mov	r9, r7
 80126e0:	463c      	mov	r4, r7
 80126e2:	9502      	str	r5, [sp, #8]
 80126e4:	46ab      	mov	fp, r5
 80126e6:	784a      	ldrb	r2, [r1, #1]
 80126e8:	1c4b      	adds	r3, r1, #1
 80126ea:	9303      	str	r3, [sp, #12]
 80126ec:	b342      	cbz	r2, 8012740 <__hexnan+0x88>
 80126ee:	4610      	mov	r0, r2
 80126f0:	9105      	str	r1, [sp, #20]
 80126f2:	9204      	str	r2, [sp, #16]
 80126f4:	f7ff fd94 	bl	8012220 <__hexdig_fun>
 80126f8:	2800      	cmp	r0, #0
 80126fa:	d151      	bne.n	80127a0 <__hexnan+0xe8>
 80126fc:	9a04      	ldr	r2, [sp, #16]
 80126fe:	9905      	ldr	r1, [sp, #20]
 8012700:	2a20      	cmp	r2, #32
 8012702:	d818      	bhi.n	8012736 <__hexnan+0x7e>
 8012704:	9b02      	ldr	r3, [sp, #8]
 8012706:	459b      	cmp	fp, r3
 8012708:	dd13      	ble.n	8012732 <__hexnan+0x7a>
 801270a:	454c      	cmp	r4, r9
 801270c:	d206      	bcs.n	801271c <__hexnan+0x64>
 801270e:	2d07      	cmp	r5, #7
 8012710:	dc04      	bgt.n	801271c <__hexnan+0x64>
 8012712:	462a      	mov	r2, r5
 8012714:	4649      	mov	r1, r9
 8012716:	4620      	mov	r0, r4
 8012718:	f7ff ffa8 	bl	801266c <L_shift>
 801271c:	4544      	cmp	r4, r8
 801271e:	d952      	bls.n	80127c6 <__hexnan+0x10e>
 8012720:	2300      	movs	r3, #0
 8012722:	f1a4 0904 	sub.w	r9, r4, #4
 8012726:	f844 3c04 	str.w	r3, [r4, #-4]
 801272a:	f8cd b008 	str.w	fp, [sp, #8]
 801272e:	464c      	mov	r4, r9
 8012730:	461d      	mov	r5, r3
 8012732:	9903      	ldr	r1, [sp, #12]
 8012734:	e7d7      	b.n	80126e6 <__hexnan+0x2e>
 8012736:	2a29      	cmp	r2, #41	@ 0x29
 8012738:	d157      	bne.n	80127ea <__hexnan+0x132>
 801273a:	3102      	adds	r1, #2
 801273c:	f8ca 1000 	str.w	r1, [sl]
 8012740:	f1bb 0f00 	cmp.w	fp, #0
 8012744:	d051      	beq.n	80127ea <__hexnan+0x132>
 8012746:	454c      	cmp	r4, r9
 8012748:	d206      	bcs.n	8012758 <__hexnan+0xa0>
 801274a:	2d07      	cmp	r5, #7
 801274c:	dc04      	bgt.n	8012758 <__hexnan+0xa0>
 801274e:	462a      	mov	r2, r5
 8012750:	4649      	mov	r1, r9
 8012752:	4620      	mov	r0, r4
 8012754:	f7ff ff8a 	bl	801266c <L_shift>
 8012758:	4544      	cmp	r4, r8
 801275a:	d936      	bls.n	80127ca <__hexnan+0x112>
 801275c:	f1a8 0204 	sub.w	r2, r8, #4
 8012760:	4623      	mov	r3, r4
 8012762:	f853 1b04 	ldr.w	r1, [r3], #4
 8012766:	f842 1f04 	str.w	r1, [r2, #4]!
 801276a:	429f      	cmp	r7, r3
 801276c:	d2f9      	bcs.n	8012762 <__hexnan+0xaa>
 801276e:	1b3b      	subs	r3, r7, r4
 8012770:	f023 0303 	bic.w	r3, r3, #3
 8012774:	3304      	adds	r3, #4
 8012776:	3401      	adds	r4, #1
 8012778:	3e03      	subs	r6, #3
 801277a:	42b4      	cmp	r4, r6
 801277c:	bf88      	it	hi
 801277e:	2304      	movhi	r3, #4
 8012780:	4443      	add	r3, r8
 8012782:	2200      	movs	r2, #0
 8012784:	f843 2b04 	str.w	r2, [r3], #4
 8012788:	429f      	cmp	r7, r3
 801278a:	d2fb      	bcs.n	8012784 <__hexnan+0xcc>
 801278c:	683b      	ldr	r3, [r7, #0]
 801278e:	b91b      	cbnz	r3, 8012798 <__hexnan+0xe0>
 8012790:	4547      	cmp	r7, r8
 8012792:	d128      	bne.n	80127e6 <__hexnan+0x12e>
 8012794:	2301      	movs	r3, #1
 8012796:	603b      	str	r3, [r7, #0]
 8012798:	2005      	movs	r0, #5
 801279a:	b007      	add	sp, #28
 801279c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127a0:	3501      	adds	r5, #1
 80127a2:	2d08      	cmp	r5, #8
 80127a4:	f10b 0b01 	add.w	fp, fp, #1
 80127a8:	dd06      	ble.n	80127b8 <__hexnan+0x100>
 80127aa:	4544      	cmp	r4, r8
 80127ac:	d9c1      	bls.n	8012732 <__hexnan+0x7a>
 80127ae:	2300      	movs	r3, #0
 80127b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80127b4:	2501      	movs	r5, #1
 80127b6:	3c04      	subs	r4, #4
 80127b8:	6822      	ldr	r2, [r4, #0]
 80127ba:	f000 000f 	and.w	r0, r0, #15
 80127be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80127c2:	6020      	str	r0, [r4, #0]
 80127c4:	e7b5      	b.n	8012732 <__hexnan+0x7a>
 80127c6:	2508      	movs	r5, #8
 80127c8:	e7b3      	b.n	8012732 <__hexnan+0x7a>
 80127ca:	9b01      	ldr	r3, [sp, #4]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d0dd      	beq.n	801278c <__hexnan+0xd4>
 80127d0:	f1c3 0320 	rsb	r3, r3, #32
 80127d4:	f04f 32ff 	mov.w	r2, #4294967295
 80127d8:	40da      	lsrs	r2, r3
 80127da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80127de:	4013      	ands	r3, r2
 80127e0:	f846 3c04 	str.w	r3, [r6, #-4]
 80127e4:	e7d2      	b.n	801278c <__hexnan+0xd4>
 80127e6:	3f04      	subs	r7, #4
 80127e8:	e7d0      	b.n	801278c <__hexnan+0xd4>
 80127ea:	2004      	movs	r0, #4
 80127ec:	e7d5      	b.n	801279a <__hexnan+0xe2>

080127ee <__ascii_mbtowc>:
 80127ee:	b082      	sub	sp, #8
 80127f0:	b901      	cbnz	r1, 80127f4 <__ascii_mbtowc+0x6>
 80127f2:	a901      	add	r1, sp, #4
 80127f4:	b142      	cbz	r2, 8012808 <__ascii_mbtowc+0x1a>
 80127f6:	b14b      	cbz	r3, 801280c <__ascii_mbtowc+0x1e>
 80127f8:	7813      	ldrb	r3, [r2, #0]
 80127fa:	600b      	str	r3, [r1, #0]
 80127fc:	7812      	ldrb	r2, [r2, #0]
 80127fe:	1e10      	subs	r0, r2, #0
 8012800:	bf18      	it	ne
 8012802:	2001      	movne	r0, #1
 8012804:	b002      	add	sp, #8
 8012806:	4770      	bx	lr
 8012808:	4610      	mov	r0, r2
 801280a:	e7fb      	b.n	8012804 <__ascii_mbtowc+0x16>
 801280c:	f06f 0001 	mvn.w	r0, #1
 8012810:	e7f8      	b.n	8012804 <__ascii_mbtowc+0x16>

08012812 <_realloc_r>:
 8012812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012816:	4680      	mov	r8, r0
 8012818:	4615      	mov	r5, r2
 801281a:	460c      	mov	r4, r1
 801281c:	b921      	cbnz	r1, 8012828 <_realloc_r+0x16>
 801281e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012822:	4611      	mov	r1, r2
 8012824:	f7fd b92c 	b.w	800fa80 <_malloc_r>
 8012828:	b92a      	cbnz	r2, 8012836 <_realloc_r+0x24>
 801282a:	f7fd f8b5 	bl	800f998 <_free_r>
 801282e:	2400      	movs	r4, #0
 8012830:	4620      	mov	r0, r4
 8012832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012836:	f000 f8b2 	bl	801299e <_malloc_usable_size_r>
 801283a:	4285      	cmp	r5, r0
 801283c:	4606      	mov	r6, r0
 801283e:	d802      	bhi.n	8012846 <_realloc_r+0x34>
 8012840:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012844:	d8f4      	bhi.n	8012830 <_realloc_r+0x1e>
 8012846:	4629      	mov	r1, r5
 8012848:	4640      	mov	r0, r8
 801284a:	f7fd f919 	bl	800fa80 <_malloc_r>
 801284e:	4607      	mov	r7, r0
 8012850:	2800      	cmp	r0, #0
 8012852:	d0ec      	beq.n	801282e <_realloc_r+0x1c>
 8012854:	42b5      	cmp	r5, r6
 8012856:	462a      	mov	r2, r5
 8012858:	4621      	mov	r1, r4
 801285a:	bf28      	it	cs
 801285c:	4632      	movcs	r2, r6
 801285e:	f7fc fa38 	bl	800ecd2 <memcpy>
 8012862:	4621      	mov	r1, r4
 8012864:	4640      	mov	r0, r8
 8012866:	f7fd f897 	bl	800f998 <_free_r>
 801286a:	463c      	mov	r4, r7
 801286c:	e7e0      	b.n	8012830 <_realloc_r+0x1e>
	...

08012870 <_strtoul_l.constprop.0>:
 8012870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012874:	4e34      	ldr	r6, [pc, #208]	@ (8012948 <_strtoul_l.constprop.0+0xd8>)
 8012876:	4686      	mov	lr, r0
 8012878:	460d      	mov	r5, r1
 801287a:	4628      	mov	r0, r5
 801287c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012880:	5d37      	ldrb	r7, [r6, r4]
 8012882:	f017 0708 	ands.w	r7, r7, #8
 8012886:	d1f8      	bne.n	801287a <_strtoul_l.constprop.0+0xa>
 8012888:	2c2d      	cmp	r4, #45	@ 0x2d
 801288a:	d12f      	bne.n	80128ec <_strtoul_l.constprop.0+0x7c>
 801288c:	782c      	ldrb	r4, [r5, #0]
 801288e:	2701      	movs	r7, #1
 8012890:	1c85      	adds	r5, r0, #2
 8012892:	f033 0010 	bics.w	r0, r3, #16
 8012896:	d109      	bne.n	80128ac <_strtoul_l.constprop.0+0x3c>
 8012898:	2c30      	cmp	r4, #48	@ 0x30
 801289a:	d12c      	bne.n	80128f6 <_strtoul_l.constprop.0+0x86>
 801289c:	7828      	ldrb	r0, [r5, #0]
 801289e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80128a2:	2858      	cmp	r0, #88	@ 0x58
 80128a4:	d127      	bne.n	80128f6 <_strtoul_l.constprop.0+0x86>
 80128a6:	786c      	ldrb	r4, [r5, #1]
 80128a8:	2310      	movs	r3, #16
 80128aa:	3502      	adds	r5, #2
 80128ac:	f04f 38ff 	mov.w	r8, #4294967295
 80128b0:	2600      	movs	r6, #0
 80128b2:	fbb8 f8f3 	udiv	r8, r8, r3
 80128b6:	fb03 f908 	mul.w	r9, r3, r8
 80128ba:	ea6f 0909 	mvn.w	r9, r9
 80128be:	4630      	mov	r0, r6
 80128c0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80128c4:	f1bc 0f09 	cmp.w	ip, #9
 80128c8:	d81c      	bhi.n	8012904 <_strtoul_l.constprop.0+0x94>
 80128ca:	4664      	mov	r4, ip
 80128cc:	42a3      	cmp	r3, r4
 80128ce:	dd2a      	ble.n	8012926 <_strtoul_l.constprop.0+0xb6>
 80128d0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80128d4:	d007      	beq.n	80128e6 <_strtoul_l.constprop.0+0x76>
 80128d6:	4580      	cmp	r8, r0
 80128d8:	d322      	bcc.n	8012920 <_strtoul_l.constprop.0+0xb0>
 80128da:	d101      	bne.n	80128e0 <_strtoul_l.constprop.0+0x70>
 80128dc:	45a1      	cmp	r9, r4
 80128de:	db1f      	blt.n	8012920 <_strtoul_l.constprop.0+0xb0>
 80128e0:	fb00 4003 	mla	r0, r0, r3, r4
 80128e4:	2601      	movs	r6, #1
 80128e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80128ea:	e7e9      	b.n	80128c0 <_strtoul_l.constprop.0+0x50>
 80128ec:	2c2b      	cmp	r4, #43	@ 0x2b
 80128ee:	bf04      	itt	eq
 80128f0:	782c      	ldrbeq	r4, [r5, #0]
 80128f2:	1c85      	addeq	r5, r0, #2
 80128f4:	e7cd      	b.n	8012892 <_strtoul_l.constprop.0+0x22>
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d1d8      	bne.n	80128ac <_strtoul_l.constprop.0+0x3c>
 80128fa:	2c30      	cmp	r4, #48	@ 0x30
 80128fc:	bf0c      	ite	eq
 80128fe:	2308      	moveq	r3, #8
 8012900:	230a      	movne	r3, #10
 8012902:	e7d3      	b.n	80128ac <_strtoul_l.constprop.0+0x3c>
 8012904:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8012908:	f1bc 0f19 	cmp.w	ip, #25
 801290c:	d801      	bhi.n	8012912 <_strtoul_l.constprop.0+0xa2>
 801290e:	3c37      	subs	r4, #55	@ 0x37
 8012910:	e7dc      	b.n	80128cc <_strtoul_l.constprop.0+0x5c>
 8012912:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8012916:	f1bc 0f19 	cmp.w	ip, #25
 801291a:	d804      	bhi.n	8012926 <_strtoul_l.constprop.0+0xb6>
 801291c:	3c57      	subs	r4, #87	@ 0x57
 801291e:	e7d5      	b.n	80128cc <_strtoul_l.constprop.0+0x5c>
 8012920:	f04f 36ff 	mov.w	r6, #4294967295
 8012924:	e7df      	b.n	80128e6 <_strtoul_l.constprop.0+0x76>
 8012926:	1c73      	adds	r3, r6, #1
 8012928:	d106      	bne.n	8012938 <_strtoul_l.constprop.0+0xc8>
 801292a:	2322      	movs	r3, #34	@ 0x22
 801292c:	f8ce 3000 	str.w	r3, [lr]
 8012930:	4630      	mov	r0, r6
 8012932:	b932      	cbnz	r2, 8012942 <_strtoul_l.constprop.0+0xd2>
 8012934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012938:	b107      	cbz	r7, 801293c <_strtoul_l.constprop.0+0xcc>
 801293a:	4240      	negs	r0, r0
 801293c:	2a00      	cmp	r2, #0
 801293e:	d0f9      	beq.n	8012934 <_strtoul_l.constprop.0+0xc4>
 8012940:	b106      	cbz	r6, 8012944 <_strtoul_l.constprop.0+0xd4>
 8012942:	1e69      	subs	r1, r5, #1
 8012944:	6011      	str	r1, [r2, #0]
 8012946:	e7f5      	b.n	8012934 <_strtoul_l.constprop.0+0xc4>
 8012948:	08014199 	.word	0x08014199

0801294c <_strtoul_r>:
 801294c:	f7ff bf90 	b.w	8012870 <_strtoul_l.constprop.0>

08012950 <__ascii_wctomb>:
 8012950:	4603      	mov	r3, r0
 8012952:	4608      	mov	r0, r1
 8012954:	b141      	cbz	r1, 8012968 <__ascii_wctomb+0x18>
 8012956:	2aff      	cmp	r2, #255	@ 0xff
 8012958:	d904      	bls.n	8012964 <__ascii_wctomb+0x14>
 801295a:	228a      	movs	r2, #138	@ 0x8a
 801295c:	601a      	str	r2, [r3, #0]
 801295e:	f04f 30ff 	mov.w	r0, #4294967295
 8012962:	4770      	bx	lr
 8012964:	700a      	strb	r2, [r1, #0]
 8012966:	2001      	movs	r0, #1
 8012968:	4770      	bx	lr
	...

0801296c <fiprintf>:
 801296c:	b40e      	push	{r1, r2, r3}
 801296e:	b503      	push	{r0, r1, lr}
 8012970:	4601      	mov	r1, r0
 8012972:	ab03      	add	r3, sp, #12
 8012974:	4805      	ldr	r0, [pc, #20]	@ (801298c <fiprintf+0x20>)
 8012976:	f853 2b04 	ldr.w	r2, [r3], #4
 801297a:	6800      	ldr	r0, [r0, #0]
 801297c:	9301      	str	r3, [sp, #4]
 801297e:	f7fe ff8f 	bl	80118a0 <_vfiprintf_r>
 8012982:	b002      	add	sp, #8
 8012984:	f85d eb04 	ldr.w	lr, [sp], #4
 8012988:	b003      	add	sp, #12
 801298a:	4770      	bx	lr
 801298c:	20000028 	.word	0x20000028

08012990 <abort>:
 8012990:	b508      	push	{r3, lr}
 8012992:	2006      	movs	r0, #6
 8012994:	f000 f834 	bl	8012a00 <raise>
 8012998:	2001      	movs	r0, #1
 801299a:	f7f1 fb9f 	bl	80040dc <_exit>

0801299e <_malloc_usable_size_r>:
 801299e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80129a2:	1f18      	subs	r0, r3, #4
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	bfbc      	itt	lt
 80129a8:	580b      	ldrlt	r3, [r1, r0]
 80129aa:	18c0      	addlt	r0, r0, r3
 80129ac:	4770      	bx	lr

080129ae <_raise_r>:
 80129ae:	291f      	cmp	r1, #31
 80129b0:	b538      	push	{r3, r4, r5, lr}
 80129b2:	4605      	mov	r5, r0
 80129b4:	460c      	mov	r4, r1
 80129b6:	d904      	bls.n	80129c2 <_raise_r+0x14>
 80129b8:	2316      	movs	r3, #22
 80129ba:	6003      	str	r3, [r0, #0]
 80129bc:	f04f 30ff 	mov.w	r0, #4294967295
 80129c0:	bd38      	pop	{r3, r4, r5, pc}
 80129c2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80129c4:	b112      	cbz	r2, 80129cc <_raise_r+0x1e>
 80129c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80129ca:	b94b      	cbnz	r3, 80129e0 <_raise_r+0x32>
 80129cc:	4628      	mov	r0, r5
 80129ce:	f000 f831 	bl	8012a34 <_getpid_r>
 80129d2:	4622      	mov	r2, r4
 80129d4:	4601      	mov	r1, r0
 80129d6:	4628      	mov	r0, r5
 80129d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129dc:	f000 b818 	b.w	8012a10 <_kill_r>
 80129e0:	2b01      	cmp	r3, #1
 80129e2:	d00a      	beq.n	80129fa <_raise_r+0x4c>
 80129e4:	1c59      	adds	r1, r3, #1
 80129e6:	d103      	bne.n	80129f0 <_raise_r+0x42>
 80129e8:	2316      	movs	r3, #22
 80129ea:	6003      	str	r3, [r0, #0]
 80129ec:	2001      	movs	r0, #1
 80129ee:	e7e7      	b.n	80129c0 <_raise_r+0x12>
 80129f0:	2100      	movs	r1, #0
 80129f2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80129f6:	4620      	mov	r0, r4
 80129f8:	4798      	blx	r3
 80129fa:	2000      	movs	r0, #0
 80129fc:	e7e0      	b.n	80129c0 <_raise_r+0x12>
	...

08012a00 <raise>:
 8012a00:	4b02      	ldr	r3, [pc, #8]	@ (8012a0c <raise+0xc>)
 8012a02:	4601      	mov	r1, r0
 8012a04:	6818      	ldr	r0, [r3, #0]
 8012a06:	f7ff bfd2 	b.w	80129ae <_raise_r>
 8012a0a:	bf00      	nop
 8012a0c:	20000028 	.word	0x20000028

08012a10 <_kill_r>:
 8012a10:	b538      	push	{r3, r4, r5, lr}
 8012a12:	4d07      	ldr	r5, [pc, #28]	@ (8012a30 <_kill_r+0x20>)
 8012a14:	2300      	movs	r3, #0
 8012a16:	4604      	mov	r4, r0
 8012a18:	4608      	mov	r0, r1
 8012a1a:	4611      	mov	r1, r2
 8012a1c:	602b      	str	r3, [r5, #0]
 8012a1e:	f7f1 fb4d 	bl	80040bc <_kill>
 8012a22:	1c43      	adds	r3, r0, #1
 8012a24:	d102      	bne.n	8012a2c <_kill_r+0x1c>
 8012a26:	682b      	ldr	r3, [r5, #0]
 8012a28:	b103      	cbz	r3, 8012a2c <_kill_r+0x1c>
 8012a2a:	6023      	str	r3, [r4, #0]
 8012a2c:	bd38      	pop	{r3, r4, r5, pc}
 8012a2e:	bf00      	nop
 8012a30:	20002e10 	.word	0x20002e10

08012a34 <_getpid_r>:
 8012a34:	f7f1 bb3a 	b.w	80040ac <_getpid>

08012a38 <pow>:
 8012a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a3a:	ed2d 8b02 	vpush	{d8}
 8012a3e:	eeb0 8a40 	vmov.f32	s16, s0
 8012a42:	eef0 8a60 	vmov.f32	s17, s1
 8012a46:	ec55 4b11 	vmov	r4, r5, d1
 8012a4a:	f000 f871 	bl	8012b30 <__ieee754_pow>
 8012a4e:	4622      	mov	r2, r4
 8012a50:	462b      	mov	r3, r5
 8012a52:	4620      	mov	r0, r4
 8012a54:	4629      	mov	r1, r5
 8012a56:	ec57 6b10 	vmov	r6, r7, d0
 8012a5a:	f7ee f86f 	bl	8000b3c <__aeabi_dcmpun>
 8012a5e:	2800      	cmp	r0, #0
 8012a60:	d13b      	bne.n	8012ada <pow+0xa2>
 8012a62:	ec51 0b18 	vmov	r0, r1, d8
 8012a66:	2200      	movs	r2, #0
 8012a68:	2300      	movs	r3, #0
 8012a6a:	f7ee f835 	bl	8000ad8 <__aeabi_dcmpeq>
 8012a6e:	b1b8      	cbz	r0, 8012aa0 <pow+0x68>
 8012a70:	2200      	movs	r2, #0
 8012a72:	2300      	movs	r3, #0
 8012a74:	4620      	mov	r0, r4
 8012a76:	4629      	mov	r1, r5
 8012a78:	f7ee f82e 	bl	8000ad8 <__aeabi_dcmpeq>
 8012a7c:	2800      	cmp	r0, #0
 8012a7e:	d146      	bne.n	8012b0e <pow+0xd6>
 8012a80:	ec45 4b10 	vmov	d0, r4, r5
 8012a84:	f000 f848 	bl	8012b18 <finite>
 8012a88:	b338      	cbz	r0, 8012ada <pow+0xa2>
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	2300      	movs	r3, #0
 8012a8e:	4620      	mov	r0, r4
 8012a90:	4629      	mov	r1, r5
 8012a92:	f7ee f82b 	bl	8000aec <__aeabi_dcmplt>
 8012a96:	b300      	cbz	r0, 8012ada <pow+0xa2>
 8012a98:	f7fc f8ee 	bl	800ec78 <__errno>
 8012a9c:	2322      	movs	r3, #34	@ 0x22
 8012a9e:	e01b      	b.n	8012ad8 <pow+0xa0>
 8012aa0:	ec47 6b10 	vmov	d0, r6, r7
 8012aa4:	f000 f838 	bl	8012b18 <finite>
 8012aa8:	b9e0      	cbnz	r0, 8012ae4 <pow+0xac>
 8012aaa:	eeb0 0a48 	vmov.f32	s0, s16
 8012aae:	eef0 0a68 	vmov.f32	s1, s17
 8012ab2:	f000 f831 	bl	8012b18 <finite>
 8012ab6:	b1a8      	cbz	r0, 8012ae4 <pow+0xac>
 8012ab8:	ec45 4b10 	vmov	d0, r4, r5
 8012abc:	f000 f82c 	bl	8012b18 <finite>
 8012ac0:	b180      	cbz	r0, 8012ae4 <pow+0xac>
 8012ac2:	4632      	mov	r2, r6
 8012ac4:	463b      	mov	r3, r7
 8012ac6:	4630      	mov	r0, r6
 8012ac8:	4639      	mov	r1, r7
 8012aca:	f7ee f837 	bl	8000b3c <__aeabi_dcmpun>
 8012ace:	2800      	cmp	r0, #0
 8012ad0:	d0e2      	beq.n	8012a98 <pow+0x60>
 8012ad2:	f7fc f8d1 	bl	800ec78 <__errno>
 8012ad6:	2321      	movs	r3, #33	@ 0x21
 8012ad8:	6003      	str	r3, [r0, #0]
 8012ada:	ecbd 8b02 	vpop	{d8}
 8012ade:	ec47 6b10 	vmov	d0, r6, r7
 8012ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	4630      	mov	r0, r6
 8012aea:	4639      	mov	r1, r7
 8012aec:	f7ed fff4 	bl	8000ad8 <__aeabi_dcmpeq>
 8012af0:	2800      	cmp	r0, #0
 8012af2:	d0f2      	beq.n	8012ada <pow+0xa2>
 8012af4:	eeb0 0a48 	vmov.f32	s0, s16
 8012af8:	eef0 0a68 	vmov.f32	s1, s17
 8012afc:	f000 f80c 	bl	8012b18 <finite>
 8012b00:	2800      	cmp	r0, #0
 8012b02:	d0ea      	beq.n	8012ada <pow+0xa2>
 8012b04:	ec45 4b10 	vmov	d0, r4, r5
 8012b08:	f000 f806 	bl	8012b18 <finite>
 8012b0c:	e7c3      	b.n	8012a96 <pow+0x5e>
 8012b0e:	4f01      	ldr	r7, [pc, #4]	@ (8012b14 <pow+0xdc>)
 8012b10:	2600      	movs	r6, #0
 8012b12:	e7e2      	b.n	8012ada <pow+0xa2>
 8012b14:	3ff00000 	.word	0x3ff00000

08012b18 <finite>:
 8012b18:	b082      	sub	sp, #8
 8012b1a:	ed8d 0b00 	vstr	d0, [sp]
 8012b1e:	9801      	ldr	r0, [sp, #4]
 8012b20:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8012b24:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8012b28:	0fc0      	lsrs	r0, r0, #31
 8012b2a:	b002      	add	sp, #8
 8012b2c:	4770      	bx	lr
	...

08012b30 <__ieee754_pow>:
 8012b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b34:	b091      	sub	sp, #68	@ 0x44
 8012b36:	ed8d 1b00 	vstr	d1, [sp]
 8012b3a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8012b3e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8012b42:	ea5a 0001 	orrs.w	r0, sl, r1
 8012b46:	ec57 6b10 	vmov	r6, r7, d0
 8012b4a:	d113      	bne.n	8012b74 <__ieee754_pow+0x44>
 8012b4c:	19b3      	adds	r3, r6, r6
 8012b4e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8012b52:	4152      	adcs	r2, r2
 8012b54:	4298      	cmp	r0, r3
 8012b56:	4b98      	ldr	r3, [pc, #608]	@ (8012db8 <__ieee754_pow+0x288>)
 8012b58:	4193      	sbcs	r3, r2
 8012b5a:	f080 84ea 	bcs.w	8013532 <__ieee754_pow+0xa02>
 8012b5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b62:	4630      	mov	r0, r6
 8012b64:	4639      	mov	r1, r7
 8012b66:	f7ed fb99 	bl	800029c <__adddf3>
 8012b6a:	ec41 0b10 	vmov	d0, r0, r1
 8012b6e:	b011      	add	sp, #68	@ 0x44
 8012b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b74:	4a91      	ldr	r2, [pc, #580]	@ (8012dbc <__ieee754_pow+0x28c>)
 8012b76:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012b7a:	4590      	cmp	r8, r2
 8012b7c:	463d      	mov	r5, r7
 8012b7e:	4633      	mov	r3, r6
 8012b80:	d806      	bhi.n	8012b90 <__ieee754_pow+0x60>
 8012b82:	d101      	bne.n	8012b88 <__ieee754_pow+0x58>
 8012b84:	2e00      	cmp	r6, #0
 8012b86:	d1ea      	bne.n	8012b5e <__ieee754_pow+0x2e>
 8012b88:	4592      	cmp	sl, r2
 8012b8a:	d801      	bhi.n	8012b90 <__ieee754_pow+0x60>
 8012b8c:	d10e      	bne.n	8012bac <__ieee754_pow+0x7c>
 8012b8e:	b169      	cbz	r1, 8012bac <__ieee754_pow+0x7c>
 8012b90:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8012b94:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8012b98:	431d      	orrs	r5, r3
 8012b9a:	d1e0      	bne.n	8012b5e <__ieee754_pow+0x2e>
 8012b9c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012ba0:	18db      	adds	r3, r3, r3
 8012ba2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8012ba6:	4152      	adcs	r2, r2
 8012ba8:	429d      	cmp	r5, r3
 8012baa:	e7d4      	b.n	8012b56 <__ieee754_pow+0x26>
 8012bac:	2d00      	cmp	r5, #0
 8012bae:	46c3      	mov	fp, r8
 8012bb0:	da3a      	bge.n	8012c28 <__ieee754_pow+0xf8>
 8012bb2:	4a83      	ldr	r2, [pc, #524]	@ (8012dc0 <__ieee754_pow+0x290>)
 8012bb4:	4592      	cmp	sl, r2
 8012bb6:	d84d      	bhi.n	8012c54 <__ieee754_pow+0x124>
 8012bb8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8012bbc:	4592      	cmp	sl, r2
 8012bbe:	f240 84c7 	bls.w	8013550 <__ieee754_pow+0xa20>
 8012bc2:	ea4f 522a 	mov.w	r2, sl, asr #20
 8012bc6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8012bca:	2a14      	cmp	r2, #20
 8012bcc:	dd0f      	ble.n	8012bee <__ieee754_pow+0xbe>
 8012bce:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8012bd2:	fa21 f402 	lsr.w	r4, r1, r2
 8012bd6:	fa04 f202 	lsl.w	r2, r4, r2
 8012bda:	428a      	cmp	r2, r1
 8012bdc:	f040 84b8 	bne.w	8013550 <__ieee754_pow+0xa20>
 8012be0:	f004 0401 	and.w	r4, r4, #1
 8012be4:	f1c4 0402 	rsb	r4, r4, #2
 8012be8:	2900      	cmp	r1, #0
 8012bea:	d158      	bne.n	8012c9e <__ieee754_pow+0x16e>
 8012bec:	e00e      	b.n	8012c0c <__ieee754_pow+0xdc>
 8012bee:	2900      	cmp	r1, #0
 8012bf0:	d154      	bne.n	8012c9c <__ieee754_pow+0x16c>
 8012bf2:	f1c2 0214 	rsb	r2, r2, #20
 8012bf6:	fa4a f402 	asr.w	r4, sl, r2
 8012bfa:	fa04 f202 	lsl.w	r2, r4, r2
 8012bfe:	4552      	cmp	r2, sl
 8012c00:	f040 84a3 	bne.w	801354a <__ieee754_pow+0xa1a>
 8012c04:	f004 0401 	and.w	r4, r4, #1
 8012c08:	f1c4 0402 	rsb	r4, r4, #2
 8012c0c:	4a6d      	ldr	r2, [pc, #436]	@ (8012dc4 <__ieee754_pow+0x294>)
 8012c0e:	4592      	cmp	sl, r2
 8012c10:	d12e      	bne.n	8012c70 <__ieee754_pow+0x140>
 8012c12:	f1b9 0f00 	cmp.w	r9, #0
 8012c16:	f280 8494 	bge.w	8013542 <__ieee754_pow+0xa12>
 8012c1a:	496a      	ldr	r1, [pc, #424]	@ (8012dc4 <__ieee754_pow+0x294>)
 8012c1c:	4632      	mov	r2, r6
 8012c1e:	463b      	mov	r3, r7
 8012c20:	2000      	movs	r0, #0
 8012c22:	f7ed fe1b 	bl	800085c <__aeabi_ddiv>
 8012c26:	e7a0      	b.n	8012b6a <__ieee754_pow+0x3a>
 8012c28:	2400      	movs	r4, #0
 8012c2a:	bbc1      	cbnz	r1, 8012c9e <__ieee754_pow+0x16e>
 8012c2c:	4a63      	ldr	r2, [pc, #396]	@ (8012dbc <__ieee754_pow+0x28c>)
 8012c2e:	4592      	cmp	sl, r2
 8012c30:	d1ec      	bne.n	8012c0c <__ieee754_pow+0xdc>
 8012c32:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8012c36:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8012c3a:	431a      	orrs	r2, r3
 8012c3c:	f000 8479 	beq.w	8013532 <__ieee754_pow+0xa02>
 8012c40:	4b61      	ldr	r3, [pc, #388]	@ (8012dc8 <__ieee754_pow+0x298>)
 8012c42:	4598      	cmp	r8, r3
 8012c44:	d908      	bls.n	8012c58 <__ieee754_pow+0x128>
 8012c46:	f1b9 0f00 	cmp.w	r9, #0
 8012c4a:	f2c0 8476 	blt.w	801353a <__ieee754_pow+0xa0a>
 8012c4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012c52:	e78a      	b.n	8012b6a <__ieee754_pow+0x3a>
 8012c54:	2402      	movs	r4, #2
 8012c56:	e7e8      	b.n	8012c2a <__ieee754_pow+0xfa>
 8012c58:	f1b9 0f00 	cmp.w	r9, #0
 8012c5c:	f04f 0000 	mov.w	r0, #0
 8012c60:	f04f 0100 	mov.w	r1, #0
 8012c64:	da81      	bge.n	8012b6a <__ieee754_pow+0x3a>
 8012c66:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012c6a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012c6e:	e77c      	b.n	8012b6a <__ieee754_pow+0x3a>
 8012c70:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8012c74:	d106      	bne.n	8012c84 <__ieee754_pow+0x154>
 8012c76:	4632      	mov	r2, r6
 8012c78:	463b      	mov	r3, r7
 8012c7a:	4630      	mov	r0, r6
 8012c7c:	4639      	mov	r1, r7
 8012c7e:	f7ed fcc3 	bl	8000608 <__aeabi_dmul>
 8012c82:	e772      	b.n	8012b6a <__ieee754_pow+0x3a>
 8012c84:	4a51      	ldr	r2, [pc, #324]	@ (8012dcc <__ieee754_pow+0x29c>)
 8012c86:	4591      	cmp	r9, r2
 8012c88:	d109      	bne.n	8012c9e <__ieee754_pow+0x16e>
 8012c8a:	2d00      	cmp	r5, #0
 8012c8c:	db07      	blt.n	8012c9e <__ieee754_pow+0x16e>
 8012c8e:	ec47 6b10 	vmov	d0, r6, r7
 8012c92:	b011      	add	sp, #68	@ 0x44
 8012c94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c98:	f000 bd52 	b.w	8013740 <__ieee754_sqrt>
 8012c9c:	2400      	movs	r4, #0
 8012c9e:	ec47 6b10 	vmov	d0, r6, r7
 8012ca2:	9302      	str	r3, [sp, #8]
 8012ca4:	f000 fc88 	bl	80135b8 <fabs>
 8012ca8:	9b02      	ldr	r3, [sp, #8]
 8012caa:	ec51 0b10 	vmov	r0, r1, d0
 8012cae:	bb53      	cbnz	r3, 8012d06 <__ieee754_pow+0x1d6>
 8012cb0:	4b44      	ldr	r3, [pc, #272]	@ (8012dc4 <__ieee754_pow+0x294>)
 8012cb2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8012cb6:	429a      	cmp	r2, r3
 8012cb8:	d002      	beq.n	8012cc0 <__ieee754_pow+0x190>
 8012cba:	f1b8 0f00 	cmp.w	r8, #0
 8012cbe:	d122      	bne.n	8012d06 <__ieee754_pow+0x1d6>
 8012cc0:	f1b9 0f00 	cmp.w	r9, #0
 8012cc4:	da05      	bge.n	8012cd2 <__ieee754_pow+0x1a2>
 8012cc6:	4602      	mov	r2, r0
 8012cc8:	460b      	mov	r3, r1
 8012cca:	2000      	movs	r0, #0
 8012ccc:	493d      	ldr	r1, [pc, #244]	@ (8012dc4 <__ieee754_pow+0x294>)
 8012cce:	f7ed fdc5 	bl	800085c <__aeabi_ddiv>
 8012cd2:	2d00      	cmp	r5, #0
 8012cd4:	f6bf af49 	bge.w	8012b6a <__ieee754_pow+0x3a>
 8012cd8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8012cdc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8012ce0:	ea58 0804 	orrs.w	r8, r8, r4
 8012ce4:	d108      	bne.n	8012cf8 <__ieee754_pow+0x1c8>
 8012ce6:	4602      	mov	r2, r0
 8012ce8:	460b      	mov	r3, r1
 8012cea:	4610      	mov	r0, r2
 8012cec:	4619      	mov	r1, r3
 8012cee:	f7ed fad3 	bl	8000298 <__aeabi_dsub>
 8012cf2:	4602      	mov	r2, r0
 8012cf4:	460b      	mov	r3, r1
 8012cf6:	e794      	b.n	8012c22 <__ieee754_pow+0xf2>
 8012cf8:	2c01      	cmp	r4, #1
 8012cfa:	f47f af36 	bne.w	8012b6a <__ieee754_pow+0x3a>
 8012cfe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012d02:	4619      	mov	r1, r3
 8012d04:	e731      	b.n	8012b6a <__ieee754_pow+0x3a>
 8012d06:	0feb      	lsrs	r3, r5, #31
 8012d08:	3b01      	subs	r3, #1
 8012d0a:	ea53 0204 	orrs.w	r2, r3, r4
 8012d0e:	d102      	bne.n	8012d16 <__ieee754_pow+0x1e6>
 8012d10:	4632      	mov	r2, r6
 8012d12:	463b      	mov	r3, r7
 8012d14:	e7e9      	b.n	8012cea <__ieee754_pow+0x1ba>
 8012d16:	3c01      	subs	r4, #1
 8012d18:	431c      	orrs	r4, r3
 8012d1a:	d016      	beq.n	8012d4a <__ieee754_pow+0x21a>
 8012d1c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8012da8 <__ieee754_pow+0x278>
 8012d20:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8012d24:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012d28:	f240 8112 	bls.w	8012f50 <__ieee754_pow+0x420>
 8012d2c:	4b28      	ldr	r3, [pc, #160]	@ (8012dd0 <__ieee754_pow+0x2a0>)
 8012d2e:	459a      	cmp	sl, r3
 8012d30:	4b25      	ldr	r3, [pc, #148]	@ (8012dc8 <__ieee754_pow+0x298>)
 8012d32:	d916      	bls.n	8012d62 <__ieee754_pow+0x232>
 8012d34:	4598      	cmp	r8, r3
 8012d36:	d80b      	bhi.n	8012d50 <__ieee754_pow+0x220>
 8012d38:	f1b9 0f00 	cmp.w	r9, #0
 8012d3c:	da0b      	bge.n	8012d56 <__ieee754_pow+0x226>
 8012d3e:	2000      	movs	r0, #0
 8012d40:	b011      	add	sp, #68	@ 0x44
 8012d42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d46:	f000 bcf3 	b.w	8013730 <__math_oflow>
 8012d4a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8012db0 <__ieee754_pow+0x280>
 8012d4e:	e7e7      	b.n	8012d20 <__ieee754_pow+0x1f0>
 8012d50:	f1b9 0f00 	cmp.w	r9, #0
 8012d54:	dcf3      	bgt.n	8012d3e <__ieee754_pow+0x20e>
 8012d56:	2000      	movs	r0, #0
 8012d58:	b011      	add	sp, #68	@ 0x44
 8012d5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d5e:	f000 bcdf 	b.w	8013720 <__math_uflow>
 8012d62:	4598      	cmp	r8, r3
 8012d64:	d20c      	bcs.n	8012d80 <__ieee754_pow+0x250>
 8012d66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	f7ed febd 	bl	8000aec <__aeabi_dcmplt>
 8012d72:	3800      	subs	r0, #0
 8012d74:	bf18      	it	ne
 8012d76:	2001      	movne	r0, #1
 8012d78:	f1b9 0f00 	cmp.w	r9, #0
 8012d7c:	daec      	bge.n	8012d58 <__ieee754_pow+0x228>
 8012d7e:	e7df      	b.n	8012d40 <__ieee754_pow+0x210>
 8012d80:	4b10      	ldr	r3, [pc, #64]	@ (8012dc4 <__ieee754_pow+0x294>)
 8012d82:	4598      	cmp	r8, r3
 8012d84:	f04f 0200 	mov.w	r2, #0
 8012d88:	d924      	bls.n	8012dd4 <__ieee754_pow+0x2a4>
 8012d8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d8e:	2300      	movs	r3, #0
 8012d90:	f7ed feac 	bl	8000aec <__aeabi_dcmplt>
 8012d94:	3800      	subs	r0, #0
 8012d96:	bf18      	it	ne
 8012d98:	2001      	movne	r0, #1
 8012d9a:	f1b9 0f00 	cmp.w	r9, #0
 8012d9e:	dccf      	bgt.n	8012d40 <__ieee754_pow+0x210>
 8012da0:	e7da      	b.n	8012d58 <__ieee754_pow+0x228>
 8012da2:	bf00      	nop
 8012da4:	f3af 8000 	nop.w
 8012da8:	00000000 	.word	0x00000000
 8012dac:	3ff00000 	.word	0x3ff00000
 8012db0:	00000000 	.word	0x00000000
 8012db4:	bff00000 	.word	0xbff00000
 8012db8:	fff00000 	.word	0xfff00000
 8012dbc:	7ff00000 	.word	0x7ff00000
 8012dc0:	433fffff 	.word	0x433fffff
 8012dc4:	3ff00000 	.word	0x3ff00000
 8012dc8:	3fefffff 	.word	0x3fefffff
 8012dcc:	3fe00000 	.word	0x3fe00000
 8012dd0:	43f00000 	.word	0x43f00000
 8012dd4:	4b5a      	ldr	r3, [pc, #360]	@ (8012f40 <__ieee754_pow+0x410>)
 8012dd6:	f7ed fa5f 	bl	8000298 <__aeabi_dsub>
 8012dda:	a351      	add	r3, pc, #324	@ (adr r3, 8012f20 <__ieee754_pow+0x3f0>)
 8012ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de0:	4604      	mov	r4, r0
 8012de2:	460d      	mov	r5, r1
 8012de4:	f7ed fc10 	bl	8000608 <__aeabi_dmul>
 8012de8:	a34f      	add	r3, pc, #316	@ (adr r3, 8012f28 <__ieee754_pow+0x3f8>)
 8012dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dee:	4606      	mov	r6, r0
 8012df0:	460f      	mov	r7, r1
 8012df2:	4620      	mov	r0, r4
 8012df4:	4629      	mov	r1, r5
 8012df6:	f7ed fc07 	bl	8000608 <__aeabi_dmul>
 8012dfa:	4b52      	ldr	r3, [pc, #328]	@ (8012f44 <__ieee754_pow+0x414>)
 8012dfc:	4682      	mov	sl, r0
 8012dfe:	468b      	mov	fp, r1
 8012e00:	2200      	movs	r2, #0
 8012e02:	4620      	mov	r0, r4
 8012e04:	4629      	mov	r1, r5
 8012e06:	f7ed fbff 	bl	8000608 <__aeabi_dmul>
 8012e0a:	4602      	mov	r2, r0
 8012e0c:	460b      	mov	r3, r1
 8012e0e:	a148      	add	r1, pc, #288	@ (adr r1, 8012f30 <__ieee754_pow+0x400>)
 8012e10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012e14:	f7ed fa40 	bl	8000298 <__aeabi_dsub>
 8012e18:	4622      	mov	r2, r4
 8012e1a:	462b      	mov	r3, r5
 8012e1c:	f7ed fbf4 	bl	8000608 <__aeabi_dmul>
 8012e20:	4602      	mov	r2, r0
 8012e22:	460b      	mov	r3, r1
 8012e24:	2000      	movs	r0, #0
 8012e26:	4948      	ldr	r1, [pc, #288]	@ (8012f48 <__ieee754_pow+0x418>)
 8012e28:	f7ed fa36 	bl	8000298 <__aeabi_dsub>
 8012e2c:	4622      	mov	r2, r4
 8012e2e:	4680      	mov	r8, r0
 8012e30:	4689      	mov	r9, r1
 8012e32:	462b      	mov	r3, r5
 8012e34:	4620      	mov	r0, r4
 8012e36:	4629      	mov	r1, r5
 8012e38:	f7ed fbe6 	bl	8000608 <__aeabi_dmul>
 8012e3c:	4602      	mov	r2, r0
 8012e3e:	460b      	mov	r3, r1
 8012e40:	4640      	mov	r0, r8
 8012e42:	4649      	mov	r1, r9
 8012e44:	f7ed fbe0 	bl	8000608 <__aeabi_dmul>
 8012e48:	a33b      	add	r3, pc, #236	@ (adr r3, 8012f38 <__ieee754_pow+0x408>)
 8012e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e4e:	f7ed fbdb 	bl	8000608 <__aeabi_dmul>
 8012e52:	4602      	mov	r2, r0
 8012e54:	460b      	mov	r3, r1
 8012e56:	4650      	mov	r0, sl
 8012e58:	4659      	mov	r1, fp
 8012e5a:	f7ed fa1d 	bl	8000298 <__aeabi_dsub>
 8012e5e:	4602      	mov	r2, r0
 8012e60:	460b      	mov	r3, r1
 8012e62:	4680      	mov	r8, r0
 8012e64:	4689      	mov	r9, r1
 8012e66:	4630      	mov	r0, r6
 8012e68:	4639      	mov	r1, r7
 8012e6a:	f7ed fa17 	bl	800029c <__adddf3>
 8012e6e:	2400      	movs	r4, #0
 8012e70:	4632      	mov	r2, r6
 8012e72:	463b      	mov	r3, r7
 8012e74:	4620      	mov	r0, r4
 8012e76:	460d      	mov	r5, r1
 8012e78:	f7ed fa0e 	bl	8000298 <__aeabi_dsub>
 8012e7c:	4602      	mov	r2, r0
 8012e7e:	460b      	mov	r3, r1
 8012e80:	4640      	mov	r0, r8
 8012e82:	4649      	mov	r1, r9
 8012e84:	f7ed fa08 	bl	8000298 <__aeabi_dsub>
 8012e88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012e8c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012e90:	2300      	movs	r3, #0
 8012e92:	9304      	str	r3, [sp, #16]
 8012e94:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8012e98:	4606      	mov	r6, r0
 8012e9a:	460f      	mov	r7, r1
 8012e9c:	4652      	mov	r2, sl
 8012e9e:	465b      	mov	r3, fp
 8012ea0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012ea4:	f7ed f9f8 	bl	8000298 <__aeabi_dsub>
 8012ea8:	4622      	mov	r2, r4
 8012eaa:	462b      	mov	r3, r5
 8012eac:	f7ed fbac 	bl	8000608 <__aeabi_dmul>
 8012eb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012eb4:	4680      	mov	r8, r0
 8012eb6:	4689      	mov	r9, r1
 8012eb8:	4630      	mov	r0, r6
 8012eba:	4639      	mov	r1, r7
 8012ebc:	f7ed fba4 	bl	8000608 <__aeabi_dmul>
 8012ec0:	4602      	mov	r2, r0
 8012ec2:	460b      	mov	r3, r1
 8012ec4:	4640      	mov	r0, r8
 8012ec6:	4649      	mov	r1, r9
 8012ec8:	f7ed f9e8 	bl	800029c <__adddf3>
 8012ecc:	4652      	mov	r2, sl
 8012ece:	465b      	mov	r3, fp
 8012ed0:	4606      	mov	r6, r0
 8012ed2:	460f      	mov	r7, r1
 8012ed4:	4620      	mov	r0, r4
 8012ed6:	4629      	mov	r1, r5
 8012ed8:	f7ed fb96 	bl	8000608 <__aeabi_dmul>
 8012edc:	460b      	mov	r3, r1
 8012ede:	4602      	mov	r2, r0
 8012ee0:	4680      	mov	r8, r0
 8012ee2:	4689      	mov	r9, r1
 8012ee4:	4630      	mov	r0, r6
 8012ee6:	4639      	mov	r1, r7
 8012ee8:	f7ed f9d8 	bl	800029c <__adddf3>
 8012eec:	4b17      	ldr	r3, [pc, #92]	@ (8012f4c <__ieee754_pow+0x41c>)
 8012eee:	4299      	cmp	r1, r3
 8012ef0:	4604      	mov	r4, r0
 8012ef2:	460d      	mov	r5, r1
 8012ef4:	468a      	mov	sl, r1
 8012ef6:	468b      	mov	fp, r1
 8012ef8:	f340 82ef 	ble.w	80134da <__ieee754_pow+0x9aa>
 8012efc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8012f00:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8012f04:	4303      	orrs	r3, r0
 8012f06:	f000 81e8 	beq.w	80132da <__ieee754_pow+0x7aa>
 8012f0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f0e:	2200      	movs	r2, #0
 8012f10:	2300      	movs	r3, #0
 8012f12:	f7ed fdeb 	bl	8000aec <__aeabi_dcmplt>
 8012f16:	3800      	subs	r0, #0
 8012f18:	bf18      	it	ne
 8012f1a:	2001      	movne	r0, #1
 8012f1c:	e710      	b.n	8012d40 <__ieee754_pow+0x210>
 8012f1e:	bf00      	nop
 8012f20:	60000000 	.word	0x60000000
 8012f24:	3ff71547 	.word	0x3ff71547
 8012f28:	f85ddf44 	.word	0xf85ddf44
 8012f2c:	3e54ae0b 	.word	0x3e54ae0b
 8012f30:	55555555 	.word	0x55555555
 8012f34:	3fd55555 	.word	0x3fd55555
 8012f38:	652b82fe 	.word	0x652b82fe
 8012f3c:	3ff71547 	.word	0x3ff71547
 8012f40:	3ff00000 	.word	0x3ff00000
 8012f44:	3fd00000 	.word	0x3fd00000
 8012f48:	3fe00000 	.word	0x3fe00000
 8012f4c:	408fffff 	.word	0x408fffff
 8012f50:	4bd5      	ldr	r3, [pc, #852]	@ (80132a8 <__ieee754_pow+0x778>)
 8012f52:	402b      	ands	r3, r5
 8012f54:	2200      	movs	r2, #0
 8012f56:	b92b      	cbnz	r3, 8012f64 <__ieee754_pow+0x434>
 8012f58:	4bd4      	ldr	r3, [pc, #848]	@ (80132ac <__ieee754_pow+0x77c>)
 8012f5a:	f7ed fb55 	bl	8000608 <__aeabi_dmul>
 8012f5e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8012f62:	468b      	mov	fp, r1
 8012f64:	ea4f 532b 	mov.w	r3, fp, asr #20
 8012f68:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8012f6c:	4413      	add	r3, r2
 8012f6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012f70:	4bcf      	ldr	r3, [pc, #828]	@ (80132b0 <__ieee754_pow+0x780>)
 8012f72:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8012f76:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8012f7a:	459b      	cmp	fp, r3
 8012f7c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012f80:	dd08      	ble.n	8012f94 <__ieee754_pow+0x464>
 8012f82:	4bcc      	ldr	r3, [pc, #816]	@ (80132b4 <__ieee754_pow+0x784>)
 8012f84:	459b      	cmp	fp, r3
 8012f86:	f340 81a5 	ble.w	80132d4 <__ieee754_pow+0x7a4>
 8012f8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012f8c:	3301      	adds	r3, #1
 8012f8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012f90:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8012f94:	f04f 0a00 	mov.w	sl, #0
 8012f98:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8012f9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012f9e:	4bc6      	ldr	r3, [pc, #792]	@ (80132b8 <__ieee754_pow+0x788>)
 8012fa0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012fa4:	ed93 7b00 	vldr	d7, [r3]
 8012fa8:	4629      	mov	r1, r5
 8012faa:	ec53 2b17 	vmov	r2, r3, d7
 8012fae:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012fb2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012fb6:	f7ed f96f 	bl	8000298 <__aeabi_dsub>
 8012fba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012fbe:	4606      	mov	r6, r0
 8012fc0:	460f      	mov	r7, r1
 8012fc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012fc6:	f7ed f969 	bl	800029c <__adddf3>
 8012fca:	4602      	mov	r2, r0
 8012fcc:	460b      	mov	r3, r1
 8012fce:	2000      	movs	r0, #0
 8012fd0:	49ba      	ldr	r1, [pc, #744]	@ (80132bc <__ieee754_pow+0x78c>)
 8012fd2:	f7ed fc43 	bl	800085c <__aeabi_ddiv>
 8012fd6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8012fda:	4602      	mov	r2, r0
 8012fdc:	460b      	mov	r3, r1
 8012fde:	4630      	mov	r0, r6
 8012fe0:	4639      	mov	r1, r7
 8012fe2:	f7ed fb11 	bl	8000608 <__aeabi_dmul>
 8012fe6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012fea:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8012fee:	106d      	asrs	r5, r5, #1
 8012ff0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8012ff4:	f04f 0b00 	mov.w	fp, #0
 8012ff8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8012ffc:	4661      	mov	r1, ip
 8012ffe:	2200      	movs	r2, #0
 8013000:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8013004:	4658      	mov	r0, fp
 8013006:	46e1      	mov	r9, ip
 8013008:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801300c:	4614      	mov	r4, r2
 801300e:	461d      	mov	r5, r3
 8013010:	f7ed fafa 	bl	8000608 <__aeabi_dmul>
 8013014:	4602      	mov	r2, r0
 8013016:	460b      	mov	r3, r1
 8013018:	4630      	mov	r0, r6
 801301a:	4639      	mov	r1, r7
 801301c:	f7ed f93c 	bl	8000298 <__aeabi_dsub>
 8013020:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013024:	4606      	mov	r6, r0
 8013026:	460f      	mov	r7, r1
 8013028:	4620      	mov	r0, r4
 801302a:	4629      	mov	r1, r5
 801302c:	f7ed f934 	bl	8000298 <__aeabi_dsub>
 8013030:	4602      	mov	r2, r0
 8013032:	460b      	mov	r3, r1
 8013034:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013038:	f7ed f92e 	bl	8000298 <__aeabi_dsub>
 801303c:	465a      	mov	r2, fp
 801303e:	464b      	mov	r3, r9
 8013040:	f7ed fae2 	bl	8000608 <__aeabi_dmul>
 8013044:	4602      	mov	r2, r0
 8013046:	460b      	mov	r3, r1
 8013048:	4630      	mov	r0, r6
 801304a:	4639      	mov	r1, r7
 801304c:	f7ed f924 	bl	8000298 <__aeabi_dsub>
 8013050:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013054:	f7ed fad8 	bl	8000608 <__aeabi_dmul>
 8013058:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801305c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013060:	4610      	mov	r0, r2
 8013062:	4619      	mov	r1, r3
 8013064:	f7ed fad0 	bl	8000608 <__aeabi_dmul>
 8013068:	a37d      	add	r3, pc, #500	@ (adr r3, 8013260 <__ieee754_pow+0x730>)
 801306a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801306e:	4604      	mov	r4, r0
 8013070:	460d      	mov	r5, r1
 8013072:	f7ed fac9 	bl	8000608 <__aeabi_dmul>
 8013076:	a37c      	add	r3, pc, #496	@ (adr r3, 8013268 <__ieee754_pow+0x738>)
 8013078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801307c:	f7ed f90e 	bl	800029c <__adddf3>
 8013080:	4622      	mov	r2, r4
 8013082:	462b      	mov	r3, r5
 8013084:	f7ed fac0 	bl	8000608 <__aeabi_dmul>
 8013088:	a379      	add	r3, pc, #484	@ (adr r3, 8013270 <__ieee754_pow+0x740>)
 801308a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801308e:	f7ed f905 	bl	800029c <__adddf3>
 8013092:	4622      	mov	r2, r4
 8013094:	462b      	mov	r3, r5
 8013096:	f7ed fab7 	bl	8000608 <__aeabi_dmul>
 801309a:	a377      	add	r3, pc, #476	@ (adr r3, 8013278 <__ieee754_pow+0x748>)
 801309c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130a0:	f7ed f8fc 	bl	800029c <__adddf3>
 80130a4:	4622      	mov	r2, r4
 80130a6:	462b      	mov	r3, r5
 80130a8:	f7ed faae 	bl	8000608 <__aeabi_dmul>
 80130ac:	a374      	add	r3, pc, #464	@ (adr r3, 8013280 <__ieee754_pow+0x750>)
 80130ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130b2:	f7ed f8f3 	bl	800029c <__adddf3>
 80130b6:	4622      	mov	r2, r4
 80130b8:	462b      	mov	r3, r5
 80130ba:	f7ed faa5 	bl	8000608 <__aeabi_dmul>
 80130be:	a372      	add	r3, pc, #456	@ (adr r3, 8013288 <__ieee754_pow+0x758>)
 80130c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130c4:	f7ed f8ea 	bl	800029c <__adddf3>
 80130c8:	4622      	mov	r2, r4
 80130ca:	4606      	mov	r6, r0
 80130cc:	460f      	mov	r7, r1
 80130ce:	462b      	mov	r3, r5
 80130d0:	4620      	mov	r0, r4
 80130d2:	4629      	mov	r1, r5
 80130d4:	f7ed fa98 	bl	8000608 <__aeabi_dmul>
 80130d8:	4602      	mov	r2, r0
 80130da:	460b      	mov	r3, r1
 80130dc:	4630      	mov	r0, r6
 80130de:	4639      	mov	r1, r7
 80130e0:	f7ed fa92 	bl	8000608 <__aeabi_dmul>
 80130e4:	465a      	mov	r2, fp
 80130e6:	4604      	mov	r4, r0
 80130e8:	460d      	mov	r5, r1
 80130ea:	464b      	mov	r3, r9
 80130ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80130f0:	f7ed f8d4 	bl	800029c <__adddf3>
 80130f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80130f8:	f7ed fa86 	bl	8000608 <__aeabi_dmul>
 80130fc:	4622      	mov	r2, r4
 80130fe:	462b      	mov	r3, r5
 8013100:	f7ed f8cc 	bl	800029c <__adddf3>
 8013104:	465a      	mov	r2, fp
 8013106:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801310a:	464b      	mov	r3, r9
 801310c:	4658      	mov	r0, fp
 801310e:	4649      	mov	r1, r9
 8013110:	f7ed fa7a 	bl	8000608 <__aeabi_dmul>
 8013114:	4b6a      	ldr	r3, [pc, #424]	@ (80132c0 <__ieee754_pow+0x790>)
 8013116:	2200      	movs	r2, #0
 8013118:	4606      	mov	r6, r0
 801311a:	460f      	mov	r7, r1
 801311c:	f7ed f8be 	bl	800029c <__adddf3>
 8013120:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013124:	f7ed f8ba 	bl	800029c <__adddf3>
 8013128:	46d8      	mov	r8, fp
 801312a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801312e:	460d      	mov	r5, r1
 8013130:	465a      	mov	r2, fp
 8013132:	460b      	mov	r3, r1
 8013134:	4640      	mov	r0, r8
 8013136:	4649      	mov	r1, r9
 8013138:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801313c:	f7ed fa64 	bl	8000608 <__aeabi_dmul>
 8013140:	465c      	mov	r4, fp
 8013142:	4680      	mov	r8, r0
 8013144:	4689      	mov	r9, r1
 8013146:	4b5e      	ldr	r3, [pc, #376]	@ (80132c0 <__ieee754_pow+0x790>)
 8013148:	2200      	movs	r2, #0
 801314a:	4620      	mov	r0, r4
 801314c:	4629      	mov	r1, r5
 801314e:	f7ed f8a3 	bl	8000298 <__aeabi_dsub>
 8013152:	4632      	mov	r2, r6
 8013154:	463b      	mov	r3, r7
 8013156:	f7ed f89f 	bl	8000298 <__aeabi_dsub>
 801315a:	4602      	mov	r2, r0
 801315c:	460b      	mov	r3, r1
 801315e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013162:	f7ed f899 	bl	8000298 <__aeabi_dsub>
 8013166:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801316a:	f7ed fa4d 	bl	8000608 <__aeabi_dmul>
 801316e:	4622      	mov	r2, r4
 8013170:	4606      	mov	r6, r0
 8013172:	460f      	mov	r7, r1
 8013174:	462b      	mov	r3, r5
 8013176:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801317a:	f7ed fa45 	bl	8000608 <__aeabi_dmul>
 801317e:	4602      	mov	r2, r0
 8013180:	460b      	mov	r3, r1
 8013182:	4630      	mov	r0, r6
 8013184:	4639      	mov	r1, r7
 8013186:	f7ed f889 	bl	800029c <__adddf3>
 801318a:	4606      	mov	r6, r0
 801318c:	460f      	mov	r7, r1
 801318e:	4602      	mov	r2, r0
 8013190:	460b      	mov	r3, r1
 8013192:	4640      	mov	r0, r8
 8013194:	4649      	mov	r1, r9
 8013196:	f7ed f881 	bl	800029c <__adddf3>
 801319a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801319e:	a33c      	add	r3, pc, #240	@ (adr r3, 8013290 <__ieee754_pow+0x760>)
 80131a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131a4:	4658      	mov	r0, fp
 80131a6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80131aa:	460d      	mov	r5, r1
 80131ac:	f7ed fa2c 	bl	8000608 <__aeabi_dmul>
 80131b0:	465c      	mov	r4, fp
 80131b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80131b6:	4642      	mov	r2, r8
 80131b8:	464b      	mov	r3, r9
 80131ba:	4620      	mov	r0, r4
 80131bc:	4629      	mov	r1, r5
 80131be:	f7ed f86b 	bl	8000298 <__aeabi_dsub>
 80131c2:	4602      	mov	r2, r0
 80131c4:	460b      	mov	r3, r1
 80131c6:	4630      	mov	r0, r6
 80131c8:	4639      	mov	r1, r7
 80131ca:	f7ed f865 	bl	8000298 <__aeabi_dsub>
 80131ce:	a332      	add	r3, pc, #200	@ (adr r3, 8013298 <__ieee754_pow+0x768>)
 80131d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131d4:	f7ed fa18 	bl	8000608 <__aeabi_dmul>
 80131d8:	a331      	add	r3, pc, #196	@ (adr r3, 80132a0 <__ieee754_pow+0x770>)
 80131da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131de:	4606      	mov	r6, r0
 80131e0:	460f      	mov	r7, r1
 80131e2:	4620      	mov	r0, r4
 80131e4:	4629      	mov	r1, r5
 80131e6:	f7ed fa0f 	bl	8000608 <__aeabi_dmul>
 80131ea:	4602      	mov	r2, r0
 80131ec:	460b      	mov	r3, r1
 80131ee:	4630      	mov	r0, r6
 80131f0:	4639      	mov	r1, r7
 80131f2:	f7ed f853 	bl	800029c <__adddf3>
 80131f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80131f8:	4b32      	ldr	r3, [pc, #200]	@ (80132c4 <__ieee754_pow+0x794>)
 80131fa:	4413      	add	r3, r2
 80131fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013200:	f7ed f84c 	bl	800029c <__adddf3>
 8013204:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013208:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801320a:	f7ed f993 	bl	8000534 <__aeabi_i2d>
 801320e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013210:	4b2d      	ldr	r3, [pc, #180]	@ (80132c8 <__ieee754_pow+0x798>)
 8013212:	4413      	add	r3, r2
 8013214:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013218:	4606      	mov	r6, r0
 801321a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801321e:	460f      	mov	r7, r1
 8013220:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013224:	f7ed f83a 	bl	800029c <__adddf3>
 8013228:	4642      	mov	r2, r8
 801322a:	464b      	mov	r3, r9
 801322c:	f7ed f836 	bl	800029c <__adddf3>
 8013230:	4632      	mov	r2, r6
 8013232:	463b      	mov	r3, r7
 8013234:	f7ed f832 	bl	800029c <__adddf3>
 8013238:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801323c:	4632      	mov	r2, r6
 801323e:	463b      	mov	r3, r7
 8013240:	4658      	mov	r0, fp
 8013242:	460d      	mov	r5, r1
 8013244:	f7ed f828 	bl	8000298 <__aeabi_dsub>
 8013248:	4642      	mov	r2, r8
 801324a:	464b      	mov	r3, r9
 801324c:	f7ed f824 	bl	8000298 <__aeabi_dsub>
 8013250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013254:	f7ed f820 	bl	8000298 <__aeabi_dsub>
 8013258:	465c      	mov	r4, fp
 801325a:	4602      	mov	r2, r0
 801325c:	e036      	b.n	80132cc <__ieee754_pow+0x79c>
 801325e:	bf00      	nop
 8013260:	4a454eef 	.word	0x4a454eef
 8013264:	3fca7e28 	.word	0x3fca7e28
 8013268:	93c9db65 	.word	0x93c9db65
 801326c:	3fcd864a 	.word	0x3fcd864a
 8013270:	a91d4101 	.word	0xa91d4101
 8013274:	3fd17460 	.word	0x3fd17460
 8013278:	518f264d 	.word	0x518f264d
 801327c:	3fd55555 	.word	0x3fd55555
 8013280:	db6fabff 	.word	0xdb6fabff
 8013284:	3fdb6db6 	.word	0x3fdb6db6
 8013288:	33333303 	.word	0x33333303
 801328c:	3fe33333 	.word	0x3fe33333
 8013290:	e0000000 	.word	0xe0000000
 8013294:	3feec709 	.word	0x3feec709
 8013298:	dc3a03fd 	.word	0xdc3a03fd
 801329c:	3feec709 	.word	0x3feec709
 80132a0:	145b01f5 	.word	0x145b01f5
 80132a4:	be3e2fe0 	.word	0xbe3e2fe0
 80132a8:	7ff00000 	.word	0x7ff00000
 80132ac:	43400000 	.word	0x43400000
 80132b0:	0003988e 	.word	0x0003988e
 80132b4:	000bb679 	.word	0x000bb679
 80132b8:	08014390 	.word	0x08014390
 80132bc:	3ff00000 	.word	0x3ff00000
 80132c0:	40080000 	.word	0x40080000
 80132c4:	08014370 	.word	0x08014370
 80132c8:	08014380 	.word	0x08014380
 80132cc:	460b      	mov	r3, r1
 80132ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80132d2:	e5d7      	b.n	8012e84 <__ieee754_pow+0x354>
 80132d4:	f04f 0a01 	mov.w	sl, #1
 80132d8:	e65e      	b.n	8012f98 <__ieee754_pow+0x468>
 80132da:	a3b4      	add	r3, pc, #720	@ (adr r3, 80135ac <__ieee754_pow+0xa7c>)
 80132dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132e0:	4630      	mov	r0, r6
 80132e2:	4639      	mov	r1, r7
 80132e4:	f7ec ffda 	bl	800029c <__adddf3>
 80132e8:	4642      	mov	r2, r8
 80132ea:	e9cd 0100 	strd	r0, r1, [sp]
 80132ee:	464b      	mov	r3, r9
 80132f0:	4620      	mov	r0, r4
 80132f2:	4629      	mov	r1, r5
 80132f4:	f7ec ffd0 	bl	8000298 <__aeabi_dsub>
 80132f8:	4602      	mov	r2, r0
 80132fa:	460b      	mov	r3, r1
 80132fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013300:	f7ed fc12 	bl	8000b28 <__aeabi_dcmpgt>
 8013304:	2800      	cmp	r0, #0
 8013306:	f47f ae00 	bne.w	8012f0a <__ieee754_pow+0x3da>
 801330a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801330e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8013312:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8013316:	fa43 fa0a 	asr.w	sl, r3, sl
 801331a:	44da      	add	sl, fp
 801331c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8013320:	489d      	ldr	r0, [pc, #628]	@ (8013598 <__ieee754_pow+0xa68>)
 8013322:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8013326:	4108      	asrs	r0, r1
 8013328:	ea00 030a 	and.w	r3, r0, sl
 801332c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8013330:	f1c1 0114 	rsb	r1, r1, #20
 8013334:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8013338:	fa4a fa01 	asr.w	sl, sl, r1
 801333c:	f1bb 0f00 	cmp.w	fp, #0
 8013340:	4640      	mov	r0, r8
 8013342:	4649      	mov	r1, r9
 8013344:	f04f 0200 	mov.w	r2, #0
 8013348:	bfb8      	it	lt
 801334a:	f1ca 0a00 	rsblt	sl, sl, #0
 801334e:	f7ec ffa3 	bl	8000298 <__aeabi_dsub>
 8013352:	4680      	mov	r8, r0
 8013354:	4689      	mov	r9, r1
 8013356:	4632      	mov	r2, r6
 8013358:	463b      	mov	r3, r7
 801335a:	4640      	mov	r0, r8
 801335c:	4649      	mov	r1, r9
 801335e:	f7ec ff9d 	bl	800029c <__adddf3>
 8013362:	2400      	movs	r4, #0
 8013364:	a37c      	add	r3, pc, #496	@ (adr r3, 8013558 <__ieee754_pow+0xa28>)
 8013366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801336a:	4620      	mov	r0, r4
 801336c:	460d      	mov	r5, r1
 801336e:	f7ed f94b 	bl	8000608 <__aeabi_dmul>
 8013372:	4642      	mov	r2, r8
 8013374:	e9cd 0100 	strd	r0, r1, [sp]
 8013378:	464b      	mov	r3, r9
 801337a:	4620      	mov	r0, r4
 801337c:	4629      	mov	r1, r5
 801337e:	f7ec ff8b 	bl	8000298 <__aeabi_dsub>
 8013382:	4602      	mov	r2, r0
 8013384:	460b      	mov	r3, r1
 8013386:	4630      	mov	r0, r6
 8013388:	4639      	mov	r1, r7
 801338a:	f7ec ff85 	bl	8000298 <__aeabi_dsub>
 801338e:	a374      	add	r3, pc, #464	@ (adr r3, 8013560 <__ieee754_pow+0xa30>)
 8013390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013394:	f7ed f938 	bl	8000608 <__aeabi_dmul>
 8013398:	a373      	add	r3, pc, #460	@ (adr r3, 8013568 <__ieee754_pow+0xa38>)
 801339a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801339e:	4680      	mov	r8, r0
 80133a0:	4689      	mov	r9, r1
 80133a2:	4620      	mov	r0, r4
 80133a4:	4629      	mov	r1, r5
 80133a6:	f7ed f92f 	bl	8000608 <__aeabi_dmul>
 80133aa:	4602      	mov	r2, r0
 80133ac:	460b      	mov	r3, r1
 80133ae:	4640      	mov	r0, r8
 80133b0:	4649      	mov	r1, r9
 80133b2:	f7ec ff73 	bl	800029c <__adddf3>
 80133b6:	4604      	mov	r4, r0
 80133b8:	460d      	mov	r5, r1
 80133ba:	4602      	mov	r2, r0
 80133bc:	460b      	mov	r3, r1
 80133be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80133c2:	f7ec ff6b 	bl	800029c <__adddf3>
 80133c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80133ca:	4680      	mov	r8, r0
 80133cc:	4689      	mov	r9, r1
 80133ce:	f7ec ff63 	bl	8000298 <__aeabi_dsub>
 80133d2:	4602      	mov	r2, r0
 80133d4:	460b      	mov	r3, r1
 80133d6:	4620      	mov	r0, r4
 80133d8:	4629      	mov	r1, r5
 80133da:	f7ec ff5d 	bl	8000298 <__aeabi_dsub>
 80133de:	4642      	mov	r2, r8
 80133e0:	4606      	mov	r6, r0
 80133e2:	460f      	mov	r7, r1
 80133e4:	464b      	mov	r3, r9
 80133e6:	4640      	mov	r0, r8
 80133e8:	4649      	mov	r1, r9
 80133ea:	f7ed f90d 	bl	8000608 <__aeabi_dmul>
 80133ee:	a360      	add	r3, pc, #384	@ (adr r3, 8013570 <__ieee754_pow+0xa40>)
 80133f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133f4:	4604      	mov	r4, r0
 80133f6:	460d      	mov	r5, r1
 80133f8:	f7ed f906 	bl	8000608 <__aeabi_dmul>
 80133fc:	a35e      	add	r3, pc, #376	@ (adr r3, 8013578 <__ieee754_pow+0xa48>)
 80133fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013402:	f7ec ff49 	bl	8000298 <__aeabi_dsub>
 8013406:	4622      	mov	r2, r4
 8013408:	462b      	mov	r3, r5
 801340a:	f7ed f8fd 	bl	8000608 <__aeabi_dmul>
 801340e:	a35c      	add	r3, pc, #368	@ (adr r3, 8013580 <__ieee754_pow+0xa50>)
 8013410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013414:	f7ec ff42 	bl	800029c <__adddf3>
 8013418:	4622      	mov	r2, r4
 801341a:	462b      	mov	r3, r5
 801341c:	f7ed f8f4 	bl	8000608 <__aeabi_dmul>
 8013420:	a359      	add	r3, pc, #356	@ (adr r3, 8013588 <__ieee754_pow+0xa58>)
 8013422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013426:	f7ec ff37 	bl	8000298 <__aeabi_dsub>
 801342a:	4622      	mov	r2, r4
 801342c:	462b      	mov	r3, r5
 801342e:	f7ed f8eb 	bl	8000608 <__aeabi_dmul>
 8013432:	a357      	add	r3, pc, #348	@ (adr r3, 8013590 <__ieee754_pow+0xa60>)
 8013434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013438:	f7ec ff30 	bl	800029c <__adddf3>
 801343c:	4622      	mov	r2, r4
 801343e:	462b      	mov	r3, r5
 8013440:	f7ed f8e2 	bl	8000608 <__aeabi_dmul>
 8013444:	4602      	mov	r2, r0
 8013446:	460b      	mov	r3, r1
 8013448:	4640      	mov	r0, r8
 801344a:	4649      	mov	r1, r9
 801344c:	f7ec ff24 	bl	8000298 <__aeabi_dsub>
 8013450:	4604      	mov	r4, r0
 8013452:	460d      	mov	r5, r1
 8013454:	4602      	mov	r2, r0
 8013456:	460b      	mov	r3, r1
 8013458:	4640      	mov	r0, r8
 801345a:	4649      	mov	r1, r9
 801345c:	f7ed f8d4 	bl	8000608 <__aeabi_dmul>
 8013460:	2200      	movs	r2, #0
 8013462:	e9cd 0100 	strd	r0, r1, [sp]
 8013466:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801346a:	4620      	mov	r0, r4
 801346c:	4629      	mov	r1, r5
 801346e:	f7ec ff13 	bl	8000298 <__aeabi_dsub>
 8013472:	4602      	mov	r2, r0
 8013474:	460b      	mov	r3, r1
 8013476:	e9dd 0100 	ldrd	r0, r1, [sp]
 801347a:	f7ed f9ef 	bl	800085c <__aeabi_ddiv>
 801347e:	4632      	mov	r2, r6
 8013480:	4604      	mov	r4, r0
 8013482:	460d      	mov	r5, r1
 8013484:	463b      	mov	r3, r7
 8013486:	4640      	mov	r0, r8
 8013488:	4649      	mov	r1, r9
 801348a:	f7ed f8bd 	bl	8000608 <__aeabi_dmul>
 801348e:	4632      	mov	r2, r6
 8013490:	463b      	mov	r3, r7
 8013492:	f7ec ff03 	bl	800029c <__adddf3>
 8013496:	4602      	mov	r2, r0
 8013498:	460b      	mov	r3, r1
 801349a:	4620      	mov	r0, r4
 801349c:	4629      	mov	r1, r5
 801349e:	f7ec fefb 	bl	8000298 <__aeabi_dsub>
 80134a2:	4642      	mov	r2, r8
 80134a4:	464b      	mov	r3, r9
 80134a6:	f7ec fef7 	bl	8000298 <__aeabi_dsub>
 80134aa:	460b      	mov	r3, r1
 80134ac:	4602      	mov	r2, r0
 80134ae:	493b      	ldr	r1, [pc, #236]	@ (801359c <__ieee754_pow+0xa6c>)
 80134b0:	2000      	movs	r0, #0
 80134b2:	f7ec fef1 	bl	8000298 <__aeabi_dsub>
 80134b6:	ec41 0b10 	vmov	d0, r0, r1
 80134ba:	ee10 3a90 	vmov	r3, s1
 80134be:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80134c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80134c6:	da30      	bge.n	801352a <__ieee754_pow+0x9fa>
 80134c8:	4650      	mov	r0, sl
 80134ca:	f000 f87d 	bl	80135c8 <scalbn>
 80134ce:	ec51 0b10 	vmov	r0, r1, d0
 80134d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80134d6:	f7ff bbd2 	b.w	8012c7e <__ieee754_pow+0x14e>
 80134da:	4c31      	ldr	r4, [pc, #196]	@ (80135a0 <__ieee754_pow+0xa70>)
 80134dc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80134e0:	42a3      	cmp	r3, r4
 80134e2:	d91a      	bls.n	801351a <__ieee754_pow+0x9ea>
 80134e4:	4b2f      	ldr	r3, [pc, #188]	@ (80135a4 <__ieee754_pow+0xa74>)
 80134e6:	440b      	add	r3, r1
 80134e8:	4303      	orrs	r3, r0
 80134ea:	d009      	beq.n	8013500 <__ieee754_pow+0x9d0>
 80134ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80134f0:	2200      	movs	r2, #0
 80134f2:	2300      	movs	r3, #0
 80134f4:	f7ed fafa 	bl	8000aec <__aeabi_dcmplt>
 80134f8:	3800      	subs	r0, #0
 80134fa:	bf18      	it	ne
 80134fc:	2001      	movne	r0, #1
 80134fe:	e42b      	b.n	8012d58 <__ieee754_pow+0x228>
 8013500:	4642      	mov	r2, r8
 8013502:	464b      	mov	r3, r9
 8013504:	f7ec fec8 	bl	8000298 <__aeabi_dsub>
 8013508:	4632      	mov	r2, r6
 801350a:	463b      	mov	r3, r7
 801350c:	f7ed fb02 	bl	8000b14 <__aeabi_dcmpge>
 8013510:	2800      	cmp	r0, #0
 8013512:	d1eb      	bne.n	80134ec <__ieee754_pow+0x9bc>
 8013514:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80135b4 <__ieee754_pow+0xa84>
 8013518:	e6f7      	b.n	801330a <__ieee754_pow+0x7da>
 801351a:	469a      	mov	sl, r3
 801351c:	4b22      	ldr	r3, [pc, #136]	@ (80135a8 <__ieee754_pow+0xa78>)
 801351e:	459a      	cmp	sl, r3
 8013520:	f63f aef3 	bhi.w	801330a <__ieee754_pow+0x7da>
 8013524:	f8dd a010 	ldr.w	sl, [sp, #16]
 8013528:	e715      	b.n	8013356 <__ieee754_pow+0x826>
 801352a:	ec51 0b10 	vmov	r0, r1, d0
 801352e:	4619      	mov	r1, r3
 8013530:	e7cf      	b.n	80134d2 <__ieee754_pow+0x9a2>
 8013532:	491a      	ldr	r1, [pc, #104]	@ (801359c <__ieee754_pow+0xa6c>)
 8013534:	2000      	movs	r0, #0
 8013536:	f7ff bb18 	b.w	8012b6a <__ieee754_pow+0x3a>
 801353a:	2000      	movs	r0, #0
 801353c:	2100      	movs	r1, #0
 801353e:	f7ff bb14 	b.w	8012b6a <__ieee754_pow+0x3a>
 8013542:	4630      	mov	r0, r6
 8013544:	4639      	mov	r1, r7
 8013546:	f7ff bb10 	b.w	8012b6a <__ieee754_pow+0x3a>
 801354a:	460c      	mov	r4, r1
 801354c:	f7ff bb5e 	b.w	8012c0c <__ieee754_pow+0xdc>
 8013550:	2400      	movs	r4, #0
 8013552:	f7ff bb49 	b.w	8012be8 <__ieee754_pow+0xb8>
 8013556:	bf00      	nop
 8013558:	00000000 	.word	0x00000000
 801355c:	3fe62e43 	.word	0x3fe62e43
 8013560:	fefa39ef 	.word	0xfefa39ef
 8013564:	3fe62e42 	.word	0x3fe62e42
 8013568:	0ca86c39 	.word	0x0ca86c39
 801356c:	be205c61 	.word	0xbe205c61
 8013570:	72bea4d0 	.word	0x72bea4d0
 8013574:	3e663769 	.word	0x3e663769
 8013578:	c5d26bf1 	.word	0xc5d26bf1
 801357c:	3ebbbd41 	.word	0x3ebbbd41
 8013580:	af25de2c 	.word	0xaf25de2c
 8013584:	3f11566a 	.word	0x3f11566a
 8013588:	16bebd93 	.word	0x16bebd93
 801358c:	3f66c16c 	.word	0x3f66c16c
 8013590:	5555553e 	.word	0x5555553e
 8013594:	3fc55555 	.word	0x3fc55555
 8013598:	fff00000 	.word	0xfff00000
 801359c:	3ff00000 	.word	0x3ff00000
 80135a0:	4090cbff 	.word	0x4090cbff
 80135a4:	3f6f3400 	.word	0x3f6f3400
 80135a8:	3fe00000 	.word	0x3fe00000
 80135ac:	652b82fe 	.word	0x652b82fe
 80135b0:	3c971547 	.word	0x3c971547
 80135b4:	4090cc00 	.word	0x4090cc00

080135b8 <fabs>:
 80135b8:	ec51 0b10 	vmov	r0, r1, d0
 80135bc:	4602      	mov	r2, r0
 80135be:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80135c2:	ec43 2b10 	vmov	d0, r2, r3
 80135c6:	4770      	bx	lr

080135c8 <scalbn>:
 80135c8:	b570      	push	{r4, r5, r6, lr}
 80135ca:	ec55 4b10 	vmov	r4, r5, d0
 80135ce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80135d2:	4606      	mov	r6, r0
 80135d4:	462b      	mov	r3, r5
 80135d6:	b991      	cbnz	r1, 80135fe <scalbn+0x36>
 80135d8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80135dc:	4323      	orrs	r3, r4
 80135de:	d03d      	beq.n	801365c <scalbn+0x94>
 80135e0:	4b35      	ldr	r3, [pc, #212]	@ (80136b8 <scalbn+0xf0>)
 80135e2:	4620      	mov	r0, r4
 80135e4:	4629      	mov	r1, r5
 80135e6:	2200      	movs	r2, #0
 80135e8:	f7ed f80e 	bl	8000608 <__aeabi_dmul>
 80135ec:	4b33      	ldr	r3, [pc, #204]	@ (80136bc <scalbn+0xf4>)
 80135ee:	429e      	cmp	r6, r3
 80135f0:	4604      	mov	r4, r0
 80135f2:	460d      	mov	r5, r1
 80135f4:	da0f      	bge.n	8013616 <scalbn+0x4e>
 80135f6:	a328      	add	r3, pc, #160	@ (adr r3, 8013698 <scalbn+0xd0>)
 80135f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135fc:	e01e      	b.n	801363c <scalbn+0x74>
 80135fe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8013602:	4291      	cmp	r1, r2
 8013604:	d10b      	bne.n	801361e <scalbn+0x56>
 8013606:	4622      	mov	r2, r4
 8013608:	4620      	mov	r0, r4
 801360a:	4629      	mov	r1, r5
 801360c:	f7ec fe46 	bl	800029c <__adddf3>
 8013610:	4604      	mov	r4, r0
 8013612:	460d      	mov	r5, r1
 8013614:	e022      	b.n	801365c <scalbn+0x94>
 8013616:	460b      	mov	r3, r1
 8013618:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801361c:	3936      	subs	r1, #54	@ 0x36
 801361e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8013622:	4296      	cmp	r6, r2
 8013624:	dd0d      	ble.n	8013642 <scalbn+0x7a>
 8013626:	2d00      	cmp	r5, #0
 8013628:	a11d      	add	r1, pc, #116	@ (adr r1, 80136a0 <scalbn+0xd8>)
 801362a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801362e:	da02      	bge.n	8013636 <scalbn+0x6e>
 8013630:	a11d      	add	r1, pc, #116	@ (adr r1, 80136a8 <scalbn+0xe0>)
 8013632:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013636:	a31a      	add	r3, pc, #104	@ (adr r3, 80136a0 <scalbn+0xd8>)
 8013638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801363c:	f7ec ffe4 	bl	8000608 <__aeabi_dmul>
 8013640:	e7e6      	b.n	8013610 <scalbn+0x48>
 8013642:	1872      	adds	r2, r6, r1
 8013644:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8013648:	428a      	cmp	r2, r1
 801364a:	dcec      	bgt.n	8013626 <scalbn+0x5e>
 801364c:	2a00      	cmp	r2, #0
 801364e:	dd08      	ble.n	8013662 <scalbn+0x9a>
 8013650:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013654:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013658:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801365c:	ec45 4b10 	vmov	d0, r4, r5
 8013660:	bd70      	pop	{r4, r5, r6, pc}
 8013662:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8013666:	da08      	bge.n	801367a <scalbn+0xb2>
 8013668:	2d00      	cmp	r5, #0
 801366a:	a10b      	add	r1, pc, #44	@ (adr r1, 8013698 <scalbn+0xd0>)
 801366c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013670:	dac1      	bge.n	80135f6 <scalbn+0x2e>
 8013672:	a10f      	add	r1, pc, #60	@ (adr r1, 80136b0 <scalbn+0xe8>)
 8013674:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013678:	e7bd      	b.n	80135f6 <scalbn+0x2e>
 801367a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801367e:	3236      	adds	r2, #54	@ 0x36
 8013680:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013684:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013688:	4620      	mov	r0, r4
 801368a:	4b0d      	ldr	r3, [pc, #52]	@ (80136c0 <scalbn+0xf8>)
 801368c:	4629      	mov	r1, r5
 801368e:	2200      	movs	r2, #0
 8013690:	e7d4      	b.n	801363c <scalbn+0x74>
 8013692:	bf00      	nop
 8013694:	f3af 8000 	nop.w
 8013698:	c2f8f359 	.word	0xc2f8f359
 801369c:	01a56e1f 	.word	0x01a56e1f
 80136a0:	8800759c 	.word	0x8800759c
 80136a4:	7e37e43c 	.word	0x7e37e43c
 80136a8:	8800759c 	.word	0x8800759c
 80136ac:	fe37e43c 	.word	0xfe37e43c
 80136b0:	c2f8f359 	.word	0xc2f8f359
 80136b4:	81a56e1f 	.word	0x81a56e1f
 80136b8:	43500000 	.word	0x43500000
 80136bc:	ffff3cb0 	.word	0xffff3cb0
 80136c0:	3c900000 	.word	0x3c900000

080136c4 <with_errno>:
 80136c4:	b510      	push	{r4, lr}
 80136c6:	ed2d 8b02 	vpush	{d8}
 80136ca:	eeb0 8a40 	vmov.f32	s16, s0
 80136ce:	eef0 8a60 	vmov.f32	s17, s1
 80136d2:	4604      	mov	r4, r0
 80136d4:	f7fb fad0 	bl	800ec78 <__errno>
 80136d8:	eeb0 0a48 	vmov.f32	s0, s16
 80136dc:	eef0 0a68 	vmov.f32	s1, s17
 80136e0:	ecbd 8b02 	vpop	{d8}
 80136e4:	6004      	str	r4, [r0, #0]
 80136e6:	bd10      	pop	{r4, pc}

080136e8 <xflow>:
 80136e8:	4603      	mov	r3, r0
 80136ea:	b507      	push	{r0, r1, r2, lr}
 80136ec:	ec51 0b10 	vmov	r0, r1, d0
 80136f0:	b183      	cbz	r3, 8013714 <xflow+0x2c>
 80136f2:	4602      	mov	r2, r0
 80136f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80136f8:	e9cd 2300 	strd	r2, r3, [sp]
 80136fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013700:	f7ec ff82 	bl	8000608 <__aeabi_dmul>
 8013704:	ec41 0b10 	vmov	d0, r0, r1
 8013708:	2022      	movs	r0, #34	@ 0x22
 801370a:	b003      	add	sp, #12
 801370c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013710:	f7ff bfd8 	b.w	80136c4 <with_errno>
 8013714:	4602      	mov	r2, r0
 8013716:	460b      	mov	r3, r1
 8013718:	e7ee      	b.n	80136f8 <xflow+0x10>
 801371a:	0000      	movs	r0, r0
 801371c:	0000      	movs	r0, r0
	...

08013720 <__math_uflow>:
 8013720:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013728 <__math_uflow+0x8>
 8013724:	f7ff bfe0 	b.w	80136e8 <xflow>
 8013728:	00000000 	.word	0x00000000
 801372c:	10000000 	.word	0x10000000

08013730 <__math_oflow>:
 8013730:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013738 <__math_oflow+0x8>
 8013734:	f7ff bfd8 	b.w	80136e8 <xflow>
 8013738:	00000000 	.word	0x00000000
 801373c:	70000000 	.word	0x70000000

08013740 <__ieee754_sqrt>:
 8013740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013744:	4a68      	ldr	r2, [pc, #416]	@ (80138e8 <__ieee754_sqrt+0x1a8>)
 8013746:	ec55 4b10 	vmov	r4, r5, d0
 801374a:	43aa      	bics	r2, r5
 801374c:	462b      	mov	r3, r5
 801374e:	4621      	mov	r1, r4
 8013750:	d110      	bne.n	8013774 <__ieee754_sqrt+0x34>
 8013752:	4622      	mov	r2, r4
 8013754:	4620      	mov	r0, r4
 8013756:	4629      	mov	r1, r5
 8013758:	f7ec ff56 	bl	8000608 <__aeabi_dmul>
 801375c:	4602      	mov	r2, r0
 801375e:	460b      	mov	r3, r1
 8013760:	4620      	mov	r0, r4
 8013762:	4629      	mov	r1, r5
 8013764:	f7ec fd9a 	bl	800029c <__adddf3>
 8013768:	4604      	mov	r4, r0
 801376a:	460d      	mov	r5, r1
 801376c:	ec45 4b10 	vmov	d0, r4, r5
 8013770:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013774:	2d00      	cmp	r5, #0
 8013776:	dc0e      	bgt.n	8013796 <__ieee754_sqrt+0x56>
 8013778:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801377c:	4322      	orrs	r2, r4
 801377e:	d0f5      	beq.n	801376c <__ieee754_sqrt+0x2c>
 8013780:	b19d      	cbz	r5, 80137aa <__ieee754_sqrt+0x6a>
 8013782:	4622      	mov	r2, r4
 8013784:	4620      	mov	r0, r4
 8013786:	4629      	mov	r1, r5
 8013788:	f7ec fd86 	bl	8000298 <__aeabi_dsub>
 801378c:	4602      	mov	r2, r0
 801378e:	460b      	mov	r3, r1
 8013790:	f7ed f864 	bl	800085c <__aeabi_ddiv>
 8013794:	e7e8      	b.n	8013768 <__ieee754_sqrt+0x28>
 8013796:	152a      	asrs	r2, r5, #20
 8013798:	d115      	bne.n	80137c6 <__ieee754_sqrt+0x86>
 801379a:	2000      	movs	r0, #0
 801379c:	e009      	b.n	80137b2 <__ieee754_sqrt+0x72>
 801379e:	0acb      	lsrs	r3, r1, #11
 80137a0:	3a15      	subs	r2, #21
 80137a2:	0549      	lsls	r1, r1, #21
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d0fa      	beq.n	801379e <__ieee754_sqrt+0x5e>
 80137a8:	e7f7      	b.n	801379a <__ieee754_sqrt+0x5a>
 80137aa:	462a      	mov	r2, r5
 80137ac:	e7fa      	b.n	80137a4 <__ieee754_sqrt+0x64>
 80137ae:	005b      	lsls	r3, r3, #1
 80137b0:	3001      	adds	r0, #1
 80137b2:	02dc      	lsls	r4, r3, #11
 80137b4:	d5fb      	bpl.n	80137ae <__ieee754_sqrt+0x6e>
 80137b6:	1e44      	subs	r4, r0, #1
 80137b8:	1b12      	subs	r2, r2, r4
 80137ba:	f1c0 0420 	rsb	r4, r0, #32
 80137be:	fa21 f404 	lsr.w	r4, r1, r4
 80137c2:	4323      	orrs	r3, r4
 80137c4:	4081      	lsls	r1, r0
 80137c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80137ca:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80137ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80137d2:	07d2      	lsls	r2, r2, #31
 80137d4:	bf5c      	itt	pl
 80137d6:	005b      	lslpl	r3, r3, #1
 80137d8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80137dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80137e0:	bf58      	it	pl
 80137e2:	0049      	lslpl	r1, r1, #1
 80137e4:	2600      	movs	r6, #0
 80137e6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80137ea:	106d      	asrs	r5, r5, #1
 80137ec:	0049      	lsls	r1, r1, #1
 80137ee:	2016      	movs	r0, #22
 80137f0:	4632      	mov	r2, r6
 80137f2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80137f6:	1917      	adds	r7, r2, r4
 80137f8:	429f      	cmp	r7, r3
 80137fa:	bfde      	ittt	le
 80137fc:	193a      	addle	r2, r7, r4
 80137fe:	1bdb      	suble	r3, r3, r7
 8013800:	1936      	addle	r6, r6, r4
 8013802:	0fcf      	lsrs	r7, r1, #31
 8013804:	3801      	subs	r0, #1
 8013806:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801380a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801380e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8013812:	d1f0      	bne.n	80137f6 <__ieee754_sqrt+0xb6>
 8013814:	4604      	mov	r4, r0
 8013816:	2720      	movs	r7, #32
 8013818:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801381c:	429a      	cmp	r2, r3
 801381e:	eb00 0e0c 	add.w	lr, r0, ip
 8013822:	db02      	blt.n	801382a <__ieee754_sqrt+0xea>
 8013824:	d113      	bne.n	801384e <__ieee754_sqrt+0x10e>
 8013826:	458e      	cmp	lr, r1
 8013828:	d811      	bhi.n	801384e <__ieee754_sqrt+0x10e>
 801382a:	f1be 0f00 	cmp.w	lr, #0
 801382e:	eb0e 000c 	add.w	r0, lr, ip
 8013832:	da42      	bge.n	80138ba <__ieee754_sqrt+0x17a>
 8013834:	2800      	cmp	r0, #0
 8013836:	db40      	blt.n	80138ba <__ieee754_sqrt+0x17a>
 8013838:	f102 0801 	add.w	r8, r2, #1
 801383c:	1a9b      	subs	r3, r3, r2
 801383e:	458e      	cmp	lr, r1
 8013840:	bf88      	it	hi
 8013842:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8013846:	eba1 010e 	sub.w	r1, r1, lr
 801384a:	4464      	add	r4, ip
 801384c:	4642      	mov	r2, r8
 801384e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8013852:	3f01      	subs	r7, #1
 8013854:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8013858:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801385c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8013860:	d1dc      	bne.n	801381c <__ieee754_sqrt+0xdc>
 8013862:	4319      	orrs	r1, r3
 8013864:	d01b      	beq.n	801389e <__ieee754_sqrt+0x15e>
 8013866:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80138ec <__ieee754_sqrt+0x1ac>
 801386a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80138f0 <__ieee754_sqrt+0x1b0>
 801386e:	e9da 0100 	ldrd	r0, r1, [sl]
 8013872:	e9db 2300 	ldrd	r2, r3, [fp]
 8013876:	f7ec fd0f 	bl	8000298 <__aeabi_dsub>
 801387a:	e9da 8900 	ldrd	r8, r9, [sl]
 801387e:	4602      	mov	r2, r0
 8013880:	460b      	mov	r3, r1
 8013882:	4640      	mov	r0, r8
 8013884:	4649      	mov	r1, r9
 8013886:	f7ed f93b 	bl	8000b00 <__aeabi_dcmple>
 801388a:	b140      	cbz	r0, 801389e <__ieee754_sqrt+0x15e>
 801388c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8013890:	e9da 0100 	ldrd	r0, r1, [sl]
 8013894:	e9db 2300 	ldrd	r2, r3, [fp]
 8013898:	d111      	bne.n	80138be <__ieee754_sqrt+0x17e>
 801389a:	3601      	adds	r6, #1
 801389c:	463c      	mov	r4, r7
 801389e:	1072      	asrs	r2, r6, #1
 80138a0:	0863      	lsrs	r3, r4, #1
 80138a2:	07f1      	lsls	r1, r6, #31
 80138a4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80138a8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80138ac:	bf48      	it	mi
 80138ae:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80138b2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80138b6:	4618      	mov	r0, r3
 80138b8:	e756      	b.n	8013768 <__ieee754_sqrt+0x28>
 80138ba:	4690      	mov	r8, r2
 80138bc:	e7be      	b.n	801383c <__ieee754_sqrt+0xfc>
 80138be:	f7ec fced 	bl	800029c <__adddf3>
 80138c2:	e9da 8900 	ldrd	r8, r9, [sl]
 80138c6:	4602      	mov	r2, r0
 80138c8:	460b      	mov	r3, r1
 80138ca:	4640      	mov	r0, r8
 80138cc:	4649      	mov	r1, r9
 80138ce:	f7ed f90d 	bl	8000aec <__aeabi_dcmplt>
 80138d2:	b120      	cbz	r0, 80138de <__ieee754_sqrt+0x19e>
 80138d4:	1ca0      	adds	r0, r4, #2
 80138d6:	bf08      	it	eq
 80138d8:	3601      	addeq	r6, #1
 80138da:	3402      	adds	r4, #2
 80138dc:	e7df      	b.n	801389e <__ieee754_sqrt+0x15e>
 80138de:	1c63      	adds	r3, r4, #1
 80138e0:	f023 0401 	bic.w	r4, r3, #1
 80138e4:	e7db      	b.n	801389e <__ieee754_sqrt+0x15e>
 80138e6:	bf00      	nop
 80138e8:	7ff00000 	.word	0x7ff00000
 80138ec:	200001f0 	.word	0x200001f0
 80138f0:	200001e8 	.word	0x200001e8

080138f4 <_init>:
 80138f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138f6:	bf00      	nop
 80138f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138fa:	bc08      	pop	{r3}
 80138fc:	469e      	mov	lr, r3
 80138fe:	4770      	bx	lr

08013900 <_fini>:
 8013900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013902:	bf00      	nop
 8013904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013906:	bc08      	pop	{r3}
 8013908:	469e      	mov	lr, r3
 801390a:	4770      	bx	lr
