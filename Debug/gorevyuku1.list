
gorevyuku1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010a0c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  08010bb0  08010bb0  00011bb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011360  08011360  000131f8  2**0
                  CONTENTS
  4 .ARM          00000008  08011360  08011360  00012360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011368  08011368  000131f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011368  08011368  00012368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801136c  0801136c  0001236c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  08011370  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000998  200001f8  08011568  000131f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000b90  08011568  00013b90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000131f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc32  00000000  00000000  00013228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004536  00000000  00000000  0002fe5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  00034390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001321  00000000  00000000  00035c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007ce3  00000000  00000000  00036f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022262  00000000  00000000  0003ec14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7a02  00000000  00000000  00060e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00108878  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000807c  00000000  00000000  001088bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00110938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010b94 	.word	0x08010b94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	08010b94 	.word	0x08010b94

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <SubSys_Actuator_Servo_MoveTo>:
 * 		   The correct duty cycle range is between 2% and 12%.
 *
 * @param *dev, Connect struct parameter htim_X, tim_channel_in as given below
 * @param Angle The desired angle for the motor to turn.
 */
void SubSys_Actuator_Servo_MoveTo(Actuator_Servo_HandleTypeDef *dev, uint16_t Angle){
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	807b      	strh	r3, [r7, #2]

	if(dev == &dev_Servo_Separation){
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a17      	ldr	r2, [pc, #92]	@ (8001060 <SubSys_Actuator_Servo_MoveTo+0x6c>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d110      	bne.n	800102a <SubSys_Actuator_Servo_MoveTo+0x36>
		dev->htim_X->Instance->CCR2 = (((Angle*100)/180)+20);
 8001008:	887b      	ldrh	r3, [r7, #2]
 800100a:	2264      	movs	r2, #100	@ 0x64
 800100c:	fb02 f303 	mul.w	r3, r2, r3
 8001010:	4a14      	ldr	r2, [pc, #80]	@ (8001064 <SubSys_Actuator_Servo_MoveTo+0x70>)
 8001012:	fb82 1203 	smull	r1, r2, r2, r3
 8001016:	441a      	add	r2, r3
 8001018:	11d2      	asrs	r2, r2, #7
 800101a:	17db      	asrs	r3, r3, #31
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	f103 0214 	add.w	r2, r3, #20
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	639a      	str	r2, [r3, #56]	@ 0x38
	}

	if(dev == &dev_Servo_ColorFilter){
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a0e      	ldr	r2, [pc, #56]	@ (8001068 <SubSys_Actuator_Servo_MoveTo+0x74>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d110      	bne.n	8001054 <SubSys_Actuator_Servo_MoveTo+0x60>
		dev->htim_X->Instance->CCR1 = (((Angle*100)/180)+20);
 8001032:	887b      	ldrh	r3, [r7, #2]
 8001034:	2264      	movs	r2, #100	@ 0x64
 8001036:	fb02 f303 	mul.w	r3, r2, r3
 800103a:	4a0a      	ldr	r2, [pc, #40]	@ (8001064 <SubSys_Actuator_Servo_MoveTo+0x70>)
 800103c:	fb82 1203 	smull	r1, r2, r2, r3
 8001040:	441a      	add	r2, r3
 8001042:	11d2      	asrs	r2, r2, #7
 8001044:	17db      	asrs	r3, r3, #31
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	f103 0214 	add.w	r2, r3, #20
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	635a      	str	r2, [r3, #52]	@ 0x34
	}

}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	200009f4 	.word	0x200009f4
 8001064:	b60b60b7 	.word	0xb60b60b7
 8001068:	200009fc 	.word	0x200009fc

0800106c <PassiveBuzz_ON>:
 * @brief : Buzzer is set when the function is called(DutyCycle is configurated by the CCRx REG)
 * @param :  htim_X        : it's set by &htimX. X is the number of timers
 * @param :  PWM_Channel_X :  it's set by TIM_CHANNEL_X . X is the number of timer's channels
 * @retval: None
 */
void PassiveBuzz_ON(TIM_HandleTypeDef *htim_X, uint32_t PWM_Channel_X){
 800106c:	b590      	push	{r4, r7, lr}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]

	switch (PWM_Channel_X){
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	2b0c      	cmp	r3, #12
 800107a:	d875      	bhi.n	8001168 <PassiveBuzz_ON+0xfc>
 800107c:	a201      	add	r2, pc, #4	@ (adr r2, 8001084 <PassiveBuzz_ON+0x18>)
 800107e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001082:	bf00      	nop
 8001084:	080010b9 	.word	0x080010b9
 8001088:	08001169 	.word	0x08001169
 800108c:	08001169 	.word	0x08001169
 8001090:	08001169 	.word	0x08001169
 8001094:	080010e5 	.word	0x080010e5
 8001098:	08001169 	.word	0x08001169
 800109c:	08001169 	.word	0x08001169
 80010a0:	08001169 	.word	0x08001169
 80010a4:	08001111 	.word	0x08001111
 80010a8:	08001169 	.word	0x08001169
 80010ac:	08001169 	.word	0x08001169
 80010b0:	08001169 	.word	0x08001169
 80010b4:	0800113d 	.word	0x0800113d

	case TIM_CHANNEL_1 :
		htim_X->Instance->CCR1 =  0.5 * (htim_X->Instance->ARR);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fa28 	bl	8000514 <__aeabi_ui2d>
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	4b29      	ldr	r3, [pc, #164]	@ (8001170 <PassiveBuzz_ON+0x104>)
 80010ca:	f7ff fa9d 	bl	8000608 <__aeabi_dmul>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4610      	mov	r0, r2
 80010d4:	4619      	mov	r1, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681c      	ldr	r4, [r3, #0]
 80010da:	f7ff fd6d 	bl	8000bb8 <__aeabi_d2uiz>
 80010de:	4603      	mov	r3, r0
 80010e0:	6363      	str	r3, [r4, #52]	@ 0x34
	break;
 80010e2:	e041      	b.n	8001168 <PassiveBuzz_ON+0xfc>

	case TIM_CHANNEL_2 :
		htim_X->Instance->CCR2 =  0.5 * (htim_X->Instance->ARR);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fa12 	bl	8000514 <__aeabi_ui2d>
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001170 <PassiveBuzz_ON+0x104>)
 80010f6:	f7ff fa87 	bl	8000608 <__aeabi_dmul>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681c      	ldr	r4, [r3, #0]
 8001106:	f7ff fd57 	bl	8000bb8 <__aeabi_d2uiz>
 800110a:	4603      	mov	r3, r0
 800110c:	63a3      	str	r3, [r4, #56]	@ 0x38
	break;
 800110e:	e02b      	b.n	8001168 <PassiveBuzz_ON+0xfc>

	case TIM_CHANNEL_3 :
		htim_X->Instance->CCR3 =  0.5 * (htim_X->Instance->ARR);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff f9fc 	bl	8000514 <__aeabi_ui2d>
 800111c:	f04f 0200 	mov.w	r2, #0
 8001120:	4b13      	ldr	r3, [pc, #76]	@ (8001170 <PassiveBuzz_ON+0x104>)
 8001122:	f7ff fa71 	bl	8000608 <__aeabi_dmul>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681c      	ldr	r4, [r3, #0]
 8001132:	f7ff fd41 	bl	8000bb8 <__aeabi_d2uiz>
 8001136:	4603      	mov	r3, r0
 8001138:	63e3      	str	r3, [r4, #60]	@ 0x3c
	break;
 800113a:	e015      	b.n	8001168 <PassiveBuzz_ON+0xfc>

	case TIM_CHANNEL_4 :
		htim_X->Instance->CCR4 =  0.5 * (htim_X->Instance->ARR);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff f9e6 	bl	8000514 <__aeabi_ui2d>
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <PassiveBuzz_ON+0x104>)
 800114e:	f7ff fa5b 	bl	8000608 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681c      	ldr	r4, [r3, #0]
 800115e:	f7ff fd2b 	bl	8000bb8 <__aeabi_d2uiz>
 8001162:	4603      	mov	r3, r0
 8001164:	6423      	str	r3, [r4, #64]	@ 0x40
	break;
 8001166:	bf00      	nop
	}


}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	bd90      	pop	{r4, r7, pc}
 8001170:	3fe00000 	.word	0x3fe00000

08001174 <SubSys_SatelliteMission_Continue>:

#include "SubSys_Payload_FlightStatus.h"


void SubSys_SatelliteMission_Continue(){
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0


	SubSys_Payload_MissionRetryLoop();
 8001178:	f000 f8a4 	bl	80012c4 <SubSys_Payload_MissionRetryLoop>

	/*! Model Satellite is on the ground*/
	if( ((-2 <= MS5611_VertSpeed) && (MS5611_VertSpeed <= 4)) && (SatelliteStatus == ReadyForLaunch) )
 800117c:	4b4a      	ldr	r3, [pc, #296]	@ (80012a8 <SubSys_SatelliteMission_Continue+0x134>)
 800117e:	edd3 7a00 	vldr	s15, [r3]
 8001182:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001186:	eef4 7ac7 	vcmpe.f32	s15, s14
 800118a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118e:	db0f      	blt.n	80011b0 <SubSys_SatelliteMission_Continue+0x3c>
 8001190:	4b45      	ldr	r3, [pc, #276]	@ (80012a8 <SubSys_SatelliteMission_Continue+0x134>)
 8001192:	edd3 7a00 	vldr	s15, [r3]
 8001196:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800119a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800119e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a2:	d805      	bhi.n	80011b0 <SubSys_SatelliteMission_Continue+0x3c>
 80011a4:	4b41      	ldr	r3, [pc, #260]	@ (80012ac <SubSys_SatelliteMission_Continue+0x138>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d101      	bne.n	80011b0 <SubSys_SatelliteMission_Continue+0x3c>
	{
		__NOP();
 80011ac:	bf00      	nop
					PassiveBuzz_ON(&htim3, TIM_CHANNEL_1);		/*! The payload of the satellite has made contact with the ground */
				}

	     }

}
 80011ae:	e078      	b.n	80012a2 <SubSys_SatelliteMission_Continue+0x12e>
		SatelliteStatus = Ascent;
 80011b0:	4b3e      	ldr	r3, [pc, #248]	@ (80012ac <SubSys_SatelliteMission_Continue+0x138>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
				if( ((0 <= MS5611_VertSpeed) && (MS5611_VertSpeed <= 3))  && (SatelliteStatus == Ascent) )	//TODO: Euler angles will be added
 80011b6:	4b3c      	ldr	r3, [pc, #240]	@ (80012a8 <SubSys_SatelliteMission_Continue+0x134>)
 80011b8:	edd3 7a00 	vldr	s15, [r3]
 80011bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c4:	db10      	blt.n	80011e8 <SubSys_SatelliteMission_Continue+0x74>
 80011c6:	4b38      	ldr	r3, [pc, #224]	@ (80012a8 <SubSys_SatelliteMission_Continue+0x134>)
 80011c8:	edd3 7a00 	vldr	s15, [r3]
 80011cc:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80011d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d8:	d806      	bhi.n	80011e8 <SubSys_SatelliteMission_Continue+0x74>
 80011da:	4b34      	ldr	r3, [pc, #208]	@ (80012ac <SubSys_SatelliteMission_Continue+0x138>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d102      	bne.n	80011e8 <SubSys_SatelliteMission_Continue+0x74>
					SatelliteStatus = ModelSatelliteDescent;
 80011e2:	4b32      	ldr	r3, [pc, #200]	@ (80012ac <SubSys_SatelliteMission_Continue+0x138>)
 80011e4:	2202      	movs	r2, #2
 80011e6:	701a      	strb	r2, [r3, #0]
				if( ((-14 <= MS5611_VertSpeed) && (MS5611_VertSpeed <= -12)) && (SatelliteStatus == ModelSatelliteDescent) )
 80011e8:	4b2f      	ldr	r3, [pc, #188]	@ (80012a8 <SubSys_SatelliteMission_Continue+0x134>)
 80011ea:	edd3 7a00 	vldr	s15, [r3]
 80011ee:	eeba 7a0c 	vmov.f32	s14, #172	@ 0xc1600000 -14.0
 80011f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fa:	db13      	blt.n	8001224 <SubSys_SatelliteMission_Continue+0xb0>
 80011fc:	4b2a      	ldr	r3, [pc, #168]	@ (80012a8 <SubSys_SatelliteMission_Continue+0x134>)
 80011fe:	edd3 7a00 	vldr	s15, [r3]
 8001202:	eeba 7a08 	vmov.f32	s14, #168	@ 0xc1400000 -12.0
 8001206:	eef4 7ac7 	vcmpe.f32	s15, s14
 800120a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120e:	d809      	bhi.n	8001224 <SubSys_SatelliteMission_Continue+0xb0>
 8001210:	4b26      	ldr	r3, [pc, #152]	@ (80012ac <SubSys_SatelliteMission_Continue+0x138>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b02      	cmp	r3, #2
 8001216:	d105      	bne.n	8001224 <SubSys_SatelliteMission_Continue+0xb0>
					SatelliteStatus = Separation;
 8001218:	4b24      	ldr	r3, [pc, #144]	@ (80012ac <SubSys_SatelliteMission_Continue+0x138>)
 800121a:	2203      	movs	r2, #3
 800121c:	701a      	strb	r2, [r3, #0]
					AutonomoSeparationStatus = Permission_OK;
 800121e:	4b24      	ldr	r3, [pc, #144]	@ (80012b0 <SubSys_SatelliteMission_Continue+0x13c>)
 8001220:	2201      	movs	r2, #1
 8001222:	701a      	strb	r2, [r3, #0]
				if( ((390 <= MS5611_Altitude) && (MS5611_Altitude <= 410)) && (AutonomoSeparationStatus = Permission_OK) && (SatelliteStatus == Separation) )
 8001224:	4b23      	ldr	r3, [pc, #140]	@ (80012b4 <SubSys_SatelliteMission_Continue+0x140>)
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80012b8 <SubSys_SatelliteMission_Continue+0x144>
 800122e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001236:	db15      	blt.n	8001264 <SubSys_SatelliteMission_Continue+0xf0>
 8001238:	4b1e      	ldr	r3, [pc, #120]	@ (80012b4 <SubSys_SatelliteMission_Continue+0x140>)
 800123a:	edd3 7a00 	vldr	s15, [r3]
 800123e:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80012bc <SubSys_SatelliteMission_Continue+0x148>
 8001242:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124a:	d80b      	bhi.n	8001264 <SubSys_SatelliteMission_Continue+0xf0>
 800124c:	4b18      	ldr	r3, [pc, #96]	@ (80012b0 <SubSys_SatelliteMission_Continue+0x13c>)
 800124e:	2201      	movs	r2, #1
 8001250:	701a      	strb	r2, [r3, #0]
 8001252:	4b16      	ldr	r3, [pc, #88]	@ (80012ac <SubSys_SatelliteMission_Continue+0x138>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b03      	cmp	r3, #3
 8001258:	d104      	bne.n	8001264 <SubSys_SatelliteMission_Continue+0xf0>
					SatelliteStatus = PayloadDescent;
 800125a:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <SubSys_SatelliteMission_Continue+0x138>)
 800125c:	2204      	movs	r2, #4
 800125e:	701a      	strb	r2, [r3, #0]
					SubSys_SeparationMechanism_UnLock_PayloadFromCarrier();
 8001260:	f001 fa0a 	bl	8002678 <SubSys_SeparationMechanism_UnLock_PayloadFromCarrier>
				if( ((0 <= MS5611_Altitude) && (MS5611_Altitude <= 2)) && (SatelliteStatus == PayloadDescent) )
 8001264:	4b13      	ldr	r3, [pc, #76]	@ (80012b4 <SubSys_SatelliteMission_Continue+0x140>)
 8001266:	edd3 7a00 	vldr	s15, [r3]
 800126a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800126e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001272:	da00      	bge.n	8001276 <SubSys_SatelliteMission_Continue+0x102>
}
 8001274:	e015      	b.n	80012a2 <SubSys_SatelliteMission_Continue+0x12e>
				if( ((0 <= MS5611_Altitude) && (MS5611_Altitude <= 2)) && (SatelliteStatus == PayloadDescent) )
 8001276:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <SubSys_SatelliteMission_Continue+0x140>)
 8001278:	edd3 7a00 	vldr	s15, [r3]
 800127c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001280:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001288:	d900      	bls.n	800128c <SubSys_SatelliteMission_Continue+0x118>
}
 800128a:	e00a      	b.n	80012a2 <SubSys_SatelliteMission_Continue+0x12e>
				if( ((0 <= MS5611_Altitude) && (MS5611_Altitude <= 2)) && (SatelliteStatus == PayloadDescent) )
 800128c:	4b07      	ldr	r3, [pc, #28]	@ (80012ac <SubSys_SatelliteMission_Continue+0x138>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b04      	cmp	r3, #4
 8001292:	d106      	bne.n	80012a2 <SubSys_SatelliteMission_Continue+0x12e>
					SatelliteStatus = Recovery;
 8001294:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <SubSys_SatelliteMission_Continue+0x138>)
 8001296:	2205      	movs	r2, #5
 8001298:	701a      	strb	r2, [r3, #0]
					PassiveBuzz_ON(&htim3, TIM_CHANNEL_1);		/*! The payload of the satellite has made contact with the ground */
 800129a:	2100      	movs	r1, #0
 800129c:	4808      	ldr	r0, [pc, #32]	@ (80012c0 <SubSys_SatelliteMission_Continue+0x14c>)
 800129e:	f7ff fee5 	bl	800106c <PassiveBuzz_ON>
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	2000079c 	.word	0x2000079c
 80012ac:	20000a04 	.word	0x20000a04
 80012b0:	20000a05 	.word	0x20000a05
 80012b4:	20000798 	.word	0x20000798
 80012b8:	43c30000 	.word	0x43c30000
 80012bc:	43cd0000 	.word	0x43cd0000
 80012c0:	20000650 	.word	0x20000650

080012c4 <SubSys_Payload_MissionRetryLoop>:

#include "SubSys_Payload_PeriodicReattempt.h"

void SubSys_Payload_MissionRetryLoop(){
 80012c4:	b598      	push	{r3, r4, r7, lr}
 80012c6:	af00      	add	r7, sp, #0

	/*! At the beginning of each loop, the system retrieves the last recorded milliseconds */
	SystemTick = HAL_GetTick();
 80012c8:	f002 fda0 	bl	8003e0c <HAL_GetTick>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001308 <SubSys_Payload_MissionRetryLoop+0x44>)
 80012d0:	6013      	str	r3, [r2, #0]
	* (P) = Pressure
	* (G) = G force
	* (V) = Vertical Speed
	* (H) = Vertical Height
	**/
	MS5611_Read_ActVal(&MS5611);
 80012d2:	480e      	ldr	r0, [pc, #56]	@ (800130c <SubSys_Payload_MissionRetryLoop+0x48>)
 80012d4:	f001 f8c8 	bl	8002468 <MS5611_Read_ActVal>

	/*! Get ARAS status data and save value into the "SatelliteErrorCode"*/
	//ARAS_CheckSystem();

	/*! Get the Roll, Pitch, and Yaw values from the IMU sensor variables. */
	IMU_GetEulerVector();
 80012d8:	f000 fbdc 	bl	8001a94 <IMU_GetEulerVector>
	//SD_Write(SdDatasBuf, "SAT_PAY/STM32.TXT");

	/*! Transfer all necessary datas from Carrier to Payload of Satellite*/
	//SubSys_WirelessCom_Telemetry_Transfer_From_To(Sat_Payload, GroundStation, &dev_WirelessComApp);

	NumberOfTelePacket++;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <SubSys_Payload_MissionRetryLoop+0x4c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	3301      	adds	r3, #1
 80012e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001310 <SubSys_Payload_MissionRetryLoop+0x4c>)
 80012e4:	6013      	str	r3, [r2, #0]

	/*! The system time is retrieved again and the loop waits until the elapsed time reaches 1000 milliseconds*/
	HAL_Delay(abs(1000 - (HAL_GetTick() - SystemTick)));
 80012e6:	4b08      	ldr	r3, [pc, #32]	@ (8001308 <SubSys_Payload_MissionRetryLoop+0x44>)
 80012e8:	681c      	ldr	r4, [r3, #0]
 80012ea:	f002 fd8f 	bl	8003e0c <HAL_GetTick>
 80012ee:	4603      	mov	r3, r0
 80012f0:	1ae3      	subs	r3, r4, r3
 80012f2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	bfb8      	it	lt
 80012fa:	425b      	neglt	r3, r3
 80012fc:	4618      	mov	r0, r3
 80012fe:	f002 fd91 	bl	8003e24 <HAL_Delay>

}
 8001302:	bf00      	nop
 8001304:	bd98      	pop	{r3, r4, r7, pc}
 8001306:	bf00      	nop
 8001308:	20000a08 	.word	0x20000a08
 800130c:	20000728 	.word	0x20000728
 8001310:	20000a0c 	.word	0x20000a0c

08001314 <GPS_UART_CallBack>:
{
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
}


void GPS_UART_CallBack(){
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8001318:	4b16      	ldr	r3, [pc, #88]	@ (8001374 <GPS_UART_CallBack+0x60>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b0a      	cmp	r3, #10
 800131e:	d010      	beq.n	8001342 <GPS_UART_CallBack+0x2e>
 8001320:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <GPS_UART_CallBack+0x64>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b25b      	sxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	db0b      	blt.n	8001342 <GPS_UART_CallBack+0x2e>
		rx_buffer[rx_index++] = rx_data;
 800132a:	4b13      	ldr	r3, [pc, #76]	@ (8001378 <GPS_UART_CallBack+0x64>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	1c5a      	adds	r2, r3, #1
 8001330:	b2d1      	uxtb	r1, r2
 8001332:	4a11      	ldr	r2, [pc, #68]	@ (8001378 <GPS_UART_CallBack+0x64>)
 8001334:	7011      	strb	r1, [r2, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <GPS_UART_CallBack+0x60>)
 800133a:	7819      	ldrb	r1, [r3, #0]
 800133c:	4b0f      	ldr	r3, [pc, #60]	@ (800137c <GPS_UART_CallBack+0x68>)
 800133e:	5499      	strb	r1, [r3, r2]
 8001340:	e010      	b.n	8001364 <GPS_UART_CallBack+0x50>
	} else {

		if(GPS_validate((char*) rx_buffer))
 8001342:	480e      	ldr	r0, [pc, #56]	@ (800137c <GPS_UART_CallBack+0x68>)
 8001344:	f000 f81e 	bl	8001384 <GPS_validate>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d002      	beq.n	8001354 <GPS_UART_CallBack+0x40>
			GPS_parse((char*) rx_buffer);
 800134e:	480b      	ldr	r0, [pc, #44]	@ (800137c <GPS_UART_CallBack+0x68>)
 8001350:	f000 f87a 	bl	8001448 <GPS_parse>
		rx_index = 0;
 8001354:	4b08      	ldr	r3, [pc, #32]	@ (8001378 <GPS_UART_CallBack+0x64>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 800135a:	2280      	movs	r2, #128	@ 0x80
 800135c:	2100      	movs	r1, #0
 800135e:	4807      	ldr	r0, [pc, #28]	@ (800137c <GPS_UART_CallBack+0x68>)
 8001360:	f00b fb5e 	bl	800ca20 <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001364:	2201      	movs	r2, #1
 8001366:	4903      	ldr	r1, [pc, #12]	@ (8001374 <GPS_UART_CallBack+0x60>)
 8001368:	4805      	ldr	r0, [pc, #20]	@ (8001380 <GPS_UART_CallBack+0x6c>)
 800136a:	f007 fd4d 	bl	8008e08 <HAL_UART_Receive_IT>
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000214 	.word	0x20000214
 8001378:	20000298 	.word	0x20000298
 800137c:	20000218 	.word	0x20000218
 8001380:	20000698 	.word	0x20000698

08001384 <GPS_validate>:


int GPS_validate(char *nmeastr){
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8001390:	2300      	movs	r3, #0
 8001392:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b24      	cmp	r3, #36	@ 0x24
 800139e:	d103      	bne.n	80013a8 <GPS_validate+0x24>
        i++;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	3301      	adds	r3, #1
 80013a4:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80013a6:	e00c      	b.n	80013c2 <GPS_validate+0x3e>
        return 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	e047      	b.n	800143c <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	461a      	mov	r2, r3
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4053      	eors	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        i++;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	3301      	adds	r3, #1
 80013c0:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d008      	beq.n	80013e0 <GPS_validate+0x5c>
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	4413      	add	r3, r2
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80013d8:	d002      	beq.n	80013e0 <GPS_validate+0x5c>
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	2b4a      	cmp	r3, #74	@ 0x4a
 80013de:	dde5      	ble.n	80013ac <GPS_validate+0x28>
    }

    if(i >= 75){
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	2b4a      	cmp	r3, #74	@ 0x4a
 80013e4:	dd01      	ble.n	80013ea <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80013e6:	2300      	movs	r3, #0
 80013e8:	e028      	b.n	800143c <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	4413      	add	r3, r2
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80013f4:	d119      	bne.n	800142a <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	3301      	adds	r3, #1
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	3302      	adds	r3, #2
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8001412:	f107 0308 	add.w	r3, r7, #8
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	490a      	ldr	r1, [pc, #40]	@ (8001444 <GPS_validate+0xc0>)
 800141a:	4618      	mov	r0, r3
 800141c:	f00b f9dc 	bl	800c7d8 <siprintf>
    return((checkcalcstr[0] == check[0])
 8001420:	7a3a      	ldrb	r2, [r7, #8]
 8001422:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001424:	429a      	cmp	r2, r3
 8001426:	d108      	bne.n	800143a <GPS_validate+0xb6>
 8001428:	e001      	b.n	800142e <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 800142a:	2300      	movs	r3, #0
 800142c:	e006      	b.n	800143c <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800142e:	7a7a      	ldrb	r2, [r7, #9]
 8001430:	7b7b      	ldrb	r3, [r7, #13]
 8001432:	429a      	cmp	r2, r3
 8001434:	d101      	bne.n	800143a <GPS_validate+0xb6>
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <GPS_validate+0xb8>
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	08010bb0 	.word	0x08010bb0

08001448 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	@ 0x28
 800144c:	af08      	add	r7, sp, #32
 800144e:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8001450:	2206      	movs	r2, #6
 8001452:	4950      	ldr	r1, [pc, #320]	@ (8001594 <GPS_parse+0x14c>)
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f00b faf8 	bl	800ca4a <strncmp>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d143      	bne.n	80014e8 <GPS_parse+0xa0>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8001460:	4b4d      	ldr	r3, [pc, #308]	@ (8001598 <GPS_parse+0x150>)
 8001462:	9307      	str	r3, [sp, #28]
 8001464:	4b4d      	ldr	r3, [pc, #308]	@ (800159c <GPS_parse+0x154>)
 8001466:	9306      	str	r3, [sp, #24]
 8001468:	4b4d      	ldr	r3, [pc, #308]	@ (80015a0 <GPS_parse+0x158>)
 800146a:	9305      	str	r3, [sp, #20]
 800146c:	4b4d      	ldr	r3, [pc, #308]	@ (80015a4 <GPS_parse+0x15c>)
 800146e:	9304      	str	r3, [sp, #16]
 8001470:	4b4d      	ldr	r3, [pc, #308]	@ (80015a8 <GPS_parse+0x160>)
 8001472:	9303      	str	r3, [sp, #12]
 8001474:	4b4d      	ldr	r3, [pc, #308]	@ (80015ac <GPS_parse+0x164>)
 8001476:	9302      	str	r3, [sp, #8]
 8001478:	4b4d      	ldr	r3, [pc, #308]	@ (80015b0 <GPS_parse+0x168>)
 800147a:	9301      	str	r3, [sp, #4]
 800147c:	4b4d      	ldr	r3, [pc, #308]	@ (80015b4 <GPS_parse+0x16c>)
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	4b4d      	ldr	r3, [pc, #308]	@ (80015b8 <GPS_parse+0x170>)
 8001482:	4a4e      	ldr	r2, [pc, #312]	@ (80015bc <GPS_parse+0x174>)
 8001484:	494e      	ldr	r1, [pc, #312]	@ (80015c0 <GPS_parse+0x178>)
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f00b f9c6 	bl	800c818 <siscanf>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	dd7c      	ble.n	800158c <GPS_parse+0x144>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001492:	4b4c      	ldr	r3, [pc, #304]	@ (80015c4 <GPS_parse+0x17c>)
 8001494:	edd3 7a04 	vldr	s15, [r3, #16]
 8001498:	4b4a      	ldr	r3, [pc, #296]	@ (80015c4 <GPS_parse+0x17c>)
 800149a:	7e1b      	ldrb	r3, [r3, #24]
 800149c:	4618      	mov	r0, r3
 800149e:	eeb0 0a67 	vmov.f32	s0, s15
 80014a2:	f000 f8b9 	bl	8001618 <GPS_nmea_to_dec>
 80014a6:	eef0 7a40 	vmov.f32	s15, s0
 80014aa:	4b46      	ldr	r3, [pc, #280]	@ (80015c4 <GPS_parse+0x17c>)
 80014ac:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80014b0:	4b44      	ldr	r3, [pc, #272]	@ (80015c4 <GPS_parse+0x17c>)
 80014b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80014b6:	4b43      	ldr	r3, [pc, #268]	@ (80015c4 <GPS_parse+0x17c>)
 80014b8:	7e5b      	ldrb	r3, [r3, #25]
 80014ba:	4618      	mov	r0, r3
 80014bc:	eeb0 0a67 	vmov.f32	s0, s15
 80014c0:	f000 f8aa 	bl	8001618 <GPS_nmea_to_dec>
 80014c4:	eef0 7a40 	vmov.f32	s15, s0
 80014c8:	4b3e      	ldr	r3, [pc, #248]	@ (80015c4 <GPS_parse+0x17c>)
 80014ca:	edc3 7a00 	vstr	s15, [r3]

    		GPS_Latitude = GPS.dec_latitude;
 80014ce:	4b3d      	ldr	r3, [pc, #244]	@ (80015c4 <GPS_parse+0x17c>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	4a3d      	ldr	r2, [pc, #244]	@ (80015c8 <GPS_parse+0x180>)
 80014d4:	6013      	str	r3, [r2, #0]
    		GPS_Longitude = GPS.dec_longitude;
 80014d6:	4b3b      	ldr	r3, [pc, #236]	@ (80015c4 <GPS_parse+0x17c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a3c      	ldr	r2, [pc, #240]	@ (80015cc <GPS_parse+0x184>)
 80014dc:	6013      	str	r3, [r2, #0]
			GPS_Altitude = GPS.msl_altitude;
 80014de:	4b39      	ldr	r3, [pc, #228]	@ (80015c4 <GPS_parse+0x17c>)
 80014e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e2:	4a3b      	ldr	r2, [pc, #236]	@ (80015d0 <GPS_parse+0x188>)
 80014e4:	6013      	str	r3, [r2, #0]
    		return;
 80014e6:	e051      	b.n	800158c <GPS_parse+0x144>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 80014e8:	2206      	movs	r2, #6
 80014ea:	493a      	ldr	r1, [pc, #232]	@ (80015d4 <GPS_parse+0x18c>)
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f00b faac 	bl	800ca4a <strncmp>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d114      	bne.n	8001522 <GPS_parse+0xda>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 80014f8:	4b37      	ldr	r3, [pc, #220]	@ (80015d8 <GPS_parse+0x190>)
 80014fa:	9305      	str	r3, [sp, #20]
 80014fc:	4b37      	ldr	r3, [pc, #220]	@ (80015dc <GPS_parse+0x194>)
 80014fe:	9304      	str	r3, [sp, #16]
 8001500:	4b37      	ldr	r3, [pc, #220]	@ (80015e0 <GPS_parse+0x198>)
 8001502:	9303      	str	r3, [sp, #12]
 8001504:	4b29      	ldr	r3, [pc, #164]	@ (80015ac <GPS_parse+0x164>)
 8001506:	9302      	str	r3, [sp, #8]
 8001508:	4b29      	ldr	r3, [pc, #164]	@ (80015b0 <GPS_parse+0x168>)
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	4b29      	ldr	r3, [pc, #164]	@ (80015b4 <GPS_parse+0x16c>)
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	4b29      	ldr	r3, [pc, #164]	@ (80015b8 <GPS_parse+0x170>)
 8001512:	4a2a      	ldr	r2, [pc, #168]	@ (80015bc <GPS_parse+0x174>)
 8001514:	4933      	ldr	r1, [pc, #204]	@ (80015e4 <GPS_parse+0x19c>)
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f00b f97e 	bl	800c818 <siscanf>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	e034      	b.n	800158c <GPS_parse+0x144>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 8001522:	2206      	movs	r2, #6
 8001524:	4930      	ldr	r1, [pc, #192]	@ (80015e8 <GPS_parse+0x1a0>)
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f00b fa8f 	bl	800ca4a <strncmp>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d110      	bne.n	8001554 <GPS_parse+0x10c>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 8001532:	4b2e      	ldr	r3, [pc, #184]	@ (80015ec <GPS_parse+0x1a4>)
 8001534:	9303      	str	r3, [sp, #12]
 8001536:	4b21      	ldr	r3, [pc, #132]	@ (80015bc <GPS_parse+0x174>)
 8001538:	9302      	str	r3, [sp, #8]
 800153a:	4b1c      	ldr	r3, [pc, #112]	@ (80015ac <GPS_parse+0x164>)
 800153c:	9301      	str	r3, [sp, #4]
 800153e:	4b1c      	ldr	r3, [pc, #112]	@ (80015b0 <GPS_parse+0x168>)
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	4b1c      	ldr	r3, [pc, #112]	@ (80015b4 <GPS_parse+0x16c>)
 8001544:	4a1c      	ldr	r2, [pc, #112]	@ (80015b8 <GPS_parse+0x170>)
 8001546:	492a      	ldr	r1, [pc, #168]	@ (80015f0 <GPS_parse+0x1a8>)
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f00b f965 	bl	800c818 <siscanf>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	e01b      	b.n	800158c <GPS_parse+0x144>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 8001554:	2206      	movs	r2, #6
 8001556:	4927      	ldr	r1, [pc, #156]	@ (80015f4 <GPS_parse+0x1ac>)
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f00b fa76 	bl	800ca4a <strncmp>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d113      	bne.n	800158c <GPS_parse+0x144>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001564:	4b24      	ldr	r3, [pc, #144]	@ (80015f8 <GPS_parse+0x1b0>)
 8001566:	9305      	str	r3, [sp, #20]
 8001568:	4b24      	ldr	r3, [pc, #144]	@ (80015fc <GPS_parse+0x1b4>)
 800156a:	9304      	str	r3, [sp, #16]
 800156c:	4b24      	ldr	r3, [pc, #144]	@ (8001600 <GPS_parse+0x1b8>)
 800156e:	9303      	str	r3, [sp, #12]
 8001570:	4b1b      	ldr	r3, [pc, #108]	@ (80015e0 <GPS_parse+0x198>)
 8001572:	9302      	str	r3, [sp, #8]
 8001574:	4b23      	ldr	r3, [pc, #140]	@ (8001604 <GPS_parse+0x1bc>)
 8001576:	9301      	str	r3, [sp, #4]
 8001578:	4b23      	ldr	r3, [pc, #140]	@ (8001608 <GPS_parse+0x1c0>)
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	4b23      	ldr	r3, [pc, #140]	@ (800160c <GPS_parse+0x1c4>)
 800157e:	4a24      	ldr	r2, [pc, #144]	@ (8001610 <GPS_parse+0x1c8>)
 8001580:	4924      	ldr	r1, [pc, #144]	@ (8001614 <GPS_parse+0x1cc>)
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f00b f948 	bl	800c818 <siscanf>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
            return;
    }
}
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	08010bb8 	.word	0x08010bb8
 8001598:	200002c8 	.word	0x200002c8
 800159c:	200002c4 	.word	0x200002c4
 80015a0:	200002c0 	.word	0x200002c0
 80015a4:	200002bc 	.word	0x200002bc
 80015a8:	200002b8 	.word	0x200002b8
 80015ac:	200002b5 	.word	0x200002b5
 80015b0:	200002a8 	.word	0x200002a8
 80015b4:	200002b4 	.word	0x200002b4
 80015b8:	200002ac 	.word	0x200002ac
 80015bc:	200002b0 	.word	0x200002b0
 80015c0:	08010bc0 	.word	0x08010bc0
 80015c4:	2000029c 	.word	0x2000029c
 80015c8:	200007b4 	.word	0x200007b4
 80015cc:	200007b0 	.word	0x200007b0
 80015d0:	200007ac 	.word	0x200007ac
 80015d4:	08010be8 	.word	0x08010be8
 80015d8:	200002d4 	.word	0x200002d4
 80015dc:	200002d0 	.word	0x200002d0
 80015e0:	200002cc 	.word	0x200002cc
 80015e4:	08010bf0 	.word	0x08010bf0
 80015e8:	08010c10 	.word	0x08010c10
 80015ec:	200002d8 	.word	0x200002d8
 80015f0:	08010c18 	.word	0x08010c18
 80015f4:	08010c34 	.word	0x08010c34
 80015f8:	200002f0 	.word	0x200002f0
 80015fc:	200002ec 	.word	0x200002ec
 8001600:	200002e9 	.word	0x200002e9
 8001604:	200002e8 	.word	0x200002e8
 8001608:	200002e4 	.word	0x200002e4
 800160c:	200002e0 	.word	0x200002e0
 8001610:	200002dc 	.word	0x200002dc
 8001614:	08010c3c 	.word	0x08010c3c

08001618 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001618:	b480      	push	{r7}
 800161a:	b087      	sub	sp, #28
 800161c:	af00      	add	r7, sp, #0
 800161e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001622:	4603      	mov	r3, r0
 8001624:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8001626:	ed97 7a01 	vldr	s14, [r7, #4]
 800162a:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80016ac <GPS_nmea_to_dec+0x94>
 800162e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001632:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001636:	ee17 3a90 	vmov	r3, s15
 800163a:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	2264      	movs	r2, #100	@ 0x64
 8001640:	fb02 f303 	mul.w	r3, r2, r3
 8001644:	ee07 3a90 	vmov	s15, r3
 8001648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800164c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001650:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001654:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8001658:	ed97 7a03 	vldr	s14, [r7, #12]
 800165c:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80016b0 <GPS_nmea_to_dec+0x98>
 8001660:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001664:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	ee07 3a90 	vmov	s15, r3
 800166e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001672:	ed97 7a02 	vldr	s14, [r7, #8]
 8001676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800167a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 800167e:	78fb      	ldrb	r3, [r7, #3]
 8001680:	2b53      	cmp	r3, #83	@ 0x53
 8001682:	d002      	beq.n	800168a <GPS_nmea_to_dec+0x72>
 8001684:	78fb      	ldrb	r3, [r7, #3]
 8001686:	2b57      	cmp	r3, #87	@ 0x57
 8001688:	d105      	bne.n	8001696 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 800168a:	edd7 7a05 	vldr	s15, [r7, #20]
 800168e:	eef1 7a67 	vneg.f32	s15, s15
 8001692:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	ee07 3a90 	vmov	s15, r3
}
 800169c:	eeb0 0a67 	vmov.f32	s0, s15
 80016a0:	371c      	adds	r7, #28
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	42c80000 	.word	0x42c80000
 80016b0:	42700000 	.word	0x42700000

080016b4 <bno055_setPage>:
extern 	bno055_vector_t vectorIMU;
extern float euler_roll;
extern float euler_pitch;
extern float euler_yaw;

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	4619      	mov	r1, r3
 80016c2:	2007      	movs	r0, #7
 80016c4:	f001 f92e 	bl	8002924 <bno055_writeData>
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	4619      	mov	r1, r3
 80016de:	203d      	movs	r0, #61	@ 0x3d
 80016e0:	f001 f920 	bl	8002924 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d103      	bne.n	80016f2 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 80016ea:	2013      	movs	r0, #19
 80016ec:	f001 f90e 	bl	800290c <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 80016f0:	e002      	b.n	80016f8 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 80016f2:	2007      	movs	r0, #7
 80016f4:	f001 f90a 	bl	800290c <bno055_delay>
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001704:	2000      	movs	r0, #0
 8001706:	f7ff ffe3 	bl	80016d0 <bno055_setOperationMode>
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}

0800170e <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800170e:	b580      	push	{r7, lr}
 8001710:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001712:	200c      	movs	r0, #12
 8001714:	f7ff ffdc 	bl	80016d0 <bno055_setOperationMode>
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}

0800171c <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8001720:	2120      	movs	r1, #32
 8001722:	203f      	movs	r0, #63	@ 0x3f
 8001724:	f001 f8fe 	bl	8002924 <bno055_writeData>
  bno055_delay(700);
 8001728:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800172c:	f001 f8ee 	bl	800290c <bno055_delay>
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}

08001734 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
  bno055_reset();
 800173a:	f7ff ffef 	bl	800171c <bno055_reset>

  uint8_t id = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8001742:	1dfb      	adds	r3, r7, #7
 8001744:	2201      	movs	r2, #1
 8001746:	4619      	mov	r1, r3
 8001748:	2000      	movs	r0, #0
 800174a:	f001 f9d7 	bl	8002afc <bno055_readData>
  if (id != BNO055_ID) {
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	2ba0      	cmp	r3, #160	@ 0xa0
 8001752:	d004      	beq.n	800175e <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	4619      	mov	r1, r3
 8001758:	4809      	ldr	r0, [pc, #36]	@ (8001780 <bno055_setup+0x4c>)
 800175a:	f00a ffcd 	bl	800c6f8 <iprintf>
  }
  bno055_setPage(0);
 800175e:	2000      	movs	r0, #0
 8001760:	f7ff ffa8 	bl	80016b4 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8001764:	2100      	movs	r1, #0
 8001766:	203f      	movs	r0, #63	@ 0x3f
 8001768:	f001 f8dc 	bl	8002924 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 800176c:	f7ff ffc8 	bl	8001700 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001770:	200a      	movs	r0, #10
 8001772:	f001 f8cb 	bl	800290c <bno055_delay>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	08010c5c 	.word	0x08010c5c

08001784 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8001784:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001788:	b09e      	sub	sp, #120	@ 0x78
 800178a:	af00      	add	r7, sp, #0
 800178c:	4603      	mov	r3, r0
 800178e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 8001792:	2000      	movs	r0, #0
 8001794:	f7ff ff8e 	bl	80016b4 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001798:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800179c:	2b20      	cmp	r3, #32
 800179e:	d108      	bne.n	80017b2 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 80017a0:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80017a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017a8:	2208      	movs	r2, #8
 80017aa:	4618      	mov	r0, r3
 80017ac:	f001 f9a6 	bl	8002afc <bno055_readData>
 80017b0:	e007      	b.n	80017c2 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 80017b2:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80017b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017ba:	2206      	movs	r2, #6
 80017bc:	4618      	mov	r0, r3
 80017be:	f001 f99d 	bl	8002afc <bno055_readData>

  double scale = 1;
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	4b8b      	ldr	r3, [pc, #556]	@ (80019f4 <bno055_getVector+0x270>)
 80017c8:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 80017cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017d0:	2b0e      	cmp	r3, #14
 80017d2:	d109      	bne.n	80017e8 <bno055_getVector+0x64>
    scale = magScale;
 80017d4:	4b88      	ldr	r3, [pc, #544]	@ (80019f8 <bno055_getVector+0x274>)
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe fe9b 	bl	8000514 <__aeabi_ui2d>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 80017e6:	e03e      	b.n	8001866 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 80017e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d007      	beq.n	8001800 <bno055_getVector+0x7c>
 80017f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017f4:	2b28      	cmp	r3, #40	@ 0x28
 80017f6:	d003      	beq.n	8001800 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 80017f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80017fe:	d109      	bne.n	8001814 <bno055_getVector+0x90>
    scale = accelScale;
 8001800:	4b7e      	ldr	r3, [pc, #504]	@ (80019fc <bno055_getVector+0x278>)
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fe85 	bl	8000514 <__aeabi_ui2d>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001812:	e028      	b.n	8001866 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001814:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001818:	2b14      	cmp	r3, #20
 800181a:	d109      	bne.n	8001830 <bno055_getVector+0xac>
    scale = angularRateScale;
 800181c:	4b78      	ldr	r3, [pc, #480]	@ (8001a00 <bno055_getVector+0x27c>)
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fe77 	bl	8000514 <__aeabi_ui2d>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 800182e:	e01a      	b.n	8001866 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001830:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001834:	2b1a      	cmp	r3, #26
 8001836:	d109      	bne.n	800184c <bno055_getVector+0xc8>
    scale = eulerScale;
 8001838:	4b72      	ldr	r3, [pc, #456]	@ (8001a04 <bno055_getVector+0x280>)
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe fe69 	bl	8000514 <__aeabi_ui2d>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 800184a:	e00c      	b.n	8001866 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 800184c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001850:	2b20      	cmp	r3, #32
 8001852:	d108      	bne.n	8001866 <bno055_getVector+0xe2>
    scale = quaScale;
 8001854:	4b6c      	ldr	r3, [pc, #432]	@ (8001a08 <bno055_getVector+0x284>)
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fe5b 	bl	8000514 <__aeabi_ui2d>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8001866:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800186a:	2220      	movs	r2, #32
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f00b f8d6 	bl	800ca20 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001874:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001878:	2b20      	cmp	r3, #32
 800187a:	d150      	bne.n	800191e <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800187c:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001880:	021b      	lsls	r3, r3, #8
 8001882:	b21a      	sxth	r2, r3
 8001884:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001888:	b21b      	sxth	r3, r3
 800188a:	4313      	orrs	r3, r2
 800188c:	b21b      	sxth	r3, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fe50 	bl	8000534 <__aeabi_i2d>
 8001894:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001898:	f7fe ffe0 	bl	800085c <__aeabi_ddiv>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80018a4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80018a8:	021b      	lsls	r3, r3, #8
 80018aa:	b21a      	sxth	r2, r3
 80018ac:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80018b0:	b21b      	sxth	r3, r3
 80018b2:	4313      	orrs	r3, r2
 80018b4:	b21b      	sxth	r3, r3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fe3c 	bl	8000534 <__aeabi_i2d>
 80018bc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80018c0:	f7fe ffcc 	bl	800085c <__aeabi_ddiv>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80018cc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	b21a      	sxth	r2, r3
 80018d4:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80018d8:	b21b      	sxth	r3, r3
 80018da:	4313      	orrs	r3, r2
 80018dc:	b21b      	sxth	r3, r3
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fe28 	bl	8000534 <__aeabi_i2d>
 80018e4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80018e8:	f7fe ffb8 	bl	800085c <__aeabi_ddiv>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80018f4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80018f8:	021b      	lsls	r3, r3, #8
 80018fa:	b21a      	sxth	r2, r3
 80018fc:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001900:	b21b      	sxth	r3, r3
 8001902:	4313      	orrs	r3, r2
 8001904:	b21b      	sxth	r3, r3
 8001906:	4618      	mov	r0, r3
 8001908:	f7fe fe14 	bl	8000534 <__aeabi_i2d>
 800190c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001910:	f7fe ffa4 	bl	800085c <__aeabi_ddiv>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 800191c:	e03b      	b.n	8001996 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800191e:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001922:	021b      	lsls	r3, r3, #8
 8001924:	b21a      	sxth	r2, r3
 8001926:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800192a:	b21b      	sxth	r3, r3
 800192c:	4313      	orrs	r3, r2
 800192e:	b21b      	sxth	r3, r3
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe fdff 	bl	8000534 <__aeabi_i2d>
 8001936:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800193a:	f7fe ff8f 	bl	800085c <__aeabi_ddiv>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001946:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800194a:	021b      	lsls	r3, r3, #8
 800194c:	b21a      	sxth	r2, r3
 800194e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001952:	b21b      	sxth	r3, r3
 8001954:	4313      	orrs	r3, r2
 8001956:	b21b      	sxth	r3, r3
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fdeb 	bl	8000534 <__aeabi_i2d>
 800195e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001962:	f7fe ff7b 	bl	800085c <__aeabi_ddiv>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800196e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001972:	021b      	lsls	r3, r3, #8
 8001974:	b21a      	sxth	r2, r3
 8001976:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800197a:	b21b      	sxth	r3, r3
 800197c:	4313      	orrs	r3, r2
 800197e:	b21b      	sxth	r3, r3
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fdd7 	bl	8000534 <__aeabi_i2d>
 8001986:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800198a:	f7fe ff67 	bl	800085c <__aeabi_ddiv>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 8001996:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 800199a:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 800199e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80019a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80019aa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80019ae:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80019b2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80019b6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80019ba:	ec49 8b14 	vmov	d4, r8, r9
 80019be:	ec45 4b15 	vmov	d5, r4, r5
 80019c2:	ec41 0b16 	vmov	d6, r0, r1
 80019c6:	ec43 2b17 	vmov	d7, r2, r3
}
 80019ca:	eeb0 0a44 	vmov.f32	s0, s8
 80019ce:	eef0 0a64 	vmov.f32	s1, s9
 80019d2:	eeb0 1a45 	vmov.f32	s2, s10
 80019d6:	eef0 1a65 	vmov.f32	s3, s11
 80019da:	eeb0 2a46 	vmov.f32	s4, s12
 80019de:	eef0 2a66 	vmov.f32	s5, s13
 80019e2:	eeb0 3a47 	vmov.f32	s6, s14
 80019e6:	eef0 3a67 	vmov.f32	s7, s15
 80019ea:	3778      	adds	r7, #120	@ 0x78
 80019ec:	46bd      	mov	sp, r7
 80019ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019f2:	bf00      	nop
 80019f4:	3ff00000 	.word	0x3ff00000
 80019f8:	20000006 	.word	0x20000006
 80019fc:	20000000 	.word	0x20000000
 8001a00:	20000002 	.word	0x20000002
 8001a04:	20000004 	.word	0x20000004
 8001a08:	20000008 	.word	0x20000008

08001a0c <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8001a0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a10:	b090      	sub	sp, #64	@ 0x40
 8001a12:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8001a14:	201a      	movs	r0, #26
 8001a16:	f7ff feb5 	bl	8001784 <bno055_getVector>
 8001a1a:	eeb0 4a40 	vmov.f32	s8, s0
 8001a1e:	eef0 4a60 	vmov.f32	s9, s1
 8001a22:	eeb0 5a41 	vmov.f32	s10, s2
 8001a26:	eef0 5a61 	vmov.f32	s11, s3
 8001a2a:	eeb0 6a42 	vmov.f32	s12, s4
 8001a2e:	eef0 6a62 	vmov.f32	s13, s5
 8001a32:	eeb0 7a43 	vmov.f32	s14, s6
 8001a36:	eef0 7a63 	vmov.f32	s15, s7
 8001a3a:	ed87 4b08 	vstr	d4, [r7, #32]
 8001a3e:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8001a42:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8001a46:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8001a4a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a4e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001a52:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001a56:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001a5a:	ec49 8b14 	vmov	d4, r8, r9
 8001a5e:	ec45 4b15 	vmov	d5, r4, r5
 8001a62:	ec41 0b16 	vmov	d6, r0, r1
 8001a66:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a6a:	eeb0 0a44 	vmov.f32	s0, s8
 8001a6e:	eef0 0a64 	vmov.f32	s1, s9
 8001a72:	eeb0 1a45 	vmov.f32	s2, s10
 8001a76:	eef0 1a65 	vmov.f32	s3, s11
 8001a7a:	eeb0 2a46 	vmov.f32	s4, s12
 8001a7e:	eef0 2a66 	vmov.f32	s5, s13
 8001a82:	eeb0 3a47 	vmov.f32	s6, s14
 8001a86:	eef0 3a67 	vmov.f32	s7, s15
 8001a8a:	3740      	adds	r7, #64	@ 0x40
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001a94 <IMU_GetEulerVector>:
  bno055_writeData(BNO055_AXIS_MAP_CONFIG, axisRemap);
  bno055_writeData(BNO055_AXIS_MAP_SIGN, axisMapSign);
}


void IMU_GetEulerVector(){
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
	  vectorIMU = bno055_getVectorEuler();
 8001a98:	f7ff ffb8 	bl	8001a0c <bno055_getVectorEuler>
 8001a9c:	eeb0 4a40 	vmov.f32	s8, s0
 8001aa0:	eef0 4a60 	vmov.f32	s9, s1
 8001aa4:	eeb0 5a41 	vmov.f32	s10, s2
 8001aa8:	eef0 5a61 	vmov.f32	s11, s3
 8001aac:	eeb0 6a42 	vmov.f32	s12, s4
 8001ab0:	eef0 6a62 	vmov.f32	s13, s5
 8001ab4:	eeb0 7a43 	vmov.f32	s14, s6
 8001ab8:	eef0 7a63 	vmov.f32	s15, s7
 8001abc:	4b14      	ldr	r3, [pc, #80]	@ (8001b10 <IMU_GetEulerVector+0x7c>)
 8001abe:	ed83 4b00 	vstr	d4, [r3]
 8001ac2:	ed83 5b02 	vstr	d5, [r3, #8]
 8001ac6:	ed83 6b04 	vstr	d6, [r3, #16]
 8001aca:	ed83 7b06 	vstr	d7, [r3, #24]
	  euler_roll = vectorIMU.z;
 8001ace:	4b10      	ldr	r3, [pc, #64]	@ (8001b10 <IMU_GetEulerVector+0x7c>)
 8001ad0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f7ff f88e 	bl	8000bf8 <__aeabi_d2f>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4a0d      	ldr	r2, [pc, #52]	@ (8001b14 <IMU_GetEulerVector+0x80>)
 8001ae0:	6013      	str	r3, [r2, #0]
	  euler_pitch= vectorIMU.y;
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <IMU_GetEulerVector+0x7c>)
 8001ae4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	f7ff f884 	bl	8000bf8 <__aeabi_d2f>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4a09      	ldr	r2, [pc, #36]	@ (8001b18 <IMU_GetEulerVector+0x84>)
 8001af4:	6013      	str	r3, [r2, #0]
	  euler_yaw = vectorIMU.x;
 8001af6:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <IMU_GetEulerVector+0x7c>)
 8001af8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	f7ff f87a 	bl	8000bf8 <__aeabi_d2f>
 8001b04:	4603      	mov	r3, r0
 8001b06:	4a05      	ldr	r2, [pc, #20]	@ (8001b1c <IMU_GetEulerVector+0x88>)
 8001b08:	6013      	str	r3, [r2, #0]
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200009c8 	.word	0x200009c8
 8001b14:	200009e8 	.word	0x200009e8
 8001b18:	200009ec 	.word	0x200009ec
 8001b1c:	200009f0 	.word	0x200009f0

08001b20 <MS5611_Init>:


/******************************************************************************
         			#### MS5611 FUNCTIONS ####
******************************************************************************/
MS5611_StatusTypeDef MS5611_Init(MS5611_HandleTypeDef *dev){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]

	 MS5611_Reset(dev);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f86f 	bl	8001c0c <MS5611_Reset>

	 if(HAL_I2C_IsDeviceReady(dev->i2c, dev->I2C_ADDRESS, 1, 1000) != HAL_OK){
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6818      	ldr	r0, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	8899      	ldrh	r1, [r3, #4]
 8001b36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f004 f834 	bl	8005ba8 <HAL_I2C_IsDeviceReady>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d000      	beq.n	8001b48 <MS5611_Init+0x28>

			__NOP();
 8001b46:	bf00      	nop

	 }

	MS5611_Get_CalibCoeff(dev);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f879 	bl	8001c40 <MS5611_Get_CalibCoeff>

	/**
	 * It is calculated average vertical altitude for set to zero our actual altitude
	 */
	if(dev->Ref_Alt_Sel == 'm'){
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001b54:	2b6d      	cmp	r3, #109	@ 0x6d
 8001b56:	d10c      	bne.n	8001b72 <MS5611_Init+0x52>

		dev->FixedAltitude = 0.0; //We set zero at the first time because gets the real place altitude value
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	661a      	str	r2, [r3, #96]	@ 0x60

		dev->FixedAltitude = MS5611_Calc_TemporaryAltitude(dev);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f819 	bl	8001b98 <MS5611_Calc_TemporaryAltitude>
 8001b66:	eef0 7a40 	vmov.f32	s15, s0
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
 8001b70:	e008      	b.n	8001b84 <MS5611_Init+0x64>

		 }
		 else if(dev->Ref_Alt_Sel == 'M'){
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001b78:	2b4d      	cmp	r3, #77	@ 0x4d
 8001b7a:	d103      	bne.n	8001b84 <MS5611_Init+0x64>

			 dev->FixedAltitude = 0.0;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	661a      	str	r2, [r3, #96]	@ 0x60

		 }
	/**
	 * In the beginning, variables that record the amounts of change are reset for security measures
	 */
	MS5611_ResetRef_DeltaVal(dev);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 fcd9 	bl	800253c <MS5611_ResetRef_DeltaVal>

	return MS5611_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	0000      	movs	r0, r0
	...

08001b98 <MS5611_Calc_TemporaryAltitude>:

float MS5611_Calc_TemporaryAltitude(MS5611_HandleTypeDef *dev){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

	 float tempAltitude = 0;
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]

	 for(int cnt = 0 ; cnt < 20 ; cnt++){
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	e01d      	b.n	8001be8 <MS5611_Calc_TemporaryAltitude+0x50>

		 MS5611_Read_ActVal(dev);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 fc5b 	bl	8002468 <MS5611_Read_ActVal>
		 tempAltitude = (float)(tempAltitude + (float)(MS5611_Altitude * 0.05));
 8001bb2:	4b15      	ldr	r3, [pc, #84]	@ (8001c08 <MS5611_Calc_TemporaryAltitude+0x70>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fcce 	bl	8000558 <__aeabi_f2d>
 8001bbc:	a310      	add	r3, pc, #64	@ (adr r3, 8001c00 <MS5611_Calc_TemporaryAltitude+0x68>)
 8001bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc2:	f7fe fd21 	bl	8000608 <__aeabi_dmul>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4610      	mov	r0, r2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f7ff f813 	bl	8000bf8 <__aeabi_d2f>
 8001bd2:	ee07 0a10 	vmov	s14, r0
 8001bd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bde:	edc7 7a03 	vstr	s15, [r7, #12]
	 for(int cnt = 0 ; cnt < 20 ; cnt++){
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	3301      	adds	r3, #1
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	2b13      	cmp	r3, #19
 8001bec:	ddde      	ble.n	8001bac <MS5611_Calc_TemporaryAltitude+0x14>

	  }

	 return tempAltitude;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	ee07 3a90 	vmov	s15, r3

}
 8001bf4:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	9999999a 	.word	0x9999999a
 8001c04:	3fa99999 	.word	0x3fa99999
 8001c08:	20000798 	.word	0x20000798

08001c0c <MS5611_Reset>:
void MS5611_Reset(MS5611_HandleTypeDef *dev){
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af04      	add	r7, sp, #16
 8001c12:	6078      	str	r0, [r7, #4]

	HAL_I2C_Mem_Write(dev->i2c, dev->I2C_ADDRESS, dev->I2C_ADDRESS, 1, &ResetCom, 1, 1000);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	8899      	ldrh	r1, [r3, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	889a      	ldrh	r2, [r3, #4]
 8001c20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c24:	9302      	str	r3, [sp, #8]
 8001c26:	2301      	movs	r3, #1
 8001c28:	9301      	str	r3, [sp, #4]
 8001c2a:	4b04      	ldr	r3, [pc, #16]	@ (8001c3c <MS5611_Reset+0x30>)
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f003 fec0 	bl	80059b4 <HAL_I2C_Mem_Write>

}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	2000000c 	.word	0x2000000c

08001c40 <MS5611_Get_CalibCoeff>:


void MS5611_Get_CalibCoeff(MS5611_HandleTypeDef *dev){
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08e      	sub	sp, #56	@ 0x38
 8001c44:	af02      	add	r7, sp, #8
 8001c46:	6078      	str	r0, [r7, #4]

	uint8_t CalibCoefAddrss[7] = {0xA2, //C1
 8001c48:	4a8c      	ldr	r2, [pc, #560]	@ (8001e7c <MS5611_Get_CalibCoeff+0x23c>)
 8001c4a:	f107 0320 	add.w	r3, r7, #32
 8001c4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c52:	6018      	str	r0, [r3, #0]
 8001c54:	3304      	adds	r3, #4
 8001c56:	8019      	strh	r1, [r3, #0]
 8001c58:	3302      	adds	r3, #2
 8001c5a:	0c0a      	lsrs	r2, r1, #16
 8001c5c:	701a      	strb	r2, [r3, #0]
								  0xA8, //C4
								  0xAA, //C5
								  0xAC, //C6
								  0xAE}; /*! The last address is for CRC*/

	uint8_t TempryCalibCoefVal[2] = {0};	/*! Temporary buffer that gets two complement of each calibration coefficient*/
 8001c5e:	2300      	movs	r3, #0
 8001c60:	83bb      	strh	r3, [r7, #28]
	uint8_t CalibCoefVal[14] = {0};			/*! Stable buffer that collects all complements of calibration coefficients*/
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	f107 0310 	add.w	r3, r7, #16
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	811a      	strh	r2, [r3, #8]
	uint8_t cnt = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f



	for(cnt = 0; cnt <= 6 ; cnt++){
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001c7e:	e03b      	b.n	8001cf8 <MS5611_Get_CalibCoeff+0xb8>

		HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &CalibCoefAddrss[cnt], 1, 1000);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6818      	ldr	r0, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	8899      	ldrh	r1, [r3, #4]
 8001c88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c8c:	f107 0220 	add.w	r2, r7, #32
 8001c90:	441a      	add	r2, r3
 8001c92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	2301      	movs	r3, #1
 8001c9a:	f003 fb5b 	bl	8005354 <HAL_I2C_Master_Transmit>


				for(int cnt_2 = 0; cnt_2 <= 1 ; cnt_2++){
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ca2:	e010      	b.n	8001cc6 <MS5611_Get_CalibCoeff+0x86>

					HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &TempryCalibCoefVal[cnt_2], 2, 1000);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6818      	ldr	r0, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	8899      	ldrh	r1, [r3, #4]
 8001cac:	f107 021c 	add.w	r2, r7, #28
 8001cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cb2:	441a      	add	r2, r3
 8001cb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	2302      	movs	r3, #2
 8001cbc:	f003 fc48 	bl	8005550 <HAL_I2C_Master_Receive>
				for(int cnt_2 = 0; cnt_2 <= 1 ; cnt_2++){
 8001cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	ddeb      	ble.n	8001ca4 <MS5611_Get_CalibCoeff+0x64>

				}

		CalibCoefVal[(cnt*2)]   = TempryCalibCoefVal[0];
 8001ccc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	7f3a      	ldrb	r2, [r7, #28]
 8001cd4:	3330      	adds	r3, #48	@ 0x30
 8001cd6:	443b      	add	r3, r7
 8001cd8:	f803 2c24 	strb.w	r2, [r3, #-36]
		CalibCoefVal[(cnt*2+1)] = TempryCalibCoefVal[1];
 8001cdc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	7f7a      	ldrb	r2, [r7, #29]
 8001ce6:	3330      	adds	r3, #48	@ 0x30
 8001ce8:	443b      	add	r3, r7
 8001cea:	f803 2c24 	strb.w	r2, [r3, #-36]
	for(cnt = 0; cnt <= 6 ; cnt++){
 8001cee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001cf8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001cfc:	2b06      	cmp	r3, #6
 8001cfe:	d9bf      	bls.n	8001c80 <MS5611_Get_CalibCoeff+0x40>

	}

	cnt = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	/*! Complements of each calibration coefficient consists MSB and LSB bits*/
	dev->Clb_Cf.C1  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2; // uint16_t <== |MSB_C1|LSB_C1|
 8001d06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d0a:	3330      	adds	r3, #48	@ 0x30
 8001d0c:	443b      	add	r3, r7
 8001d0e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d12:	021b      	lsls	r3, r3, #8
 8001d14:	b21a      	sxth	r2, r3
 8001d16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	3330      	adds	r3, #48	@ 0x30
 8001d1e:	443b      	add	r3, r7
 8001d20:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d24:	b21b      	sxth	r3, r3
 8001d26:	4313      	orrs	r3, r2
 8001d28:	b21b      	sxth	r3, r3
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	80da      	strh	r2, [r3, #6]
 8001d30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d34:	3302      	adds	r3, #2
 8001d36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C2  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001d3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d3e:	3330      	adds	r3, #48	@ 0x30
 8001d40:	443b      	add	r3, r7
 8001d42:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d46:	021b      	lsls	r3, r3, #8
 8001d48:	b21a      	sxth	r2, r3
 8001d4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d4e:	3301      	adds	r3, #1
 8001d50:	3330      	adds	r3, #48	@ 0x30
 8001d52:	443b      	add	r3, r7
 8001d54:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d58:	b21b      	sxth	r3, r3
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	b21b      	sxth	r3, r3
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	811a      	strh	r2, [r3, #8]
 8001d64:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d68:	3302      	adds	r3, #2
 8001d6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C3  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001d6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d72:	3330      	adds	r3, #48	@ 0x30
 8001d74:	443b      	add	r3, r7
 8001d76:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d7a:	021b      	lsls	r3, r3, #8
 8001d7c:	b21a      	sxth	r2, r3
 8001d7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d82:	3301      	adds	r3, #1
 8001d84:	3330      	adds	r3, #48	@ 0x30
 8001d86:	443b      	add	r3, r7
 8001d88:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d8c:	b21b      	sxth	r3, r3
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	b21b      	sxth	r3, r3
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	815a      	strh	r2, [r3, #10]
 8001d98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d9c:	3302      	adds	r3, #2
 8001d9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C4  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001da2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001da6:	3330      	adds	r3, #48	@ 0x30
 8001da8:	443b      	add	r3, r7
 8001daa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001dae:	021b      	lsls	r3, r3, #8
 8001db0:	b21a      	sxth	r2, r3
 8001db2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001db6:	3301      	adds	r3, #1
 8001db8:	3330      	adds	r3, #48	@ 0x30
 8001dba:	443b      	add	r3, r7
 8001dbc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001dc0:	b21b      	sxth	r3, r3
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	b21b      	sxth	r3, r3
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	819a      	strh	r2, [r3, #12]
 8001dcc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001dd0:	3302      	adds	r3, #2
 8001dd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C5  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001dd6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001dda:	3330      	adds	r3, #48	@ 0x30
 8001ddc:	443b      	add	r3, r7
 8001dde:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001de2:	021b      	lsls	r3, r3, #8
 8001de4:	b21a      	sxth	r2, r3
 8001de6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001dea:	3301      	adds	r3, #1
 8001dec:	3330      	adds	r3, #48	@ 0x30
 8001dee:	443b      	add	r3, r7
 8001df0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001df4:	b21b      	sxth	r3, r3
 8001df6:	4313      	orrs	r3, r2
 8001df8:	b21b      	sxth	r3, r3
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	81da      	strh	r2, [r3, #14]
 8001e00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e04:	3302      	adds	r3, #2
 8001e06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C6  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001e0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e0e:	3330      	adds	r3, #48	@ 0x30
 8001e10:	443b      	add	r3, r7
 8001e12:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	b21a      	sxth	r2, r3
 8001e1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e1e:	3301      	adds	r3, #1
 8001e20:	3330      	adds	r3, #48	@ 0x30
 8001e22:	443b      	add	r3, r7
 8001e24:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e28:	b21b      	sxth	r3, r3
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	b21b      	sxth	r3, r3
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	821a      	strh	r2, [r3, #16]
 8001e34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e38:	3302      	adds	r3, #2
 8001e3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.crc = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001e3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e42:	3330      	adds	r3, #48	@ 0x30
 8001e44:	443b      	add	r3, r7
 8001e46:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	b21a      	sxth	r2, r3
 8001e4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e52:	3301      	adds	r3, #1
 8001e54:	3330      	adds	r3, #48	@ 0x30
 8001e56:	443b      	add	r3, r7
 8001e58:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	b21b      	sxth	r3, r3
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	825a      	strh	r2, [r3, #18]
 8001e68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e6c:	3302      	adds	r3, #2
 8001e6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

}
 8001e72:	bf00      	nop
 8001e74:	3730      	adds	r7, #48	@ 0x30
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	08010c98 	.word	0x08010c98

08001e80 <MS5611_ReadRaw_Press_Temp>:


void MS5611_ReadRaw_Press_Temp(MS5611_HandleTypeDef *dev){
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af02      	add	r7, sp, #8
 8001e86:	6078      	str	r0, [r7, #4]

	uint8_t RawDataD1[3]  = {0}; /*! D1 = Raw pressure value that will be compensated at other functions*/
 8001e88:	4b38      	ldr	r3, [pc, #224]	@ (8001f6c <MS5611_ReadRaw_Press_Temp+0xec>)
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	81bb      	strh	r3, [r7, #12]
 8001e8e:	2300      	movs	r3, #0
 8001e90:	73bb      	strb	r3, [r7, #14]
	uint8_t RawDataD2[3]  = {0}; /*! D2 = Raw temperature value that will be compensated at other functions*/
 8001e92:	4b36      	ldr	r3, [pc, #216]	@ (8001f6c <MS5611_ReadRaw_Press_Temp+0xec>)
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	813b      	strh	r3, [r7, #8]
 8001e98:	2300      	movs	r3, #0
 8001e9a:	72bb      	strb	r3, [r7, #10]
	 *
	 * @Attention! you must wait minimum 15 milisecond after each i2c command because of clock line and calculation times.
	 */

	/*! Gets D1(Raw Pressure)*/
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &osrs_4096_D1, 1, 1000); //(1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	8899      	ldrh	r1, [r3, #4]
 8001ea4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	2301      	movs	r3, #1
 8001eac:	4a30      	ldr	r2, [pc, #192]	@ (8001f70 <MS5611_ReadRaw_Press_Temp+0xf0>)
 8001eae:	f003 fa51 	bl	8005354 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8001eb2:	2014      	movs	r0, #20
 8001eb4:	f001 ffb6 	bl	8003e24 <HAL_Delay>
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &adcReadCom , 1, 1000);	 //(2)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	8899      	ldrh	r1, [r3, #4]
 8001ec0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	4a2a      	ldr	r2, [pc, #168]	@ (8001f74 <MS5611_ReadRaw_Press_Temp+0xf4>)
 8001eca:	f003 fa43 	bl	8005354 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8001ece:	2014      	movs	r0, #20
 8001ed0:	f001 ffa8 	bl	8003e24 <HAL_Delay>
	HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &RawDataD1[0], 3, 10000);	 //(3)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6818      	ldr	r0, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	8899      	ldrh	r1, [r3, #4]
 8001edc:	f107 020c 	add.w	r2, r7, #12
 8001ee0:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	f003 fb32 	bl	8005550 <HAL_I2C_Master_Receive>
	dev->ClcPrms.D1 = (uint32_t)((RawDataD1[0]<<16) | (RawDataD1[1]<<8) | (RawDataD1[2]<<0)); // MSB|LSB|XLSB
 8001eec:	7b3b      	ldrb	r3, [r7, #12]
 8001eee:	041a      	lsls	r2, r3, #16
 8001ef0:	7b7b      	ldrb	r3, [r7, #13]
 8001ef2:	021b      	lsls	r3, r3, #8
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	7bba      	ldrb	r2, [r7, #14]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	461a      	mov	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	615a      	str	r2, [r3, #20]

	/*! Gets D2(Raw Temperature)*/
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &osrs_4096_D2, 1, 1000); //(1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	8899      	ldrh	r1, [r3, #4]
 8001f08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	2301      	movs	r3, #1
 8001f10:	4a19      	ldr	r2, [pc, #100]	@ (8001f78 <MS5611_ReadRaw_Press_Temp+0xf8>)
 8001f12:	f003 fa1f 	bl	8005354 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8001f16:	2014      	movs	r0, #20
 8001f18:	f001 ff84 	bl	8003e24 <HAL_Delay>
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &adcReadCom , 1, 1000);  	 //(2)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6818      	ldr	r0, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	8899      	ldrh	r1, [r3, #4]
 8001f24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	4a11      	ldr	r2, [pc, #68]	@ (8001f74 <MS5611_ReadRaw_Press_Temp+0xf4>)
 8001f2e:	f003 fa11 	bl	8005354 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8001f32:	2014      	movs	r0, #20
 8001f34:	f001 ff76 	bl	8003e24 <HAL_Delay>
	HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &RawDataD2[0], 3, 1000);  //(3)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	8899      	ldrh	r1, [r3, #4]
 8001f40:	f107 0208 	add.w	r2, r7, #8
 8001f44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	f003 fb00 	bl	8005550 <HAL_I2C_Master_Receive>
	dev->ClcPrms.D2 = (uint32_t)((RawDataD2[0]<<16) | (RawDataD2[1]<<8) | (RawDataD2[2]<<0)); // MSB|LSB|XLSB
 8001f50:	7a3b      	ldrb	r3, [r7, #8]
 8001f52:	041a      	lsls	r2, r3, #16
 8001f54:	7a7b      	ldrb	r3, [r7, #9]
 8001f56:	021b      	lsls	r3, r3, #8
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	7aba      	ldrb	r2, [r7, #10]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	461a      	mov	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	619a      	str	r2, [r3, #24]

}
 8001f64:	bf00      	nop
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	08010ca0 	.word	0x08010ca0
 8001f70:	2000000a 	.word	0x2000000a
 8001f74:	200002f4 	.word	0x200002f4
 8001f78:	2000000b 	.word	0x2000000b

08001f7c <MS5611_FirstCalculateDatas>:


void MS5611_FirstCalculateDatas(MS5611_HandleTypeDef *dev){
 8001f7c:	b5b0      	push	{r4, r5, r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

	/*! Calculate 1st order temperature and pressure  according to MS5611 1st order algorithm */
	dev->ClcPrms.dT   = dev->ClcPrms.D2 - dev->Clb_Cf.C5 * pow(2,8);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fac3 	bl	8000514 <__aeabi_ui2d>
 8001f8e:	4604      	mov	r4, r0
 8001f90:	460d      	mov	r5, r1
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	89db      	ldrh	r3, [r3, #14]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe facc 	bl	8000534 <__aeabi_i2d>
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	4b69      	ldr	r3, [pc, #420]	@ (8002148 <MS5611_FirstCalculateDatas+0x1cc>)
 8001fa2:	f7fe fb31 	bl	8000608 <__aeabi_dmul>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4620      	mov	r0, r4
 8001fac:	4629      	mov	r1, r5
 8001fae:	f7fe f973 	bl	8000298 <__aeabi_dsub>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f7fe fe1d 	bl	8000bf8 <__aeabi_d2f>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	61da      	str	r2, [r3, #28]
	dev->ClcPrms.OFF  = dev->Clb_Cf.C2 * pow(2,17) + (dev->Clb_Cf.C4 * dev->ClcPrms.dT) / pow(2,6);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	891b      	ldrh	r3, [r3, #8]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe fab3 	bl	8000534 <__aeabi_i2d>
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001fd6:	f7fe fb17 	bl	8000608 <__aeabi_dmul>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	4614      	mov	r4, r2
 8001fe0:	461d      	mov	r5, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	899b      	ldrh	r3, [r3, #12]
 8001fe6:	ee07 3a90 	vmov	s15, r3
 8001fea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff8:	ee17 0a90 	vmov	r0, s15
 8001ffc:	f7fe faac 	bl	8000558 <__aeabi_f2d>
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	4b51      	ldr	r3, [pc, #324]	@ (800214c <MS5611_FirstCalculateDatas+0x1d0>)
 8002006:	f7fe fc29 	bl	800085c <__aeabi_ddiv>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4620      	mov	r0, r4
 8002010:	4629      	mov	r1, r5
 8002012:	f7fe f943 	bl	800029c <__adddf3>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4610      	mov	r0, r2
 800201c:	4619      	mov	r1, r3
 800201e:	f7fe fdeb 	bl	8000bf8 <__aeabi_d2f>
 8002022:	4602      	mov	r2, r0
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	629a      	str	r2, [r3, #40]	@ 0x28
	dev->ClcPrms.SENS = dev->Clb_Cf.C1 * pow(2,16) + (dev->Clb_Cf.C3 * dev->ClcPrms.dT) / pow(2,7);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	88db      	ldrh	r3, [r3, #6]
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe fa81 	bl	8000534 <__aeabi_i2d>
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	4b46      	ldr	r3, [pc, #280]	@ (8002150 <MS5611_FirstCalculateDatas+0x1d4>)
 8002038:	f7fe fae6 	bl	8000608 <__aeabi_dmul>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4614      	mov	r4, r2
 8002042:	461d      	mov	r5, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	895b      	ldrh	r3, [r3, #10]
 8002048:	ee07 3a90 	vmov	s15, r3
 800204c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	edd3 7a07 	vldr	s15, [r3, #28]
 8002056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800205a:	ee17 0a90 	vmov	r0, s15
 800205e:	f7fe fa7b 	bl	8000558 <__aeabi_f2d>
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	4b3b      	ldr	r3, [pc, #236]	@ (8002154 <MS5611_FirstCalculateDatas+0x1d8>)
 8002068:	f7fe fbf8 	bl	800085c <__aeabi_ddiv>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4620      	mov	r0, r4
 8002072:	4629      	mov	r1, r5
 8002074:	f7fe f912 	bl	800029c <__adddf3>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	f7fe fdba 	bl	8000bf8 <__aeabi_d2f>
 8002084:	4602      	mov	r2, r0
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	62da      	str	r2, [r3, #44]	@ 0x2c

	dev->ClcPrms.TEMP = 2000 + dev->ClcPrms.dT * dev->Clb_Cf.C6 / pow(2,23);								//Actual temperature data
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	8a1b      	ldrh	r3, [r3, #16]
 8002094:	ee07 3a90 	vmov	s15, r3
 8002098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800209c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a0:	ee17 0a90 	vmov	r0, s15
 80020a4:	f7fe fa58 	bl	8000558 <__aeabi_f2d>
 80020a8:	f04f 0200 	mov.w	r2, #0
 80020ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002158 <MS5611_FirstCalculateDatas+0x1dc>)
 80020ae:	f7fe fbd5 	bl	800085c <__aeabi_ddiv>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4610      	mov	r0, r2
 80020b8:	4619      	mov	r1, r3
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	4b27      	ldr	r3, [pc, #156]	@ (800215c <MS5611_FirstCalculateDatas+0x1e0>)
 80020c0:	f7fe f8ec 	bl	800029c <__adddf3>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4610      	mov	r0, r2
 80020ca:	4619      	mov	r1, r3
 80020cc:	f7fe fd94 	bl	8000bf8 <__aeabi_d2f>
 80020d0:	4602      	mov	r2, r0
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	621a      	str	r2, [r3, #32]
	dev->ClcPrms.P	  = ((dev->ClcPrms.D1 * dev->ClcPrms.SENS / pow(2,21) - dev->ClcPrms.OFF))/pow(2,15);	//Actual pressure data
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	ee07 3a90 	vmov	s15, r3
 80020de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80020e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ec:	ee17 0a90 	vmov	r0, s15
 80020f0:	f7fe fa32 	bl	8000558 <__aeabi_f2d>
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	4b19      	ldr	r3, [pc, #100]	@ (8002160 <MS5611_FirstCalculateDatas+0x1e4>)
 80020fa:	f7fe fbaf 	bl	800085c <__aeabi_ddiv>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	4614      	mov	r4, r2
 8002104:	461d      	mov	r5, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe fa24 	bl	8000558 <__aeabi_f2d>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4620      	mov	r0, r4
 8002116:	4629      	mov	r1, r5
 8002118:	f7fe f8be 	bl	8000298 <__aeabi_dsub>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	4610      	mov	r0, r2
 8002122:	4619      	mov	r1, r3
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	4b0e      	ldr	r3, [pc, #56]	@ (8002164 <MS5611_FirstCalculateDatas+0x1e8>)
 800212a:	f7fe fb97 	bl	800085c <__aeabi_ddiv>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4610      	mov	r0, r2
 8002134:	4619      	mov	r1, r3
 8002136:	f7fe fd5f 	bl	8000bf8 <__aeabi_d2f>
 800213a:	4602      	mov	r2, r0
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bdb0      	pop	{r4, r5, r7, pc}
 8002148:	40700000 	.word	0x40700000
 800214c:	40500000 	.word	0x40500000
 8002150:	40f00000 	.word	0x40f00000
 8002154:	40600000 	.word	0x40600000
 8002158:	41600000 	.word	0x41600000
 800215c:	409f4000 	.word	0x409f4000
 8002160:	41400000 	.word	0x41400000
 8002164:	40e00000 	.word	0x40e00000

08002168 <MS5611_SecondCalculateDatas>:


void MS5611_SecondCalculateDatas(MS5611_HandleTypeDef *dev){
 8002168:	b5b0      	push	{r4, r5, r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]

	if(dev->ClcPrms.TEMP < 2000){
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	edd3 7a08 	vldr	s15, [r3, #32]
 8002176:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 80023b0 <MS5611_SecondCalculateDatas+0x248>
 800217a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800217e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002182:	f140 80e3 	bpl.w	800234c <MS5611_SecondCalculateDatas+0x1e4>

			/*! Low Temperature */
			dev->ClcPrms.TEMP2 = (dev->ClcPrms.dT * dev->ClcPrms.dT) / pow(2,31);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	ed93 7a07 	vldr	s14, [r3, #28]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002192:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002196:	eddf 6a87 	vldr	s13, [pc, #540]	@ 80023b4 <MS5611_SecondCalculateDatas+0x24c>
 800219a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			dev->ClcPrms.OFF2  = 5 * ((dev->ClcPrms.TEMP - 2000) * (dev->ClcPrms.TEMP - 2000)) / pow(2,1);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	edd3 7a08 	vldr	s15, [r3, #32]
 80021aa:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 80023b0 <MS5611_SecondCalculateDatas+0x248>
 80021ae:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	edd3 7a08 	vldr	s15, [r3, #32]
 80021b8:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 80023b0 <MS5611_SecondCalculateDatas+0x248>
 80021bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80021c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c4:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80021c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021cc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80021d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
			dev->ClcPrms.SENS2 = 5 * ((dev->ClcPrms.TEMP - 2000) * (dev->ClcPrms.TEMP - 2000)) / pow(2,2);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	edd3 7a08 	vldr	s15, [r3, #32]
 80021e0:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 80023b0 <MS5611_SecondCalculateDatas+0x248>
 80021e4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	edd3 7a08 	vldr	s15, [r3, #32]
 80021ee:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80023b0 <MS5611_SecondCalculateDatas+0x248>
 80021f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80021f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021fa:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80021fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002202:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002206:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

					if(dev->ClcPrms.TEMP < -1500){
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	edd3 7a08 	vldr	s15, [r3, #32]
 8002216:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80023b8 <MS5611_SecondCalculateDatas+0x250>
 800221a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800221e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002222:	d571      	bpl.n	8002308 <MS5611_SecondCalculateDatas+0x1a0>
						/*! Very Low Temperature */
						dev->ClcPrms.OFF2  = dev->ClcPrms.OFF2 + 7 * ((dev->ClcPrms.TEMP + 1500) * (dev->ClcPrms.TEMP + 1500));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002230:	eddf 6a62 	vldr	s13, [pc, #392]	@ 80023bc <MS5611_SecondCalculateDatas+0x254>
 8002234:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	edd3 7a08 	vldr	s15, [r3, #32]
 800223e:	ed9f 6a5f 	vldr	s12, [pc, #380]	@ 80023bc <MS5611_SecondCalculateDatas+0x254>
 8002242:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002246:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800224a:	eef1 6a0c 	vmov.f32	s13, #28	@ 0x40e00000  7.0
 800224e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
						dev->ClcPrms.SENS2 = dev->ClcPrms.SENS2 + 11 * ((dev->ClcPrms.TEMP + 1500) * (dev->ClcPrms.TEMP + 1500)) / pow(2,1);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe f979 	bl	8000558 <__aeabi_f2d>
 8002266:	4604      	mov	r4, r0
 8002268:	460d      	mov	r5, r1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002270:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80023bc <MS5611_SecondCalculateDatas+0x254>
 8002274:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	edd3 7a08 	vldr	s15, [r3, #32]
 800227e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80023bc <MS5611_SecondCalculateDatas+0x254>
 8002282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800228a:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 800228e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002292:	ee17 0a90 	vmov	r0, s15
 8002296:	f7fe f95f 	bl	8000558 <__aeabi_f2d>
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80022a2:	f7fe fadb 	bl	800085c <__aeabi_ddiv>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4620      	mov	r0, r4
 80022ac:	4629      	mov	r1, r5
 80022ae:	f7fd fff5 	bl	800029c <__adddf3>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4610      	mov	r0, r2
 80022b8:	4619      	mov	r1, r3
 80022ba:	f7fe fc9d 	bl	8000bf8 <__aeabi_d2f>
 80022be:	4602      	mov	r2, r0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	635a      	str	r2, [r3, #52]	@ 0x34

						dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	ed93 7a08 	vldr	s14, [r3, #32]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80022d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	edc3 7a08 	vstr	s15, [r3, #32]
						dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80022e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
						dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80022fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
			dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
			dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
			dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;

		}
}
 8002306:	e04e      	b.n	80023a6 <MS5611_SecondCalculateDatas+0x23e>
						dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	ed93 7a08 	vldr	s14, [r3, #32]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002314:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	edc3 7a08 	vstr	s15, [r3, #32]
						dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800232a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
						dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002340:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 800234a:	e02c      	b.n	80023a6 <MS5611_SecondCalculateDatas+0x23e>
			dev->ClcPrms.TEMP2 = 0;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	639a      	str	r2, [r3, #56]	@ 0x38
			dev->ClcPrms.OFF2  = 0;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	631a      	str	r2, [r3, #48]	@ 0x30
			dev->ClcPrms.SENS2 = 0;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	635a      	str	r2, [r3, #52]	@ 0x34
			dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	ed93 7a08 	vldr	s14, [r3, #32]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002370:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	edc3 7a08 	vstr	s15, [r3, #32]
			dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002386:	ee77 7a67 	vsub.f32	s15, s14, s15
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
			dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800239c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bdb0      	pop	{r4, r5, r7, pc}
 80023ae:	bf00      	nop
 80023b0:	44fa0000 	.word	0x44fa0000
 80023b4:	4f000000 	.word	0x4f000000
 80023b8:	c4bb8000 	.word	0xc4bb8000
 80023bc:	44bb8000 	.word	0x44bb8000

080023c0 <MS5611_Calc_Altitude>:


float MS5611_Calc_Altitude(MS5611_HandleTypeDef *dev){
 80023c0:	b5b0      	push	{r4, r5, r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]

	return  ((SeaLevelTemp  / GradientTemp)
			* (1 - pow(((dev->ClcPrms.P/2) / SeaLevelPress),((GasCoefficient * GradientTemp)/GravityAccel)))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80023ce:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80023d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023d6:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002460 <MS5611_Calc_Altitude+0xa0>
 80023da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80023de:	ee16 0a90 	vmov	r0, s13
 80023e2:	f7fe f8b9 	bl	8000558 <__aeabi_f2d>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	ed9f 1b19 	vldr	d1, [pc, #100]	@ 8002450 <MS5611_Calc_Altitude+0x90>
 80023ee:	ec43 2b10 	vmov	d0, r2, r3
 80023f2:	f00d fc6f 	bl	800fcd4 <pow>
 80023f6:	ec53 2b10 	vmov	r2, r3, d0
 80023fa:	f04f 0000 	mov.w	r0, #0
 80023fe:	4919      	ldr	r1, [pc, #100]	@ (8002464 <MS5611_Calc_Altitude+0xa4>)
 8002400:	f7fd ff4a 	bl	8000298 <__aeabi_dsub>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4610      	mov	r0, r2
 800240a:	4619      	mov	r1, r3
 800240c:	a312      	add	r3, pc, #72	@ (adr r3, 8002458 <MS5611_Calc_Altitude+0x98>)
 800240e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002412:	f7fe f8f9 	bl	8000608 <__aeabi_dmul>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	4614      	mov	r4, r2
 800241c:	461d      	mov	r5, r3
			- dev->FixedAltitude) ;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe f898 	bl	8000558 <__aeabi_f2d>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4620      	mov	r0, r4
 800242e:	4629      	mov	r1, r5
 8002430:	f7fd ff32 	bl	8000298 <__aeabi_dsub>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4610      	mov	r0, r2
 800243a:	4619      	mov	r1, r3
 800243c:	f7fe fbdc 	bl	8000bf8 <__aeabi_d2f>
 8002440:	4603      	mov	r3, r0
 8002442:	ee07 3a90 	vmov	s15, r3

}
 8002446:	eeb0 0a67 	vmov.f32	s0, s15
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bdb0      	pop	{r4, r5, r7, pc}
 8002450:	fd017917 	.word	0xfd017917
 8002454:	3fc85ace 	.word	0x3fc85ace
 8002458:	9d89d89d 	.word	0x9d89d89d
 800245c:	40e5a558 	.word	0x40e5a558
 8002460:	47c5e680 	.word	0x47c5e680
 8002464:	3ff00000 	.word	0x3ff00000

08002468 <MS5611_Read_ActVal>:


void MS5611_Read_ActVal(MS5611_HandleTypeDef *dev){
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]

	/*! Read raw pressure and temperature MSB | LSB | XLSB values from the sensor*/
	MS5611_ReadRaw_Press_Temp(dev);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff fd05 	bl	8001e80 <MS5611_ReadRaw_Press_Temp>

	/*! Calculate 1st order temperature and pressure  according to MS5611 1st order algorithm */
	MS5611_FirstCalculateDatas(dev);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff fd80 	bl	8001f7c <MS5611_FirstCalculateDatas>

	/*! If it's needed, Calculate 2st order temperature and pressure  according to MS5611 2st order algorithm */
	MS5611_SecondCalculateDatas(dev);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff fe73 	bl	8002168 <MS5611_SecondCalculateDatas>

	/*! Vertical Altitude is calculated by using pressure and some coefficients */
	MS5611_Altitude = MS5611_Calc_Altitude(dev);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff ff9c 	bl	80023c0 <MS5611_Calc_Altitude>
 8002488:	eef0 7a40 	vmov.f32	s15, s0
 800248c:	4b24      	ldr	r3, [pc, #144]	@ (8002520 <MS5611_Read_ActVal+0xb8>)
 800248e:	edc3 7a00 	vstr	s15, [r3]

	/*! Vertical Speed is calculated by using differential of locations */
	MS5611_Calc_VertSpd(dev, MS5611_Altitude, &MS5611_VertSpeed);
 8002492:	4b23      	ldr	r3, [pc, #140]	@ (8002520 <MS5611_Read_ActVal+0xb8>)
 8002494:	edd3 7a00 	vldr	s15, [r3]
 8002498:	4922      	ldr	r1, [pc, #136]	@ (8002524 <MS5611_Read_ActVal+0xbc>)
 800249a:	eeb0 0a67 	vmov.f32	s0, s15
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f87a 	bl	8002598 <MS5611_Calc_VertSpd>

	/*! Vertical acceleration is calculated by using differential of speed */
	MS5611_Calc_VertAcc(dev, MS5611_VertSpeed, &MS5611_VertAcc);
 80024a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002524 <MS5611_Read_ActVal+0xbc>)
 80024a6:	edd3 7a00 	vldr	s15, [r3]
 80024aa:	491f      	ldr	r1, [pc, #124]	@ (8002528 <MS5611_Read_ActVal+0xc0>)
 80024ac:	eeb0 0a67 	vmov.f32	s0, s15
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f890 	bl	80025d6 <MS5611_Calc_VertAcc>

	/*! It's applied force on to the object that is given mass from the user */
	MS5611_Calc_gForce(dev, &MS5611_gForce, SatCar_Mass, MS5611_VertAcc);
 80024b6:	4b1d      	ldr	r3, [pc, #116]	@ (800252c <MS5611_Read_ActVal+0xc4>)
 80024b8:	edd3 7a00 	vldr	s15, [r3]
 80024bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002528 <MS5611_Read_ActVal+0xc0>)
 80024be:	ed93 7a00 	vldr	s14, [r3]
 80024c2:	eef0 0a47 	vmov.f32	s1, s14
 80024c6:	eeb0 0a67 	vmov.f32	s0, s15
 80024ca:	4919      	ldr	r1, [pc, #100]	@ (8002530 <MS5611_Read_ActVal+0xc8>)
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f8a3 	bl	8002618 <MS5611_Calc_gForce>

	/*! Pressure unit is mBar and Temperature unit is celcius degress*/
	MS5611_Press = dev->ClcPrms.P/2 ;			//@e.g :
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80024d8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80024dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024e0:	4b14      	ldr	r3, [pc, #80]	@ (8002534 <MS5611_Read_ActVal+0xcc>)
 80024e2:	edc3 7a00 	vstr	s15, [r3]
	MS5611_Temp  = dev->ClcPrms.TEMP * 0.01; 		//@e.g : 25.57 CelciusDegress
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe f834 	bl	8000558 <__aeabi_f2d>
 80024f0:	a309      	add	r3, pc, #36	@ (adr r3, 8002518 <MS5611_Read_ActVal+0xb0>)
 80024f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f6:	f7fe f887 	bl	8000608 <__aeabi_dmul>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4610      	mov	r0, r2
 8002500:	4619      	mov	r1, r3
 8002502:	f7fe fb79 	bl	8000bf8 <__aeabi_d2f>
 8002506:	4603      	mov	r3, r0
 8002508:	4a0b      	ldr	r2, [pc, #44]	@ (8002538 <MS5611_Read_ActVal+0xd0>)
 800250a:	6013      	str	r3, [r2, #0]

}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	f3af 8000 	nop.w
 8002518:	47ae147b 	.word	0x47ae147b
 800251c:	3f847ae1 	.word	0x3f847ae1
 8002520:	20000798 	.word	0x20000798
 8002524:	2000079c 	.word	0x2000079c
 8002528:	200007a0 	.word	0x200007a0
 800252c:	200007a8 	.word	0x200007a8
 8002530:	200007a4 	.word	0x200007a4
 8002534:	20000790 	.word	0x20000790
 8002538:	20000794 	.word	0x20000794

0800253c <MS5611_ResetRef_DeltaVal>:

void MS5611_ResetRef_DeltaVal(MS5611_HandleTypeDef *dev){
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

	//At the beginning, reset the altitude values for the first and second conditions.
	dev->DeltaData.alt0 = 0.0;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f04f 0200 	mov.w	r2, #0
 800254a:	63da      	str	r2, [r3, #60]	@ 0x3c
	dev->DeltaData.alt1 = 0.0;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	641a      	str	r2, [r3, #64]	@ 0x40
	dev->DeltaData.holdAlt = 0.0;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	645a      	str	r2, [r3, #68]	@ 0x44

	//At the beginning, reset the speed values for the first and second conditions.
	dev->DeltaData.spd0 = 0.0;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	655a      	str	r2, [r3, #84]	@ 0x54
	dev->DeltaData.spd1 = 0.0;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	659a      	str	r2, [r3, #88]	@ 0x58
	dev->DeltaData.holdSpd = 0.0;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	65da      	str	r2, [r3, #92]	@ 0x5c

	//At the beginning, reset the acceleration values for the first and second conditions.
	dev->DeltaData.acc0 = 0.0;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	649a      	str	r2, [r3, #72]	@ 0x48
	dev->DeltaData.acc1 = 0.0;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	64da      	str	r2, [r3, #76]	@ 0x4c
	dev->DeltaData.holdAcc = 0.0;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	651a      	str	r2, [r3, #80]	@ 0x50

}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <MS5611_Calc_VertSpd>:


/*!Vertical Speed is calculated by using differential of locations "V = (X1 - X0) /1 second" */
void MS5611_Calc_VertSpd(MS5611_HandleTypeDef *dev, float MS5611_Altitude, float *MS5611_VertSpeed){
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80025a4:	6079      	str	r1, [r7, #4]

	dev->DeltaData.alt1 = (MS5611_Altitude);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	641a      	str	r2, [r3, #64]	@ 0x40
	(*MS5611_VertSpeed) = (dev->DeltaData.alt1 - dev->DeltaData.alt0);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80025b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	edc3 7a00 	vstr	s15, [r3]
	dev->DeltaData.alt0 = dev->DeltaData.alt1;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 80025ca:	bf00      	nop
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <MS5611_Calc_VertAcc>:

/*! Vertical acceleration is calculated by using differential of speed "a = (V1 - V0) / 1 second"  */
void MS5611_Calc_VertAcc(MS5611_HandleTypeDef *dev, float MS5611_VertSpeed,float *MS5611_VertAcc){
 80025d6:	b480      	push	{r7}
 80025d8:	b085      	sub	sp, #20
 80025da:	af00      	add	r7, sp, #0
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	ed87 0a02 	vstr	s0, [r7, #8]
 80025e2:	6079      	str	r1, [r7, #4]

	dev->DeltaData.spd1 = (MS5611_VertSpeed);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	659a      	str	r2, [r3, #88]	@ 0x58
	(*MS5611_VertAcc)	= (dev->DeltaData.spd1 - dev->DeltaData.spd0);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80025f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	edc3 7a00 	vstr	s15, [r3]
	dev->DeltaData.spd0 = dev->DeltaData.spd1;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	655a      	str	r2, [r3, #84]	@ 0x54

}
 8002608:	bf00      	nop
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	0000      	movs	r0, r0
	...

08002618 <MS5611_Calc_gForce>:

/*! It's applied force on to the object that is given mass from the user. =" gForce = ObjectMass * (VerticalAcceleration / 9.80) " */
void MS5611_Calc_gForce(MS5611_HandleTypeDef *dev, float *MS5611_gForce, float SatCar_Mass, float MS5611_VertAcc){
 8002618:	b5b0      	push	{r4, r5, r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	ed87 0a01 	vstr	s0, [r7, #4]
 8002626:	edc7 0a00 	vstr	s1, [r7]

	(*MS5611_gForce) = (((MS5611_VertAcc)/GravityAccel)*(SatCar_Mass));
 800262a:	6838      	ldr	r0, [r7, #0]
 800262c:	f7fd ff94 	bl	8000558 <__aeabi_f2d>
 8002630:	a30f      	add	r3, pc, #60	@ (adr r3, 8002670 <MS5611_Calc_gForce+0x58>)
 8002632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002636:	f7fe f911 	bl	800085c <__aeabi_ddiv>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4614      	mov	r4, r2
 8002640:	461d      	mov	r5, r3
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7fd ff88 	bl	8000558 <__aeabi_f2d>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	4620      	mov	r0, r4
 800264e:	4629      	mov	r1, r5
 8002650:	f7fd ffda 	bl	8000608 <__aeabi_dmul>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	f7fe facc 	bl	8000bf8 <__aeabi_d2f>
 8002660:	4602      	mov	r2, r0
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	601a      	str	r2, [r3, #0]

}
 8002666:	bf00      	nop
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bdb0      	pop	{r4, r5, r7, pc}
 800266e:	bf00      	nop
 8002670:	3f141206 	.word	0x3f141206
 8002674:	40239cc6 	.word	0x40239cc6

08002678 <SubSys_SeparationMechanism_UnLock_PayloadFromCarrier>:
void SubSys_SeparationMechanism_Lock_PayloadToCarrier(void){

	SubSys_Actuator_Servo_MoveTo(&dev_Servo_Separation,0);

}
void SubSys_SeparationMechanism_UnLock_PayloadFromCarrier(void){
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0

	SubSys_Actuator_Servo_MoveTo(&dev_Servo_Separation,90);
 800267c:	215a      	movs	r1, #90	@ 0x5a
 800267e:	4802      	ldr	r0, [pc, #8]	@ (8002688 <SubSys_SeparationMechanism_UnLock_PayloadFromCarrier+0x10>)
 8002680:	f7fe fcb8 	bl	8000ff4 <SubSys_Actuator_Servo_MoveTo>

}
 8002684:	bf00      	nop
 8002686:	bd80      	pop	{r7, pc}
 8002688:	200009f4 	.word	0x200009f4

0800268c <HAL_UART_RxCpltCallback>:
#include "SubSys_USART_ReceiveIT_CallBacks_Driver.h"

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]


	/*! which UART interface receive data?
	 * UART2 is for Wireless communication
	 */
	if(huart->Instance == USART2){
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a09      	ldr	r2, [pc, #36]	@ (80026c0 <HAL_UART_RxCpltCallback+0x34>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d104      	bne.n	80026a8 <HAL_UART_RxCpltCallback+0x1c>
		SubSys_WirelessCom_Telemetry_Receive_From_To(Sat_Carrier, Sat_Payload, &dev_WirelessComApp);
 800269e:	4a09      	ldr	r2, [pc, #36]	@ (80026c4 <HAL_UART_RxCpltCallback+0x38>)
 80026a0:	2102      	movs	r1, #2
 80026a2:	2001      	movs	r0, #1
 80026a4:	f000 f812 	bl	80026cc <SubSys_WirelessCom_Telemetry_Receive_From_To>
	}

	/*!
	 * USART1 is for GPS
	 */
	if(huart->Instance == USART1){
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a06      	ldr	r2, [pc, #24]	@ (80026c8 <HAL_UART_RxCpltCallback+0x3c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d101      	bne.n	80026b6 <HAL_UART_RxCpltCallback+0x2a>
		GPS_UART_CallBack();
 80026b2:	f7fe fe2f 	bl	8001314 <GPS_UART_CallBack>
	}


}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40004400 	.word	0x40004400
 80026c4:	200007b8 	.word	0x200007b8
 80026c8:	40011000 	.word	0x40011000

080026cc <SubSys_WirelessCom_Telemetry_Receive_From_To>:
			break;

		   }

}
void SubSys_WirelessCom_Telemetry_Receive_From_To(MissionUnit From_X, MissionUnit To_Y, SubSys_WirelessCom_APP_HandleTypeDef *dev_WirelessComApp){
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	603a      	str	r2, [r7, #0]
 80026d6:	71fb      	strb	r3, [r7, #7]
 80026d8:	460b      	mov	r3, r1
 80026da:	71bb      	strb	r3, [r7, #6]
					 * We need to parse the incoming array so that we can learn it.
					 * If the message packet contains the 'C' character, then this message belongs to the Carrier
					 * If the message packet contains the 'G' character, then this message belongs to the Ground Station*/

					/* The data sequence in the telemetry packet is as follows: <ADDH><ADDL><CHN><FromWhereCharacter><SatelliteDatas....>"*/
					if(dev_WirelessComApp->Buffer.Rx[0] == 'C')
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	f893 3190 	ldrb.w	r3, [r3, #400]	@ 0x190
 80026e2:	2b43      	cmp	r3, #67	@ 0x43
 80026e4:	d11f      	bne.n	8002726 <SubSys_WirelessCom_Telemetry_Receive_From_To+0x5a>
					{
						extractValues_Carrier(dev_WirelessComApp->Buffer.Rx, value1, value2);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80026ec:	4a30      	ldr	r2, [pc, #192]	@ (80027b0 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xe4>)
 80026ee:	4931      	ldr	r1, [pc, #196]	@ (80027b4 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xe8>)
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 f86d 	bl	80027d0 <extractValues_Carrier>

						CarrierPressure   = atof(value1);
 80026f6:	482f      	ldr	r0, [pc, #188]	@ (80027b4 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xe8>)
 80026f8:	f008 fab7 	bl	800ac6a <atof>
 80026fc:	ec53 2b10 	vmov	r2, r3, d0
 8002700:	4610      	mov	r0, r2
 8002702:	4619      	mov	r1, r3
 8002704:	f7fe fa78 	bl	8000bf8 <__aeabi_d2f>
 8002708:	4603      	mov	r3, r0
 800270a:	4a2b      	ldr	r2, [pc, #172]	@ (80027b8 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xec>)
 800270c:	6013      	str	r3, [r2, #0]
						CarrierVertHeight = atof(value2);
 800270e:	4828      	ldr	r0, [pc, #160]	@ (80027b0 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xe4>)
 8002710:	f008 faab 	bl	800ac6a <atof>
 8002714:	ec53 2b10 	vmov	r2, r3, d0
 8002718:	4610      	mov	r0, r2
 800271a:	4619      	mov	r1, r3
 800271c:	f7fe fa6c 	bl	8000bf8 <__aeabi_d2f>
 8002720:	4603      	mov	r3, r0
 8002722:	4a26      	ldr	r2, [pc, #152]	@ (80027bc <SubSys_WirelessCom_Telemetry_Receive_From_To+0xf0>)
 8002724:	6013      	str	r3, [r2, #0]

					}

					if(dev_WirelessComApp->Buffer.Rx[0] == 'G')
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	f893 3190 	ldrb.w	r3, [r3, #400]	@ 0x190
 800272c:	2b47      	cmp	r3, #71	@ 0x47
 800272e:	d131      	bne.n	8002794 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xc8>
						 *
						 *	"G<RHRH+><IOTdata>" or "G<RHRH-><IOTdata>"
						 */

						/*! RHRH data */
						command_RHRH[0] = dev_WirelessComApp->Buffer.Rx[2];
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	f893 2192 	ldrb.w	r2, [r3, #402]	@ 0x192
 8002736:	4b22      	ldr	r3, [pc, #136]	@ (80027c0 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xf4>)
 8002738:	701a      	strb	r2, [r3, #0]
						command_RHRH[1] = dev_WirelessComApp->Buffer.Rx[3];
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	f893 2193 	ldrb.w	r2, [r3, #403]	@ 0x193
 8002740:	4b1f      	ldr	r3, [pc, #124]	@ (80027c0 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xf4>)
 8002742:	705a      	strb	r2, [r3, #1]
						command_RHRH[2] = dev_WirelessComApp->Buffer.Rx[4];
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	f893 2194 	ldrb.w	r2, [r3, #404]	@ 0x194
 800274a:	4b1d      	ldr	r3, [pc, #116]	@ (80027c0 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xf4>)
 800274c:	709a      	strb	r2, [r3, #2]
						command_RHRH[3] = dev_WirelessComApp->Buffer.Rx[5];
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	f893 2195 	ldrb.w	r2, [r3, #405]	@ 0x195
 8002754:	4b1a      	ldr	r3, [pc, #104]	@ (80027c0 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xf4>)
 8002756:	70da      	strb	r2, [r3, #3]

						/*! +,- ==> '+' symbol means that manual separation should be performed
						 *      ==> '-' symbol means that manual separation should not be performed
						 */
						ManuelSeparationCommand = dev_WirelessComApp->Buffer.Rx[6];
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	f893 2196 	ldrb.w	r2, [r3, #406]	@ 0x196
 800275e:	4b19      	ldr	r3, [pc, #100]	@ (80027c4 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xf8>)
 8002760:	701a      	strb	r2, [r3, #0]

						if(ManuelSeparationCommand == '+'){
 8002762:	4b18      	ldr	r3, [pc, #96]	@ (80027c4 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xf8>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b2b      	cmp	r3, #43	@ 0x2b
 8002768:	d101      	bne.n	800276e <SubSys_WirelessCom_Telemetry_Receive_From_To+0xa2>

							SubSys_SeparationMechanism_UnLock_PayloadFromCarrier();
 800276a:	f7ff ff85 	bl	8002678 <SubSys_SeparationMechanism_UnLock_PayloadFromCarrier>

						}

						extractValues_GroundStation(dev_WirelessComApp->Buffer.Rx, value3);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8002774:	4914      	ldr	r1, [pc, #80]	@ (80027c8 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xfc>)
 8002776:	4618      	mov	r0, r3
 8002778:	f000 f88e 	bl	8002898 <extractValues_GroundStation>
						GroundStation_IOTTemparature = atof(value3);
 800277c:	4812      	ldr	r0, [pc, #72]	@ (80027c8 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xfc>)
 800277e:	f008 fa74 	bl	800ac6a <atof>
 8002782:	ec53 2b10 	vmov	r2, r3, d0
 8002786:	4610      	mov	r0, r2
 8002788:	4619      	mov	r1, r3
 800278a:	f7fe fa35 	bl	8000bf8 <__aeabi_d2f>
 800278e:	4603      	mov	r3, r0
 8002790:	4a0e      	ldr	r2, [pc, #56]	@ (80027cc <SubSys_WirelessCom_Telemetry_Receive_From_To+0x100>)
 8002792:	6013      	str	r3, [r2, #0]

					/*! Contanie to receive data from carrier unit or ground station.
					 *  Good news and bad news, all of them can be filled but the order of the data can be stuck
					 *  We'll see bro
					 */
					HAL_UART_Receive_IT(dev_WirelessComApp->huartX, (uint8_t *)dev_WirelessComApp->Buffer.Rx, sizeof(dev_WirelessComApp->Buffer.Rx));
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	f8d3 0200 	ldr.w	r0, [r3, #512]	@ 0x200
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80027a0:	221b      	movs	r2, #27
 80027a2:	4619      	mov	r1, r3
 80027a4:	f006 fb30 	bl	8008e08 <HAL_UART_Receive_IT>

}
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	2000030c 	.word	0x2000030c
 80027b4:	200002f8 	.word	0x200002f8
 80027b8:	20000a10 	.word	0x20000a10
 80027bc:	20000a14 	.word	0x20000a14
 80027c0:	20000a1c 	.word	0x20000a1c
 80027c4:	20000a06 	.word	0x20000a06
 80027c8:	20000320 	.word	0x20000320
 80027cc:	20000a18 	.word	0x20000a18

080027d0 <extractValues_Carrier>:

#include "SubSys_WirelessCommunication_Telemetry_ExtractValue_Driver.h"

void extractValues_Carrier(const char* input, char* value1, char* value2){
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
    const char* start = strchr(input, '<');
 80027dc:	213c      	movs	r1, #60	@ 0x3c
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f00a f926 	bl	800ca30 <strchr>
 80027e4:	61f8      	str	r0, [r7, #28]
    if (start != NULL) {
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d04b      	beq.n	8002884 <extractValues_Carrier+0xb4>
        start++;  // '<' karakterinin sonrasına geç
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	3301      	adds	r3, #1
 80027f0:	61fb      	str	r3, [r7, #28]
        const char* end = strchr(start, '>');
 80027f2:	213e      	movs	r1, #62	@ 0x3e
 80027f4:	69f8      	ldr	r0, [r7, #28]
 80027f6:	f00a f91b 	bl	800ca30 <strchr>
 80027fa:	61b8      	str	r0, [r7, #24]
        if (end != NULL) {
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d039      	beq.n	8002876 <extractValues_Carrier+0xa6>
            size_t length = end - start;  // İlk '<' ve '>' arasındaki uzunluk
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	617b      	str	r3, [r7, #20]
            strncpy(value1, start, length);  // İlk değeri kopyala
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	69f9      	ldr	r1, [r7, #28]
 800280e:	68b8      	ldr	r0, [r7, #8]
 8002810:	f00a f92d 	bl	800ca6e <strncpy>
            value1[length] = '\0';  // Null karakter ekle
 8002814:	68ba      	ldr	r2, [r7, #8]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	4413      	add	r3, r2
 800281a:	2200      	movs	r2, #0
 800281c:	701a      	strb	r2, [r3, #0]

            start = strchr(end + 1, '<');
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	3301      	adds	r3, #1
 8002822:	213c      	movs	r1, #60	@ 0x3c
 8002824:	4618      	mov	r0, r3
 8002826:	f00a f903 	bl	800ca30 <strchr>
 800282a:	61f8      	str	r0, [r7, #28]
            if (start != NULL) {
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d01d      	beq.n	800286e <extractValues_Carrier+0x9e>
                start++;  // İkinci '<' karakterinin sonrasına geç
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3301      	adds	r3, #1
 8002836:	61fb      	str	r3, [r7, #28]
                end = strchr(start, '>');
 8002838:	213e      	movs	r1, #62	@ 0x3e
 800283a:	69f8      	ldr	r0, [r7, #28]
 800283c:	f00a f8f8 	bl	800ca30 <strchr>
 8002840:	61b8      	str	r0, [r7, #24]
                if (end != NULL) {
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00e      	beq.n	8002866 <extractValues_Carrier+0x96>
                    length = end - start;  // İkinci '<' ve '>' arasındaki uzunluk
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	617b      	str	r3, [r7, #20]
                    strncpy(value2, start, length);  // İkinci değeri kopyala
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	69f9      	ldr	r1, [r7, #28]
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f00a f90a 	bl	800ca6e <strncpy>
                    value2[length] = '\0';  // Null karakter ekle
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	4413      	add	r3, r2
 8002860:	2200      	movs	r2, #0
 8002862:	701a      	strb	r2, [r3, #0]
    } else {
        value1[0] = '\0';  // İlk '<' bulunamazsa boş string döndür
        value2[0] = '\0';  // İkinci '<' ve '>' arasında veri yoksa boş string döndür
    }

}
 8002864:	e014      	b.n	8002890 <extractValues_Carrier+0xc0>
                    value2[0] = '\0';  // İkinci değer yoksa boş string döndür
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	701a      	strb	r2, [r3, #0]
}
 800286c:	e010      	b.n	8002890 <extractValues_Carrier+0xc0>
                value2[0] = '\0';  // İkinci '<' bulunamazsa boş string döndür
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	701a      	strb	r2, [r3, #0]
}
 8002874:	e00c      	b.n	8002890 <extractValues_Carrier+0xc0>
            value1[0] = '\0';  // İlk '>' bulunamazsa boş string döndür
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2200      	movs	r2, #0
 800287a:	701a      	strb	r2, [r3, #0]
            value2[0] = '\0';  // İkinci '<' ve '>' arasında veri yoksa boş string döndür
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	701a      	strb	r2, [r3, #0]
}
 8002882:	e005      	b.n	8002890 <extractValues_Carrier+0xc0>
        value1[0] = '\0';  // İlk '<' bulunamazsa boş string döndür
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2200      	movs	r2, #0
 8002888:	701a      	strb	r2, [r3, #0]
        value2[0] = '\0';  // İkinci '<' ve '>' arasında veri yoksa boş string döndür
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]
}
 8002890:	bf00      	nop
 8002892:	3720      	adds	r7, #32
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <extractValues_GroundStation>:

void extractValues_GroundStation(const char* input, char* value3){
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
	 const char* start = strchr(input, '<');					/*! input dizisi içinde İlk '<' karakterini bul ve adresini sakla*/
 80028a2:	213c      	movs	r1, #60	@ 0x3c
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f00a f8c3 	bl	800ca30 <strchr>
 80028aa:	6178      	str	r0, [r7, #20]
	 if (start != NULL) {										/*! Eğer başlangıç adresi NULL dan farklıysa bu dizide veri var anlamına geliyor*/
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d018      	beq.n	80028e4 <extractValues_GroundStation+0x4c>
		 start+=8;  											/*! '<' karakterinin sonrasına geç adresini +1byte arttırmayı sağlıyor  */
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	3308      	adds	r3, #8
 80028b6:	617b      	str	r3, [r7, #20]
		 const char* end = strchr(start, '>');					/*! Start adresinden itibaren ilk '>' verisine ulaş ve onun adresini al */
 80028b8:	213e      	movs	r1, #62	@ 0x3e
 80028ba:	6978      	ldr	r0, [r7, #20]
 80028bc:	f00a f8b8 	bl	800ca30 <strchr>
 80028c0:	6138      	str	r0, [r7, #16]
		 if (end != NULL) {										/*! Bitiş adresi de NULL karakterden farklıysa burada da veri var		*/
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00d      	beq.n	80028e4 <extractValues_GroundStation+0x4c>
			 size_t length = end - start;  						/*! İlk '<' ve '>' arasındaki uzunluğu al 1byte*length olmuş olcak 		*/
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	60fb      	str	r3, [r7, #12]
			 strncpy(value3, start, length);  					/*! Start dizisinden Value3 dizisine lenght kadarını kopyala	*/
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	6979      	ldr	r1, [r7, #20]
 80028d4:	6838      	ldr	r0, [r7, #0]
 80028d6:	f00a f8ca 	bl	800ca6e <strncpy>
			 value3[length] = '\0';  							/*! Null karakter ekle dizinin sonuna										*/
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4413      	add	r3, r2
 80028e0:	2200      	movs	r2, #0
 80028e2:	701a      	strb	r2, [r3, #0]
		 }

	 }

}
 80028e4:	bf00      	nop
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <bno055_assignI2C>:

#include "SubSys_Sensor_IMU_APP_Driver.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 80028f4:	4a04      	ldr	r2, [pc, #16]	@ (8002908 <bno055_assignI2C+0x1c>)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6013      	str	r3, [r2, #0]
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	20000334 	.word	0x20000334

0800290c <bno055_delay>:

void bno055_delay(int time) {
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4618      	mov	r0, r3
 8002918:	f001 fa84 	bl	8003e24 <HAL_Delay>
#endif
}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af02      	add	r7, sp, #8
 800292a:	4603      	mov	r3, r0
 800292c:	460a      	mov	r2, r1
 800292e:	71fb      	strb	r3, [r7, #7]
 8002930:	4613      	mov	r3, r2
 8002932:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	733b      	strb	r3, [r7, #12]
 8002938:	79bb      	ldrb	r3, [r7, #6]
 800293a:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 800293c:	4b5a      	ldr	r3, [pc, #360]	@ (8002aa8 <bno055_writeData+0x184>)
 800293e:	6818      	ldr	r0, [r3, #0]
 8002940:	f107 020c 	add.w	r2, r7, #12
 8002944:	230a      	movs	r3, #10
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	2302      	movs	r3, #2
 800294a:	2150      	movs	r1, #80	@ 0x50
 800294c:	f002 fd02 	bl	8005354 <HAL_I2C_Master_Transmit>
 8002950:	4603      	mov	r3, r0
 8002952:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8002954:	7dfb      	ldrb	r3, [r7, #23]
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 80a0 	beq.w	8002a9c <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 800295c:	7dfb      	ldrb	r3, [r7, #23]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d103      	bne.n	800296a <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8002962:	4852      	ldr	r0, [pc, #328]	@ (8002aac <bno055_writeData+0x188>)
 8002964:	f009 ff30 	bl	800c7c8 <puts>
 8002968:	e012      	b.n	8002990 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 800296a:	7dfb      	ldrb	r3, [r7, #23]
 800296c:	2b03      	cmp	r3, #3
 800296e:	d103      	bne.n	8002978 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8002970:	484f      	ldr	r0, [pc, #316]	@ (8002ab0 <bno055_writeData+0x18c>)
 8002972:	f009 ff29 	bl	800c7c8 <puts>
 8002976:	e00b      	b.n	8002990 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8002978:	7dfb      	ldrb	r3, [r7, #23]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d103      	bne.n	8002986 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 800297e:	484d      	ldr	r0, [pc, #308]	@ (8002ab4 <bno055_writeData+0x190>)
 8002980:	f009 ff22 	bl	800c7c8 <puts>
 8002984:	e004      	b.n	8002990 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8002986:	7dfb      	ldrb	r3, [r7, #23]
 8002988:	4619      	mov	r1, r3
 800298a:	484b      	ldr	r0, [pc, #300]	@ (8002ab8 <bno055_writeData+0x194>)
 800298c:	f009 feb4 	bl	800c6f8 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8002990:	4b45      	ldr	r3, [pc, #276]	@ (8002aa8 <bno055_writeData+0x184>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f003 fa43 	bl	8005e20 <HAL_I2C_GetError>
 800299a:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d07e      	beq.n	8002aa0 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d103      	bne.n	80029b0 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 80029a8:	4844      	ldr	r0, [pc, #272]	@ (8002abc <bno055_writeData+0x198>)
 80029aa:	f009 ff0d 	bl	800c7c8 <puts>
 80029ae:	e021      	b.n	80029f4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d103      	bne.n	80029be <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 80029b6:	4842      	ldr	r0, [pc, #264]	@ (8002ac0 <bno055_writeData+0x19c>)
 80029b8:	f009 ff06 	bl	800c7c8 <puts>
 80029bc:	e01a      	b.n	80029f4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d103      	bne.n	80029cc <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 80029c4:	483f      	ldr	r0, [pc, #252]	@ (8002ac4 <bno055_writeData+0x1a0>)
 80029c6:	f009 feff 	bl	800c7c8 <puts>
 80029ca:	e013      	b.n	80029f4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d103      	bne.n	80029da <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 80029d2:	483d      	ldr	r0, [pc, #244]	@ (8002ac8 <bno055_writeData+0x1a4>)
 80029d4:	f009 fef8 	bl	800c7c8 <puts>
 80029d8:	e00c      	b.n	80029f4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	2b10      	cmp	r3, #16
 80029de:	d103      	bne.n	80029e8 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 80029e0:	483a      	ldr	r0, [pc, #232]	@ (8002acc <bno055_writeData+0x1a8>)
 80029e2:	f009 fef1 	bl	800c7c8 <puts>
 80029e6:	e005      	b.n	80029f4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	2b20      	cmp	r3, #32
 80029ec:	d102      	bne.n	80029f4 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 80029ee:	4838      	ldr	r0, [pc, #224]	@ (8002ad0 <bno055_writeData+0x1ac>)
 80029f0:	f009 feea 	bl	800c7c8 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 80029f4:	4b2c      	ldr	r3, [pc, #176]	@ (8002aa8 <bno055_writeData+0x184>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f003 fa03 	bl	8005e04 <HAL_I2C_GetState>
 80029fe:	4603      	mov	r3, r0
 8002a00:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d103      	bne.n	8002a10 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8002a08:	4832      	ldr	r0, [pc, #200]	@ (8002ad4 <bno055_writeData+0x1b0>)
 8002a0a:	f009 fedd 	bl	800c7c8 <puts>
 8002a0e:	e048      	b.n	8002aa2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	2b20      	cmp	r3, #32
 8002a14:	d103      	bne.n	8002a1e <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8002a16:	482f      	ldr	r0, [pc, #188]	@ (8002ad4 <bno055_writeData+0x1b0>)
 8002a18:	f009 fed6 	bl	800c7c8 <puts>
 8002a1c:	e041      	b.n	8002aa2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	2b24      	cmp	r3, #36	@ 0x24
 8002a22:	d103      	bne.n	8002a2c <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8002a24:	482c      	ldr	r0, [pc, #176]	@ (8002ad8 <bno055_writeData+0x1b4>)
 8002a26:	f009 fecf 	bl	800c7c8 <puts>
 8002a2a:	e03a      	b.n	8002aa2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	2b21      	cmp	r3, #33	@ 0x21
 8002a30:	d103      	bne.n	8002a3a <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8002a32:	482a      	ldr	r0, [pc, #168]	@ (8002adc <bno055_writeData+0x1b8>)
 8002a34:	f009 fec8 	bl	800c7c8 <puts>
 8002a38:	e033      	b.n	8002aa2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
 8002a3c:	2b22      	cmp	r3, #34	@ 0x22
 8002a3e:	d103      	bne.n	8002a48 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8002a40:	4827      	ldr	r0, [pc, #156]	@ (8002ae0 <bno055_writeData+0x1bc>)
 8002a42:	f009 fec1 	bl	800c7c8 <puts>
 8002a46:	e02c      	b.n	8002aa2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	2b28      	cmp	r3, #40	@ 0x28
 8002a4c:	d103      	bne.n	8002a56 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8002a4e:	4825      	ldr	r0, [pc, #148]	@ (8002ae4 <bno055_writeData+0x1c0>)
 8002a50:	f009 feba 	bl	800c7c8 <puts>
 8002a54:	e025      	b.n	8002aa2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	2b29      	cmp	r3, #41	@ 0x29
 8002a5a:	d103      	bne.n	8002a64 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8002a5c:	4822      	ldr	r0, [pc, #136]	@ (8002ae8 <bno055_writeData+0x1c4>)
 8002a5e:	f009 feb3 	bl	800c7c8 <puts>
 8002a62:	e01e      	b.n	8002aa2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a68:	d103      	bne.n	8002a72 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8002a6a:	4820      	ldr	r0, [pc, #128]	@ (8002aec <bno055_writeData+0x1c8>)
 8002a6c:	f009 feac 	bl	800c7c8 <puts>
 8002a70:	e017      	b.n	8002aa2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
 8002a74:	2b60      	cmp	r3, #96	@ 0x60
 8002a76:	d103      	bne.n	8002a80 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8002a78:	481d      	ldr	r0, [pc, #116]	@ (8002af0 <bno055_writeData+0x1cc>)
 8002a7a:	f009 fea5 	bl	800c7c8 <puts>
 8002a7e:	e010      	b.n	8002aa2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
 8002a82:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a84:	d103      	bne.n	8002a8e <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8002a86:	481b      	ldr	r0, [pc, #108]	@ (8002af4 <bno055_writeData+0x1d0>)
 8002a88:	f009 fe9e 	bl	800c7c8 <puts>
 8002a8c:	e009      	b.n	8002aa2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	2be0      	cmp	r3, #224	@ 0xe0
 8002a92:	d106      	bne.n	8002aa2 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8002a94:	4818      	ldr	r0, [pc, #96]	@ (8002af8 <bno055_writeData+0x1d4>)
 8002a96:	f009 fe97 	bl	800c7c8 <puts>
 8002a9a:	e002      	b.n	8002aa2 <bno055_writeData+0x17e>
    return;
 8002a9c:	bf00      	nop
 8002a9e:	e000      	b.n	8002aa2 <bno055_writeData+0x17e>
    return;
 8002aa0:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	20000334 	.word	0x20000334
 8002aac:	08010ca4 	.word	0x08010ca4
 8002ab0:	08010cc8 	.word	0x08010cc8
 8002ab4:	08010cf0 	.word	0x08010cf0
 8002ab8:	08010d14 	.word	0x08010d14
 8002abc:	08010d2c 	.word	0x08010d2c
 8002ac0:	08010d40 	.word	0x08010d40
 8002ac4:	08010d54 	.word	0x08010d54
 8002ac8:	08010d68 	.word	0x08010d68
 8002acc:	08010d7c 	.word	0x08010d7c
 8002ad0:	08010d90 	.word	0x08010d90
 8002ad4:	08010da8 	.word	0x08010da8
 8002ad8:	08010dc0 	.word	0x08010dc0
 8002adc:	08010dd4 	.word	0x08010dd4
 8002ae0:	08010dec 	.word	0x08010dec
 8002ae4:	08010e04 	.word	0x08010e04
 8002ae8:	08010e1c 	.word	0x08010e1c
 8002aec:	08010e3c 	.word	0x08010e3c
 8002af0:	08010e5c 	.word	0x08010e5c
 8002af4:	08010e74 	.word	0x08010e74
 8002af8:	08010e8c 	.word	0x08010e8c

08002afc <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	4603      	mov	r3, r0
 8002b04:	6039      	str	r1, [r7, #0]
 8002b06:	71fb      	strb	r3, [r7, #7]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b3c <bno055_readData+0x40>)
 8002b0e:	6818      	ldr	r0, [r3, #0]
 8002b10:	1dfa      	adds	r2, r7, #7
 8002b12:	2364      	movs	r3, #100	@ 0x64
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	2301      	movs	r3, #1
 8002b18:	2150      	movs	r1, #80	@ 0x50
 8002b1a:	f002 fc1b 	bl	8005354 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8002b1e:	4b07      	ldr	r3, [pc, #28]	@ (8002b3c <bno055_readData+0x40>)
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	79bb      	ldrb	r3, [r7, #6]
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	2264      	movs	r2, #100	@ 0x64
 8002b28:	9200      	str	r2, [sp, #0]
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	2150      	movs	r1, #80	@ 0x50
 8002b2e:	f002 fd0f 	bl	8005550 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000334 	.word	0x20000334

08002b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b44:	f001 f8fc 	bl	8003d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b48:	f000 f838 	bl	8002bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b4c:	f000 fb50 	bl	80031f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b50:	f000 fb26 	bl	80031a0 <MX_DMA_Init>
  MX_I2C1_Init();
 8002b54:	f000 f8ec 	bl	8002d30 <MX_I2C1_Init>
  MX_ADC1_Init();
 8002b58:	f000 f898 	bl	8002c8c <MX_ADC1_Init>
  MX_TIM3_Init();
 8002b5c:	f000 fa72 	bl	8003044 <MX_TIM3_Init>
  MX_SDIO_SD_Init();
 8002b60:	f000 f970 	bl	8002e44 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8002b64:	f007 fde8 	bl	800a738 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8002b68:	f000 fac6 	bl	80030f8 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8002b6c:	f000 f90e 	bl	8002d8c <MX_I2C2_Init>
  MX_TIM1_Init();
 8002b70:	f000 f98a 	bl	8002e88 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002b74:	f000 fa0c 	bl	8002f90 <MX_TIM2_Init>
  MX_I2C3_Init();
 8002b78:	f000 f936 	bl	8002de8 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8002b7c:	f000 fae6 	bl	800314c <MX_USART2_UART_Init>
  /******<<< SENSOR BATTERY INIT END <<<******/


  /******>>> SENSOR TPGVH INITIALIZATION BEGIN >>>******/
  	#ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_SENSOR_TPGVH_H
  	MS5611.I2C_ADDRESS = MS5611_I2C_ADDRESS_H;
 8002b80:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb0 <main+0x70>)
 8002b82:	22ee      	movs	r2, #238	@ 0xee
 8002b84:	809a      	strh	r2, [r3, #4]
  	MS5611.i2c = &hi2c1;
 8002b86:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb0 <main+0x70>)
 8002b88:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb4 <main+0x74>)
 8002b8a:	601a      	str	r2, [r3, #0]
  	MS5611.Ref_Alt_Sel = 'm';
 8002b8c:	4b08      	ldr	r3, [pc, #32]	@ (8002bb0 <main+0x70>)
 8002b8e:	226d      	movs	r2, #109	@ 0x6d
 8002b90:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
  	MS5611_Init(&MS5611);
 8002b94:	4806      	ldr	r0, [pc, #24]	@ (8002bb0 <main+0x70>)
 8002b96:	f7fe ffc3 	bl	8001b20 <MS5611_Init>

  /******>>> SENSOR IMU  INITIALIZATION BEGIN >>>******/
	#ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_SENSOR_IMU_APP_H

	 //*! BNO055 OR MPU9250 IMU SENSOR WİLL BE USED*//
	bno055_assignI2C(&hi2c2);
 8002b9a:	4807      	ldr	r0, [pc, #28]	@ (8002bb8 <main+0x78>)
 8002b9c:	f7ff fea6 	bl	80028ec <bno055_assignI2C>
	bno055_setup();
 8002ba0:	f7fe fdc8 	bl	8001734 <bno055_setup>
	bno055_setOperationModeNDOF();
 8002ba4:	f7fe fdb3 	bl	800170e <bno055_setOperationModeNDOF>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 SubSys_SatelliteMission_Continue();
 8002ba8:	f7fe fae4 	bl	8001174 <SubSys_SatelliteMission_Continue>
 8002bac:	e7fc      	b.n	8002ba8 <main+0x68>
 8002bae:	bf00      	nop
 8002bb0:	20000728 	.word	0x20000728
 8002bb4:	20000380 	.word	0x20000380
 8002bb8:	200003d4 	.word	0x200003d4

08002bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b094      	sub	sp, #80	@ 0x50
 8002bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bc2:	f107 0320 	add.w	r3, r7, #32
 8002bc6:	2230      	movs	r2, #48	@ 0x30
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f009 ff28 	bl	800ca20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bd0:	f107 030c 	add.w	r3, r7, #12
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002be0:	2300      	movs	r3, #0
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	4b27      	ldr	r3, [pc, #156]	@ (8002c84 <SystemClock_Config+0xc8>)
 8002be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be8:	4a26      	ldr	r2, [pc, #152]	@ (8002c84 <SystemClock_Config+0xc8>)
 8002bea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bee:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bf0:	4b24      	ldr	r3, [pc, #144]	@ (8002c84 <SystemClock_Config+0xc8>)
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	607b      	str	r3, [r7, #4]
 8002c00:	4b21      	ldr	r3, [pc, #132]	@ (8002c88 <SystemClock_Config+0xcc>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a20      	ldr	r2, [pc, #128]	@ (8002c88 <SystemClock_Config+0xcc>)
 8002c06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8002c88 <SystemClock_Config+0xcc>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002c14:	607b      	str	r3, [r7, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c20:	2310      	movs	r3, #16
 8002c22:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c24:	2302      	movs	r3, #2
 8002c26:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002c2c:	2308      	movs	r3, #8
 8002c2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002c30:	2348      	movs	r3, #72	@ 0x48
 8002c32:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c34:	2302      	movs	r3, #2
 8002c36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c3c:	f107 0320 	add.w	r3, r7, #32
 8002c40:	4618      	mov	r0, r3
 8002c42:	f003 fd15 	bl	8006670 <HAL_RCC_OscConfig>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002c4c:	f000 fb52 	bl	80032f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c50:	230f      	movs	r3, #15
 8002c52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c54:	2302      	movs	r3, #2
 8002c56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c66:	f107 030c 	add.w	r3, r7, #12
 8002c6a:	2102      	movs	r1, #2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f003 ff77 	bl	8006b60 <HAL_RCC_ClockConfig>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002c78:	f000 fb3c 	bl	80032f4 <Error_Handler>
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	3750      	adds	r7, #80	@ 0x50
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40007000 	.word	0x40007000

08002c8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c92:	463b      	mov	r3, r7
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002c9e:	4b21      	ldr	r3, [pc, #132]	@ (8002d24 <MX_ADC1_Init+0x98>)
 8002ca0:	4a21      	ldr	r2, [pc, #132]	@ (8002d28 <MX_ADC1_Init+0x9c>)
 8002ca2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8002d24 <MX_ADC1_Init+0x98>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002caa:	4b1e      	ldr	r3, [pc, #120]	@ (8002d24 <MX_ADC1_Init+0x98>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8002d24 <MX_ADC1_Init+0x98>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d24 <MX_ADC1_Init+0x98>)
 8002cb8:	2201      	movs	r2, #1
 8002cba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cbc:	4b19      	ldr	r3, [pc, #100]	@ (8002d24 <MX_ADC1_Init+0x98>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002cc4:	4b17      	ldr	r3, [pc, #92]	@ (8002d24 <MX_ADC1_Init+0x98>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002cca:	4b16      	ldr	r3, [pc, #88]	@ (8002d24 <MX_ADC1_Init+0x98>)
 8002ccc:	4a17      	ldr	r2, [pc, #92]	@ (8002d2c <MX_ADC1_Init+0xa0>)
 8002cce:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cd0:	4b14      	ldr	r3, [pc, #80]	@ (8002d24 <MX_ADC1_Init+0x98>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002cd6:	4b13      	ldr	r3, [pc, #76]	@ (8002d24 <MX_ADC1_Init+0x98>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002cdc:	4b11      	ldr	r3, [pc, #68]	@ (8002d24 <MX_ADC1_Init+0x98>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d24 <MX_ADC1_Init+0x98>)
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002cea:	480e      	ldr	r0, [pc, #56]	@ (8002d24 <MX_ADC1_Init+0x98>)
 8002cec:	f001 f8be 	bl	8003e6c <HAL_ADC_Init>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002cf6:	f000 fafd 	bl	80032f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d06:	463b      	mov	r3, r7
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4806      	ldr	r0, [pc, #24]	@ (8002d24 <MX_ADC1_Init+0x98>)
 8002d0c:	f001 f8f2 	bl	8003ef4 <HAL_ADC_ConfigChannel>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002d16:	f000 faed 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000338 	.word	0x20000338
 8002d28:	40012000 	.word	0x40012000
 8002d2c:	0f000001 	.word	0x0f000001

08002d30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d34:	4b12      	ldr	r3, [pc, #72]	@ (8002d80 <MX_I2C1_Init+0x50>)
 8002d36:	4a13      	ldr	r2, [pc, #76]	@ (8002d84 <MX_I2C1_Init+0x54>)
 8002d38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002d3a:	4b11      	ldr	r3, [pc, #68]	@ (8002d80 <MX_I2C1_Init+0x50>)
 8002d3c:	4a12      	ldr	r2, [pc, #72]	@ (8002d88 <MX_I2C1_Init+0x58>)
 8002d3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d40:	4b0f      	ldr	r3, [pc, #60]	@ (8002d80 <MX_I2C1_Init+0x50>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d46:	4b0e      	ldr	r3, [pc, #56]	@ (8002d80 <MX_I2C1_Init+0x50>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d80 <MX_I2C1_Init+0x50>)
 8002d4e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d54:	4b0a      	ldr	r3, [pc, #40]	@ (8002d80 <MX_I2C1_Init+0x50>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d5a:	4b09      	ldr	r3, [pc, #36]	@ (8002d80 <MX_I2C1_Init+0x50>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d60:	4b07      	ldr	r3, [pc, #28]	@ (8002d80 <MX_I2C1_Init+0x50>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d66:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <MX_I2C1_Init+0x50>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d6c:	4804      	ldr	r0, [pc, #16]	@ (8002d80 <MX_I2C1_Init+0x50>)
 8002d6e:	f002 f9ad 	bl	80050cc <HAL_I2C_Init>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002d78:	f000 fabc 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d7c:	bf00      	nop
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	20000380 	.word	0x20000380
 8002d84:	40005400 	.word	0x40005400
 8002d88:	000186a0 	.word	0x000186a0

08002d8c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002d90:	4b12      	ldr	r3, [pc, #72]	@ (8002ddc <MX_I2C2_Init+0x50>)
 8002d92:	4a13      	ldr	r2, [pc, #76]	@ (8002de0 <MX_I2C2_Init+0x54>)
 8002d94:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002d96:	4b11      	ldr	r3, [pc, #68]	@ (8002ddc <MX_I2C2_Init+0x50>)
 8002d98:	4a12      	ldr	r2, [pc, #72]	@ (8002de4 <MX_I2C2_Init+0x58>)
 8002d9a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ddc <MX_I2C2_Init+0x50>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002da2:	4b0e      	ldr	r3, [pc, #56]	@ (8002ddc <MX_I2C2_Init+0x50>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002da8:	4b0c      	ldr	r3, [pc, #48]	@ (8002ddc <MX_I2C2_Init+0x50>)
 8002daa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002dae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002db0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ddc <MX_I2C2_Init+0x50>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002db6:	4b09      	ldr	r3, [pc, #36]	@ (8002ddc <MX_I2C2_Init+0x50>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002dbc:	4b07      	ldr	r3, [pc, #28]	@ (8002ddc <MX_I2C2_Init+0x50>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002dc2:	4b06      	ldr	r3, [pc, #24]	@ (8002ddc <MX_I2C2_Init+0x50>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002dc8:	4804      	ldr	r0, [pc, #16]	@ (8002ddc <MX_I2C2_Init+0x50>)
 8002dca:	f002 f97f 	bl	80050cc <HAL_I2C_Init>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002dd4:	f000 fa8e 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002dd8:	bf00      	nop
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	200003d4 	.word	0x200003d4
 8002de0:	40005800 	.word	0x40005800
 8002de4:	000186a0 	.word	0x000186a0

08002de8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002dec:	4b12      	ldr	r3, [pc, #72]	@ (8002e38 <MX_I2C3_Init+0x50>)
 8002dee:	4a13      	ldr	r2, [pc, #76]	@ (8002e3c <MX_I2C3_Init+0x54>)
 8002df0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002df2:	4b11      	ldr	r3, [pc, #68]	@ (8002e38 <MX_I2C3_Init+0x50>)
 8002df4:	4a12      	ldr	r2, [pc, #72]	@ (8002e40 <MX_I2C3_Init+0x58>)
 8002df6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002df8:	4b0f      	ldr	r3, [pc, #60]	@ (8002e38 <MX_I2C3_Init+0x50>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8002e38 <MX_I2C3_Init+0x50>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e04:	4b0c      	ldr	r3, [pc, #48]	@ (8002e38 <MX_I2C3_Init+0x50>)
 8002e06:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e0a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e38 <MX_I2C3_Init+0x50>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002e12:	4b09      	ldr	r3, [pc, #36]	@ (8002e38 <MX_I2C3_Init+0x50>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e18:	4b07      	ldr	r3, [pc, #28]	@ (8002e38 <MX_I2C3_Init+0x50>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e1e:	4b06      	ldr	r3, [pc, #24]	@ (8002e38 <MX_I2C3_Init+0x50>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002e24:	4804      	ldr	r0, [pc, #16]	@ (8002e38 <MX_I2C3_Init+0x50>)
 8002e26:	f002 f951 	bl	80050cc <HAL_I2C_Init>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002e30:	f000 fa60 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002e34:	bf00      	nop
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	20000428 	.word	0x20000428
 8002e3c:	40005c00 	.word	0x40005c00
 8002e40:	000186a0 	.word	0x000186a0

08002e44 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002e48:	4b0d      	ldr	r3, [pc, #52]	@ (8002e80 <MX_SDIO_SD_Init+0x3c>)
 8002e4a:	4a0e      	ldr	r2, [pc, #56]	@ (8002e84 <MX_SDIO_SD_Init+0x40>)
 8002e4c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002e80 <MX_SDIO_SD_Init+0x3c>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002e54:	4b0a      	ldr	r3, [pc, #40]	@ (8002e80 <MX_SDIO_SD_Init+0x3c>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002e5a:	4b09      	ldr	r3, [pc, #36]	@ (8002e80 <MX_SDIO_SD_Init+0x3c>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8002e60:	4b07      	ldr	r3, [pc, #28]	@ (8002e80 <MX_SDIO_SD_Init+0x3c>)
 8002e62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e66:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002e68:	4b05      	ldr	r3, [pc, #20]	@ (8002e80 <MX_SDIO_SD_Init+0x3c>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8002e6e:	4b04      	ldr	r3, [pc, #16]	@ (8002e80 <MX_SDIO_SD_Init+0x3c>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002e74:	bf00      	nop
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	2000047c 	.word	0x2000047c
 8002e84:	40012c00 	.word	0x40012c00

08002e88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b092      	sub	sp, #72	@ 0x48
 8002e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e8e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	611a      	str	r2, [r3, #16]
 8002ea8:	615a      	str	r2, [r3, #20]
 8002eaa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002eac:	1d3b      	adds	r3, r7, #4
 8002eae:	2220      	movs	r2, #32
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f009 fdb4 	bl	800ca20 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002eb8:	4b33      	ldr	r3, [pc, #204]	@ (8002f88 <MX_TIM1_Init+0x100>)
 8002eba:	4a34      	ldr	r2, [pc, #208]	@ (8002f8c <MX_TIM1_Init+0x104>)
 8002ebc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1440-1;
 8002ebe:	4b32      	ldr	r3, [pc, #200]	@ (8002f88 <MX_TIM1_Init+0x100>)
 8002ec0:	f240 529f 	movw	r2, #1439	@ 0x59f
 8002ec4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ec6:	4b30      	ldr	r3, [pc, #192]	@ (8002f88 <MX_TIM1_Init+0x100>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002ecc:	4b2e      	ldr	r3, [pc, #184]	@ (8002f88 <MX_TIM1_Init+0x100>)
 8002ece:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002ed2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ed4:	4b2c      	ldr	r3, [pc, #176]	@ (8002f88 <MX_TIM1_Init+0x100>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002eda:	4b2b      	ldr	r3, [pc, #172]	@ (8002f88 <MX_TIM1_Init+0x100>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ee0:	4b29      	ldr	r3, [pc, #164]	@ (8002f88 <MX_TIM1_Init+0x100>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002ee6:	4828      	ldr	r0, [pc, #160]	@ (8002f88 <MX_TIM1_Init+0x100>)
 8002ee8:	f005 fb54 	bl	8008594 <HAL_TIM_PWM_Init>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002ef2:	f000 f9ff 	bl	80032f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002efa:	2300      	movs	r3, #0
 8002efc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002efe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002f02:	4619      	mov	r1, r3
 8002f04:	4820      	ldr	r0, [pc, #128]	@ (8002f88 <MX_TIM1_Init+0x100>)
 8002f06:	f005 fe6f 	bl	8008be8 <HAL_TIMEx_MasterConfigSynchronization>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8002f10:	f000 f9f0 	bl	80032f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f14:	2360      	movs	r3, #96	@ 0x60
 8002f16:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f20:	2300      	movs	r3, #0
 8002f22:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f24:	2300      	movs	r3, #0
 8002f26:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f34:	2204      	movs	r2, #4
 8002f36:	4619      	mov	r1, r3
 8002f38:	4813      	ldr	r0, [pc, #76]	@ (8002f88 <MX_TIM1_Init+0x100>)
 8002f3a:	f005 fb7b 	bl	8008634 <HAL_TIM_PWM_ConfigChannel>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8002f44:	f000 f9d6 	bl	80032f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f54:	2300      	movs	r3, #0
 8002f56:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f60:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f62:	2300      	movs	r3, #0
 8002f64:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002f66:	1d3b      	adds	r3, r7, #4
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4807      	ldr	r0, [pc, #28]	@ (8002f88 <MX_TIM1_Init+0x100>)
 8002f6c:	f005 feaa 	bl	8008cc4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8002f76:	f000 f9bd 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002f7a:	4803      	ldr	r0, [pc, #12]	@ (8002f88 <MX_TIM1_Init+0x100>)
 8002f7c:	f000 fc6a 	bl	8003854 <HAL_TIM_MspPostInit>

}
 8002f80:	bf00      	nop
 8002f82:	3748      	adds	r7, #72	@ 0x48
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	200005c0 	.word	0x200005c0
 8002f8c:	40010000 	.word	0x40010000

08002f90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08a      	sub	sp, #40	@ 0x28
 8002f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f96:	f107 0320 	add.w	r3, r7, #32
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fa0:	1d3b      	adds	r3, r7, #4
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	605a      	str	r2, [r3, #4]
 8002fa8:	609a      	str	r2, [r3, #8]
 8002faa:	60da      	str	r2, [r3, #12]
 8002fac:	611a      	str	r2, [r3, #16]
 8002fae:	615a      	str	r2, [r3, #20]
 8002fb0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002fb2:	4b23      	ldr	r3, [pc, #140]	@ (8003040 <MX_TIM2_Init+0xb0>)
 8002fb4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002fb8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440-1;
 8002fba:	4b21      	ldr	r3, [pc, #132]	@ (8003040 <MX_TIM2_Init+0xb0>)
 8002fbc:	f240 529f 	movw	r2, #1439	@ 0x59f
 8002fc0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8003040 <MX_TIM2_Init+0xb0>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8003040 <MX_TIM2_Init+0xb0>)
 8002fca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002fce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8003040 <MX_TIM2_Init+0xb0>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8003040 <MX_TIM2_Init+0xb0>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002fdc:	4818      	ldr	r0, [pc, #96]	@ (8003040 <MX_TIM2_Init+0xb0>)
 8002fde:	f005 fad9 	bl	8008594 <HAL_TIM_PWM_Init>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002fe8:	f000 f984 	bl	80032f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fec:	2300      	movs	r3, #0
 8002fee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ff4:	f107 0320 	add.w	r3, r7, #32
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4811      	ldr	r0, [pc, #68]	@ (8003040 <MX_TIM2_Init+0xb0>)
 8002ffc:	f005 fdf4 	bl	8008be8 <HAL_TIMEx_MasterConfigSynchronization>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8003006:	f000 f975 	bl	80032f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800300a:	2360      	movs	r3, #96	@ 0x60
 800300c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003012:	2300      	movs	r3, #0
 8003014:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800301a:	1d3b      	adds	r3, r7, #4
 800301c:	2200      	movs	r2, #0
 800301e:	4619      	mov	r1, r3
 8003020:	4807      	ldr	r0, [pc, #28]	@ (8003040 <MX_TIM2_Init+0xb0>)
 8003022:	f005 fb07 	bl	8008634 <HAL_TIM_PWM_ConfigChannel>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800302c:	f000 f962 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003030:	4803      	ldr	r0, [pc, #12]	@ (8003040 <MX_TIM2_Init+0xb0>)
 8003032:	f000 fc0f 	bl	8003854 <HAL_TIM_MspPostInit>

}
 8003036:	bf00      	nop
 8003038:	3728      	adds	r7, #40	@ 0x28
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20000608 	.word	0x20000608

08003044 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08a      	sub	sp, #40	@ 0x28
 8003048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800304a:	f107 0320 	add.w	r3, r7, #32
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003054:	1d3b      	adds	r3, r7, #4
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	605a      	str	r2, [r3, #4]
 800305c:	609a      	str	r2, [r3, #8]
 800305e:	60da      	str	r2, [r3, #12]
 8003060:	611a      	str	r2, [r3, #16]
 8003062:	615a      	str	r2, [r3, #20]
 8003064:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003066:	4b22      	ldr	r3, [pc, #136]	@ (80030f0 <MX_TIM3_Init+0xac>)
 8003068:	4a22      	ldr	r2, [pc, #136]	@ (80030f4 <MX_TIM3_Init+0xb0>)
 800306a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 263-1;
 800306c:	4b20      	ldr	r3, [pc, #128]	@ (80030f0 <MX_TIM3_Init+0xac>)
 800306e:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8003072:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003074:	4b1e      	ldr	r3, [pc, #120]	@ (80030f0 <MX_TIM3_Init+0xac>)
 8003076:	2200      	movs	r2, #0
 8003078:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800307a:	4b1d      	ldr	r3, [pc, #116]	@ (80030f0 <MX_TIM3_Init+0xac>)
 800307c:	2263      	movs	r2, #99	@ 0x63
 800307e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003080:	4b1b      	ldr	r3, [pc, #108]	@ (80030f0 <MX_TIM3_Init+0xac>)
 8003082:	2200      	movs	r2, #0
 8003084:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003086:	4b1a      	ldr	r3, [pc, #104]	@ (80030f0 <MX_TIM3_Init+0xac>)
 8003088:	2200      	movs	r2, #0
 800308a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800308c:	4818      	ldr	r0, [pc, #96]	@ (80030f0 <MX_TIM3_Init+0xac>)
 800308e:	f005 fa81 	bl	8008594 <HAL_TIM_PWM_Init>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003098:	f000 f92c 	bl	80032f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800309c:	2300      	movs	r3, #0
 800309e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030a0:	2300      	movs	r3, #0
 80030a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030a4:	f107 0320 	add.w	r3, r7, #32
 80030a8:	4619      	mov	r1, r3
 80030aa:	4811      	ldr	r0, [pc, #68]	@ (80030f0 <MX_TIM3_Init+0xac>)
 80030ac:	f005 fd9c 	bl	8008be8 <HAL_TIMEx_MasterConfigSynchronization>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80030b6:	f000 f91d 	bl	80032f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030ba:	2360      	movs	r3, #96	@ 0x60
 80030bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80030be:	2300      	movs	r3, #0
 80030c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030ca:	1d3b      	adds	r3, r7, #4
 80030cc:	2200      	movs	r2, #0
 80030ce:	4619      	mov	r1, r3
 80030d0:	4807      	ldr	r0, [pc, #28]	@ (80030f0 <MX_TIM3_Init+0xac>)
 80030d2:	f005 faaf 	bl	8008634 <HAL_TIM_PWM_ConfigChannel>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80030dc:	f000 f90a 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80030e0:	4803      	ldr	r0, [pc, #12]	@ (80030f0 <MX_TIM3_Init+0xac>)
 80030e2:	f000 fbb7 	bl	8003854 <HAL_TIM_MspPostInit>

}
 80030e6:	bf00      	nop
 80030e8:	3728      	adds	r7, #40	@ 0x28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20000650 	.word	0x20000650
 80030f4:	40000400 	.word	0x40000400

080030f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80030fc:	4b11      	ldr	r3, [pc, #68]	@ (8003144 <MX_USART1_UART_Init+0x4c>)
 80030fe:	4a12      	ldr	r2, [pc, #72]	@ (8003148 <MX_USART1_UART_Init+0x50>)
 8003100:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003102:	4b10      	ldr	r3, [pc, #64]	@ (8003144 <MX_USART1_UART_Init+0x4c>)
 8003104:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003108:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800310a:	4b0e      	ldr	r3, [pc, #56]	@ (8003144 <MX_USART1_UART_Init+0x4c>)
 800310c:	2200      	movs	r2, #0
 800310e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003110:	4b0c      	ldr	r3, [pc, #48]	@ (8003144 <MX_USART1_UART_Init+0x4c>)
 8003112:	2200      	movs	r2, #0
 8003114:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003116:	4b0b      	ldr	r3, [pc, #44]	@ (8003144 <MX_USART1_UART_Init+0x4c>)
 8003118:	2200      	movs	r2, #0
 800311a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800311c:	4b09      	ldr	r3, [pc, #36]	@ (8003144 <MX_USART1_UART_Init+0x4c>)
 800311e:	220c      	movs	r2, #12
 8003120:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003122:	4b08      	ldr	r3, [pc, #32]	@ (8003144 <MX_USART1_UART_Init+0x4c>)
 8003124:	2200      	movs	r2, #0
 8003126:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003128:	4b06      	ldr	r3, [pc, #24]	@ (8003144 <MX_USART1_UART_Init+0x4c>)
 800312a:	2200      	movs	r2, #0
 800312c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800312e:	4805      	ldr	r0, [pc, #20]	@ (8003144 <MX_USART1_UART_Init+0x4c>)
 8003130:	f005 fe1a 	bl	8008d68 <HAL_UART_Init>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800313a:	f000 f8db 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800313e:	bf00      	nop
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	20000698 	.word	0x20000698
 8003148:	40011000 	.word	0x40011000

0800314c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003150:	4b11      	ldr	r3, [pc, #68]	@ (8003198 <MX_USART2_UART_Init+0x4c>)
 8003152:	4a12      	ldr	r2, [pc, #72]	@ (800319c <MX_USART2_UART_Init+0x50>)
 8003154:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003156:	4b10      	ldr	r3, [pc, #64]	@ (8003198 <MX_USART2_UART_Init+0x4c>)
 8003158:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800315c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800315e:	4b0e      	ldr	r3, [pc, #56]	@ (8003198 <MX_USART2_UART_Init+0x4c>)
 8003160:	2200      	movs	r2, #0
 8003162:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003164:	4b0c      	ldr	r3, [pc, #48]	@ (8003198 <MX_USART2_UART_Init+0x4c>)
 8003166:	2200      	movs	r2, #0
 8003168:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800316a:	4b0b      	ldr	r3, [pc, #44]	@ (8003198 <MX_USART2_UART_Init+0x4c>)
 800316c:	2200      	movs	r2, #0
 800316e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003170:	4b09      	ldr	r3, [pc, #36]	@ (8003198 <MX_USART2_UART_Init+0x4c>)
 8003172:	220c      	movs	r2, #12
 8003174:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003176:	4b08      	ldr	r3, [pc, #32]	@ (8003198 <MX_USART2_UART_Init+0x4c>)
 8003178:	2200      	movs	r2, #0
 800317a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800317c:	4b06      	ldr	r3, [pc, #24]	@ (8003198 <MX_USART2_UART_Init+0x4c>)
 800317e:	2200      	movs	r2, #0
 8003180:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003182:	4805      	ldr	r0, [pc, #20]	@ (8003198 <MX_USART2_UART_Init+0x4c>)
 8003184:	f005 fdf0 	bl	8008d68 <HAL_UART_Init>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800318e:	f000 f8b1 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	200006e0 	.word	0x200006e0
 800319c:	40004400 	.word	0x40004400

080031a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80031a6:	2300      	movs	r3, #0
 80031a8:	607b      	str	r3, [r7, #4]
 80031aa:	4b10      	ldr	r3, [pc, #64]	@ (80031ec <MX_DMA_Init+0x4c>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ae:	4a0f      	ldr	r2, [pc, #60]	@ (80031ec <MX_DMA_Init+0x4c>)
 80031b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031b6:	4b0d      	ldr	r3, [pc, #52]	@ (80031ec <MX_DMA_Init+0x4c>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031be:	607b      	str	r3, [r7, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 3);
 80031c2:	2203      	movs	r2, #3
 80031c4:	2103      	movs	r1, #3
 80031c6:	203b      	movs	r0, #59	@ 0x3b
 80031c8:	f001 f99d 	bl	8004506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80031cc:	203b      	movs	r0, #59	@ 0x3b
 80031ce:	f001 f9b6 	bl	800453e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 3, 3);
 80031d2:	2203      	movs	r2, #3
 80031d4:	2103      	movs	r1, #3
 80031d6:	2045      	movs	r0, #69	@ 0x45
 80031d8:	f001 f995 	bl	8004506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80031dc:	2045      	movs	r0, #69	@ 0x45
 80031de:	f001 f9ae 	bl	800453e <HAL_NVIC_EnableIRQ>

}
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40023800 	.word	0x40023800

080031f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08a      	sub	sp, #40	@ 0x28
 80031f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f6:	f107 0314 	add.w	r3, r7, #20
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	605a      	str	r2, [r3, #4]
 8003200:	609a      	str	r2, [r3, #8]
 8003202:	60da      	str	r2, [r3, #12]
 8003204:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	4b37      	ldr	r3, [pc, #220]	@ (80032e8 <MX_GPIO_Init+0xf8>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320e:	4a36      	ldr	r2, [pc, #216]	@ (80032e8 <MX_GPIO_Init+0xf8>)
 8003210:	f043 0304 	orr.w	r3, r3, #4
 8003214:	6313      	str	r3, [r2, #48]	@ 0x30
 8003216:	4b34      	ldr	r3, [pc, #208]	@ (80032e8 <MX_GPIO_Init+0xf8>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	4b30      	ldr	r3, [pc, #192]	@ (80032e8 <MX_GPIO_Init+0xf8>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322a:	4a2f      	ldr	r2, [pc, #188]	@ (80032e8 <MX_GPIO_Init+0xf8>)
 800322c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003230:	6313      	str	r3, [r2, #48]	@ 0x30
 8003232:	4b2d      	ldr	r3, [pc, #180]	@ (80032e8 <MX_GPIO_Init+0xf8>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	4b29      	ldr	r3, [pc, #164]	@ (80032e8 <MX_GPIO_Init+0xf8>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003246:	4a28      	ldr	r2, [pc, #160]	@ (80032e8 <MX_GPIO_Init+0xf8>)
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	6313      	str	r3, [r2, #48]	@ 0x30
 800324e:	4b26      	ldr	r3, [pc, #152]	@ (80032e8 <MX_GPIO_Init+0xf8>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	607b      	str	r3, [r7, #4]
 800325e:	4b22      	ldr	r3, [pc, #136]	@ (80032e8 <MX_GPIO_Init+0xf8>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003262:	4a21      	ldr	r2, [pc, #132]	@ (80032e8 <MX_GPIO_Init+0xf8>)
 8003264:	f043 0302 	orr.w	r3, r3, #2
 8003268:	6313      	str	r3, [r2, #48]	@ 0x30
 800326a:	4b1f      	ldr	r3, [pc, #124]	@ (80032e8 <MX_GPIO_Init+0xf8>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	607b      	str	r3, [r7, #4]
 8003274:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8003276:	2200      	movs	r2, #0
 8003278:	2133      	movs	r1, #51	@ 0x33
 800327a:	481c      	ldr	r0, [pc, #112]	@ (80032ec <MX_GPIO_Init+0xfc>)
 800327c:	f001 ff0c 	bl	8005098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8003280:	2200      	movs	r2, #0
 8003282:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003286:	481a      	ldr	r0, [pc, #104]	@ (80032f0 <MX_GPIO_Init+0x100>)
 8003288:	f001 ff06 	bl	8005098 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800328c:	2333      	movs	r3, #51	@ 0x33
 800328e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003290:	2301      	movs	r3, #1
 8003292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003294:	2300      	movs	r3, #0
 8003296:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003298:	2300      	movs	r3, #0
 800329a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800329c:	f107 0314 	add.w	r3, r7, #20
 80032a0:	4619      	mov	r1, r3
 80032a2:	4812      	ldr	r0, [pc, #72]	@ (80032ec <MX_GPIO_Init+0xfc>)
 80032a4:	f001 fd74 	bl	8004d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80032a8:	2304      	movs	r3, #4
 80032aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032ac:	2300      	movs	r3, #0
 80032ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032b4:	f107 0314 	add.w	r3, r7, #20
 80032b8:	4619      	mov	r1, r3
 80032ba:	480c      	ldr	r0, [pc, #48]	@ (80032ec <MX_GPIO_Init+0xfc>)
 80032bc:	f001 fd68 	bl	8004d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80032c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80032c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032c6:	2301      	movs	r3, #1
 80032c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ca:	2300      	movs	r3, #0
 80032cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ce:	2300      	movs	r3, #0
 80032d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d2:	f107 0314 	add.w	r3, r7, #20
 80032d6:	4619      	mov	r1, r3
 80032d8:	4805      	ldr	r0, [pc, #20]	@ (80032f0 <MX_GPIO_Init+0x100>)
 80032da:	f001 fd59 	bl	8004d90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80032de:	bf00      	nop
 80032e0:	3728      	adds	r7, #40	@ 0x28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40023800 	.word	0x40023800
 80032ec:	40020800 	.word	0x40020800
 80032f0:	40020400 	.word	0x40020400

080032f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032f8:	b672      	cpsid	i
}
 80032fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032fc:	bf00      	nop
 80032fe:	e7fd      	b.n	80032fc <Error_Handler+0x8>

08003300 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	607b      	str	r3, [r7, #4]
 800330a:	4b10      	ldr	r3, [pc, #64]	@ (800334c <HAL_MspInit+0x4c>)
 800330c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330e:	4a0f      	ldr	r2, [pc, #60]	@ (800334c <HAL_MspInit+0x4c>)
 8003310:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003314:	6453      	str	r3, [r2, #68]	@ 0x44
 8003316:	4b0d      	ldr	r3, [pc, #52]	@ (800334c <HAL_MspInit+0x4c>)
 8003318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800331e:	607b      	str	r3, [r7, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	603b      	str	r3, [r7, #0]
 8003326:	4b09      	ldr	r3, [pc, #36]	@ (800334c <HAL_MspInit+0x4c>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332a:	4a08      	ldr	r2, [pc, #32]	@ (800334c <HAL_MspInit+0x4c>)
 800332c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003330:	6413      	str	r3, [r2, #64]	@ 0x40
 8003332:	4b06      	ldr	r3, [pc, #24]	@ (800334c <HAL_MspInit+0x4c>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800333e:	2005      	movs	r0, #5
 8003340:	f001 f8d6 	bl	80044f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003344:	bf00      	nop
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40023800 	.word	0x40023800

08003350 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08a      	sub	sp, #40	@ 0x28
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003358:	f107 0314 	add.w	r3, r7, #20
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	605a      	str	r2, [r3, #4]
 8003362:	609a      	str	r2, [r3, #8]
 8003364:	60da      	str	r2, [r3, #12]
 8003366:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a17      	ldr	r2, [pc, #92]	@ (80033cc <HAL_ADC_MspInit+0x7c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d127      	bne.n	80033c2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	4b16      	ldr	r3, [pc, #88]	@ (80033d0 <HAL_ADC_MspInit+0x80>)
 8003378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800337a:	4a15      	ldr	r2, [pc, #84]	@ (80033d0 <HAL_ADC_MspInit+0x80>)
 800337c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003380:	6453      	str	r3, [r2, #68]	@ 0x44
 8003382:	4b13      	ldr	r3, [pc, #76]	@ (80033d0 <HAL_ADC_MspInit+0x80>)
 8003384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	4b0f      	ldr	r3, [pc, #60]	@ (80033d0 <HAL_ADC_MspInit+0x80>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003396:	4a0e      	ldr	r2, [pc, #56]	@ (80033d0 <HAL_ADC_MspInit+0x80>)
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	6313      	str	r3, [r2, #48]	@ 0x30
 800339e:	4b0c      	ldr	r3, [pc, #48]	@ (80033d0 <HAL_ADC_MspInit+0x80>)
 80033a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80033aa:	2301      	movs	r3, #1
 80033ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033ae:	2303      	movs	r3, #3
 80033b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b6:	f107 0314 	add.w	r3, r7, #20
 80033ba:	4619      	mov	r1, r3
 80033bc:	4805      	ldr	r0, [pc, #20]	@ (80033d4 <HAL_ADC_MspInit+0x84>)
 80033be:	f001 fce7 	bl	8004d90 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80033c2:	bf00      	nop
 80033c4:	3728      	adds	r7, #40	@ 0x28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40012000 	.word	0x40012000
 80033d0:	40023800 	.word	0x40023800
 80033d4:	40020000 	.word	0x40020000

080033d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08e      	sub	sp, #56	@ 0x38
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	605a      	str	r2, [r3, #4]
 80033ea:	609a      	str	r2, [r3, #8]
 80033ec:	60da      	str	r2, [r3, #12]
 80033ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a63      	ldr	r2, [pc, #396]	@ (8003584 <HAL_I2C_MspInit+0x1ac>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d12c      	bne.n	8003454 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	623b      	str	r3, [r7, #32]
 80033fe:	4b62      	ldr	r3, [pc, #392]	@ (8003588 <HAL_I2C_MspInit+0x1b0>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003402:	4a61      	ldr	r2, [pc, #388]	@ (8003588 <HAL_I2C_MspInit+0x1b0>)
 8003404:	f043 0302 	orr.w	r3, r3, #2
 8003408:	6313      	str	r3, [r2, #48]	@ 0x30
 800340a:	4b5f      	ldr	r3, [pc, #380]	@ (8003588 <HAL_I2C_MspInit+0x1b0>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	623b      	str	r3, [r7, #32]
 8003414:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003416:	23c0      	movs	r3, #192	@ 0xc0
 8003418:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800341a:	2312      	movs	r3, #18
 800341c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341e:	2300      	movs	r3, #0
 8003420:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003422:	2303      	movs	r3, #3
 8003424:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003426:	2304      	movs	r3, #4
 8003428:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800342a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800342e:	4619      	mov	r1, r3
 8003430:	4856      	ldr	r0, [pc, #344]	@ (800358c <HAL_I2C_MspInit+0x1b4>)
 8003432:	f001 fcad 	bl	8004d90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
 800343a:	4b53      	ldr	r3, [pc, #332]	@ (8003588 <HAL_I2C_MspInit+0x1b0>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343e:	4a52      	ldr	r2, [pc, #328]	@ (8003588 <HAL_I2C_MspInit+0x1b0>)
 8003440:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003444:	6413      	str	r3, [r2, #64]	@ 0x40
 8003446:	4b50      	ldr	r3, [pc, #320]	@ (8003588 <HAL_I2C_MspInit+0x1b0>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800344e:	61fb      	str	r3, [r7, #28]
 8003450:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003452:	e092      	b.n	800357a <HAL_I2C_MspInit+0x1a2>
  else if(hi2c->Instance==I2C2)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a4d      	ldr	r2, [pc, #308]	@ (8003590 <HAL_I2C_MspInit+0x1b8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d13d      	bne.n	80034da <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	4b49      	ldr	r3, [pc, #292]	@ (8003588 <HAL_I2C_MspInit+0x1b0>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003466:	4a48      	ldr	r2, [pc, #288]	@ (8003588 <HAL_I2C_MspInit+0x1b0>)
 8003468:	f043 0302 	orr.w	r3, r3, #2
 800346c:	6313      	str	r3, [r2, #48]	@ 0x30
 800346e:	4b46      	ldr	r3, [pc, #280]	@ (8003588 <HAL_I2C_MspInit+0x1b0>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	61bb      	str	r3, [r7, #24]
 8003478:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800347a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800347e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003480:	2312      	movs	r3, #18
 8003482:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003484:	2300      	movs	r3, #0
 8003486:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003488:	2303      	movs	r3, #3
 800348a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800348c:	2304      	movs	r3, #4
 800348e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003490:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003494:	4619      	mov	r1, r3
 8003496:	483d      	ldr	r0, [pc, #244]	@ (800358c <HAL_I2C_MspInit+0x1b4>)
 8003498:	f001 fc7a 	bl	8004d90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800349c:	2308      	movs	r3, #8
 800349e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034a0:	2312      	movs	r3, #18
 80034a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034a8:	2303      	movs	r3, #3
 80034aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80034ac:	2309      	movs	r3, #9
 80034ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034b4:	4619      	mov	r1, r3
 80034b6:	4835      	ldr	r0, [pc, #212]	@ (800358c <HAL_I2C_MspInit+0x1b4>)
 80034b8:	f001 fc6a 	bl	8004d90 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	4b31      	ldr	r3, [pc, #196]	@ (8003588 <HAL_I2C_MspInit+0x1b0>)
 80034c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c4:	4a30      	ldr	r2, [pc, #192]	@ (8003588 <HAL_I2C_MspInit+0x1b0>)
 80034c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80034ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80034cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003588 <HAL_I2C_MspInit+0x1b0>)
 80034ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034d4:	617b      	str	r3, [r7, #20]
 80034d6:	697b      	ldr	r3, [r7, #20]
}
 80034d8:	e04f      	b.n	800357a <HAL_I2C_MspInit+0x1a2>
  else if(hi2c->Instance==I2C3)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a2d      	ldr	r2, [pc, #180]	@ (8003594 <HAL_I2C_MspInit+0x1bc>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d14a      	bne.n	800357a <HAL_I2C_MspInit+0x1a2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034e4:	2300      	movs	r3, #0
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	4b27      	ldr	r3, [pc, #156]	@ (8003588 <HAL_I2C_MspInit+0x1b0>)
 80034ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ec:	4a26      	ldr	r2, [pc, #152]	@ (8003588 <HAL_I2C_MspInit+0x1b0>)
 80034ee:	f043 0301 	orr.w	r3, r3, #1
 80034f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80034f4:	4b24      	ldr	r3, [pc, #144]	@ (8003588 <HAL_I2C_MspInit+0x1b0>)
 80034f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003500:	2300      	movs	r3, #0
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	4b20      	ldr	r3, [pc, #128]	@ (8003588 <HAL_I2C_MspInit+0x1b0>)
 8003506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003508:	4a1f      	ldr	r2, [pc, #124]	@ (8003588 <HAL_I2C_MspInit+0x1b0>)
 800350a:	f043 0302 	orr.w	r3, r3, #2
 800350e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003510:	4b1d      	ldr	r3, [pc, #116]	@ (8003588 <HAL_I2C_MspInit+0x1b0>)
 8003512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800351c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003520:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003522:	2312      	movs	r3, #18
 8003524:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003526:	2300      	movs	r3, #0
 8003528:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800352a:	2303      	movs	r3, #3
 800352c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800352e:	2304      	movs	r3, #4
 8003530:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003532:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003536:	4619      	mov	r1, r3
 8003538:	4817      	ldr	r0, [pc, #92]	@ (8003598 <HAL_I2C_MspInit+0x1c0>)
 800353a:	f001 fc29 	bl	8004d90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800353e:	2310      	movs	r3, #16
 8003540:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003542:	2312      	movs	r3, #18
 8003544:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003546:	2300      	movs	r3, #0
 8003548:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800354a:	2303      	movs	r3, #3
 800354c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 800354e:	2309      	movs	r3, #9
 8003550:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003552:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003556:	4619      	mov	r1, r3
 8003558:	480c      	ldr	r0, [pc, #48]	@ (800358c <HAL_I2C_MspInit+0x1b4>)
 800355a:	f001 fc19 	bl	8004d90 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	4b09      	ldr	r3, [pc, #36]	@ (8003588 <HAL_I2C_MspInit+0x1b0>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003566:	4a08      	ldr	r2, [pc, #32]	@ (8003588 <HAL_I2C_MspInit+0x1b0>)
 8003568:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800356c:	6413      	str	r3, [r2, #64]	@ 0x40
 800356e:	4b06      	ldr	r3, [pc, #24]	@ (8003588 <HAL_I2C_MspInit+0x1b0>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003572:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003576:	60bb      	str	r3, [r7, #8]
 8003578:	68bb      	ldr	r3, [r7, #8]
}
 800357a:	bf00      	nop
 800357c:	3738      	adds	r7, #56	@ 0x38
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40005400 	.word	0x40005400
 8003588:	40023800 	.word	0x40023800
 800358c:	40020400 	.word	0x40020400
 8003590:	40005800 	.word	0x40005800
 8003594:	40005c00 	.word	0x40005c00
 8003598:	40020000 	.word	0x40020000

0800359c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08c      	sub	sp, #48	@ 0x30
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a4:	f107 031c 	add.w	r3, r7, #28
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	605a      	str	r2, [r3, #4]
 80035ae:	609a      	str	r2, [r3, #8]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a77      	ldr	r2, [pc, #476]	@ (8003798 <HAL_SD_MspInit+0x1fc>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	f040 80e8 	bne.w	8003790 <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80035c0:	2300      	movs	r3, #0
 80035c2:	61bb      	str	r3, [r7, #24]
 80035c4:	4b75      	ldr	r3, [pc, #468]	@ (800379c <HAL_SD_MspInit+0x200>)
 80035c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c8:	4a74      	ldr	r2, [pc, #464]	@ (800379c <HAL_SD_MspInit+0x200>)
 80035ca:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80035ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80035d0:	4b72      	ldr	r3, [pc, #456]	@ (800379c <HAL_SD_MspInit+0x200>)
 80035d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035d8:	61bb      	str	r3, [r7, #24]
 80035da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]
 80035e0:	4b6e      	ldr	r3, [pc, #440]	@ (800379c <HAL_SD_MspInit+0x200>)
 80035e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e4:	4a6d      	ldr	r2, [pc, #436]	@ (800379c <HAL_SD_MspInit+0x200>)
 80035e6:	f043 0301 	orr.w	r3, r3, #1
 80035ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ec:	4b6b      	ldr	r3, [pc, #428]	@ (800379c <HAL_SD_MspInit+0x200>)
 80035ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035f8:	2300      	movs	r3, #0
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	4b67      	ldr	r3, [pc, #412]	@ (800379c <HAL_SD_MspInit+0x200>)
 80035fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003600:	4a66      	ldr	r2, [pc, #408]	@ (800379c <HAL_SD_MspInit+0x200>)
 8003602:	f043 0302 	orr.w	r3, r3, #2
 8003606:	6313      	str	r3, [r2, #48]	@ 0x30
 8003608:	4b64      	ldr	r3, [pc, #400]	@ (800379c <HAL_SD_MspInit+0x200>)
 800360a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003614:	2300      	movs	r3, #0
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	4b60      	ldr	r3, [pc, #384]	@ (800379c <HAL_SD_MspInit+0x200>)
 800361a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361c:	4a5f      	ldr	r2, [pc, #380]	@ (800379c <HAL_SD_MspInit+0x200>)
 800361e:	f043 0304 	orr.w	r3, r3, #4
 8003622:	6313      	str	r3, [r2, #48]	@ 0x30
 8003624:	4b5d      	ldr	r3, [pc, #372]	@ (800379c <HAL_SD_MspInit+0x200>)
 8003626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003630:	2340      	movs	r3, #64	@ 0x40
 8003632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003634:	2302      	movs	r3, #2
 8003636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003638:	2300      	movs	r3, #0
 800363a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800363c:	2303      	movs	r3, #3
 800363e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003640:	230c      	movs	r3, #12
 8003642:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003644:	f107 031c 	add.w	r3, r7, #28
 8003648:	4619      	mov	r1, r3
 800364a:	4855      	ldr	r0, [pc, #340]	@ (80037a0 <HAL_SD_MspInit+0x204>)
 800364c:	f001 fba0 	bl	8004d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003650:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003656:	2302      	movs	r3, #2
 8003658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365a:	2300      	movs	r3, #0
 800365c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800365e:	2303      	movs	r3, #3
 8003660:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003662:	230c      	movs	r3, #12
 8003664:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003666:	f107 031c 	add.w	r3, r7, #28
 800366a:	4619      	mov	r1, r3
 800366c:	484d      	ldr	r0, [pc, #308]	@ (80037a4 <HAL_SD_MspInit+0x208>)
 800366e:	f001 fb8f 	bl	8004d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003672:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003678:	2302      	movs	r3, #2
 800367a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367c:	2300      	movs	r3, #0
 800367e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003680:	2303      	movs	r3, #3
 8003682:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003684:	230c      	movs	r3, #12
 8003686:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003688:	f107 031c 	add.w	r3, r7, #28
 800368c:	4619      	mov	r1, r3
 800368e:	4846      	ldr	r0, [pc, #280]	@ (80037a8 <HAL_SD_MspInit+0x20c>)
 8003690:	f001 fb7e 	bl	8004d90 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8003694:	4b45      	ldr	r3, [pc, #276]	@ (80037ac <HAL_SD_MspInit+0x210>)
 8003696:	4a46      	ldr	r2, [pc, #280]	@ (80037b0 <HAL_SD_MspInit+0x214>)
 8003698:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800369a:	4b44      	ldr	r3, [pc, #272]	@ (80037ac <HAL_SD_MspInit+0x210>)
 800369c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80036a0:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036a2:	4b42      	ldr	r3, [pc, #264]	@ (80037ac <HAL_SD_MspInit+0x210>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036a8:	4b40      	ldr	r3, [pc, #256]	@ (80037ac <HAL_SD_MspInit+0x210>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036ae:	4b3f      	ldr	r3, [pc, #252]	@ (80037ac <HAL_SD_MspInit+0x210>)
 80036b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036b4:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80036b6:	4b3d      	ldr	r3, [pc, #244]	@ (80037ac <HAL_SD_MspInit+0x210>)
 80036b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80036bc:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80036be:	4b3b      	ldr	r3, [pc, #236]	@ (80037ac <HAL_SD_MspInit+0x210>)
 80036c0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80036c4:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80036c6:	4b39      	ldr	r3, [pc, #228]	@ (80037ac <HAL_SD_MspInit+0x210>)
 80036c8:	2220      	movs	r2, #32
 80036ca:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80036cc:	4b37      	ldr	r3, [pc, #220]	@ (80037ac <HAL_SD_MspInit+0x210>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80036d2:	4b36      	ldr	r3, [pc, #216]	@ (80037ac <HAL_SD_MspInit+0x210>)
 80036d4:	2204      	movs	r2, #4
 80036d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80036d8:	4b34      	ldr	r3, [pc, #208]	@ (80037ac <HAL_SD_MspInit+0x210>)
 80036da:	2203      	movs	r2, #3
 80036dc:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80036de:	4b33      	ldr	r3, [pc, #204]	@ (80037ac <HAL_SD_MspInit+0x210>)
 80036e0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80036e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80036e6:	4b31      	ldr	r3, [pc, #196]	@ (80037ac <HAL_SD_MspInit+0x210>)
 80036e8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80036ec:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80036ee:	482f      	ldr	r0, [pc, #188]	@ (80037ac <HAL_SD_MspInit+0x210>)
 80036f0:	f000 ff40 	bl	8004574 <HAL_DMA_Init>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <HAL_SD_MspInit+0x162>
    {
      Error_Handler();
 80036fa:	f7ff fdfb 	bl	80032f4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a2a      	ldr	r2, [pc, #168]	@ (80037ac <HAL_SD_MspInit+0x210>)
 8003702:	641a      	str	r2, [r3, #64]	@ 0x40
 8003704:	4a29      	ldr	r2, [pc, #164]	@ (80037ac <HAL_SD_MspInit+0x210>)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800370a:	4b2a      	ldr	r3, [pc, #168]	@ (80037b4 <HAL_SD_MspInit+0x218>)
 800370c:	4a2a      	ldr	r2, [pc, #168]	@ (80037b8 <HAL_SD_MspInit+0x21c>)
 800370e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8003710:	4b28      	ldr	r3, [pc, #160]	@ (80037b4 <HAL_SD_MspInit+0x218>)
 8003712:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003716:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003718:	4b26      	ldr	r3, [pc, #152]	@ (80037b4 <HAL_SD_MspInit+0x218>)
 800371a:	2240      	movs	r2, #64	@ 0x40
 800371c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800371e:	4b25      	ldr	r3, [pc, #148]	@ (80037b4 <HAL_SD_MspInit+0x218>)
 8003720:	2200      	movs	r2, #0
 8003722:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003724:	4b23      	ldr	r3, [pc, #140]	@ (80037b4 <HAL_SD_MspInit+0x218>)
 8003726:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800372a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800372c:	4b21      	ldr	r3, [pc, #132]	@ (80037b4 <HAL_SD_MspInit+0x218>)
 800372e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003732:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003734:	4b1f      	ldr	r3, [pc, #124]	@ (80037b4 <HAL_SD_MspInit+0x218>)
 8003736:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800373a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800373c:	4b1d      	ldr	r3, [pc, #116]	@ (80037b4 <HAL_SD_MspInit+0x218>)
 800373e:	2220      	movs	r2, #32
 8003740:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003742:	4b1c      	ldr	r3, [pc, #112]	@ (80037b4 <HAL_SD_MspInit+0x218>)
 8003744:	2200      	movs	r2, #0
 8003746:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003748:	4b1a      	ldr	r3, [pc, #104]	@ (80037b4 <HAL_SD_MspInit+0x218>)
 800374a:	2204      	movs	r2, #4
 800374c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800374e:	4b19      	ldr	r3, [pc, #100]	@ (80037b4 <HAL_SD_MspInit+0x218>)
 8003750:	2203      	movs	r2, #3
 8003752:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8003754:	4b17      	ldr	r3, [pc, #92]	@ (80037b4 <HAL_SD_MspInit+0x218>)
 8003756:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800375a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800375c:	4b15      	ldr	r3, [pc, #84]	@ (80037b4 <HAL_SD_MspInit+0x218>)
 800375e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003762:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8003764:	4813      	ldr	r0, [pc, #76]	@ (80037b4 <HAL_SD_MspInit+0x218>)
 8003766:	f000 ff05 	bl	8004574 <HAL_DMA_Init>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <HAL_SD_MspInit+0x1d8>
    {
      Error_Handler();
 8003770:	f7ff fdc0 	bl	80032f4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a0f      	ldr	r2, [pc, #60]	@ (80037b4 <HAL_SD_MspInit+0x218>)
 8003778:	63da      	str	r2, [r3, #60]	@ 0x3c
 800377a:	4a0e      	ldr	r2, [pc, #56]	@ (80037b4 <HAL_SD_MspInit+0x218>)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 2, 2);
 8003780:	2202      	movs	r2, #2
 8003782:	2102      	movs	r1, #2
 8003784:	2031      	movs	r0, #49	@ 0x31
 8003786:	f000 febe 	bl	8004506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800378a:	2031      	movs	r0, #49	@ 0x31
 800378c:	f000 fed7 	bl	800453e <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8003790:	bf00      	nop
 8003792:	3730      	adds	r7, #48	@ 0x30
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40012c00 	.word	0x40012c00
 800379c:	40023800 	.word	0x40023800
 80037a0:	40020000 	.word	0x40020000
 80037a4:	40020400 	.word	0x40020400
 80037a8:	40020800 	.word	0x40020800
 80037ac:	20000500 	.word	0x20000500
 80037b0:	40026458 	.word	0x40026458
 80037b4:	20000560 	.word	0x20000560
 80037b8:	400264a0 	.word	0x400264a0

080037bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80037bc:	b480      	push	{r7}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003848 <HAL_TIM_PWM_MspInit+0x8c>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d10e      	bne.n	80037ec <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	4b1e      	ldr	r3, [pc, #120]	@ (800384c <HAL_TIM_PWM_MspInit+0x90>)
 80037d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d6:	4a1d      	ldr	r2, [pc, #116]	@ (800384c <HAL_TIM_PWM_MspInit+0x90>)
 80037d8:	f043 0301 	orr.w	r3, r3, #1
 80037dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80037de:	4b1b      	ldr	r3, [pc, #108]	@ (800384c <HAL_TIM_PWM_MspInit+0x90>)
 80037e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80037ea:	e026      	b.n	800383a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037f4:	d10e      	bne.n	8003814 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	4b14      	ldr	r3, [pc, #80]	@ (800384c <HAL_TIM_PWM_MspInit+0x90>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fe:	4a13      	ldr	r2, [pc, #76]	@ (800384c <HAL_TIM_PWM_MspInit+0x90>)
 8003800:	f043 0301 	orr.w	r3, r3, #1
 8003804:	6413      	str	r3, [r2, #64]	@ 0x40
 8003806:	4b11      	ldr	r3, [pc, #68]	@ (800384c <HAL_TIM_PWM_MspInit+0x90>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	613b      	str	r3, [r7, #16]
 8003810:	693b      	ldr	r3, [r7, #16]
}
 8003812:	e012      	b.n	800383a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a0d      	ldr	r2, [pc, #52]	@ (8003850 <HAL_TIM_PWM_MspInit+0x94>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d10d      	bne.n	800383a <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800381e:	2300      	movs	r3, #0
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	4b0a      	ldr	r3, [pc, #40]	@ (800384c <HAL_TIM_PWM_MspInit+0x90>)
 8003824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003826:	4a09      	ldr	r2, [pc, #36]	@ (800384c <HAL_TIM_PWM_MspInit+0x90>)
 8003828:	f043 0302 	orr.w	r3, r3, #2
 800382c:	6413      	str	r3, [r2, #64]	@ 0x40
 800382e:	4b07      	ldr	r3, [pc, #28]	@ (800384c <HAL_TIM_PWM_MspInit+0x90>)
 8003830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	68fb      	ldr	r3, [r7, #12]
}
 800383a:	bf00      	nop
 800383c:	371c      	adds	r7, #28
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	40010000 	.word	0x40010000
 800384c:	40023800 	.word	0x40023800
 8003850:	40000400 	.word	0x40000400

08003854 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b08a      	sub	sp, #40	@ 0x28
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800385c:	f107 0314 	add.w	r3, r7, #20
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	605a      	str	r2, [r3, #4]
 8003866:	609a      	str	r2, [r3, #8]
 8003868:	60da      	str	r2, [r3, #12]
 800386a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a36      	ldr	r2, [pc, #216]	@ (800394c <HAL_TIM_MspPostInit+0xf8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d11f      	bne.n	80038b6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003876:	2300      	movs	r3, #0
 8003878:	613b      	str	r3, [r7, #16]
 800387a:	4b35      	ldr	r3, [pc, #212]	@ (8003950 <HAL_TIM_MspPostInit+0xfc>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387e:	4a34      	ldr	r2, [pc, #208]	@ (8003950 <HAL_TIM_MspPostInit+0xfc>)
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	6313      	str	r3, [r2, #48]	@ 0x30
 8003886:	4b32      	ldr	r3, [pc, #200]	@ (8003950 <HAL_TIM_MspPostInit+0xfc>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	613b      	str	r3, [r7, #16]
 8003890:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003892:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003898:	2302      	movs	r3, #2
 800389a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389c:	2300      	movs	r3, #0
 800389e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a0:	2300      	movs	r3, #0
 80038a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80038a4:	2301      	movs	r3, #1
 80038a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a8:	f107 0314 	add.w	r3, r7, #20
 80038ac:	4619      	mov	r1, r3
 80038ae:	4829      	ldr	r0, [pc, #164]	@ (8003954 <HAL_TIM_MspPostInit+0x100>)
 80038b0:	f001 fa6e 	bl	8004d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80038b4:	e046      	b.n	8003944 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM2)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038be:	d11e      	bne.n	80038fe <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c0:	2300      	movs	r3, #0
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	4b22      	ldr	r3, [pc, #136]	@ (8003950 <HAL_TIM_MspPostInit+0xfc>)
 80038c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c8:	4a21      	ldr	r2, [pc, #132]	@ (8003950 <HAL_TIM_MspPostInit+0xfc>)
 80038ca:	f043 0301 	orr.w	r3, r3, #1
 80038ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80038d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003950 <HAL_TIM_MspPostInit+0xfc>)
 80038d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80038dc:	2320      	movs	r3, #32
 80038de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e0:	2302      	movs	r3, #2
 80038e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e4:	2300      	movs	r3, #0
 80038e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e8:	2300      	movs	r3, #0
 80038ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80038ec:	2301      	movs	r3, #1
 80038ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038f0:	f107 0314 	add.w	r3, r7, #20
 80038f4:	4619      	mov	r1, r3
 80038f6:	4817      	ldr	r0, [pc, #92]	@ (8003954 <HAL_TIM_MspPostInit+0x100>)
 80038f8:	f001 fa4a 	bl	8004d90 <HAL_GPIO_Init>
}
 80038fc:	e022      	b.n	8003944 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a15      	ldr	r2, [pc, #84]	@ (8003958 <HAL_TIM_MspPostInit+0x104>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d11d      	bne.n	8003944 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003908:	2300      	movs	r3, #0
 800390a:	60bb      	str	r3, [r7, #8]
 800390c:	4b10      	ldr	r3, [pc, #64]	@ (8003950 <HAL_TIM_MspPostInit+0xfc>)
 800390e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003910:	4a0f      	ldr	r2, [pc, #60]	@ (8003950 <HAL_TIM_MspPostInit+0xfc>)
 8003912:	f043 0304 	orr.w	r3, r3, #4
 8003916:	6313      	str	r3, [r2, #48]	@ 0x30
 8003918:	4b0d      	ldr	r3, [pc, #52]	@ (8003950 <HAL_TIM_MspPostInit+0xfc>)
 800391a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003924:	2340      	movs	r3, #64	@ 0x40
 8003926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003928:	2302      	movs	r3, #2
 800392a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392c:	2300      	movs	r3, #0
 800392e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003930:	2300      	movs	r3, #0
 8003932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003934:	2302      	movs	r3, #2
 8003936:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003938:	f107 0314 	add.w	r3, r7, #20
 800393c:	4619      	mov	r1, r3
 800393e:	4807      	ldr	r0, [pc, #28]	@ (800395c <HAL_TIM_MspPostInit+0x108>)
 8003940:	f001 fa26 	bl	8004d90 <HAL_GPIO_Init>
}
 8003944:	bf00      	nop
 8003946:	3728      	adds	r7, #40	@ 0x28
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40010000 	.word	0x40010000
 8003950:	40023800 	.word	0x40023800
 8003954:	40020000 	.word	0x40020000
 8003958:	40000400 	.word	0x40000400
 800395c:	40020800 	.word	0x40020800

08003960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08c      	sub	sp, #48	@ 0x30
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003968:	f107 031c 	add.w	r3, r7, #28
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	605a      	str	r2, [r3, #4]
 8003972:	609a      	str	r2, [r3, #8]
 8003974:	60da      	str	r2, [r3, #12]
 8003976:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a3a      	ldr	r2, [pc, #232]	@ (8003a68 <HAL_UART_MspInit+0x108>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d135      	bne.n	80039ee <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003982:	2300      	movs	r3, #0
 8003984:	61bb      	str	r3, [r7, #24]
 8003986:	4b39      	ldr	r3, [pc, #228]	@ (8003a6c <HAL_UART_MspInit+0x10c>)
 8003988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398a:	4a38      	ldr	r2, [pc, #224]	@ (8003a6c <HAL_UART_MspInit+0x10c>)
 800398c:	f043 0310 	orr.w	r3, r3, #16
 8003990:	6453      	str	r3, [r2, #68]	@ 0x44
 8003992:	4b36      	ldr	r3, [pc, #216]	@ (8003a6c <HAL_UART_MspInit+0x10c>)
 8003994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003996:	f003 0310 	and.w	r3, r3, #16
 800399a:	61bb      	str	r3, [r7, #24]
 800399c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	4b32      	ldr	r3, [pc, #200]	@ (8003a6c <HAL_UART_MspInit+0x10c>)
 80039a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a6:	4a31      	ldr	r2, [pc, #196]	@ (8003a6c <HAL_UART_MspInit+0x10c>)
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80039ae:	4b2f      	ldr	r3, [pc, #188]	@ (8003a6c <HAL_UART_MspInit+0x10c>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80039ba:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 80039be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c0:	2302      	movs	r3, #2
 80039c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039c8:	2303      	movs	r3, #3
 80039ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039cc:	2307      	movs	r3, #7
 80039ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039d0:	f107 031c 	add.w	r3, r7, #28
 80039d4:	4619      	mov	r1, r3
 80039d6:	4826      	ldr	r0, [pc, #152]	@ (8003a70 <HAL_UART_MspInit+0x110>)
 80039d8:	f001 f9da 	bl	8004d90 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 1);
 80039dc:	2201      	movs	r2, #1
 80039de:	2101      	movs	r1, #1
 80039e0:	2025      	movs	r0, #37	@ 0x25
 80039e2:	f000 fd90 	bl	8004506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80039e6:	2025      	movs	r0, #37	@ 0x25
 80039e8:	f000 fda9 	bl	800453e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80039ec:	e038      	b.n	8003a60 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a20      	ldr	r2, [pc, #128]	@ (8003a74 <HAL_UART_MspInit+0x114>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d133      	bne.n	8003a60 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80039f8:	2300      	movs	r3, #0
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	4b1b      	ldr	r3, [pc, #108]	@ (8003a6c <HAL_UART_MspInit+0x10c>)
 80039fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a00:	4a1a      	ldr	r2, [pc, #104]	@ (8003a6c <HAL_UART_MspInit+0x10c>)
 8003a02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a06:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a08:	4b18      	ldr	r3, [pc, #96]	@ (8003a6c <HAL_UART_MspInit+0x10c>)
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a14:	2300      	movs	r3, #0
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	4b14      	ldr	r3, [pc, #80]	@ (8003a6c <HAL_UART_MspInit+0x10c>)
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1c:	4a13      	ldr	r2, [pc, #76]	@ (8003a6c <HAL_UART_MspInit+0x10c>)
 8003a1e:	f043 0301 	orr.w	r3, r3, #1
 8003a22:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a24:	4b11      	ldr	r3, [pc, #68]	@ (8003a6c <HAL_UART_MspInit+0x10c>)
 8003a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	60fb      	str	r3, [r7, #12]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003a30:	230c      	movs	r3, #12
 8003a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a34:	2302      	movs	r3, #2
 8003a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a40:	2307      	movs	r3, #7
 8003a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a44:	f107 031c 	add.w	r3, r7, #28
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4809      	ldr	r0, [pc, #36]	@ (8003a70 <HAL_UART_MspInit+0x110>)
 8003a4c:	f001 f9a0 	bl	8004d90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003a50:	2200      	movs	r2, #0
 8003a52:	2100      	movs	r1, #0
 8003a54:	2026      	movs	r0, #38	@ 0x26
 8003a56:	f000 fd56 	bl	8004506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003a5a:	2026      	movs	r0, #38	@ 0x26
 8003a5c:	f000 fd6f 	bl	800453e <HAL_NVIC_EnableIRQ>
}
 8003a60:	bf00      	nop
 8003a62:	3730      	adds	r7, #48	@ 0x30
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40011000 	.word	0x40011000
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	40020000 	.word	0x40020000
 8003a74:	40004400 	.word	0x40004400

08003a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a7c:	bf00      	nop
 8003a7e:	e7fd      	b.n	8003a7c <NMI_Handler+0x4>

08003a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a84:	bf00      	nop
 8003a86:	e7fd      	b.n	8003a84 <HardFault_Handler+0x4>

08003a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a8c:	bf00      	nop
 8003a8e:	e7fd      	b.n	8003a8c <MemManage_Handler+0x4>

08003a90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a94:	bf00      	nop
 8003a96:	e7fd      	b.n	8003a94 <BusFault_Handler+0x4>

08003a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a9c:	bf00      	nop
 8003a9e:	e7fd      	b.n	8003a9c <UsageFault_Handler+0x4>

08003aa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003aa4:	bf00      	nop
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ab2:	bf00      	nop
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ac0:	bf00      	nop
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ace:	f000 f989 	bl	8003de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ad2:	bf00      	nop
 8003ad4:	bd80      	pop	{r7, pc}
	...

08003ad8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003adc:	4802      	ldr	r0, [pc, #8]	@ (8003ae8 <USART1_IRQHandler+0x10>)
 8003ade:	f005 f9b9 	bl	8008e54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003ae2:	bf00      	nop
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20000698 	.word	0x20000698

08003aec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003af0:	4802      	ldr	r0, [pc, #8]	@ (8003afc <USART2_IRQHandler+0x10>)
 8003af2:	f005 f9af 	bl	8008e54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003af6:	bf00      	nop
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	200006e0 	.word	0x200006e0

08003b00 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003b04:	4802      	ldr	r0, [pc, #8]	@ (8003b10 <SDIO_IRQHandler+0x10>)
 8003b06:	f003 fc83 	bl	8007410 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8003b0a:	bf00      	nop
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	2000047c 	.word	0x2000047c

08003b14 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8003b18:	4802      	ldr	r0, [pc, #8]	@ (8003b24 <DMA2_Stream3_IRQHandler+0x10>)
 8003b1a:	f000 fec3 	bl	80048a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003b1e:	bf00      	nop
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	20000500 	.word	0x20000500

08003b28 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8003b2c:	4802      	ldr	r0, [pc, #8]	@ (8003b38 <DMA2_Stream6_IRQHandler+0x10>)
 8003b2e:	f000 feb9 	bl	80048a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003b32:	bf00      	nop
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20000560 	.word	0x20000560

08003b3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  return 1;
 8003b40:	2301      	movs	r3, #1
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <_kill>:

int _kill(int pid, int sig)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b56:	f008 ffe7 	bl	800cb28 <__errno>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2216      	movs	r2, #22
 8003b5e:	601a      	str	r2, [r3, #0]
  return -1;
 8003b60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <_exit>:

void _exit (int status)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b74:	f04f 31ff 	mov.w	r1, #4294967295
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff ffe7 	bl	8003b4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b7e:	bf00      	nop
 8003b80:	e7fd      	b.n	8003b7e <_exit+0x12>

08003b82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b086      	sub	sp, #24
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b8e:	2300      	movs	r3, #0
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	e00a      	b.n	8003baa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b94:	f3af 8000 	nop.w
 8003b98:	4601      	mov	r1, r0
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	60ba      	str	r2, [r7, #8]
 8003ba0:	b2ca      	uxtb	r2, r1
 8003ba2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	617b      	str	r3, [r7, #20]
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	dbf0      	blt.n	8003b94 <_read+0x12>
  }

  return len;
 8003bb2:	687b      	ldr	r3, [r7, #4]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bc8:	2300      	movs	r3, #0
 8003bca:	617b      	str	r3, [r7, #20]
 8003bcc:	e009      	b.n	8003be2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	60ba      	str	r2, [r7, #8]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	3301      	adds	r3, #1
 8003be0:	617b      	str	r3, [r7, #20]
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	dbf1      	blt.n	8003bce <_write+0x12>
  }
  return len;
 8003bea:	687b      	ldr	r3, [r7, #4]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3718      	adds	r7, #24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <_close>:

int _close(int file)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003bfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c1c:	605a      	str	r2, [r3, #4]
  return 0;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <_isatty>:

int _isatty(int file)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c34:	2301      	movs	r3, #1
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b085      	sub	sp, #20
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c64:	4a14      	ldr	r2, [pc, #80]	@ (8003cb8 <_sbrk+0x5c>)
 8003c66:	4b15      	ldr	r3, [pc, #84]	@ (8003cbc <_sbrk+0x60>)
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c70:	4b13      	ldr	r3, [pc, #76]	@ (8003cc0 <_sbrk+0x64>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d102      	bne.n	8003c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c78:	4b11      	ldr	r3, [pc, #68]	@ (8003cc0 <_sbrk+0x64>)
 8003c7a:	4a12      	ldr	r2, [pc, #72]	@ (8003cc4 <_sbrk+0x68>)
 8003c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c7e:	4b10      	ldr	r3, [pc, #64]	@ (8003cc0 <_sbrk+0x64>)
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4413      	add	r3, r2
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d207      	bcs.n	8003c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c8c:	f008 ff4c 	bl	800cb28 <__errno>
 8003c90:	4603      	mov	r3, r0
 8003c92:	220c      	movs	r2, #12
 8003c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c96:	f04f 33ff 	mov.w	r3, #4294967295
 8003c9a:	e009      	b.n	8003cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c9c:	4b08      	ldr	r3, [pc, #32]	@ (8003cc0 <_sbrk+0x64>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ca2:	4b07      	ldr	r3, [pc, #28]	@ (8003cc0 <_sbrk+0x64>)
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4413      	add	r3, r2
 8003caa:	4a05      	ldr	r2, [pc, #20]	@ (8003cc0 <_sbrk+0x64>)
 8003cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cae:	68fb      	ldr	r3, [r7, #12]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20020000 	.word	0x20020000
 8003cbc:	00000400 	.word	0x00000400
 8003cc0:	20000a20 	.word	0x20000a20
 8003cc4:	20000b90 	.word	0x20000b90

08003cc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ccc:	4b06      	ldr	r3, [pc, #24]	@ (8003ce8 <SystemInit+0x20>)
 8003cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd2:	4a05      	ldr	r2, [pc, #20]	@ (8003ce8 <SystemInit+0x20>)
 8003cd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003cd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cdc:	bf00      	nop
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	e000ed00 	.word	0xe000ed00

08003cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003cec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003d24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003cf0:	f7ff ffea 	bl	8003cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003cf4:	480c      	ldr	r0, [pc, #48]	@ (8003d28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003cf6:	490d      	ldr	r1, [pc, #52]	@ (8003d2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8003d30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cfc:	e002      	b.n	8003d04 <LoopCopyDataInit>

08003cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d02:	3304      	adds	r3, #4

08003d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d08:	d3f9      	bcc.n	8003cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003d0c:	4c0a      	ldr	r4, [pc, #40]	@ (8003d38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d10:	e001      	b.n	8003d16 <LoopFillZerobss>

08003d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d14:	3204      	adds	r2, #4

08003d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d18:	d3fb      	bcc.n	8003d12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d1a:	f008 ff0b 	bl	800cb34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d1e:	f7fe ff0f 	bl	8002b40 <main>
  bx  lr    
 8003d22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d2c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003d30:	08011370 	.word	0x08011370
  ldr r2, =_sbss
 8003d34:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003d38:	20000b90 	.word	0x20000b90

08003d3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d3c:	e7fe      	b.n	8003d3c <ADC_IRQHandler>
	...

08003d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d44:	4b0e      	ldr	r3, [pc, #56]	@ (8003d80 <HAL_Init+0x40>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a0d      	ldr	r2, [pc, #52]	@ (8003d80 <HAL_Init+0x40>)
 8003d4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d50:	4b0b      	ldr	r3, [pc, #44]	@ (8003d80 <HAL_Init+0x40>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a0a      	ldr	r2, [pc, #40]	@ (8003d80 <HAL_Init+0x40>)
 8003d56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d5c:	4b08      	ldr	r3, [pc, #32]	@ (8003d80 <HAL_Init+0x40>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a07      	ldr	r2, [pc, #28]	@ (8003d80 <HAL_Init+0x40>)
 8003d62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d68:	2003      	movs	r0, #3
 8003d6a:	f000 fbc1 	bl	80044f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d6e:	2000      	movs	r0, #0
 8003d70:	f000 f808 	bl	8003d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d74:	f7ff fac4 	bl	8003300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40023c00 	.word	0x40023c00

08003d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d8c:	4b12      	ldr	r3, [pc, #72]	@ (8003dd8 <HAL_InitTick+0x54>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	4b12      	ldr	r3, [pc, #72]	@ (8003ddc <HAL_InitTick+0x58>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	4619      	mov	r1, r3
 8003d96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fbd9 	bl	800455a <HAL_SYSTICK_Config>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e00e      	b.n	8003dd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b0f      	cmp	r3, #15
 8003db6:	d80a      	bhi.n	8003dce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003db8:	2200      	movs	r2, #0
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc0:	f000 fba1 	bl	8004506 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003dc4:	4a06      	ldr	r2, [pc, #24]	@ (8003de0 <HAL_InitTick+0x5c>)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	e000      	b.n	8003dd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	20000010 	.word	0x20000010
 8003ddc:	20000018 	.word	0x20000018
 8003de0:	20000014 	.word	0x20000014

08003de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003de8:	4b06      	ldr	r3, [pc, #24]	@ (8003e04 <HAL_IncTick+0x20>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	461a      	mov	r2, r3
 8003dee:	4b06      	ldr	r3, [pc, #24]	@ (8003e08 <HAL_IncTick+0x24>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4413      	add	r3, r2
 8003df4:	4a04      	ldr	r2, [pc, #16]	@ (8003e08 <HAL_IncTick+0x24>)
 8003df6:	6013      	str	r3, [r2, #0]
}
 8003df8:	bf00      	nop
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	20000018 	.word	0x20000018
 8003e08:	20000a24 	.word	0x20000a24

08003e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e10:	4b03      	ldr	r3, [pc, #12]	@ (8003e20 <HAL_GetTick+0x14>)
 8003e12:	681b      	ldr	r3, [r3, #0]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	20000a24 	.word	0x20000a24

08003e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e2c:	f7ff ffee 	bl	8003e0c <HAL_GetTick>
 8003e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3c:	d005      	beq.n	8003e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e68 <HAL_Delay+0x44>)
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	461a      	mov	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4413      	add	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e4a:	bf00      	nop
 8003e4c:	f7ff ffde 	bl	8003e0c <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d8f7      	bhi.n	8003e4c <HAL_Delay+0x28>
  {
  }
}
 8003e5c:	bf00      	nop
 8003e5e:	bf00      	nop
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	20000018 	.word	0x20000018

08003e6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e033      	b.n	8003eea <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d109      	bne.n	8003e9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff fa60 	bl	8003350 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea2:	f003 0310 	and.w	r3, r3, #16
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d118      	bne.n	8003edc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003eb2:	f023 0302 	bic.w	r3, r3, #2
 8003eb6:	f043 0202 	orr.w	r2, r3, #2
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f94a 	bl	8004158 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ece:	f023 0303 	bic.w	r3, r3, #3
 8003ed2:	f043 0201 	orr.w	r2, r3, #1
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	641a      	str	r2, [r3, #64]	@ 0x40
 8003eda:	e001      	b.n	8003ee0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_ADC_ConfigChannel+0x1c>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e113      	b.n	8004138 <HAL_ADC_ConfigChannel+0x244>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b09      	cmp	r3, #9
 8003f1e:	d925      	bls.n	8003f6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68d9      	ldr	r1, [r3, #12]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	4613      	mov	r3, r2
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	4413      	add	r3, r2
 8003f34:	3b1e      	subs	r3, #30
 8003f36:	2207      	movs	r2, #7
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	43da      	mvns	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	400a      	ands	r2, r1
 8003f44:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68d9      	ldr	r1, [r3, #12]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	4618      	mov	r0, r3
 8003f58:	4603      	mov	r3, r0
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	4403      	add	r3, r0
 8003f5e:	3b1e      	subs	r3, #30
 8003f60:	409a      	lsls	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	60da      	str	r2, [r3, #12]
 8003f6a:	e022      	b.n	8003fb2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6919      	ldr	r1, [r3, #16]
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	461a      	mov	r2, r3
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	4413      	add	r3, r2
 8003f80:	2207      	movs	r2, #7
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	43da      	mvns	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	400a      	ands	r2, r1
 8003f8e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6919      	ldr	r1, [r3, #16]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	4403      	add	r3, r0
 8003fa8:	409a      	lsls	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b06      	cmp	r3, #6
 8003fb8:	d824      	bhi.n	8004004 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	3b05      	subs	r3, #5
 8003fcc:	221f      	movs	r2, #31
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	43da      	mvns	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	400a      	ands	r2, r1
 8003fda:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	4618      	mov	r0, r3
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3b05      	subs	r3, #5
 8003ff6:	fa00 f203 	lsl.w	r2, r0, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	635a      	str	r2, [r3, #52]	@ 0x34
 8004002:	e04c      	b.n	800409e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2b0c      	cmp	r3, #12
 800400a:	d824      	bhi.n	8004056 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	4613      	mov	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4413      	add	r3, r2
 800401c:	3b23      	subs	r3, #35	@ 0x23
 800401e:	221f      	movs	r2, #31
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	43da      	mvns	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	400a      	ands	r2, r1
 800402c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	b29b      	uxth	r3, r3
 800403a:	4618      	mov	r0, r3
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	4613      	mov	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	3b23      	subs	r3, #35	@ 0x23
 8004048:	fa00 f203 	lsl.w	r2, r0, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	631a      	str	r2, [r3, #48]	@ 0x30
 8004054:	e023      	b.n	800409e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	3b41      	subs	r3, #65	@ 0x41
 8004068:	221f      	movs	r2, #31
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	43da      	mvns	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	400a      	ands	r2, r1
 8004076:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	b29b      	uxth	r3, r3
 8004084:	4618      	mov	r0, r3
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	3b41      	subs	r3, #65	@ 0x41
 8004092:	fa00 f203 	lsl.w	r2, r0, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800409e:	4b29      	ldr	r3, [pc, #164]	@ (8004144 <HAL_ADC_ConfigChannel+0x250>)
 80040a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a28      	ldr	r2, [pc, #160]	@ (8004148 <HAL_ADC_ConfigChannel+0x254>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d10f      	bne.n	80040cc <HAL_ADC_ConfigChannel+0x1d8>
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b12      	cmp	r3, #18
 80040b2:	d10b      	bne.n	80040cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004148 <HAL_ADC_ConfigChannel+0x254>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d12b      	bne.n	800412e <HAL_ADC_ConfigChannel+0x23a>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a1c      	ldr	r2, [pc, #112]	@ (800414c <HAL_ADC_ConfigChannel+0x258>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d003      	beq.n	80040e8 <HAL_ADC_ConfigChannel+0x1f4>
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b11      	cmp	r3, #17
 80040e6:	d122      	bne.n	800412e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a11      	ldr	r2, [pc, #68]	@ (800414c <HAL_ADC_ConfigChannel+0x258>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d111      	bne.n	800412e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800410a:	4b11      	ldr	r3, [pc, #68]	@ (8004150 <HAL_ADC_ConfigChannel+0x25c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a11      	ldr	r2, [pc, #68]	@ (8004154 <HAL_ADC_ConfigChannel+0x260>)
 8004110:	fba2 2303 	umull	r2, r3, r2, r3
 8004114:	0c9a      	lsrs	r2, r3, #18
 8004116:	4613      	mov	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4413      	add	r3, r2
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004120:	e002      	b.n	8004128 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	3b01      	subs	r3, #1
 8004126:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1f9      	bne.n	8004122 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	40012300 	.word	0x40012300
 8004148:	40012000 	.word	0x40012000
 800414c:	10000012 	.word	0x10000012
 8004150:	20000010 	.word	0x20000010
 8004154:	431bde83 	.word	0x431bde83

08004158 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004160:	4b79      	ldr	r3, [pc, #484]	@ (8004348 <ADC_Init+0x1f0>)
 8004162:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	431a      	orrs	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800418c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6859      	ldr	r1, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	021a      	lsls	r2, r3, #8
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80041b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6859      	ldr	r1, [r3, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6899      	ldr	r1, [r3, #8]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ea:	4a58      	ldr	r2, [pc, #352]	@ (800434c <ADC_Init+0x1f4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d022      	beq.n	8004236 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689a      	ldr	r2, [r3, #8]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80041fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6899      	ldr	r1, [r3, #8]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004220:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6899      	ldr	r1, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	609a      	str	r2, [r3, #8]
 8004234:	e00f      	b.n	8004256 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004244:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004254:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0202 	bic.w	r2, r2, #2
 8004264:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6899      	ldr	r1, [r3, #8]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	7e1b      	ldrb	r3, [r3, #24]
 8004270:	005a      	lsls	r2, r3, #1
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d01b      	beq.n	80042bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004292:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80042a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6859      	ldr	r1, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ae:	3b01      	subs	r3, #1
 80042b0:	035a      	lsls	r2, r3, #13
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	605a      	str	r2, [r3, #4]
 80042ba:	e007      	b.n	80042cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042ca:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80042da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	051a      	lsls	r2, r3, #20
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004300:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6899      	ldr	r1, [r3, #8]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800430e:	025a      	lsls	r2, r3, #9
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004326:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6899      	ldr	r1, [r3, #8]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	029a      	lsls	r2, r3, #10
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	609a      	str	r2, [r3, #8]
}
 800433c:	bf00      	nop
 800433e:	3714      	adds	r7, #20
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	40012300 	.word	0x40012300
 800434c:	0f000001 	.word	0x0f000001

08004350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004360:	4b0c      	ldr	r3, [pc, #48]	@ (8004394 <__NVIC_SetPriorityGrouping+0x44>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800436c:	4013      	ands	r3, r2
 800436e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004378:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800437c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004382:	4a04      	ldr	r2, [pc, #16]	@ (8004394 <__NVIC_SetPriorityGrouping+0x44>)
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	60d3      	str	r3, [r2, #12]
}
 8004388:	bf00      	nop
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	e000ed00 	.word	0xe000ed00

08004398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800439c:	4b04      	ldr	r3, [pc, #16]	@ (80043b0 <__NVIC_GetPriorityGrouping+0x18>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	0a1b      	lsrs	r3, r3, #8
 80043a2:	f003 0307 	and.w	r3, r3, #7
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	e000ed00 	.word	0xe000ed00

080043b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	4603      	mov	r3, r0
 80043bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	db0b      	blt.n	80043de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	f003 021f 	and.w	r2, r3, #31
 80043cc:	4907      	ldr	r1, [pc, #28]	@ (80043ec <__NVIC_EnableIRQ+0x38>)
 80043ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d2:	095b      	lsrs	r3, r3, #5
 80043d4:	2001      	movs	r0, #1
 80043d6:	fa00 f202 	lsl.w	r2, r0, r2
 80043da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	e000e100 	.word	0xe000e100

080043f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	4603      	mov	r3, r0
 80043f8:	6039      	str	r1, [r7, #0]
 80043fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004400:	2b00      	cmp	r3, #0
 8004402:	db0a      	blt.n	800441a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	b2da      	uxtb	r2, r3
 8004408:	490c      	ldr	r1, [pc, #48]	@ (800443c <__NVIC_SetPriority+0x4c>)
 800440a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800440e:	0112      	lsls	r2, r2, #4
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	440b      	add	r3, r1
 8004414:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004418:	e00a      	b.n	8004430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	b2da      	uxtb	r2, r3
 800441e:	4908      	ldr	r1, [pc, #32]	@ (8004440 <__NVIC_SetPriority+0x50>)
 8004420:	79fb      	ldrb	r3, [r7, #7]
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	3b04      	subs	r3, #4
 8004428:	0112      	lsls	r2, r2, #4
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	440b      	add	r3, r1
 800442e:	761a      	strb	r2, [r3, #24]
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	e000e100 	.word	0xe000e100
 8004440:	e000ed00 	.word	0xe000ed00

08004444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004444:	b480      	push	{r7}
 8004446:	b089      	sub	sp, #36	@ 0x24
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	f1c3 0307 	rsb	r3, r3, #7
 800445e:	2b04      	cmp	r3, #4
 8004460:	bf28      	it	cs
 8004462:	2304      	movcs	r3, #4
 8004464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	3304      	adds	r3, #4
 800446a:	2b06      	cmp	r3, #6
 800446c:	d902      	bls.n	8004474 <NVIC_EncodePriority+0x30>
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	3b03      	subs	r3, #3
 8004472:	e000      	b.n	8004476 <NVIC_EncodePriority+0x32>
 8004474:	2300      	movs	r3, #0
 8004476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004478:	f04f 32ff 	mov.w	r2, #4294967295
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	43da      	mvns	r2, r3
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	401a      	ands	r2, r3
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800448c:	f04f 31ff 	mov.w	r1, #4294967295
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	fa01 f303 	lsl.w	r3, r1, r3
 8004496:	43d9      	mvns	r1, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800449c:	4313      	orrs	r3, r2
         );
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3724      	adds	r7, #36	@ 0x24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
	...

080044ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044bc:	d301      	bcc.n	80044c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044be:	2301      	movs	r3, #1
 80044c0:	e00f      	b.n	80044e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044c2:	4a0a      	ldr	r2, [pc, #40]	@ (80044ec <SysTick_Config+0x40>)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3b01      	subs	r3, #1
 80044c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044ca:	210f      	movs	r1, #15
 80044cc:	f04f 30ff 	mov.w	r0, #4294967295
 80044d0:	f7ff ff8e 	bl	80043f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044d4:	4b05      	ldr	r3, [pc, #20]	@ (80044ec <SysTick_Config+0x40>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044da:	4b04      	ldr	r3, [pc, #16]	@ (80044ec <SysTick_Config+0x40>)
 80044dc:	2207      	movs	r2, #7
 80044de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	e000e010 	.word	0xe000e010

080044f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f7ff ff29 	bl	8004350 <__NVIC_SetPriorityGrouping>
}
 80044fe:	bf00      	nop
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004506:	b580      	push	{r7, lr}
 8004508:	b086      	sub	sp, #24
 800450a:	af00      	add	r7, sp, #0
 800450c:	4603      	mov	r3, r0
 800450e:	60b9      	str	r1, [r7, #8]
 8004510:	607a      	str	r2, [r7, #4]
 8004512:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004514:	2300      	movs	r3, #0
 8004516:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004518:	f7ff ff3e 	bl	8004398 <__NVIC_GetPriorityGrouping>
 800451c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	68b9      	ldr	r1, [r7, #8]
 8004522:	6978      	ldr	r0, [r7, #20]
 8004524:	f7ff ff8e 	bl	8004444 <NVIC_EncodePriority>
 8004528:	4602      	mov	r2, r0
 800452a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800452e:	4611      	mov	r1, r2
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff ff5d 	bl	80043f0 <__NVIC_SetPriority>
}
 8004536:	bf00      	nop
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b082      	sub	sp, #8
 8004542:	af00      	add	r7, sp, #0
 8004544:	4603      	mov	r3, r0
 8004546:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff ff31 	bl	80043b4 <__NVIC_EnableIRQ>
}
 8004552:	bf00      	nop
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b082      	sub	sp, #8
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7ff ffa2 	bl	80044ac <SysTick_Config>
 8004568:	4603      	mov	r3, r0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800457c:	2300      	movs	r3, #0
 800457e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004580:	f7ff fc44 	bl	8003e0c <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e099      	b.n	80046c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0201 	bic.w	r2, r2, #1
 80045ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045b0:	e00f      	b.n	80045d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045b2:	f7ff fc2b 	bl	8003e0c <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b05      	cmp	r3, #5
 80045be:	d908      	bls.n	80045d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2220      	movs	r2, #32
 80045c4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2203      	movs	r2, #3
 80045ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e078      	b.n	80046c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1e8      	bne.n	80045b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	4b38      	ldr	r3, [pc, #224]	@ (80046cc <HAL_DMA_Init+0x158>)
 80045ec:	4013      	ands	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800460a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004616:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	4313      	orrs	r3, r2
 8004622:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004628:	2b04      	cmp	r3, #4
 800462a:	d107      	bne.n	800463c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004634:	4313      	orrs	r3, r2
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	4313      	orrs	r3, r2
 800463a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f023 0307 	bic.w	r3, r3, #7
 8004652:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	4313      	orrs	r3, r2
 800465c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004662:	2b04      	cmp	r3, #4
 8004664:	d117      	bne.n	8004696 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	4313      	orrs	r3, r2
 800466e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00e      	beq.n	8004696 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 fb0d 	bl	8004c98 <DMA_CheckFifoParam>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d008      	beq.n	8004696 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2240      	movs	r2, #64	@ 0x40
 8004688:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004692:	2301      	movs	r3, #1
 8004694:	e016      	b.n	80046c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 fac4 	bl	8004c2c <DMA_CalcBaseAndBitshift>
 80046a4:	4603      	mov	r3, r0
 80046a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ac:	223f      	movs	r2, #63	@ 0x3f
 80046ae:	409a      	lsls	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	f010803f 	.word	0xf010803f

080046d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
 80046dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <HAL_DMA_Start_IT+0x26>
 80046f2:	2302      	movs	r3, #2
 80046f4:	e040      	b.n	8004778 <HAL_DMA_Start_IT+0xa8>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b01      	cmp	r3, #1
 8004708:	d12f      	bne.n	800476a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2202      	movs	r2, #2
 800470e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	68b9      	ldr	r1, [r7, #8]
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 fa56 	bl	8004bd0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004728:	223f      	movs	r2, #63	@ 0x3f
 800472a:	409a      	lsls	r2, r3
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0216 	orr.w	r2, r2, #22
 800473e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004744:	2b00      	cmp	r3, #0
 8004746:	d007      	beq.n	8004758 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0208 	orr.w	r2, r2, #8
 8004756:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0201 	orr.w	r2, r2, #1
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	e005      	b.n	8004776 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004772:	2302      	movs	r3, #2
 8004774:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004776:	7dfb      	ldrb	r3, [r7, #23]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800478c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800478e:	f7ff fb3d 	bl	8003e0c <HAL_GetTick>
 8004792:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d008      	beq.n	80047b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2280      	movs	r2, #128	@ 0x80
 80047a4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e052      	b.n	8004858 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0216 	bic.w	r2, r2, #22
 80047c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	695a      	ldr	r2, [r3, #20]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d103      	bne.n	80047e2 <HAL_DMA_Abort+0x62>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d007      	beq.n	80047f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0208 	bic.w	r2, r2, #8
 80047f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0201 	bic.w	r2, r2, #1
 8004800:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004802:	e013      	b.n	800482c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004804:	f7ff fb02 	bl	8003e0c <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b05      	cmp	r3, #5
 8004810:	d90c      	bls.n	800482c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2220      	movs	r2, #32
 8004816:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2203      	movs	r2, #3
 800481c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e015      	b.n	8004858 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1e4      	bne.n	8004804 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800483e:	223f      	movs	r2, #63	@ 0x3f
 8004840:	409a      	lsls	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d004      	beq.n	800487e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2280      	movs	r2, #128	@ 0x80
 8004878:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e00c      	b.n	8004898 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2205      	movs	r2, #5
 8004882:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 0201 	bic.w	r2, r2, #1
 8004894:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80048b0:	4b8e      	ldr	r3, [pc, #568]	@ (8004aec <HAL_DMA_IRQHandler+0x248>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a8e      	ldr	r2, [pc, #568]	@ (8004af0 <HAL_DMA_IRQHandler+0x24c>)
 80048b6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ba:	0a9b      	lsrs	r3, r3, #10
 80048bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ce:	2208      	movs	r2, #8
 80048d0:	409a      	lsls	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	4013      	ands	r3, r2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d01a      	beq.n	8004910 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d013      	beq.n	8004910 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0204 	bic.w	r2, r2, #4
 80048f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048fc:	2208      	movs	r2, #8
 80048fe:	409a      	lsls	r2, r3
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004908:	f043 0201 	orr.w	r2, r3, #1
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004914:	2201      	movs	r2, #1
 8004916:	409a      	lsls	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4013      	ands	r3, r2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d012      	beq.n	8004946 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00b      	beq.n	8004946 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004932:	2201      	movs	r2, #1
 8004934:	409a      	lsls	r2, r3
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800493e:	f043 0202 	orr.w	r2, r3, #2
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800494a:	2204      	movs	r2, #4
 800494c:	409a      	lsls	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4013      	ands	r3, r2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d012      	beq.n	800497c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00b      	beq.n	800497c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004968:	2204      	movs	r2, #4
 800496a:	409a      	lsls	r2, r3
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004974:	f043 0204 	orr.w	r2, r3, #4
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004980:	2210      	movs	r2, #16
 8004982:	409a      	lsls	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4013      	ands	r3, r2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d043      	beq.n	8004a14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b00      	cmp	r3, #0
 8004998:	d03c      	beq.n	8004a14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800499e:	2210      	movs	r2, #16
 80049a0:	409a      	lsls	r2, r3
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d018      	beq.n	80049e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d108      	bne.n	80049d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d024      	beq.n	8004a14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	4798      	blx	r3
 80049d2:	e01f      	b.n	8004a14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d01b      	beq.n	8004a14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	4798      	blx	r3
 80049e4:	e016      	b.n	8004a14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d107      	bne.n	8004a04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0208 	bic.w	r2, r2, #8
 8004a02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a18:	2220      	movs	r2, #32
 8004a1a:	409a      	lsls	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 808f 	beq.w	8004b44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0310 	and.w	r3, r3, #16
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 8087 	beq.w	8004b44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	409a      	lsls	r2, r3
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b05      	cmp	r3, #5
 8004a4c:	d136      	bne.n	8004abc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0216 	bic.w	r2, r2, #22
 8004a5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	695a      	ldr	r2, [r3, #20]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d103      	bne.n	8004a7e <HAL_DMA_IRQHandler+0x1da>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d007      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0208 	bic.w	r2, r2, #8
 8004a8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a92:	223f      	movs	r2, #63	@ 0x3f
 8004a94:	409a      	lsls	r2, r3
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d07e      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	4798      	blx	r3
        }
        return;
 8004aba:	e079      	b.n	8004bb0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d01d      	beq.n	8004b06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10d      	bne.n	8004af4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d031      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	4798      	blx	r3
 8004ae8:	e02c      	b.n	8004b44 <HAL_DMA_IRQHandler+0x2a0>
 8004aea:	bf00      	nop
 8004aec:	20000010 	.word	0x20000010
 8004af0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d023      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	4798      	blx	r3
 8004b04:	e01e      	b.n	8004b44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10f      	bne.n	8004b34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0210 	bic.w	r2, r2, #16
 8004b22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d032      	beq.n	8004bb2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d022      	beq.n	8004b9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2205      	movs	r2, #5
 8004b5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0201 	bic.w	r2, r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	3301      	adds	r3, #1
 8004b74:	60bb      	str	r3, [r7, #8]
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d307      	bcc.n	8004b8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1f2      	bne.n	8004b70 <HAL_DMA_IRQHandler+0x2cc>
 8004b8a:	e000      	b.n	8004b8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004b8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d005      	beq.n	8004bb2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	4798      	blx	r3
 8004bae:	e000      	b.n	8004bb2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004bb0:	bf00      	nop
    }
  }
}
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
 8004bdc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004bec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	2b40      	cmp	r3, #64	@ 0x40
 8004bfc:	d108      	bne.n	8004c10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004c0e:	e007      	b.n	8004c20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	60da      	str	r2, [r3, #12]
}
 8004c20:	bf00      	nop
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	3b10      	subs	r3, #16
 8004c3c:	4a14      	ldr	r2, [pc, #80]	@ (8004c90 <DMA_CalcBaseAndBitshift+0x64>)
 8004c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c42:	091b      	lsrs	r3, r3, #4
 8004c44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c46:	4a13      	ldr	r2, [pc, #76]	@ (8004c94 <DMA_CalcBaseAndBitshift+0x68>)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2b03      	cmp	r3, #3
 8004c58:	d909      	bls.n	8004c6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004c62:	f023 0303 	bic.w	r3, r3, #3
 8004c66:	1d1a      	adds	r2, r3, #4
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	659a      	str	r2, [r3, #88]	@ 0x58
 8004c6c:	e007      	b.n	8004c7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004c76:	f023 0303 	bic.w	r3, r3, #3
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	aaaaaaab 	.word	0xaaaaaaab
 8004c94:	08010ec8 	.word	0x08010ec8

08004c98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d11f      	bne.n	8004cf2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2b03      	cmp	r3, #3
 8004cb6:	d856      	bhi.n	8004d66 <DMA_CheckFifoParam+0xce>
 8004cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8004cc0 <DMA_CheckFifoParam+0x28>)
 8004cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbe:	bf00      	nop
 8004cc0:	08004cd1 	.word	0x08004cd1
 8004cc4:	08004ce3 	.word	0x08004ce3
 8004cc8:	08004cd1 	.word	0x08004cd1
 8004ccc:	08004d67 	.word	0x08004d67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d046      	beq.n	8004d6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ce0:	e043      	b.n	8004d6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004cea:	d140      	bne.n	8004d6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cf0:	e03d      	b.n	8004d6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cfa:	d121      	bne.n	8004d40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d837      	bhi.n	8004d72 <DMA_CheckFifoParam+0xda>
 8004d02:	a201      	add	r2, pc, #4	@ (adr r2, 8004d08 <DMA_CheckFifoParam+0x70>)
 8004d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d08:	08004d19 	.word	0x08004d19
 8004d0c:	08004d1f 	.word	0x08004d1f
 8004d10:	08004d19 	.word	0x08004d19
 8004d14:	08004d31 	.word	0x08004d31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d1c:	e030      	b.n	8004d80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d025      	beq.n	8004d76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d2e:	e022      	b.n	8004d76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d34:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d38:	d11f      	bne.n	8004d7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d3e:	e01c      	b.n	8004d7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d903      	bls.n	8004d4e <DMA_CheckFifoParam+0xb6>
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b03      	cmp	r3, #3
 8004d4a:	d003      	beq.n	8004d54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d4c:	e018      	b.n	8004d80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	73fb      	strb	r3, [r7, #15]
      break;
 8004d52:	e015      	b.n	8004d80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00e      	beq.n	8004d7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	73fb      	strb	r3, [r7, #15]
      break;
 8004d64:	e00b      	b.n	8004d7e <DMA_CheckFifoParam+0xe6>
      break;
 8004d66:	bf00      	nop
 8004d68:	e00a      	b.n	8004d80 <DMA_CheckFifoParam+0xe8>
      break;
 8004d6a:	bf00      	nop
 8004d6c:	e008      	b.n	8004d80 <DMA_CheckFifoParam+0xe8>
      break;
 8004d6e:	bf00      	nop
 8004d70:	e006      	b.n	8004d80 <DMA_CheckFifoParam+0xe8>
      break;
 8004d72:	bf00      	nop
 8004d74:	e004      	b.n	8004d80 <DMA_CheckFifoParam+0xe8>
      break;
 8004d76:	bf00      	nop
 8004d78:	e002      	b.n	8004d80 <DMA_CheckFifoParam+0xe8>
      break;   
 8004d7a:	bf00      	nop
 8004d7c:	e000      	b.n	8004d80 <DMA_CheckFifoParam+0xe8>
      break;
 8004d7e:	bf00      	nop
    }
  } 
  
  return status; 
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop

08004d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b089      	sub	sp, #36	@ 0x24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004da6:	2300      	movs	r3, #0
 8004da8:	61fb      	str	r3, [r7, #28]
 8004daa:	e159      	b.n	8005060 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004dac:	2201      	movs	r2, #1
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	f040 8148 	bne.w	800505a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d005      	beq.n	8004de2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d130      	bne.n	8004e44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	2203      	movs	r2, #3
 8004dee:	fa02 f303 	lsl.w	r3, r2, r3
 8004df2:	43db      	mvns	r3, r3
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	4013      	ands	r3, r2
 8004df8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e18:	2201      	movs	r2, #1
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	43db      	mvns	r3, r3
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	4013      	ands	r3, r2
 8004e26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	091b      	lsrs	r3, r3, #4
 8004e2e:	f003 0201 	and.w	r2, r3, #1
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f003 0303 	and.w	r3, r3, #3
 8004e4c:	2b03      	cmp	r3, #3
 8004e4e:	d017      	beq.n	8004e80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	2203      	movs	r2, #3
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	43db      	mvns	r3, r3
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	4013      	ands	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f003 0303 	and.w	r3, r3, #3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d123      	bne.n	8004ed4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	08da      	lsrs	r2, r3, #3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3208      	adds	r2, #8
 8004e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	220f      	movs	r2, #15
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	43db      	mvns	r3, r3
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	4013      	ands	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	691a      	ldr	r2, [r3, #16]
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	08da      	lsrs	r2, r3, #3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	3208      	adds	r2, #8
 8004ece:	69b9      	ldr	r1, [r7, #24]
 8004ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	2203      	movs	r2, #3
 8004ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee4:	43db      	mvns	r3, r3
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f003 0203 	and.w	r2, r3, #3
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 80a2 	beq.w	800505a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	4b57      	ldr	r3, [pc, #348]	@ (8005078 <HAL_GPIO_Init+0x2e8>)
 8004f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f1e:	4a56      	ldr	r2, [pc, #344]	@ (8005078 <HAL_GPIO_Init+0x2e8>)
 8004f20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f24:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f26:	4b54      	ldr	r3, [pc, #336]	@ (8005078 <HAL_GPIO_Init+0x2e8>)
 8004f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f32:	4a52      	ldr	r2, [pc, #328]	@ (800507c <HAL_GPIO_Init+0x2ec>)
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	089b      	lsrs	r3, r3, #2
 8004f38:	3302      	adds	r3, #2
 8004f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	220f      	movs	r2, #15
 8004f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4e:	43db      	mvns	r3, r3
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	4013      	ands	r3, r2
 8004f54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a49      	ldr	r2, [pc, #292]	@ (8005080 <HAL_GPIO_Init+0x2f0>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d019      	beq.n	8004f92 <HAL_GPIO_Init+0x202>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a48      	ldr	r2, [pc, #288]	@ (8005084 <HAL_GPIO_Init+0x2f4>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d013      	beq.n	8004f8e <HAL_GPIO_Init+0x1fe>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a47      	ldr	r2, [pc, #284]	@ (8005088 <HAL_GPIO_Init+0x2f8>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d00d      	beq.n	8004f8a <HAL_GPIO_Init+0x1fa>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a46      	ldr	r2, [pc, #280]	@ (800508c <HAL_GPIO_Init+0x2fc>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d007      	beq.n	8004f86 <HAL_GPIO_Init+0x1f6>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a45      	ldr	r2, [pc, #276]	@ (8005090 <HAL_GPIO_Init+0x300>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d101      	bne.n	8004f82 <HAL_GPIO_Init+0x1f2>
 8004f7e:	2304      	movs	r3, #4
 8004f80:	e008      	b.n	8004f94 <HAL_GPIO_Init+0x204>
 8004f82:	2307      	movs	r3, #7
 8004f84:	e006      	b.n	8004f94 <HAL_GPIO_Init+0x204>
 8004f86:	2303      	movs	r3, #3
 8004f88:	e004      	b.n	8004f94 <HAL_GPIO_Init+0x204>
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	e002      	b.n	8004f94 <HAL_GPIO_Init+0x204>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e000      	b.n	8004f94 <HAL_GPIO_Init+0x204>
 8004f92:	2300      	movs	r3, #0
 8004f94:	69fa      	ldr	r2, [r7, #28]
 8004f96:	f002 0203 	and.w	r2, r2, #3
 8004f9a:	0092      	lsls	r2, r2, #2
 8004f9c:	4093      	lsls	r3, r2
 8004f9e:	69ba      	ldr	r2, [r7, #24]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fa4:	4935      	ldr	r1, [pc, #212]	@ (800507c <HAL_GPIO_Init+0x2ec>)
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	089b      	lsrs	r3, r3, #2
 8004faa:	3302      	adds	r3, #2
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fb2:	4b38      	ldr	r3, [pc, #224]	@ (8005094 <HAL_GPIO_Init+0x304>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	43db      	mvns	r3, r3
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004fd6:	4a2f      	ldr	r2, [pc, #188]	@ (8005094 <HAL_GPIO_Init+0x304>)
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fdc:	4b2d      	ldr	r3, [pc, #180]	@ (8005094 <HAL_GPIO_Init+0x304>)
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	43db      	mvns	r3, r3
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d003      	beq.n	8005000 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005000:	4a24      	ldr	r2, [pc, #144]	@ (8005094 <HAL_GPIO_Init+0x304>)
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005006:	4b23      	ldr	r3, [pc, #140]	@ (8005094 <HAL_GPIO_Init+0x304>)
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	43db      	mvns	r3, r3
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	4013      	ands	r3, r2
 8005014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005022:	69ba      	ldr	r2, [r7, #24]
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	4313      	orrs	r3, r2
 8005028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800502a:	4a1a      	ldr	r2, [pc, #104]	@ (8005094 <HAL_GPIO_Init+0x304>)
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005030:	4b18      	ldr	r3, [pc, #96]	@ (8005094 <HAL_GPIO_Init+0x304>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	43db      	mvns	r3, r3
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	4013      	ands	r3, r2
 800503e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005054:	4a0f      	ldr	r2, [pc, #60]	@ (8005094 <HAL_GPIO_Init+0x304>)
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	3301      	adds	r3, #1
 800505e:	61fb      	str	r3, [r7, #28]
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	2b0f      	cmp	r3, #15
 8005064:	f67f aea2 	bls.w	8004dac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005068:	bf00      	nop
 800506a:	bf00      	nop
 800506c:	3724      	adds	r7, #36	@ 0x24
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	40023800 	.word	0x40023800
 800507c:	40013800 	.word	0x40013800
 8005080:	40020000 	.word	0x40020000
 8005084:	40020400 	.word	0x40020400
 8005088:	40020800 	.word	0x40020800
 800508c:	40020c00 	.word	0x40020c00
 8005090:	40021000 	.word	0x40021000
 8005094:	40013c00 	.word	0x40013c00

08005098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	460b      	mov	r3, r1
 80050a2:	807b      	strh	r3, [r7, #2]
 80050a4:	4613      	mov	r3, r2
 80050a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050a8:	787b      	ldrb	r3, [r7, #1]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050ae:	887a      	ldrh	r2, [r7, #2]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050b4:	e003      	b.n	80050be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050b6:	887b      	ldrh	r3, [r7, #2]
 80050b8:	041a      	lsls	r2, r3, #16
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	619a      	str	r2, [r3, #24]
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
	...

080050cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e12b      	b.n	8005336 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d106      	bne.n	80050f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fe f970 	bl	80033d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2224      	movs	r2, #36	@ 0x24
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0201 	bic.w	r2, r2, #1
 800510e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800511e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800512e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005130:	f001 fece 	bl	8006ed0 <HAL_RCC_GetPCLK1Freq>
 8005134:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	4a81      	ldr	r2, [pc, #516]	@ (8005340 <HAL_I2C_Init+0x274>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d807      	bhi.n	8005150 <HAL_I2C_Init+0x84>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4a80      	ldr	r2, [pc, #512]	@ (8005344 <HAL_I2C_Init+0x278>)
 8005144:	4293      	cmp	r3, r2
 8005146:	bf94      	ite	ls
 8005148:	2301      	movls	r3, #1
 800514a:	2300      	movhi	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	e006      	b.n	800515e <HAL_I2C_Init+0x92>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4a7d      	ldr	r2, [pc, #500]	@ (8005348 <HAL_I2C_Init+0x27c>)
 8005154:	4293      	cmp	r3, r2
 8005156:	bf94      	ite	ls
 8005158:	2301      	movls	r3, #1
 800515a:	2300      	movhi	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e0e7      	b.n	8005336 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	4a78      	ldr	r2, [pc, #480]	@ (800534c <HAL_I2C_Init+0x280>)
 800516a:	fba2 2303 	umull	r2, r3, r2, r3
 800516e:	0c9b      	lsrs	r3, r3, #18
 8005170:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	430a      	orrs	r2, r1
 8005184:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	4a6a      	ldr	r2, [pc, #424]	@ (8005340 <HAL_I2C_Init+0x274>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d802      	bhi.n	80051a0 <HAL_I2C_Init+0xd4>
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	3301      	adds	r3, #1
 800519e:	e009      	b.n	80051b4 <HAL_I2C_Init+0xe8>
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80051a6:	fb02 f303 	mul.w	r3, r2, r3
 80051aa:	4a69      	ldr	r2, [pc, #420]	@ (8005350 <HAL_I2C_Init+0x284>)
 80051ac:	fba2 2303 	umull	r2, r3, r2, r3
 80051b0:	099b      	lsrs	r3, r3, #6
 80051b2:	3301      	adds	r3, #1
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	6812      	ldr	r2, [r2, #0]
 80051b8:	430b      	orrs	r3, r1
 80051ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80051c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	495c      	ldr	r1, [pc, #368]	@ (8005340 <HAL_I2C_Init+0x274>)
 80051d0:	428b      	cmp	r3, r1
 80051d2:	d819      	bhi.n	8005208 <HAL_I2C_Init+0x13c>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	1e59      	subs	r1, r3, #1
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	fbb1 f3f3 	udiv	r3, r1, r3
 80051e2:	1c59      	adds	r1, r3, #1
 80051e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80051e8:	400b      	ands	r3, r1
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <HAL_I2C_Init+0x138>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	1e59      	subs	r1, r3, #1
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80051fc:	3301      	adds	r3, #1
 80051fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005202:	e051      	b.n	80052a8 <HAL_I2C_Init+0x1dc>
 8005204:	2304      	movs	r3, #4
 8005206:	e04f      	b.n	80052a8 <HAL_I2C_Init+0x1dc>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d111      	bne.n	8005234 <HAL_I2C_Init+0x168>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	1e58      	subs	r0, r3, #1
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6859      	ldr	r1, [r3, #4]
 8005218:	460b      	mov	r3, r1
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	440b      	add	r3, r1
 800521e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005222:	3301      	adds	r3, #1
 8005224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005228:	2b00      	cmp	r3, #0
 800522a:	bf0c      	ite	eq
 800522c:	2301      	moveq	r3, #1
 800522e:	2300      	movne	r3, #0
 8005230:	b2db      	uxtb	r3, r3
 8005232:	e012      	b.n	800525a <HAL_I2C_Init+0x18e>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	1e58      	subs	r0, r3, #1
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6859      	ldr	r1, [r3, #4]
 800523c:	460b      	mov	r3, r1
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	440b      	add	r3, r1
 8005242:	0099      	lsls	r1, r3, #2
 8005244:	440b      	add	r3, r1
 8005246:	fbb0 f3f3 	udiv	r3, r0, r3
 800524a:	3301      	adds	r3, #1
 800524c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005250:	2b00      	cmp	r3, #0
 8005252:	bf0c      	ite	eq
 8005254:	2301      	moveq	r3, #1
 8005256:	2300      	movne	r3, #0
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <HAL_I2C_Init+0x196>
 800525e:	2301      	movs	r3, #1
 8005260:	e022      	b.n	80052a8 <HAL_I2C_Init+0x1dc>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10e      	bne.n	8005288 <HAL_I2C_Init+0x1bc>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	1e58      	subs	r0, r3, #1
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6859      	ldr	r1, [r3, #4]
 8005272:	460b      	mov	r3, r1
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	440b      	add	r3, r1
 8005278:	fbb0 f3f3 	udiv	r3, r0, r3
 800527c:	3301      	adds	r3, #1
 800527e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005282:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005286:	e00f      	b.n	80052a8 <HAL_I2C_Init+0x1dc>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	1e58      	subs	r0, r3, #1
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6859      	ldr	r1, [r3, #4]
 8005290:	460b      	mov	r3, r1
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	440b      	add	r3, r1
 8005296:	0099      	lsls	r1, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	fbb0 f3f3 	udiv	r3, r0, r3
 800529e:	3301      	adds	r3, #1
 80052a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052a8:	6879      	ldr	r1, [r7, #4]
 80052aa:	6809      	ldr	r1, [r1, #0]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	69da      	ldr	r2, [r3, #28]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	431a      	orrs	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80052d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	6911      	ldr	r1, [r2, #16]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	68d2      	ldr	r2, [r2, #12]
 80052e2:	4311      	orrs	r1, r2
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	6812      	ldr	r2, [r2, #0]
 80052e8:	430b      	orrs	r3, r1
 80052ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	695a      	ldr	r2, [r3, #20]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	431a      	orrs	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0201 	orr.w	r2, r2, #1
 8005316:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2220      	movs	r2, #32
 8005322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	000186a0 	.word	0x000186a0
 8005344:	001e847f 	.word	0x001e847f
 8005348:	003d08ff 	.word	0x003d08ff
 800534c:	431bde83 	.word	0x431bde83
 8005350:	10624dd3 	.word	0x10624dd3

08005354 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b088      	sub	sp, #32
 8005358:	af02      	add	r7, sp, #8
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	607a      	str	r2, [r7, #4]
 800535e:	461a      	mov	r2, r3
 8005360:	460b      	mov	r3, r1
 8005362:	817b      	strh	r3, [r7, #10]
 8005364:	4613      	mov	r3, r2
 8005366:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005368:	f7fe fd50 	bl	8003e0c <HAL_GetTick>
 800536c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b20      	cmp	r3, #32
 8005378:	f040 80e0 	bne.w	800553c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	2319      	movs	r3, #25
 8005382:	2201      	movs	r2, #1
 8005384:	4970      	ldr	r1, [pc, #448]	@ (8005548 <HAL_I2C_Master_Transmit+0x1f4>)
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f000 ff3c 	bl	8006204 <I2C_WaitOnFlagUntilTimeout>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005392:	2302      	movs	r3, #2
 8005394:	e0d3      	b.n	800553e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800539c:	2b01      	cmp	r3, #1
 800539e:	d101      	bne.n	80053a4 <HAL_I2C_Master_Transmit+0x50>
 80053a0:	2302      	movs	r3, #2
 80053a2:	e0cc      	b.n	800553e <HAL_I2C_Master_Transmit+0x1ea>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d007      	beq.n	80053ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f042 0201 	orr.w	r2, r2, #1
 80053c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2221      	movs	r2, #33	@ 0x21
 80053de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2210      	movs	r2, #16
 80053e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	893a      	ldrh	r2, [r7, #8]
 80053fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005400:	b29a      	uxth	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	4a50      	ldr	r2, [pc, #320]	@ (800554c <HAL_I2C_Master_Transmit+0x1f8>)
 800540a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800540c:	8979      	ldrh	r1, [r7, #10]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	6a3a      	ldr	r2, [r7, #32]
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 fd10 	bl	8005e38 <I2C_MasterRequestWrite>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e08d      	b.n	800553e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005422:	2300      	movs	r3, #0
 8005424:	613b      	str	r3, [r7, #16]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	613b      	str	r3, [r7, #16]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	613b      	str	r3, [r7, #16]
 8005436:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005438:	e066      	b.n	8005508 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	6a39      	ldr	r1, [r7, #32]
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 fffa 	bl	8006438 <I2C_WaitOnTXEFlagUntilTimeout>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00d      	beq.n	8005466 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544e:	2b04      	cmp	r3, #4
 8005450:	d107      	bne.n	8005462 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005460:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e06b      	b.n	800553e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546a:	781a      	ldrb	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005480:	b29b      	uxth	r3, r3
 8005482:	3b01      	subs	r3, #1
 8005484:	b29a      	uxth	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800548e:	3b01      	subs	r3, #1
 8005490:	b29a      	uxth	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	d11b      	bne.n	80054dc <HAL_I2C_Master_Transmit+0x188>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d017      	beq.n	80054dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b0:	781a      	ldrb	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054bc:	1c5a      	adds	r2, r3, #1
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	3b01      	subs	r3, #1
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054d4:	3b01      	subs	r3, #1
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	6a39      	ldr	r1, [r7, #32]
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f000 fff1 	bl	80064c8 <I2C_WaitOnBTFFlagUntilTimeout>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00d      	beq.n	8005508 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f0:	2b04      	cmp	r3, #4
 80054f2:	d107      	bne.n	8005504 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005502:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e01a      	b.n	800553e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800550c:	2b00      	cmp	r3, #0
 800550e:	d194      	bne.n	800543a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800551e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2220      	movs	r2, #32
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005538:	2300      	movs	r3, #0
 800553a:	e000      	b.n	800553e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800553c:	2302      	movs	r3, #2
  }
}
 800553e:	4618      	mov	r0, r3
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	00100002 	.word	0x00100002
 800554c:	ffff0000 	.word	0xffff0000

08005550 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b08c      	sub	sp, #48	@ 0x30
 8005554:	af02      	add	r7, sp, #8
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	607a      	str	r2, [r7, #4]
 800555a:	461a      	mov	r2, r3
 800555c:	460b      	mov	r3, r1
 800555e:	817b      	strh	r3, [r7, #10]
 8005560:	4613      	mov	r3, r2
 8005562:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005564:	f7fe fc52 	bl	8003e0c <HAL_GetTick>
 8005568:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b20      	cmp	r3, #32
 8005574:	f040 8217 	bne.w	80059a6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	2319      	movs	r3, #25
 800557e:	2201      	movs	r2, #1
 8005580:	497c      	ldr	r1, [pc, #496]	@ (8005774 <HAL_I2C_Master_Receive+0x224>)
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 fe3e 	bl	8006204 <I2C_WaitOnFlagUntilTimeout>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800558e:	2302      	movs	r3, #2
 8005590:	e20a      	b.n	80059a8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005598:	2b01      	cmp	r3, #1
 800559a:	d101      	bne.n	80055a0 <HAL_I2C_Master_Receive+0x50>
 800559c:	2302      	movs	r3, #2
 800559e:	e203      	b.n	80059a8 <HAL_I2C_Master_Receive+0x458>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d007      	beq.n	80055c6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f042 0201 	orr.w	r2, r2, #1
 80055c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2222      	movs	r2, #34	@ 0x22
 80055da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2210      	movs	r2, #16
 80055e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	893a      	ldrh	r2, [r7, #8]
 80055f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4a5c      	ldr	r2, [pc, #368]	@ (8005778 <HAL_I2C_Master_Receive+0x228>)
 8005606:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005608:	8979      	ldrh	r1, [r7, #10]
 800560a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f000 fc94 	bl	8005f3c <I2C_MasterRequestRead>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e1c4      	b.n	80059a8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005622:	2b00      	cmp	r3, #0
 8005624:	d113      	bne.n	800564e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005626:	2300      	movs	r3, #0
 8005628:	623b      	str	r3, [r7, #32]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	623b      	str	r3, [r7, #32]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	623b      	str	r3, [r7, #32]
 800563a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	e198      	b.n	8005980 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005652:	2b01      	cmp	r3, #1
 8005654:	d11b      	bne.n	800568e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005664:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005666:	2300      	movs	r3, #0
 8005668:	61fb      	str	r3, [r7, #28]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	61fb      	str	r3, [r7, #28]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	61fb      	str	r3, [r7, #28]
 800567a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	e178      	b.n	8005980 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005692:	2b02      	cmp	r3, #2
 8005694:	d11b      	bne.n	80056ce <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056b6:	2300      	movs	r3, #0
 80056b8:	61bb      	str	r3, [r7, #24]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	61bb      	str	r3, [r7, #24]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	61bb      	str	r3, [r7, #24]
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	e158      	b.n	8005980 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80056dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056de:	2300      	movs	r3, #0
 80056e0:	617b      	str	r3, [r7, #20]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	617b      	str	r3, [r7, #20]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	617b      	str	r3, [r7, #20]
 80056f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80056f4:	e144      	b.n	8005980 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056fa:	2b03      	cmp	r3, #3
 80056fc:	f200 80f1 	bhi.w	80058e2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005704:	2b01      	cmp	r3, #1
 8005706:	d123      	bne.n	8005750 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005708:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800570a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 ff23 	bl	8006558 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e145      	b.n	80059a8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	691a      	ldr	r2, [r3, #16]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005726:	b2d2      	uxtb	r2, r2
 8005728:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005738:	3b01      	subs	r3, #1
 800573a:	b29a      	uxth	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005744:	b29b      	uxth	r3, r3
 8005746:	3b01      	subs	r3, #1
 8005748:	b29a      	uxth	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800574e:	e117      	b.n	8005980 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005754:	2b02      	cmp	r3, #2
 8005756:	d14e      	bne.n	80057f6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800575e:	2200      	movs	r2, #0
 8005760:	4906      	ldr	r1, [pc, #24]	@ (800577c <HAL_I2C_Master_Receive+0x22c>)
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f000 fd4e 	bl	8006204 <I2C_WaitOnFlagUntilTimeout>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d008      	beq.n	8005780 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e11a      	b.n	80059a8 <HAL_I2C_Master_Receive+0x458>
 8005772:	bf00      	nop
 8005774:	00100002 	.word	0x00100002
 8005778:	ffff0000 	.word	0xffff0000
 800577c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800578e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	691a      	ldr	r2, [r3, #16]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579a:	b2d2      	uxtb	r2, r2
 800579c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a2:	1c5a      	adds	r2, r3, #1
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057ac:	3b01      	subs	r3, #1
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	3b01      	subs	r3, #1
 80057bc:	b29a      	uxth	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	691a      	ldr	r2, [r3, #16]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057cc:	b2d2      	uxtb	r2, r2
 80057ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057de:	3b01      	subs	r3, #1
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	3b01      	subs	r3, #1
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80057f4:	e0c4      	b.n	8005980 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fc:	2200      	movs	r2, #0
 80057fe:	496c      	ldr	r1, [pc, #432]	@ (80059b0 <HAL_I2C_Master_Receive+0x460>)
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f000 fcff 	bl	8006204 <I2C_WaitOnFlagUntilTimeout>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e0cb      	b.n	80059a8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800581e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	691a      	ldr	r2, [r3, #16]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582a:	b2d2      	uxtb	r2, r2
 800582c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800583c:	3b01      	subs	r3, #1
 800583e:	b29a      	uxth	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005848:	b29b      	uxth	r3, r3
 800584a:	3b01      	subs	r3, #1
 800584c:	b29a      	uxth	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005858:	2200      	movs	r2, #0
 800585a:	4955      	ldr	r1, [pc, #340]	@ (80059b0 <HAL_I2C_Master_Receive+0x460>)
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 fcd1 	bl	8006204 <I2C_WaitOnFlagUntilTimeout>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e09d      	b.n	80059a8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800587a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	691a      	ldr	r2, [r3, #16]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005886:	b2d2      	uxtb	r2, r2
 8005888:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588e:	1c5a      	adds	r2, r3, #1
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005898:	3b01      	subs	r3, #1
 800589a:	b29a      	uxth	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	3b01      	subs	r3, #1
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	691a      	ldr	r2, [r3, #16]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b8:	b2d2      	uxtb	r2, r2
 80058ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c0:	1c5a      	adds	r2, r3, #1
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058ca:	3b01      	subs	r3, #1
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	3b01      	subs	r3, #1
 80058da:	b29a      	uxth	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80058e0:	e04e      	b.n	8005980 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f000 fe36 	bl	8006558 <I2C_WaitOnRXNEFlagUntilTimeout>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e058      	b.n	80059a8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	691a      	ldr	r2, [r3, #16]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005900:	b2d2      	uxtb	r2, r2
 8005902:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005908:	1c5a      	adds	r2, r3, #1
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005912:	3b01      	subs	r3, #1
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800591e:	b29b      	uxth	r3, r3
 8005920:	3b01      	subs	r3, #1
 8005922:	b29a      	uxth	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	f003 0304 	and.w	r3, r3, #4
 8005932:	2b04      	cmp	r3, #4
 8005934:	d124      	bne.n	8005980 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800593a:	2b03      	cmp	r3, #3
 800593c:	d107      	bne.n	800594e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800594c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	691a      	ldr	r2, [r3, #16]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005958:	b2d2      	uxtb	r2, r2
 800595a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005960:	1c5a      	adds	r2, r3, #1
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800596a:	3b01      	subs	r3, #1
 800596c:	b29a      	uxth	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005976:	b29b      	uxth	r3, r3
 8005978:	3b01      	subs	r3, #1
 800597a:	b29a      	uxth	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005984:	2b00      	cmp	r3, #0
 8005986:	f47f aeb6 	bne.w	80056f6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2220      	movs	r2, #32
 800598e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80059a2:	2300      	movs	r3, #0
 80059a4:	e000      	b.n	80059a8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80059a6:	2302      	movs	r3, #2
  }
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3728      	adds	r7, #40	@ 0x28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	00010004 	.word	0x00010004

080059b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b088      	sub	sp, #32
 80059b8:	af02      	add	r7, sp, #8
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	4608      	mov	r0, r1
 80059be:	4611      	mov	r1, r2
 80059c0:	461a      	mov	r2, r3
 80059c2:	4603      	mov	r3, r0
 80059c4:	817b      	strh	r3, [r7, #10]
 80059c6:	460b      	mov	r3, r1
 80059c8:	813b      	strh	r3, [r7, #8]
 80059ca:	4613      	mov	r3, r2
 80059cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80059ce:	f7fe fa1d 	bl	8003e0c <HAL_GetTick>
 80059d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b20      	cmp	r3, #32
 80059de:	f040 80d9 	bne.w	8005b94 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	2319      	movs	r3, #25
 80059e8:	2201      	movs	r2, #1
 80059ea:	496d      	ldr	r1, [pc, #436]	@ (8005ba0 <HAL_I2C_Mem_Write+0x1ec>)
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f000 fc09 	bl	8006204 <I2C_WaitOnFlagUntilTimeout>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80059f8:	2302      	movs	r3, #2
 80059fa:	e0cc      	b.n	8005b96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d101      	bne.n	8005a0a <HAL_I2C_Mem_Write+0x56>
 8005a06:	2302      	movs	r3, #2
 8005a08:	e0c5      	b.n	8005b96 <HAL_I2C_Mem_Write+0x1e2>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d007      	beq.n	8005a30 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f042 0201 	orr.w	r2, r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2221      	movs	r2, #33	@ 0x21
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2240      	movs	r2, #64	@ 0x40
 8005a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6a3a      	ldr	r2, [r7, #32]
 8005a5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005a60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4a4d      	ldr	r2, [pc, #308]	@ (8005ba4 <HAL_I2C_Mem_Write+0x1f0>)
 8005a70:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a72:	88f8      	ldrh	r0, [r7, #6]
 8005a74:	893a      	ldrh	r2, [r7, #8]
 8005a76:	8979      	ldrh	r1, [r7, #10]
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	9301      	str	r3, [sp, #4]
 8005a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	4603      	mov	r3, r0
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 fb28 	bl	80060d8 <I2C_RequestMemoryWrite>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d052      	beq.n	8005b34 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e081      	b.n	8005b96 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f000 fcce 	bl	8006438 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00d      	beq.n	8005abe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	d107      	bne.n	8005aba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ab8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e06b      	b.n	8005b96 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac2:	781a      	ldrb	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ace:	1c5a      	adds	r2, r3, #1
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	f003 0304 	and.w	r3, r3, #4
 8005af8:	2b04      	cmp	r3, #4
 8005afa:	d11b      	bne.n	8005b34 <HAL_I2C_Mem_Write+0x180>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d017      	beq.n	8005b34 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b08:	781a      	ldrb	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b14:	1c5a      	adds	r2, r3, #1
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1aa      	bne.n	8005a92 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 fcc1 	bl	80064c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00d      	beq.n	8005b68 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	d107      	bne.n	8005b64 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e016      	b.n	8005b96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005b90:	2300      	movs	r3, #0
 8005b92:	e000      	b.n	8005b96 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005b94:	2302      	movs	r3, #2
  }
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3718      	adds	r7, #24
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	00100002 	.word	0x00100002
 8005ba4:	ffff0000 	.word	0xffff0000

08005ba8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b08a      	sub	sp, #40	@ 0x28
 8005bac:	af02      	add	r7, sp, #8
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	607a      	str	r2, [r7, #4]
 8005bb2:	603b      	str	r3, [r7, #0]
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005bb8:	f7fe f928 	bl	8003e0c <HAL_GetTick>
 8005bbc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b20      	cmp	r3, #32
 8005bcc:	f040 8111 	bne.w	8005df2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	2319      	movs	r3, #25
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	4988      	ldr	r1, [pc, #544]	@ (8005dfc <HAL_I2C_IsDeviceReady+0x254>)
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f000 fb12 	bl	8006204 <I2C_WaitOnFlagUntilTimeout>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005be6:	2302      	movs	r3, #2
 8005be8:	e104      	b.n	8005df4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_I2C_IsDeviceReady+0x50>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e0fd      	b.n	8005df4 <HAL_I2C_IsDeviceReady+0x24c>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d007      	beq.n	8005c1e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f042 0201 	orr.w	r2, r2, #1
 8005c1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2224      	movs	r2, #36	@ 0x24
 8005c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4a70      	ldr	r2, [pc, #448]	@ (8005e00 <HAL_I2C_IsDeviceReady+0x258>)
 8005c40:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c50:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 fad0 	bl	8006204 <I2C_WaitOnFlagUntilTimeout>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00d      	beq.n	8005c86 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c78:	d103      	bne.n	8005c82 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c80:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e0b6      	b.n	8005df4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c86:	897b      	ldrh	r3, [r7, #10]
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005c94:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005c96:	f7fe f8b9 	bl	8003e0c <HAL_GetTick>
 8005c9a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	bf0c      	ite	eq
 8005caa:	2301      	moveq	r3, #1
 8005cac:	2300      	movne	r3, #0
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cc0:	bf0c      	ite	eq
 8005cc2:	2301      	moveq	r3, #1
 8005cc4:	2300      	movne	r3, #0
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005cca:	e025      	b.n	8005d18 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ccc:	f7fe f89e 	bl	8003e0c <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d302      	bcc.n	8005ce2 <HAL_I2C_IsDeviceReady+0x13a>
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d103      	bne.n	8005cea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	22a0      	movs	r2, #160	@ 0xa0
 8005ce6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	f003 0302 	and.w	r3, r3, #2
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	bf0c      	ite	eq
 8005cf8:	2301      	moveq	r3, #1
 8005cfa:	2300      	movne	r3, #0
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d0e:	bf0c      	ite	eq
 8005d10:	2301      	moveq	r3, #1
 8005d12:	2300      	movne	r3, #0
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2ba0      	cmp	r3, #160	@ 0xa0
 8005d22:	d005      	beq.n	8005d30 <HAL_I2C_IsDeviceReady+0x188>
 8005d24:	7dfb      	ldrb	r3, [r7, #23]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d102      	bne.n	8005d30 <HAL_I2C_IsDeviceReady+0x188>
 8005d2a:	7dbb      	ldrb	r3, [r7, #22]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d0cd      	beq.n	8005ccc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2220      	movs	r2, #32
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d129      	bne.n	8005d9a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d54:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d56:	2300      	movs	r3, #0
 8005d58:	613b      	str	r3, [r7, #16]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	613b      	str	r3, [r7, #16]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	613b      	str	r3, [r7, #16]
 8005d6a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	2319      	movs	r3, #25
 8005d72:	2201      	movs	r2, #1
 8005d74:	4921      	ldr	r1, [pc, #132]	@ (8005dfc <HAL_I2C_IsDeviceReady+0x254>)
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 fa44 	bl	8006204 <I2C_WaitOnFlagUntilTimeout>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e036      	b.n	8005df4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005d96:	2300      	movs	r3, #0
 8005d98:	e02c      	b.n	8005df4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005da8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005db2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	2319      	movs	r3, #25
 8005dba:	2201      	movs	r2, #1
 8005dbc:	490f      	ldr	r1, [pc, #60]	@ (8005dfc <HAL_I2C_IsDeviceReady+0x254>)
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f000 fa20 	bl	8006204 <I2C_WaitOnFlagUntilTimeout>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e012      	b.n	8005df4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	f4ff af32 	bcc.w	8005c42 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2220      	movs	r2, #32
 8005de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e000      	b.n	8005df4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005df2:	2302      	movs	r3, #2
  }
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3720      	adds	r7, #32
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	00100002 	.word	0x00100002
 8005e00:	ffff0000 	.word	0xffff0000

08005e04 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e12:	b2db      	uxtb	r3, r3
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b088      	sub	sp, #32
 8005e3c:	af02      	add	r7, sp, #8
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	607a      	str	r2, [r7, #4]
 8005e42:	603b      	str	r3, [r7, #0]
 8005e44:	460b      	mov	r3, r1
 8005e46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	2b08      	cmp	r3, #8
 8005e52:	d006      	beq.n	8005e62 <I2C_MasterRequestWrite+0x2a>
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d003      	beq.n	8005e62 <I2C_MasterRequestWrite+0x2a>
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e60:	d108      	bne.n	8005e74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	e00b      	b.n	8005e8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e78:	2b12      	cmp	r3, #18
 8005e7a:	d107      	bne.n	8005e8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 f9b3 	bl	8006204 <I2C_WaitOnFlagUntilTimeout>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00d      	beq.n	8005ec0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eb2:	d103      	bne.n	8005ebc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005eba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e035      	b.n	8005f2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ec8:	d108      	bne.n	8005edc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005eca:	897b      	ldrh	r3, [r7, #10]
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	461a      	mov	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005ed8:	611a      	str	r2, [r3, #16]
 8005eda:	e01b      	b.n	8005f14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005edc:	897b      	ldrh	r3, [r7, #10]
 8005ede:	11db      	asrs	r3, r3, #7
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	f003 0306 	and.w	r3, r3, #6
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	f063 030f 	orn	r3, r3, #15
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	490e      	ldr	r1, [pc, #56]	@ (8005f34 <I2C_MasterRequestWrite+0xfc>)
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f000 f9fc 	bl	80062f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e010      	b.n	8005f2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005f0a:	897b      	ldrh	r3, [r7, #10]
 8005f0c:	b2da      	uxtb	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	4907      	ldr	r1, [pc, #28]	@ (8005f38 <I2C_MasterRequestWrite+0x100>)
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 f9ec 	bl	80062f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e000      	b.n	8005f2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3718      	adds	r7, #24
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	00010008 	.word	0x00010008
 8005f38:	00010002 	.word	0x00010002

08005f3c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b088      	sub	sp, #32
 8005f40:	af02      	add	r7, sp, #8
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	607a      	str	r2, [r7, #4]
 8005f46:	603b      	str	r3, [r7, #0]
 8005f48:	460b      	mov	r3, r1
 8005f4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f50:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f60:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	2b08      	cmp	r3, #8
 8005f66:	d006      	beq.n	8005f76 <I2C_MasterRequestRead+0x3a>
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d003      	beq.n	8005f76 <I2C_MasterRequestRead+0x3a>
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f74:	d108      	bne.n	8005f88 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f84:	601a      	str	r2, [r3, #0]
 8005f86:	e00b      	b.n	8005fa0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f8c:	2b11      	cmp	r3, #17
 8005f8e:	d107      	bne.n	8005fa0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f000 f929 	bl	8006204 <I2C_WaitOnFlagUntilTimeout>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00d      	beq.n	8005fd4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fc6:	d103      	bne.n	8005fd0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e079      	b.n	80060c8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fdc:	d108      	bne.n	8005ff0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005fde:	897b      	ldrh	r3, [r7, #10]
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	f043 0301 	orr.w	r3, r3, #1
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	611a      	str	r2, [r3, #16]
 8005fee:	e05f      	b.n	80060b0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ff0:	897b      	ldrh	r3, [r7, #10]
 8005ff2:	11db      	asrs	r3, r3, #7
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	f003 0306 	and.w	r3, r3, #6
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	f063 030f 	orn	r3, r3, #15
 8006000:	b2da      	uxtb	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	4930      	ldr	r1, [pc, #192]	@ (80060d0 <I2C_MasterRequestRead+0x194>)
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f000 f972 	bl	80062f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d001      	beq.n	800601e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e054      	b.n	80060c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800601e:	897b      	ldrh	r3, [r7, #10]
 8006020:	b2da      	uxtb	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	4929      	ldr	r1, [pc, #164]	@ (80060d4 <I2C_MasterRequestRead+0x198>)
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f000 f962 	bl	80062f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e044      	b.n	80060c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800603e:	2300      	movs	r3, #0
 8006040:	613b      	str	r3, [r7, #16]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	613b      	str	r3, [r7, #16]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	613b      	str	r3, [r7, #16]
 8006052:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006062:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f000 f8c7 	bl	8006204 <I2C_WaitOnFlagUntilTimeout>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00d      	beq.n	8006098 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006086:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800608a:	d103      	bne.n	8006094 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006092:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e017      	b.n	80060c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006098:	897b      	ldrh	r3, [r7, #10]
 800609a:	11db      	asrs	r3, r3, #7
 800609c:	b2db      	uxtb	r3, r3
 800609e:	f003 0306 	and.w	r3, r3, #6
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	f063 030e 	orn	r3, r3, #14
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	4907      	ldr	r1, [pc, #28]	@ (80060d4 <I2C_MasterRequestRead+0x198>)
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 f91e 	bl	80062f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e000      	b.n	80060c8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3718      	adds	r7, #24
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	00010008 	.word	0x00010008
 80060d4:	00010002 	.word	0x00010002

080060d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b088      	sub	sp, #32
 80060dc:	af02      	add	r7, sp, #8
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	4608      	mov	r0, r1
 80060e2:	4611      	mov	r1, r2
 80060e4:	461a      	mov	r2, r3
 80060e6:	4603      	mov	r3, r0
 80060e8:	817b      	strh	r3, [r7, #10]
 80060ea:	460b      	mov	r3, r1
 80060ec:	813b      	strh	r3, [r7, #8]
 80060ee:	4613      	mov	r3, r2
 80060f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006100:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	2200      	movs	r2, #0
 800610a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f000 f878 	bl	8006204 <I2C_WaitOnFlagUntilTimeout>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00d      	beq.n	8006136 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006124:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006128:	d103      	bne.n	8006132 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006130:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e05f      	b.n	80061f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006136:	897b      	ldrh	r3, [r7, #10]
 8006138:	b2db      	uxtb	r3, r3
 800613a:	461a      	mov	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006144:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006148:	6a3a      	ldr	r2, [r7, #32]
 800614a:	492d      	ldr	r1, [pc, #180]	@ (8006200 <I2C_RequestMemoryWrite+0x128>)
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 f8d3 	bl	80062f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e04c      	b.n	80061f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800615c:	2300      	movs	r3, #0
 800615e:	617b      	str	r3, [r7, #20]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	617b      	str	r3, [r7, #20]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006174:	6a39      	ldr	r1, [r7, #32]
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f000 f95e 	bl	8006438 <I2C_WaitOnTXEFlagUntilTimeout>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00d      	beq.n	800619e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006186:	2b04      	cmp	r3, #4
 8006188:	d107      	bne.n	800619a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006198:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e02b      	b.n	80061f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800619e:	88fb      	ldrh	r3, [r7, #6]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d105      	bne.n	80061b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061a4:	893b      	ldrh	r3, [r7, #8]
 80061a6:	b2da      	uxtb	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	611a      	str	r2, [r3, #16]
 80061ae:	e021      	b.n	80061f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80061b0:	893b      	ldrh	r3, [r7, #8]
 80061b2:	0a1b      	lsrs	r3, r3, #8
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061c0:	6a39      	ldr	r1, [r7, #32]
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f000 f938 	bl	8006438 <I2C_WaitOnTXEFlagUntilTimeout>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00d      	beq.n	80061ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	d107      	bne.n	80061e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e005      	b.n	80061f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061ea:	893b      	ldrh	r3, [r7, #8]
 80061ec:	b2da      	uxtb	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	00010002 	.word	0x00010002

08006204 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	603b      	str	r3, [r7, #0]
 8006210:	4613      	mov	r3, r2
 8006212:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006214:	e048      	b.n	80062a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621c:	d044      	beq.n	80062a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800621e:	f7fd fdf5 	bl	8003e0c <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	429a      	cmp	r2, r3
 800622c:	d302      	bcc.n	8006234 <I2C_WaitOnFlagUntilTimeout+0x30>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d139      	bne.n	80062a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	0c1b      	lsrs	r3, r3, #16
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b01      	cmp	r3, #1
 800623c:	d10d      	bne.n	800625a <I2C_WaitOnFlagUntilTimeout+0x56>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	43da      	mvns	r2, r3
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	4013      	ands	r3, r2
 800624a:	b29b      	uxth	r3, r3
 800624c:	2b00      	cmp	r3, #0
 800624e:	bf0c      	ite	eq
 8006250:	2301      	moveq	r3, #1
 8006252:	2300      	movne	r3, #0
 8006254:	b2db      	uxtb	r3, r3
 8006256:	461a      	mov	r2, r3
 8006258:	e00c      	b.n	8006274 <I2C_WaitOnFlagUntilTimeout+0x70>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	43da      	mvns	r2, r3
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	4013      	ands	r3, r2
 8006266:	b29b      	uxth	r3, r3
 8006268:	2b00      	cmp	r3, #0
 800626a:	bf0c      	ite	eq
 800626c:	2301      	moveq	r3, #1
 800626e:	2300      	movne	r3, #0
 8006270:	b2db      	uxtb	r3, r3
 8006272:	461a      	mov	r2, r3
 8006274:	79fb      	ldrb	r3, [r7, #7]
 8006276:	429a      	cmp	r2, r3
 8006278:	d116      	bne.n	80062a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2220      	movs	r2, #32
 8006284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006294:	f043 0220 	orr.w	r2, r3, #32
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e023      	b.n	80062f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	0c1b      	lsrs	r3, r3, #16
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d10d      	bne.n	80062ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	43da      	mvns	r2, r3
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	4013      	ands	r3, r2
 80062be:	b29b      	uxth	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	bf0c      	ite	eq
 80062c4:	2301      	moveq	r3, #1
 80062c6:	2300      	movne	r3, #0
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	461a      	mov	r2, r3
 80062cc:	e00c      	b.n	80062e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	43da      	mvns	r2, r3
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	4013      	ands	r3, r2
 80062da:	b29b      	uxth	r3, r3
 80062dc:	2b00      	cmp	r3, #0
 80062de:	bf0c      	ite	eq
 80062e0:	2301      	moveq	r3, #1
 80062e2:	2300      	movne	r3, #0
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	461a      	mov	r2, r3
 80062e8:	79fb      	ldrb	r3, [r7, #7]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d093      	beq.n	8006216 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
 8006304:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006306:	e071      	b.n	80063ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006316:	d123      	bne.n	8006360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006326:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006330:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2220      	movs	r2, #32
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800634c:	f043 0204 	orr.w	r2, r3, #4
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e067      	b.n	8006430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006366:	d041      	beq.n	80063ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006368:	f7fd fd50 	bl	8003e0c <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	429a      	cmp	r2, r3
 8006376:	d302      	bcc.n	800637e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d136      	bne.n	80063ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	0c1b      	lsrs	r3, r3, #16
 8006382:	b2db      	uxtb	r3, r3
 8006384:	2b01      	cmp	r3, #1
 8006386:	d10c      	bne.n	80063a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	43da      	mvns	r2, r3
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	4013      	ands	r3, r2
 8006394:	b29b      	uxth	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	bf14      	ite	ne
 800639a:	2301      	movne	r3, #1
 800639c:	2300      	moveq	r3, #0
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	e00b      	b.n	80063ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	43da      	mvns	r2, r3
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	4013      	ands	r3, r2
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	bf14      	ite	ne
 80063b4:	2301      	movne	r3, #1
 80063b6:	2300      	moveq	r3, #0
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d016      	beq.n	80063ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2220      	movs	r2, #32
 80063c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d8:	f043 0220 	orr.w	r2, r3, #32
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e021      	b.n	8006430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	0c1b      	lsrs	r3, r3, #16
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d10c      	bne.n	8006410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	695b      	ldr	r3, [r3, #20]
 80063fc:	43da      	mvns	r2, r3
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	4013      	ands	r3, r2
 8006402:	b29b      	uxth	r3, r3
 8006404:	2b00      	cmp	r3, #0
 8006406:	bf14      	ite	ne
 8006408:	2301      	movne	r3, #1
 800640a:	2300      	moveq	r3, #0
 800640c:	b2db      	uxtb	r3, r3
 800640e:	e00b      	b.n	8006428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	43da      	mvns	r2, r3
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	4013      	ands	r3, r2
 800641c:	b29b      	uxth	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	bf14      	ite	ne
 8006422:	2301      	movne	r3, #1
 8006424:	2300      	moveq	r3, #0
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	f47f af6d 	bne.w	8006308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006444:	e034      	b.n	80064b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 f8e3 	bl	8006612 <I2C_IsAcknowledgeFailed>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e034      	b.n	80064c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645c:	d028      	beq.n	80064b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800645e:	f7fd fcd5 	bl	8003e0c <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	429a      	cmp	r2, r3
 800646c:	d302      	bcc.n	8006474 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d11d      	bne.n	80064b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800647e:	2b80      	cmp	r3, #128	@ 0x80
 8006480:	d016      	beq.n	80064b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2220      	movs	r2, #32
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649c:	f043 0220 	orr.w	r2, r3, #32
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e007      	b.n	80064c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064ba:	2b80      	cmp	r3, #128	@ 0x80
 80064bc:	d1c3      	bne.n	8006446 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80064d4:	e034      	b.n	8006540 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f000 f89b 	bl	8006612 <I2C_IsAcknowledgeFailed>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e034      	b.n	8006550 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ec:	d028      	beq.n	8006540 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ee:	f7fd fc8d 	bl	8003e0c <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	68ba      	ldr	r2, [r7, #8]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d302      	bcc.n	8006504 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d11d      	bne.n	8006540 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	f003 0304 	and.w	r3, r3, #4
 800650e:	2b04      	cmp	r3, #4
 8006510:	d016      	beq.n	8006540 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2220      	movs	r2, #32
 800651c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800652c:	f043 0220 	orr.w	r2, r3, #32
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e007      	b.n	8006550 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	f003 0304 	and.w	r3, r3, #4
 800654a:	2b04      	cmp	r3, #4
 800654c:	d1c3      	bne.n	80064d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006564:	e049      	b.n	80065fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	f003 0310 	and.w	r3, r3, #16
 8006570:	2b10      	cmp	r3, #16
 8006572:	d119      	bne.n	80065a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f06f 0210 	mvn.w	r2, #16
 800657c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2220      	movs	r2, #32
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e030      	b.n	800660a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065a8:	f7fd fc30 	bl	8003e0c <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d302      	bcc.n	80065be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d11d      	bne.n	80065fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065c8:	2b40      	cmp	r3, #64	@ 0x40
 80065ca:	d016      	beq.n	80065fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2220      	movs	r2, #32
 80065d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e6:	f043 0220 	orr.w	r2, r3, #32
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e007      	b.n	800660a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006604:	2b40      	cmp	r3, #64	@ 0x40
 8006606:	d1ae      	bne.n	8006566 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006612:	b480      	push	{r7}
 8006614:	b083      	sub	sp, #12
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006624:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006628:	d11b      	bne.n	8006662 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006632:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2220      	movs	r2, #32
 800663e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664e:	f043 0204 	orr.w	r2, r3, #4
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e000      	b.n	8006664 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b086      	sub	sp, #24
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e267      	b.n	8006b52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	2b00      	cmp	r3, #0
 800668c:	d075      	beq.n	800677a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800668e:	4b88      	ldr	r3, [pc, #544]	@ (80068b0 <HAL_RCC_OscConfig+0x240>)
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f003 030c 	and.w	r3, r3, #12
 8006696:	2b04      	cmp	r3, #4
 8006698:	d00c      	beq.n	80066b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800669a:	4b85      	ldr	r3, [pc, #532]	@ (80068b0 <HAL_RCC_OscConfig+0x240>)
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80066a2:	2b08      	cmp	r3, #8
 80066a4:	d112      	bne.n	80066cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066a6:	4b82      	ldr	r3, [pc, #520]	@ (80068b0 <HAL_RCC_OscConfig+0x240>)
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066b2:	d10b      	bne.n	80066cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066b4:	4b7e      	ldr	r3, [pc, #504]	@ (80068b0 <HAL_RCC_OscConfig+0x240>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d05b      	beq.n	8006778 <HAL_RCC_OscConfig+0x108>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d157      	bne.n	8006778 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e242      	b.n	8006b52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066d4:	d106      	bne.n	80066e4 <HAL_RCC_OscConfig+0x74>
 80066d6:	4b76      	ldr	r3, [pc, #472]	@ (80068b0 <HAL_RCC_OscConfig+0x240>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a75      	ldr	r2, [pc, #468]	@ (80068b0 <HAL_RCC_OscConfig+0x240>)
 80066dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066e0:	6013      	str	r3, [r2, #0]
 80066e2:	e01d      	b.n	8006720 <HAL_RCC_OscConfig+0xb0>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066ec:	d10c      	bne.n	8006708 <HAL_RCC_OscConfig+0x98>
 80066ee:	4b70      	ldr	r3, [pc, #448]	@ (80068b0 <HAL_RCC_OscConfig+0x240>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a6f      	ldr	r2, [pc, #444]	@ (80068b0 <HAL_RCC_OscConfig+0x240>)
 80066f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066f8:	6013      	str	r3, [r2, #0]
 80066fa:	4b6d      	ldr	r3, [pc, #436]	@ (80068b0 <HAL_RCC_OscConfig+0x240>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a6c      	ldr	r2, [pc, #432]	@ (80068b0 <HAL_RCC_OscConfig+0x240>)
 8006700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006704:	6013      	str	r3, [r2, #0]
 8006706:	e00b      	b.n	8006720 <HAL_RCC_OscConfig+0xb0>
 8006708:	4b69      	ldr	r3, [pc, #420]	@ (80068b0 <HAL_RCC_OscConfig+0x240>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a68      	ldr	r2, [pc, #416]	@ (80068b0 <HAL_RCC_OscConfig+0x240>)
 800670e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006712:	6013      	str	r3, [r2, #0]
 8006714:	4b66      	ldr	r3, [pc, #408]	@ (80068b0 <HAL_RCC_OscConfig+0x240>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a65      	ldr	r2, [pc, #404]	@ (80068b0 <HAL_RCC_OscConfig+0x240>)
 800671a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800671e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d013      	beq.n	8006750 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006728:	f7fd fb70 	bl	8003e0c <HAL_GetTick>
 800672c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800672e:	e008      	b.n	8006742 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006730:	f7fd fb6c 	bl	8003e0c <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	2b64      	cmp	r3, #100	@ 0x64
 800673c:	d901      	bls.n	8006742 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e207      	b.n	8006b52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006742:	4b5b      	ldr	r3, [pc, #364]	@ (80068b0 <HAL_RCC_OscConfig+0x240>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d0f0      	beq.n	8006730 <HAL_RCC_OscConfig+0xc0>
 800674e:	e014      	b.n	800677a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006750:	f7fd fb5c 	bl	8003e0c <HAL_GetTick>
 8006754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006756:	e008      	b.n	800676a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006758:	f7fd fb58 	bl	8003e0c <HAL_GetTick>
 800675c:	4602      	mov	r2, r0
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	2b64      	cmp	r3, #100	@ 0x64
 8006764:	d901      	bls.n	800676a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e1f3      	b.n	8006b52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800676a:	4b51      	ldr	r3, [pc, #324]	@ (80068b0 <HAL_RCC_OscConfig+0x240>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1f0      	bne.n	8006758 <HAL_RCC_OscConfig+0xe8>
 8006776:	e000      	b.n	800677a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0302 	and.w	r3, r3, #2
 8006782:	2b00      	cmp	r3, #0
 8006784:	d063      	beq.n	800684e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006786:	4b4a      	ldr	r3, [pc, #296]	@ (80068b0 <HAL_RCC_OscConfig+0x240>)
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f003 030c 	and.w	r3, r3, #12
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00b      	beq.n	80067aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006792:	4b47      	ldr	r3, [pc, #284]	@ (80068b0 <HAL_RCC_OscConfig+0x240>)
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800679a:	2b08      	cmp	r3, #8
 800679c:	d11c      	bne.n	80067d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800679e:	4b44      	ldr	r3, [pc, #272]	@ (80068b0 <HAL_RCC_OscConfig+0x240>)
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d116      	bne.n	80067d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067aa:	4b41      	ldr	r3, [pc, #260]	@ (80068b0 <HAL_RCC_OscConfig+0x240>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d005      	beq.n	80067c2 <HAL_RCC_OscConfig+0x152>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d001      	beq.n	80067c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e1c7      	b.n	8006b52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067c2:	4b3b      	ldr	r3, [pc, #236]	@ (80068b0 <HAL_RCC_OscConfig+0x240>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	00db      	lsls	r3, r3, #3
 80067d0:	4937      	ldr	r1, [pc, #220]	@ (80068b0 <HAL_RCC_OscConfig+0x240>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067d6:	e03a      	b.n	800684e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d020      	beq.n	8006822 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067e0:	4b34      	ldr	r3, [pc, #208]	@ (80068b4 <HAL_RCC_OscConfig+0x244>)
 80067e2:	2201      	movs	r2, #1
 80067e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e6:	f7fd fb11 	bl	8003e0c <HAL_GetTick>
 80067ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067ec:	e008      	b.n	8006800 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067ee:	f7fd fb0d 	bl	8003e0c <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d901      	bls.n	8006800 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e1a8      	b.n	8006b52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006800:	4b2b      	ldr	r3, [pc, #172]	@ (80068b0 <HAL_RCC_OscConfig+0x240>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0302 	and.w	r3, r3, #2
 8006808:	2b00      	cmp	r3, #0
 800680a:	d0f0      	beq.n	80067ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800680c:	4b28      	ldr	r3, [pc, #160]	@ (80068b0 <HAL_RCC_OscConfig+0x240>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	00db      	lsls	r3, r3, #3
 800681a:	4925      	ldr	r1, [pc, #148]	@ (80068b0 <HAL_RCC_OscConfig+0x240>)
 800681c:	4313      	orrs	r3, r2
 800681e:	600b      	str	r3, [r1, #0]
 8006820:	e015      	b.n	800684e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006822:	4b24      	ldr	r3, [pc, #144]	@ (80068b4 <HAL_RCC_OscConfig+0x244>)
 8006824:	2200      	movs	r2, #0
 8006826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006828:	f7fd faf0 	bl	8003e0c <HAL_GetTick>
 800682c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800682e:	e008      	b.n	8006842 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006830:	f7fd faec 	bl	8003e0c <HAL_GetTick>
 8006834:	4602      	mov	r2, r0
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	2b02      	cmp	r3, #2
 800683c:	d901      	bls.n	8006842 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e187      	b.n	8006b52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006842:	4b1b      	ldr	r3, [pc, #108]	@ (80068b0 <HAL_RCC_OscConfig+0x240>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0302 	and.w	r3, r3, #2
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1f0      	bne.n	8006830 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0308 	and.w	r3, r3, #8
 8006856:	2b00      	cmp	r3, #0
 8006858:	d036      	beq.n	80068c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d016      	beq.n	8006890 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006862:	4b15      	ldr	r3, [pc, #84]	@ (80068b8 <HAL_RCC_OscConfig+0x248>)
 8006864:	2201      	movs	r2, #1
 8006866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006868:	f7fd fad0 	bl	8003e0c <HAL_GetTick>
 800686c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800686e:	e008      	b.n	8006882 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006870:	f7fd facc 	bl	8003e0c <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	2b02      	cmp	r3, #2
 800687c:	d901      	bls.n	8006882 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e167      	b.n	8006b52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006882:	4b0b      	ldr	r3, [pc, #44]	@ (80068b0 <HAL_RCC_OscConfig+0x240>)
 8006884:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b00      	cmp	r3, #0
 800688c:	d0f0      	beq.n	8006870 <HAL_RCC_OscConfig+0x200>
 800688e:	e01b      	b.n	80068c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006890:	4b09      	ldr	r3, [pc, #36]	@ (80068b8 <HAL_RCC_OscConfig+0x248>)
 8006892:	2200      	movs	r2, #0
 8006894:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006896:	f7fd fab9 	bl	8003e0c <HAL_GetTick>
 800689a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800689c:	e00e      	b.n	80068bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800689e:	f7fd fab5 	bl	8003e0c <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d907      	bls.n	80068bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e150      	b.n	8006b52 <HAL_RCC_OscConfig+0x4e2>
 80068b0:	40023800 	.word	0x40023800
 80068b4:	42470000 	.word	0x42470000
 80068b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068bc:	4b88      	ldr	r3, [pc, #544]	@ (8006ae0 <HAL_RCC_OscConfig+0x470>)
 80068be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1ea      	bne.n	800689e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0304 	and.w	r3, r3, #4
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f000 8097 	beq.w	8006a04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068d6:	2300      	movs	r3, #0
 80068d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068da:	4b81      	ldr	r3, [pc, #516]	@ (8006ae0 <HAL_RCC_OscConfig+0x470>)
 80068dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d10f      	bne.n	8006906 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068e6:	2300      	movs	r3, #0
 80068e8:	60bb      	str	r3, [r7, #8]
 80068ea:	4b7d      	ldr	r3, [pc, #500]	@ (8006ae0 <HAL_RCC_OscConfig+0x470>)
 80068ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ee:	4a7c      	ldr	r2, [pc, #496]	@ (8006ae0 <HAL_RCC_OscConfig+0x470>)
 80068f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80068f6:	4b7a      	ldr	r3, [pc, #488]	@ (8006ae0 <HAL_RCC_OscConfig+0x470>)
 80068f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068fe:	60bb      	str	r3, [r7, #8]
 8006900:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006902:	2301      	movs	r3, #1
 8006904:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006906:	4b77      	ldr	r3, [pc, #476]	@ (8006ae4 <HAL_RCC_OscConfig+0x474>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800690e:	2b00      	cmp	r3, #0
 8006910:	d118      	bne.n	8006944 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006912:	4b74      	ldr	r3, [pc, #464]	@ (8006ae4 <HAL_RCC_OscConfig+0x474>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a73      	ldr	r2, [pc, #460]	@ (8006ae4 <HAL_RCC_OscConfig+0x474>)
 8006918:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800691c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800691e:	f7fd fa75 	bl	8003e0c <HAL_GetTick>
 8006922:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006924:	e008      	b.n	8006938 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006926:	f7fd fa71 	bl	8003e0c <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	2b02      	cmp	r3, #2
 8006932:	d901      	bls.n	8006938 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	e10c      	b.n	8006b52 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006938:	4b6a      	ldr	r3, [pc, #424]	@ (8006ae4 <HAL_RCC_OscConfig+0x474>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006940:	2b00      	cmp	r3, #0
 8006942:	d0f0      	beq.n	8006926 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d106      	bne.n	800695a <HAL_RCC_OscConfig+0x2ea>
 800694c:	4b64      	ldr	r3, [pc, #400]	@ (8006ae0 <HAL_RCC_OscConfig+0x470>)
 800694e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006950:	4a63      	ldr	r2, [pc, #396]	@ (8006ae0 <HAL_RCC_OscConfig+0x470>)
 8006952:	f043 0301 	orr.w	r3, r3, #1
 8006956:	6713      	str	r3, [r2, #112]	@ 0x70
 8006958:	e01c      	b.n	8006994 <HAL_RCC_OscConfig+0x324>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	2b05      	cmp	r3, #5
 8006960:	d10c      	bne.n	800697c <HAL_RCC_OscConfig+0x30c>
 8006962:	4b5f      	ldr	r3, [pc, #380]	@ (8006ae0 <HAL_RCC_OscConfig+0x470>)
 8006964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006966:	4a5e      	ldr	r2, [pc, #376]	@ (8006ae0 <HAL_RCC_OscConfig+0x470>)
 8006968:	f043 0304 	orr.w	r3, r3, #4
 800696c:	6713      	str	r3, [r2, #112]	@ 0x70
 800696e:	4b5c      	ldr	r3, [pc, #368]	@ (8006ae0 <HAL_RCC_OscConfig+0x470>)
 8006970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006972:	4a5b      	ldr	r2, [pc, #364]	@ (8006ae0 <HAL_RCC_OscConfig+0x470>)
 8006974:	f043 0301 	orr.w	r3, r3, #1
 8006978:	6713      	str	r3, [r2, #112]	@ 0x70
 800697a:	e00b      	b.n	8006994 <HAL_RCC_OscConfig+0x324>
 800697c:	4b58      	ldr	r3, [pc, #352]	@ (8006ae0 <HAL_RCC_OscConfig+0x470>)
 800697e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006980:	4a57      	ldr	r2, [pc, #348]	@ (8006ae0 <HAL_RCC_OscConfig+0x470>)
 8006982:	f023 0301 	bic.w	r3, r3, #1
 8006986:	6713      	str	r3, [r2, #112]	@ 0x70
 8006988:	4b55      	ldr	r3, [pc, #340]	@ (8006ae0 <HAL_RCC_OscConfig+0x470>)
 800698a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800698c:	4a54      	ldr	r2, [pc, #336]	@ (8006ae0 <HAL_RCC_OscConfig+0x470>)
 800698e:	f023 0304 	bic.w	r3, r3, #4
 8006992:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d015      	beq.n	80069c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800699c:	f7fd fa36 	bl	8003e0c <HAL_GetTick>
 80069a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069a2:	e00a      	b.n	80069ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069a4:	f7fd fa32 	bl	8003e0c <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d901      	bls.n	80069ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e0cb      	b.n	8006b52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069ba:	4b49      	ldr	r3, [pc, #292]	@ (8006ae0 <HAL_RCC_OscConfig+0x470>)
 80069bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d0ee      	beq.n	80069a4 <HAL_RCC_OscConfig+0x334>
 80069c6:	e014      	b.n	80069f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069c8:	f7fd fa20 	bl	8003e0c <HAL_GetTick>
 80069cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069ce:	e00a      	b.n	80069e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069d0:	f7fd fa1c 	bl	8003e0c <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069de:	4293      	cmp	r3, r2
 80069e0:	d901      	bls.n	80069e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e0b5      	b.n	8006b52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069e6:	4b3e      	ldr	r3, [pc, #248]	@ (8006ae0 <HAL_RCC_OscConfig+0x470>)
 80069e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ea:	f003 0302 	and.w	r3, r3, #2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1ee      	bne.n	80069d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80069f2:	7dfb      	ldrb	r3, [r7, #23]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d105      	bne.n	8006a04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069f8:	4b39      	ldr	r3, [pc, #228]	@ (8006ae0 <HAL_RCC_OscConfig+0x470>)
 80069fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069fc:	4a38      	ldr	r2, [pc, #224]	@ (8006ae0 <HAL_RCC_OscConfig+0x470>)
 80069fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a02:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 80a1 	beq.w	8006b50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a0e:	4b34      	ldr	r3, [pc, #208]	@ (8006ae0 <HAL_RCC_OscConfig+0x470>)
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f003 030c 	and.w	r3, r3, #12
 8006a16:	2b08      	cmp	r3, #8
 8006a18:	d05c      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d141      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a22:	4b31      	ldr	r3, [pc, #196]	@ (8006ae8 <HAL_RCC_OscConfig+0x478>)
 8006a24:	2200      	movs	r2, #0
 8006a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a28:	f7fd f9f0 	bl	8003e0c <HAL_GetTick>
 8006a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a2e:	e008      	b.n	8006a42 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a30:	f7fd f9ec 	bl	8003e0c <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d901      	bls.n	8006a42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e087      	b.n	8006b52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a42:	4b27      	ldr	r3, [pc, #156]	@ (8006ae0 <HAL_RCC_OscConfig+0x470>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1f0      	bne.n	8006a30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	69da      	ldr	r2, [r3, #28]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a5c:	019b      	lsls	r3, r3, #6
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a64:	085b      	lsrs	r3, r3, #1
 8006a66:	3b01      	subs	r3, #1
 8006a68:	041b      	lsls	r3, r3, #16
 8006a6a:	431a      	orrs	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a70:	061b      	lsls	r3, r3, #24
 8006a72:	491b      	ldr	r1, [pc, #108]	@ (8006ae0 <HAL_RCC_OscConfig+0x470>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a78:	4b1b      	ldr	r3, [pc, #108]	@ (8006ae8 <HAL_RCC_OscConfig+0x478>)
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a7e:	f7fd f9c5 	bl	8003e0c <HAL_GetTick>
 8006a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a84:	e008      	b.n	8006a98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a86:	f7fd f9c1 	bl	8003e0c <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d901      	bls.n	8006a98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e05c      	b.n	8006b52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a98:	4b11      	ldr	r3, [pc, #68]	@ (8006ae0 <HAL_RCC_OscConfig+0x470>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d0f0      	beq.n	8006a86 <HAL_RCC_OscConfig+0x416>
 8006aa4:	e054      	b.n	8006b50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aa6:	4b10      	ldr	r3, [pc, #64]	@ (8006ae8 <HAL_RCC_OscConfig+0x478>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aac:	f7fd f9ae 	bl	8003e0c <HAL_GetTick>
 8006ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ab2:	e008      	b.n	8006ac6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ab4:	f7fd f9aa 	bl	8003e0c <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d901      	bls.n	8006ac6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e045      	b.n	8006b52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ac6:	4b06      	ldr	r3, [pc, #24]	@ (8006ae0 <HAL_RCC_OscConfig+0x470>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1f0      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x444>
 8006ad2:	e03d      	b.n	8006b50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d107      	bne.n	8006aec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e038      	b.n	8006b52 <HAL_RCC_OscConfig+0x4e2>
 8006ae0:	40023800 	.word	0x40023800
 8006ae4:	40007000 	.word	0x40007000
 8006ae8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006aec:	4b1b      	ldr	r3, [pc, #108]	@ (8006b5c <HAL_RCC_OscConfig+0x4ec>)
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d028      	beq.n	8006b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d121      	bne.n	8006b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d11a      	bne.n	8006b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006b22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d111      	bne.n	8006b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b32:	085b      	lsrs	r3, r3, #1
 8006b34:	3b01      	subs	r3, #1
 8006b36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d107      	bne.n	8006b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d001      	beq.n	8006b50 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e000      	b.n	8006b52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3718      	adds	r7, #24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	40023800 	.word	0x40023800

08006b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e0cc      	b.n	8006d0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b74:	4b68      	ldr	r3, [pc, #416]	@ (8006d18 <HAL_RCC_ClockConfig+0x1b8>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0307 	and.w	r3, r3, #7
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d90c      	bls.n	8006b9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b82:	4b65      	ldr	r3, [pc, #404]	@ (8006d18 <HAL_RCC_ClockConfig+0x1b8>)
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	b2d2      	uxtb	r2, r2
 8006b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b8a:	4b63      	ldr	r3, [pc, #396]	@ (8006d18 <HAL_RCC_ClockConfig+0x1b8>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 0307 	and.w	r3, r3, #7
 8006b92:	683a      	ldr	r2, [r7, #0]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d001      	beq.n	8006b9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e0b8      	b.n	8006d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0302 	and.w	r3, r3, #2
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d020      	beq.n	8006bea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0304 	and.w	r3, r3, #4
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d005      	beq.n	8006bc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bb4:	4b59      	ldr	r3, [pc, #356]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	4a58      	ldr	r2, [pc, #352]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006bba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006bbe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0308 	and.w	r3, r3, #8
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d005      	beq.n	8006bd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bcc:	4b53      	ldr	r3, [pc, #332]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	4a52      	ldr	r2, [pc, #328]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006bd2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006bd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bd8:	4b50      	ldr	r3, [pc, #320]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	494d      	ldr	r1, [pc, #308]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d044      	beq.n	8006c80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d107      	bne.n	8006c0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bfe:	4b47      	ldr	r3, [pc, #284]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d119      	bne.n	8006c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e07f      	b.n	8006d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d003      	beq.n	8006c1e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c1a:	2b03      	cmp	r3, #3
 8006c1c:	d107      	bne.n	8006c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c1e:	4b3f      	ldr	r3, [pc, #252]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d109      	bne.n	8006c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e06f      	b.n	8006d0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c2e:	4b3b      	ldr	r3, [pc, #236]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d101      	bne.n	8006c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e067      	b.n	8006d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c3e:	4b37      	ldr	r3, [pc, #220]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f023 0203 	bic.w	r2, r3, #3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	4934      	ldr	r1, [pc, #208]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c50:	f7fd f8dc 	bl	8003e0c <HAL_GetTick>
 8006c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c56:	e00a      	b.n	8006c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c58:	f7fd f8d8 	bl	8003e0c <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d901      	bls.n	8006c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e04f      	b.n	8006d0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	f003 020c 	and.w	r2, r3, #12
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d1eb      	bne.n	8006c58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c80:	4b25      	ldr	r3, [pc, #148]	@ (8006d18 <HAL_RCC_ClockConfig+0x1b8>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0307 	and.w	r3, r3, #7
 8006c88:	683a      	ldr	r2, [r7, #0]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d20c      	bcs.n	8006ca8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c8e:	4b22      	ldr	r3, [pc, #136]	@ (8006d18 <HAL_RCC_ClockConfig+0x1b8>)
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	b2d2      	uxtb	r2, r2
 8006c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c96:	4b20      	ldr	r3, [pc, #128]	@ (8006d18 <HAL_RCC_ClockConfig+0x1b8>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0307 	and.w	r3, r3, #7
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d001      	beq.n	8006ca8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e032      	b.n	8006d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0304 	and.w	r3, r3, #4
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d008      	beq.n	8006cc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cb4:	4b19      	ldr	r3, [pc, #100]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	4916      	ldr	r1, [pc, #88]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0308 	and.w	r3, r3, #8
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d009      	beq.n	8006ce6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cd2:	4b12      	ldr	r3, [pc, #72]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	00db      	lsls	r3, r3, #3
 8006ce0:	490e      	ldr	r1, [pc, #56]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006ce6:	f000 f821 	bl	8006d2c <HAL_RCC_GetSysClockFreq>
 8006cea:	4602      	mov	r2, r0
 8006cec:	4b0b      	ldr	r3, [pc, #44]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	091b      	lsrs	r3, r3, #4
 8006cf2:	f003 030f 	and.w	r3, r3, #15
 8006cf6:	490a      	ldr	r1, [pc, #40]	@ (8006d20 <HAL_RCC_ClockConfig+0x1c0>)
 8006cf8:	5ccb      	ldrb	r3, [r1, r3]
 8006cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8006cfe:	4a09      	ldr	r2, [pc, #36]	@ (8006d24 <HAL_RCC_ClockConfig+0x1c4>)
 8006d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006d02:	4b09      	ldr	r3, [pc, #36]	@ (8006d28 <HAL_RCC_ClockConfig+0x1c8>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fd f83c 	bl	8003d84 <HAL_InitTick>

  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	40023c00 	.word	0x40023c00
 8006d1c:	40023800 	.word	0x40023800
 8006d20:	08010eb0 	.word	0x08010eb0
 8006d24:	20000010 	.word	0x20000010
 8006d28:	20000014 	.word	0x20000014

08006d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d30:	b090      	sub	sp, #64	@ 0x40
 8006d32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006d34:	2300      	movs	r3, #0
 8006d36:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006d40:	2300      	movs	r3, #0
 8006d42:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d44:	4b59      	ldr	r3, [pc, #356]	@ (8006eac <HAL_RCC_GetSysClockFreq+0x180>)
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f003 030c 	and.w	r3, r3, #12
 8006d4c:	2b08      	cmp	r3, #8
 8006d4e:	d00d      	beq.n	8006d6c <HAL_RCC_GetSysClockFreq+0x40>
 8006d50:	2b08      	cmp	r3, #8
 8006d52:	f200 80a1 	bhi.w	8006e98 <HAL_RCC_GetSysClockFreq+0x16c>
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d002      	beq.n	8006d60 <HAL_RCC_GetSysClockFreq+0x34>
 8006d5a:	2b04      	cmp	r3, #4
 8006d5c:	d003      	beq.n	8006d66 <HAL_RCC_GetSysClockFreq+0x3a>
 8006d5e:	e09b      	b.n	8006e98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d60:	4b53      	ldr	r3, [pc, #332]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006d62:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006d64:	e09b      	b.n	8006e9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d66:	4b53      	ldr	r3, [pc, #332]	@ (8006eb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006d68:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006d6a:	e098      	b.n	8006e9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d6c:	4b4f      	ldr	r3, [pc, #316]	@ (8006eac <HAL_RCC_GetSysClockFreq+0x180>)
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d74:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d76:	4b4d      	ldr	r3, [pc, #308]	@ (8006eac <HAL_RCC_GetSysClockFreq+0x180>)
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d028      	beq.n	8006dd4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d82:	4b4a      	ldr	r3, [pc, #296]	@ (8006eac <HAL_RCC_GetSysClockFreq+0x180>)
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	099b      	lsrs	r3, r3, #6
 8006d88:	2200      	movs	r2, #0
 8006d8a:	623b      	str	r3, [r7, #32]
 8006d8c:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d8e:	6a3b      	ldr	r3, [r7, #32]
 8006d90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006d94:	2100      	movs	r1, #0
 8006d96:	4b47      	ldr	r3, [pc, #284]	@ (8006eb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006d98:	fb03 f201 	mul.w	r2, r3, r1
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	fb00 f303 	mul.w	r3, r0, r3
 8006da2:	4413      	add	r3, r2
 8006da4:	4a43      	ldr	r2, [pc, #268]	@ (8006eb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006da6:	fba0 1202 	umull	r1, r2, r0, r2
 8006daa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006dac:	460a      	mov	r2, r1
 8006dae:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006db0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006db2:	4413      	add	r3, r2
 8006db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006db8:	2200      	movs	r2, #0
 8006dba:	61bb      	str	r3, [r7, #24]
 8006dbc:	61fa      	str	r2, [r7, #28]
 8006dbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006dc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006dc6:	f7f9 ff67 	bl	8000c98 <__aeabi_uldivmod>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	460b      	mov	r3, r1
 8006dce:	4613      	mov	r3, r2
 8006dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dd2:	e053      	b.n	8006e7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dd4:	4b35      	ldr	r3, [pc, #212]	@ (8006eac <HAL_RCC_GetSysClockFreq+0x180>)
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	099b      	lsrs	r3, r3, #6
 8006dda:	2200      	movs	r2, #0
 8006ddc:	613b      	str	r3, [r7, #16]
 8006dde:	617a      	str	r2, [r7, #20]
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006de6:	f04f 0b00 	mov.w	fp, #0
 8006dea:	4652      	mov	r2, sl
 8006dec:	465b      	mov	r3, fp
 8006dee:	f04f 0000 	mov.w	r0, #0
 8006df2:	f04f 0100 	mov.w	r1, #0
 8006df6:	0159      	lsls	r1, r3, #5
 8006df8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006dfc:	0150      	lsls	r0, r2, #5
 8006dfe:	4602      	mov	r2, r0
 8006e00:	460b      	mov	r3, r1
 8006e02:	ebb2 080a 	subs.w	r8, r2, sl
 8006e06:	eb63 090b 	sbc.w	r9, r3, fp
 8006e0a:	f04f 0200 	mov.w	r2, #0
 8006e0e:	f04f 0300 	mov.w	r3, #0
 8006e12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006e16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006e1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006e1e:	ebb2 0408 	subs.w	r4, r2, r8
 8006e22:	eb63 0509 	sbc.w	r5, r3, r9
 8006e26:	f04f 0200 	mov.w	r2, #0
 8006e2a:	f04f 0300 	mov.w	r3, #0
 8006e2e:	00eb      	lsls	r3, r5, #3
 8006e30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e34:	00e2      	lsls	r2, r4, #3
 8006e36:	4614      	mov	r4, r2
 8006e38:	461d      	mov	r5, r3
 8006e3a:	eb14 030a 	adds.w	r3, r4, sl
 8006e3e:	603b      	str	r3, [r7, #0]
 8006e40:	eb45 030b 	adc.w	r3, r5, fp
 8006e44:	607b      	str	r3, [r7, #4]
 8006e46:	f04f 0200 	mov.w	r2, #0
 8006e4a:	f04f 0300 	mov.w	r3, #0
 8006e4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e52:	4629      	mov	r1, r5
 8006e54:	028b      	lsls	r3, r1, #10
 8006e56:	4621      	mov	r1, r4
 8006e58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	028a      	lsls	r2, r1, #10
 8006e60:	4610      	mov	r0, r2
 8006e62:	4619      	mov	r1, r3
 8006e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e66:	2200      	movs	r2, #0
 8006e68:	60bb      	str	r3, [r7, #8]
 8006e6a:	60fa      	str	r2, [r7, #12]
 8006e6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e70:	f7f9 ff12 	bl	8000c98 <__aeabi_uldivmod>
 8006e74:	4602      	mov	r2, r0
 8006e76:	460b      	mov	r3, r1
 8006e78:	4613      	mov	r3, r2
 8006e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8006eac <HAL_RCC_GetSysClockFreq+0x180>)
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	0c1b      	lsrs	r3, r3, #16
 8006e82:	f003 0303 	and.w	r3, r3, #3
 8006e86:	3301      	adds	r3, #1
 8006e88:	005b      	lsls	r3, r3, #1
 8006e8a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006e8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e94:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006e96:	e002      	b.n	8006e9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e98:	4b05      	ldr	r3, [pc, #20]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3740      	adds	r7, #64	@ 0x40
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006eaa:	bf00      	nop
 8006eac:	40023800 	.word	0x40023800
 8006eb0:	00f42400 	.word	0x00f42400
 8006eb4:	017d7840 	.word	0x017d7840

08006eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ebc:	4b03      	ldr	r3, [pc, #12]	@ (8006ecc <HAL_RCC_GetHCLKFreq+0x14>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	20000010 	.word	0x20000010

08006ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ed4:	f7ff fff0 	bl	8006eb8 <HAL_RCC_GetHCLKFreq>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	4b05      	ldr	r3, [pc, #20]	@ (8006ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	0a9b      	lsrs	r3, r3, #10
 8006ee0:	f003 0307 	and.w	r3, r3, #7
 8006ee4:	4903      	ldr	r1, [pc, #12]	@ (8006ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ee6:	5ccb      	ldrb	r3, [r1, r3]
 8006ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	40023800 	.word	0x40023800
 8006ef4:	08010ec0 	.word	0x08010ec0

08006ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006efc:	f7ff ffdc 	bl	8006eb8 <HAL_RCC_GetHCLKFreq>
 8006f00:	4602      	mov	r2, r0
 8006f02:	4b05      	ldr	r3, [pc, #20]	@ (8006f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	0b5b      	lsrs	r3, r3, #13
 8006f08:	f003 0307 	and.w	r3, r3, #7
 8006f0c:	4903      	ldr	r1, [pc, #12]	@ (8006f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f0e:	5ccb      	ldrb	r3, [r1, r3]
 8006f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	40023800 	.word	0x40023800
 8006f1c:	08010ec0 	.word	0x08010ec0

08006f20 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e022      	b.n	8006f78 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d105      	bne.n	8006f4a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f7fc fb29 	bl	800359c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2203      	movs	r2, #3
 8006f4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f814 	bl	8006f80 <HAL_SD_InitCard>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e00a      	b.n	8006f78 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006f80:	b5b0      	push	{r4, r5, r7, lr}
 8006f82:	b08e      	sub	sp, #56	@ 0x38
 8006f84:	af04      	add	r7, sp, #16
 8006f86:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006f90:	2300      	movs	r3, #0
 8006f92:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006f94:	2300      	movs	r3, #0
 8006f96:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006f9c:	2376      	movs	r3, #118	@ 0x76
 8006f9e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681d      	ldr	r5, [r3, #0]
 8006fa4:	466c      	mov	r4, sp
 8006fa6:	f107 0314 	add.w	r3, r7, #20
 8006faa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006fae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006fb2:	f107 0308 	add.w	r3, r7, #8
 8006fb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006fb8:	4628      	mov	r0, r5
 8006fba:	f002 fe49 	bl	8009c50 <SDIO_Init>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8006fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d001      	beq.n	8006fd0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e04f      	b.n	8007070 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006fd0:	4b29      	ldr	r3, [pc, #164]	@ (8007078 <HAL_SD_InitCard+0xf8>)
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f002 fe81 	bl	8009ce2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006fe0:	4b25      	ldr	r3, [pc, #148]	@ (8007078 <HAL_SD_InitCard+0xf8>)
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8006fe6:	2002      	movs	r0, #2
 8006fe8:	f7fc ff1c 	bl	8003e24 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f001 f805 	bl	8007ffc <SD_PowerON>
 8006ff2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ff4:	6a3b      	ldr	r3, [r7, #32]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00b      	beq.n	8007012 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	431a      	orrs	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e02e      	b.n	8007070 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 ff24 	bl	8007e60 <SD_InitCard>
 8007018:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800701a:	6a3b      	ldr	r3, [r7, #32]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00b      	beq.n	8007038 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800702c:	6a3b      	ldr	r3, [r7, #32]
 800702e:	431a      	orrs	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e01b      	b.n	8007070 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007040:	4618      	mov	r0, r3
 8007042:	f002 fee0 	bl	8009e06 <SDMMC_CmdBlockLength>
 8007046:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00f      	beq.n	800706e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a0a      	ldr	r2, [pc, #40]	@ (800707c <HAL_SD_InitCard+0xfc>)
 8007054:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800705a:	6a3b      	ldr	r3, [r7, #32]
 800705c:	431a      	orrs	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e000      	b.n	8007070 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3728      	adds	r7, #40	@ 0x28
 8007074:	46bd      	mov	sp, r7
 8007076:	bdb0      	pop	{r4, r5, r7, pc}
 8007078:	422580a0 	.word	0x422580a0
 800707c:	004005ff 	.word	0x004005ff

08007080 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b08c      	sub	sp, #48	@ 0x30
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
 800708c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d107      	bne.n	80070a8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e0c0      	b.n	800722a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	f040 80b9 	bne.w	8007228 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80070bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	441a      	add	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d907      	bls.n	80070da <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ce:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e0a7      	b.n	800722a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2203      	movs	r2, #3
 80070de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2200      	movs	r2, #0
 80070e8:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	6812      	ldr	r2, [r2, #0]
 80070f4:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 80070f8:	f043 0302 	orr.w	r3, r3, #2
 80070fc:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007102:	4a4c      	ldr	r2, [pc, #304]	@ (8007234 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8007104:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800710a:	4a4b      	ldr	r2, [pc, #300]	@ (8007238 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800710c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007112:	2200      	movs	r2, #0
 8007114:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800711a:	2200      	movs	r2, #0
 800711c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	430a      	orrs	r2, r1
 8007138:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	3380      	adds	r3, #128	@ 0x80
 8007144:	4619      	mov	r1, r3
 8007146:	68ba      	ldr	r2, [r7, #8]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	025b      	lsls	r3, r3, #9
 800714c:	089b      	lsrs	r3, r3, #2
 800714e:	f7fd fabf 	bl	80046d0 <HAL_DMA_Start_IT>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d017      	beq.n	8007188 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8007166:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a33      	ldr	r2, [pc, #204]	@ (800723c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800716e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007174:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	e050      	b.n	800722a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007188:	4b2d      	ldr	r3, [pc, #180]	@ (8007240 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800718a:	2201      	movs	r2, #1
 800718c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007192:	2b01      	cmp	r3, #1
 8007194:	d002      	beq.n	800719c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8007196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007198:	025b      	lsls	r3, r3, #9
 800719a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800719c:	f04f 33ff 	mov.w	r3, #4294967295
 80071a0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	025b      	lsls	r3, r3, #9
 80071a6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80071a8:	2390      	movs	r3, #144	@ 0x90
 80071aa:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80071ac:	2302      	movs	r3, #2
 80071ae:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80071b0:	2300      	movs	r3, #0
 80071b2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80071b4:	2301      	movs	r3, #1
 80071b6:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f107 0210 	add.w	r2, r7, #16
 80071c0:	4611      	mov	r1, r2
 80071c2:	4618      	mov	r0, r3
 80071c4:	f002 fdf3 	bl	8009dae <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d90a      	bls.n	80071e4 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2282      	movs	r2, #130	@ 0x82
 80071d2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071da:	4618      	mov	r0, r3
 80071dc:	f002 fe57 	bl	8009e8e <SDMMC_CmdReadMultiBlock>
 80071e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80071e2:	e009      	b.n	80071f8 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2281      	movs	r2, #129	@ 0x81
 80071e8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071f0:	4618      	mov	r0, r3
 80071f2:	f002 fe2a 	bl	8009e4a <SDMMC_CmdReadSingleBlock>
 80071f6:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80071f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d012      	beq.n	8007224 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a0e      	ldr	r2, [pc, #56]	@ (800723c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007204:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800720a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800720c:	431a      	orrs	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e002      	b.n	800722a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8007224:	2300      	movs	r3, #0
 8007226:	e000      	b.n	800722a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8007228:	2302      	movs	r3, #2
  }
}
 800722a:	4618      	mov	r0, r3
 800722c:	3730      	adds	r7, #48	@ 0x30
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	08007c6f 	.word	0x08007c6f
 8007238:	08007ce1 	.word	0x08007ce1
 800723c:	004005ff 	.word	0x004005ff
 8007240:	4225858c 	.word	0x4225858c

08007244 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b08c      	sub	sp, #48	@ 0x30
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
 8007250:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d107      	bne.n	800726c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007260:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e0c5      	b.n	80073f8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007272:	b2db      	uxtb	r3, r3
 8007274:	2b01      	cmp	r3, #1
 8007276:	f040 80be 	bne.w	80073f6 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007280:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	441a      	add	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800728a:	429a      	cmp	r2, r3
 800728c:	d907      	bls.n	800729e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007292:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e0ac      	b.n	80073f8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2203      	movs	r2, #3
 80072a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2200      	movs	r2, #0
 80072ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	6812      	ldr	r2, [r2, #0]
 80072b8:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 80072bc:	f043 0302 	orr.w	r3, r3, #2
 80072c0:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072c6:	4a4e      	ldr	r2, [pc, #312]	@ (8007400 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80072c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072ce:	4a4d      	ldr	r2, [pc, #308]	@ (8007404 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80072d0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072d6:	2200      	movs	r2, #0
 80072d8:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d002      	beq.n	80072e8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80072e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e4:	025b      	lsls	r3, r3, #9
 80072e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d90a      	bls.n	8007304 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	22a0      	movs	r2, #160	@ 0xa0
 80072f2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072fa:	4618      	mov	r0, r3
 80072fc:	f002 fe0b 	bl	8009f16 <SDMMC_CmdWriteMultiBlock>
 8007300:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007302:	e009      	b.n	8007318 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2290      	movs	r2, #144	@ 0x90
 8007308:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007310:	4618      	mov	r0, r3
 8007312:	f002 fdde 	bl	8009ed2 <SDMMC_CmdWriteSingleBlock>
 8007316:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800731a:	2b00      	cmp	r3, #0
 800731c:	d012      	beq.n	8007344 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a39      	ldr	r2, [pc, #228]	@ (8007408 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8007324:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800732a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800732c:	431a      	orrs	r2, r3
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e059      	b.n	80073f8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007344:	4b31      	ldr	r3, [pc, #196]	@ (800740c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8007346:	2201      	movs	r2, #1
 8007348:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800734e:	2240      	movs	r2, #64	@ 0x40
 8007350:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007362:	689a      	ldr	r2, [r3, #8]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	430a      	orrs	r2, r1
 800736c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007372:	68b9      	ldr	r1, [r7, #8]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	3380      	adds	r3, #128	@ 0x80
 800737a:	461a      	mov	r2, r3
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	025b      	lsls	r3, r3, #9
 8007380:	089b      	lsrs	r3, r3, #2
 8007382:	f7fd f9a5 	bl	80046d0 <HAL_DMA_Start_IT>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d01c      	beq.n	80073c6 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	6812      	ldr	r2, [r2, #0]
 8007396:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 800739a:	f023 0302 	bic.w	r3, r3, #2
 800739e:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a18      	ldr	r2, [pc, #96]	@ (8007408 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80073a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e018      	b.n	80073f8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80073c6:	f04f 33ff 	mov.w	r3, #4294967295
 80073ca:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	025b      	lsls	r3, r3, #9
 80073d0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80073d2:	2390      	movs	r3, #144	@ 0x90
 80073d4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80073d6:	2300      	movs	r3, #0
 80073d8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80073da:	2300      	movs	r3, #0
 80073dc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80073de:	2301      	movs	r3, #1
 80073e0:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f107 0210 	add.w	r2, r7, #16
 80073ea:	4611      	mov	r1, r2
 80073ec:	4618      	mov	r0, r3
 80073ee:	f002 fcde 	bl	8009dae <SDIO_ConfigData>

      return HAL_OK;
 80073f2:	2300      	movs	r3, #0
 80073f4:	e000      	b.n	80073f8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80073f6:	2302      	movs	r3, #2
  }
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3730      	adds	r7, #48	@ 0x30
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	08007c45 	.word	0x08007c45
 8007404:	08007ce1 	.word	0x08007ce1
 8007408:	004005ff 	.word	0x004005ff
 800740c:	4225858c 	.word	0x4225858c

08007410 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800741c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007424:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d008      	beq.n	800743e <HAL_SD_IRQHandler+0x2e>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f003 0308 	and.w	r3, r3, #8
 8007432:	2b00      	cmp	r3, #0
 8007434:	d003      	beq.n	800743e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f001 f806 	bl	8008448 <SD_Read_IT>
 800743c:	e165      	b.n	800770a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 808f 	beq.w	800756c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007456:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	6812      	ldr	r2, [r2, #0]
 8007462:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8007466:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800746a:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f022 0201 	bic.w	r2, r2, #1
 800747a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f003 0308 	and.w	r3, r3, #8
 8007482:	2b00      	cmp	r3, #0
 8007484:	d039      	beq.n	80074fa <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f003 0302 	and.w	r3, r3, #2
 800748c:	2b00      	cmp	r3, #0
 800748e:	d104      	bne.n	800749a <HAL_SD_IRQHandler+0x8a>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f003 0320 	and.w	r3, r3, #32
 8007496:	2b00      	cmp	r3, #0
 8007498:	d011      	beq.n	80074be <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4618      	mov	r0, r3
 80074a0:	f002 fd5c 	bl	8009f5c <SDMMC_CmdStopTransfer>
 80074a4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d008      	beq.n	80074be <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	431a      	orrs	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f92f 	bl	800771c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f240 523a 	movw	r2, #1338	@ 0x53a
 80074c6:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f003 0301 	and.w	r3, r3, #1
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d104      	bne.n	80074ea <HAL_SD_IRQHandler+0xda>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f003 0302 	and.w	r3, r3, #2
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d003      	beq.n	80074f2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f003 f9c2 	bl	800a874 <HAL_SD_RxCpltCallback>
 80074f0:	e10b      	b.n	800770a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f003 f9b4 	bl	800a860 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80074f8:	e107      	b.n	800770a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007500:	2b00      	cmp	r3, #0
 8007502:	f000 8102 	beq.w	800770a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f003 0320 	and.w	r3, r3, #32
 800750c:	2b00      	cmp	r3, #0
 800750e:	d011      	beq.n	8007534 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4618      	mov	r0, r3
 8007516:	f002 fd21 	bl	8009f5c <SDMMC_CmdStopTransfer>
 800751a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d008      	beq.n	8007534 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	431a      	orrs	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f8f4 	bl	800771c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	2b00      	cmp	r3, #0
 800753c:	f040 80e5 	bne.w	800770a <HAL_SD_IRQHandler+0x2fa>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f003 0302 	and.w	r3, r3, #2
 8007546:	2b00      	cmp	r3, #0
 8007548:	f040 80df 	bne.w	800770a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f022 0208 	bic.w	r2, r2, #8
 800755a:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f003 f97b 	bl	800a860 <HAL_SD_TxCpltCallback>
}
 800756a:	e0ce      	b.n	800770a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007572:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d008      	beq.n	800758c <HAL_SD_IRQHandler+0x17c>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f003 0308 	and.w	r3, r3, #8
 8007580:	2b00      	cmp	r3, #0
 8007582:	d003      	beq.n	800758c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 ffb0 	bl	80084ea <SD_Write_IT>
 800758a:	e0be      	b.n	800770a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007592:	f240 233a 	movw	r3, #570	@ 0x23a
 8007596:	4013      	ands	r3, r2
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 80b6 	beq.w	800770a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075a4:	f003 0302 	and.w	r3, r3, #2
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d005      	beq.n	80075b8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075b0:	f043 0202 	orr.w	r2, r3, #2
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075be:	f003 0308 	and.w	r3, r3, #8
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d005      	beq.n	80075d2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ca:	f043 0208 	orr.w	r2, r3, #8
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075d8:	f003 0320 	and.w	r3, r3, #32
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d005      	beq.n	80075ec <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075e4:	f043 0220 	orr.w	r2, r3, #32
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075f2:	f003 0310 	and.w	r3, r3, #16
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d005      	beq.n	8007606 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075fe:	f043 0210 	orr.w	r2, r3, #16
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800760c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007610:	2b00      	cmp	r3, #0
 8007612:	d005      	beq.n	8007620 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007618:	f043 0208 	orr.w	r2, r3, #8
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f240 723a 	movw	r2, #1850	@ 0x73a
 8007628:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	6812      	ldr	r2, [r2, #0]
 8007634:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8007638:	f023 0302 	bic.w	r3, r3, #2
 800763c:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4618      	mov	r0, r3
 8007644:	f002 fc8a 	bl	8009f5c <SDMMC_CmdStopTransfer>
 8007648:	4602      	mov	r2, r0
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800764e:	431a      	orrs	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f003 0308 	and.w	r3, r3, #8
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00a      	beq.n	8007674 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 f855 	bl	800771c <HAL_SD_ErrorCallback>
}
 8007672:	e04a      	b.n	800770a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800767a:	2b00      	cmp	r3, #0
 800767c:	d045      	beq.n	800770a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f003 0310 	and.w	r3, r3, #16
 8007684:	2b00      	cmp	r3, #0
 8007686:	d104      	bne.n	8007692 <HAL_SD_IRQHandler+0x282>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f003 0320 	and.w	r3, r3, #32
 800768e:	2b00      	cmp	r3, #0
 8007690:	d011      	beq.n	80076b6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007696:	4a1f      	ldr	r2, [pc, #124]	@ (8007714 <HAL_SD_IRQHandler+0x304>)
 8007698:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fd f8de 	bl	8004860 <HAL_DMA_Abort_IT>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d02f      	beq.n	800770a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076ae:	4618      	mov	r0, r3
 80076b0:	f000 fb68 	bl	8007d84 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80076b4:	e029      	b.n	800770a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d104      	bne.n	80076ca <HAL_SD_IRQHandler+0x2ba>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f003 0302 	and.w	r3, r3, #2
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d011      	beq.n	80076ee <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ce:	4a12      	ldr	r2, [pc, #72]	@ (8007718 <HAL_SD_IRQHandler+0x308>)
 80076d0:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7fd f8c2 	bl	8004860 <HAL_DMA_Abort_IT>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d013      	beq.n	800770a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e6:	4618      	mov	r0, r3
 80076e8:	f000 fb83 	bl	8007df2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80076ec:	e00d      	b.n	800770a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f003 f8a2 	bl	800a84c <HAL_SD_AbortCallback>
}
 8007708:	e7ff      	b.n	800770a <HAL_SD_IRQHandler+0x2fa>
 800770a:	bf00      	nop
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	08007d85 	.word	0x08007d85
 8007718:	08007df3 	.word	0x08007df3

0800771c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800773e:	0f9b      	lsrs	r3, r3, #30
 8007740:	b2da      	uxtb	r2, r3
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800774a:	0e9b      	lsrs	r3, r3, #26
 800774c:	b2db      	uxtb	r3, r3
 800774e:	f003 030f 	and.w	r3, r3, #15
 8007752:	b2da      	uxtb	r2, r3
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800775c:	0e1b      	lsrs	r3, r3, #24
 800775e:	b2db      	uxtb	r3, r3
 8007760:	f003 0303 	and.w	r3, r3, #3
 8007764:	b2da      	uxtb	r2, r3
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800776e:	0c1b      	lsrs	r3, r3, #16
 8007770:	b2da      	uxtb	r2, r3
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800777a:	0a1b      	lsrs	r3, r3, #8
 800777c:	b2da      	uxtb	r2, r3
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007786:	b2da      	uxtb	r2, r3
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007790:	0d1b      	lsrs	r3, r3, #20
 8007792:	b29a      	uxth	r2, r3
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800779c:	0c1b      	lsrs	r3, r3, #16
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	f003 030f 	and.w	r3, r3, #15
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077ae:	0bdb      	lsrs	r3, r3, #15
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	f003 0301 	and.w	r3, r3, #1
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077c0:	0b9b      	lsrs	r3, r3, #14
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	b2da      	uxtb	r2, r3
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077d2:	0b5b      	lsrs	r3, r3, #13
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	f003 0301 	and.w	r3, r3, #1
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077e4:	0b1b      	lsrs	r3, r3, #12
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	f003 0301 	and.w	r3, r3, #1
 80077ec:	b2da      	uxtb	r2, r3
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2200      	movs	r2, #0
 80077f6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d163      	bne.n	80078c8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007804:	009a      	lsls	r2, r3, #2
 8007806:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800780a:	4013      	ands	r3, r2
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8007810:	0f92      	lsrs	r2, r2, #30
 8007812:	431a      	orrs	r2, r3
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800781c:	0edb      	lsrs	r3, r3, #27
 800781e:	b2db      	uxtb	r3, r3
 8007820:	f003 0307 	and.w	r3, r3, #7
 8007824:	b2da      	uxtb	r2, r3
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800782e:	0e1b      	lsrs	r3, r3, #24
 8007830:	b2db      	uxtb	r3, r3
 8007832:	f003 0307 	and.w	r3, r3, #7
 8007836:	b2da      	uxtb	r2, r3
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007840:	0d5b      	lsrs	r3, r3, #21
 8007842:	b2db      	uxtb	r3, r3
 8007844:	f003 0307 	and.w	r3, r3, #7
 8007848:	b2da      	uxtb	r2, r3
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007852:	0c9b      	lsrs	r3, r3, #18
 8007854:	b2db      	uxtb	r3, r3
 8007856:	f003 0307 	and.w	r3, r3, #7
 800785a:	b2da      	uxtb	r2, r3
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007864:	0bdb      	lsrs	r3, r3, #15
 8007866:	b2db      	uxtb	r3, r3
 8007868:	f003 0307 	and.w	r3, r3, #7
 800786c:	b2da      	uxtb	r2, r3
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	1c5a      	adds	r2, r3, #1
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	7e1b      	ldrb	r3, [r3, #24]
 8007880:	b2db      	uxtb	r3, r3
 8007882:	f003 0307 	and.w	r3, r3, #7
 8007886:	3302      	adds	r3, #2
 8007888:	2201      	movs	r2, #1
 800788a:	fa02 f303 	lsl.w	r3, r2, r3
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007892:	fb03 f202 	mul.w	r2, r3, r2
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	7a1b      	ldrb	r3, [r3, #8]
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	f003 030f 	and.w	r3, r3, #15
 80078a4:	2201      	movs	r2, #1
 80078a6:	409a      	lsls	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80078b4:	0a52      	lsrs	r2, r2, #9
 80078b6:	fb03 f202 	mul.w	r2, r3, r2
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80078c4:	661a      	str	r2, [r3, #96]	@ 0x60
 80078c6:	e031      	b.n	800792c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d11d      	bne.n	800790c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80078d4:	041b      	lsls	r3, r3, #16
 80078d6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078de:	0c1b      	lsrs	r3, r3, #16
 80078e0:	431a      	orrs	r2, r3
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	3301      	adds	r3, #1
 80078ec:	029a      	lsls	r2, r3, #10
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007900:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	661a      	str	r2, [r3, #96]	@ 0x60
 800790a:	e00f      	b.n	800792c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a58      	ldr	r2, [pc, #352]	@ (8007a74 <HAL_SD_GetCardCSD+0x344>)
 8007912:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007918:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e09d      	b.n	8007a68 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007930:	0b9b      	lsrs	r3, r3, #14
 8007932:	b2db      	uxtb	r3, r3
 8007934:	f003 0301 	and.w	r3, r3, #1
 8007938:	b2da      	uxtb	r2, r3
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007942:	09db      	lsrs	r3, r3, #7
 8007944:	b2db      	uxtb	r3, r3
 8007946:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800794a:	b2da      	uxtb	r2, r3
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007954:	b2db      	uxtb	r3, r3
 8007956:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800795a:	b2da      	uxtb	r2, r3
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007964:	0fdb      	lsrs	r3, r3, #31
 8007966:	b2da      	uxtb	r2, r3
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007970:	0f5b      	lsrs	r3, r3, #29
 8007972:	b2db      	uxtb	r3, r3
 8007974:	f003 0303 	and.w	r3, r3, #3
 8007978:	b2da      	uxtb	r2, r3
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007982:	0e9b      	lsrs	r3, r3, #26
 8007984:	b2db      	uxtb	r3, r3
 8007986:	f003 0307 	and.w	r3, r3, #7
 800798a:	b2da      	uxtb	r2, r3
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007994:	0d9b      	lsrs	r3, r3, #22
 8007996:	b2db      	uxtb	r3, r3
 8007998:	f003 030f 	and.w	r3, r3, #15
 800799c:	b2da      	uxtb	r2, r3
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079a6:	0d5b      	lsrs	r3, r3, #21
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079c2:	0c1b      	lsrs	r3, r3, #16
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	f003 0301 	and.w	r3, r3, #1
 80079ca:	b2da      	uxtb	r2, r3
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079d6:	0bdb      	lsrs	r3, r3, #15
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	f003 0301 	and.w	r3, r3, #1
 80079de:	b2da      	uxtb	r2, r3
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079ea:	0b9b      	lsrs	r3, r3, #14
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	b2da      	uxtb	r2, r3
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079fe:	0b5b      	lsrs	r3, r3, #13
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	b2da      	uxtb	r2, r3
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a12:	0b1b      	lsrs	r3, r3, #12
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	f003 0301 	and.w	r3, r3, #1
 8007a1a:	b2da      	uxtb	r2, r3
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a26:	0a9b      	lsrs	r3, r3, #10
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	f003 0303 	and.w	r3, r3, #3
 8007a2e:	b2da      	uxtb	r2, r3
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a3a:	0a1b      	lsrs	r3, r3, #8
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	f003 0303 	and.w	r3, r3, #3
 8007a42:	b2da      	uxtb	r2, r3
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a4e:	085b      	lsrs	r3, r3, #1
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a56:	b2da      	uxtb	r2, r3
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr
 8007a74:	004005ff 	.word	0x004005ff

08007a78 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007ad0:	b5b0      	push	{r4, r5, r7, lr}
 8007ad2:	b08e      	sub	sp, #56	@ 0x38
 8007ad4:	af04      	add	r7, sp, #16
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007ada:	2300      	movs	r3, #0
 8007adc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2203      	movs	r2, #3
 8007ae4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aec:	2b03      	cmp	r3, #3
 8007aee:	d02e      	beq.n	8007b4e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007af6:	d106      	bne.n	8007b06 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007afc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	639a      	str	r2, [r3, #56]	@ 0x38
 8007b04:	e029      	b.n	8007b5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b0c:	d10a      	bne.n	8007b24 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 fb2a 	bl	8008168 <SD_WideBus_Enable>
 8007b14:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b1a:	6a3b      	ldr	r3, [r7, #32]
 8007b1c:	431a      	orrs	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	639a      	str	r2, [r3, #56]	@ 0x38
 8007b22:	e01a      	b.n	8007b5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10a      	bne.n	8007b40 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fb67 	bl	80081fe <SD_WideBus_Disable>
 8007b30:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	431a      	orrs	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	639a      	str	r2, [r3, #56]	@ 0x38
 8007b3e:	e00c      	b.n	8007b5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b44:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	639a      	str	r2, [r3, #56]	@ 0x38
 8007b4c:	e005      	b.n	8007b5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b52:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00b      	beq.n	8007b7a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a26      	ldr	r2, [pc, #152]	@ (8007c00 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007b68:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007b78:	e01f      	b.n	8007bba <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	695b      	ldr	r3, [r3, #20]
 8007b94:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681d      	ldr	r5, [r3, #0]
 8007ba0:	466c      	mov	r4, sp
 8007ba2:	f107 0314 	add.w	r3, r7, #20
 8007ba6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007baa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007bae:	f107 0308 	add.w	r3, r7, #8
 8007bb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	f002 f84b 	bl	8009c50 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f002 f91f 	bl	8009e06 <SDMMC_CmdBlockLength>
 8007bc8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bca:	6a3b      	ldr	r3, [r7, #32]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00c      	beq.n	8007bea <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8007c00 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007bd6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bdc:	6a3b      	ldr	r3, [r7, #32]
 8007bde:	431a      	orrs	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8007bf2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3728      	adds	r7, #40	@ 0x28
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	004005ff 	.word	0x004005ff

08007c04 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b086      	sub	sp, #24
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007c10:	f107 030c 	add.w	r3, r7, #12
 8007c14:	4619      	mov	r1, r3
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fa7e 	bl	8008118 <SD_SendStatus>
 8007c1c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d005      	beq.n	8007c30 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	0a5b      	lsrs	r3, r3, #9
 8007c34:	f003 030f 	and.w	r3, r3, #15
 8007c38:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007c3a:	693b      	ldr	r3, [r7, #16]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3718      	adds	r7, #24
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c50:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c60:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8007c62:	bf00      	nop
 8007c64:	3714      	adds	r7, #20
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b084      	sub	sp, #16
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c7a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c80:	2b82      	cmp	r3, #130	@ 0x82
 8007c82:	d111      	bne.n	8007ca8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f002 f967 	bl	8009f5c <SDMMC_CmdStopTransfer>
 8007c8e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d008      	beq.n	8007ca8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	431a      	orrs	r2, r3
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f7ff fd3a 	bl	800771c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f022 0208 	bic.w	r2, r2, #8
 8007cb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007cc0:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f002 fdcf 	bl	800a874 <HAL_SD_RxCpltCallback>
#endif
}
 8007cd6:	bf00      	nop
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
	...

08007ce0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cec:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f7fc ff62 	bl	8004bb8 <HAL_DMA_GetError>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d03e      	beq.n	8007d78 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d00:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d08:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d002      	beq.n	8007d16 <SD_DMAError+0x36>
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d12d      	bne.n	8007d72 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a19      	ldr	r2, [pc, #100]	@ (8007d80 <SD_DMAError+0xa0>)
 8007d1c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8007d2c:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d32:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007d3a:	6978      	ldr	r0, [r7, #20]
 8007d3c:	f7ff ff62 	bl	8007c04 <HAL_SD_GetCardState>
 8007d40:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	2b06      	cmp	r3, #6
 8007d46:	d002      	beq.n	8007d4e <SD_DMAError+0x6e>
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2b05      	cmp	r3, #5
 8007d4c:	d10a      	bne.n	8007d64 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f002 f902 	bl	8009f5c <SDMMC_CmdStopTransfer>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d5e:	431a      	orrs	r2, r3
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8007d72:	6978      	ldr	r0, [r7, #20]
 8007d74:	f7ff fcd2 	bl	800771c <HAL_SD_ErrorCallback>
#endif
  }
}
 8007d78:	bf00      	nop
 8007d7a:	3718      	adds	r7, #24
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	004005ff 	.word	0x004005ff

08007d84 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d90:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007d9a:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f7ff ff31 	bl	8007c04 <HAL_SD_GetCardState>
 8007da2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	2b06      	cmp	r3, #6
 8007db6:	d002      	beq.n	8007dbe <SD_DMATxAbort+0x3a>
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	2b05      	cmp	r3, #5
 8007dbc:	d10a      	bne.n	8007dd4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f002 f8ca 	bl	8009f5c <SDMMC_CmdStopTransfer>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dce:	431a      	orrs	r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d103      	bne.n	8007de4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f002 fd35 	bl	800a84c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007de2:	e002      	b.n	8007dea <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f7ff fc99 	bl	800771c <HAL_SD_ErrorCallback>
}
 8007dea:	bf00      	nop
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b084      	sub	sp, #16
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dfe:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007e08:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	f7ff fefa 	bl	8007c04 <HAL_SD_GetCardState>
 8007e10:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	2b06      	cmp	r3, #6
 8007e24:	d002      	beq.n	8007e2c <SD_DMARxAbort+0x3a>
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	2b05      	cmp	r3, #5
 8007e2a:	d10a      	bne.n	8007e42 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4618      	mov	r0, r3
 8007e32:	f002 f893 	bl	8009f5c <SDMMC_CmdStopTransfer>
 8007e36:	4602      	mov	r2, r0
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e3c:	431a      	orrs	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d103      	bne.n	8007e52 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f002 fcfe 	bl	800a84c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007e50:	e002      	b.n	8007e58 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f7ff fc62 	bl	800771c <HAL_SD_ErrorCallback>
}
 8007e58:	bf00      	nop
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007e60:	b5b0      	push	{r4, r5, r7, lr}
 8007e62:	b094      	sub	sp, #80	@ 0x50
 8007e64:	af04      	add	r7, sp, #16
 8007e66:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4618      	mov	r0, r3
 8007e72:	f001 ff44 	bl	8009cfe <SDIO_GetPowerState>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d102      	bne.n	8007e82 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007e7c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007e80:	e0b8      	b.n	8007ff4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e86:	2b03      	cmp	r3, #3
 8007e88:	d02f      	beq.n	8007eea <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f002 f96e 	bl	800a170 <SDMMC_CmdSendCID>
 8007e94:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d001      	beq.n	8007ea0 <SD_InitCard+0x40>
    {
      return errorstate;
 8007e9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e9e:	e0a9      	b.n	8007ff4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f001 ff6e 	bl	8009d88 <SDIO_GetResponse>
 8007eac:	4602      	mov	r2, r0
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2104      	movs	r1, #4
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f001 ff65 	bl	8009d88 <SDIO_GetResponse>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2108      	movs	r1, #8
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f001 ff5c 	bl	8009d88 <SDIO_GetResponse>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	210c      	movs	r1, #12
 8007edc:	4618      	mov	r0, r3
 8007ede:	f001 ff53 	bl	8009d88 <SDIO_GetResponse>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eee:	2b03      	cmp	r3, #3
 8007ef0:	d00d      	beq.n	8007f0e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f107 020e 	add.w	r2, r7, #14
 8007efa:	4611      	mov	r1, r2
 8007efc:	4618      	mov	r0, r3
 8007efe:	f002 f974 	bl	800a1ea <SDMMC_CmdSetRelAdd>
 8007f02:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d001      	beq.n	8007f0e <SD_InitCard+0xae>
    {
      return errorstate;
 8007f0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f0c:	e072      	b.n	8007ff4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f12:	2b03      	cmp	r3, #3
 8007f14:	d036      	beq.n	8007f84 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007f16:	89fb      	ldrh	r3, [r7, #14]
 8007f18:	461a      	mov	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f26:	041b      	lsls	r3, r3, #16
 8007f28:	4619      	mov	r1, r3
 8007f2a:	4610      	mov	r0, r2
 8007f2c:	f002 f93e 	bl	800a1ac <SDMMC_CmdSendCSD>
 8007f30:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <SD_InitCard+0xdc>
    {
      return errorstate;
 8007f38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f3a:	e05b      	b.n	8007ff4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2100      	movs	r1, #0
 8007f42:	4618      	mov	r0, r3
 8007f44:	f001 ff20 	bl	8009d88 <SDIO_GetResponse>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2104      	movs	r1, #4
 8007f54:	4618      	mov	r0, r3
 8007f56:	f001 ff17 	bl	8009d88 <SDIO_GetResponse>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2108      	movs	r1, #8
 8007f66:	4618      	mov	r0, r3
 8007f68:	f001 ff0e 	bl	8009d88 <SDIO_GetResponse>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	210c      	movs	r1, #12
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f001 ff05 	bl	8009d88 <SDIO_GetResponse>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2104      	movs	r1, #4
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f001 fefc 	bl	8009d88 <SDIO_GetResponse>
 8007f90:	4603      	mov	r3, r0
 8007f92:	0d1a      	lsrs	r2, r3, #20
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007f98:	f107 0310 	add.w	r3, r7, #16
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f7ff fbc6 	bl	8007730 <HAL_SD_GetCardCSD>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d002      	beq.n	8007fb0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007faa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007fae:	e021      	b.n	8007ff4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6819      	ldr	r1, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fb8:	041b      	lsls	r3, r3, #16
 8007fba:	2200      	movs	r2, #0
 8007fbc:	461c      	mov	r4, r3
 8007fbe:	4615      	mov	r5, r2
 8007fc0:	4622      	mov	r2, r4
 8007fc2:	462b      	mov	r3, r5
 8007fc4:	4608      	mov	r0, r1
 8007fc6:	f001 ffeb 	bl	8009fa0 <SDMMC_CmdSelDesel>
 8007fca:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d001      	beq.n	8007fd6 <SD_InitCard+0x176>
  {
    return errorstate;
 8007fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fd4:	e00e      	b.n	8007ff4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681d      	ldr	r5, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	466c      	mov	r4, sp
 8007fde:	f103 0210 	add.w	r2, r3, #16
 8007fe2:	ca07      	ldmia	r2, {r0, r1, r2}
 8007fe4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007fe8:	3304      	adds	r3, #4
 8007fea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007fec:	4628      	mov	r0, r5
 8007fee:	f001 fe2f 	bl	8009c50 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3740      	adds	r7, #64	@ 0x40
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bdb0      	pop	{r4, r5, r7, pc}

08007ffc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008004:	2300      	movs	r3, #0
 8008006:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008008:	2300      	movs	r3, #0
 800800a:	617b      	str	r3, [r7, #20]
 800800c:	2300      	movs	r3, #0
 800800e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4618      	mov	r0, r3
 8008016:	f001 ffe6 	bl	8009fe6 <SDMMC_CmdGoIdleState>
 800801a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d001      	beq.n	8008026 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	e072      	b.n	800810c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4618      	mov	r0, r3
 800802c:	f001 fff9 	bl	800a022 <SDMMC_CmdOperCond>
 8008030:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00d      	beq.n	8008054 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4618      	mov	r0, r3
 8008044:	f001 ffcf 	bl	8009fe6 <SDMMC_CmdGoIdleState>
 8008048:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d004      	beq.n	800805a <SD_PowerON+0x5e>
    {
      return errorstate;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	e05b      	b.n	800810c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800805e:	2b01      	cmp	r3, #1
 8008060:	d137      	bne.n	80080d2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2100      	movs	r1, #0
 8008068:	4618      	mov	r0, r3
 800806a:	f001 fff9 	bl	800a060 <SDMMC_CmdAppCommand>
 800806e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d02d      	beq.n	80080d2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008076:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800807a:	e047      	b.n	800810c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2100      	movs	r1, #0
 8008082:	4618      	mov	r0, r3
 8008084:	f001 ffec 	bl	800a060 <SDMMC_CmdAppCommand>
 8008088:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <SD_PowerON+0x98>
    {
      return errorstate;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	e03b      	b.n	800810c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	491e      	ldr	r1, [pc, #120]	@ (8008114 <SD_PowerON+0x118>)
 800809a:	4618      	mov	r0, r3
 800809c:	f002 f802 	bl	800a0a4 <SDMMC_CmdAppOperCommand>
 80080a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d002      	beq.n	80080ae <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080a8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80080ac:	e02e      	b.n	800810c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2100      	movs	r1, #0
 80080b4:	4618      	mov	r0, r3
 80080b6:	f001 fe67 	bl	8009d88 <SDIO_GetResponse>
 80080ba:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	0fdb      	lsrs	r3, r3, #31
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d101      	bne.n	80080c8 <SD_PowerON+0xcc>
 80080c4:	2301      	movs	r3, #1
 80080c6:	e000      	b.n	80080ca <SD_PowerON+0xce>
 80080c8:	2300      	movs	r3, #0
 80080ca:	613b      	str	r3, [r7, #16]

    count++;
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	3301      	adds	r3, #1
 80080d0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80080d8:	4293      	cmp	r3, r2
 80080da:	d802      	bhi.n	80080e2 <SD_PowerON+0xe6>
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d0cc      	beq.n	800807c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d902      	bls.n	80080f2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80080ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80080f0:	e00c      	b.n	800810c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d003      	beq.n	8008104 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	645a      	str	r2, [r3, #68]	@ 0x44
 8008102:	e002      	b.n	800810a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	3718      	adds	r7, #24
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	c1100000 	.word	0xc1100000

08008118 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d102      	bne.n	800812e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008128:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800812c:	e018      	b.n	8008160 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008136:	041b      	lsls	r3, r3, #16
 8008138:	4619      	mov	r1, r3
 800813a:	4610      	mov	r0, r2
 800813c:	f002 f876 	bl	800a22c <SDMMC_CmdSendStatus>
 8008140:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d001      	beq.n	800814c <SD_SendStatus+0x34>
  {
    return errorstate;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	e009      	b.n	8008160 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2100      	movs	r1, #0
 8008152:	4618      	mov	r0, r3
 8008154:	f001 fe18 	bl	8009d88 <SDIO_GetResponse>
 8008158:	4602      	mov	r2, r0
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b086      	sub	sp, #24
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008170:	2300      	movs	r3, #0
 8008172:	60fb      	str	r3, [r7, #12]
 8008174:	2300      	movs	r3, #0
 8008176:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2100      	movs	r1, #0
 800817e:	4618      	mov	r0, r3
 8008180:	f001 fe02 	bl	8009d88 <SDIO_GetResponse>
 8008184:	4603      	mov	r3, r0
 8008186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800818a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800818e:	d102      	bne.n	8008196 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008190:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008194:	e02f      	b.n	80081f6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008196:	f107 030c 	add.w	r3, r7, #12
 800819a:	4619      	mov	r1, r3
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f879 	bl	8008294 <SD_FindSCR>
 80081a2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	e023      	b.n	80081f6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d01c      	beq.n	80081f2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081c0:	041b      	lsls	r3, r3, #16
 80081c2:	4619      	mov	r1, r3
 80081c4:	4610      	mov	r0, r2
 80081c6:	f001 ff4b 	bl	800a060 <SDMMC_CmdAppCommand>
 80081ca:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d001      	beq.n	80081d6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	e00f      	b.n	80081f6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2102      	movs	r1, #2
 80081dc:	4618      	mov	r0, r3
 80081de:	f001 ff84 	bl	800a0ea <SDMMC_CmdBusWidth>
 80081e2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	e003      	b.n	80081f6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80081ee:	2300      	movs	r3, #0
 80081f0:	e001      	b.n	80081f6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80081f2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3718      	adds	r7, #24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b086      	sub	sp, #24
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008206:	2300      	movs	r3, #0
 8008208:	60fb      	str	r3, [r7, #12]
 800820a:	2300      	movs	r3, #0
 800820c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2100      	movs	r1, #0
 8008214:	4618      	mov	r0, r3
 8008216:	f001 fdb7 	bl	8009d88 <SDIO_GetResponse>
 800821a:	4603      	mov	r3, r0
 800821c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008220:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008224:	d102      	bne.n	800822c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008226:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800822a:	e02f      	b.n	800828c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800822c:	f107 030c 	add.w	r3, r7, #12
 8008230:	4619      	mov	r1, r3
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f82e 	bl	8008294 <SD_FindSCR>
 8008238:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d001      	beq.n	8008244 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	e023      	b.n	800828c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800824a:	2b00      	cmp	r3, #0
 800824c:	d01c      	beq.n	8008288 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008256:	041b      	lsls	r3, r3, #16
 8008258:	4619      	mov	r1, r3
 800825a:	4610      	mov	r0, r2
 800825c:	f001 ff00 	bl	800a060 <SDMMC_CmdAppCommand>
 8008260:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d001      	beq.n	800826c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	e00f      	b.n	800828c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2100      	movs	r1, #0
 8008272:	4618      	mov	r0, r3
 8008274:	f001 ff39 	bl	800a0ea <SDMMC_CmdBusWidth>
 8008278:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d001      	beq.n	8008284 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	e003      	b.n	800828c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008284:	2300      	movs	r3, #0
 8008286:	e001      	b.n	800828c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008288:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800828c:	4618      	mov	r0, r3
 800828e:	3718      	adds	r7, #24
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008294:	b590      	push	{r4, r7, lr}
 8008296:	b08f      	sub	sp, #60	@ 0x3c
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800829e:	f7fb fdb5 	bl	8003e0c <HAL_GetTick>
 80082a2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80082a4:	2300      	movs	r3, #0
 80082a6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80082a8:	2300      	movs	r3, #0
 80082aa:	60bb      	str	r3, [r7, #8]
 80082ac:	2300      	movs	r3, #0
 80082ae:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2108      	movs	r1, #8
 80082ba:	4618      	mov	r0, r3
 80082bc:	f001 fda3 	bl	8009e06 <SDMMC_CmdBlockLength>
 80082c0:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80082c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d001      	beq.n	80082cc <SD_FindSCR+0x38>
  {
    return errorstate;
 80082c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ca:	e0b9      	b.n	8008440 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082d4:	041b      	lsls	r3, r3, #16
 80082d6:	4619      	mov	r1, r3
 80082d8:	4610      	mov	r0, r2
 80082da:	f001 fec1 	bl	800a060 <SDMMC_CmdAppCommand>
 80082de:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80082e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d001      	beq.n	80082ea <SD_FindSCR+0x56>
  {
    return errorstate;
 80082e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e8:	e0aa      	b.n	8008440 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80082ea:	f04f 33ff 	mov.w	r3, #4294967295
 80082ee:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80082f0:	2308      	movs	r3, #8
 80082f2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80082f4:	2330      	movs	r3, #48	@ 0x30
 80082f6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80082f8:	2302      	movs	r3, #2
 80082fa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008300:	2301      	movs	r3, #1
 8008302:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f107 0210 	add.w	r2, r7, #16
 800830c:	4611      	mov	r1, r2
 800830e:	4618      	mov	r0, r3
 8008310:	f001 fd4d 	bl	8009dae <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4618      	mov	r0, r3
 800831a:	f001 ff08 	bl	800a12e <SDMMC_CmdSendSCR>
 800831e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008322:	2b00      	cmp	r3, #0
 8008324:	d02a      	beq.n	800837c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8008326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008328:	e08a      	b.n	8008440 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008330:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00f      	beq.n	8008358 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6819      	ldr	r1, [r3, #0]
 800833c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	f107 0208 	add.w	r2, r7, #8
 8008344:	18d4      	adds	r4, r2, r3
 8008346:	4608      	mov	r0, r1
 8008348:	f001 fcad 	bl	8009ca6 <SDIO_ReadFIFO>
 800834c:	4603      	mov	r3, r0
 800834e:	6023      	str	r3, [r4, #0]
      index++;
 8008350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008352:	3301      	adds	r3, #1
 8008354:	637b      	str	r3, [r7, #52]	@ 0x34
 8008356:	e006      	b.n	8008366 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800835e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008362:	2b00      	cmp	r3, #0
 8008364:	d012      	beq.n	800838c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8008366:	f7fb fd51 	bl	8003e0c <HAL_GetTick>
 800836a:	4602      	mov	r2, r0
 800836c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800836e:	1ad3      	subs	r3, r2, r3
 8008370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008374:	d102      	bne.n	800837c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008376:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800837a:	e061      	b.n	8008440 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008382:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8008386:	2b00      	cmp	r3, #0
 8008388:	d0cf      	beq.n	800832a <SD_FindSCR+0x96>
 800838a:	e000      	b.n	800838e <SD_FindSCR+0xfa>
      break;
 800838c:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008394:	f003 0308 	and.w	r3, r3, #8
 8008398:	2b00      	cmp	r3, #0
 800839a:	d106      	bne.n	80083aa <SD_FindSCR+0x116>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d005      	beq.n	80083b6 <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2208      	movs	r2, #8
 80083b0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80083b2:	2308      	movs	r3, #8
 80083b4:	e044      	b.n	8008440 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083bc:	f003 0302 	and.w	r3, r3, #2
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d005      	beq.n	80083d0 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2202      	movs	r2, #2
 80083ca:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80083cc:	2302      	movs	r3, #2
 80083ce:	e037      	b.n	8008440 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083d6:	f003 0320 	and.w	r3, r3, #32
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d005      	beq.n	80083ea <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2220      	movs	r2, #32
 80083e4:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80083e6:	2320      	movs	r3, #32
 80083e8:	e02a      	b.n	8008440 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f240 523a 	movw	r2, #1338	@ 0x53a
 80083f2:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	061a      	lsls	r2, r3, #24
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	021b      	lsls	r3, r3, #8
 80083fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008400:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	0a1b      	lsrs	r3, r3, #8
 8008406:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800840a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	0e1b      	lsrs	r3, r3, #24
 8008410:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008414:	601a      	str	r2, [r3, #0]
    scr++;
 8008416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008418:	3304      	adds	r3, #4
 800841a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	061a      	lsls	r2, r3, #24
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	021b      	lsls	r3, r3, #8
 8008424:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008428:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	0a1b      	lsrs	r3, r3, #8
 800842e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008432:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	0e1b      	lsrs	r3, r3, #24
 8008438:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800843a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800843c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	373c      	adds	r7, #60	@ 0x3c
 8008444:	46bd      	mov	sp, r7
 8008446:	bd90      	pop	{r4, r7, pc}

08008448 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b086      	sub	sp, #24
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008454:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800845a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d03f      	beq.n	80084e2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008462:	2300      	movs	r3, #0
 8008464:	617b      	str	r3, [r7, #20]
 8008466:	e033      	b.n	80084d0 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4618      	mov	r0, r3
 800846e:	f001 fc1a 	bl	8009ca6 <SDIO_ReadFIFO>
 8008472:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	b2da      	uxtb	r2, r3
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	3301      	adds	r3, #1
 8008480:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	3b01      	subs	r3, #1
 8008486:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	0a1b      	lsrs	r3, r3, #8
 800848c:	b2da      	uxtb	r2, r3
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	3301      	adds	r3, #1
 8008496:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	3b01      	subs	r3, #1
 800849c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	0c1b      	lsrs	r3, r3, #16
 80084a2:	b2da      	uxtb	r2, r3
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	3301      	adds	r3, #1
 80084ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	3b01      	subs	r3, #1
 80084b2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	0e1b      	lsrs	r3, r3, #24
 80084b8:	b2da      	uxtb	r2, r3
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	3301      	adds	r3, #1
 80084c2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	3b01      	subs	r3, #1
 80084c8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	3301      	adds	r3, #1
 80084ce:	617b      	str	r3, [r7, #20]
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	2b07      	cmp	r3, #7
 80084d4:	d9c8      	bls.n	8008468 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	693a      	ldr	r2, [r7, #16]
 80084e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 80084e2:	bf00      	nop
 80084e4:	3718      	adds	r7, #24
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b086      	sub	sp, #24
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a1b      	ldr	r3, [r3, #32]
 80084f6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084fc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d043      	beq.n	800858c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008504:	2300      	movs	r3, #0
 8008506:	617b      	str	r3, [r7, #20]
 8008508:	e037      	b.n	800857a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	3301      	adds	r3, #1
 8008514:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	3b01      	subs	r3, #1
 800851a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	021a      	lsls	r2, r3, #8
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	4313      	orrs	r3, r2
 8008526:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	3301      	adds	r3, #1
 800852c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	3b01      	subs	r3, #1
 8008532:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	041a      	lsls	r2, r3, #16
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	4313      	orrs	r3, r2
 800853e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	3301      	adds	r3, #1
 8008544:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	3b01      	subs	r3, #1
 800854a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	061a      	lsls	r2, r3, #24
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	4313      	orrs	r3, r2
 8008556:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	3301      	adds	r3, #1
 800855c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	3b01      	subs	r3, #1
 8008562:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f107 0208 	add.w	r2, r7, #8
 800856c:	4611      	mov	r1, r2
 800856e:	4618      	mov	r0, r3
 8008570:	f001 fba6 	bl	8009cc0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	3301      	adds	r3, #1
 8008578:	617b      	str	r3, [r7, #20]
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	2b07      	cmp	r3, #7
 800857e:	d9c4      	bls.n	800850a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	693a      	ldr	r2, [r7, #16]
 800858a:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800858c:	bf00      	nop
 800858e:	3718      	adds	r7, #24
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d101      	bne.n	80085a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e041      	b.n	800862a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d106      	bne.n	80085c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f7fb f8fe 	bl	80037bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2202      	movs	r2, #2
 80085c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	3304      	adds	r3, #4
 80085d0:	4619      	mov	r1, r3
 80085d2:	4610      	mov	r0, r2
 80085d4:	f000 f8f0 	bl	80087b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3708      	adds	r7, #8
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
	...

08008634 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b086      	sub	sp, #24
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008640:	2300      	movs	r3, #0
 8008642:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800864a:	2b01      	cmp	r3, #1
 800864c:	d101      	bne.n	8008652 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800864e:	2302      	movs	r3, #2
 8008650:	e0ae      	b.n	80087b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2201      	movs	r2, #1
 8008656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2b0c      	cmp	r3, #12
 800865e:	f200 809f 	bhi.w	80087a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008662:	a201      	add	r2, pc, #4	@ (adr r2, 8008668 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008668:	0800869d 	.word	0x0800869d
 800866c:	080087a1 	.word	0x080087a1
 8008670:	080087a1 	.word	0x080087a1
 8008674:	080087a1 	.word	0x080087a1
 8008678:	080086dd 	.word	0x080086dd
 800867c:	080087a1 	.word	0x080087a1
 8008680:	080087a1 	.word	0x080087a1
 8008684:	080087a1 	.word	0x080087a1
 8008688:	0800871f 	.word	0x0800871f
 800868c:	080087a1 	.word	0x080087a1
 8008690:	080087a1 	.word	0x080087a1
 8008694:	080087a1 	.word	0x080087a1
 8008698:	0800875f 	.word	0x0800875f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	68b9      	ldr	r1, [r7, #8]
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 f914 	bl	80088d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	699a      	ldr	r2, [r3, #24]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f042 0208 	orr.w	r2, r2, #8
 80086b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	699a      	ldr	r2, [r3, #24]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f022 0204 	bic.w	r2, r2, #4
 80086c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6999      	ldr	r1, [r3, #24]
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	691a      	ldr	r2, [r3, #16]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	430a      	orrs	r2, r1
 80086d8:	619a      	str	r2, [r3, #24]
      break;
 80086da:	e064      	b.n	80087a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68b9      	ldr	r1, [r7, #8]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f000 f95a 	bl	800899c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	699a      	ldr	r2, [r3, #24]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	699a      	ldr	r2, [r3, #24]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	6999      	ldr	r1, [r3, #24]
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	021a      	lsls	r2, r3, #8
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	430a      	orrs	r2, r1
 800871a:	619a      	str	r2, [r3, #24]
      break;
 800871c:	e043      	b.n	80087a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68b9      	ldr	r1, [r7, #8]
 8008724:	4618      	mov	r0, r3
 8008726:	f000 f9a5 	bl	8008a74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	69da      	ldr	r2, [r3, #28]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f042 0208 	orr.w	r2, r2, #8
 8008738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	69da      	ldr	r2, [r3, #28]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f022 0204 	bic.w	r2, r2, #4
 8008748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	69d9      	ldr	r1, [r3, #28]
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	691a      	ldr	r2, [r3, #16]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	430a      	orrs	r2, r1
 800875a:	61da      	str	r2, [r3, #28]
      break;
 800875c:	e023      	b.n	80087a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	68b9      	ldr	r1, [r7, #8]
 8008764:	4618      	mov	r0, r3
 8008766:	f000 f9ef 	bl	8008b48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	69da      	ldr	r2, [r3, #28]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	69da      	ldr	r2, [r3, #28]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	69d9      	ldr	r1, [r3, #28]
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	021a      	lsls	r2, r3, #8
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	430a      	orrs	r2, r1
 800879c:	61da      	str	r2, [r3, #28]
      break;
 800879e:	e002      	b.n	80087a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	75fb      	strb	r3, [r7, #23]
      break;
 80087a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80087ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3718      	adds	r7, #24
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a3a      	ldr	r2, [pc, #232]	@ (80088b4 <TIM_Base_SetConfig+0xfc>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d00f      	beq.n	80087f0 <TIM_Base_SetConfig+0x38>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087d6:	d00b      	beq.n	80087f0 <TIM_Base_SetConfig+0x38>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4a37      	ldr	r2, [pc, #220]	@ (80088b8 <TIM_Base_SetConfig+0x100>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d007      	beq.n	80087f0 <TIM_Base_SetConfig+0x38>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a36      	ldr	r2, [pc, #216]	@ (80088bc <TIM_Base_SetConfig+0x104>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d003      	beq.n	80087f0 <TIM_Base_SetConfig+0x38>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a35      	ldr	r2, [pc, #212]	@ (80088c0 <TIM_Base_SetConfig+0x108>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d108      	bne.n	8008802 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	4313      	orrs	r3, r2
 8008800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a2b      	ldr	r2, [pc, #172]	@ (80088b4 <TIM_Base_SetConfig+0xfc>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d01b      	beq.n	8008842 <TIM_Base_SetConfig+0x8a>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008810:	d017      	beq.n	8008842 <TIM_Base_SetConfig+0x8a>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a28      	ldr	r2, [pc, #160]	@ (80088b8 <TIM_Base_SetConfig+0x100>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d013      	beq.n	8008842 <TIM_Base_SetConfig+0x8a>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a27      	ldr	r2, [pc, #156]	@ (80088bc <TIM_Base_SetConfig+0x104>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d00f      	beq.n	8008842 <TIM_Base_SetConfig+0x8a>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a26      	ldr	r2, [pc, #152]	@ (80088c0 <TIM_Base_SetConfig+0x108>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d00b      	beq.n	8008842 <TIM_Base_SetConfig+0x8a>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a25      	ldr	r2, [pc, #148]	@ (80088c4 <TIM_Base_SetConfig+0x10c>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d007      	beq.n	8008842 <TIM_Base_SetConfig+0x8a>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a24      	ldr	r2, [pc, #144]	@ (80088c8 <TIM_Base_SetConfig+0x110>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d003      	beq.n	8008842 <TIM_Base_SetConfig+0x8a>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a23      	ldr	r2, [pc, #140]	@ (80088cc <TIM_Base_SetConfig+0x114>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d108      	bne.n	8008854 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	4313      	orrs	r3, r2
 8008852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	695b      	ldr	r3, [r3, #20]
 800885e:	4313      	orrs	r3, r2
 8008860:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	689a      	ldr	r2, [r3, #8]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a0e      	ldr	r2, [pc, #56]	@ (80088b4 <TIM_Base_SetConfig+0xfc>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d103      	bne.n	8008888 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	691a      	ldr	r2, [r3, #16]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	f003 0301 	and.w	r3, r3, #1
 8008896:	2b01      	cmp	r3, #1
 8008898:	d105      	bne.n	80088a6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	f023 0201 	bic.w	r2, r3, #1
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	611a      	str	r2, [r3, #16]
  }
}
 80088a6:	bf00      	nop
 80088a8:	3714      	adds	r7, #20
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	40010000 	.word	0x40010000
 80088b8:	40000400 	.word	0x40000400
 80088bc:	40000800 	.word	0x40000800
 80088c0:	40000c00 	.word	0x40000c00
 80088c4:	40014000 	.word	0x40014000
 80088c8:	40014400 	.word	0x40014400
 80088cc:	40014800 	.word	0x40014800

080088d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b087      	sub	sp, #28
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a1b      	ldr	r3, [r3, #32]
 80088de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a1b      	ldr	r3, [r3, #32]
 80088e4:	f023 0201 	bic.w	r2, r3, #1
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	699b      	ldr	r3, [r3, #24]
 80088f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f023 0303 	bic.w	r3, r3, #3
 8008906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	4313      	orrs	r3, r2
 8008910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	f023 0302 	bic.w	r3, r3, #2
 8008918:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	697a      	ldr	r2, [r7, #20]
 8008920:	4313      	orrs	r3, r2
 8008922:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a1c      	ldr	r2, [pc, #112]	@ (8008998 <TIM_OC1_SetConfig+0xc8>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d10c      	bne.n	8008946 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	f023 0308 	bic.w	r3, r3, #8
 8008932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	697a      	ldr	r2, [r7, #20]
 800893a:	4313      	orrs	r3, r2
 800893c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	f023 0304 	bic.w	r3, r3, #4
 8008944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a13      	ldr	r2, [pc, #76]	@ (8008998 <TIM_OC1_SetConfig+0xc8>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d111      	bne.n	8008972 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800895c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	693a      	ldr	r2, [r7, #16]
 8008964:	4313      	orrs	r3, r2
 8008966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	699b      	ldr	r3, [r3, #24]
 800896c:	693a      	ldr	r2, [r7, #16]
 800896e:	4313      	orrs	r3, r2
 8008970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	693a      	ldr	r2, [r7, #16]
 8008976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68fa      	ldr	r2, [r7, #12]
 800897c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	685a      	ldr	r2, [r3, #4]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	697a      	ldr	r2, [r7, #20]
 800898a:	621a      	str	r2, [r3, #32]
}
 800898c:	bf00      	nop
 800898e:	371c      	adds	r7, #28
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr
 8008998:	40010000 	.word	0x40010000

0800899c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800899c:	b480      	push	{r7}
 800899e:	b087      	sub	sp, #28
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a1b      	ldr	r3, [r3, #32]
 80089aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a1b      	ldr	r3, [r3, #32]
 80089b0:	f023 0210 	bic.w	r2, r3, #16
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	021b      	lsls	r3, r3, #8
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	4313      	orrs	r3, r2
 80089de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	f023 0320 	bic.w	r3, r3, #32
 80089e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	011b      	lsls	r3, r3, #4
 80089ee:	697a      	ldr	r2, [r7, #20]
 80089f0:	4313      	orrs	r3, r2
 80089f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a1e      	ldr	r2, [pc, #120]	@ (8008a70 <TIM_OC2_SetConfig+0xd4>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d10d      	bne.n	8008a18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	011b      	lsls	r3, r3, #4
 8008a0a:	697a      	ldr	r2, [r7, #20]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4a15      	ldr	r2, [pc, #84]	@ (8008a70 <TIM_OC2_SetConfig+0xd4>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d113      	bne.n	8008a48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008a26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	695b      	ldr	r3, [r3, #20]
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	693a      	ldr	r2, [r7, #16]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	699b      	ldr	r3, [r3, #24]
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	693a      	ldr	r2, [r7, #16]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	693a      	ldr	r2, [r7, #16]
 8008a4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	68fa      	ldr	r2, [r7, #12]
 8008a52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	685a      	ldr	r2, [r3, #4]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	697a      	ldr	r2, [r7, #20]
 8008a60:	621a      	str	r2, [r3, #32]
}
 8008a62:	bf00      	nop
 8008a64:	371c      	adds	r7, #28
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	40010000 	.word	0x40010000

08008a74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b087      	sub	sp, #28
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6a1b      	ldr	r3, [r3, #32]
 8008a82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a1b      	ldr	r3, [r3, #32]
 8008a88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	69db      	ldr	r3, [r3, #28]
 8008a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f023 0303 	bic.w	r3, r3, #3
 8008aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008abc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	021b      	lsls	r3, r3, #8
 8008ac4:	697a      	ldr	r2, [r7, #20]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a1d      	ldr	r2, [pc, #116]	@ (8008b44 <TIM_OC3_SetConfig+0xd0>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d10d      	bne.n	8008aee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	021b      	lsls	r3, r3, #8
 8008ae0:	697a      	ldr	r2, [r7, #20]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008aec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a14      	ldr	r2, [pc, #80]	@ (8008b44 <TIM_OC3_SetConfig+0xd0>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d113      	bne.n	8008b1e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008afc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	695b      	ldr	r3, [r3, #20]
 8008b0a:	011b      	lsls	r3, r3, #4
 8008b0c:	693a      	ldr	r2, [r7, #16]
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	699b      	ldr	r3, [r3, #24]
 8008b16:	011b      	lsls	r3, r3, #4
 8008b18:	693a      	ldr	r2, [r7, #16]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	693a      	ldr	r2, [r7, #16]
 8008b22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	68fa      	ldr	r2, [r7, #12]
 8008b28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	685a      	ldr	r2, [r3, #4]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	697a      	ldr	r2, [r7, #20]
 8008b36:	621a      	str	r2, [r3, #32]
}
 8008b38:	bf00      	nop
 8008b3a:	371c      	adds	r7, #28
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr
 8008b44:	40010000 	.word	0x40010000

08008b48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b087      	sub	sp, #28
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a1b      	ldr	r3, [r3, #32]
 8008b56:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a1b      	ldr	r3, [r3, #32]
 8008b5c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	69db      	ldr	r3, [r3, #28]
 8008b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	021b      	lsls	r3, r3, #8
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	031b      	lsls	r3, r3, #12
 8008b9a:	693a      	ldr	r2, [r7, #16]
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a10      	ldr	r2, [pc, #64]	@ (8008be4 <TIM_OC4_SetConfig+0x9c>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d109      	bne.n	8008bbc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008bae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	695b      	ldr	r3, [r3, #20]
 8008bb4:	019b      	lsls	r3, r3, #6
 8008bb6:	697a      	ldr	r2, [r7, #20]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	697a      	ldr	r2, [r7, #20]
 8008bc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	68fa      	ldr	r2, [r7, #12]
 8008bc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	685a      	ldr	r2, [r3, #4]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	621a      	str	r2, [r3, #32]
}
 8008bd6:	bf00      	nop
 8008bd8:	371c      	adds	r7, #28
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	40010000 	.word	0x40010000

08008be8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d101      	bne.n	8008c00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008bfc:	2302      	movs	r3, #2
 8008bfe:	e050      	b.n	8008ca2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2202      	movs	r2, #2
 8008c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8008cb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d018      	beq.n	8008c76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c4c:	d013      	beq.n	8008c76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a18      	ldr	r2, [pc, #96]	@ (8008cb4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d00e      	beq.n	8008c76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a16      	ldr	r2, [pc, #88]	@ (8008cb8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d009      	beq.n	8008c76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a15      	ldr	r2, [pc, #84]	@ (8008cbc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d004      	beq.n	8008c76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a13      	ldr	r2, [pc, #76]	@ (8008cc0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d10c      	bne.n	8008c90 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	68ba      	ldr	r2, [r7, #8]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3714      	adds	r7, #20
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop
 8008cb0:	40010000 	.word	0x40010000
 8008cb4:	40000400 	.word	0x40000400
 8008cb8:	40000800 	.word	0x40000800
 8008cbc:	40000c00 	.word	0x40000c00
 8008cc0:	40014000 	.word	0x40014000

08008cc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d101      	bne.n	8008ce0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008cdc:	2302      	movs	r3, #2
 8008cde:	e03d      	b.n	8008d5c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	691b      	ldr	r3, [r3, #16]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	69db      	ldr	r3, [r3, #28]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3714      	adds	r7, #20
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d101      	bne.n	8008d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	e042      	b.n	8008e00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d106      	bne.n	8008d94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7fa fde6 	bl	8003960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2224      	movs	r2, #36	@ 0x24
 8008d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	68da      	ldr	r2, [r3, #12]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008daa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 fcdb 	bl	8009768 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	691a      	ldr	r2, [r3, #16]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008dc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	695a      	ldr	r2, [r3, #20]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008dd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68da      	ldr	r2, [r3, #12]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008de0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2220      	movs	r2, #32
 8008dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2220      	movs	r2, #32
 8008df4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	4613      	mov	r3, r2
 8008e14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	2b20      	cmp	r3, #32
 8008e20:	d112      	bne.n	8008e48 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d002      	beq.n	8008e2e <HAL_UART_Receive_IT+0x26>
 8008e28:	88fb      	ldrh	r3, [r7, #6]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d101      	bne.n	8008e32 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e00b      	b.n	8008e4a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2200      	movs	r2, #0
 8008e36:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008e38:	88fb      	ldrh	r3, [r7, #6]
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	68b9      	ldr	r1, [r7, #8]
 8008e3e:	68f8      	ldr	r0, [r7, #12]
 8008e40:	f000 faba 	bl	80093b8 <UART_Start_Receive_IT>
 8008e44:	4603      	mov	r3, r0
 8008e46:	e000      	b.n	8008e4a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008e48:	2302      	movs	r3, #2
  }
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
	...

08008e54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b0ba      	sub	sp, #232	@ 0xe8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	695b      	ldr	r3, [r3, #20]
 8008e76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008e80:	2300      	movs	r3, #0
 8008e82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e8a:	f003 030f 	and.w	r3, r3, #15
 8008e8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008e92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d10f      	bne.n	8008eba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e9e:	f003 0320 	and.w	r3, r3, #32
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d009      	beq.n	8008eba <HAL_UART_IRQHandler+0x66>
 8008ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008eaa:	f003 0320 	and.w	r3, r3, #32
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d003      	beq.n	8008eba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 fb99 	bl	80095ea <UART_Receive_IT>
      return;
 8008eb8:	e25b      	b.n	8009372 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008eba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	f000 80de 	beq.w	8009080 <HAL_UART_IRQHandler+0x22c>
 8008ec4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ec8:	f003 0301 	and.w	r3, r3, #1
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d106      	bne.n	8008ede <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ed4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f000 80d1 	beq.w	8009080 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ee2:	f003 0301 	and.w	r3, r3, #1
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00b      	beq.n	8008f02 <HAL_UART_IRQHandler+0xae>
 8008eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d005      	beq.n	8008f02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008efa:	f043 0201 	orr.w	r2, r3, #1
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f06:	f003 0304 	and.w	r3, r3, #4
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00b      	beq.n	8008f26 <HAL_UART_IRQHandler+0xd2>
 8008f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d005      	beq.n	8008f26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f1e:	f043 0202 	orr.w	r2, r3, #2
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f2a:	f003 0302 	and.w	r3, r3, #2
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00b      	beq.n	8008f4a <HAL_UART_IRQHandler+0xf6>
 8008f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f36:	f003 0301 	and.w	r3, r3, #1
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d005      	beq.n	8008f4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f42:	f043 0204 	orr.w	r2, r3, #4
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f4e:	f003 0308 	and.w	r3, r3, #8
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d011      	beq.n	8008f7a <HAL_UART_IRQHandler+0x126>
 8008f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f5a:	f003 0320 	and.w	r3, r3, #32
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d105      	bne.n	8008f6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008f62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f66:	f003 0301 	and.w	r3, r3, #1
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d005      	beq.n	8008f7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f72:	f043 0208 	orr.w	r2, r3, #8
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f000 81f2 	beq.w	8009368 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f88:	f003 0320 	and.w	r3, r3, #32
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d008      	beq.n	8008fa2 <HAL_UART_IRQHandler+0x14e>
 8008f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f94:	f003 0320 	and.w	r3, r3, #32
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d002      	beq.n	8008fa2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 fb24 	bl	80095ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	695b      	ldr	r3, [r3, #20]
 8008fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fac:	2b40      	cmp	r3, #64	@ 0x40
 8008fae:	bf0c      	ite	eq
 8008fb0:	2301      	moveq	r3, #1
 8008fb2:	2300      	movne	r3, #0
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fbe:	f003 0308 	and.w	r3, r3, #8
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d103      	bne.n	8008fce <HAL_UART_IRQHandler+0x17a>
 8008fc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d04f      	beq.n	800906e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 fa2c 	bl	800942c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	695b      	ldr	r3, [r3, #20]
 8008fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fde:	2b40      	cmp	r3, #64	@ 0x40
 8008fe0:	d141      	bne.n	8009066 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	3314      	adds	r3, #20
 8008fe8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008ff0:	e853 3f00 	ldrex	r3, [r3]
 8008ff4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008ff8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ffc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009000:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	3314      	adds	r3, #20
 800900a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800900e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009012:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009016:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800901a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800901e:	e841 2300 	strex	r3, r2, [r1]
 8009022:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009026:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1d9      	bne.n	8008fe2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009032:	2b00      	cmp	r3, #0
 8009034:	d013      	beq.n	800905e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800903a:	4a7e      	ldr	r2, [pc, #504]	@ (8009234 <HAL_UART_IRQHandler+0x3e0>)
 800903c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009042:	4618      	mov	r0, r3
 8009044:	f7fb fc0c 	bl	8004860 <HAL_DMA_Abort_IT>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d016      	beq.n	800907c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009058:	4610      	mov	r0, r2
 800905a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800905c:	e00e      	b.n	800907c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f994 	bl	800938c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009064:	e00a      	b.n	800907c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 f990 	bl	800938c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800906c:	e006      	b.n	800907c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 f98c 	bl	800938c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800907a:	e175      	b.n	8009368 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800907c:	bf00      	nop
    return;
 800907e:	e173      	b.n	8009368 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009084:	2b01      	cmp	r3, #1
 8009086:	f040 814f 	bne.w	8009328 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800908a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800908e:	f003 0310 	and.w	r3, r3, #16
 8009092:	2b00      	cmp	r3, #0
 8009094:	f000 8148 	beq.w	8009328 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800909c:	f003 0310 	and.w	r3, r3, #16
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f000 8141 	beq.w	8009328 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80090a6:	2300      	movs	r3, #0
 80090a8:	60bb      	str	r3, [r7, #8]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	60bb      	str	r3, [r7, #8]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	60bb      	str	r3, [r7, #8]
 80090ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	695b      	ldr	r3, [r3, #20]
 80090c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090c6:	2b40      	cmp	r3, #64	@ 0x40
 80090c8:	f040 80b6 	bne.w	8009238 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80090d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80090dc:	2b00      	cmp	r3, #0
 80090de:	f000 8145 	beq.w	800936c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80090e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80090ea:	429a      	cmp	r2, r3
 80090ec:	f080 813e 	bcs.w	800936c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80090f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090fc:	69db      	ldr	r3, [r3, #28]
 80090fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009102:	f000 8088 	beq.w	8009216 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	330c      	adds	r3, #12
 800910c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009110:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009114:	e853 3f00 	ldrex	r3, [r3]
 8009118:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800911c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009120:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009124:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	330c      	adds	r3, #12
 800912e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009132:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009136:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800913a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800913e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009142:	e841 2300 	strex	r3, r2, [r1]
 8009146:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800914a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800914e:	2b00      	cmp	r3, #0
 8009150:	d1d9      	bne.n	8009106 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	3314      	adds	r3, #20
 8009158:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800915c:	e853 3f00 	ldrex	r3, [r3]
 8009160:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009162:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009164:	f023 0301 	bic.w	r3, r3, #1
 8009168:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	3314      	adds	r3, #20
 8009172:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009176:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800917a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800917e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009182:	e841 2300 	strex	r3, r2, [r1]
 8009186:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009188:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1e1      	bne.n	8009152 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	3314      	adds	r3, #20
 8009194:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009196:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009198:	e853 3f00 	ldrex	r3, [r3]
 800919c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800919e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	3314      	adds	r3, #20
 80091ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80091b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80091b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80091b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80091ba:	e841 2300 	strex	r3, r2, [r1]
 80091be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80091c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d1e3      	bne.n	800918e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2220      	movs	r2, #32
 80091ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	330c      	adds	r3, #12
 80091da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091de:	e853 3f00 	ldrex	r3, [r3]
 80091e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80091e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091e6:	f023 0310 	bic.w	r3, r3, #16
 80091ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	330c      	adds	r3, #12
 80091f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80091f8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80091fa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80091fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009200:	e841 2300 	strex	r3, r2, [r1]
 8009204:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009206:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009208:	2b00      	cmp	r3, #0
 800920a:	d1e3      	bne.n	80091d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009210:	4618      	mov	r0, r3
 8009212:	f7fb fab5 	bl	8004780 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2202      	movs	r2, #2
 800921a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009224:	b29b      	uxth	r3, r3
 8009226:	1ad3      	subs	r3, r2, r3
 8009228:	b29b      	uxth	r3, r3
 800922a:	4619      	mov	r1, r3
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 f8b7 	bl	80093a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009232:	e09b      	b.n	800936c <HAL_UART_IRQHandler+0x518>
 8009234:	080094f3 	.word	0x080094f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009240:	b29b      	uxth	r3, r3
 8009242:	1ad3      	subs	r3, r2, r3
 8009244:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800924c:	b29b      	uxth	r3, r3
 800924e:	2b00      	cmp	r3, #0
 8009250:	f000 808e 	beq.w	8009370 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009254:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009258:	2b00      	cmp	r3, #0
 800925a:	f000 8089 	beq.w	8009370 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	330c      	adds	r3, #12
 8009264:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009268:	e853 3f00 	ldrex	r3, [r3]
 800926c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800926e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009270:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009274:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	330c      	adds	r3, #12
 800927e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009282:	647a      	str	r2, [r7, #68]	@ 0x44
 8009284:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009286:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009288:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800928a:	e841 2300 	strex	r3, r2, [r1]
 800928e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1e3      	bne.n	800925e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	3314      	adds	r3, #20
 800929c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a0:	e853 3f00 	ldrex	r3, [r3]
 80092a4:	623b      	str	r3, [r7, #32]
   return(result);
 80092a6:	6a3b      	ldr	r3, [r7, #32]
 80092a8:	f023 0301 	bic.w	r3, r3, #1
 80092ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	3314      	adds	r3, #20
 80092b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80092ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80092bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092c2:	e841 2300 	strex	r3, r2, [r1]
 80092c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80092c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d1e3      	bne.n	8009296 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2220      	movs	r2, #32
 80092d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	330c      	adds	r3, #12
 80092e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	e853 3f00 	ldrex	r3, [r3]
 80092ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f023 0310 	bic.w	r3, r3, #16
 80092f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	330c      	adds	r3, #12
 80092fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009300:	61fa      	str	r2, [r7, #28]
 8009302:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009304:	69b9      	ldr	r1, [r7, #24]
 8009306:	69fa      	ldr	r2, [r7, #28]
 8009308:	e841 2300 	strex	r3, r2, [r1]
 800930c:	617b      	str	r3, [r7, #20]
   return(result);
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1e3      	bne.n	80092dc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2202      	movs	r2, #2
 8009318:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800931a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800931e:	4619      	mov	r1, r3
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f83d 	bl	80093a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009326:	e023      	b.n	8009370 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800932c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009330:	2b00      	cmp	r3, #0
 8009332:	d009      	beq.n	8009348 <HAL_UART_IRQHandler+0x4f4>
 8009334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800933c:	2b00      	cmp	r3, #0
 800933e:	d003      	beq.n	8009348 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 f8ea 	bl	800951a <UART_Transmit_IT>
    return;
 8009346:	e014      	b.n	8009372 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800934c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009350:	2b00      	cmp	r3, #0
 8009352:	d00e      	beq.n	8009372 <HAL_UART_IRQHandler+0x51e>
 8009354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800935c:	2b00      	cmp	r3, #0
 800935e:	d008      	beq.n	8009372 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 f92a 	bl	80095ba <UART_EndTransmit_IT>
    return;
 8009366:	e004      	b.n	8009372 <HAL_UART_IRQHandler+0x51e>
    return;
 8009368:	bf00      	nop
 800936a:	e002      	b.n	8009372 <HAL_UART_IRQHandler+0x51e>
      return;
 800936c:	bf00      	nop
 800936e:	e000      	b.n	8009372 <HAL_UART_IRQHandler+0x51e>
      return;
 8009370:	bf00      	nop
  }
}
 8009372:	37e8      	adds	r7, #232	@ 0xe8
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009380:	bf00      	nop
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009394:	bf00      	nop
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	460b      	mov	r3, r1
 80093aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80093ac:	bf00      	nop
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	4613      	mov	r3, r2
 80093c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	68ba      	ldr	r2, [r7, #8]
 80093ca:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	88fa      	ldrh	r2, [r7, #6]
 80093d0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	88fa      	ldrh	r2, [r7, #6]
 80093d6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2200      	movs	r2, #0
 80093dc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2222      	movs	r2, #34	@ 0x22
 80093e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d007      	beq.n	80093fe <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68da      	ldr	r2, [r3, #12]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80093fc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	695a      	ldr	r2, [r3, #20]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f042 0201 	orr.w	r2, r2, #1
 800940c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68da      	ldr	r2, [r3, #12]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f042 0220 	orr.w	r2, r2, #32
 800941c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800941e:	2300      	movs	r3, #0
}
 8009420:	4618      	mov	r0, r3
 8009422:	3714      	adds	r7, #20
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800942c:	b480      	push	{r7}
 800942e:	b095      	sub	sp, #84	@ 0x54
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	330c      	adds	r3, #12
 800943a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800943e:	e853 3f00 	ldrex	r3, [r3]
 8009442:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009446:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800944a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	330c      	adds	r3, #12
 8009452:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009454:	643a      	str	r2, [r7, #64]	@ 0x40
 8009456:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009458:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800945a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800945c:	e841 2300 	strex	r3, r2, [r1]
 8009460:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1e5      	bne.n	8009434 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	3314      	adds	r3, #20
 800946e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009470:	6a3b      	ldr	r3, [r7, #32]
 8009472:	e853 3f00 	ldrex	r3, [r3]
 8009476:	61fb      	str	r3, [r7, #28]
   return(result);
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	f023 0301 	bic.w	r3, r3, #1
 800947e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	3314      	adds	r3, #20
 8009486:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009488:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800948a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800948e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009490:	e841 2300 	strex	r3, r2, [r1]
 8009494:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009498:	2b00      	cmp	r3, #0
 800949a:	d1e5      	bne.n	8009468 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d119      	bne.n	80094d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	330c      	adds	r3, #12
 80094aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	e853 3f00 	ldrex	r3, [r3]
 80094b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	f023 0310 	bic.w	r3, r3, #16
 80094ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	330c      	adds	r3, #12
 80094c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094c4:	61ba      	str	r2, [r7, #24]
 80094c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c8:	6979      	ldr	r1, [r7, #20]
 80094ca:	69ba      	ldr	r2, [r7, #24]
 80094cc:	e841 2300 	strex	r3, r2, [r1]
 80094d0:	613b      	str	r3, [r7, #16]
   return(result);
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d1e5      	bne.n	80094a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2220      	movs	r2, #32
 80094dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80094e6:	bf00      	nop
 80094e8:	3754      	adds	r7, #84	@ 0x54
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr

080094f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b084      	sub	sp, #16
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2200      	movs	r2, #0
 8009504:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2200      	movs	r2, #0
 800950a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	f7ff ff3d 	bl	800938c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009512:	bf00      	nop
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800951a:	b480      	push	{r7}
 800951c:	b085      	sub	sp, #20
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009528:	b2db      	uxtb	r3, r3
 800952a:	2b21      	cmp	r3, #33	@ 0x21
 800952c:	d13e      	bne.n	80095ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009536:	d114      	bne.n	8009562 <UART_Transmit_IT+0x48>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	691b      	ldr	r3, [r3, #16]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d110      	bne.n	8009562 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6a1b      	ldr	r3, [r3, #32]
 8009544:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	881b      	ldrh	r3, [r3, #0]
 800954a:	461a      	mov	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009554:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6a1b      	ldr	r3, [r3, #32]
 800955a:	1c9a      	adds	r2, r3, #2
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	621a      	str	r2, [r3, #32]
 8009560:	e008      	b.n	8009574 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a1b      	ldr	r3, [r3, #32]
 8009566:	1c59      	adds	r1, r3, #1
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	6211      	str	r1, [r2, #32]
 800956c:	781a      	ldrb	r2, [r3, #0]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009578:	b29b      	uxth	r3, r3
 800957a:	3b01      	subs	r3, #1
 800957c:	b29b      	uxth	r3, r3
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	4619      	mov	r1, r3
 8009582:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10f      	bne.n	80095a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68da      	ldr	r2, [r3, #12]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009596:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	68da      	ldr	r2, [r3, #12]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80095a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80095a8:	2300      	movs	r3, #0
 80095aa:	e000      	b.n	80095ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80095ac:	2302      	movs	r3, #2
  }
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3714      	adds	r7, #20
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr

080095ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b082      	sub	sp, #8
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	68da      	ldr	r2, [r3, #12]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2220      	movs	r2, #32
 80095d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7ff fecc 	bl	8009378 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b08c      	sub	sp, #48	@ 0x30
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	2b22      	cmp	r3, #34	@ 0x22
 80095fc:	f040 80ae 	bne.w	800975c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009608:	d117      	bne.n	800963a <UART_Receive_IT+0x50>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d113      	bne.n	800963a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009612:	2300      	movs	r3, #0
 8009614:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800961a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	b29b      	uxth	r3, r3
 8009624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009628:	b29a      	uxth	r2, r3
 800962a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800962c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009632:	1c9a      	adds	r2, r3, #2
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	629a      	str	r2, [r3, #40]	@ 0x28
 8009638:	e026      	b.n	8009688 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800963e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009640:	2300      	movs	r3, #0
 8009642:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800964c:	d007      	beq.n	800965e <UART_Receive_IT+0x74>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d10a      	bne.n	800966c <UART_Receive_IT+0x82>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d106      	bne.n	800966c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	b2da      	uxtb	r2, r3
 8009666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009668:	701a      	strb	r2, [r3, #0]
 800966a:	e008      	b.n	800967e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	b2db      	uxtb	r3, r3
 8009674:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009678:	b2da      	uxtb	r2, r3
 800967a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800967c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009682:	1c5a      	adds	r2, r3, #1
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800968c:	b29b      	uxth	r3, r3
 800968e:	3b01      	subs	r3, #1
 8009690:	b29b      	uxth	r3, r3
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	4619      	mov	r1, r3
 8009696:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009698:	2b00      	cmp	r3, #0
 800969a:	d15d      	bne.n	8009758 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	68da      	ldr	r2, [r3, #12]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f022 0220 	bic.w	r2, r2, #32
 80096aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	68da      	ldr	r2, [r3, #12]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80096ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	695a      	ldr	r2, [r3, #20]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f022 0201 	bic.w	r2, r2, #1
 80096ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2220      	movs	r2, #32
 80096d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d135      	bne.n	800974e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	330c      	adds	r3, #12
 80096ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	e853 3f00 	ldrex	r3, [r3]
 80096f6:	613b      	str	r3, [r7, #16]
   return(result);
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	f023 0310 	bic.w	r3, r3, #16
 80096fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	330c      	adds	r3, #12
 8009706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009708:	623a      	str	r2, [r7, #32]
 800970a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800970c:	69f9      	ldr	r1, [r7, #28]
 800970e:	6a3a      	ldr	r2, [r7, #32]
 8009710:	e841 2300 	strex	r3, r2, [r1]
 8009714:	61bb      	str	r3, [r7, #24]
   return(result);
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d1e5      	bne.n	80096e8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f003 0310 	and.w	r3, r3, #16
 8009726:	2b10      	cmp	r3, #16
 8009728:	d10a      	bne.n	8009740 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800972a:	2300      	movs	r3, #0
 800972c:	60fb      	str	r3, [r7, #12]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	60fb      	str	r3, [r7, #12]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	60fb      	str	r3, [r7, #12]
 800973e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009744:	4619      	mov	r1, r3
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f7ff fe2a 	bl	80093a0 <HAL_UARTEx_RxEventCallback>
 800974c:	e002      	b.n	8009754 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f7f8 ff9c 	bl	800268c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009754:	2300      	movs	r3, #0
 8009756:	e002      	b.n	800975e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009758:	2300      	movs	r3, #0
 800975a:	e000      	b.n	800975e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800975c:	2302      	movs	r3, #2
  }
}
 800975e:	4618      	mov	r0, r3
 8009760:	3730      	adds	r7, #48	@ 0x30
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
	...

08009768 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800976c:	b0c0      	sub	sp, #256	@ 0x100
 800976e:	af00      	add	r7, sp, #0
 8009770:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009784:	68d9      	ldr	r1, [r3, #12]
 8009786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	ea40 0301 	orr.w	r3, r0, r1
 8009790:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009796:	689a      	ldr	r2, [r3, #8]
 8009798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	431a      	orrs	r2, r3
 80097a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097a4:	695b      	ldr	r3, [r3, #20]
 80097a6:	431a      	orrs	r2, r3
 80097a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097ac:	69db      	ldr	r3, [r3, #28]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80097b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80097c0:	f021 010c 	bic.w	r1, r1, #12
 80097c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80097ce:	430b      	orrs	r3, r1
 80097d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80097d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	695b      	ldr	r3, [r3, #20]
 80097da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80097de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097e2:	6999      	ldr	r1, [r3, #24]
 80097e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	ea40 0301 	orr.w	r3, r0, r1
 80097ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80097f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	4b8f      	ldr	r3, [pc, #572]	@ (8009a34 <UART_SetConfig+0x2cc>)
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d005      	beq.n	8009808 <UART_SetConfig+0xa0>
 80097fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	4b8d      	ldr	r3, [pc, #564]	@ (8009a38 <UART_SetConfig+0x2d0>)
 8009804:	429a      	cmp	r2, r3
 8009806:	d104      	bne.n	8009812 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009808:	f7fd fb76 	bl	8006ef8 <HAL_RCC_GetPCLK2Freq>
 800980c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009810:	e003      	b.n	800981a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009812:	f7fd fb5d 	bl	8006ed0 <HAL_RCC_GetPCLK1Freq>
 8009816:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800981a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800981e:	69db      	ldr	r3, [r3, #28]
 8009820:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009824:	f040 810c 	bne.w	8009a40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009828:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800982c:	2200      	movs	r2, #0
 800982e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009832:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009836:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800983a:	4622      	mov	r2, r4
 800983c:	462b      	mov	r3, r5
 800983e:	1891      	adds	r1, r2, r2
 8009840:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009842:	415b      	adcs	r3, r3
 8009844:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009846:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800984a:	4621      	mov	r1, r4
 800984c:	eb12 0801 	adds.w	r8, r2, r1
 8009850:	4629      	mov	r1, r5
 8009852:	eb43 0901 	adc.w	r9, r3, r1
 8009856:	f04f 0200 	mov.w	r2, #0
 800985a:	f04f 0300 	mov.w	r3, #0
 800985e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009862:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009866:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800986a:	4690      	mov	r8, r2
 800986c:	4699      	mov	r9, r3
 800986e:	4623      	mov	r3, r4
 8009870:	eb18 0303 	adds.w	r3, r8, r3
 8009874:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009878:	462b      	mov	r3, r5
 800987a:	eb49 0303 	adc.w	r3, r9, r3
 800987e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800988e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009892:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009896:	460b      	mov	r3, r1
 8009898:	18db      	adds	r3, r3, r3
 800989a:	653b      	str	r3, [r7, #80]	@ 0x50
 800989c:	4613      	mov	r3, r2
 800989e:	eb42 0303 	adc.w	r3, r2, r3
 80098a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80098a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80098a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80098ac:	f7f7 f9f4 	bl	8000c98 <__aeabi_uldivmod>
 80098b0:	4602      	mov	r2, r0
 80098b2:	460b      	mov	r3, r1
 80098b4:	4b61      	ldr	r3, [pc, #388]	@ (8009a3c <UART_SetConfig+0x2d4>)
 80098b6:	fba3 2302 	umull	r2, r3, r3, r2
 80098ba:	095b      	lsrs	r3, r3, #5
 80098bc:	011c      	lsls	r4, r3, #4
 80098be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80098c2:	2200      	movs	r2, #0
 80098c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80098c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80098cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80098d0:	4642      	mov	r2, r8
 80098d2:	464b      	mov	r3, r9
 80098d4:	1891      	adds	r1, r2, r2
 80098d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80098d8:	415b      	adcs	r3, r3
 80098da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80098e0:	4641      	mov	r1, r8
 80098e2:	eb12 0a01 	adds.w	sl, r2, r1
 80098e6:	4649      	mov	r1, r9
 80098e8:	eb43 0b01 	adc.w	fp, r3, r1
 80098ec:	f04f 0200 	mov.w	r2, #0
 80098f0:	f04f 0300 	mov.w	r3, #0
 80098f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80098f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80098fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009900:	4692      	mov	sl, r2
 8009902:	469b      	mov	fp, r3
 8009904:	4643      	mov	r3, r8
 8009906:	eb1a 0303 	adds.w	r3, sl, r3
 800990a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800990e:	464b      	mov	r3, r9
 8009910:	eb4b 0303 	adc.w	r3, fp, r3
 8009914:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009924:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009928:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800992c:	460b      	mov	r3, r1
 800992e:	18db      	adds	r3, r3, r3
 8009930:	643b      	str	r3, [r7, #64]	@ 0x40
 8009932:	4613      	mov	r3, r2
 8009934:	eb42 0303 	adc.w	r3, r2, r3
 8009938:	647b      	str	r3, [r7, #68]	@ 0x44
 800993a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800993e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009942:	f7f7 f9a9 	bl	8000c98 <__aeabi_uldivmod>
 8009946:	4602      	mov	r2, r0
 8009948:	460b      	mov	r3, r1
 800994a:	4611      	mov	r1, r2
 800994c:	4b3b      	ldr	r3, [pc, #236]	@ (8009a3c <UART_SetConfig+0x2d4>)
 800994e:	fba3 2301 	umull	r2, r3, r3, r1
 8009952:	095b      	lsrs	r3, r3, #5
 8009954:	2264      	movs	r2, #100	@ 0x64
 8009956:	fb02 f303 	mul.w	r3, r2, r3
 800995a:	1acb      	subs	r3, r1, r3
 800995c:	00db      	lsls	r3, r3, #3
 800995e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009962:	4b36      	ldr	r3, [pc, #216]	@ (8009a3c <UART_SetConfig+0x2d4>)
 8009964:	fba3 2302 	umull	r2, r3, r3, r2
 8009968:	095b      	lsrs	r3, r3, #5
 800996a:	005b      	lsls	r3, r3, #1
 800996c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009970:	441c      	add	r4, r3
 8009972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009976:	2200      	movs	r2, #0
 8009978:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800997c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009980:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009984:	4642      	mov	r2, r8
 8009986:	464b      	mov	r3, r9
 8009988:	1891      	adds	r1, r2, r2
 800998a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800998c:	415b      	adcs	r3, r3
 800998e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009990:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009994:	4641      	mov	r1, r8
 8009996:	1851      	adds	r1, r2, r1
 8009998:	6339      	str	r1, [r7, #48]	@ 0x30
 800999a:	4649      	mov	r1, r9
 800999c:	414b      	adcs	r3, r1
 800999e:	637b      	str	r3, [r7, #52]	@ 0x34
 80099a0:	f04f 0200 	mov.w	r2, #0
 80099a4:	f04f 0300 	mov.w	r3, #0
 80099a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80099ac:	4659      	mov	r1, fp
 80099ae:	00cb      	lsls	r3, r1, #3
 80099b0:	4651      	mov	r1, sl
 80099b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80099b6:	4651      	mov	r1, sl
 80099b8:	00ca      	lsls	r2, r1, #3
 80099ba:	4610      	mov	r0, r2
 80099bc:	4619      	mov	r1, r3
 80099be:	4603      	mov	r3, r0
 80099c0:	4642      	mov	r2, r8
 80099c2:	189b      	adds	r3, r3, r2
 80099c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80099c8:	464b      	mov	r3, r9
 80099ca:	460a      	mov	r2, r1
 80099cc:	eb42 0303 	adc.w	r3, r2, r3
 80099d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80099d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80099e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80099e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80099e8:	460b      	mov	r3, r1
 80099ea:	18db      	adds	r3, r3, r3
 80099ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80099ee:	4613      	mov	r3, r2
 80099f0:	eb42 0303 	adc.w	r3, r2, r3
 80099f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80099fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80099fe:	f7f7 f94b 	bl	8000c98 <__aeabi_uldivmod>
 8009a02:	4602      	mov	r2, r0
 8009a04:	460b      	mov	r3, r1
 8009a06:	4b0d      	ldr	r3, [pc, #52]	@ (8009a3c <UART_SetConfig+0x2d4>)
 8009a08:	fba3 1302 	umull	r1, r3, r3, r2
 8009a0c:	095b      	lsrs	r3, r3, #5
 8009a0e:	2164      	movs	r1, #100	@ 0x64
 8009a10:	fb01 f303 	mul.w	r3, r1, r3
 8009a14:	1ad3      	subs	r3, r2, r3
 8009a16:	00db      	lsls	r3, r3, #3
 8009a18:	3332      	adds	r3, #50	@ 0x32
 8009a1a:	4a08      	ldr	r2, [pc, #32]	@ (8009a3c <UART_SetConfig+0x2d4>)
 8009a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8009a20:	095b      	lsrs	r3, r3, #5
 8009a22:	f003 0207 	and.w	r2, r3, #7
 8009a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4422      	add	r2, r4
 8009a2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009a30:	e106      	b.n	8009c40 <UART_SetConfig+0x4d8>
 8009a32:	bf00      	nop
 8009a34:	40011000 	.word	0x40011000
 8009a38:	40011400 	.word	0x40011400
 8009a3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a44:	2200      	movs	r2, #0
 8009a46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009a4a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009a4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009a52:	4642      	mov	r2, r8
 8009a54:	464b      	mov	r3, r9
 8009a56:	1891      	adds	r1, r2, r2
 8009a58:	6239      	str	r1, [r7, #32]
 8009a5a:	415b      	adcs	r3, r3
 8009a5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a62:	4641      	mov	r1, r8
 8009a64:	1854      	adds	r4, r2, r1
 8009a66:	4649      	mov	r1, r9
 8009a68:	eb43 0501 	adc.w	r5, r3, r1
 8009a6c:	f04f 0200 	mov.w	r2, #0
 8009a70:	f04f 0300 	mov.w	r3, #0
 8009a74:	00eb      	lsls	r3, r5, #3
 8009a76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009a7a:	00e2      	lsls	r2, r4, #3
 8009a7c:	4614      	mov	r4, r2
 8009a7e:	461d      	mov	r5, r3
 8009a80:	4643      	mov	r3, r8
 8009a82:	18e3      	adds	r3, r4, r3
 8009a84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009a88:	464b      	mov	r3, r9
 8009a8a:	eb45 0303 	adc.w	r3, r5, r3
 8009a8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009aa2:	f04f 0200 	mov.w	r2, #0
 8009aa6:	f04f 0300 	mov.w	r3, #0
 8009aaa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009aae:	4629      	mov	r1, r5
 8009ab0:	008b      	lsls	r3, r1, #2
 8009ab2:	4621      	mov	r1, r4
 8009ab4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ab8:	4621      	mov	r1, r4
 8009aba:	008a      	lsls	r2, r1, #2
 8009abc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009ac0:	f7f7 f8ea 	bl	8000c98 <__aeabi_uldivmod>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	4b60      	ldr	r3, [pc, #384]	@ (8009c4c <UART_SetConfig+0x4e4>)
 8009aca:	fba3 2302 	umull	r2, r3, r3, r2
 8009ace:	095b      	lsrs	r3, r3, #5
 8009ad0:	011c      	lsls	r4, r3, #4
 8009ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009adc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009ae0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009ae4:	4642      	mov	r2, r8
 8009ae6:	464b      	mov	r3, r9
 8009ae8:	1891      	adds	r1, r2, r2
 8009aea:	61b9      	str	r1, [r7, #24]
 8009aec:	415b      	adcs	r3, r3
 8009aee:	61fb      	str	r3, [r7, #28]
 8009af0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009af4:	4641      	mov	r1, r8
 8009af6:	1851      	adds	r1, r2, r1
 8009af8:	6139      	str	r1, [r7, #16]
 8009afa:	4649      	mov	r1, r9
 8009afc:	414b      	adcs	r3, r1
 8009afe:	617b      	str	r3, [r7, #20]
 8009b00:	f04f 0200 	mov.w	r2, #0
 8009b04:	f04f 0300 	mov.w	r3, #0
 8009b08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009b0c:	4659      	mov	r1, fp
 8009b0e:	00cb      	lsls	r3, r1, #3
 8009b10:	4651      	mov	r1, sl
 8009b12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b16:	4651      	mov	r1, sl
 8009b18:	00ca      	lsls	r2, r1, #3
 8009b1a:	4610      	mov	r0, r2
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	4603      	mov	r3, r0
 8009b20:	4642      	mov	r2, r8
 8009b22:	189b      	adds	r3, r3, r2
 8009b24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009b28:	464b      	mov	r3, r9
 8009b2a:	460a      	mov	r2, r1
 8009b2c:	eb42 0303 	adc.w	r3, r2, r3
 8009b30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009b3e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009b40:	f04f 0200 	mov.w	r2, #0
 8009b44:	f04f 0300 	mov.w	r3, #0
 8009b48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009b4c:	4649      	mov	r1, r9
 8009b4e:	008b      	lsls	r3, r1, #2
 8009b50:	4641      	mov	r1, r8
 8009b52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b56:	4641      	mov	r1, r8
 8009b58:	008a      	lsls	r2, r1, #2
 8009b5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009b5e:	f7f7 f89b 	bl	8000c98 <__aeabi_uldivmod>
 8009b62:	4602      	mov	r2, r0
 8009b64:	460b      	mov	r3, r1
 8009b66:	4611      	mov	r1, r2
 8009b68:	4b38      	ldr	r3, [pc, #224]	@ (8009c4c <UART_SetConfig+0x4e4>)
 8009b6a:	fba3 2301 	umull	r2, r3, r3, r1
 8009b6e:	095b      	lsrs	r3, r3, #5
 8009b70:	2264      	movs	r2, #100	@ 0x64
 8009b72:	fb02 f303 	mul.w	r3, r2, r3
 8009b76:	1acb      	subs	r3, r1, r3
 8009b78:	011b      	lsls	r3, r3, #4
 8009b7a:	3332      	adds	r3, #50	@ 0x32
 8009b7c:	4a33      	ldr	r2, [pc, #204]	@ (8009c4c <UART_SetConfig+0x4e4>)
 8009b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b82:	095b      	lsrs	r3, r3, #5
 8009b84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b88:	441c      	add	r4, r3
 8009b8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b8e:	2200      	movs	r2, #0
 8009b90:	673b      	str	r3, [r7, #112]	@ 0x70
 8009b92:	677a      	str	r2, [r7, #116]	@ 0x74
 8009b94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009b98:	4642      	mov	r2, r8
 8009b9a:	464b      	mov	r3, r9
 8009b9c:	1891      	adds	r1, r2, r2
 8009b9e:	60b9      	str	r1, [r7, #8]
 8009ba0:	415b      	adcs	r3, r3
 8009ba2:	60fb      	str	r3, [r7, #12]
 8009ba4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ba8:	4641      	mov	r1, r8
 8009baa:	1851      	adds	r1, r2, r1
 8009bac:	6039      	str	r1, [r7, #0]
 8009bae:	4649      	mov	r1, r9
 8009bb0:	414b      	adcs	r3, r1
 8009bb2:	607b      	str	r3, [r7, #4]
 8009bb4:	f04f 0200 	mov.w	r2, #0
 8009bb8:	f04f 0300 	mov.w	r3, #0
 8009bbc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009bc0:	4659      	mov	r1, fp
 8009bc2:	00cb      	lsls	r3, r1, #3
 8009bc4:	4651      	mov	r1, sl
 8009bc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009bca:	4651      	mov	r1, sl
 8009bcc:	00ca      	lsls	r2, r1, #3
 8009bce:	4610      	mov	r0, r2
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	4642      	mov	r2, r8
 8009bd6:	189b      	adds	r3, r3, r2
 8009bd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009bda:	464b      	mov	r3, r9
 8009bdc:	460a      	mov	r2, r1
 8009bde:	eb42 0303 	adc.w	r3, r2, r3
 8009be2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	663b      	str	r3, [r7, #96]	@ 0x60
 8009bee:	667a      	str	r2, [r7, #100]	@ 0x64
 8009bf0:	f04f 0200 	mov.w	r2, #0
 8009bf4:	f04f 0300 	mov.w	r3, #0
 8009bf8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009bfc:	4649      	mov	r1, r9
 8009bfe:	008b      	lsls	r3, r1, #2
 8009c00:	4641      	mov	r1, r8
 8009c02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c06:	4641      	mov	r1, r8
 8009c08:	008a      	lsls	r2, r1, #2
 8009c0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009c0e:	f7f7 f843 	bl	8000c98 <__aeabi_uldivmod>
 8009c12:	4602      	mov	r2, r0
 8009c14:	460b      	mov	r3, r1
 8009c16:	4b0d      	ldr	r3, [pc, #52]	@ (8009c4c <UART_SetConfig+0x4e4>)
 8009c18:	fba3 1302 	umull	r1, r3, r3, r2
 8009c1c:	095b      	lsrs	r3, r3, #5
 8009c1e:	2164      	movs	r1, #100	@ 0x64
 8009c20:	fb01 f303 	mul.w	r3, r1, r3
 8009c24:	1ad3      	subs	r3, r2, r3
 8009c26:	011b      	lsls	r3, r3, #4
 8009c28:	3332      	adds	r3, #50	@ 0x32
 8009c2a:	4a08      	ldr	r2, [pc, #32]	@ (8009c4c <UART_SetConfig+0x4e4>)
 8009c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c30:	095b      	lsrs	r3, r3, #5
 8009c32:	f003 020f 	and.w	r2, r3, #15
 8009c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4422      	add	r2, r4
 8009c3e:	609a      	str	r2, [r3, #8]
}
 8009c40:	bf00      	nop
 8009c42:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009c46:	46bd      	mov	sp, r7
 8009c48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c4c:	51eb851f 	.word	0x51eb851f

08009c50 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009c50:	b084      	sub	sp, #16
 8009c52:	b480      	push	{r7}
 8009c54:	b085      	sub	sp, #20
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
 8009c5a:	f107 001c 	add.w	r0, r7, #28
 8009c5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009c62:	2300      	movs	r3, #0
 8009c64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009c66:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009c68:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009c6a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8009c6e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8009c72:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8009c76:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8009c7a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8009c8a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009c8e:	68fa      	ldr	r2, [r7, #12]
 8009c90:	431a      	orrs	r2, r3
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009c96:	2300      	movs	r3, #0
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3714      	adds	r7, #20
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	b004      	add	sp, #16
 8009ca4:	4770      	bx	lr

08009ca6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009ca6:	b480      	push	{r7}
 8009ca8:	b083      	sub	sp, #12
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	370c      	adds	r7, #12
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr

08009cc0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009cc0:	b480      	push	{r7}
 8009cc2:	b083      	sub	sp, #12
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009cd4:	2300      	movs	r3, #0
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	370c      	adds	r7, #12
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr

08009ce2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009ce2:	b480      	push	{r7}
 8009ce4:	b083      	sub	sp, #12
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2203      	movs	r2, #3
 8009cee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	370c      	adds	r7, #12
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr

08009cfe <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009cfe:	b480      	push	{r7}
 8009d00:	b083      	sub	sp, #12
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f003 0303 	and.w	r3, r3, #3
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	370c      	adds	r7, #12
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr

08009d1a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	b085      	sub	sp, #20
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
 8009d22:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009d24:	2300      	movs	r3, #0
 8009d26:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009d38:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009d3e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009d44:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009d46:	68fa      	ldr	r2, [r7, #12]
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8009d54:	f023 030f 	bic.w	r3, r3, #15
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	431a      	orrs	r2, r3
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009d60:	2300      	movs	r3, #0
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3714      	adds	r7, #20
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr

08009d6e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009d6e:	b480      	push	{r7}
 8009d70:	b083      	sub	sp, #12
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	691b      	ldr	r3, [r3, #16]
 8009d7a:	b2db      	uxtb	r3, r3
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b085      	sub	sp, #20
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	3314      	adds	r3, #20
 8009d96:	461a      	mov	r2, r3
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
}  
 8009da2:	4618      	mov	r0, r3
 8009da4:	3714      	adds	r7, #20
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr

08009dae <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009dae:	b480      	push	{r7}
 8009db0:	b085      	sub	sp, #20
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
 8009db6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009db8:	2300      	movs	r3, #0
 8009dba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	685a      	ldr	r2, [r3, #4]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009dd4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009dda:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009de0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009de2:	68fa      	ldr	r2, [r7, #12]
 8009de4:	4313      	orrs	r3, r2
 8009de6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dec:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	431a      	orrs	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009df8:	2300      	movs	r3, #0

}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3714      	adds	r7, #20
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr

08009e06 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b088      	sub	sp, #32
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
 8009e0e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009e14:	2310      	movs	r3, #16
 8009e16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e18:	2340      	movs	r3, #64	@ 0x40
 8009e1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e26:	f107 0308 	add.w	r3, r7, #8
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f7ff ff74 	bl	8009d1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e36:	2110      	movs	r1, #16
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 fa19 	bl	800a270 <SDMMC_GetCmdResp1>
 8009e3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e40:	69fb      	ldr	r3, [r7, #28]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3720      	adds	r7, #32
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b088      	sub	sp, #32
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
 8009e52:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009e58:	2311      	movs	r3, #17
 8009e5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e5c:	2340      	movs	r3, #64	@ 0x40
 8009e5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e60:	2300      	movs	r3, #0
 8009e62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e6a:	f107 0308 	add.w	r3, r7, #8
 8009e6e:	4619      	mov	r1, r3
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f7ff ff52 	bl	8009d1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e7a:	2111      	movs	r1, #17
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 f9f7 	bl	800a270 <SDMMC_GetCmdResp1>
 8009e82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e84:	69fb      	ldr	r3, [r7, #28]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3720      	adds	r7, #32
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b088      	sub	sp, #32
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
 8009e96:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009e9c:	2312      	movs	r3, #18
 8009e9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ea0:	2340      	movs	r3, #64	@ 0x40
 8009ea2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ea8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009eac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009eae:	f107 0308 	add.w	r3, r7, #8
 8009eb2:	4619      	mov	r1, r3
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f7ff ff30 	bl	8009d1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ebe:	2112      	movs	r1, #18
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 f9d5 	bl	800a270 <SDMMC_GetCmdResp1>
 8009ec6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ec8:	69fb      	ldr	r3, [r7, #28]
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3720      	adds	r7, #32
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b088      	sub	sp, #32
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
 8009eda:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009ee0:	2318      	movs	r3, #24
 8009ee2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ee4:	2340      	movs	r3, #64	@ 0x40
 8009ee6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009eec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ef0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ef2:	f107 0308 	add.w	r3, r7, #8
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f7ff ff0e 	bl	8009d1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f02:	2118      	movs	r1, #24
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 f9b3 	bl	800a270 <SDMMC_GetCmdResp1>
 8009f0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f0c:	69fb      	ldr	r3, [r7, #28]
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3720      	adds	r7, #32
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b088      	sub	sp, #32
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
 8009f1e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009f24:	2319      	movs	r3, #25
 8009f26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f28:	2340      	movs	r3, #64	@ 0x40
 8009f2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f36:	f107 0308 	add.w	r3, r7, #8
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f7ff feec 	bl	8009d1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f46:	2119      	movs	r1, #25
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 f991 	bl	800a270 <SDMMC_GetCmdResp1>
 8009f4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f50:	69fb      	ldr	r3, [r7, #28]
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3720      	adds	r7, #32
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
	...

08009f5c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b088      	sub	sp, #32
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009f64:	2300      	movs	r3, #0
 8009f66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009f68:	230c      	movs	r3, #12
 8009f6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f6c:	2340      	movs	r3, #64	@ 0x40
 8009f6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f70:	2300      	movs	r3, #0
 8009f72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f7a:	f107 0308 	add.w	r3, r7, #8
 8009f7e:	4619      	mov	r1, r3
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f7ff feca 	bl	8009d1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009f86:	4a05      	ldr	r2, [pc, #20]	@ (8009f9c <SDMMC_CmdStopTransfer+0x40>)
 8009f88:	210c      	movs	r1, #12
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 f970 	bl	800a270 <SDMMC_GetCmdResp1>
 8009f90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f92:	69fb      	ldr	r3, [r7, #28]
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3720      	adds	r7, #32
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	05f5e100 	.word	0x05f5e100

08009fa0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b08a      	sub	sp, #40	@ 0x28
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009fb0:	2307      	movs	r3, #7
 8009fb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009fb4:	2340      	movs	r3, #64	@ 0x40
 8009fb6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009fbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009fc0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009fc2:	f107 0310 	add.w	r3, r7, #16
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	68f8      	ldr	r0, [r7, #12]
 8009fca:	f7ff fea6 	bl	8009d1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009fd2:	2107      	movs	r1, #7
 8009fd4:	68f8      	ldr	r0, [r7, #12]
 8009fd6:	f000 f94b 	bl	800a270 <SDMMC_GetCmdResp1>
 8009fda:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8009fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3728      	adds	r7, #40	@ 0x28
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b088      	sub	sp, #32
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ffe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a002:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a004:	f107 0308 	add.w	r3, r7, #8
 800a008:	4619      	mov	r1, r3
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f7ff fe85 	bl	8009d1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 fb65 	bl	800a6e0 <SDMMC_GetCmdError>
 800a016:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a018:	69fb      	ldr	r3, [r7, #28]
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3720      	adds	r7, #32
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}

0800a022 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a022:	b580      	push	{r7, lr}
 800a024:	b088      	sub	sp, #32
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a02a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a02e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a030:	2308      	movs	r3, #8
 800a032:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a034:	2340      	movs	r3, #64	@ 0x40
 800a036:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a038:	2300      	movs	r3, #0
 800a03a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a03c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a040:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a042:	f107 0308 	add.w	r3, r7, #8
 800a046:	4619      	mov	r1, r3
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f7ff fe66 	bl	8009d1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 faf8 	bl	800a644 <SDMMC_GetCmdResp7>
 800a054:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a056:	69fb      	ldr	r3, [r7, #28]
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3720      	adds	r7, #32
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b088      	sub	sp, #32
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a06e:	2337      	movs	r3, #55	@ 0x37
 800a070:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a072:	2340      	movs	r3, #64	@ 0x40
 800a074:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a076:	2300      	movs	r3, #0
 800a078:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a07a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a07e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a080:	f107 0308 	add.w	r3, r7, #8
 800a084:	4619      	mov	r1, r3
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f7ff fe47 	bl	8009d1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a08c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a090:	2137      	movs	r1, #55	@ 0x37
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 f8ec 	bl	800a270 <SDMMC_GetCmdResp1>
 800a098:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a09a:	69fb      	ldr	r3, [r7, #28]
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3720      	adds	r7, #32
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b088      	sub	sp, #32
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a0b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a0b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a0ba:	2329      	movs	r3, #41	@ 0x29
 800a0bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a0be:	2340      	movs	r3, #64	@ 0x40
 800a0c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0cc:	f107 0308 	add.w	r3, r7, #8
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f7ff fe21 	bl	8009d1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 f9ff 	bl	800a4dc <SDMMC_GetCmdResp3>
 800a0de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0e0:	69fb      	ldr	r3, [r7, #28]
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3720      	adds	r7, #32
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b088      	sub	sp, #32
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
 800a0f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a0f8:	2306      	movs	r3, #6
 800a0fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a0fc:	2340      	movs	r3, #64	@ 0x40
 800a0fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a100:	2300      	movs	r3, #0
 800a102:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a104:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a108:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a10a:	f107 0308 	add.w	r3, r7, #8
 800a10e:	4619      	mov	r1, r3
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f7ff fe02 	bl	8009d1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a11a:	2106      	movs	r1, #6
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 f8a7 	bl	800a270 <SDMMC_GetCmdResp1>
 800a122:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a124:	69fb      	ldr	r3, [r7, #28]
}
 800a126:	4618      	mov	r0, r3
 800a128:	3720      	adds	r7, #32
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b088      	sub	sp, #32
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a136:	2300      	movs	r3, #0
 800a138:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a13a:	2333      	movs	r3, #51	@ 0x33
 800a13c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a13e:	2340      	movs	r3, #64	@ 0x40
 800a140:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a142:	2300      	movs	r3, #0
 800a144:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a146:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a14a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a14c:	f107 0308 	add.w	r3, r7, #8
 800a150:	4619      	mov	r1, r3
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f7ff fde1 	bl	8009d1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a158:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a15c:	2133      	movs	r1, #51	@ 0x33
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 f886 	bl	800a270 <SDMMC_GetCmdResp1>
 800a164:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a166:	69fb      	ldr	r3, [r7, #28]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3720      	adds	r7, #32
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b088      	sub	sp, #32
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a178:	2300      	movs	r3, #0
 800a17a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a17c:	2302      	movs	r3, #2
 800a17e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a180:	23c0      	movs	r3, #192	@ 0xc0
 800a182:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a184:	2300      	movs	r3, #0
 800a186:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a188:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a18c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a18e:	f107 0308 	add.w	r3, r7, #8
 800a192:	4619      	mov	r1, r3
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f7ff fdc0 	bl	8009d1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 f956 	bl	800a44c <SDMMC_GetCmdResp2>
 800a1a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1a2:	69fb      	ldr	r3, [r7, #28]
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3720      	adds	r7, #32
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b088      	sub	sp, #32
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a1ba:	2309      	movs	r3, #9
 800a1bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a1be:	23c0      	movs	r3, #192	@ 0xc0
 800a1c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1cc:	f107 0308 	add.w	r3, r7, #8
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f7ff fda1 	bl	8009d1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 f937 	bl	800a44c <SDMMC_GetCmdResp2>
 800a1de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1e0:	69fb      	ldr	r3, [r7, #28]
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3720      	adds	r7, #32
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}

0800a1ea <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a1ea:	b580      	push	{r7, lr}
 800a1ec:	b088      	sub	sp, #32
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
 800a1f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a1f8:	2303      	movs	r3, #3
 800a1fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a1fc:	2340      	movs	r3, #64	@ 0x40
 800a1fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a200:	2300      	movs	r3, #0
 800a202:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a204:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a208:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a20a:	f107 0308 	add.w	r3, r7, #8
 800a20e:	4619      	mov	r1, r3
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f7ff fd82 	bl	8009d1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a216:	683a      	ldr	r2, [r7, #0]
 800a218:	2103      	movs	r1, #3
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 f99c 	bl	800a558 <SDMMC_GetCmdResp6>
 800a220:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a222:	69fb      	ldr	r3, [r7, #28]
}
 800a224:	4618      	mov	r0, r3
 800a226:	3720      	adds	r7, #32
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b088      	sub	sp, #32
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a23a:	230d      	movs	r3, #13
 800a23c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a23e:	2340      	movs	r3, #64	@ 0x40
 800a240:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a242:	2300      	movs	r3, #0
 800a244:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a246:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a24a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a24c:	f107 0308 	add.w	r3, r7, #8
 800a250:	4619      	mov	r1, r3
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f7ff fd61 	bl	8009d1a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a258:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a25c:	210d      	movs	r1, #13
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 f806 	bl	800a270 <SDMMC_GetCmdResp1>
 800a264:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a266:	69fb      	ldr	r3, [r7, #28]
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3720      	adds	r7, #32
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b088      	sub	sp, #32
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	460b      	mov	r3, r1
 800a27a:	607a      	str	r2, [r7, #4]
 800a27c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a27e:	4b70      	ldr	r3, [pc, #448]	@ (800a440 <SDMMC_GetCmdResp1+0x1d0>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a70      	ldr	r2, [pc, #448]	@ (800a444 <SDMMC_GetCmdResp1+0x1d4>)
 800a284:	fba2 2303 	umull	r2, r3, r2, r3
 800a288:	0a5a      	lsrs	r2, r3, #9
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	fb02 f303 	mul.w	r3, r2, r3
 800a290:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	1e5a      	subs	r2, r3, #1
 800a296:	61fa      	str	r2, [r7, #28]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d102      	bne.n	800a2a2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a29c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a2a0:	e0c9      	b.n	800a436 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2a6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d0ef      	beq.n	800a292 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a2b2:	69bb      	ldr	r3, [r7, #24]
 800a2b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d1ea      	bne.n	800a292 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2c0:	f003 0304 	and.w	r3, r3, #4
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d004      	beq.n	800a2d2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2204      	movs	r2, #4
 800a2cc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a2ce:	2304      	movs	r3, #4
 800a2d0:	e0b1      	b.n	800a436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2d6:	f003 0301 	and.w	r3, r3, #1
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d004      	beq.n	800a2e8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	e0a6      	b.n	800a436 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	22c5      	movs	r2, #197	@ 0xc5
 800a2ec:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	f7ff fd3d 	bl	8009d6e <SDIO_GetCommandResponse>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	7afb      	ldrb	r3, [r7, #11]
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d001      	beq.n	800a302 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a2fe:	2301      	movs	r3, #1
 800a300:	e099      	b.n	800a436 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a302:	2100      	movs	r1, #0
 800a304:	68f8      	ldr	r0, [r7, #12]
 800a306:	f7ff fd3f 	bl	8009d88 <SDIO_GetResponse>
 800a30a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a30c:	697a      	ldr	r2, [r7, #20]
 800a30e:	4b4e      	ldr	r3, [pc, #312]	@ (800a448 <SDMMC_GetCmdResp1+0x1d8>)
 800a310:	4013      	ands	r3, r2
 800a312:	2b00      	cmp	r3, #0
 800a314:	d101      	bne.n	800a31a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a316:	2300      	movs	r3, #0
 800a318:	e08d      	b.n	800a436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	da02      	bge.n	800a326 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a320:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a324:	e087      	b.n	800a436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d001      	beq.n	800a334 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a330:	2340      	movs	r3, #64	@ 0x40
 800a332:	e080      	b.n	800a436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d001      	beq.n	800a342 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a33e:	2380      	movs	r3, #128	@ 0x80
 800a340:	e079      	b.n	800a436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d002      	beq.n	800a352 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a34c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a350:	e071      	b.n	800a436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d002      	beq.n	800a362 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a35c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a360:	e069      	b.n	800a436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d002      	beq.n	800a372 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a36c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a370:	e061      	b.n	800a436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d002      	beq.n	800a382 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a37c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a380:	e059      	b.n	800a436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d002      	beq.n	800a392 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a38c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a390:	e051      	b.n	800a436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d002      	beq.n	800a3a2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a39c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a3a0:	e049      	b.n	800a436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d002      	beq.n	800a3b2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a3ac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a3b0:	e041      	b.n	800a436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d002      	beq.n	800a3c2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a3bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a3c0:	e039      	b.n	800a436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d002      	beq.n	800a3d2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a3cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a3d0:	e031      	b.n	800a436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d002      	beq.n	800a3e2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a3dc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a3e0:	e029      	b.n	800a436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d002      	beq.n	800a3f2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a3ec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a3f0:	e021      	b.n	800a436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d002      	beq.n	800a402 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a3fc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a400:	e019      	b.n	800a436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d002      	beq.n	800a412 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a40c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a410:	e011      	b.n	800a436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d002      	beq.n	800a422 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a41c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a420:	e009      	b.n	800a436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	f003 0308 	and.w	r3, r3, #8
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d002      	beq.n	800a432 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a42c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a430:	e001      	b.n	800a436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a432:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a436:	4618      	mov	r0, r3
 800a438:	3720      	adds	r7, #32
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	20000010 	.word	0x20000010
 800a444:	10624dd3 	.word	0x10624dd3
 800a448:	fdffe008 	.word	0xfdffe008

0800a44c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b085      	sub	sp, #20
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a454:	4b1f      	ldr	r3, [pc, #124]	@ (800a4d4 <SDMMC_GetCmdResp2+0x88>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a1f      	ldr	r2, [pc, #124]	@ (800a4d8 <SDMMC_GetCmdResp2+0x8c>)
 800a45a:	fba2 2303 	umull	r2, r3, r2, r3
 800a45e:	0a5b      	lsrs	r3, r3, #9
 800a460:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a464:	fb02 f303 	mul.w	r3, r2, r3
 800a468:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	1e5a      	subs	r2, r3, #1
 800a46e:	60fa      	str	r2, [r7, #12]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d102      	bne.n	800a47a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a474:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a478:	e026      	b.n	800a4c8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a47e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a486:	2b00      	cmp	r3, #0
 800a488:	d0ef      	beq.n	800a46a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a490:	2b00      	cmp	r3, #0
 800a492:	d1ea      	bne.n	800a46a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a498:	f003 0304 	and.w	r3, r3, #4
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d004      	beq.n	800a4aa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2204      	movs	r2, #4
 800a4a4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a4a6:	2304      	movs	r3, #4
 800a4a8:	e00e      	b.n	800a4c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4ae:	f003 0301 	and.w	r3, r3, #1
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d004      	beq.n	800a4c0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	e003      	b.n	800a4c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	22c5      	movs	r2, #197	@ 0xc5
 800a4c4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a4c6:	2300      	movs	r3, #0
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3714      	adds	r7, #20
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr
 800a4d4:	20000010 	.word	0x20000010
 800a4d8:	10624dd3 	.word	0x10624dd3

0800a4dc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b085      	sub	sp, #20
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a4e4:	4b1a      	ldr	r3, [pc, #104]	@ (800a550 <SDMMC_GetCmdResp3+0x74>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a1a      	ldr	r2, [pc, #104]	@ (800a554 <SDMMC_GetCmdResp3+0x78>)
 800a4ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a4ee:	0a5b      	lsrs	r3, r3, #9
 800a4f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4f4:	fb02 f303 	mul.w	r3, r2, r3
 800a4f8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	1e5a      	subs	r2, r3, #1
 800a4fe:	60fa      	str	r2, [r7, #12]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d102      	bne.n	800a50a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a504:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a508:	e01b      	b.n	800a542 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a50e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a516:	2b00      	cmp	r3, #0
 800a518:	d0ef      	beq.n	800a4fa <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a520:	2b00      	cmp	r3, #0
 800a522:	d1ea      	bne.n	800a4fa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a528:	f003 0304 	and.w	r3, r3, #4
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d004      	beq.n	800a53a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2204      	movs	r2, #4
 800a534:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a536:	2304      	movs	r3, #4
 800a538:	e003      	b.n	800a542 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	22c5      	movs	r2, #197	@ 0xc5
 800a53e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	3714      	adds	r7, #20
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr
 800a54e:	bf00      	nop
 800a550:	20000010 	.word	0x20000010
 800a554:	10624dd3 	.word	0x10624dd3

0800a558 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b088      	sub	sp, #32
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	60f8      	str	r0, [r7, #12]
 800a560:	460b      	mov	r3, r1
 800a562:	607a      	str	r2, [r7, #4]
 800a564:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a566:	4b35      	ldr	r3, [pc, #212]	@ (800a63c <SDMMC_GetCmdResp6+0xe4>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a35      	ldr	r2, [pc, #212]	@ (800a640 <SDMMC_GetCmdResp6+0xe8>)
 800a56c:	fba2 2303 	umull	r2, r3, r2, r3
 800a570:	0a5b      	lsrs	r3, r3, #9
 800a572:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a576:	fb02 f303 	mul.w	r3, r2, r3
 800a57a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	1e5a      	subs	r2, r3, #1
 800a580:	61fa      	str	r2, [r7, #28]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d102      	bne.n	800a58c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a586:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a58a:	e052      	b.n	800a632 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a590:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d0ef      	beq.n	800a57c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d1ea      	bne.n	800a57c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5aa:	f003 0304 	and.w	r3, r3, #4
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d004      	beq.n	800a5bc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2204      	movs	r2, #4
 800a5b6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5b8:	2304      	movs	r3, #4
 800a5ba:	e03a      	b.n	800a632 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5c0:	f003 0301 	and.w	r3, r3, #1
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d004      	beq.n	800a5d2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e02f      	b.n	800a632 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a5d2:	68f8      	ldr	r0, [r7, #12]
 800a5d4:	f7ff fbcb 	bl	8009d6e <SDIO_GetCommandResponse>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	461a      	mov	r2, r3
 800a5dc:	7afb      	ldrb	r3, [r7, #11]
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d001      	beq.n	800a5e6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e025      	b.n	800a632 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	22c5      	movs	r2, #197	@ 0xc5
 800a5ea:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a5ec:	2100      	movs	r1, #0
 800a5ee:	68f8      	ldr	r0, [r7, #12]
 800a5f0:	f7ff fbca 	bl	8009d88 <SDIO_GetResponse>
 800a5f4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d106      	bne.n	800a60e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	0c1b      	lsrs	r3, r3, #16
 800a604:	b29a      	uxth	r2, r3
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a60a:	2300      	movs	r3, #0
 800a60c:	e011      	b.n	800a632 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a614:	2b00      	cmp	r3, #0
 800a616:	d002      	beq.n	800a61e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a618:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a61c:	e009      	b.n	800a632 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a624:	2b00      	cmp	r3, #0
 800a626:	d002      	beq.n	800a62e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a628:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a62c:	e001      	b.n	800a632 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a62e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a632:	4618      	mov	r0, r3
 800a634:	3720      	adds	r7, #32
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	20000010 	.word	0x20000010
 800a640:	10624dd3 	.word	0x10624dd3

0800a644 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a644:	b480      	push	{r7}
 800a646:	b085      	sub	sp, #20
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a64c:	4b22      	ldr	r3, [pc, #136]	@ (800a6d8 <SDMMC_GetCmdResp7+0x94>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4a22      	ldr	r2, [pc, #136]	@ (800a6dc <SDMMC_GetCmdResp7+0x98>)
 800a652:	fba2 2303 	umull	r2, r3, r2, r3
 800a656:	0a5b      	lsrs	r3, r3, #9
 800a658:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a65c:	fb02 f303 	mul.w	r3, r2, r3
 800a660:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	1e5a      	subs	r2, r3, #1
 800a666:	60fa      	str	r2, [r7, #12]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d102      	bne.n	800a672 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a66c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a670:	e02c      	b.n	800a6cc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a676:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d0ef      	beq.n	800a662 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d1ea      	bne.n	800a662 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a690:	f003 0304 	and.w	r3, r3, #4
 800a694:	2b00      	cmp	r3, #0
 800a696:	d004      	beq.n	800a6a2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2204      	movs	r2, #4
 800a69c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a69e:	2304      	movs	r3, #4
 800a6a0:	e014      	b.n	800a6cc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6a6:	f003 0301 	and.w	r3, r3, #1
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d004      	beq.n	800a6b8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	e009      	b.n	800a6cc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d002      	beq.n	800a6ca <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2240      	movs	r2, #64	@ 0x40
 800a6c8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a6ca:	2300      	movs	r3, #0
  
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3714      	adds	r7, #20
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr
 800a6d8:	20000010 	.word	0x20000010
 800a6dc:	10624dd3 	.word	0x10624dd3

0800a6e0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b085      	sub	sp, #20
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a6e8:	4b11      	ldr	r3, [pc, #68]	@ (800a730 <SDMMC_GetCmdError+0x50>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	4a11      	ldr	r2, [pc, #68]	@ (800a734 <SDMMC_GetCmdError+0x54>)
 800a6ee:	fba2 2303 	umull	r2, r3, r2, r3
 800a6f2:	0a5b      	lsrs	r3, r3, #9
 800a6f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6f8:	fb02 f303 	mul.w	r3, r2, r3
 800a6fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	1e5a      	subs	r2, r3, #1
 800a702:	60fa      	str	r2, [r7, #12]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d102      	bne.n	800a70e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a708:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a70c:	e009      	b.n	800a722 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a716:	2b00      	cmp	r3, #0
 800a718:	d0f1      	beq.n	800a6fe <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	22c5      	movs	r2, #197	@ 0xc5
 800a71e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800a720:	2300      	movs	r3, #0
}
 800a722:	4618      	mov	r0, r3
 800a724:	3714      	adds	r7, #20
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	20000010 	.word	0x20000010
 800a734:	10624dd3 	.word	0x10624dd3

0800a738 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a73c:	4904      	ldr	r1, [pc, #16]	@ (800a750 <MX_FATFS_Init+0x18>)
 800a73e:	4805      	ldr	r0, [pc, #20]	@ (800a754 <MX_FATFS_Init+0x1c>)
 800a740:	f000 fa84 	bl	800ac4c <FATFS_LinkDriver>
 800a744:	4603      	mov	r3, r0
 800a746:	461a      	mov	r2, r3
 800a748:	4b03      	ldr	r3, [pc, #12]	@ (800a758 <MX_FATFS_Init+0x20>)
 800a74a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a74c:	bf00      	nop
 800a74e:	bd80      	pop	{r7, pc}
 800a750:	20000a2c 	.word	0x20000a2c
 800a754:	08010ed0 	.word	0x08010ed0
 800a758:	20000a28 	.word	0x20000a28

0800a75c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a762:	2300      	movs	r3, #0
 800a764:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a766:	f000 f896 	bl	800a896 <BSP_SD_IsDetected>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d001      	beq.n	800a774 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a770:	2301      	movs	r3, #1
 800a772:	e012      	b.n	800a79a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a774:	480b      	ldr	r0, [pc, #44]	@ (800a7a4 <BSP_SD_Init+0x48>)
 800a776:	f7fc fbd3 	bl	8006f20 <HAL_SD_Init>
 800a77a:	4603      	mov	r3, r0
 800a77c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a77e:	79fb      	ldrb	r3, [r7, #7]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d109      	bne.n	800a798 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a784:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a788:	4806      	ldr	r0, [pc, #24]	@ (800a7a4 <BSP_SD_Init+0x48>)
 800a78a:	f7fd f9a1 	bl	8007ad0 <HAL_SD_ConfigWideBusOperation>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d001      	beq.n	800a798 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a798:	79fb      	ldrb	r3, [r7, #7]
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3708      	adds	r7, #8
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	2000047c 	.word	0x2000047c

0800a7a8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b086      	sub	sp, #24
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	68ba      	ldr	r2, [r7, #8]
 800a7bc:	68f9      	ldr	r1, [r7, #12]
 800a7be:	4806      	ldr	r0, [pc, #24]	@ (800a7d8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a7c0:	f7fc fc5e 	bl	8007080 <HAL_SD_ReadBlocks_DMA>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d001      	beq.n	800a7ce <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a7ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3718      	adds	r7, #24
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	2000047c 	.word	0x2000047c

0800a7dc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b086      	sub	sp, #24
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	68ba      	ldr	r2, [r7, #8]
 800a7f0:	68f9      	ldr	r1, [r7, #12]
 800a7f2:	4806      	ldr	r0, [pc, #24]	@ (800a80c <BSP_SD_WriteBlocks_DMA+0x30>)
 800a7f4:	f7fc fd26 	bl	8007244 <HAL_SD_WriteBlocks_DMA>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d001      	beq.n	800a802 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a7fe:	2301      	movs	r3, #1
 800a800:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a802:	7dfb      	ldrb	r3, [r7, #23]
}
 800a804:	4618      	mov	r0, r3
 800a806:	3718      	adds	r7, #24
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}
 800a80c:	2000047c 	.word	0x2000047c

0800a810 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a814:	4805      	ldr	r0, [pc, #20]	@ (800a82c <BSP_SD_GetCardState+0x1c>)
 800a816:	f7fd f9f5 	bl	8007c04 <HAL_SD_GetCardState>
 800a81a:	4603      	mov	r3, r0
 800a81c:	2b04      	cmp	r3, #4
 800a81e:	bf14      	ite	ne
 800a820:	2301      	movne	r3, #1
 800a822:	2300      	moveq	r3, #0
 800a824:	b2db      	uxtb	r3, r3
}
 800a826:	4618      	mov	r0, r3
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	2000047c 	.word	0x2000047c

0800a830 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a838:	6879      	ldr	r1, [r7, #4]
 800a83a:	4803      	ldr	r0, [pc, #12]	@ (800a848 <BSP_SD_GetCardInfo+0x18>)
 800a83c:	f7fd f91c 	bl	8007a78 <HAL_SD_GetCardInfo>
}
 800a840:	bf00      	nop
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	2000047c 	.word	0x2000047c

0800a84c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a854:	f000 f818 	bl	800a888 <BSP_SD_AbortCallback>
}
 800a858:	bf00      	nop
 800a85a:	3708      	adds	r7, #8
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a868:	f000 f98c 	bl	800ab84 <BSP_SD_WriteCpltCallback>
}
 800a86c:	bf00      	nop
 800a86e:	3708      	adds	r7, #8
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a87c:	f000 f98e 	bl	800ab9c <BSP_SD_ReadCpltCallback>
}
 800a880:	bf00      	nop
 800a882:	3708      	adds	r7, #8
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a888:	b480      	push	{r7}
 800a88a:	af00      	add	r7, sp, #0

}
 800a88c:	bf00      	nop
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr

0800a896 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a896:	b480      	push	{r7}
 800a898:	b083      	sub	sp, #12
 800a89a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a89c:	2301      	movs	r3, #1
 800a89e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800a8a0:	79fb      	ldrb	r3, [r7, #7]
 800a8a2:	b2db      	uxtb	r3, r3
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	370c      	adds	r7, #12
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800a8b8:	f7f9 faa8 	bl	8003e0c <HAL_GetTick>
 800a8bc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800a8be:	e006      	b.n	800a8ce <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a8c0:	f7ff ffa6 	bl	800a810 <BSP_SD_GetCardState>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d101      	bne.n	800a8ce <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	e009      	b.n	800a8e2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800a8ce:	f7f9 fa9d 	bl	8003e0c <HAL_GetTick>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	1ad3      	subs	r3, r2, r3
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d8f0      	bhi.n	800a8c0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a8de:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3710      	adds	r7, #16
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
	...

0800a8ec <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a8f6:	4b0b      	ldr	r3, [pc, #44]	@ (800a924 <SD_CheckStatus+0x38>)
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a8fc:	f7ff ff88 	bl	800a810 <BSP_SD_GetCardState>
 800a900:	4603      	mov	r3, r0
 800a902:	2b00      	cmp	r3, #0
 800a904:	d107      	bne.n	800a916 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a906:	4b07      	ldr	r3, [pc, #28]	@ (800a924 <SD_CheckStatus+0x38>)
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	f023 0301 	bic.w	r3, r3, #1
 800a910:	b2da      	uxtb	r2, r3
 800a912:	4b04      	ldr	r3, [pc, #16]	@ (800a924 <SD_CheckStatus+0x38>)
 800a914:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a916:	4b03      	ldr	r3, [pc, #12]	@ (800a924 <SD_CheckStatus+0x38>)
 800a918:	781b      	ldrb	r3, [r3, #0]
 800a91a:	b2db      	uxtb	r3, r3
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3708      	adds	r7, #8
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	20000019 	.word	0x20000019

0800a928 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	4603      	mov	r3, r0
 800a930:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a932:	f7ff ff13 	bl	800a75c <BSP_SD_Init>
 800a936:	4603      	mov	r3, r0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d107      	bne.n	800a94c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800a93c:	79fb      	ldrb	r3, [r7, #7]
 800a93e:	4618      	mov	r0, r3
 800a940:	f7ff ffd4 	bl	800a8ec <SD_CheckStatus>
 800a944:	4603      	mov	r3, r0
 800a946:	461a      	mov	r2, r3
 800a948:	4b04      	ldr	r3, [pc, #16]	@ (800a95c <SD_initialize+0x34>)
 800a94a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a94c:	4b03      	ldr	r3, [pc, #12]	@ (800a95c <SD_initialize+0x34>)
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	b2db      	uxtb	r3, r3
}
 800a952:	4618      	mov	r0, r3
 800a954:	3708      	adds	r7, #8
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	20000019 	.word	0x20000019

0800a960 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	4603      	mov	r3, r0
 800a968:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a96a:	79fb      	ldrb	r3, [r7, #7]
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7ff ffbd 	bl	800a8ec <SD_CheckStatus>
 800a972:	4603      	mov	r3, r0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3708      	adds	r7, #8
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b086      	sub	sp, #24
 800a980:	af00      	add	r7, sp, #0
 800a982:	60b9      	str	r1, [r7, #8]
 800a984:	607a      	str	r2, [r7, #4]
 800a986:	603b      	str	r3, [r7, #0]
 800a988:	4603      	mov	r3, r0
 800a98a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a98c:	2301      	movs	r3, #1
 800a98e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a990:	f247 5030 	movw	r0, #30000	@ 0x7530
 800a994:	f7ff ff8c 	bl	800a8b0 <SD_CheckStatusWithTimeout>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	da01      	bge.n	800a9a2 <SD_read+0x26>
  {
    return res;
 800a99e:	7dfb      	ldrb	r3, [r7, #23]
 800a9a0:	e03b      	b.n	800aa1a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800a9a2:	683a      	ldr	r2, [r7, #0]
 800a9a4:	6879      	ldr	r1, [r7, #4]
 800a9a6:	68b8      	ldr	r0, [r7, #8]
 800a9a8:	f7ff fefe 	bl	800a7a8 <BSP_SD_ReadBlocks_DMA>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d132      	bne.n	800aa18 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800a9b2:	4b1c      	ldr	r3, [pc, #112]	@ (800aa24 <SD_read+0xa8>)
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800a9b8:	f7f9 fa28 	bl	8003e0c <HAL_GetTick>
 800a9bc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a9be:	bf00      	nop
 800a9c0:	4b18      	ldr	r3, [pc, #96]	@ (800aa24 <SD_read+0xa8>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d108      	bne.n	800a9da <SD_read+0x5e>
 800a9c8:	f7f9 fa20 	bl	8003e0c <HAL_GetTick>
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	1ad3      	subs	r3, r2, r3
 800a9d2:	f247 522f 	movw	r2, #29999	@ 0x752f
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d9f2      	bls.n	800a9c0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800a9da:	4b12      	ldr	r3, [pc, #72]	@ (800aa24 <SD_read+0xa8>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d102      	bne.n	800a9e8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	75fb      	strb	r3, [r7, #23]
 800a9e6:	e017      	b.n	800aa18 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800a9e8:	4b0e      	ldr	r3, [pc, #56]	@ (800aa24 <SD_read+0xa8>)
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a9ee:	f7f9 fa0d 	bl	8003e0c <HAL_GetTick>
 800a9f2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a9f4:	e007      	b.n	800aa06 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a9f6:	f7ff ff0b 	bl	800a810 <BSP_SD_GetCardState>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d102      	bne.n	800aa06 <SD_read+0x8a>
          {
            res = RES_OK;
 800aa00:	2300      	movs	r3, #0
 800aa02:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800aa04:	e008      	b.n	800aa18 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aa06:	f7f9 fa01 	bl	8003e0c <HAL_GetTick>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	1ad3      	subs	r3, r2, r3
 800aa10:	f247 522f 	movw	r2, #29999	@ 0x752f
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d9ee      	bls.n	800a9f6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800aa18:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3718      	adds	r7, #24
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	20000a34 	.word	0x20000a34

0800aa28 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b086      	sub	sp, #24
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60b9      	str	r1, [r7, #8]
 800aa30:	607a      	str	r2, [r7, #4]
 800aa32:	603b      	str	r3, [r7, #0]
 800aa34:	4603      	mov	r3, r0
 800aa36:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800aa3c:	4b24      	ldr	r3, [pc, #144]	@ (800aad0 <SD_write+0xa8>)
 800aa3e:	2200      	movs	r2, #0
 800aa40:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800aa42:	f247 5030 	movw	r0, #30000	@ 0x7530
 800aa46:	f7ff ff33 	bl	800a8b0 <SD_CheckStatusWithTimeout>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	da01      	bge.n	800aa54 <SD_write+0x2c>
  {
    return res;
 800aa50:	7dfb      	ldrb	r3, [r7, #23]
 800aa52:	e038      	b.n	800aac6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800aa54:	683a      	ldr	r2, [r7, #0]
 800aa56:	6879      	ldr	r1, [r7, #4]
 800aa58:	68b8      	ldr	r0, [r7, #8]
 800aa5a:	f7ff febf 	bl	800a7dc <BSP_SD_WriteBlocks_DMA>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d12f      	bne.n	800aac4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800aa64:	f7f9 f9d2 	bl	8003e0c <HAL_GetTick>
 800aa68:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800aa6a:	bf00      	nop
 800aa6c:	4b18      	ldr	r3, [pc, #96]	@ (800aad0 <SD_write+0xa8>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d108      	bne.n	800aa86 <SD_write+0x5e>
 800aa74:	f7f9 f9ca 	bl	8003e0c <HAL_GetTick>
 800aa78:	4602      	mov	r2, r0
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	1ad3      	subs	r3, r2, r3
 800aa7e:	f247 522f 	movw	r2, #29999	@ 0x752f
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d9f2      	bls.n	800aa6c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800aa86:	4b12      	ldr	r3, [pc, #72]	@ (800aad0 <SD_write+0xa8>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d102      	bne.n	800aa94 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	75fb      	strb	r3, [r7, #23]
 800aa92:	e017      	b.n	800aac4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800aa94:	4b0e      	ldr	r3, [pc, #56]	@ (800aad0 <SD_write+0xa8>)
 800aa96:	2200      	movs	r2, #0
 800aa98:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800aa9a:	f7f9 f9b7 	bl	8003e0c <HAL_GetTick>
 800aa9e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aaa0:	e007      	b.n	800aab2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aaa2:	f7ff feb5 	bl	800a810 <BSP_SD_GetCardState>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d102      	bne.n	800aab2 <SD_write+0x8a>
          {
            res = RES_OK;
 800aaac:	2300      	movs	r3, #0
 800aaae:	75fb      	strb	r3, [r7, #23]
            break;
 800aab0:	e008      	b.n	800aac4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aab2:	f7f9 f9ab 	bl	8003e0c <HAL_GetTick>
 800aab6:	4602      	mov	r2, r0
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	1ad3      	subs	r3, r2, r3
 800aabc:	f247 522f 	movw	r2, #29999	@ 0x752f
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d9ee      	bls.n	800aaa2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800aac4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3718      	adds	r7, #24
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	20000a30 	.word	0x20000a30

0800aad4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b08c      	sub	sp, #48	@ 0x30
 800aad8:	af00      	add	r7, sp, #0
 800aada:	4603      	mov	r3, r0
 800aadc:	603a      	str	r2, [r7, #0]
 800aade:	71fb      	strb	r3, [r7, #7]
 800aae0:	460b      	mov	r3, r1
 800aae2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800aae4:	2301      	movs	r3, #1
 800aae6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800aaea:	4b25      	ldr	r3, [pc, #148]	@ (800ab80 <SD_ioctl+0xac>)
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	f003 0301 	and.w	r3, r3, #1
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d001      	beq.n	800aafc <SD_ioctl+0x28>
 800aaf8:	2303      	movs	r3, #3
 800aafa:	e03c      	b.n	800ab76 <SD_ioctl+0xa2>

  switch (cmd)
 800aafc:	79bb      	ldrb	r3, [r7, #6]
 800aafe:	2b03      	cmp	r3, #3
 800ab00:	d834      	bhi.n	800ab6c <SD_ioctl+0x98>
 800ab02:	a201      	add	r2, pc, #4	@ (adr r2, 800ab08 <SD_ioctl+0x34>)
 800ab04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab08:	0800ab19 	.word	0x0800ab19
 800ab0c:	0800ab21 	.word	0x0800ab21
 800ab10:	0800ab39 	.word	0x0800ab39
 800ab14:	0800ab53 	.word	0x0800ab53
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ab1e:	e028      	b.n	800ab72 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ab20:	f107 030c 	add.w	r3, r7, #12
 800ab24:	4618      	mov	r0, r3
 800ab26:	f7ff fe83 	bl	800a830 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ab2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ab30:	2300      	movs	r3, #0
 800ab32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ab36:	e01c      	b.n	800ab72 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ab38:	f107 030c 	add.w	r3, r7, #12
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7ff fe77 	bl	800a830 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ab42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab44:	b29a      	uxth	r2, r3
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ab50:	e00f      	b.n	800ab72 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ab52:	f107 030c 	add.w	r3, r7, #12
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7ff fe6a 	bl	800a830 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ab5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab5e:	0a5a      	lsrs	r2, r3, #9
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ab64:	2300      	movs	r3, #0
 800ab66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ab6a:	e002      	b.n	800ab72 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ab6c:	2304      	movs	r3, #4
 800ab6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800ab72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3730      	adds	r7, #48	@ 0x30
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	20000019 	.word	0x20000019

0800ab84 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ab84:	b480      	push	{r7}
 800ab86:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800ab88:	4b03      	ldr	r3, [pc, #12]	@ (800ab98 <BSP_SD_WriteCpltCallback+0x14>)
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	601a      	str	r2, [r3, #0]
}
 800ab8e:	bf00      	nop
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr
 800ab98:	20000a30 	.word	0x20000a30

0800ab9c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800aba0:	4b03      	ldr	r3, [pc, #12]	@ (800abb0 <BSP_SD_ReadCpltCallback+0x14>)
 800aba2:	2201      	movs	r2, #1
 800aba4:	601a      	str	r2, [r3, #0]
}
 800aba6:	bf00      	nop
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr
 800abb0:	20000a34 	.word	0x20000a34

0800abb4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b087      	sub	sp, #28
 800abb8:	af00      	add	r7, sp, #0
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	60b9      	str	r1, [r7, #8]
 800abbe:	4613      	mov	r3, r2
 800abc0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800abc2:	2301      	movs	r3, #1
 800abc4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800abc6:	2300      	movs	r3, #0
 800abc8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800abca:	4b1f      	ldr	r3, [pc, #124]	@ (800ac48 <FATFS_LinkDriverEx+0x94>)
 800abcc:	7a5b      	ldrb	r3, [r3, #9]
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d131      	bne.n	800ac38 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800abd4:	4b1c      	ldr	r3, [pc, #112]	@ (800ac48 <FATFS_LinkDriverEx+0x94>)
 800abd6:	7a5b      	ldrb	r3, [r3, #9]
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	461a      	mov	r2, r3
 800abdc:	4b1a      	ldr	r3, [pc, #104]	@ (800ac48 <FATFS_LinkDriverEx+0x94>)
 800abde:	2100      	movs	r1, #0
 800abe0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800abe2:	4b19      	ldr	r3, [pc, #100]	@ (800ac48 <FATFS_LinkDriverEx+0x94>)
 800abe4:	7a5b      	ldrb	r3, [r3, #9]
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	4a17      	ldr	r2, [pc, #92]	@ (800ac48 <FATFS_LinkDriverEx+0x94>)
 800abea:	009b      	lsls	r3, r3, #2
 800abec:	4413      	add	r3, r2
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800abf2:	4b15      	ldr	r3, [pc, #84]	@ (800ac48 <FATFS_LinkDriverEx+0x94>)
 800abf4:	7a5b      	ldrb	r3, [r3, #9]
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	461a      	mov	r2, r3
 800abfa:	4b13      	ldr	r3, [pc, #76]	@ (800ac48 <FATFS_LinkDriverEx+0x94>)
 800abfc:	4413      	add	r3, r2
 800abfe:	79fa      	ldrb	r2, [r7, #7]
 800ac00:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ac02:	4b11      	ldr	r3, [pc, #68]	@ (800ac48 <FATFS_LinkDriverEx+0x94>)
 800ac04:	7a5b      	ldrb	r3, [r3, #9]
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	1c5a      	adds	r2, r3, #1
 800ac0a:	b2d1      	uxtb	r1, r2
 800ac0c:	4a0e      	ldr	r2, [pc, #56]	@ (800ac48 <FATFS_LinkDriverEx+0x94>)
 800ac0e:	7251      	strb	r1, [r2, #9]
 800ac10:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ac12:	7dbb      	ldrb	r3, [r7, #22]
 800ac14:	3330      	adds	r3, #48	@ 0x30
 800ac16:	b2da      	uxtb	r2, r3
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	223a      	movs	r2, #58	@ 0x3a
 800ac22:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	3302      	adds	r3, #2
 800ac28:	222f      	movs	r2, #47	@ 0x2f
 800ac2a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	3303      	adds	r3, #3
 800ac30:	2200      	movs	r2, #0
 800ac32:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ac34:	2300      	movs	r3, #0
 800ac36:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ac38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	371c      	adds	r7, #28
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr
 800ac46:	bf00      	nop
 800ac48:	20000a38 	.word	0x20000a38

0800ac4c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ac56:	2200      	movs	r2, #0
 800ac58:	6839      	ldr	r1, [r7, #0]
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f7ff ffaa 	bl	800abb4 <FATFS_LinkDriverEx>
 800ac60:	4603      	mov	r3, r0
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3708      	adds	r7, #8
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <atof>:
 800ac6a:	2100      	movs	r1, #0
 800ac6c:	f000 be0a 	b.w	800b884 <strtod>

0800ac70 <sulp>:
 800ac70:	b570      	push	{r4, r5, r6, lr}
 800ac72:	4604      	mov	r4, r0
 800ac74:	460d      	mov	r5, r1
 800ac76:	ec45 4b10 	vmov	d0, r4, r5
 800ac7a:	4616      	mov	r6, r2
 800ac7c:	f003 fdac 	bl	800e7d8 <__ulp>
 800ac80:	ec51 0b10 	vmov	r0, r1, d0
 800ac84:	b17e      	cbz	r6, 800aca6 <sulp+0x36>
 800ac86:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ac8a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	dd09      	ble.n	800aca6 <sulp+0x36>
 800ac92:	051b      	lsls	r3, r3, #20
 800ac94:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ac98:	2400      	movs	r4, #0
 800ac9a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ac9e:	4622      	mov	r2, r4
 800aca0:	462b      	mov	r3, r5
 800aca2:	f7f5 fcb1 	bl	8000608 <__aeabi_dmul>
 800aca6:	ec41 0b10 	vmov	d0, r0, r1
 800acaa:	bd70      	pop	{r4, r5, r6, pc}
 800acac:	0000      	movs	r0, r0
	...

0800acb0 <_strtod_l>:
 800acb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb4:	b09f      	sub	sp, #124	@ 0x7c
 800acb6:	460c      	mov	r4, r1
 800acb8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800acba:	2200      	movs	r2, #0
 800acbc:	921a      	str	r2, [sp, #104]	@ 0x68
 800acbe:	9005      	str	r0, [sp, #20]
 800acc0:	f04f 0a00 	mov.w	sl, #0
 800acc4:	f04f 0b00 	mov.w	fp, #0
 800acc8:	460a      	mov	r2, r1
 800acca:	9219      	str	r2, [sp, #100]	@ 0x64
 800accc:	7811      	ldrb	r1, [r2, #0]
 800acce:	292b      	cmp	r1, #43	@ 0x2b
 800acd0:	d04a      	beq.n	800ad68 <_strtod_l+0xb8>
 800acd2:	d838      	bhi.n	800ad46 <_strtod_l+0x96>
 800acd4:	290d      	cmp	r1, #13
 800acd6:	d832      	bhi.n	800ad3e <_strtod_l+0x8e>
 800acd8:	2908      	cmp	r1, #8
 800acda:	d832      	bhi.n	800ad42 <_strtod_l+0x92>
 800acdc:	2900      	cmp	r1, #0
 800acde:	d03b      	beq.n	800ad58 <_strtod_l+0xa8>
 800ace0:	2200      	movs	r2, #0
 800ace2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ace4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ace6:	782a      	ldrb	r2, [r5, #0]
 800ace8:	2a30      	cmp	r2, #48	@ 0x30
 800acea:	f040 80b3 	bne.w	800ae54 <_strtod_l+0x1a4>
 800acee:	786a      	ldrb	r2, [r5, #1]
 800acf0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800acf4:	2a58      	cmp	r2, #88	@ 0x58
 800acf6:	d16e      	bne.n	800add6 <_strtod_l+0x126>
 800acf8:	9302      	str	r3, [sp, #8]
 800acfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800acfc:	9301      	str	r3, [sp, #4]
 800acfe:	ab1a      	add	r3, sp, #104	@ 0x68
 800ad00:	9300      	str	r3, [sp, #0]
 800ad02:	4a8e      	ldr	r2, [pc, #568]	@ (800af3c <_strtod_l+0x28c>)
 800ad04:	9805      	ldr	r0, [sp, #20]
 800ad06:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ad08:	a919      	add	r1, sp, #100	@ 0x64
 800ad0a:	f002 fe57 	bl	800d9bc <__gethex>
 800ad0e:	f010 060f 	ands.w	r6, r0, #15
 800ad12:	4604      	mov	r4, r0
 800ad14:	d005      	beq.n	800ad22 <_strtod_l+0x72>
 800ad16:	2e06      	cmp	r6, #6
 800ad18:	d128      	bne.n	800ad6c <_strtod_l+0xbc>
 800ad1a:	3501      	adds	r5, #1
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	9519      	str	r5, [sp, #100]	@ 0x64
 800ad20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	f040 858e 	bne.w	800b846 <_strtod_l+0xb96>
 800ad2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad2c:	b1cb      	cbz	r3, 800ad62 <_strtod_l+0xb2>
 800ad2e:	4652      	mov	r2, sl
 800ad30:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ad34:	ec43 2b10 	vmov	d0, r2, r3
 800ad38:	b01f      	add	sp, #124	@ 0x7c
 800ad3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad3e:	2920      	cmp	r1, #32
 800ad40:	d1ce      	bne.n	800ace0 <_strtod_l+0x30>
 800ad42:	3201      	adds	r2, #1
 800ad44:	e7c1      	b.n	800acca <_strtod_l+0x1a>
 800ad46:	292d      	cmp	r1, #45	@ 0x2d
 800ad48:	d1ca      	bne.n	800ace0 <_strtod_l+0x30>
 800ad4a:	2101      	movs	r1, #1
 800ad4c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ad4e:	1c51      	adds	r1, r2, #1
 800ad50:	9119      	str	r1, [sp, #100]	@ 0x64
 800ad52:	7852      	ldrb	r2, [r2, #1]
 800ad54:	2a00      	cmp	r2, #0
 800ad56:	d1c5      	bne.n	800ace4 <_strtod_l+0x34>
 800ad58:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ad5a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	f040 8570 	bne.w	800b842 <_strtod_l+0xb92>
 800ad62:	4652      	mov	r2, sl
 800ad64:	465b      	mov	r3, fp
 800ad66:	e7e5      	b.n	800ad34 <_strtod_l+0x84>
 800ad68:	2100      	movs	r1, #0
 800ad6a:	e7ef      	b.n	800ad4c <_strtod_l+0x9c>
 800ad6c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ad6e:	b13a      	cbz	r2, 800ad80 <_strtod_l+0xd0>
 800ad70:	2135      	movs	r1, #53	@ 0x35
 800ad72:	a81c      	add	r0, sp, #112	@ 0x70
 800ad74:	f003 fe2a 	bl	800e9cc <__copybits>
 800ad78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ad7a:	9805      	ldr	r0, [sp, #20]
 800ad7c:	f003 f9f8 	bl	800e170 <_Bfree>
 800ad80:	3e01      	subs	r6, #1
 800ad82:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ad84:	2e04      	cmp	r6, #4
 800ad86:	d806      	bhi.n	800ad96 <_strtod_l+0xe6>
 800ad88:	e8df f006 	tbb	[pc, r6]
 800ad8c:	201d0314 	.word	0x201d0314
 800ad90:	14          	.byte	0x14
 800ad91:	00          	.byte	0x00
 800ad92:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ad96:	05e1      	lsls	r1, r4, #23
 800ad98:	bf48      	it	mi
 800ad9a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ad9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ada2:	0d1b      	lsrs	r3, r3, #20
 800ada4:	051b      	lsls	r3, r3, #20
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d1bb      	bne.n	800ad22 <_strtod_l+0x72>
 800adaa:	f001 febd 	bl	800cb28 <__errno>
 800adae:	2322      	movs	r3, #34	@ 0x22
 800adb0:	6003      	str	r3, [r0, #0]
 800adb2:	e7b6      	b.n	800ad22 <_strtod_l+0x72>
 800adb4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800adb8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800adbc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800adc0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800adc4:	e7e7      	b.n	800ad96 <_strtod_l+0xe6>
 800adc6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800af44 <_strtod_l+0x294>
 800adca:	e7e4      	b.n	800ad96 <_strtod_l+0xe6>
 800adcc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800add0:	f04f 3aff 	mov.w	sl, #4294967295
 800add4:	e7df      	b.n	800ad96 <_strtod_l+0xe6>
 800add6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800add8:	1c5a      	adds	r2, r3, #1
 800adda:	9219      	str	r2, [sp, #100]	@ 0x64
 800addc:	785b      	ldrb	r3, [r3, #1]
 800adde:	2b30      	cmp	r3, #48	@ 0x30
 800ade0:	d0f9      	beq.n	800add6 <_strtod_l+0x126>
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d09d      	beq.n	800ad22 <_strtod_l+0x72>
 800ade6:	2301      	movs	r3, #1
 800ade8:	9309      	str	r3, [sp, #36]	@ 0x24
 800adea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800adec:	930c      	str	r3, [sp, #48]	@ 0x30
 800adee:	2300      	movs	r3, #0
 800adf0:	9308      	str	r3, [sp, #32]
 800adf2:	930a      	str	r3, [sp, #40]	@ 0x28
 800adf4:	461f      	mov	r7, r3
 800adf6:	220a      	movs	r2, #10
 800adf8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800adfa:	7805      	ldrb	r5, [r0, #0]
 800adfc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ae00:	b2d9      	uxtb	r1, r3
 800ae02:	2909      	cmp	r1, #9
 800ae04:	d928      	bls.n	800ae58 <_strtod_l+0x1a8>
 800ae06:	494e      	ldr	r1, [pc, #312]	@ (800af40 <_strtod_l+0x290>)
 800ae08:	2201      	movs	r2, #1
 800ae0a:	f001 fe1e 	bl	800ca4a <strncmp>
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	d032      	beq.n	800ae78 <_strtod_l+0x1c8>
 800ae12:	2000      	movs	r0, #0
 800ae14:	462a      	mov	r2, r5
 800ae16:	4681      	mov	r9, r0
 800ae18:	463d      	mov	r5, r7
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	2a65      	cmp	r2, #101	@ 0x65
 800ae1e:	d001      	beq.n	800ae24 <_strtod_l+0x174>
 800ae20:	2a45      	cmp	r2, #69	@ 0x45
 800ae22:	d114      	bne.n	800ae4e <_strtod_l+0x19e>
 800ae24:	b91d      	cbnz	r5, 800ae2e <_strtod_l+0x17e>
 800ae26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae28:	4302      	orrs	r2, r0
 800ae2a:	d095      	beq.n	800ad58 <_strtod_l+0xa8>
 800ae2c:	2500      	movs	r5, #0
 800ae2e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ae30:	1c62      	adds	r2, r4, #1
 800ae32:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae34:	7862      	ldrb	r2, [r4, #1]
 800ae36:	2a2b      	cmp	r2, #43	@ 0x2b
 800ae38:	d077      	beq.n	800af2a <_strtod_l+0x27a>
 800ae3a:	2a2d      	cmp	r2, #45	@ 0x2d
 800ae3c:	d07b      	beq.n	800af36 <_strtod_l+0x286>
 800ae3e:	f04f 0c00 	mov.w	ip, #0
 800ae42:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ae46:	2909      	cmp	r1, #9
 800ae48:	f240 8082 	bls.w	800af50 <_strtod_l+0x2a0>
 800ae4c:	9419      	str	r4, [sp, #100]	@ 0x64
 800ae4e:	f04f 0800 	mov.w	r8, #0
 800ae52:	e0a2      	b.n	800af9a <_strtod_l+0x2ea>
 800ae54:	2300      	movs	r3, #0
 800ae56:	e7c7      	b.n	800ade8 <_strtod_l+0x138>
 800ae58:	2f08      	cmp	r7, #8
 800ae5a:	bfd5      	itete	le
 800ae5c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ae5e:	9908      	ldrgt	r1, [sp, #32]
 800ae60:	fb02 3301 	mlale	r3, r2, r1, r3
 800ae64:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ae68:	f100 0001 	add.w	r0, r0, #1
 800ae6c:	bfd4      	ite	le
 800ae6e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ae70:	9308      	strgt	r3, [sp, #32]
 800ae72:	3701      	adds	r7, #1
 800ae74:	9019      	str	r0, [sp, #100]	@ 0x64
 800ae76:	e7bf      	b.n	800adf8 <_strtod_l+0x148>
 800ae78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae7a:	1c5a      	adds	r2, r3, #1
 800ae7c:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae7e:	785a      	ldrb	r2, [r3, #1]
 800ae80:	b37f      	cbz	r7, 800aee2 <_strtod_l+0x232>
 800ae82:	4681      	mov	r9, r0
 800ae84:	463d      	mov	r5, r7
 800ae86:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ae8a:	2b09      	cmp	r3, #9
 800ae8c:	d912      	bls.n	800aeb4 <_strtod_l+0x204>
 800ae8e:	2301      	movs	r3, #1
 800ae90:	e7c4      	b.n	800ae1c <_strtod_l+0x16c>
 800ae92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae94:	1c5a      	adds	r2, r3, #1
 800ae96:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae98:	785a      	ldrb	r2, [r3, #1]
 800ae9a:	3001      	adds	r0, #1
 800ae9c:	2a30      	cmp	r2, #48	@ 0x30
 800ae9e:	d0f8      	beq.n	800ae92 <_strtod_l+0x1e2>
 800aea0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800aea4:	2b08      	cmp	r3, #8
 800aea6:	f200 84d3 	bhi.w	800b850 <_strtod_l+0xba0>
 800aeaa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aeac:	930c      	str	r3, [sp, #48]	@ 0x30
 800aeae:	4681      	mov	r9, r0
 800aeb0:	2000      	movs	r0, #0
 800aeb2:	4605      	mov	r5, r0
 800aeb4:	3a30      	subs	r2, #48	@ 0x30
 800aeb6:	f100 0301 	add.w	r3, r0, #1
 800aeba:	d02a      	beq.n	800af12 <_strtod_l+0x262>
 800aebc:	4499      	add	r9, r3
 800aebe:	eb00 0c05 	add.w	ip, r0, r5
 800aec2:	462b      	mov	r3, r5
 800aec4:	210a      	movs	r1, #10
 800aec6:	4563      	cmp	r3, ip
 800aec8:	d10d      	bne.n	800aee6 <_strtod_l+0x236>
 800aeca:	1c69      	adds	r1, r5, #1
 800aecc:	4401      	add	r1, r0
 800aece:	4428      	add	r0, r5
 800aed0:	2808      	cmp	r0, #8
 800aed2:	dc16      	bgt.n	800af02 <_strtod_l+0x252>
 800aed4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aed6:	230a      	movs	r3, #10
 800aed8:	fb03 2300 	mla	r3, r3, r0, r2
 800aedc:	930a      	str	r3, [sp, #40]	@ 0x28
 800aede:	2300      	movs	r3, #0
 800aee0:	e018      	b.n	800af14 <_strtod_l+0x264>
 800aee2:	4638      	mov	r0, r7
 800aee4:	e7da      	b.n	800ae9c <_strtod_l+0x1ec>
 800aee6:	2b08      	cmp	r3, #8
 800aee8:	f103 0301 	add.w	r3, r3, #1
 800aeec:	dc03      	bgt.n	800aef6 <_strtod_l+0x246>
 800aeee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800aef0:	434e      	muls	r6, r1
 800aef2:	960a      	str	r6, [sp, #40]	@ 0x28
 800aef4:	e7e7      	b.n	800aec6 <_strtod_l+0x216>
 800aef6:	2b10      	cmp	r3, #16
 800aef8:	bfde      	ittt	le
 800aefa:	9e08      	ldrle	r6, [sp, #32]
 800aefc:	434e      	mulle	r6, r1
 800aefe:	9608      	strle	r6, [sp, #32]
 800af00:	e7e1      	b.n	800aec6 <_strtod_l+0x216>
 800af02:	280f      	cmp	r0, #15
 800af04:	dceb      	bgt.n	800aede <_strtod_l+0x22e>
 800af06:	9808      	ldr	r0, [sp, #32]
 800af08:	230a      	movs	r3, #10
 800af0a:	fb03 2300 	mla	r3, r3, r0, r2
 800af0e:	9308      	str	r3, [sp, #32]
 800af10:	e7e5      	b.n	800aede <_strtod_l+0x22e>
 800af12:	4629      	mov	r1, r5
 800af14:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800af16:	1c50      	adds	r0, r2, #1
 800af18:	9019      	str	r0, [sp, #100]	@ 0x64
 800af1a:	7852      	ldrb	r2, [r2, #1]
 800af1c:	4618      	mov	r0, r3
 800af1e:	460d      	mov	r5, r1
 800af20:	e7b1      	b.n	800ae86 <_strtod_l+0x1d6>
 800af22:	f04f 0900 	mov.w	r9, #0
 800af26:	2301      	movs	r3, #1
 800af28:	e77d      	b.n	800ae26 <_strtod_l+0x176>
 800af2a:	f04f 0c00 	mov.w	ip, #0
 800af2e:	1ca2      	adds	r2, r4, #2
 800af30:	9219      	str	r2, [sp, #100]	@ 0x64
 800af32:	78a2      	ldrb	r2, [r4, #2]
 800af34:	e785      	b.n	800ae42 <_strtod_l+0x192>
 800af36:	f04f 0c01 	mov.w	ip, #1
 800af3a:	e7f8      	b.n	800af2e <_strtod_l+0x27e>
 800af3c:	08010efc 	.word	0x08010efc
 800af40:	08010ee4 	.word	0x08010ee4
 800af44:	7ff00000 	.word	0x7ff00000
 800af48:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800af4a:	1c51      	adds	r1, r2, #1
 800af4c:	9119      	str	r1, [sp, #100]	@ 0x64
 800af4e:	7852      	ldrb	r2, [r2, #1]
 800af50:	2a30      	cmp	r2, #48	@ 0x30
 800af52:	d0f9      	beq.n	800af48 <_strtod_l+0x298>
 800af54:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800af58:	2908      	cmp	r1, #8
 800af5a:	f63f af78 	bhi.w	800ae4e <_strtod_l+0x19e>
 800af5e:	3a30      	subs	r2, #48	@ 0x30
 800af60:	920e      	str	r2, [sp, #56]	@ 0x38
 800af62:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800af64:	920f      	str	r2, [sp, #60]	@ 0x3c
 800af66:	f04f 080a 	mov.w	r8, #10
 800af6a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800af6c:	1c56      	adds	r6, r2, #1
 800af6e:	9619      	str	r6, [sp, #100]	@ 0x64
 800af70:	7852      	ldrb	r2, [r2, #1]
 800af72:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800af76:	f1be 0f09 	cmp.w	lr, #9
 800af7a:	d939      	bls.n	800aff0 <_strtod_l+0x340>
 800af7c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800af7e:	1a76      	subs	r6, r6, r1
 800af80:	2e08      	cmp	r6, #8
 800af82:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800af86:	dc03      	bgt.n	800af90 <_strtod_l+0x2e0>
 800af88:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800af8a:	4588      	cmp	r8, r1
 800af8c:	bfa8      	it	ge
 800af8e:	4688      	movge	r8, r1
 800af90:	f1bc 0f00 	cmp.w	ip, #0
 800af94:	d001      	beq.n	800af9a <_strtod_l+0x2ea>
 800af96:	f1c8 0800 	rsb	r8, r8, #0
 800af9a:	2d00      	cmp	r5, #0
 800af9c:	d14e      	bne.n	800b03c <_strtod_l+0x38c>
 800af9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800afa0:	4308      	orrs	r0, r1
 800afa2:	f47f aebe 	bne.w	800ad22 <_strtod_l+0x72>
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	f47f aed6 	bne.w	800ad58 <_strtod_l+0xa8>
 800afac:	2a69      	cmp	r2, #105	@ 0x69
 800afae:	d028      	beq.n	800b002 <_strtod_l+0x352>
 800afb0:	dc25      	bgt.n	800affe <_strtod_l+0x34e>
 800afb2:	2a49      	cmp	r2, #73	@ 0x49
 800afb4:	d025      	beq.n	800b002 <_strtod_l+0x352>
 800afb6:	2a4e      	cmp	r2, #78	@ 0x4e
 800afb8:	f47f aece 	bne.w	800ad58 <_strtod_l+0xa8>
 800afbc:	499b      	ldr	r1, [pc, #620]	@ (800b22c <_strtod_l+0x57c>)
 800afbe:	a819      	add	r0, sp, #100	@ 0x64
 800afc0:	f002 ff1e 	bl	800de00 <__match>
 800afc4:	2800      	cmp	r0, #0
 800afc6:	f43f aec7 	beq.w	800ad58 <_strtod_l+0xa8>
 800afca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	2b28      	cmp	r3, #40	@ 0x28
 800afd0:	d12e      	bne.n	800b030 <_strtod_l+0x380>
 800afd2:	4997      	ldr	r1, [pc, #604]	@ (800b230 <_strtod_l+0x580>)
 800afd4:	aa1c      	add	r2, sp, #112	@ 0x70
 800afd6:	a819      	add	r0, sp, #100	@ 0x64
 800afd8:	f002 ff26 	bl	800de28 <__hexnan>
 800afdc:	2805      	cmp	r0, #5
 800afde:	d127      	bne.n	800b030 <_strtod_l+0x380>
 800afe0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800afe2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800afe6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800afea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800afee:	e698      	b.n	800ad22 <_strtod_l+0x72>
 800aff0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800aff2:	fb08 2101 	mla	r1, r8, r1, r2
 800aff6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800affa:	920e      	str	r2, [sp, #56]	@ 0x38
 800affc:	e7b5      	b.n	800af6a <_strtod_l+0x2ba>
 800affe:	2a6e      	cmp	r2, #110	@ 0x6e
 800b000:	e7da      	b.n	800afb8 <_strtod_l+0x308>
 800b002:	498c      	ldr	r1, [pc, #560]	@ (800b234 <_strtod_l+0x584>)
 800b004:	a819      	add	r0, sp, #100	@ 0x64
 800b006:	f002 fefb 	bl	800de00 <__match>
 800b00a:	2800      	cmp	r0, #0
 800b00c:	f43f aea4 	beq.w	800ad58 <_strtod_l+0xa8>
 800b010:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b012:	4989      	ldr	r1, [pc, #548]	@ (800b238 <_strtod_l+0x588>)
 800b014:	3b01      	subs	r3, #1
 800b016:	a819      	add	r0, sp, #100	@ 0x64
 800b018:	9319      	str	r3, [sp, #100]	@ 0x64
 800b01a:	f002 fef1 	bl	800de00 <__match>
 800b01e:	b910      	cbnz	r0, 800b026 <_strtod_l+0x376>
 800b020:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b022:	3301      	adds	r3, #1
 800b024:	9319      	str	r3, [sp, #100]	@ 0x64
 800b026:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b248 <_strtod_l+0x598>
 800b02a:	f04f 0a00 	mov.w	sl, #0
 800b02e:	e678      	b.n	800ad22 <_strtod_l+0x72>
 800b030:	4882      	ldr	r0, [pc, #520]	@ (800b23c <_strtod_l+0x58c>)
 800b032:	f001 fdb5 	bl	800cba0 <nan>
 800b036:	ec5b ab10 	vmov	sl, fp, d0
 800b03a:	e672      	b.n	800ad22 <_strtod_l+0x72>
 800b03c:	eba8 0309 	sub.w	r3, r8, r9
 800b040:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b042:	9309      	str	r3, [sp, #36]	@ 0x24
 800b044:	2f00      	cmp	r7, #0
 800b046:	bf08      	it	eq
 800b048:	462f      	moveq	r7, r5
 800b04a:	2d10      	cmp	r5, #16
 800b04c:	462c      	mov	r4, r5
 800b04e:	bfa8      	it	ge
 800b050:	2410      	movge	r4, #16
 800b052:	f7f5 fa5f 	bl	8000514 <__aeabi_ui2d>
 800b056:	2d09      	cmp	r5, #9
 800b058:	4682      	mov	sl, r0
 800b05a:	468b      	mov	fp, r1
 800b05c:	dc13      	bgt.n	800b086 <_strtod_l+0x3d6>
 800b05e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b060:	2b00      	cmp	r3, #0
 800b062:	f43f ae5e 	beq.w	800ad22 <_strtod_l+0x72>
 800b066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b068:	dd78      	ble.n	800b15c <_strtod_l+0x4ac>
 800b06a:	2b16      	cmp	r3, #22
 800b06c:	dc5f      	bgt.n	800b12e <_strtod_l+0x47e>
 800b06e:	4974      	ldr	r1, [pc, #464]	@ (800b240 <_strtod_l+0x590>)
 800b070:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b074:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b078:	4652      	mov	r2, sl
 800b07a:	465b      	mov	r3, fp
 800b07c:	f7f5 fac4 	bl	8000608 <__aeabi_dmul>
 800b080:	4682      	mov	sl, r0
 800b082:	468b      	mov	fp, r1
 800b084:	e64d      	b.n	800ad22 <_strtod_l+0x72>
 800b086:	4b6e      	ldr	r3, [pc, #440]	@ (800b240 <_strtod_l+0x590>)
 800b088:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b08c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b090:	f7f5 faba 	bl	8000608 <__aeabi_dmul>
 800b094:	4682      	mov	sl, r0
 800b096:	9808      	ldr	r0, [sp, #32]
 800b098:	468b      	mov	fp, r1
 800b09a:	f7f5 fa3b 	bl	8000514 <__aeabi_ui2d>
 800b09e:	4602      	mov	r2, r0
 800b0a0:	460b      	mov	r3, r1
 800b0a2:	4650      	mov	r0, sl
 800b0a4:	4659      	mov	r1, fp
 800b0a6:	f7f5 f8f9 	bl	800029c <__adddf3>
 800b0aa:	2d0f      	cmp	r5, #15
 800b0ac:	4682      	mov	sl, r0
 800b0ae:	468b      	mov	fp, r1
 800b0b0:	ddd5      	ble.n	800b05e <_strtod_l+0x3ae>
 800b0b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0b4:	1b2c      	subs	r4, r5, r4
 800b0b6:	441c      	add	r4, r3
 800b0b8:	2c00      	cmp	r4, #0
 800b0ba:	f340 8096 	ble.w	800b1ea <_strtod_l+0x53a>
 800b0be:	f014 030f 	ands.w	r3, r4, #15
 800b0c2:	d00a      	beq.n	800b0da <_strtod_l+0x42a>
 800b0c4:	495e      	ldr	r1, [pc, #376]	@ (800b240 <_strtod_l+0x590>)
 800b0c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b0ca:	4652      	mov	r2, sl
 800b0cc:	465b      	mov	r3, fp
 800b0ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0d2:	f7f5 fa99 	bl	8000608 <__aeabi_dmul>
 800b0d6:	4682      	mov	sl, r0
 800b0d8:	468b      	mov	fp, r1
 800b0da:	f034 040f 	bics.w	r4, r4, #15
 800b0de:	d073      	beq.n	800b1c8 <_strtod_l+0x518>
 800b0e0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b0e4:	dd48      	ble.n	800b178 <_strtod_l+0x4c8>
 800b0e6:	2400      	movs	r4, #0
 800b0e8:	46a0      	mov	r8, r4
 800b0ea:	940a      	str	r4, [sp, #40]	@ 0x28
 800b0ec:	46a1      	mov	r9, r4
 800b0ee:	9a05      	ldr	r2, [sp, #20]
 800b0f0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b248 <_strtod_l+0x598>
 800b0f4:	2322      	movs	r3, #34	@ 0x22
 800b0f6:	6013      	str	r3, [r2, #0]
 800b0f8:	f04f 0a00 	mov.w	sl, #0
 800b0fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	f43f ae0f 	beq.w	800ad22 <_strtod_l+0x72>
 800b104:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b106:	9805      	ldr	r0, [sp, #20]
 800b108:	f003 f832 	bl	800e170 <_Bfree>
 800b10c:	9805      	ldr	r0, [sp, #20]
 800b10e:	4649      	mov	r1, r9
 800b110:	f003 f82e 	bl	800e170 <_Bfree>
 800b114:	9805      	ldr	r0, [sp, #20]
 800b116:	4641      	mov	r1, r8
 800b118:	f003 f82a 	bl	800e170 <_Bfree>
 800b11c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b11e:	9805      	ldr	r0, [sp, #20]
 800b120:	f003 f826 	bl	800e170 <_Bfree>
 800b124:	9805      	ldr	r0, [sp, #20]
 800b126:	4621      	mov	r1, r4
 800b128:	f003 f822 	bl	800e170 <_Bfree>
 800b12c:	e5f9      	b.n	800ad22 <_strtod_l+0x72>
 800b12e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b130:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b134:	4293      	cmp	r3, r2
 800b136:	dbbc      	blt.n	800b0b2 <_strtod_l+0x402>
 800b138:	4c41      	ldr	r4, [pc, #260]	@ (800b240 <_strtod_l+0x590>)
 800b13a:	f1c5 050f 	rsb	r5, r5, #15
 800b13e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b142:	4652      	mov	r2, sl
 800b144:	465b      	mov	r3, fp
 800b146:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b14a:	f7f5 fa5d 	bl	8000608 <__aeabi_dmul>
 800b14e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b150:	1b5d      	subs	r5, r3, r5
 800b152:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b156:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b15a:	e78f      	b.n	800b07c <_strtod_l+0x3cc>
 800b15c:	3316      	adds	r3, #22
 800b15e:	dba8      	blt.n	800b0b2 <_strtod_l+0x402>
 800b160:	4b37      	ldr	r3, [pc, #220]	@ (800b240 <_strtod_l+0x590>)
 800b162:	eba9 0808 	sub.w	r8, r9, r8
 800b166:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b16a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b16e:	4650      	mov	r0, sl
 800b170:	4659      	mov	r1, fp
 800b172:	f7f5 fb73 	bl	800085c <__aeabi_ddiv>
 800b176:	e783      	b.n	800b080 <_strtod_l+0x3d0>
 800b178:	4b32      	ldr	r3, [pc, #200]	@ (800b244 <_strtod_l+0x594>)
 800b17a:	9308      	str	r3, [sp, #32]
 800b17c:	2300      	movs	r3, #0
 800b17e:	1124      	asrs	r4, r4, #4
 800b180:	4650      	mov	r0, sl
 800b182:	4659      	mov	r1, fp
 800b184:	461e      	mov	r6, r3
 800b186:	2c01      	cmp	r4, #1
 800b188:	dc21      	bgt.n	800b1ce <_strtod_l+0x51e>
 800b18a:	b10b      	cbz	r3, 800b190 <_strtod_l+0x4e0>
 800b18c:	4682      	mov	sl, r0
 800b18e:	468b      	mov	fp, r1
 800b190:	492c      	ldr	r1, [pc, #176]	@ (800b244 <_strtod_l+0x594>)
 800b192:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b196:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b19a:	4652      	mov	r2, sl
 800b19c:	465b      	mov	r3, fp
 800b19e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1a2:	f7f5 fa31 	bl	8000608 <__aeabi_dmul>
 800b1a6:	4b28      	ldr	r3, [pc, #160]	@ (800b248 <_strtod_l+0x598>)
 800b1a8:	460a      	mov	r2, r1
 800b1aa:	400b      	ands	r3, r1
 800b1ac:	4927      	ldr	r1, [pc, #156]	@ (800b24c <_strtod_l+0x59c>)
 800b1ae:	428b      	cmp	r3, r1
 800b1b0:	4682      	mov	sl, r0
 800b1b2:	d898      	bhi.n	800b0e6 <_strtod_l+0x436>
 800b1b4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b1b8:	428b      	cmp	r3, r1
 800b1ba:	bf86      	itte	hi
 800b1bc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b250 <_strtod_l+0x5a0>
 800b1c0:	f04f 3aff 	movhi.w	sl, #4294967295
 800b1c4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	9308      	str	r3, [sp, #32]
 800b1cc:	e07a      	b.n	800b2c4 <_strtod_l+0x614>
 800b1ce:	07e2      	lsls	r2, r4, #31
 800b1d0:	d505      	bpl.n	800b1de <_strtod_l+0x52e>
 800b1d2:	9b08      	ldr	r3, [sp, #32]
 800b1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d8:	f7f5 fa16 	bl	8000608 <__aeabi_dmul>
 800b1dc:	2301      	movs	r3, #1
 800b1de:	9a08      	ldr	r2, [sp, #32]
 800b1e0:	3208      	adds	r2, #8
 800b1e2:	3601      	adds	r6, #1
 800b1e4:	1064      	asrs	r4, r4, #1
 800b1e6:	9208      	str	r2, [sp, #32]
 800b1e8:	e7cd      	b.n	800b186 <_strtod_l+0x4d6>
 800b1ea:	d0ed      	beq.n	800b1c8 <_strtod_l+0x518>
 800b1ec:	4264      	negs	r4, r4
 800b1ee:	f014 020f 	ands.w	r2, r4, #15
 800b1f2:	d00a      	beq.n	800b20a <_strtod_l+0x55a>
 800b1f4:	4b12      	ldr	r3, [pc, #72]	@ (800b240 <_strtod_l+0x590>)
 800b1f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1fa:	4650      	mov	r0, sl
 800b1fc:	4659      	mov	r1, fp
 800b1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b202:	f7f5 fb2b 	bl	800085c <__aeabi_ddiv>
 800b206:	4682      	mov	sl, r0
 800b208:	468b      	mov	fp, r1
 800b20a:	1124      	asrs	r4, r4, #4
 800b20c:	d0dc      	beq.n	800b1c8 <_strtod_l+0x518>
 800b20e:	2c1f      	cmp	r4, #31
 800b210:	dd20      	ble.n	800b254 <_strtod_l+0x5a4>
 800b212:	2400      	movs	r4, #0
 800b214:	46a0      	mov	r8, r4
 800b216:	940a      	str	r4, [sp, #40]	@ 0x28
 800b218:	46a1      	mov	r9, r4
 800b21a:	9a05      	ldr	r2, [sp, #20]
 800b21c:	2322      	movs	r3, #34	@ 0x22
 800b21e:	f04f 0a00 	mov.w	sl, #0
 800b222:	f04f 0b00 	mov.w	fp, #0
 800b226:	6013      	str	r3, [r2, #0]
 800b228:	e768      	b.n	800b0fc <_strtod_l+0x44c>
 800b22a:	bf00      	nop
 800b22c:	08010f45 	.word	0x08010f45
 800b230:	08010ee8 	.word	0x08010ee8
 800b234:	08010f3d 	.word	0x08010f3d
 800b238:	08010f7a 	.word	0x08010f7a
 800b23c:	08011328 	.word	0x08011328
 800b240:	080110f8 	.word	0x080110f8
 800b244:	080110d0 	.word	0x080110d0
 800b248:	7ff00000 	.word	0x7ff00000
 800b24c:	7ca00000 	.word	0x7ca00000
 800b250:	7fefffff 	.word	0x7fefffff
 800b254:	f014 0310 	ands.w	r3, r4, #16
 800b258:	bf18      	it	ne
 800b25a:	236a      	movne	r3, #106	@ 0x6a
 800b25c:	4ea9      	ldr	r6, [pc, #676]	@ (800b504 <_strtod_l+0x854>)
 800b25e:	9308      	str	r3, [sp, #32]
 800b260:	4650      	mov	r0, sl
 800b262:	4659      	mov	r1, fp
 800b264:	2300      	movs	r3, #0
 800b266:	07e2      	lsls	r2, r4, #31
 800b268:	d504      	bpl.n	800b274 <_strtod_l+0x5c4>
 800b26a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b26e:	f7f5 f9cb 	bl	8000608 <__aeabi_dmul>
 800b272:	2301      	movs	r3, #1
 800b274:	1064      	asrs	r4, r4, #1
 800b276:	f106 0608 	add.w	r6, r6, #8
 800b27a:	d1f4      	bne.n	800b266 <_strtod_l+0x5b6>
 800b27c:	b10b      	cbz	r3, 800b282 <_strtod_l+0x5d2>
 800b27e:	4682      	mov	sl, r0
 800b280:	468b      	mov	fp, r1
 800b282:	9b08      	ldr	r3, [sp, #32]
 800b284:	b1b3      	cbz	r3, 800b2b4 <_strtod_l+0x604>
 800b286:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b28a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b28e:	2b00      	cmp	r3, #0
 800b290:	4659      	mov	r1, fp
 800b292:	dd0f      	ble.n	800b2b4 <_strtod_l+0x604>
 800b294:	2b1f      	cmp	r3, #31
 800b296:	dd55      	ble.n	800b344 <_strtod_l+0x694>
 800b298:	2b34      	cmp	r3, #52	@ 0x34
 800b29a:	bfde      	ittt	le
 800b29c:	f04f 33ff 	movle.w	r3, #4294967295
 800b2a0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b2a4:	4093      	lslle	r3, r2
 800b2a6:	f04f 0a00 	mov.w	sl, #0
 800b2aa:	bfcc      	ite	gt
 800b2ac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b2b0:	ea03 0b01 	andle.w	fp, r3, r1
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	4650      	mov	r0, sl
 800b2ba:	4659      	mov	r1, fp
 800b2bc:	f7f5 fc0c 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	d1a6      	bne.n	800b212 <_strtod_l+0x562>
 800b2c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2c6:	9300      	str	r3, [sp, #0]
 800b2c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b2ca:	9805      	ldr	r0, [sp, #20]
 800b2cc:	462b      	mov	r3, r5
 800b2ce:	463a      	mov	r2, r7
 800b2d0:	f002 ffb6 	bl	800e240 <__s2b>
 800b2d4:	900a      	str	r0, [sp, #40]	@ 0x28
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	f43f af05 	beq.w	800b0e6 <_strtod_l+0x436>
 800b2dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2de:	2a00      	cmp	r2, #0
 800b2e0:	eba9 0308 	sub.w	r3, r9, r8
 800b2e4:	bfa8      	it	ge
 800b2e6:	2300      	movge	r3, #0
 800b2e8:	9312      	str	r3, [sp, #72]	@ 0x48
 800b2ea:	2400      	movs	r4, #0
 800b2ec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b2f0:	9316      	str	r3, [sp, #88]	@ 0x58
 800b2f2:	46a0      	mov	r8, r4
 800b2f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2f6:	9805      	ldr	r0, [sp, #20]
 800b2f8:	6859      	ldr	r1, [r3, #4]
 800b2fa:	f002 fef9 	bl	800e0f0 <_Balloc>
 800b2fe:	4681      	mov	r9, r0
 800b300:	2800      	cmp	r0, #0
 800b302:	f43f aef4 	beq.w	800b0ee <_strtod_l+0x43e>
 800b306:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b308:	691a      	ldr	r2, [r3, #16]
 800b30a:	3202      	adds	r2, #2
 800b30c:	f103 010c 	add.w	r1, r3, #12
 800b310:	0092      	lsls	r2, r2, #2
 800b312:	300c      	adds	r0, #12
 800b314:	f001 fc35 	bl	800cb82 <memcpy>
 800b318:	ec4b ab10 	vmov	d0, sl, fp
 800b31c:	9805      	ldr	r0, [sp, #20]
 800b31e:	aa1c      	add	r2, sp, #112	@ 0x70
 800b320:	a91b      	add	r1, sp, #108	@ 0x6c
 800b322:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b326:	f003 fac7 	bl	800e8b8 <__d2b>
 800b32a:	901a      	str	r0, [sp, #104]	@ 0x68
 800b32c:	2800      	cmp	r0, #0
 800b32e:	f43f aede 	beq.w	800b0ee <_strtod_l+0x43e>
 800b332:	9805      	ldr	r0, [sp, #20]
 800b334:	2101      	movs	r1, #1
 800b336:	f003 f819 	bl	800e36c <__i2b>
 800b33a:	4680      	mov	r8, r0
 800b33c:	b948      	cbnz	r0, 800b352 <_strtod_l+0x6a2>
 800b33e:	f04f 0800 	mov.w	r8, #0
 800b342:	e6d4      	b.n	800b0ee <_strtod_l+0x43e>
 800b344:	f04f 32ff 	mov.w	r2, #4294967295
 800b348:	fa02 f303 	lsl.w	r3, r2, r3
 800b34c:	ea03 0a0a 	and.w	sl, r3, sl
 800b350:	e7b0      	b.n	800b2b4 <_strtod_l+0x604>
 800b352:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b354:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b356:	2d00      	cmp	r5, #0
 800b358:	bfab      	itete	ge
 800b35a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b35c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b35e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b360:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b362:	bfac      	ite	ge
 800b364:	18ef      	addge	r7, r5, r3
 800b366:	1b5e      	sublt	r6, r3, r5
 800b368:	9b08      	ldr	r3, [sp, #32]
 800b36a:	1aed      	subs	r5, r5, r3
 800b36c:	4415      	add	r5, r2
 800b36e:	4b66      	ldr	r3, [pc, #408]	@ (800b508 <_strtod_l+0x858>)
 800b370:	3d01      	subs	r5, #1
 800b372:	429d      	cmp	r5, r3
 800b374:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b378:	da50      	bge.n	800b41c <_strtod_l+0x76c>
 800b37a:	1b5b      	subs	r3, r3, r5
 800b37c:	2b1f      	cmp	r3, #31
 800b37e:	eba2 0203 	sub.w	r2, r2, r3
 800b382:	f04f 0101 	mov.w	r1, #1
 800b386:	dc3d      	bgt.n	800b404 <_strtod_l+0x754>
 800b388:	fa01 f303 	lsl.w	r3, r1, r3
 800b38c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b38e:	2300      	movs	r3, #0
 800b390:	9310      	str	r3, [sp, #64]	@ 0x40
 800b392:	18bd      	adds	r5, r7, r2
 800b394:	9b08      	ldr	r3, [sp, #32]
 800b396:	42af      	cmp	r7, r5
 800b398:	4416      	add	r6, r2
 800b39a:	441e      	add	r6, r3
 800b39c:	463b      	mov	r3, r7
 800b39e:	bfa8      	it	ge
 800b3a0:	462b      	movge	r3, r5
 800b3a2:	42b3      	cmp	r3, r6
 800b3a4:	bfa8      	it	ge
 800b3a6:	4633      	movge	r3, r6
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	bfc2      	ittt	gt
 800b3ac:	1aed      	subgt	r5, r5, r3
 800b3ae:	1af6      	subgt	r6, r6, r3
 800b3b0:	1aff      	subgt	r7, r7, r3
 800b3b2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	dd16      	ble.n	800b3e6 <_strtod_l+0x736>
 800b3b8:	4641      	mov	r1, r8
 800b3ba:	9805      	ldr	r0, [sp, #20]
 800b3bc:	461a      	mov	r2, r3
 800b3be:	f003 f895 	bl	800e4ec <__pow5mult>
 800b3c2:	4680      	mov	r8, r0
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	d0ba      	beq.n	800b33e <_strtod_l+0x68e>
 800b3c8:	4601      	mov	r1, r0
 800b3ca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b3cc:	9805      	ldr	r0, [sp, #20]
 800b3ce:	f002 ffe3 	bl	800e398 <__multiply>
 800b3d2:	900e      	str	r0, [sp, #56]	@ 0x38
 800b3d4:	2800      	cmp	r0, #0
 800b3d6:	f43f ae8a 	beq.w	800b0ee <_strtod_l+0x43e>
 800b3da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b3dc:	9805      	ldr	r0, [sp, #20]
 800b3de:	f002 fec7 	bl	800e170 <_Bfree>
 800b3e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3e4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b3e6:	2d00      	cmp	r5, #0
 800b3e8:	dc1d      	bgt.n	800b426 <_strtod_l+0x776>
 800b3ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	dd23      	ble.n	800b438 <_strtod_l+0x788>
 800b3f0:	4649      	mov	r1, r9
 800b3f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b3f4:	9805      	ldr	r0, [sp, #20]
 800b3f6:	f003 f879 	bl	800e4ec <__pow5mult>
 800b3fa:	4681      	mov	r9, r0
 800b3fc:	b9e0      	cbnz	r0, 800b438 <_strtod_l+0x788>
 800b3fe:	f04f 0900 	mov.w	r9, #0
 800b402:	e674      	b.n	800b0ee <_strtod_l+0x43e>
 800b404:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b408:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b40c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b410:	35e2      	adds	r5, #226	@ 0xe2
 800b412:	fa01 f305 	lsl.w	r3, r1, r5
 800b416:	9310      	str	r3, [sp, #64]	@ 0x40
 800b418:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b41a:	e7ba      	b.n	800b392 <_strtod_l+0x6e2>
 800b41c:	2300      	movs	r3, #0
 800b41e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b420:	2301      	movs	r3, #1
 800b422:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b424:	e7b5      	b.n	800b392 <_strtod_l+0x6e2>
 800b426:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b428:	9805      	ldr	r0, [sp, #20]
 800b42a:	462a      	mov	r2, r5
 800b42c:	f003 f8b8 	bl	800e5a0 <__lshift>
 800b430:	901a      	str	r0, [sp, #104]	@ 0x68
 800b432:	2800      	cmp	r0, #0
 800b434:	d1d9      	bne.n	800b3ea <_strtod_l+0x73a>
 800b436:	e65a      	b.n	800b0ee <_strtod_l+0x43e>
 800b438:	2e00      	cmp	r6, #0
 800b43a:	dd07      	ble.n	800b44c <_strtod_l+0x79c>
 800b43c:	4649      	mov	r1, r9
 800b43e:	9805      	ldr	r0, [sp, #20]
 800b440:	4632      	mov	r2, r6
 800b442:	f003 f8ad 	bl	800e5a0 <__lshift>
 800b446:	4681      	mov	r9, r0
 800b448:	2800      	cmp	r0, #0
 800b44a:	d0d8      	beq.n	800b3fe <_strtod_l+0x74e>
 800b44c:	2f00      	cmp	r7, #0
 800b44e:	dd08      	ble.n	800b462 <_strtod_l+0x7b2>
 800b450:	4641      	mov	r1, r8
 800b452:	9805      	ldr	r0, [sp, #20]
 800b454:	463a      	mov	r2, r7
 800b456:	f003 f8a3 	bl	800e5a0 <__lshift>
 800b45a:	4680      	mov	r8, r0
 800b45c:	2800      	cmp	r0, #0
 800b45e:	f43f ae46 	beq.w	800b0ee <_strtod_l+0x43e>
 800b462:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b464:	9805      	ldr	r0, [sp, #20]
 800b466:	464a      	mov	r2, r9
 800b468:	f003 f922 	bl	800e6b0 <__mdiff>
 800b46c:	4604      	mov	r4, r0
 800b46e:	2800      	cmp	r0, #0
 800b470:	f43f ae3d 	beq.w	800b0ee <_strtod_l+0x43e>
 800b474:	68c3      	ldr	r3, [r0, #12]
 800b476:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b478:	2300      	movs	r3, #0
 800b47a:	60c3      	str	r3, [r0, #12]
 800b47c:	4641      	mov	r1, r8
 800b47e:	f003 f8fb 	bl	800e678 <__mcmp>
 800b482:	2800      	cmp	r0, #0
 800b484:	da46      	bge.n	800b514 <_strtod_l+0x864>
 800b486:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b488:	ea53 030a 	orrs.w	r3, r3, sl
 800b48c:	d16c      	bne.n	800b568 <_strtod_l+0x8b8>
 800b48e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b492:	2b00      	cmp	r3, #0
 800b494:	d168      	bne.n	800b568 <_strtod_l+0x8b8>
 800b496:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b49a:	0d1b      	lsrs	r3, r3, #20
 800b49c:	051b      	lsls	r3, r3, #20
 800b49e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b4a2:	d961      	bls.n	800b568 <_strtod_l+0x8b8>
 800b4a4:	6963      	ldr	r3, [r4, #20]
 800b4a6:	b913      	cbnz	r3, 800b4ae <_strtod_l+0x7fe>
 800b4a8:	6923      	ldr	r3, [r4, #16]
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	dd5c      	ble.n	800b568 <_strtod_l+0x8b8>
 800b4ae:	4621      	mov	r1, r4
 800b4b0:	2201      	movs	r2, #1
 800b4b2:	9805      	ldr	r0, [sp, #20]
 800b4b4:	f003 f874 	bl	800e5a0 <__lshift>
 800b4b8:	4641      	mov	r1, r8
 800b4ba:	4604      	mov	r4, r0
 800b4bc:	f003 f8dc 	bl	800e678 <__mcmp>
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	dd51      	ble.n	800b568 <_strtod_l+0x8b8>
 800b4c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b4c8:	9a08      	ldr	r2, [sp, #32]
 800b4ca:	0d1b      	lsrs	r3, r3, #20
 800b4cc:	051b      	lsls	r3, r3, #20
 800b4ce:	2a00      	cmp	r2, #0
 800b4d0:	d06b      	beq.n	800b5aa <_strtod_l+0x8fa>
 800b4d2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b4d6:	d868      	bhi.n	800b5aa <_strtod_l+0x8fa>
 800b4d8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b4dc:	f67f ae9d 	bls.w	800b21a <_strtod_l+0x56a>
 800b4e0:	4b0a      	ldr	r3, [pc, #40]	@ (800b50c <_strtod_l+0x85c>)
 800b4e2:	4650      	mov	r0, sl
 800b4e4:	4659      	mov	r1, fp
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f7f5 f88e 	bl	8000608 <__aeabi_dmul>
 800b4ec:	4b08      	ldr	r3, [pc, #32]	@ (800b510 <_strtod_l+0x860>)
 800b4ee:	400b      	ands	r3, r1
 800b4f0:	4682      	mov	sl, r0
 800b4f2:	468b      	mov	fp, r1
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	f47f ae05 	bne.w	800b104 <_strtod_l+0x454>
 800b4fa:	9a05      	ldr	r2, [sp, #20]
 800b4fc:	2322      	movs	r3, #34	@ 0x22
 800b4fe:	6013      	str	r3, [r2, #0]
 800b500:	e600      	b.n	800b104 <_strtod_l+0x454>
 800b502:	bf00      	nop
 800b504:	08010f10 	.word	0x08010f10
 800b508:	fffffc02 	.word	0xfffffc02
 800b50c:	39500000 	.word	0x39500000
 800b510:	7ff00000 	.word	0x7ff00000
 800b514:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b518:	d165      	bne.n	800b5e6 <_strtod_l+0x936>
 800b51a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b51c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b520:	b35a      	cbz	r2, 800b57a <_strtod_l+0x8ca>
 800b522:	4a9f      	ldr	r2, [pc, #636]	@ (800b7a0 <_strtod_l+0xaf0>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d12b      	bne.n	800b580 <_strtod_l+0x8d0>
 800b528:	9b08      	ldr	r3, [sp, #32]
 800b52a:	4651      	mov	r1, sl
 800b52c:	b303      	cbz	r3, 800b570 <_strtod_l+0x8c0>
 800b52e:	4b9d      	ldr	r3, [pc, #628]	@ (800b7a4 <_strtod_l+0xaf4>)
 800b530:	465a      	mov	r2, fp
 800b532:	4013      	ands	r3, r2
 800b534:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b538:	f04f 32ff 	mov.w	r2, #4294967295
 800b53c:	d81b      	bhi.n	800b576 <_strtod_l+0x8c6>
 800b53e:	0d1b      	lsrs	r3, r3, #20
 800b540:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b544:	fa02 f303 	lsl.w	r3, r2, r3
 800b548:	4299      	cmp	r1, r3
 800b54a:	d119      	bne.n	800b580 <_strtod_l+0x8d0>
 800b54c:	4b96      	ldr	r3, [pc, #600]	@ (800b7a8 <_strtod_l+0xaf8>)
 800b54e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b550:	429a      	cmp	r2, r3
 800b552:	d102      	bne.n	800b55a <_strtod_l+0x8aa>
 800b554:	3101      	adds	r1, #1
 800b556:	f43f adca 	beq.w	800b0ee <_strtod_l+0x43e>
 800b55a:	4b92      	ldr	r3, [pc, #584]	@ (800b7a4 <_strtod_l+0xaf4>)
 800b55c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b55e:	401a      	ands	r2, r3
 800b560:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b564:	f04f 0a00 	mov.w	sl, #0
 800b568:	9b08      	ldr	r3, [sp, #32]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d1b8      	bne.n	800b4e0 <_strtod_l+0x830>
 800b56e:	e5c9      	b.n	800b104 <_strtod_l+0x454>
 800b570:	f04f 33ff 	mov.w	r3, #4294967295
 800b574:	e7e8      	b.n	800b548 <_strtod_l+0x898>
 800b576:	4613      	mov	r3, r2
 800b578:	e7e6      	b.n	800b548 <_strtod_l+0x898>
 800b57a:	ea53 030a 	orrs.w	r3, r3, sl
 800b57e:	d0a1      	beq.n	800b4c4 <_strtod_l+0x814>
 800b580:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b582:	b1db      	cbz	r3, 800b5bc <_strtod_l+0x90c>
 800b584:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b586:	4213      	tst	r3, r2
 800b588:	d0ee      	beq.n	800b568 <_strtod_l+0x8b8>
 800b58a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b58c:	9a08      	ldr	r2, [sp, #32]
 800b58e:	4650      	mov	r0, sl
 800b590:	4659      	mov	r1, fp
 800b592:	b1bb      	cbz	r3, 800b5c4 <_strtod_l+0x914>
 800b594:	f7ff fb6c 	bl	800ac70 <sulp>
 800b598:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b59c:	ec53 2b10 	vmov	r2, r3, d0
 800b5a0:	f7f4 fe7c 	bl	800029c <__adddf3>
 800b5a4:	4682      	mov	sl, r0
 800b5a6:	468b      	mov	fp, r1
 800b5a8:	e7de      	b.n	800b568 <_strtod_l+0x8b8>
 800b5aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b5ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b5b2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b5b6:	f04f 3aff 	mov.w	sl, #4294967295
 800b5ba:	e7d5      	b.n	800b568 <_strtod_l+0x8b8>
 800b5bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b5be:	ea13 0f0a 	tst.w	r3, sl
 800b5c2:	e7e1      	b.n	800b588 <_strtod_l+0x8d8>
 800b5c4:	f7ff fb54 	bl	800ac70 <sulp>
 800b5c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b5cc:	ec53 2b10 	vmov	r2, r3, d0
 800b5d0:	f7f4 fe62 	bl	8000298 <__aeabi_dsub>
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	4682      	mov	sl, r0
 800b5da:	468b      	mov	fp, r1
 800b5dc:	f7f5 fa7c 	bl	8000ad8 <__aeabi_dcmpeq>
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	d0c1      	beq.n	800b568 <_strtod_l+0x8b8>
 800b5e4:	e619      	b.n	800b21a <_strtod_l+0x56a>
 800b5e6:	4641      	mov	r1, r8
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	f003 f9bd 	bl	800e968 <__ratio>
 800b5ee:	ec57 6b10 	vmov	r6, r7, d0
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b5f8:	4630      	mov	r0, r6
 800b5fa:	4639      	mov	r1, r7
 800b5fc:	f7f5 fa80 	bl	8000b00 <__aeabi_dcmple>
 800b600:	2800      	cmp	r0, #0
 800b602:	d06f      	beq.n	800b6e4 <_strtod_l+0xa34>
 800b604:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b606:	2b00      	cmp	r3, #0
 800b608:	d17a      	bne.n	800b700 <_strtod_l+0xa50>
 800b60a:	f1ba 0f00 	cmp.w	sl, #0
 800b60e:	d158      	bne.n	800b6c2 <_strtod_l+0xa12>
 800b610:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b612:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b616:	2b00      	cmp	r3, #0
 800b618:	d15a      	bne.n	800b6d0 <_strtod_l+0xa20>
 800b61a:	4b64      	ldr	r3, [pc, #400]	@ (800b7ac <_strtod_l+0xafc>)
 800b61c:	2200      	movs	r2, #0
 800b61e:	4630      	mov	r0, r6
 800b620:	4639      	mov	r1, r7
 800b622:	f7f5 fa63 	bl	8000aec <__aeabi_dcmplt>
 800b626:	2800      	cmp	r0, #0
 800b628:	d159      	bne.n	800b6de <_strtod_l+0xa2e>
 800b62a:	4630      	mov	r0, r6
 800b62c:	4639      	mov	r1, r7
 800b62e:	4b60      	ldr	r3, [pc, #384]	@ (800b7b0 <_strtod_l+0xb00>)
 800b630:	2200      	movs	r2, #0
 800b632:	f7f4 ffe9 	bl	8000608 <__aeabi_dmul>
 800b636:	4606      	mov	r6, r0
 800b638:	460f      	mov	r7, r1
 800b63a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b63e:	9606      	str	r6, [sp, #24]
 800b640:	9307      	str	r3, [sp, #28]
 800b642:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b646:	4d57      	ldr	r5, [pc, #348]	@ (800b7a4 <_strtod_l+0xaf4>)
 800b648:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b64c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b64e:	401d      	ands	r5, r3
 800b650:	4b58      	ldr	r3, [pc, #352]	@ (800b7b4 <_strtod_l+0xb04>)
 800b652:	429d      	cmp	r5, r3
 800b654:	f040 80b2 	bne.w	800b7bc <_strtod_l+0xb0c>
 800b658:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b65a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b65e:	ec4b ab10 	vmov	d0, sl, fp
 800b662:	f003 f8b9 	bl	800e7d8 <__ulp>
 800b666:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b66a:	ec51 0b10 	vmov	r0, r1, d0
 800b66e:	f7f4 ffcb 	bl	8000608 <__aeabi_dmul>
 800b672:	4652      	mov	r2, sl
 800b674:	465b      	mov	r3, fp
 800b676:	f7f4 fe11 	bl	800029c <__adddf3>
 800b67a:	460b      	mov	r3, r1
 800b67c:	4949      	ldr	r1, [pc, #292]	@ (800b7a4 <_strtod_l+0xaf4>)
 800b67e:	4a4e      	ldr	r2, [pc, #312]	@ (800b7b8 <_strtod_l+0xb08>)
 800b680:	4019      	ands	r1, r3
 800b682:	4291      	cmp	r1, r2
 800b684:	4682      	mov	sl, r0
 800b686:	d942      	bls.n	800b70e <_strtod_l+0xa5e>
 800b688:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b68a:	4b47      	ldr	r3, [pc, #284]	@ (800b7a8 <_strtod_l+0xaf8>)
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d103      	bne.n	800b698 <_strtod_l+0x9e8>
 800b690:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b692:	3301      	adds	r3, #1
 800b694:	f43f ad2b 	beq.w	800b0ee <_strtod_l+0x43e>
 800b698:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b7a8 <_strtod_l+0xaf8>
 800b69c:	f04f 3aff 	mov.w	sl, #4294967295
 800b6a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b6a2:	9805      	ldr	r0, [sp, #20]
 800b6a4:	f002 fd64 	bl	800e170 <_Bfree>
 800b6a8:	9805      	ldr	r0, [sp, #20]
 800b6aa:	4649      	mov	r1, r9
 800b6ac:	f002 fd60 	bl	800e170 <_Bfree>
 800b6b0:	9805      	ldr	r0, [sp, #20]
 800b6b2:	4641      	mov	r1, r8
 800b6b4:	f002 fd5c 	bl	800e170 <_Bfree>
 800b6b8:	9805      	ldr	r0, [sp, #20]
 800b6ba:	4621      	mov	r1, r4
 800b6bc:	f002 fd58 	bl	800e170 <_Bfree>
 800b6c0:	e618      	b.n	800b2f4 <_strtod_l+0x644>
 800b6c2:	f1ba 0f01 	cmp.w	sl, #1
 800b6c6:	d103      	bne.n	800b6d0 <_strtod_l+0xa20>
 800b6c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	f43f ada5 	beq.w	800b21a <_strtod_l+0x56a>
 800b6d0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b780 <_strtod_l+0xad0>
 800b6d4:	4f35      	ldr	r7, [pc, #212]	@ (800b7ac <_strtod_l+0xafc>)
 800b6d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b6da:	2600      	movs	r6, #0
 800b6dc:	e7b1      	b.n	800b642 <_strtod_l+0x992>
 800b6de:	4f34      	ldr	r7, [pc, #208]	@ (800b7b0 <_strtod_l+0xb00>)
 800b6e0:	2600      	movs	r6, #0
 800b6e2:	e7aa      	b.n	800b63a <_strtod_l+0x98a>
 800b6e4:	4b32      	ldr	r3, [pc, #200]	@ (800b7b0 <_strtod_l+0xb00>)
 800b6e6:	4630      	mov	r0, r6
 800b6e8:	4639      	mov	r1, r7
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f7f4 ff8c 	bl	8000608 <__aeabi_dmul>
 800b6f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6f2:	4606      	mov	r6, r0
 800b6f4:	460f      	mov	r7, r1
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d09f      	beq.n	800b63a <_strtod_l+0x98a>
 800b6fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b6fe:	e7a0      	b.n	800b642 <_strtod_l+0x992>
 800b700:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b788 <_strtod_l+0xad8>
 800b704:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b708:	ec57 6b17 	vmov	r6, r7, d7
 800b70c:	e799      	b.n	800b642 <_strtod_l+0x992>
 800b70e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b712:	9b08      	ldr	r3, [sp, #32]
 800b714:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d1c1      	bne.n	800b6a0 <_strtod_l+0x9f0>
 800b71c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b720:	0d1b      	lsrs	r3, r3, #20
 800b722:	051b      	lsls	r3, r3, #20
 800b724:	429d      	cmp	r5, r3
 800b726:	d1bb      	bne.n	800b6a0 <_strtod_l+0x9f0>
 800b728:	4630      	mov	r0, r6
 800b72a:	4639      	mov	r1, r7
 800b72c:	f7f5 facc 	bl	8000cc8 <__aeabi_d2lz>
 800b730:	f7f4 ff3c 	bl	80005ac <__aeabi_l2d>
 800b734:	4602      	mov	r2, r0
 800b736:	460b      	mov	r3, r1
 800b738:	4630      	mov	r0, r6
 800b73a:	4639      	mov	r1, r7
 800b73c:	f7f4 fdac 	bl	8000298 <__aeabi_dsub>
 800b740:	460b      	mov	r3, r1
 800b742:	4602      	mov	r2, r0
 800b744:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b748:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b74c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b74e:	ea46 060a 	orr.w	r6, r6, sl
 800b752:	431e      	orrs	r6, r3
 800b754:	d06f      	beq.n	800b836 <_strtod_l+0xb86>
 800b756:	a30e      	add	r3, pc, #56	@ (adr r3, 800b790 <_strtod_l+0xae0>)
 800b758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75c:	f7f5 f9c6 	bl	8000aec <__aeabi_dcmplt>
 800b760:	2800      	cmp	r0, #0
 800b762:	f47f accf 	bne.w	800b104 <_strtod_l+0x454>
 800b766:	a30c      	add	r3, pc, #48	@ (adr r3, 800b798 <_strtod_l+0xae8>)
 800b768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b770:	f7f5 f9da 	bl	8000b28 <__aeabi_dcmpgt>
 800b774:	2800      	cmp	r0, #0
 800b776:	d093      	beq.n	800b6a0 <_strtod_l+0x9f0>
 800b778:	e4c4      	b.n	800b104 <_strtod_l+0x454>
 800b77a:	bf00      	nop
 800b77c:	f3af 8000 	nop.w
 800b780:	00000000 	.word	0x00000000
 800b784:	bff00000 	.word	0xbff00000
 800b788:	00000000 	.word	0x00000000
 800b78c:	3ff00000 	.word	0x3ff00000
 800b790:	94a03595 	.word	0x94a03595
 800b794:	3fdfffff 	.word	0x3fdfffff
 800b798:	35afe535 	.word	0x35afe535
 800b79c:	3fe00000 	.word	0x3fe00000
 800b7a0:	000fffff 	.word	0x000fffff
 800b7a4:	7ff00000 	.word	0x7ff00000
 800b7a8:	7fefffff 	.word	0x7fefffff
 800b7ac:	3ff00000 	.word	0x3ff00000
 800b7b0:	3fe00000 	.word	0x3fe00000
 800b7b4:	7fe00000 	.word	0x7fe00000
 800b7b8:	7c9fffff 	.word	0x7c9fffff
 800b7bc:	9b08      	ldr	r3, [sp, #32]
 800b7be:	b323      	cbz	r3, 800b80a <_strtod_l+0xb5a>
 800b7c0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b7c4:	d821      	bhi.n	800b80a <_strtod_l+0xb5a>
 800b7c6:	a328      	add	r3, pc, #160	@ (adr r3, 800b868 <_strtod_l+0xbb8>)
 800b7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7cc:	4630      	mov	r0, r6
 800b7ce:	4639      	mov	r1, r7
 800b7d0:	f7f5 f996 	bl	8000b00 <__aeabi_dcmple>
 800b7d4:	b1a0      	cbz	r0, 800b800 <_strtod_l+0xb50>
 800b7d6:	4639      	mov	r1, r7
 800b7d8:	4630      	mov	r0, r6
 800b7da:	f7f5 f9ed 	bl	8000bb8 <__aeabi_d2uiz>
 800b7de:	2801      	cmp	r0, #1
 800b7e0:	bf38      	it	cc
 800b7e2:	2001      	movcc	r0, #1
 800b7e4:	f7f4 fe96 	bl	8000514 <__aeabi_ui2d>
 800b7e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7ea:	4606      	mov	r6, r0
 800b7ec:	460f      	mov	r7, r1
 800b7ee:	b9fb      	cbnz	r3, 800b830 <_strtod_l+0xb80>
 800b7f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b7f4:	9014      	str	r0, [sp, #80]	@ 0x50
 800b7f6:	9315      	str	r3, [sp, #84]	@ 0x54
 800b7f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b7fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b800:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b802:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b806:	1b5b      	subs	r3, r3, r5
 800b808:	9311      	str	r3, [sp, #68]	@ 0x44
 800b80a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b80e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b812:	f002 ffe1 	bl	800e7d8 <__ulp>
 800b816:	4650      	mov	r0, sl
 800b818:	ec53 2b10 	vmov	r2, r3, d0
 800b81c:	4659      	mov	r1, fp
 800b81e:	f7f4 fef3 	bl	8000608 <__aeabi_dmul>
 800b822:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b826:	f7f4 fd39 	bl	800029c <__adddf3>
 800b82a:	4682      	mov	sl, r0
 800b82c:	468b      	mov	fp, r1
 800b82e:	e770      	b.n	800b712 <_strtod_l+0xa62>
 800b830:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b834:	e7e0      	b.n	800b7f8 <_strtod_l+0xb48>
 800b836:	a30e      	add	r3, pc, #56	@ (adr r3, 800b870 <_strtod_l+0xbc0>)
 800b838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83c:	f7f5 f956 	bl	8000aec <__aeabi_dcmplt>
 800b840:	e798      	b.n	800b774 <_strtod_l+0xac4>
 800b842:	2300      	movs	r3, #0
 800b844:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b846:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b848:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b84a:	6013      	str	r3, [r2, #0]
 800b84c:	f7ff ba6d 	b.w	800ad2a <_strtod_l+0x7a>
 800b850:	2a65      	cmp	r2, #101	@ 0x65
 800b852:	f43f ab66 	beq.w	800af22 <_strtod_l+0x272>
 800b856:	2a45      	cmp	r2, #69	@ 0x45
 800b858:	f43f ab63 	beq.w	800af22 <_strtod_l+0x272>
 800b85c:	2301      	movs	r3, #1
 800b85e:	f7ff bb9e 	b.w	800af9e <_strtod_l+0x2ee>
 800b862:	bf00      	nop
 800b864:	f3af 8000 	nop.w
 800b868:	ffc00000 	.word	0xffc00000
 800b86c:	41dfffff 	.word	0x41dfffff
 800b870:	94a03595 	.word	0x94a03595
 800b874:	3fcfffff 	.word	0x3fcfffff

0800b878 <_strtod_r>:
 800b878:	4b01      	ldr	r3, [pc, #4]	@ (800b880 <_strtod_r+0x8>)
 800b87a:	f7ff ba19 	b.w	800acb0 <_strtod_l>
 800b87e:	bf00      	nop
 800b880:	20000028 	.word	0x20000028

0800b884 <strtod>:
 800b884:	460a      	mov	r2, r1
 800b886:	4601      	mov	r1, r0
 800b888:	4802      	ldr	r0, [pc, #8]	@ (800b894 <strtod+0x10>)
 800b88a:	4b03      	ldr	r3, [pc, #12]	@ (800b898 <strtod+0x14>)
 800b88c:	6800      	ldr	r0, [r0, #0]
 800b88e:	f7ff ba0f 	b.w	800acb0 <_strtod_l>
 800b892:	bf00      	nop
 800b894:	20000194 	.word	0x20000194
 800b898:	20000028 	.word	0x20000028

0800b89c <__cvt>:
 800b89c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8a0:	ec57 6b10 	vmov	r6, r7, d0
 800b8a4:	2f00      	cmp	r7, #0
 800b8a6:	460c      	mov	r4, r1
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	463b      	mov	r3, r7
 800b8ac:	bfbb      	ittet	lt
 800b8ae:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b8b2:	461f      	movlt	r7, r3
 800b8b4:	2300      	movge	r3, #0
 800b8b6:	232d      	movlt	r3, #45	@ 0x2d
 800b8b8:	700b      	strb	r3, [r1, #0]
 800b8ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b8bc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b8c0:	4691      	mov	r9, r2
 800b8c2:	f023 0820 	bic.w	r8, r3, #32
 800b8c6:	bfbc      	itt	lt
 800b8c8:	4632      	movlt	r2, r6
 800b8ca:	4616      	movlt	r6, r2
 800b8cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b8d0:	d005      	beq.n	800b8de <__cvt+0x42>
 800b8d2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b8d6:	d100      	bne.n	800b8da <__cvt+0x3e>
 800b8d8:	3401      	adds	r4, #1
 800b8da:	2102      	movs	r1, #2
 800b8dc:	e000      	b.n	800b8e0 <__cvt+0x44>
 800b8de:	2103      	movs	r1, #3
 800b8e0:	ab03      	add	r3, sp, #12
 800b8e2:	9301      	str	r3, [sp, #4]
 800b8e4:	ab02      	add	r3, sp, #8
 800b8e6:	9300      	str	r3, [sp, #0]
 800b8e8:	ec47 6b10 	vmov	d0, r6, r7
 800b8ec:	4653      	mov	r3, sl
 800b8ee:	4622      	mov	r2, r4
 800b8f0:	f001 f9ee 	bl	800ccd0 <_dtoa_r>
 800b8f4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b8f8:	4605      	mov	r5, r0
 800b8fa:	d119      	bne.n	800b930 <__cvt+0x94>
 800b8fc:	f019 0f01 	tst.w	r9, #1
 800b900:	d00e      	beq.n	800b920 <__cvt+0x84>
 800b902:	eb00 0904 	add.w	r9, r0, r4
 800b906:	2200      	movs	r2, #0
 800b908:	2300      	movs	r3, #0
 800b90a:	4630      	mov	r0, r6
 800b90c:	4639      	mov	r1, r7
 800b90e:	f7f5 f8e3 	bl	8000ad8 <__aeabi_dcmpeq>
 800b912:	b108      	cbz	r0, 800b918 <__cvt+0x7c>
 800b914:	f8cd 900c 	str.w	r9, [sp, #12]
 800b918:	2230      	movs	r2, #48	@ 0x30
 800b91a:	9b03      	ldr	r3, [sp, #12]
 800b91c:	454b      	cmp	r3, r9
 800b91e:	d31e      	bcc.n	800b95e <__cvt+0xc2>
 800b920:	9b03      	ldr	r3, [sp, #12]
 800b922:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b924:	1b5b      	subs	r3, r3, r5
 800b926:	4628      	mov	r0, r5
 800b928:	6013      	str	r3, [r2, #0]
 800b92a:	b004      	add	sp, #16
 800b92c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b930:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b934:	eb00 0904 	add.w	r9, r0, r4
 800b938:	d1e5      	bne.n	800b906 <__cvt+0x6a>
 800b93a:	7803      	ldrb	r3, [r0, #0]
 800b93c:	2b30      	cmp	r3, #48	@ 0x30
 800b93e:	d10a      	bne.n	800b956 <__cvt+0xba>
 800b940:	2200      	movs	r2, #0
 800b942:	2300      	movs	r3, #0
 800b944:	4630      	mov	r0, r6
 800b946:	4639      	mov	r1, r7
 800b948:	f7f5 f8c6 	bl	8000ad8 <__aeabi_dcmpeq>
 800b94c:	b918      	cbnz	r0, 800b956 <__cvt+0xba>
 800b94e:	f1c4 0401 	rsb	r4, r4, #1
 800b952:	f8ca 4000 	str.w	r4, [sl]
 800b956:	f8da 3000 	ldr.w	r3, [sl]
 800b95a:	4499      	add	r9, r3
 800b95c:	e7d3      	b.n	800b906 <__cvt+0x6a>
 800b95e:	1c59      	adds	r1, r3, #1
 800b960:	9103      	str	r1, [sp, #12]
 800b962:	701a      	strb	r2, [r3, #0]
 800b964:	e7d9      	b.n	800b91a <__cvt+0x7e>

0800b966 <__exponent>:
 800b966:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b968:	2900      	cmp	r1, #0
 800b96a:	bfba      	itte	lt
 800b96c:	4249      	neglt	r1, r1
 800b96e:	232d      	movlt	r3, #45	@ 0x2d
 800b970:	232b      	movge	r3, #43	@ 0x2b
 800b972:	2909      	cmp	r1, #9
 800b974:	7002      	strb	r2, [r0, #0]
 800b976:	7043      	strb	r3, [r0, #1]
 800b978:	dd29      	ble.n	800b9ce <__exponent+0x68>
 800b97a:	f10d 0307 	add.w	r3, sp, #7
 800b97e:	461d      	mov	r5, r3
 800b980:	270a      	movs	r7, #10
 800b982:	461a      	mov	r2, r3
 800b984:	fbb1 f6f7 	udiv	r6, r1, r7
 800b988:	fb07 1416 	mls	r4, r7, r6, r1
 800b98c:	3430      	adds	r4, #48	@ 0x30
 800b98e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b992:	460c      	mov	r4, r1
 800b994:	2c63      	cmp	r4, #99	@ 0x63
 800b996:	f103 33ff 	add.w	r3, r3, #4294967295
 800b99a:	4631      	mov	r1, r6
 800b99c:	dcf1      	bgt.n	800b982 <__exponent+0x1c>
 800b99e:	3130      	adds	r1, #48	@ 0x30
 800b9a0:	1e94      	subs	r4, r2, #2
 800b9a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b9a6:	1c41      	adds	r1, r0, #1
 800b9a8:	4623      	mov	r3, r4
 800b9aa:	42ab      	cmp	r3, r5
 800b9ac:	d30a      	bcc.n	800b9c4 <__exponent+0x5e>
 800b9ae:	f10d 0309 	add.w	r3, sp, #9
 800b9b2:	1a9b      	subs	r3, r3, r2
 800b9b4:	42ac      	cmp	r4, r5
 800b9b6:	bf88      	it	hi
 800b9b8:	2300      	movhi	r3, #0
 800b9ba:	3302      	adds	r3, #2
 800b9bc:	4403      	add	r3, r0
 800b9be:	1a18      	subs	r0, r3, r0
 800b9c0:	b003      	add	sp, #12
 800b9c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9c4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b9c8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b9cc:	e7ed      	b.n	800b9aa <__exponent+0x44>
 800b9ce:	2330      	movs	r3, #48	@ 0x30
 800b9d0:	3130      	adds	r1, #48	@ 0x30
 800b9d2:	7083      	strb	r3, [r0, #2]
 800b9d4:	70c1      	strb	r1, [r0, #3]
 800b9d6:	1d03      	adds	r3, r0, #4
 800b9d8:	e7f1      	b.n	800b9be <__exponent+0x58>
	...

0800b9dc <_printf_float>:
 800b9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e0:	b08d      	sub	sp, #52	@ 0x34
 800b9e2:	460c      	mov	r4, r1
 800b9e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b9e8:	4616      	mov	r6, r2
 800b9ea:	461f      	mov	r7, r3
 800b9ec:	4605      	mov	r5, r0
 800b9ee:	f001 f851 	bl	800ca94 <_localeconv_r>
 800b9f2:	6803      	ldr	r3, [r0, #0]
 800b9f4:	9304      	str	r3, [sp, #16]
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7f4 fc42 	bl	8000280 <strlen>
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba00:	f8d8 3000 	ldr.w	r3, [r8]
 800ba04:	9005      	str	r0, [sp, #20]
 800ba06:	3307      	adds	r3, #7
 800ba08:	f023 0307 	bic.w	r3, r3, #7
 800ba0c:	f103 0208 	add.w	r2, r3, #8
 800ba10:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ba14:	f8d4 b000 	ldr.w	fp, [r4]
 800ba18:	f8c8 2000 	str.w	r2, [r8]
 800ba1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba20:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ba24:	9307      	str	r3, [sp, #28]
 800ba26:	f8cd 8018 	str.w	r8, [sp, #24]
 800ba2a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ba2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba32:	4b9c      	ldr	r3, [pc, #624]	@ (800bca4 <_printf_float+0x2c8>)
 800ba34:	f04f 32ff 	mov.w	r2, #4294967295
 800ba38:	f7f5 f880 	bl	8000b3c <__aeabi_dcmpun>
 800ba3c:	bb70      	cbnz	r0, 800ba9c <_printf_float+0xc0>
 800ba3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba42:	4b98      	ldr	r3, [pc, #608]	@ (800bca4 <_printf_float+0x2c8>)
 800ba44:	f04f 32ff 	mov.w	r2, #4294967295
 800ba48:	f7f5 f85a 	bl	8000b00 <__aeabi_dcmple>
 800ba4c:	bb30      	cbnz	r0, 800ba9c <_printf_float+0xc0>
 800ba4e:	2200      	movs	r2, #0
 800ba50:	2300      	movs	r3, #0
 800ba52:	4640      	mov	r0, r8
 800ba54:	4649      	mov	r1, r9
 800ba56:	f7f5 f849 	bl	8000aec <__aeabi_dcmplt>
 800ba5a:	b110      	cbz	r0, 800ba62 <_printf_float+0x86>
 800ba5c:	232d      	movs	r3, #45	@ 0x2d
 800ba5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba62:	4a91      	ldr	r2, [pc, #580]	@ (800bca8 <_printf_float+0x2cc>)
 800ba64:	4b91      	ldr	r3, [pc, #580]	@ (800bcac <_printf_float+0x2d0>)
 800ba66:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ba6a:	bf94      	ite	ls
 800ba6c:	4690      	movls	r8, r2
 800ba6e:	4698      	movhi	r8, r3
 800ba70:	2303      	movs	r3, #3
 800ba72:	6123      	str	r3, [r4, #16]
 800ba74:	f02b 0304 	bic.w	r3, fp, #4
 800ba78:	6023      	str	r3, [r4, #0]
 800ba7a:	f04f 0900 	mov.w	r9, #0
 800ba7e:	9700      	str	r7, [sp, #0]
 800ba80:	4633      	mov	r3, r6
 800ba82:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ba84:	4621      	mov	r1, r4
 800ba86:	4628      	mov	r0, r5
 800ba88:	f000 f9d2 	bl	800be30 <_printf_common>
 800ba8c:	3001      	adds	r0, #1
 800ba8e:	f040 808d 	bne.w	800bbac <_printf_float+0x1d0>
 800ba92:	f04f 30ff 	mov.w	r0, #4294967295
 800ba96:	b00d      	add	sp, #52	@ 0x34
 800ba98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba9c:	4642      	mov	r2, r8
 800ba9e:	464b      	mov	r3, r9
 800baa0:	4640      	mov	r0, r8
 800baa2:	4649      	mov	r1, r9
 800baa4:	f7f5 f84a 	bl	8000b3c <__aeabi_dcmpun>
 800baa8:	b140      	cbz	r0, 800babc <_printf_float+0xe0>
 800baaa:	464b      	mov	r3, r9
 800baac:	2b00      	cmp	r3, #0
 800baae:	bfbc      	itt	lt
 800bab0:	232d      	movlt	r3, #45	@ 0x2d
 800bab2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bab6:	4a7e      	ldr	r2, [pc, #504]	@ (800bcb0 <_printf_float+0x2d4>)
 800bab8:	4b7e      	ldr	r3, [pc, #504]	@ (800bcb4 <_printf_float+0x2d8>)
 800baba:	e7d4      	b.n	800ba66 <_printf_float+0x8a>
 800babc:	6863      	ldr	r3, [r4, #4]
 800babe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bac2:	9206      	str	r2, [sp, #24]
 800bac4:	1c5a      	adds	r2, r3, #1
 800bac6:	d13b      	bne.n	800bb40 <_printf_float+0x164>
 800bac8:	2306      	movs	r3, #6
 800baca:	6063      	str	r3, [r4, #4]
 800bacc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bad0:	2300      	movs	r3, #0
 800bad2:	6022      	str	r2, [r4, #0]
 800bad4:	9303      	str	r3, [sp, #12]
 800bad6:	ab0a      	add	r3, sp, #40	@ 0x28
 800bad8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800badc:	ab09      	add	r3, sp, #36	@ 0x24
 800bade:	9300      	str	r3, [sp, #0]
 800bae0:	6861      	ldr	r1, [r4, #4]
 800bae2:	ec49 8b10 	vmov	d0, r8, r9
 800bae6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800baea:	4628      	mov	r0, r5
 800baec:	f7ff fed6 	bl	800b89c <__cvt>
 800baf0:	9b06      	ldr	r3, [sp, #24]
 800baf2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800baf4:	2b47      	cmp	r3, #71	@ 0x47
 800baf6:	4680      	mov	r8, r0
 800baf8:	d129      	bne.n	800bb4e <_printf_float+0x172>
 800bafa:	1cc8      	adds	r0, r1, #3
 800bafc:	db02      	blt.n	800bb04 <_printf_float+0x128>
 800bafe:	6863      	ldr	r3, [r4, #4]
 800bb00:	4299      	cmp	r1, r3
 800bb02:	dd41      	ble.n	800bb88 <_printf_float+0x1ac>
 800bb04:	f1aa 0a02 	sub.w	sl, sl, #2
 800bb08:	fa5f fa8a 	uxtb.w	sl, sl
 800bb0c:	3901      	subs	r1, #1
 800bb0e:	4652      	mov	r2, sl
 800bb10:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bb14:	9109      	str	r1, [sp, #36]	@ 0x24
 800bb16:	f7ff ff26 	bl	800b966 <__exponent>
 800bb1a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb1c:	1813      	adds	r3, r2, r0
 800bb1e:	2a01      	cmp	r2, #1
 800bb20:	4681      	mov	r9, r0
 800bb22:	6123      	str	r3, [r4, #16]
 800bb24:	dc02      	bgt.n	800bb2c <_printf_float+0x150>
 800bb26:	6822      	ldr	r2, [r4, #0]
 800bb28:	07d2      	lsls	r2, r2, #31
 800bb2a:	d501      	bpl.n	800bb30 <_printf_float+0x154>
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	6123      	str	r3, [r4, #16]
 800bb30:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d0a2      	beq.n	800ba7e <_printf_float+0xa2>
 800bb38:	232d      	movs	r3, #45	@ 0x2d
 800bb3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb3e:	e79e      	b.n	800ba7e <_printf_float+0xa2>
 800bb40:	9a06      	ldr	r2, [sp, #24]
 800bb42:	2a47      	cmp	r2, #71	@ 0x47
 800bb44:	d1c2      	bne.n	800bacc <_printf_float+0xf0>
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d1c0      	bne.n	800bacc <_printf_float+0xf0>
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e7bd      	b.n	800baca <_printf_float+0xee>
 800bb4e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bb52:	d9db      	bls.n	800bb0c <_printf_float+0x130>
 800bb54:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bb58:	d118      	bne.n	800bb8c <_printf_float+0x1b0>
 800bb5a:	2900      	cmp	r1, #0
 800bb5c:	6863      	ldr	r3, [r4, #4]
 800bb5e:	dd0b      	ble.n	800bb78 <_printf_float+0x19c>
 800bb60:	6121      	str	r1, [r4, #16]
 800bb62:	b913      	cbnz	r3, 800bb6a <_printf_float+0x18e>
 800bb64:	6822      	ldr	r2, [r4, #0]
 800bb66:	07d0      	lsls	r0, r2, #31
 800bb68:	d502      	bpl.n	800bb70 <_printf_float+0x194>
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	440b      	add	r3, r1
 800bb6e:	6123      	str	r3, [r4, #16]
 800bb70:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bb72:	f04f 0900 	mov.w	r9, #0
 800bb76:	e7db      	b.n	800bb30 <_printf_float+0x154>
 800bb78:	b913      	cbnz	r3, 800bb80 <_printf_float+0x1a4>
 800bb7a:	6822      	ldr	r2, [r4, #0]
 800bb7c:	07d2      	lsls	r2, r2, #31
 800bb7e:	d501      	bpl.n	800bb84 <_printf_float+0x1a8>
 800bb80:	3302      	adds	r3, #2
 800bb82:	e7f4      	b.n	800bb6e <_printf_float+0x192>
 800bb84:	2301      	movs	r3, #1
 800bb86:	e7f2      	b.n	800bb6e <_printf_float+0x192>
 800bb88:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bb8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb8e:	4299      	cmp	r1, r3
 800bb90:	db05      	blt.n	800bb9e <_printf_float+0x1c2>
 800bb92:	6823      	ldr	r3, [r4, #0]
 800bb94:	6121      	str	r1, [r4, #16]
 800bb96:	07d8      	lsls	r0, r3, #31
 800bb98:	d5ea      	bpl.n	800bb70 <_printf_float+0x194>
 800bb9a:	1c4b      	adds	r3, r1, #1
 800bb9c:	e7e7      	b.n	800bb6e <_printf_float+0x192>
 800bb9e:	2900      	cmp	r1, #0
 800bba0:	bfd4      	ite	le
 800bba2:	f1c1 0202 	rsble	r2, r1, #2
 800bba6:	2201      	movgt	r2, #1
 800bba8:	4413      	add	r3, r2
 800bbaa:	e7e0      	b.n	800bb6e <_printf_float+0x192>
 800bbac:	6823      	ldr	r3, [r4, #0]
 800bbae:	055a      	lsls	r2, r3, #21
 800bbb0:	d407      	bmi.n	800bbc2 <_printf_float+0x1e6>
 800bbb2:	6923      	ldr	r3, [r4, #16]
 800bbb4:	4642      	mov	r2, r8
 800bbb6:	4631      	mov	r1, r6
 800bbb8:	4628      	mov	r0, r5
 800bbba:	47b8      	blx	r7
 800bbbc:	3001      	adds	r0, #1
 800bbbe:	d12b      	bne.n	800bc18 <_printf_float+0x23c>
 800bbc0:	e767      	b.n	800ba92 <_printf_float+0xb6>
 800bbc2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bbc6:	f240 80dd 	bls.w	800bd84 <_printf_float+0x3a8>
 800bbca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bbce:	2200      	movs	r2, #0
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	f7f4 ff81 	bl	8000ad8 <__aeabi_dcmpeq>
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	d033      	beq.n	800bc42 <_printf_float+0x266>
 800bbda:	4a37      	ldr	r2, [pc, #220]	@ (800bcb8 <_printf_float+0x2dc>)
 800bbdc:	2301      	movs	r3, #1
 800bbde:	4631      	mov	r1, r6
 800bbe0:	4628      	mov	r0, r5
 800bbe2:	47b8      	blx	r7
 800bbe4:	3001      	adds	r0, #1
 800bbe6:	f43f af54 	beq.w	800ba92 <_printf_float+0xb6>
 800bbea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bbee:	4543      	cmp	r3, r8
 800bbf0:	db02      	blt.n	800bbf8 <_printf_float+0x21c>
 800bbf2:	6823      	ldr	r3, [r4, #0]
 800bbf4:	07d8      	lsls	r0, r3, #31
 800bbf6:	d50f      	bpl.n	800bc18 <_printf_float+0x23c>
 800bbf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbfc:	4631      	mov	r1, r6
 800bbfe:	4628      	mov	r0, r5
 800bc00:	47b8      	blx	r7
 800bc02:	3001      	adds	r0, #1
 800bc04:	f43f af45 	beq.w	800ba92 <_printf_float+0xb6>
 800bc08:	f04f 0900 	mov.w	r9, #0
 800bc0c:	f108 38ff 	add.w	r8, r8, #4294967295
 800bc10:	f104 0a1a 	add.w	sl, r4, #26
 800bc14:	45c8      	cmp	r8, r9
 800bc16:	dc09      	bgt.n	800bc2c <_printf_float+0x250>
 800bc18:	6823      	ldr	r3, [r4, #0]
 800bc1a:	079b      	lsls	r3, r3, #30
 800bc1c:	f100 8103 	bmi.w	800be26 <_printf_float+0x44a>
 800bc20:	68e0      	ldr	r0, [r4, #12]
 800bc22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc24:	4298      	cmp	r0, r3
 800bc26:	bfb8      	it	lt
 800bc28:	4618      	movlt	r0, r3
 800bc2a:	e734      	b.n	800ba96 <_printf_float+0xba>
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	4652      	mov	r2, sl
 800bc30:	4631      	mov	r1, r6
 800bc32:	4628      	mov	r0, r5
 800bc34:	47b8      	blx	r7
 800bc36:	3001      	adds	r0, #1
 800bc38:	f43f af2b 	beq.w	800ba92 <_printf_float+0xb6>
 800bc3c:	f109 0901 	add.w	r9, r9, #1
 800bc40:	e7e8      	b.n	800bc14 <_printf_float+0x238>
 800bc42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	dc39      	bgt.n	800bcbc <_printf_float+0x2e0>
 800bc48:	4a1b      	ldr	r2, [pc, #108]	@ (800bcb8 <_printf_float+0x2dc>)
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	4631      	mov	r1, r6
 800bc4e:	4628      	mov	r0, r5
 800bc50:	47b8      	blx	r7
 800bc52:	3001      	adds	r0, #1
 800bc54:	f43f af1d 	beq.w	800ba92 <_printf_float+0xb6>
 800bc58:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bc5c:	ea59 0303 	orrs.w	r3, r9, r3
 800bc60:	d102      	bne.n	800bc68 <_printf_float+0x28c>
 800bc62:	6823      	ldr	r3, [r4, #0]
 800bc64:	07d9      	lsls	r1, r3, #31
 800bc66:	d5d7      	bpl.n	800bc18 <_printf_float+0x23c>
 800bc68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc6c:	4631      	mov	r1, r6
 800bc6e:	4628      	mov	r0, r5
 800bc70:	47b8      	blx	r7
 800bc72:	3001      	adds	r0, #1
 800bc74:	f43f af0d 	beq.w	800ba92 <_printf_float+0xb6>
 800bc78:	f04f 0a00 	mov.w	sl, #0
 800bc7c:	f104 0b1a 	add.w	fp, r4, #26
 800bc80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc82:	425b      	negs	r3, r3
 800bc84:	4553      	cmp	r3, sl
 800bc86:	dc01      	bgt.n	800bc8c <_printf_float+0x2b0>
 800bc88:	464b      	mov	r3, r9
 800bc8a:	e793      	b.n	800bbb4 <_printf_float+0x1d8>
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	465a      	mov	r2, fp
 800bc90:	4631      	mov	r1, r6
 800bc92:	4628      	mov	r0, r5
 800bc94:	47b8      	blx	r7
 800bc96:	3001      	adds	r0, #1
 800bc98:	f43f aefb 	beq.w	800ba92 <_printf_float+0xb6>
 800bc9c:	f10a 0a01 	add.w	sl, sl, #1
 800bca0:	e7ee      	b.n	800bc80 <_printf_float+0x2a4>
 800bca2:	bf00      	nop
 800bca4:	7fefffff 	.word	0x7fefffff
 800bca8:	08010f38 	.word	0x08010f38
 800bcac:	08010f3c 	.word	0x08010f3c
 800bcb0:	08010f40 	.word	0x08010f40
 800bcb4:	08010f44 	.word	0x08010f44
 800bcb8:	080112e8 	.word	0x080112e8
 800bcbc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bcbe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bcc2:	4553      	cmp	r3, sl
 800bcc4:	bfa8      	it	ge
 800bcc6:	4653      	movge	r3, sl
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	4699      	mov	r9, r3
 800bccc:	dc36      	bgt.n	800bd3c <_printf_float+0x360>
 800bcce:	f04f 0b00 	mov.w	fp, #0
 800bcd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bcd6:	f104 021a 	add.w	r2, r4, #26
 800bcda:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bcdc:	9306      	str	r3, [sp, #24]
 800bcde:	eba3 0309 	sub.w	r3, r3, r9
 800bce2:	455b      	cmp	r3, fp
 800bce4:	dc31      	bgt.n	800bd4a <_printf_float+0x36e>
 800bce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bce8:	459a      	cmp	sl, r3
 800bcea:	dc3a      	bgt.n	800bd62 <_printf_float+0x386>
 800bcec:	6823      	ldr	r3, [r4, #0]
 800bcee:	07da      	lsls	r2, r3, #31
 800bcf0:	d437      	bmi.n	800bd62 <_printf_float+0x386>
 800bcf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcf4:	ebaa 0903 	sub.w	r9, sl, r3
 800bcf8:	9b06      	ldr	r3, [sp, #24]
 800bcfa:	ebaa 0303 	sub.w	r3, sl, r3
 800bcfe:	4599      	cmp	r9, r3
 800bd00:	bfa8      	it	ge
 800bd02:	4699      	movge	r9, r3
 800bd04:	f1b9 0f00 	cmp.w	r9, #0
 800bd08:	dc33      	bgt.n	800bd72 <_printf_float+0x396>
 800bd0a:	f04f 0800 	mov.w	r8, #0
 800bd0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd12:	f104 0b1a 	add.w	fp, r4, #26
 800bd16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd18:	ebaa 0303 	sub.w	r3, sl, r3
 800bd1c:	eba3 0309 	sub.w	r3, r3, r9
 800bd20:	4543      	cmp	r3, r8
 800bd22:	f77f af79 	ble.w	800bc18 <_printf_float+0x23c>
 800bd26:	2301      	movs	r3, #1
 800bd28:	465a      	mov	r2, fp
 800bd2a:	4631      	mov	r1, r6
 800bd2c:	4628      	mov	r0, r5
 800bd2e:	47b8      	blx	r7
 800bd30:	3001      	adds	r0, #1
 800bd32:	f43f aeae 	beq.w	800ba92 <_printf_float+0xb6>
 800bd36:	f108 0801 	add.w	r8, r8, #1
 800bd3a:	e7ec      	b.n	800bd16 <_printf_float+0x33a>
 800bd3c:	4642      	mov	r2, r8
 800bd3e:	4631      	mov	r1, r6
 800bd40:	4628      	mov	r0, r5
 800bd42:	47b8      	blx	r7
 800bd44:	3001      	adds	r0, #1
 800bd46:	d1c2      	bne.n	800bcce <_printf_float+0x2f2>
 800bd48:	e6a3      	b.n	800ba92 <_printf_float+0xb6>
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	4631      	mov	r1, r6
 800bd4e:	4628      	mov	r0, r5
 800bd50:	9206      	str	r2, [sp, #24]
 800bd52:	47b8      	blx	r7
 800bd54:	3001      	adds	r0, #1
 800bd56:	f43f ae9c 	beq.w	800ba92 <_printf_float+0xb6>
 800bd5a:	9a06      	ldr	r2, [sp, #24]
 800bd5c:	f10b 0b01 	add.w	fp, fp, #1
 800bd60:	e7bb      	b.n	800bcda <_printf_float+0x2fe>
 800bd62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd66:	4631      	mov	r1, r6
 800bd68:	4628      	mov	r0, r5
 800bd6a:	47b8      	blx	r7
 800bd6c:	3001      	adds	r0, #1
 800bd6e:	d1c0      	bne.n	800bcf2 <_printf_float+0x316>
 800bd70:	e68f      	b.n	800ba92 <_printf_float+0xb6>
 800bd72:	9a06      	ldr	r2, [sp, #24]
 800bd74:	464b      	mov	r3, r9
 800bd76:	4442      	add	r2, r8
 800bd78:	4631      	mov	r1, r6
 800bd7a:	4628      	mov	r0, r5
 800bd7c:	47b8      	blx	r7
 800bd7e:	3001      	adds	r0, #1
 800bd80:	d1c3      	bne.n	800bd0a <_printf_float+0x32e>
 800bd82:	e686      	b.n	800ba92 <_printf_float+0xb6>
 800bd84:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bd88:	f1ba 0f01 	cmp.w	sl, #1
 800bd8c:	dc01      	bgt.n	800bd92 <_printf_float+0x3b6>
 800bd8e:	07db      	lsls	r3, r3, #31
 800bd90:	d536      	bpl.n	800be00 <_printf_float+0x424>
 800bd92:	2301      	movs	r3, #1
 800bd94:	4642      	mov	r2, r8
 800bd96:	4631      	mov	r1, r6
 800bd98:	4628      	mov	r0, r5
 800bd9a:	47b8      	blx	r7
 800bd9c:	3001      	adds	r0, #1
 800bd9e:	f43f ae78 	beq.w	800ba92 <_printf_float+0xb6>
 800bda2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bda6:	4631      	mov	r1, r6
 800bda8:	4628      	mov	r0, r5
 800bdaa:	47b8      	blx	r7
 800bdac:	3001      	adds	r0, #1
 800bdae:	f43f ae70 	beq.w	800ba92 <_printf_float+0xb6>
 800bdb2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	2300      	movs	r3, #0
 800bdba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bdbe:	f7f4 fe8b 	bl	8000ad8 <__aeabi_dcmpeq>
 800bdc2:	b9c0      	cbnz	r0, 800bdf6 <_printf_float+0x41a>
 800bdc4:	4653      	mov	r3, sl
 800bdc6:	f108 0201 	add.w	r2, r8, #1
 800bdca:	4631      	mov	r1, r6
 800bdcc:	4628      	mov	r0, r5
 800bdce:	47b8      	blx	r7
 800bdd0:	3001      	adds	r0, #1
 800bdd2:	d10c      	bne.n	800bdee <_printf_float+0x412>
 800bdd4:	e65d      	b.n	800ba92 <_printf_float+0xb6>
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	465a      	mov	r2, fp
 800bdda:	4631      	mov	r1, r6
 800bddc:	4628      	mov	r0, r5
 800bdde:	47b8      	blx	r7
 800bde0:	3001      	adds	r0, #1
 800bde2:	f43f ae56 	beq.w	800ba92 <_printf_float+0xb6>
 800bde6:	f108 0801 	add.w	r8, r8, #1
 800bdea:	45d0      	cmp	r8, sl
 800bdec:	dbf3      	blt.n	800bdd6 <_printf_float+0x3fa>
 800bdee:	464b      	mov	r3, r9
 800bdf0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bdf4:	e6df      	b.n	800bbb6 <_printf_float+0x1da>
 800bdf6:	f04f 0800 	mov.w	r8, #0
 800bdfa:	f104 0b1a 	add.w	fp, r4, #26
 800bdfe:	e7f4      	b.n	800bdea <_printf_float+0x40e>
 800be00:	2301      	movs	r3, #1
 800be02:	4642      	mov	r2, r8
 800be04:	e7e1      	b.n	800bdca <_printf_float+0x3ee>
 800be06:	2301      	movs	r3, #1
 800be08:	464a      	mov	r2, r9
 800be0a:	4631      	mov	r1, r6
 800be0c:	4628      	mov	r0, r5
 800be0e:	47b8      	blx	r7
 800be10:	3001      	adds	r0, #1
 800be12:	f43f ae3e 	beq.w	800ba92 <_printf_float+0xb6>
 800be16:	f108 0801 	add.w	r8, r8, #1
 800be1a:	68e3      	ldr	r3, [r4, #12]
 800be1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800be1e:	1a5b      	subs	r3, r3, r1
 800be20:	4543      	cmp	r3, r8
 800be22:	dcf0      	bgt.n	800be06 <_printf_float+0x42a>
 800be24:	e6fc      	b.n	800bc20 <_printf_float+0x244>
 800be26:	f04f 0800 	mov.w	r8, #0
 800be2a:	f104 0919 	add.w	r9, r4, #25
 800be2e:	e7f4      	b.n	800be1a <_printf_float+0x43e>

0800be30 <_printf_common>:
 800be30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be34:	4616      	mov	r6, r2
 800be36:	4698      	mov	r8, r3
 800be38:	688a      	ldr	r2, [r1, #8]
 800be3a:	690b      	ldr	r3, [r1, #16]
 800be3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800be40:	4293      	cmp	r3, r2
 800be42:	bfb8      	it	lt
 800be44:	4613      	movlt	r3, r2
 800be46:	6033      	str	r3, [r6, #0]
 800be48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800be4c:	4607      	mov	r7, r0
 800be4e:	460c      	mov	r4, r1
 800be50:	b10a      	cbz	r2, 800be56 <_printf_common+0x26>
 800be52:	3301      	adds	r3, #1
 800be54:	6033      	str	r3, [r6, #0]
 800be56:	6823      	ldr	r3, [r4, #0]
 800be58:	0699      	lsls	r1, r3, #26
 800be5a:	bf42      	ittt	mi
 800be5c:	6833      	ldrmi	r3, [r6, #0]
 800be5e:	3302      	addmi	r3, #2
 800be60:	6033      	strmi	r3, [r6, #0]
 800be62:	6825      	ldr	r5, [r4, #0]
 800be64:	f015 0506 	ands.w	r5, r5, #6
 800be68:	d106      	bne.n	800be78 <_printf_common+0x48>
 800be6a:	f104 0a19 	add.w	sl, r4, #25
 800be6e:	68e3      	ldr	r3, [r4, #12]
 800be70:	6832      	ldr	r2, [r6, #0]
 800be72:	1a9b      	subs	r3, r3, r2
 800be74:	42ab      	cmp	r3, r5
 800be76:	dc26      	bgt.n	800bec6 <_printf_common+0x96>
 800be78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800be7c:	6822      	ldr	r2, [r4, #0]
 800be7e:	3b00      	subs	r3, #0
 800be80:	bf18      	it	ne
 800be82:	2301      	movne	r3, #1
 800be84:	0692      	lsls	r2, r2, #26
 800be86:	d42b      	bmi.n	800bee0 <_printf_common+0xb0>
 800be88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800be8c:	4641      	mov	r1, r8
 800be8e:	4638      	mov	r0, r7
 800be90:	47c8      	blx	r9
 800be92:	3001      	adds	r0, #1
 800be94:	d01e      	beq.n	800bed4 <_printf_common+0xa4>
 800be96:	6823      	ldr	r3, [r4, #0]
 800be98:	6922      	ldr	r2, [r4, #16]
 800be9a:	f003 0306 	and.w	r3, r3, #6
 800be9e:	2b04      	cmp	r3, #4
 800bea0:	bf02      	ittt	eq
 800bea2:	68e5      	ldreq	r5, [r4, #12]
 800bea4:	6833      	ldreq	r3, [r6, #0]
 800bea6:	1aed      	subeq	r5, r5, r3
 800bea8:	68a3      	ldr	r3, [r4, #8]
 800beaa:	bf0c      	ite	eq
 800beac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800beb0:	2500      	movne	r5, #0
 800beb2:	4293      	cmp	r3, r2
 800beb4:	bfc4      	itt	gt
 800beb6:	1a9b      	subgt	r3, r3, r2
 800beb8:	18ed      	addgt	r5, r5, r3
 800beba:	2600      	movs	r6, #0
 800bebc:	341a      	adds	r4, #26
 800bebe:	42b5      	cmp	r5, r6
 800bec0:	d11a      	bne.n	800bef8 <_printf_common+0xc8>
 800bec2:	2000      	movs	r0, #0
 800bec4:	e008      	b.n	800bed8 <_printf_common+0xa8>
 800bec6:	2301      	movs	r3, #1
 800bec8:	4652      	mov	r2, sl
 800beca:	4641      	mov	r1, r8
 800becc:	4638      	mov	r0, r7
 800bece:	47c8      	blx	r9
 800bed0:	3001      	adds	r0, #1
 800bed2:	d103      	bne.n	800bedc <_printf_common+0xac>
 800bed4:	f04f 30ff 	mov.w	r0, #4294967295
 800bed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bedc:	3501      	adds	r5, #1
 800bede:	e7c6      	b.n	800be6e <_printf_common+0x3e>
 800bee0:	18e1      	adds	r1, r4, r3
 800bee2:	1c5a      	adds	r2, r3, #1
 800bee4:	2030      	movs	r0, #48	@ 0x30
 800bee6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800beea:	4422      	add	r2, r4
 800beec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bef0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bef4:	3302      	adds	r3, #2
 800bef6:	e7c7      	b.n	800be88 <_printf_common+0x58>
 800bef8:	2301      	movs	r3, #1
 800befa:	4622      	mov	r2, r4
 800befc:	4641      	mov	r1, r8
 800befe:	4638      	mov	r0, r7
 800bf00:	47c8      	blx	r9
 800bf02:	3001      	adds	r0, #1
 800bf04:	d0e6      	beq.n	800bed4 <_printf_common+0xa4>
 800bf06:	3601      	adds	r6, #1
 800bf08:	e7d9      	b.n	800bebe <_printf_common+0x8e>
	...

0800bf0c <_printf_i>:
 800bf0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf10:	7e0f      	ldrb	r7, [r1, #24]
 800bf12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bf14:	2f78      	cmp	r7, #120	@ 0x78
 800bf16:	4691      	mov	r9, r2
 800bf18:	4680      	mov	r8, r0
 800bf1a:	460c      	mov	r4, r1
 800bf1c:	469a      	mov	sl, r3
 800bf1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bf22:	d807      	bhi.n	800bf34 <_printf_i+0x28>
 800bf24:	2f62      	cmp	r7, #98	@ 0x62
 800bf26:	d80a      	bhi.n	800bf3e <_printf_i+0x32>
 800bf28:	2f00      	cmp	r7, #0
 800bf2a:	f000 80d2 	beq.w	800c0d2 <_printf_i+0x1c6>
 800bf2e:	2f58      	cmp	r7, #88	@ 0x58
 800bf30:	f000 80b9 	beq.w	800c0a6 <_printf_i+0x19a>
 800bf34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bf3c:	e03a      	b.n	800bfb4 <_printf_i+0xa8>
 800bf3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bf42:	2b15      	cmp	r3, #21
 800bf44:	d8f6      	bhi.n	800bf34 <_printf_i+0x28>
 800bf46:	a101      	add	r1, pc, #4	@ (adr r1, 800bf4c <_printf_i+0x40>)
 800bf48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf4c:	0800bfa5 	.word	0x0800bfa5
 800bf50:	0800bfb9 	.word	0x0800bfb9
 800bf54:	0800bf35 	.word	0x0800bf35
 800bf58:	0800bf35 	.word	0x0800bf35
 800bf5c:	0800bf35 	.word	0x0800bf35
 800bf60:	0800bf35 	.word	0x0800bf35
 800bf64:	0800bfb9 	.word	0x0800bfb9
 800bf68:	0800bf35 	.word	0x0800bf35
 800bf6c:	0800bf35 	.word	0x0800bf35
 800bf70:	0800bf35 	.word	0x0800bf35
 800bf74:	0800bf35 	.word	0x0800bf35
 800bf78:	0800c0b9 	.word	0x0800c0b9
 800bf7c:	0800bfe3 	.word	0x0800bfe3
 800bf80:	0800c073 	.word	0x0800c073
 800bf84:	0800bf35 	.word	0x0800bf35
 800bf88:	0800bf35 	.word	0x0800bf35
 800bf8c:	0800c0db 	.word	0x0800c0db
 800bf90:	0800bf35 	.word	0x0800bf35
 800bf94:	0800bfe3 	.word	0x0800bfe3
 800bf98:	0800bf35 	.word	0x0800bf35
 800bf9c:	0800bf35 	.word	0x0800bf35
 800bfa0:	0800c07b 	.word	0x0800c07b
 800bfa4:	6833      	ldr	r3, [r6, #0]
 800bfa6:	1d1a      	adds	r2, r3, #4
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	6032      	str	r2, [r6, #0]
 800bfac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bfb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	e09d      	b.n	800c0f4 <_printf_i+0x1e8>
 800bfb8:	6833      	ldr	r3, [r6, #0]
 800bfba:	6820      	ldr	r0, [r4, #0]
 800bfbc:	1d19      	adds	r1, r3, #4
 800bfbe:	6031      	str	r1, [r6, #0]
 800bfc0:	0606      	lsls	r6, r0, #24
 800bfc2:	d501      	bpl.n	800bfc8 <_printf_i+0xbc>
 800bfc4:	681d      	ldr	r5, [r3, #0]
 800bfc6:	e003      	b.n	800bfd0 <_printf_i+0xc4>
 800bfc8:	0645      	lsls	r5, r0, #25
 800bfca:	d5fb      	bpl.n	800bfc4 <_printf_i+0xb8>
 800bfcc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bfd0:	2d00      	cmp	r5, #0
 800bfd2:	da03      	bge.n	800bfdc <_printf_i+0xd0>
 800bfd4:	232d      	movs	r3, #45	@ 0x2d
 800bfd6:	426d      	negs	r5, r5
 800bfd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bfdc:	4859      	ldr	r0, [pc, #356]	@ (800c144 <_printf_i+0x238>)
 800bfde:	230a      	movs	r3, #10
 800bfe0:	e011      	b.n	800c006 <_printf_i+0xfa>
 800bfe2:	6821      	ldr	r1, [r4, #0]
 800bfe4:	6833      	ldr	r3, [r6, #0]
 800bfe6:	0608      	lsls	r0, r1, #24
 800bfe8:	f853 5b04 	ldr.w	r5, [r3], #4
 800bfec:	d402      	bmi.n	800bff4 <_printf_i+0xe8>
 800bfee:	0649      	lsls	r1, r1, #25
 800bff0:	bf48      	it	mi
 800bff2:	b2ad      	uxthmi	r5, r5
 800bff4:	2f6f      	cmp	r7, #111	@ 0x6f
 800bff6:	4853      	ldr	r0, [pc, #332]	@ (800c144 <_printf_i+0x238>)
 800bff8:	6033      	str	r3, [r6, #0]
 800bffa:	bf14      	ite	ne
 800bffc:	230a      	movne	r3, #10
 800bffe:	2308      	moveq	r3, #8
 800c000:	2100      	movs	r1, #0
 800c002:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c006:	6866      	ldr	r6, [r4, #4]
 800c008:	60a6      	str	r6, [r4, #8]
 800c00a:	2e00      	cmp	r6, #0
 800c00c:	bfa2      	ittt	ge
 800c00e:	6821      	ldrge	r1, [r4, #0]
 800c010:	f021 0104 	bicge.w	r1, r1, #4
 800c014:	6021      	strge	r1, [r4, #0]
 800c016:	b90d      	cbnz	r5, 800c01c <_printf_i+0x110>
 800c018:	2e00      	cmp	r6, #0
 800c01a:	d04b      	beq.n	800c0b4 <_printf_i+0x1a8>
 800c01c:	4616      	mov	r6, r2
 800c01e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c022:	fb03 5711 	mls	r7, r3, r1, r5
 800c026:	5dc7      	ldrb	r7, [r0, r7]
 800c028:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c02c:	462f      	mov	r7, r5
 800c02e:	42bb      	cmp	r3, r7
 800c030:	460d      	mov	r5, r1
 800c032:	d9f4      	bls.n	800c01e <_printf_i+0x112>
 800c034:	2b08      	cmp	r3, #8
 800c036:	d10b      	bne.n	800c050 <_printf_i+0x144>
 800c038:	6823      	ldr	r3, [r4, #0]
 800c03a:	07df      	lsls	r7, r3, #31
 800c03c:	d508      	bpl.n	800c050 <_printf_i+0x144>
 800c03e:	6923      	ldr	r3, [r4, #16]
 800c040:	6861      	ldr	r1, [r4, #4]
 800c042:	4299      	cmp	r1, r3
 800c044:	bfde      	ittt	le
 800c046:	2330      	movle	r3, #48	@ 0x30
 800c048:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c04c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c050:	1b92      	subs	r2, r2, r6
 800c052:	6122      	str	r2, [r4, #16]
 800c054:	f8cd a000 	str.w	sl, [sp]
 800c058:	464b      	mov	r3, r9
 800c05a:	aa03      	add	r2, sp, #12
 800c05c:	4621      	mov	r1, r4
 800c05e:	4640      	mov	r0, r8
 800c060:	f7ff fee6 	bl	800be30 <_printf_common>
 800c064:	3001      	adds	r0, #1
 800c066:	d14a      	bne.n	800c0fe <_printf_i+0x1f2>
 800c068:	f04f 30ff 	mov.w	r0, #4294967295
 800c06c:	b004      	add	sp, #16
 800c06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c072:	6823      	ldr	r3, [r4, #0]
 800c074:	f043 0320 	orr.w	r3, r3, #32
 800c078:	6023      	str	r3, [r4, #0]
 800c07a:	4833      	ldr	r0, [pc, #204]	@ (800c148 <_printf_i+0x23c>)
 800c07c:	2778      	movs	r7, #120	@ 0x78
 800c07e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c082:	6823      	ldr	r3, [r4, #0]
 800c084:	6831      	ldr	r1, [r6, #0]
 800c086:	061f      	lsls	r7, r3, #24
 800c088:	f851 5b04 	ldr.w	r5, [r1], #4
 800c08c:	d402      	bmi.n	800c094 <_printf_i+0x188>
 800c08e:	065f      	lsls	r7, r3, #25
 800c090:	bf48      	it	mi
 800c092:	b2ad      	uxthmi	r5, r5
 800c094:	6031      	str	r1, [r6, #0]
 800c096:	07d9      	lsls	r1, r3, #31
 800c098:	bf44      	itt	mi
 800c09a:	f043 0320 	orrmi.w	r3, r3, #32
 800c09e:	6023      	strmi	r3, [r4, #0]
 800c0a0:	b11d      	cbz	r5, 800c0aa <_printf_i+0x19e>
 800c0a2:	2310      	movs	r3, #16
 800c0a4:	e7ac      	b.n	800c000 <_printf_i+0xf4>
 800c0a6:	4827      	ldr	r0, [pc, #156]	@ (800c144 <_printf_i+0x238>)
 800c0a8:	e7e9      	b.n	800c07e <_printf_i+0x172>
 800c0aa:	6823      	ldr	r3, [r4, #0]
 800c0ac:	f023 0320 	bic.w	r3, r3, #32
 800c0b0:	6023      	str	r3, [r4, #0]
 800c0b2:	e7f6      	b.n	800c0a2 <_printf_i+0x196>
 800c0b4:	4616      	mov	r6, r2
 800c0b6:	e7bd      	b.n	800c034 <_printf_i+0x128>
 800c0b8:	6833      	ldr	r3, [r6, #0]
 800c0ba:	6825      	ldr	r5, [r4, #0]
 800c0bc:	6961      	ldr	r1, [r4, #20]
 800c0be:	1d18      	adds	r0, r3, #4
 800c0c0:	6030      	str	r0, [r6, #0]
 800c0c2:	062e      	lsls	r6, r5, #24
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	d501      	bpl.n	800c0cc <_printf_i+0x1c0>
 800c0c8:	6019      	str	r1, [r3, #0]
 800c0ca:	e002      	b.n	800c0d2 <_printf_i+0x1c6>
 800c0cc:	0668      	lsls	r0, r5, #25
 800c0ce:	d5fb      	bpl.n	800c0c8 <_printf_i+0x1bc>
 800c0d0:	8019      	strh	r1, [r3, #0]
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	6123      	str	r3, [r4, #16]
 800c0d6:	4616      	mov	r6, r2
 800c0d8:	e7bc      	b.n	800c054 <_printf_i+0x148>
 800c0da:	6833      	ldr	r3, [r6, #0]
 800c0dc:	1d1a      	adds	r2, r3, #4
 800c0de:	6032      	str	r2, [r6, #0]
 800c0e0:	681e      	ldr	r6, [r3, #0]
 800c0e2:	6862      	ldr	r2, [r4, #4]
 800c0e4:	2100      	movs	r1, #0
 800c0e6:	4630      	mov	r0, r6
 800c0e8:	f7f4 f87a 	bl	80001e0 <memchr>
 800c0ec:	b108      	cbz	r0, 800c0f2 <_printf_i+0x1e6>
 800c0ee:	1b80      	subs	r0, r0, r6
 800c0f0:	6060      	str	r0, [r4, #4]
 800c0f2:	6863      	ldr	r3, [r4, #4]
 800c0f4:	6123      	str	r3, [r4, #16]
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0fc:	e7aa      	b.n	800c054 <_printf_i+0x148>
 800c0fe:	6923      	ldr	r3, [r4, #16]
 800c100:	4632      	mov	r2, r6
 800c102:	4649      	mov	r1, r9
 800c104:	4640      	mov	r0, r8
 800c106:	47d0      	blx	sl
 800c108:	3001      	adds	r0, #1
 800c10a:	d0ad      	beq.n	800c068 <_printf_i+0x15c>
 800c10c:	6823      	ldr	r3, [r4, #0]
 800c10e:	079b      	lsls	r3, r3, #30
 800c110:	d413      	bmi.n	800c13a <_printf_i+0x22e>
 800c112:	68e0      	ldr	r0, [r4, #12]
 800c114:	9b03      	ldr	r3, [sp, #12]
 800c116:	4298      	cmp	r0, r3
 800c118:	bfb8      	it	lt
 800c11a:	4618      	movlt	r0, r3
 800c11c:	e7a6      	b.n	800c06c <_printf_i+0x160>
 800c11e:	2301      	movs	r3, #1
 800c120:	4632      	mov	r2, r6
 800c122:	4649      	mov	r1, r9
 800c124:	4640      	mov	r0, r8
 800c126:	47d0      	blx	sl
 800c128:	3001      	adds	r0, #1
 800c12a:	d09d      	beq.n	800c068 <_printf_i+0x15c>
 800c12c:	3501      	adds	r5, #1
 800c12e:	68e3      	ldr	r3, [r4, #12]
 800c130:	9903      	ldr	r1, [sp, #12]
 800c132:	1a5b      	subs	r3, r3, r1
 800c134:	42ab      	cmp	r3, r5
 800c136:	dcf2      	bgt.n	800c11e <_printf_i+0x212>
 800c138:	e7eb      	b.n	800c112 <_printf_i+0x206>
 800c13a:	2500      	movs	r5, #0
 800c13c:	f104 0619 	add.w	r6, r4, #25
 800c140:	e7f5      	b.n	800c12e <_printf_i+0x222>
 800c142:	bf00      	nop
 800c144:	08010f48 	.word	0x08010f48
 800c148:	08010f59 	.word	0x08010f59

0800c14c <_scanf_float>:
 800c14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c150:	b087      	sub	sp, #28
 800c152:	4617      	mov	r7, r2
 800c154:	9303      	str	r3, [sp, #12]
 800c156:	688b      	ldr	r3, [r1, #8]
 800c158:	1e5a      	subs	r2, r3, #1
 800c15a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c15e:	bf81      	itttt	hi
 800c160:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c164:	eb03 0b05 	addhi.w	fp, r3, r5
 800c168:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c16c:	608b      	strhi	r3, [r1, #8]
 800c16e:	680b      	ldr	r3, [r1, #0]
 800c170:	460a      	mov	r2, r1
 800c172:	f04f 0500 	mov.w	r5, #0
 800c176:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c17a:	f842 3b1c 	str.w	r3, [r2], #28
 800c17e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c182:	4680      	mov	r8, r0
 800c184:	460c      	mov	r4, r1
 800c186:	bf98      	it	ls
 800c188:	f04f 0b00 	movls.w	fp, #0
 800c18c:	9201      	str	r2, [sp, #4]
 800c18e:	4616      	mov	r6, r2
 800c190:	46aa      	mov	sl, r5
 800c192:	46a9      	mov	r9, r5
 800c194:	9502      	str	r5, [sp, #8]
 800c196:	68a2      	ldr	r2, [r4, #8]
 800c198:	b152      	cbz	r2, 800c1b0 <_scanf_float+0x64>
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	2b4e      	cmp	r3, #78	@ 0x4e
 800c1a0:	d864      	bhi.n	800c26c <_scanf_float+0x120>
 800c1a2:	2b40      	cmp	r3, #64	@ 0x40
 800c1a4:	d83c      	bhi.n	800c220 <_scanf_float+0xd4>
 800c1a6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c1aa:	b2c8      	uxtb	r0, r1
 800c1ac:	280e      	cmp	r0, #14
 800c1ae:	d93a      	bls.n	800c226 <_scanf_float+0xda>
 800c1b0:	f1b9 0f00 	cmp.w	r9, #0
 800c1b4:	d003      	beq.n	800c1be <_scanf_float+0x72>
 800c1b6:	6823      	ldr	r3, [r4, #0]
 800c1b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c1bc:	6023      	str	r3, [r4, #0]
 800c1be:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c1c2:	f1ba 0f01 	cmp.w	sl, #1
 800c1c6:	f200 8117 	bhi.w	800c3f8 <_scanf_float+0x2ac>
 800c1ca:	9b01      	ldr	r3, [sp, #4]
 800c1cc:	429e      	cmp	r6, r3
 800c1ce:	f200 8108 	bhi.w	800c3e2 <_scanf_float+0x296>
 800c1d2:	2001      	movs	r0, #1
 800c1d4:	b007      	add	sp, #28
 800c1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1da:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c1de:	2a0d      	cmp	r2, #13
 800c1e0:	d8e6      	bhi.n	800c1b0 <_scanf_float+0x64>
 800c1e2:	a101      	add	r1, pc, #4	@ (adr r1, 800c1e8 <_scanf_float+0x9c>)
 800c1e4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c1e8:	0800c32f 	.word	0x0800c32f
 800c1ec:	0800c1b1 	.word	0x0800c1b1
 800c1f0:	0800c1b1 	.word	0x0800c1b1
 800c1f4:	0800c1b1 	.word	0x0800c1b1
 800c1f8:	0800c38f 	.word	0x0800c38f
 800c1fc:	0800c367 	.word	0x0800c367
 800c200:	0800c1b1 	.word	0x0800c1b1
 800c204:	0800c1b1 	.word	0x0800c1b1
 800c208:	0800c33d 	.word	0x0800c33d
 800c20c:	0800c1b1 	.word	0x0800c1b1
 800c210:	0800c1b1 	.word	0x0800c1b1
 800c214:	0800c1b1 	.word	0x0800c1b1
 800c218:	0800c1b1 	.word	0x0800c1b1
 800c21c:	0800c2f5 	.word	0x0800c2f5
 800c220:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c224:	e7db      	b.n	800c1de <_scanf_float+0x92>
 800c226:	290e      	cmp	r1, #14
 800c228:	d8c2      	bhi.n	800c1b0 <_scanf_float+0x64>
 800c22a:	a001      	add	r0, pc, #4	@ (adr r0, 800c230 <_scanf_float+0xe4>)
 800c22c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c230:	0800c2e5 	.word	0x0800c2e5
 800c234:	0800c1b1 	.word	0x0800c1b1
 800c238:	0800c2e5 	.word	0x0800c2e5
 800c23c:	0800c37b 	.word	0x0800c37b
 800c240:	0800c1b1 	.word	0x0800c1b1
 800c244:	0800c28d 	.word	0x0800c28d
 800c248:	0800c2cb 	.word	0x0800c2cb
 800c24c:	0800c2cb 	.word	0x0800c2cb
 800c250:	0800c2cb 	.word	0x0800c2cb
 800c254:	0800c2cb 	.word	0x0800c2cb
 800c258:	0800c2cb 	.word	0x0800c2cb
 800c25c:	0800c2cb 	.word	0x0800c2cb
 800c260:	0800c2cb 	.word	0x0800c2cb
 800c264:	0800c2cb 	.word	0x0800c2cb
 800c268:	0800c2cb 	.word	0x0800c2cb
 800c26c:	2b6e      	cmp	r3, #110	@ 0x6e
 800c26e:	d809      	bhi.n	800c284 <_scanf_float+0x138>
 800c270:	2b60      	cmp	r3, #96	@ 0x60
 800c272:	d8b2      	bhi.n	800c1da <_scanf_float+0x8e>
 800c274:	2b54      	cmp	r3, #84	@ 0x54
 800c276:	d07b      	beq.n	800c370 <_scanf_float+0x224>
 800c278:	2b59      	cmp	r3, #89	@ 0x59
 800c27a:	d199      	bne.n	800c1b0 <_scanf_float+0x64>
 800c27c:	2d07      	cmp	r5, #7
 800c27e:	d197      	bne.n	800c1b0 <_scanf_float+0x64>
 800c280:	2508      	movs	r5, #8
 800c282:	e02c      	b.n	800c2de <_scanf_float+0x192>
 800c284:	2b74      	cmp	r3, #116	@ 0x74
 800c286:	d073      	beq.n	800c370 <_scanf_float+0x224>
 800c288:	2b79      	cmp	r3, #121	@ 0x79
 800c28a:	e7f6      	b.n	800c27a <_scanf_float+0x12e>
 800c28c:	6821      	ldr	r1, [r4, #0]
 800c28e:	05c8      	lsls	r0, r1, #23
 800c290:	d51b      	bpl.n	800c2ca <_scanf_float+0x17e>
 800c292:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c296:	6021      	str	r1, [r4, #0]
 800c298:	f109 0901 	add.w	r9, r9, #1
 800c29c:	f1bb 0f00 	cmp.w	fp, #0
 800c2a0:	d003      	beq.n	800c2aa <_scanf_float+0x15e>
 800c2a2:	3201      	adds	r2, #1
 800c2a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c2a8:	60a2      	str	r2, [r4, #8]
 800c2aa:	68a3      	ldr	r3, [r4, #8]
 800c2ac:	3b01      	subs	r3, #1
 800c2ae:	60a3      	str	r3, [r4, #8]
 800c2b0:	6923      	ldr	r3, [r4, #16]
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	6123      	str	r3, [r4, #16]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	3b01      	subs	r3, #1
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	607b      	str	r3, [r7, #4]
 800c2be:	f340 8087 	ble.w	800c3d0 <_scanf_float+0x284>
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	3301      	adds	r3, #1
 800c2c6:	603b      	str	r3, [r7, #0]
 800c2c8:	e765      	b.n	800c196 <_scanf_float+0x4a>
 800c2ca:	eb1a 0105 	adds.w	r1, sl, r5
 800c2ce:	f47f af6f 	bne.w	800c1b0 <_scanf_float+0x64>
 800c2d2:	6822      	ldr	r2, [r4, #0]
 800c2d4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c2d8:	6022      	str	r2, [r4, #0]
 800c2da:	460d      	mov	r5, r1
 800c2dc:	468a      	mov	sl, r1
 800c2de:	f806 3b01 	strb.w	r3, [r6], #1
 800c2e2:	e7e2      	b.n	800c2aa <_scanf_float+0x15e>
 800c2e4:	6822      	ldr	r2, [r4, #0]
 800c2e6:	0610      	lsls	r0, r2, #24
 800c2e8:	f57f af62 	bpl.w	800c1b0 <_scanf_float+0x64>
 800c2ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c2f0:	6022      	str	r2, [r4, #0]
 800c2f2:	e7f4      	b.n	800c2de <_scanf_float+0x192>
 800c2f4:	f1ba 0f00 	cmp.w	sl, #0
 800c2f8:	d10e      	bne.n	800c318 <_scanf_float+0x1cc>
 800c2fa:	f1b9 0f00 	cmp.w	r9, #0
 800c2fe:	d10e      	bne.n	800c31e <_scanf_float+0x1d2>
 800c300:	6822      	ldr	r2, [r4, #0]
 800c302:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c306:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c30a:	d108      	bne.n	800c31e <_scanf_float+0x1d2>
 800c30c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c310:	6022      	str	r2, [r4, #0]
 800c312:	f04f 0a01 	mov.w	sl, #1
 800c316:	e7e2      	b.n	800c2de <_scanf_float+0x192>
 800c318:	f1ba 0f02 	cmp.w	sl, #2
 800c31c:	d055      	beq.n	800c3ca <_scanf_float+0x27e>
 800c31e:	2d01      	cmp	r5, #1
 800c320:	d002      	beq.n	800c328 <_scanf_float+0x1dc>
 800c322:	2d04      	cmp	r5, #4
 800c324:	f47f af44 	bne.w	800c1b0 <_scanf_float+0x64>
 800c328:	3501      	adds	r5, #1
 800c32a:	b2ed      	uxtb	r5, r5
 800c32c:	e7d7      	b.n	800c2de <_scanf_float+0x192>
 800c32e:	f1ba 0f01 	cmp.w	sl, #1
 800c332:	f47f af3d 	bne.w	800c1b0 <_scanf_float+0x64>
 800c336:	f04f 0a02 	mov.w	sl, #2
 800c33a:	e7d0      	b.n	800c2de <_scanf_float+0x192>
 800c33c:	b97d      	cbnz	r5, 800c35e <_scanf_float+0x212>
 800c33e:	f1b9 0f00 	cmp.w	r9, #0
 800c342:	f47f af38 	bne.w	800c1b6 <_scanf_float+0x6a>
 800c346:	6822      	ldr	r2, [r4, #0]
 800c348:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c34c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c350:	f040 8108 	bne.w	800c564 <_scanf_float+0x418>
 800c354:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c358:	6022      	str	r2, [r4, #0]
 800c35a:	2501      	movs	r5, #1
 800c35c:	e7bf      	b.n	800c2de <_scanf_float+0x192>
 800c35e:	2d03      	cmp	r5, #3
 800c360:	d0e2      	beq.n	800c328 <_scanf_float+0x1dc>
 800c362:	2d05      	cmp	r5, #5
 800c364:	e7de      	b.n	800c324 <_scanf_float+0x1d8>
 800c366:	2d02      	cmp	r5, #2
 800c368:	f47f af22 	bne.w	800c1b0 <_scanf_float+0x64>
 800c36c:	2503      	movs	r5, #3
 800c36e:	e7b6      	b.n	800c2de <_scanf_float+0x192>
 800c370:	2d06      	cmp	r5, #6
 800c372:	f47f af1d 	bne.w	800c1b0 <_scanf_float+0x64>
 800c376:	2507      	movs	r5, #7
 800c378:	e7b1      	b.n	800c2de <_scanf_float+0x192>
 800c37a:	6822      	ldr	r2, [r4, #0]
 800c37c:	0591      	lsls	r1, r2, #22
 800c37e:	f57f af17 	bpl.w	800c1b0 <_scanf_float+0x64>
 800c382:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c386:	6022      	str	r2, [r4, #0]
 800c388:	f8cd 9008 	str.w	r9, [sp, #8]
 800c38c:	e7a7      	b.n	800c2de <_scanf_float+0x192>
 800c38e:	6822      	ldr	r2, [r4, #0]
 800c390:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c394:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c398:	d006      	beq.n	800c3a8 <_scanf_float+0x25c>
 800c39a:	0550      	lsls	r0, r2, #21
 800c39c:	f57f af08 	bpl.w	800c1b0 <_scanf_float+0x64>
 800c3a0:	f1b9 0f00 	cmp.w	r9, #0
 800c3a4:	f000 80de 	beq.w	800c564 <_scanf_float+0x418>
 800c3a8:	0591      	lsls	r1, r2, #22
 800c3aa:	bf58      	it	pl
 800c3ac:	9902      	ldrpl	r1, [sp, #8]
 800c3ae:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c3b2:	bf58      	it	pl
 800c3b4:	eba9 0101 	subpl.w	r1, r9, r1
 800c3b8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c3bc:	bf58      	it	pl
 800c3be:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c3c2:	6022      	str	r2, [r4, #0]
 800c3c4:	f04f 0900 	mov.w	r9, #0
 800c3c8:	e789      	b.n	800c2de <_scanf_float+0x192>
 800c3ca:	f04f 0a03 	mov.w	sl, #3
 800c3ce:	e786      	b.n	800c2de <_scanf_float+0x192>
 800c3d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c3d4:	4639      	mov	r1, r7
 800c3d6:	4640      	mov	r0, r8
 800c3d8:	4798      	blx	r3
 800c3da:	2800      	cmp	r0, #0
 800c3dc:	f43f aedb 	beq.w	800c196 <_scanf_float+0x4a>
 800c3e0:	e6e6      	b.n	800c1b0 <_scanf_float+0x64>
 800c3e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c3e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c3ea:	463a      	mov	r2, r7
 800c3ec:	4640      	mov	r0, r8
 800c3ee:	4798      	blx	r3
 800c3f0:	6923      	ldr	r3, [r4, #16]
 800c3f2:	3b01      	subs	r3, #1
 800c3f4:	6123      	str	r3, [r4, #16]
 800c3f6:	e6e8      	b.n	800c1ca <_scanf_float+0x7e>
 800c3f8:	1e6b      	subs	r3, r5, #1
 800c3fa:	2b06      	cmp	r3, #6
 800c3fc:	d824      	bhi.n	800c448 <_scanf_float+0x2fc>
 800c3fe:	2d02      	cmp	r5, #2
 800c400:	d836      	bhi.n	800c470 <_scanf_float+0x324>
 800c402:	9b01      	ldr	r3, [sp, #4]
 800c404:	429e      	cmp	r6, r3
 800c406:	f67f aee4 	bls.w	800c1d2 <_scanf_float+0x86>
 800c40a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c40e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c412:	463a      	mov	r2, r7
 800c414:	4640      	mov	r0, r8
 800c416:	4798      	blx	r3
 800c418:	6923      	ldr	r3, [r4, #16]
 800c41a:	3b01      	subs	r3, #1
 800c41c:	6123      	str	r3, [r4, #16]
 800c41e:	e7f0      	b.n	800c402 <_scanf_float+0x2b6>
 800c420:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c424:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c428:	463a      	mov	r2, r7
 800c42a:	4640      	mov	r0, r8
 800c42c:	4798      	blx	r3
 800c42e:	6923      	ldr	r3, [r4, #16]
 800c430:	3b01      	subs	r3, #1
 800c432:	6123      	str	r3, [r4, #16]
 800c434:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c438:	fa5f fa8a 	uxtb.w	sl, sl
 800c43c:	f1ba 0f02 	cmp.w	sl, #2
 800c440:	d1ee      	bne.n	800c420 <_scanf_float+0x2d4>
 800c442:	3d03      	subs	r5, #3
 800c444:	b2ed      	uxtb	r5, r5
 800c446:	1b76      	subs	r6, r6, r5
 800c448:	6823      	ldr	r3, [r4, #0]
 800c44a:	05da      	lsls	r2, r3, #23
 800c44c:	d530      	bpl.n	800c4b0 <_scanf_float+0x364>
 800c44e:	055b      	lsls	r3, r3, #21
 800c450:	d511      	bpl.n	800c476 <_scanf_float+0x32a>
 800c452:	9b01      	ldr	r3, [sp, #4]
 800c454:	429e      	cmp	r6, r3
 800c456:	f67f aebc 	bls.w	800c1d2 <_scanf_float+0x86>
 800c45a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c45e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c462:	463a      	mov	r2, r7
 800c464:	4640      	mov	r0, r8
 800c466:	4798      	blx	r3
 800c468:	6923      	ldr	r3, [r4, #16]
 800c46a:	3b01      	subs	r3, #1
 800c46c:	6123      	str	r3, [r4, #16]
 800c46e:	e7f0      	b.n	800c452 <_scanf_float+0x306>
 800c470:	46aa      	mov	sl, r5
 800c472:	46b3      	mov	fp, r6
 800c474:	e7de      	b.n	800c434 <_scanf_float+0x2e8>
 800c476:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c47a:	6923      	ldr	r3, [r4, #16]
 800c47c:	2965      	cmp	r1, #101	@ 0x65
 800c47e:	f103 33ff 	add.w	r3, r3, #4294967295
 800c482:	f106 35ff 	add.w	r5, r6, #4294967295
 800c486:	6123      	str	r3, [r4, #16]
 800c488:	d00c      	beq.n	800c4a4 <_scanf_float+0x358>
 800c48a:	2945      	cmp	r1, #69	@ 0x45
 800c48c:	d00a      	beq.n	800c4a4 <_scanf_float+0x358>
 800c48e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c492:	463a      	mov	r2, r7
 800c494:	4640      	mov	r0, r8
 800c496:	4798      	blx	r3
 800c498:	6923      	ldr	r3, [r4, #16]
 800c49a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c49e:	3b01      	subs	r3, #1
 800c4a0:	1eb5      	subs	r5, r6, #2
 800c4a2:	6123      	str	r3, [r4, #16]
 800c4a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c4a8:	463a      	mov	r2, r7
 800c4aa:	4640      	mov	r0, r8
 800c4ac:	4798      	blx	r3
 800c4ae:	462e      	mov	r6, r5
 800c4b0:	6822      	ldr	r2, [r4, #0]
 800c4b2:	f012 0210 	ands.w	r2, r2, #16
 800c4b6:	d001      	beq.n	800c4bc <_scanf_float+0x370>
 800c4b8:	2000      	movs	r0, #0
 800c4ba:	e68b      	b.n	800c1d4 <_scanf_float+0x88>
 800c4bc:	7032      	strb	r2, [r6, #0]
 800c4be:	6823      	ldr	r3, [r4, #0]
 800c4c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c4c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c4c8:	d11c      	bne.n	800c504 <_scanf_float+0x3b8>
 800c4ca:	9b02      	ldr	r3, [sp, #8]
 800c4cc:	454b      	cmp	r3, r9
 800c4ce:	eba3 0209 	sub.w	r2, r3, r9
 800c4d2:	d123      	bne.n	800c51c <_scanf_float+0x3d0>
 800c4d4:	9901      	ldr	r1, [sp, #4]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	4640      	mov	r0, r8
 800c4da:	f7ff f9cd 	bl	800b878 <_strtod_r>
 800c4de:	9b03      	ldr	r3, [sp, #12]
 800c4e0:	6821      	ldr	r1, [r4, #0]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f011 0f02 	tst.w	r1, #2
 800c4e8:	ec57 6b10 	vmov	r6, r7, d0
 800c4ec:	f103 0204 	add.w	r2, r3, #4
 800c4f0:	d01f      	beq.n	800c532 <_scanf_float+0x3e6>
 800c4f2:	9903      	ldr	r1, [sp, #12]
 800c4f4:	600a      	str	r2, [r1, #0]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	e9c3 6700 	strd	r6, r7, [r3]
 800c4fc:	68e3      	ldr	r3, [r4, #12]
 800c4fe:	3301      	adds	r3, #1
 800c500:	60e3      	str	r3, [r4, #12]
 800c502:	e7d9      	b.n	800c4b8 <_scanf_float+0x36c>
 800c504:	9b04      	ldr	r3, [sp, #16]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d0e4      	beq.n	800c4d4 <_scanf_float+0x388>
 800c50a:	9905      	ldr	r1, [sp, #20]
 800c50c:	230a      	movs	r3, #10
 800c50e:	3101      	adds	r1, #1
 800c510:	4640      	mov	r0, r8
 800c512:	f002 fb19 	bl	800eb48 <_strtol_r>
 800c516:	9b04      	ldr	r3, [sp, #16]
 800c518:	9e05      	ldr	r6, [sp, #20]
 800c51a:	1ac2      	subs	r2, r0, r3
 800c51c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c520:	429e      	cmp	r6, r3
 800c522:	bf28      	it	cs
 800c524:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c528:	4910      	ldr	r1, [pc, #64]	@ (800c56c <_scanf_float+0x420>)
 800c52a:	4630      	mov	r0, r6
 800c52c:	f000 f954 	bl	800c7d8 <siprintf>
 800c530:	e7d0      	b.n	800c4d4 <_scanf_float+0x388>
 800c532:	f011 0f04 	tst.w	r1, #4
 800c536:	9903      	ldr	r1, [sp, #12]
 800c538:	600a      	str	r2, [r1, #0]
 800c53a:	d1dc      	bne.n	800c4f6 <_scanf_float+0x3aa>
 800c53c:	681d      	ldr	r5, [r3, #0]
 800c53e:	4632      	mov	r2, r6
 800c540:	463b      	mov	r3, r7
 800c542:	4630      	mov	r0, r6
 800c544:	4639      	mov	r1, r7
 800c546:	f7f4 faf9 	bl	8000b3c <__aeabi_dcmpun>
 800c54a:	b128      	cbz	r0, 800c558 <_scanf_float+0x40c>
 800c54c:	4808      	ldr	r0, [pc, #32]	@ (800c570 <_scanf_float+0x424>)
 800c54e:	f000 fb2f 	bl	800cbb0 <nanf>
 800c552:	ed85 0a00 	vstr	s0, [r5]
 800c556:	e7d1      	b.n	800c4fc <_scanf_float+0x3b0>
 800c558:	4630      	mov	r0, r6
 800c55a:	4639      	mov	r1, r7
 800c55c:	f7f4 fb4c 	bl	8000bf8 <__aeabi_d2f>
 800c560:	6028      	str	r0, [r5, #0]
 800c562:	e7cb      	b.n	800c4fc <_scanf_float+0x3b0>
 800c564:	f04f 0900 	mov.w	r9, #0
 800c568:	e629      	b.n	800c1be <_scanf_float+0x72>
 800c56a:	bf00      	nop
 800c56c:	08010f6a 	.word	0x08010f6a
 800c570:	08011328 	.word	0x08011328

0800c574 <std>:
 800c574:	2300      	movs	r3, #0
 800c576:	b510      	push	{r4, lr}
 800c578:	4604      	mov	r4, r0
 800c57a:	e9c0 3300 	strd	r3, r3, [r0]
 800c57e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c582:	6083      	str	r3, [r0, #8]
 800c584:	8181      	strh	r1, [r0, #12]
 800c586:	6643      	str	r3, [r0, #100]	@ 0x64
 800c588:	81c2      	strh	r2, [r0, #14]
 800c58a:	6183      	str	r3, [r0, #24]
 800c58c:	4619      	mov	r1, r3
 800c58e:	2208      	movs	r2, #8
 800c590:	305c      	adds	r0, #92	@ 0x5c
 800c592:	f000 fa45 	bl	800ca20 <memset>
 800c596:	4b0d      	ldr	r3, [pc, #52]	@ (800c5cc <std+0x58>)
 800c598:	6263      	str	r3, [r4, #36]	@ 0x24
 800c59a:	4b0d      	ldr	r3, [pc, #52]	@ (800c5d0 <std+0x5c>)
 800c59c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c59e:	4b0d      	ldr	r3, [pc, #52]	@ (800c5d4 <std+0x60>)
 800c5a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c5a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c5d8 <std+0x64>)
 800c5a4:	6323      	str	r3, [r4, #48]	@ 0x30
 800c5a6:	4b0d      	ldr	r3, [pc, #52]	@ (800c5dc <std+0x68>)
 800c5a8:	6224      	str	r4, [r4, #32]
 800c5aa:	429c      	cmp	r4, r3
 800c5ac:	d006      	beq.n	800c5bc <std+0x48>
 800c5ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c5b2:	4294      	cmp	r4, r2
 800c5b4:	d002      	beq.n	800c5bc <std+0x48>
 800c5b6:	33d0      	adds	r3, #208	@ 0xd0
 800c5b8:	429c      	cmp	r4, r3
 800c5ba:	d105      	bne.n	800c5c8 <std+0x54>
 800c5bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c5c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5c4:	f000 bada 	b.w	800cb7c <__retarget_lock_init_recursive>
 800c5c8:	bd10      	pop	{r4, pc}
 800c5ca:	bf00      	nop
 800c5cc:	0800c86d 	.word	0x0800c86d
 800c5d0:	0800c893 	.word	0x0800c893
 800c5d4:	0800c8cb 	.word	0x0800c8cb
 800c5d8:	0800c8ef 	.word	0x0800c8ef
 800c5dc:	20000a44 	.word	0x20000a44

0800c5e0 <stdio_exit_handler>:
 800c5e0:	4a02      	ldr	r2, [pc, #8]	@ (800c5ec <stdio_exit_handler+0xc>)
 800c5e2:	4903      	ldr	r1, [pc, #12]	@ (800c5f0 <stdio_exit_handler+0x10>)
 800c5e4:	4803      	ldr	r0, [pc, #12]	@ (800c5f4 <stdio_exit_handler+0x14>)
 800c5e6:	f000 b869 	b.w	800c6bc <_fwalk_sglue>
 800c5ea:	bf00      	nop
 800c5ec:	2000001c 	.word	0x2000001c
 800c5f0:	0800f7d5 	.word	0x0800f7d5
 800c5f4:	20000198 	.word	0x20000198

0800c5f8 <cleanup_stdio>:
 800c5f8:	6841      	ldr	r1, [r0, #4]
 800c5fa:	4b0c      	ldr	r3, [pc, #48]	@ (800c62c <cleanup_stdio+0x34>)
 800c5fc:	4299      	cmp	r1, r3
 800c5fe:	b510      	push	{r4, lr}
 800c600:	4604      	mov	r4, r0
 800c602:	d001      	beq.n	800c608 <cleanup_stdio+0x10>
 800c604:	f003 f8e6 	bl	800f7d4 <_fflush_r>
 800c608:	68a1      	ldr	r1, [r4, #8]
 800c60a:	4b09      	ldr	r3, [pc, #36]	@ (800c630 <cleanup_stdio+0x38>)
 800c60c:	4299      	cmp	r1, r3
 800c60e:	d002      	beq.n	800c616 <cleanup_stdio+0x1e>
 800c610:	4620      	mov	r0, r4
 800c612:	f003 f8df 	bl	800f7d4 <_fflush_r>
 800c616:	68e1      	ldr	r1, [r4, #12]
 800c618:	4b06      	ldr	r3, [pc, #24]	@ (800c634 <cleanup_stdio+0x3c>)
 800c61a:	4299      	cmp	r1, r3
 800c61c:	d004      	beq.n	800c628 <cleanup_stdio+0x30>
 800c61e:	4620      	mov	r0, r4
 800c620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c624:	f003 b8d6 	b.w	800f7d4 <_fflush_r>
 800c628:	bd10      	pop	{r4, pc}
 800c62a:	bf00      	nop
 800c62c:	20000a44 	.word	0x20000a44
 800c630:	20000aac 	.word	0x20000aac
 800c634:	20000b14 	.word	0x20000b14

0800c638 <global_stdio_init.part.0>:
 800c638:	b510      	push	{r4, lr}
 800c63a:	4b0b      	ldr	r3, [pc, #44]	@ (800c668 <global_stdio_init.part.0+0x30>)
 800c63c:	4c0b      	ldr	r4, [pc, #44]	@ (800c66c <global_stdio_init.part.0+0x34>)
 800c63e:	4a0c      	ldr	r2, [pc, #48]	@ (800c670 <global_stdio_init.part.0+0x38>)
 800c640:	601a      	str	r2, [r3, #0]
 800c642:	4620      	mov	r0, r4
 800c644:	2200      	movs	r2, #0
 800c646:	2104      	movs	r1, #4
 800c648:	f7ff ff94 	bl	800c574 <std>
 800c64c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c650:	2201      	movs	r2, #1
 800c652:	2109      	movs	r1, #9
 800c654:	f7ff ff8e 	bl	800c574 <std>
 800c658:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c65c:	2202      	movs	r2, #2
 800c65e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c662:	2112      	movs	r1, #18
 800c664:	f7ff bf86 	b.w	800c574 <std>
 800c668:	20000b7c 	.word	0x20000b7c
 800c66c:	20000a44 	.word	0x20000a44
 800c670:	0800c5e1 	.word	0x0800c5e1

0800c674 <__sfp_lock_acquire>:
 800c674:	4801      	ldr	r0, [pc, #4]	@ (800c67c <__sfp_lock_acquire+0x8>)
 800c676:	f000 ba82 	b.w	800cb7e <__retarget_lock_acquire_recursive>
 800c67a:	bf00      	nop
 800c67c:	20000b85 	.word	0x20000b85

0800c680 <__sfp_lock_release>:
 800c680:	4801      	ldr	r0, [pc, #4]	@ (800c688 <__sfp_lock_release+0x8>)
 800c682:	f000 ba7d 	b.w	800cb80 <__retarget_lock_release_recursive>
 800c686:	bf00      	nop
 800c688:	20000b85 	.word	0x20000b85

0800c68c <__sinit>:
 800c68c:	b510      	push	{r4, lr}
 800c68e:	4604      	mov	r4, r0
 800c690:	f7ff fff0 	bl	800c674 <__sfp_lock_acquire>
 800c694:	6a23      	ldr	r3, [r4, #32]
 800c696:	b11b      	cbz	r3, 800c6a0 <__sinit+0x14>
 800c698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c69c:	f7ff bff0 	b.w	800c680 <__sfp_lock_release>
 800c6a0:	4b04      	ldr	r3, [pc, #16]	@ (800c6b4 <__sinit+0x28>)
 800c6a2:	6223      	str	r3, [r4, #32]
 800c6a4:	4b04      	ldr	r3, [pc, #16]	@ (800c6b8 <__sinit+0x2c>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d1f5      	bne.n	800c698 <__sinit+0xc>
 800c6ac:	f7ff ffc4 	bl	800c638 <global_stdio_init.part.0>
 800c6b0:	e7f2      	b.n	800c698 <__sinit+0xc>
 800c6b2:	bf00      	nop
 800c6b4:	0800c5f9 	.word	0x0800c5f9
 800c6b8:	20000b7c 	.word	0x20000b7c

0800c6bc <_fwalk_sglue>:
 800c6bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6c0:	4607      	mov	r7, r0
 800c6c2:	4688      	mov	r8, r1
 800c6c4:	4614      	mov	r4, r2
 800c6c6:	2600      	movs	r6, #0
 800c6c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c6cc:	f1b9 0901 	subs.w	r9, r9, #1
 800c6d0:	d505      	bpl.n	800c6de <_fwalk_sglue+0x22>
 800c6d2:	6824      	ldr	r4, [r4, #0]
 800c6d4:	2c00      	cmp	r4, #0
 800c6d6:	d1f7      	bne.n	800c6c8 <_fwalk_sglue+0xc>
 800c6d8:	4630      	mov	r0, r6
 800c6da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6de:	89ab      	ldrh	r3, [r5, #12]
 800c6e0:	2b01      	cmp	r3, #1
 800c6e2:	d907      	bls.n	800c6f4 <_fwalk_sglue+0x38>
 800c6e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	d003      	beq.n	800c6f4 <_fwalk_sglue+0x38>
 800c6ec:	4629      	mov	r1, r5
 800c6ee:	4638      	mov	r0, r7
 800c6f0:	47c0      	blx	r8
 800c6f2:	4306      	orrs	r6, r0
 800c6f4:	3568      	adds	r5, #104	@ 0x68
 800c6f6:	e7e9      	b.n	800c6cc <_fwalk_sglue+0x10>

0800c6f8 <iprintf>:
 800c6f8:	b40f      	push	{r0, r1, r2, r3}
 800c6fa:	b507      	push	{r0, r1, r2, lr}
 800c6fc:	4906      	ldr	r1, [pc, #24]	@ (800c718 <iprintf+0x20>)
 800c6fe:	ab04      	add	r3, sp, #16
 800c700:	6808      	ldr	r0, [r1, #0]
 800c702:	f853 2b04 	ldr.w	r2, [r3], #4
 800c706:	6881      	ldr	r1, [r0, #8]
 800c708:	9301      	str	r3, [sp, #4]
 800c70a:	f002 fd79 	bl	800f200 <_vfiprintf_r>
 800c70e:	b003      	add	sp, #12
 800c710:	f85d eb04 	ldr.w	lr, [sp], #4
 800c714:	b004      	add	sp, #16
 800c716:	4770      	bx	lr
 800c718:	20000194 	.word	0x20000194

0800c71c <_puts_r>:
 800c71c:	6a03      	ldr	r3, [r0, #32]
 800c71e:	b570      	push	{r4, r5, r6, lr}
 800c720:	6884      	ldr	r4, [r0, #8]
 800c722:	4605      	mov	r5, r0
 800c724:	460e      	mov	r6, r1
 800c726:	b90b      	cbnz	r3, 800c72c <_puts_r+0x10>
 800c728:	f7ff ffb0 	bl	800c68c <__sinit>
 800c72c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c72e:	07db      	lsls	r3, r3, #31
 800c730:	d405      	bmi.n	800c73e <_puts_r+0x22>
 800c732:	89a3      	ldrh	r3, [r4, #12]
 800c734:	0598      	lsls	r0, r3, #22
 800c736:	d402      	bmi.n	800c73e <_puts_r+0x22>
 800c738:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c73a:	f000 fa20 	bl	800cb7e <__retarget_lock_acquire_recursive>
 800c73e:	89a3      	ldrh	r3, [r4, #12]
 800c740:	0719      	lsls	r1, r3, #28
 800c742:	d502      	bpl.n	800c74a <_puts_r+0x2e>
 800c744:	6923      	ldr	r3, [r4, #16]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d135      	bne.n	800c7b6 <_puts_r+0x9a>
 800c74a:	4621      	mov	r1, r4
 800c74c:	4628      	mov	r0, r5
 800c74e:	f000 f911 	bl	800c974 <__swsetup_r>
 800c752:	b380      	cbz	r0, 800c7b6 <_puts_r+0x9a>
 800c754:	f04f 35ff 	mov.w	r5, #4294967295
 800c758:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c75a:	07da      	lsls	r2, r3, #31
 800c75c:	d405      	bmi.n	800c76a <_puts_r+0x4e>
 800c75e:	89a3      	ldrh	r3, [r4, #12]
 800c760:	059b      	lsls	r3, r3, #22
 800c762:	d402      	bmi.n	800c76a <_puts_r+0x4e>
 800c764:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c766:	f000 fa0b 	bl	800cb80 <__retarget_lock_release_recursive>
 800c76a:	4628      	mov	r0, r5
 800c76c:	bd70      	pop	{r4, r5, r6, pc}
 800c76e:	2b00      	cmp	r3, #0
 800c770:	da04      	bge.n	800c77c <_puts_r+0x60>
 800c772:	69a2      	ldr	r2, [r4, #24]
 800c774:	429a      	cmp	r2, r3
 800c776:	dc17      	bgt.n	800c7a8 <_puts_r+0x8c>
 800c778:	290a      	cmp	r1, #10
 800c77a:	d015      	beq.n	800c7a8 <_puts_r+0x8c>
 800c77c:	6823      	ldr	r3, [r4, #0]
 800c77e:	1c5a      	adds	r2, r3, #1
 800c780:	6022      	str	r2, [r4, #0]
 800c782:	7019      	strb	r1, [r3, #0]
 800c784:	68a3      	ldr	r3, [r4, #8]
 800c786:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c78a:	3b01      	subs	r3, #1
 800c78c:	60a3      	str	r3, [r4, #8]
 800c78e:	2900      	cmp	r1, #0
 800c790:	d1ed      	bne.n	800c76e <_puts_r+0x52>
 800c792:	2b00      	cmp	r3, #0
 800c794:	da11      	bge.n	800c7ba <_puts_r+0x9e>
 800c796:	4622      	mov	r2, r4
 800c798:	210a      	movs	r1, #10
 800c79a:	4628      	mov	r0, r5
 800c79c:	f000 f8ab 	bl	800c8f6 <__swbuf_r>
 800c7a0:	3001      	adds	r0, #1
 800c7a2:	d0d7      	beq.n	800c754 <_puts_r+0x38>
 800c7a4:	250a      	movs	r5, #10
 800c7a6:	e7d7      	b.n	800c758 <_puts_r+0x3c>
 800c7a8:	4622      	mov	r2, r4
 800c7aa:	4628      	mov	r0, r5
 800c7ac:	f000 f8a3 	bl	800c8f6 <__swbuf_r>
 800c7b0:	3001      	adds	r0, #1
 800c7b2:	d1e7      	bne.n	800c784 <_puts_r+0x68>
 800c7b4:	e7ce      	b.n	800c754 <_puts_r+0x38>
 800c7b6:	3e01      	subs	r6, #1
 800c7b8:	e7e4      	b.n	800c784 <_puts_r+0x68>
 800c7ba:	6823      	ldr	r3, [r4, #0]
 800c7bc:	1c5a      	adds	r2, r3, #1
 800c7be:	6022      	str	r2, [r4, #0]
 800c7c0:	220a      	movs	r2, #10
 800c7c2:	701a      	strb	r2, [r3, #0]
 800c7c4:	e7ee      	b.n	800c7a4 <_puts_r+0x88>
	...

0800c7c8 <puts>:
 800c7c8:	4b02      	ldr	r3, [pc, #8]	@ (800c7d4 <puts+0xc>)
 800c7ca:	4601      	mov	r1, r0
 800c7cc:	6818      	ldr	r0, [r3, #0]
 800c7ce:	f7ff bfa5 	b.w	800c71c <_puts_r>
 800c7d2:	bf00      	nop
 800c7d4:	20000194 	.word	0x20000194

0800c7d8 <siprintf>:
 800c7d8:	b40e      	push	{r1, r2, r3}
 800c7da:	b500      	push	{lr}
 800c7dc:	b09c      	sub	sp, #112	@ 0x70
 800c7de:	ab1d      	add	r3, sp, #116	@ 0x74
 800c7e0:	9002      	str	r0, [sp, #8]
 800c7e2:	9006      	str	r0, [sp, #24]
 800c7e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c7e8:	4809      	ldr	r0, [pc, #36]	@ (800c810 <siprintf+0x38>)
 800c7ea:	9107      	str	r1, [sp, #28]
 800c7ec:	9104      	str	r1, [sp, #16]
 800c7ee:	4909      	ldr	r1, [pc, #36]	@ (800c814 <siprintf+0x3c>)
 800c7f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7f4:	9105      	str	r1, [sp, #20]
 800c7f6:	6800      	ldr	r0, [r0, #0]
 800c7f8:	9301      	str	r3, [sp, #4]
 800c7fa:	a902      	add	r1, sp, #8
 800c7fc:	f002 fa0e 	bl	800ec1c <_svfiprintf_r>
 800c800:	9b02      	ldr	r3, [sp, #8]
 800c802:	2200      	movs	r2, #0
 800c804:	701a      	strb	r2, [r3, #0]
 800c806:	b01c      	add	sp, #112	@ 0x70
 800c808:	f85d eb04 	ldr.w	lr, [sp], #4
 800c80c:	b003      	add	sp, #12
 800c80e:	4770      	bx	lr
 800c810:	20000194 	.word	0x20000194
 800c814:	ffff0208 	.word	0xffff0208

0800c818 <siscanf>:
 800c818:	b40e      	push	{r1, r2, r3}
 800c81a:	b530      	push	{r4, r5, lr}
 800c81c:	b09c      	sub	sp, #112	@ 0x70
 800c81e:	ac1f      	add	r4, sp, #124	@ 0x7c
 800c820:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800c824:	f854 5b04 	ldr.w	r5, [r4], #4
 800c828:	f8ad 2014 	strh.w	r2, [sp, #20]
 800c82c:	9002      	str	r0, [sp, #8]
 800c82e:	9006      	str	r0, [sp, #24]
 800c830:	f7f3 fd26 	bl	8000280 <strlen>
 800c834:	4b0b      	ldr	r3, [pc, #44]	@ (800c864 <siscanf+0x4c>)
 800c836:	9003      	str	r0, [sp, #12]
 800c838:	9007      	str	r0, [sp, #28]
 800c83a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c83c:	480a      	ldr	r0, [pc, #40]	@ (800c868 <siscanf+0x50>)
 800c83e:	9401      	str	r4, [sp, #4]
 800c840:	2300      	movs	r3, #0
 800c842:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c844:	9314      	str	r3, [sp, #80]	@ 0x50
 800c846:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c84a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c84e:	462a      	mov	r2, r5
 800c850:	4623      	mov	r3, r4
 800c852:	a902      	add	r1, sp, #8
 800c854:	6800      	ldr	r0, [r0, #0]
 800c856:	f002 fb35 	bl	800eec4 <__ssvfiscanf_r>
 800c85a:	b01c      	add	sp, #112	@ 0x70
 800c85c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c860:	b003      	add	sp, #12
 800c862:	4770      	bx	lr
 800c864:	0800c88f 	.word	0x0800c88f
 800c868:	20000194 	.word	0x20000194

0800c86c <__sread>:
 800c86c:	b510      	push	{r4, lr}
 800c86e:	460c      	mov	r4, r1
 800c870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c874:	f000 f934 	bl	800cae0 <_read_r>
 800c878:	2800      	cmp	r0, #0
 800c87a:	bfab      	itete	ge
 800c87c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c87e:	89a3      	ldrhlt	r3, [r4, #12]
 800c880:	181b      	addge	r3, r3, r0
 800c882:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c886:	bfac      	ite	ge
 800c888:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c88a:	81a3      	strhlt	r3, [r4, #12]
 800c88c:	bd10      	pop	{r4, pc}

0800c88e <__seofread>:
 800c88e:	2000      	movs	r0, #0
 800c890:	4770      	bx	lr

0800c892 <__swrite>:
 800c892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c896:	461f      	mov	r7, r3
 800c898:	898b      	ldrh	r3, [r1, #12]
 800c89a:	05db      	lsls	r3, r3, #23
 800c89c:	4605      	mov	r5, r0
 800c89e:	460c      	mov	r4, r1
 800c8a0:	4616      	mov	r6, r2
 800c8a2:	d505      	bpl.n	800c8b0 <__swrite+0x1e>
 800c8a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8a8:	2302      	movs	r3, #2
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	f000 f906 	bl	800cabc <_lseek_r>
 800c8b0:	89a3      	ldrh	r3, [r4, #12]
 800c8b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c8ba:	81a3      	strh	r3, [r4, #12]
 800c8bc:	4632      	mov	r2, r6
 800c8be:	463b      	mov	r3, r7
 800c8c0:	4628      	mov	r0, r5
 800c8c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8c6:	f000 b91d 	b.w	800cb04 <_write_r>

0800c8ca <__sseek>:
 800c8ca:	b510      	push	{r4, lr}
 800c8cc:	460c      	mov	r4, r1
 800c8ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8d2:	f000 f8f3 	bl	800cabc <_lseek_r>
 800c8d6:	1c43      	adds	r3, r0, #1
 800c8d8:	89a3      	ldrh	r3, [r4, #12]
 800c8da:	bf15      	itete	ne
 800c8dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c8de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c8e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c8e6:	81a3      	strheq	r3, [r4, #12]
 800c8e8:	bf18      	it	ne
 800c8ea:	81a3      	strhne	r3, [r4, #12]
 800c8ec:	bd10      	pop	{r4, pc}

0800c8ee <__sclose>:
 800c8ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8f2:	f000 b8d3 	b.w	800ca9c <_close_r>

0800c8f6 <__swbuf_r>:
 800c8f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8f8:	460e      	mov	r6, r1
 800c8fa:	4614      	mov	r4, r2
 800c8fc:	4605      	mov	r5, r0
 800c8fe:	b118      	cbz	r0, 800c908 <__swbuf_r+0x12>
 800c900:	6a03      	ldr	r3, [r0, #32]
 800c902:	b90b      	cbnz	r3, 800c908 <__swbuf_r+0x12>
 800c904:	f7ff fec2 	bl	800c68c <__sinit>
 800c908:	69a3      	ldr	r3, [r4, #24]
 800c90a:	60a3      	str	r3, [r4, #8]
 800c90c:	89a3      	ldrh	r3, [r4, #12]
 800c90e:	071a      	lsls	r2, r3, #28
 800c910:	d501      	bpl.n	800c916 <__swbuf_r+0x20>
 800c912:	6923      	ldr	r3, [r4, #16]
 800c914:	b943      	cbnz	r3, 800c928 <__swbuf_r+0x32>
 800c916:	4621      	mov	r1, r4
 800c918:	4628      	mov	r0, r5
 800c91a:	f000 f82b 	bl	800c974 <__swsetup_r>
 800c91e:	b118      	cbz	r0, 800c928 <__swbuf_r+0x32>
 800c920:	f04f 37ff 	mov.w	r7, #4294967295
 800c924:	4638      	mov	r0, r7
 800c926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c928:	6823      	ldr	r3, [r4, #0]
 800c92a:	6922      	ldr	r2, [r4, #16]
 800c92c:	1a98      	subs	r0, r3, r2
 800c92e:	6963      	ldr	r3, [r4, #20]
 800c930:	b2f6      	uxtb	r6, r6
 800c932:	4283      	cmp	r3, r0
 800c934:	4637      	mov	r7, r6
 800c936:	dc05      	bgt.n	800c944 <__swbuf_r+0x4e>
 800c938:	4621      	mov	r1, r4
 800c93a:	4628      	mov	r0, r5
 800c93c:	f002 ff4a 	bl	800f7d4 <_fflush_r>
 800c940:	2800      	cmp	r0, #0
 800c942:	d1ed      	bne.n	800c920 <__swbuf_r+0x2a>
 800c944:	68a3      	ldr	r3, [r4, #8]
 800c946:	3b01      	subs	r3, #1
 800c948:	60a3      	str	r3, [r4, #8]
 800c94a:	6823      	ldr	r3, [r4, #0]
 800c94c:	1c5a      	adds	r2, r3, #1
 800c94e:	6022      	str	r2, [r4, #0]
 800c950:	701e      	strb	r6, [r3, #0]
 800c952:	6962      	ldr	r2, [r4, #20]
 800c954:	1c43      	adds	r3, r0, #1
 800c956:	429a      	cmp	r2, r3
 800c958:	d004      	beq.n	800c964 <__swbuf_r+0x6e>
 800c95a:	89a3      	ldrh	r3, [r4, #12]
 800c95c:	07db      	lsls	r3, r3, #31
 800c95e:	d5e1      	bpl.n	800c924 <__swbuf_r+0x2e>
 800c960:	2e0a      	cmp	r6, #10
 800c962:	d1df      	bne.n	800c924 <__swbuf_r+0x2e>
 800c964:	4621      	mov	r1, r4
 800c966:	4628      	mov	r0, r5
 800c968:	f002 ff34 	bl	800f7d4 <_fflush_r>
 800c96c:	2800      	cmp	r0, #0
 800c96e:	d0d9      	beq.n	800c924 <__swbuf_r+0x2e>
 800c970:	e7d6      	b.n	800c920 <__swbuf_r+0x2a>
	...

0800c974 <__swsetup_r>:
 800c974:	b538      	push	{r3, r4, r5, lr}
 800c976:	4b29      	ldr	r3, [pc, #164]	@ (800ca1c <__swsetup_r+0xa8>)
 800c978:	4605      	mov	r5, r0
 800c97a:	6818      	ldr	r0, [r3, #0]
 800c97c:	460c      	mov	r4, r1
 800c97e:	b118      	cbz	r0, 800c988 <__swsetup_r+0x14>
 800c980:	6a03      	ldr	r3, [r0, #32]
 800c982:	b90b      	cbnz	r3, 800c988 <__swsetup_r+0x14>
 800c984:	f7ff fe82 	bl	800c68c <__sinit>
 800c988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c98c:	0719      	lsls	r1, r3, #28
 800c98e:	d422      	bmi.n	800c9d6 <__swsetup_r+0x62>
 800c990:	06da      	lsls	r2, r3, #27
 800c992:	d407      	bmi.n	800c9a4 <__swsetup_r+0x30>
 800c994:	2209      	movs	r2, #9
 800c996:	602a      	str	r2, [r5, #0]
 800c998:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c99c:	81a3      	strh	r3, [r4, #12]
 800c99e:	f04f 30ff 	mov.w	r0, #4294967295
 800c9a2:	e033      	b.n	800ca0c <__swsetup_r+0x98>
 800c9a4:	0758      	lsls	r0, r3, #29
 800c9a6:	d512      	bpl.n	800c9ce <__swsetup_r+0x5a>
 800c9a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c9aa:	b141      	cbz	r1, 800c9be <__swsetup_r+0x4a>
 800c9ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c9b0:	4299      	cmp	r1, r3
 800c9b2:	d002      	beq.n	800c9ba <__swsetup_r+0x46>
 800c9b4:	4628      	mov	r0, r5
 800c9b6:	f000 ff4f 	bl	800d858 <_free_r>
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	6363      	str	r3, [r4, #52]	@ 0x34
 800c9be:	89a3      	ldrh	r3, [r4, #12]
 800c9c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c9c4:	81a3      	strh	r3, [r4, #12]
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	6063      	str	r3, [r4, #4]
 800c9ca:	6923      	ldr	r3, [r4, #16]
 800c9cc:	6023      	str	r3, [r4, #0]
 800c9ce:	89a3      	ldrh	r3, [r4, #12]
 800c9d0:	f043 0308 	orr.w	r3, r3, #8
 800c9d4:	81a3      	strh	r3, [r4, #12]
 800c9d6:	6923      	ldr	r3, [r4, #16]
 800c9d8:	b94b      	cbnz	r3, 800c9ee <__swsetup_r+0x7a>
 800c9da:	89a3      	ldrh	r3, [r4, #12]
 800c9dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c9e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9e4:	d003      	beq.n	800c9ee <__swsetup_r+0x7a>
 800c9e6:	4621      	mov	r1, r4
 800c9e8:	4628      	mov	r0, r5
 800c9ea:	f002 ff41 	bl	800f870 <__smakebuf_r>
 800c9ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9f2:	f013 0201 	ands.w	r2, r3, #1
 800c9f6:	d00a      	beq.n	800ca0e <__swsetup_r+0x9a>
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	60a2      	str	r2, [r4, #8]
 800c9fc:	6962      	ldr	r2, [r4, #20]
 800c9fe:	4252      	negs	r2, r2
 800ca00:	61a2      	str	r2, [r4, #24]
 800ca02:	6922      	ldr	r2, [r4, #16]
 800ca04:	b942      	cbnz	r2, 800ca18 <__swsetup_r+0xa4>
 800ca06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ca0a:	d1c5      	bne.n	800c998 <__swsetup_r+0x24>
 800ca0c:	bd38      	pop	{r3, r4, r5, pc}
 800ca0e:	0799      	lsls	r1, r3, #30
 800ca10:	bf58      	it	pl
 800ca12:	6962      	ldrpl	r2, [r4, #20]
 800ca14:	60a2      	str	r2, [r4, #8]
 800ca16:	e7f4      	b.n	800ca02 <__swsetup_r+0x8e>
 800ca18:	2000      	movs	r0, #0
 800ca1a:	e7f7      	b.n	800ca0c <__swsetup_r+0x98>
 800ca1c:	20000194 	.word	0x20000194

0800ca20 <memset>:
 800ca20:	4402      	add	r2, r0
 800ca22:	4603      	mov	r3, r0
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d100      	bne.n	800ca2a <memset+0xa>
 800ca28:	4770      	bx	lr
 800ca2a:	f803 1b01 	strb.w	r1, [r3], #1
 800ca2e:	e7f9      	b.n	800ca24 <memset+0x4>

0800ca30 <strchr>:
 800ca30:	b2c9      	uxtb	r1, r1
 800ca32:	4603      	mov	r3, r0
 800ca34:	4618      	mov	r0, r3
 800ca36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca3a:	b112      	cbz	r2, 800ca42 <strchr+0x12>
 800ca3c:	428a      	cmp	r2, r1
 800ca3e:	d1f9      	bne.n	800ca34 <strchr+0x4>
 800ca40:	4770      	bx	lr
 800ca42:	2900      	cmp	r1, #0
 800ca44:	bf18      	it	ne
 800ca46:	2000      	movne	r0, #0
 800ca48:	4770      	bx	lr

0800ca4a <strncmp>:
 800ca4a:	b510      	push	{r4, lr}
 800ca4c:	b16a      	cbz	r2, 800ca6a <strncmp+0x20>
 800ca4e:	3901      	subs	r1, #1
 800ca50:	1884      	adds	r4, r0, r2
 800ca52:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca56:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d103      	bne.n	800ca66 <strncmp+0x1c>
 800ca5e:	42a0      	cmp	r0, r4
 800ca60:	d001      	beq.n	800ca66 <strncmp+0x1c>
 800ca62:	2a00      	cmp	r2, #0
 800ca64:	d1f5      	bne.n	800ca52 <strncmp+0x8>
 800ca66:	1ad0      	subs	r0, r2, r3
 800ca68:	bd10      	pop	{r4, pc}
 800ca6a:	4610      	mov	r0, r2
 800ca6c:	e7fc      	b.n	800ca68 <strncmp+0x1e>

0800ca6e <strncpy>:
 800ca6e:	b510      	push	{r4, lr}
 800ca70:	3901      	subs	r1, #1
 800ca72:	4603      	mov	r3, r0
 800ca74:	b132      	cbz	r2, 800ca84 <strncpy+0x16>
 800ca76:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ca7a:	f803 4b01 	strb.w	r4, [r3], #1
 800ca7e:	3a01      	subs	r2, #1
 800ca80:	2c00      	cmp	r4, #0
 800ca82:	d1f7      	bne.n	800ca74 <strncpy+0x6>
 800ca84:	441a      	add	r2, r3
 800ca86:	2100      	movs	r1, #0
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d100      	bne.n	800ca8e <strncpy+0x20>
 800ca8c:	bd10      	pop	{r4, pc}
 800ca8e:	f803 1b01 	strb.w	r1, [r3], #1
 800ca92:	e7f9      	b.n	800ca88 <strncpy+0x1a>

0800ca94 <_localeconv_r>:
 800ca94:	4800      	ldr	r0, [pc, #0]	@ (800ca98 <_localeconv_r+0x4>)
 800ca96:	4770      	bx	lr
 800ca98:	20000118 	.word	0x20000118

0800ca9c <_close_r>:
 800ca9c:	b538      	push	{r3, r4, r5, lr}
 800ca9e:	4d06      	ldr	r5, [pc, #24]	@ (800cab8 <_close_r+0x1c>)
 800caa0:	2300      	movs	r3, #0
 800caa2:	4604      	mov	r4, r0
 800caa4:	4608      	mov	r0, r1
 800caa6:	602b      	str	r3, [r5, #0]
 800caa8:	f7f7 f8a4 	bl	8003bf4 <_close>
 800caac:	1c43      	adds	r3, r0, #1
 800caae:	d102      	bne.n	800cab6 <_close_r+0x1a>
 800cab0:	682b      	ldr	r3, [r5, #0]
 800cab2:	b103      	cbz	r3, 800cab6 <_close_r+0x1a>
 800cab4:	6023      	str	r3, [r4, #0]
 800cab6:	bd38      	pop	{r3, r4, r5, pc}
 800cab8:	20000b80 	.word	0x20000b80

0800cabc <_lseek_r>:
 800cabc:	b538      	push	{r3, r4, r5, lr}
 800cabe:	4d07      	ldr	r5, [pc, #28]	@ (800cadc <_lseek_r+0x20>)
 800cac0:	4604      	mov	r4, r0
 800cac2:	4608      	mov	r0, r1
 800cac4:	4611      	mov	r1, r2
 800cac6:	2200      	movs	r2, #0
 800cac8:	602a      	str	r2, [r5, #0]
 800caca:	461a      	mov	r2, r3
 800cacc:	f7f7 f8b9 	bl	8003c42 <_lseek>
 800cad0:	1c43      	adds	r3, r0, #1
 800cad2:	d102      	bne.n	800cada <_lseek_r+0x1e>
 800cad4:	682b      	ldr	r3, [r5, #0]
 800cad6:	b103      	cbz	r3, 800cada <_lseek_r+0x1e>
 800cad8:	6023      	str	r3, [r4, #0]
 800cada:	bd38      	pop	{r3, r4, r5, pc}
 800cadc:	20000b80 	.word	0x20000b80

0800cae0 <_read_r>:
 800cae0:	b538      	push	{r3, r4, r5, lr}
 800cae2:	4d07      	ldr	r5, [pc, #28]	@ (800cb00 <_read_r+0x20>)
 800cae4:	4604      	mov	r4, r0
 800cae6:	4608      	mov	r0, r1
 800cae8:	4611      	mov	r1, r2
 800caea:	2200      	movs	r2, #0
 800caec:	602a      	str	r2, [r5, #0]
 800caee:	461a      	mov	r2, r3
 800caf0:	f7f7 f847 	bl	8003b82 <_read>
 800caf4:	1c43      	adds	r3, r0, #1
 800caf6:	d102      	bne.n	800cafe <_read_r+0x1e>
 800caf8:	682b      	ldr	r3, [r5, #0]
 800cafa:	b103      	cbz	r3, 800cafe <_read_r+0x1e>
 800cafc:	6023      	str	r3, [r4, #0]
 800cafe:	bd38      	pop	{r3, r4, r5, pc}
 800cb00:	20000b80 	.word	0x20000b80

0800cb04 <_write_r>:
 800cb04:	b538      	push	{r3, r4, r5, lr}
 800cb06:	4d07      	ldr	r5, [pc, #28]	@ (800cb24 <_write_r+0x20>)
 800cb08:	4604      	mov	r4, r0
 800cb0a:	4608      	mov	r0, r1
 800cb0c:	4611      	mov	r1, r2
 800cb0e:	2200      	movs	r2, #0
 800cb10:	602a      	str	r2, [r5, #0]
 800cb12:	461a      	mov	r2, r3
 800cb14:	f7f7 f852 	bl	8003bbc <_write>
 800cb18:	1c43      	adds	r3, r0, #1
 800cb1a:	d102      	bne.n	800cb22 <_write_r+0x1e>
 800cb1c:	682b      	ldr	r3, [r5, #0]
 800cb1e:	b103      	cbz	r3, 800cb22 <_write_r+0x1e>
 800cb20:	6023      	str	r3, [r4, #0]
 800cb22:	bd38      	pop	{r3, r4, r5, pc}
 800cb24:	20000b80 	.word	0x20000b80

0800cb28 <__errno>:
 800cb28:	4b01      	ldr	r3, [pc, #4]	@ (800cb30 <__errno+0x8>)
 800cb2a:	6818      	ldr	r0, [r3, #0]
 800cb2c:	4770      	bx	lr
 800cb2e:	bf00      	nop
 800cb30:	20000194 	.word	0x20000194

0800cb34 <__libc_init_array>:
 800cb34:	b570      	push	{r4, r5, r6, lr}
 800cb36:	4d0d      	ldr	r5, [pc, #52]	@ (800cb6c <__libc_init_array+0x38>)
 800cb38:	4c0d      	ldr	r4, [pc, #52]	@ (800cb70 <__libc_init_array+0x3c>)
 800cb3a:	1b64      	subs	r4, r4, r5
 800cb3c:	10a4      	asrs	r4, r4, #2
 800cb3e:	2600      	movs	r6, #0
 800cb40:	42a6      	cmp	r6, r4
 800cb42:	d109      	bne.n	800cb58 <__libc_init_array+0x24>
 800cb44:	4d0b      	ldr	r5, [pc, #44]	@ (800cb74 <__libc_init_array+0x40>)
 800cb46:	4c0c      	ldr	r4, [pc, #48]	@ (800cb78 <__libc_init_array+0x44>)
 800cb48:	f004 f824 	bl	8010b94 <_init>
 800cb4c:	1b64      	subs	r4, r4, r5
 800cb4e:	10a4      	asrs	r4, r4, #2
 800cb50:	2600      	movs	r6, #0
 800cb52:	42a6      	cmp	r6, r4
 800cb54:	d105      	bne.n	800cb62 <__libc_init_array+0x2e>
 800cb56:	bd70      	pop	{r4, r5, r6, pc}
 800cb58:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb5c:	4798      	blx	r3
 800cb5e:	3601      	adds	r6, #1
 800cb60:	e7ee      	b.n	800cb40 <__libc_init_array+0xc>
 800cb62:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb66:	4798      	blx	r3
 800cb68:	3601      	adds	r6, #1
 800cb6a:	e7f2      	b.n	800cb52 <__libc_init_array+0x1e>
 800cb6c:	08011368 	.word	0x08011368
 800cb70:	08011368 	.word	0x08011368
 800cb74:	08011368 	.word	0x08011368
 800cb78:	0801136c 	.word	0x0801136c

0800cb7c <__retarget_lock_init_recursive>:
 800cb7c:	4770      	bx	lr

0800cb7e <__retarget_lock_acquire_recursive>:
 800cb7e:	4770      	bx	lr

0800cb80 <__retarget_lock_release_recursive>:
 800cb80:	4770      	bx	lr

0800cb82 <memcpy>:
 800cb82:	440a      	add	r2, r1
 800cb84:	4291      	cmp	r1, r2
 800cb86:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb8a:	d100      	bne.n	800cb8e <memcpy+0xc>
 800cb8c:	4770      	bx	lr
 800cb8e:	b510      	push	{r4, lr}
 800cb90:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb94:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb98:	4291      	cmp	r1, r2
 800cb9a:	d1f9      	bne.n	800cb90 <memcpy+0xe>
 800cb9c:	bd10      	pop	{r4, pc}
	...

0800cba0 <nan>:
 800cba0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cba8 <nan+0x8>
 800cba4:	4770      	bx	lr
 800cba6:	bf00      	nop
 800cba8:	00000000 	.word	0x00000000
 800cbac:	7ff80000 	.word	0x7ff80000

0800cbb0 <nanf>:
 800cbb0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cbb8 <nanf+0x8>
 800cbb4:	4770      	bx	lr
 800cbb6:	bf00      	nop
 800cbb8:	7fc00000 	.word	0x7fc00000

0800cbbc <quorem>:
 800cbbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbc0:	6903      	ldr	r3, [r0, #16]
 800cbc2:	690c      	ldr	r4, [r1, #16]
 800cbc4:	42a3      	cmp	r3, r4
 800cbc6:	4607      	mov	r7, r0
 800cbc8:	db7e      	blt.n	800ccc8 <quorem+0x10c>
 800cbca:	3c01      	subs	r4, #1
 800cbcc:	f101 0814 	add.w	r8, r1, #20
 800cbd0:	00a3      	lsls	r3, r4, #2
 800cbd2:	f100 0514 	add.w	r5, r0, #20
 800cbd6:	9300      	str	r3, [sp, #0]
 800cbd8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cbdc:	9301      	str	r3, [sp, #4]
 800cbde:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cbe2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cbee:	fbb2 f6f3 	udiv	r6, r2, r3
 800cbf2:	d32e      	bcc.n	800cc52 <quorem+0x96>
 800cbf4:	f04f 0a00 	mov.w	sl, #0
 800cbf8:	46c4      	mov	ip, r8
 800cbfa:	46ae      	mov	lr, r5
 800cbfc:	46d3      	mov	fp, sl
 800cbfe:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cc02:	b298      	uxth	r0, r3
 800cc04:	fb06 a000 	mla	r0, r6, r0, sl
 800cc08:	0c02      	lsrs	r2, r0, #16
 800cc0a:	0c1b      	lsrs	r3, r3, #16
 800cc0c:	fb06 2303 	mla	r3, r6, r3, r2
 800cc10:	f8de 2000 	ldr.w	r2, [lr]
 800cc14:	b280      	uxth	r0, r0
 800cc16:	b292      	uxth	r2, r2
 800cc18:	1a12      	subs	r2, r2, r0
 800cc1a:	445a      	add	r2, fp
 800cc1c:	f8de 0000 	ldr.w	r0, [lr]
 800cc20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cc24:	b29b      	uxth	r3, r3
 800cc26:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cc2a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cc2e:	b292      	uxth	r2, r2
 800cc30:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cc34:	45e1      	cmp	r9, ip
 800cc36:	f84e 2b04 	str.w	r2, [lr], #4
 800cc3a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cc3e:	d2de      	bcs.n	800cbfe <quorem+0x42>
 800cc40:	9b00      	ldr	r3, [sp, #0]
 800cc42:	58eb      	ldr	r3, [r5, r3]
 800cc44:	b92b      	cbnz	r3, 800cc52 <quorem+0x96>
 800cc46:	9b01      	ldr	r3, [sp, #4]
 800cc48:	3b04      	subs	r3, #4
 800cc4a:	429d      	cmp	r5, r3
 800cc4c:	461a      	mov	r2, r3
 800cc4e:	d32f      	bcc.n	800ccb0 <quorem+0xf4>
 800cc50:	613c      	str	r4, [r7, #16]
 800cc52:	4638      	mov	r0, r7
 800cc54:	f001 fd10 	bl	800e678 <__mcmp>
 800cc58:	2800      	cmp	r0, #0
 800cc5a:	db25      	blt.n	800cca8 <quorem+0xec>
 800cc5c:	4629      	mov	r1, r5
 800cc5e:	2000      	movs	r0, #0
 800cc60:	f858 2b04 	ldr.w	r2, [r8], #4
 800cc64:	f8d1 c000 	ldr.w	ip, [r1]
 800cc68:	fa1f fe82 	uxth.w	lr, r2
 800cc6c:	fa1f f38c 	uxth.w	r3, ip
 800cc70:	eba3 030e 	sub.w	r3, r3, lr
 800cc74:	4403      	add	r3, r0
 800cc76:	0c12      	lsrs	r2, r2, #16
 800cc78:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cc7c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cc80:	b29b      	uxth	r3, r3
 800cc82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc86:	45c1      	cmp	r9, r8
 800cc88:	f841 3b04 	str.w	r3, [r1], #4
 800cc8c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cc90:	d2e6      	bcs.n	800cc60 <quorem+0xa4>
 800cc92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc9a:	b922      	cbnz	r2, 800cca6 <quorem+0xea>
 800cc9c:	3b04      	subs	r3, #4
 800cc9e:	429d      	cmp	r5, r3
 800cca0:	461a      	mov	r2, r3
 800cca2:	d30b      	bcc.n	800ccbc <quorem+0x100>
 800cca4:	613c      	str	r4, [r7, #16]
 800cca6:	3601      	adds	r6, #1
 800cca8:	4630      	mov	r0, r6
 800ccaa:	b003      	add	sp, #12
 800ccac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccb0:	6812      	ldr	r2, [r2, #0]
 800ccb2:	3b04      	subs	r3, #4
 800ccb4:	2a00      	cmp	r2, #0
 800ccb6:	d1cb      	bne.n	800cc50 <quorem+0x94>
 800ccb8:	3c01      	subs	r4, #1
 800ccba:	e7c6      	b.n	800cc4a <quorem+0x8e>
 800ccbc:	6812      	ldr	r2, [r2, #0]
 800ccbe:	3b04      	subs	r3, #4
 800ccc0:	2a00      	cmp	r2, #0
 800ccc2:	d1ef      	bne.n	800cca4 <quorem+0xe8>
 800ccc4:	3c01      	subs	r4, #1
 800ccc6:	e7ea      	b.n	800cc9e <quorem+0xe2>
 800ccc8:	2000      	movs	r0, #0
 800ccca:	e7ee      	b.n	800ccaa <quorem+0xee>
 800cccc:	0000      	movs	r0, r0
	...

0800ccd0 <_dtoa_r>:
 800ccd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd4:	69c7      	ldr	r7, [r0, #28]
 800ccd6:	b099      	sub	sp, #100	@ 0x64
 800ccd8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ccdc:	ec55 4b10 	vmov	r4, r5, d0
 800cce0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800cce2:	9109      	str	r1, [sp, #36]	@ 0x24
 800cce4:	4683      	mov	fp, r0
 800cce6:	920e      	str	r2, [sp, #56]	@ 0x38
 800cce8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ccea:	b97f      	cbnz	r7, 800cd0c <_dtoa_r+0x3c>
 800ccec:	2010      	movs	r0, #16
 800ccee:	f001 f937 	bl	800df60 <malloc>
 800ccf2:	4602      	mov	r2, r0
 800ccf4:	f8cb 001c 	str.w	r0, [fp, #28]
 800ccf8:	b920      	cbnz	r0, 800cd04 <_dtoa_r+0x34>
 800ccfa:	4ba7      	ldr	r3, [pc, #668]	@ (800cf98 <_dtoa_r+0x2c8>)
 800ccfc:	21ef      	movs	r1, #239	@ 0xef
 800ccfe:	48a7      	ldr	r0, [pc, #668]	@ (800cf9c <_dtoa_r+0x2cc>)
 800cd00:	f002 feb2 	bl	800fa68 <__assert_func>
 800cd04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cd08:	6007      	str	r7, [r0, #0]
 800cd0a:	60c7      	str	r7, [r0, #12]
 800cd0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cd10:	6819      	ldr	r1, [r3, #0]
 800cd12:	b159      	cbz	r1, 800cd2c <_dtoa_r+0x5c>
 800cd14:	685a      	ldr	r2, [r3, #4]
 800cd16:	604a      	str	r2, [r1, #4]
 800cd18:	2301      	movs	r3, #1
 800cd1a:	4093      	lsls	r3, r2
 800cd1c:	608b      	str	r3, [r1, #8]
 800cd1e:	4658      	mov	r0, fp
 800cd20:	f001 fa26 	bl	800e170 <_Bfree>
 800cd24:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	601a      	str	r2, [r3, #0]
 800cd2c:	1e2b      	subs	r3, r5, #0
 800cd2e:	bfb9      	ittee	lt
 800cd30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cd34:	9303      	strlt	r3, [sp, #12]
 800cd36:	2300      	movge	r3, #0
 800cd38:	6033      	strge	r3, [r6, #0]
 800cd3a:	9f03      	ldr	r7, [sp, #12]
 800cd3c:	4b98      	ldr	r3, [pc, #608]	@ (800cfa0 <_dtoa_r+0x2d0>)
 800cd3e:	bfbc      	itt	lt
 800cd40:	2201      	movlt	r2, #1
 800cd42:	6032      	strlt	r2, [r6, #0]
 800cd44:	43bb      	bics	r3, r7
 800cd46:	d112      	bne.n	800cd6e <_dtoa_r+0x9e>
 800cd48:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cd4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cd4e:	6013      	str	r3, [r2, #0]
 800cd50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cd54:	4323      	orrs	r3, r4
 800cd56:	f000 854d 	beq.w	800d7f4 <_dtoa_r+0xb24>
 800cd5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cd5c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800cfb4 <_dtoa_r+0x2e4>
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	f000 854f 	beq.w	800d804 <_dtoa_r+0xb34>
 800cd66:	f10a 0303 	add.w	r3, sl, #3
 800cd6a:	f000 bd49 	b.w	800d800 <_dtoa_r+0xb30>
 800cd6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cd72:	2200      	movs	r2, #0
 800cd74:	ec51 0b17 	vmov	r0, r1, d7
 800cd78:	2300      	movs	r3, #0
 800cd7a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800cd7e:	f7f3 feab 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd82:	4680      	mov	r8, r0
 800cd84:	b158      	cbz	r0, 800cd9e <_dtoa_r+0xce>
 800cd86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cd88:	2301      	movs	r3, #1
 800cd8a:	6013      	str	r3, [r2, #0]
 800cd8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cd8e:	b113      	cbz	r3, 800cd96 <_dtoa_r+0xc6>
 800cd90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cd92:	4b84      	ldr	r3, [pc, #528]	@ (800cfa4 <_dtoa_r+0x2d4>)
 800cd94:	6013      	str	r3, [r2, #0]
 800cd96:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800cfb8 <_dtoa_r+0x2e8>
 800cd9a:	f000 bd33 	b.w	800d804 <_dtoa_r+0xb34>
 800cd9e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cda2:	aa16      	add	r2, sp, #88	@ 0x58
 800cda4:	a917      	add	r1, sp, #92	@ 0x5c
 800cda6:	4658      	mov	r0, fp
 800cda8:	f001 fd86 	bl	800e8b8 <__d2b>
 800cdac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cdb0:	4681      	mov	r9, r0
 800cdb2:	2e00      	cmp	r6, #0
 800cdb4:	d077      	beq.n	800cea6 <_dtoa_r+0x1d6>
 800cdb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cdb8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800cdbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cdc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cdc4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cdc8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cdcc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	4b74      	ldr	r3, [pc, #464]	@ (800cfa8 <_dtoa_r+0x2d8>)
 800cdd6:	f7f3 fa5f 	bl	8000298 <__aeabi_dsub>
 800cdda:	a369      	add	r3, pc, #420	@ (adr r3, 800cf80 <_dtoa_r+0x2b0>)
 800cddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde0:	f7f3 fc12 	bl	8000608 <__aeabi_dmul>
 800cde4:	a368      	add	r3, pc, #416	@ (adr r3, 800cf88 <_dtoa_r+0x2b8>)
 800cde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdea:	f7f3 fa57 	bl	800029c <__adddf3>
 800cdee:	4604      	mov	r4, r0
 800cdf0:	4630      	mov	r0, r6
 800cdf2:	460d      	mov	r5, r1
 800cdf4:	f7f3 fb9e 	bl	8000534 <__aeabi_i2d>
 800cdf8:	a365      	add	r3, pc, #404	@ (adr r3, 800cf90 <_dtoa_r+0x2c0>)
 800cdfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdfe:	f7f3 fc03 	bl	8000608 <__aeabi_dmul>
 800ce02:	4602      	mov	r2, r0
 800ce04:	460b      	mov	r3, r1
 800ce06:	4620      	mov	r0, r4
 800ce08:	4629      	mov	r1, r5
 800ce0a:	f7f3 fa47 	bl	800029c <__adddf3>
 800ce0e:	4604      	mov	r4, r0
 800ce10:	460d      	mov	r5, r1
 800ce12:	f7f3 fea9 	bl	8000b68 <__aeabi_d2iz>
 800ce16:	2200      	movs	r2, #0
 800ce18:	4607      	mov	r7, r0
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	4620      	mov	r0, r4
 800ce1e:	4629      	mov	r1, r5
 800ce20:	f7f3 fe64 	bl	8000aec <__aeabi_dcmplt>
 800ce24:	b140      	cbz	r0, 800ce38 <_dtoa_r+0x168>
 800ce26:	4638      	mov	r0, r7
 800ce28:	f7f3 fb84 	bl	8000534 <__aeabi_i2d>
 800ce2c:	4622      	mov	r2, r4
 800ce2e:	462b      	mov	r3, r5
 800ce30:	f7f3 fe52 	bl	8000ad8 <__aeabi_dcmpeq>
 800ce34:	b900      	cbnz	r0, 800ce38 <_dtoa_r+0x168>
 800ce36:	3f01      	subs	r7, #1
 800ce38:	2f16      	cmp	r7, #22
 800ce3a:	d851      	bhi.n	800cee0 <_dtoa_r+0x210>
 800ce3c:	4b5b      	ldr	r3, [pc, #364]	@ (800cfac <_dtoa_r+0x2dc>)
 800ce3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ce42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ce4a:	f7f3 fe4f 	bl	8000aec <__aeabi_dcmplt>
 800ce4e:	2800      	cmp	r0, #0
 800ce50:	d048      	beq.n	800cee4 <_dtoa_r+0x214>
 800ce52:	3f01      	subs	r7, #1
 800ce54:	2300      	movs	r3, #0
 800ce56:	9312      	str	r3, [sp, #72]	@ 0x48
 800ce58:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ce5a:	1b9b      	subs	r3, r3, r6
 800ce5c:	1e5a      	subs	r2, r3, #1
 800ce5e:	bf44      	itt	mi
 800ce60:	f1c3 0801 	rsbmi	r8, r3, #1
 800ce64:	2300      	movmi	r3, #0
 800ce66:	9208      	str	r2, [sp, #32]
 800ce68:	bf54      	ite	pl
 800ce6a:	f04f 0800 	movpl.w	r8, #0
 800ce6e:	9308      	strmi	r3, [sp, #32]
 800ce70:	2f00      	cmp	r7, #0
 800ce72:	db39      	blt.n	800cee8 <_dtoa_r+0x218>
 800ce74:	9b08      	ldr	r3, [sp, #32]
 800ce76:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ce78:	443b      	add	r3, r7
 800ce7a:	9308      	str	r3, [sp, #32]
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce82:	2b09      	cmp	r3, #9
 800ce84:	d864      	bhi.n	800cf50 <_dtoa_r+0x280>
 800ce86:	2b05      	cmp	r3, #5
 800ce88:	bfc4      	itt	gt
 800ce8a:	3b04      	subgt	r3, #4
 800ce8c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ce8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce90:	f1a3 0302 	sub.w	r3, r3, #2
 800ce94:	bfcc      	ite	gt
 800ce96:	2400      	movgt	r4, #0
 800ce98:	2401      	movle	r4, #1
 800ce9a:	2b03      	cmp	r3, #3
 800ce9c:	d863      	bhi.n	800cf66 <_dtoa_r+0x296>
 800ce9e:	e8df f003 	tbb	[pc, r3]
 800cea2:	372a      	.short	0x372a
 800cea4:	5535      	.short	0x5535
 800cea6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ceaa:	441e      	add	r6, r3
 800ceac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ceb0:	2b20      	cmp	r3, #32
 800ceb2:	bfc1      	itttt	gt
 800ceb4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ceb8:	409f      	lslgt	r7, r3
 800ceba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cebe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cec2:	bfd6      	itet	le
 800cec4:	f1c3 0320 	rsble	r3, r3, #32
 800cec8:	ea47 0003 	orrgt.w	r0, r7, r3
 800cecc:	fa04 f003 	lslle.w	r0, r4, r3
 800ced0:	f7f3 fb20 	bl	8000514 <__aeabi_ui2d>
 800ced4:	2201      	movs	r2, #1
 800ced6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ceda:	3e01      	subs	r6, #1
 800cedc:	9214      	str	r2, [sp, #80]	@ 0x50
 800cede:	e777      	b.n	800cdd0 <_dtoa_r+0x100>
 800cee0:	2301      	movs	r3, #1
 800cee2:	e7b8      	b.n	800ce56 <_dtoa_r+0x186>
 800cee4:	9012      	str	r0, [sp, #72]	@ 0x48
 800cee6:	e7b7      	b.n	800ce58 <_dtoa_r+0x188>
 800cee8:	427b      	negs	r3, r7
 800ceea:	930a      	str	r3, [sp, #40]	@ 0x28
 800ceec:	2300      	movs	r3, #0
 800ceee:	eba8 0807 	sub.w	r8, r8, r7
 800cef2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cef4:	e7c4      	b.n	800ce80 <_dtoa_r+0x1b0>
 800cef6:	2300      	movs	r3, #0
 800cef8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cefa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	dc35      	bgt.n	800cf6c <_dtoa_r+0x29c>
 800cf00:	2301      	movs	r3, #1
 800cf02:	9300      	str	r3, [sp, #0]
 800cf04:	9307      	str	r3, [sp, #28]
 800cf06:	461a      	mov	r2, r3
 800cf08:	920e      	str	r2, [sp, #56]	@ 0x38
 800cf0a:	e00b      	b.n	800cf24 <_dtoa_r+0x254>
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	e7f3      	b.n	800cef8 <_dtoa_r+0x228>
 800cf10:	2300      	movs	r3, #0
 800cf12:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf16:	18fb      	adds	r3, r7, r3
 800cf18:	9300      	str	r3, [sp, #0]
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	9307      	str	r3, [sp, #28]
 800cf20:	bfb8      	it	lt
 800cf22:	2301      	movlt	r3, #1
 800cf24:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cf28:	2100      	movs	r1, #0
 800cf2a:	2204      	movs	r2, #4
 800cf2c:	f102 0514 	add.w	r5, r2, #20
 800cf30:	429d      	cmp	r5, r3
 800cf32:	d91f      	bls.n	800cf74 <_dtoa_r+0x2a4>
 800cf34:	6041      	str	r1, [r0, #4]
 800cf36:	4658      	mov	r0, fp
 800cf38:	f001 f8da 	bl	800e0f0 <_Balloc>
 800cf3c:	4682      	mov	sl, r0
 800cf3e:	2800      	cmp	r0, #0
 800cf40:	d13c      	bne.n	800cfbc <_dtoa_r+0x2ec>
 800cf42:	4b1b      	ldr	r3, [pc, #108]	@ (800cfb0 <_dtoa_r+0x2e0>)
 800cf44:	4602      	mov	r2, r0
 800cf46:	f240 11af 	movw	r1, #431	@ 0x1af
 800cf4a:	e6d8      	b.n	800ccfe <_dtoa_r+0x2e>
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	e7e0      	b.n	800cf12 <_dtoa_r+0x242>
 800cf50:	2401      	movs	r4, #1
 800cf52:	2300      	movs	r3, #0
 800cf54:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf56:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cf58:	f04f 33ff 	mov.w	r3, #4294967295
 800cf5c:	9300      	str	r3, [sp, #0]
 800cf5e:	9307      	str	r3, [sp, #28]
 800cf60:	2200      	movs	r2, #0
 800cf62:	2312      	movs	r3, #18
 800cf64:	e7d0      	b.n	800cf08 <_dtoa_r+0x238>
 800cf66:	2301      	movs	r3, #1
 800cf68:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf6a:	e7f5      	b.n	800cf58 <_dtoa_r+0x288>
 800cf6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf6e:	9300      	str	r3, [sp, #0]
 800cf70:	9307      	str	r3, [sp, #28]
 800cf72:	e7d7      	b.n	800cf24 <_dtoa_r+0x254>
 800cf74:	3101      	adds	r1, #1
 800cf76:	0052      	lsls	r2, r2, #1
 800cf78:	e7d8      	b.n	800cf2c <_dtoa_r+0x25c>
 800cf7a:	bf00      	nop
 800cf7c:	f3af 8000 	nop.w
 800cf80:	636f4361 	.word	0x636f4361
 800cf84:	3fd287a7 	.word	0x3fd287a7
 800cf88:	8b60c8b3 	.word	0x8b60c8b3
 800cf8c:	3fc68a28 	.word	0x3fc68a28
 800cf90:	509f79fb 	.word	0x509f79fb
 800cf94:	3fd34413 	.word	0x3fd34413
 800cf98:	08010f84 	.word	0x08010f84
 800cf9c:	08010f9b 	.word	0x08010f9b
 800cfa0:	7ff00000 	.word	0x7ff00000
 800cfa4:	080112e9 	.word	0x080112e9
 800cfa8:	3ff80000 	.word	0x3ff80000
 800cfac:	080110f8 	.word	0x080110f8
 800cfb0:	08010ff3 	.word	0x08010ff3
 800cfb4:	08010f80 	.word	0x08010f80
 800cfb8:	080112e8 	.word	0x080112e8
 800cfbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cfc0:	6018      	str	r0, [r3, #0]
 800cfc2:	9b07      	ldr	r3, [sp, #28]
 800cfc4:	2b0e      	cmp	r3, #14
 800cfc6:	f200 80a4 	bhi.w	800d112 <_dtoa_r+0x442>
 800cfca:	2c00      	cmp	r4, #0
 800cfcc:	f000 80a1 	beq.w	800d112 <_dtoa_r+0x442>
 800cfd0:	2f00      	cmp	r7, #0
 800cfd2:	dd33      	ble.n	800d03c <_dtoa_r+0x36c>
 800cfd4:	4bad      	ldr	r3, [pc, #692]	@ (800d28c <_dtoa_r+0x5bc>)
 800cfd6:	f007 020f 	and.w	r2, r7, #15
 800cfda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfde:	ed93 7b00 	vldr	d7, [r3]
 800cfe2:	05f8      	lsls	r0, r7, #23
 800cfe4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cfe8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cfec:	d516      	bpl.n	800d01c <_dtoa_r+0x34c>
 800cfee:	4ba8      	ldr	r3, [pc, #672]	@ (800d290 <_dtoa_r+0x5c0>)
 800cff0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cff4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cff8:	f7f3 fc30 	bl	800085c <__aeabi_ddiv>
 800cffc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d000:	f004 040f 	and.w	r4, r4, #15
 800d004:	2603      	movs	r6, #3
 800d006:	4da2      	ldr	r5, [pc, #648]	@ (800d290 <_dtoa_r+0x5c0>)
 800d008:	b954      	cbnz	r4, 800d020 <_dtoa_r+0x350>
 800d00a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d00e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d012:	f7f3 fc23 	bl	800085c <__aeabi_ddiv>
 800d016:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d01a:	e028      	b.n	800d06e <_dtoa_r+0x39e>
 800d01c:	2602      	movs	r6, #2
 800d01e:	e7f2      	b.n	800d006 <_dtoa_r+0x336>
 800d020:	07e1      	lsls	r1, r4, #31
 800d022:	d508      	bpl.n	800d036 <_dtoa_r+0x366>
 800d024:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d028:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d02c:	f7f3 faec 	bl	8000608 <__aeabi_dmul>
 800d030:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d034:	3601      	adds	r6, #1
 800d036:	1064      	asrs	r4, r4, #1
 800d038:	3508      	adds	r5, #8
 800d03a:	e7e5      	b.n	800d008 <_dtoa_r+0x338>
 800d03c:	f000 80d2 	beq.w	800d1e4 <_dtoa_r+0x514>
 800d040:	427c      	negs	r4, r7
 800d042:	4b92      	ldr	r3, [pc, #584]	@ (800d28c <_dtoa_r+0x5bc>)
 800d044:	4d92      	ldr	r5, [pc, #584]	@ (800d290 <_dtoa_r+0x5c0>)
 800d046:	f004 020f 	and.w	r2, r4, #15
 800d04a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d052:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d056:	f7f3 fad7 	bl	8000608 <__aeabi_dmul>
 800d05a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d05e:	1124      	asrs	r4, r4, #4
 800d060:	2300      	movs	r3, #0
 800d062:	2602      	movs	r6, #2
 800d064:	2c00      	cmp	r4, #0
 800d066:	f040 80b2 	bne.w	800d1ce <_dtoa_r+0x4fe>
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d1d3      	bne.n	800d016 <_dtoa_r+0x346>
 800d06e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d070:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d074:	2b00      	cmp	r3, #0
 800d076:	f000 80b7 	beq.w	800d1e8 <_dtoa_r+0x518>
 800d07a:	4b86      	ldr	r3, [pc, #536]	@ (800d294 <_dtoa_r+0x5c4>)
 800d07c:	2200      	movs	r2, #0
 800d07e:	4620      	mov	r0, r4
 800d080:	4629      	mov	r1, r5
 800d082:	f7f3 fd33 	bl	8000aec <__aeabi_dcmplt>
 800d086:	2800      	cmp	r0, #0
 800d088:	f000 80ae 	beq.w	800d1e8 <_dtoa_r+0x518>
 800d08c:	9b07      	ldr	r3, [sp, #28]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	f000 80aa 	beq.w	800d1e8 <_dtoa_r+0x518>
 800d094:	9b00      	ldr	r3, [sp, #0]
 800d096:	2b00      	cmp	r3, #0
 800d098:	dd37      	ble.n	800d10a <_dtoa_r+0x43a>
 800d09a:	1e7b      	subs	r3, r7, #1
 800d09c:	9304      	str	r3, [sp, #16]
 800d09e:	4620      	mov	r0, r4
 800d0a0:	4b7d      	ldr	r3, [pc, #500]	@ (800d298 <_dtoa_r+0x5c8>)
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	4629      	mov	r1, r5
 800d0a6:	f7f3 faaf 	bl	8000608 <__aeabi_dmul>
 800d0aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0ae:	9c00      	ldr	r4, [sp, #0]
 800d0b0:	3601      	adds	r6, #1
 800d0b2:	4630      	mov	r0, r6
 800d0b4:	f7f3 fa3e 	bl	8000534 <__aeabi_i2d>
 800d0b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d0bc:	f7f3 faa4 	bl	8000608 <__aeabi_dmul>
 800d0c0:	4b76      	ldr	r3, [pc, #472]	@ (800d29c <_dtoa_r+0x5cc>)
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	f7f3 f8ea 	bl	800029c <__adddf3>
 800d0c8:	4605      	mov	r5, r0
 800d0ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d0ce:	2c00      	cmp	r4, #0
 800d0d0:	f040 808d 	bne.w	800d1ee <_dtoa_r+0x51e>
 800d0d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0d8:	4b71      	ldr	r3, [pc, #452]	@ (800d2a0 <_dtoa_r+0x5d0>)
 800d0da:	2200      	movs	r2, #0
 800d0dc:	f7f3 f8dc 	bl	8000298 <__aeabi_dsub>
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	460b      	mov	r3, r1
 800d0e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d0e8:	462a      	mov	r2, r5
 800d0ea:	4633      	mov	r3, r6
 800d0ec:	f7f3 fd1c 	bl	8000b28 <__aeabi_dcmpgt>
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	f040 828b 	bne.w	800d60c <_dtoa_r+0x93c>
 800d0f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0fa:	462a      	mov	r2, r5
 800d0fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d100:	f7f3 fcf4 	bl	8000aec <__aeabi_dcmplt>
 800d104:	2800      	cmp	r0, #0
 800d106:	f040 8128 	bne.w	800d35a <_dtoa_r+0x68a>
 800d10a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d10e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d112:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d114:	2b00      	cmp	r3, #0
 800d116:	f2c0 815a 	blt.w	800d3ce <_dtoa_r+0x6fe>
 800d11a:	2f0e      	cmp	r7, #14
 800d11c:	f300 8157 	bgt.w	800d3ce <_dtoa_r+0x6fe>
 800d120:	4b5a      	ldr	r3, [pc, #360]	@ (800d28c <_dtoa_r+0x5bc>)
 800d122:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d126:	ed93 7b00 	vldr	d7, [r3]
 800d12a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	ed8d 7b00 	vstr	d7, [sp]
 800d132:	da03      	bge.n	800d13c <_dtoa_r+0x46c>
 800d134:	9b07      	ldr	r3, [sp, #28]
 800d136:	2b00      	cmp	r3, #0
 800d138:	f340 8101 	ble.w	800d33e <_dtoa_r+0x66e>
 800d13c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d140:	4656      	mov	r6, sl
 800d142:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d146:	4620      	mov	r0, r4
 800d148:	4629      	mov	r1, r5
 800d14a:	f7f3 fb87 	bl	800085c <__aeabi_ddiv>
 800d14e:	f7f3 fd0b 	bl	8000b68 <__aeabi_d2iz>
 800d152:	4680      	mov	r8, r0
 800d154:	f7f3 f9ee 	bl	8000534 <__aeabi_i2d>
 800d158:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d15c:	f7f3 fa54 	bl	8000608 <__aeabi_dmul>
 800d160:	4602      	mov	r2, r0
 800d162:	460b      	mov	r3, r1
 800d164:	4620      	mov	r0, r4
 800d166:	4629      	mov	r1, r5
 800d168:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d16c:	f7f3 f894 	bl	8000298 <__aeabi_dsub>
 800d170:	f806 4b01 	strb.w	r4, [r6], #1
 800d174:	9d07      	ldr	r5, [sp, #28]
 800d176:	eba6 040a 	sub.w	r4, r6, sl
 800d17a:	42a5      	cmp	r5, r4
 800d17c:	4602      	mov	r2, r0
 800d17e:	460b      	mov	r3, r1
 800d180:	f040 8117 	bne.w	800d3b2 <_dtoa_r+0x6e2>
 800d184:	f7f3 f88a 	bl	800029c <__adddf3>
 800d188:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d18c:	4604      	mov	r4, r0
 800d18e:	460d      	mov	r5, r1
 800d190:	f7f3 fcca 	bl	8000b28 <__aeabi_dcmpgt>
 800d194:	2800      	cmp	r0, #0
 800d196:	f040 80f9 	bne.w	800d38c <_dtoa_r+0x6bc>
 800d19a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d19e:	4620      	mov	r0, r4
 800d1a0:	4629      	mov	r1, r5
 800d1a2:	f7f3 fc99 	bl	8000ad8 <__aeabi_dcmpeq>
 800d1a6:	b118      	cbz	r0, 800d1b0 <_dtoa_r+0x4e0>
 800d1a8:	f018 0f01 	tst.w	r8, #1
 800d1ac:	f040 80ee 	bne.w	800d38c <_dtoa_r+0x6bc>
 800d1b0:	4649      	mov	r1, r9
 800d1b2:	4658      	mov	r0, fp
 800d1b4:	f000 ffdc 	bl	800e170 <_Bfree>
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	7033      	strb	r3, [r6, #0]
 800d1bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d1be:	3701      	adds	r7, #1
 800d1c0:	601f      	str	r7, [r3, #0]
 800d1c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	f000 831d 	beq.w	800d804 <_dtoa_r+0xb34>
 800d1ca:	601e      	str	r6, [r3, #0]
 800d1cc:	e31a      	b.n	800d804 <_dtoa_r+0xb34>
 800d1ce:	07e2      	lsls	r2, r4, #31
 800d1d0:	d505      	bpl.n	800d1de <_dtoa_r+0x50e>
 800d1d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d1d6:	f7f3 fa17 	bl	8000608 <__aeabi_dmul>
 800d1da:	3601      	adds	r6, #1
 800d1dc:	2301      	movs	r3, #1
 800d1de:	1064      	asrs	r4, r4, #1
 800d1e0:	3508      	adds	r5, #8
 800d1e2:	e73f      	b.n	800d064 <_dtoa_r+0x394>
 800d1e4:	2602      	movs	r6, #2
 800d1e6:	e742      	b.n	800d06e <_dtoa_r+0x39e>
 800d1e8:	9c07      	ldr	r4, [sp, #28]
 800d1ea:	9704      	str	r7, [sp, #16]
 800d1ec:	e761      	b.n	800d0b2 <_dtoa_r+0x3e2>
 800d1ee:	4b27      	ldr	r3, [pc, #156]	@ (800d28c <_dtoa_r+0x5bc>)
 800d1f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d1f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d1f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d1fa:	4454      	add	r4, sl
 800d1fc:	2900      	cmp	r1, #0
 800d1fe:	d053      	beq.n	800d2a8 <_dtoa_r+0x5d8>
 800d200:	4928      	ldr	r1, [pc, #160]	@ (800d2a4 <_dtoa_r+0x5d4>)
 800d202:	2000      	movs	r0, #0
 800d204:	f7f3 fb2a 	bl	800085c <__aeabi_ddiv>
 800d208:	4633      	mov	r3, r6
 800d20a:	462a      	mov	r2, r5
 800d20c:	f7f3 f844 	bl	8000298 <__aeabi_dsub>
 800d210:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d214:	4656      	mov	r6, sl
 800d216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d21a:	f7f3 fca5 	bl	8000b68 <__aeabi_d2iz>
 800d21e:	4605      	mov	r5, r0
 800d220:	f7f3 f988 	bl	8000534 <__aeabi_i2d>
 800d224:	4602      	mov	r2, r0
 800d226:	460b      	mov	r3, r1
 800d228:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d22c:	f7f3 f834 	bl	8000298 <__aeabi_dsub>
 800d230:	3530      	adds	r5, #48	@ 0x30
 800d232:	4602      	mov	r2, r0
 800d234:	460b      	mov	r3, r1
 800d236:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d23a:	f806 5b01 	strb.w	r5, [r6], #1
 800d23e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d242:	f7f3 fc53 	bl	8000aec <__aeabi_dcmplt>
 800d246:	2800      	cmp	r0, #0
 800d248:	d171      	bne.n	800d32e <_dtoa_r+0x65e>
 800d24a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d24e:	4911      	ldr	r1, [pc, #68]	@ (800d294 <_dtoa_r+0x5c4>)
 800d250:	2000      	movs	r0, #0
 800d252:	f7f3 f821 	bl	8000298 <__aeabi_dsub>
 800d256:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d25a:	f7f3 fc47 	bl	8000aec <__aeabi_dcmplt>
 800d25e:	2800      	cmp	r0, #0
 800d260:	f040 8095 	bne.w	800d38e <_dtoa_r+0x6be>
 800d264:	42a6      	cmp	r6, r4
 800d266:	f43f af50 	beq.w	800d10a <_dtoa_r+0x43a>
 800d26a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d26e:	4b0a      	ldr	r3, [pc, #40]	@ (800d298 <_dtoa_r+0x5c8>)
 800d270:	2200      	movs	r2, #0
 800d272:	f7f3 f9c9 	bl	8000608 <__aeabi_dmul>
 800d276:	4b08      	ldr	r3, [pc, #32]	@ (800d298 <_dtoa_r+0x5c8>)
 800d278:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d27c:	2200      	movs	r2, #0
 800d27e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d282:	f7f3 f9c1 	bl	8000608 <__aeabi_dmul>
 800d286:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d28a:	e7c4      	b.n	800d216 <_dtoa_r+0x546>
 800d28c:	080110f8 	.word	0x080110f8
 800d290:	080110d0 	.word	0x080110d0
 800d294:	3ff00000 	.word	0x3ff00000
 800d298:	40240000 	.word	0x40240000
 800d29c:	401c0000 	.word	0x401c0000
 800d2a0:	40140000 	.word	0x40140000
 800d2a4:	3fe00000 	.word	0x3fe00000
 800d2a8:	4631      	mov	r1, r6
 800d2aa:	4628      	mov	r0, r5
 800d2ac:	f7f3 f9ac 	bl	8000608 <__aeabi_dmul>
 800d2b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d2b4:	9415      	str	r4, [sp, #84]	@ 0x54
 800d2b6:	4656      	mov	r6, sl
 800d2b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2bc:	f7f3 fc54 	bl	8000b68 <__aeabi_d2iz>
 800d2c0:	4605      	mov	r5, r0
 800d2c2:	f7f3 f937 	bl	8000534 <__aeabi_i2d>
 800d2c6:	4602      	mov	r2, r0
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2ce:	f7f2 ffe3 	bl	8000298 <__aeabi_dsub>
 800d2d2:	3530      	adds	r5, #48	@ 0x30
 800d2d4:	f806 5b01 	strb.w	r5, [r6], #1
 800d2d8:	4602      	mov	r2, r0
 800d2da:	460b      	mov	r3, r1
 800d2dc:	42a6      	cmp	r6, r4
 800d2de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d2e2:	f04f 0200 	mov.w	r2, #0
 800d2e6:	d124      	bne.n	800d332 <_dtoa_r+0x662>
 800d2e8:	4bac      	ldr	r3, [pc, #688]	@ (800d59c <_dtoa_r+0x8cc>)
 800d2ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d2ee:	f7f2 ffd5 	bl	800029c <__adddf3>
 800d2f2:	4602      	mov	r2, r0
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2fa:	f7f3 fc15 	bl	8000b28 <__aeabi_dcmpgt>
 800d2fe:	2800      	cmp	r0, #0
 800d300:	d145      	bne.n	800d38e <_dtoa_r+0x6be>
 800d302:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d306:	49a5      	ldr	r1, [pc, #660]	@ (800d59c <_dtoa_r+0x8cc>)
 800d308:	2000      	movs	r0, #0
 800d30a:	f7f2 ffc5 	bl	8000298 <__aeabi_dsub>
 800d30e:	4602      	mov	r2, r0
 800d310:	460b      	mov	r3, r1
 800d312:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d316:	f7f3 fbe9 	bl	8000aec <__aeabi_dcmplt>
 800d31a:	2800      	cmp	r0, #0
 800d31c:	f43f aef5 	beq.w	800d10a <_dtoa_r+0x43a>
 800d320:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d322:	1e73      	subs	r3, r6, #1
 800d324:	9315      	str	r3, [sp, #84]	@ 0x54
 800d326:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d32a:	2b30      	cmp	r3, #48	@ 0x30
 800d32c:	d0f8      	beq.n	800d320 <_dtoa_r+0x650>
 800d32e:	9f04      	ldr	r7, [sp, #16]
 800d330:	e73e      	b.n	800d1b0 <_dtoa_r+0x4e0>
 800d332:	4b9b      	ldr	r3, [pc, #620]	@ (800d5a0 <_dtoa_r+0x8d0>)
 800d334:	f7f3 f968 	bl	8000608 <__aeabi_dmul>
 800d338:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d33c:	e7bc      	b.n	800d2b8 <_dtoa_r+0x5e8>
 800d33e:	d10c      	bne.n	800d35a <_dtoa_r+0x68a>
 800d340:	4b98      	ldr	r3, [pc, #608]	@ (800d5a4 <_dtoa_r+0x8d4>)
 800d342:	2200      	movs	r2, #0
 800d344:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d348:	f7f3 f95e 	bl	8000608 <__aeabi_dmul>
 800d34c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d350:	f7f3 fbe0 	bl	8000b14 <__aeabi_dcmpge>
 800d354:	2800      	cmp	r0, #0
 800d356:	f000 8157 	beq.w	800d608 <_dtoa_r+0x938>
 800d35a:	2400      	movs	r4, #0
 800d35c:	4625      	mov	r5, r4
 800d35e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d360:	43db      	mvns	r3, r3
 800d362:	9304      	str	r3, [sp, #16]
 800d364:	4656      	mov	r6, sl
 800d366:	2700      	movs	r7, #0
 800d368:	4621      	mov	r1, r4
 800d36a:	4658      	mov	r0, fp
 800d36c:	f000 ff00 	bl	800e170 <_Bfree>
 800d370:	2d00      	cmp	r5, #0
 800d372:	d0dc      	beq.n	800d32e <_dtoa_r+0x65e>
 800d374:	b12f      	cbz	r7, 800d382 <_dtoa_r+0x6b2>
 800d376:	42af      	cmp	r7, r5
 800d378:	d003      	beq.n	800d382 <_dtoa_r+0x6b2>
 800d37a:	4639      	mov	r1, r7
 800d37c:	4658      	mov	r0, fp
 800d37e:	f000 fef7 	bl	800e170 <_Bfree>
 800d382:	4629      	mov	r1, r5
 800d384:	4658      	mov	r0, fp
 800d386:	f000 fef3 	bl	800e170 <_Bfree>
 800d38a:	e7d0      	b.n	800d32e <_dtoa_r+0x65e>
 800d38c:	9704      	str	r7, [sp, #16]
 800d38e:	4633      	mov	r3, r6
 800d390:	461e      	mov	r6, r3
 800d392:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d396:	2a39      	cmp	r2, #57	@ 0x39
 800d398:	d107      	bne.n	800d3aa <_dtoa_r+0x6da>
 800d39a:	459a      	cmp	sl, r3
 800d39c:	d1f8      	bne.n	800d390 <_dtoa_r+0x6c0>
 800d39e:	9a04      	ldr	r2, [sp, #16]
 800d3a0:	3201      	adds	r2, #1
 800d3a2:	9204      	str	r2, [sp, #16]
 800d3a4:	2230      	movs	r2, #48	@ 0x30
 800d3a6:	f88a 2000 	strb.w	r2, [sl]
 800d3aa:	781a      	ldrb	r2, [r3, #0]
 800d3ac:	3201      	adds	r2, #1
 800d3ae:	701a      	strb	r2, [r3, #0]
 800d3b0:	e7bd      	b.n	800d32e <_dtoa_r+0x65e>
 800d3b2:	4b7b      	ldr	r3, [pc, #492]	@ (800d5a0 <_dtoa_r+0x8d0>)
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	f7f3 f927 	bl	8000608 <__aeabi_dmul>
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	2300      	movs	r3, #0
 800d3be:	4604      	mov	r4, r0
 800d3c0:	460d      	mov	r5, r1
 800d3c2:	f7f3 fb89 	bl	8000ad8 <__aeabi_dcmpeq>
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	f43f aebb 	beq.w	800d142 <_dtoa_r+0x472>
 800d3cc:	e6f0      	b.n	800d1b0 <_dtoa_r+0x4e0>
 800d3ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d3d0:	2a00      	cmp	r2, #0
 800d3d2:	f000 80db 	beq.w	800d58c <_dtoa_r+0x8bc>
 800d3d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3d8:	2a01      	cmp	r2, #1
 800d3da:	f300 80bf 	bgt.w	800d55c <_dtoa_r+0x88c>
 800d3de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d3e0:	2a00      	cmp	r2, #0
 800d3e2:	f000 80b7 	beq.w	800d554 <_dtoa_r+0x884>
 800d3e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d3ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d3ec:	4646      	mov	r6, r8
 800d3ee:	9a08      	ldr	r2, [sp, #32]
 800d3f0:	2101      	movs	r1, #1
 800d3f2:	441a      	add	r2, r3
 800d3f4:	4658      	mov	r0, fp
 800d3f6:	4498      	add	r8, r3
 800d3f8:	9208      	str	r2, [sp, #32]
 800d3fa:	f000 ffb7 	bl	800e36c <__i2b>
 800d3fe:	4605      	mov	r5, r0
 800d400:	b15e      	cbz	r6, 800d41a <_dtoa_r+0x74a>
 800d402:	9b08      	ldr	r3, [sp, #32]
 800d404:	2b00      	cmp	r3, #0
 800d406:	dd08      	ble.n	800d41a <_dtoa_r+0x74a>
 800d408:	42b3      	cmp	r3, r6
 800d40a:	9a08      	ldr	r2, [sp, #32]
 800d40c:	bfa8      	it	ge
 800d40e:	4633      	movge	r3, r6
 800d410:	eba8 0803 	sub.w	r8, r8, r3
 800d414:	1af6      	subs	r6, r6, r3
 800d416:	1ad3      	subs	r3, r2, r3
 800d418:	9308      	str	r3, [sp, #32]
 800d41a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d41c:	b1f3      	cbz	r3, 800d45c <_dtoa_r+0x78c>
 800d41e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d420:	2b00      	cmp	r3, #0
 800d422:	f000 80b7 	beq.w	800d594 <_dtoa_r+0x8c4>
 800d426:	b18c      	cbz	r4, 800d44c <_dtoa_r+0x77c>
 800d428:	4629      	mov	r1, r5
 800d42a:	4622      	mov	r2, r4
 800d42c:	4658      	mov	r0, fp
 800d42e:	f001 f85d 	bl	800e4ec <__pow5mult>
 800d432:	464a      	mov	r2, r9
 800d434:	4601      	mov	r1, r0
 800d436:	4605      	mov	r5, r0
 800d438:	4658      	mov	r0, fp
 800d43a:	f000 ffad 	bl	800e398 <__multiply>
 800d43e:	4649      	mov	r1, r9
 800d440:	9004      	str	r0, [sp, #16]
 800d442:	4658      	mov	r0, fp
 800d444:	f000 fe94 	bl	800e170 <_Bfree>
 800d448:	9b04      	ldr	r3, [sp, #16]
 800d44a:	4699      	mov	r9, r3
 800d44c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d44e:	1b1a      	subs	r2, r3, r4
 800d450:	d004      	beq.n	800d45c <_dtoa_r+0x78c>
 800d452:	4649      	mov	r1, r9
 800d454:	4658      	mov	r0, fp
 800d456:	f001 f849 	bl	800e4ec <__pow5mult>
 800d45a:	4681      	mov	r9, r0
 800d45c:	2101      	movs	r1, #1
 800d45e:	4658      	mov	r0, fp
 800d460:	f000 ff84 	bl	800e36c <__i2b>
 800d464:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d466:	4604      	mov	r4, r0
 800d468:	2b00      	cmp	r3, #0
 800d46a:	f000 81cf 	beq.w	800d80c <_dtoa_r+0xb3c>
 800d46e:	461a      	mov	r2, r3
 800d470:	4601      	mov	r1, r0
 800d472:	4658      	mov	r0, fp
 800d474:	f001 f83a 	bl	800e4ec <__pow5mult>
 800d478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d47a:	2b01      	cmp	r3, #1
 800d47c:	4604      	mov	r4, r0
 800d47e:	f300 8095 	bgt.w	800d5ac <_dtoa_r+0x8dc>
 800d482:	9b02      	ldr	r3, [sp, #8]
 800d484:	2b00      	cmp	r3, #0
 800d486:	f040 8087 	bne.w	800d598 <_dtoa_r+0x8c8>
 800d48a:	9b03      	ldr	r3, [sp, #12]
 800d48c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d490:	2b00      	cmp	r3, #0
 800d492:	f040 8089 	bne.w	800d5a8 <_dtoa_r+0x8d8>
 800d496:	9b03      	ldr	r3, [sp, #12]
 800d498:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d49c:	0d1b      	lsrs	r3, r3, #20
 800d49e:	051b      	lsls	r3, r3, #20
 800d4a0:	b12b      	cbz	r3, 800d4ae <_dtoa_r+0x7de>
 800d4a2:	9b08      	ldr	r3, [sp, #32]
 800d4a4:	3301      	adds	r3, #1
 800d4a6:	9308      	str	r3, [sp, #32]
 800d4a8:	f108 0801 	add.w	r8, r8, #1
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800d4b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	f000 81b0 	beq.w	800d818 <_dtoa_r+0xb48>
 800d4b8:	6923      	ldr	r3, [r4, #16]
 800d4ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d4be:	6918      	ldr	r0, [r3, #16]
 800d4c0:	f000 ff08 	bl	800e2d4 <__hi0bits>
 800d4c4:	f1c0 0020 	rsb	r0, r0, #32
 800d4c8:	9b08      	ldr	r3, [sp, #32]
 800d4ca:	4418      	add	r0, r3
 800d4cc:	f010 001f 	ands.w	r0, r0, #31
 800d4d0:	d077      	beq.n	800d5c2 <_dtoa_r+0x8f2>
 800d4d2:	f1c0 0320 	rsb	r3, r0, #32
 800d4d6:	2b04      	cmp	r3, #4
 800d4d8:	dd6b      	ble.n	800d5b2 <_dtoa_r+0x8e2>
 800d4da:	9b08      	ldr	r3, [sp, #32]
 800d4dc:	f1c0 001c 	rsb	r0, r0, #28
 800d4e0:	4403      	add	r3, r0
 800d4e2:	4480      	add	r8, r0
 800d4e4:	4406      	add	r6, r0
 800d4e6:	9308      	str	r3, [sp, #32]
 800d4e8:	f1b8 0f00 	cmp.w	r8, #0
 800d4ec:	dd05      	ble.n	800d4fa <_dtoa_r+0x82a>
 800d4ee:	4649      	mov	r1, r9
 800d4f0:	4642      	mov	r2, r8
 800d4f2:	4658      	mov	r0, fp
 800d4f4:	f001 f854 	bl	800e5a0 <__lshift>
 800d4f8:	4681      	mov	r9, r0
 800d4fa:	9b08      	ldr	r3, [sp, #32]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	dd05      	ble.n	800d50c <_dtoa_r+0x83c>
 800d500:	4621      	mov	r1, r4
 800d502:	461a      	mov	r2, r3
 800d504:	4658      	mov	r0, fp
 800d506:	f001 f84b 	bl	800e5a0 <__lshift>
 800d50a:	4604      	mov	r4, r0
 800d50c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d059      	beq.n	800d5c6 <_dtoa_r+0x8f6>
 800d512:	4621      	mov	r1, r4
 800d514:	4648      	mov	r0, r9
 800d516:	f001 f8af 	bl	800e678 <__mcmp>
 800d51a:	2800      	cmp	r0, #0
 800d51c:	da53      	bge.n	800d5c6 <_dtoa_r+0x8f6>
 800d51e:	1e7b      	subs	r3, r7, #1
 800d520:	9304      	str	r3, [sp, #16]
 800d522:	4649      	mov	r1, r9
 800d524:	2300      	movs	r3, #0
 800d526:	220a      	movs	r2, #10
 800d528:	4658      	mov	r0, fp
 800d52a:	f000 fe43 	bl	800e1b4 <__multadd>
 800d52e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d530:	4681      	mov	r9, r0
 800d532:	2b00      	cmp	r3, #0
 800d534:	f000 8172 	beq.w	800d81c <_dtoa_r+0xb4c>
 800d538:	2300      	movs	r3, #0
 800d53a:	4629      	mov	r1, r5
 800d53c:	220a      	movs	r2, #10
 800d53e:	4658      	mov	r0, fp
 800d540:	f000 fe38 	bl	800e1b4 <__multadd>
 800d544:	9b00      	ldr	r3, [sp, #0]
 800d546:	2b00      	cmp	r3, #0
 800d548:	4605      	mov	r5, r0
 800d54a:	dc67      	bgt.n	800d61c <_dtoa_r+0x94c>
 800d54c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d54e:	2b02      	cmp	r3, #2
 800d550:	dc41      	bgt.n	800d5d6 <_dtoa_r+0x906>
 800d552:	e063      	b.n	800d61c <_dtoa_r+0x94c>
 800d554:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d556:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d55a:	e746      	b.n	800d3ea <_dtoa_r+0x71a>
 800d55c:	9b07      	ldr	r3, [sp, #28]
 800d55e:	1e5c      	subs	r4, r3, #1
 800d560:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d562:	42a3      	cmp	r3, r4
 800d564:	bfbf      	itttt	lt
 800d566:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d568:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d56a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d56c:	1ae3      	sublt	r3, r4, r3
 800d56e:	bfb4      	ite	lt
 800d570:	18d2      	addlt	r2, r2, r3
 800d572:	1b1c      	subge	r4, r3, r4
 800d574:	9b07      	ldr	r3, [sp, #28]
 800d576:	bfbc      	itt	lt
 800d578:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d57a:	2400      	movlt	r4, #0
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	bfb5      	itete	lt
 800d580:	eba8 0603 	sublt.w	r6, r8, r3
 800d584:	9b07      	ldrge	r3, [sp, #28]
 800d586:	2300      	movlt	r3, #0
 800d588:	4646      	movge	r6, r8
 800d58a:	e730      	b.n	800d3ee <_dtoa_r+0x71e>
 800d58c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d58e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d590:	4646      	mov	r6, r8
 800d592:	e735      	b.n	800d400 <_dtoa_r+0x730>
 800d594:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d596:	e75c      	b.n	800d452 <_dtoa_r+0x782>
 800d598:	2300      	movs	r3, #0
 800d59a:	e788      	b.n	800d4ae <_dtoa_r+0x7de>
 800d59c:	3fe00000 	.word	0x3fe00000
 800d5a0:	40240000 	.word	0x40240000
 800d5a4:	40140000 	.word	0x40140000
 800d5a8:	9b02      	ldr	r3, [sp, #8]
 800d5aa:	e780      	b.n	800d4ae <_dtoa_r+0x7de>
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5b0:	e782      	b.n	800d4b8 <_dtoa_r+0x7e8>
 800d5b2:	d099      	beq.n	800d4e8 <_dtoa_r+0x818>
 800d5b4:	9a08      	ldr	r2, [sp, #32]
 800d5b6:	331c      	adds	r3, #28
 800d5b8:	441a      	add	r2, r3
 800d5ba:	4498      	add	r8, r3
 800d5bc:	441e      	add	r6, r3
 800d5be:	9208      	str	r2, [sp, #32]
 800d5c0:	e792      	b.n	800d4e8 <_dtoa_r+0x818>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	e7f6      	b.n	800d5b4 <_dtoa_r+0x8e4>
 800d5c6:	9b07      	ldr	r3, [sp, #28]
 800d5c8:	9704      	str	r7, [sp, #16]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	dc20      	bgt.n	800d610 <_dtoa_r+0x940>
 800d5ce:	9300      	str	r3, [sp, #0]
 800d5d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5d2:	2b02      	cmp	r3, #2
 800d5d4:	dd1e      	ble.n	800d614 <_dtoa_r+0x944>
 800d5d6:	9b00      	ldr	r3, [sp, #0]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	f47f aec0 	bne.w	800d35e <_dtoa_r+0x68e>
 800d5de:	4621      	mov	r1, r4
 800d5e0:	2205      	movs	r2, #5
 800d5e2:	4658      	mov	r0, fp
 800d5e4:	f000 fde6 	bl	800e1b4 <__multadd>
 800d5e8:	4601      	mov	r1, r0
 800d5ea:	4604      	mov	r4, r0
 800d5ec:	4648      	mov	r0, r9
 800d5ee:	f001 f843 	bl	800e678 <__mcmp>
 800d5f2:	2800      	cmp	r0, #0
 800d5f4:	f77f aeb3 	ble.w	800d35e <_dtoa_r+0x68e>
 800d5f8:	4656      	mov	r6, sl
 800d5fa:	2331      	movs	r3, #49	@ 0x31
 800d5fc:	f806 3b01 	strb.w	r3, [r6], #1
 800d600:	9b04      	ldr	r3, [sp, #16]
 800d602:	3301      	adds	r3, #1
 800d604:	9304      	str	r3, [sp, #16]
 800d606:	e6ae      	b.n	800d366 <_dtoa_r+0x696>
 800d608:	9c07      	ldr	r4, [sp, #28]
 800d60a:	9704      	str	r7, [sp, #16]
 800d60c:	4625      	mov	r5, r4
 800d60e:	e7f3      	b.n	800d5f8 <_dtoa_r+0x928>
 800d610:	9b07      	ldr	r3, [sp, #28]
 800d612:	9300      	str	r3, [sp, #0]
 800d614:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d616:	2b00      	cmp	r3, #0
 800d618:	f000 8104 	beq.w	800d824 <_dtoa_r+0xb54>
 800d61c:	2e00      	cmp	r6, #0
 800d61e:	dd05      	ble.n	800d62c <_dtoa_r+0x95c>
 800d620:	4629      	mov	r1, r5
 800d622:	4632      	mov	r2, r6
 800d624:	4658      	mov	r0, fp
 800d626:	f000 ffbb 	bl	800e5a0 <__lshift>
 800d62a:	4605      	mov	r5, r0
 800d62c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d05a      	beq.n	800d6e8 <_dtoa_r+0xa18>
 800d632:	6869      	ldr	r1, [r5, #4]
 800d634:	4658      	mov	r0, fp
 800d636:	f000 fd5b 	bl	800e0f0 <_Balloc>
 800d63a:	4606      	mov	r6, r0
 800d63c:	b928      	cbnz	r0, 800d64a <_dtoa_r+0x97a>
 800d63e:	4b84      	ldr	r3, [pc, #528]	@ (800d850 <_dtoa_r+0xb80>)
 800d640:	4602      	mov	r2, r0
 800d642:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d646:	f7ff bb5a 	b.w	800ccfe <_dtoa_r+0x2e>
 800d64a:	692a      	ldr	r2, [r5, #16]
 800d64c:	3202      	adds	r2, #2
 800d64e:	0092      	lsls	r2, r2, #2
 800d650:	f105 010c 	add.w	r1, r5, #12
 800d654:	300c      	adds	r0, #12
 800d656:	f7ff fa94 	bl	800cb82 <memcpy>
 800d65a:	2201      	movs	r2, #1
 800d65c:	4631      	mov	r1, r6
 800d65e:	4658      	mov	r0, fp
 800d660:	f000 ff9e 	bl	800e5a0 <__lshift>
 800d664:	f10a 0301 	add.w	r3, sl, #1
 800d668:	9307      	str	r3, [sp, #28]
 800d66a:	9b00      	ldr	r3, [sp, #0]
 800d66c:	4453      	add	r3, sl
 800d66e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d670:	9b02      	ldr	r3, [sp, #8]
 800d672:	f003 0301 	and.w	r3, r3, #1
 800d676:	462f      	mov	r7, r5
 800d678:	930a      	str	r3, [sp, #40]	@ 0x28
 800d67a:	4605      	mov	r5, r0
 800d67c:	9b07      	ldr	r3, [sp, #28]
 800d67e:	4621      	mov	r1, r4
 800d680:	3b01      	subs	r3, #1
 800d682:	4648      	mov	r0, r9
 800d684:	9300      	str	r3, [sp, #0]
 800d686:	f7ff fa99 	bl	800cbbc <quorem>
 800d68a:	4639      	mov	r1, r7
 800d68c:	9002      	str	r0, [sp, #8]
 800d68e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d692:	4648      	mov	r0, r9
 800d694:	f000 fff0 	bl	800e678 <__mcmp>
 800d698:	462a      	mov	r2, r5
 800d69a:	9008      	str	r0, [sp, #32]
 800d69c:	4621      	mov	r1, r4
 800d69e:	4658      	mov	r0, fp
 800d6a0:	f001 f806 	bl	800e6b0 <__mdiff>
 800d6a4:	68c2      	ldr	r2, [r0, #12]
 800d6a6:	4606      	mov	r6, r0
 800d6a8:	bb02      	cbnz	r2, 800d6ec <_dtoa_r+0xa1c>
 800d6aa:	4601      	mov	r1, r0
 800d6ac:	4648      	mov	r0, r9
 800d6ae:	f000 ffe3 	bl	800e678 <__mcmp>
 800d6b2:	4602      	mov	r2, r0
 800d6b4:	4631      	mov	r1, r6
 800d6b6:	4658      	mov	r0, fp
 800d6b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d6ba:	f000 fd59 	bl	800e170 <_Bfree>
 800d6be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d6c2:	9e07      	ldr	r6, [sp, #28]
 800d6c4:	ea43 0102 	orr.w	r1, r3, r2
 800d6c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d6ca:	4319      	orrs	r1, r3
 800d6cc:	d110      	bne.n	800d6f0 <_dtoa_r+0xa20>
 800d6ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d6d2:	d029      	beq.n	800d728 <_dtoa_r+0xa58>
 800d6d4:	9b08      	ldr	r3, [sp, #32]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	dd02      	ble.n	800d6e0 <_dtoa_r+0xa10>
 800d6da:	9b02      	ldr	r3, [sp, #8]
 800d6dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d6e0:	9b00      	ldr	r3, [sp, #0]
 800d6e2:	f883 8000 	strb.w	r8, [r3]
 800d6e6:	e63f      	b.n	800d368 <_dtoa_r+0x698>
 800d6e8:	4628      	mov	r0, r5
 800d6ea:	e7bb      	b.n	800d664 <_dtoa_r+0x994>
 800d6ec:	2201      	movs	r2, #1
 800d6ee:	e7e1      	b.n	800d6b4 <_dtoa_r+0x9e4>
 800d6f0:	9b08      	ldr	r3, [sp, #32]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	db04      	blt.n	800d700 <_dtoa_r+0xa30>
 800d6f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d6f8:	430b      	orrs	r3, r1
 800d6fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d6fc:	430b      	orrs	r3, r1
 800d6fe:	d120      	bne.n	800d742 <_dtoa_r+0xa72>
 800d700:	2a00      	cmp	r2, #0
 800d702:	dded      	ble.n	800d6e0 <_dtoa_r+0xa10>
 800d704:	4649      	mov	r1, r9
 800d706:	2201      	movs	r2, #1
 800d708:	4658      	mov	r0, fp
 800d70a:	f000 ff49 	bl	800e5a0 <__lshift>
 800d70e:	4621      	mov	r1, r4
 800d710:	4681      	mov	r9, r0
 800d712:	f000 ffb1 	bl	800e678 <__mcmp>
 800d716:	2800      	cmp	r0, #0
 800d718:	dc03      	bgt.n	800d722 <_dtoa_r+0xa52>
 800d71a:	d1e1      	bne.n	800d6e0 <_dtoa_r+0xa10>
 800d71c:	f018 0f01 	tst.w	r8, #1
 800d720:	d0de      	beq.n	800d6e0 <_dtoa_r+0xa10>
 800d722:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d726:	d1d8      	bne.n	800d6da <_dtoa_r+0xa0a>
 800d728:	9a00      	ldr	r2, [sp, #0]
 800d72a:	2339      	movs	r3, #57	@ 0x39
 800d72c:	7013      	strb	r3, [r2, #0]
 800d72e:	4633      	mov	r3, r6
 800d730:	461e      	mov	r6, r3
 800d732:	3b01      	subs	r3, #1
 800d734:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d738:	2a39      	cmp	r2, #57	@ 0x39
 800d73a:	d052      	beq.n	800d7e2 <_dtoa_r+0xb12>
 800d73c:	3201      	adds	r2, #1
 800d73e:	701a      	strb	r2, [r3, #0]
 800d740:	e612      	b.n	800d368 <_dtoa_r+0x698>
 800d742:	2a00      	cmp	r2, #0
 800d744:	dd07      	ble.n	800d756 <_dtoa_r+0xa86>
 800d746:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d74a:	d0ed      	beq.n	800d728 <_dtoa_r+0xa58>
 800d74c:	9a00      	ldr	r2, [sp, #0]
 800d74e:	f108 0301 	add.w	r3, r8, #1
 800d752:	7013      	strb	r3, [r2, #0]
 800d754:	e608      	b.n	800d368 <_dtoa_r+0x698>
 800d756:	9b07      	ldr	r3, [sp, #28]
 800d758:	9a07      	ldr	r2, [sp, #28]
 800d75a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d75e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d760:	4293      	cmp	r3, r2
 800d762:	d028      	beq.n	800d7b6 <_dtoa_r+0xae6>
 800d764:	4649      	mov	r1, r9
 800d766:	2300      	movs	r3, #0
 800d768:	220a      	movs	r2, #10
 800d76a:	4658      	mov	r0, fp
 800d76c:	f000 fd22 	bl	800e1b4 <__multadd>
 800d770:	42af      	cmp	r7, r5
 800d772:	4681      	mov	r9, r0
 800d774:	f04f 0300 	mov.w	r3, #0
 800d778:	f04f 020a 	mov.w	r2, #10
 800d77c:	4639      	mov	r1, r7
 800d77e:	4658      	mov	r0, fp
 800d780:	d107      	bne.n	800d792 <_dtoa_r+0xac2>
 800d782:	f000 fd17 	bl	800e1b4 <__multadd>
 800d786:	4607      	mov	r7, r0
 800d788:	4605      	mov	r5, r0
 800d78a:	9b07      	ldr	r3, [sp, #28]
 800d78c:	3301      	adds	r3, #1
 800d78e:	9307      	str	r3, [sp, #28]
 800d790:	e774      	b.n	800d67c <_dtoa_r+0x9ac>
 800d792:	f000 fd0f 	bl	800e1b4 <__multadd>
 800d796:	4629      	mov	r1, r5
 800d798:	4607      	mov	r7, r0
 800d79a:	2300      	movs	r3, #0
 800d79c:	220a      	movs	r2, #10
 800d79e:	4658      	mov	r0, fp
 800d7a0:	f000 fd08 	bl	800e1b4 <__multadd>
 800d7a4:	4605      	mov	r5, r0
 800d7a6:	e7f0      	b.n	800d78a <_dtoa_r+0xaba>
 800d7a8:	9b00      	ldr	r3, [sp, #0]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	bfcc      	ite	gt
 800d7ae:	461e      	movgt	r6, r3
 800d7b0:	2601      	movle	r6, #1
 800d7b2:	4456      	add	r6, sl
 800d7b4:	2700      	movs	r7, #0
 800d7b6:	4649      	mov	r1, r9
 800d7b8:	2201      	movs	r2, #1
 800d7ba:	4658      	mov	r0, fp
 800d7bc:	f000 fef0 	bl	800e5a0 <__lshift>
 800d7c0:	4621      	mov	r1, r4
 800d7c2:	4681      	mov	r9, r0
 800d7c4:	f000 ff58 	bl	800e678 <__mcmp>
 800d7c8:	2800      	cmp	r0, #0
 800d7ca:	dcb0      	bgt.n	800d72e <_dtoa_r+0xa5e>
 800d7cc:	d102      	bne.n	800d7d4 <_dtoa_r+0xb04>
 800d7ce:	f018 0f01 	tst.w	r8, #1
 800d7d2:	d1ac      	bne.n	800d72e <_dtoa_r+0xa5e>
 800d7d4:	4633      	mov	r3, r6
 800d7d6:	461e      	mov	r6, r3
 800d7d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d7dc:	2a30      	cmp	r2, #48	@ 0x30
 800d7de:	d0fa      	beq.n	800d7d6 <_dtoa_r+0xb06>
 800d7e0:	e5c2      	b.n	800d368 <_dtoa_r+0x698>
 800d7e2:	459a      	cmp	sl, r3
 800d7e4:	d1a4      	bne.n	800d730 <_dtoa_r+0xa60>
 800d7e6:	9b04      	ldr	r3, [sp, #16]
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	9304      	str	r3, [sp, #16]
 800d7ec:	2331      	movs	r3, #49	@ 0x31
 800d7ee:	f88a 3000 	strb.w	r3, [sl]
 800d7f2:	e5b9      	b.n	800d368 <_dtoa_r+0x698>
 800d7f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d7f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d854 <_dtoa_r+0xb84>
 800d7fa:	b11b      	cbz	r3, 800d804 <_dtoa_r+0xb34>
 800d7fc:	f10a 0308 	add.w	r3, sl, #8
 800d800:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d802:	6013      	str	r3, [r2, #0]
 800d804:	4650      	mov	r0, sl
 800d806:	b019      	add	sp, #100	@ 0x64
 800d808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d80c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d80e:	2b01      	cmp	r3, #1
 800d810:	f77f ae37 	ble.w	800d482 <_dtoa_r+0x7b2>
 800d814:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d816:	930a      	str	r3, [sp, #40]	@ 0x28
 800d818:	2001      	movs	r0, #1
 800d81a:	e655      	b.n	800d4c8 <_dtoa_r+0x7f8>
 800d81c:	9b00      	ldr	r3, [sp, #0]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	f77f aed6 	ble.w	800d5d0 <_dtoa_r+0x900>
 800d824:	4656      	mov	r6, sl
 800d826:	4621      	mov	r1, r4
 800d828:	4648      	mov	r0, r9
 800d82a:	f7ff f9c7 	bl	800cbbc <quorem>
 800d82e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d832:	f806 8b01 	strb.w	r8, [r6], #1
 800d836:	9b00      	ldr	r3, [sp, #0]
 800d838:	eba6 020a 	sub.w	r2, r6, sl
 800d83c:	4293      	cmp	r3, r2
 800d83e:	ddb3      	ble.n	800d7a8 <_dtoa_r+0xad8>
 800d840:	4649      	mov	r1, r9
 800d842:	2300      	movs	r3, #0
 800d844:	220a      	movs	r2, #10
 800d846:	4658      	mov	r0, fp
 800d848:	f000 fcb4 	bl	800e1b4 <__multadd>
 800d84c:	4681      	mov	r9, r0
 800d84e:	e7ea      	b.n	800d826 <_dtoa_r+0xb56>
 800d850:	08010ff3 	.word	0x08010ff3
 800d854:	08010f77 	.word	0x08010f77

0800d858 <_free_r>:
 800d858:	b538      	push	{r3, r4, r5, lr}
 800d85a:	4605      	mov	r5, r0
 800d85c:	2900      	cmp	r1, #0
 800d85e:	d041      	beq.n	800d8e4 <_free_r+0x8c>
 800d860:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d864:	1f0c      	subs	r4, r1, #4
 800d866:	2b00      	cmp	r3, #0
 800d868:	bfb8      	it	lt
 800d86a:	18e4      	addlt	r4, r4, r3
 800d86c:	f000 fc34 	bl	800e0d8 <__malloc_lock>
 800d870:	4a1d      	ldr	r2, [pc, #116]	@ (800d8e8 <_free_r+0x90>)
 800d872:	6813      	ldr	r3, [r2, #0]
 800d874:	b933      	cbnz	r3, 800d884 <_free_r+0x2c>
 800d876:	6063      	str	r3, [r4, #4]
 800d878:	6014      	str	r4, [r2, #0]
 800d87a:	4628      	mov	r0, r5
 800d87c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d880:	f000 bc30 	b.w	800e0e4 <__malloc_unlock>
 800d884:	42a3      	cmp	r3, r4
 800d886:	d908      	bls.n	800d89a <_free_r+0x42>
 800d888:	6820      	ldr	r0, [r4, #0]
 800d88a:	1821      	adds	r1, r4, r0
 800d88c:	428b      	cmp	r3, r1
 800d88e:	bf01      	itttt	eq
 800d890:	6819      	ldreq	r1, [r3, #0]
 800d892:	685b      	ldreq	r3, [r3, #4]
 800d894:	1809      	addeq	r1, r1, r0
 800d896:	6021      	streq	r1, [r4, #0]
 800d898:	e7ed      	b.n	800d876 <_free_r+0x1e>
 800d89a:	461a      	mov	r2, r3
 800d89c:	685b      	ldr	r3, [r3, #4]
 800d89e:	b10b      	cbz	r3, 800d8a4 <_free_r+0x4c>
 800d8a0:	42a3      	cmp	r3, r4
 800d8a2:	d9fa      	bls.n	800d89a <_free_r+0x42>
 800d8a4:	6811      	ldr	r1, [r2, #0]
 800d8a6:	1850      	adds	r0, r2, r1
 800d8a8:	42a0      	cmp	r0, r4
 800d8aa:	d10b      	bne.n	800d8c4 <_free_r+0x6c>
 800d8ac:	6820      	ldr	r0, [r4, #0]
 800d8ae:	4401      	add	r1, r0
 800d8b0:	1850      	adds	r0, r2, r1
 800d8b2:	4283      	cmp	r3, r0
 800d8b4:	6011      	str	r1, [r2, #0]
 800d8b6:	d1e0      	bne.n	800d87a <_free_r+0x22>
 800d8b8:	6818      	ldr	r0, [r3, #0]
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	6053      	str	r3, [r2, #4]
 800d8be:	4408      	add	r0, r1
 800d8c0:	6010      	str	r0, [r2, #0]
 800d8c2:	e7da      	b.n	800d87a <_free_r+0x22>
 800d8c4:	d902      	bls.n	800d8cc <_free_r+0x74>
 800d8c6:	230c      	movs	r3, #12
 800d8c8:	602b      	str	r3, [r5, #0]
 800d8ca:	e7d6      	b.n	800d87a <_free_r+0x22>
 800d8cc:	6820      	ldr	r0, [r4, #0]
 800d8ce:	1821      	adds	r1, r4, r0
 800d8d0:	428b      	cmp	r3, r1
 800d8d2:	bf04      	itt	eq
 800d8d4:	6819      	ldreq	r1, [r3, #0]
 800d8d6:	685b      	ldreq	r3, [r3, #4]
 800d8d8:	6063      	str	r3, [r4, #4]
 800d8da:	bf04      	itt	eq
 800d8dc:	1809      	addeq	r1, r1, r0
 800d8de:	6021      	streq	r1, [r4, #0]
 800d8e0:	6054      	str	r4, [r2, #4]
 800d8e2:	e7ca      	b.n	800d87a <_free_r+0x22>
 800d8e4:	bd38      	pop	{r3, r4, r5, pc}
 800d8e6:	bf00      	nop
 800d8e8:	20000b8c 	.word	0x20000b8c

0800d8ec <rshift>:
 800d8ec:	6903      	ldr	r3, [r0, #16]
 800d8ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d8f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d8f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d8fa:	f100 0414 	add.w	r4, r0, #20
 800d8fe:	dd45      	ble.n	800d98c <rshift+0xa0>
 800d900:	f011 011f 	ands.w	r1, r1, #31
 800d904:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d908:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d90c:	d10c      	bne.n	800d928 <rshift+0x3c>
 800d90e:	f100 0710 	add.w	r7, r0, #16
 800d912:	4629      	mov	r1, r5
 800d914:	42b1      	cmp	r1, r6
 800d916:	d334      	bcc.n	800d982 <rshift+0x96>
 800d918:	1a9b      	subs	r3, r3, r2
 800d91a:	009b      	lsls	r3, r3, #2
 800d91c:	1eea      	subs	r2, r5, #3
 800d91e:	4296      	cmp	r6, r2
 800d920:	bf38      	it	cc
 800d922:	2300      	movcc	r3, #0
 800d924:	4423      	add	r3, r4
 800d926:	e015      	b.n	800d954 <rshift+0x68>
 800d928:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d92c:	f1c1 0820 	rsb	r8, r1, #32
 800d930:	40cf      	lsrs	r7, r1
 800d932:	f105 0e04 	add.w	lr, r5, #4
 800d936:	46a1      	mov	r9, r4
 800d938:	4576      	cmp	r6, lr
 800d93a:	46f4      	mov	ip, lr
 800d93c:	d815      	bhi.n	800d96a <rshift+0x7e>
 800d93e:	1a9a      	subs	r2, r3, r2
 800d940:	0092      	lsls	r2, r2, #2
 800d942:	3a04      	subs	r2, #4
 800d944:	3501      	adds	r5, #1
 800d946:	42ae      	cmp	r6, r5
 800d948:	bf38      	it	cc
 800d94a:	2200      	movcc	r2, #0
 800d94c:	18a3      	adds	r3, r4, r2
 800d94e:	50a7      	str	r7, [r4, r2]
 800d950:	b107      	cbz	r7, 800d954 <rshift+0x68>
 800d952:	3304      	adds	r3, #4
 800d954:	1b1a      	subs	r2, r3, r4
 800d956:	42a3      	cmp	r3, r4
 800d958:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d95c:	bf08      	it	eq
 800d95e:	2300      	moveq	r3, #0
 800d960:	6102      	str	r2, [r0, #16]
 800d962:	bf08      	it	eq
 800d964:	6143      	streq	r3, [r0, #20]
 800d966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d96a:	f8dc c000 	ldr.w	ip, [ip]
 800d96e:	fa0c fc08 	lsl.w	ip, ip, r8
 800d972:	ea4c 0707 	orr.w	r7, ip, r7
 800d976:	f849 7b04 	str.w	r7, [r9], #4
 800d97a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d97e:	40cf      	lsrs	r7, r1
 800d980:	e7da      	b.n	800d938 <rshift+0x4c>
 800d982:	f851 cb04 	ldr.w	ip, [r1], #4
 800d986:	f847 cf04 	str.w	ip, [r7, #4]!
 800d98a:	e7c3      	b.n	800d914 <rshift+0x28>
 800d98c:	4623      	mov	r3, r4
 800d98e:	e7e1      	b.n	800d954 <rshift+0x68>

0800d990 <__hexdig_fun>:
 800d990:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d994:	2b09      	cmp	r3, #9
 800d996:	d802      	bhi.n	800d99e <__hexdig_fun+0xe>
 800d998:	3820      	subs	r0, #32
 800d99a:	b2c0      	uxtb	r0, r0
 800d99c:	4770      	bx	lr
 800d99e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d9a2:	2b05      	cmp	r3, #5
 800d9a4:	d801      	bhi.n	800d9aa <__hexdig_fun+0x1a>
 800d9a6:	3847      	subs	r0, #71	@ 0x47
 800d9a8:	e7f7      	b.n	800d99a <__hexdig_fun+0xa>
 800d9aa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d9ae:	2b05      	cmp	r3, #5
 800d9b0:	d801      	bhi.n	800d9b6 <__hexdig_fun+0x26>
 800d9b2:	3827      	subs	r0, #39	@ 0x27
 800d9b4:	e7f1      	b.n	800d99a <__hexdig_fun+0xa>
 800d9b6:	2000      	movs	r0, #0
 800d9b8:	4770      	bx	lr
	...

0800d9bc <__gethex>:
 800d9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9c0:	b085      	sub	sp, #20
 800d9c2:	468a      	mov	sl, r1
 800d9c4:	9302      	str	r3, [sp, #8]
 800d9c6:	680b      	ldr	r3, [r1, #0]
 800d9c8:	9001      	str	r0, [sp, #4]
 800d9ca:	4690      	mov	r8, r2
 800d9cc:	1c9c      	adds	r4, r3, #2
 800d9ce:	46a1      	mov	r9, r4
 800d9d0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d9d4:	2830      	cmp	r0, #48	@ 0x30
 800d9d6:	d0fa      	beq.n	800d9ce <__gethex+0x12>
 800d9d8:	eba9 0303 	sub.w	r3, r9, r3
 800d9dc:	f1a3 0b02 	sub.w	fp, r3, #2
 800d9e0:	f7ff ffd6 	bl	800d990 <__hexdig_fun>
 800d9e4:	4605      	mov	r5, r0
 800d9e6:	2800      	cmp	r0, #0
 800d9e8:	d168      	bne.n	800dabc <__gethex+0x100>
 800d9ea:	49a0      	ldr	r1, [pc, #640]	@ (800dc6c <__gethex+0x2b0>)
 800d9ec:	2201      	movs	r2, #1
 800d9ee:	4648      	mov	r0, r9
 800d9f0:	f7ff f82b 	bl	800ca4a <strncmp>
 800d9f4:	4607      	mov	r7, r0
 800d9f6:	2800      	cmp	r0, #0
 800d9f8:	d167      	bne.n	800daca <__gethex+0x10e>
 800d9fa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d9fe:	4626      	mov	r6, r4
 800da00:	f7ff ffc6 	bl	800d990 <__hexdig_fun>
 800da04:	2800      	cmp	r0, #0
 800da06:	d062      	beq.n	800dace <__gethex+0x112>
 800da08:	4623      	mov	r3, r4
 800da0a:	7818      	ldrb	r0, [r3, #0]
 800da0c:	2830      	cmp	r0, #48	@ 0x30
 800da0e:	4699      	mov	r9, r3
 800da10:	f103 0301 	add.w	r3, r3, #1
 800da14:	d0f9      	beq.n	800da0a <__gethex+0x4e>
 800da16:	f7ff ffbb 	bl	800d990 <__hexdig_fun>
 800da1a:	fab0 f580 	clz	r5, r0
 800da1e:	096d      	lsrs	r5, r5, #5
 800da20:	f04f 0b01 	mov.w	fp, #1
 800da24:	464a      	mov	r2, r9
 800da26:	4616      	mov	r6, r2
 800da28:	3201      	adds	r2, #1
 800da2a:	7830      	ldrb	r0, [r6, #0]
 800da2c:	f7ff ffb0 	bl	800d990 <__hexdig_fun>
 800da30:	2800      	cmp	r0, #0
 800da32:	d1f8      	bne.n	800da26 <__gethex+0x6a>
 800da34:	498d      	ldr	r1, [pc, #564]	@ (800dc6c <__gethex+0x2b0>)
 800da36:	2201      	movs	r2, #1
 800da38:	4630      	mov	r0, r6
 800da3a:	f7ff f806 	bl	800ca4a <strncmp>
 800da3e:	2800      	cmp	r0, #0
 800da40:	d13f      	bne.n	800dac2 <__gethex+0x106>
 800da42:	b944      	cbnz	r4, 800da56 <__gethex+0x9a>
 800da44:	1c74      	adds	r4, r6, #1
 800da46:	4622      	mov	r2, r4
 800da48:	4616      	mov	r6, r2
 800da4a:	3201      	adds	r2, #1
 800da4c:	7830      	ldrb	r0, [r6, #0]
 800da4e:	f7ff ff9f 	bl	800d990 <__hexdig_fun>
 800da52:	2800      	cmp	r0, #0
 800da54:	d1f8      	bne.n	800da48 <__gethex+0x8c>
 800da56:	1ba4      	subs	r4, r4, r6
 800da58:	00a7      	lsls	r7, r4, #2
 800da5a:	7833      	ldrb	r3, [r6, #0]
 800da5c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800da60:	2b50      	cmp	r3, #80	@ 0x50
 800da62:	d13e      	bne.n	800dae2 <__gethex+0x126>
 800da64:	7873      	ldrb	r3, [r6, #1]
 800da66:	2b2b      	cmp	r3, #43	@ 0x2b
 800da68:	d033      	beq.n	800dad2 <__gethex+0x116>
 800da6a:	2b2d      	cmp	r3, #45	@ 0x2d
 800da6c:	d034      	beq.n	800dad8 <__gethex+0x11c>
 800da6e:	1c71      	adds	r1, r6, #1
 800da70:	2400      	movs	r4, #0
 800da72:	7808      	ldrb	r0, [r1, #0]
 800da74:	f7ff ff8c 	bl	800d990 <__hexdig_fun>
 800da78:	1e43      	subs	r3, r0, #1
 800da7a:	b2db      	uxtb	r3, r3
 800da7c:	2b18      	cmp	r3, #24
 800da7e:	d830      	bhi.n	800dae2 <__gethex+0x126>
 800da80:	f1a0 0210 	sub.w	r2, r0, #16
 800da84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800da88:	f7ff ff82 	bl	800d990 <__hexdig_fun>
 800da8c:	f100 3cff 	add.w	ip, r0, #4294967295
 800da90:	fa5f fc8c 	uxtb.w	ip, ip
 800da94:	f1bc 0f18 	cmp.w	ip, #24
 800da98:	f04f 030a 	mov.w	r3, #10
 800da9c:	d91e      	bls.n	800dadc <__gethex+0x120>
 800da9e:	b104      	cbz	r4, 800daa2 <__gethex+0xe6>
 800daa0:	4252      	negs	r2, r2
 800daa2:	4417      	add	r7, r2
 800daa4:	f8ca 1000 	str.w	r1, [sl]
 800daa8:	b1ed      	cbz	r5, 800dae6 <__gethex+0x12a>
 800daaa:	f1bb 0f00 	cmp.w	fp, #0
 800daae:	bf0c      	ite	eq
 800dab0:	2506      	moveq	r5, #6
 800dab2:	2500      	movne	r5, #0
 800dab4:	4628      	mov	r0, r5
 800dab6:	b005      	add	sp, #20
 800dab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dabc:	2500      	movs	r5, #0
 800dabe:	462c      	mov	r4, r5
 800dac0:	e7b0      	b.n	800da24 <__gethex+0x68>
 800dac2:	2c00      	cmp	r4, #0
 800dac4:	d1c7      	bne.n	800da56 <__gethex+0x9a>
 800dac6:	4627      	mov	r7, r4
 800dac8:	e7c7      	b.n	800da5a <__gethex+0x9e>
 800daca:	464e      	mov	r6, r9
 800dacc:	462f      	mov	r7, r5
 800dace:	2501      	movs	r5, #1
 800dad0:	e7c3      	b.n	800da5a <__gethex+0x9e>
 800dad2:	2400      	movs	r4, #0
 800dad4:	1cb1      	adds	r1, r6, #2
 800dad6:	e7cc      	b.n	800da72 <__gethex+0xb6>
 800dad8:	2401      	movs	r4, #1
 800dada:	e7fb      	b.n	800dad4 <__gethex+0x118>
 800dadc:	fb03 0002 	mla	r0, r3, r2, r0
 800dae0:	e7ce      	b.n	800da80 <__gethex+0xc4>
 800dae2:	4631      	mov	r1, r6
 800dae4:	e7de      	b.n	800daa4 <__gethex+0xe8>
 800dae6:	eba6 0309 	sub.w	r3, r6, r9
 800daea:	3b01      	subs	r3, #1
 800daec:	4629      	mov	r1, r5
 800daee:	2b07      	cmp	r3, #7
 800daf0:	dc0a      	bgt.n	800db08 <__gethex+0x14c>
 800daf2:	9801      	ldr	r0, [sp, #4]
 800daf4:	f000 fafc 	bl	800e0f0 <_Balloc>
 800daf8:	4604      	mov	r4, r0
 800dafa:	b940      	cbnz	r0, 800db0e <__gethex+0x152>
 800dafc:	4b5c      	ldr	r3, [pc, #368]	@ (800dc70 <__gethex+0x2b4>)
 800dafe:	4602      	mov	r2, r0
 800db00:	21e4      	movs	r1, #228	@ 0xe4
 800db02:	485c      	ldr	r0, [pc, #368]	@ (800dc74 <__gethex+0x2b8>)
 800db04:	f001 ffb0 	bl	800fa68 <__assert_func>
 800db08:	3101      	adds	r1, #1
 800db0a:	105b      	asrs	r3, r3, #1
 800db0c:	e7ef      	b.n	800daee <__gethex+0x132>
 800db0e:	f100 0a14 	add.w	sl, r0, #20
 800db12:	2300      	movs	r3, #0
 800db14:	4655      	mov	r5, sl
 800db16:	469b      	mov	fp, r3
 800db18:	45b1      	cmp	r9, r6
 800db1a:	d337      	bcc.n	800db8c <__gethex+0x1d0>
 800db1c:	f845 bb04 	str.w	fp, [r5], #4
 800db20:	eba5 050a 	sub.w	r5, r5, sl
 800db24:	10ad      	asrs	r5, r5, #2
 800db26:	6125      	str	r5, [r4, #16]
 800db28:	4658      	mov	r0, fp
 800db2a:	f000 fbd3 	bl	800e2d4 <__hi0bits>
 800db2e:	016d      	lsls	r5, r5, #5
 800db30:	f8d8 6000 	ldr.w	r6, [r8]
 800db34:	1a2d      	subs	r5, r5, r0
 800db36:	42b5      	cmp	r5, r6
 800db38:	dd54      	ble.n	800dbe4 <__gethex+0x228>
 800db3a:	1bad      	subs	r5, r5, r6
 800db3c:	4629      	mov	r1, r5
 800db3e:	4620      	mov	r0, r4
 800db40:	f000 ff67 	bl	800ea12 <__any_on>
 800db44:	4681      	mov	r9, r0
 800db46:	b178      	cbz	r0, 800db68 <__gethex+0x1ac>
 800db48:	1e6b      	subs	r3, r5, #1
 800db4a:	1159      	asrs	r1, r3, #5
 800db4c:	f003 021f 	and.w	r2, r3, #31
 800db50:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800db54:	f04f 0901 	mov.w	r9, #1
 800db58:	fa09 f202 	lsl.w	r2, r9, r2
 800db5c:	420a      	tst	r2, r1
 800db5e:	d003      	beq.n	800db68 <__gethex+0x1ac>
 800db60:	454b      	cmp	r3, r9
 800db62:	dc36      	bgt.n	800dbd2 <__gethex+0x216>
 800db64:	f04f 0902 	mov.w	r9, #2
 800db68:	4629      	mov	r1, r5
 800db6a:	4620      	mov	r0, r4
 800db6c:	f7ff febe 	bl	800d8ec <rshift>
 800db70:	442f      	add	r7, r5
 800db72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800db76:	42bb      	cmp	r3, r7
 800db78:	da42      	bge.n	800dc00 <__gethex+0x244>
 800db7a:	9801      	ldr	r0, [sp, #4]
 800db7c:	4621      	mov	r1, r4
 800db7e:	f000 faf7 	bl	800e170 <_Bfree>
 800db82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db84:	2300      	movs	r3, #0
 800db86:	6013      	str	r3, [r2, #0]
 800db88:	25a3      	movs	r5, #163	@ 0xa3
 800db8a:	e793      	b.n	800dab4 <__gethex+0xf8>
 800db8c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800db90:	2a2e      	cmp	r2, #46	@ 0x2e
 800db92:	d012      	beq.n	800dbba <__gethex+0x1fe>
 800db94:	2b20      	cmp	r3, #32
 800db96:	d104      	bne.n	800dba2 <__gethex+0x1e6>
 800db98:	f845 bb04 	str.w	fp, [r5], #4
 800db9c:	f04f 0b00 	mov.w	fp, #0
 800dba0:	465b      	mov	r3, fp
 800dba2:	7830      	ldrb	r0, [r6, #0]
 800dba4:	9303      	str	r3, [sp, #12]
 800dba6:	f7ff fef3 	bl	800d990 <__hexdig_fun>
 800dbaa:	9b03      	ldr	r3, [sp, #12]
 800dbac:	f000 000f 	and.w	r0, r0, #15
 800dbb0:	4098      	lsls	r0, r3
 800dbb2:	ea4b 0b00 	orr.w	fp, fp, r0
 800dbb6:	3304      	adds	r3, #4
 800dbb8:	e7ae      	b.n	800db18 <__gethex+0x15c>
 800dbba:	45b1      	cmp	r9, r6
 800dbbc:	d8ea      	bhi.n	800db94 <__gethex+0x1d8>
 800dbbe:	492b      	ldr	r1, [pc, #172]	@ (800dc6c <__gethex+0x2b0>)
 800dbc0:	9303      	str	r3, [sp, #12]
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	4630      	mov	r0, r6
 800dbc6:	f7fe ff40 	bl	800ca4a <strncmp>
 800dbca:	9b03      	ldr	r3, [sp, #12]
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	d1e1      	bne.n	800db94 <__gethex+0x1d8>
 800dbd0:	e7a2      	b.n	800db18 <__gethex+0x15c>
 800dbd2:	1ea9      	subs	r1, r5, #2
 800dbd4:	4620      	mov	r0, r4
 800dbd6:	f000 ff1c 	bl	800ea12 <__any_on>
 800dbda:	2800      	cmp	r0, #0
 800dbdc:	d0c2      	beq.n	800db64 <__gethex+0x1a8>
 800dbde:	f04f 0903 	mov.w	r9, #3
 800dbe2:	e7c1      	b.n	800db68 <__gethex+0x1ac>
 800dbe4:	da09      	bge.n	800dbfa <__gethex+0x23e>
 800dbe6:	1b75      	subs	r5, r6, r5
 800dbe8:	4621      	mov	r1, r4
 800dbea:	9801      	ldr	r0, [sp, #4]
 800dbec:	462a      	mov	r2, r5
 800dbee:	f000 fcd7 	bl	800e5a0 <__lshift>
 800dbf2:	1b7f      	subs	r7, r7, r5
 800dbf4:	4604      	mov	r4, r0
 800dbf6:	f100 0a14 	add.w	sl, r0, #20
 800dbfa:	f04f 0900 	mov.w	r9, #0
 800dbfe:	e7b8      	b.n	800db72 <__gethex+0x1b6>
 800dc00:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dc04:	42bd      	cmp	r5, r7
 800dc06:	dd6f      	ble.n	800dce8 <__gethex+0x32c>
 800dc08:	1bed      	subs	r5, r5, r7
 800dc0a:	42ae      	cmp	r6, r5
 800dc0c:	dc34      	bgt.n	800dc78 <__gethex+0x2bc>
 800dc0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dc12:	2b02      	cmp	r3, #2
 800dc14:	d022      	beq.n	800dc5c <__gethex+0x2a0>
 800dc16:	2b03      	cmp	r3, #3
 800dc18:	d024      	beq.n	800dc64 <__gethex+0x2a8>
 800dc1a:	2b01      	cmp	r3, #1
 800dc1c:	d115      	bne.n	800dc4a <__gethex+0x28e>
 800dc1e:	42ae      	cmp	r6, r5
 800dc20:	d113      	bne.n	800dc4a <__gethex+0x28e>
 800dc22:	2e01      	cmp	r6, #1
 800dc24:	d10b      	bne.n	800dc3e <__gethex+0x282>
 800dc26:	9a02      	ldr	r2, [sp, #8]
 800dc28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dc2c:	6013      	str	r3, [r2, #0]
 800dc2e:	2301      	movs	r3, #1
 800dc30:	6123      	str	r3, [r4, #16]
 800dc32:	f8ca 3000 	str.w	r3, [sl]
 800dc36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc38:	2562      	movs	r5, #98	@ 0x62
 800dc3a:	601c      	str	r4, [r3, #0]
 800dc3c:	e73a      	b.n	800dab4 <__gethex+0xf8>
 800dc3e:	1e71      	subs	r1, r6, #1
 800dc40:	4620      	mov	r0, r4
 800dc42:	f000 fee6 	bl	800ea12 <__any_on>
 800dc46:	2800      	cmp	r0, #0
 800dc48:	d1ed      	bne.n	800dc26 <__gethex+0x26a>
 800dc4a:	9801      	ldr	r0, [sp, #4]
 800dc4c:	4621      	mov	r1, r4
 800dc4e:	f000 fa8f 	bl	800e170 <_Bfree>
 800dc52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc54:	2300      	movs	r3, #0
 800dc56:	6013      	str	r3, [r2, #0]
 800dc58:	2550      	movs	r5, #80	@ 0x50
 800dc5a:	e72b      	b.n	800dab4 <__gethex+0xf8>
 800dc5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d1f3      	bne.n	800dc4a <__gethex+0x28e>
 800dc62:	e7e0      	b.n	800dc26 <__gethex+0x26a>
 800dc64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d1dd      	bne.n	800dc26 <__gethex+0x26a>
 800dc6a:	e7ee      	b.n	800dc4a <__gethex+0x28e>
 800dc6c:	08010ee4 	.word	0x08010ee4
 800dc70:	08010ff3 	.word	0x08010ff3
 800dc74:	08011004 	.word	0x08011004
 800dc78:	1e6f      	subs	r7, r5, #1
 800dc7a:	f1b9 0f00 	cmp.w	r9, #0
 800dc7e:	d130      	bne.n	800dce2 <__gethex+0x326>
 800dc80:	b127      	cbz	r7, 800dc8c <__gethex+0x2d0>
 800dc82:	4639      	mov	r1, r7
 800dc84:	4620      	mov	r0, r4
 800dc86:	f000 fec4 	bl	800ea12 <__any_on>
 800dc8a:	4681      	mov	r9, r0
 800dc8c:	117a      	asrs	r2, r7, #5
 800dc8e:	2301      	movs	r3, #1
 800dc90:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dc94:	f007 071f 	and.w	r7, r7, #31
 800dc98:	40bb      	lsls	r3, r7
 800dc9a:	4213      	tst	r3, r2
 800dc9c:	4629      	mov	r1, r5
 800dc9e:	4620      	mov	r0, r4
 800dca0:	bf18      	it	ne
 800dca2:	f049 0902 	orrne.w	r9, r9, #2
 800dca6:	f7ff fe21 	bl	800d8ec <rshift>
 800dcaa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800dcae:	1b76      	subs	r6, r6, r5
 800dcb0:	2502      	movs	r5, #2
 800dcb2:	f1b9 0f00 	cmp.w	r9, #0
 800dcb6:	d047      	beq.n	800dd48 <__gethex+0x38c>
 800dcb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dcbc:	2b02      	cmp	r3, #2
 800dcbe:	d015      	beq.n	800dcec <__gethex+0x330>
 800dcc0:	2b03      	cmp	r3, #3
 800dcc2:	d017      	beq.n	800dcf4 <__gethex+0x338>
 800dcc4:	2b01      	cmp	r3, #1
 800dcc6:	d109      	bne.n	800dcdc <__gethex+0x320>
 800dcc8:	f019 0f02 	tst.w	r9, #2
 800dccc:	d006      	beq.n	800dcdc <__gethex+0x320>
 800dcce:	f8da 3000 	ldr.w	r3, [sl]
 800dcd2:	ea49 0903 	orr.w	r9, r9, r3
 800dcd6:	f019 0f01 	tst.w	r9, #1
 800dcda:	d10e      	bne.n	800dcfa <__gethex+0x33e>
 800dcdc:	f045 0510 	orr.w	r5, r5, #16
 800dce0:	e032      	b.n	800dd48 <__gethex+0x38c>
 800dce2:	f04f 0901 	mov.w	r9, #1
 800dce6:	e7d1      	b.n	800dc8c <__gethex+0x2d0>
 800dce8:	2501      	movs	r5, #1
 800dcea:	e7e2      	b.n	800dcb2 <__gethex+0x2f6>
 800dcec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dcee:	f1c3 0301 	rsb	r3, r3, #1
 800dcf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dcf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d0f0      	beq.n	800dcdc <__gethex+0x320>
 800dcfa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dcfe:	f104 0314 	add.w	r3, r4, #20
 800dd02:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dd06:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dd0a:	f04f 0c00 	mov.w	ip, #0
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd14:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dd18:	d01b      	beq.n	800dd52 <__gethex+0x396>
 800dd1a:	3201      	adds	r2, #1
 800dd1c:	6002      	str	r2, [r0, #0]
 800dd1e:	2d02      	cmp	r5, #2
 800dd20:	f104 0314 	add.w	r3, r4, #20
 800dd24:	d13c      	bne.n	800dda0 <__gethex+0x3e4>
 800dd26:	f8d8 2000 	ldr.w	r2, [r8]
 800dd2a:	3a01      	subs	r2, #1
 800dd2c:	42b2      	cmp	r2, r6
 800dd2e:	d109      	bne.n	800dd44 <__gethex+0x388>
 800dd30:	1171      	asrs	r1, r6, #5
 800dd32:	2201      	movs	r2, #1
 800dd34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dd38:	f006 061f 	and.w	r6, r6, #31
 800dd3c:	fa02 f606 	lsl.w	r6, r2, r6
 800dd40:	421e      	tst	r6, r3
 800dd42:	d13a      	bne.n	800ddba <__gethex+0x3fe>
 800dd44:	f045 0520 	orr.w	r5, r5, #32
 800dd48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd4a:	601c      	str	r4, [r3, #0]
 800dd4c:	9b02      	ldr	r3, [sp, #8]
 800dd4e:	601f      	str	r7, [r3, #0]
 800dd50:	e6b0      	b.n	800dab4 <__gethex+0xf8>
 800dd52:	4299      	cmp	r1, r3
 800dd54:	f843 cc04 	str.w	ip, [r3, #-4]
 800dd58:	d8d9      	bhi.n	800dd0e <__gethex+0x352>
 800dd5a:	68a3      	ldr	r3, [r4, #8]
 800dd5c:	459b      	cmp	fp, r3
 800dd5e:	db17      	blt.n	800dd90 <__gethex+0x3d4>
 800dd60:	6861      	ldr	r1, [r4, #4]
 800dd62:	9801      	ldr	r0, [sp, #4]
 800dd64:	3101      	adds	r1, #1
 800dd66:	f000 f9c3 	bl	800e0f0 <_Balloc>
 800dd6a:	4681      	mov	r9, r0
 800dd6c:	b918      	cbnz	r0, 800dd76 <__gethex+0x3ba>
 800dd6e:	4b1a      	ldr	r3, [pc, #104]	@ (800ddd8 <__gethex+0x41c>)
 800dd70:	4602      	mov	r2, r0
 800dd72:	2184      	movs	r1, #132	@ 0x84
 800dd74:	e6c5      	b.n	800db02 <__gethex+0x146>
 800dd76:	6922      	ldr	r2, [r4, #16]
 800dd78:	3202      	adds	r2, #2
 800dd7a:	f104 010c 	add.w	r1, r4, #12
 800dd7e:	0092      	lsls	r2, r2, #2
 800dd80:	300c      	adds	r0, #12
 800dd82:	f7fe fefe 	bl	800cb82 <memcpy>
 800dd86:	4621      	mov	r1, r4
 800dd88:	9801      	ldr	r0, [sp, #4]
 800dd8a:	f000 f9f1 	bl	800e170 <_Bfree>
 800dd8e:	464c      	mov	r4, r9
 800dd90:	6923      	ldr	r3, [r4, #16]
 800dd92:	1c5a      	adds	r2, r3, #1
 800dd94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dd98:	6122      	str	r2, [r4, #16]
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	615a      	str	r2, [r3, #20]
 800dd9e:	e7be      	b.n	800dd1e <__gethex+0x362>
 800dda0:	6922      	ldr	r2, [r4, #16]
 800dda2:	455a      	cmp	r2, fp
 800dda4:	dd0b      	ble.n	800ddbe <__gethex+0x402>
 800dda6:	2101      	movs	r1, #1
 800dda8:	4620      	mov	r0, r4
 800ddaa:	f7ff fd9f 	bl	800d8ec <rshift>
 800ddae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ddb2:	3701      	adds	r7, #1
 800ddb4:	42bb      	cmp	r3, r7
 800ddb6:	f6ff aee0 	blt.w	800db7a <__gethex+0x1be>
 800ddba:	2501      	movs	r5, #1
 800ddbc:	e7c2      	b.n	800dd44 <__gethex+0x388>
 800ddbe:	f016 061f 	ands.w	r6, r6, #31
 800ddc2:	d0fa      	beq.n	800ddba <__gethex+0x3fe>
 800ddc4:	4453      	add	r3, sl
 800ddc6:	f1c6 0620 	rsb	r6, r6, #32
 800ddca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ddce:	f000 fa81 	bl	800e2d4 <__hi0bits>
 800ddd2:	42b0      	cmp	r0, r6
 800ddd4:	dbe7      	blt.n	800dda6 <__gethex+0x3ea>
 800ddd6:	e7f0      	b.n	800ddba <__gethex+0x3fe>
 800ddd8:	08010ff3 	.word	0x08010ff3

0800dddc <L_shift>:
 800dddc:	f1c2 0208 	rsb	r2, r2, #8
 800dde0:	0092      	lsls	r2, r2, #2
 800dde2:	b570      	push	{r4, r5, r6, lr}
 800dde4:	f1c2 0620 	rsb	r6, r2, #32
 800dde8:	6843      	ldr	r3, [r0, #4]
 800ddea:	6804      	ldr	r4, [r0, #0]
 800ddec:	fa03 f506 	lsl.w	r5, r3, r6
 800ddf0:	432c      	orrs	r4, r5
 800ddf2:	40d3      	lsrs	r3, r2
 800ddf4:	6004      	str	r4, [r0, #0]
 800ddf6:	f840 3f04 	str.w	r3, [r0, #4]!
 800ddfa:	4288      	cmp	r0, r1
 800ddfc:	d3f4      	bcc.n	800dde8 <L_shift+0xc>
 800ddfe:	bd70      	pop	{r4, r5, r6, pc}

0800de00 <__match>:
 800de00:	b530      	push	{r4, r5, lr}
 800de02:	6803      	ldr	r3, [r0, #0]
 800de04:	3301      	adds	r3, #1
 800de06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de0a:	b914      	cbnz	r4, 800de12 <__match+0x12>
 800de0c:	6003      	str	r3, [r0, #0]
 800de0e:	2001      	movs	r0, #1
 800de10:	bd30      	pop	{r4, r5, pc}
 800de12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de16:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800de1a:	2d19      	cmp	r5, #25
 800de1c:	bf98      	it	ls
 800de1e:	3220      	addls	r2, #32
 800de20:	42a2      	cmp	r2, r4
 800de22:	d0f0      	beq.n	800de06 <__match+0x6>
 800de24:	2000      	movs	r0, #0
 800de26:	e7f3      	b.n	800de10 <__match+0x10>

0800de28 <__hexnan>:
 800de28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de2c:	680b      	ldr	r3, [r1, #0]
 800de2e:	6801      	ldr	r1, [r0, #0]
 800de30:	115e      	asrs	r6, r3, #5
 800de32:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800de36:	f013 031f 	ands.w	r3, r3, #31
 800de3a:	b087      	sub	sp, #28
 800de3c:	bf18      	it	ne
 800de3e:	3604      	addne	r6, #4
 800de40:	2500      	movs	r5, #0
 800de42:	1f37      	subs	r7, r6, #4
 800de44:	4682      	mov	sl, r0
 800de46:	4690      	mov	r8, r2
 800de48:	9301      	str	r3, [sp, #4]
 800de4a:	f846 5c04 	str.w	r5, [r6, #-4]
 800de4e:	46b9      	mov	r9, r7
 800de50:	463c      	mov	r4, r7
 800de52:	9502      	str	r5, [sp, #8]
 800de54:	46ab      	mov	fp, r5
 800de56:	784a      	ldrb	r2, [r1, #1]
 800de58:	1c4b      	adds	r3, r1, #1
 800de5a:	9303      	str	r3, [sp, #12]
 800de5c:	b342      	cbz	r2, 800deb0 <__hexnan+0x88>
 800de5e:	4610      	mov	r0, r2
 800de60:	9105      	str	r1, [sp, #20]
 800de62:	9204      	str	r2, [sp, #16]
 800de64:	f7ff fd94 	bl	800d990 <__hexdig_fun>
 800de68:	2800      	cmp	r0, #0
 800de6a:	d151      	bne.n	800df10 <__hexnan+0xe8>
 800de6c:	9a04      	ldr	r2, [sp, #16]
 800de6e:	9905      	ldr	r1, [sp, #20]
 800de70:	2a20      	cmp	r2, #32
 800de72:	d818      	bhi.n	800dea6 <__hexnan+0x7e>
 800de74:	9b02      	ldr	r3, [sp, #8]
 800de76:	459b      	cmp	fp, r3
 800de78:	dd13      	ble.n	800dea2 <__hexnan+0x7a>
 800de7a:	454c      	cmp	r4, r9
 800de7c:	d206      	bcs.n	800de8c <__hexnan+0x64>
 800de7e:	2d07      	cmp	r5, #7
 800de80:	dc04      	bgt.n	800de8c <__hexnan+0x64>
 800de82:	462a      	mov	r2, r5
 800de84:	4649      	mov	r1, r9
 800de86:	4620      	mov	r0, r4
 800de88:	f7ff ffa8 	bl	800dddc <L_shift>
 800de8c:	4544      	cmp	r4, r8
 800de8e:	d952      	bls.n	800df36 <__hexnan+0x10e>
 800de90:	2300      	movs	r3, #0
 800de92:	f1a4 0904 	sub.w	r9, r4, #4
 800de96:	f844 3c04 	str.w	r3, [r4, #-4]
 800de9a:	f8cd b008 	str.w	fp, [sp, #8]
 800de9e:	464c      	mov	r4, r9
 800dea0:	461d      	mov	r5, r3
 800dea2:	9903      	ldr	r1, [sp, #12]
 800dea4:	e7d7      	b.n	800de56 <__hexnan+0x2e>
 800dea6:	2a29      	cmp	r2, #41	@ 0x29
 800dea8:	d157      	bne.n	800df5a <__hexnan+0x132>
 800deaa:	3102      	adds	r1, #2
 800deac:	f8ca 1000 	str.w	r1, [sl]
 800deb0:	f1bb 0f00 	cmp.w	fp, #0
 800deb4:	d051      	beq.n	800df5a <__hexnan+0x132>
 800deb6:	454c      	cmp	r4, r9
 800deb8:	d206      	bcs.n	800dec8 <__hexnan+0xa0>
 800deba:	2d07      	cmp	r5, #7
 800debc:	dc04      	bgt.n	800dec8 <__hexnan+0xa0>
 800debe:	462a      	mov	r2, r5
 800dec0:	4649      	mov	r1, r9
 800dec2:	4620      	mov	r0, r4
 800dec4:	f7ff ff8a 	bl	800dddc <L_shift>
 800dec8:	4544      	cmp	r4, r8
 800deca:	d936      	bls.n	800df3a <__hexnan+0x112>
 800decc:	f1a8 0204 	sub.w	r2, r8, #4
 800ded0:	4623      	mov	r3, r4
 800ded2:	f853 1b04 	ldr.w	r1, [r3], #4
 800ded6:	f842 1f04 	str.w	r1, [r2, #4]!
 800deda:	429f      	cmp	r7, r3
 800dedc:	d2f9      	bcs.n	800ded2 <__hexnan+0xaa>
 800dede:	1b3b      	subs	r3, r7, r4
 800dee0:	f023 0303 	bic.w	r3, r3, #3
 800dee4:	3304      	adds	r3, #4
 800dee6:	3401      	adds	r4, #1
 800dee8:	3e03      	subs	r6, #3
 800deea:	42b4      	cmp	r4, r6
 800deec:	bf88      	it	hi
 800deee:	2304      	movhi	r3, #4
 800def0:	4443      	add	r3, r8
 800def2:	2200      	movs	r2, #0
 800def4:	f843 2b04 	str.w	r2, [r3], #4
 800def8:	429f      	cmp	r7, r3
 800defa:	d2fb      	bcs.n	800def4 <__hexnan+0xcc>
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	b91b      	cbnz	r3, 800df08 <__hexnan+0xe0>
 800df00:	4547      	cmp	r7, r8
 800df02:	d128      	bne.n	800df56 <__hexnan+0x12e>
 800df04:	2301      	movs	r3, #1
 800df06:	603b      	str	r3, [r7, #0]
 800df08:	2005      	movs	r0, #5
 800df0a:	b007      	add	sp, #28
 800df0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df10:	3501      	adds	r5, #1
 800df12:	2d08      	cmp	r5, #8
 800df14:	f10b 0b01 	add.w	fp, fp, #1
 800df18:	dd06      	ble.n	800df28 <__hexnan+0x100>
 800df1a:	4544      	cmp	r4, r8
 800df1c:	d9c1      	bls.n	800dea2 <__hexnan+0x7a>
 800df1e:	2300      	movs	r3, #0
 800df20:	f844 3c04 	str.w	r3, [r4, #-4]
 800df24:	2501      	movs	r5, #1
 800df26:	3c04      	subs	r4, #4
 800df28:	6822      	ldr	r2, [r4, #0]
 800df2a:	f000 000f 	and.w	r0, r0, #15
 800df2e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800df32:	6020      	str	r0, [r4, #0]
 800df34:	e7b5      	b.n	800dea2 <__hexnan+0x7a>
 800df36:	2508      	movs	r5, #8
 800df38:	e7b3      	b.n	800dea2 <__hexnan+0x7a>
 800df3a:	9b01      	ldr	r3, [sp, #4]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d0dd      	beq.n	800defc <__hexnan+0xd4>
 800df40:	f1c3 0320 	rsb	r3, r3, #32
 800df44:	f04f 32ff 	mov.w	r2, #4294967295
 800df48:	40da      	lsrs	r2, r3
 800df4a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800df4e:	4013      	ands	r3, r2
 800df50:	f846 3c04 	str.w	r3, [r6, #-4]
 800df54:	e7d2      	b.n	800defc <__hexnan+0xd4>
 800df56:	3f04      	subs	r7, #4
 800df58:	e7d0      	b.n	800defc <__hexnan+0xd4>
 800df5a:	2004      	movs	r0, #4
 800df5c:	e7d5      	b.n	800df0a <__hexnan+0xe2>
	...

0800df60 <malloc>:
 800df60:	4b02      	ldr	r3, [pc, #8]	@ (800df6c <malloc+0xc>)
 800df62:	4601      	mov	r1, r0
 800df64:	6818      	ldr	r0, [r3, #0]
 800df66:	f000 b825 	b.w	800dfb4 <_malloc_r>
 800df6a:	bf00      	nop
 800df6c:	20000194 	.word	0x20000194

0800df70 <sbrk_aligned>:
 800df70:	b570      	push	{r4, r5, r6, lr}
 800df72:	4e0f      	ldr	r6, [pc, #60]	@ (800dfb0 <sbrk_aligned+0x40>)
 800df74:	460c      	mov	r4, r1
 800df76:	6831      	ldr	r1, [r6, #0]
 800df78:	4605      	mov	r5, r0
 800df7a:	b911      	cbnz	r1, 800df82 <sbrk_aligned+0x12>
 800df7c:	f001 fd64 	bl	800fa48 <_sbrk_r>
 800df80:	6030      	str	r0, [r6, #0]
 800df82:	4621      	mov	r1, r4
 800df84:	4628      	mov	r0, r5
 800df86:	f001 fd5f 	bl	800fa48 <_sbrk_r>
 800df8a:	1c43      	adds	r3, r0, #1
 800df8c:	d103      	bne.n	800df96 <sbrk_aligned+0x26>
 800df8e:	f04f 34ff 	mov.w	r4, #4294967295
 800df92:	4620      	mov	r0, r4
 800df94:	bd70      	pop	{r4, r5, r6, pc}
 800df96:	1cc4      	adds	r4, r0, #3
 800df98:	f024 0403 	bic.w	r4, r4, #3
 800df9c:	42a0      	cmp	r0, r4
 800df9e:	d0f8      	beq.n	800df92 <sbrk_aligned+0x22>
 800dfa0:	1a21      	subs	r1, r4, r0
 800dfa2:	4628      	mov	r0, r5
 800dfa4:	f001 fd50 	bl	800fa48 <_sbrk_r>
 800dfa8:	3001      	adds	r0, #1
 800dfaa:	d1f2      	bne.n	800df92 <sbrk_aligned+0x22>
 800dfac:	e7ef      	b.n	800df8e <sbrk_aligned+0x1e>
 800dfae:	bf00      	nop
 800dfb0:	20000b88 	.word	0x20000b88

0800dfb4 <_malloc_r>:
 800dfb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfb8:	1ccd      	adds	r5, r1, #3
 800dfba:	f025 0503 	bic.w	r5, r5, #3
 800dfbe:	3508      	adds	r5, #8
 800dfc0:	2d0c      	cmp	r5, #12
 800dfc2:	bf38      	it	cc
 800dfc4:	250c      	movcc	r5, #12
 800dfc6:	2d00      	cmp	r5, #0
 800dfc8:	4606      	mov	r6, r0
 800dfca:	db01      	blt.n	800dfd0 <_malloc_r+0x1c>
 800dfcc:	42a9      	cmp	r1, r5
 800dfce:	d904      	bls.n	800dfda <_malloc_r+0x26>
 800dfd0:	230c      	movs	r3, #12
 800dfd2:	6033      	str	r3, [r6, #0]
 800dfd4:	2000      	movs	r0, #0
 800dfd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e0b0 <_malloc_r+0xfc>
 800dfde:	f000 f87b 	bl	800e0d8 <__malloc_lock>
 800dfe2:	f8d8 3000 	ldr.w	r3, [r8]
 800dfe6:	461c      	mov	r4, r3
 800dfe8:	bb44      	cbnz	r4, 800e03c <_malloc_r+0x88>
 800dfea:	4629      	mov	r1, r5
 800dfec:	4630      	mov	r0, r6
 800dfee:	f7ff ffbf 	bl	800df70 <sbrk_aligned>
 800dff2:	1c43      	adds	r3, r0, #1
 800dff4:	4604      	mov	r4, r0
 800dff6:	d158      	bne.n	800e0aa <_malloc_r+0xf6>
 800dff8:	f8d8 4000 	ldr.w	r4, [r8]
 800dffc:	4627      	mov	r7, r4
 800dffe:	2f00      	cmp	r7, #0
 800e000:	d143      	bne.n	800e08a <_malloc_r+0xd6>
 800e002:	2c00      	cmp	r4, #0
 800e004:	d04b      	beq.n	800e09e <_malloc_r+0xea>
 800e006:	6823      	ldr	r3, [r4, #0]
 800e008:	4639      	mov	r1, r7
 800e00a:	4630      	mov	r0, r6
 800e00c:	eb04 0903 	add.w	r9, r4, r3
 800e010:	f001 fd1a 	bl	800fa48 <_sbrk_r>
 800e014:	4581      	cmp	r9, r0
 800e016:	d142      	bne.n	800e09e <_malloc_r+0xea>
 800e018:	6821      	ldr	r1, [r4, #0]
 800e01a:	1a6d      	subs	r5, r5, r1
 800e01c:	4629      	mov	r1, r5
 800e01e:	4630      	mov	r0, r6
 800e020:	f7ff ffa6 	bl	800df70 <sbrk_aligned>
 800e024:	3001      	adds	r0, #1
 800e026:	d03a      	beq.n	800e09e <_malloc_r+0xea>
 800e028:	6823      	ldr	r3, [r4, #0]
 800e02a:	442b      	add	r3, r5
 800e02c:	6023      	str	r3, [r4, #0]
 800e02e:	f8d8 3000 	ldr.w	r3, [r8]
 800e032:	685a      	ldr	r2, [r3, #4]
 800e034:	bb62      	cbnz	r2, 800e090 <_malloc_r+0xdc>
 800e036:	f8c8 7000 	str.w	r7, [r8]
 800e03a:	e00f      	b.n	800e05c <_malloc_r+0xa8>
 800e03c:	6822      	ldr	r2, [r4, #0]
 800e03e:	1b52      	subs	r2, r2, r5
 800e040:	d420      	bmi.n	800e084 <_malloc_r+0xd0>
 800e042:	2a0b      	cmp	r2, #11
 800e044:	d917      	bls.n	800e076 <_malloc_r+0xc2>
 800e046:	1961      	adds	r1, r4, r5
 800e048:	42a3      	cmp	r3, r4
 800e04a:	6025      	str	r5, [r4, #0]
 800e04c:	bf18      	it	ne
 800e04e:	6059      	strne	r1, [r3, #4]
 800e050:	6863      	ldr	r3, [r4, #4]
 800e052:	bf08      	it	eq
 800e054:	f8c8 1000 	streq.w	r1, [r8]
 800e058:	5162      	str	r2, [r4, r5]
 800e05a:	604b      	str	r3, [r1, #4]
 800e05c:	4630      	mov	r0, r6
 800e05e:	f000 f841 	bl	800e0e4 <__malloc_unlock>
 800e062:	f104 000b 	add.w	r0, r4, #11
 800e066:	1d23      	adds	r3, r4, #4
 800e068:	f020 0007 	bic.w	r0, r0, #7
 800e06c:	1ac2      	subs	r2, r0, r3
 800e06e:	bf1c      	itt	ne
 800e070:	1a1b      	subne	r3, r3, r0
 800e072:	50a3      	strne	r3, [r4, r2]
 800e074:	e7af      	b.n	800dfd6 <_malloc_r+0x22>
 800e076:	6862      	ldr	r2, [r4, #4]
 800e078:	42a3      	cmp	r3, r4
 800e07a:	bf0c      	ite	eq
 800e07c:	f8c8 2000 	streq.w	r2, [r8]
 800e080:	605a      	strne	r2, [r3, #4]
 800e082:	e7eb      	b.n	800e05c <_malloc_r+0xa8>
 800e084:	4623      	mov	r3, r4
 800e086:	6864      	ldr	r4, [r4, #4]
 800e088:	e7ae      	b.n	800dfe8 <_malloc_r+0x34>
 800e08a:	463c      	mov	r4, r7
 800e08c:	687f      	ldr	r7, [r7, #4]
 800e08e:	e7b6      	b.n	800dffe <_malloc_r+0x4a>
 800e090:	461a      	mov	r2, r3
 800e092:	685b      	ldr	r3, [r3, #4]
 800e094:	42a3      	cmp	r3, r4
 800e096:	d1fb      	bne.n	800e090 <_malloc_r+0xdc>
 800e098:	2300      	movs	r3, #0
 800e09a:	6053      	str	r3, [r2, #4]
 800e09c:	e7de      	b.n	800e05c <_malloc_r+0xa8>
 800e09e:	230c      	movs	r3, #12
 800e0a0:	6033      	str	r3, [r6, #0]
 800e0a2:	4630      	mov	r0, r6
 800e0a4:	f000 f81e 	bl	800e0e4 <__malloc_unlock>
 800e0a8:	e794      	b.n	800dfd4 <_malloc_r+0x20>
 800e0aa:	6005      	str	r5, [r0, #0]
 800e0ac:	e7d6      	b.n	800e05c <_malloc_r+0xa8>
 800e0ae:	bf00      	nop
 800e0b0:	20000b8c 	.word	0x20000b8c

0800e0b4 <__ascii_mbtowc>:
 800e0b4:	b082      	sub	sp, #8
 800e0b6:	b901      	cbnz	r1, 800e0ba <__ascii_mbtowc+0x6>
 800e0b8:	a901      	add	r1, sp, #4
 800e0ba:	b142      	cbz	r2, 800e0ce <__ascii_mbtowc+0x1a>
 800e0bc:	b14b      	cbz	r3, 800e0d2 <__ascii_mbtowc+0x1e>
 800e0be:	7813      	ldrb	r3, [r2, #0]
 800e0c0:	600b      	str	r3, [r1, #0]
 800e0c2:	7812      	ldrb	r2, [r2, #0]
 800e0c4:	1e10      	subs	r0, r2, #0
 800e0c6:	bf18      	it	ne
 800e0c8:	2001      	movne	r0, #1
 800e0ca:	b002      	add	sp, #8
 800e0cc:	4770      	bx	lr
 800e0ce:	4610      	mov	r0, r2
 800e0d0:	e7fb      	b.n	800e0ca <__ascii_mbtowc+0x16>
 800e0d2:	f06f 0001 	mvn.w	r0, #1
 800e0d6:	e7f8      	b.n	800e0ca <__ascii_mbtowc+0x16>

0800e0d8 <__malloc_lock>:
 800e0d8:	4801      	ldr	r0, [pc, #4]	@ (800e0e0 <__malloc_lock+0x8>)
 800e0da:	f7fe bd50 	b.w	800cb7e <__retarget_lock_acquire_recursive>
 800e0de:	bf00      	nop
 800e0e0:	20000b84 	.word	0x20000b84

0800e0e4 <__malloc_unlock>:
 800e0e4:	4801      	ldr	r0, [pc, #4]	@ (800e0ec <__malloc_unlock+0x8>)
 800e0e6:	f7fe bd4b 	b.w	800cb80 <__retarget_lock_release_recursive>
 800e0ea:	bf00      	nop
 800e0ec:	20000b84 	.word	0x20000b84

0800e0f0 <_Balloc>:
 800e0f0:	b570      	push	{r4, r5, r6, lr}
 800e0f2:	69c6      	ldr	r6, [r0, #28]
 800e0f4:	4604      	mov	r4, r0
 800e0f6:	460d      	mov	r5, r1
 800e0f8:	b976      	cbnz	r6, 800e118 <_Balloc+0x28>
 800e0fa:	2010      	movs	r0, #16
 800e0fc:	f7ff ff30 	bl	800df60 <malloc>
 800e100:	4602      	mov	r2, r0
 800e102:	61e0      	str	r0, [r4, #28]
 800e104:	b920      	cbnz	r0, 800e110 <_Balloc+0x20>
 800e106:	4b18      	ldr	r3, [pc, #96]	@ (800e168 <_Balloc+0x78>)
 800e108:	4818      	ldr	r0, [pc, #96]	@ (800e16c <_Balloc+0x7c>)
 800e10a:	216b      	movs	r1, #107	@ 0x6b
 800e10c:	f001 fcac 	bl	800fa68 <__assert_func>
 800e110:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e114:	6006      	str	r6, [r0, #0]
 800e116:	60c6      	str	r6, [r0, #12]
 800e118:	69e6      	ldr	r6, [r4, #28]
 800e11a:	68f3      	ldr	r3, [r6, #12]
 800e11c:	b183      	cbz	r3, 800e140 <_Balloc+0x50>
 800e11e:	69e3      	ldr	r3, [r4, #28]
 800e120:	68db      	ldr	r3, [r3, #12]
 800e122:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e126:	b9b8      	cbnz	r0, 800e158 <_Balloc+0x68>
 800e128:	2101      	movs	r1, #1
 800e12a:	fa01 f605 	lsl.w	r6, r1, r5
 800e12e:	1d72      	adds	r2, r6, #5
 800e130:	0092      	lsls	r2, r2, #2
 800e132:	4620      	mov	r0, r4
 800e134:	f001 fcb6 	bl	800faa4 <_calloc_r>
 800e138:	b160      	cbz	r0, 800e154 <_Balloc+0x64>
 800e13a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e13e:	e00e      	b.n	800e15e <_Balloc+0x6e>
 800e140:	2221      	movs	r2, #33	@ 0x21
 800e142:	2104      	movs	r1, #4
 800e144:	4620      	mov	r0, r4
 800e146:	f001 fcad 	bl	800faa4 <_calloc_r>
 800e14a:	69e3      	ldr	r3, [r4, #28]
 800e14c:	60f0      	str	r0, [r6, #12]
 800e14e:	68db      	ldr	r3, [r3, #12]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d1e4      	bne.n	800e11e <_Balloc+0x2e>
 800e154:	2000      	movs	r0, #0
 800e156:	bd70      	pop	{r4, r5, r6, pc}
 800e158:	6802      	ldr	r2, [r0, #0]
 800e15a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e15e:	2300      	movs	r3, #0
 800e160:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e164:	e7f7      	b.n	800e156 <_Balloc+0x66>
 800e166:	bf00      	nop
 800e168:	08010f84 	.word	0x08010f84
 800e16c:	08011064 	.word	0x08011064

0800e170 <_Bfree>:
 800e170:	b570      	push	{r4, r5, r6, lr}
 800e172:	69c6      	ldr	r6, [r0, #28]
 800e174:	4605      	mov	r5, r0
 800e176:	460c      	mov	r4, r1
 800e178:	b976      	cbnz	r6, 800e198 <_Bfree+0x28>
 800e17a:	2010      	movs	r0, #16
 800e17c:	f7ff fef0 	bl	800df60 <malloc>
 800e180:	4602      	mov	r2, r0
 800e182:	61e8      	str	r0, [r5, #28]
 800e184:	b920      	cbnz	r0, 800e190 <_Bfree+0x20>
 800e186:	4b09      	ldr	r3, [pc, #36]	@ (800e1ac <_Bfree+0x3c>)
 800e188:	4809      	ldr	r0, [pc, #36]	@ (800e1b0 <_Bfree+0x40>)
 800e18a:	218f      	movs	r1, #143	@ 0x8f
 800e18c:	f001 fc6c 	bl	800fa68 <__assert_func>
 800e190:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e194:	6006      	str	r6, [r0, #0]
 800e196:	60c6      	str	r6, [r0, #12]
 800e198:	b13c      	cbz	r4, 800e1aa <_Bfree+0x3a>
 800e19a:	69eb      	ldr	r3, [r5, #28]
 800e19c:	6862      	ldr	r2, [r4, #4]
 800e19e:	68db      	ldr	r3, [r3, #12]
 800e1a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e1a4:	6021      	str	r1, [r4, #0]
 800e1a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e1aa:	bd70      	pop	{r4, r5, r6, pc}
 800e1ac:	08010f84 	.word	0x08010f84
 800e1b0:	08011064 	.word	0x08011064

0800e1b4 <__multadd>:
 800e1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1b8:	690d      	ldr	r5, [r1, #16]
 800e1ba:	4607      	mov	r7, r0
 800e1bc:	460c      	mov	r4, r1
 800e1be:	461e      	mov	r6, r3
 800e1c0:	f101 0c14 	add.w	ip, r1, #20
 800e1c4:	2000      	movs	r0, #0
 800e1c6:	f8dc 3000 	ldr.w	r3, [ip]
 800e1ca:	b299      	uxth	r1, r3
 800e1cc:	fb02 6101 	mla	r1, r2, r1, r6
 800e1d0:	0c1e      	lsrs	r6, r3, #16
 800e1d2:	0c0b      	lsrs	r3, r1, #16
 800e1d4:	fb02 3306 	mla	r3, r2, r6, r3
 800e1d8:	b289      	uxth	r1, r1
 800e1da:	3001      	adds	r0, #1
 800e1dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e1e0:	4285      	cmp	r5, r0
 800e1e2:	f84c 1b04 	str.w	r1, [ip], #4
 800e1e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e1ea:	dcec      	bgt.n	800e1c6 <__multadd+0x12>
 800e1ec:	b30e      	cbz	r6, 800e232 <__multadd+0x7e>
 800e1ee:	68a3      	ldr	r3, [r4, #8]
 800e1f0:	42ab      	cmp	r3, r5
 800e1f2:	dc19      	bgt.n	800e228 <__multadd+0x74>
 800e1f4:	6861      	ldr	r1, [r4, #4]
 800e1f6:	4638      	mov	r0, r7
 800e1f8:	3101      	adds	r1, #1
 800e1fa:	f7ff ff79 	bl	800e0f0 <_Balloc>
 800e1fe:	4680      	mov	r8, r0
 800e200:	b928      	cbnz	r0, 800e20e <__multadd+0x5a>
 800e202:	4602      	mov	r2, r0
 800e204:	4b0c      	ldr	r3, [pc, #48]	@ (800e238 <__multadd+0x84>)
 800e206:	480d      	ldr	r0, [pc, #52]	@ (800e23c <__multadd+0x88>)
 800e208:	21ba      	movs	r1, #186	@ 0xba
 800e20a:	f001 fc2d 	bl	800fa68 <__assert_func>
 800e20e:	6922      	ldr	r2, [r4, #16]
 800e210:	3202      	adds	r2, #2
 800e212:	f104 010c 	add.w	r1, r4, #12
 800e216:	0092      	lsls	r2, r2, #2
 800e218:	300c      	adds	r0, #12
 800e21a:	f7fe fcb2 	bl	800cb82 <memcpy>
 800e21e:	4621      	mov	r1, r4
 800e220:	4638      	mov	r0, r7
 800e222:	f7ff ffa5 	bl	800e170 <_Bfree>
 800e226:	4644      	mov	r4, r8
 800e228:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e22c:	3501      	adds	r5, #1
 800e22e:	615e      	str	r6, [r3, #20]
 800e230:	6125      	str	r5, [r4, #16]
 800e232:	4620      	mov	r0, r4
 800e234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e238:	08010ff3 	.word	0x08010ff3
 800e23c:	08011064 	.word	0x08011064

0800e240 <__s2b>:
 800e240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e244:	460c      	mov	r4, r1
 800e246:	4615      	mov	r5, r2
 800e248:	461f      	mov	r7, r3
 800e24a:	2209      	movs	r2, #9
 800e24c:	3308      	adds	r3, #8
 800e24e:	4606      	mov	r6, r0
 800e250:	fb93 f3f2 	sdiv	r3, r3, r2
 800e254:	2100      	movs	r1, #0
 800e256:	2201      	movs	r2, #1
 800e258:	429a      	cmp	r2, r3
 800e25a:	db09      	blt.n	800e270 <__s2b+0x30>
 800e25c:	4630      	mov	r0, r6
 800e25e:	f7ff ff47 	bl	800e0f0 <_Balloc>
 800e262:	b940      	cbnz	r0, 800e276 <__s2b+0x36>
 800e264:	4602      	mov	r2, r0
 800e266:	4b19      	ldr	r3, [pc, #100]	@ (800e2cc <__s2b+0x8c>)
 800e268:	4819      	ldr	r0, [pc, #100]	@ (800e2d0 <__s2b+0x90>)
 800e26a:	21d3      	movs	r1, #211	@ 0xd3
 800e26c:	f001 fbfc 	bl	800fa68 <__assert_func>
 800e270:	0052      	lsls	r2, r2, #1
 800e272:	3101      	adds	r1, #1
 800e274:	e7f0      	b.n	800e258 <__s2b+0x18>
 800e276:	9b08      	ldr	r3, [sp, #32]
 800e278:	6143      	str	r3, [r0, #20]
 800e27a:	2d09      	cmp	r5, #9
 800e27c:	f04f 0301 	mov.w	r3, #1
 800e280:	6103      	str	r3, [r0, #16]
 800e282:	dd16      	ble.n	800e2b2 <__s2b+0x72>
 800e284:	f104 0909 	add.w	r9, r4, #9
 800e288:	46c8      	mov	r8, r9
 800e28a:	442c      	add	r4, r5
 800e28c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e290:	4601      	mov	r1, r0
 800e292:	3b30      	subs	r3, #48	@ 0x30
 800e294:	220a      	movs	r2, #10
 800e296:	4630      	mov	r0, r6
 800e298:	f7ff ff8c 	bl	800e1b4 <__multadd>
 800e29c:	45a0      	cmp	r8, r4
 800e29e:	d1f5      	bne.n	800e28c <__s2b+0x4c>
 800e2a0:	f1a5 0408 	sub.w	r4, r5, #8
 800e2a4:	444c      	add	r4, r9
 800e2a6:	1b2d      	subs	r5, r5, r4
 800e2a8:	1963      	adds	r3, r4, r5
 800e2aa:	42bb      	cmp	r3, r7
 800e2ac:	db04      	blt.n	800e2b8 <__s2b+0x78>
 800e2ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2b2:	340a      	adds	r4, #10
 800e2b4:	2509      	movs	r5, #9
 800e2b6:	e7f6      	b.n	800e2a6 <__s2b+0x66>
 800e2b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e2bc:	4601      	mov	r1, r0
 800e2be:	3b30      	subs	r3, #48	@ 0x30
 800e2c0:	220a      	movs	r2, #10
 800e2c2:	4630      	mov	r0, r6
 800e2c4:	f7ff ff76 	bl	800e1b4 <__multadd>
 800e2c8:	e7ee      	b.n	800e2a8 <__s2b+0x68>
 800e2ca:	bf00      	nop
 800e2cc:	08010ff3 	.word	0x08010ff3
 800e2d0:	08011064 	.word	0x08011064

0800e2d4 <__hi0bits>:
 800e2d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e2d8:	4603      	mov	r3, r0
 800e2da:	bf36      	itet	cc
 800e2dc:	0403      	lslcc	r3, r0, #16
 800e2de:	2000      	movcs	r0, #0
 800e2e0:	2010      	movcc	r0, #16
 800e2e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e2e6:	bf3c      	itt	cc
 800e2e8:	021b      	lslcc	r3, r3, #8
 800e2ea:	3008      	addcc	r0, #8
 800e2ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e2f0:	bf3c      	itt	cc
 800e2f2:	011b      	lslcc	r3, r3, #4
 800e2f4:	3004      	addcc	r0, #4
 800e2f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e2fa:	bf3c      	itt	cc
 800e2fc:	009b      	lslcc	r3, r3, #2
 800e2fe:	3002      	addcc	r0, #2
 800e300:	2b00      	cmp	r3, #0
 800e302:	db05      	blt.n	800e310 <__hi0bits+0x3c>
 800e304:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e308:	f100 0001 	add.w	r0, r0, #1
 800e30c:	bf08      	it	eq
 800e30e:	2020      	moveq	r0, #32
 800e310:	4770      	bx	lr

0800e312 <__lo0bits>:
 800e312:	6803      	ldr	r3, [r0, #0]
 800e314:	4602      	mov	r2, r0
 800e316:	f013 0007 	ands.w	r0, r3, #7
 800e31a:	d00b      	beq.n	800e334 <__lo0bits+0x22>
 800e31c:	07d9      	lsls	r1, r3, #31
 800e31e:	d421      	bmi.n	800e364 <__lo0bits+0x52>
 800e320:	0798      	lsls	r0, r3, #30
 800e322:	bf49      	itett	mi
 800e324:	085b      	lsrmi	r3, r3, #1
 800e326:	089b      	lsrpl	r3, r3, #2
 800e328:	2001      	movmi	r0, #1
 800e32a:	6013      	strmi	r3, [r2, #0]
 800e32c:	bf5c      	itt	pl
 800e32e:	6013      	strpl	r3, [r2, #0]
 800e330:	2002      	movpl	r0, #2
 800e332:	4770      	bx	lr
 800e334:	b299      	uxth	r1, r3
 800e336:	b909      	cbnz	r1, 800e33c <__lo0bits+0x2a>
 800e338:	0c1b      	lsrs	r3, r3, #16
 800e33a:	2010      	movs	r0, #16
 800e33c:	b2d9      	uxtb	r1, r3
 800e33e:	b909      	cbnz	r1, 800e344 <__lo0bits+0x32>
 800e340:	3008      	adds	r0, #8
 800e342:	0a1b      	lsrs	r3, r3, #8
 800e344:	0719      	lsls	r1, r3, #28
 800e346:	bf04      	itt	eq
 800e348:	091b      	lsreq	r3, r3, #4
 800e34a:	3004      	addeq	r0, #4
 800e34c:	0799      	lsls	r1, r3, #30
 800e34e:	bf04      	itt	eq
 800e350:	089b      	lsreq	r3, r3, #2
 800e352:	3002      	addeq	r0, #2
 800e354:	07d9      	lsls	r1, r3, #31
 800e356:	d403      	bmi.n	800e360 <__lo0bits+0x4e>
 800e358:	085b      	lsrs	r3, r3, #1
 800e35a:	f100 0001 	add.w	r0, r0, #1
 800e35e:	d003      	beq.n	800e368 <__lo0bits+0x56>
 800e360:	6013      	str	r3, [r2, #0]
 800e362:	4770      	bx	lr
 800e364:	2000      	movs	r0, #0
 800e366:	4770      	bx	lr
 800e368:	2020      	movs	r0, #32
 800e36a:	4770      	bx	lr

0800e36c <__i2b>:
 800e36c:	b510      	push	{r4, lr}
 800e36e:	460c      	mov	r4, r1
 800e370:	2101      	movs	r1, #1
 800e372:	f7ff febd 	bl	800e0f0 <_Balloc>
 800e376:	4602      	mov	r2, r0
 800e378:	b928      	cbnz	r0, 800e386 <__i2b+0x1a>
 800e37a:	4b05      	ldr	r3, [pc, #20]	@ (800e390 <__i2b+0x24>)
 800e37c:	4805      	ldr	r0, [pc, #20]	@ (800e394 <__i2b+0x28>)
 800e37e:	f240 1145 	movw	r1, #325	@ 0x145
 800e382:	f001 fb71 	bl	800fa68 <__assert_func>
 800e386:	2301      	movs	r3, #1
 800e388:	6144      	str	r4, [r0, #20]
 800e38a:	6103      	str	r3, [r0, #16]
 800e38c:	bd10      	pop	{r4, pc}
 800e38e:	bf00      	nop
 800e390:	08010ff3 	.word	0x08010ff3
 800e394:	08011064 	.word	0x08011064

0800e398 <__multiply>:
 800e398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e39c:	4614      	mov	r4, r2
 800e39e:	690a      	ldr	r2, [r1, #16]
 800e3a0:	6923      	ldr	r3, [r4, #16]
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	bfa8      	it	ge
 800e3a6:	4623      	movge	r3, r4
 800e3a8:	460f      	mov	r7, r1
 800e3aa:	bfa4      	itt	ge
 800e3ac:	460c      	movge	r4, r1
 800e3ae:	461f      	movge	r7, r3
 800e3b0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e3b4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e3b8:	68a3      	ldr	r3, [r4, #8]
 800e3ba:	6861      	ldr	r1, [r4, #4]
 800e3bc:	eb0a 0609 	add.w	r6, sl, r9
 800e3c0:	42b3      	cmp	r3, r6
 800e3c2:	b085      	sub	sp, #20
 800e3c4:	bfb8      	it	lt
 800e3c6:	3101      	addlt	r1, #1
 800e3c8:	f7ff fe92 	bl	800e0f0 <_Balloc>
 800e3cc:	b930      	cbnz	r0, 800e3dc <__multiply+0x44>
 800e3ce:	4602      	mov	r2, r0
 800e3d0:	4b44      	ldr	r3, [pc, #272]	@ (800e4e4 <__multiply+0x14c>)
 800e3d2:	4845      	ldr	r0, [pc, #276]	@ (800e4e8 <__multiply+0x150>)
 800e3d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e3d8:	f001 fb46 	bl	800fa68 <__assert_func>
 800e3dc:	f100 0514 	add.w	r5, r0, #20
 800e3e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e3e4:	462b      	mov	r3, r5
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	4543      	cmp	r3, r8
 800e3ea:	d321      	bcc.n	800e430 <__multiply+0x98>
 800e3ec:	f107 0114 	add.w	r1, r7, #20
 800e3f0:	f104 0214 	add.w	r2, r4, #20
 800e3f4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e3f8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e3fc:	9302      	str	r3, [sp, #8]
 800e3fe:	1b13      	subs	r3, r2, r4
 800e400:	3b15      	subs	r3, #21
 800e402:	f023 0303 	bic.w	r3, r3, #3
 800e406:	3304      	adds	r3, #4
 800e408:	f104 0715 	add.w	r7, r4, #21
 800e40c:	42ba      	cmp	r2, r7
 800e40e:	bf38      	it	cc
 800e410:	2304      	movcc	r3, #4
 800e412:	9301      	str	r3, [sp, #4]
 800e414:	9b02      	ldr	r3, [sp, #8]
 800e416:	9103      	str	r1, [sp, #12]
 800e418:	428b      	cmp	r3, r1
 800e41a:	d80c      	bhi.n	800e436 <__multiply+0x9e>
 800e41c:	2e00      	cmp	r6, #0
 800e41e:	dd03      	ble.n	800e428 <__multiply+0x90>
 800e420:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e424:	2b00      	cmp	r3, #0
 800e426:	d05b      	beq.n	800e4e0 <__multiply+0x148>
 800e428:	6106      	str	r6, [r0, #16]
 800e42a:	b005      	add	sp, #20
 800e42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e430:	f843 2b04 	str.w	r2, [r3], #4
 800e434:	e7d8      	b.n	800e3e8 <__multiply+0x50>
 800e436:	f8b1 a000 	ldrh.w	sl, [r1]
 800e43a:	f1ba 0f00 	cmp.w	sl, #0
 800e43e:	d024      	beq.n	800e48a <__multiply+0xf2>
 800e440:	f104 0e14 	add.w	lr, r4, #20
 800e444:	46a9      	mov	r9, r5
 800e446:	f04f 0c00 	mov.w	ip, #0
 800e44a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e44e:	f8d9 3000 	ldr.w	r3, [r9]
 800e452:	fa1f fb87 	uxth.w	fp, r7
 800e456:	b29b      	uxth	r3, r3
 800e458:	fb0a 330b 	mla	r3, sl, fp, r3
 800e45c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e460:	f8d9 7000 	ldr.w	r7, [r9]
 800e464:	4463      	add	r3, ip
 800e466:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e46a:	fb0a c70b 	mla	r7, sl, fp, ip
 800e46e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e472:	b29b      	uxth	r3, r3
 800e474:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e478:	4572      	cmp	r2, lr
 800e47a:	f849 3b04 	str.w	r3, [r9], #4
 800e47e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e482:	d8e2      	bhi.n	800e44a <__multiply+0xb2>
 800e484:	9b01      	ldr	r3, [sp, #4]
 800e486:	f845 c003 	str.w	ip, [r5, r3]
 800e48a:	9b03      	ldr	r3, [sp, #12]
 800e48c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e490:	3104      	adds	r1, #4
 800e492:	f1b9 0f00 	cmp.w	r9, #0
 800e496:	d021      	beq.n	800e4dc <__multiply+0x144>
 800e498:	682b      	ldr	r3, [r5, #0]
 800e49a:	f104 0c14 	add.w	ip, r4, #20
 800e49e:	46ae      	mov	lr, r5
 800e4a0:	f04f 0a00 	mov.w	sl, #0
 800e4a4:	f8bc b000 	ldrh.w	fp, [ip]
 800e4a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e4ac:	fb09 770b 	mla	r7, r9, fp, r7
 800e4b0:	4457      	add	r7, sl
 800e4b2:	b29b      	uxth	r3, r3
 800e4b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e4b8:	f84e 3b04 	str.w	r3, [lr], #4
 800e4bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e4c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e4c4:	f8be 3000 	ldrh.w	r3, [lr]
 800e4c8:	fb09 330a 	mla	r3, r9, sl, r3
 800e4cc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e4d0:	4562      	cmp	r2, ip
 800e4d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e4d6:	d8e5      	bhi.n	800e4a4 <__multiply+0x10c>
 800e4d8:	9f01      	ldr	r7, [sp, #4]
 800e4da:	51eb      	str	r3, [r5, r7]
 800e4dc:	3504      	adds	r5, #4
 800e4de:	e799      	b.n	800e414 <__multiply+0x7c>
 800e4e0:	3e01      	subs	r6, #1
 800e4e2:	e79b      	b.n	800e41c <__multiply+0x84>
 800e4e4:	08010ff3 	.word	0x08010ff3
 800e4e8:	08011064 	.word	0x08011064

0800e4ec <__pow5mult>:
 800e4ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4f0:	4615      	mov	r5, r2
 800e4f2:	f012 0203 	ands.w	r2, r2, #3
 800e4f6:	4607      	mov	r7, r0
 800e4f8:	460e      	mov	r6, r1
 800e4fa:	d007      	beq.n	800e50c <__pow5mult+0x20>
 800e4fc:	4c25      	ldr	r4, [pc, #148]	@ (800e594 <__pow5mult+0xa8>)
 800e4fe:	3a01      	subs	r2, #1
 800e500:	2300      	movs	r3, #0
 800e502:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e506:	f7ff fe55 	bl	800e1b4 <__multadd>
 800e50a:	4606      	mov	r6, r0
 800e50c:	10ad      	asrs	r5, r5, #2
 800e50e:	d03d      	beq.n	800e58c <__pow5mult+0xa0>
 800e510:	69fc      	ldr	r4, [r7, #28]
 800e512:	b97c      	cbnz	r4, 800e534 <__pow5mult+0x48>
 800e514:	2010      	movs	r0, #16
 800e516:	f7ff fd23 	bl	800df60 <malloc>
 800e51a:	4602      	mov	r2, r0
 800e51c:	61f8      	str	r0, [r7, #28]
 800e51e:	b928      	cbnz	r0, 800e52c <__pow5mult+0x40>
 800e520:	4b1d      	ldr	r3, [pc, #116]	@ (800e598 <__pow5mult+0xac>)
 800e522:	481e      	ldr	r0, [pc, #120]	@ (800e59c <__pow5mult+0xb0>)
 800e524:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e528:	f001 fa9e 	bl	800fa68 <__assert_func>
 800e52c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e530:	6004      	str	r4, [r0, #0]
 800e532:	60c4      	str	r4, [r0, #12]
 800e534:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e538:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e53c:	b94c      	cbnz	r4, 800e552 <__pow5mult+0x66>
 800e53e:	f240 2171 	movw	r1, #625	@ 0x271
 800e542:	4638      	mov	r0, r7
 800e544:	f7ff ff12 	bl	800e36c <__i2b>
 800e548:	2300      	movs	r3, #0
 800e54a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e54e:	4604      	mov	r4, r0
 800e550:	6003      	str	r3, [r0, #0]
 800e552:	f04f 0900 	mov.w	r9, #0
 800e556:	07eb      	lsls	r3, r5, #31
 800e558:	d50a      	bpl.n	800e570 <__pow5mult+0x84>
 800e55a:	4631      	mov	r1, r6
 800e55c:	4622      	mov	r2, r4
 800e55e:	4638      	mov	r0, r7
 800e560:	f7ff ff1a 	bl	800e398 <__multiply>
 800e564:	4631      	mov	r1, r6
 800e566:	4680      	mov	r8, r0
 800e568:	4638      	mov	r0, r7
 800e56a:	f7ff fe01 	bl	800e170 <_Bfree>
 800e56e:	4646      	mov	r6, r8
 800e570:	106d      	asrs	r5, r5, #1
 800e572:	d00b      	beq.n	800e58c <__pow5mult+0xa0>
 800e574:	6820      	ldr	r0, [r4, #0]
 800e576:	b938      	cbnz	r0, 800e588 <__pow5mult+0x9c>
 800e578:	4622      	mov	r2, r4
 800e57a:	4621      	mov	r1, r4
 800e57c:	4638      	mov	r0, r7
 800e57e:	f7ff ff0b 	bl	800e398 <__multiply>
 800e582:	6020      	str	r0, [r4, #0]
 800e584:	f8c0 9000 	str.w	r9, [r0]
 800e588:	4604      	mov	r4, r0
 800e58a:	e7e4      	b.n	800e556 <__pow5mult+0x6a>
 800e58c:	4630      	mov	r0, r6
 800e58e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e592:	bf00      	nop
 800e594:	080110c0 	.word	0x080110c0
 800e598:	08010f84 	.word	0x08010f84
 800e59c:	08011064 	.word	0x08011064

0800e5a0 <__lshift>:
 800e5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5a4:	460c      	mov	r4, r1
 800e5a6:	6849      	ldr	r1, [r1, #4]
 800e5a8:	6923      	ldr	r3, [r4, #16]
 800e5aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e5ae:	68a3      	ldr	r3, [r4, #8]
 800e5b0:	4607      	mov	r7, r0
 800e5b2:	4691      	mov	r9, r2
 800e5b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e5b8:	f108 0601 	add.w	r6, r8, #1
 800e5bc:	42b3      	cmp	r3, r6
 800e5be:	db0b      	blt.n	800e5d8 <__lshift+0x38>
 800e5c0:	4638      	mov	r0, r7
 800e5c2:	f7ff fd95 	bl	800e0f0 <_Balloc>
 800e5c6:	4605      	mov	r5, r0
 800e5c8:	b948      	cbnz	r0, 800e5de <__lshift+0x3e>
 800e5ca:	4602      	mov	r2, r0
 800e5cc:	4b28      	ldr	r3, [pc, #160]	@ (800e670 <__lshift+0xd0>)
 800e5ce:	4829      	ldr	r0, [pc, #164]	@ (800e674 <__lshift+0xd4>)
 800e5d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e5d4:	f001 fa48 	bl	800fa68 <__assert_func>
 800e5d8:	3101      	adds	r1, #1
 800e5da:	005b      	lsls	r3, r3, #1
 800e5dc:	e7ee      	b.n	800e5bc <__lshift+0x1c>
 800e5de:	2300      	movs	r3, #0
 800e5e0:	f100 0114 	add.w	r1, r0, #20
 800e5e4:	f100 0210 	add.w	r2, r0, #16
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	4553      	cmp	r3, sl
 800e5ec:	db33      	blt.n	800e656 <__lshift+0xb6>
 800e5ee:	6920      	ldr	r0, [r4, #16]
 800e5f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e5f4:	f104 0314 	add.w	r3, r4, #20
 800e5f8:	f019 091f 	ands.w	r9, r9, #31
 800e5fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e600:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e604:	d02b      	beq.n	800e65e <__lshift+0xbe>
 800e606:	f1c9 0e20 	rsb	lr, r9, #32
 800e60a:	468a      	mov	sl, r1
 800e60c:	2200      	movs	r2, #0
 800e60e:	6818      	ldr	r0, [r3, #0]
 800e610:	fa00 f009 	lsl.w	r0, r0, r9
 800e614:	4310      	orrs	r0, r2
 800e616:	f84a 0b04 	str.w	r0, [sl], #4
 800e61a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e61e:	459c      	cmp	ip, r3
 800e620:	fa22 f20e 	lsr.w	r2, r2, lr
 800e624:	d8f3      	bhi.n	800e60e <__lshift+0x6e>
 800e626:	ebac 0304 	sub.w	r3, ip, r4
 800e62a:	3b15      	subs	r3, #21
 800e62c:	f023 0303 	bic.w	r3, r3, #3
 800e630:	3304      	adds	r3, #4
 800e632:	f104 0015 	add.w	r0, r4, #21
 800e636:	4584      	cmp	ip, r0
 800e638:	bf38      	it	cc
 800e63a:	2304      	movcc	r3, #4
 800e63c:	50ca      	str	r2, [r1, r3]
 800e63e:	b10a      	cbz	r2, 800e644 <__lshift+0xa4>
 800e640:	f108 0602 	add.w	r6, r8, #2
 800e644:	3e01      	subs	r6, #1
 800e646:	4638      	mov	r0, r7
 800e648:	612e      	str	r6, [r5, #16]
 800e64a:	4621      	mov	r1, r4
 800e64c:	f7ff fd90 	bl	800e170 <_Bfree>
 800e650:	4628      	mov	r0, r5
 800e652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e656:	f842 0f04 	str.w	r0, [r2, #4]!
 800e65a:	3301      	adds	r3, #1
 800e65c:	e7c5      	b.n	800e5ea <__lshift+0x4a>
 800e65e:	3904      	subs	r1, #4
 800e660:	f853 2b04 	ldr.w	r2, [r3], #4
 800e664:	f841 2f04 	str.w	r2, [r1, #4]!
 800e668:	459c      	cmp	ip, r3
 800e66a:	d8f9      	bhi.n	800e660 <__lshift+0xc0>
 800e66c:	e7ea      	b.n	800e644 <__lshift+0xa4>
 800e66e:	bf00      	nop
 800e670:	08010ff3 	.word	0x08010ff3
 800e674:	08011064 	.word	0x08011064

0800e678 <__mcmp>:
 800e678:	690a      	ldr	r2, [r1, #16]
 800e67a:	4603      	mov	r3, r0
 800e67c:	6900      	ldr	r0, [r0, #16]
 800e67e:	1a80      	subs	r0, r0, r2
 800e680:	b530      	push	{r4, r5, lr}
 800e682:	d10e      	bne.n	800e6a2 <__mcmp+0x2a>
 800e684:	3314      	adds	r3, #20
 800e686:	3114      	adds	r1, #20
 800e688:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e68c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e690:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e694:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e698:	4295      	cmp	r5, r2
 800e69a:	d003      	beq.n	800e6a4 <__mcmp+0x2c>
 800e69c:	d205      	bcs.n	800e6aa <__mcmp+0x32>
 800e69e:	f04f 30ff 	mov.w	r0, #4294967295
 800e6a2:	bd30      	pop	{r4, r5, pc}
 800e6a4:	42a3      	cmp	r3, r4
 800e6a6:	d3f3      	bcc.n	800e690 <__mcmp+0x18>
 800e6a8:	e7fb      	b.n	800e6a2 <__mcmp+0x2a>
 800e6aa:	2001      	movs	r0, #1
 800e6ac:	e7f9      	b.n	800e6a2 <__mcmp+0x2a>
	...

0800e6b0 <__mdiff>:
 800e6b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6b4:	4689      	mov	r9, r1
 800e6b6:	4606      	mov	r6, r0
 800e6b8:	4611      	mov	r1, r2
 800e6ba:	4648      	mov	r0, r9
 800e6bc:	4614      	mov	r4, r2
 800e6be:	f7ff ffdb 	bl	800e678 <__mcmp>
 800e6c2:	1e05      	subs	r5, r0, #0
 800e6c4:	d112      	bne.n	800e6ec <__mdiff+0x3c>
 800e6c6:	4629      	mov	r1, r5
 800e6c8:	4630      	mov	r0, r6
 800e6ca:	f7ff fd11 	bl	800e0f0 <_Balloc>
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	b928      	cbnz	r0, 800e6de <__mdiff+0x2e>
 800e6d2:	4b3f      	ldr	r3, [pc, #252]	@ (800e7d0 <__mdiff+0x120>)
 800e6d4:	f240 2137 	movw	r1, #567	@ 0x237
 800e6d8:	483e      	ldr	r0, [pc, #248]	@ (800e7d4 <__mdiff+0x124>)
 800e6da:	f001 f9c5 	bl	800fa68 <__assert_func>
 800e6de:	2301      	movs	r3, #1
 800e6e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e6e4:	4610      	mov	r0, r2
 800e6e6:	b003      	add	sp, #12
 800e6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6ec:	bfbc      	itt	lt
 800e6ee:	464b      	movlt	r3, r9
 800e6f0:	46a1      	movlt	r9, r4
 800e6f2:	4630      	mov	r0, r6
 800e6f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e6f8:	bfba      	itte	lt
 800e6fa:	461c      	movlt	r4, r3
 800e6fc:	2501      	movlt	r5, #1
 800e6fe:	2500      	movge	r5, #0
 800e700:	f7ff fcf6 	bl	800e0f0 <_Balloc>
 800e704:	4602      	mov	r2, r0
 800e706:	b918      	cbnz	r0, 800e710 <__mdiff+0x60>
 800e708:	4b31      	ldr	r3, [pc, #196]	@ (800e7d0 <__mdiff+0x120>)
 800e70a:	f240 2145 	movw	r1, #581	@ 0x245
 800e70e:	e7e3      	b.n	800e6d8 <__mdiff+0x28>
 800e710:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e714:	6926      	ldr	r6, [r4, #16]
 800e716:	60c5      	str	r5, [r0, #12]
 800e718:	f109 0310 	add.w	r3, r9, #16
 800e71c:	f109 0514 	add.w	r5, r9, #20
 800e720:	f104 0e14 	add.w	lr, r4, #20
 800e724:	f100 0b14 	add.w	fp, r0, #20
 800e728:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e72c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e730:	9301      	str	r3, [sp, #4]
 800e732:	46d9      	mov	r9, fp
 800e734:	f04f 0c00 	mov.w	ip, #0
 800e738:	9b01      	ldr	r3, [sp, #4]
 800e73a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e73e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e742:	9301      	str	r3, [sp, #4]
 800e744:	fa1f f38a 	uxth.w	r3, sl
 800e748:	4619      	mov	r1, r3
 800e74a:	b283      	uxth	r3, r0
 800e74c:	1acb      	subs	r3, r1, r3
 800e74e:	0c00      	lsrs	r0, r0, #16
 800e750:	4463      	add	r3, ip
 800e752:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e756:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e75a:	b29b      	uxth	r3, r3
 800e75c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e760:	4576      	cmp	r6, lr
 800e762:	f849 3b04 	str.w	r3, [r9], #4
 800e766:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e76a:	d8e5      	bhi.n	800e738 <__mdiff+0x88>
 800e76c:	1b33      	subs	r3, r6, r4
 800e76e:	3b15      	subs	r3, #21
 800e770:	f023 0303 	bic.w	r3, r3, #3
 800e774:	3415      	adds	r4, #21
 800e776:	3304      	adds	r3, #4
 800e778:	42a6      	cmp	r6, r4
 800e77a:	bf38      	it	cc
 800e77c:	2304      	movcc	r3, #4
 800e77e:	441d      	add	r5, r3
 800e780:	445b      	add	r3, fp
 800e782:	461e      	mov	r6, r3
 800e784:	462c      	mov	r4, r5
 800e786:	4544      	cmp	r4, r8
 800e788:	d30e      	bcc.n	800e7a8 <__mdiff+0xf8>
 800e78a:	f108 0103 	add.w	r1, r8, #3
 800e78e:	1b49      	subs	r1, r1, r5
 800e790:	f021 0103 	bic.w	r1, r1, #3
 800e794:	3d03      	subs	r5, #3
 800e796:	45a8      	cmp	r8, r5
 800e798:	bf38      	it	cc
 800e79a:	2100      	movcc	r1, #0
 800e79c:	440b      	add	r3, r1
 800e79e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e7a2:	b191      	cbz	r1, 800e7ca <__mdiff+0x11a>
 800e7a4:	6117      	str	r7, [r2, #16]
 800e7a6:	e79d      	b.n	800e6e4 <__mdiff+0x34>
 800e7a8:	f854 1b04 	ldr.w	r1, [r4], #4
 800e7ac:	46e6      	mov	lr, ip
 800e7ae:	0c08      	lsrs	r0, r1, #16
 800e7b0:	fa1c fc81 	uxtah	ip, ip, r1
 800e7b4:	4471      	add	r1, lr
 800e7b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e7ba:	b289      	uxth	r1, r1
 800e7bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e7c0:	f846 1b04 	str.w	r1, [r6], #4
 800e7c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e7c8:	e7dd      	b.n	800e786 <__mdiff+0xd6>
 800e7ca:	3f01      	subs	r7, #1
 800e7cc:	e7e7      	b.n	800e79e <__mdiff+0xee>
 800e7ce:	bf00      	nop
 800e7d0:	08010ff3 	.word	0x08010ff3
 800e7d4:	08011064 	.word	0x08011064

0800e7d8 <__ulp>:
 800e7d8:	b082      	sub	sp, #8
 800e7da:	ed8d 0b00 	vstr	d0, [sp]
 800e7de:	9a01      	ldr	r2, [sp, #4]
 800e7e0:	4b0f      	ldr	r3, [pc, #60]	@ (800e820 <__ulp+0x48>)
 800e7e2:	4013      	ands	r3, r2
 800e7e4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	dc08      	bgt.n	800e7fe <__ulp+0x26>
 800e7ec:	425b      	negs	r3, r3
 800e7ee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e7f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e7f6:	da04      	bge.n	800e802 <__ulp+0x2a>
 800e7f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e7fc:	4113      	asrs	r3, r2
 800e7fe:	2200      	movs	r2, #0
 800e800:	e008      	b.n	800e814 <__ulp+0x3c>
 800e802:	f1a2 0314 	sub.w	r3, r2, #20
 800e806:	2b1e      	cmp	r3, #30
 800e808:	bfda      	itte	le
 800e80a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e80e:	40da      	lsrle	r2, r3
 800e810:	2201      	movgt	r2, #1
 800e812:	2300      	movs	r3, #0
 800e814:	4619      	mov	r1, r3
 800e816:	4610      	mov	r0, r2
 800e818:	ec41 0b10 	vmov	d0, r0, r1
 800e81c:	b002      	add	sp, #8
 800e81e:	4770      	bx	lr
 800e820:	7ff00000 	.word	0x7ff00000

0800e824 <__b2d>:
 800e824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e828:	6906      	ldr	r6, [r0, #16]
 800e82a:	f100 0814 	add.w	r8, r0, #20
 800e82e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e832:	1f37      	subs	r7, r6, #4
 800e834:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e838:	4610      	mov	r0, r2
 800e83a:	f7ff fd4b 	bl	800e2d4 <__hi0bits>
 800e83e:	f1c0 0320 	rsb	r3, r0, #32
 800e842:	280a      	cmp	r0, #10
 800e844:	600b      	str	r3, [r1, #0]
 800e846:	491b      	ldr	r1, [pc, #108]	@ (800e8b4 <__b2d+0x90>)
 800e848:	dc15      	bgt.n	800e876 <__b2d+0x52>
 800e84a:	f1c0 0c0b 	rsb	ip, r0, #11
 800e84e:	fa22 f30c 	lsr.w	r3, r2, ip
 800e852:	45b8      	cmp	r8, r7
 800e854:	ea43 0501 	orr.w	r5, r3, r1
 800e858:	bf34      	ite	cc
 800e85a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e85e:	2300      	movcs	r3, #0
 800e860:	3015      	adds	r0, #21
 800e862:	fa02 f000 	lsl.w	r0, r2, r0
 800e866:	fa23 f30c 	lsr.w	r3, r3, ip
 800e86a:	4303      	orrs	r3, r0
 800e86c:	461c      	mov	r4, r3
 800e86e:	ec45 4b10 	vmov	d0, r4, r5
 800e872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e876:	45b8      	cmp	r8, r7
 800e878:	bf3a      	itte	cc
 800e87a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e87e:	f1a6 0708 	subcc.w	r7, r6, #8
 800e882:	2300      	movcs	r3, #0
 800e884:	380b      	subs	r0, #11
 800e886:	d012      	beq.n	800e8ae <__b2d+0x8a>
 800e888:	f1c0 0120 	rsb	r1, r0, #32
 800e88c:	fa23 f401 	lsr.w	r4, r3, r1
 800e890:	4082      	lsls	r2, r0
 800e892:	4322      	orrs	r2, r4
 800e894:	4547      	cmp	r7, r8
 800e896:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e89a:	bf8c      	ite	hi
 800e89c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e8a0:	2200      	movls	r2, #0
 800e8a2:	4083      	lsls	r3, r0
 800e8a4:	40ca      	lsrs	r2, r1
 800e8a6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e8aa:	4313      	orrs	r3, r2
 800e8ac:	e7de      	b.n	800e86c <__b2d+0x48>
 800e8ae:	ea42 0501 	orr.w	r5, r2, r1
 800e8b2:	e7db      	b.n	800e86c <__b2d+0x48>
 800e8b4:	3ff00000 	.word	0x3ff00000

0800e8b8 <__d2b>:
 800e8b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e8bc:	460f      	mov	r7, r1
 800e8be:	2101      	movs	r1, #1
 800e8c0:	ec59 8b10 	vmov	r8, r9, d0
 800e8c4:	4616      	mov	r6, r2
 800e8c6:	f7ff fc13 	bl	800e0f0 <_Balloc>
 800e8ca:	4604      	mov	r4, r0
 800e8cc:	b930      	cbnz	r0, 800e8dc <__d2b+0x24>
 800e8ce:	4602      	mov	r2, r0
 800e8d0:	4b23      	ldr	r3, [pc, #140]	@ (800e960 <__d2b+0xa8>)
 800e8d2:	4824      	ldr	r0, [pc, #144]	@ (800e964 <__d2b+0xac>)
 800e8d4:	f240 310f 	movw	r1, #783	@ 0x30f
 800e8d8:	f001 f8c6 	bl	800fa68 <__assert_func>
 800e8dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e8e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e8e4:	b10d      	cbz	r5, 800e8ea <__d2b+0x32>
 800e8e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e8ea:	9301      	str	r3, [sp, #4]
 800e8ec:	f1b8 0300 	subs.w	r3, r8, #0
 800e8f0:	d023      	beq.n	800e93a <__d2b+0x82>
 800e8f2:	4668      	mov	r0, sp
 800e8f4:	9300      	str	r3, [sp, #0]
 800e8f6:	f7ff fd0c 	bl	800e312 <__lo0bits>
 800e8fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e8fe:	b1d0      	cbz	r0, 800e936 <__d2b+0x7e>
 800e900:	f1c0 0320 	rsb	r3, r0, #32
 800e904:	fa02 f303 	lsl.w	r3, r2, r3
 800e908:	430b      	orrs	r3, r1
 800e90a:	40c2      	lsrs	r2, r0
 800e90c:	6163      	str	r3, [r4, #20]
 800e90e:	9201      	str	r2, [sp, #4]
 800e910:	9b01      	ldr	r3, [sp, #4]
 800e912:	61a3      	str	r3, [r4, #24]
 800e914:	2b00      	cmp	r3, #0
 800e916:	bf0c      	ite	eq
 800e918:	2201      	moveq	r2, #1
 800e91a:	2202      	movne	r2, #2
 800e91c:	6122      	str	r2, [r4, #16]
 800e91e:	b1a5      	cbz	r5, 800e94a <__d2b+0x92>
 800e920:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e924:	4405      	add	r5, r0
 800e926:	603d      	str	r5, [r7, #0]
 800e928:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e92c:	6030      	str	r0, [r6, #0]
 800e92e:	4620      	mov	r0, r4
 800e930:	b003      	add	sp, #12
 800e932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e936:	6161      	str	r1, [r4, #20]
 800e938:	e7ea      	b.n	800e910 <__d2b+0x58>
 800e93a:	a801      	add	r0, sp, #4
 800e93c:	f7ff fce9 	bl	800e312 <__lo0bits>
 800e940:	9b01      	ldr	r3, [sp, #4]
 800e942:	6163      	str	r3, [r4, #20]
 800e944:	3020      	adds	r0, #32
 800e946:	2201      	movs	r2, #1
 800e948:	e7e8      	b.n	800e91c <__d2b+0x64>
 800e94a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e94e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e952:	6038      	str	r0, [r7, #0]
 800e954:	6918      	ldr	r0, [r3, #16]
 800e956:	f7ff fcbd 	bl	800e2d4 <__hi0bits>
 800e95a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e95e:	e7e5      	b.n	800e92c <__d2b+0x74>
 800e960:	08010ff3 	.word	0x08010ff3
 800e964:	08011064 	.word	0x08011064

0800e968 <__ratio>:
 800e968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e96c:	b085      	sub	sp, #20
 800e96e:	e9cd 1000 	strd	r1, r0, [sp]
 800e972:	a902      	add	r1, sp, #8
 800e974:	f7ff ff56 	bl	800e824 <__b2d>
 800e978:	9800      	ldr	r0, [sp, #0]
 800e97a:	a903      	add	r1, sp, #12
 800e97c:	ec55 4b10 	vmov	r4, r5, d0
 800e980:	f7ff ff50 	bl	800e824 <__b2d>
 800e984:	9b01      	ldr	r3, [sp, #4]
 800e986:	6919      	ldr	r1, [r3, #16]
 800e988:	9b00      	ldr	r3, [sp, #0]
 800e98a:	691b      	ldr	r3, [r3, #16]
 800e98c:	1ac9      	subs	r1, r1, r3
 800e98e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e992:	1a9b      	subs	r3, r3, r2
 800e994:	ec5b ab10 	vmov	sl, fp, d0
 800e998:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	bfce      	itee	gt
 800e9a0:	462a      	movgt	r2, r5
 800e9a2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e9a6:	465a      	movle	r2, fp
 800e9a8:	462f      	mov	r7, r5
 800e9aa:	46d9      	mov	r9, fp
 800e9ac:	bfcc      	ite	gt
 800e9ae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e9b2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e9b6:	464b      	mov	r3, r9
 800e9b8:	4652      	mov	r2, sl
 800e9ba:	4620      	mov	r0, r4
 800e9bc:	4639      	mov	r1, r7
 800e9be:	f7f1 ff4d 	bl	800085c <__aeabi_ddiv>
 800e9c2:	ec41 0b10 	vmov	d0, r0, r1
 800e9c6:	b005      	add	sp, #20
 800e9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e9cc <__copybits>:
 800e9cc:	3901      	subs	r1, #1
 800e9ce:	b570      	push	{r4, r5, r6, lr}
 800e9d0:	1149      	asrs	r1, r1, #5
 800e9d2:	6914      	ldr	r4, [r2, #16]
 800e9d4:	3101      	adds	r1, #1
 800e9d6:	f102 0314 	add.w	r3, r2, #20
 800e9da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e9de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e9e2:	1f05      	subs	r5, r0, #4
 800e9e4:	42a3      	cmp	r3, r4
 800e9e6:	d30c      	bcc.n	800ea02 <__copybits+0x36>
 800e9e8:	1aa3      	subs	r3, r4, r2
 800e9ea:	3b11      	subs	r3, #17
 800e9ec:	f023 0303 	bic.w	r3, r3, #3
 800e9f0:	3211      	adds	r2, #17
 800e9f2:	42a2      	cmp	r2, r4
 800e9f4:	bf88      	it	hi
 800e9f6:	2300      	movhi	r3, #0
 800e9f8:	4418      	add	r0, r3
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	4288      	cmp	r0, r1
 800e9fe:	d305      	bcc.n	800ea0c <__copybits+0x40>
 800ea00:	bd70      	pop	{r4, r5, r6, pc}
 800ea02:	f853 6b04 	ldr.w	r6, [r3], #4
 800ea06:	f845 6f04 	str.w	r6, [r5, #4]!
 800ea0a:	e7eb      	b.n	800e9e4 <__copybits+0x18>
 800ea0c:	f840 3b04 	str.w	r3, [r0], #4
 800ea10:	e7f4      	b.n	800e9fc <__copybits+0x30>

0800ea12 <__any_on>:
 800ea12:	f100 0214 	add.w	r2, r0, #20
 800ea16:	6900      	ldr	r0, [r0, #16]
 800ea18:	114b      	asrs	r3, r1, #5
 800ea1a:	4298      	cmp	r0, r3
 800ea1c:	b510      	push	{r4, lr}
 800ea1e:	db11      	blt.n	800ea44 <__any_on+0x32>
 800ea20:	dd0a      	ble.n	800ea38 <__any_on+0x26>
 800ea22:	f011 011f 	ands.w	r1, r1, #31
 800ea26:	d007      	beq.n	800ea38 <__any_on+0x26>
 800ea28:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ea2c:	fa24 f001 	lsr.w	r0, r4, r1
 800ea30:	fa00 f101 	lsl.w	r1, r0, r1
 800ea34:	428c      	cmp	r4, r1
 800ea36:	d10b      	bne.n	800ea50 <__any_on+0x3e>
 800ea38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ea3c:	4293      	cmp	r3, r2
 800ea3e:	d803      	bhi.n	800ea48 <__any_on+0x36>
 800ea40:	2000      	movs	r0, #0
 800ea42:	bd10      	pop	{r4, pc}
 800ea44:	4603      	mov	r3, r0
 800ea46:	e7f7      	b.n	800ea38 <__any_on+0x26>
 800ea48:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ea4c:	2900      	cmp	r1, #0
 800ea4e:	d0f5      	beq.n	800ea3c <__any_on+0x2a>
 800ea50:	2001      	movs	r0, #1
 800ea52:	e7f6      	b.n	800ea42 <__any_on+0x30>

0800ea54 <_strtol_l.constprop.0>:
 800ea54:	2b24      	cmp	r3, #36	@ 0x24
 800ea56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea5a:	4686      	mov	lr, r0
 800ea5c:	4690      	mov	r8, r2
 800ea5e:	d801      	bhi.n	800ea64 <_strtol_l.constprop.0+0x10>
 800ea60:	2b01      	cmp	r3, #1
 800ea62:	d106      	bne.n	800ea72 <_strtol_l.constprop.0+0x1e>
 800ea64:	f7fe f860 	bl	800cb28 <__errno>
 800ea68:	2316      	movs	r3, #22
 800ea6a:	6003      	str	r3, [r0, #0]
 800ea6c:	2000      	movs	r0, #0
 800ea6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea72:	4834      	ldr	r0, [pc, #208]	@ (800eb44 <_strtol_l.constprop.0+0xf0>)
 800ea74:	460d      	mov	r5, r1
 800ea76:	462a      	mov	r2, r5
 800ea78:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ea7c:	5d06      	ldrb	r6, [r0, r4]
 800ea7e:	f016 0608 	ands.w	r6, r6, #8
 800ea82:	d1f8      	bne.n	800ea76 <_strtol_l.constprop.0+0x22>
 800ea84:	2c2d      	cmp	r4, #45	@ 0x2d
 800ea86:	d12d      	bne.n	800eae4 <_strtol_l.constprop.0+0x90>
 800ea88:	782c      	ldrb	r4, [r5, #0]
 800ea8a:	2601      	movs	r6, #1
 800ea8c:	1c95      	adds	r5, r2, #2
 800ea8e:	f033 0210 	bics.w	r2, r3, #16
 800ea92:	d109      	bne.n	800eaa8 <_strtol_l.constprop.0+0x54>
 800ea94:	2c30      	cmp	r4, #48	@ 0x30
 800ea96:	d12a      	bne.n	800eaee <_strtol_l.constprop.0+0x9a>
 800ea98:	782a      	ldrb	r2, [r5, #0]
 800ea9a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ea9e:	2a58      	cmp	r2, #88	@ 0x58
 800eaa0:	d125      	bne.n	800eaee <_strtol_l.constprop.0+0x9a>
 800eaa2:	786c      	ldrb	r4, [r5, #1]
 800eaa4:	2310      	movs	r3, #16
 800eaa6:	3502      	adds	r5, #2
 800eaa8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800eaac:	f10c 3cff 	add.w	ip, ip, #4294967295
 800eab0:	2200      	movs	r2, #0
 800eab2:	fbbc f9f3 	udiv	r9, ip, r3
 800eab6:	4610      	mov	r0, r2
 800eab8:	fb03 ca19 	mls	sl, r3, r9, ip
 800eabc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800eac0:	2f09      	cmp	r7, #9
 800eac2:	d81b      	bhi.n	800eafc <_strtol_l.constprop.0+0xa8>
 800eac4:	463c      	mov	r4, r7
 800eac6:	42a3      	cmp	r3, r4
 800eac8:	dd27      	ble.n	800eb1a <_strtol_l.constprop.0+0xc6>
 800eaca:	1c57      	adds	r7, r2, #1
 800eacc:	d007      	beq.n	800eade <_strtol_l.constprop.0+0x8a>
 800eace:	4581      	cmp	r9, r0
 800ead0:	d320      	bcc.n	800eb14 <_strtol_l.constprop.0+0xc0>
 800ead2:	d101      	bne.n	800ead8 <_strtol_l.constprop.0+0x84>
 800ead4:	45a2      	cmp	sl, r4
 800ead6:	db1d      	blt.n	800eb14 <_strtol_l.constprop.0+0xc0>
 800ead8:	fb00 4003 	mla	r0, r0, r3, r4
 800eadc:	2201      	movs	r2, #1
 800eade:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eae2:	e7eb      	b.n	800eabc <_strtol_l.constprop.0+0x68>
 800eae4:	2c2b      	cmp	r4, #43	@ 0x2b
 800eae6:	bf04      	itt	eq
 800eae8:	782c      	ldrbeq	r4, [r5, #0]
 800eaea:	1c95      	addeq	r5, r2, #2
 800eaec:	e7cf      	b.n	800ea8e <_strtol_l.constprop.0+0x3a>
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d1da      	bne.n	800eaa8 <_strtol_l.constprop.0+0x54>
 800eaf2:	2c30      	cmp	r4, #48	@ 0x30
 800eaf4:	bf0c      	ite	eq
 800eaf6:	2308      	moveq	r3, #8
 800eaf8:	230a      	movne	r3, #10
 800eafa:	e7d5      	b.n	800eaa8 <_strtol_l.constprop.0+0x54>
 800eafc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800eb00:	2f19      	cmp	r7, #25
 800eb02:	d801      	bhi.n	800eb08 <_strtol_l.constprop.0+0xb4>
 800eb04:	3c37      	subs	r4, #55	@ 0x37
 800eb06:	e7de      	b.n	800eac6 <_strtol_l.constprop.0+0x72>
 800eb08:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800eb0c:	2f19      	cmp	r7, #25
 800eb0e:	d804      	bhi.n	800eb1a <_strtol_l.constprop.0+0xc6>
 800eb10:	3c57      	subs	r4, #87	@ 0x57
 800eb12:	e7d8      	b.n	800eac6 <_strtol_l.constprop.0+0x72>
 800eb14:	f04f 32ff 	mov.w	r2, #4294967295
 800eb18:	e7e1      	b.n	800eade <_strtol_l.constprop.0+0x8a>
 800eb1a:	1c53      	adds	r3, r2, #1
 800eb1c:	d108      	bne.n	800eb30 <_strtol_l.constprop.0+0xdc>
 800eb1e:	2322      	movs	r3, #34	@ 0x22
 800eb20:	f8ce 3000 	str.w	r3, [lr]
 800eb24:	4660      	mov	r0, ip
 800eb26:	f1b8 0f00 	cmp.w	r8, #0
 800eb2a:	d0a0      	beq.n	800ea6e <_strtol_l.constprop.0+0x1a>
 800eb2c:	1e69      	subs	r1, r5, #1
 800eb2e:	e006      	b.n	800eb3e <_strtol_l.constprop.0+0xea>
 800eb30:	b106      	cbz	r6, 800eb34 <_strtol_l.constprop.0+0xe0>
 800eb32:	4240      	negs	r0, r0
 800eb34:	f1b8 0f00 	cmp.w	r8, #0
 800eb38:	d099      	beq.n	800ea6e <_strtol_l.constprop.0+0x1a>
 800eb3a:	2a00      	cmp	r2, #0
 800eb3c:	d1f6      	bne.n	800eb2c <_strtol_l.constprop.0+0xd8>
 800eb3e:	f8c8 1000 	str.w	r1, [r8]
 800eb42:	e794      	b.n	800ea6e <_strtol_l.constprop.0+0x1a>
 800eb44:	080111c1 	.word	0x080111c1

0800eb48 <_strtol_r>:
 800eb48:	f7ff bf84 	b.w	800ea54 <_strtol_l.constprop.0>

0800eb4c <__ascii_wctomb>:
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	4608      	mov	r0, r1
 800eb50:	b141      	cbz	r1, 800eb64 <__ascii_wctomb+0x18>
 800eb52:	2aff      	cmp	r2, #255	@ 0xff
 800eb54:	d904      	bls.n	800eb60 <__ascii_wctomb+0x14>
 800eb56:	228a      	movs	r2, #138	@ 0x8a
 800eb58:	601a      	str	r2, [r3, #0]
 800eb5a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb5e:	4770      	bx	lr
 800eb60:	700a      	strb	r2, [r1, #0]
 800eb62:	2001      	movs	r0, #1
 800eb64:	4770      	bx	lr

0800eb66 <__ssputs_r>:
 800eb66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb6a:	688e      	ldr	r6, [r1, #8]
 800eb6c:	461f      	mov	r7, r3
 800eb6e:	42be      	cmp	r6, r7
 800eb70:	680b      	ldr	r3, [r1, #0]
 800eb72:	4682      	mov	sl, r0
 800eb74:	460c      	mov	r4, r1
 800eb76:	4690      	mov	r8, r2
 800eb78:	d82d      	bhi.n	800ebd6 <__ssputs_r+0x70>
 800eb7a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eb7e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800eb82:	d026      	beq.n	800ebd2 <__ssputs_r+0x6c>
 800eb84:	6965      	ldr	r5, [r4, #20]
 800eb86:	6909      	ldr	r1, [r1, #16]
 800eb88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eb8c:	eba3 0901 	sub.w	r9, r3, r1
 800eb90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eb94:	1c7b      	adds	r3, r7, #1
 800eb96:	444b      	add	r3, r9
 800eb98:	106d      	asrs	r5, r5, #1
 800eb9a:	429d      	cmp	r5, r3
 800eb9c:	bf38      	it	cc
 800eb9e:	461d      	movcc	r5, r3
 800eba0:	0553      	lsls	r3, r2, #21
 800eba2:	d527      	bpl.n	800ebf4 <__ssputs_r+0x8e>
 800eba4:	4629      	mov	r1, r5
 800eba6:	f7ff fa05 	bl	800dfb4 <_malloc_r>
 800ebaa:	4606      	mov	r6, r0
 800ebac:	b360      	cbz	r0, 800ec08 <__ssputs_r+0xa2>
 800ebae:	6921      	ldr	r1, [r4, #16]
 800ebb0:	464a      	mov	r2, r9
 800ebb2:	f7fd ffe6 	bl	800cb82 <memcpy>
 800ebb6:	89a3      	ldrh	r3, [r4, #12]
 800ebb8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ebbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ebc0:	81a3      	strh	r3, [r4, #12]
 800ebc2:	6126      	str	r6, [r4, #16]
 800ebc4:	6165      	str	r5, [r4, #20]
 800ebc6:	444e      	add	r6, r9
 800ebc8:	eba5 0509 	sub.w	r5, r5, r9
 800ebcc:	6026      	str	r6, [r4, #0]
 800ebce:	60a5      	str	r5, [r4, #8]
 800ebd0:	463e      	mov	r6, r7
 800ebd2:	42be      	cmp	r6, r7
 800ebd4:	d900      	bls.n	800ebd8 <__ssputs_r+0x72>
 800ebd6:	463e      	mov	r6, r7
 800ebd8:	6820      	ldr	r0, [r4, #0]
 800ebda:	4632      	mov	r2, r6
 800ebdc:	4641      	mov	r1, r8
 800ebde:	f000 fef6 	bl	800f9ce <memmove>
 800ebe2:	68a3      	ldr	r3, [r4, #8]
 800ebe4:	1b9b      	subs	r3, r3, r6
 800ebe6:	60a3      	str	r3, [r4, #8]
 800ebe8:	6823      	ldr	r3, [r4, #0]
 800ebea:	4433      	add	r3, r6
 800ebec:	6023      	str	r3, [r4, #0]
 800ebee:	2000      	movs	r0, #0
 800ebf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebf4:	462a      	mov	r2, r5
 800ebf6:	f000 ff69 	bl	800facc <_realloc_r>
 800ebfa:	4606      	mov	r6, r0
 800ebfc:	2800      	cmp	r0, #0
 800ebfe:	d1e0      	bne.n	800ebc2 <__ssputs_r+0x5c>
 800ec00:	6921      	ldr	r1, [r4, #16]
 800ec02:	4650      	mov	r0, sl
 800ec04:	f7fe fe28 	bl	800d858 <_free_r>
 800ec08:	230c      	movs	r3, #12
 800ec0a:	f8ca 3000 	str.w	r3, [sl]
 800ec0e:	89a3      	ldrh	r3, [r4, #12]
 800ec10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec14:	81a3      	strh	r3, [r4, #12]
 800ec16:	f04f 30ff 	mov.w	r0, #4294967295
 800ec1a:	e7e9      	b.n	800ebf0 <__ssputs_r+0x8a>

0800ec1c <_svfiprintf_r>:
 800ec1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec20:	4698      	mov	r8, r3
 800ec22:	898b      	ldrh	r3, [r1, #12]
 800ec24:	061b      	lsls	r3, r3, #24
 800ec26:	b09d      	sub	sp, #116	@ 0x74
 800ec28:	4607      	mov	r7, r0
 800ec2a:	460d      	mov	r5, r1
 800ec2c:	4614      	mov	r4, r2
 800ec2e:	d510      	bpl.n	800ec52 <_svfiprintf_r+0x36>
 800ec30:	690b      	ldr	r3, [r1, #16]
 800ec32:	b973      	cbnz	r3, 800ec52 <_svfiprintf_r+0x36>
 800ec34:	2140      	movs	r1, #64	@ 0x40
 800ec36:	f7ff f9bd 	bl	800dfb4 <_malloc_r>
 800ec3a:	6028      	str	r0, [r5, #0]
 800ec3c:	6128      	str	r0, [r5, #16]
 800ec3e:	b930      	cbnz	r0, 800ec4e <_svfiprintf_r+0x32>
 800ec40:	230c      	movs	r3, #12
 800ec42:	603b      	str	r3, [r7, #0]
 800ec44:	f04f 30ff 	mov.w	r0, #4294967295
 800ec48:	b01d      	add	sp, #116	@ 0x74
 800ec4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec4e:	2340      	movs	r3, #64	@ 0x40
 800ec50:	616b      	str	r3, [r5, #20]
 800ec52:	2300      	movs	r3, #0
 800ec54:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec56:	2320      	movs	r3, #32
 800ec58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ec5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec60:	2330      	movs	r3, #48	@ 0x30
 800ec62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ee00 <_svfiprintf_r+0x1e4>
 800ec66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ec6a:	f04f 0901 	mov.w	r9, #1
 800ec6e:	4623      	mov	r3, r4
 800ec70:	469a      	mov	sl, r3
 800ec72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec76:	b10a      	cbz	r2, 800ec7c <_svfiprintf_r+0x60>
 800ec78:	2a25      	cmp	r2, #37	@ 0x25
 800ec7a:	d1f9      	bne.n	800ec70 <_svfiprintf_r+0x54>
 800ec7c:	ebba 0b04 	subs.w	fp, sl, r4
 800ec80:	d00b      	beq.n	800ec9a <_svfiprintf_r+0x7e>
 800ec82:	465b      	mov	r3, fp
 800ec84:	4622      	mov	r2, r4
 800ec86:	4629      	mov	r1, r5
 800ec88:	4638      	mov	r0, r7
 800ec8a:	f7ff ff6c 	bl	800eb66 <__ssputs_r>
 800ec8e:	3001      	adds	r0, #1
 800ec90:	f000 80a7 	beq.w	800ede2 <_svfiprintf_r+0x1c6>
 800ec94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec96:	445a      	add	r2, fp
 800ec98:	9209      	str	r2, [sp, #36]	@ 0x24
 800ec9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	f000 809f 	beq.w	800ede2 <_svfiprintf_r+0x1c6>
 800eca4:	2300      	movs	r3, #0
 800eca6:	f04f 32ff 	mov.w	r2, #4294967295
 800ecaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ecae:	f10a 0a01 	add.w	sl, sl, #1
 800ecb2:	9304      	str	r3, [sp, #16]
 800ecb4:	9307      	str	r3, [sp, #28]
 800ecb6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ecba:	931a      	str	r3, [sp, #104]	@ 0x68
 800ecbc:	4654      	mov	r4, sl
 800ecbe:	2205      	movs	r2, #5
 800ecc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecc4:	484e      	ldr	r0, [pc, #312]	@ (800ee00 <_svfiprintf_r+0x1e4>)
 800ecc6:	f7f1 fa8b 	bl	80001e0 <memchr>
 800ecca:	9a04      	ldr	r2, [sp, #16]
 800eccc:	b9d8      	cbnz	r0, 800ed06 <_svfiprintf_r+0xea>
 800ecce:	06d0      	lsls	r0, r2, #27
 800ecd0:	bf44      	itt	mi
 800ecd2:	2320      	movmi	r3, #32
 800ecd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ecd8:	0711      	lsls	r1, r2, #28
 800ecda:	bf44      	itt	mi
 800ecdc:	232b      	movmi	r3, #43	@ 0x2b
 800ecde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ece2:	f89a 3000 	ldrb.w	r3, [sl]
 800ece6:	2b2a      	cmp	r3, #42	@ 0x2a
 800ece8:	d015      	beq.n	800ed16 <_svfiprintf_r+0xfa>
 800ecea:	9a07      	ldr	r2, [sp, #28]
 800ecec:	4654      	mov	r4, sl
 800ecee:	2000      	movs	r0, #0
 800ecf0:	f04f 0c0a 	mov.w	ip, #10
 800ecf4:	4621      	mov	r1, r4
 800ecf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ecfa:	3b30      	subs	r3, #48	@ 0x30
 800ecfc:	2b09      	cmp	r3, #9
 800ecfe:	d94b      	bls.n	800ed98 <_svfiprintf_r+0x17c>
 800ed00:	b1b0      	cbz	r0, 800ed30 <_svfiprintf_r+0x114>
 800ed02:	9207      	str	r2, [sp, #28]
 800ed04:	e014      	b.n	800ed30 <_svfiprintf_r+0x114>
 800ed06:	eba0 0308 	sub.w	r3, r0, r8
 800ed0a:	fa09 f303 	lsl.w	r3, r9, r3
 800ed0e:	4313      	orrs	r3, r2
 800ed10:	9304      	str	r3, [sp, #16]
 800ed12:	46a2      	mov	sl, r4
 800ed14:	e7d2      	b.n	800ecbc <_svfiprintf_r+0xa0>
 800ed16:	9b03      	ldr	r3, [sp, #12]
 800ed18:	1d19      	adds	r1, r3, #4
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	9103      	str	r1, [sp, #12]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	bfbb      	ittet	lt
 800ed22:	425b      	neglt	r3, r3
 800ed24:	f042 0202 	orrlt.w	r2, r2, #2
 800ed28:	9307      	strge	r3, [sp, #28]
 800ed2a:	9307      	strlt	r3, [sp, #28]
 800ed2c:	bfb8      	it	lt
 800ed2e:	9204      	strlt	r2, [sp, #16]
 800ed30:	7823      	ldrb	r3, [r4, #0]
 800ed32:	2b2e      	cmp	r3, #46	@ 0x2e
 800ed34:	d10a      	bne.n	800ed4c <_svfiprintf_r+0x130>
 800ed36:	7863      	ldrb	r3, [r4, #1]
 800ed38:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed3a:	d132      	bne.n	800eda2 <_svfiprintf_r+0x186>
 800ed3c:	9b03      	ldr	r3, [sp, #12]
 800ed3e:	1d1a      	adds	r2, r3, #4
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	9203      	str	r2, [sp, #12]
 800ed44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ed48:	3402      	adds	r4, #2
 800ed4a:	9305      	str	r3, [sp, #20]
 800ed4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ee10 <_svfiprintf_r+0x1f4>
 800ed50:	7821      	ldrb	r1, [r4, #0]
 800ed52:	2203      	movs	r2, #3
 800ed54:	4650      	mov	r0, sl
 800ed56:	f7f1 fa43 	bl	80001e0 <memchr>
 800ed5a:	b138      	cbz	r0, 800ed6c <_svfiprintf_r+0x150>
 800ed5c:	9b04      	ldr	r3, [sp, #16]
 800ed5e:	eba0 000a 	sub.w	r0, r0, sl
 800ed62:	2240      	movs	r2, #64	@ 0x40
 800ed64:	4082      	lsls	r2, r0
 800ed66:	4313      	orrs	r3, r2
 800ed68:	3401      	adds	r4, #1
 800ed6a:	9304      	str	r3, [sp, #16]
 800ed6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed70:	4824      	ldr	r0, [pc, #144]	@ (800ee04 <_svfiprintf_r+0x1e8>)
 800ed72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ed76:	2206      	movs	r2, #6
 800ed78:	f7f1 fa32 	bl	80001e0 <memchr>
 800ed7c:	2800      	cmp	r0, #0
 800ed7e:	d036      	beq.n	800edee <_svfiprintf_r+0x1d2>
 800ed80:	4b21      	ldr	r3, [pc, #132]	@ (800ee08 <_svfiprintf_r+0x1ec>)
 800ed82:	bb1b      	cbnz	r3, 800edcc <_svfiprintf_r+0x1b0>
 800ed84:	9b03      	ldr	r3, [sp, #12]
 800ed86:	3307      	adds	r3, #7
 800ed88:	f023 0307 	bic.w	r3, r3, #7
 800ed8c:	3308      	adds	r3, #8
 800ed8e:	9303      	str	r3, [sp, #12]
 800ed90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed92:	4433      	add	r3, r6
 800ed94:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed96:	e76a      	b.n	800ec6e <_svfiprintf_r+0x52>
 800ed98:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed9c:	460c      	mov	r4, r1
 800ed9e:	2001      	movs	r0, #1
 800eda0:	e7a8      	b.n	800ecf4 <_svfiprintf_r+0xd8>
 800eda2:	2300      	movs	r3, #0
 800eda4:	3401      	adds	r4, #1
 800eda6:	9305      	str	r3, [sp, #20]
 800eda8:	4619      	mov	r1, r3
 800edaa:	f04f 0c0a 	mov.w	ip, #10
 800edae:	4620      	mov	r0, r4
 800edb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800edb4:	3a30      	subs	r2, #48	@ 0x30
 800edb6:	2a09      	cmp	r2, #9
 800edb8:	d903      	bls.n	800edc2 <_svfiprintf_r+0x1a6>
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d0c6      	beq.n	800ed4c <_svfiprintf_r+0x130>
 800edbe:	9105      	str	r1, [sp, #20]
 800edc0:	e7c4      	b.n	800ed4c <_svfiprintf_r+0x130>
 800edc2:	fb0c 2101 	mla	r1, ip, r1, r2
 800edc6:	4604      	mov	r4, r0
 800edc8:	2301      	movs	r3, #1
 800edca:	e7f0      	b.n	800edae <_svfiprintf_r+0x192>
 800edcc:	ab03      	add	r3, sp, #12
 800edce:	9300      	str	r3, [sp, #0]
 800edd0:	462a      	mov	r2, r5
 800edd2:	4b0e      	ldr	r3, [pc, #56]	@ (800ee0c <_svfiprintf_r+0x1f0>)
 800edd4:	a904      	add	r1, sp, #16
 800edd6:	4638      	mov	r0, r7
 800edd8:	f7fc fe00 	bl	800b9dc <_printf_float>
 800eddc:	1c42      	adds	r2, r0, #1
 800edde:	4606      	mov	r6, r0
 800ede0:	d1d6      	bne.n	800ed90 <_svfiprintf_r+0x174>
 800ede2:	89ab      	ldrh	r3, [r5, #12]
 800ede4:	065b      	lsls	r3, r3, #25
 800ede6:	f53f af2d 	bmi.w	800ec44 <_svfiprintf_r+0x28>
 800edea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800edec:	e72c      	b.n	800ec48 <_svfiprintf_r+0x2c>
 800edee:	ab03      	add	r3, sp, #12
 800edf0:	9300      	str	r3, [sp, #0]
 800edf2:	462a      	mov	r2, r5
 800edf4:	4b05      	ldr	r3, [pc, #20]	@ (800ee0c <_svfiprintf_r+0x1f0>)
 800edf6:	a904      	add	r1, sp, #16
 800edf8:	4638      	mov	r0, r7
 800edfa:	f7fd f887 	bl	800bf0c <_printf_i>
 800edfe:	e7ed      	b.n	800eddc <_svfiprintf_r+0x1c0>
 800ee00:	080112c1 	.word	0x080112c1
 800ee04:	080112cb 	.word	0x080112cb
 800ee08:	0800b9dd 	.word	0x0800b9dd
 800ee0c:	0800eb67 	.word	0x0800eb67
 800ee10:	080112c7 	.word	0x080112c7

0800ee14 <_sungetc_r>:
 800ee14:	b538      	push	{r3, r4, r5, lr}
 800ee16:	1c4b      	adds	r3, r1, #1
 800ee18:	4614      	mov	r4, r2
 800ee1a:	d103      	bne.n	800ee24 <_sungetc_r+0x10>
 800ee1c:	f04f 35ff 	mov.w	r5, #4294967295
 800ee20:	4628      	mov	r0, r5
 800ee22:	bd38      	pop	{r3, r4, r5, pc}
 800ee24:	8993      	ldrh	r3, [r2, #12]
 800ee26:	f023 0320 	bic.w	r3, r3, #32
 800ee2a:	8193      	strh	r3, [r2, #12]
 800ee2c:	6853      	ldr	r3, [r2, #4]
 800ee2e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ee30:	b2cd      	uxtb	r5, r1
 800ee32:	b18a      	cbz	r2, 800ee58 <_sungetc_r+0x44>
 800ee34:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ee36:	429a      	cmp	r2, r3
 800ee38:	dd08      	ble.n	800ee4c <_sungetc_r+0x38>
 800ee3a:	6823      	ldr	r3, [r4, #0]
 800ee3c:	1e5a      	subs	r2, r3, #1
 800ee3e:	6022      	str	r2, [r4, #0]
 800ee40:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ee44:	6863      	ldr	r3, [r4, #4]
 800ee46:	3301      	adds	r3, #1
 800ee48:	6063      	str	r3, [r4, #4]
 800ee4a:	e7e9      	b.n	800ee20 <_sungetc_r+0xc>
 800ee4c:	4621      	mov	r1, r4
 800ee4e:	f000 fd84 	bl	800f95a <__submore>
 800ee52:	2800      	cmp	r0, #0
 800ee54:	d0f1      	beq.n	800ee3a <_sungetc_r+0x26>
 800ee56:	e7e1      	b.n	800ee1c <_sungetc_r+0x8>
 800ee58:	6921      	ldr	r1, [r4, #16]
 800ee5a:	6822      	ldr	r2, [r4, #0]
 800ee5c:	b141      	cbz	r1, 800ee70 <_sungetc_r+0x5c>
 800ee5e:	4291      	cmp	r1, r2
 800ee60:	d206      	bcs.n	800ee70 <_sungetc_r+0x5c>
 800ee62:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800ee66:	42a9      	cmp	r1, r5
 800ee68:	d102      	bne.n	800ee70 <_sungetc_r+0x5c>
 800ee6a:	3a01      	subs	r2, #1
 800ee6c:	6022      	str	r2, [r4, #0]
 800ee6e:	e7ea      	b.n	800ee46 <_sungetc_r+0x32>
 800ee70:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800ee74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ee78:	6363      	str	r3, [r4, #52]	@ 0x34
 800ee7a:	2303      	movs	r3, #3
 800ee7c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ee7e:	4623      	mov	r3, r4
 800ee80:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ee84:	6023      	str	r3, [r4, #0]
 800ee86:	2301      	movs	r3, #1
 800ee88:	e7de      	b.n	800ee48 <_sungetc_r+0x34>

0800ee8a <__ssrefill_r>:
 800ee8a:	b510      	push	{r4, lr}
 800ee8c:	460c      	mov	r4, r1
 800ee8e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ee90:	b169      	cbz	r1, 800eeae <__ssrefill_r+0x24>
 800ee92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ee96:	4299      	cmp	r1, r3
 800ee98:	d001      	beq.n	800ee9e <__ssrefill_r+0x14>
 800ee9a:	f7fe fcdd 	bl	800d858 <_free_r>
 800ee9e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eea0:	6063      	str	r3, [r4, #4]
 800eea2:	2000      	movs	r0, #0
 800eea4:	6360      	str	r0, [r4, #52]	@ 0x34
 800eea6:	b113      	cbz	r3, 800eeae <__ssrefill_r+0x24>
 800eea8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800eeaa:	6023      	str	r3, [r4, #0]
 800eeac:	bd10      	pop	{r4, pc}
 800eeae:	6923      	ldr	r3, [r4, #16]
 800eeb0:	6023      	str	r3, [r4, #0]
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	6063      	str	r3, [r4, #4]
 800eeb6:	89a3      	ldrh	r3, [r4, #12]
 800eeb8:	f043 0320 	orr.w	r3, r3, #32
 800eebc:	81a3      	strh	r3, [r4, #12]
 800eebe:	f04f 30ff 	mov.w	r0, #4294967295
 800eec2:	e7f3      	b.n	800eeac <__ssrefill_r+0x22>

0800eec4 <__ssvfiscanf_r>:
 800eec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eec8:	460c      	mov	r4, r1
 800eeca:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800eece:	2100      	movs	r1, #0
 800eed0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800eed4:	49a5      	ldr	r1, [pc, #660]	@ (800f16c <__ssvfiscanf_r+0x2a8>)
 800eed6:	91a0      	str	r1, [sp, #640]	@ 0x280
 800eed8:	f10d 0804 	add.w	r8, sp, #4
 800eedc:	49a4      	ldr	r1, [pc, #656]	@ (800f170 <__ssvfiscanf_r+0x2ac>)
 800eede:	4fa5      	ldr	r7, [pc, #660]	@ (800f174 <__ssvfiscanf_r+0x2b0>)
 800eee0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800eee4:	4606      	mov	r6, r0
 800eee6:	91a1      	str	r1, [sp, #644]	@ 0x284
 800eee8:	9300      	str	r3, [sp, #0]
 800eeea:	7813      	ldrb	r3, [r2, #0]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	f000 8158 	beq.w	800f1a2 <__ssvfiscanf_r+0x2de>
 800eef2:	5cf9      	ldrb	r1, [r7, r3]
 800eef4:	f011 0108 	ands.w	r1, r1, #8
 800eef8:	f102 0501 	add.w	r5, r2, #1
 800eefc:	d019      	beq.n	800ef32 <__ssvfiscanf_r+0x6e>
 800eefe:	6863      	ldr	r3, [r4, #4]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	dd0f      	ble.n	800ef24 <__ssvfiscanf_r+0x60>
 800ef04:	6823      	ldr	r3, [r4, #0]
 800ef06:	781a      	ldrb	r2, [r3, #0]
 800ef08:	5cba      	ldrb	r2, [r7, r2]
 800ef0a:	0712      	lsls	r2, r2, #28
 800ef0c:	d401      	bmi.n	800ef12 <__ssvfiscanf_r+0x4e>
 800ef0e:	462a      	mov	r2, r5
 800ef10:	e7eb      	b.n	800eeea <__ssvfiscanf_r+0x26>
 800ef12:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ef14:	3201      	adds	r2, #1
 800ef16:	9245      	str	r2, [sp, #276]	@ 0x114
 800ef18:	6862      	ldr	r2, [r4, #4]
 800ef1a:	3301      	adds	r3, #1
 800ef1c:	3a01      	subs	r2, #1
 800ef1e:	6062      	str	r2, [r4, #4]
 800ef20:	6023      	str	r3, [r4, #0]
 800ef22:	e7ec      	b.n	800eefe <__ssvfiscanf_r+0x3a>
 800ef24:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ef26:	4621      	mov	r1, r4
 800ef28:	4630      	mov	r0, r6
 800ef2a:	4798      	blx	r3
 800ef2c:	2800      	cmp	r0, #0
 800ef2e:	d0e9      	beq.n	800ef04 <__ssvfiscanf_r+0x40>
 800ef30:	e7ed      	b.n	800ef0e <__ssvfiscanf_r+0x4a>
 800ef32:	2b25      	cmp	r3, #37	@ 0x25
 800ef34:	d012      	beq.n	800ef5c <__ssvfiscanf_r+0x98>
 800ef36:	4699      	mov	r9, r3
 800ef38:	6863      	ldr	r3, [r4, #4]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	f340 8093 	ble.w	800f066 <__ssvfiscanf_r+0x1a2>
 800ef40:	6822      	ldr	r2, [r4, #0]
 800ef42:	7813      	ldrb	r3, [r2, #0]
 800ef44:	454b      	cmp	r3, r9
 800ef46:	f040 812c 	bne.w	800f1a2 <__ssvfiscanf_r+0x2de>
 800ef4a:	6863      	ldr	r3, [r4, #4]
 800ef4c:	3b01      	subs	r3, #1
 800ef4e:	6063      	str	r3, [r4, #4]
 800ef50:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800ef52:	3201      	adds	r2, #1
 800ef54:	3301      	adds	r3, #1
 800ef56:	6022      	str	r2, [r4, #0]
 800ef58:	9345      	str	r3, [sp, #276]	@ 0x114
 800ef5a:	e7d8      	b.n	800ef0e <__ssvfiscanf_r+0x4a>
 800ef5c:	9141      	str	r1, [sp, #260]	@ 0x104
 800ef5e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800ef60:	7853      	ldrb	r3, [r2, #1]
 800ef62:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef64:	bf02      	ittt	eq
 800ef66:	2310      	moveq	r3, #16
 800ef68:	1c95      	addeq	r5, r2, #2
 800ef6a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800ef6c:	220a      	movs	r2, #10
 800ef6e:	46a9      	mov	r9, r5
 800ef70:	f819 1b01 	ldrb.w	r1, [r9], #1
 800ef74:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800ef78:	2b09      	cmp	r3, #9
 800ef7a:	d91e      	bls.n	800efba <__ssvfiscanf_r+0xf6>
 800ef7c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800f178 <__ssvfiscanf_r+0x2b4>
 800ef80:	2203      	movs	r2, #3
 800ef82:	4650      	mov	r0, sl
 800ef84:	f7f1 f92c 	bl	80001e0 <memchr>
 800ef88:	b138      	cbz	r0, 800ef9a <__ssvfiscanf_r+0xd6>
 800ef8a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ef8c:	eba0 000a 	sub.w	r0, r0, sl
 800ef90:	2301      	movs	r3, #1
 800ef92:	4083      	lsls	r3, r0
 800ef94:	4313      	orrs	r3, r2
 800ef96:	9341      	str	r3, [sp, #260]	@ 0x104
 800ef98:	464d      	mov	r5, r9
 800ef9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ef9e:	2b78      	cmp	r3, #120	@ 0x78
 800efa0:	d806      	bhi.n	800efb0 <__ssvfiscanf_r+0xec>
 800efa2:	2b57      	cmp	r3, #87	@ 0x57
 800efa4:	d810      	bhi.n	800efc8 <__ssvfiscanf_r+0x104>
 800efa6:	2b25      	cmp	r3, #37	@ 0x25
 800efa8:	d0c5      	beq.n	800ef36 <__ssvfiscanf_r+0x72>
 800efaa:	d857      	bhi.n	800f05c <__ssvfiscanf_r+0x198>
 800efac:	2b00      	cmp	r3, #0
 800efae:	d065      	beq.n	800f07c <__ssvfiscanf_r+0x1b8>
 800efb0:	2303      	movs	r3, #3
 800efb2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800efb4:	230a      	movs	r3, #10
 800efb6:	9342      	str	r3, [sp, #264]	@ 0x108
 800efb8:	e078      	b.n	800f0ac <__ssvfiscanf_r+0x1e8>
 800efba:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800efbc:	fb02 1103 	mla	r1, r2, r3, r1
 800efc0:	3930      	subs	r1, #48	@ 0x30
 800efc2:	9143      	str	r1, [sp, #268]	@ 0x10c
 800efc4:	464d      	mov	r5, r9
 800efc6:	e7d2      	b.n	800ef6e <__ssvfiscanf_r+0xaa>
 800efc8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800efcc:	2a20      	cmp	r2, #32
 800efce:	d8ef      	bhi.n	800efb0 <__ssvfiscanf_r+0xec>
 800efd0:	a101      	add	r1, pc, #4	@ (adr r1, 800efd8 <__ssvfiscanf_r+0x114>)
 800efd2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800efd6:	bf00      	nop
 800efd8:	0800f08b 	.word	0x0800f08b
 800efdc:	0800efb1 	.word	0x0800efb1
 800efe0:	0800efb1 	.word	0x0800efb1
 800efe4:	0800f0e5 	.word	0x0800f0e5
 800efe8:	0800efb1 	.word	0x0800efb1
 800efec:	0800efb1 	.word	0x0800efb1
 800eff0:	0800efb1 	.word	0x0800efb1
 800eff4:	0800efb1 	.word	0x0800efb1
 800eff8:	0800efb1 	.word	0x0800efb1
 800effc:	0800efb1 	.word	0x0800efb1
 800f000:	0800efb1 	.word	0x0800efb1
 800f004:	0800f0fb 	.word	0x0800f0fb
 800f008:	0800f0e1 	.word	0x0800f0e1
 800f00c:	0800f063 	.word	0x0800f063
 800f010:	0800f063 	.word	0x0800f063
 800f014:	0800f063 	.word	0x0800f063
 800f018:	0800efb1 	.word	0x0800efb1
 800f01c:	0800f09d 	.word	0x0800f09d
 800f020:	0800efb1 	.word	0x0800efb1
 800f024:	0800efb1 	.word	0x0800efb1
 800f028:	0800efb1 	.word	0x0800efb1
 800f02c:	0800efb1 	.word	0x0800efb1
 800f030:	0800f10b 	.word	0x0800f10b
 800f034:	0800f0a5 	.word	0x0800f0a5
 800f038:	0800f083 	.word	0x0800f083
 800f03c:	0800efb1 	.word	0x0800efb1
 800f040:	0800efb1 	.word	0x0800efb1
 800f044:	0800f107 	.word	0x0800f107
 800f048:	0800efb1 	.word	0x0800efb1
 800f04c:	0800f0e1 	.word	0x0800f0e1
 800f050:	0800efb1 	.word	0x0800efb1
 800f054:	0800efb1 	.word	0x0800efb1
 800f058:	0800f08b 	.word	0x0800f08b
 800f05c:	3b45      	subs	r3, #69	@ 0x45
 800f05e:	2b02      	cmp	r3, #2
 800f060:	d8a6      	bhi.n	800efb0 <__ssvfiscanf_r+0xec>
 800f062:	2305      	movs	r3, #5
 800f064:	e021      	b.n	800f0aa <__ssvfiscanf_r+0x1e6>
 800f066:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f068:	4621      	mov	r1, r4
 800f06a:	4630      	mov	r0, r6
 800f06c:	4798      	blx	r3
 800f06e:	2800      	cmp	r0, #0
 800f070:	f43f af66 	beq.w	800ef40 <__ssvfiscanf_r+0x7c>
 800f074:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f076:	2800      	cmp	r0, #0
 800f078:	f040 808b 	bne.w	800f192 <__ssvfiscanf_r+0x2ce>
 800f07c:	f04f 30ff 	mov.w	r0, #4294967295
 800f080:	e08b      	b.n	800f19a <__ssvfiscanf_r+0x2d6>
 800f082:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f084:	f042 0220 	orr.w	r2, r2, #32
 800f088:	9241      	str	r2, [sp, #260]	@ 0x104
 800f08a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f08c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f090:	9241      	str	r2, [sp, #260]	@ 0x104
 800f092:	2210      	movs	r2, #16
 800f094:	2b6e      	cmp	r3, #110	@ 0x6e
 800f096:	9242      	str	r2, [sp, #264]	@ 0x108
 800f098:	d902      	bls.n	800f0a0 <__ssvfiscanf_r+0x1dc>
 800f09a:	e005      	b.n	800f0a8 <__ssvfiscanf_r+0x1e4>
 800f09c:	2300      	movs	r3, #0
 800f09e:	9342      	str	r3, [sp, #264]	@ 0x108
 800f0a0:	2303      	movs	r3, #3
 800f0a2:	e002      	b.n	800f0aa <__ssvfiscanf_r+0x1e6>
 800f0a4:	2308      	movs	r3, #8
 800f0a6:	9342      	str	r3, [sp, #264]	@ 0x108
 800f0a8:	2304      	movs	r3, #4
 800f0aa:	9347      	str	r3, [sp, #284]	@ 0x11c
 800f0ac:	6863      	ldr	r3, [r4, #4]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	dd39      	ble.n	800f126 <__ssvfiscanf_r+0x262>
 800f0b2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f0b4:	0659      	lsls	r1, r3, #25
 800f0b6:	d404      	bmi.n	800f0c2 <__ssvfiscanf_r+0x1fe>
 800f0b8:	6823      	ldr	r3, [r4, #0]
 800f0ba:	781a      	ldrb	r2, [r3, #0]
 800f0bc:	5cba      	ldrb	r2, [r7, r2]
 800f0be:	0712      	lsls	r2, r2, #28
 800f0c0:	d438      	bmi.n	800f134 <__ssvfiscanf_r+0x270>
 800f0c2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800f0c4:	2b02      	cmp	r3, #2
 800f0c6:	dc47      	bgt.n	800f158 <__ssvfiscanf_r+0x294>
 800f0c8:	466b      	mov	r3, sp
 800f0ca:	4622      	mov	r2, r4
 800f0cc:	a941      	add	r1, sp, #260	@ 0x104
 800f0ce:	4630      	mov	r0, r6
 800f0d0:	f000 f9ae 	bl	800f430 <_scanf_chars>
 800f0d4:	2801      	cmp	r0, #1
 800f0d6:	d064      	beq.n	800f1a2 <__ssvfiscanf_r+0x2de>
 800f0d8:	2802      	cmp	r0, #2
 800f0da:	f47f af18 	bne.w	800ef0e <__ssvfiscanf_r+0x4a>
 800f0de:	e7c9      	b.n	800f074 <__ssvfiscanf_r+0x1b0>
 800f0e0:	220a      	movs	r2, #10
 800f0e2:	e7d7      	b.n	800f094 <__ssvfiscanf_r+0x1d0>
 800f0e4:	4629      	mov	r1, r5
 800f0e6:	4640      	mov	r0, r8
 800f0e8:	f000 fbfe 	bl	800f8e8 <__sccl>
 800f0ec:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f0ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f0f2:	9341      	str	r3, [sp, #260]	@ 0x104
 800f0f4:	4605      	mov	r5, r0
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	e7d7      	b.n	800f0aa <__ssvfiscanf_r+0x1e6>
 800f0fa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f0fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f100:	9341      	str	r3, [sp, #260]	@ 0x104
 800f102:	2300      	movs	r3, #0
 800f104:	e7d1      	b.n	800f0aa <__ssvfiscanf_r+0x1e6>
 800f106:	2302      	movs	r3, #2
 800f108:	e7cf      	b.n	800f0aa <__ssvfiscanf_r+0x1e6>
 800f10a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800f10c:	06c3      	lsls	r3, r0, #27
 800f10e:	f53f aefe 	bmi.w	800ef0e <__ssvfiscanf_r+0x4a>
 800f112:	9b00      	ldr	r3, [sp, #0]
 800f114:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f116:	1d19      	adds	r1, r3, #4
 800f118:	9100      	str	r1, [sp, #0]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	07c0      	lsls	r0, r0, #31
 800f11e:	bf4c      	ite	mi
 800f120:	801a      	strhmi	r2, [r3, #0]
 800f122:	601a      	strpl	r2, [r3, #0]
 800f124:	e6f3      	b.n	800ef0e <__ssvfiscanf_r+0x4a>
 800f126:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f128:	4621      	mov	r1, r4
 800f12a:	4630      	mov	r0, r6
 800f12c:	4798      	blx	r3
 800f12e:	2800      	cmp	r0, #0
 800f130:	d0bf      	beq.n	800f0b2 <__ssvfiscanf_r+0x1ee>
 800f132:	e79f      	b.n	800f074 <__ssvfiscanf_r+0x1b0>
 800f134:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f136:	3201      	adds	r2, #1
 800f138:	9245      	str	r2, [sp, #276]	@ 0x114
 800f13a:	6862      	ldr	r2, [r4, #4]
 800f13c:	3a01      	subs	r2, #1
 800f13e:	2a00      	cmp	r2, #0
 800f140:	6062      	str	r2, [r4, #4]
 800f142:	dd02      	ble.n	800f14a <__ssvfiscanf_r+0x286>
 800f144:	3301      	adds	r3, #1
 800f146:	6023      	str	r3, [r4, #0]
 800f148:	e7b6      	b.n	800f0b8 <__ssvfiscanf_r+0x1f4>
 800f14a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f14c:	4621      	mov	r1, r4
 800f14e:	4630      	mov	r0, r6
 800f150:	4798      	blx	r3
 800f152:	2800      	cmp	r0, #0
 800f154:	d0b0      	beq.n	800f0b8 <__ssvfiscanf_r+0x1f4>
 800f156:	e78d      	b.n	800f074 <__ssvfiscanf_r+0x1b0>
 800f158:	2b04      	cmp	r3, #4
 800f15a:	dc0f      	bgt.n	800f17c <__ssvfiscanf_r+0x2b8>
 800f15c:	466b      	mov	r3, sp
 800f15e:	4622      	mov	r2, r4
 800f160:	a941      	add	r1, sp, #260	@ 0x104
 800f162:	4630      	mov	r0, r6
 800f164:	f000 f9be 	bl	800f4e4 <_scanf_i>
 800f168:	e7b4      	b.n	800f0d4 <__ssvfiscanf_r+0x210>
 800f16a:	bf00      	nop
 800f16c:	0800ee15 	.word	0x0800ee15
 800f170:	0800ee8b 	.word	0x0800ee8b
 800f174:	080111c1 	.word	0x080111c1
 800f178:	080112c7 	.word	0x080112c7
 800f17c:	4b0a      	ldr	r3, [pc, #40]	@ (800f1a8 <__ssvfiscanf_r+0x2e4>)
 800f17e:	2b00      	cmp	r3, #0
 800f180:	f43f aec5 	beq.w	800ef0e <__ssvfiscanf_r+0x4a>
 800f184:	466b      	mov	r3, sp
 800f186:	4622      	mov	r2, r4
 800f188:	a941      	add	r1, sp, #260	@ 0x104
 800f18a:	4630      	mov	r0, r6
 800f18c:	f7fc ffde 	bl	800c14c <_scanf_float>
 800f190:	e7a0      	b.n	800f0d4 <__ssvfiscanf_r+0x210>
 800f192:	89a3      	ldrh	r3, [r4, #12]
 800f194:	065b      	lsls	r3, r3, #25
 800f196:	f53f af71 	bmi.w	800f07c <__ssvfiscanf_r+0x1b8>
 800f19a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800f19e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1a2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f1a4:	e7f9      	b.n	800f19a <__ssvfiscanf_r+0x2d6>
 800f1a6:	bf00      	nop
 800f1a8:	0800c14d 	.word	0x0800c14d

0800f1ac <__sfputc_r>:
 800f1ac:	6893      	ldr	r3, [r2, #8]
 800f1ae:	3b01      	subs	r3, #1
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	b410      	push	{r4}
 800f1b4:	6093      	str	r3, [r2, #8]
 800f1b6:	da08      	bge.n	800f1ca <__sfputc_r+0x1e>
 800f1b8:	6994      	ldr	r4, [r2, #24]
 800f1ba:	42a3      	cmp	r3, r4
 800f1bc:	db01      	blt.n	800f1c2 <__sfputc_r+0x16>
 800f1be:	290a      	cmp	r1, #10
 800f1c0:	d103      	bne.n	800f1ca <__sfputc_r+0x1e>
 800f1c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1c6:	f7fd bb96 	b.w	800c8f6 <__swbuf_r>
 800f1ca:	6813      	ldr	r3, [r2, #0]
 800f1cc:	1c58      	adds	r0, r3, #1
 800f1ce:	6010      	str	r0, [r2, #0]
 800f1d0:	7019      	strb	r1, [r3, #0]
 800f1d2:	4608      	mov	r0, r1
 800f1d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1d8:	4770      	bx	lr

0800f1da <__sfputs_r>:
 800f1da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1dc:	4606      	mov	r6, r0
 800f1de:	460f      	mov	r7, r1
 800f1e0:	4614      	mov	r4, r2
 800f1e2:	18d5      	adds	r5, r2, r3
 800f1e4:	42ac      	cmp	r4, r5
 800f1e6:	d101      	bne.n	800f1ec <__sfputs_r+0x12>
 800f1e8:	2000      	movs	r0, #0
 800f1ea:	e007      	b.n	800f1fc <__sfputs_r+0x22>
 800f1ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1f0:	463a      	mov	r2, r7
 800f1f2:	4630      	mov	r0, r6
 800f1f4:	f7ff ffda 	bl	800f1ac <__sfputc_r>
 800f1f8:	1c43      	adds	r3, r0, #1
 800f1fa:	d1f3      	bne.n	800f1e4 <__sfputs_r+0xa>
 800f1fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f200 <_vfiprintf_r>:
 800f200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f204:	460d      	mov	r5, r1
 800f206:	b09d      	sub	sp, #116	@ 0x74
 800f208:	4614      	mov	r4, r2
 800f20a:	4698      	mov	r8, r3
 800f20c:	4606      	mov	r6, r0
 800f20e:	b118      	cbz	r0, 800f218 <_vfiprintf_r+0x18>
 800f210:	6a03      	ldr	r3, [r0, #32]
 800f212:	b90b      	cbnz	r3, 800f218 <_vfiprintf_r+0x18>
 800f214:	f7fd fa3a 	bl	800c68c <__sinit>
 800f218:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f21a:	07d9      	lsls	r1, r3, #31
 800f21c:	d405      	bmi.n	800f22a <_vfiprintf_r+0x2a>
 800f21e:	89ab      	ldrh	r3, [r5, #12]
 800f220:	059a      	lsls	r2, r3, #22
 800f222:	d402      	bmi.n	800f22a <_vfiprintf_r+0x2a>
 800f224:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f226:	f7fd fcaa 	bl	800cb7e <__retarget_lock_acquire_recursive>
 800f22a:	89ab      	ldrh	r3, [r5, #12]
 800f22c:	071b      	lsls	r3, r3, #28
 800f22e:	d501      	bpl.n	800f234 <_vfiprintf_r+0x34>
 800f230:	692b      	ldr	r3, [r5, #16]
 800f232:	b99b      	cbnz	r3, 800f25c <_vfiprintf_r+0x5c>
 800f234:	4629      	mov	r1, r5
 800f236:	4630      	mov	r0, r6
 800f238:	f7fd fb9c 	bl	800c974 <__swsetup_r>
 800f23c:	b170      	cbz	r0, 800f25c <_vfiprintf_r+0x5c>
 800f23e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f240:	07dc      	lsls	r4, r3, #31
 800f242:	d504      	bpl.n	800f24e <_vfiprintf_r+0x4e>
 800f244:	f04f 30ff 	mov.w	r0, #4294967295
 800f248:	b01d      	add	sp, #116	@ 0x74
 800f24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f24e:	89ab      	ldrh	r3, [r5, #12]
 800f250:	0598      	lsls	r0, r3, #22
 800f252:	d4f7      	bmi.n	800f244 <_vfiprintf_r+0x44>
 800f254:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f256:	f7fd fc93 	bl	800cb80 <__retarget_lock_release_recursive>
 800f25a:	e7f3      	b.n	800f244 <_vfiprintf_r+0x44>
 800f25c:	2300      	movs	r3, #0
 800f25e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f260:	2320      	movs	r3, #32
 800f262:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f266:	f8cd 800c 	str.w	r8, [sp, #12]
 800f26a:	2330      	movs	r3, #48	@ 0x30
 800f26c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f41c <_vfiprintf_r+0x21c>
 800f270:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f274:	f04f 0901 	mov.w	r9, #1
 800f278:	4623      	mov	r3, r4
 800f27a:	469a      	mov	sl, r3
 800f27c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f280:	b10a      	cbz	r2, 800f286 <_vfiprintf_r+0x86>
 800f282:	2a25      	cmp	r2, #37	@ 0x25
 800f284:	d1f9      	bne.n	800f27a <_vfiprintf_r+0x7a>
 800f286:	ebba 0b04 	subs.w	fp, sl, r4
 800f28a:	d00b      	beq.n	800f2a4 <_vfiprintf_r+0xa4>
 800f28c:	465b      	mov	r3, fp
 800f28e:	4622      	mov	r2, r4
 800f290:	4629      	mov	r1, r5
 800f292:	4630      	mov	r0, r6
 800f294:	f7ff ffa1 	bl	800f1da <__sfputs_r>
 800f298:	3001      	adds	r0, #1
 800f29a:	f000 80a7 	beq.w	800f3ec <_vfiprintf_r+0x1ec>
 800f29e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f2a0:	445a      	add	r2, fp
 800f2a2:	9209      	str	r2, [sp, #36]	@ 0x24
 800f2a4:	f89a 3000 	ldrb.w	r3, [sl]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	f000 809f 	beq.w	800f3ec <_vfiprintf_r+0x1ec>
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	f04f 32ff 	mov.w	r2, #4294967295
 800f2b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2b8:	f10a 0a01 	add.w	sl, sl, #1
 800f2bc:	9304      	str	r3, [sp, #16]
 800f2be:	9307      	str	r3, [sp, #28]
 800f2c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f2c4:	931a      	str	r3, [sp, #104]	@ 0x68
 800f2c6:	4654      	mov	r4, sl
 800f2c8:	2205      	movs	r2, #5
 800f2ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2ce:	4853      	ldr	r0, [pc, #332]	@ (800f41c <_vfiprintf_r+0x21c>)
 800f2d0:	f7f0 ff86 	bl	80001e0 <memchr>
 800f2d4:	9a04      	ldr	r2, [sp, #16]
 800f2d6:	b9d8      	cbnz	r0, 800f310 <_vfiprintf_r+0x110>
 800f2d8:	06d1      	lsls	r1, r2, #27
 800f2da:	bf44      	itt	mi
 800f2dc:	2320      	movmi	r3, #32
 800f2de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f2e2:	0713      	lsls	r3, r2, #28
 800f2e4:	bf44      	itt	mi
 800f2e6:	232b      	movmi	r3, #43	@ 0x2b
 800f2e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f2ec:	f89a 3000 	ldrb.w	r3, [sl]
 800f2f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2f2:	d015      	beq.n	800f320 <_vfiprintf_r+0x120>
 800f2f4:	9a07      	ldr	r2, [sp, #28]
 800f2f6:	4654      	mov	r4, sl
 800f2f8:	2000      	movs	r0, #0
 800f2fa:	f04f 0c0a 	mov.w	ip, #10
 800f2fe:	4621      	mov	r1, r4
 800f300:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f304:	3b30      	subs	r3, #48	@ 0x30
 800f306:	2b09      	cmp	r3, #9
 800f308:	d94b      	bls.n	800f3a2 <_vfiprintf_r+0x1a2>
 800f30a:	b1b0      	cbz	r0, 800f33a <_vfiprintf_r+0x13a>
 800f30c:	9207      	str	r2, [sp, #28]
 800f30e:	e014      	b.n	800f33a <_vfiprintf_r+0x13a>
 800f310:	eba0 0308 	sub.w	r3, r0, r8
 800f314:	fa09 f303 	lsl.w	r3, r9, r3
 800f318:	4313      	orrs	r3, r2
 800f31a:	9304      	str	r3, [sp, #16]
 800f31c:	46a2      	mov	sl, r4
 800f31e:	e7d2      	b.n	800f2c6 <_vfiprintf_r+0xc6>
 800f320:	9b03      	ldr	r3, [sp, #12]
 800f322:	1d19      	adds	r1, r3, #4
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	9103      	str	r1, [sp, #12]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	bfbb      	ittet	lt
 800f32c:	425b      	neglt	r3, r3
 800f32e:	f042 0202 	orrlt.w	r2, r2, #2
 800f332:	9307      	strge	r3, [sp, #28]
 800f334:	9307      	strlt	r3, [sp, #28]
 800f336:	bfb8      	it	lt
 800f338:	9204      	strlt	r2, [sp, #16]
 800f33a:	7823      	ldrb	r3, [r4, #0]
 800f33c:	2b2e      	cmp	r3, #46	@ 0x2e
 800f33e:	d10a      	bne.n	800f356 <_vfiprintf_r+0x156>
 800f340:	7863      	ldrb	r3, [r4, #1]
 800f342:	2b2a      	cmp	r3, #42	@ 0x2a
 800f344:	d132      	bne.n	800f3ac <_vfiprintf_r+0x1ac>
 800f346:	9b03      	ldr	r3, [sp, #12]
 800f348:	1d1a      	adds	r2, r3, #4
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	9203      	str	r2, [sp, #12]
 800f34e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f352:	3402      	adds	r4, #2
 800f354:	9305      	str	r3, [sp, #20]
 800f356:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f42c <_vfiprintf_r+0x22c>
 800f35a:	7821      	ldrb	r1, [r4, #0]
 800f35c:	2203      	movs	r2, #3
 800f35e:	4650      	mov	r0, sl
 800f360:	f7f0 ff3e 	bl	80001e0 <memchr>
 800f364:	b138      	cbz	r0, 800f376 <_vfiprintf_r+0x176>
 800f366:	9b04      	ldr	r3, [sp, #16]
 800f368:	eba0 000a 	sub.w	r0, r0, sl
 800f36c:	2240      	movs	r2, #64	@ 0x40
 800f36e:	4082      	lsls	r2, r0
 800f370:	4313      	orrs	r3, r2
 800f372:	3401      	adds	r4, #1
 800f374:	9304      	str	r3, [sp, #16]
 800f376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f37a:	4829      	ldr	r0, [pc, #164]	@ (800f420 <_vfiprintf_r+0x220>)
 800f37c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f380:	2206      	movs	r2, #6
 800f382:	f7f0 ff2d 	bl	80001e0 <memchr>
 800f386:	2800      	cmp	r0, #0
 800f388:	d03f      	beq.n	800f40a <_vfiprintf_r+0x20a>
 800f38a:	4b26      	ldr	r3, [pc, #152]	@ (800f424 <_vfiprintf_r+0x224>)
 800f38c:	bb1b      	cbnz	r3, 800f3d6 <_vfiprintf_r+0x1d6>
 800f38e:	9b03      	ldr	r3, [sp, #12]
 800f390:	3307      	adds	r3, #7
 800f392:	f023 0307 	bic.w	r3, r3, #7
 800f396:	3308      	adds	r3, #8
 800f398:	9303      	str	r3, [sp, #12]
 800f39a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f39c:	443b      	add	r3, r7
 800f39e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f3a0:	e76a      	b.n	800f278 <_vfiprintf_r+0x78>
 800f3a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f3a6:	460c      	mov	r4, r1
 800f3a8:	2001      	movs	r0, #1
 800f3aa:	e7a8      	b.n	800f2fe <_vfiprintf_r+0xfe>
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	3401      	adds	r4, #1
 800f3b0:	9305      	str	r3, [sp, #20]
 800f3b2:	4619      	mov	r1, r3
 800f3b4:	f04f 0c0a 	mov.w	ip, #10
 800f3b8:	4620      	mov	r0, r4
 800f3ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3be:	3a30      	subs	r2, #48	@ 0x30
 800f3c0:	2a09      	cmp	r2, #9
 800f3c2:	d903      	bls.n	800f3cc <_vfiprintf_r+0x1cc>
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d0c6      	beq.n	800f356 <_vfiprintf_r+0x156>
 800f3c8:	9105      	str	r1, [sp, #20]
 800f3ca:	e7c4      	b.n	800f356 <_vfiprintf_r+0x156>
 800f3cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3d0:	4604      	mov	r4, r0
 800f3d2:	2301      	movs	r3, #1
 800f3d4:	e7f0      	b.n	800f3b8 <_vfiprintf_r+0x1b8>
 800f3d6:	ab03      	add	r3, sp, #12
 800f3d8:	9300      	str	r3, [sp, #0]
 800f3da:	462a      	mov	r2, r5
 800f3dc:	4b12      	ldr	r3, [pc, #72]	@ (800f428 <_vfiprintf_r+0x228>)
 800f3de:	a904      	add	r1, sp, #16
 800f3e0:	4630      	mov	r0, r6
 800f3e2:	f7fc fafb 	bl	800b9dc <_printf_float>
 800f3e6:	4607      	mov	r7, r0
 800f3e8:	1c78      	adds	r0, r7, #1
 800f3ea:	d1d6      	bne.n	800f39a <_vfiprintf_r+0x19a>
 800f3ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f3ee:	07d9      	lsls	r1, r3, #31
 800f3f0:	d405      	bmi.n	800f3fe <_vfiprintf_r+0x1fe>
 800f3f2:	89ab      	ldrh	r3, [r5, #12]
 800f3f4:	059a      	lsls	r2, r3, #22
 800f3f6:	d402      	bmi.n	800f3fe <_vfiprintf_r+0x1fe>
 800f3f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f3fa:	f7fd fbc1 	bl	800cb80 <__retarget_lock_release_recursive>
 800f3fe:	89ab      	ldrh	r3, [r5, #12]
 800f400:	065b      	lsls	r3, r3, #25
 800f402:	f53f af1f 	bmi.w	800f244 <_vfiprintf_r+0x44>
 800f406:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f408:	e71e      	b.n	800f248 <_vfiprintf_r+0x48>
 800f40a:	ab03      	add	r3, sp, #12
 800f40c:	9300      	str	r3, [sp, #0]
 800f40e:	462a      	mov	r2, r5
 800f410:	4b05      	ldr	r3, [pc, #20]	@ (800f428 <_vfiprintf_r+0x228>)
 800f412:	a904      	add	r1, sp, #16
 800f414:	4630      	mov	r0, r6
 800f416:	f7fc fd79 	bl	800bf0c <_printf_i>
 800f41a:	e7e4      	b.n	800f3e6 <_vfiprintf_r+0x1e6>
 800f41c:	080112c1 	.word	0x080112c1
 800f420:	080112cb 	.word	0x080112cb
 800f424:	0800b9dd 	.word	0x0800b9dd
 800f428:	0800f1db 	.word	0x0800f1db
 800f42c:	080112c7 	.word	0x080112c7

0800f430 <_scanf_chars>:
 800f430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f434:	4615      	mov	r5, r2
 800f436:	688a      	ldr	r2, [r1, #8]
 800f438:	4680      	mov	r8, r0
 800f43a:	460c      	mov	r4, r1
 800f43c:	b932      	cbnz	r2, 800f44c <_scanf_chars+0x1c>
 800f43e:	698a      	ldr	r2, [r1, #24]
 800f440:	2a00      	cmp	r2, #0
 800f442:	bf14      	ite	ne
 800f444:	f04f 32ff 	movne.w	r2, #4294967295
 800f448:	2201      	moveq	r2, #1
 800f44a:	608a      	str	r2, [r1, #8]
 800f44c:	6822      	ldr	r2, [r4, #0]
 800f44e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800f4e0 <_scanf_chars+0xb0>
 800f452:	06d1      	lsls	r1, r2, #27
 800f454:	bf5f      	itttt	pl
 800f456:	681a      	ldrpl	r2, [r3, #0]
 800f458:	1d11      	addpl	r1, r2, #4
 800f45a:	6019      	strpl	r1, [r3, #0]
 800f45c:	6816      	ldrpl	r6, [r2, #0]
 800f45e:	2700      	movs	r7, #0
 800f460:	69a0      	ldr	r0, [r4, #24]
 800f462:	b188      	cbz	r0, 800f488 <_scanf_chars+0x58>
 800f464:	2801      	cmp	r0, #1
 800f466:	d107      	bne.n	800f478 <_scanf_chars+0x48>
 800f468:	682b      	ldr	r3, [r5, #0]
 800f46a:	781a      	ldrb	r2, [r3, #0]
 800f46c:	6963      	ldr	r3, [r4, #20]
 800f46e:	5c9b      	ldrb	r3, [r3, r2]
 800f470:	b953      	cbnz	r3, 800f488 <_scanf_chars+0x58>
 800f472:	2f00      	cmp	r7, #0
 800f474:	d031      	beq.n	800f4da <_scanf_chars+0xaa>
 800f476:	e022      	b.n	800f4be <_scanf_chars+0x8e>
 800f478:	2802      	cmp	r0, #2
 800f47a:	d120      	bne.n	800f4be <_scanf_chars+0x8e>
 800f47c:	682b      	ldr	r3, [r5, #0]
 800f47e:	781b      	ldrb	r3, [r3, #0]
 800f480:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f484:	071b      	lsls	r3, r3, #28
 800f486:	d41a      	bmi.n	800f4be <_scanf_chars+0x8e>
 800f488:	6823      	ldr	r3, [r4, #0]
 800f48a:	06da      	lsls	r2, r3, #27
 800f48c:	bf5e      	ittt	pl
 800f48e:	682b      	ldrpl	r3, [r5, #0]
 800f490:	781b      	ldrbpl	r3, [r3, #0]
 800f492:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f496:	682a      	ldr	r2, [r5, #0]
 800f498:	686b      	ldr	r3, [r5, #4]
 800f49a:	3201      	adds	r2, #1
 800f49c:	602a      	str	r2, [r5, #0]
 800f49e:	68a2      	ldr	r2, [r4, #8]
 800f4a0:	3b01      	subs	r3, #1
 800f4a2:	3a01      	subs	r2, #1
 800f4a4:	606b      	str	r3, [r5, #4]
 800f4a6:	3701      	adds	r7, #1
 800f4a8:	60a2      	str	r2, [r4, #8]
 800f4aa:	b142      	cbz	r2, 800f4be <_scanf_chars+0x8e>
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	dcd7      	bgt.n	800f460 <_scanf_chars+0x30>
 800f4b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f4b4:	4629      	mov	r1, r5
 800f4b6:	4640      	mov	r0, r8
 800f4b8:	4798      	blx	r3
 800f4ba:	2800      	cmp	r0, #0
 800f4bc:	d0d0      	beq.n	800f460 <_scanf_chars+0x30>
 800f4be:	6823      	ldr	r3, [r4, #0]
 800f4c0:	f013 0310 	ands.w	r3, r3, #16
 800f4c4:	d105      	bne.n	800f4d2 <_scanf_chars+0xa2>
 800f4c6:	68e2      	ldr	r2, [r4, #12]
 800f4c8:	3201      	adds	r2, #1
 800f4ca:	60e2      	str	r2, [r4, #12]
 800f4cc:	69a2      	ldr	r2, [r4, #24]
 800f4ce:	b102      	cbz	r2, 800f4d2 <_scanf_chars+0xa2>
 800f4d0:	7033      	strb	r3, [r6, #0]
 800f4d2:	6923      	ldr	r3, [r4, #16]
 800f4d4:	443b      	add	r3, r7
 800f4d6:	6123      	str	r3, [r4, #16]
 800f4d8:	2000      	movs	r0, #0
 800f4da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4de:	bf00      	nop
 800f4e0:	080111c1 	.word	0x080111c1

0800f4e4 <_scanf_i>:
 800f4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4e8:	4698      	mov	r8, r3
 800f4ea:	4b74      	ldr	r3, [pc, #464]	@ (800f6bc <_scanf_i+0x1d8>)
 800f4ec:	460c      	mov	r4, r1
 800f4ee:	4682      	mov	sl, r0
 800f4f0:	4616      	mov	r6, r2
 800f4f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f4f6:	b087      	sub	sp, #28
 800f4f8:	ab03      	add	r3, sp, #12
 800f4fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f4fe:	4b70      	ldr	r3, [pc, #448]	@ (800f6c0 <_scanf_i+0x1dc>)
 800f500:	69a1      	ldr	r1, [r4, #24]
 800f502:	4a70      	ldr	r2, [pc, #448]	@ (800f6c4 <_scanf_i+0x1e0>)
 800f504:	2903      	cmp	r1, #3
 800f506:	bf08      	it	eq
 800f508:	461a      	moveq	r2, r3
 800f50a:	68a3      	ldr	r3, [r4, #8]
 800f50c:	9201      	str	r2, [sp, #4]
 800f50e:	1e5a      	subs	r2, r3, #1
 800f510:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f514:	bf88      	it	hi
 800f516:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f51a:	4627      	mov	r7, r4
 800f51c:	bf82      	ittt	hi
 800f51e:	eb03 0905 	addhi.w	r9, r3, r5
 800f522:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f526:	60a3      	strhi	r3, [r4, #8]
 800f528:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f52c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800f530:	bf98      	it	ls
 800f532:	f04f 0900 	movls.w	r9, #0
 800f536:	6023      	str	r3, [r4, #0]
 800f538:	463d      	mov	r5, r7
 800f53a:	f04f 0b00 	mov.w	fp, #0
 800f53e:	6831      	ldr	r1, [r6, #0]
 800f540:	ab03      	add	r3, sp, #12
 800f542:	7809      	ldrb	r1, [r1, #0]
 800f544:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f548:	2202      	movs	r2, #2
 800f54a:	f7f0 fe49 	bl	80001e0 <memchr>
 800f54e:	b328      	cbz	r0, 800f59c <_scanf_i+0xb8>
 800f550:	f1bb 0f01 	cmp.w	fp, #1
 800f554:	d159      	bne.n	800f60a <_scanf_i+0x126>
 800f556:	6862      	ldr	r2, [r4, #4]
 800f558:	b92a      	cbnz	r2, 800f566 <_scanf_i+0x82>
 800f55a:	6822      	ldr	r2, [r4, #0]
 800f55c:	2108      	movs	r1, #8
 800f55e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f562:	6061      	str	r1, [r4, #4]
 800f564:	6022      	str	r2, [r4, #0]
 800f566:	6822      	ldr	r2, [r4, #0]
 800f568:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800f56c:	6022      	str	r2, [r4, #0]
 800f56e:	68a2      	ldr	r2, [r4, #8]
 800f570:	1e51      	subs	r1, r2, #1
 800f572:	60a1      	str	r1, [r4, #8]
 800f574:	b192      	cbz	r2, 800f59c <_scanf_i+0xb8>
 800f576:	6832      	ldr	r2, [r6, #0]
 800f578:	1c51      	adds	r1, r2, #1
 800f57a:	6031      	str	r1, [r6, #0]
 800f57c:	7812      	ldrb	r2, [r2, #0]
 800f57e:	f805 2b01 	strb.w	r2, [r5], #1
 800f582:	6872      	ldr	r2, [r6, #4]
 800f584:	3a01      	subs	r2, #1
 800f586:	2a00      	cmp	r2, #0
 800f588:	6072      	str	r2, [r6, #4]
 800f58a:	dc07      	bgt.n	800f59c <_scanf_i+0xb8>
 800f58c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800f590:	4631      	mov	r1, r6
 800f592:	4650      	mov	r0, sl
 800f594:	4790      	blx	r2
 800f596:	2800      	cmp	r0, #0
 800f598:	f040 8085 	bne.w	800f6a6 <_scanf_i+0x1c2>
 800f59c:	f10b 0b01 	add.w	fp, fp, #1
 800f5a0:	f1bb 0f03 	cmp.w	fp, #3
 800f5a4:	d1cb      	bne.n	800f53e <_scanf_i+0x5a>
 800f5a6:	6863      	ldr	r3, [r4, #4]
 800f5a8:	b90b      	cbnz	r3, 800f5ae <_scanf_i+0xca>
 800f5aa:	230a      	movs	r3, #10
 800f5ac:	6063      	str	r3, [r4, #4]
 800f5ae:	6863      	ldr	r3, [r4, #4]
 800f5b0:	4945      	ldr	r1, [pc, #276]	@ (800f6c8 <_scanf_i+0x1e4>)
 800f5b2:	6960      	ldr	r0, [r4, #20]
 800f5b4:	1ac9      	subs	r1, r1, r3
 800f5b6:	f000 f997 	bl	800f8e8 <__sccl>
 800f5ba:	f04f 0b00 	mov.w	fp, #0
 800f5be:	68a3      	ldr	r3, [r4, #8]
 800f5c0:	6822      	ldr	r2, [r4, #0]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d03d      	beq.n	800f642 <_scanf_i+0x15e>
 800f5c6:	6831      	ldr	r1, [r6, #0]
 800f5c8:	6960      	ldr	r0, [r4, #20]
 800f5ca:	f891 c000 	ldrb.w	ip, [r1]
 800f5ce:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f5d2:	2800      	cmp	r0, #0
 800f5d4:	d035      	beq.n	800f642 <_scanf_i+0x15e>
 800f5d6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800f5da:	d124      	bne.n	800f626 <_scanf_i+0x142>
 800f5dc:	0510      	lsls	r0, r2, #20
 800f5de:	d522      	bpl.n	800f626 <_scanf_i+0x142>
 800f5e0:	f10b 0b01 	add.w	fp, fp, #1
 800f5e4:	f1b9 0f00 	cmp.w	r9, #0
 800f5e8:	d003      	beq.n	800f5f2 <_scanf_i+0x10e>
 800f5ea:	3301      	adds	r3, #1
 800f5ec:	f109 39ff 	add.w	r9, r9, #4294967295
 800f5f0:	60a3      	str	r3, [r4, #8]
 800f5f2:	6873      	ldr	r3, [r6, #4]
 800f5f4:	3b01      	subs	r3, #1
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	6073      	str	r3, [r6, #4]
 800f5fa:	dd1b      	ble.n	800f634 <_scanf_i+0x150>
 800f5fc:	6833      	ldr	r3, [r6, #0]
 800f5fe:	3301      	adds	r3, #1
 800f600:	6033      	str	r3, [r6, #0]
 800f602:	68a3      	ldr	r3, [r4, #8]
 800f604:	3b01      	subs	r3, #1
 800f606:	60a3      	str	r3, [r4, #8]
 800f608:	e7d9      	b.n	800f5be <_scanf_i+0xda>
 800f60a:	f1bb 0f02 	cmp.w	fp, #2
 800f60e:	d1ae      	bne.n	800f56e <_scanf_i+0x8a>
 800f610:	6822      	ldr	r2, [r4, #0]
 800f612:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800f616:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800f61a:	d1bf      	bne.n	800f59c <_scanf_i+0xb8>
 800f61c:	2110      	movs	r1, #16
 800f61e:	6061      	str	r1, [r4, #4]
 800f620:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f624:	e7a2      	b.n	800f56c <_scanf_i+0x88>
 800f626:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800f62a:	6022      	str	r2, [r4, #0]
 800f62c:	780b      	ldrb	r3, [r1, #0]
 800f62e:	f805 3b01 	strb.w	r3, [r5], #1
 800f632:	e7de      	b.n	800f5f2 <_scanf_i+0x10e>
 800f634:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f638:	4631      	mov	r1, r6
 800f63a:	4650      	mov	r0, sl
 800f63c:	4798      	blx	r3
 800f63e:	2800      	cmp	r0, #0
 800f640:	d0df      	beq.n	800f602 <_scanf_i+0x11e>
 800f642:	6823      	ldr	r3, [r4, #0]
 800f644:	05d9      	lsls	r1, r3, #23
 800f646:	d50d      	bpl.n	800f664 <_scanf_i+0x180>
 800f648:	42bd      	cmp	r5, r7
 800f64a:	d909      	bls.n	800f660 <_scanf_i+0x17c>
 800f64c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f650:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f654:	4632      	mov	r2, r6
 800f656:	4650      	mov	r0, sl
 800f658:	4798      	blx	r3
 800f65a:	f105 39ff 	add.w	r9, r5, #4294967295
 800f65e:	464d      	mov	r5, r9
 800f660:	42bd      	cmp	r5, r7
 800f662:	d028      	beq.n	800f6b6 <_scanf_i+0x1d2>
 800f664:	6822      	ldr	r2, [r4, #0]
 800f666:	f012 0210 	ands.w	r2, r2, #16
 800f66a:	d113      	bne.n	800f694 <_scanf_i+0x1b0>
 800f66c:	702a      	strb	r2, [r5, #0]
 800f66e:	6863      	ldr	r3, [r4, #4]
 800f670:	9e01      	ldr	r6, [sp, #4]
 800f672:	4639      	mov	r1, r7
 800f674:	4650      	mov	r0, sl
 800f676:	47b0      	blx	r6
 800f678:	f8d8 3000 	ldr.w	r3, [r8]
 800f67c:	6821      	ldr	r1, [r4, #0]
 800f67e:	1d1a      	adds	r2, r3, #4
 800f680:	f8c8 2000 	str.w	r2, [r8]
 800f684:	f011 0f20 	tst.w	r1, #32
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	d00f      	beq.n	800f6ac <_scanf_i+0x1c8>
 800f68c:	6018      	str	r0, [r3, #0]
 800f68e:	68e3      	ldr	r3, [r4, #12]
 800f690:	3301      	adds	r3, #1
 800f692:	60e3      	str	r3, [r4, #12]
 800f694:	6923      	ldr	r3, [r4, #16]
 800f696:	1bed      	subs	r5, r5, r7
 800f698:	445d      	add	r5, fp
 800f69a:	442b      	add	r3, r5
 800f69c:	6123      	str	r3, [r4, #16]
 800f69e:	2000      	movs	r0, #0
 800f6a0:	b007      	add	sp, #28
 800f6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6a6:	f04f 0b00 	mov.w	fp, #0
 800f6aa:	e7ca      	b.n	800f642 <_scanf_i+0x15e>
 800f6ac:	07ca      	lsls	r2, r1, #31
 800f6ae:	bf4c      	ite	mi
 800f6b0:	8018      	strhmi	r0, [r3, #0]
 800f6b2:	6018      	strpl	r0, [r3, #0]
 800f6b4:	e7eb      	b.n	800f68e <_scanf_i+0x1aa>
 800f6b6:	2001      	movs	r0, #1
 800f6b8:	e7f2      	b.n	800f6a0 <_scanf_i+0x1bc>
 800f6ba:	bf00      	nop
 800f6bc:	08010ea4 	.word	0x08010ea4
 800f6c0:	0800eb49 	.word	0x0800eb49
 800f6c4:	0800fc05 	.word	0x0800fc05
 800f6c8:	080112e2 	.word	0x080112e2

0800f6cc <__sflush_r>:
 800f6cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6d4:	0716      	lsls	r6, r2, #28
 800f6d6:	4605      	mov	r5, r0
 800f6d8:	460c      	mov	r4, r1
 800f6da:	d454      	bmi.n	800f786 <__sflush_r+0xba>
 800f6dc:	684b      	ldr	r3, [r1, #4]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	dc02      	bgt.n	800f6e8 <__sflush_r+0x1c>
 800f6e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	dd48      	ble.n	800f77a <__sflush_r+0xae>
 800f6e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f6ea:	2e00      	cmp	r6, #0
 800f6ec:	d045      	beq.n	800f77a <__sflush_r+0xae>
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f6f4:	682f      	ldr	r7, [r5, #0]
 800f6f6:	6a21      	ldr	r1, [r4, #32]
 800f6f8:	602b      	str	r3, [r5, #0]
 800f6fa:	d030      	beq.n	800f75e <__sflush_r+0x92>
 800f6fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f6fe:	89a3      	ldrh	r3, [r4, #12]
 800f700:	0759      	lsls	r1, r3, #29
 800f702:	d505      	bpl.n	800f710 <__sflush_r+0x44>
 800f704:	6863      	ldr	r3, [r4, #4]
 800f706:	1ad2      	subs	r2, r2, r3
 800f708:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f70a:	b10b      	cbz	r3, 800f710 <__sflush_r+0x44>
 800f70c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f70e:	1ad2      	subs	r2, r2, r3
 800f710:	2300      	movs	r3, #0
 800f712:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f714:	6a21      	ldr	r1, [r4, #32]
 800f716:	4628      	mov	r0, r5
 800f718:	47b0      	blx	r6
 800f71a:	1c43      	adds	r3, r0, #1
 800f71c:	89a3      	ldrh	r3, [r4, #12]
 800f71e:	d106      	bne.n	800f72e <__sflush_r+0x62>
 800f720:	6829      	ldr	r1, [r5, #0]
 800f722:	291d      	cmp	r1, #29
 800f724:	d82b      	bhi.n	800f77e <__sflush_r+0xb2>
 800f726:	4a2a      	ldr	r2, [pc, #168]	@ (800f7d0 <__sflush_r+0x104>)
 800f728:	410a      	asrs	r2, r1
 800f72a:	07d6      	lsls	r6, r2, #31
 800f72c:	d427      	bmi.n	800f77e <__sflush_r+0xb2>
 800f72e:	2200      	movs	r2, #0
 800f730:	6062      	str	r2, [r4, #4]
 800f732:	04d9      	lsls	r1, r3, #19
 800f734:	6922      	ldr	r2, [r4, #16]
 800f736:	6022      	str	r2, [r4, #0]
 800f738:	d504      	bpl.n	800f744 <__sflush_r+0x78>
 800f73a:	1c42      	adds	r2, r0, #1
 800f73c:	d101      	bne.n	800f742 <__sflush_r+0x76>
 800f73e:	682b      	ldr	r3, [r5, #0]
 800f740:	b903      	cbnz	r3, 800f744 <__sflush_r+0x78>
 800f742:	6560      	str	r0, [r4, #84]	@ 0x54
 800f744:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f746:	602f      	str	r7, [r5, #0]
 800f748:	b1b9      	cbz	r1, 800f77a <__sflush_r+0xae>
 800f74a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f74e:	4299      	cmp	r1, r3
 800f750:	d002      	beq.n	800f758 <__sflush_r+0x8c>
 800f752:	4628      	mov	r0, r5
 800f754:	f7fe f880 	bl	800d858 <_free_r>
 800f758:	2300      	movs	r3, #0
 800f75a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f75c:	e00d      	b.n	800f77a <__sflush_r+0xae>
 800f75e:	2301      	movs	r3, #1
 800f760:	4628      	mov	r0, r5
 800f762:	47b0      	blx	r6
 800f764:	4602      	mov	r2, r0
 800f766:	1c50      	adds	r0, r2, #1
 800f768:	d1c9      	bne.n	800f6fe <__sflush_r+0x32>
 800f76a:	682b      	ldr	r3, [r5, #0]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d0c6      	beq.n	800f6fe <__sflush_r+0x32>
 800f770:	2b1d      	cmp	r3, #29
 800f772:	d001      	beq.n	800f778 <__sflush_r+0xac>
 800f774:	2b16      	cmp	r3, #22
 800f776:	d11e      	bne.n	800f7b6 <__sflush_r+0xea>
 800f778:	602f      	str	r7, [r5, #0]
 800f77a:	2000      	movs	r0, #0
 800f77c:	e022      	b.n	800f7c4 <__sflush_r+0xf8>
 800f77e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f782:	b21b      	sxth	r3, r3
 800f784:	e01b      	b.n	800f7be <__sflush_r+0xf2>
 800f786:	690f      	ldr	r7, [r1, #16]
 800f788:	2f00      	cmp	r7, #0
 800f78a:	d0f6      	beq.n	800f77a <__sflush_r+0xae>
 800f78c:	0793      	lsls	r3, r2, #30
 800f78e:	680e      	ldr	r6, [r1, #0]
 800f790:	bf08      	it	eq
 800f792:	694b      	ldreq	r3, [r1, #20]
 800f794:	600f      	str	r7, [r1, #0]
 800f796:	bf18      	it	ne
 800f798:	2300      	movne	r3, #0
 800f79a:	eba6 0807 	sub.w	r8, r6, r7
 800f79e:	608b      	str	r3, [r1, #8]
 800f7a0:	f1b8 0f00 	cmp.w	r8, #0
 800f7a4:	dde9      	ble.n	800f77a <__sflush_r+0xae>
 800f7a6:	6a21      	ldr	r1, [r4, #32]
 800f7a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f7aa:	4643      	mov	r3, r8
 800f7ac:	463a      	mov	r2, r7
 800f7ae:	4628      	mov	r0, r5
 800f7b0:	47b0      	blx	r6
 800f7b2:	2800      	cmp	r0, #0
 800f7b4:	dc08      	bgt.n	800f7c8 <__sflush_r+0xfc>
 800f7b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7be:	81a3      	strh	r3, [r4, #12]
 800f7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7c8:	4407      	add	r7, r0
 800f7ca:	eba8 0800 	sub.w	r8, r8, r0
 800f7ce:	e7e7      	b.n	800f7a0 <__sflush_r+0xd4>
 800f7d0:	dfbffffe 	.word	0xdfbffffe

0800f7d4 <_fflush_r>:
 800f7d4:	b538      	push	{r3, r4, r5, lr}
 800f7d6:	690b      	ldr	r3, [r1, #16]
 800f7d8:	4605      	mov	r5, r0
 800f7da:	460c      	mov	r4, r1
 800f7dc:	b913      	cbnz	r3, 800f7e4 <_fflush_r+0x10>
 800f7de:	2500      	movs	r5, #0
 800f7e0:	4628      	mov	r0, r5
 800f7e2:	bd38      	pop	{r3, r4, r5, pc}
 800f7e4:	b118      	cbz	r0, 800f7ee <_fflush_r+0x1a>
 800f7e6:	6a03      	ldr	r3, [r0, #32]
 800f7e8:	b90b      	cbnz	r3, 800f7ee <_fflush_r+0x1a>
 800f7ea:	f7fc ff4f 	bl	800c68c <__sinit>
 800f7ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d0f3      	beq.n	800f7de <_fflush_r+0xa>
 800f7f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f7f8:	07d0      	lsls	r0, r2, #31
 800f7fa:	d404      	bmi.n	800f806 <_fflush_r+0x32>
 800f7fc:	0599      	lsls	r1, r3, #22
 800f7fe:	d402      	bmi.n	800f806 <_fflush_r+0x32>
 800f800:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f802:	f7fd f9bc 	bl	800cb7e <__retarget_lock_acquire_recursive>
 800f806:	4628      	mov	r0, r5
 800f808:	4621      	mov	r1, r4
 800f80a:	f7ff ff5f 	bl	800f6cc <__sflush_r>
 800f80e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f810:	07da      	lsls	r2, r3, #31
 800f812:	4605      	mov	r5, r0
 800f814:	d4e4      	bmi.n	800f7e0 <_fflush_r+0xc>
 800f816:	89a3      	ldrh	r3, [r4, #12]
 800f818:	059b      	lsls	r3, r3, #22
 800f81a:	d4e1      	bmi.n	800f7e0 <_fflush_r+0xc>
 800f81c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f81e:	f7fd f9af 	bl	800cb80 <__retarget_lock_release_recursive>
 800f822:	e7dd      	b.n	800f7e0 <_fflush_r+0xc>

0800f824 <__swhatbuf_r>:
 800f824:	b570      	push	{r4, r5, r6, lr}
 800f826:	460c      	mov	r4, r1
 800f828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f82c:	2900      	cmp	r1, #0
 800f82e:	b096      	sub	sp, #88	@ 0x58
 800f830:	4615      	mov	r5, r2
 800f832:	461e      	mov	r6, r3
 800f834:	da0d      	bge.n	800f852 <__swhatbuf_r+0x2e>
 800f836:	89a3      	ldrh	r3, [r4, #12]
 800f838:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f83c:	f04f 0100 	mov.w	r1, #0
 800f840:	bf14      	ite	ne
 800f842:	2340      	movne	r3, #64	@ 0x40
 800f844:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f848:	2000      	movs	r0, #0
 800f84a:	6031      	str	r1, [r6, #0]
 800f84c:	602b      	str	r3, [r5, #0]
 800f84e:	b016      	add	sp, #88	@ 0x58
 800f850:	bd70      	pop	{r4, r5, r6, pc}
 800f852:	466a      	mov	r2, sp
 800f854:	f000 f8d6 	bl	800fa04 <_fstat_r>
 800f858:	2800      	cmp	r0, #0
 800f85a:	dbec      	blt.n	800f836 <__swhatbuf_r+0x12>
 800f85c:	9901      	ldr	r1, [sp, #4]
 800f85e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f862:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f866:	4259      	negs	r1, r3
 800f868:	4159      	adcs	r1, r3
 800f86a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f86e:	e7eb      	b.n	800f848 <__swhatbuf_r+0x24>

0800f870 <__smakebuf_r>:
 800f870:	898b      	ldrh	r3, [r1, #12]
 800f872:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f874:	079d      	lsls	r5, r3, #30
 800f876:	4606      	mov	r6, r0
 800f878:	460c      	mov	r4, r1
 800f87a:	d507      	bpl.n	800f88c <__smakebuf_r+0x1c>
 800f87c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f880:	6023      	str	r3, [r4, #0]
 800f882:	6123      	str	r3, [r4, #16]
 800f884:	2301      	movs	r3, #1
 800f886:	6163      	str	r3, [r4, #20]
 800f888:	b003      	add	sp, #12
 800f88a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f88c:	ab01      	add	r3, sp, #4
 800f88e:	466a      	mov	r2, sp
 800f890:	f7ff ffc8 	bl	800f824 <__swhatbuf_r>
 800f894:	9f00      	ldr	r7, [sp, #0]
 800f896:	4605      	mov	r5, r0
 800f898:	4639      	mov	r1, r7
 800f89a:	4630      	mov	r0, r6
 800f89c:	f7fe fb8a 	bl	800dfb4 <_malloc_r>
 800f8a0:	b948      	cbnz	r0, 800f8b6 <__smakebuf_r+0x46>
 800f8a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8a6:	059a      	lsls	r2, r3, #22
 800f8a8:	d4ee      	bmi.n	800f888 <__smakebuf_r+0x18>
 800f8aa:	f023 0303 	bic.w	r3, r3, #3
 800f8ae:	f043 0302 	orr.w	r3, r3, #2
 800f8b2:	81a3      	strh	r3, [r4, #12]
 800f8b4:	e7e2      	b.n	800f87c <__smakebuf_r+0xc>
 800f8b6:	89a3      	ldrh	r3, [r4, #12]
 800f8b8:	6020      	str	r0, [r4, #0]
 800f8ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f8be:	81a3      	strh	r3, [r4, #12]
 800f8c0:	9b01      	ldr	r3, [sp, #4]
 800f8c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f8c6:	b15b      	cbz	r3, 800f8e0 <__smakebuf_r+0x70>
 800f8c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f8cc:	4630      	mov	r0, r6
 800f8ce:	f000 f8ab 	bl	800fa28 <_isatty_r>
 800f8d2:	b128      	cbz	r0, 800f8e0 <__smakebuf_r+0x70>
 800f8d4:	89a3      	ldrh	r3, [r4, #12]
 800f8d6:	f023 0303 	bic.w	r3, r3, #3
 800f8da:	f043 0301 	orr.w	r3, r3, #1
 800f8de:	81a3      	strh	r3, [r4, #12]
 800f8e0:	89a3      	ldrh	r3, [r4, #12]
 800f8e2:	431d      	orrs	r5, r3
 800f8e4:	81a5      	strh	r5, [r4, #12]
 800f8e6:	e7cf      	b.n	800f888 <__smakebuf_r+0x18>

0800f8e8 <__sccl>:
 800f8e8:	b570      	push	{r4, r5, r6, lr}
 800f8ea:	780b      	ldrb	r3, [r1, #0]
 800f8ec:	4604      	mov	r4, r0
 800f8ee:	2b5e      	cmp	r3, #94	@ 0x5e
 800f8f0:	bf0b      	itete	eq
 800f8f2:	784b      	ldrbeq	r3, [r1, #1]
 800f8f4:	1c4a      	addne	r2, r1, #1
 800f8f6:	1c8a      	addeq	r2, r1, #2
 800f8f8:	2100      	movne	r1, #0
 800f8fa:	bf08      	it	eq
 800f8fc:	2101      	moveq	r1, #1
 800f8fe:	3801      	subs	r0, #1
 800f900:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800f904:	f800 1f01 	strb.w	r1, [r0, #1]!
 800f908:	42a8      	cmp	r0, r5
 800f90a:	d1fb      	bne.n	800f904 <__sccl+0x1c>
 800f90c:	b90b      	cbnz	r3, 800f912 <__sccl+0x2a>
 800f90e:	1e50      	subs	r0, r2, #1
 800f910:	bd70      	pop	{r4, r5, r6, pc}
 800f912:	f081 0101 	eor.w	r1, r1, #1
 800f916:	54e1      	strb	r1, [r4, r3]
 800f918:	4610      	mov	r0, r2
 800f91a:	4602      	mov	r2, r0
 800f91c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f920:	2d2d      	cmp	r5, #45	@ 0x2d
 800f922:	d005      	beq.n	800f930 <__sccl+0x48>
 800f924:	2d5d      	cmp	r5, #93	@ 0x5d
 800f926:	d016      	beq.n	800f956 <__sccl+0x6e>
 800f928:	2d00      	cmp	r5, #0
 800f92a:	d0f1      	beq.n	800f910 <__sccl+0x28>
 800f92c:	462b      	mov	r3, r5
 800f92e:	e7f2      	b.n	800f916 <__sccl+0x2e>
 800f930:	7846      	ldrb	r6, [r0, #1]
 800f932:	2e5d      	cmp	r6, #93	@ 0x5d
 800f934:	d0fa      	beq.n	800f92c <__sccl+0x44>
 800f936:	42b3      	cmp	r3, r6
 800f938:	dcf8      	bgt.n	800f92c <__sccl+0x44>
 800f93a:	3002      	adds	r0, #2
 800f93c:	461a      	mov	r2, r3
 800f93e:	3201      	adds	r2, #1
 800f940:	4296      	cmp	r6, r2
 800f942:	54a1      	strb	r1, [r4, r2]
 800f944:	dcfb      	bgt.n	800f93e <__sccl+0x56>
 800f946:	1af2      	subs	r2, r6, r3
 800f948:	3a01      	subs	r2, #1
 800f94a:	1c5d      	adds	r5, r3, #1
 800f94c:	42b3      	cmp	r3, r6
 800f94e:	bfa8      	it	ge
 800f950:	2200      	movge	r2, #0
 800f952:	18ab      	adds	r3, r5, r2
 800f954:	e7e1      	b.n	800f91a <__sccl+0x32>
 800f956:	4610      	mov	r0, r2
 800f958:	e7da      	b.n	800f910 <__sccl+0x28>

0800f95a <__submore>:
 800f95a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f95e:	460c      	mov	r4, r1
 800f960:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800f962:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f966:	4299      	cmp	r1, r3
 800f968:	d11d      	bne.n	800f9a6 <__submore+0x4c>
 800f96a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800f96e:	f7fe fb21 	bl	800dfb4 <_malloc_r>
 800f972:	b918      	cbnz	r0, 800f97c <__submore+0x22>
 800f974:	f04f 30ff 	mov.w	r0, #4294967295
 800f978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f97c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f980:	63a3      	str	r3, [r4, #56]	@ 0x38
 800f982:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800f986:	6360      	str	r0, [r4, #52]	@ 0x34
 800f988:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800f98c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800f990:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800f994:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f998:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800f99c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800f9a0:	6020      	str	r0, [r4, #0]
 800f9a2:	2000      	movs	r0, #0
 800f9a4:	e7e8      	b.n	800f978 <__submore+0x1e>
 800f9a6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800f9a8:	0077      	lsls	r7, r6, #1
 800f9aa:	463a      	mov	r2, r7
 800f9ac:	f000 f88e 	bl	800facc <_realloc_r>
 800f9b0:	4605      	mov	r5, r0
 800f9b2:	2800      	cmp	r0, #0
 800f9b4:	d0de      	beq.n	800f974 <__submore+0x1a>
 800f9b6:	eb00 0806 	add.w	r8, r0, r6
 800f9ba:	4601      	mov	r1, r0
 800f9bc:	4632      	mov	r2, r6
 800f9be:	4640      	mov	r0, r8
 800f9c0:	f7fd f8df 	bl	800cb82 <memcpy>
 800f9c4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800f9c8:	f8c4 8000 	str.w	r8, [r4]
 800f9cc:	e7e9      	b.n	800f9a2 <__submore+0x48>

0800f9ce <memmove>:
 800f9ce:	4288      	cmp	r0, r1
 800f9d0:	b510      	push	{r4, lr}
 800f9d2:	eb01 0402 	add.w	r4, r1, r2
 800f9d6:	d902      	bls.n	800f9de <memmove+0x10>
 800f9d8:	4284      	cmp	r4, r0
 800f9da:	4623      	mov	r3, r4
 800f9dc:	d807      	bhi.n	800f9ee <memmove+0x20>
 800f9de:	1e43      	subs	r3, r0, #1
 800f9e0:	42a1      	cmp	r1, r4
 800f9e2:	d008      	beq.n	800f9f6 <memmove+0x28>
 800f9e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f9e8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f9ec:	e7f8      	b.n	800f9e0 <memmove+0x12>
 800f9ee:	4402      	add	r2, r0
 800f9f0:	4601      	mov	r1, r0
 800f9f2:	428a      	cmp	r2, r1
 800f9f4:	d100      	bne.n	800f9f8 <memmove+0x2a>
 800f9f6:	bd10      	pop	{r4, pc}
 800f9f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f9fc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fa00:	e7f7      	b.n	800f9f2 <memmove+0x24>
	...

0800fa04 <_fstat_r>:
 800fa04:	b538      	push	{r3, r4, r5, lr}
 800fa06:	4d07      	ldr	r5, [pc, #28]	@ (800fa24 <_fstat_r+0x20>)
 800fa08:	2300      	movs	r3, #0
 800fa0a:	4604      	mov	r4, r0
 800fa0c:	4608      	mov	r0, r1
 800fa0e:	4611      	mov	r1, r2
 800fa10:	602b      	str	r3, [r5, #0]
 800fa12:	f7f4 f8fb 	bl	8003c0c <_fstat>
 800fa16:	1c43      	adds	r3, r0, #1
 800fa18:	d102      	bne.n	800fa20 <_fstat_r+0x1c>
 800fa1a:	682b      	ldr	r3, [r5, #0]
 800fa1c:	b103      	cbz	r3, 800fa20 <_fstat_r+0x1c>
 800fa1e:	6023      	str	r3, [r4, #0]
 800fa20:	bd38      	pop	{r3, r4, r5, pc}
 800fa22:	bf00      	nop
 800fa24:	20000b80 	.word	0x20000b80

0800fa28 <_isatty_r>:
 800fa28:	b538      	push	{r3, r4, r5, lr}
 800fa2a:	4d06      	ldr	r5, [pc, #24]	@ (800fa44 <_isatty_r+0x1c>)
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	4604      	mov	r4, r0
 800fa30:	4608      	mov	r0, r1
 800fa32:	602b      	str	r3, [r5, #0]
 800fa34:	f7f4 f8fa 	bl	8003c2c <_isatty>
 800fa38:	1c43      	adds	r3, r0, #1
 800fa3a:	d102      	bne.n	800fa42 <_isatty_r+0x1a>
 800fa3c:	682b      	ldr	r3, [r5, #0]
 800fa3e:	b103      	cbz	r3, 800fa42 <_isatty_r+0x1a>
 800fa40:	6023      	str	r3, [r4, #0]
 800fa42:	bd38      	pop	{r3, r4, r5, pc}
 800fa44:	20000b80 	.word	0x20000b80

0800fa48 <_sbrk_r>:
 800fa48:	b538      	push	{r3, r4, r5, lr}
 800fa4a:	4d06      	ldr	r5, [pc, #24]	@ (800fa64 <_sbrk_r+0x1c>)
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	4604      	mov	r4, r0
 800fa50:	4608      	mov	r0, r1
 800fa52:	602b      	str	r3, [r5, #0]
 800fa54:	f7f4 f902 	bl	8003c5c <_sbrk>
 800fa58:	1c43      	adds	r3, r0, #1
 800fa5a:	d102      	bne.n	800fa62 <_sbrk_r+0x1a>
 800fa5c:	682b      	ldr	r3, [r5, #0]
 800fa5e:	b103      	cbz	r3, 800fa62 <_sbrk_r+0x1a>
 800fa60:	6023      	str	r3, [r4, #0]
 800fa62:	bd38      	pop	{r3, r4, r5, pc}
 800fa64:	20000b80 	.word	0x20000b80

0800fa68 <__assert_func>:
 800fa68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fa6a:	4614      	mov	r4, r2
 800fa6c:	461a      	mov	r2, r3
 800fa6e:	4b09      	ldr	r3, [pc, #36]	@ (800fa94 <__assert_func+0x2c>)
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	4605      	mov	r5, r0
 800fa74:	68d8      	ldr	r0, [r3, #12]
 800fa76:	b954      	cbnz	r4, 800fa8e <__assert_func+0x26>
 800fa78:	4b07      	ldr	r3, [pc, #28]	@ (800fa98 <__assert_func+0x30>)
 800fa7a:	461c      	mov	r4, r3
 800fa7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fa80:	9100      	str	r1, [sp, #0]
 800fa82:	462b      	mov	r3, r5
 800fa84:	4905      	ldr	r1, [pc, #20]	@ (800fa9c <__assert_func+0x34>)
 800fa86:	f000 f8bf 	bl	800fc08 <fiprintf>
 800fa8a:	f000 f8cf 	bl	800fc2c <abort>
 800fa8e:	4b04      	ldr	r3, [pc, #16]	@ (800faa0 <__assert_func+0x38>)
 800fa90:	e7f4      	b.n	800fa7c <__assert_func+0x14>
 800fa92:	bf00      	nop
 800fa94:	20000194 	.word	0x20000194
 800fa98:	08011328 	.word	0x08011328
 800fa9c:	080112fa 	.word	0x080112fa
 800faa0:	080112ed 	.word	0x080112ed

0800faa4 <_calloc_r>:
 800faa4:	b570      	push	{r4, r5, r6, lr}
 800faa6:	fba1 5402 	umull	r5, r4, r1, r2
 800faaa:	b93c      	cbnz	r4, 800fabc <_calloc_r+0x18>
 800faac:	4629      	mov	r1, r5
 800faae:	f7fe fa81 	bl	800dfb4 <_malloc_r>
 800fab2:	4606      	mov	r6, r0
 800fab4:	b928      	cbnz	r0, 800fac2 <_calloc_r+0x1e>
 800fab6:	2600      	movs	r6, #0
 800fab8:	4630      	mov	r0, r6
 800faba:	bd70      	pop	{r4, r5, r6, pc}
 800fabc:	220c      	movs	r2, #12
 800fabe:	6002      	str	r2, [r0, #0]
 800fac0:	e7f9      	b.n	800fab6 <_calloc_r+0x12>
 800fac2:	462a      	mov	r2, r5
 800fac4:	4621      	mov	r1, r4
 800fac6:	f7fc ffab 	bl	800ca20 <memset>
 800faca:	e7f5      	b.n	800fab8 <_calloc_r+0x14>

0800facc <_realloc_r>:
 800facc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fad0:	4680      	mov	r8, r0
 800fad2:	4615      	mov	r5, r2
 800fad4:	460c      	mov	r4, r1
 800fad6:	b921      	cbnz	r1, 800fae2 <_realloc_r+0x16>
 800fad8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fadc:	4611      	mov	r1, r2
 800fade:	f7fe ba69 	b.w	800dfb4 <_malloc_r>
 800fae2:	b92a      	cbnz	r2, 800faf0 <_realloc_r+0x24>
 800fae4:	f7fd feb8 	bl	800d858 <_free_r>
 800fae8:	2400      	movs	r4, #0
 800faea:	4620      	mov	r0, r4
 800faec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800faf0:	f000 f8a3 	bl	800fc3a <_malloc_usable_size_r>
 800faf4:	4285      	cmp	r5, r0
 800faf6:	4606      	mov	r6, r0
 800faf8:	d802      	bhi.n	800fb00 <_realloc_r+0x34>
 800fafa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fafe:	d8f4      	bhi.n	800faea <_realloc_r+0x1e>
 800fb00:	4629      	mov	r1, r5
 800fb02:	4640      	mov	r0, r8
 800fb04:	f7fe fa56 	bl	800dfb4 <_malloc_r>
 800fb08:	4607      	mov	r7, r0
 800fb0a:	2800      	cmp	r0, #0
 800fb0c:	d0ec      	beq.n	800fae8 <_realloc_r+0x1c>
 800fb0e:	42b5      	cmp	r5, r6
 800fb10:	462a      	mov	r2, r5
 800fb12:	4621      	mov	r1, r4
 800fb14:	bf28      	it	cs
 800fb16:	4632      	movcs	r2, r6
 800fb18:	f7fd f833 	bl	800cb82 <memcpy>
 800fb1c:	4621      	mov	r1, r4
 800fb1e:	4640      	mov	r0, r8
 800fb20:	f7fd fe9a 	bl	800d858 <_free_r>
 800fb24:	463c      	mov	r4, r7
 800fb26:	e7e0      	b.n	800faea <_realloc_r+0x1e>

0800fb28 <_strtoul_l.constprop.0>:
 800fb28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb2c:	4e34      	ldr	r6, [pc, #208]	@ (800fc00 <_strtoul_l.constprop.0+0xd8>)
 800fb2e:	4686      	mov	lr, r0
 800fb30:	460d      	mov	r5, r1
 800fb32:	4628      	mov	r0, r5
 800fb34:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fb38:	5d37      	ldrb	r7, [r6, r4]
 800fb3a:	f017 0708 	ands.w	r7, r7, #8
 800fb3e:	d1f8      	bne.n	800fb32 <_strtoul_l.constprop.0+0xa>
 800fb40:	2c2d      	cmp	r4, #45	@ 0x2d
 800fb42:	d12f      	bne.n	800fba4 <_strtoul_l.constprop.0+0x7c>
 800fb44:	782c      	ldrb	r4, [r5, #0]
 800fb46:	2701      	movs	r7, #1
 800fb48:	1c85      	adds	r5, r0, #2
 800fb4a:	f033 0010 	bics.w	r0, r3, #16
 800fb4e:	d109      	bne.n	800fb64 <_strtoul_l.constprop.0+0x3c>
 800fb50:	2c30      	cmp	r4, #48	@ 0x30
 800fb52:	d12c      	bne.n	800fbae <_strtoul_l.constprop.0+0x86>
 800fb54:	7828      	ldrb	r0, [r5, #0]
 800fb56:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800fb5a:	2858      	cmp	r0, #88	@ 0x58
 800fb5c:	d127      	bne.n	800fbae <_strtoul_l.constprop.0+0x86>
 800fb5e:	786c      	ldrb	r4, [r5, #1]
 800fb60:	2310      	movs	r3, #16
 800fb62:	3502      	adds	r5, #2
 800fb64:	f04f 38ff 	mov.w	r8, #4294967295
 800fb68:	2600      	movs	r6, #0
 800fb6a:	fbb8 f8f3 	udiv	r8, r8, r3
 800fb6e:	fb03 f908 	mul.w	r9, r3, r8
 800fb72:	ea6f 0909 	mvn.w	r9, r9
 800fb76:	4630      	mov	r0, r6
 800fb78:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800fb7c:	f1bc 0f09 	cmp.w	ip, #9
 800fb80:	d81c      	bhi.n	800fbbc <_strtoul_l.constprop.0+0x94>
 800fb82:	4664      	mov	r4, ip
 800fb84:	42a3      	cmp	r3, r4
 800fb86:	dd2a      	ble.n	800fbde <_strtoul_l.constprop.0+0xb6>
 800fb88:	f1b6 3fff 	cmp.w	r6, #4294967295
 800fb8c:	d007      	beq.n	800fb9e <_strtoul_l.constprop.0+0x76>
 800fb8e:	4580      	cmp	r8, r0
 800fb90:	d322      	bcc.n	800fbd8 <_strtoul_l.constprop.0+0xb0>
 800fb92:	d101      	bne.n	800fb98 <_strtoul_l.constprop.0+0x70>
 800fb94:	45a1      	cmp	r9, r4
 800fb96:	db1f      	blt.n	800fbd8 <_strtoul_l.constprop.0+0xb0>
 800fb98:	fb00 4003 	mla	r0, r0, r3, r4
 800fb9c:	2601      	movs	r6, #1
 800fb9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fba2:	e7e9      	b.n	800fb78 <_strtoul_l.constprop.0+0x50>
 800fba4:	2c2b      	cmp	r4, #43	@ 0x2b
 800fba6:	bf04      	itt	eq
 800fba8:	782c      	ldrbeq	r4, [r5, #0]
 800fbaa:	1c85      	addeq	r5, r0, #2
 800fbac:	e7cd      	b.n	800fb4a <_strtoul_l.constprop.0+0x22>
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d1d8      	bne.n	800fb64 <_strtoul_l.constprop.0+0x3c>
 800fbb2:	2c30      	cmp	r4, #48	@ 0x30
 800fbb4:	bf0c      	ite	eq
 800fbb6:	2308      	moveq	r3, #8
 800fbb8:	230a      	movne	r3, #10
 800fbba:	e7d3      	b.n	800fb64 <_strtoul_l.constprop.0+0x3c>
 800fbbc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800fbc0:	f1bc 0f19 	cmp.w	ip, #25
 800fbc4:	d801      	bhi.n	800fbca <_strtoul_l.constprop.0+0xa2>
 800fbc6:	3c37      	subs	r4, #55	@ 0x37
 800fbc8:	e7dc      	b.n	800fb84 <_strtoul_l.constprop.0+0x5c>
 800fbca:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800fbce:	f1bc 0f19 	cmp.w	ip, #25
 800fbd2:	d804      	bhi.n	800fbde <_strtoul_l.constprop.0+0xb6>
 800fbd4:	3c57      	subs	r4, #87	@ 0x57
 800fbd6:	e7d5      	b.n	800fb84 <_strtoul_l.constprop.0+0x5c>
 800fbd8:	f04f 36ff 	mov.w	r6, #4294967295
 800fbdc:	e7df      	b.n	800fb9e <_strtoul_l.constprop.0+0x76>
 800fbde:	1c73      	adds	r3, r6, #1
 800fbe0:	d106      	bne.n	800fbf0 <_strtoul_l.constprop.0+0xc8>
 800fbe2:	2322      	movs	r3, #34	@ 0x22
 800fbe4:	f8ce 3000 	str.w	r3, [lr]
 800fbe8:	4630      	mov	r0, r6
 800fbea:	b932      	cbnz	r2, 800fbfa <_strtoul_l.constprop.0+0xd2>
 800fbec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbf0:	b107      	cbz	r7, 800fbf4 <_strtoul_l.constprop.0+0xcc>
 800fbf2:	4240      	negs	r0, r0
 800fbf4:	2a00      	cmp	r2, #0
 800fbf6:	d0f9      	beq.n	800fbec <_strtoul_l.constprop.0+0xc4>
 800fbf8:	b106      	cbz	r6, 800fbfc <_strtoul_l.constprop.0+0xd4>
 800fbfa:	1e69      	subs	r1, r5, #1
 800fbfc:	6011      	str	r1, [r2, #0]
 800fbfe:	e7f5      	b.n	800fbec <_strtoul_l.constprop.0+0xc4>
 800fc00:	080111c1 	.word	0x080111c1

0800fc04 <_strtoul_r>:
 800fc04:	f7ff bf90 	b.w	800fb28 <_strtoul_l.constprop.0>

0800fc08 <fiprintf>:
 800fc08:	b40e      	push	{r1, r2, r3}
 800fc0a:	b503      	push	{r0, r1, lr}
 800fc0c:	4601      	mov	r1, r0
 800fc0e:	ab03      	add	r3, sp, #12
 800fc10:	4805      	ldr	r0, [pc, #20]	@ (800fc28 <fiprintf+0x20>)
 800fc12:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc16:	6800      	ldr	r0, [r0, #0]
 800fc18:	9301      	str	r3, [sp, #4]
 800fc1a:	f7ff faf1 	bl	800f200 <_vfiprintf_r>
 800fc1e:	b002      	add	sp, #8
 800fc20:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc24:	b003      	add	sp, #12
 800fc26:	4770      	bx	lr
 800fc28:	20000194 	.word	0x20000194

0800fc2c <abort>:
 800fc2c:	b508      	push	{r3, lr}
 800fc2e:	2006      	movs	r0, #6
 800fc30:	f000 f834 	bl	800fc9c <raise>
 800fc34:	2001      	movs	r0, #1
 800fc36:	f7f3 ff99 	bl	8003b6c <_exit>

0800fc3a <_malloc_usable_size_r>:
 800fc3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc3e:	1f18      	subs	r0, r3, #4
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	bfbc      	itt	lt
 800fc44:	580b      	ldrlt	r3, [r1, r0]
 800fc46:	18c0      	addlt	r0, r0, r3
 800fc48:	4770      	bx	lr

0800fc4a <_raise_r>:
 800fc4a:	291f      	cmp	r1, #31
 800fc4c:	b538      	push	{r3, r4, r5, lr}
 800fc4e:	4605      	mov	r5, r0
 800fc50:	460c      	mov	r4, r1
 800fc52:	d904      	bls.n	800fc5e <_raise_r+0x14>
 800fc54:	2316      	movs	r3, #22
 800fc56:	6003      	str	r3, [r0, #0]
 800fc58:	f04f 30ff 	mov.w	r0, #4294967295
 800fc5c:	bd38      	pop	{r3, r4, r5, pc}
 800fc5e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fc60:	b112      	cbz	r2, 800fc68 <_raise_r+0x1e>
 800fc62:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fc66:	b94b      	cbnz	r3, 800fc7c <_raise_r+0x32>
 800fc68:	4628      	mov	r0, r5
 800fc6a:	f000 f831 	bl	800fcd0 <_getpid_r>
 800fc6e:	4622      	mov	r2, r4
 800fc70:	4601      	mov	r1, r0
 800fc72:	4628      	mov	r0, r5
 800fc74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc78:	f000 b818 	b.w	800fcac <_kill_r>
 800fc7c:	2b01      	cmp	r3, #1
 800fc7e:	d00a      	beq.n	800fc96 <_raise_r+0x4c>
 800fc80:	1c59      	adds	r1, r3, #1
 800fc82:	d103      	bne.n	800fc8c <_raise_r+0x42>
 800fc84:	2316      	movs	r3, #22
 800fc86:	6003      	str	r3, [r0, #0]
 800fc88:	2001      	movs	r0, #1
 800fc8a:	e7e7      	b.n	800fc5c <_raise_r+0x12>
 800fc8c:	2100      	movs	r1, #0
 800fc8e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fc92:	4620      	mov	r0, r4
 800fc94:	4798      	blx	r3
 800fc96:	2000      	movs	r0, #0
 800fc98:	e7e0      	b.n	800fc5c <_raise_r+0x12>
	...

0800fc9c <raise>:
 800fc9c:	4b02      	ldr	r3, [pc, #8]	@ (800fca8 <raise+0xc>)
 800fc9e:	4601      	mov	r1, r0
 800fca0:	6818      	ldr	r0, [r3, #0]
 800fca2:	f7ff bfd2 	b.w	800fc4a <_raise_r>
 800fca6:	bf00      	nop
 800fca8:	20000194 	.word	0x20000194

0800fcac <_kill_r>:
 800fcac:	b538      	push	{r3, r4, r5, lr}
 800fcae:	4d07      	ldr	r5, [pc, #28]	@ (800fccc <_kill_r+0x20>)
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	4604      	mov	r4, r0
 800fcb4:	4608      	mov	r0, r1
 800fcb6:	4611      	mov	r1, r2
 800fcb8:	602b      	str	r3, [r5, #0]
 800fcba:	f7f3 ff47 	bl	8003b4c <_kill>
 800fcbe:	1c43      	adds	r3, r0, #1
 800fcc0:	d102      	bne.n	800fcc8 <_kill_r+0x1c>
 800fcc2:	682b      	ldr	r3, [r5, #0]
 800fcc4:	b103      	cbz	r3, 800fcc8 <_kill_r+0x1c>
 800fcc6:	6023      	str	r3, [r4, #0]
 800fcc8:	bd38      	pop	{r3, r4, r5, pc}
 800fcca:	bf00      	nop
 800fccc:	20000b80 	.word	0x20000b80

0800fcd0 <_getpid_r>:
 800fcd0:	f7f3 bf34 	b.w	8003b3c <_getpid>

0800fcd4 <pow>:
 800fcd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcd6:	ed2d 8b02 	vpush	{d8}
 800fcda:	eeb0 8a40 	vmov.f32	s16, s0
 800fcde:	eef0 8a60 	vmov.f32	s17, s1
 800fce2:	ec55 4b11 	vmov	r4, r5, d1
 800fce6:	f000 f873 	bl	800fdd0 <__ieee754_pow>
 800fcea:	4622      	mov	r2, r4
 800fcec:	462b      	mov	r3, r5
 800fcee:	4620      	mov	r0, r4
 800fcf0:	4629      	mov	r1, r5
 800fcf2:	ec57 6b10 	vmov	r6, r7, d0
 800fcf6:	f7f0 ff21 	bl	8000b3c <__aeabi_dcmpun>
 800fcfa:	2800      	cmp	r0, #0
 800fcfc:	d13b      	bne.n	800fd76 <pow+0xa2>
 800fcfe:	ec51 0b18 	vmov	r0, r1, d8
 800fd02:	2200      	movs	r2, #0
 800fd04:	2300      	movs	r3, #0
 800fd06:	f7f0 fee7 	bl	8000ad8 <__aeabi_dcmpeq>
 800fd0a:	b1b8      	cbz	r0, 800fd3c <pow+0x68>
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	2300      	movs	r3, #0
 800fd10:	4620      	mov	r0, r4
 800fd12:	4629      	mov	r1, r5
 800fd14:	f7f0 fee0 	bl	8000ad8 <__aeabi_dcmpeq>
 800fd18:	2800      	cmp	r0, #0
 800fd1a:	d146      	bne.n	800fdaa <pow+0xd6>
 800fd1c:	ec45 4b10 	vmov	d0, r4, r5
 800fd20:	f000 f848 	bl	800fdb4 <finite>
 800fd24:	b338      	cbz	r0, 800fd76 <pow+0xa2>
 800fd26:	2200      	movs	r2, #0
 800fd28:	2300      	movs	r3, #0
 800fd2a:	4620      	mov	r0, r4
 800fd2c:	4629      	mov	r1, r5
 800fd2e:	f7f0 fedd 	bl	8000aec <__aeabi_dcmplt>
 800fd32:	b300      	cbz	r0, 800fd76 <pow+0xa2>
 800fd34:	f7fc fef8 	bl	800cb28 <__errno>
 800fd38:	2322      	movs	r3, #34	@ 0x22
 800fd3a:	e01b      	b.n	800fd74 <pow+0xa0>
 800fd3c:	ec47 6b10 	vmov	d0, r6, r7
 800fd40:	f000 f838 	bl	800fdb4 <finite>
 800fd44:	b9e0      	cbnz	r0, 800fd80 <pow+0xac>
 800fd46:	eeb0 0a48 	vmov.f32	s0, s16
 800fd4a:	eef0 0a68 	vmov.f32	s1, s17
 800fd4e:	f000 f831 	bl	800fdb4 <finite>
 800fd52:	b1a8      	cbz	r0, 800fd80 <pow+0xac>
 800fd54:	ec45 4b10 	vmov	d0, r4, r5
 800fd58:	f000 f82c 	bl	800fdb4 <finite>
 800fd5c:	b180      	cbz	r0, 800fd80 <pow+0xac>
 800fd5e:	4632      	mov	r2, r6
 800fd60:	463b      	mov	r3, r7
 800fd62:	4630      	mov	r0, r6
 800fd64:	4639      	mov	r1, r7
 800fd66:	f7f0 fee9 	bl	8000b3c <__aeabi_dcmpun>
 800fd6a:	2800      	cmp	r0, #0
 800fd6c:	d0e2      	beq.n	800fd34 <pow+0x60>
 800fd6e:	f7fc fedb 	bl	800cb28 <__errno>
 800fd72:	2321      	movs	r3, #33	@ 0x21
 800fd74:	6003      	str	r3, [r0, #0]
 800fd76:	ecbd 8b02 	vpop	{d8}
 800fd7a:	ec47 6b10 	vmov	d0, r6, r7
 800fd7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd80:	2200      	movs	r2, #0
 800fd82:	2300      	movs	r3, #0
 800fd84:	4630      	mov	r0, r6
 800fd86:	4639      	mov	r1, r7
 800fd88:	f7f0 fea6 	bl	8000ad8 <__aeabi_dcmpeq>
 800fd8c:	2800      	cmp	r0, #0
 800fd8e:	d0f2      	beq.n	800fd76 <pow+0xa2>
 800fd90:	eeb0 0a48 	vmov.f32	s0, s16
 800fd94:	eef0 0a68 	vmov.f32	s1, s17
 800fd98:	f000 f80c 	bl	800fdb4 <finite>
 800fd9c:	2800      	cmp	r0, #0
 800fd9e:	d0ea      	beq.n	800fd76 <pow+0xa2>
 800fda0:	ec45 4b10 	vmov	d0, r4, r5
 800fda4:	f000 f806 	bl	800fdb4 <finite>
 800fda8:	e7c3      	b.n	800fd32 <pow+0x5e>
 800fdaa:	4f01      	ldr	r7, [pc, #4]	@ (800fdb0 <pow+0xdc>)
 800fdac:	2600      	movs	r6, #0
 800fdae:	e7e2      	b.n	800fd76 <pow+0xa2>
 800fdb0:	3ff00000 	.word	0x3ff00000

0800fdb4 <finite>:
 800fdb4:	b082      	sub	sp, #8
 800fdb6:	ed8d 0b00 	vstr	d0, [sp]
 800fdba:	9801      	ldr	r0, [sp, #4]
 800fdbc:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800fdc0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800fdc4:	0fc0      	lsrs	r0, r0, #31
 800fdc6:	b002      	add	sp, #8
 800fdc8:	4770      	bx	lr
 800fdca:	0000      	movs	r0, r0
 800fdcc:	0000      	movs	r0, r0
	...

0800fdd0 <__ieee754_pow>:
 800fdd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdd4:	b091      	sub	sp, #68	@ 0x44
 800fdd6:	ed8d 1b00 	vstr	d1, [sp]
 800fdda:	e9dd 1900 	ldrd	r1, r9, [sp]
 800fdde:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800fde2:	ea5a 0001 	orrs.w	r0, sl, r1
 800fde6:	ec57 6b10 	vmov	r6, r7, d0
 800fdea:	d113      	bne.n	800fe14 <__ieee754_pow+0x44>
 800fdec:	19b3      	adds	r3, r6, r6
 800fdee:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800fdf2:	4152      	adcs	r2, r2
 800fdf4:	4298      	cmp	r0, r3
 800fdf6:	4b98      	ldr	r3, [pc, #608]	@ (8010058 <__ieee754_pow+0x288>)
 800fdf8:	4193      	sbcs	r3, r2
 800fdfa:	f080 84ea 	bcs.w	80107d2 <__ieee754_pow+0xa02>
 800fdfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe02:	4630      	mov	r0, r6
 800fe04:	4639      	mov	r1, r7
 800fe06:	f7f0 fa49 	bl	800029c <__adddf3>
 800fe0a:	ec41 0b10 	vmov	d0, r0, r1
 800fe0e:	b011      	add	sp, #68	@ 0x44
 800fe10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe14:	4a91      	ldr	r2, [pc, #580]	@ (801005c <__ieee754_pow+0x28c>)
 800fe16:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800fe1a:	4590      	cmp	r8, r2
 800fe1c:	463d      	mov	r5, r7
 800fe1e:	4633      	mov	r3, r6
 800fe20:	d806      	bhi.n	800fe30 <__ieee754_pow+0x60>
 800fe22:	d101      	bne.n	800fe28 <__ieee754_pow+0x58>
 800fe24:	2e00      	cmp	r6, #0
 800fe26:	d1ea      	bne.n	800fdfe <__ieee754_pow+0x2e>
 800fe28:	4592      	cmp	sl, r2
 800fe2a:	d801      	bhi.n	800fe30 <__ieee754_pow+0x60>
 800fe2c:	d10e      	bne.n	800fe4c <__ieee754_pow+0x7c>
 800fe2e:	b169      	cbz	r1, 800fe4c <__ieee754_pow+0x7c>
 800fe30:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800fe34:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800fe38:	431d      	orrs	r5, r3
 800fe3a:	d1e0      	bne.n	800fdfe <__ieee754_pow+0x2e>
 800fe3c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fe40:	18db      	adds	r3, r3, r3
 800fe42:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800fe46:	4152      	adcs	r2, r2
 800fe48:	429d      	cmp	r5, r3
 800fe4a:	e7d4      	b.n	800fdf6 <__ieee754_pow+0x26>
 800fe4c:	2d00      	cmp	r5, #0
 800fe4e:	46c3      	mov	fp, r8
 800fe50:	da3a      	bge.n	800fec8 <__ieee754_pow+0xf8>
 800fe52:	4a83      	ldr	r2, [pc, #524]	@ (8010060 <__ieee754_pow+0x290>)
 800fe54:	4592      	cmp	sl, r2
 800fe56:	d84d      	bhi.n	800fef4 <__ieee754_pow+0x124>
 800fe58:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800fe5c:	4592      	cmp	sl, r2
 800fe5e:	f240 84c7 	bls.w	80107f0 <__ieee754_pow+0xa20>
 800fe62:	ea4f 522a 	mov.w	r2, sl, asr #20
 800fe66:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800fe6a:	2a14      	cmp	r2, #20
 800fe6c:	dd0f      	ble.n	800fe8e <__ieee754_pow+0xbe>
 800fe6e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800fe72:	fa21 f402 	lsr.w	r4, r1, r2
 800fe76:	fa04 f202 	lsl.w	r2, r4, r2
 800fe7a:	428a      	cmp	r2, r1
 800fe7c:	f040 84b8 	bne.w	80107f0 <__ieee754_pow+0xa20>
 800fe80:	f004 0401 	and.w	r4, r4, #1
 800fe84:	f1c4 0402 	rsb	r4, r4, #2
 800fe88:	2900      	cmp	r1, #0
 800fe8a:	d158      	bne.n	800ff3e <__ieee754_pow+0x16e>
 800fe8c:	e00e      	b.n	800feac <__ieee754_pow+0xdc>
 800fe8e:	2900      	cmp	r1, #0
 800fe90:	d154      	bne.n	800ff3c <__ieee754_pow+0x16c>
 800fe92:	f1c2 0214 	rsb	r2, r2, #20
 800fe96:	fa4a f402 	asr.w	r4, sl, r2
 800fe9a:	fa04 f202 	lsl.w	r2, r4, r2
 800fe9e:	4552      	cmp	r2, sl
 800fea0:	f040 84a3 	bne.w	80107ea <__ieee754_pow+0xa1a>
 800fea4:	f004 0401 	and.w	r4, r4, #1
 800fea8:	f1c4 0402 	rsb	r4, r4, #2
 800feac:	4a6d      	ldr	r2, [pc, #436]	@ (8010064 <__ieee754_pow+0x294>)
 800feae:	4592      	cmp	sl, r2
 800feb0:	d12e      	bne.n	800ff10 <__ieee754_pow+0x140>
 800feb2:	f1b9 0f00 	cmp.w	r9, #0
 800feb6:	f280 8494 	bge.w	80107e2 <__ieee754_pow+0xa12>
 800feba:	496a      	ldr	r1, [pc, #424]	@ (8010064 <__ieee754_pow+0x294>)
 800febc:	4632      	mov	r2, r6
 800febe:	463b      	mov	r3, r7
 800fec0:	2000      	movs	r0, #0
 800fec2:	f7f0 fccb 	bl	800085c <__aeabi_ddiv>
 800fec6:	e7a0      	b.n	800fe0a <__ieee754_pow+0x3a>
 800fec8:	2400      	movs	r4, #0
 800feca:	bbc1      	cbnz	r1, 800ff3e <__ieee754_pow+0x16e>
 800fecc:	4a63      	ldr	r2, [pc, #396]	@ (801005c <__ieee754_pow+0x28c>)
 800fece:	4592      	cmp	sl, r2
 800fed0:	d1ec      	bne.n	800feac <__ieee754_pow+0xdc>
 800fed2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800fed6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800feda:	431a      	orrs	r2, r3
 800fedc:	f000 8479 	beq.w	80107d2 <__ieee754_pow+0xa02>
 800fee0:	4b61      	ldr	r3, [pc, #388]	@ (8010068 <__ieee754_pow+0x298>)
 800fee2:	4598      	cmp	r8, r3
 800fee4:	d908      	bls.n	800fef8 <__ieee754_pow+0x128>
 800fee6:	f1b9 0f00 	cmp.w	r9, #0
 800feea:	f2c0 8476 	blt.w	80107da <__ieee754_pow+0xa0a>
 800feee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fef2:	e78a      	b.n	800fe0a <__ieee754_pow+0x3a>
 800fef4:	2402      	movs	r4, #2
 800fef6:	e7e8      	b.n	800feca <__ieee754_pow+0xfa>
 800fef8:	f1b9 0f00 	cmp.w	r9, #0
 800fefc:	f04f 0000 	mov.w	r0, #0
 800ff00:	f04f 0100 	mov.w	r1, #0
 800ff04:	da81      	bge.n	800fe0a <__ieee754_pow+0x3a>
 800ff06:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ff0a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800ff0e:	e77c      	b.n	800fe0a <__ieee754_pow+0x3a>
 800ff10:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800ff14:	d106      	bne.n	800ff24 <__ieee754_pow+0x154>
 800ff16:	4632      	mov	r2, r6
 800ff18:	463b      	mov	r3, r7
 800ff1a:	4630      	mov	r0, r6
 800ff1c:	4639      	mov	r1, r7
 800ff1e:	f7f0 fb73 	bl	8000608 <__aeabi_dmul>
 800ff22:	e772      	b.n	800fe0a <__ieee754_pow+0x3a>
 800ff24:	4a51      	ldr	r2, [pc, #324]	@ (801006c <__ieee754_pow+0x29c>)
 800ff26:	4591      	cmp	r9, r2
 800ff28:	d109      	bne.n	800ff3e <__ieee754_pow+0x16e>
 800ff2a:	2d00      	cmp	r5, #0
 800ff2c:	db07      	blt.n	800ff3e <__ieee754_pow+0x16e>
 800ff2e:	ec47 6b10 	vmov	d0, r6, r7
 800ff32:	b011      	add	sp, #68	@ 0x44
 800ff34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff38:	f000 bd52 	b.w	80109e0 <__ieee754_sqrt>
 800ff3c:	2400      	movs	r4, #0
 800ff3e:	ec47 6b10 	vmov	d0, r6, r7
 800ff42:	9302      	str	r3, [sp, #8]
 800ff44:	f000 fc88 	bl	8010858 <fabs>
 800ff48:	9b02      	ldr	r3, [sp, #8]
 800ff4a:	ec51 0b10 	vmov	r0, r1, d0
 800ff4e:	bb53      	cbnz	r3, 800ffa6 <__ieee754_pow+0x1d6>
 800ff50:	4b44      	ldr	r3, [pc, #272]	@ (8010064 <__ieee754_pow+0x294>)
 800ff52:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800ff56:	429a      	cmp	r2, r3
 800ff58:	d002      	beq.n	800ff60 <__ieee754_pow+0x190>
 800ff5a:	f1b8 0f00 	cmp.w	r8, #0
 800ff5e:	d122      	bne.n	800ffa6 <__ieee754_pow+0x1d6>
 800ff60:	f1b9 0f00 	cmp.w	r9, #0
 800ff64:	da05      	bge.n	800ff72 <__ieee754_pow+0x1a2>
 800ff66:	4602      	mov	r2, r0
 800ff68:	460b      	mov	r3, r1
 800ff6a:	2000      	movs	r0, #0
 800ff6c:	493d      	ldr	r1, [pc, #244]	@ (8010064 <__ieee754_pow+0x294>)
 800ff6e:	f7f0 fc75 	bl	800085c <__aeabi_ddiv>
 800ff72:	2d00      	cmp	r5, #0
 800ff74:	f6bf af49 	bge.w	800fe0a <__ieee754_pow+0x3a>
 800ff78:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800ff7c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800ff80:	ea58 0804 	orrs.w	r8, r8, r4
 800ff84:	d108      	bne.n	800ff98 <__ieee754_pow+0x1c8>
 800ff86:	4602      	mov	r2, r0
 800ff88:	460b      	mov	r3, r1
 800ff8a:	4610      	mov	r0, r2
 800ff8c:	4619      	mov	r1, r3
 800ff8e:	f7f0 f983 	bl	8000298 <__aeabi_dsub>
 800ff92:	4602      	mov	r2, r0
 800ff94:	460b      	mov	r3, r1
 800ff96:	e794      	b.n	800fec2 <__ieee754_pow+0xf2>
 800ff98:	2c01      	cmp	r4, #1
 800ff9a:	f47f af36 	bne.w	800fe0a <__ieee754_pow+0x3a>
 800ff9e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ffa2:	4619      	mov	r1, r3
 800ffa4:	e731      	b.n	800fe0a <__ieee754_pow+0x3a>
 800ffa6:	0feb      	lsrs	r3, r5, #31
 800ffa8:	3b01      	subs	r3, #1
 800ffaa:	ea53 0204 	orrs.w	r2, r3, r4
 800ffae:	d102      	bne.n	800ffb6 <__ieee754_pow+0x1e6>
 800ffb0:	4632      	mov	r2, r6
 800ffb2:	463b      	mov	r3, r7
 800ffb4:	e7e9      	b.n	800ff8a <__ieee754_pow+0x1ba>
 800ffb6:	3c01      	subs	r4, #1
 800ffb8:	431c      	orrs	r4, r3
 800ffba:	d016      	beq.n	800ffea <__ieee754_pow+0x21a>
 800ffbc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8010048 <__ieee754_pow+0x278>
 800ffc0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800ffc4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ffc8:	f240 8112 	bls.w	80101f0 <__ieee754_pow+0x420>
 800ffcc:	4b28      	ldr	r3, [pc, #160]	@ (8010070 <__ieee754_pow+0x2a0>)
 800ffce:	459a      	cmp	sl, r3
 800ffd0:	4b25      	ldr	r3, [pc, #148]	@ (8010068 <__ieee754_pow+0x298>)
 800ffd2:	d916      	bls.n	8010002 <__ieee754_pow+0x232>
 800ffd4:	4598      	cmp	r8, r3
 800ffd6:	d80b      	bhi.n	800fff0 <__ieee754_pow+0x220>
 800ffd8:	f1b9 0f00 	cmp.w	r9, #0
 800ffdc:	da0b      	bge.n	800fff6 <__ieee754_pow+0x226>
 800ffde:	2000      	movs	r0, #0
 800ffe0:	b011      	add	sp, #68	@ 0x44
 800ffe2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffe6:	f000 bcf3 	b.w	80109d0 <__math_oflow>
 800ffea:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8010050 <__ieee754_pow+0x280>
 800ffee:	e7e7      	b.n	800ffc0 <__ieee754_pow+0x1f0>
 800fff0:	f1b9 0f00 	cmp.w	r9, #0
 800fff4:	dcf3      	bgt.n	800ffde <__ieee754_pow+0x20e>
 800fff6:	2000      	movs	r0, #0
 800fff8:	b011      	add	sp, #68	@ 0x44
 800fffa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fffe:	f000 bcdf 	b.w	80109c0 <__math_uflow>
 8010002:	4598      	cmp	r8, r3
 8010004:	d20c      	bcs.n	8010020 <__ieee754_pow+0x250>
 8010006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801000a:	2200      	movs	r2, #0
 801000c:	2300      	movs	r3, #0
 801000e:	f7f0 fd6d 	bl	8000aec <__aeabi_dcmplt>
 8010012:	3800      	subs	r0, #0
 8010014:	bf18      	it	ne
 8010016:	2001      	movne	r0, #1
 8010018:	f1b9 0f00 	cmp.w	r9, #0
 801001c:	daec      	bge.n	800fff8 <__ieee754_pow+0x228>
 801001e:	e7df      	b.n	800ffe0 <__ieee754_pow+0x210>
 8010020:	4b10      	ldr	r3, [pc, #64]	@ (8010064 <__ieee754_pow+0x294>)
 8010022:	4598      	cmp	r8, r3
 8010024:	f04f 0200 	mov.w	r2, #0
 8010028:	d924      	bls.n	8010074 <__ieee754_pow+0x2a4>
 801002a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801002e:	2300      	movs	r3, #0
 8010030:	f7f0 fd5c 	bl	8000aec <__aeabi_dcmplt>
 8010034:	3800      	subs	r0, #0
 8010036:	bf18      	it	ne
 8010038:	2001      	movne	r0, #1
 801003a:	f1b9 0f00 	cmp.w	r9, #0
 801003e:	dccf      	bgt.n	800ffe0 <__ieee754_pow+0x210>
 8010040:	e7da      	b.n	800fff8 <__ieee754_pow+0x228>
 8010042:	bf00      	nop
 8010044:	f3af 8000 	nop.w
 8010048:	00000000 	.word	0x00000000
 801004c:	3ff00000 	.word	0x3ff00000
 8010050:	00000000 	.word	0x00000000
 8010054:	bff00000 	.word	0xbff00000
 8010058:	fff00000 	.word	0xfff00000
 801005c:	7ff00000 	.word	0x7ff00000
 8010060:	433fffff 	.word	0x433fffff
 8010064:	3ff00000 	.word	0x3ff00000
 8010068:	3fefffff 	.word	0x3fefffff
 801006c:	3fe00000 	.word	0x3fe00000
 8010070:	43f00000 	.word	0x43f00000
 8010074:	4b5a      	ldr	r3, [pc, #360]	@ (80101e0 <__ieee754_pow+0x410>)
 8010076:	f7f0 f90f 	bl	8000298 <__aeabi_dsub>
 801007a:	a351      	add	r3, pc, #324	@ (adr r3, 80101c0 <__ieee754_pow+0x3f0>)
 801007c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010080:	4604      	mov	r4, r0
 8010082:	460d      	mov	r5, r1
 8010084:	f7f0 fac0 	bl	8000608 <__aeabi_dmul>
 8010088:	a34f      	add	r3, pc, #316	@ (adr r3, 80101c8 <__ieee754_pow+0x3f8>)
 801008a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801008e:	4606      	mov	r6, r0
 8010090:	460f      	mov	r7, r1
 8010092:	4620      	mov	r0, r4
 8010094:	4629      	mov	r1, r5
 8010096:	f7f0 fab7 	bl	8000608 <__aeabi_dmul>
 801009a:	4b52      	ldr	r3, [pc, #328]	@ (80101e4 <__ieee754_pow+0x414>)
 801009c:	4682      	mov	sl, r0
 801009e:	468b      	mov	fp, r1
 80100a0:	2200      	movs	r2, #0
 80100a2:	4620      	mov	r0, r4
 80100a4:	4629      	mov	r1, r5
 80100a6:	f7f0 faaf 	bl	8000608 <__aeabi_dmul>
 80100aa:	4602      	mov	r2, r0
 80100ac:	460b      	mov	r3, r1
 80100ae:	a148      	add	r1, pc, #288	@ (adr r1, 80101d0 <__ieee754_pow+0x400>)
 80100b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100b4:	f7f0 f8f0 	bl	8000298 <__aeabi_dsub>
 80100b8:	4622      	mov	r2, r4
 80100ba:	462b      	mov	r3, r5
 80100bc:	f7f0 faa4 	bl	8000608 <__aeabi_dmul>
 80100c0:	4602      	mov	r2, r0
 80100c2:	460b      	mov	r3, r1
 80100c4:	2000      	movs	r0, #0
 80100c6:	4948      	ldr	r1, [pc, #288]	@ (80101e8 <__ieee754_pow+0x418>)
 80100c8:	f7f0 f8e6 	bl	8000298 <__aeabi_dsub>
 80100cc:	4622      	mov	r2, r4
 80100ce:	4680      	mov	r8, r0
 80100d0:	4689      	mov	r9, r1
 80100d2:	462b      	mov	r3, r5
 80100d4:	4620      	mov	r0, r4
 80100d6:	4629      	mov	r1, r5
 80100d8:	f7f0 fa96 	bl	8000608 <__aeabi_dmul>
 80100dc:	4602      	mov	r2, r0
 80100de:	460b      	mov	r3, r1
 80100e0:	4640      	mov	r0, r8
 80100e2:	4649      	mov	r1, r9
 80100e4:	f7f0 fa90 	bl	8000608 <__aeabi_dmul>
 80100e8:	a33b      	add	r3, pc, #236	@ (adr r3, 80101d8 <__ieee754_pow+0x408>)
 80100ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ee:	f7f0 fa8b 	bl	8000608 <__aeabi_dmul>
 80100f2:	4602      	mov	r2, r0
 80100f4:	460b      	mov	r3, r1
 80100f6:	4650      	mov	r0, sl
 80100f8:	4659      	mov	r1, fp
 80100fa:	f7f0 f8cd 	bl	8000298 <__aeabi_dsub>
 80100fe:	4602      	mov	r2, r0
 8010100:	460b      	mov	r3, r1
 8010102:	4680      	mov	r8, r0
 8010104:	4689      	mov	r9, r1
 8010106:	4630      	mov	r0, r6
 8010108:	4639      	mov	r1, r7
 801010a:	f7f0 f8c7 	bl	800029c <__adddf3>
 801010e:	2400      	movs	r4, #0
 8010110:	4632      	mov	r2, r6
 8010112:	463b      	mov	r3, r7
 8010114:	4620      	mov	r0, r4
 8010116:	460d      	mov	r5, r1
 8010118:	f7f0 f8be 	bl	8000298 <__aeabi_dsub>
 801011c:	4602      	mov	r2, r0
 801011e:	460b      	mov	r3, r1
 8010120:	4640      	mov	r0, r8
 8010122:	4649      	mov	r1, r9
 8010124:	f7f0 f8b8 	bl	8000298 <__aeabi_dsub>
 8010128:	e9dd 2300 	ldrd	r2, r3, [sp]
 801012c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010130:	2300      	movs	r3, #0
 8010132:	9304      	str	r3, [sp, #16]
 8010134:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8010138:	4606      	mov	r6, r0
 801013a:	460f      	mov	r7, r1
 801013c:	4652      	mov	r2, sl
 801013e:	465b      	mov	r3, fp
 8010140:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010144:	f7f0 f8a8 	bl	8000298 <__aeabi_dsub>
 8010148:	4622      	mov	r2, r4
 801014a:	462b      	mov	r3, r5
 801014c:	f7f0 fa5c 	bl	8000608 <__aeabi_dmul>
 8010150:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010154:	4680      	mov	r8, r0
 8010156:	4689      	mov	r9, r1
 8010158:	4630      	mov	r0, r6
 801015a:	4639      	mov	r1, r7
 801015c:	f7f0 fa54 	bl	8000608 <__aeabi_dmul>
 8010160:	4602      	mov	r2, r0
 8010162:	460b      	mov	r3, r1
 8010164:	4640      	mov	r0, r8
 8010166:	4649      	mov	r1, r9
 8010168:	f7f0 f898 	bl	800029c <__adddf3>
 801016c:	4652      	mov	r2, sl
 801016e:	465b      	mov	r3, fp
 8010170:	4606      	mov	r6, r0
 8010172:	460f      	mov	r7, r1
 8010174:	4620      	mov	r0, r4
 8010176:	4629      	mov	r1, r5
 8010178:	f7f0 fa46 	bl	8000608 <__aeabi_dmul>
 801017c:	460b      	mov	r3, r1
 801017e:	4602      	mov	r2, r0
 8010180:	4680      	mov	r8, r0
 8010182:	4689      	mov	r9, r1
 8010184:	4630      	mov	r0, r6
 8010186:	4639      	mov	r1, r7
 8010188:	f7f0 f888 	bl	800029c <__adddf3>
 801018c:	4b17      	ldr	r3, [pc, #92]	@ (80101ec <__ieee754_pow+0x41c>)
 801018e:	4299      	cmp	r1, r3
 8010190:	4604      	mov	r4, r0
 8010192:	460d      	mov	r5, r1
 8010194:	468a      	mov	sl, r1
 8010196:	468b      	mov	fp, r1
 8010198:	f340 82ef 	ble.w	801077a <__ieee754_pow+0x9aa>
 801019c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80101a0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80101a4:	4303      	orrs	r3, r0
 80101a6:	f000 81e8 	beq.w	801057a <__ieee754_pow+0x7aa>
 80101aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80101ae:	2200      	movs	r2, #0
 80101b0:	2300      	movs	r3, #0
 80101b2:	f7f0 fc9b 	bl	8000aec <__aeabi_dcmplt>
 80101b6:	3800      	subs	r0, #0
 80101b8:	bf18      	it	ne
 80101ba:	2001      	movne	r0, #1
 80101bc:	e710      	b.n	800ffe0 <__ieee754_pow+0x210>
 80101be:	bf00      	nop
 80101c0:	60000000 	.word	0x60000000
 80101c4:	3ff71547 	.word	0x3ff71547
 80101c8:	f85ddf44 	.word	0xf85ddf44
 80101cc:	3e54ae0b 	.word	0x3e54ae0b
 80101d0:	55555555 	.word	0x55555555
 80101d4:	3fd55555 	.word	0x3fd55555
 80101d8:	652b82fe 	.word	0x652b82fe
 80101dc:	3ff71547 	.word	0x3ff71547
 80101e0:	3ff00000 	.word	0x3ff00000
 80101e4:	3fd00000 	.word	0x3fd00000
 80101e8:	3fe00000 	.word	0x3fe00000
 80101ec:	408fffff 	.word	0x408fffff
 80101f0:	4bd5      	ldr	r3, [pc, #852]	@ (8010548 <__ieee754_pow+0x778>)
 80101f2:	402b      	ands	r3, r5
 80101f4:	2200      	movs	r2, #0
 80101f6:	b92b      	cbnz	r3, 8010204 <__ieee754_pow+0x434>
 80101f8:	4bd4      	ldr	r3, [pc, #848]	@ (801054c <__ieee754_pow+0x77c>)
 80101fa:	f7f0 fa05 	bl	8000608 <__aeabi_dmul>
 80101fe:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8010202:	468b      	mov	fp, r1
 8010204:	ea4f 532b 	mov.w	r3, fp, asr #20
 8010208:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801020c:	4413      	add	r3, r2
 801020e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010210:	4bcf      	ldr	r3, [pc, #828]	@ (8010550 <__ieee754_pow+0x780>)
 8010212:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8010216:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801021a:	459b      	cmp	fp, r3
 801021c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010220:	dd08      	ble.n	8010234 <__ieee754_pow+0x464>
 8010222:	4bcc      	ldr	r3, [pc, #816]	@ (8010554 <__ieee754_pow+0x784>)
 8010224:	459b      	cmp	fp, r3
 8010226:	f340 81a5 	ble.w	8010574 <__ieee754_pow+0x7a4>
 801022a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801022c:	3301      	adds	r3, #1
 801022e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010230:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8010234:	f04f 0a00 	mov.w	sl, #0
 8010238:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801023c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801023e:	4bc6      	ldr	r3, [pc, #792]	@ (8010558 <__ieee754_pow+0x788>)
 8010240:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010244:	ed93 7b00 	vldr	d7, [r3]
 8010248:	4629      	mov	r1, r5
 801024a:	ec53 2b17 	vmov	r2, r3, d7
 801024e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010252:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010256:	f7f0 f81f 	bl	8000298 <__aeabi_dsub>
 801025a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801025e:	4606      	mov	r6, r0
 8010260:	460f      	mov	r7, r1
 8010262:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010266:	f7f0 f819 	bl	800029c <__adddf3>
 801026a:	4602      	mov	r2, r0
 801026c:	460b      	mov	r3, r1
 801026e:	2000      	movs	r0, #0
 8010270:	49ba      	ldr	r1, [pc, #744]	@ (801055c <__ieee754_pow+0x78c>)
 8010272:	f7f0 faf3 	bl	800085c <__aeabi_ddiv>
 8010276:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801027a:	4602      	mov	r2, r0
 801027c:	460b      	mov	r3, r1
 801027e:	4630      	mov	r0, r6
 8010280:	4639      	mov	r1, r7
 8010282:	f7f0 f9c1 	bl	8000608 <__aeabi_dmul>
 8010286:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801028a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 801028e:	106d      	asrs	r5, r5, #1
 8010290:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8010294:	f04f 0b00 	mov.w	fp, #0
 8010298:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801029c:	4661      	mov	r1, ip
 801029e:	2200      	movs	r2, #0
 80102a0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80102a4:	4658      	mov	r0, fp
 80102a6:	46e1      	mov	r9, ip
 80102a8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80102ac:	4614      	mov	r4, r2
 80102ae:	461d      	mov	r5, r3
 80102b0:	f7f0 f9aa 	bl	8000608 <__aeabi_dmul>
 80102b4:	4602      	mov	r2, r0
 80102b6:	460b      	mov	r3, r1
 80102b8:	4630      	mov	r0, r6
 80102ba:	4639      	mov	r1, r7
 80102bc:	f7ef ffec 	bl	8000298 <__aeabi_dsub>
 80102c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80102c4:	4606      	mov	r6, r0
 80102c6:	460f      	mov	r7, r1
 80102c8:	4620      	mov	r0, r4
 80102ca:	4629      	mov	r1, r5
 80102cc:	f7ef ffe4 	bl	8000298 <__aeabi_dsub>
 80102d0:	4602      	mov	r2, r0
 80102d2:	460b      	mov	r3, r1
 80102d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80102d8:	f7ef ffde 	bl	8000298 <__aeabi_dsub>
 80102dc:	465a      	mov	r2, fp
 80102de:	464b      	mov	r3, r9
 80102e0:	f7f0 f992 	bl	8000608 <__aeabi_dmul>
 80102e4:	4602      	mov	r2, r0
 80102e6:	460b      	mov	r3, r1
 80102e8:	4630      	mov	r0, r6
 80102ea:	4639      	mov	r1, r7
 80102ec:	f7ef ffd4 	bl	8000298 <__aeabi_dsub>
 80102f0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80102f4:	f7f0 f988 	bl	8000608 <__aeabi_dmul>
 80102f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80102fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010300:	4610      	mov	r0, r2
 8010302:	4619      	mov	r1, r3
 8010304:	f7f0 f980 	bl	8000608 <__aeabi_dmul>
 8010308:	a37d      	add	r3, pc, #500	@ (adr r3, 8010500 <__ieee754_pow+0x730>)
 801030a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801030e:	4604      	mov	r4, r0
 8010310:	460d      	mov	r5, r1
 8010312:	f7f0 f979 	bl	8000608 <__aeabi_dmul>
 8010316:	a37c      	add	r3, pc, #496	@ (adr r3, 8010508 <__ieee754_pow+0x738>)
 8010318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801031c:	f7ef ffbe 	bl	800029c <__adddf3>
 8010320:	4622      	mov	r2, r4
 8010322:	462b      	mov	r3, r5
 8010324:	f7f0 f970 	bl	8000608 <__aeabi_dmul>
 8010328:	a379      	add	r3, pc, #484	@ (adr r3, 8010510 <__ieee754_pow+0x740>)
 801032a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801032e:	f7ef ffb5 	bl	800029c <__adddf3>
 8010332:	4622      	mov	r2, r4
 8010334:	462b      	mov	r3, r5
 8010336:	f7f0 f967 	bl	8000608 <__aeabi_dmul>
 801033a:	a377      	add	r3, pc, #476	@ (adr r3, 8010518 <__ieee754_pow+0x748>)
 801033c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010340:	f7ef ffac 	bl	800029c <__adddf3>
 8010344:	4622      	mov	r2, r4
 8010346:	462b      	mov	r3, r5
 8010348:	f7f0 f95e 	bl	8000608 <__aeabi_dmul>
 801034c:	a374      	add	r3, pc, #464	@ (adr r3, 8010520 <__ieee754_pow+0x750>)
 801034e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010352:	f7ef ffa3 	bl	800029c <__adddf3>
 8010356:	4622      	mov	r2, r4
 8010358:	462b      	mov	r3, r5
 801035a:	f7f0 f955 	bl	8000608 <__aeabi_dmul>
 801035e:	a372      	add	r3, pc, #456	@ (adr r3, 8010528 <__ieee754_pow+0x758>)
 8010360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010364:	f7ef ff9a 	bl	800029c <__adddf3>
 8010368:	4622      	mov	r2, r4
 801036a:	4606      	mov	r6, r0
 801036c:	460f      	mov	r7, r1
 801036e:	462b      	mov	r3, r5
 8010370:	4620      	mov	r0, r4
 8010372:	4629      	mov	r1, r5
 8010374:	f7f0 f948 	bl	8000608 <__aeabi_dmul>
 8010378:	4602      	mov	r2, r0
 801037a:	460b      	mov	r3, r1
 801037c:	4630      	mov	r0, r6
 801037e:	4639      	mov	r1, r7
 8010380:	f7f0 f942 	bl	8000608 <__aeabi_dmul>
 8010384:	465a      	mov	r2, fp
 8010386:	4604      	mov	r4, r0
 8010388:	460d      	mov	r5, r1
 801038a:	464b      	mov	r3, r9
 801038c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010390:	f7ef ff84 	bl	800029c <__adddf3>
 8010394:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010398:	f7f0 f936 	bl	8000608 <__aeabi_dmul>
 801039c:	4622      	mov	r2, r4
 801039e:	462b      	mov	r3, r5
 80103a0:	f7ef ff7c 	bl	800029c <__adddf3>
 80103a4:	465a      	mov	r2, fp
 80103a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80103aa:	464b      	mov	r3, r9
 80103ac:	4658      	mov	r0, fp
 80103ae:	4649      	mov	r1, r9
 80103b0:	f7f0 f92a 	bl	8000608 <__aeabi_dmul>
 80103b4:	4b6a      	ldr	r3, [pc, #424]	@ (8010560 <__ieee754_pow+0x790>)
 80103b6:	2200      	movs	r2, #0
 80103b8:	4606      	mov	r6, r0
 80103ba:	460f      	mov	r7, r1
 80103bc:	f7ef ff6e 	bl	800029c <__adddf3>
 80103c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80103c4:	f7ef ff6a 	bl	800029c <__adddf3>
 80103c8:	46d8      	mov	r8, fp
 80103ca:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80103ce:	460d      	mov	r5, r1
 80103d0:	465a      	mov	r2, fp
 80103d2:	460b      	mov	r3, r1
 80103d4:	4640      	mov	r0, r8
 80103d6:	4649      	mov	r1, r9
 80103d8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80103dc:	f7f0 f914 	bl	8000608 <__aeabi_dmul>
 80103e0:	465c      	mov	r4, fp
 80103e2:	4680      	mov	r8, r0
 80103e4:	4689      	mov	r9, r1
 80103e6:	4b5e      	ldr	r3, [pc, #376]	@ (8010560 <__ieee754_pow+0x790>)
 80103e8:	2200      	movs	r2, #0
 80103ea:	4620      	mov	r0, r4
 80103ec:	4629      	mov	r1, r5
 80103ee:	f7ef ff53 	bl	8000298 <__aeabi_dsub>
 80103f2:	4632      	mov	r2, r6
 80103f4:	463b      	mov	r3, r7
 80103f6:	f7ef ff4f 	bl	8000298 <__aeabi_dsub>
 80103fa:	4602      	mov	r2, r0
 80103fc:	460b      	mov	r3, r1
 80103fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010402:	f7ef ff49 	bl	8000298 <__aeabi_dsub>
 8010406:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801040a:	f7f0 f8fd 	bl	8000608 <__aeabi_dmul>
 801040e:	4622      	mov	r2, r4
 8010410:	4606      	mov	r6, r0
 8010412:	460f      	mov	r7, r1
 8010414:	462b      	mov	r3, r5
 8010416:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801041a:	f7f0 f8f5 	bl	8000608 <__aeabi_dmul>
 801041e:	4602      	mov	r2, r0
 8010420:	460b      	mov	r3, r1
 8010422:	4630      	mov	r0, r6
 8010424:	4639      	mov	r1, r7
 8010426:	f7ef ff39 	bl	800029c <__adddf3>
 801042a:	4606      	mov	r6, r0
 801042c:	460f      	mov	r7, r1
 801042e:	4602      	mov	r2, r0
 8010430:	460b      	mov	r3, r1
 8010432:	4640      	mov	r0, r8
 8010434:	4649      	mov	r1, r9
 8010436:	f7ef ff31 	bl	800029c <__adddf3>
 801043a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801043e:	a33c      	add	r3, pc, #240	@ (adr r3, 8010530 <__ieee754_pow+0x760>)
 8010440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010444:	4658      	mov	r0, fp
 8010446:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801044a:	460d      	mov	r5, r1
 801044c:	f7f0 f8dc 	bl	8000608 <__aeabi_dmul>
 8010450:	465c      	mov	r4, fp
 8010452:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010456:	4642      	mov	r2, r8
 8010458:	464b      	mov	r3, r9
 801045a:	4620      	mov	r0, r4
 801045c:	4629      	mov	r1, r5
 801045e:	f7ef ff1b 	bl	8000298 <__aeabi_dsub>
 8010462:	4602      	mov	r2, r0
 8010464:	460b      	mov	r3, r1
 8010466:	4630      	mov	r0, r6
 8010468:	4639      	mov	r1, r7
 801046a:	f7ef ff15 	bl	8000298 <__aeabi_dsub>
 801046e:	a332      	add	r3, pc, #200	@ (adr r3, 8010538 <__ieee754_pow+0x768>)
 8010470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010474:	f7f0 f8c8 	bl	8000608 <__aeabi_dmul>
 8010478:	a331      	add	r3, pc, #196	@ (adr r3, 8010540 <__ieee754_pow+0x770>)
 801047a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801047e:	4606      	mov	r6, r0
 8010480:	460f      	mov	r7, r1
 8010482:	4620      	mov	r0, r4
 8010484:	4629      	mov	r1, r5
 8010486:	f7f0 f8bf 	bl	8000608 <__aeabi_dmul>
 801048a:	4602      	mov	r2, r0
 801048c:	460b      	mov	r3, r1
 801048e:	4630      	mov	r0, r6
 8010490:	4639      	mov	r1, r7
 8010492:	f7ef ff03 	bl	800029c <__adddf3>
 8010496:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010498:	4b32      	ldr	r3, [pc, #200]	@ (8010564 <__ieee754_pow+0x794>)
 801049a:	4413      	add	r3, r2
 801049c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a0:	f7ef fefc 	bl	800029c <__adddf3>
 80104a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80104a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80104aa:	f7f0 f843 	bl	8000534 <__aeabi_i2d>
 80104ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80104b0:	4b2d      	ldr	r3, [pc, #180]	@ (8010568 <__ieee754_pow+0x798>)
 80104b2:	4413      	add	r3, r2
 80104b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80104b8:	4606      	mov	r6, r0
 80104ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80104be:	460f      	mov	r7, r1
 80104c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80104c4:	f7ef feea 	bl	800029c <__adddf3>
 80104c8:	4642      	mov	r2, r8
 80104ca:	464b      	mov	r3, r9
 80104cc:	f7ef fee6 	bl	800029c <__adddf3>
 80104d0:	4632      	mov	r2, r6
 80104d2:	463b      	mov	r3, r7
 80104d4:	f7ef fee2 	bl	800029c <__adddf3>
 80104d8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80104dc:	4632      	mov	r2, r6
 80104de:	463b      	mov	r3, r7
 80104e0:	4658      	mov	r0, fp
 80104e2:	460d      	mov	r5, r1
 80104e4:	f7ef fed8 	bl	8000298 <__aeabi_dsub>
 80104e8:	4642      	mov	r2, r8
 80104ea:	464b      	mov	r3, r9
 80104ec:	f7ef fed4 	bl	8000298 <__aeabi_dsub>
 80104f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80104f4:	f7ef fed0 	bl	8000298 <__aeabi_dsub>
 80104f8:	465c      	mov	r4, fp
 80104fa:	4602      	mov	r2, r0
 80104fc:	e036      	b.n	801056c <__ieee754_pow+0x79c>
 80104fe:	bf00      	nop
 8010500:	4a454eef 	.word	0x4a454eef
 8010504:	3fca7e28 	.word	0x3fca7e28
 8010508:	93c9db65 	.word	0x93c9db65
 801050c:	3fcd864a 	.word	0x3fcd864a
 8010510:	a91d4101 	.word	0xa91d4101
 8010514:	3fd17460 	.word	0x3fd17460
 8010518:	518f264d 	.word	0x518f264d
 801051c:	3fd55555 	.word	0x3fd55555
 8010520:	db6fabff 	.word	0xdb6fabff
 8010524:	3fdb6db6 	.word	0x3fdb6db6
 8010528:	33333303 	.word	0x33333303
 801052c:	3fe33333 	.word	0x3fe33333
 8010530:	e0000000 	.word	0xe0000000
 8010534:	3feec709 	.word	0x3feec709
 8010538:	dc3a03fd 	.word	0xdc3a03fd
 801053c:	3feec709 	.word	0x3feec709
 8010540:	145b01f5 	.word	0x145b01f5
 8010544:	be3e2fe0 	.word	0xbe3e2fe0
 8010548:	7ff00000 	.word	0x7ff00000
 801054c:	43400000 	.word	0x43400000
 8010550:	0003988e 	.word	0x0003988e
 8010554:	000bb679 	.word	0x000bb679
 8010558:	08011350 	.word	0x08011350
 801055c:	3ff00000 	.word	0x3ff00000
 8010560:	40080000 	.word	0x40080000
 8010564:	08011330 	.word	0x08011330
 8010568:	08011340 	.word	0x08011340
 801056c:	460b      	mov	r3, r1
 801056e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010572:	e5d7      	b.n	8010124 <__ieee754_pow+0x354>
 8010574:	f04f 0a01 	mov.w	sl, #1
 8010578:	e65e      	b.n	8010238 <__ieee754_pow+0x468>
 801057a:	a3b4      	add	r3, pc, #720	@ (adr r3, 801084c <__ieee754_pow+0xa7c>)
 801057c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010580:	4630      	mov	r0, r6
 8010582:	4639      	mov	r1, r7
 8010584:	f7ef fe8a 	bl	800029c <__adddf3>
 8010588:	4642      	mov	r2, r8
 801058a:	e9cd 0100 	strd	r0, r1, [sp]
 801058e:	464b      	mov	r3, r9
 8010590:	4620      	mov	r0, r4
 8010592:	4629      	mov	r1, r5
 8010594:	f7ef fe80 	bl	8000298 <__aeabi_dsub>
 8010598:	4602      	mov	r2, r0
 801059a:	460b      	mov	r3, r1
 801059c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80105a0:	f7f0 fac2 	bl	8000b28 <__aeabi_dcmpgt>
 80105a4:	2800      	cmp	r0, #0
 80105a6:	f47f ae00 	bne.w	80101aa <__ieee754_pow+0x3da>
 80105aa:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80105ae:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80105b2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80105b6:	fa43 fa0a 	asr.w	sl, r3, sl
 80105ba:	44da      	add	sl, fp
 80105bc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80105c0:	489d      	ldr	r0, [pc, #628]	@ (8010838 <__ieee754_pow+0xa68>)
 80105c2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80105c6:	4108      	asrs	r0, r1
 80105c8:	ea00 030a 	and.w	r3, r0, sl
 80105cc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80105d0:	f1c1 0114 	rsb	r1, r1, #20
 80105d4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80105d8:	fa4a fa01 	asr.w	sl, sl, r1
 80105dc:	f1bb 0f00 	cmp.w	fp, #0
 80105e0:	4640      	mov	r0, r8
 80105e2:	4649      	mov	r1, r9
 80105e4:	f04f 0200 	mov.w	r2, #0
 80105e8:	bfb8      	it	lt
 80105ea:	f1ca 0a00 	rsblt	sl, sl, #0
 80105ee:	f7ef fe53 	bl	8000298 <__aeabi_dsub>
 80105f2:	4680      	mov	r8, r0
 80105f4:	4689      	mov	r9, r1
 80105f6:	4632      	mov	r2, r6
 80105f8:	463b      	mov	r3, r7
 80105fa:	4640      	mov	r0, r8
 80105fc:	4649      	mov	r1, r9
 80105fe:	f7ef fe4d 	bl	800029c <__adddf3>
 8010602:	2400      	movs	r4, #0
 8010604:	a37c      	add	r3, pc, #496	@ (adr r3, 80107f8 <__ieee754_pow+0xa28>)
 8010606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801060a:	4620      	mov	r0, r4
 801060c:	460d      	mov	r5, r1
 801060e:	f7ef fffb 	bl	8000608 <__aeabi_dmul>
 8010612:	4642      	mov	r2, r8
 8010614:	e9cd 0100 	strd	r0, r1, [sp]
 8010618:	464b      	mov	r3, r9
 801061a:	4620      	mov	r0, r4
 801061c:	4629      	mov	r1, r5
 801061e:	f7ef fe3b 	bl	8000298 <__aeabi_dsub>
 8010622:	4602      	mov	r2, r0
 8010624:	460b      	mov	r3, r1
 8010626:	4630      	mov	r0, r6
 8010628:	4639      	mov	r1, r7
 801062a:	f7ef fe35 	bl	8000298 <__aeabi_dsub>
 801062e:	a374      	add	r3, pc, #464	@ (adr r3, 8010800 <__ieee754_pow+0xa30>)
 8010630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010634:	f7ef ffe8 	bl	8000608 <__aeabi_dmul>
 8010638:	a373      	add	r3, pc, #460	@ (adr r3, 8010808 <__ieee754_pow+0xa38>)
 801063a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801063e:	4680      	mov	r8, r0
 8010640:	4689      	mov	r9, r1
 8010642:	4620      	mov	r0, r4
 8010644:	4629      	mov	r1, r5
 8010646:	f7ef ffdf 	bl	8000608 <__aeabi_dmul>
 801064a:	4602      	mov	r2, r0
 801064c:	460b      	mov	r3, r1
 801064e:	4640      	mov	r0, r8
 8010650:	4649      	mov	r1, r9
 8010652:	f7ef fe23 	bl	800029c <__adddf3>
 8010656:	4604      	mov	r4, r0
 8010658:	460d      	mov	r5, r1
 801065a:	4602      	mov	r2, r0
 801065c:	460b      	mov	r3, r1
 801065e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010662:	f7ef fe1b 	bl	800029c <__adddf3>
 8010666:	e9dd 2300 	ldrd	r2, r3, [sp]
 801066a:	4680      	mov	r8, r0
 801066c:	4689      	mov	r9, r1
 801066e:	f7ef fe13 	bl	8000298 <__aeabi_dsub>
 8010672:	4602      	mov	r2, r0
 8010674:	460b      	mov	r3, r1
 8010676:	4620      	mov	r0, r4
 8010678:	4629      	mov	r1, r5
 801067a:	f7ef fe0d 	bl	8000298 <__aeabi_dsub>
 801067e:	4642      	mov	r2, r8
 8010680:	4606      	mov	r6, r0
 8010682:	460f      	mov	r7, r1
 8010684:	464b      	mov	r3, r9
 8010686:	4640      	mov	r0, r8
 8010688:	4649      	mov	r1, r9
 801068a:	f7ef ffbd 	bl	8000608 <__aeabi_dmul>
 801068e:	a360      	add	r3, pc, #384	@ (adr r3, 8010810 <__ieee754_pow+0xa40>)
 8010690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010694:	4604      	mov	r4, r0
 8010696:	460d      	mov	r5, r1
 8010698:	f7ef ffb6 	bl	8000608 <__aeabi_dmul>
 801069c:	a35e      	add	r3, pc, #376	@ (adr r3, 8010818 <__ieee754_pow+0xa48>)
 801069e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106a2:	f7ef fdf9 	bl	8000298 <__aeabi_dsub>
 80106a6:	4622      	mov	r2, r4
 80106a8:	462b      	mov	r3, r5
 80106aa:	f7ef ffad 	bl	8000608 <__aeabi_dmul>
 80106ae:	a35c      	add	r3, pc, #368	@ (adr r3, 8010820 <__ieee754_pow+0xa50>)
 80106b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106b4:	f7ef fdf2 	bl	800029c <__adddf3>
 80106b8:	4622      	mov	r2, r4
 80106ba:	462b      	mov	r3, r5
 80106bc:	f7ef ffa4 	bl	8000608 <__aeabi_dmul>
 80106c0:	a359      	add	r3, pc, #356	@ (adr r3, 8010828 <__ieee754_pow+0xa58>)
 80106c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106c6:	f7ef fde7 	bl	8000298 <__aeabi_dsub>
 80106ca:	4622      	mov	r2, r4
 80106cc:	462b      	mov	r3, r5
 80106ce:	f7ef ff9b 	bl	8000608 <__aeabi_dmul>
 80106d2:	a357      	add	r3, pc, #348	@ (adr r3, 8010830 <__ieee754_pow+0xa60>)
 80106d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106d8:	f7ef fde0 	bl	800029c <__adddf3>
 80106dc:	4622      	mov	r2, r4
 80106de:	462b      	mov	r3, r5
 80106e0:	f7ef ff92 	bl	8000608 <__aeabi_dmul>
 80106e4:	4602      	mov	r2, r0
 80106e6:	460b      	mov	r3, r1
 80106e8:	4640      	mov	r0, r8
 80106ea:	4649      	mov	r1, r9
 80106ec:	f7ef fdd4 	bl	8000298 <__aeabi_dsub>
 80106f0:	4604      	mov	r4, r0
 80106f2:	460d      	mov	r5, r1
 80106f4:	4602      	mov	r2, r0
 80106f6:	460b      	mov	r3, r1
 80106f8:	4640      	mov	r0, r8
 80106fa:	4649      	mov	r1, r9
 80106fc:	f7ef ff84 	bl	8000608 <__aeabi_dmul>
 8010700:	2200      	movs	r2, #0
 8010702:	e9cd 0100 	strd	r0, r1, [sp]
 8010706:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801070a:	4620      	mov	r0, r4
 801070c:	4629      	mov	r1, r5
 801070e:	f7ef fdc3 	bl	8000298 <__aeabi_dsub>
 8010712:	4602      	mov	r2, r0
 8010714:	460b      	mov	r3, r1
 8010716:	e9dd 0100 	ldrd	r0, r1, [sp]
 801071a:	f7f0 f89f 	bl	800085c <__aeabi_ddiv>
 801071e:	4632      	mov	r2, r6
 8010720:	4604      	mov	r4, r0
 8010722:	460d      	mov	r5, r1
 8010724:	463b      	mov	r3, r7
 8010726:	4640      	mov	r0, r8
 8010728:	4649      	mov	r1, r9
 801072a:	f7ef ff6d 	bl	8000608 <__aeabi_dmul>
 801072e:	4632      	mov	r2, r6
 8010730:	463b      	mov	r3, r7
 8010732:	f7ef fdb3 	bl	800029c <__adddf3>
 8010736:	4602      	mov	r2, r0
 8010738:	460b      	mov	r3, r1
 801073a:	4620      	mov	r0, r4
 801073c:	4629      	mov	r1, r5
 801073e:	f7ef fdab 	bl	8000298 <__aeabi_dsub>
 8010742:	4642      	mov	r2, r8
 8010744:	464b      	mov	r3, r9
 8010746:	f7ef fda7 	bl	8000298 <__aeabi_dsub>
 801074a:	460b      	mov	r3, r1
 801074c:	4602      	mov	r2, r0
 801074e:	493b      	ldr	r1, [pc, #236]	@ (801083c <__ieee754_pow+0xa6c>)
 8010750:	2000      	movs	r0, #0
 8010752:	f7ef fda1 	bl	8000298 <__aeabi_dsub>
 8010756:	ec41 0b10 	vmov	d0, r0, r1
 801075a:	ee10 3a90 	vmov	r3, s1
 801075e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010762:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010766:	da30      	bge.n	80107ca <__ieee754_pow+0x9fa>
 8010768:	4650      	mov	r0, sl
 801076a:	f000 f87d 	bl	8010868 <scalbn>
 801076e:	ec51 0b10 	vmov	r0, r1, d0
 8010772:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010776:	f7ff bbd2 	b.w	800ff1e <__ieee754_pow+0x14e>
 801077a:	4c31      	ldr	r4, [pc, #196]	@ (8010840 <__ieee754_pow+0xa70>)
 801077c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010780:	42a3      	cmp	r3, r4
 8010782:	d91a      	bls.n	80107ba <__ieee754_pow+0x9ea>
 8010784:	4b2f      	ldr	r3, [pc, #188]	@ (8010844 <__ieee754_pow+0xa74>)
 8010786:	440b      	add	r3, r1
 8010788:	4303      	orrs	r3, r0
 801078a:	d009      	beq.n	80107a0 <__ieee754_pow+0x9d0>
 801078c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010790:	2200      	movs	r2, #0
 8010792:	2300      	movs	r3, #0
 8010794:	f7f0 f9aa 	bl	8000aec <__aeabi_dcmplt>
 8010798:	3800      	subs	r0, #0
 801079a:	bf18      	it	ne
 801079c:	2001      	movne	r0, #1
 801079e:	e42b      	b.n	800fff8 <__ieee754_pow+0x228>
 80107a0:	4642      	mov	r2, r8
 80107a2:	464b      	mov	r3, r9
 80107a4:	f7ef fd78 	bl	8000298 <__aeabi_dsub>
 80107a8:	4632      	mov	r2, r6
 80107aa:	463b      	mov	r3, r7
 80107ac:	f7f0 f9b2 	bl	8000b14 <__aeabi_dcmpge>
 80107b0:	2800      	cmp	r0, #0
 80107b2:	d1eb      	bne.n	801078c <__ieee754_pow+0x9bc>
 80107b4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8010854 <__ieee754_pow+0xa84>
 80107b8:	e6f7      	b.n	80105aa <__ieee754_pow+0x7da>
 80107ba:	469a      	mov	sl, r3
 80107bc:	4b22      	ldr	r3, [pc, #136]	@ (8010848 <__ieee754_pow+0xa78>)
 80107be:	459a      	cmp	sl, r3
 80107c0:	f63f aef3 	bhi.w	80105aa <__ieee754_pow+0x7da>
 80107c4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80107c8:	e715      	b.n	80105f6 <__ieee754_pow+0x826>
 80107ca:	ec51 0b10 	vmov	r0, r1, d0
 80107ce:	4619      	mov	r1, r3
 80107d0:	e7cf      	b.n	8010772 <__ieee754_pow+0x9a2>
 80107d2:	491a      	ldr	r1, [pc, #104]	@ (801083c <__ieee754_pow+0xa6c>)
 80107d4:	2000      	movs	r0, #0
 80107d6:	f7ff bb18 	b.w	800fe0a <__ieee754_pow+0x3a>
 80107da:	2000      	movs	r0, #0
 80107dc:	2100      	movs	r1, #0
 80107de:	f7ff bb14 	b.w	800fe0a <__ieee754_pow+0x3a>
 80107e2:	4630      	mov	r0, r6
 80107e4:	4639      	mov	r1, r7
 80107e6:	f7ff bb10 	b.w	800fe0a <__ieee754_pow+0x3a>
 80107ea:	460c      	mov	r4, r1
 80107ec:	f7ff bb5e 	b.w	800feac <__ieee754_pow+0xdc>
 80107f0:	2400      	movs	r4, #0
 80107f2:	f7ff bb49 	b.w	800fe88 <__ieee754_pow+0xb8>
 80107f6:	bf00      	nop
 80107f8:	00000000 	.word	0x00000000
 80107fc:	3fe62e43 	.word	0x3fe62e43
 8010800:	fefa39ef 	.word	0xfefa39ef
 8010804:	3fe62e42 	.word	0x3fe62e42
 8010808:	0ca86c39 	.word	0x0ca86c39
 801080c:	be205c61 	.word	0xbe205c61
 8010810:	72bea4d0 	.word	0x72bea4d0
 8010814:	3e663769 	.word	0x3e663769
 8010818:	c5d26bf1 	.word	0xc5d26bf1
 801081c:	3ebbbd41 	.word	0x3ebbbd41
 8010820:	af25de2c 	.word	0xaf25de2c
 8010824:	3f11566a 	.word	0x3f11566a
 8010828:	16bebd93 	.word	0x16bebd93
 801082c:	3f66c16c 	.word	0x3f66c16c
 8010830:	5555553e 	.word	0x5555553e
 8010834:	3fc55555 	.word	0x3fc55555
 8010838:	fff00000 	.word	0xfff00000
 801083c:	3ff00000 	.word	0x3ff00000
 8010840:	4090cbff 	.word	0x4090cbff
 8010844:	3f6f3400 	.word	0x3f6f3400
 8010848:	3fe00000 	.word	0x3fe00000
 801084c:	652b82fe 	.word	0x652b82fe
 8010850:	3c971547 	.word	0x3c971547
 8010854:	4090cc00 	.word	0x4090cc00

08010858 <fabs>:
 8010858:	ec51 0b10 	vmov	r0, r1, d0
 801085c:	4602      	mov	r2, r0
 801085e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010862:	ec43 2b10 	vmov	d0, r2, r3
 8010866:	4770      	bx	lr

08010868 <scalbn>:
 8010868:	b570      	push	{r4, r5, r6, lr}
 801086a:	ec55 4b10 	vmov	r4, r5, d0
 801086e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010872:	4606      	mov	r6, r0
 8010874:	462b      	mov	r3, r5
 8010876:	b991      	cbnz	r1, 801089e <scalbn+0x36>
 8010878:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801087c:	4323      	orrs	r3, r4
 801087e:	d03d      	beq.n	80108fc <scalbn+0x94>
 8010880:	4b35      	ldr	r3, [pc, #212]	@ (8010958 <scalbn+0xf0>)
 8010882:	4620      	mov	r0, r4
 8010884:	4629      	mov	r1, r5
 8010886:	2200      	movs	r2, #0
 8010888:	f7ef febe 	bl	8000608 <__aeabi_dmul>
 801088c:	4b33      	ldr	r3, [pc, #204]	@ (801095c <scalbn+0xf4>)
 801088e:	429e      	cmp	r6, r3
 8010890:	4604      	mov	r4, r0
 8010892:	460d      	mov	r5, r1
 8010894:	da0f      	bge.n	80108b6 <scalbn+0x4e>
 8010896:	a328      	add	r3, pc, #160	@ (adr r3, 8010938 <scalbn+0xd0>)
 8010898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801089c:	e01e      	b.n	80108dc <scalbn+0x74>
 801089e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80108a2:	4291      	cmp	r1, r2
 80108a4:	d10b      	bne.n	80108be <scalbn+0x56>
 80108a6:	4622      	mov	r2, r4
 80108a8:	4620      	mov	r0, r4
 80108aa:	4629      	mov	r1, r5
 80108ac:	f7ef fcf6 	bl	800029c <__adddf3>
 80108b0:	4604      	mov	r4, r0
 80108b2:	460d      	mov	r5, r1
 80108b4:	e022      	b.n	80108fc <scalbn+0x94>
 80108b6:	460b      	mov	r3, r1
 80108b8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80108bc:	3936      	subs	r1, #54	@ 0x36
 80108be:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80108c2:	4296      	cmp	r6, r2
 80108c4:	dd0d      	ble.n	80108e2 <scalbn+0x7a>
 80108c6:	2d00      	cmp	r5, #0
 80108c8:	a11d      	add	r1, pc, #116	@ (adr r1, 8010940 <scalbn+0xd8>)
 80108ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80108ce:	da02      	bge.n	80108d6 <scalbn+0x6e>
 80108d0:	a11d      	add	r1, pc, #116	@ (adr r1, 8010948 <scalbn+0xe0>)
 80108d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80108d6:	a31a      	add	r3, pc, #104	@ (adr r3, 8010940 <scalbn+0xd8>)
 80108d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108dc:	f7ef fe94 	bl	8000608 <__aeabi_dmul>
 80108e0:	e7e6      	b.n	80108b0 <scalbn+0x48>
 80108e2:	1872      	adds	r2, r6, r1
 80108e4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80108e8:	428a      	cmp	r2, r1
 80108ea:	dcec      	bgt.n	80108c6 <scalbn+0x5e>
 80108ec:	2a00      	cmp	r2, #0
 80108ee:	dd08      	ble.n	8010902 <scalbn+0x9a>
 80108f0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80108f4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80108f8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80108fc:	ec45 4b10 	vmov	d0, r4, r5
 8010900:	bd70      	pop	{r4, r5, r6, pc}
 8010902:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8010906:	da08      	bge.n	801091a <scalbn+0xb2>
 8010908:	2d00      	cmp	r5, #0
 801090a:	a10b      	add	r1, pc, #44	@ (adr r1, 8010938 <scalbn+0xd0>)
 801090c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010910:	dac1      	bge.n	8010896 <scalbn+0x2e>
 8010912:	a10f      	add	r1, pc, #60	@ (adr r1, 8010950 <scalbn+0xe8>)
 8010914:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010918:	e7bd      	b.n	8010896 <scalbn+0x2e>
 801091a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801091e:	3236      	adds	r2, #54	@ 0x36
 8010920:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010924:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010928:	4620      	mov	r0, r4
 801092a:	4b0d      	ldr	r3, [pc, #52]	@ (8010960 <scalbn+0xf8>)
 801092c:	4629      	mov	r1, r5
 801092e:	2200      	movs	r2, #0
 8010930:	e7d4      	b.n	80108dc <scalbn+0x74>
 8010932:	bf00      	nop
 8010934:	f3af 8000 	nop.w
 8010938:	c2f8f359 	.word	0xc2f8f359
 801093c:	01a56e1f 	.word	0x01a56e1f
 8010940:	8800759c 	.word	0x8800759c
 8010944:	7e37e43c 	.word	0x7e37e43c
 8010948:	8800759c 	.word	0x8800759c
 801094c:	fe37e43c 	.word	0xfe37e43c
 8010950:	c2f8f359 	.word	0xc2f8f359
 8010954:	81a56e1f 	.word	0x81a56e1f
 8010958:	43500000 	.word	0x43500000
 801095c:	ffff3cb0 	.word	0xffff3cb0
 8010960:	3c900000 	.word	0x3c900000

08010964 <with_errno>:
 8010964:	b510      	push	{r4, lr}
 8010966:	ed2d 8b02 	vpush	{d8}
 801096a:	eeb0 8a40 	vmov.f32	s16, s0
 801096e:	eef0 8a60 	vmov.f32	s17, s1
 8010972:	4604      	mov	r4, r0
 8010974:	f7fc f8d8 	bl	800cb28 <__errno>
 8010978:	eeb0 0a48 	vmov.f32	s0, s16
 801097c:	eef0 0a68 	vmov.f32	s1, s17
 8010980:	ecbd 8b02 	vpop	{d8}
 8010984:	6004      	str	r4, [r0, #0]
 8010986:	bd10      	pop	{r4, pc}

08010988 <xflow>:
 8010988:	4603      	mov	r3, r0
 801098a:	b507      	push	{r0, r1, r2, lr}
 801098c:	ec51 0b10 	vmov	r0, r1, d0
 8010990:	b183      	cbz	r3, 80109b4 <xflow+0x2c>
 8010992:	4602      	mov	r2, r0
 8010994:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010998:	e9cd 2300 	strd	r2, r3, [sp]
 801099c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80109a0:	f7ef fe32 	bl	8000608 <__aeabi_dmul>
 80109a4:	ec41 0b10 	vmov	d0, r0, r1
 80109a8:	2022      	movs	r0, #34	@ 0x22
 80109aa:	b003      	add	sp, #12
 80109ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80109b0:	f7ff bfd8 	b.w	8010964 <with_errno>
 80109b4:	4602      	mov	r2, r0
 80109b6:	460b      	mov	r3, r1
 80109b8:	e7ee      	b.n	8010998 <xflow+0x10>
 80109ba:	0000      	movs	r0, r0
 80109bc:	0000      	movs	r0, r0
	...

080109c0 <__math_uflow>:
 80109c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80109c8 <__math_uflow+0x8>
 80109c4:	f7ff bfe0 	b.w	8010988 <xflow>
 80109c8:	00000000 	.word	0x00000000
 80109cc:	10000000 	.word	0x10000000

080109d0 <__math_oflow>:
 80109d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80109d8 <__math_oflow+0x8>
 80109d4:	f7ff bfd8 	b.w	8010988 <xflow>
 80109d8:	00000000 	.word	0x00000000
 80109dc:	70000000 	.word	0x70000000

080109e0 <__ieee754_sqrt>:
 80109e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109e4:	4a68      	ldr	r2, [pc, #416]	@ (8010b88 <__ieee754_sqrt+0x1a8>)
 80109e6:	ec55 4b10 	vmov	r4, r5, d0
 80109ea:	43aa      	bics	r2, r5
 80109ec:	462b      	mov	r3, r5
 80109ee:	4621      	mov	r1, r4
 80109f0:	d110      	bne.n	8010a14 <__ieee754_sqrt+0x34>
 80109f2:	4622      	mov	r2, r4
 80109f4:	4620      	mov	r0, r4
 80109f6:	4629      	mov	r1, r5
 80109f8:	f7ef fe06 	bl	8000608 <__aeabi_dmul>
 80109fc:	4602      	mov	r2, r0
 80109fe:	460b      	mov	r3, r1
 8010a00:	4620      	mov	r0, r4
 8010a02:	4629      	mov	r1, r5
 8010a04:	f7ef fc4a 	bl	800029c <__adddf3>
 8010a08:	4604      	mov	r4, r0
 8010a0a:	460d      	mov	r5, r1
 8010a0c:	ec45 4b10 	vmov	d0, r4, r5
 8010a10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a14:	2d00      	cmp	r5, #0
 8010a16:	dc0e      	bgt.n	8010a36 <__ieee754_sqrt+0x56>
 8010a18:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8010a1c:	4322      	orrs	r2, r4
 8010a1e:	d0f5      	beq.n	8010a0c <__ieee754_sqrt+0x2c>
 8010a20:	b19d      	cbz	r5, 8010a4a <__ieee754_sqrt+0x6a>
 8010a22:	4622      	mov	r2, r4
 8010a24:	4620      	mov	r0, r4
 8010a26:	4629      	mov	r1, r5
 8010a28:	f7ef fc36 	bl	8000298 <__aeabi_dsub>
 8010a2c:	4602      	mov	r2, r0
 8010a2e:	460b      	mov	r3, r1
 8010a30:	f7ef ff14 	bl	800085c <__aeabi_ddiv>
 8010a34:	e7e8      	b.n	8010a08 <__ieee754_sqrt+0x28>
 8010a36:	152a      	asrs	r2, r5, #20
 8010a38:	d115      	bne.n	8010a66 <__ieee754_sqrt+0x86>
 8010a3a:	2000      	movs	r0, #0
 8010a3c:	e009      	b.n	8010a52 <__ieee754_sqrt+0x72>
 8010a3e:	0acb      	lsrs	r3, r1, #11
 8010a40:	3a15      	subs	r2, #21
 8010a42:	0549      	lsls	r1, r1, #21
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d0fa      	beq.n	8010a3e <__ieee754_sqrt+0x5e>
 8010a48:	e7f7      	b.n	8010a3a <__ieee754_sqrt+0x5a>
 8010a4a:	462a      	mov	r2, r5
 8010a4c:	e7fa      	b.n	8010a44 <__ieee754_sqrt+0x64>
 8010a4e:	005b      	lsls	r3, r3, #1
 8010a50:	3001      	adds	r0, #1
 8010a52:	02dc      	lsls	r4, r3, #11
 8010a54:	d5fb      	bpl.n	8010a4e <__ieee754_sqrt+0x6e>
 8010a56:	1e44      	subs	r4, r0, #1
 8010a58:	1b12      	subs	r2, r2, r4
 8010a5a:	f1c0 0420 	rsb	r4, r0, #32
 8010a5e:	fa21 f404 	lsr.w	r4, r1, r4
 8010a62:	4323      	orrs	r3, r4
 8010a64:	4081      	lsls	r1, r0
 8010a66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a6a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8010a6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010a72:	07d2      	lsls	r2, r2, #31
 8010a74:	bf5c      	itt	pl
 8010a76:	005b      	lslpl	r3, r3, #1
 8010a78:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8010a7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010a80:	bf58      	it	pl
 8010a82:	0049      	lslpl	r1, r1, #1
 8010a84:	2600      	movs	r6, #0
 8010a86:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8010a8a:	106d      	asrs	r5, r5, #1
 8010a8c:	0049      	lsls	r1, r1, #1
 8010a8e:	2016      	movs	r0, #22
 8010a90:	4632      	mov	r2, r6
 8010a92:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8010a96:	1917      	adds	r7, r2, r4
 8010a98:	429f      	cmp	r7, r3
 8010a9a:	bfde      	ittt	le
 8010a9c:	193a      	addle	r2, r7, r4
 8010a9e:	1bdb      	suble	r3, r3, r7
 8010aa0:	1936      	addle	r6, r6, r4
 8010aa2:	0fcf      	lsrs	r7, r1, #31
 8010aa4:	3801      	subs	r0, #1
 8010aa6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8010aaa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010aae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8010ab2:	d1f0      	bne.n	8010a96 <__ieee754_sqrt+0xb6>
 8010ab4:	4604      	mov	r4, r0
 8010ab6:	2720      	movs	r7, #32
 8010ab8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8010abc:	429a      	cmp	r2, r3
 8010abe:	eb00 0e0c 	add.w	lr, r0, ip
 8010ac2:	db02      	blt.n	8010aca <__ieee754_sqrt+0xea>
 8010ac4:	d113      	bne.n	8010aee <__ieee754_sqrt+0x10e>
 8010ac6:	458e      	cmp	lr, r1
 8010ac8:	d811      	bhi.n	8010aee <__ieee754_sqrt+0x10e>
 8010aca:	f1be 0f00 	cmp.w	lr, #0
 8010ace:	eb0e 000c 	add.w	r0, lr, ip
 8010ad2:	da42      	bge.n	8010b5a <__ieee754_sqrt+0x17a>
 8010ad4:	2800      	cmp	r0, #0
 8010ad6:	db40      	blt.n	8010b5a <__ieee754_sqrt+0x17a>
 8010ad8:	f102 0801 	add.w	r8, r2, #1
 8010adc:	1a9b      	subs	r3, r3, r2
 8010ade:	458e      	cmp	lr, r1
 8010ae0:	bf88      	it	hi
 8010ae2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8010ae6:	eba1 010e 	sub.w	r1, r1, lr
 8010aea:	4464      	add	r4, ip
 8010aec:	4642      	mov	r2, r8
 8010aee:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8010af2:	3f01      	subs	r7, #1
 8010af4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8010af8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010afc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8010b00:	d1dc      	bne.n	8010abc <__ieee754_sqrt+0xdc>
 8010b02:	4319      	orrs	r1, r3
 8010b04:	d01b      	beq.n	8010b3e <__ieee754_sqrt+0x15e>
 8010b06:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8010b8c <__ieee754_sqrt+0x1ac>
 8010b0a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8010b90 <__ieee754_sqrt+0x1b0>
 8010b0e:	e9da 0100 	ldrd	r0, r1, [sl]
 8010b12:	e9db 2300 	ldrd	r2, r3, [fp]
 8010b16:	f7ef fbbf 	bl	8000298 <__aeabi_dsub>
 8010b1a:	e9da 8900 	ldrd	r8, r9, [sl]
 8010b1e:	4602      	mov	r2, r0
 8010b20:	460b      	mov	r3, r1
 8010b22:	4640      	mov	r0, r8
 8010b24:	4649      	mov	r1, r9
 8010b26:	f7ef ffeb 	bl	8000b00 <__aeabi_dcmple>
 8010b2a:	b140      	cbz	r0, 8010b3e <__ieee754_sqrt+0x15e>
 8010b2c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010b30:	e9da 0100 	ldrd	r0, r1, [sl]
 8010b34:	e9db 2300 	ldrd	r2, r3, [fp]
 8010b38:	d111      	bne.n	8010b5e <__ieee754_sqrt+0x17e>
 8010b3a:	3601      	adds	r6, #1
 8010b3c:	463c      	mov	r4, r7
 8010b3e:	1072      	asrs	r2, r6, #1
 8010b40:	0863      	lsrs	r3, r4, #1
 8010b42:	07f1      	lsls	r1, r6, #31
 8010b44:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8010b48:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8010b4c:	bf48      	it	mi
 8010b4e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8010b52:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8010b56:	4618      	mov	r0, r3
 8010b58:	e756      	b.n	8010a08 <__ieee754_sqrt+0x28>
 8010b5a:	4690      	mov	r8, r2
 8010b5c:	e7be      	b.n	8010adc <__ieee754_sqrt+0xfc>
 8010b5e:	f7ef fb9d 	bl	800029c <__adddf3>
 8010b62:	e9da 8900 	ldrd	r8, r9, [sl]
 8010b66:	4602      	mov	r2, r0
 8010b68:	460b      	mov	r3, r1
 8010b6a:	4640      	mov	r0, r8
 8010b6c:	4649      	mov	r1, r9
 8010b6e:	f7ef ffbd 	bl	8000aec <__aeabi_dcmplt>
 8010b72:	b120      	cbz	r0, 8010b7e <__ieee754_sqrt+0x19e>
 8010b74:	1ca0      	adds	r0, r4, #2
 8010b76:	bf08      	it	eq
 8010b78:	3601      	addeq	r6, #1
 8010b7a:	3402      	adds	r4, #2
 8010b7c:	e7df      	b.n	8010b3e <__ieee754_sqrt+0x15e>
 8010b7e:	1c63      	adds	r3, r4, #1
 8010b80:	f023 0401 	bic.w	r4, r3, #1
 8010b84:	e7db      	b.n	8010b3e <__ieee754_sqrt+0x15e>
 8010b86:	bf00      	nop
 8010b88:	7ff00000 	.word	0x7ff00000
 8010b8c:	200001f0 	.word	0x200001f0
 8010b90:	200001e8 	.word	0x200001e8

08010b94 <_init>:
 8010b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b96:	bf00      	nop
 8010b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b9a:	bc08      	pop	{r3}
 8010b9c:	469e      	mov	lr, r3
 8010b9e:	4770      	bx	lr

08010ba0 <_fini>:
 8010ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ba2:	bf00      	nop
 8010ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ba6:	bc08      	pop	{r3}
 8010ba8:	469e      	mov	lr, r3
 8010baa:	4770      	bx	lr
