
gorevyuku1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000136a4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c8  08013848  08013848  00014848  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014210  08014210  000161f0  2**0
                  CONTENTS
  4 .ARM          00000008  08014210  08014210  00015210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014218  08014218  000161f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014218  08014218  00015218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801421c  0801421c  0001521c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  08014220  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b30  200001f0  08014410  000161f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002d20  08014410  00016d20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000161f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001de6a  00000000  00000000  00016220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000446c  00000000  00000000  0003408a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a70  00000000  00000000  000384f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000149a  00000000  00000000  00039f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cf38  00000000  00000000  0003b402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000240b0  00000000  00000000  0005833a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a84bf  00000000  00000000  0007c3ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001248a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000089f8  00000000  00000000  001248ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0012d2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801382c 	.word	0x0801382c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0801382c 	.word	0x0801382c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <PassiveBuzz_ON>:
 * @brief : Buzzer is set when the function is called(DutyCycle is configurated by the CCRx REG)
 * @param :  htim_X        : it's set by &htimX. X is the number of timers
 * @param :  PWM_Channel_X :  it's set by TIM_CHANNEL_X . X is the number of timer's channels
 * @retval: None
 */
void PassiveBuzz_ON(TIM_HandleTypeDef *htim_X, uint32_t PWM_Channel_X){
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]

	switch (PWM_Channel_X){
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	2b0c      	cmp	r3, #12
 8001002:	d875      	bhi.n	80010f0 <PassiveBuzz_ON+0xfc>
 8001004:	a201      	add	r2, pc, #4	@ (adr r2, 800100c <PassiveBuzz_ON+0x18>)
 8001006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100a:	bf00      	nop
 800100c:	08001041 	.word	0x08001041
 8001010:	080010f1 	.word	0x080010f1
 8001014:	080010f1 	.word	0x080010f1
 8001018:	080010f1 	.word	0x080010f1
 800101c:	0800106d 	.word	0x0800106d
 8001020:	080010f1 	.word	0x080010f1
 8001024:	080010f1 	.word	0x080010f1
 8001028:	080010f1 	.word	0x080010f1
 800102c:	08001099 	.word	0x08001099
 8001030:	080010f1 	.word	0x080010f1
 8001034:	080010f1 	.word	0x080010f1
 8001038:	080010f1 	.word	0x080010f1
 800103c:	080010c5 	.word	0x080010c5

	case TIM_CHANNEL_1 :
		htim_X->Instance->CCR1 =  0.5 * (htim_X->Instance->ARR);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fa64 	bl	8000514 <__aeabi_ui2d>
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	4b29      	ldr	r3, [pc, #164]	@ (80010f8 <PassiveBuzz_ON+0x104>)
 8001052:	f7ff fad9 	bl	8000608 <__aeabi_dmul>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681c      	ldr	r4, [r3, #0]
 8001062:	f7ff fda9 	bl	8000bb8 <__aeabi_d2uiz>
 8001066:	4603      	mov	r3, r0
 8001068:	6363      	str	r3, [r4, #52]	@ 0x34
	break;
 800106a:	e041      	b.n	80010f0 <PassiveBuzz_ON+0xfc>

	case TIM_CHANNEL_2 :
		htim_X->Instance->CCR2 =  0.5 * (htim_X->Instance->ARR);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fa4e 	bl	8000514 <__aeabi_ui2d>
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	4b1e      	ldr	r3, [pc, #120]	@ (80010f8 <PassiveBuzz_ON+0x104>)
 800107e:	f7ff fac3 	bl	8000608 <__aeabi_dmul>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4610      	mov	r0, r2
 8001088:	4619      	mov	r1, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681c      	ldr	r4, [r3, #0]
 800108e:	f7ff fd93 	bl	8000bb8 <__aeabi_d2uiz>
 8001092:	4603      	mov	r3, r0
 8001094:	63a3      	str	r3, [r4, #56]	@ 0x38
	break;
 8001096:	e02b      	b.n	80010f0 <PassiveBuzz_ON+0xfc>

	case TIM_CHANNEL_3 :
		htim_X->Instance->CCR3 =  0.5 * (htim_X->Instance->ARR);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fa38 	bl	8000514 <__aeabi_ui2d>
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	4b13      	ldr	r3, [pc, #76]	@ (80010f8 <PassiveBuzz_ON+0x104>)
 80010aa:	f7ff faad 	bl	8000608 <__aeabi_dmul>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4610      	mov	r0, r2
 80010b4:	4619      	mov	r1, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681c      	ldr	r4, [r3, #0]
 80010ba:	f7ff fd7d 	bl	8000bb8 <__aeabi_d2uiz>
 80010be:	4603      	mov	r3, r0
 80010c0:	63e3      	str	r3, [r4, #60]	@ 0x3c
	break;
 80010c2:	e015      	b.n	80010f0 <PassiveBuzz_ON+0xfc>

	case TIM_CHANNEL_4 :
		htim_X->Instance->CCR4 =  0.5 * (htim_X->Instance->ARR);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fa22 	bl	8000514 <__aeabi_ui2d>
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <PassiveBuzz_ON+0x104>)
 80010d6:	f7ff fa97 	bl	8000608 <__aeabi_dmul>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4610      	mov	r0, r2
 80010e0:	4619      	mov	r1, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681c      	ldr	r4, [r3, #0]
 80010e6:	f7ff fd67 	bl	8000bb8 <__aeabi_d2uiz>
 80010ea:	4603      	mov	r3, r0
 80010ec:	6423      	str	r3, [r4, #64]	@ 0x40
	break;
 80010ee:	bf00      	nop
	}


}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd90      	pop	{r4, r7, pc}
 80010f8:	3fe00000 	.word	0x3fe00000

080010fc <PassiveBuzz_OFF>:
 * @brief  : Buzzer is deactivated when the function is called (DutyCycle is zero)
 * @param  : htim_X        : it's set by &htimX. X is the number of timers
 * @param  : PWM_Channel_X :  it's set by TIM_CHANNEL_X . X is the number of timer's channels
 * @retval : None
 */
void PassiveBuzz_OFF(TIM_HandleTypeDef *htim_X, uint32_t PWM_Channel_X){
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
	switch (PWM_Channel_X){
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2b0c      	cmp	r3, #12
 800110a:	d831      	bhi.n	8001170 <PassiveBuzz_OFF+0x74>
 800110c:	a201      	add	r2, pc, #4	@ (adr r2, 8001114 <PassiveBuzz_OFF+0x18>)
 800110e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001112:	bf00      	nop
 8001114:	08001149 	.word	0x08001149
 8001118:	08001171 	.word	0x08001171
 800111c:	08001171 	.word	0x08001171
 8001120:	08001171 	.word	0x08001171
 8001124:	08001153 	.word	0x08001153
 8001128:	08001171 	.word	0x08001171
 800112c:	08001171 	.word	0x08001171
 8001130:	08001171 	.word	0x08001171
 8001134:	0800115d 	.word	0x0800115d
 8001138:	08001171 	.word	0x08001171
 800113c:	08001171 	.word	0x08001171
 8001140:	08001171 	.word	0x08001171
 8001144:	08001167 	.word	0x08001167

	case TIM_CHANNEL_1 :
		htim_X->Instance->CCR1 = 0;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2200      	movs	r2, #0
 800114e:	635a      	str	r2, [r3, #52]	@ 0x34
	break;
 8001150:	e00e      	b.n	8001170 <PassiveBuzz_OFF+0x74>

	case TIM_CHANNEL_2 :
		htim_X->Instance->CCR2 = 0;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2200      	movs	r2, #0
 8001158:	639a      	str	r2, [r3, #56]	@ 0x38
	break;
 800115a:	e009      	b.n	8001170 <PassiveBuzz_OFF+0x74>

	case TIM_CHANNEL_3 :
		htim_X->Instance->CCR3 = 0;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2200      	movs	r2, #0
 8001162:	63da      	str	r2, [r3, #60]	@ 0x3c
	break;
 8001164:	e004      	b.n	8001170 <PassiveBuzz_OFF+0x74>

	case TIM_CHANNEL_4 :
		htim_X->Instance->CCR4 = 0;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2200      	movs	r2, #0
 800116c:	641a      	str	r2, [r3, #64]	@ 0x40
	break;
 800116e:	bf00      	nop
	}
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <PassiveBuzz_Init>:
 * @param  : htim_X        : it's set by &htimX. X is the number of timers
 * @param  : PWM_Channel_X :  it's set by TIM_CHANNEL_X . X is the number of timer's channels
 * @param  : Buzzer_Frequency : it's necessary to calculate PSC value, it is recommended to look at product datasheet
 * @retval : None
 */
void PassiveBuzz_Init(TIM_HandleTypeDef *htim_X, uint32_t PWM_Channel_X){
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]

	switch (PWM_Channel_X){
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	2b0c      	cmp	r3, #12
 800118a:	d831      	bhi.n	80011f0 <PassiveBuzz_Init+0x74>
 800118c:	a201      	add	r2, pc, #4	@ (adr r2, 8001194 <PassiveBuzz_Init+0x18>)
 800118e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001192:	bf00      	nop
 8001194:	080011c9 	.word	0x080011c9
 8001198:	080011f1 	.word	0x080011f1
 800119c:	080011f1 	.word	0x080011f1
 80011a0:	080011f1 	.word	0x080011f1
 80011a4:	080011d3 	.word	0x080011d3
 80011a8:	080011f1 	.word	0x080011f1
 80011ac:	080011f1 	.word	0x080011f1
 80011b0:	080011f1 	.word	0x080011f1
 80011b4:	080011dd 	.word	0x080011dd
 80011b8:	080011f1 	.word	0x080011f1
 80011bc:	080011f1 	.word	0x080011f1
 80011c0:	080011f1 	.word	0x080011f1
 80011c4:	080011e7 	.word	0x080011e7
	case TIM_CHANNEL_1 :
		   htim_X->Instance->CCR1 = 0;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2200      	movs	r2, #0
 80011ce:	635a      	str	r2, [r3, #52]	@ 0x34
	break;
 80011d0:	e00e      	b.n	80011f0 <PassiveBuzz_Init+0x74>

	case TIM_CHANNEL_2 :
		   htim_X->Instance->CCR2 = 0;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2200      	movs	r2, #0
 80011d8:	639a      	str	r2, [r3, #56]	@ 0x38
	break;
 80011da:	e009      	b.n	80011f0 <PassiveBuzz_Init+0x74>

	case TIM_CHANNEL_3 :
		   htim_X->Instance->CCR3 = 0;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2200      	movs	r2, #0
 80011e2:	63da      	str	r2, [r3, #60]	@ 0x3c
	break;
 80011e4:	e004      	b.n	80011f0 <PassiveBuzz_Init+0x74>

	case TIM_CHANNEL_4 :
		   htim_X->Instance->CCR4 = 0;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2200      	movs	r2, #0
 80011ec:	641a      	str	r2, [r3, #64]	@ 0x40
	break;
 80011ee:	bf00      	nop
	}

	HAL_TIM_PWM_Start(htim_X, PWM_Channel_X);
 80011f0:	6839      	ldr	r1, [r7, #0]
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f007 fb8e 	bl	8008914 <HAL_TIM_PWM_Start>

	PassiveBuzz_ON(htim_X, PWM_Channel_X);
 80011f8:	6839      	ldr	r1, [r7, #0]
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff fefa 	bl	8000ff4 <PassiveBuzz_ON>
	HAL_Delay(1000);
 8001200:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001204:	f002 fdfe 	bl	8003e04 <HAL_Delay>
	PassiveBuzz_OFF(htim_X, PWM_Channel_X);
 8001208:	6839      	ldr	r1, [r7, #0]
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ff76 	bl	80010fc <PassiveBuzz_OFF>
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <SD_FillVariables>:
extern float GPS_Latitude;				/*! Location info of satellite on the earth 	 */

extern float BatteryVoltage;


void SD_FillVariables(void){
 8001218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800121c:	b09d      	sub	sp, #116	@ 0x74
 800121e:	af12      	add	r7, sp, #72	@ 0x48

    	SD_Data.Carr_Pressure 	 = MS5611_Press;  // there will be "MS5611_Press" instead of "101325.12"
 8001220:	4b48      	ldr	r3, [pc, #288]	@ (8001344 <SD_FillVariables+0x12c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a48      	ldr	r2, [pc, #288]	@ (8001348 <SD_FillVariables+0x130>)
 8001226:	6013      	str	r3, [r2, #0]
    	SD_Data.Carr_Temperature = MS5611_Temp;
 8001228:	4b48      	ldr	r3, [pc, #288]	@ (800134c <SD_FillVariables+0x134>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a46      	ldr	r2, [pc, #280]	@ (8001348 <SD_FillVariables+0x130>)
 800122e:	60d3      	str	r3, [r2, #12]
    	SD_Data.Carr_VertHeight  = MS5611_Altitude;
 8001230:	4b47      	ldr	r3, [pc, #284]	@ (8001350 <SD_FillVariables+0x138>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a44      	ldr	r2, [pc, #272]	@ (8001348 <SD_FillVariables+0x130>)
 8001236:	6093      	str	r3, [r2, #8]
    	SD_Data.Carr_VertSpeed 	 =  MS5611_VertSpeed;
 8001238:	4b46      	ldr	r3, [pc, #280]	@ (8001354 <SD_FillVariables+0x13c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a42      	ldr	r2, [pc, #264]	@ (8001348 <SD_FillVariables+0x130>)
 800123e:	6053      	str	r3, [r2, #4]

    	SD_Data.Carr_GPS_Latitude  = GPS_Latitude;
 8001240:	4b45      	ldr	r3, [pc, #276]	@ (8001358 <SD_FillVariables+0x140>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a40      	ldr	r2, [pc, #256]	@ (8001348 <SD_FillVariables+0x130>)
 8001246:	6153      	str	r3, [r2, #20]
    	SD_Data.Carr_GPS_Longitude = GPS_Longitude;
 8001248:	4b44      	ldr	r3, [pc, #272]	@ (800135c <SD_FillVariables+0x144>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a3e      	ldr	r2, [pc, #248]	@ (8001348 <SD_FillVariables+0x130>)
 800124e:	6193      	str	r3, [r2, #24]
    	SD_Data.Carr_GPS_Altitude  = GPS_Altitude;
 8001250:	4b43      	ldr	r3, [pc, #268]	@ (8001360 <SD_FillVariables+0x148>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a3c      	ldr	r2, [pc, #240]	@ (8001348 <SD_FillVariables+0x130>)
 8001256:	61d3      	str	r3, [r2, #28]

    	SD_Data.Carr_gForce		   = MS5611_gForce;
 8001258:	4b42      	ldr	r3, [pc, #264]	@ (8001364 <SD_FillVariables+0x14c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a3a      	ldr	r2, [pc, #232]	@ (8001348 <SD_FillVariables+0x130>)
 800125e:	6213      	str	r3, [r2, #32]
    	SD_Data.Carr_Voltage   	   = BatteryVoltage;
 8001260:	4b41      	ldr	r3, [pc, #260]	@ (8001368 <SD_FillVariables+0x150>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a38      	ldr	r2, [pc, #224]	@ (8001348 <SD_FillVariables+0x130>)
 8001266:	6113      	str	r3, [r2, #16]
    	SD_Data.Carr_PacketNO 	  += 1;
 8001268:	4b37      	ldr	r3, [pc, #220]	@ (8001348 <SD_FillVariables+0x130>)
 800126a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800126c:	3301      	adds	r3, #1
 800126e:	b29a      	uxth	r2, r3
 8001270:	4b35      	ldr	r3, [pc, #212]	@ (8001348 <SD_FillVariables+0x130>)
 8001272:	849a      	strh	r2, [r3, #36]	@ 0x24

    	sprintf(SdDatasBuf,"<%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>\n",
																											 SD_Data.Carr_PacketNO     ,SD_Data.Carr_Pressure	,
 8001274:	4b34      	ldr	r3, [pc, #208]	@ (8001348 <SD_FillVariables+0x130>)
 8001276:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
    	sprintf(SdDatasBuf,"<%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>\n",
 8001278:	461e      	mov	r6, r3
																											 SD_Data.Carr_PacketNO     ,SD_Data.Carr_Pressure	,
 800127a:	4b33      	ldr	r3, [pc, #204]	@ (8001348 <SD_FillVariables+0x130>)
 800127c:	681b      	ldr	r3, [r3, #0]
    	sprintf(SdDatasBuf,"<%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>\n",
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f96a 	bl	8000558 <__aeabi_f2d>
 8001284:	e9c7 0108 	strd	r0, r1, [r7, #32]
																											 SD_Data.Carr_Temperature  ,SD_Data.Carr_VertHeight  ,
 8001288:	4b2f      	ldr	r3, [pc, #188]	@ (8001348 <SD_FillVariables+0x130>)
 800128a:	68db      	ldr	r3, [r3, #12]
    	sprintf(SdDatasBuf,"<%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>\n",
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f963 	bl	8000558 <__aeabi_f2d>
 8001292:	e9c7 0106 	strd	r0, r1, [r7, #24]
																											 SD_Data.Carr_Temperature  ,SD_Data.Carr_VertHeight  ,
 8001296:	4b2c      	ldr	r3, [pc, #176]	@ (8001348 <SD_FillVariables+0x130>)
 8001298:	689b      	ldr	r3, [r3, #8]
    	sprintf(SdDatasBuf,"<%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>\n",
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f95c 	bl	8000558 <__aeabi_f2d>
 80012a0:	e9c7 0104 	strd	r0, r1, [r7, #16]
																											 SD_Data.Carr_VertSpeed    ,SD_Data.Carr_gForce		,
 80012a4:	4b28      	ldr	r3, [pc, #160]	@ (8001348 <SD_FillVariables+0x130>)
 80012a6:	685b      	ldr	r3, [r3, #4]
    	sprintf(SdDatasBuf,"<%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>\n",
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f955 	bl	8000558 <__aeabi_f2d>
 80012ae:	e9c7 0102 	strd	r0, r1, [r7, #8]
																											 SD_Data.Carr_VertSpeed    ,SD_Data.Carr_gForce		,
 80012b2:	4b25      	ldr	r3, [pc, #148]	@ (8001348 <SD_FillVariables+0x130>)
 80012b4:	6a1b      	ldr	r3, [r3, #32]
    	sprintf(SdDatasBuf,"<%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>\n",
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f94e 	bl	8000558 <__aeabi_f2d>
 80012bc:	e9c7 0100 	strd	r0, r1, [r7]
																											 SD_Data.Carr_GPS_Latitude ,SD_Data.Carr_GPS_Longitude,
 80012c0:	4b21      	ldr	r3, [pc, #132]	@ (8001348 <SD_FillVariables+0x130>)
 80012c2:	695b      	ldr	r3, [r3, #20]
    	sprintf(SdDatasBuf,"<%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>\n",
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff f947 	bl	8000558 <__aeabi_f2d>
 80012ca:	4682      	mov	sl, r0
 80012cc:	468b      	mov	fp, r1
																											 SD_Data.Carr_GPS_Latitude ,SD_Data.Carr_GPS_Longitude,
 80012ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001348 <SD_FillVariables+0x130>)
 80012d0:	699b      	ldr	r3, [r3, #24]
    	sprintf(SdDatasBuf,"<%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>\n",
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f940 	bl	8000558 <__aeabi_f2d>
 80012d8:	4680      	mov	r8, r0
 80012da:	4689      	mov	r9, r1
																											 SD_Data.Carr_GPS_Altitude ,SD_Data.Carr_Voltage);
 80012dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001348 <SD_FillVariables+0x130>)
 80012de:	69db      	ldr	r3, [r3, #28]
    	sprintf(SdDatasBuf,"<%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>\n",
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f939 	bl	8000558 <__aeabi_f2d>
 80012e6:	4604      	mov	r4, r0
 80012e8:	460d      	mov	r5, r1
																											 SD_Data.Carr_GPS_Altitude ,SD_Data.Carr_Voltage);
 80012ea:	4b17      	ldr	r3, [pc, #92]	@ (8001348 <SD_FillVariables+0x130>)
 80012ec:	691b      	ldr	r3, [r3, #16]
    	sprintf(SdDatasBuf,"<%d>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>, <%.2f>\n",
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f932 	bl	8000558 <__aeabi_f2d>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80012fc:	e9cd 450e 	strd	r4, r5, [sp, #56]	@ 0x38
 8001300:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 8001304:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 8001308:	ed97 7b00 	vldr	d7, [r7]
 800130c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001310:	ed97 7b02 	vldr	d7, [r7, #8]
 8001314:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001318:	ed97 7b04 	vldr	d7, [r7, #16]
 800131c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001320:	ed97 7b06 	vldr	d7, [r7, #24]
 8001324:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001328:	ed97 7b08 	vldr	d7, [r7, #32]
 800132c:	ed8d 7b00 	vstr	d7, [sp]
 8001330:	4632      	mov	r2, r6
 8001332:	490e      	ldr	r1, [pc, #56]	@ (800136c <SD_FillVariables+0x154>)
 8001334:	480e      	ldr	r0, [pc, #56]	@ (8001370 <SD_FillVariables+0x158>)
 8001336:	f00d fab3 	bl	800e8a0 <siprintf>




}
 800133a:	bf00      	nop
 800133c:	372c      	adds	r7, #44	@ 0x2c
 800133e:	46bd      	mov	sp, r7
 8001340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001344:	2000296c 	.word	0x2000296c
 8001348:	20002274 	.word	0x20002274
 800134c:	20002970 	.word	0x20002970
 8001350:	20002974 	.word	0x20002974
 8001354:	20002978 	.word	0x20002978
 8001358:	20002998 	.word	0x20002998
 800135c:	20002994 	.word	0x20002994
 8001360:	20002990 	.word	0x20002990
 8001364:	20002980 	.word	0x20002980
 8001368:	2000298c 	.word	0x2000298c
 800136c:	080138d8 	.word	0x080138d8
 8001370:	2000229c 	.word	0x2000229c

08001374 <SD_Mount>:


FRESULT SD_Mount (const TCHAR* SD_path, BYTE Mount_Op)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	70fb      	strb	r3, [r7, #3]

	SD_result = f_mount(&FATFS_Ob, SD_path, Mount_Op);
 8001380:	78fb      	ldrb	r3, [r7, #3]
 8001382:	461a      	mov	r2, r3
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	4808      	ldr	r0, [pc, #32]	@ (80013a8 <SD_Mount+0x34>)
 8001388:	f00b fd3a 	bl	800ce00 <f_mount>
 800138c:	4603      	mov	r3, r0
 800138e:	461a      	mov	r2, r3
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <SD_Mount+0x38>)
 8001392:	701a      	strb	r2, [r3, #0]

	if(SD_result != FR_OK){
 8001394:	4b05      	ldr	r3, [pc, #20]	@ (80013ac <SD_Mount+0x38>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d101      	bne.n	80013a0 <SD_Mount+0x2c>
		 */
		//while(1);
	}
	else{

		return FR_OK;
 800139c:	2300      	movs	r3, #0
 800139e:	e7ff      	b.n	80013a0 <SD_Mount+0x2c>

	}
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	2000020c 	.word	0x2000020c
 80013ac:	20002270 	.word	0x20002270

080013b0 <SD_Create_Dir_File>:


FRESULT SD_Create_Dir_File(const TCHAR* SD_Dir,const TCHAR* SD_FileName,char* SD_Buffer){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]

	SD_result = f_mkdir(SD_Dir);
 80013bc:	68f8      	ldr	r0, [r7, #12]
 80013be:	f00c f969 	bl	800d694 <f_mkdir>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001438 <SD_Create_Dir_File+0x88>)
 80013c8:	701a      	strb	r2, [r3, #0]

	if((SD_result != FR_OK)&&(SD_result != FR_EXIST)){
 80013ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001438 <SD_Create_Dir_File+0x88>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d005      	beq.n	80013de <SD_Create_Dir_File+0x2e>
 80013d2:	4b19      	ldr	r3, [pc, #100]	@ (8001438 <SD_Create_Dir_File+0x88>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	d001      	beq.n	80013de <SD_Create_Dir_File+0x2e>
		/**
		 * Buzzer will be activated like biiip biip bip
		 */
		while(1);
 80013da:	bf00      	nop
 80013dc:	e7fd      	b.n	80013da <SD_Create_Dir_File+0x2a>
	}
	else{

		SD_result = f_open(&FilePage, SD_FileName, FA_CREATE_ALWAYS | FA_WRITE);
 80013de:	220a      	movs	r2, #10
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	4816      	ldr	r0, [pc, #88]	@ (800143c <SD_Create_Dir_File+0x8c>)
 80013e4:	f00b fd52 	bl	800ce8c <f_open>
 80013e8:	4603      	mov	r3, r0
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <SD_Create_Dir_File+0x88>)
 80013ee:	701a      	strb	r2, [r3, #0]
		SD_result = f_close(&FilePage);
 80013f0:	4812      	ldr	r0, [pc, #72]	@ (800143c <SD_Create_Dir_File+0x8c>)
 80013f2:	f00c f925 	bl	800d640 <f_close>
 80013f6:	4603      	mov	r3, r0
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001438 <SD_Create_Dir_File+0x88>)
 80013fc:	701a      	strb	r2, [r3, #0]

		sprintf(SD_Buffer,"%s\n",DataTopFrame);
 80013fe:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <SD_Create_Dir_File+0x90>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	490f      	ldr	r1, [pc, #60]	@ (8001444 <SD_Create_Dir_File+0x94>)
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f00d fa4a 	bl	800e8a0 <siprintf>
		SD_Write(SD_Buffer,"SAT_CAR/STM32.TXT");
 800140c:	490e      	ldr	r1, [pc, #56]	@ (8001448 <SD_Create_Dir_File+0x98>)
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 f81c 	bl	800144c <SD_Write>

		if(SD_result != FR_OK){
 8001414:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <SD_Create_Dir_File+0x88>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SD_Create_Dir_File+0x70>
				/**
				 * Send to ground station error message
			     */
				while(1);
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <SD_Create_Dir_File+0x6c>
			}
		SD_result = f_close(&FilePage); //invalid object hatası verdi
 8001420:	4806      	ldr	r0, [pc, #24]	@ (800143c <SD_Create_Dir_File+0x8c>)
 8001422:	f00c f90d 	bl	800d640 <f_close>
 8001426:	4603      	mov	r3, r0
 8001428:	461a      	mov	r2, r3
 800142a:	4b03      	ldr	r3, [pc, #12]	@ (8001438 <SD_Create_Dir_File+0x88>)
 800142c:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800142e:	2300      	movs	r3, #0
	}

}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20002270 	.word	0x20002270
 800143c:	20001240 	.word	0x20001240
 8001440:	20000000 	.word	0x20000000
 8001444:	08013928 	.word	0x08013928
 8001448:	0801392c 	.word	0x0801392c

0800144c <SD_Write>:


FRESULT SD_Write(char* SD_Buffer,const TCHAR* SD_FileName){
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]

	UINT written;

	SD_result = f_open(&FilePage, SD_FileName, FA_OPEN_APPEND | FA_WRITE);
 8001456:	2232      	movs	r2, #50	@ 0x32
 8001458:	6839      	ldr	r1, [r7, #0]
 800145a:	4810      	ldr	r0, [pc, #64]	@ (800149c <SD_Write+0x50>)
 800145c:	f00b fd16 	bl	800ce8c <f_open>
 8001460:	4603      	mov	r3, r0
 8001462:	461a      	mov	r2, r3
 8001464:	4b0e      	ldr	r3, [pc, #56]	@ (80014a0 <SD_Write+0x54>)
 8001466:	701a      	strb	r2, [r3, #0]

	SD_result =  f_write(&FilePage,SD_Buffer,strlen(SD_Buffer),&written);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7fe ff09 	bl	8000280 <strlen>
 800146e:	4602      	mov	r2, r0
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	4809      	ldr	r0, [pc, #36]	@ (800149c <SD_Write+0x50>)
 8001478:	f00b fed0 	bl	800d21c <f_write>
 800147c:	4603      	mov	r3, r0
 800147e:	461a      	mov	r2, r3
 8001480:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <SD_Write+0x54>)
 8001482:	701a      	strb	r2, [r3, #0]

	SD_result = f_close(&FilePage);
 8001484:	4805      	ldr	r0, [pc, #20]	@ (800149c <SD_Write+0x50>)
 8001486:	f00c f8db 	bl	800d640 <f_close>
 800148a:	4603      	mov	r3, r0
 800148c:	461a      	mov	r2, r3
 800148e:	4b04      	ldr	r3, [pc, #16]	@ (80014a0 <SD_Write+0x54>)
 8001490:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20001240 	.word	0x20001240
 80014a0:	20002270 	.word	0x20002270
 80014a4:	00000000 	.word	0x00000000

080014a8 <MeasBattery_Init>:
float maxVoltage;
float CriticalVoltageLimit;
float ConstantOfVoltage;
float MinLimitVoltage;

void  MeasBattery_Init(int NumSerialBat){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

	maxVoltage = NumSerialBat * 4.2 ;
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff f83f 	bl	8000534 <__aeabi_i2d>
 80014b6:	a322      	add	r3, pc, #136	@ (adr r3, 8001540 <MeasBattery_Init+0x98>)
 80014b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014bc:	f7ff f8a4 	bl	8000608 <__aeabi_dmul>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	f7ff fb96 	bl	8000bf8 <__aeabi_d2f>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4a18      	ldr	r2, [pc, #96]	@ (8001530 <MeasBattery_Init+0x88>)
 80014d0:	6013      	str	r3, [r2, #0]

	ConstantOfVoltage = maxVoltage / ConstantOfReferanceVoltage;
 80014d2:	4b17      	ldr	r3, [pc, #92]	@ (8001530 <MeasBattery_Init+0x88>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f83e 	bl	8000558 <__aeabi_f2d>
 80014dc:	a312      	add	r3, pc, #72	@ (adr r3, 8001528 <MeasBattery_Init+0x80>)
 80014de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e2:	f7ff f9bb 	bl	800085c <__aeabi_ddiv>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	f7ff fb83 	bl	8000bf8 <__aeabi_d2f>
 80014f2:	4603      	mov	r3, r0
 80014f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001534 <MeasBattery_Init+0x8c>)
 80014f6:	6013      	str	r3, [r2, #0]

	MinLimitVoltage = 3.5 * NumSerialBat;
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff f81b 	bl	8000534 <__aeabi_i2d>
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	4b0d      	ldr	r3, [pc, #52]	@ (8001538 <MeasBattery_Init+0x90>)
 8001504:	f7ff f880 	bl	8000608 <__aeabi_dmul>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	f7ff fb72 	bl	8000bf8 <__aeabi_d2f>
 8001514:	4603      	mov	r3, r0
 8001516:	4a09      	ldr	r2, [pc, #36]	@ (800153c <MeasBattery_Init+0x94>)
 8001518:	6013      	str	r3, [r2, #0]

}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	f3af 8000 	nop.w
 8001528:	66666666 	.word	0x66666666
 800152c:	400a6666 	.word	0x400a6666
 8001530:	20002480 	.word	0x20002480
 8001534:	20002484 	.word	0x20002484
 8001538:	400c0000 	.word	0x400c0000
 800153c:	20002488 	.word	0x20002488
 8001540:	cccccccd 	.word	0xcccccccd
 8001544:	4010cccc 	.word	0x4010cccc

08001548 <ReadBatteryVoltage>:
 * @brief Read value of battery voltage by using ADC
 * @param hadc
 * @retval Value of Battery Voltage
 */

float ReadBatteryVoltage(ADC_HandleTypeDef *hadc){
 8001548:	b5b0      	push	{r4, r5, r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

   HAL_ADC_Start(hadc);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f002 fcbf 	bl	8003ed4 <HAL_ADC_Start>

   if(HAL_ADC_PollForConversion(hadc, 1000)==HAL_OK)
 8001556:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f002 fda1 	bl	80040a2 <HAL_ADC_PollForConversion>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d131      	bne.n	80015ca <ReadBatteryVoltage+0x82>
   {

      Value_ADC = HAL_ADC_GetValue(hadc);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f002 fe26 	bl	80041b8 <HAL_ADC_GetValue>
 800156c:	4603      	mov	r3, r0
 800156e:	b29a      	uxth	r2, r3
 8001570:	4b1f      	ldr	r3, [pc, #124]	@ (80015f0 <ReadBatteryVoltage+0xa8>)
 8001572:	801a      	strh	r2, [r3, #0]
      BatteryVoltage = (Value_ADC * (ConstantOfReferanceVoltage / ResolationValueOfBits)  *  ConstantOfVoltage) + 1;
 8001574:	4b1e      	ldr	r3, [pc, #120]	@ (80015f0 <ReadBatteryVoltage+0xa8>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe ffdb 	bl	8000534 <__aeabi_i2d>
 800157e:	a31a      	add	r3, pc, #104	@ (adr r3, 80015e8 <ReadBatteryVoltage+0xa0>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f840 	bl	8000608 <__aeabi_dmul>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4614      	mov	r4, r2
 800158e:	461d      	mov	r5, r3
 8001590:	4b18      	ldr	r3, [pc, #96]	@ (80015f4 <ReadBatteryVoltage+0xac>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ffdf 	bl	8000558 <__aeabi_f2d>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4620      	mov	r0, r4
 80015a0:	4629      	mov	r1, r5
 80015a2:	f7ff f831 	bl	8000608 <__aeabi_dmul>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4610      	mov	r0, r2
 80015ac:	4619      	mov	r1, r3
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <ReadBatteryVoltage+0xb0>)
 80015b4:	f7fe fe72 	bl	800029c <__adddf3>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	f7ff fb1a 	bl	8000bf8 <__aeabi_d2f>
 80015c4:	4603      	mov	r3, r0
 80015c6:	4a0d      	ldr	r2, [pc, #52]	@ (80015fc <ReadBatteryVoltage+0xb4>)
 80015c8:	6013      	str	r3, [r2, #0]
        	//while(1);
         }

   }

   HAL_ADC_Stop(hadc);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f002 fd36 	bl	800403c <HAL_ADC_Stop>
   return BatteryVoltage;
 80015d0:	4b0a      	ldr	r3, [pc, #40]	@ (80015fc <ReadBatteryVoltage+0xb4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	ee07 3a90 	vmov	s15, r3
}
 80015d8:	eeb0 0a67 	vmov.f32	s0, s15
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bdb0      	pop	{r4, r5, r7, pc}
 80015e2:	bf00      	nop
 80015e4:	f3af 8000 	nop.w
 80015e8:	e734d9b4 	.word	0xe734d9b4
 80015ec:	3f4a680c 	.word	0x3f4a680c
 80015f0:	2000247c 	.word	0x2000247c
 80015f4:	20002484 	.word	0x20002484
 80015f8:	3ff00000 	.word	0x3ff00000
 80015fc:	2000298c 	.word	0x2000298c

08001600 <GPS_Init>:

extern float GPS_Altitude;				/*! Vertical distance info of satellite beetween */
extern float GPS_Longitude;				/*! Location info of satellite on the earth 	 */
extern float GPS_Latitude;				/*! Location info of satellite on the earth 	 */
void GPS_Init()
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001604:	2201      	movs	r2, #1
 8001606:	4903      	ldr	r1, [pc, #12]	@ (8001614 <GPS_Init+0x14>)
 8001608:	4803      	ldr	r0, [pc, #12]	@ (8001618 <GPS_Init+0x18>)
 800160a:	f007 fece 	bl	80093aa <HAL_UART_Receive_IT>
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	2000248c 	.word	0x2000248c
 8001618:	20002874 	.word	0x20002874

0800161c <GPS_UART_CallBack>:


void GPS_UART_CallBack(){
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8001620:	4b16      	ldr	r3, [pc, #88]	@ (800167c <GPS_UART_CallBack+0x60>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b0a      	cmp	r3, #10
 8001626:	d010      	beq.n	800164a <GPS_UART_CallBack+0x2e>
 8001628:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <GPS_UART_CallBack+0x64>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	b25b      	sxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	db0b      	blt.n	800164a <GPS_UART_CallBack+0x2e>
		rx_buffer[rx_index++] = rx_data;
 8001632:	4b13      	ldr	r3, [pc, #76]	@ (8001680 <GPS_UART_CallBack+0x64>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	1c5a      	adds	r2, r3, #1
 8001638:	b2d1      	uxtb	r1, r2
 800163a:	4a11      	ldr	r2, [pc, #68]	@ (8001680 <GPS_UART_CallBack+0x64>)
 800163c:	7011      	strb	r1, [r2, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	4b0e      	ldr	r3, [pc, #56]	@ (800167c <GPS_UART_CallBack+0x60>)
 8001642:	7819      	ldrb	r1, [r3, #0]
 8001644:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <GPS_UART_CallBack+0x68>)
 8001646:	5499      	strb	r1, [r3, r2]
 8001648:	e010      	b.n	800166c <GPS_UART_CallBack+0x50>
	} else {

		if(GPS_validate((char*) rx_buffer))
 800164a:	480e      	ldr	r0, [pc, #56]	@ (8001684 <GPS_UART_CallBack+0x68>)
 800164c:	f000 f81e 	bl	800168c <GPS_validate>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d002      	beq.n	800165c <GPS_UART_CallBack+0x40>
			GPS_parse((char*) rx_buffer);
 8001656:	480b      	ldr	r0, [pc, #44]	@ (8001684 <GPS_UART_CallBack+0x68>)
 8001658:	f000 f87a 	bl	8001750 <GPS_parse>
		rx_index = 0;
 800165c:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <GPS_UART_CallBack+0x64>)
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 8001662:	2280      	movs	r2, #128	@ 0x80
 8001664:	2100      	movs	r1, #0
 8001666:	4807      	ldr	r0, [pc, #28]	@ (8001684 <GPS_UART_CallBack+0x68>)
 8001668:	f00d fa3e 	bl	800eae8 <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 800166c:	2201      	movs	r2, #1
 800166e:	4903      	ldr	r1, [pc, #12]	@ (800167c <GPS_UART_CallBack+0x60>)
 8001670:	4805      	ldr	r0, [pc, #20]	@ (8001688 <GPS_UART_CallBack+0x6c>)
 8001672:	f007 fe9a 	bl	80093aa <HAL_UART_Receive_IT>
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	2000248c 	.word	0x2000248c
 8001680:	20002510 	.word	0x20002510
 8001684:	20002490 	.word	0x20002490
 8001688:	20002874 	.word	0x20002874

0800168c <GPS_validate>:


int GPS_validate(char *nmeastr){
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8001698:	2300      	movs	r3, #0
 800169a:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b24      	cmp	r3, #36	@ 0x24
 80016a6:	d103      	bne.n	80016b0 <GPS_validate+0x24>
        i++;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	3301      	adds	r3, #1
 80016ac:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80016ae:	e00c      	b.n	80016ca <GPS_validate+0x3e>
        return 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	e047      	b.n	8001744 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	4053      	eors	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        i++;
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	3301      	adds	r3, #1
 80016c8:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	4413      	add	r3, r2
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d008      	beq.n	80016e8 <GPS_validate+0x5c>
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	4413      	add	r3, r2
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b2a      	cmp	r3, #42	@ 0x2a
 80016e0:	d002      	beq.n	80016e8 <GPS_validate+0x5c>
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	2b4a      	cmp	r3, #74	@ 0x4a
 80016e6:	dde5      	ble.n	80016b4 <GPS_validate+0x28>
    }

    if(i >= 75){
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	2b4a      	cmp	r3, #74	@ 0x4a
 80016ec:	dd01      	ble.n	80016f2 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80016ee:	2300      	movs	r3, #0
 80016f0:	e028      	b.n	8001744 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	4413      	add	r3, r2
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80016fc:	d119      	bne.n	8001732 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	3301      	adds	r3, #1
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	3302      	adds	r3, #2
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 800171a:	f107 0308 	add.w	r3, r7, #8
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	490a      	ldr	r1, [pc, #40]	@ (800174c <GPS_validate+0xc0>)
 8001722:	4618      	mov	r0, r3
 8001724:	f00d f8bc 	bl	800e8a0 <siprintf>
    return((checkcalcstr[0] == check[0])
 8001728:	7a3a      	ldrb	r2, [r7, #8]
 800172a:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800172c:	429a      	cmp	r2, r3
 800172e:	d108      	bne.n	8001742 <GPS_validate+0xb6>
 8001730:	e001      	b.n	8001736 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8001732:	2300      	movs	r3, #0
 8001734:	e006      	b.n	8001744 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001736:	7a7a      	ldrb	r2, [r7, #9]
 8001738:	7b7b      	ldrb	r3, [r7, #13]
 800173a:	429a      	cmp	r2, r3
 800173c:	d101      	bne.n	8001742 <GPS_validate+0xb6>
 800173e:	2301      	movs	r3, #1
 8001740:	e000      	b.n	8001744 <GPS_validate+0xb8>
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	08013940 	.word	0x08013940

08001750 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	@ 0x28
 8001754:	af08      	add	r7, sp, #32
 8001756:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8001758:	2206      	movs	r2, #6
 800175a:	4950      	ldr	r1, [pc, #320]	@ (800189c <GPS_parse+0x14c>)
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f00d f9cb 	bl	800eaf8 <strncmp>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d143      	bne.n	80017f0 <GPS_parse+0xa0>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8001768:	4b4d      	ldr	r3, [pc, #308]	@ (80018a0 <GPS_parse+0x150>)
 800176a:	9307      	str	r3, [sp, #28]
 800176c:	4b4d      	ldr	r3, [pc, #308]	@ (80018a4 <GPS_parse+0x154>)
 800176e:	9306      	str	r3, [sp, #24]
 8001770:	4b4d      	ldr	r3, [pc, #308]	@ (80018a8 <GPS_parse+0x158>)
 8001772:	9305      	str	r3, [sp, #20]
 8001774:	4b4d      	ldr	r3, [pc, #308]	@ (80018ac <GPS_parse+0x15c>)
 8001776:	9304      	str	r3, [sp, #16]
 8001778:	4b4d      	ldr	r3, [pc, #308]	@ (80018b0 <GPS_parse+0x160>)
 800177a:	9303      	str	r3, [sp, #12]
 800177c:	4b4d      	ldr	r3, [pc, #308]	@ (80018b4 <GPS_parse+0x164>)
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	4b4d      	ldr	r3, [pc, #308]	@ (80018b8 <GPS_parse+0x168>)
 8001782:	9301      	str	r3, [sp, #4]
 8001784:	4b4d      	ldr	r3, [pc, #308]	@ (80018bc <GPS_parse+0x16c>)
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	4b4d      	ldr	r3, [pc, #308]	@ (80018c0 <GPS_parse+0x170>)
 800178a:	4a4e      	ldr	r2, [pc, #312]	@ (80018c4 <GPS_parse+0x174>)
 800178c:	494e      	ldr	r1, [pc, #312]	@ (80018c8 <GPS_parse+0x178>)
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f00d f8a6 	bl	800e8e0 <siscanf>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	dd7c      	ble.n	8001894 <GPS_parse+0x144>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800179a:	4b4c      	ldr	r3, [pc, #304]	@ (80018cc <GPS_parse+0x17c>)
 800179c:	edd3 7a04 	vldr	s15, [r3, #16]
 80017a0:	4b4a      	ldr	r3, [pc, #296]	@ (80018cc <GPS_parse+0x17c>)
 80017a2:	7e1b      	ldrb	r3, [r3, #24]
 80017a4:	4618      	mov	r0, r3
 80017a6:	eeb0 0a67 	vmov.f32	s0, s15
 80017aa:	f000 f8b9 	bl	8001920 <GPS_nmea_to_dec>
 80017ae:	eef0 7a40 	vmov.f32	s15, s0
 80017b2:	4b46      	ldr	r3, [pc, #280]	@ (80018cc <GPS_parse+0x17c>)
 80017b4:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80017b8:	4b44      	ldr	r3, [pc, #272]	@ (80018cc <GPS_parse+0x17c>)
 80017ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80017be:	4b43      	ldr	r3, [pc, #268]	@ (80018cc <GPS_parse+0x17c>)
 80017c0:	7e5b      	ldrb	r3, [r3, #25]
 80017c2:	4618      	mov	r0, r3
 80017c4:	eeb0 0a67 	vmov.f32	s0, s15
 80017c8:	f000 f8aa 	bl	8001920 <GPS_nmea_to_dec>
 80017cc:	eef0 7a40 	vmov.f32	s15, s0
 80017d0:	4b3e      	ldr	r3, [pc, #248]	@ (80018cc <GPS_parse+0x17c>)
 80017d2:	edc3 7a00 	vstr	s15, [r3]

    		GPS_Latitude = GPS.dec_latitude;
 80017d6:	4b3d      	ldr	r3, [pc, #244]	@ (80018cc <GPS_parse+0x17c>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4a3d      	ldr	r2, [pc, #244]	@ (80018d0 <GPS_parse+0x180>)
 80017dc:	6013      	str	r3, [r2, #0]
    		GPS_Longitude = GPS.dec_longitude;
 80017de:	4b3b      	ldr	r3, [pc, #236]	@ (80018cc <GPS_parse+0x17c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a3c      	ldr	r2, [pc, #240]	@ (80018d4 <GPS_parse+0x184>)
 80017e4:	6013      	str	r3, [r2, #0]
			GPS_Altitude = GPS.msl_altitude;
 80017e6:	4b39      	ldr	r3, [pc, #228]	@ (80018cc <GPS_parse+0x17c>)
 80017e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ea:	4a3b      	ldr	r2, [pc, #236]	@ (80018d8 <GPS_parse+0x188>)
 80017ec:	6013      	str	r3, [r2, #0]
    		return;
 80017ee:	e051      	b.n	8001894 <GPS_parse+0x144>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 80017f0:	2206      	movs	r2, #6
 80017f2:	493a      	ldr	r1, [pc, #232]	@ (80018dc <GPS_parse+0x18c>)
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f00d f97f 	bl	800eaf8 <strncmp>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d114      	bne.n	800182a <GPS_parse+0xda>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 8001800:	4b37      	ldr	r3, [pc, #220]	@ (80018e0 <GPS_parse+0x190>)
 8001802:	9305      	str	r3, [sp, #20]
 8001804:	4b37      	ldr	r3, [pc, #220]	@ (80018e4 <GPS_parse+0x194>)
 8001806:	9304      	str	r3, [sp, #16]
 8001808:	4b37      	ldr	r3, [pc, #220]	@ (80018e8 <GPS_parse+0x198>)
 800180a:	9303      	str	r3, [sp, #12]
 800180c:	4b29      	ldr	r3, [pc, #164]	@ (80018b4 <GPS_parse+0x164>)
 800180e:	9302      	str	r3, [sp, #8]
 8001810:	4b29      	ldr	r3, [pc, #164]	@ (80018b8 <GPS_parse+0x168>)
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	4b29      	ldr	r3, [pc, #164]	@ (80018bc <GPS_parse+0x16c>)
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	4b29      	ldr	r3, [pc, #164]	@ (80018c0 <GPS_parse+0x170>)
 800181a:	4a2a      	ldr	r2, [pc, #168]	@ (80018c4 <GPS_parse+0x174>)
 800181c:	4933      	ldr	r1, [pc, #204]	@ (80018ec <GPS_parse+0x19c>)
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f00d f85e 	bl	800e8e0 <siscanf>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	e034      	b.n	8001894 <GPS_parse+0x144>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 800182a:	2206      	movs	r2, #6
 800182c:	4930      	ldr	r1, [pc, #192]	@ (80018f0 <GPS_parse+0x1a0>)
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f00d f962 	bl	800eaf8 <strncmp>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d110      	bne.n	800185c <GPS_parse+0x10c>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 800183a:	4b2e      	ldr	r3, [pc, #184]	@ (80018f4 <GPS_parse+0x1a4>)
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	4b21      	ldr	r3, [pc, #132]	@ (80018c4 <GPS_parse+0x174>)
 8001840:	9302      	str	r3, [sp, #8]
 8001842:	4b1c      	ldr	r3, [pc, #112]	@ (80018b4 <GPS_parse+0x164>)
 8001844:	9301      	str	r3, [sp, #4]
 8001846:	4b1c      	ldr	r3, [pc, #112]	@ (80018b8 <GPS_parse+0x168>)
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	4b1c      	ldr	r3, [pc, #112]	@ (80018bc <GPS_parse+0x16c>)
 800184c:	4a1c      	ldr	r2, [pc, #112]	@ (80018c0 <GPS_parse+0x170>)
 800184e:	492a      	ldr	r1, [pc, #168]	@ (80018f8 <GPS_parse+0x1a8>)
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f00d f845 	bl	800e8e0 <siscanf>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	e01b      	b.n	8001894 <GPS_parse+0x144>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 800185c:	2206      	movs	r2, #6
 800185e:	4927      	ldr	r1, [pc, #156]	@ (80018fc <GPS_parse+0x1ac>)
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f00d f949 	bl	800eaf8 <strncmp>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d113      	bne.n	8001894 <GPS_parse+0x144>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 800186c:	4b24      	ldr	r3, [pc, #144]	@ (8001900 <GPS_parse+0x1b0>)
 800186e:	9305      	str	r3, [sp, #20]
 8001870:	4b24      	ldr	r3, [pc, #144]	@ (8001904 <GPS_parse+0x1b4>)
 8001872:	9304      	str	r3, [sp, #16]
 8001874:	4b24      	ldr	r3, [pc, #144]	@ (8001908 <GPS_parse+0x1b8>)
 8001876:	9303      	str	r3, [sp, #12]
 8001878:	4b1b      	ldr	r3, [pc, #108]	@ (80018e8 <GPS_parse+0x198>)
 800187a:	9302      	str	r3, [sp, #8]
 800187c:	4b23      	ldr	r3, [pc, #140]	@ (800190c <GPS_parse+0x1bc>)
 800187e:	9301      	str	r3, [sp, #4]
 8001880:	4b23      	ldr	r3, [pc, #140]	@ (8001910 <GPS_parse+0x1c0>)
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	4b23      	ldr	r3, [pc, #140]	@ (8001914 <GPS_parse+0x1c4>)
 8001886:	4a24      	ldr	r2, [pc, #144]	@ (8001918 <GPS_parse+0x1c8>)
 8001888:	4924      	ldr	r1, [pc, #144]	@ (800191c <GPS_parse+0x1cc>)
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f00d f828 	bl	800e8e0 <siscanf>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
            return;
    }
}
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	08013948 	.word	0x08013948
 80018a0:	20002540 	.word	0x20002540
 80018a4:	2000253c 	.word	0x2000253c
 80018a8:	20002538 	.word	0x20002538
 80018ac:	20002534 	.word	0x20002534
 80018b0:	20002530 	.word	0x20002530
 80018b4:	2000252d 	.word	0x2000252d
 80018b8:	20002520 	.word	0x20002520
 80018bc:	2000252c 	.word	0x2000252c
 80018c0:	20002524 	.word	0x20002524
 80018c4:	20002528 	.word	0x20002528
 80018c8:	08013950 	.word	0x08013950
 80018cc:	20002514 	.word	0x20002514
 80018d0:	20002998 	.word	0x20002998
 80018d4:	20002994 	.word	0x20002994
 80018d8:	20002990 	.word	0x20002990
 80018dc:	08013978 	.word	0x08013978
 80018e0:	2000254c 	.word	0x2000254c
 80018e4:	20002548 	.word	0x20002548
 80018e8:	20002544 	.word	0x20002544
 80018ec:	08013980 	.word	0x08013980
 80018f0:	080139a0 	.word	0x080139a0
 80018f4:	20002550 	.word	0x20002550
 80018f8:	080139a8 	.word	0x080139a8
 80018fc:	080139c4 	.word	0x080139c4
 8001900:	20002568 	.word	0x20002568
 8001904:	20002564 	.word	0x20002564
 8001908:	20002561 	.word	0x20002561
 800190c:	20002560 	.word	0x20002560
 8001910:	2000255c 	.word	0x2000255c
 8001914:	20002558 	.word	0x20002558
 8001918:	20002554 	.word	0x20002554
 800191c:	080139cc 	.word	0x080139cc

08001920 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001920:	b480      	push	{r7}
 8001922:	b087      	sub	sp, #28
 8001924:	af00      	add	r7, sp, #0
 8001926:	ed87 0a01 	vstr	s0, [r7, #4]
 800192a:	4603      	mov	r3, r0
 800192c:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 800192e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001932:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80019b4 <GPS_nmea_to_dec+0x94>
 8001936:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800193a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800193e:	ee17 3a90 	vmov	r3, s15
 8001942:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	2264      	movs	r2, #100	@ 0x64
 8001948:	fb02 f303 	mul.w	r3, r2, r3
 800194c:	ee07 3a90 	vmov	s15, r3
 8001950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001954:	ed97 7a01 	vldr	s14, [r7, #4]
 8001958:	ee77 7a67 	vsub.f32	s15, s14, s15
 800195c:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8001960:	ed97 7a03 	vldr	s14, [r7, #12]
 8001964:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80019b8 <GPS_nmea_to_dec+0x98>
 8001968:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800196c:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	ee07 3a90 	vmov	s15, r3
 8001976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800197a:	ed97 7a02 	vldr	s14, [r7, #8]
 800197e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001982:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	2b53      	cmp	r3, #83	@ 0x53
 800198a:	d002      	beq.n	8001992 <GPS_nmea_to_dec+0x72>
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	2b57      	cmp	r3, #87	@ 0x57
 8001990:	d105      	bne.n	800199e <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8001992:	edd7 7a05 	vldr	s15, [r7, #20]
 8001996:	eef1 7a67 	vneg.f32	s15, s15
 800199a:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	ee07 3a90 	vmov	s15, r3
}
 80019a4:	eeb0 0a67 	vmov.f32	s0, s15
 80019a8:	371c      	adds	r7, #28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	42c80000 	.word	0x42c80000
 80019b8:	42700000 	.word	0x42700000

080019bc <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
	GPS_UART_CallBack();
 80019c4:	f7ff fe2a 	bl	800161c <GPS_UART_CallBack>
   // do nothing here
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	4619      	mov	r1, r3
 80019de:	2007      	movs	r0, #7
 80019e0:	f000 ff84 	bl	80028ec <bno055_writeData>
 80019e4:	bf00      	nop
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	4619      	mov	r1, r3
 80019fa:	203d      	movs	r0, #61	@ 0x3d
 80019fc:	f000 ff76 	bl	80028ec <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d103      	bne.n	8001a0e <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8001a06:	2013      	movs	r0, #19
 8001a08:	f000 ff64 	bl	80028d4 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001a0c:	e002      	b.n	8001a14 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8001a0e:	2007      	movs	r0, #7
 8001a10:	f000 ff60 	bl	80028d4 <bno055_delay>
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001a20:	2000      	movs	r0, #0
 8001a22:	f7ff ffe3 	bl	80019ec <bno055_setOperationMode>
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001a2e:	200c      	movs	r0, #12
 8001a30:	f7ff ffdc 	bl	80019ec <bno055_setOperationMode>
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8001a3c:	2120      	movs	r1, #32
 8001a3e:	203f      	movs	r0, #63	@ 0x3f
 8001a40:	f000 ff54 	bl	80028ec <bno055_writeData>
  bno055_delay(700);
 8001a44:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001a48:	f000 ff44 	bl	80028d4 <bno055_delay>
}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
  bno055_reset();
 8001a56:	f7ff ffef 	bl	8001a38 <bno055_reset>

  uint8_t id = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8001a5e:	1dfb      	adds	r3, r7, #7
 8001a60:	2201      	movs	r2, #1
 8001a62:	4619      	mov	r1, r3
 8001a64:	2000      	movs	r0, #0
 8001a66:	f001 f82d 	bl	8002ac4 <bno055_readData>
  if (id != BNO055_ID) {
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	2ba0      	cmp	r3, #160	@ 0xa0
 8001a6e:	d004      	beq.n	8001a7a <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	4619      	mov	r1, r3
 8001a74:	4809      	ldr	r0, [pc, #36]	@ (8001a9c <bno055_setup+0x4c>)
 8001a76:	f00c fea3 	bl	800e7c0 <iprintf>
  }
  bno055_setPage(0);
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f7ff ffa8 	bl	80019d0 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8001a80:	2100      	movs	r1, #0
 8001a82:	203f      	movs	r0, #63	@ 0x3f
 8001a84:	f000 ff32 	bl	80028ec <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8001a88:	f7ff ffc8 	bl	8001a1c <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001a8c:	200a      	movs	r0, #10
 8001a8e:	f000 ff21 	bl	80028d4 <bno055_delay>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	080139ec 	.word	0x080139ec

08001aa0 <MS5611_Init>:


/******************************************************************************
         			#### MS5611 FUNCTIONS ####
******************************************************************************/
MS5611_StatusTypeDef MS5611_Init(MS5611_HandleTypeDef *dev){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]

	 MS5611_Reset(dev);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f86f 	bl	8001b8c <MS5611_Reset>

	 if(HAL_I2C_IsDeviceReady(dev->i2c, dev->I2C_ADDRESS, 1, 1000) != HAL_OK){
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6818      	ldr	r0, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	8899      	ldrh	r1, [r3, #4]
 8001ab6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aba:	2201      	movs	r2, #1
 8001abc:	f004 f9e4 	bl	8005e88 <HAL_I2C_IsDeviceReady>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d000      	beq.n	8001ac8 <MS5611_Init+0x28>

			__NOP();
 8001ac6:	bf00      	nop

	 }

	MS5611_Get_CalibCoeff(dev);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f879 	bl	8001bc0 <MS5611_Get_CalibCoeff>

	/**
	 * It is calculated average vertical altitude for set to zero our actual altitude
	 */
	if(dev->Ref_Alt_Sel == 'm'){
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001ad4:	2b6d      	cmp	r3, #109	@ 0x6d
 8001ad6:	d10c      	bne.n	8001af2 <MS5611_Init+0x52>

		dev->FixedAltitude = 0.0; //We set zero at the first time because gets the real place altitude value
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	661a      	str	r2, [r3, #96]	@ 0x60

		dev->FixedAltitude = MS5611_Calc_TemporaryAltitude(dev);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f819 	bl	8001b18 <MS5611_Calc_TemporaryAltitude>
 8001ae6:	eef0 7a40 	vmov.f32	s15, s0
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
 8001af0:	e008      	b.n	8001b04 <MS5611_Init+0x64>

		 }
		 else if(dev->Ref_Alt_Sel == 'M'){
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001af8:	2b4d      	cmp	r3, #77	@ 0x4d
 8001afa:	d103      	bne.n	8001b04 <MS5611_Init+0x64>

			 dev->FixedAltitude = 0.0;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	661a      	str	r2, [r3, #96]	@ 0x60

		 }
	/**
	 * In the beginning, variables that record the amounts of change are reset for security measures
	 */
	MS5611_ResetRef_DeltaVal(dev);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 fcd9 	bl	80024bc <MS5611_ResetRef_DeltaVal>

	return MS5611_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	0000      	movs	r0, r0
	...

08001b18 <MS5611_Calc_TemporaryAltitude>:

float MS5611_Calc_TemporaryAltitude(MS5611_HandleTypeDef *dev){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]

	 float tempAltitude = 0;
 8001b20:	f04f 0300 	mov.w	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]

	 for(int cnt = 0 ; cnt < 20 ; cnt++){
 8001b26:	2300      	movs	r3, #0
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	e01d      	b.n	8001b68 <MS5611_Calc_TemporaryAltitude+0x50>

		 MS5611_Read_ActVal(dev);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 fc5b 	bl	80023e8 <MS5611_Read_ActVal>
		 tempAltitude = (float)(tempAltitude + (float)(MS5611_Altitude * 0.05));
 8001b32:	4b15      	ldr	r3, [pc, #84]	@ (8001b88 <MS5611_Calc_TemporaryAltitude+0x70>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fd0e 	bl	8000558 <__aeabi_f2d>
 8001b3c:	a310      	add	r3, pc, #64	@ (adr r3, 8001b80 <MS5611_Calc_TemporaryAltitude+0x68>)
 8001b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b42:	f7fe fd61 	bl	8000608 <__aeabi_dmul>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f7ff f853 	bl	8000bf8 <__aeabi_d2f>
 8001b52:	ee07 0a10 	vmov	s14, r0
 8001b56:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b5e:	edc7 7a03 	vstr	s15, [r7, #12]
	 for(int cnt = 0 ; cnt < 20 ; cnt++){
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	3301      	adds	r3, #1
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	2b13      	cmp	r3, #19
 8001b6c:	ddde      	ble.n	8001b2c <MS5611_Calc_TemporaryAltitude+0x14>

	  }

	 return tempAltitude;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	ee07 3a90 	vmov	s15, r3

}
 8001b74:	eeb0 0a67 	vmov.f32	s0, s15
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	9999999a 	.word	0x9999999a
 8001b84:	3fa99999 	.word	0x3fa99999
 8001b88:	20002974 	.word	0x20002974

08001b8c <MS5611_Reset>:
void MS5611_Reset(MS5611_HandleTypeDef *dev){
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af04      	add	r7, sp, #16
 8001b92:	6078      	str	r0, [r7, #4]

	HAL_I2C_Mem_Write(dev->i2c, dev->I2C_ADDRESS, dev->I2C_ADDRESS, 1, &ResetCom, 1, 1000);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6818      	ldr	r0, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	8899      	ldrh	r1, [r3, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	889a      	ldrh	r2, [r3, #4]
 8001ba0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ba4:	9302      	str	r3, [sp, #8]
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	4b04      	ldr	r3, [pc, #16]	@ (8001bbc <MS5611_Reset+0x30>)
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	2301      	movs	r3, #1
 8001bb0:	f004 f870 	bl	8005c94 <HAL_I2C_Mem_Write>

}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000006 	.word	0x20000006

08001bc0 <MS5611_Get_CalibCoeff>:


void MS5611_Get_CalibCoeff(MS5611_HandleTypeDef *dev){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08e      	sub	sp, #56	@ 0x38
 8001bc4:	af02      	add	r7, sp, #8
 8001bc6:	6078      	str	r0, [r7, #4]

	uint8_t CalibCoefAddrss[7] = {0xA2, //C1
 8001bc8:	4a8c      	ldr	r2, [pc, #560]	@ (8001dfc <MS5611_Get_CalibCoeff+0x23c>)
 8001bca:	f107 0320 	add.w	r3, r7, #32
 8001bce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bd2:	6018      	str	r0, [r3, #0]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	8019      	strh	r1, [r3, #0]
 8001bd8:	3302      	adds	r3, #2
 8001bda:	0c0a      	lsrs	r2, r1, #16
 8001bdc:	701a      	strb	r2, [r3, #0]
								  0xA8, //C4
								  0xAA, //C5
								  0xAC, //C6
								  0xAE}; /*! The last address is for CRC*/

	uint8_t TempryCalibCoefVal[2] = {0};	/*! Temporary buffer that gets two complement of each calibration coefficient*/
 8001bde:	2300      	movs	r3, #0
 8001be0:	83bb      	strh	r3, [r7, #28]
	uint8_t CalibCoefVal[14] = {0};			/*! Stable buffer that collects all complements of calibration coefficients*/
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	f107 0310 	add.w	r3, r7, #16
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]
 8001bf0:	811a      	strh	r2, [r3, #8]
	uint8_t cnt = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


	for(cnt = 0; cnt <= 6 ; cnt++){
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001bfe:	e03b      	b.n	8001c78 <MS5611_Get_CalibCoeff+0xb8>

		HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &CalibCoefAddrss[cnt], 1, 1000);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	8899      	ldrh	r1, [r3, #4]
 8001c08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c0c:	f107 0220 	add.w	r2, r7, #32
 8001c10:	441a      	add	r2, r3
 8001c12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	2301      	movs	r3, #1
 8001c1a:	f003 fd0b 	bl	8005634 <HAL_I2C_Master_Transmit>

				for(int cnt_2 = 0; cnt_2 <= 1 ; cnt_2++){
 8001c1e:	2300      	movs	r3, #0
 8001c20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c22:	e010      	b.n	8001c46 <MS5611_Get_CalibCoeff+0x86>

					HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &TempryCalibCoefVal[cnt_2], 2, 1000);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	8899      	ldrh	r1, [r3, #4]
 8001c2c:	f107 021c 	add.w	r2, r7, #28
 8001c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c32:	441a      	add	r2, r3
 8001c34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	f003 fdf8 	bl	8005830 <HAL_I2C_Master_Receive>
				for(int cnt_2 = 0; cnt_2 <= 1 ; cnt_2++){
 8001c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c42:	3301      	adds	r3, #1
 8001c44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	ddeb      	ble.n	8001c24 <MS5611_Get_CalibCoeff+0x64>

				}

		CalibCoefVal[(cnt*2)]   = TempryCalibCoefVal[0];
 8001c4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	7f3a      	ldrb	r2, [r7, #28]
 8001c54:	3330      	adds	r3, #48	@ 0x30
 8001c56:	443b      	add	r3, r7
 8001c58:	f803 2c24 	strb.w	r2, [r3, #-36]
		CalibCoefVal[(cnt*2+1)] = TempryCalibCoefVal[1];
 8001c5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	3301      	adds	r3, #1
 8001c64:	7f7a      	ldrb	r2, [r7, #29]
 8001c66:	3330      	adds	r3, #48	@ 0x30
 8001c68:	443b      	add	r3, r7
 8001c6a:	f803 2c24 	strb.w	r2, [r3, #-36]
	for(cnt = 0; cnt <= 6 ; cnt++){
 8001c6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c72:	3301      	adds	r3, #1
 8001c74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001c78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c7c:	2b06      	cmp	r3, #6
 8001c7e:	d9bf      	bls.n	8001c00 <MS5611_Get_CalibCoeff+0x40>

	}

	cnt = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	/*! Complements of each calibration coefficient consists MSB and LSB bits*/
	dev->Clb_Cf.C1  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2; // uint16_t <== |MSB_C1|LSB_C1|
 8001c86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c8a:	3330      	adds	r3, #48	@ 0x30
 8001c8c:	443b      	add	r3, r7
 8001c8e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c92:	021b      	lsls	r3, r3, #8
 8001c94:	b21a      	sxth	r2, r3
 8001c96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	3330      	adds	r3, #48	@ 0x30
 8001c9e:	443b      	add	r3, r7
 8001ca0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ca4:	b21b      	sxth	r3, r3
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	b21b      	sxth	r3, r3
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	80da      	strh	r2, [r3, #6]
 8001cb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C2  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001cba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001cbe:	3330      	adds	r3, #48	@ 0x30
 8001cc0:	443b      	add	r3, r7
 8001cc2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cc6:	021b      	lsls	r3, r3, #8
 8001cc8:	b21a      	sxth	r2, r3
 8001cca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001cce:	3301      	adds	r3, #1
 8001cd0:	3330      	adds	r3, #48	@ 0x30
 8001cd2:	443b      	add	r3, r7
 8001cd4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cd8:	b21b      	sxth	r3, r3
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	b21b      	sxth	r3, r3
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	811a      	strh	r2, [r3, #8]
 8001ce4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ce8:	3302      	adds	r3, #2
 8001cea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C3  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001cee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001cf2:	3330      	adds	r3, #48	@ 0x30
 8001cf4:	443b      	add	r3, r7
 8001cf6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cfa:	021b      	lsls	r3, r3, #8
 8001cfc:	b21a      	sxth	r2, r3
 8001cfe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d02:	3301      	adds	r3, #1
 8001d04:	3330      	adds	r3, #48	@ 0x30
 8001d06:	443b      	add	r3, r7
 8001d08:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d0c:	b21b      	sxth	r3, r3
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	b21b      	sxth	r3, r3
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	815a      	strh	r2, [r3, #10]
 8001d18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C4  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001d22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d26:	3330      	adds	r3, #48	@ 0x30
 8001d28:	443b      	add	r3, r7
 8001d2a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	b21a      	sxth	r2, r3
 8001d32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d36:	3301      	adds	r3, #1
 8001d38:	3330      	adds	r3, #48	@ 0x30
 8001d3a:	443b      	add	r3, r7
 8001d3c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	4313      	orrs	r3, r2
 8001d44:	b21b      	sxth	r3, r3
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	819a      	strh	r2, [r3, #12]
 8001d4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d50:	3302      	adds	r3, #2
 8001d52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C5  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001d56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d5a:	3330      	adds	r3, #48	@ 0x30
 8001d5c:	443b      	add	r3, r7
 8001d5e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	b21a      	sxth	r2, r3
 8001d66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	3330      	adds	r3, #48	@ 0x30
 8001d6e:	443b      	add	r3, r7
 8001d70:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d74:	b21b      	sxth	r3, r3
 8001d76:	4313      	orrs	r3, r2
 8001d78:	b21b      	sxth	r3, r3
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	81da      	strh	r2, [r3, #14]
 8001d80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d84:	3302      	adds	r3, #2
 8001d86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C6  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001d8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d8e:	3330      	adds	r3, #48	@ 0x30
 8001d90:	443b      	add	r3, r7
 8001d92:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d96:	021b      	lsls	r3, r3, #8
 8001d98:	b21a      	sxth	r2, r3
 8001d9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d9e:	3301      	adds	r3, #1
 8001da0:	3330      	adds	r3, #48	@ 0x30
 8001da2:	443b      	add	r3, r7
 8001da4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001da8:	b21b      	sxth	r3, r3
 8001daa:	4313      	orrs	r3, r2
 8001dac:	b21b      	sxth	r3, r3
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	821a      	strh	r2, [r3, #16]
 8001db4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001db8:	3302      	adds	r3, #2
 8001dba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.crc = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001dbe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001dc2:	3330      	adds	r3, #48	@ 0x30
 8001dc4:	443b      	add	r3, r7
 8001dc6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001dca:	021b      	lsls	r3, r3, #8
 8001dcc:	b21a      	sxth	r2, r3
 8001dce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	3330      	adds	r3, #48	@ 0x30
 8001dd6:	443b      	add	r3, r7
 8001dd8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ddc:	b21b      	sxth	r3, r3
 8001dde:	4313      	orrs	r3, r2
 8001de0:	b21b      	sxth	r3, r3
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	825a      	strh	r2, [r3, #18]
 8001de8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001dec:	3302      	adds	r3, #2
 8001dee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

}
 8001df2:	bf00      	nop
 8001df4:	3730      	adds	r7, #48	@ 0x30
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	08013a28 	.word	0x08013a28

08001e00 <MS5611_ReadRaw_Press_Temp>:


void MS5611_ReadRaw_Press_Temp(MS5611_HandleTypeDef *dev){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af02      	add	r7, sp, #8
 8001e06:	6078      	str	r0, [r7, #4]

	uint8_t RawDataD1[3]  = {0}; /*! D1 = Raw pressure value that will be compensated at other functions*/
 8001e08:	4b38      	ldr	r3, [pc, #224]	@ (8001eec <MS5611_ReadRaw_Press_Temp+0xec>)
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	81bb      	strh	r3, [r7, #12]
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73bb      	strb	r3, [r7, #14]
	uint8_t RawDataD2[3]  = {0}; /*! D2 = Raw temperature value that will be compensated at other functions*/
 8001e12:	4b36      	ldr	r3, [pc, #216]	@ (8001eec <MS5611_ReadRaw_Press_Temp+0xec>)
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	813b      	strh	r3, [r7, #8]
 8001e18:	2300      	movs	r3, #0
 8001e1a:	72bb      	strb	r3, [r7, #10]
	 *
	 * @Attention! you must wait minimum 15 milisecond after each i2c command because of clock line and calculation times.
	 */

	/*! Gets D1(Raw Pressure)*/
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &osrs_4096_D1, 1, 1000); //(1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	8899      	ldrh	r1, [r3, #4]
 8001e24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	4a30      	ldr	r2, [pc, #192]	@ (8001ef0 <MS5611_ReadRaw_Press_Temp+0xf0>)
 8001e2e:	f003 fc01 	bl	8005634 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8001e32:	2014      	movs	r0, #20
 8001e34:	f001 ffe6 	bl	8003e04 <HAL_Delay>
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &adcReadCom , 1, 1000);	 //(2)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	8899      	ldrh	r1, [r3, #4]
 8001e40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	2301      	movs	r3, #1
 8001e48:	4a2a      	ldr	r2, [pc, #168]	@ (8001ef4 <MS5611_ReadRaw_Press_Temp+0xf4>)
 8001e4a:	f003 fbf3 	bl	8005634 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8001e4e:	2014      	movs	r0, #20
 8001e50:	f001 ffd8 	bl	8003e04 <HAL_Delay>
	HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &RawDataD1[0], 3, 10000);	 //(3)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6818      	ldr	r0, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	8899      	ldrh	r1, [r3, #4]
 8001e5c:	f107 020c 	add.w	r2, r7, #12
 8001e60:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	2303      	movs	r3, #3
 8001e68:	f003 fce2 	bl	8005830 <HAL_I2C_Master_Receive>
	dev->ClcPrms.D1 = (uint32_t)((RawDataD1[0]<<16) | (RawDataD1[1]<<8) | (RawDataD1[2]<<0)); // MSB|LSB|XLSB
 8001e6c:	7b3b      	ldrb	r3, [r7, #12]
 8001e6e:	041a      	lsls	r2, r3, #16
 8001e70:	7b7b      	ldrb	r3, [r7, #13]
 8001e72:	021b      	lsls	r3, r3, #8
 8001e74:	4313      	orrs	r3, r2
 8001e76:	7bba      	ldrb	r2, [r7, #14]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	615a      	str	r2, [r3, #20]

	/*! Gets D2(Raw Temperature)*/
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &osrs_4096_D2, 1, 1000); //(1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6818      	ldr	r0, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	8899      	ldrh	r1, [r3, #4]
 8001e88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	2301      	movs	r3, #1
 8001e90:	4a19      	ldr	r2, [pc, #100]	@ (8001ef8 <MS5611_ReadRaw_Press_Temp+0xf8>)
 8001e92:	f003 fbcf 	bl	8005634 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8001e96:	2014      	movs	r0, #20
 8001e98:	f001 ffb4 	bl	8003e04 <HAL_Delay>
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &adcReadCom , 1, 1000);  	 //(2)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	8899      	ldrh	r1, [r3, #4]
 8001ea4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	2301      	movs	r3, #1
 8001eac:	4a11      	ldr	r2, [pc, #68]	@ (8001ef4 <MS5611_ReadRaw_Press_Temp+0xf4>)
 8001eae:	f003 fbc1 	bl	8005634 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8001eb2:	2014      	movs	r0, #20
 8001eb4:	f001 ffa6 	bl	8003e04 <HAL_Delay>
	HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &RawDataD2[0], 3, 1000);  //(3)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	8899      	ldrh	r1, [r3, #4]
 8001ec0:	f107 0208 	add.w	r2, r7, #8
 8001ec4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	2303      	movs	r3, #3
 8001ecc:	f003 fcb0 	bl	8005830 <HAL_I2C_Master_Receive>
	dev->ClcPrms.D2 = (uint32_t)((RawDataD2[0]<<16) | (RawDataD2[1]<<8) | (RawDataD2[2]<<0)); // MSB|LSB|XLSB
 8001ed0:	7a3b      	ldrb	r3, [r7, #8]
 8001ed2:	041a      	lsls	r2, r3, #16
 8001ed4:	7a7b      	ldrb	r3, [r7, #9]
 8001ed6:	021b      	lsls	r3, r3, #8
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	7aba      	ldrb	r2, [r7, #10]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	461a      	mov	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	619a      	str	r2, [r3, #24]

}
 8001ee4:	bf00      	nop
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	08013a30 	.word	0x08013a30
 8001ef0:	20000004 	.word	0x20000004
 8001ef4:	2000256c 	.word	0x2000256c
 8001ef8:	20000005 	.word	0x20000005

08001efc <MS5611_FirstCalculateDatas>:


void MS5611_FirstCalculateDatas(MS5611_HandleTypeDef *dev){
 8001efc:	b5b0      	push	{r4, r5, r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]

	/*! Calculate 1st order temperature and pressure  according to MS5611 1st order algorithm */
	dev->ClcPrms.dT   = dev->ClcPrms.D2 - dev->Clb_Cf.C5 * pow(2,8);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe fb03 	bl	8000514 <__aeabi_ui2d>
 8001f0e:	4604      	mov	r4, r0
 8001f10:	460d      	mov	r5, r1
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	89db      	ldrh	r3, [r3, #14]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fb0c 	bl	8000534 <__aeabi_i2d>
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	4b69      	ldr	r3, [pc, #420]	@ (80020c8 <MS5611_FirstCalculateDatas+0x1cc>)
 8001f22:	f7fe fb71 	bl	8000608 <__aeabi_dmul>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4620      	mov	r0, r4
 8001f2c:	4629      	mov	r1, r5
 8001f2e:	f7fe f9b3 	bl	8000298 <__aeabi_dsub>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4610      	mov	r0, r2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f7fe fe5d 	bl	8000bf8 <__aeabi_d2f>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	61da      	str	r2, [r3, #28]
	dev->ClcPrms.OFF  = dev->Clb_Cf.C2 * pow(2,17) + (dev->Clb_Cf.C4 * dev->ClcPrms.dT) / pow(2,6);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	891b      	ldrh	r3, [r3, #8]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe faf3 	bl	8000534 <__aeabi_i2d>
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001f56:	f7fe fb57 	bl	8000608 <__aeabi_dmul>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4614      	mov	r4, r2
 8001f60:	461d      	mov	r5, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	899b      	ldrh	r3, [r3, #12]
 8001f66:	ee07 3a90 	vmov	s15, r3
 8001f6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	edd3 7a07 	vldr	s15, [r3, #28]
 8001f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f78:	ee17 0a90 	vmov	r0, s15
 8001f7c:	f7fe faec 	bl	8000558 <__aeabi_f2d>
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	4b51      	ldr	r3, [pc, #324]	@ (80020cc <MS5611_FirstCalculateDatas+0x1d0>)
 8001f86:	f7fe fc69 	bl	800085c <__aeabi_ddiv>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4620      	mov	r0, r4
 8001f90:	4629      	mov	r1, r5
 8001f92:	f7fe f983 	bl	800029c <__adddf3>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4610      	mov	r0, r2
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f7fe fe2b 	bl	8000bf8 <__aeabi_d2f>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	629a      	str	r2, [r3, #40]	@ 0x28
	dev->ClcPrms.SENS = dev->Clb_Cf.C1 * pow(2,16) + (dev->Clb_Cf.C3 * dev->ClcPrms.dT) / pow(2,7);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	88db      	ldrh	r3, [r3, #6]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe fac1 	bl	8000534 <__aeabi_i2d>
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	4b46      	ldr	r3, [pc, #280]	@ (80020d0 <MS5611_FirstCalculateDatas+0x1d4>)
 8001fb8:	f7fe fb26 	bl	8000608 <__aeabi_dmul>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	4614      	mov	r4, r2
 8001fc2:	461d      	mov	r5, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	895b      	ldrh	r3, [r3, #10]
 8001fc8:	ee07 3a90 	vmov	s15, r3
 8001fcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	edd3 7a07 	vldr	s15, [r3, #28]
 8001fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fda:	ee17 0a90 	vmov	r0, s15
 8001fde:	f7fe fabb 	bl	8000558 <__aeabi_f2d>
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80020d4 <MS5611_FirstCalculateDatas+0x1d8>)
 8001fe8:	f7fe fc38 	bl	800085c <__aeabi_ddiv>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	4629      	mov	r1, r5
 8001ff4:	f7fe f952 	bl	800029c <__adddf3>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	4619      	mov	r1, r3
 8002000:	f7fe fdfa 	bl	8000bf8 <__aeabi_d2f>
 8002004:	4602      	mov	r2, r0
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	62da      	str	r2, [r3, #44]	@ 0x2c

	dev->ClcPrms.TEMP = 2000 + dev->ClcPrms.dT * dev->Clb_Cf.C6 / pow(2,23);								//Actual temperature data
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	8a1b      	ldrh	r3, [r3, #16]
 8002014:	ee07 3a90 	vmov	s15, r3
 8002018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800201c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002020:	ee17 0a90 	vmov	r0, s15
 8002024:	f7fe fa98 	bl	8000558 <__aeabi_f2d>
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	4b2a      	ldr	r3, [pc, #168]	@ (80020d8 <MS5611_FirstCalculateDatas+0x1dc>)
 800202e:	f7fe fc15 	bl	800085c <__aeabi_ddiv>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	4b27      	ldr	r3, [pc, #156]	@ (80020dc <MS5611_FirstCalculateDatas+0x1e0>)
 8002040:	f7fe f92c 	bl	800029c <__adddf3>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4610      	mov	r0, r2
 800204a:	4619      	mov	r1, r3
 800204c:	f7fe fdd4 	bl	8000bf8 <__aeabi_d2f>
 8002050:	4602      	mov	r2, r0
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	621a      	str	r2, [r3, #32]
	dev->ClcPrms.P	  = ((dev->ClcPrms.D1 * dev->ClcPrms.SENS / pow(2,21) - dev->ClcPrms.OFF))/pow(2,15);	//Actual pressure data
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	ee07 3a90 	vmov	s15, r3
 800205e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800206c:	ee17 0a90 	vmov	r0, s15
 8002070:	f7fe fa72 	bl	8000558 <__aeabi_f2d>
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	4b19      	ldr	r3, [pc, #100]	@ (80020e0 <MS5611_FirstCalculateDatas+0x1e4>)
 800207a:	f7fe fbef 	bl	800085c <__aeabi_ddiv>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	4614      	mov	r4, r2
 8002084:	461d      	mov	r5, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe fa64 	bl	8000558 <__aeabi_f2d>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4620      	mov	r0, r4
 8002096:	4629      	mov	r1, r5
 8002098:	f7fe f8fe 	bl	8000298 <__aeabi_dsub>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4610      	mov	r0, r2
 80020a2:	4619      	mov	r1, r3
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	4b0e      	ldr	r3, [pc, #56]	@ (80020e4 <MS5611_FirstCalculateDatas+0x1e8>)
 80020aa:	f7fe fbd7 	bl	800085c <__aeabi_ddiv>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4610      	mov	r0, r2
 80020b4:	4619      	mov	r1, r3
 80020b6:	f7fe fd9f 	bl	8000bf8 <__aeabi_d2f>
 80020ba:	4602      	mov	r2, r0
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	625a      	str	r2, [r3, #36]	@ 0x24

}
 80020c0:	bf00      	nop
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bdb0      	pop	{r4, r5, r7, pc}
 80020c8:	40700000 	.word	0x40700000
 80020cc:	40500000 	.word	0x40500000
 80020d0:	40f00000 	.word	0x40f00000
 80020d4:	40600000 	.word	0x40600000
 80020d8:	41600000 	.word	0x41600000
 80020dc:	409f4000 	.word	0x409f4000
 80020e0:	41400000 	.word	0x41400000
 80020e4:	40e00000 	.word	0x40e00000

080020e8 <MS5611_SecondCalculateDatas>:


void MS5611_SecondCalculateDatas(MS5611_HandleTypeDef *dev){
 80020e8:	b5b0      	push	{r4, r5, r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]

	if(dev->ClcPrms.TEMP < 2000){
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	edd3 7a08 	vldr	s15, [r3, #32]
 80020f6:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8002330 <MS5611_SecondCalculateDatas+0x248>
 80020fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002102:	f140 80e3 	bpl.w	80022cc <MS5611_SecondCalculateDatas+0x1e4>

			/*! Low Temperature */
			dev->ClcPrms.TEMP2 = (dev->ClcPrms.dT * dev->ClcPrms.dT) / pow(2,31);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	ed93 7a07 	vldr	s14, [r3, #28]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002112:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002116:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8002334 <MS5611_SecondCalculateDatas+0x24c>
 800211a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			dev->ClcPrms.OFF2  = 5 * ((dev->ClcPrms.TEMP - 2000) * (dev->ClcPrms.TEMP - 2000)) / pow(2,1);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	edd3 7a08 	vldr	s15, [r3, #32]
 800212a:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8002330 <MS5611_SecondCalculateDatas+0x248>
 800212e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	edd3 7a08 	vldr	s15, [r3, #32]
 8002138:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8002330 <MS5611_SecondCalculateDatas+0x248>
 800213c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002144:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002148:	ee27 7a87 	vmul.f32	s14, s15, s14
 800214c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002150:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
			dev->ClcPrms.SENS2 = 5 * ((dev->ClcPrms.TEMP - 2000) * (dev->ClcPrms.TEMP - 2000)) / pow(2,2);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002160:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8002330 <MS5611_SecondCalculateDatas+0x248>
 8002164:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	edd3 7a08 	vldr	s15, [r3, #32]
 800216e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8002330 <MS5611_SecondCalculateDatas+0x248>
 8002172:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800217a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800217e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002182:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002186:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

					if(dev->ClcPrms.TEMP < -1500){
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	edd3 7a08 	vldr	s15, [r3, #32]
 8002196:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8002338 <MS5611_SecondCalculateDatas+0x250>
 800219a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800219e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a2:	d571      	bpl.n	8002288 <MS5611_SecondCalculateDatas+0x1a0>
						/*! Very Low Temperature */
						dev->ClcPrms.OFF2  = dev->ClcPrms.OFF2 + 7 * ((dev->ClcPrms.TEMP + 1500) * (dev->ClcPrms.TEMP + 1500));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	edd3 7a08 	vldr	s15, [r3, #32]
 80021b0:	eddf 6a62 	vldr	s13, [pc, #392]	@ 800233c <MS5611_SecondCalculateDatas+0x254>
 80021b4:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	edd3 7a08 	vldr	s15, [r3, #32]
 80021be:	ed9f 6a5f 	vldr	s12, [pc, #380]	@ 800233c <MS5611_SecondCalculateDatas+0x254>
 80021c2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80021c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ca:	eef1 6a0c 	vmov.f32	s13, #28	@ 0x40e00000  7.0
 80021ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
						dev->ClcPrms.SENS2 = dev->ClcPrms.SENS2 + 11 * ((dev->ClcPrms.TEMP + 1500) * (dev->ClcPrms.TEMP + 1500)) / pow(2,1);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe f9b9 	bl	8000558 <__aeabi_f2d>
 80021e6:	4604      	mov	r4, r0
 80021e8:	460d      	mov	r5, r1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	edd3 7a08 	vldr	s15, [r3, #32]
 80021f0:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 800233c <MS5611_SecondCalculateDatas+0x254>
 80021f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	edd3 7a08 	vldr	s15, [r3, #32]
 80021fe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800233c <MS5611_SecondCalculateDatas+0x254>
 8002202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220a:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 800220e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002212:	ee17 0a90 	vmov	r0, s15
 8002216:	f7fe f99f 	bl	8000558 <__aeabi_f2d>
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002222:	f7fe fb1b 	bl	800085c <__aeabi_ddiv>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	4620      	mov	r0, r4
 800222c:	4629      	mov	r1, r5
 800222e:	f7fe f835 	bl	800029c <__adddf3>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4610      	mov	r0, r2
 8002238:	4619      	mov	r1, r3
 800223a:	f7fe fcdd 	bl	8000bf8 <__aeabi_d2f>
 800223e:	4602      	mov	r2, r0
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	635a      	str	r2, [r3, #52]	@ 0x34

						dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	ed93 7a08 	vldr	s14, [r3, #32]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002250:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	edc3 7a08 	vstr	s15, [r3, #32]
						dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
						dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800227c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
			dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
			dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
			dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;

		}
}
 8002286:	e04e      	b.n	8002326 <MS5611_SecondCalculateDatas+0x23e>
						dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	ed93 7a08 	vldr	s14, [r3, #32]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002294:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	edc3 7a08 	vstr	s15, [r3, #32]
						dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80022aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
						dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80022c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 80022ca:	e02c      	b.n	8002326 <MS5611_SecondCalculateDatas+0x23e>
			dev->ClcPrms.TEMP2 = 0;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	639a      	str	r2, [r3, #56]	@ 0x38
			dev->ClcPrms.OFF2  = 0;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	631a      	str	r2, [r3, #48]	@ 0x30
			dev->ClcPrms.SENS2 = 0;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	635a      	str	r2, [r3, #52]	@ 0x34
			dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	ed93 7a08 	vldr	s14, [r3, #32]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80022f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	edc3 7a08 	vstr	s15, [r3, #32]
			dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002306:	ee77 7a67 	vsub.f32	s15, s14, s15
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
			dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800231c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bdb0      	pop	{r4, r5, r7, pc}
 800232e:	bf00      	nop
 8002330:	44fa0000 	.word	0x44fa0000
 8002334:	4f000000 	.word	0x4f000000
 8002338:	c4bb8000 	.word	0xc4bb8000
 800233c:	44bb8000 	.word	0x44bb8000

08002340 <MS5611_Calc_Altitude>:


float MS5611_Calc_Altitude(MS5611_HandleTypeDef *dev){
 8002340:	b5b0      	push	{r4, r5, r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]

	return  ((SeaLevelTemp  / GradientTemp)
			* (1 - pow(((dev->ClcPrms.P/2) / SeaLevelPress),((GasCoefficient * GradientTemp)/GravityAccel)))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800234e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002352:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002356:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80023e0 <MS5611_Calc_Altitude+0xa0>
 800235a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800235e:	ee16 0a90 	vmov	r0, s13
 8002362:	f7fe f8f9 	bl	8000558 <__aeabi_f2d>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	ed9f 1b19 	vldr	d1, [pc, #100]	@ 80023d0 <MS5611_Calc_Altitude+0x90>
 800236e:	ec43 2b10 	vmov	d0, r2, r3
 8002372:	f010 fafd 	bl	8012970 <pow>
 8002376:	ec53 2b10 	vmov	r2, r3, d0
 800237a:	f04f 0000 	mov.w	r0, #0
 800237e:	4919      	ldr	r1, [pc, #100]	@ (80023e4 <MS5611_Calc_Altitude+0xa4>)
 8002380:	f7fd ff8a 	bl	8000298 <__aeabi_dsub>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4610      	mov	r0, r2
 800238a:	4619      	mov	r1, r3
 800238c:	a312      	add	r3, pc, #72	@ (adr r3, 80023d8 <MS5611_Calc_Altitude+0x98>)
 800238e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002392:	f7fe f939 	bl	8000608 <__aeabi_dmul>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	4614      	mov	r4, r2
 800239c:	461d      	mov	r5, r3
			- dev->FixedAltitude) ;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe f8d8 	bl	8000558 <__aeabi_f2d>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	4620      	mov	r0, r4
 80023ae:	4629      	mov	r1, r5
 80023b0:	f7fd ff72 	bl	8000298 <__aeabi_dsub>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4610      	mov	r0, r2
 80023ba:	4619      	mov	r1, r3
 80023bc:	f7fe fc1c 	bl	8000bf8 <__aeabi_d2f>
 80023c0:	4603      	mov	r3, r0
 80023c2:	ee07 3a90 	vmov	s15, r3

}
 80023c6:	eeb0 0a67 	vmov.f32	s0, s15
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bdb0      	pop	{r4, r5, r7, pc}
 80023d0:	fd017917 	.word	0xfd017917
 80023d4:	3fc85ace 	.word	0x3fc85ace
 80023d8:	9d89d89d 	.word	0x9d89d89d
 80023dc:	40e5a558 	.word	0x40e5a558
 80023e0:	47c5e680 	.word	0x47c5e680
 80023e4:	3ff00000 	.word	0x3ff00000

080023e8 <MS5611_Read_ActVal>:


void MS5611_Read_ActVal(MS5611_HandleTypeDef *dev){
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]

	/*! Read raw pressure and temperature MSB | LSB | XLSB values from the sensor*/
	MS5611_ReadRaw_Press_Temp(dev);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff fd05 	bl	8001e00 <MS5611_ReadRaw_Press_Temp>

	/*! Calculate 1st order temperature and pressure  according to MS5611 1st order algorithm */
	MS5611_FirstCalculateDatas(dev);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff fd80 	bl	8001efc <MS5611_FirstCalculateDatas>

	/*! If it's needed, Calculate 2st order temperature and pressure  according to MS5611 2st order algorithm */
	MS5611_SecondCalculateDatas(dev);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff fe73 	bl	80020e8 <MS5611_SecondCalculateDatas>

	/*! Vertical Altitude is calculated by using pressure and some coefficients */
	MS5611_Altitude = MS5611_Calc_Altitude(dev);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff ff9c 	bl	8002340 <MS5611_Calc_Altitude>
 8002408:	eef0 7a40 	vmov.f32	s15, s0
 800240c:	4b24      	ldr	r3, [pc, #144]	@ (80024a0 <MS5611_Read_ActVal+0xb8>)
 800240e:	edc3 7a00 	vstr	s15, [r3]

	/*! Vertical Speed is calculated by using differential of locations */
	MS5611_Calc_VertSpd(dev, MS5611_Altitude, &MS5611_VertSpeed);
 8002412:	4b23      	ldr	r3, [pc, #140]	@ (80024a0 <MS5611_Read_ActVal+0xb8>)
 8002414:	edd3 7a00 	vldr	s15, [r3]
 8002418:	4922      	ldr	r1, [pc, #136]	@ (80024a4 <MS5611_Read_ActVal+0xbc>)
 800241a:	eeb0 0a67 	vmov.f32	s0, s15
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f87a 	bl	8002518 <MS5611_Calc_VertSpd>

	/*! Vertical acceleration is calculated by using differential of speed */
	MS5611_Calc_VertAcc(dev, MS5611_VertSpeed, &MS5611_VertAcc);
 8002424:	4b1f      	ldr	r3, [pc, #124]	@ (80024a4 <MS5611_Read_ActVal+0xbc>)
 8002426:	edd3 7a00 	vldr	s15, [r3]
 800242a:	491f      	ldr	r1, [pc, #124]	@ (80024a8 <MS5611_Read_ActVal+0xc0>)
 800242c:	eeb0 0a67 	vmov.f32	s0, s15
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f890 	bl	8002556 <MS5611_Calc_VertAcc>

	/*! It's applied force on to the object that is given mass from the user */
	MS5611_Calc_gForce(dev, &MS5611_gForce, SatCar_Mass, MS5611_VertAcc);
 8002436:	4b1d      	ldr	r3, [pc, #116]	@ (80024ac <MS5611_Read_ActVal+0xc4>)
 8002438:	edd3 7a00 	vldr	s15, [r3]
 800243c:	4b1a      	ldr	r3, [pc, #104]	@ (80024a8 <MS5611_Read_ActVal+0xc0>)
 800243e:	ed93 7a00 	vldr	s14, [r3]
 8002442:	eef0 0a47 	vmov.f32	s1, s14
 8002446:	eeb0 0a67 	vmov.f32	s0, s15
 800244a:	4919      	ldr	r1, [pc, #100]	@ (80024b0 <MS5611_Read_ActVal+0xc8>)
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f8a3 	bl	8002598 <MS5611_Calc_gForce>

	/*! Pressure unit is mBar and Temperature unit is celcius degress*/
	MS5611_Press = dev->ClcPrms.P/2 ;			//@e.g :
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8002458:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800245c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002460:	4b14      	ldr	r3, [pc, #80]	@ (80024b4 <MS5611_Read_ActVal+0xcc>)
 8002462:	edc3 7a00 	vstr	s15, [r3]
	MS5611_Temp  = dev->ClcPrms.TEMP * 0.01; 		//@e.g : 25.57 CelciusDegress
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe f874 	bl	8000558 <__aeabi_f2d>
 8002470:	a309      	add	r3, pc, #36	@ (adr r3, 8002498 <MS5611_Read_ActVal+0xb0>)
 8002472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002476:	f7fe f8c7 	bl	8000608 <__aeabi_dmul>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4610      	mov	r0, r2
 8002480:	4619      	mov	r1, r3
 8002482:	f7fe fbb9 	bl	8000bf8 <__aeabi_d2f>
 8002486:	4603      	mov	r3, r0
 8002488:	4a0b      	ldr	r2, [pc, #44]	@ (80024b8 <MS5611_Read_ActVal+0xd0>)
 800248a:	6013      	str	r3, [r2, #0]

}
 800248c:	bf00      	nop
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	f3af 8000 	nop.w
 8002498:	47ae147b 	.word	0x47ae147b
 800249c:	3f847ae1 	.word	0x3f847ae1
 80024a0:	20002974 	.word	0x20002974
 80024a4:	20002978 	.word	0x20002978
 80024a8:	2000297c 	.word	0x2000297c
 80024ac:	20002984 	.word	0x20002984
 80024b0:	20002980 	.word	0x20002980
 80024b4:	2000296c 	.word	0x2000296c
 80024b8:	20002970 	.word	0x20002970

080024bc <MS5611_ResetRef_DeltaVal>:

void MS5611_ResetRef_DeltaVal(MS5611_HandleTypeDef *dev){
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]

	//At the beginning, reset the altitude values for the first and second conditions.
	dev->DeltaData.alt0 = 0.0;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	63da      	str	r2, [r3, #60]	@ 0x3c
	dev->DeltaData.alt1 = 0.0;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	641a      	str	r2, [r3, #64]	@ 0x40
	dev->DeltaData.holdAlt = 0.0;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	645a      	str	r2, [r3, #68]	@ 0x44

	//At the beginning, reset the speed values for the first and second conditions.
	dev->DeltaData.spd0 = 0.0;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	655a      	str	r2, [r3, #84]	@ 0x54
	dev->DeltaData.spd1 = 0.0;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	659a      	str	r2, [r3, #88]	@ 0x58
	dev->DeltaData.holdSpd = 0.0;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	65da      	str	r2, [r3, #92]	@ 0x5c

	//At the beginning, reset the acceleration values for the first and second conditions.
	dev->DeltaData.acc0 = 0.0;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	649a      	str	r2, [r3, #72]	@ 0x48
	dev->DeltaData.acc1 = 0.0;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	64da      	str	r2, [r3, #76]	@ 0x4c
	dev->DeltaData.holdAcc = 0.0;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	651a      	str	r2, [r3, #80]	@ 0x50

}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <MS5611_Calc_VertSpd>:


/*!Vertical Speed is calculated by using differential of locations "V = (X1 - X0) /1 second" */
void MS5611_Calc_VertSpd(MS5611_HandleTypeDef *dev, float MS5611_Altitude, float *MS5611_VertSpeed){
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	ed87 0a02 	vstr	s0, [r7, #8]
 8002524:	6079      	str	r1, [r7, #4]

	dev->DeltaData.alt1 = (MS5611_Altitude);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	641a      	str	r2, [r3, #64]	@ 0x40
	(*MS5611_VertSpeed) = (dev->DeltaData.alt1 - dev->DeltaData.alt0);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002538:	ee77 7a67 	vsub.f32	s15, s14, s15
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	edc3 7a00 	vstr	s15, [r3]
	dev->DeltaData.alt0 = dev->DeltaData.alt1;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 800254a:	bf00      	nop
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <MS5611_Calc_VertAcc>:

/*! Vertical acceleration is calculated by using differential of speed "a = (V1 - V0) / 1 second"  */
void MS5611_Calc_VertAcc(MS5611_HandleTypeDef *dev, float MS5611_VertSpeed,float *MS5611_VertAcc){
 8002556:	b480      	push	{r7}
 8002558:	b085      	sub	sp, #20
 800255a:	af00      	add	r7, sp, #0
 800255c:	60f8      	str	r0, [r7, #12]
 800255e:	ed87 0a02 	vstr	s0, [r7, #8]
 8002562:	6079      	str	r1, [r7, #4]

	dev->DeltaData.spd1 = (MS5611_VertSpeed);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	659a      	str	r2, [r3, #88]	@ 0x58
	(*MS5611_VertAcc)	= (dev->DeltaData.spd1 - dev->DeltaData.spd0);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002576:	ee77 7a67 	vsub.f32	s15, s14, s15
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	edc3 7a00 	vstr	s15, [r3]
	dev->DeltaData.spd0 = dev->DeltaData.spd1;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	655a      	str	r2, [r3, #84]	@ 0x54

}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	0000      	movs	r0, r0
	...

08002598 <MS5611_Calc_gForce>:

/*! It's applied force on to the object that is given mass from the user. =" gForce = ObjectMass * (VerticalAcceleration / 9.80) " */
void MS5611_Calc_gForce(MS5611_HandleTypeDef *dev, float *MS5611_gForce, float SatCar_Mass, float MS5611_VertAcc){
 8002598:	b5b0      	push	{r4, r5, r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80025a6:	edc7 0a00 	vstr	s1, [r7]

	(*MS5611_gForce) = (((MS5611_VertAcc)/GravityAccel)*(SatCar_Mass));
 80025aa:	6838      	ldr	r0, [r7, #0]
 80025ac:	f7fd ffd4 	bl	8000558 <__aeabi_f2d>
 80025b0:	a30f      	add	r3, pc, #60	@ (adr r3, 80025f0 <MS5611_Calc_gForce+0x58>)
 80025b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b6:	f7fe f951 	bl	800085c <__aeabi_ddiv>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	4614      	mov	r4, r2
 80025c0:	461d      	mov	r5, r3
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7fd ffc8 	bl	8000558 <__aeabi_f2d>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4620      	mov	r0, r4
 80025ce:	4629      	mov	r1, r5
 80025d0:	f7fe f81a 	bl	8000608 <__aeabi_dmul>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	f7fe fb0c 	bl	8000bf8 <__aeabi_d2f>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	601a      	str	r2, [r3, #0]

}
 80025e6:	bf00      	nop
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bdb0      	pop	{r4, r5, r7, pc}
 80025ee:	bf00      	nop
 80025f0:	3f141206 	.word	0x3f141206
 80025f4:	40239cc6 	.word	0x40239cc6

080025f8 <SubSys_WirelessCom_Config_WORK_MODE>:
	}

}


void SubSys_WirelessCom_Config_WORK_MODE(SubSys_WirelesscomConfig_HandleTypeDef    *dev){
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]

	switch(dev->Mode_SW){
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	7ddb      	ldrb	r3, [r3, #23]
 8002604:	2b03      	cmp	r3, #3
 8002606:	d84f      	bhi.n	80026a8 <SubSys_WirelessCom_Config_WORK_MODE+0xb0>
 8002608:	a201      	add	r2, pc, #4	@ (adr r2, 8002610 <SubSys_WirelessCom_Config_WORK_MODE+0x18>)
 800260a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260e:	bf00      	nop
 8002610:	08002621 	.word	0x08002621
 8002614:	08002643 	.word	0x08002643
 8002618:	08002665 	.word	0x08002665
 800261c:	08002687 	.word	0x08002687

		case NormalMode :	/*! UART and wireless channel are open, transparent transmission is on*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_RESET);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6858      	ldr	r0, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	8b5b      	ldrh	r3, [r3, #26]
 8002628:	2200      	movs	r2, #0
 800262a:	4619      	mov	r1, r3
 800262c:	f002 fea4 	bl	8005378 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_RESET);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6858      	ldr	r0, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	8b1b      	ldrh	r3, [r3, #24]
 8002638:	2200      	movs	r2, #0
 800263a:	4619      	mov	r1, r3
 800263c:	f002 fe9c 	bl	8005378 <HAL_GPIO_WritePin>
		break;
 8002640:	e032      	b.n	80026a8 <SubSys_WirelessCom_Config_WORK_MODE+0xb0>

		case WORsending :	/*! WOR Transmitter (it sends packet in every period)*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_RESET);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6858      	ldr	r0, [r3, #4]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	8b5b      	ldrh	r3, [r3, #26]
 800264a:	2200      	movs	r2, #0
 800264c:	4619      	mov	r1, r3
 800264e:	f002 fe93 	bl	8005378 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_SET);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6858      	ldr	r0, [r3, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	8b1b      	ldrh	r3, [r3, #24]
 800265a:	2201      	movs	r2, #1
 800265c:	4619      	mov	r1, r3
 800265e:	f002 fe8b 	bl	8005378 <HAL_GPIO_WritePin>
		break;
 8002662:	e021      	b.n	80026a8 <SubSys_WirelessCom_Config_WORK_MODE+0xb0>

		case WORreceiving :	/*! WOR Receiver (it sends packet in every period)*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_SET);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6858      	ldr	r0, [r3, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	8b5b      	ldrh	r3, [r3, #26]
 800266c:	2201      	movs	r2, #1
 800266e:	4619      	mov	r1, r3
 8002670:	f002 fe82 	bl	8005378 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_RESET);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6858      	ldr	r0, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	8b1b      	ldrh	r3, [r3, #24]
 800267c:	2200      	movs	r2, #0
 800267e:	4619      	mov	r1, r3
 8002680:	f002 fe7a 	bl	8005378 <HAL_GPIO_WritePin>
		break;
 8002684:	e010      	b.n	80026a8 <SubSys_WirelessCom_Config_WORK_MODE+0xb0>

		case DeepSleep :	/*! Module goes to sleep so provides you to configure settings*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_SET);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6858      	ldr	r0, [r3, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	8b5b      	ldrh	r3, [r3, #26]
 800268e:	2201      	movs	r2, #1
 8002690:	4619      	mov	r1, r3
 8002692:	f002 fe71 	bl	8005378 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_SET);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6858      	ldr	r0, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	8b1b      	ldrh	r3, [r3, #24]
 800269e:	2201      	movs	r2, #1
 80026a0:	4619      	mov	r1, r3
 80026a2:	f002 fe69 	bl	8005378 <HAL_GPIO_WritePin>
		break;
 80026a6:	bf00      	nop

	}

}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <SubSys_WirelessCom_Telemetry_Transfer_From_To>:
  * 																 	  @arg 1 : Sat_Payload
  * 																  	  @arg 2 : Ground_Sation
  * @param SubSys_WirelessCom_APP_HandleTypeDef *dev_WirelessComApp , created object for wireless communication
  * @retval NONE
  */
void SubSys_WirelessCom_Telemetry_Transfer_From_To(MissionUnit From_X, MissionUnit To_Y, SubSys_WirelessCom_APP_HandleTypeDef *dev_WirelessComApp){
 80026b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026b4:	b09b      	sub	sp, #108	@ 0x6c
 80026b6:	af0e      	add	r7, sp, #56	@ 0x38
 80026b8:	4603      	mov	r3, r0
 80026ba:	623a      	str	r2, [r7, #32]
 80026bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80026c0:	460b      	mov	r3, r1
 80026c2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/*! Use it when working on Sat_Carrier flight software*/
	if(From_X == Sat_Carrier && To_Y == Sat_Payload){
 80026c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	f040 808b 	bne.w	80027e6 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x136>
 80026d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	f040 8086 	bne.w	80027e6 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x136>

		/*! Create message packet for Carrier for sending to the Payload*/
		SubSys_WirelessCom_Telemetry_Create_Packet_For(Sat_Carrier, dev_WirelessComApp);
 80026da:	6a39      	ldr	r1, [r7, #32]
 80026dc:	2001      	movs	r0, #1
 80026de:	f000 f88b 	bl	80027f8 <SubSys_WirelessCom_Telemetry_Create_Packet_For>

				/* 8 pairs of '<>' and y Byte data are x Byte as total budget*/
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	f103 06c8 	add.w	r6, r3, #200	@ 0xc8
																		"<%.2f><%.2f><%.1f><%.1f><%.2f><%.4f><%.4f><%.1f>\n",
																															dev_WirelessComApp->Variable.Carr_Pressure,
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fd ff32 	bl	8000558 <__aeabi_f2d>
 80026f4:	e9c7 0106 	strd	r0, r1, [r7, #24]
																															dev_WirelessComApp->Variable.Carr_Temperature,
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fd ff2a 	bl	8000558 <__aeabi_f2d>
 8002704:	4682      	mov	sl, r0
 8002706:	468b      	mov	fp, r1
																															dev_WirelessComApp->Variable.Carr_VertHeight,
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 800270e:	4618      	mov	r0, r3
 8002710:	f7fd ff22 	bl	8000558 <__aeabi_f2d>
 8002714:	e9c7 0104 	strd	r0, r1, [r7, #16]
																															dev_WirelessComApp->Variable.Carr_VertSpeed,
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 800271e:	4618      	mov	r0, r3
 8002720:	f7fd ff1a 	bl	8000558 <__aeabi_f2d>
 8002724:	e9c7 0102 	strd	r0, r1, [r7, #8]
																															dev_WirelessComApp->Variable.Carr_BatteryVoltage,
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 800272e:	4618      	mov	r0, r3
 8002730:	f7fd ff12 	bl	8000558 <__aeabi_f2d>
 8002734:	e9c7 0100 	strd	r0, r1, [r7]
																															dev_WirelessComApp->Variable.Carr_GPS_Latitude,
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 800273e:	4618      	mov	r0, r3
 8002740:	f7fd ff0a 	bl	8000558 <__aeabi_f2d>
 8002744:	4680      	mov	r8, r0
 8002746:	4689      	mov	r9, r1
																															dev_WirelessComApp->Variable.Carr_GPS_Longitude,
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 800274e:	4618      	mov	r0, r3
 8002750:	f7fd ff02 	bl	8000558 <__aeabi_f2d>
 8002754:	4604      	mov	r4, r0
 8002756:	460d      	mov	r5, r1
																															dev_WirelessComApp->Variable.Carr_GPS_Altitude);
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 800275e:	4618      	mov	r0, r3
 8002760:	f7fd fefa 	bl	8000558 <__aeabi_f2d>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800276c:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 8002770:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8002774:	ed97 7b00 	vldr	d7, [r7]
 8002778:	ed8d 7b06 	vstr	d7, [sp, #24]
 800277c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002780:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002784:	ed97 7b04 	vldr	d7, [r7, #16]
 8002788:	ed8d 7b02 	vstr	d7, [sp, #8]
 800278c:	e9cd ab00 	strd	sl, fp, [sp]
 8002790:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002794:	4916      	ldr	r1, [pc, #88]	@ (80027f0 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x140>)
 8002796:	4630      	mov	r0, r6
 8002798:	f00c f882 	bl	800e8a0 <siprintf>
 800279c:	4603      	mov	r3, r0
 800279e:	b29a      	uxth	r2, r3
 80027a0:	4b14      	ldr	r3, [pc, #80]	@ (80027f4 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x144>)
 80027a2:	801a      	strh	r2, [r3, #0]

				for(int i = 0 ; i < Written_Bytes ; i++){
 80027a4:	2300      	movs	r3, #0
 80027a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027a8:	e00b      	b.n	80027c2 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x112>

					dev_WirelessComApp->Buffer.Tx[i+3] = dev_WirelessComApp->Buffer.Temp[i];
 80027aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ac:	3303      	adds	r3, #3
 80027ae:	6a39      	ldr	r1, [r7, #32]
 80027b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027b2:	440a      	add	r2, r1
 80027b4:	32c8      	adds	r2, #200	@ 0xc8
 80027b6:	7811      	ldrb	r1, [r2, #0]
 80027b8:	6a3a      	ldr	r2, [r7, #32]
 80027ba:	54d1      	strb	r1, [r2, r3]
				for(int i = 0 ; i < Written_Bytes ; i++){
 80027bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027be:	3301      	adds	r3, #1
 80027c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027c2:	4b0c      	ldr	r3, [pc, #48]	@ (80027f4 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x144>)
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ca:	4293      	cmp	r3, r2
 80027cc:	dbed      	blt.n	80027aa <SubSys_WirelessCom_Telemetry_Transfer_From_To+0xfa>
				}




				HAL_UART_Transmit(dev_WirelessComApp->huartX, dev_WirelessComApp->Buffer.Tx , (Written_Bytes+3), 1000);
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	f8d3 01b4 	ldr.w	r0, [r3, #436]	@ 0x1b4
 80027d4:	6a39      	ldr	r1, [r7, #32]
 80027d6:	4b07      	ldr	r3, [pc, #28]	@ (80027f4 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x144>)
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	3303      	adds	r3, #3
 80027dc:	b29a      	uxth	r2, r3
 80027de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027e2:	f006 fd57 	bl	8009294 <HAL_UART_Transmit>
	}

}
 80027e6:	bf00      	nop
 80027e8:	3734      	adds	r7, #52	@ 0x34
 80027ea:	46bd      	mov	sp, r7
 80027ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027f0:	08013a34 	.word	0x08013a34
 80027f4:	2000256e 	.word	0x2000256e

080027f8 <SubSys_WirelessCom_Telemetry_Create_Packet_For>:
 * 																	   @arg 1 : Sat_Payload
 * 																	   @arg 2 : Ground_Sation
 * @param  : SubSys_WirelessCom_APP_HandleTypeDef *dev_WirelessComApp , created object for wireless communication
 * @retval NONE
 */
void SubSys_WirelessCom_Telemetry_Create_Packet_For(MissionUnit x,SubSys_WirelessCom_APP_HandleTypeDef *dev_WirelessComApp){
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	6039      	str	r1, [r7, #0]
 8002802:	71fb      	strb	r3, [r7, #7]

	switch(x){
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d13e      	bne.n	8002888 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x90>
		case Sat_Carrier :

			/*-------------TARGET DEVICE ADDRESS AND CHANNEL INFO----------------*/
			/*! Target device will be Satellite's Payload*/
			dev_WirelessComApp->Buffer.Tx[0] = dev_WirelessComApp->Target_ADDH;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	f893 21c0 	ldrb.w	r2, [r3, #448]	@ 0x1c0
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	701a      	strb	r2, [r3, #0]
			dev_WirelessComApp->Buffer.Tx[1] = dev_WirelessComApp->Target_ADDL;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	f893 21c1 	ldrb.w	r2, [r3, #449]	@ 0x1c1
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	705a      	strb	r2, [r3, #1]
			dev_WirelessComApp->Buffer.Tx[2] = dev_WirelessComApp->Target_Ch;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	f893 21c2 	ldrb.w	r2, [r3, #450]	@ 0x1c2
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	709a      	strb	r2, [r3, #2]

			/*-------------YOUR DEVICE VARIABLE THAT YOU WİLL SEND----------------*/ /*Note : Will be system variable opposite to variables*/
			/*From MS5611*/
			dev_WirelessComApp->Variable.Carr_Pressure    = MS5611_Press;
 8002828:	4b1a      	ldr	r3, [pc, #104]	@ (8002894 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x9c>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
			dev_WirelessComApp->Variable.Carr_Temperature = MS5611_Temp;
 8002832:	4b19      	ldr	r3, [pc, #100]	@ (8002898 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0xa0>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
			dev_WirelessComApp->Variable.Carr_VertHeight  = MS5611_Altitude;
 800283c:	4b17      	ldr	r3, [pc, #92]	@ (800289c <SubSys_WirelessCom_Telemetry_Create_Packet_For+0xa4>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
			dev_WirelessComApp->Variable.Carr_VertSpeed   = MS5611_VertSpeed;
 8002846:	4b16      	ldr	r3, [pc, #88]	@ (80028a0 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0xa8>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194

			/*From ADC*/
			dev_WirelessComApp->Variable.Carr_BatteryVoltage = BatteryVoltage;
 8002850:	4b14      	ldr	r3, [pc, #80]	@ (80028a4 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0xac>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0

			/*From L-86GPS*/
			dev_WirelessComApp->Variable.Carr_GPS_Latitude  = GPS_Latitude;
 800285a:	4b13      	ldr	r3, [pc, #76]	@ (80028a8 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0xb0>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
			dev_WirelessComApp->Variable.Carr_GPS_Longitude = GPS_Longitude;
 8002864:	4b11      	ldr	r3, [pc, #68]	@ (80028ac <SubSys_WirelessCom_Telemetry_Create_Packet_For+0xb4>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
			dev_WirelessComApp->Variable.Carr_GPS_Altitude  = GPS_Altitude;
 800286e:	4b10      	ldr	r3, [pc, #64]	@ (80028b0 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0xb8>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac

			/*! Each time a packet is generated, the count will increase by 1*/
			dev_WirelessComApp->Variable.NumOfPacket++;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0

			break;
 8002886:	bf00      	nop

		   }

}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	2000296c 	.word	0x2000296c
 8002898:	20002970 	.word	0x20002970
 800289c:	20002974 	.word	0x20002974
 80028a0:	20002978 	.word	0x20002978
 80028a4:	2000298c 	.word	0x2000298c
 80028a8:	20002998 	.word	0x20002998
 80028ac:	20002994 	.word	0x20002994
 80028b0:	20002990 	.word	0x20002990

080028b4 <bno055_assignI2C>:

#include "SubSys_Sensor_IMU_APP_Driver.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 80028bc:	4a04      	ldr	r2, [pc, #16]	@ (80028d0 <bno055_assignI2C+0x1c>)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6013      	str	r3, [r2, #0]
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	20002570 	.word	0x20002570

080028d4 <bno055_delay>:

void bno055_delay(int time) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4618      	mov	r0, r3
 80028e0:	f001 fa90 	bl	8003e04 <HAL_Delay>
#endif
}
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af02      	add	r7, sp, #8
 80028f2:	4603      	mov	r3, r0
 80028f4:	460a      	mov	r2, r1
 80028f6:	71fb      	strb	r3, [r7, #7]
 80028f8:	4613      	mov	r3, r2
 80028fa:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	733b      	strb	r3, [r7, #12]
 8002900:	79bb      	ldrb	r3, [r7, #6]
 8002902:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8002904:	4b5a      	ldr	r3, [pc, #360]	@ (8002a70 <bno055_writeData+0x184>)
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	f107 020c 	add.w	r2, r7, #12
 800290c:	230a      	movs	r3, #10
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	2302      	movs	r3, #2
 8002912:	2150      	movs	r1, #80	@ 0x50
 8002914:	f002 fe8e 	bl	8005634 <HAL_I2C_Master_Transmit>
 8002918:	4603      	mov	r3, r0
 800291a:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 800291c:	7dfb      	ldrb	r3, [r7, #23]
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 80a0 	beq.w	8002a64 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8002924:	7dfb      	ldrb	r3, [r7, #23]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d103      	bne.n	8002932 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 800292a:	4852      	ldr	r0, [pc, #328]	@ (8002a74 <bno055_writeData+0x188>)
 800292c:	f00b ffb0 	bl	800e890 <puts>
 8002930:	e012      	b.n	8002958 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8002932:	7dfb      	ldrb	r3, [r7, #23]
 8002934:	2b03      	cmp	r3, #3
 8002936:	d103      	bne.n	8002940 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8002938:	484f      	ldr	r0, [pc, #316]	@ (8002a78 <bno055_writeData+0x18c>)
 800293a:	f00b ffa9 	bl	800e890 <puts>
 800293e:	e00b      	b.n	8002958 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8002940:	7dfb      	ldrb	r3, [r7, #23]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d103      	bne.n	800294e <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8002946:	484d      	ldr	r0, [pc, #308]	@ (8002a7c <bno055_writeData+0x190>)
 8002948:	f00b ffa2 	bl	800e890 <puts>
 800294c:	e004      	b.n	8002958 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 800294e:	7dfb      	ldrb	r3, [r7, #23]
 8002950:	4619      	mov	r1, r3
 8002952:	484b      	ldr	r0, [pc, #300]	@ (8002a80 <bno055_writeData+0x194>)
 8002954:	f00b ff34 	bl	800e7c0 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8002958:	4b45      	ldr	r3, [pc, #276]	@ (8002a70 <bno055_writeData+0x184>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f003 fbcf 	bl	8006100 <HAL_I2C_GetError>
 8002962:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d07e      	beq.n	8002a68 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d103      	bne.n	8002978 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8002970:	4844      	ldr	r0, [pc, #272]	@ (8002a84 <bno055_writeData+0x198>)
 8002972:	f00b ff8d 	bl	800e890 <puts>
 8002976:	e021      	b.n	80029bc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d103      	bne.n	8002986 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 800297e:	4842      	ldr	r0, [pc, #264]	@ (8002a88 <bno055_writeData+0x19c>)
 8002980:	f00b ff86 	bl	800e890 <puts>
 8002984:	e01a      	b.n	80029bc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	2b04      	cmp	r3, #4
 800298a:	d103      	bne.n	8002994 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 800298c:	483f      	ldr	r0, [pc, #252]	@ (8002a8c <bno055_writeData+0x1a0>)
 800298e:	f00b ff7f 	bl	800e890 <puts>
 8002992:	e013      	b.n	80029bc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	2b08      	cmp	r3, #8
 8002998:	d103      	bne.n	80029a2 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 800299a:	483d      	ldr	r0, [pc, #244]	@ (8002a90 <bno055_writeData+0x1a4>)
 800299c:	f00b ff78 	bl	800e890 <puts>
 80029a0:	e00c      	b.n	80029bc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	2b10      	cmp	r3, #16
 80029a6:	d103      	bne.n	80029b0 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 80029a8:	483a      	ldr	r0, [pc, #232]	@ (8002a94 <bno055_writeData+0x1a8>)
 80029aa:	f00b ff71 	bl	800e890 <puts>
 80029ae:	e005      	b.n	80029bc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	2b20      	cmp	r3, #32
 80029b4:	d102      	bne.n	80029bc <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 80029b6:	4838      	ldr	r0, [pc, #224]	@ (8002a98 <bno055_writeData+0x1ac>)
 80029b8:	f00b ff6a 	bl	800e890 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 80029bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002a70 <bno055_writeData+0x184>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f003 fb8f 	bl	80060e4 <HAL_I2C_GetState>
 80029c6:	4603      	mov	r3, r0
 80029c8:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d103      	bne.n	80029d8 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 80029d0:	4832      	ldr	r0, [pc, #200]	@ (8002a9c <bno055_writeData+0x1b0>)
 80029d2:	f00b ff5d 	bl	800e890 <puts>
 80029d6:	e048      	b.n	8002a6a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
 80029da:	2b20      	cmp	r3, #32
 80029dc:	d103      	bne.n	80029e6 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 80029de:	482f      	ldr	r0, [pc, #188]	@ (8002a9c <bno055_writeData+0x1b0>)
 80029e0:	f00b ff56 	bl	800e890 <puts>
 80029e4:	e041      	b.n	8002a6a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	2b24      	cmp	r3, #36	@ 0x24
 80029ea:	d103      	bne.n	80029f4 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80029ec:	482c      	ldr	r0, [pc, #176]	@ (8002aa0 <bno055_writeData+0x1b4>)
 80029ee:	f00b ff4f 	bl	800e890 <puts>
 80029f2:	e03a      	b.n	8002a6a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	2b21      	cmp	r3, #33	@ 0x21
 80029f8:	d103      	bne.n	8002a02 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80029fa:	482a      	ldr	r0, [pc, #168]	@ (8002aa4 <bno055_writeData+0x1b8>)
 80029fc:	f00b ff48 	bl	800e890 <puts>
 8002a00:	e033      	b.n	8002a6a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	2b22      	cmp	r3, #34	@ 0x22
 8002a06:	d103      	bne.n	8002a10 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8002a08:	4827      	ldr	r0, [pc, #156]	@ (8002aa8 <bno055_writeData+0x1bc>)
 8002a0a:	f00b ff41 	bl	800e890 <puts>
 8002a0e:	e02c      	b.n	8002a6a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	2b28      	cmp	r3, #40	@ 0x28
 8002a14:	d103      	bne.n	8002a1e <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8002a16:	4825      	ldr	r0, [pc, #148]	@ (8002aac <bno055_writeData+0x1c0>)
 8002a18:	f00b ff3a 	bl	800e890 <puts>
 8002a1c:	e025      	b.n	8002a6a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	2b29      	cmp	r3, #41	@ 0x29
 8002a22:	d103      	bne.n	8002a2c <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8002a24:	4822      	ldr	r0, [pc, #136]	@ (8002ab0 <bno055_writeData+0x1c4>)
 8002a26:	f00b ff33 	bl	800e890 <puts>
 8002a2a:	e01e      	b.n	8002a6a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a30:	d103      	bne.n	8002a3a <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8002a32:	4820      	ldr	r0, [pc, #128]	@ (8002ab4 <bno055_writeData+0x1c8>)
 8002a34:	f00b ff2c 	bl	800e890 <puts>
 8002a38:	e017      	b.n	8002a6a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
 8002a3c:	2b60      	cmp	r3, #96	@ 0x60
 8002a3e:	d103      	bne.n	8002a48 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8002a40:	481d      	ldr	r0, [pc, #116]	@ (8002ab8 <bno055_writeData+0x1cc>)
 8002a42:	f00b ff25 	bl	800e890 <puts>
 8002a46:	e010      	b.n	8002a6a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a4c:	d103      	bne.n	8002a56 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8002a4e:	481b      	ldr	r0, [pc, #108]	@ (8002abc <bno055_writeData+0x1d0>)
 8002a50:	f00b ff1e 	bl	800e890 <puts>
 8002a54:	e009      	b.n	8002a6a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	2be0      	cmp	r3, #224	@ 0xe0
 8002a5a:	d106      	bne.n	8002a6a <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8002a5c:	4818      	ldr	r0, [pc, #96]	@ (8002ac0 <bno055_writeData+0x1d4>)
 8002a5e:	f00b ff17 	bl	800e890 <puts>
 8002a62:	e002      	b.n	8002a6a <bno055_writeData+0x17e>
    return;
 8002a64:	bf00      	nop
 8002a66:	e000      	b.n	8002a6a <bno055_writeData+0x17e>
    return;
 8002a68:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20002570 	.word	0x20002570
 8002a74:	08013a68 	.word	0x08013a68
 8002a78:	08013a8c 	.word	0x08013a8c
 8002a7c:	08013ab4 	.word	0x08013ab4
 8002a80:	08013ad8 	.word	0x08013ad8
 8002a84:	08013af0 	.word	0x08013af0
 8002a88:	08013b04 	.word	0x08013b04
 8002a8c:	08013b18 	.word	0x08013b18
 8002a90:	08013b2c 	.word	0x08013b2c
 8002a94:	08013b40 	.word	0x08013b40
 8002a98:	08013b54 	.word	0x08013b54
 8002a9c:	08013b6c 	.word	0x08013b6c
 8002aa0:	08013b84 	.word	0x08013b84
 8002aa4:	08013b98 	.word	0x08013b98
 8002aa8:	08013bb0 	.word	0x08013bb0
 8002aac:	08013bc8 	.word	0x08013bc8
 8002ab0:	08013be0 	.word	0x08013be0
 8002ab4:	08013c00 	.word	0x08013c00
 8002ab8:	08013c20 	.word	0x08013c20
 8002abc:	08013c38 	.word	0x08013c38
 8002ac0:	08013c50 	.word	0x08013c50

08002ac4 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	4603      	mov	r3, r0
 8002acc:	6039      	str	r1, [r7, #0]
 8002ace:	71fb      	strb	r3, [r7, #7]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b04 <bno055_readData+0x40>)
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	1dfa      	adds	r2, r7, #7
 8002ada:	2364      	movs	r3, #100	@ 0x64
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	2301      	movs	r3, #1
 8002ae0:	2150      	movs	r1, #80	@ 0x50
 8002ae2:	f002 fda7 	bl	8005634 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8002ae6:	4b07      	ldr	r3, [pc, #28]	@ (8002b04 <bno055_readData+0x40>)
 8002ae8:	6818      	ldr	r0, [r3, #0]
 8002aea:	79bb      	ldrb	r3, [r7, #6]
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	2264      	movs	r2, #100	@ 0x64
 8002af0:	9200      	str	r2, [sp, #0]
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	2150      	movs	r1, #80	@ 0x50
 8002af6:	f002 fe9b 	bl	8005830 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20002570 	.word	0x20002570

08002b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b08:	b598      	push	{r3, r4, r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b0c:	f001 f908 	bl	8003d20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b10:	f000 f8aa 	bl	8002c68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b14:	f000 fbb6 	bl	8003284 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b18:	f000 fb94 	bl	8003244 <MX_DMA_Init>
  MX_I2C1_Init();
 8002b1c:	f000 f95e 	bl	8002ddc <MX_I2C1_Init>
  MX_ADC1_Init();
 8002b20:	f000 f90a 	bl	8002d38 <MX_ADC1_Init>
  MX_TIM3_Init();
 8002b24:	f000 fae2 	bl	80030ec <MX_TIM3_Init>
  MX_SDIO_SD_Init();
 8002b28:	f000 f9e2 	bl	8002ef0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8002b2c:	f008 f92c 	bl	800ad88 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8002b30:	f000 fb34 	bl	800319c <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8002b34:	f000 f980 	bl	8002e38 <MX_I2C2_Init>
  MX_TIM1_Init();
 8002b38:	f000 f9fc 	bl	8002f34 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002b3c:	f000 fa7e 	bl	800303c <MX_TIM2_Init>
  MX_I2C3_Init();
 8002b40:	f000 f9a8 	bl	8002e94 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8002b44:	f000 fb54 	bl	80031f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /******>>> SENSOR BATTERY INIT BEGIN >>>******/
  	#ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_SENSOR_BATTERY_H
  	NumSerialBat = 2;	/*! Number of serial connection battery */
 8002b48:	4b38      	ldr	r3, [pc, #224]	@ (8002c2c <main+0x124>)
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	701a      	strb	r2, [r3, #0]
  	MeasBattery_Init(NumSerialBat);
 8002b4e:	4b37      	ldr	r3, [pc, #220]	@ (8002c2c <main+0x124>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fe fca8 	bl	80014a8 <MeasBattery_Init>
  /******<<< SENSOR BATTERY INIT END <<<******/


  /******>>> SENSOR TPGVH INITIALIZATION BEGIN >>>******/
  	#ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_SENSOR_TPGVH_H
  	MS5611.I2C_ADDRESS = MS5611_I2C_ADDRESS_H;
 8002b58:	4b35      	ldr	r3, [pc, #212]	@ (8002c30 <main+0x128>)
 8002b5a:	22ee      	movs	r2, #238	@ 0xee
 8002b5c:	809a      	strh	r2, [r3, #4]
  	MS5611.i2c = &hi2c1;
 8002b5e:	4b34      	ldr	r3, [pc, #208]	@ (8002c30 <main+0x128>)
 8002b60:	4a34      	ldr	r2, [pc, #208]	@ (8002c34 <main+0x12c>)
 8002b62:	601a      	str	r2, [r3, #0]
  	MS5611.Ref_Alt_Sel = 'm';
 8002b64:	4b32      	ldr	r3, [pc, #200]	@ (8002c30 <main+0x128>)
 8002b66:	226d      	movs	r2, #109	@ 0x6d
 8002b68:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
  	MS5611_Init(&MS5611);
 8002b6c:	4830      	ldr	r0, [pc, #192]	@ (8002c30 <main+0x128>)
 8002b6e:	f7fe ff97 	bl	8001aa0 <MS5611_Init>
	 * APB1 Timer Clock = 50MHz
	 * PSC = 183-1
	 * ARR = 100-1
	 * PSC and ARR's parameters for 2.73KHz passive buzzer module
	 */
	PassiveBuzz_Init(&htim3, TIM_CHANNEL_1);
 8002b72:	2100      	movs	r1, #0
 8002b74:	4830      	ldr	r0, [pc, #192]	@ (8002c38 <main+0x130>)
 8002b76:	f7fe fb01 	bl	800117c <PassiveBuzz_Init>
	#ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_SDCARD_H
	/*! We create a buffer that contains the satellite's carrier variables, and we fill it with variables from SD_Data objects */
	extern char SdDatasBuf[LineSize];

	/*!(@warning)	Don't write "E:" , "e:",  "e\" */
	SD_Mount("E/", 0);
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	482f      	ldr	r0, [pc, #188]	@ (8002c3c <main+0x134>)
 8002b7e:	f7fe fbf9 	bl	8001374 <SD_Mount>
	 * 				Finally put our variable buffer
	 *
	 * @Attention!   : If you use lowercase letters, this function will reverse the name to uppercase letters as given below
	 * 					(e.g)CAR_Raw ==> CAR_RAW
	 */
	SD_Create_Dir_File("SAT_PAYLOAD", "SAT_PAYLOAD/STM32.TXT", SdDatasBuf);
 8002b82:	4a2f      	ldr	r2, [pc, #188]	@ (8002c40 <main+0x138>)
 8002b84:	492f      	ldr	r1, [pc, #188]	@ (8002c44 <main+0x13c>)
 8002b86:	4830      	ldr	r0, [pc, #192]	@ (8002c48 <main+0x140>)
 8002b88:	f7fe fc12 	bl	80013b0 <SD_Create_Dir_File>
  /******<<< SD CARD INITIALIZATION END <<<******/


  /******>>> SENSOR GPS INITIALIZATION BEGIN >>>******/
	#ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_SENSOR_GPS_H
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	2101      	movs	r1, #1
 8002b90:	482e      	ldr	r0, [pc, #184]	@ (8002c4c <main+0x144>)
 8002b92:	f002 fbf1 	bl	8005378 <HAL_GPIO_WritePin>
	GPS_Init();
 8002b96:	f7fe fd33 	bl	8001600 <GPS_Init>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	482b      	ldr	r0, [pc, #172]	@ (8002c4c <main+0x144>)
 8002ba0:	f002 fbea 	bl	8005378 <HAL_GPIO_WritePin>
	 SubSys_WirelessCom_Config_Init(&dev_WirelessComConfig);
	 #endif

	 #ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_WIRELESSCOMMUNICATION_TELEMETRY_H
	 /*! Will be filled for your dev that use now*/
	 dev_WirelessComApp.huartX = &huart1;
 8002ba4:	4b2a      	ldr	r3, [pc, #168]	@ (8002c50 <main+0x148>)
 8002ba6:	4a2b      	ldr	r2, [pc, #172]	@ (8002c54 <main+0x14c>)
 8002ba8:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
	 dev_WirelessComConfig.Mode_SW = NormalMode; 		/*! UART and wireless channel are open, transparent transmission is on*/
 8002bac:	4b2a      	ldr	r3, [pc, #168]	@ (8002c58 <main+0x150>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	75da      	strb	r2, [r3, #23]
	 SubSys_WirelessCom_Config_WORK_MODE(&dev_WirelessComConfig);
 8002bb2:	4829      	ldr	r0, [pc, #164]	@ (8002c58 <main+0x150>)
 8002bb4:	f7ff fd20 	bl	80025f8 <SubSys_WirelessCom_Config_WORK_MODE>

	 /*! Will be filled for the PAYLOAD(Target) Device */
	 dev_WirelessComApp.Target_ADDH = 0x20;
 8002bb8:	4b25      	ldr	r3, [pc, #148]	@ (8002c50 <main+0x148>)
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 21c0 	strb.w	r2, [r3, #448]	@ 0x1c0
	 dev_WirelessComApp.Target_ADDL = 0x23;
 8002bc0:	4b23      	ldr	r3, [pc, #140]	@ (8002c50 <main+0x148>)
 8002bc2:	2223      	movs	r2, #35	@ 0x23
 8002bc4:	f883 21c1 	strb.w	r2, [r3, #449]	@ 0x1c1
	 dev_WirelessComApp.Target_Ch   = 0x10;
 8002bc8:	4b21      	ldr	r3, [pc, #132]	@ (8002c50 <main+0x148>)
 8002bca:	2210      	movs	r2, #16
 8002bcc:	f883 21c2 	strb.w	r2, [r3, #450]	@ 0x1c2


  /******>>> SENSOR IMU  INITIALIZATION BEGIN >>>******/

	#ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_SENSOR_IMU_APP_H
	bno055_assignI2C(&hi2c2);
 8002bd0:	4822      	ldr	r0, [pc, #136]	@ (8002c5c <main+0x154>)
 8002bd2:	f7ff fe6f 	bl	80028b4 <bno055_assignI2C>
	bno055_setup();
 8002bd6:	f7fe ff3b 	bl	8001a50 <bno055_setup>
	bno055_setOperationModeNDOF();
 8002bda:	f7fe ff26 	bl	8001a2a <bno055_setOperationModeNDOF>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		/*! At the beginning of each loop, the system retrieves the last recorded milliseconds */
		SystemTick = HAL_GetTick();
 8002bde:	f001 f905 	bl	8003dec <HAL_GetTick>
 8002be2:	4603      	mov	r3, r0
 8002be4:	4a1e      	ldr	r2, [pc, #120]	@ (8002c60 <main+0x158>)
 8002be6:	6013      	str	r3, [r2, #0]

		/*! It reads the battery voltage and stores it */
		ReadBatteryVoltage(&hadc1);
 8002be8:	481e      	ldr	r0, [pc, #120]	@ (8002c64 <main+0x15c>)
 8002bea:	f7fe fcad 	bl	8001548 <ReadBatteryVoltage>
		 * (P) = Pressure
		 * (G) = G force
		 * (V) = Vertical Speed
		 * (H) = Vertical Height
		 **/
		MS5611_Read_ActVal(&MS5611);
 8002bee:	4810      	ldr	r0, [pc, #64]	@ (8002c30 <main+0x128>)
 8002bf0:	f7ff fbfa 	bl	80023e8 <MS5611_Read_ActVal>

		/*! The collected data is stored into variables that created for the SD card */
		SD_FillVariables();
 8002bf4:	f7fe fb10 	bl	8001218 <SD_FillVariables>

		/*! The recorded variables are written to the SD card */
		SD_Write(SdDatasBuf, "SAT_PAYLOAD/STM32.TXT");
 8002bf8:	4912      	ldr	r1, [pc, #72]	@ (8002c44 <main+0x13c>)
 8002bfa:	4811      	ldr	r0, [pc, #68]	@ (8002c40 <main+0x138>)
 8002bfc:	f7fe fc26 	bl	800144c <SD_Write>
		//																							  GPS_Altitude);
		//				  HAL_UART_Transmit(&huart1, TelemetryData, WrittenBytes, 1000);


	    /*! Transfer all necessary datas from Carrier to Payload of Satellite*/
	    SubSys_WirelessCom_Telemetry_Transfer_From_To(Sat_Carrier, Sat_Payload, &dev_WirelessComApp);
 8002c00:	4a13      	ldr	r2, [pc, #76]	@ (8002c50 <main+0x148>)
 8002c02:	2102      	movs	r1, #2
 8002c04:	2001      	movs	r0, #1
 8002c06:	f7ff fd53 	bl	80026b0 <SubSys_WirelessCom_Telemetry_Transfer_From_To>

		/*! The system time is retrieved again and the loop waits until the elapsed time reaches 1000 milliseconds*/
		HAL_Delay(abs(1000 - (HAL_GetTick() - SystemTick)));
 8002c0a:	4b15      	ldr	r3, [pc, #84]	@ (8002c60 <main+0x158>)
 8002c0c:	681c      	ldr	r4, [r3, #0]
 8002c0e:	f001 f8ed 	bl	8003dec <HAL_GetTick>
 8002c12:	4603      	mov	r3, r0
 8002c14:	1ae3      	subs	r3, r4, r3
 8002c16:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	bfb8      	it	lt
 8002c1e:	425b      	neglt	r3, r3
 8002c20:	4618      	mov	r0, r3
 8002c22:	f001 f8ef 	bl	8003e04 <HAL_Delay>
		SystemTick = HAL_GetTick();
 8002c26:	bf00      	nop
 8002c28:	e7d9      	b.n	8002bde <main+0xd6>
 8002c2a:	bf00      	nop
 8002c2c:	20002988 	.word	0x20002988
 8002c30:	20002904 	.word	0x20002904
 8002c34:	200025bc 	.word	0x200025bc
 8002c38:	2000282c 	.word	0x2000282c
 8002c3c:	08013c68 	.word	0x08013c68
 8002c40:	2000229c 	.word	0x2000229c
 8002c44:	08013c6c 	.word	0x08013c6c
 8002c48:	08013c84 	.word	0x08013c84
 8002c4c:	40020800 	.word	0x40020800
 8002c50:	200029c0 	.word	0x200029c0
 8002c54:	20002874 	.word	0x20002874
 8002c58:	2000299c 	.word	0x2000299c
 8002c5c:	20002610 	.word	0x20002610
 8002c60:	20002b84 	.word	0x20002b84
 8002c64:	20002574 	.word	0x20002574

08002c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b094      	sub	sp, #80	@ 0x50
 8002c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c6e:	f107 0320 	add.w	r3, r7, #32
 8002c72:	2230      	movs	r2, #48	@ 0x30
 8002c74:	2100      	movs	r1, #0
 8002c76:	4618      	mov	r0, r3
 8002c78:	f00b ff36 	bl	800eae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c7c:	f107 030c 	add.w	r3, r7, #12
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	4b27      	ldr	r3, [pc, #156]	@ (8002d30 <SystemClock_Config+0xc8>)
 8002c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c94:	4a26      	ldr	r2, [pc, #152]	@ (8002d30 <SystemClock_Config+0xc8>)
 8002c96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c9c:	4b24      	ldr	r3, [pc, #144]	@ (8002d30 <SystemClock_Config+0xc8>)
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ca8:	2300      	movs	r3, #0
 8002caa:	607b      	str	r3, [r7, #4]
 8002cac:	4b21      	ldr	r3, [pc, #132]	@ (8002d34 <SystemClock_Config+0xcc>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a20      	ldr	r2, [pc, #128]	@ (8002d34 <SystemClock_Config+0xcc>)
 8002cb2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002cb6:	6013      	str	r3, [r2, #0]
 8002cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8002d34 <SystemClock_Config+0xcc>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002cc0:	607b      	str	r3, [r7, #4]
 8002cc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ccc:	2310      	movs	r3, #16
 8002cce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002cd8:	2308      	movs	r3, #8
 8002cda:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002cdc:	2348      	movs	r3, #72	@ 0x48
 8002cde:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ce8:	f107 0320 	add.w	r3, r7, #32
 8002cec:	4618      	mov	r0, r3
 8002cee:	f003 fe2f 	bl	8006950 <HAL_RCC_OscConfig>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002cf8:	f000 fb46 	bl	8003388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cfc:	230f      	movs	r3, #15
 8002cfe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d00:	2302      	movs	r3, #2
 8002d02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d12:	f107 030c 	add.w	r3, r7, #12
 8002d16:	2102      	movs	r1, #2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f004 f891 	bl	8006e40 <HAL_RCC_ClockConfig>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002d24:	f000 fb30 	bl	8003388 <Error_Handler>
  }
}
 8002d28:	bf00      	nop
 8002d2a:	3750      	adds	r7, #80	@ 0x50
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40007000 	.word	0x40007000

08002d38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d3e:	463b      	mov	r3, r7
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002d4a:	4b21      	ldr	r3, [pc, #132]	@ (8002dd0 <MX_ADC1_Init+0x98>)
 8002d4c:	4a21      	ldr	r2, [pc, #132]	@ (8002dd4 <MX_ADC1_Init+0x9c>)
 8002d4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002d50:	4b1f      	ldr	r3, [pc, #124]	@ (8002dd0 <MX_ADC1_Init+0x98>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002d56:	4b1e      	ldr	r3, [pc, #120]	@ (8002dd0 <MX_ADC1_Init+0x98>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8002dd0 <MX_ADC1_Init+0x98>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002d62:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd0 <MX_ADC1_Init+0x98>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d68:	4b19      	ldr	r3, [pc, #100]	@ (8002dd0 <MX_ADC1_Init+0x98>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d70:	4b17      	ldr	r3, [pc, #92]	@ (8002dd0 <MX_ADC1_Init+0x98>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d76:	4b16      	ldr	r3, [pc, #88]	@ (8002dd0 <MX_ADC1_Init+0x98>)
 8002d78:	4a17      	ldr	r2, [pc, #92]	@ (8002dd8 <MX_ADC1_Init+0xa0>)
 8002d7a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d7c:	4b14      	ldr	r3, [pc, #80]	@ (8002dd0 <MX_ADC1_Init+0x98>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002d82:	4b13      	ldr	r3, [pc, #76]	@ (8002dd0 <MX_ADC1_Init+0x98>)
 8002d84:	2201      	movs	r2, #1
 8002d86:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002d88:	4b11      	ldr	r3, [pc, #68]	@ (8002dd0 <MX_ADC1_Init+0x98>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d90:	4b0f      	ldr	r3, [pc, #60]	@ (8002dd0 <MX_ADC1_Init+0x98>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d96:	480e      	ldr	r0, [pc, #56]	@ (8002dd0 <MX_ADC1_Init+0x98>)
 8002d98:	f001 f858 	bl	8003e4c <HAL_ADC_Init>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002da2:	f000 faf1 	bl	8003388 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002da6:	2300      	movs	r3, #0
 8002da8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002daa:	2301      	movs	r3, #1
 8002dac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002dae:	2300      	movs	r3, #0
 8002db0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002db2:	463b      	mov	r3, r7
 8002db4:	4619      	mov	r1, r3
 8002db6:	4806      	ldr	r0, [pc, #24]	@ (8002dd0 <MX_ADC1_Init+0x98>)
 8002db8:	f001 fa0c 	bl	80041d4 <HAL_ADC_ConfigChannel>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002dc2:	f000 fae1 	bl	8003388 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002dc6:	bf00      	nop
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20002574 	.word	0x20002574
 8002dd4:	40012000 	.word	0x40012000
 8002dd8:	0f000001 	.word	0x0f000001

08002ddc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002de0:	4b12      	ldr	r3, [pc, #72]	@ (8002e2c <MX_I2C1_Init+0x50>)
 8002de2:	4a13      	ldr	r2, [pc, #76]	@ (8002e30 <MX_I2C1_Init+0x54>)
 8002de4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002de6:	4b11      	ldr	r3, [pc, #68]	@ (8002e2c <MX_I2C1_Init+0x50>)
 8002de8:	4a12      	ldr	r2, [pc, #72]	@ (8002e34 <MX_I2C1_Init+0x58>)
 8002dea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002dec:	4b0f      	ldr	r3, [pc, #60]	@ (8002e2c <MX_I2C1_Init+0x50>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002df2:	4b0e      	ldr	r3, [pc, #56]	@ (8002e2c <MX_I2C1_Init+0x50>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002df8:	4b0c      	ldr	r3, [pc, #48]	@ (8002e2c <MX_I2C1_Init+0x50>)
 8002dfa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002dfe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e00:	4b0a      	ldr	r3, [pc, #40]	@ (8002e2c <MX_I2C1_Init+0x50>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e06:	4b09      	ldr	r3, [pc, #36]	@ (8002e2c <MX_I2C1_Init+0x50>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e0c:	4b07      	ldr	r3, [pc, #28]	@ (8002e2c <MX_I2C1_Init+0x50>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e12:	4b06      	ldr	r3, [pc, #24]	@ (8002e2c <MX_I2C1_Init+0x50>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e18:	4804      	ldr	r0, [pc, #16]	@ (8002e2c <MX_I2C1_Init+0x50>)
 8002e1a:	f002 fac7 	bl	80053ac <HAL_I2C_Init>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002e24:	f000 fab0 	bl	8003388 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e28:	bf00      	nop
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	200025bc 	.word	0x200025bc
 8002e30:	40005400 	.word	0x40005400
 8002e34:	000186a0 	.word	0x000186a0

08002e38 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002e3c:	4b12      	ldr	r3, [pc, #72]	@ (8002e88 <MX_I2C2_Init+0x50>)
 8002e3e:	4a13      	ldr	r2, [pc, #76]	@ (8002e8c <MX_I2C2_Init+0x54>)
 8002e40:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002e42:	4b11      	ldr	r3, [pc, #68]	@ (8002e88 <MX_I2C2_Init+0x50>)
 8002e44:	4a12      	ldr	r2, [pc, #72]	@ (8002e90 <MX_I2C2_Init+0x58>)
 8002e46:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e48:	4b0f      	ldr	r3, [pc, #60]	@ (8002e88 <MX_I2C2_Init+0x50>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e88 <MX_I2C2_Init+0x50>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e54:	4b0c      	ldr	r3, [pc, #48]	@ (8002e88 <MX_I2C2_Init+0x50>)
 8002e56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e5a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e88 <MX_I2C2_Init+0x50>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002e62:	4b09      	ldr	r3, [pc, #36]	@ (8002e88 <MX_I2C2_Init+0x50>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e68:	4b07      	ldr	r3, [pc, #28]	@ (8002e88 <MX_I2C2_Init+0x50>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e6e:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <MX_I2C2_Init+0x50>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002e74:	4804      	ldr	r0, [pc, #16]	@ (8002e88 <MX_I2C2_Init+0x50>)
 8002e76:	f002 fa99 	bl	80053ac <HAL_I2C_Init>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002e80:	f000 fa82 	bl	8003388 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002e84:	bf00      	nop
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	20002610 	.word	0x20002610
 8002e8c:	40005800 	.word	0x40005800
 8002e90:	000186a0 	.word	0x000186a0

08002e94 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002e98:	4b12      	ldr	r3, [pc, #72]	@ (8002ee4 <MX_I2C3_Init+0x50>)
 8002e9a:	4a13      	ldr	r2, [pc, #76]	@ (8002ee8 <MX_I2C3_Init+0x54>)
 8002e9c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002e9e:	4b11      	ldr	r3, [pc, #68]	@ (8002ee4 <MX_I2C3_Init+0x50>)
 8002ea0:	4a12      	ldr	r2, [pc, #72]	@ (8002eec <MX_I2C3_Init+0x58>)
 8002ea2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee4 <MX_I2C3_Init+0x50>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8002ee4 <MX_I2C3_Init+0x50>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee4 <MX_I2C3_Init+0x50>)
 8002eb2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002eb6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee4 <MX_I2C3_Init+0x50>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002ebe:	4b09      	ldr	r3, [pc, #36]	@ (8002ee4 <MX_I2C3_Init+0x50>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ec4:	4b07      	ldr	r3, [pc, #28]	@ (8002ee4 <MX_I2C3_Init+0x50>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002eca:	4b06      	ldr	r3, [pc, #24]	@ (8002ee4 <MX_I2C3_Init+0x50>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002ed0:	4804      	ldr	r0, [pc, #16]	@ (8002ee4 <MX_I2C3_Init+0x50>)
 8002ed2:	f002 fa6b 	bl	80053ac <HAL_I2C_Init>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002edc:	f000 fa54 	bl	8003388 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002ee0:	bf00      	nop
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	20002664 	.word	0x20002664
 8002ee8:	40005c00 	.word	0x40005c00
 8002eec:	000186a0 	.word	0x000186a0

08002ef0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8002f2c <MX_SDIO_SD_Init+0x3c>)
 8002ef6:	4a0e      	ldr	r2, [pc, #56]	@ (8002f30 <MX_SDIO_SD_Init+0x40>)
 8002ef8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002efa:	4b0c      	ldr	r3, [pc, #48]	@ (8002f2c <MX_SDIO_SD_Init+0x3c>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002f00:	4b0a      	ldr	r3, [pc, #40]	@ (8002f2c <MX_SDIO_SD_Init+0x3c>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002f06:	4b09      	ldr	r3, [pc, #36]	@ (8002f2c <MX_SDIO_SD_Init+0x3c>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8002f0c:	4b07      	ldr	r3, [pc, #28]	@ (8002f2c <MX_SDIO_SD_Init+0x3c>)
 8002f0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f12:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002f14:	4b05      	ldr	r3, [pc, #20]	@ (8002f2c <MX_SDIO_SD_Init+0x3c>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8002f1a:	4b04      	ldr	r3, [pc, #16]	@ (8002f2c <MX_SDIO_SD_Init+0x3c>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002f20:	bf00      	nop
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	200026b8 	.word	0x200026b8
 8002f30:	40012c00 	.word	0x40012c00

08002f34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b092      	sub	sp, #72	@ 0x48
 8002f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f3a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	611a      	str	r2, [r3, #16]
 8002f54:	615a      	str	r2, [r3, #20]
 8002f56:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f58:	1d3b      	adds	r3, r7, #4
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f00b fdc2 	bl	800eae8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f64:	4b33      	ldr	r3, [pc, #204]	@ (8003034 <MX_TIM1_Init+0x100>)
 8002f66:	4a34      	ldr	r2, [pc, #208]	@ (8003038 <MX_TIM1_Init+0x104>)
 8002f68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002f6a:	4b32      	ldr	r3, [pc, #200]	@ (8003034 <MX_TIM1_Init+0x100>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f70:	4b30      	ldr	r3, [pc, #192]	@ (8003034 <MX_TIM1_Init+0x100>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002f76:	4b2f      	ldr	r3, [pc, #188]	@ (8003034 <MX_TIM1_Init+0x100>)
 8002f78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f7e:	4b2d      	ldr	r3, [pc, #180]	@ (8003034 <MX_TIM1_Init+0x100>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f84:	4b2b      	ldr	r3, [pc, #172]	@ (8003034 <MX_TIM1_Init+0x100>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f8a:	4b2a      	ldr	r3, [pc, #168]	@ (8003034 <MX_TIM1_Init+0x100>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002f90:	4828      	ldr	r0, [pc, #160]	@ (8003034 <MX_TIM1_Init+0x100>)
 8002f92:	f005 fc6f 	bl	8008874 <HAL_TIM_PWM_Init>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002f9c:	f000 f9f4 	bl	8003388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002fa8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002fac:	4619      	mov	r1, r3
 8002fae:	4821      	ldr	r0, [pc, #132]	@ (8003034 <MX_TIM1_Init+0x100>)
 8002fb0:	f006 f860 	bl	8009074 <HAL_TIMEx_MasterConfigSynchronization>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002fba:	f000 f9e5 	bl	8003388 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fbe:	2360      	movs	r3, #96	@ 0x60
 8002fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002fda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fde:	2204      	movs	r2, #4
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4814      	ldr	r0, [pc, #80]	@ (8003034 <MX_TIM1_Init+0x100>)
 8002fe4:	f005 fd46 	bl	8008a74 <HAL_TIM_PWM_ConfigChannel>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002fee:	f000 f9cb 	bl	8003388 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003006:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800300a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800300c:	2300      	movs	r3, #0
 800300e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003010:	1d3b      	adds	r3, r7, #4
 8003012:	4619      	mov	r1, r3
 8003014:	4807      	ldr	r0, [pc, #28]	@ (8003034 <MX_TIM1_Init+0x100>)
 8003016:	f006 f89b 	bl	8009150 <HAL_TIMEx_ConfigBreakDeadTime>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8003020:	f000 f9b2 	bl	8003388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003024:	4803      	ldr	r0, [pc, #12]	@ (8003034 <MX_TIM1_Init+0x100>)
 8003026:	f000 fc21 	bl	800386c <HAL_TIM_MspPostInit>

}
 800302a:	bf00      	nop
 800302c:	3748      	adds	r7, #72	@ 0x48
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	2000279c 	.word	0x2000279c
 8003038:	40010000 	.word	0x40010000

0800303c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08a      	sub	sp, #40	@ 0x28
 8003040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003042:	f107 0320 	add.w	r3, r7, #32
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800304c:	1d3b      	adds	r3, r7, #4
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	605a      	str	r2, [r3, #4]
 8003054:	609a      	str	r2, [r3, #8]
 8003056:	60da      	str	r2, [r3, #12]
 8003058:	611a      	str	r2, [r3, #16]
 800305a:	615a      	str	r2, [r3, #20]
 800305c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800305e:	4b22      	ldr	r3, [pc, #136]	@ (80030e8 <MX_TIM2_Init+0xac>)
 8003060:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003064:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003066:	4b20      	ldr	r3, [pc, #128]	@ (80030e8 <MX_TIM2_Init+0xac>)
 8003068:	2200      	movs	r2, #0
 800306a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800306c:	4b1e      	ldr	r3, [pc, #120]	@ (80030e8 <MX_TIM2_Init+0xac>)
 800306e:	2200      	movs	r2, #0
 8003070:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003072:	4b1d      	ldr	r3, [pc, #116]	@ (80030e8 <MX_TIM2_Init+0xac>)
 8003074:	f04f 32ff 	mov.w	r2, #4294967295
 8003078:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800307a:	4b1b      	ldr	r3, [pc, #108]	@ (80030e8 <MX_TIM2_Init+0xac>)
 800307c:	2200      	movs	r2, #0
 800307e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003080:	4b19      	ldr	r3, [pc, #100]	@ (80030e8 <MX_TIM2_Init+0xac>)
 8003082:	2200      	movs	r2, #0
 8003084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003086:	4818      	ldr	r0, [pc, #96]	@ (80030e8 <MX_TIM2_Init+0xac>)
 8003088:	f005 fbf4 	bl	8008874 <HAL_TIM_PWM_Init>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8003092:	f000 f979 	bl	8003388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003096:	2300      	movs	r3, #0
 8003098:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800309a:	2300      	movs	r3, #0
 800309c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800309e:	f107 0320 	add.w	r3, r7, #32
 80030a2:	4619      	mov	r1, r3
 80030a4:	4810      	ldr	r0, [pc, #64]	@ (80030e8 <MX_TIM2_Init+0xac>)
 80030a6:	f005 ffe5 	bl	8009074 <HAL_TIMEx_MasterConfigSynchronization>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80030b0:	f000 f96a 	bl	8003388 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030b4:	2360      	movs	r3, #96	@ 0x60
 80030b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030c4:	1d3b      	adds	r3, r7, #4
 80030c6:	2200      	movs	r2, #0
 80030c8:	4619      	mov	r1, r3
 80030ca:	4807      	ldr	r0, [pc, #28]	@ (80030e8 <MX_TIM2_Init+0xac>)
 80030cc:	f005 fcd2 	bl	8008a74 <HAL_TIM_PWM_ConfigChannel>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80030d6:	f000 f957 	bl	8003388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80030da:	4803      	ldr	r0, [pc, #12]	@ (80030e8 <MX_TIM2_Init+0xac>)
 80030dc:	f000 fbc6 	bl	800386c <HAL_TIM_MspPostInit>

}
 80030e0:	bf00      	nop
 80030e2:	3728      	adds	r7, #40	@ 0x28
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	200027e4 	.word	0x200027e4

080030ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08a      	sub	sp, #40	@ 0x28
 80030f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030f2:	f107 0320 	add.w	r3, r7, #32
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030fc:	1d3b      	adds	r3, r7, #4
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	605a      	str	r2, [r3, #4]
 8003104:	609a      	str	r2, [r3, #8]
 8003106:	60da      	str	r2, [r3, #12]
 8003108:	611a      	str	r2, [r3, #16]
 800310a:	615a      	str	r2, [r3, #20]
 800310c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800310e:	4b21      	ldr	r3, [pc, #132]	@ (8003194 <MX_TIM3_Init+0xa8>)
 8003110:	4a21      	ldr	r2, [pc, #132]	@ (8003198 <MX_TIM3_Init+0xac>)
 8003112:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 183-1;
 8003114:	4b1f      	ldr	r3, [pc, #124]	@ (8003194 <MX_TIM3_Init+0xa8>)
 8003116:	22b6      	movs	r2, #182	@ 0xb6
 8003118:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800311a:	4b1e      	ldr	r3, [pc, #120]	@ (8003194 <MX_TIM3_Init+0xa8>)
 800311c:	2200      	movs	r2, #0
 800311e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8003120:	4b1c      	ldr	r3, [pc, #112]	@ (8003194 <MX_TIM3_Init+0xa8>)
 8003122:	2263      	movs	r2, #99	@ 0x63
 8003124:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003126:	4b1b      	ldr	r3, [pc, #108]	@ (8003194 <MX_TIM3_Init+0xa8>)
 8003128:	2200      	movs	r2, #0
 800312a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800312c:	4b19      	ldr	r3, [pc, #100]	@ (8003194 <MX_TIM3_Init+0xa8>)
 800312e:	2200      	movs	r2, #0
 8003130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003132:	4818      	ldr	r0, [pc, #96]	@ (8003194 <MX_TIM3_Init+0xa8>)
 8003134:	f005 fb9e 	bl	8008874 <HAL_TIM_PWM_Init>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800313e:	f000 f923 	bl	8003388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003142:	2300      	movs	r3, #0
 8003144:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003146:	2300      	movs	r3, #0
 8003148:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800314a:	f107 0320 	add.w	r3, r7, #32
 800314e:	4619      	mov	r1, r3
 8003150:	4810      	ldr	r0, [pc, #64]	@ (8003194 <MX_TIM3_Init+0xa8>)
 8003152:	f005 ff8f 	bl	8009074 <HAL_TIMEx_MasterConfigSynchronization>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800315c:	f000 f914 	bl	8003388 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003160:	2360      	movs	r3, #96	@ 0x60
 8003162:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003168:	2300      	movs	r3, #0
 800316a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003170:	1d3b      	adds	r3, r7, #4
 8003172:	2200      	movs	r2, #0
 8003174:	4619      	mov	r1, r3
 8003176:	4807      	ldr	r0, [pc, #28]	@ (8003194 <MX_TIM3_Init+0xa8>)
 8003178:	f005 fc7c 	bl	8008a74 <HAL_TIM_PWM_ConfigChannel>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003182:	f000 f901 	bl	8003388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003186:	4803      	ldr	r0, [pc, #12]	@ (8003194 <MX_TIM3_Init+0xa8>)
 8003188:	f000 fb70 	bl	800386c <HAL_TIM_MspPostInit>

}
 800318c:	bf00      	nop
 800318e:	3728      	adds	r7, #40	@ 0x28
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	2000282c 	.word	0x2000282c
 8003198:	40000400 	.word	0x40000400

0800319c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031a0:	4b11      	ldr	r3, [pc, #68]	@ (80031e8 <MX_USART1_UART_Init+0x4c>)
 80031a2:	4a12      	ldr	r2, [pc, #72]	@ (80031ec <MX_USART1_UART_Init+0x50>)
 80031a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80031a6:	4b10      	ldr	r3, [pc, #64]	@ (80031e8 <MX_USART1_UART_Init+0x4c>)
 80031a8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80031ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031ae:	4b0e      	ldr	r3, [pc, #56]	@ (80031e8 <MX_USART1_UART_Init+0x4c>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031b4:	4b0c      	ldr	r3, [pc, #48]	@ (80031e8 <MX_USART1_UART_Init+0x4c>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031ba:	4b0b      	ldr	r3, [pc, #44]	@ (80031e8 <MX_USART1_UART_Init+0x4c>)
 80031bc:	2200      	movs	r2, #0
 80031be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031c0:	4b09      	ldr	r3, [pc, #36]	@ (80031e8 <MX_USART1_UART_Init+0x4c>)
 80031c2:	220c      	movs	r2, #12
 80031c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031c6:	4b08      	ldr	r3, [pc, #32]	@ (80031e8 <MX_USART1_UART_Init+0x4c>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031cc:	4b06      	ldr	r3, [pc, #24]	@ (80031e8 <MX_USART1_UART_Init+0x4c>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031d2:	4805      	ldr	r0, [pc, #20]	@ (80031e8 <MX_USART1_UART_Init+0x4c>)
 80031d4:	f006 f80e 	bl	80091f4 <HAL_UART_Init>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80031de:	f000 f8d3 	bl	8003388 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031e2:	bf00      	nop
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20002874 	.word	0x20002874
 80031ec:	40011000 	.word	0x40011000

080031f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031f4:	4b11      	ldr	r3, [pc, #68]	@ (800323c <MX_USART2_UART_Init+0x4c>)
 80031f6:	4a12      	ldr	r2, [pc, #72]	@ (8003240 <MX_USART2_UART_Init+0x50>)
 80031f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80031fa:	4b10      	ldr	r3, [pc, #64]	@ (800323c <MX_USART2_UART_Init+0x4c>)
 80031fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003200:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003202:	4b0e      	ldr	r3, [pc, #56]	@ (800323c <MX_USART2_UART_Init+0x4c>)
 8003204:	2200      	movs	r2, #0
 8003206:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003208:	4b0c      	ldr	r3, [pc, #48]	@ (800323c <MX_USART2_UART_Init+0x4c>)
 800320a:	2200      	movs	r2, #0
 800320c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800320e:	4b0b      	ldr	r3, [pc, #44]	@ (800323c <MX_USART2_UART_Init+0x4c>)
 8003210:	2200      	movs	r2, #0
 8003212:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003214:	4b09      	ldr	r3, [pc, #36]	@ (800323c <MX_USART2_UART_Init+0x4c>)
 8003216:	220c      	movs	r2, #12
 8003218:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800321a:	4b08      	ldr	r3, [pc, #32]	@ (800323c <MX_USART2_UART_Init+0x4c>)
 800321c:	2200      	movs	r2, #0
 800321e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003220:	4b06      	ldr	r3, [pc, #24]	@ (800323c <MX_USART2_UART_Init+0x4c>)
 8003222:	2200      	movs	r2, #0
 8003224:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003226:	4805      	ldr	r0, [pc, #20]	@ (800323c <MX_USART2_UART_Init+0x4c>)
 8003228:	f005 ffe4 	bl	80091f4 <HAL_UART_Init>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003232:	f000 f8a9 	bl	8003388 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003236:	bf00      	nop
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	200028bc 	.word	0x200028bc
 8003240:	40004400 	.word	0x40004400

08003244 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800324a:	2300      	movs	r3, #0
 800324c:	607b      	str	r3, [r7, #4]
 800324e:	4b0c      	ldr	r3, [pc, #48]	@ (8003280 <MX_DMA_Init+0x3c>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003252:	4a0b      	ldr	r2, [pc, #44]	@ (8003280 <MX_DMA_Init+0x3c>)
 8003254:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003258:	6313      	str	r3, [r2, #48]	@ 0x30
 800325a:	4b09      	ldr	r3, [pc, #36]	@ (8003280 <MX_DMA_Init+0x3c>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003262:	607b      	str	r3, [r7, #4]
 8003264:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003266:	2200      	movs	r2, #0
 8003268:	2100      	movs	r1, #0
 800326a:	203b      	movs	r0, #59	@ 0x3b
 800326c:	f001 fabb 	bl	80047e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003270:	203b      	movs	r0, #59	@ 0x3b
 8003272:	f001 fad4 	bl	800481e <HAL_NVIC_EnableIRQ>

}
 8003276:	bf00      	nop
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40023800 	.word	0x40023800

08003284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08a      	sub	sp, #40	@ 0x28
 8003288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800328a:	f107 0314 	add.w	r3, r7, #20
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	605a      	str	r2, [r3, #4]
 8003294:	609a      	str	r2, [r3, #8]
 8003296:	60da      	str	r2, [r3, #12]
 8003298:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800329a:	2300      	movs	r3, #0
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	4b37      	ldr	r3, [pc, #220]	@ (800337c <MX_GPIO_Init+0xf8>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a2:	4a36      	ldr	r2, [pc, #216]	@ (800337c <MX_GPIO_Init+0xf8>)
 80032a4:	f043 0304 	orr.w	r3, r3, #4
 80032a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032aa:	4b34      	ldr	r3, [pc, #208]	@ (800337c <MX_GPIO_Init+0xf8>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	613b      	str	r3, [r7, #16]
 80032b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	4b30      	ldr	r3, [pc, #192]	@ (800337c <MX_GPIO_Init+0xf8>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032be:	4a2f      	ldr	r2, [pc, #188]	@ (800337c <MX_GPIO_Init+0xf8>)
 80032c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032c6:	4b2d      	ldr	r3, [pc, #180]	@ (800337c <MX_GPIO_Init+0xf8>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	60bb      	str	r3, [r7, #8]
 80032d6:	4b29      	ldr	r3, [pc, #164]	@ (800337c <MX_GPIO_Init+0xf8>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032da:	4a28      	ldr	r2, [pc, #160]	@ (800337c <MX_GPIO_Init+0xf8>)
 80032dc:	f043 0301 	orr.w	r3, r3, #1
 80032e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032e2:	4b26      	ldr	r3, [pc, #152]	@ (800337c <MX_GPIO_Init+0xf8>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	60bb      	str	r3, [r7, #8]
 80032ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	607b      	str	r3, [r7, #4]
 80032f2:	4b22      	ldr	r3, [pc, #136]	@ (800337c <MX_GPIO_Init+0xf8>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f6:	4a21      	ldr	r2, [pc, #132]	@ (800337c <MX_GPIO_Init+0xf8>)
 80032f8:	f043 0302 	orr.w	r3, r3, #2
 80032fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032fe:	4b1f      	ldr	r3, [pc, #124]	@ (800337c <MX_GPIO_Init+0xf8>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	607b      	str	r3, [r7, #4]
 8003308:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800330a:	2200      	movs	r2, #0
 800330c:	2133      	movs	r1, #51	@ 0x33
 800330e:	481c      	ldr	r0, [pc, #112]	@ (8003380 <MX_GPIO_Init+0xfc>)
 8003310:	f002 f832 	bl	8005378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8003314:	2200      	movs	r2, #0
 8003316:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800331a:	481a      	ldr	r0, [pc, #104]	@ (8003384 <MX_GPIO_Init+0x100>)
 800331c:	f002 f82c 	bl	8005378 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003320:	2333      	movs	r3, #51	@ 0x33
 8003322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003324:	2301      	movs	r3, #1
 8003326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003328:	2300      	movs	r3, #0
 800332a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332c:	2300      	movs	r3, #0
 800332e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003330:	f107 0314 	add.w	r3, r7, #20
 8003334:	4619      	mov	r1, r3
 8003336:	4812      	ldr	r0, [pc, #72]	@ (8003380 <MX_GPIO_Init+0xfc>)
 8003338:	f001 fe9a 	bl	8005070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800333c:	2304      	movs	r3, #4
 800333e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003340:	2300      	movs	r3, #0
 8003342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003344:	2300      	movs	r3, #0
 8003346:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003348:	f107 0314 	add.w	r3, r7, #20
 800334c:	4619      	mov	r1, r3
 800334e:	480c      	ldr	r0, [pc, #48]	@ (8003380 <MX_GPIO_Init+0xfc>)
 8003350:	f001 fe8e 	bl	8005070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003354:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800335a:	2301      	movs	r3, #1
 800335c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335e:	2300      	movs	r3, #0
 8003360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003362:	2300      	movs	r3, #0
 8003364:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003366:	f107 0314 	add.w	r3, r7, #20
 800336a:	4619      	mov	r1, r3
 800336c:	4805      	ldr	r0, [pc, #20]	@ (8003384 <MX_GPIO_Init+0x100>)
 800336e:	f001 fe7f 	bl	8005070 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003372:	bf00      	nop
 8003374:	3728      	adds	r7, #40	@ 0x28
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40023800 	.word	0x40023800
 8003380:	40020800 	.word	0x40020800
 8003384:	40020400 	.word	0x40020400

08003388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800338c:	b672      	cpsid	i
}
 800338e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003390:	bf00      	nop
 8003392:	e7fd      	b.n	8003390 <Error_Handler+0x8>

08003394 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800339a:	2300      	movs	r3, #0
 800339c:	607b      	str	r3, [r7, #4]
 800339e:	4b10      	ldr	r3, [pc, #64]	@ (80033e0 <HAL_MspInit+0x4c>)
 80033a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a2:	4a0f      	ldr	r2, [pc, #60]	@ (80033e0 <HAL_MspInit+0x4c>)
 80033a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80033aa:	4b0d      	ldr	r3, [pc, #52]	@ (80033e0 <HAL_MspInit+0x4c>)
 80033ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033b2:	607b      	str	r3, [r7, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033b6:	2300      	movs	r3, #0
 80033b8:	603b      	str	r3, [r7, #0]
 80033ba:	4b09      	ldr	r3, [pc, #36]	@ (80033e0 <HAL_MspInit+0x4c>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033be:	4a08      	ldr	r2, [pc, #32]	@ (80033e0 <HAL_MspInit+0x4c>)
 80033c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033c6:	4b06      	ldr	r3, [pc, #24]	@ (80033e0 <HAL_MspInit+0x4c>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ce:	603b      	str	r3, [r7, #0]
 80033d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40023800 	.word	0x40023800

080033e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b08a      	sub	sp, #40	@ 0x28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ec:	f107 0314 	add.w	r3, r7, #20
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	605a      	str	r2, [r3, #4]
 80033f6:	609a      	str	r2, [r3, #8]
 80033f8:	60da      	str	r2, [r3, #12]
 80033fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a17      	ldr	r2, [pc, #92]	@ (8003460 <HAL_ADC_MspInit+0x7c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d127      	bne.n	8003456 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003406:	2300      	movs	r3, #0
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	4b16      	ldr	r3, [pc, #88]	@ (8003464 <HAL_ADC_MspInit+0x80>)
 800340c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340e:	4a15      	ldr	r2, [pc, #84]	@ (8003464 <HAL_ADC_MspInit+0x80>)
 8003410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003414:	6453      	str	r3, [r2, #68]	@ 0x44
 8003416:	4b13      	ldr	r3, [pc, #76]	@ (8003464 <HAL_ADC_MspInit+0x80>)
 8003418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	4b0f      	ldr	r3, [pc, #60]	@ (8003464 <HAL_ADC_MspInit+0x80>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342a:	4a0e      	ldr	r2, [pc, #56]	@ (8003464 <HAL_ADC_MspInit+0x80>)
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	6313      	str	r3, [r2, #48]	@ 0x30
 8003432:	4b0c      	ldr	r3, [pc, #48]	@ (8003464 <HAL_ADC_MspInit+0x80>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800343e:	2301      	movs	r3, #1
 8003440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003442:	2303      	movs	r3, #3
 8003444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003446:	2300      	movs	r3, #0
 8003448:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344a:	f107 0314 	add.w	r3, r7, #20
 800344e:	4619      	mov	r1, r3
 8003450:	4805      	ldr	r0, [pc, #20]	@ (8003468 <HAL_ADC_MspInit+0x84>)
 8003452:	f001 fe0d 	bl	8005070 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003456:	bf00      	nop
 8003458:	3728      	adds	r7, #40	@ 0x28
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40012000 	.word	0x40012000
 8003464:	40023800 	.word	0x40023800
 8003468:	40020000 	.word	0x40020000

0800346c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08e      	sub	sp, #56	@ 0x38
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003474:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a63      	ldr	r2, [pc, #396]	@ (8003618 <HAL_I2C_MspInit+0x1ac>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d12c      	bne.n	80034e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	623b      	str	r3, [r7, #32]
 8003492:	4b62      	ldr	r3, [pc, #392]	@ (800361c <HAL_I2C_MspInit+0x1b0>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003496:	4a61      	ldr	r2, [pc, #388]	@ (800361c <HAL_I2C_MspInit+0x1b0>)
 8003498:	f043 0302 	orr.w	r3, r3, #2
 800349c:	6313      	str	r3, [r2, #48]	@ 0x30
 800349e:	4b5f      	ldr	r3, [pc, #380]	@ (800361c <HAL_I2C_MspInit+0x1b0>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	623b      	str	r3, [r7, #32]
 80034a8:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034aa:	23c0      	movs	r3, #192	@ 0xc0
 80034ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034ae:	2312      	movs	r3, #18
 80034b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b6:	2303      	movs	r3, #3
 80034b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80034ba:	2304      	movs	r3, #4
 80034bc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034c2:	4619      	mov	r1, r3
 80034c4:	4856      	ldr	r0, [pc, #344]	@ (8003620 <HAL_I2C_MspInit+0x1b4>)
 80034c6:	f001 fdd3 	bl	8005070 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	61fb      	str	r3, [r7, #28]
 80034ce:	4b53      	ldr	r3, [pc, #332]	@ (800361c <HAL_I2C_MspInit+0x1b0>)
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	4a52      	ldr	r2, [pc, #328]	@ (800361c <HAL_I2C_MspInit+0x1b0>)
 80034d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80034d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034da:	4b50      	ldr	r3, [pc, #320]	@ (800361c <HAL_I2C_MspInit+0x1b0>)
 80034dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034e2:	61fb      	str	r3, [r7, #28]
 80034e4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80034e6:	e092      	b.n	800360e <HAL_I2C_MspInit+0x1a2>
  else if(hi2c->Instance==I2C2)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a4d      	ldr	r2, [pc, #308]	@ (8003624 <HAL_I2C_MspInit+0x1b8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d13d      	bne.n	800356e <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034f2:	2300      	movs	r3, #0
 80034f4:	61bb      	str	r3, [r7, #24]
 80034f6:	4b49      	ldr	r3, [pc, #292]	@ (800361c <HAL_I2C_MspInit+0x1b0>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fa:	4a48      	ldr	r2, [pc, #288]	@ (800361c <HAL_I2C_MspInit+0x1b0>)
 80034fc:	f043 0302 	orr.w	r3, r3, #2
 8003500:	6313      	str	r3, [r2, #48]	@ 0x30
 8003502:	4b46      	ldr	r3, [pc, #280]	@ (800361c <HAL_I2C_MspInit+0x1b0>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	61bb      	str	r3, [r7, #24]
 800350c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800350e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003512:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003514:	2312      	movs	r3, #18
 8003516:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003518:	2300      	movs	r3, #0
 800351a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800351c:	2303      	movs	r3, #3
 800351e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003520:	2304      	movs	r3, #4
 8003522:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003524:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003528:	4619      	mov	r1, r3
 800352a:	483d      	ldr	r0, [pc, #244]	@ (8003620 <HAL_I2C_MspInit+0x1b4>)
 800352c:	f001 fda0 	bl	8005070 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003530:	2308      	movs	r3, #8
 8003532:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003534:	2312      	movs	r3, #18
 8003536:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003538:	2300      	movs	r3, #0
 800353a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800353c:	2303      	movs	r3, #3
 800353e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003540:	2309      	movs	r3, #9
 8003542:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003544:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003548:	4619      	mov	r1, r3
 800354a:	4835      	ldr	r0, [pc, #212]	@ (8003620 <HAL_I2C_MspInit+0x1b4>)
 800354c:	f001 fd90 	bl	8005070 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	4b31      	ldr	r3, [pc, #196]	@ (800361c <HAL_I2C_MspInit+0x1b0>)
 8003556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003558:	4a30      	ldr	r2, [pc, #192]	@ (800361c <HAL_I2C_MspInit+0x1b0>)
 800355a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800355e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003560:	4b2e      	ldr	r3, [pc, #184]	@ (800361c <HAL_I2C_MspInit+0x1b0>)
 8003562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003564:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	697b      	ldr	r3, [r7, #20]
}
 800356c:	e04f      	b.n	800360e <HAL_I2C_MspInit+0x1a2>
  else if(hi2c->Instance==I2C3)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a2d      	ldr	r2, [pc, #180]	@ (8003628 <HAL_I2C_MspInit+0x1bc>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d14a      	bne.n	800360e <HAL_I2C_MspInit+0x1a2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003578:	2300      	movs	r3, #0
 800357a:	613b      	str	r3, [r7, #16]
 800357c:	4b27      	ldr	r3, [pc, #156]	@ (800361c <HAL_I2C_MspInit+0x1b0>)
 800357e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003580:	4a26      	ldr	r2, [pc, #152]	@ (800361c <HAL_I2C_MspInit+0x1b0>)
 8003582:	f043 0301 	orr.w	r3, r3, #1
 8003586:	6313      	str	r3, [r2, #48]	@ 0x30
 8003588:	4b24      	ldr	r3, [pc, #144]	@ (800361c <HAL_I2C_MspInit+0x1b0>)
 800358a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003594:	2300      	movs	r3, #0
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	4b20      	ldr	r3, [pc, #128]	@ (800361c <HAL_I2C_MspInit+0x1b0>)
 800359a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359c:	4a1f      	ldr	r2, [pc, #124]	@ (800361c <HAL_I2C_MspInit+0x1b0>)
 800359e:	f043 0302 	orr.w	r3, r3, #2
 80035a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80035a4:	4b1d      	ldr	r3, [pc, #116]	@ (800361c <HAL_I2C_MspInit+0x1b0>)
 80035a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80035b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035b6:	2312      	movs	r3, #18
 80035b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035be:	2303      	movs	r3, #3
 80035c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80035c2:	2304      	movs	r3, #4
 80035c4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035ca:	4619      	mov	r1, r3
 80035cc:	4817      	ldr	r0, [pc, #92]	@ (800362c <HAL_I2C_MspInit+0x1c0>)
 80035ce:	f001 fd4f 	bl	8005070 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80035d2:	2310      	movs	r3, #16
 80035d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035d6:	2312      	movs	r3, #18
 80035d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035de:	2303      	movs	r3, #3
 80035e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80035e2:	2309      	movs	r3, #9
 80035e4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035ea:	4619      	mov	r1, r3
 80035ec:	480c      	ldr	r0, [pc, #48]	@ (8003620 <HAL_I2C_MspInit+0x1b4>)
 80035ee:	f001 fd3f 	bl	8005070 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80035f2:	2300      	movs	r3, #0
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	4b09      	ldr	r3, [pc, #36]	@ (800361c <HAL_I2C_MspInit+0x1b0>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fa:	4a08      	ldr	r2, [pc, #32]	@ (800361c <HAL_I2C_MspInit+0x1b0>)
 80035fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003600:	6413      	str	r3, [r2, #64]	@ 0x40
 8003602:	4b06      	ldr	r3, [pc, #24]	@ (800361c <HAL_I2C_MspInit+0x1b0>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003606:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800360a:	60bb      	str	r3, [r7, #8]
 800360c:	68bb      	ldr	r3, [r7, #8]
}
 800360e:	bf00      	nop
 8003610:	3738      	adds	r7, #56	@ 0x38
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40005400 	.word	0x40005400
 800361c:	40023800 	.word	0x40023800
 8003620:	40020400 	.word	0x40020400
 8003624:	40005800 	.word	0x40005800
 8003628:	40005c00 	.word	0x40005c00
 800362c:	40020000 	.word	0x40020000

08003630 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b08c      	sub	sp, #48	@ 0x30
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003638:	f107 031c 	add.w	r3, r7, #28
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	605a      	str	r2, [r3, #4]
 8003642:	609a      	str	r2, [r3, #8]
 8003644:	60da      	str	r2, [r3, #12]
 8003646:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a5a      	ldr	r2, [pc, #360]	@ (80037b8 <HAL_SD_MspInit+0x188>)
 800364e:	4293      	cmp	r3, r2
 8003650:	f040 80ad 	bne.w	80037ae <HAL_SD_MspInit+0x17e>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003654:	2300      	movs	r3, #0
 8003656:	61bb      	str	r3, [r7, #24]
 8003658:	4b58      	ldr	r3, [pc, #352]	@ (80037bc <HAL_SD_MspInit+0x18c>)
 800365a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365c:	4a57      	ldr	r2, [pc, #348]	@ (80037bc <HAL_SD_MspInit+0x18c>)
 800365e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003662:	6453      	str	r3, [r2, #68]	@ 0x44
 8003664:	4b55      	ldr	r3, [pc, #340]	@ (80037bc <HAL_SD_MspInit+0x18c>)
 8003666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003668:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800366c:	61bb      	str	r3, [r7, #24]
 800366e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	4b51      	ldr	r3, [pc, #324]	@ (80037bc <HAL_SD_MspInit+0x18c>)
 8003676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003678:	4a50      	ldr	r2, [pc, #320]	@ (80037bc <HAL_SD_MspInit+0x18c>)
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003680:	4b4e      	ldr	r3, [pc, #312]	@ (80037bc <HAL_SD_MspInit+0x18c>)
 8003682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800368c:	2300      	movs	r3, #0
 800368e:	613b      	str	r3, [r7, #16]
 8003690:	4b4a      	ldr	r3, [pc, #296]	@ (80037bc <HAL_SD_MspInit+0x18c>)
 8003692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003694:	4a49      	ldr	r2, [pc, #292]	@ (80037bc <HAL_SD_MspInit+0x18c>)
 8003696:	f043 0302 	orr.w	r3, r3, #2
 800369a:	6313      	str	r3, [r2, #48]	@ 0x30
 800369c:	4b47      	ldr	r3, [pc, #284]	@ (80037bc <HAL_SD_MspInit+0x18c>)
 800369e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	4b43      	ldr	r3, [pc, #268]	@ (80037bc <HAL_SD_MspInit+0x18c>)
 80036ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b0:	4a42      	ldr	r2, [pc, #264]	@ (80037bc <HAL_SD_MspInit+0x18c>)
 80036b2:	f043 0304 	orr.w	r3, r3, #4
 80036b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80036b8:	4b40      	ldr	r3, [pc, #256]	@ (80037bc <HAL_SD_MspInit+0x18c>)
 80036ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80036c4:	2340      	movs	r3, #64	@ 0x40
 80036c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c8:	2302      	movs	r3, #2
 80036ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036d0:	2303      	movs	r3, #3
 80036d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80036d4:	230c      	movs	r3, #12
 80036d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d8:	f107 031c 	add.w	r3, r7, #28
 80036dc:	4619      	mov	r1, r3
 80036de:	4838      	ldr	r0, [pc, #224]	@ (80037c0 <HAL_SD_MspInit+0x190>)
 80036e0:	f001 fcc6 	bl	8005070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80036e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ea:	2302      	movs	r3, #2
 80036ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036f2:	2303      	movs	r3, #3
 80036f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80036f6:	230c      	movs	r3, #12
 80036f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036fa:	f107 031c 	add.w	r3, r7, #28
 80036fe:	4619      	mov	r1, r3
 8003700:	4830      	ldr	r0, [pc, #192]	@ (80037c4 <HAL_SD_MspInit+0x194>)
 8003702:	f001 fcb5 	bl	8005070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003706:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800370a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370c:	2302      	movs	r3, #2
 800370e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003710:	2300      	movs	r3, #0
 8003712:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003714:	2303      	movs	r3, #3
 8003716:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003718:	230c      	movs	r3, #12
 800371a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800371c:	f107 031c 	add.w	r3, r7, #28
 8003720:	4619      	mov	r1, r3
 8003722:	4829      	ldr	r0, [pc, #164]	@ (80037c8 <HAL_SD_MspInit+0x198>)
 8003724:	f001 fca4 	bl	8005070 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8003728:	4b28      	ldr	r3, [pc, #160]	@ (80037cc <HAL_SD_MspInit+0x19c>)
 800372a:	4a29      	ldr	r2, [pc, #164]	@ (80037d0 <HAL_SD_MspInit+0x1a0>)
 800372c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800372e:	4b27      	ldr	r3, [pc, #156]	@ (80037cc <HAL_SD_MspInit+0x19c>)
 8003730:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003734:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003736:	4b25      	ldr	r3, [pc, #148]	@ (80037cc <HAL_SD_MspInit+0x19c>)
 8003738:	2200      	movs	r2, #0
 800373a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800373c:	4b23      	ldr	r3, [pc, #140]	@ (80037cc <HAL_SD_MspInit+0x19c>)
 800373e:	2200      	movs	r2, #0
 8003740:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003742:	4b22      	ldr	r3, [pc, #136]	@ (80037cc <HAL_SD_MspInit+0x19c>)
 8003744:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003748:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800374a:	4b20      	ldr	r3, [pc, #128]	@ (80037cc <HAL_SD_MspInit+0x19c>)
 800374c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003750:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003752:	4b1e      	ldr	r3, [pc, #120]	@ (80037cc <HAL_SD_MspInit+0x19c>)
 8003754:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003758:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800375a:	4b1c      	ldr	r3, [pc, #112]	@ (80037cc <HAL_SD_MspInit+0x19c>)
 800375c:	2220      	movs	r2, #32
 800375e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003760:	4b1a      	ldr	r3, [pc, #104]	@ (80037cc <HAL_SD_MspInit+0x19c>)
 8003762:	2200      	movs	r2, #0
 8003764:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003766:	4b19      	ldr	r3, [pc, #100]	@ (80037cc <HAL_SD_MspInit+0x19c>)
 8003768:	2204      	movs	r2, #4
 800376a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800376c:	4b17      	ldr	r3, [pc, #92]	@ (80037cc <HAL_SD_MspInit+0x19c>)
 800376e:	2203      	movs	r2, #3
 8003770:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003772:	4b16      	ldr	r3, [pc, #88]	@ (80037cc <HAL_SD_MspInit+0x19c>)
 8003774:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003778:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800377a:	4b14      	ldr	r3, [pc, #80]	@ (80037cc <HAL_SD_MspInit+0x19c>)
 800377c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003780:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8003782:	4812      	ldr	r0, [pc, #72]	@ (80037cc <HAL_SD_MspInit+0x19c>)
 8003784:	f001 f866 	bl	8004854 <HAL_DMA_Init>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <HAL_SD_MspInit+0x162>
    {
      Error_Handler();
 800378e:	f7ff fdfb 	bl	8003388 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a0d      	ldr	r2, [pc, #52]	@ (80037cc <HAL_SD_MspInit+0x19c>)
 8003796:	641a      	str	r2, [r3, #64]	@ 0x40
 8003798:	4a0c      	ldr	r2, [pc, #48]	@ (80037cc <HAL_SD_MspInit+0x19c>)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800379e:	2200      	movs	r2, #0
 80037a0:	2100      	movs	r1, #0
 80037a2:	2031      	movs	r0, #49	@ 0x31
 80037a4:	f001 f81f 	bl	80047e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80037a8:	2031      	movs	r0, #49	@ 0x31
 80037aa:	f001 f838 	bl	800481e <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 80037ae:	bf00      	nop
 80037b0:	3730      	adds	r7, #48	@ 0x30
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40012c00 	.word	0x40012c00
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40020000 	.word	0x40020000
 80037c4:	40020400 	.word	0x40020400
 80037c8:	40020800 	.word	0x40020800
 80037cc:	2000273c 	.word	0x2000273c
 80037d0:	40026458 	.word	0x40026458

080037d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003860 <HAL_TIM_PWM_MspInit+0x8c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d10e      	bne.n	8003804 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	617b      	str	r3, [r7, #20]
 80037ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003864 <HAL_TIM_PWM_MspInit+0x90>)
 80037ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003864 <HAL_TIM_PWM_MspInit+0x90>)
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80037f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003864 <HAL_TIM_PWM_MspInit+0x90>)
 80037f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003802:	e026      	b.n	8003852 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800380c:	d10e      	bne.n	800382c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	4b14      	ldr	r3, [pc, #80]	@ (8003864 <HAL_TIM_PWM_MspInit+0x90>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003816:	4a13      	ldr	r2, [pc, #76]	@ (8003864 <HAL_TIM_PWM_MspInit+0x90>)
 8003818:	f043 0301 	orr.w	r3, r3, #1
 800381c:	6413      	str	r3, [r2, #64]	@ 0x40
 800381e:	4b11      	ldr	r3, [pc, #68]	@ (8003864 <HAL_TIM_PWM_MspInit+0x90>)
 8003820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	693b      	ldr	r3, [r7, #16]
}
 800382a:	e012      	b.n	8003852 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a0d      	ldr	r2, [pc, #52]	@ (8003868 <HAL_TIM_PWM_MspInit+0x94>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d10d      	bne.n	8003852 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	4b0a      	ldr	r3, [pc, #40]	@ (8003864 <HAL_TIM_PWM_MspInit+0x90>)
 800383c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383e:	4a09      	ldr	r2, [pc, #36]	@ (8003864 <HAL_TIM_PWM_MspInit+0x90>)
 8003840:	f043 0302 	orr.w	r3, r3, #2
 8003844:	6413      	str	r3, [r2, #64]	@ 0x40
 8003846:	4b07      	ldr	r3, [pc, #28]	@ (8003864 <HAL_TIM_PWM_MspInit+0x90>)
 8003848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]
}
 8003852:	bf00      	nop
 8003854:	371c      	adds	r7, #28
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40010000 	.word	0x40010000
 8003864:	40023800 	.word	0x40023800
 8003868:	40000400 	.word	0x40000400

0800386c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08a      	sub	sp, #40	@ 0x28
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003874:	f107 0314 	add.w	r3, r7, #20
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	605a      	str	r2, [r3, #4]
 800387e:	609a      	str	r2, [r3, #8]
 8003880:	60da      	str	r2, [r3, #12]
 8003882:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a36      	ldr	r2, [pc, #216]	@ (8003964 <HAL_TIM_MspPostInit+0xf8>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d11f      	bne.n	80038ce <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	4b35      	ldr	r3, [pc, #212]	@ (8003968 <HAL_TIM_MspPostInit+0xfc>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003896:	4a34      	ldr	r2, [pc, #208]	@ (8003968 <HAL_TIM_MspPostInit+0xfc>)
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	6313      	str	r3, [r2, #48]	@ 0x30
 800389e:	4b32      	ldr	r3, [pc, #200]	@ (8003968 <HAL_TIM_MspPostInit+0xfc>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80038aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b0:	2302      	movs	r3, #2
 80038b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b8:	2300      	movs	r3, #0
 80038ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80038bc:	2301      	movs	r3, #1
 80038be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c0:	f107 0314 	add.w	r3, r7, #20
 80038c4:	4619      	mov	r1, r3
 80038c6:	4829      	ldr	r0, [pc, #164]	@ (800396c <HAL_TIM_MspPostInit+0x100>)
 80038c8:	f001 fbd2 	bl	8005070 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80038cc:	e046      	b.n	800395c <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM2)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038d6:	d11e      	bne.n	8003916 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038d8:	2300      	movs	r3, #0
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	4b22      	ldr	r3, [pc, #136]	@ (8003968 <HAL_TIM_MspPostInit+0xfc>)
 80038de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e0:	4a21      	ldr	r2, [pc, #132]	@ (8003968 <HAL_TIM_MspPostInit+0xfc>)
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80038e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003968 <HAL_TIM_MspPostInit+0xfc>)
 80038ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80038f4:	2320      	movs	r3, #32
 80038f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f8:	2302      	movs	r3, #2
 80038fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fc:	2300      	movs	r3, #0
 80038fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003900:	2300      	movs	r3, #0
 8003902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003904:	2301      	movs	r3, #1
 8003906:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003908:	f107 0314 	add.w	r3, r7, #20
 800390c:	4619      	mov	r1, r3
 800390e:	4817      	ldr	r0, [pc, #92]	@ (800396c <HAL_TIM_MspPostInit+0x100>)
 8003910:	f001 fbae 	bl	8005070 <HAL_GPIO_Init>
}
 8003914:	e022      	b.n	800395c <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a15      	ldr	r2, [pc, #84]	@ (8003970 <HAL_TIM_MspPostInit+0x104>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d11d      	bne.n	800395c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003920:	2300      	movs	r3, #0
 8003922:	60bb      	str	r3, [r7, #8]
 8003924:	4b10      	ldr	r3, [pc, #64]	@ (8003968 <HAL_TIM_MspPostInit+0xfc>)
 8003926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003928:	4a0f      	ldr	r2, [pc, #60]	@ (8003968 <HAL_TIM_MspPostInit+0xfc>)
 800392a:	f043 0304 	orr.w	r3, r3, #4
 800392e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003930:	4b0d      	ldr	r3, [pc, #52]	@ (8003968 <HAL_TIM_MspPostInit+0xfc>)
 8003932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800393c:	2340      	movs	r3, #64	@ 0x40
 800393e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003940:	2302      	movs	r3, #2
 8003942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003944:	2300      	movs	r3, #0
 8003946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003948:	2300      	movs	r3, #0
 800394a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800394c:	2302      	movs	r3, #2
 800394e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003950:	f107 0314 	add.w	r3, r7, #20
 8003954:	4619      	mov	r1, r3
 8003956:	4807      	ldr	r0, [pc, #28]	@ (8003974 <HAL_TIM_MspPostInit+0x108>)
 8003958:	f001 fb8a 	bl	8005070 <HAL_GPIO_Init>
}
 800395c:	bf00      	nop
 800395e:	3728      	adds	r7, #40	@ 0x28
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40010000 	.word	0x40010000
 8003968:	40023800 	.word	0x40023800
 800396c:	40020000 	.word	0x40020000
 8003970:	40000400 	.word	0x40000400
 8003974:	40020800 	.word	0x40020800

08003978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08c      	sub	sp, #48	@ 0x30
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003980:	f107 031c 	add.w	r3, r7, #28
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	60da      	str	r2, [r3, #12]
 800398e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a36      	ldr	r2, [pc, #216]	@ (8003a70 <HAL_UART_MspInit+0xf8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d135      	bne.n	8003a06 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800399a:	2300      	movs	r3, #0
 800399c:	61bb      	str	r3, [r7, #24]
 800399e:	4b35      	ldr	r3, [pc, #212]	@ (8003a74 <HAL_UART_MspInit+0xfc>)
 80039a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a2:	4a34      	ldr	r2, [pc, #208]	@ (8003a74 <HAL_UART_MspInit+0xfc>)
 80039a4:	f043 0310 	orr.w	r3, r3, #16
 80039a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80039aa:	4b32      	ldr	r3, [pc, #200]	@ (8003a74 <HAL_UART_MspInit+0xfc>)
 80039ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ae:	f003 0310 	and.w	r3, r3, #16
 80039b2:	61bb      	str	r3, [r7, #24]
 80039b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	4b2e      	ldr	r3, [pc, #184]	@ (8003a74 <HAL_UART_MspInit+0xfc>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039be:	4a2d      	ldr	r2, [pc, #180]	@ (8003a74 <HAL_UART_MspInit+0xfc>)
 80039c0:	f043 0301 	orr.w	r3, r3, #1
 80039c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80039c6:	4b2b      	ldr	r3, [pc, #172]	@ (8003a74 <HAL_UART_MspInit+0xfc>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80039d2:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 80039d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d8:	2302      	movs	r3, #2
 80039da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039dc:	2300      	movs	r3, #0
 80039de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e0:	2303      	movs	r3, #3
 80039e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039e4:	2307      	movs	r3, #7
 80039e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e8:	f107 031c 	add.w	r3, r7, #28
 80039ec:	4619      	mov	r1, r3
 80039ee:	4822      	ldr	r0, [pc, #136]	@ (8003a78 <HAL_UART_MspInit+0x100>)
 80039f0:	f001 fb3e 	bl	8005070 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80039f4:	2200      	movs	r2, #0
 80039f6:	2100      	movs	r1, #0
 80039f8:	2025      	movs	r0, #37	@ 0x25
 80039fa:	f000 fef4 	bl	80047e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80039fe:	2025      	movs	r0, #37	@ 0x25
 8003a00:	f000 ff0d 	bl	800481e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a04:	e030      	b.n	8003a68 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8003a7c <HAL_UART_MspInit+0x104>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d12b      	bne.n	8003a68 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a10:	2300      	movs	r3, #0
 8003a12:	613b      	str	r3, [r7, #16]
 8003a14:	4b17      	ldr	r3, [pc, #92]	@ (8003a74 <HAL_UART_MspInit+0xfc>)
 8003a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a18:	4a16      	ldr	r2, [pc, #88]	@ (8003a74 <HAL_UART_MspInit+0xfc>)
 8003a1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a20:	4b14      	ldr	r3, [pc, #80]	@ (8003a74 <HAL_UART_MspInit+0xfc>)
 8003a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	4b10      	ldr	r3, [pc, #64]	@ (8003a74 <HAL_UART_MspInit+0xfc>)
 8003a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a34:	4a0f      	ldr	r2, [pc, #60]	@ (8003a74 <HAL_UART_MspInit+0xfc>)
 8003a36:	f043 0301 	orr.w	r3, r3, #1
 8003a3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a74 <HAL_UART_MspInit+0xfc>)
 8003a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003a48:	230c      	movs	r3, #12
 8003a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a50:	2300      	movs	r3, #0
 8003a52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a54:	2303      	movs	r3, #3
 8003a56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a58:	2307      	movs	r3, #7
 8003a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a5c:	f107 031c 	add.w	r3, r7, #28
 8003a60:	4619      	mov	r1, r3
 8003a62:	4805      	ldr	r0, [pc, #20]	@ (8003a78 <HAL_UART_MspInit+0x100>)
 8003a64:	f001 fb04 	bl	8005070 <HAL_GPIO_Init>
}
 8003a68:	bf00      	nop
 8003a6a:	3730      	adds	r7, #48	@ 0x30
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40011000 	.word	0x40011000
 8003a74:	40023800 	.word	0x40023800
 8003a78:	40020000 	.word	0x40020000
 8003a7c:	40004400 	.word	0x40004400

08003a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a84:	bf00      	nop
 8003a86:	e7fd      	b.n	8003a84 <NMI_Handler+0x4>

08003a88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a8c:	bf00      	nop
 8003a8e:	e7fd      	b.n	8003a8c <HardFault_Handler+0x4>

08003a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a94:	bf00      	nop
 8003a96:	e7fd      	b.n	8003a94 <MemManage_Handler+0x4>

08003a98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a9c:	bf00      	nop
 8003a9e:	e7fd      	b.n	8003a9c <BusFault_Handler+0x4>

08003aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003aa4:	bf00      	nop
 8003aa6:	e7fd      	b.n	8003aa4 <UsageFault_Handler+0x4>

08003aa8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003aac:	bf00      	nop
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003aba:	bf00      	nop
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ac8:	bf00      	nop
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ad6:	f000 f975 	bl	8003dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}
	...

08003ae0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ae4:	4802      	ldr	r0, [pc, #8]	@ (8003af0 <USART1_IRQHandler+0x10>)
 8003ae6:	f005 fc85 	bl	80093f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003aea:	bf00      	nop
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20002874 	.word	0x20002874

08003af4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003af8:	4802      	ldr	r0, [pc, #8]	@ (8003b04 <SDIO_IRQHandler+0x10>)
 8003afa:	f003 fdf9 	bl	80076f0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8003afe:	bf00      	nop
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	200026b8 	.word	0x200026b8

08003b08 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8003b0c:	4802      	ldr	r0, [pc, #8]	@ (8003b18 <DMA2_Stream3_IRQHandler+0x10>)
 8003b0e:	f001 f839 	bl	8004b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003b12:	bf00      	nop
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	2000273c 	.word	0x2000273c

08003b1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  return 1;
 8003b20:	2301      	movs	r3, #1
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <_kill>:

int _kill(int pid, int sig)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b36:	f00b f83b 	bl	800ebb0 <__errno>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2216      	movs	r2, #22
 8003b3e:	601a      	str	r2, [r3, #0]
  return -1;
 8003b40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <_exit>:

void _exit (int status)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b54:	f04f 31ff 	mov.w	r1, #4294967295
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff ffe7 	bl	8003b2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b5e:	bf00      	nop
 8003b60:	e7fd      	b.n	8003b5e <_exit+0x12>

08003b62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b086      	sub	sp, #24
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b6e:	2300      	movs	r3, #0
 8003b70:	617b      	str	r3, [r7, #20]
 8003b72:	e00a      	b.n	8003b8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b74:	f3af 8000 	nop.w
 8003b78:	4601      	mov	r1, r0
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	60ba      	str	r2, [r7, #8]
 8003b80:	b2ca      	uxtb	r2, r1
 8003b82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	3301      	adds	r3, #1
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	dbf0      	blt.n	8003b74 <_read+0x12>
  }

  return len;
 8003b92:	687b      	ldr	r3, [r7, #4]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ba8:	2300      	movs	r3, #0
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	e009      	b.n	8003bc2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	1c5a      	adds	r2, r3, #1
 8003bb2:	60ba      	str	r2, [r7, #8]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	dbf1      	blt.n	8003bae <_write+0x12>
  }
  return len;
 8003bca:	687b      	ldr	r3, [r7, #4]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <_close>:

int _close(int file)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003bdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003bfc:	605a      	str	r2, [r3, #4]
  return 0;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <_isatty>:

int _isatty(int file)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c14:	2301      	movs	r3, #1
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b085      	sub	sp, #20
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	60f8      	str	r0, [r7, #12]
 8003c2a:	60b9      	str	r1, [r7, #8]
 8003c2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c44:	4a14      	ldr	r2, [pc, #80]	@ (8003c98 <_sbrk+0x5c>)
 8003c46:	4b15      	ldr	r3, [pc, #84]	@ (8003c9c <_sbrk+0x60>)
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c50:	4b13      	ldr	r3, [pc, #76]	@ (8003ca0 <_sbrk+0x64>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d102      	bne.n	8003c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c58:	4b11      	ldr	r3, [pc, #68]	@ (8003ca0 <_sbrk+0x64>)
 8003c5a:	4a12      	ldr	r2, [pc, #72]	@ (8003ca4 <_sbrk+0x68>)
 8003c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c5e:	4b10      	ldr	r3, [pc, #64]	@ (8003ca0 <_sbrk+0x64>)
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4413      	add	r3, r2
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d207      	bcs.n	8003c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c6c:	f00a ffa0 	bl	800ebb0 <__errno>
 8003c70:	4603      	mov	r3, r0
 8003c72:	220c      	movs	r2, #12
 8003c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c76:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7a:	e009      	b.n	8003c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c7c:	4b08      	ldr	r3, [pc, #32]	@ (8003ca0 <_sbrk+0x64>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c82:	4b07      	ldr	r3, [pc, #28]	@ (8003ca0 <_sbrk+0x64>)
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4413      	add	r3, r2
 8003c8a:	4a05      	ldr	r2, [pc, #20]	@ (8003ca0 <_sbrk+0x64>)
 8003c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	20020000 	.word	0x20020000
 8003c9c:	00000400 	.word	0x00000400
 8003ca0:	20002b88 	.word	0x20002b88
 8003ca4:	20002d20 	.word	0x20002d20

08003ca8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cac:	4b06      	ldr	r3, [pc, #24]	@ (8003cc8 <SystemInit+0x20>)
 8003cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb2:	4a05      	ldr	r2, [pc, #20]	@ (8003cc8 <SystemInit+0x20>)
 8003cb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003cb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cbc:	bf00      	nop
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	e000ed00 	.word	0xe000ed00

08003ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ccc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003d04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003cd0:	f7ff ffea 	bl	8003ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003cd4:	480c      	ldr	r0, [pc, #48]	@ (8003d08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003cd6:	490d      	ldr	r1, [pc, #52]	@ (8003d0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8003d10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cdc:	e002      	b.n	8003ce4 <LoopCopyDataInit>

08003cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ce2:	3304      	adds	r3, #4

08003ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ce8:	d3f9      	bcc.n	8003cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cea:	4a0a      	ldr	r2, [pc, #40]	@ (8003d14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003cec:	4c0a      	ldr	r4, [pc, #40]	@ (8003d18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cf0:	e001      	b.n	8003cf6 <LoopFillZerobss>

08003cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cf4:	3204      	adds	r2, #4

08003cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cf8:	d3fb      	bcc.n	8003cf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003cfa:	f00a ff5f 	bl	800ebbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003cfe:	f7fe ff03 	bl	8002b08 <main>
  bx  lr    
 8003d02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d0c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003d10:	08014220 	.word	0x08014220
  ldr r2, =_sbss
 8003d14:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003d18:	20002d20 	.word	0x20002d20

08003d1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d1c:	e7fe      	b.n	8003d1c <ADC_IRQHandler>
	...

08003d20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d24:	4b0e      	ldr	r3, [pc, #56]	@ (8003d60 <HAL_Init+0x40>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a0d      	ldr	r2, [pc, #52]	@ (8003d60 <HAL_Init+0x40>)
 8003d2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d30:	4b0b      	ldr	r3, [pc, #44]	@ (8003d60 <HAL_Init+0x40>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a0a      	ldr	r2, [pc, #40]	@ (8003d60 <HAL_Init+0x40>)
 8003d36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d3c:	4b08      	ldr	r3, [pc, #32]	@ (8003d60 <HAL_Init+0x40>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a07      	ldr	r2, [pc, #28]	@ (8003d60 <HAL_Init+0x40>)
 8003d42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d48:	2003      	movs	r0, #3
 8003d4a:	f000 fd41 	bl	80047d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d4e:	200f      	movs	r0, #15
 8003d50:	f000 f808 	bl	8003d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d54:	f7ff fb1e 	bl	8003394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40023c00 	.word	0x40023c00

08003d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d6c:	4b12      	ldr	r3, [pc, #72]	@ (8003db8 <HAL_InitTick+0x54>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	4b12      	ldr	r3, [pc, #72]	@ (8003dbc <HAL_InitTick+0x58>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	4619      	mov	r1, r3
 8003d76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 fd59 	bl	800483a <HAL_SYSTICK_Config>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e00e      	b.n	8003db0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b0f      	cmp	r3, #15
 8003d96:	d80a      	bhi.n	8003dae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d98:	2200      	movs	r2, #0
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003da0:	f000 fd21 	bl	80047e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003da4:	4a06      	ldr	r2, [pc, #24]	@ (8003dc0 <HAL_InitTick+0x5c>)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
 8003dac:	e000      	b.n	8003db0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	20000008 	.word	0x20000008
 8003dbc:	20000010 	.word	0x20000010
 8003dc0:	2000000c 	.word	0x2000000c

08003dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003dc8:	4b06      	ldr	r3, [pc, #24]	@ (8003de4 <HAL_IncTick+0x20>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	461a      	mov	r2, r3
 8003dce:	4b06      	ldr	r3, [pc, #24]	@ (8003de8 <HAL_IncTick+0x24>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	4a04      	ldr	r2, [pc, #16]	@ (8003de8 <HAL_IncTick+0x24>)
 8003dd6:	6013      	str	r3, [r2, #0]
}
 8003dd8:	bf00      	nop
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	20000010 	.word	0x20000010
 8003de8:	20002b8c 	.word	0x20002b8c

08003dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  return uwTick;
 8003df0:	4b03      	ldr	r3, [pc, #12]	@ (8003e00 <HAL_GetTick+0x14>)
 8003df2:	681b      	ldr	r3, [r3, #0]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	20002b8c 	.word	0x20002b8c

08003e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e0c:	f7ff ffee 	bl	8003dec <HAL_GetTick>
 8003e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1c:	d005      	beq.n	8003e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e48 <HAL_Delay+0x44>)
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4413      	add	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e2a:	bf00      	nop
 8003e2c:	f7ff ffde 	bl	8003dec <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d8f7      	bhi.n	8003e2c <HAL_Delay+0x28>
  {
  }
}
 8003e3c:	bf00      	nop
 8003e3e:	bf00      	nop
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	20000010 	.word	0x20000010

08003e4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e54:	2300      	movs	r3, #0
 8003e56:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e033      	b.n	8003eca <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d109      	bne.n	8003e7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7ff faba 	bl	80033e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e82:	f003 0310 	and.w	r3, r3, #16
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d118      	bne.n	8003ebc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003e92:	f023 0302 	bic.w	r3, r3, #2
 8003e96:	f043 0202 	orr.w	r2, r3, #2
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 faca 	bl	8004438 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eae:	f023 0303 	bic.w	r3, r3, #3
 8003eb2:	f043 0201 	orr.w	r2, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	641a      	str	r2, [r3, #64]	@ 0x40
 8003eba:	e001      	b.n	8003ec0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d101      	bne.n	8003eee <HAL_ADC_Start+0x1a>
 8003eea:	2302      	movs	r3, #2
 8003eec:	e097      	b.n	800401e <HAL_ADC_Start+0x14a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d018      	beq.n	8003f36 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f042 0201 	orr.w	r2, r2, #1
 8003f12:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f14:	4b45      	ldr	r3, [pc, #276]	@ (800402c <HAL_ADC_Start+0x158>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a45      	ldr	r2, [pc, #276]	@ (8004030 <HAL_ADC_Start+0x15c>)
 8003f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1e:	0c9a      	lsrs	r2, r3, #18
 8003f20:	4613      	mov	r3, r2
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	4413      	add	r3, r2
 8003f26:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003f28:	e002      	b.n	8003f30 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1f9      	bne.n	8003f2a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d15f      	bne.n	8004004 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f48:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003f4c:	f023 0301 	bic.w	r3, r3, #1
 8003f50:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d007      	beq.n	8003f76 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003f6e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f82:	d106      	bne.n	8003f92 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f88:	f023 0206 	bic.w	r2, r3, #6
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	645a      	str	r2, [r3, #68]	@ 0x44
 8003f90:	e002      	b.n	8003f98 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fa0:	4b24      	ldr	r3, [pc, #144]	@ (8004034 <HAL_ADC_Start+0x160>)
 8003fa2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003fac:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f003 031f 	and.w	r3, r3, #31
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10f      	bne.n	8003fda <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d129      	bne.n	800401c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003fd6:	609a      	str	r2, [r3, #8]
 8003fd8:	e020      	b.n	800401c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a16      	ldr	r2, [pc, #88]	@ (8004038 <HAL_ADC_Start+0x164>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d11b      	bne.n	800401c <HAL_ADC_Start+0x148>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d114      	bne.n	800401c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004000:	609a      	str	r2, [r3, #8]
 8004002:	e00b      	b.n	800401c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004008:	f043 0210 	orr.w	r2, r3, #16
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004014:	f043 0201 	orr.w	r2, r3, #1
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	20000008 	.word	0x20000008
 8004030:	431bde83 	.word	0x431bde83
 8004034:	40012300 	.word	0x40012300
 8004038:	40012000 	.word	0x40012000

0800403c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800404a:	2b01      	cmp	r3, #1
 800404c:	d101      	bne.n	8004052 <HAL_ADC_Stop+0x16>
 800404e:	2302      	movs	r3, #2
 8004050:	e021      	b.n	8004096 <HAL_ADC_Stop+0x5a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0201 	bic.w	r2, r2, #1
 8004068:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d109      	bne.n	800408c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004080:	f023 0301 	bic.w	r3, r3, #1
 8004084:	f043 0201 	orr.w	r2, r3, #1
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040be:	d113      	bne.n	80040e8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80040ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040ce:	d10b      	bne.n	80040e8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d4:	f043 0220 	orr.w	r2, r3, #32
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e063      	b.n	80041b0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80040e8:	f7ff fe80 	bl	8003dec <HAL_GetTick>
 80040ec:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80040ee:	e021      	b.n	8004134 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f6:	d01d      	beq.n	8004134 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d007      	beq.n	800410e <HAL_ADC_PollForConversion+0x6c>
 80040fe:	f7ff fe75 	bl	8003dec <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d212      	bcs.n	8004134 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b02      	cmp	r3, #2
 800411a:	d00b      	beq.n	8004134 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004120:	f043 0204 	orr.w	r2, r3, #4
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e03d      	b.n	80041b0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b02      	cmp	r3, #2
 8004140:	d1d6      	bne.n	80040f0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f06f 0212 	mvn.w	r2, #18
 800414a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004150:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d123      	bne.n	80041ae <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800416a:	2b00      	cmp	r3, #0
 800416c:	d11f      	bne.n	80041ae <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004174:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004178:	2b00      	cmp	r3, #0
 800417a:	d006      	beq.n	800418a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004186:	2b00      	cmp	r3, #0
 8004188:	d111      	bne.n	80041ae <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d105      	bne.n	80041ae <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a6:	f043 0201 	orr.w	r2, r3, #1
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
	...

080041d4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80041de:	2300      	movs	r3, #0
 80041e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d101      	bne.n	80041f0 <HAL_ADC_ConfigChannel+0x1c>
 80041ec:	2302      	movs	r3, #2
 80041ee:	e113      	b.n	8004418 <HAL_ADC_ConfigChannel+0x244>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b09      	cmp	r3, #9
 80041fe:	d925      	bls.n	800424c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68d9      	ldr	r1, [r3, #12]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	b29b      	uxth	r3, r3
 800420c:	461a      	mov	r2, r3
 800420e:	4613      	mov	r3, r2
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	4413      	add	r3, r2
 8004214:	3b1e      	subs	r3, #30
 8004216:	2207      	movs	r2, #7
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	43da      	mvns	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	400a      	ands	r2, r1
 8004224:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68d9      	ldr	r1, [r3, #12]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	b29b      	uxth	r3, r3
 8004236:	4618      	mov	r0, r3
 8004238:	4603      	mov	r3, r0
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	4403      	add	r3, r0
 800423e:	3b1e      	subs	r3, #30
 8004240:	409a      	lsls	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	60da      	str	r2, [r3, #12]
 800424a:	e022      	b.n	8004292 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6919      	ldr	r1, [r3, #16]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	b29b      	uxth	r3, r3
 8004258:	461a      	mov	r2, r3
 800425a:	4613      	mov	r3, r2
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	4413      	add	r3, r2
 8004260:	2207      	movs	r2, #7
 8004262:	fa02 f303 	lsl.w	r3, r2, r3
 8004266:	43da      	mvns	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	400a      	ands	r2, r1
 800426e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6919      	ldr	r1, [r3, #16]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	689a      	ldr	r2, [r3, #8]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	b29b      	uxth	r3, r3
 8004280:	4618      	mov	r0, r3
 8004282:	4603      	mov	r3, r0
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	4403      	add	r3, r0
 8004288:	409a      	lsls	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b06      	cmp	r3, #6
 8004298:	d824      	bhi.n	80042e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	3b05      	subs	r3, #5
 80042ac:	221f      	movs	r2, #31
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	43da      	mvns	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	400a      	ands	r2, r1
 80042ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	4618      	mov	r0, r3
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	3b05      	subs	r3, #5
 80042d6:	fa00 f203 	lsl.w	r2, r0, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80042e2:	e04c      	b.n	800437e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b0c      	cmp	r3, #12
 80042ea:	d824      	bhi.n	8004336 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	4613      	mov	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	3b23      	subs	r3, #35	@ 0x23
 80042fe:	221f      	movs	r2, #31
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	43da      	mvns	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	400a      	ands	r2, r1
 800430c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	b29b      	uxth	r3, r3
 800431a:	4618      	mov	r0, r3
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	4613      	mov	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	3b23      	subs	r3, #35	@ 0x23
 8004328:	fa00 f203 	lsl.w	r2, r0, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	631a      	str	r2, [r3, #48]	@ 0x30
 8004334:	e023      	b.n	800437e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	4613      	mov	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	3b41      	subs	r3, #65	@ 0x41
 8004348:	221f      	movs	r2, #31
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	43da      	mvns	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	400a      	ands	r2, r1
 8004356:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	b29b      	uxth	r3, r3
 8004364:	4618      	mov	r0, r3
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	4613      	mov	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4413      	add	r3, r2
 8004370:	3b41      	subs	r3, #65	@ 0x41
 8004372:	fa00 f203 	lsl.w	r2, r0, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800437e:	4b29      	ldr	r3, [pc, #164]	@ (8004424 <HAL_ADC_ConfigChannel+0x250>)
 8004380:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a28      	ldr	r2, [pc, #160]	@ (8004428 <HAL_ADC_ConfigChannel+0x254>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d10f      	bne.n	80043ac <HAL_ADC_ConfigChannel+0x1d8>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b12      	cmp	r3, #18
 8004392:	d10b      	bne.n	80043ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004428 <HAL_ADC_ConfigChannel+0x254>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d12b      	bne.n	800440e <HAL_ADC_ConfigChannel+0x23a>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a1c      	ldr	r2, [pc, #112]	@ (800442c <HAL_ADC_ConfigChannel+0x258>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d003      	beq.n	80043c8 <HAL_ADC_ConfigChannel+0x1f4>
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b11      	cmp	r3, #17
 80043c6:	d122      	bne.n	800440e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a11      	ldr	r2, [pc, #68]	@ (800442c <HAL_ADC_ConfigChannel+0x258>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d111      	bne.n	800440e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80043ea:	4b11      	ldr	r3, [pc, #68]	@ (8004430 <HAL_ADC_ConfigChannel+0x25c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a11      	ldr	r2, [pc, #68]	@ (8004434 <HAL_ADC_ConfigChannel+0x260>)
 80043f0:	fba2 2303 	umull	r2, r3, r2, r3
 80043f4:	0c9a      	lsrs	r2, r3, #18
 80043f6:	4613      	mov	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004400:	e002      	b.n	8004408 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	3b01      	subs	r3, #1
 8004406:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f9      	bne.n	8004402 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	40012300 	.word	0x40012300
 8004428:	40012000 	.word	0x40012000
 800442c:	10000012 	.word	0x10000012
 8004430:	20000008 	.word	0x20000008
 8004434:	431bde83 	.word	0x431bde83

08004438 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004440:	4b79      	ldr	r3, [pc, #484]	@ (8004628 <ADC_Init+0x1f0>)
 8004442:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	431a      	orrs	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800446c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6859      	ldr	r1, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	021a      	lsls	r2, r3, #8
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004490:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6859      	ldr	r1, [r3, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6899      	ldr	r1, [r3, #8]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ca:	4a58      	ldr	r2, [pc, #352]	@ (800462c <ADC_Init+0x1f4>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d022      	beq.n	8004516 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80044de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6899      	ldr	r1, [r3, #8]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004500:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6899      	ldr	r1, [r3, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	609a      	str	r2, [r3, #8]
 8004514:	e00f      	b.n	8004536 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004524:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004534:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 0202 	bic.w	r2, r2, #2
 8004544:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6899      	ldr	r1, [r3, #8]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	7e1b      	ldrb	r3, [r3, #24]
 8004550:	005a      	lsls	r2, r3, #1
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d01b      	beq.n	800459c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004572:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004582:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6859      	ldr	r1, [r3, #4]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458e:	3b01      	subs	r3, #1
 8004590:	035a      	lsls	r2, r3, #13
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	605a      	str	r2, [r3, #4]
 800459a:	e007      	b.n	80045ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045aa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80045ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	051a      	lsls	r2, r3, #20
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80045e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6899      	ldr	r1, [r3, #8]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80045ee:	025a      	lsls	r2, r3, #9
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004606:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6899      	ldr	r1, [r3, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	029a      	lsls	r2, r3, #10
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	430a      	orrs	r2, r1
 800461a:	609a      	str	r2, [r3, #8]
}
 800461c:	bf00      	nop
 800461e:	3714      	adds	r7, #20
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	40012300 	.word	0x40012300
 800462c:	0f000001 	.word	0x0f000001

08004630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004640:	4b0c      	ldr	r3, [pc, #48]	@ (8004674 <__NVIC_SetPriorityGrouping+0x44>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800464c:	4013      	ands	r3, r2
 800464e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004658:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800465c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004662:	4a04      	ldr	r2, [pc, #16]	@ (8004674 <__NVIC_SetPriorityGrouping+0x44>)
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	60d3      	str	r3, [r2, #12]
}
 8004668:	bf00      	nop
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	e000ed00 	.word	0xe000ed00

08004678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800467c:	4b04      	ldr	r3, [pc, #16]	@ (8004690 <__NVIC_GetPriorityGrouping+0x18>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	0a1b      	lsrs	r3, r3, #8
 8004682:	f003 0307 	and.w	r3, r3, #7
}
 8004686:	4618      	mov	r0, r3
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	e000ed00 	.word	0xe000ed00

08004694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	4603      	mov	r3, r0
 800469c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800469e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	db0b      	blt.n	80046be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046a6:	79fb      	ldrb	r3, [r7, #7]
 80046a8:	f003 021f 	and.w	r2, r3, #31
 80046ac:	4907      	ldr	r1, [pc, #28]	@ (80046cc <__NVIC_EnableIRQ+0x38>)
 80046ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	2001      	movs	r0, #1
 80046b6:	fa00 f202 	lsl.w	r2, r0, r2
 80046ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	e000e100 	.word	0xe000e100

080046d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	4603      	mov	r3, r0
 80046d8:	6039      	str	r1, [r7, #0]
 80046da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	db0a      	blt.n	80046fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	490c      	ldr	r1, [pc, #48]	@ (800471c <__NVIC_SetPriority+0x4c>)
 80046ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ee:	0112      	lsls	r2, r2, #4
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	440b      	add	r3, r1
 80046f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046f8:	e00a      	b.n	8004710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	4908      	ldr	r1, [pc, #32]	@ (8004720 <__NVIC_SetPriority+0x50>)
 8004700:	79fb      	ldrb	r3, [r7, #7]
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	3b04      	subs	r3, #4
 8004708:	0112      	lsls	r2, r2, #4
 800470a:	b2d2      	uxtb	r2, r2
 800470c:	440b      	add	r3, r1
 800470e:	761a      	strb	r2, [r3, #24]
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	e000e100 	.word	0xe000e100
 8004720:	e000ed00 	.word	0xe000ed00

08004724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004724:	b480      	push	{r7}
 8004726:	b089      	sub	sp, #36	@ 0x24
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	f1c3 0307 	rsb	r3, r3, #7
 800473e:	2b04      	cmp	r3, #4
 8004740:	bf28      	it	cs
 8004742:	2304      	movcs	r3, #4
 8004744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	3304      	adds	r3, #4
 800474a:	2b06      	cmp	r3, #6
 800474c:	d902      	bls.n	8004754 <NVIC_EncodePriority+0x30>
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	3b03      	subs	r3, #3
 8004752:	e000      	b.n	8004756 <NVIC_EncodePriority+0x32>
 8004754:	2300      	movs	r3, #0
 8004756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004758:	f04f 32ff 	mov.w	r2, #4294967295
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	43da      	mvns	r2, r3
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	401a      	ands	r2, r3
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800476c:	f04f 31ff 	mov.w	r1, #4294967295
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	fa01 f303 	lsl.w	r3, r1, r3
 8004776:	43d9      	mvns	r1, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800477c:	4313      	orrs	r3, r2
         );
}
 800477e:	4618      	mov	r0, r3
 8004780:	3724      	adds	r7, #36	@ 0x24
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
	...

0800478c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3b01      	subs	r3, #1
 8004798:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800479c:	d301      	bcc.n	80047a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800479e:	2301      	movs	r3, #1
 80047a0:	e00f      	b.n	80047c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047a2:	4a0a      	ldr	r2, [pc, #40]	@ (80047cc <SysTick_Config+0x40>)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047aa:	210f      	movs	r1, #15
 80047ac:	f04f 30ff 	mov.w	r0, #4294967295
 80047b0:	f7ff ff8e 	bl	80046d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047b4:	4b05      	ldr	r3, [pc, #20]	@ (80047cc <SysTick_Config+0x40>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047ba:	4b04      	ldr	r3, [pc, #16]	@ (80047cc <SysTick_Config+0x40>)
 80047bc:	2207      	movs	r2, #7
 80047be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	e000e010 	.word	0xe000e010

080047d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f7ff ff29 	bl	8004630 <__NVIC_SetPriorityGrouping>
}
 80047de:	bf00      	nop
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b086      	sub	sp, #24
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	4603      	mov	r3, r0
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	607a      	str	r2, [r7, #4]
 80047f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047f8:	f7ff ff3e 	bl	8004678 <__NVIC_GetPriorityGrouping>
 80047fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	68b9      	ldr	r1, [r7, #8]
 8004802:	6978      	ldr	r0, [r7, #20]
 8004804:	f7ff ff8e 	bl	8004724 <NVIC_EncodePriority>
 8004808:	4602      	mov	r2, r0
 800480a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800480e:	4611      	mov	r1, r2
 8004810:	4618      	mov	r0, r3
 8004812:	f7ff ff5d 	bl	80046d0 <__NVIC_SetPriority>
}
 8004816:	bf00      	nop
 8004818:	3718      	adds	r7, #24
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b082      	sub	sp, #8
 8004822:	af00      	add	r7, sp, #0
 8004824:	4603      	mov	r3, r0
 8004826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff ff31 	bl	8004694 <__NVIC_EnableIRQ>
}
 8004832:	bf00      	nop
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b082      	sub	sp, #8
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7ff ffa2 	bl	800478c <SysTick_Config>
 8004848:	4603      	mov	r3, r0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
	...

08004854 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800485c:	2300      	movs	r3, #0
 800485e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004860:	f7ff fac4 	bl	8003dec <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e099      	b.n	80049a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0201 	bic.w	r2, r2, #1
 800488e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004890:	e00f      	b.n	80048b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004892:	f7ff faab 	bl	8003dec <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b05      	cmp	r3, #5
 800489e:	d908      	bls.n	80048b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2220      	movs	r2, #32
 80048a4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2203      	movs	r2, #3
 80048aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e078      	b.n	80049a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1e8      	bne.n	8004892 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	4b38      	ldr	r3, [pc, #224]	@ (80049ac <HAL_DMA_Init+0x158>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004908:	2b04      	cmp	r3, #4
 800490a:	d107      	bne.n	800491c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004914:	4313      	orrs	r3, r2
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	4313      	orrs	r3, r2
 800491a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f023 0307 	bic.w	r3, r3, #7
 8004932:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	4313      	orrs	r3, r2
 800493c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004942:	2b04      	cmp	r3, #4
 8004944:	d117      	bne.n	8004976 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	4313      	orrs	r3, r2
 800494e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00e      	beq.n	8004976 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 fb0d 	bl	8004f78 <DMA_CheckFifoParam>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d008      	beq.n	8004976 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2240      	movs	r2, #64	@ 0x40
 8004968:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004972:	2301      	movs	r3, #1
 8004974:	e016      	b.n	80049a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 fac4 	bl	8004f0c <DMA_CalcBaseAndBitshift>
 8004984:	4603      	mov	r3, r0
 8004986:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800498c:	223f      	movs	r2, #63	@ 0x3f
 800498e:	409a      	lsls	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	f010803f 	.word	0xf010803f

080049b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d101      	bne.n	80049d6 <HAL_DMA_Start_IT+0x26>
 80049d2:	2302      	movs	r3, #2
 80049d4:	e040      	b.n	8004a58 <HAL_DMA_Start_IT+0xa8>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d12f      	bne.n	8004a4a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2202      	movs	r2, #2
 80049ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	68b9      	ldr	r1, [r7, #8]
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 fa56 	bl	8004eb0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a08:	223f      	movs	r2, #63	@ 0x3f
 8004a0a:	409a      	lsls	r2, r3
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0216 	orr.w	r2, r2, #22
 8004a1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d007      	beq.n	8004a38 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0208 	orr.w	r2, r2, #8
 8004a36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0201 	orr.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	e005      	b.n	8004a56 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004a52:	2302      	movs	r3, #2
 8004a54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3718      	adds	r7, #24
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a6c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004a6e:	f7ff f9bd 	bl	8003dec <HAL_GetTick>
 8004a72:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d008      	beq.n	8004a92 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2280      	movs	r2, #128	@ 0x80
 8004a84:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e052      	b.n	8004b38 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0216 	bic.w	r2, r2, #22
 8004aa0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	695a      	ldr	r2, [r3, #20]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ab0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d103      	bne.n	8004ac2 <HAL_DMA_Abort+0x62>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d007      	beq.n	8004ad2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0208 	bic.w	r2, r2, #8
 8004ad0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0201 	bic.w	r2, r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ae2:	e013      	b.n	8004b0c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ae4:	f7ff f982 	bl	8003dec <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b05      	cmp	r3, #5
 8004af0:	d90c      	bls.n	8004b0c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2220      	movs	r2, #32
 8004af6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2203      	movs	r2, #3
 8004afc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e015      	b.n	8004b38 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1e4      	bne.n	8004ae4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b1e:	223f      	movs	r2, #63	@ 0x3f
 8004b20:	409a      	lsls	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d004      	beq.n	8004b5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2280      	movs	r2, #128	@ 0x80
 8004b58:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e00c      	b.n	8004b78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2205      	movs	r2, #5
 8004b62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0201 	bic.w	r2, r2, #1
 8004b74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b90:	4b8e      	ldr	r3, [pc, #568]	@ (8004dcc <HAL_DMA_IRQHandler+0x248>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a8e      	ldr	r2, [pc, #568]	@ (8004dd0 <HAL_DMA_IRQHandler+0x24c>)
 8004b96:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9a:	0a9b      	lsrs	r3, r3, #10
 8004b9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ba2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bae:	2208      	movs	r2, #8
 8004bb0:	409a      	lsls	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d01a      	beq.n	8004bf0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d013      	beq.n	8004bf0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0204 	bic.w	r2, r2, #4
 8004bd6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bdc:	2208      	movs	r2, #8
 8004bde:	409a      	lsls	r2, r3
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004be8:	f043 0201 	orr.w	r2, r3, #1
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	409a      	lsls	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d012      	beq.n	8004c26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00b      	beq.n	8004c26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c12:	2201      	movs	r2, #1
 8004c14:	409a      	lsls	r2, r3
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c1e:	f043 0202 	orr.w	r2, r3, #2
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c2a:	2204      	movs	r2, #4
 8004c2c:	409a      	lsls	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4013      	ands	r3, r2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d012      	beq.n	8004c5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00b      	beq.n	8004c5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c48:	2204      	movs	r2, #4
 8004c4a:	409a      	lsls	r2, r3
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c54:	f043 0204 	orr.w	r2, r3, #4
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c60:	2210      	movs	r2, #16
 8004c62:	409a      	lsls	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4013      	ands	r3, r2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d043      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0308 	and.w	r3, r3, #8
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d03c      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c7e:	2210      	movs	r2, #16
 8004c80:	409a      	lsls	r2, r3
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d018      	beq.n	8004cc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d108      	bne.n	8004cb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d024      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	4798      	blx	r3
 8004cb2:	e01f      	b.n	8004cf4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d01b      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	4798      	blx	r3
 8004cc4:	e016      	b.n	8004cf4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d107      	bne.n	8004ce4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0208 	bic.w	r2, r2, #8
 8004ce2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	409a      	lsls	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 808f 	beq.w	8004e24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0310 	and.w	r3, r3, #16
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8087 	beq.w	8004e24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	409a      	lsls	r2, r3
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b05      	cmp	r3, #5
 8004d2c:	d136      	bne.n	8004d9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0216 	bic.w	r2, r2, #22
 8004d3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695a      	ldr	r2, [r3, #20]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d103      	bne.n	8004d5e <HAL_DMA_IRQHandler+0x1da>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d007      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 0208 	bic.w	r2, r2, #8
 8004d6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d72:	223f      	movs	r2, #63	@ 0x3f
 8004d74:	409a      	lsls	r2, r3
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d07e      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	4798      	blx	r3
        }
        return;
 8004d9a:	e079      	b.n	8004e90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d01d      	beq.n	8004de6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10d      	bne.n	8004dd4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d031      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	4798      	blx	r3
 8004dc8:	e02c      	b.n	8004e24 <HAL_DMA_IRQHandler+0x2a0>
 8004dca:	bf00      	nop
 8004dcc:	20000008 	.word	0x20000008
 8004dd0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d023      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	4798      	blx	r3
 8004de4:	e01e      	b.n	8004e24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10f      	bne.n	8004e14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0210 	bic.w	r2, r2, #16
 8004e02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d003      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d032      	beq.n	8004e92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d022      	beq.n	8004e7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2205      	movs	r2, #5
 8004e3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f022 0201 	bic.w	r2, r2, #1
 8004e4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	3301      	adds	r3, #1
 8004e54:	60bb      	str	r3, [r7, #8]
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d307      	bcc.n	8004e6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1f2      	bne.n	8004e50 <HAL_DMA_IRQHandler+0x2cc>
 8004e6a:	e000      	b.n	8004e6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004e6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d005      	beq.n	8004e92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	4798      	blx	r3
 8004e8e:	e000      	b.n	8004e92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004e90:	bf00      	nop
    }
  }
}
 8004e92:	3718      	adds	r7, #24
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
 8004ebc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004ecc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	2b40      	cmp	r3, #64	@ 0x40
 8004edc:	d108      	bne.n	8004ef0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004eee:	e007      	b.n	8004f00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	60da      	str	r2, [r3, #12]
}
 8004f00:	bf00      	nop
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	3b10      	subs	r3, #16
 8004f1c:	4a14      	ldr	r2, [pc, #80]	@ (8004f70 <DMA_CalcBaseAndBitshift+0x64>)
 8004f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f22:	091b      	lsrs	r3, r3, #4
 8004f24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f26:	4a13      	ldr	r2, [pc, #76]	@ (8004f74 <DMA_CalcBaseAndBitshift+0x68>)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2b03      	cmp	r3, #3
 8004f38:	d909      	bls.n	8004f4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004f42:	f023 0303 	bic.w	r3, r3, #3
 8004f46:	1d1a      	adds	r2, r3, #4
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	659a      	str	r2, [r3, #88]	@ 0x58
 8004f4c:	e007      	b.n	8004f5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004f56:	f023 0303 	bic.w	r3, r3, #3
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	aaaaaaab 	.word	0xaaaaaaab
 8004f74:	08013cf8 	.word	0x08013cf8

08004f78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f80:	2300      	movs	r3, #0
 8004f82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d11f      	bne.n	8004fd2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	2b03      	cmp	r3, #3
 8004f96:	d856      	bhi.n	8005046 <DMA_CheckFifoParam+0xce>
 8004f98:	a201      	add	r2, pc, #4	@ (adr r2, 8004fa0 <DMA_CheckFifoParam+0x28>)
 8004f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9e:	bf00      	nop
 8004fa0:	08004fb1 	.word	0x08004fb1
 8004fa4:	08004fc3 	.word	0x08004fc3
 8004fa8:	08004fb1 	.word	0x08004fb1
 8004fac:	08005047 	.word	0x08005047
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d046      	beq.n	800504a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fc0:	e043      	b.n	800504a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004fca:	d140      	bne.n	800504e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fd0:	e03d      	b.n	800504e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fda:	d121      	bne.n	8005020 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d837      	bhi.n	8005052 <DMA_CheckFifoParam+0xda>
 8004fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8004fe8 <DMA_CheckFifoParam+0x70>)
 8004fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe8:	08004ff9 	.word	0x08004ff9
 8004fec:	08004fff 	.word	0x08004fff
 8004ff0:	08004ff9 	.word	0x08004ff9
 8004ff4:	08005011 	.word	0x08005011
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8004ffc:	e030      	b.n	8005060 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005002:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d025      	beq.n	8005056 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800500e:	e022      	b.n	8005056 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005014:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005018:	d11f      	bne.n	800505a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800501e:	e01c      	b.n	800505a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2b02      	cmp	r3, #2
 8005024:	d903      	bls.n	800502e <DMA_CheckFifoParam+0xb6>
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	2b03      	cmp	r3, #3
 800502a:	d003      	beq.n	8005034 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800502c:	e018      	b.n	8005060 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	73fb      	strb	r3, [r7, #15]
      break;
 8005032:	e015      	b.n	8005060 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005038:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00e      	beq.n	800505e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	73fb      	strb	r3, [r7, #15]
      break;
 8005044:	e00b      	b.n	800505e <DMA_CheckFifoParam+0xe6>
      break;
 8005046:	bf00      	nop
 8005048:	e00a      	b.n	8005060 <DMA_CheckFifoParam+0xe8>
      break;
 800504a:	bf00      	nop
 800504c:	e008      	b.n	8005060 <DMA_CheckFifoParam+0xe8>
      break;
 800504e:	bf00      	nop
 8005050:	e006      	b.n	8005060 <DMA_CheckFifoParam+0xe8>
      break;
 8005052:	bf00      	nop
 8005054:	e004      	b.n	8005060 <DMA_CheckFifoParam+0xe8>
      break;
 8005056:	bf00      	nop
 8005058:	e002      	b.n	8005060 <DMA_CheckFifoParam+0xe8>
      break;   
 800505a:	bf00      	nop
 800505c:	e000      	b.n	8005060 <DMA_CheckFifoParam+0xe8>
      break;
 800505e:	bf00      	nop
    }
  } 
  
  return status; 
 8005060:	7bfb      	ldrb	r3, [r7, #15]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop

08005070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005070:	b480      	push	{r7}
 8005072:	b089      	sub	sp, #36	@ 0x24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800507a:	2300      	movs	r3, #0
 800507c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800507e:	2300      	movs	r3, #0
 8005080:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005082:	2300      	movs	r3, #0
 8005084:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005086:	2300      	movs	r3, #0
 8005088:	61fb      	str	r3, [r7, #28]
 800508a:	e159      	b.n	8005340 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800508c:	2201      	movs	r2, #1
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	fa02 f303 	lsl.w	r3, r2, r3
 8005094:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	4013      	ands	r3, r2
 800509e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	f040 8148 	bne.w	800533a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d005      	beq.n	80050c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d130      	bne.n	8005124 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	2203      	movs	r2, #3
 80050ce:	fa02 f303 	lsl.w	r3, r2, r3
 80050d2:	43db      	mvns	r3, r3
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	4013      	ands	r3, r2
 80050d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	68da      	ldr	r2, [r3, #12]
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	fa02 f303 	lsl.w	r3, r2, r3
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050f8:	2201      	movs	r2, #1
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005100:	43db      	mvns	r3, r3
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	4013      	ands	r3, r2
 8005106:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	091b      	lsrs	r3, r3, #4
 800510e:	f003 0201 	and.w	r2, r3, #1
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	4313      	orrs	r3, r2
 800511c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f003 0303 	and.w	r3, r3, #3
 800512c:	2b03      	cmp	r3, #3
 800512e:	d017      	beq.n	8005160 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	2203      	movs	r2, #3
 800513c:	fa02 f303 	lsl.w	r3, r2, r3
 8005140:	43db      	mvns	r3, r3
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	4013      	ands	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	fa02 f303 	lsl.w	r3, r2, r3
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	4313      	orrs	r3, r2
 8005158:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f003 0303 	and.w	r3, r3, #3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d123      	bne.n	80051b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	08da      	lsrs	r2, r3, #3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	3208      	adds	r2, #8
 8005174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005178:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	220f      	movs	r2, #15
 8005184:	fa02 f303 	lsl.w	r3, r2, r3
 8005188:	43db      	mvns	r3, r3
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	4013      	ands	r3, r2
 800518e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	691a      	ldr	r2, [r3, #16]
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	f003 0307 	and.w	r3, r3, #7
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	fa02 f303 	lsl.w	r3, r2, r3
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	08da      	lsrs	r2, r3, #3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	3208      	adds	r2, #8
 80051ae:	69b9      	ldr	r1, [r7, #24]
 80051b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	2203      	movs	r2, #3
 80051c0:	fa02 f303 	lsl.w	r3, r2, r3
 80051c4:	43db      	mvns	r3, r3
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	4013      	ands	r3, r2
 80051ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f003 0203 	and.w	r2, r3, #3
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	fa02 f303 	lsl.w	r3, r2, r3
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	4313      	orrs	r3, r2
 80051e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 80a2 	beq.w	800533a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051f6:	2300      	movs	r3, #0
 80051f8:	60fb      	str	r3, [r7, #12]
 80051fa:	4b57      	ldr	r3, [pc, #348]	@ (8005358 <HAL_GPIO_Init+0x2e8>)
 80051fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051fe:	4a56      	ldr	r2, [pc, #344]	@ (8005358 <HAL_GPIO_Init+0x2e8>)
 8005200:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005204:	6453      	str	r3, [r2, #68]	@ 0x44
 8005206:	4b54      	ldr	r3, [pc, #336]	@ (8005358 <HAL_GPIO_Init+0x2e8>)
 8005208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800520a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005212:	4a52      	ldr	r2, [pc, #328]	@ (800535c <HAL_GPIO_Init+0x2ec>)
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	089b      	lsrs	r3, r3, #2
 8005218:	3302      	adds	r3, #2
 800521a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800521e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	220f      	movs	r2, #15
 800522a:	fa02 f303 	lsl.w	r3, r2, r3
 800522e:	43db      	mvns	r3, r3
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	4013      	ands	r3, r2
 8005234:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a49      	ldr	r2, [pc, #292]	@ (8005360 <HAL_GPIO_Init+0x2f0>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d019      	beq.n	8005272 <HAL_GPIO_Init+0x202>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a48      	ldr	r2, [pc, #288]	@ (8005364 <HAL_GPIO_Init+0x2f4>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d013      	beq.n	800526e <HAL_GPIO_Init+0x1fe>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a47      	ldr	r2, [pc, #284]	@ (8005368 <HAL_GPIO_Init+0x2f8>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00d      	beq.n	800526a <HAL_GPIO_Init+0x1fa>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a46      	ldr	r2, [pc, #280]	@ (800536c <HAL_GPIO_Init+0x2fc>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d007      	beq.n	8005266 <HAL_GPIO_Init+0x1f6>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a45      	ldr	r2, [pc, #276]	@ (8005370 <HAL_GPIO_Init+0x300>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d101      	bne.n	8005262 <HAL_GPIO_Init+0x1f2>
 800525e:	2304      	movs	r3, #4
 8005260:	e008      	b.n	8005274 <HAL_GPIO_Init+0x204>
 8005262:	2307      	movs	r3, #7
 8005264:	e006      	b.n	8005274 <HAL_GPIO_Init+0x204>
 8005266:	2303      	movs	r3, #3
 8005268:	e004      	b.n	8005274 <HAL_GPIO_Init+0x204>
 800526a:	2302      	movs	r3, #2
 800526c:	e002      	b.n	8005274 <HAL_GPIO_Init+0x204>
 800526e:	2301      	movs	r3, #1
 8005270:	e000      	b.n	8005274 <HAL_GPIO_Init+0x204>
 8005272:	2300      	movs	r3, #0
 8005274:	69fa      	ldr	r2, [r7, #28]
 8005276:	f002 0203 	and.w	r2, r2, #3
 800527a:	0092      	lsls	r2, r2, #2
 800527c:	4093      	lsls	r3, r2
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	4313      	orrs	r3, r2
 8005282:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005284:	4935      	ldr	r1, [pc, #212]	@ (800535c <HAL_GPIO_Init+0x2ec>)
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	089b      	lsrs	r3, r3, #2
 800528a:	3302      	adds	r3, #2
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005292:	4b38      	ldr	r3, [pc, #224]	@ (8005374 <HAL_GPIO_Init+0x304>)
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	43db      	mvns	r3, r3
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	4013      	ands	r3, r2
 80052a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052b6:	4a2f      	ldr	r2, [pc, #188]	@ (8005374 <HAL_GPIO_Init+0x304>)
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052bc:	4b2d      	ldr	r3, [pc, #180]	@ (8005374 <HAL_GPIO_Init+0x304>)
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	43db      	mvns	r3, r3
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	4013      	ands	r3, r2
 80052ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	4313      	orrs	r3, r2
 80052de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052e0:	4a24      	ldr	r2, [pc, #144]	@ (8005374 <HAL_GPIO_Init+0x304>)
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80052e6:	4b23      	ldr	r3, [pc, #140]	@ (8005374 <HAL_GPIO_Init+0x304>)
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	43db      	mvns	r3, r3
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	4013      	ands	r3, r2
 80052f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	4313      	orrs	r3, r2
 8005308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800530a:	4a1a      	ldr	r2, [pc, #104]	@ (8005374 <HAL_GPIO_Init+0x304>)
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005310:	4b18      	ldr	r3, [pc, #96]	@ (8005374 <HAL_GPIO_Init+0x304>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	43db      	mvns	r3, r3
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	4013      	ands	r3, r2
 800531e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	4313      	orrs	r3, r2
 8005332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005334:	4a0f      	ldr	r2, [pc, #60]	@ (8005374 <HAL_GPIO_Init+0x304>)
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	3301      	adds	r3, #1
 800533e:	61fb      	str	r3, [r7, #28]
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	2b0f      	cmp	r3, #15
 8005344:	f67f aea2 	bls.w	800508c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005348:	bf00      	nop
 800534a:	bf00      	nop
 800534c:	3724      	adds	r7, #36	@ 0x24
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	40023800 	.word	0x40023800
 800535c:	40013800 	.word	0x40013800
 8005360:	40020000 	.word	0x40020000
 8005364:	40020400 	.word	0x40020400
 8005368:	40020800 	.word	0x40020800
 800536c:	40020c00 	.word	0x40020c00
 8005370:	40021000 	.word	0x40021000
 8005374:	40013c00 	.word	0x40013c00

08005378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	460b      	mov	r3, r1
 8005382:	807b      	strh	r3, [r7, #2]
 8005384:	4613      	mov	r3, r2
 8005386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005388:	787b      	ldrb	r3, [r7, #1]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800538e:	887a      	ldrh	r2, [r7, #2]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005394:	e003      	b.n	800539e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005396:	887b      	ldrh	r3, [r7, #2]
 8005398:	041a      	lsls	r2, r3, #16
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	619a      	str	r2, [r3, #24]
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
	...

080053ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e12b      	b.n	8005616 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d106      	bne.n	80053d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7fe f84a 	bl	800346c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2224      	movs	r2, #36	@ 0x24
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 0201 	bic.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800540e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005410:	f001 fece 	bl	80071b0 <HAL_RCC_GetPCLK1Freq>
 8005414:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	4a81      	ldr	r2, [pc, #516]	@ (8005620 <HAL_I2C_Init+0x274>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d807      	bhi.n	8005430 <HAL_I2C_Init+0x84>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4a80      	ldr	r2, [pc, #512]	@ (8005624 <HAL_I2C_Init+0x278>)
 8005424:	4293      	cmp	r3, r2
 8005426:	bf94      	ite	ls
 8005428:	2301      	movls	r3, #1
 800542a:	2300      	movhi	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	e006      	b.n	800543e <HAL_I2C_Init+0x92>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4a7d      	ldr	r2, [pc, #500]	@ (8005628 <HAL_I2C_Init+0x27c>)
 8005434:	4293      	cmp	r3, r2
 8005436:	bf94      	ite	ls
 8005438:	2301      	movls	r3, #1
 800543a:	2300      	movhi	r3, #0
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e0e7      	b.n	8005616 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4a78      	ldr	r2, [pc, #480]	@ (800562c <HAL_I2C_Init+0x280>)
 800544a:	fba2 2303 	umull	r2, r3, r2, r3
 800544e:	0c9b      	lsrs	r3, r3, #18
 8005450:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	430a      	orrs	r2, r1
 8005464:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	4a6a      	ldr	r2, [pc, #424]	@ (8005620 <HAL_I2C_Init+0x274>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d802      	bhi.n	8005480 <HAL_I2C_Init+0xd4>
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	3301      	adds	r3, #1
 800547e:	e009      	b.n	8005494 <HAL_I2C_Init+0xe8>
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005486:	fb02 f303 	mul.w	r3, r2, r3
 800548a:	4a69      	ldr	r2, [pc, #420]	@ (8005630 <HAL_I2C_Init+0x284>)
 800548c:	fba2 2303 	umull	r2, r3, r2, r3
 8005490:	099b      	lsrs	r3, r3, #6
 8005492:	3301      	adds	r3, #1
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	6812      	ldr	r2, [r2, #0]
 8005498:	430b      	orrs	r3, r1
 800549a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80054a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	495c      	ldr	r1, [pc, #368]	@ (8005620 <HAL_I2C_Init+0x274>)
 80054b0:	428b      	cmp	r3, r1
 80054b2:	d819      	bhi.n	80054e8 <HAL_I2C_Init+0x13c>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	1e59      	subs	r1, r3, #1
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	fbb1 f3f3 	udiv	r3, r1, r3
 80054c2:	1c59      	adds	r1, r3, #1
 80054c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80054c8:	400b      	ands	r3, r1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <HAL_I2C_Init+0x138>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	1e59      	subs	r1, r3, #1
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80054dc:	3301      	adds	r3, #1
 80054de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054e2:	e051      	b.n	8005588 <HAL_I2C_Init+0x1dc>
 80054e4:	2304      	movs	r3, #4
 80054e6:	e04f      	b.n	8005588 <HAL_I2C_Init+0x1dc>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d111      	bne.n	8005514 <HAL_I2C_Init+0x168>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	1e58      	subs	r0, r3, #1
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6859      	ldr	r1, [r3, #4]
 80054f8:	460b      	mov	r3, r1
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	440b      	add	r3, r1
 80054fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005502:	3301      	adds	r3, #1
 8005504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005508:	2b00      	cmp	r3, #0
 800550a:	bf0c      	ite	eq
 800550c:	2301      	moveq	r3, #1
 800550e:	2300      	movne	r3, #0
 8005510:	b2db      	uxtb	r3, r3
 8005512:	e012      	b.n	800553a <HAL_I2C_Init+0x18e>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	1e58      	subs	r0, r3, #1
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6859      	ldr	r1, [r3, #4]
 800551c:	460b      	mov	r3, r1
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	440b      	add	r3, r1
 8005522:	0099      	lsls	r1, r3, #2
 8005524:	440b      	add	r3, r1
 8005526:	fbb0 f3f3 	udiv	r3, r0, r3
 800552a:	3301      	adds	r3, #1
 800552c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005530:	2b00      	cmp	r3, #0
 8005532:	bf0c      	ite	eq
 8005534:	2301      	moveq	r3, #1
 8005536:	2300      	movne	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <HAL_I2C_Init+0x196>
 800553e:	2301      	movs	r3, #1
 8005540:	e022      	b.n	8005588 <HAL_I2C_Init+0x1dc>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10e      	bne.n	8005568 <HAL_I2C_Init+0x1bc>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	1e58      	subs	r0, r3, #1
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6859      	ldr	r1, [r3, #4]
 8005552:	460b      	mov	r3, r1
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	440b      	add	r3, r1
 8005558:	fbb0 f3f3 	udiv	r3, r0, r3
 800555c:	3301      	adds	r3, #1
 800555e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005562:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005566:	e00f      	b.n	8005588 <HAL_I2C_Init+0x1dc>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	1e58      	subs	r0, r3, #1
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6859      	ldr	r1, [r3, #4]
 8005570:	460b      	mov	r3, r1
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	440b      	add	r3, r1
 8005576:	0099      	lsls	r1, r3, #2
 8005578:	440b      	add	r3, r1
 800557a:	fbb0 f3f3 	udiv	r3, r0, r3
 800557e:	3301      	adds	r3, #1
 8005580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005584:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005588:	6879      	ldr	r1, [r7, #4]
 800558a:	6809      	ldr	r1, [r1, #0]
 800558c:	4313      	orrs	r3, r2
 800558e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69da      	ldr	r2, [r3, #28]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	431a      	orrs	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80055b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6911      	ldr	r1, [r2, #16]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	68d2      	ldr	r2, [r2, #12]
 80055c2:	4311      	orrs	r1, r2
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6812      	ldr	r2, [r2, #0]
 80055c8:	430b      	orrs	r3, r1
 80055ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	695a      	ldr	r2, [r3, #20]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f042 0201 	orr.w	r2, r2, #1
 80055f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2220      	movs	r2, #32
 8005602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	000186a0 	.word	0x000186a0
 8005624:	001e847f 	.word	0x001e847f
 8005628:	003d08ff 	.word	0x003d08ff
 800562c:	431bde83 	.word	0x431bde83
 8005630:	10624dd3 	.word	0x10624dd3

08005634 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b088      	sub	sp, #32
 8005638:	af02      	add	r7, sp, #8
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	607a      	str	r2, [r7, #4]
 800563e:	461a      	mov	r2, r3
 8005640:	460b      	mov	r3, r1
 8005642:	817b      	strh	r3, [r7, #10]
 8005644:	4613      	mov	r3, r2
 8005646:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005648:	f7fe fbd0 	bl	8003dec <HAL_GetTick>
 800564c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b20      	cmp	r3, #32
 8005658:	f040 80e0 	bne.w	800581c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	2319      	movs	r3, #25
 8005662:	2201      	movs	r2, #1
 8005664:	4970      	ldr	r1, [pc, #448]	@ (8005828 <HAL_I2C_Master_Transmit+0x1f4>)
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 ff3c 	bl	80064e4 <I2C_WaitOnFlagUntilTimeout>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005672:	2302      	movs	r3, #2
 8005674:	e0d3      	b.n	800581e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800567c:	2b01      	cmp	r3, #1
 800567e:	d101      	bne.n	8005684 <HAL_I2C_Master_Transmit+0x50>
 8005680:	2302      	movs	r3, #2
 8005682:	e0cc      	b.n	800581e <HAL_I2C_Master_Transmit+0x1ea>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b01      	cmp	r3, #1
 8005698:	d007      	beq.n	80056aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f042 0201 	orr.w	r2, r2, #1
 80056a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2221      	movs	r2, #33	@ 0x21
 80056be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2210      	movs	r2, #16
 80056c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	893a      	ldrh	r2, [r7, #8]
 80056da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4a50      	ldr	r2, [pc, #320]	@ (800582c <HAL_I2C_Master_Transmit+0x1f8>)
 80056ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80056ec:	8979      	ldrh	r1, [r7, #10]
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	6a3a      	ldr	r2, [r7, #32]
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 fd10 	bl	8006118 <I2C_MasterRequestWrite>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e08d      	b.n	800581e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005702:	2300      	movs	r3, #0
 8005704:	613b      	str	r3, [r7, #16]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	613b      	str	r3, [r7, #16]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	613b      	str	r3, [r7, #16]
 8005716:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005718:	e066      	b.n	80057e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	6a39      	ldr	r1, [r7, #32]
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f000 fffa 	bl	8006718 <I2C_WaitOnTXEFlagUntilTimeout>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00d      	beq.n	8005746 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572e:	2b04      	cmp	r3, #4
 8005730:	d107      	bne.n	8005742 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005740:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e06b      	b.n	800581e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574a:	781a      	ldrb	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005756:	1c5a      	adds	r2, r3, #1
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005760:	b29b      	uxth	r3, r3
 8005762:	3b01      	subs	r3, #1
 8005764:	b29a      	uxth	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800576e:	3b01      	subs	r3, #1
 8005770:	b29a      	uxth	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b04      	cmp	r3, #4
 8005782:	d11b      	bne.n	80057bc <HAL_I2C_Master_Transmit+0x188>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005788:	2b00      	cmp	r3, #0
 800578a:	d017      	beq.n	80057bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005790:	781a      	ldrb	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	3b01      	subs	r3, #1
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057b4:	3b01      	subs	r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	6a39      	ldr	r1, [r7, #32]
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 fff1 	bl	80067a8 <I2C_WaitOnBTFFlagUntilTimeout>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00d      	beq.n	80057e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d107      	bne.n	80057e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e01a      	b.n	800581e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d194      	bne.n	800571a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2220      	movs	r2, #32
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005818:	2300      	movs	r3, #0
 800581a:	e000      	b.n	800581e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800581c:	2302      	movs	r3, #2
  }
}
 800581e:	4618      	mov	r0, r3
 8005820:	3718      	adds	r7, #24
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	00100002 	.word	0x00100002
 800582c:	ffff0000 	.word	0xffff0000

08005830 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b08c      	sub	sp, #48	@ 0x30
 8005834:	af02      	add	r7, sp, #8
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	607a      	str	r2, [r7, #4]
 800583a:	461a      	mov	r2, r3
 800583c:	460b      	mov	r3, r1
 800583e:	817b      	strh	r3, [r7, #10]
 8005840:	4613      	mov	r3, r2
 8005842:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005844:	f7fe fad2 	bl	8003dec <HAL_GetTick>
 8005848:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b20      	cmp	r3, #32
 8005854:	f040 8217 	bne.w	8005c86 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585a:	9300      	str	r3, [sp, #0]
 800585c:	2319      	movs	r3, #25
 800585e:	2201      	movs	r2, #1
 8005860:	497c      	ldr	r1, [pc, #496]	@ (8005a54 <HAL_I2C_Master_Receive+0x224>)
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f000 fe3e 	bl	80064e4 <I2C_WaitOnFlagUntilTimeout>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800586e:	2302      	movs	r3, #2
 8005870:	e20a      	b.n	8005c88 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005878:	2b01      	cmp	r3, #1
 800587a:	d101      	bne.n	8005880 <HAL_I2C_Master_Receive+0x50>
 800587c:	2302      	movs	r3, #2
 800587e:	e203      	b.n	8005c88 <HAL_I2C_Master_Receive+0x458>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b01      	cmp	r3, #1
 8005894:	d007      	beq.n	80058a6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f042 0201 	orr.w	r2, r2, #1
 80058a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2222      	movs	r2, #34	@ 0x22
 80058ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2210      	movs	r2, #16
 80058c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	893a      	ldrh	r2, [r7, #8]
 80058d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058dc:	b29a      	uxth	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	4a5c      	ldr	r2, [pc, #368]	@ (8005a58 <HAL_I2C_Master_Receive+0x228>)
 80058e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80058e8:	8979      	ldrh	r1, [r7, #10]
 80058ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 fc94 	bl	800621c <I2C_MasterRequestRead>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e1c4      	b.n	8005c88 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005902:	2b00      	cmp	r3, #0
 8005904:	d113      	bne.n	800592e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005906:	2300      	movs	r3, #0
 8005908:	623b      	str	r3, [r7, #32]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	623b      	str	r3, [r7, #32]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	623b      	str	r3, [r7, #32]
 800591a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	e198      	b.n	8005c60 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005932:	2b01      	cmp	r3, #1
 8005934:	d11b      	bne.n	800596e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005944:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005946:	2300      	movs	r3, #0
 8005948:	61fb      	str	r3, [r7, #28]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	61fb      	str	r3, [r7, #28]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	61fb      	str	r3, [r7, #28]
 800595a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	e178      	b.n	8005c60 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005972:	2b02      	cmp	r3, #2
 8005974:	d11b      	bne.n	80059ae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005984:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005994:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005996:	2300      	movs	r3, #0
 8005998:	61bb      	str	r3, [r7, #24]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	61bb      	str	r3, [r7, #24]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	61bb      	str	r3, [r7, #24]
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	e158      	b.n	8005c60 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80059bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059be:	2300      	movs	r3, #0
 80059c0:	617b      	str	r3, [r7, #20]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	617b      	str	r3, [r7, #20]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	617b      	str	r3, [r7, #20]
 80059d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80059d4:	e144      	b.n	8005c60 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059da:	2b03      	cmp	r3, #3
 80059dc:	f200 80f1 	bhi.w	8005bc2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d123      	bne.n	8005a30 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f000 ff23 	bl	8006838 <I2C_WaitOnRXNEFlagUntilTimeout>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e145      	b.n	8005c88 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	691a      	ldr	r2, [r3, #16]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a06:	b2d2      	uxtb	r2, r2
 8005a08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0e:	1c5a      	adds	r2, r3, #1
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	3b01      	subs	r3, #1
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005a2e:	e117      	b.n	8005c60 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d14e      	bne.n	8005ad6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3e:	2200      	movs	r2, #0
 8005a40:	4906      	ldr	r1, [pc, #24]	@ (8005a5c <HAL_I2C_Master_Receive+0x22c>)
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 fd4e 	bl	80064e4 <I2C_WaitOnFlagUntilTimeout>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d008      	beq.n	8005a60 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e11a      	b.n	8005c88 <HAL_I2C_Master_Receive+0x458>
 8005a52:	bf00      	nop
 8005a54:	00100002 	.word	0x00100002
 8005a58:	ffff0000 	.word	0xffff0000
 8005a5c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	691a      	ldr	r2, [r3, #16]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	691a      	ldr	r2, [r3, #16]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aac:	b2d2      	uxtb	r2, r2
 8005aae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	3b01      	subs	r3, #1
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005ad4:	e0c4      	b.n	8005c60 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005adc:	2200      	movs	r2, #0
 8005ade:	496c      	ldr	r1, [pc, #432]	@ (8005c90 <HAL_I2C_Master_Receive+0x460>)
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 fcff 	bl	80064e4 <I2C_WaitOnFlagUntilTimeout>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e0cb      	b.n	8005c88 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005afe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	691a      	ldr	r2, [r3, #16]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b0a:	b2d2      	uxtb	r2, r2
 8005b0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b12:	1c5a      	adds	r2, r3, #1
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b38:	2200      	movs	r2, #0
 8005b3a:	4955      	ldr	r1, [pc, #340]	@ (8005c90 <HAL_I2C_Master_Receive+0x460>)
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f000 fcd1 	bl	80064e4 <I2C_WaitOnFlagUntilTimeout>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e09d      	b.n	8005c88 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	691a      	ldr	r2, [r3, #16]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b66:	b2d2      	uxtb	r2, r2
 8005b68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b6e:	1c5a      	adds	r2, r3, #1
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	3b01      	subs	r3, #1
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	691a      	ldr	r2, [r3, #16]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b98:	b2d2      	uxtb	r2, r2
 8005b9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba0:	1c5a      	adds	r2, r3, #1
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005baa:	3b01      	subs	r3, #1
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005bc0:	e04e      	b.n	8005c60 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bc4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f000 fe36 	bl	8006838 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e058      	b.n	8005c88 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	691a      	ldr	r2, [r3, #16]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be0:	b2d2      	uxtb	r2, r2
 8005be2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be8:	1c5a      	adds	r2, r3, #1
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	3b01      	subs	r3, #1
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	f003 0304 	and.w	r3, r3, #4
 8005c12:	2b04      	cmp	r3, #4
 8005c14:	d124      	bne.n	8005c60 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d107      	bne.n	8005c2e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c2c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	691a      	ldr	r2, [r3, #16]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c38:	b2d2      	uxtb	r2, r2
 8005c3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c40:	1c5a      	adds	r2, r3, #1
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f47f aeb6 	bne.w	80059d6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005c82:	2300      	movs	r3, #0
 8005c84:	e000      	b.n	8005c88 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005c86:	2302      	movs	r3, #2
  }
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3728      	adds	r7, #40	@ 0x28
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	00010004 	.word	0x00010004

08005c94 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b088      	sub	sp, #32
 8005c98:	af02      	add	r7, sp, #8
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	4608      	mov	r0, r1
 8005c9e:	4611      	mov	r1, r2
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	817b      	strh	r3, [r7, #10]
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	813b      	strh	r3, [r7, #8]
 8005caa:	4613      	mov	r3, r2
 8005cac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005cae:	f7fe f89d 	bl	8003dec <HAL_GetTick>
 8005cb2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b20      	cmp	r3, #32
 8005cbe:	f040 80d9 	bne.w	8005e74 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	2319      	movs	r3, #25
 8005cc8:	2201      	movs	r2, #1
 8005cca:	496d      	ldr	r1, [pc, #436]	@ (8005e80 <HAL_I2C_Mem_Write+0x1ec>)
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 fc09 	bl	80064e4 <I2C_WaitOnFlagUntilTimeout>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005cd8:	2302      	movs	r3, #2
 8005cda:	e0cc      	b.n	8005e76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d101      	bne.n	8005cea <HAL_I2C_Mem_Write+0x56>
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	e0c5      	b.n	8005e76 <HAL_I2C_Mem_Write+0x1e2>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d007      	beq.n	8005d10 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0201 	orr.w	r2, r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2221      	movs	r2, #33	@ 0x21
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2240      	movs	r2, #64	@ 0x40
 8005d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6a3a      	ldr	r2, [r7, #32]
 8005d3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005d40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	4a4d      	ldr	r2, [pc, #308]	@ (8005e84 <HAL_I2C_Mem_Write+0x1f0>)
 8005d50:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d52:	88f8      	ldrh	r0, [r7, #6]
 8005d54:	893a      	ldrh	r2, [r7, #8]
 8005d56:	8979      	ldrh	r1, [r7, #10]
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	9301      	str	r3, [sp, #4]
 8005d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	4603      	mov	r3, r0
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f000 fb28 	bl	80063b8 <I2C_RequestMemoryWrite>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d052      	beq.n	8005e14 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e081      	b.n	8005e76 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 fcce 	bl	8006718 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00d      	beq.n	8005d9e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	d107      	bne.n	8005d9a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e06b      	b.n	8005e76 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da2:	781a      	ldrb	r2, [r3, #0]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dae:	1c5a      	adds	r2, r3, #1
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005db8:	3b01      	subs	r3, #1
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b04      	cmp	r3, #4
 8005dda:	d11b      	bne.n	8005e14 <HAL_I2C_Mem_Write+0x180>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d017      	beq.n	8005e14 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de8:	781a      	ldrb	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df4:	1c5a      	adds	r2, r3, #1
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1aa      	bne.n	8005d72 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f000 fcc1 	bl	80067a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00d      	beq.n	8005e48 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e30:	2b04      	cmp	r3, #4
 8005e32:	d107      	bne.n	8005e44 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e42:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e016      	b.n	8005e76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005e70:	2300      	movs	r3, #0
 8005e72:	e000      	b.n	8005e76 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005e74:	2302      	movs	r3, #2
  }
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3718      	adds	r7, #24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	00100002 	.word	0x00100002
 8005e84:	ffff0000 	.word	0xffff0000

08005e88 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b08a      	sub	sp, #40	@ 0x28
 8005e8c:	af02      	add	r7, sp, #8
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	607a      	str	r2, [r7, #4]
 8005e92:	603b      	str	r3, [r7, #0]
 8005e94:	460b      	mov	r3, r1
 8005e96:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005e98:	f7fd ffa8 	bl	8003dec <HAL_GetTick>
 8005e9c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b20      	cmp	r3, #32
 8005eac:	f040 8111 	bne.w	80060d2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	2319      	movs	r3, #25
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	4988      	ldr	r1, [pc, #544]	@ (80060dc <HAL_I2C_IsDeviceReady+0x254>)
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 fb12 	bl	80064e4 <I2C_WaitOnFlagUntilTimeout>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	e104      	b.n	80060d4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d101      	bne.n	8005ed8 <HAL_I2C_IsDeviceReady+0x50>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	e0fd      	b.n	80060d4 <HAL_I2C_IsDeviceReady+0x24c>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d007      	beq.n	8005efe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f042 0201 	orr.w	r2, r2, #1
 8005efc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2224      	movs	r2, #36	@ 0x24
 8005f12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4a70      	ldr	r2, [pc, #448]	@ (80060e0 <HAL_I2C_IsDeviceReady+0x258>)
 8005f20:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f30:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f000 fad0 	bl	80064e4 <I2C_WaitOnFlagUntilTimeout>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00d      	beq.n	8005f66 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f58:	d103      	bne.n	8005f62 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f60:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e0b6      	b.n	80060d4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f66:	897b      	ldrh	r3, [r7, #10]
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005f74:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005f76:	f7fd ff39 	bl	8003dec <HAL_GetTick>
 8005f7a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	bf0c      	ite	eq
 8005f8a:	2301      	moveq	r3, #1
 8005f8c:	2300      	movne	r3, #0
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fa0:	bf0c      	ite	eq
 8005fa2:	2301      	moveq	r3, #1
 8005fa4:	2300      	movne	r3, #0
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005faa:	e025      	b.n	8005ff8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005fac:	f7fd ff1e 	bl	8003dec <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	683a      	ldr	r2, [r7, #0]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d302      	bcc.n	8005fc2 <HAL_I2C_IsDeviceReady+0x13a>
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d103      	bne.n	8005fca <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	22a0      	movs	r2, #160	@ 0xa0
 8005fc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	695b      	ldr	r3, [r3, #20]
 8005fd0:	f003 0302 	and.w	r3, r3, #2
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	bf0c      	ite	eq
 8005fd8:	2301      	moveq	r3, #1
 8005fda:	2300      	movne	r3, #0
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fee:	bf0c      	ite	eq
 8005ff0:	2301      	moveq	r3, #1
 8005ff2:	2300      	movne	r3, #0
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2ba0      	cmp	r3, #160	@ 0xa0
 8006002:	d005      	beq.n	8006010 <HAL_I2C_IsDeviceReady+0x188>
 8006004:	7dfb      	ldrb	r3, [r7, #23]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d102      	bne.n	8006010 <HAL_I2C_IsDeviceReady+0x188>
 800600a:	7dbb      	ldrb	r3, [r7, #22]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d0cd      	beq.n	8005fac <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2220      	movs	r2, #32
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	f003 0302 	and.w	r3, r3, #2
 8006022:	2b02      	cmp	r3, #2
 8006024:	d129      	bne.n	800607a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006034:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006036:	2300      	movs	r3, #0
 8006038:	613b      	str	r3, [r7, #16]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	613b      	str	r3, [r7, #16]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	613b      	str	r3, [r7, #16]
 800604a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	2319      	movs	r3, #25
 8006052:	2201      	movs	r2, #1
 8006054:	4921      	ldr	r1, [pc, #132]	@ (80060dc <HAL_I2C_IsDeviceReady+0x254>)
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f000 fa44 	bl	80064e4 <I2C_WaitOnFlagUntilTimeout>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e036      	b.n	80060d4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2220      	movs	r2, #32
 800606a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8006076:	2300      	movs	r3, #0
 8006078:	e02c      	b.n	80060d4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006088:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006092:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	2319      	movs	r3, #25
 800609a:	2201      	movs	r2, #1
 800609c:	490f      	ldr	r1, [pc, #60]	@ (80060dc <HAL_I2C_IsDeviceReady+0x254>)
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f000 fa20 	bl	80064e4 <I2C_WaitOnFlagUntilTimeout>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e012      	b.n	80060d4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	3301      	adds	r3, #1
 80060b2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	f4ff af32 	bcc.w	8005f22 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2220      	movs	r2, #32
 80060c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e000      	b.n	80060d4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80060d2:	2302      	movs	r3, #2
  }
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3720      	adds	r7, #32
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	00100002 	.word	0x00100002
 80060e0:	ffff0000 	.word	0xffff0000

080060e4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060f2:	b2db      	uxtb	r3, r3
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800610c:	4618      	mov	r0, r3
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b088      	sub	sp, #32
 800611c:	af02      	add	r7, sp, #8
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	607a      	str	r2, [r7, #4]
 8006122:	603b      	str	r3, [r7, #0]
 8006124:	460b      	mov	r3, r1
 8006126:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800612c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2b08      	cmp	r3, #8
 8006132:	d006      	beq.n	8006142 <I2C_MasterRequestWrite+0x2a>
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d003      	beq.n	8006142 <I2C_MasterRequestWrite+0x2a>
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006140:	d108      	bne.n	8006154 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006150:	601a      	str	r2, [r3, #0]
 8006152:	e00b      	b.n	800616c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006158:	2b12      	cmp	r3, #18
 800615a:	d107      	bne.n	800616c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800616a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 f9b3 	bl	80064e4 <I2C_WaitOnFlagUntilTimeout>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00d      	beq.n	80061a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800618e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006192:	d103      	bne.n	800619c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800619a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e035      	b.n	800620c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061a8:	d108      	bne.n	80061bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061aa:	897b      	ldrh	r3, [r7, #10]
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	461a      	mov	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80061b8:	611a      	str	r2, [r3, #16]
 80061ba:	e01b      	b.n	80061f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80061bc:	897b      	ldrh	r3, [r7, #10]
 80061be:	11db      	asrs	r3, r3, #7
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	f003 0306 	and.w	r3, r3, #6
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	f063 030f 	orn	r3, r3, #15
 80061cc:	b2da      	uxtb	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	490e      	ldr	r1, [pc, #56]	@ (8006214 <I2C_MasterRequestWrite+0xfc>)
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f000 f9fc 	bl	80065d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e010      	b.n	800620c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80061ea:	897b      	ldrh	r3, [r7, #10]
 80061ec:	b2da      	uxtb	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	4907      	ldr	r1, [pc, #28]	@ (8006218 <I2C_MasterRequestWrite+0x100>)
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f000 f9ec 	bl	80065d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d001      	beq.n	800620a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e000      	b.n	800620c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3718      	adds	r7, #24
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	00010008 	.word	0x00010008
 8006218:	00010002 	.word	0x00010002

0800621c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b088      	sub	sp, #32
 8006220:	af02      	add	r7, sp, #8
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	607a      	str	r2, [r7, #4]
 8006226:	603b      	str	r3, [r7, #0]
 8006228:	460b      	mov	r3, r1
 800622a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006230:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006240:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2b08      	cmp	r3, #8
 8006246:	d006      	beq.n	8006256 <I2C_MasterRequestRead+0x3a>
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d003      	beq.n	8006256 <I2C_MasterRequestRead+0x3a>
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006254:	d108      	bne.n	8006268 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006264:	601a      	str	r2, [r3, #0]
 8006266:	e00b      	b.n	8006280 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800626c:	2b11      	cmp	r3, #17
 800626e:	d107      	bne.n	8006280 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800627e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	f000 f929 	bl	80064e4 <I2C_WaitOnFlagUntilTimeout>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00d      	beq.n	80062b4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062a6:	d103      	bne.n	80062b0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e079      	b.n	80063a8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062bc:	d108      	bne.n	80062d0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80062be:	897b      	ldrh	r3, [r7, #10]
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	f043 0301 	orr.w	r3, r3, #1
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	611a      	str	r2, [r3, #16]
 80062ce:	e05f      	b.n	8006390 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80062d0:	897b      	ldrh	r3, [r7, #10]
 80062d2:	11db      	asrs	r3, r3, #7
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	f003 0306 	and.w	r3, r3, #6
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	f063 030f 	orn	r3, r3, #15
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	4930      	ldr	r1, [pc, #192]	@ (80063b0 <I2C_MasterRequestRead+0x194>)
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f000 f972 	bl	80065d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e054      	b.n	80063a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80062fe:	897b      	ldrh	r3, [r7, #10]
 8006300:	b2da      	uxtb	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	4929      	ldr	r1, [pc, #164]	@ (80063b4 <I2C_MasterRequestRead+0x198>)
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f000 f962 	bl	80065d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d001      	beq.n	800631e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e044      	b.n	80063a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800631e:	2300      	movs	r3, #0
 8006320:	613b      	str	r3, [r7, #16]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	613b      	str	r3, [r7, #16]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	613b      	str	r3, [r7, #16]
 8006332:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006342:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 f8c7 	bl	80064e4 <I2C_WaitOnFlagUntilTimeout>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00d      	beq.n	8006378 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006366:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800636a:	d103      	bne.n	8006374 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006372:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e017      	b.n	80063a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006378:	897b      	ldrh	r3, [r7, #10]
 800637a:	11db      	asrs	r3, r3, #7
 800637c:	b2db      	uxtb	r3, r3
 800637e:	f003 0306 	and.w	r3, r3, #6
 8006382:	b2db      	uxtb	r3, r3
 8006384:	f063 030e 	orn	r3, r3, #14
 8006388:	b2da      	uxtb	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	4907      	ldr	r1, [pc, #28]	@ (80063b4 <I2C_MasterRequestRead+0x198>)
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f000 f91e 	bl	80065d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e000      	b.n	80063a8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3718      	adds	r7, #24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	00010008 	.word	0x00010008
 80063b4:	00010002 	.word	0x00010002

080063b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b088      	sub	sp, #32
 80063bc:	af02      	add	r7, sp, #8
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	4608      	mov	r0, r1
 80063c2:	4611      	mov	r1, r2
 80063c4:	461a      	mov	r2, r3
 80063c6:	4603      	mov	r3, r0
 80063c8:	817b      	strh	r3, [r7, #10]
 80063ca:	460b      	mov	r3, r1
 80063cc:	813b      	strh	r3, [r7, #8]
 80063ce:	4613      	mov	r3, r2
 80063d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f000 f878 	bl	80064e4 <I2C_WaitOnFlagUntilTimeout>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00d      	beq.n	8006416 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006404:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006408:	d103      	bne.n	8006412 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006410:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e05f      	b.n	80064d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006416:	897b      	ldrh	r3, [r7, #10]
 8006418:	b2db      	uxtb	r3, r3
 800641a:	461a      	mov	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006424:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006428:	6a3a      	ldr	r2, [r7, #32]
 800642a:	492d      	ldr	r1, [pc, #180]	@ (80064e0 <I2C_RequestMemoryWrite+0x128>)
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 f8d3 	bl	80065d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d001      	beq.n	800643c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e04c      	b.n	80064d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800643c:	2300      	movs	r3, #0
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	617b      	str	r3, [r7, #20]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	617b      	str	r3, [r7, #20]
 8006450:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006454:	6a39      	ldr	r1, [r7, #32]
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f000 f95e 	bl	8006718 <I2C_WaitOnTXEFlagUntilTimeout>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00d      	beq.n	800647e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006466:	2b04      	cmp	r3, #4
 8006468:	d107      	bne.n	800647a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006478:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e02b      	b.n	80064d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800647e:	88fb      	ldrh	r3, [r7, #6]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d105      	bne.n	8006490 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006484:	893b      	ldrh	r3, [r7, #8]
 8006486:	b2da      	uxtb	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	611a      	str	r2, [r3, #16]
 800648e:	e021      	b.n	80064d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006490:	893b      	ldrh	r3, [r7, #8]
 8006492:	0a1b      	lsrs	r3, r3, #8
 8006494:	b29b      	uxth	r3, r3
 8006496:	b2da      	uxtb	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800649e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064a0:	6a39      	ldr	r1, [r7, #32]
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 f938 	bl	8006718 <I2C_WaitOnTXEFlagUntilTimeout>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00d      	beq.n	80064ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b2:	2b04      	cmp	r3, #4
 80064b4:	d107      	bne.n	80064c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e005      	b.n	80064d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064ca:	893b      	ldrh	r3, [r7, #8]
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	00010002 	.word	0x00010002

080064e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	603b      	str	r3, [r7, #0]
 80064f0:	4613      	mov	r3, r2
 80064f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064f4:	e048      	b.n	8006588 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fc:	d044      	beq.n	8006588 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064fe:	f7fd fc75 	bl	8003dec <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	683a      	ldr	r2, [r7, #0]
 800650a:	429a      	cmp	r2, r3
 800650c:	d302      	bcc.n	8006514 <I2C_WaitOnFlagUntilTimeout+0x30>
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d139      	bne.n	8006588 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	0c1b      	lsrs	r3, r3, #16
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b01      	cmp	r3, #1
 800651c:	d10d      	bne.n	800653a <I2C_WaitOnFlagUntilTimeout+0x56>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	43da      	mvns	r2, r3
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	4013      	ands	r3, r2
 800652a:	b29b      	uxth	r3, r3
 800652c:	2b00      	cmp	r3, #0
 800652e:	bf0c      	ite	eq
 8006530:	2301      	moveq	r3, #1
 8006532:	2300      	movne	r3, #0
 8006534:	b2db      	uxtb	r3, r3
 8006536:	461a      	mov	r2, r3
 8006538:	e00c      	b.n	8006554 <I2C_WaitOnFlagUntilTimeout+0x70>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	43da      	mvns	r2, r3
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	4013      	ands	r3, r2
 8006546:	b29b      	uxth	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	bf0c      	ite	eq
 800654c:	2301      	moveq	r3, #1
 800654e:	2300      	movne	r3, #0
 8006550:	b2db      	uxtb	r3, r3
 8006552:	461a      	mov	r2, r3
 8006554:	79fb      	ldrb	r3, [r7, #7]
 8006556:	429a      	cmp	r2, r3
 8006558:	d116      	bne.n	8006588 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2220      	movs	r2, #32
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006574:	f043 0220 	orr.w	r2, r3, #32
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e023      	b.n	80065d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	0c1b      	lsrs	r3, r3, #16
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b01      	cmp	r3, #1
 8006590:	d10d      	bne.n	80065ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	43da      	mvns	r2, r3
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	4013      	ands	r3, r2
 800659e:	b29b      	uxth	r3, r3
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	bf0c      	ite	eq
 80065a4:	2301      	moveq	r3, #1
 80065a6:	2300      	movne	r3, #0
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	461a      	mov	r2, r3
 80065ac:	e00c      	b.n	80065c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	43da      	mvns	r2, r3
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	4013      	ands	r3, r2
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	2b00      	cmp	r3, #0
 80065be:	bf0c      	ite	eq
 80065c0:	2301      	moveq	r3, #1
 80065c2:	2300      	movne	r3, #0
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	461a      	mov	r2, r3
 80065c8:	79fb      	ldrb	r3, [r7, #7]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d093      	beq.n	80064f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
 80065e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065e6:	e071      	b.n	80066cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065f6:	d123      	bne.n	8006640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006606:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006610:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2220      	movs	r2, #32
 800661c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800662c:	f043 0204 	orr.w	r2, r3, #4
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e067      	b.n	8006710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006646:	d041      	beq.n	80066cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006648:	f7fd fbd0 	bl	8003dec <HAL_GetTick>
 800664c:	4602      	mov	r2, r0
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	429a      	cmp	r2, r3
 8006656:	d302      	bcc.n	800665e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d136      	bne.n	80066cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	0c1b      	lsrs	r3, r3, #16
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b01      	cmp	r3, #1
 8006666:	d10c      	bne.n	8006682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	43da      	mvns	r2, r3
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	4013      	ands	r3, r2
 8006674:	b29b      	uxth	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	bf14      	ite	ne
 800667a:	2301      	movne	r3, #1
 800667c:	2300      	moveq	r3, #0
 800667e:	b2db      	uxtb	r3, r3
 8006680:	e00b      	b.n	800669a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	43da      	mvns	r2, r3
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	4013      	ands	r3, r2
 800668e:	b29b      	uxth	r3, r3
 8006690:	2b00      	cmp	r3, #0
 8006692:	bf14      	ite	ne
 8006694:	2301      	movne	r3, #1
 8006696:	2300      	moveq	r3, #0
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d016      	beq.n	80066cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2220      	movs	r2, #32
 80066a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b8:	f043 0220 	orr.w	r2, r3, #32
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e021      	b.n	8006710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	0c1b      	lsrs	r3, r3, #16
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d10c      	bne.n	80066f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	43da      	mvns	r2, r3
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	4013      	ands	r3, r2
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	bf14      	ite	ne
 80066e8:	2301      	movne	r3, #1
 80066ea:	2300      	moveq	r3, #0
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	e00b      	b.n	8006708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	43da      	mvns	r2, r3
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	4013      	ands	r3, r2
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	bf14      	ite	ne
 8006702:	2301      	movne	r3, #1
 8006704:	2300      	moveq	r3, #0
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b00      	cmp	r3, #0
 800670a:	f47f af6d 	bne.w	80065e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006724:	e034      	b.n	8006790 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f000 f8e3 	bl	80068f2 <I2C_IsAcknowledgeFailed>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e034      	b.n	80067a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673c:	d028      	beq.n	8006790 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800673e:	f7fd fb55 	bl	8003dec <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	429a      	cmp	r2, r3
 800674c:	d302      	bcc.n	8006754 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d11d      	bne.n	8006790 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800675e:	2b80      	cmp	r3, #128	@ 0x80
 8006760:	d016      	beq.n	8006790 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2220      	movs	r2, #32
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800677c:	f043 0220 	orr.w	r2, r3, #32
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e007      	b.n	80067a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800679a:	2b80      	cmp	r3, #128	@ 0x80
 800679c:	d1c3      	bne.n	8006726 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80067b4:	e034      	b.n	8006820 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 f89b 	bl	80068f2 <I2C_IsAcknowledgeFailed>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e034      	b.n	8006830 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067cc:	d028      	beq.n	8006820 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ce:	f7fd fb0d 	bl	8003dec <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d302      	bcc.n	80067e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d11d      	bne.n	8006820 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	f003 0304 	and.w	r3, r3, #4
 80067ee:	2b04      	cmp	r3, #4
 80067f0:	d016      	beq.n	8006820 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2220      	movs	r2, #32
 80067fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800680c:	f043 0220 	orr.w	r2, r3, #32
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e007      	b.n	8006830 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	f003 0304 	and.w	r3, r3, #4
 800682a:	2b04      	cmp	r3, #4
 800682c:	d1c3      	bne.n	80067b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006844:	e049      	b.n	80068da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	f003 0310 	and.w	r3, r3, #16
 8006850:	2b10      	cmp	r3, #16
 8006852:	d119      	bne.n	8006888 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f06f 0210 	mvn.w	r2, #16
 800685c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2220      	movs	r2, #32
 8006868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e030      	b.n	80068ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006888:	f7fd fab0 	bl	8003dec <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	429a      	cmp	r2, r3
 8006896:	d302      	bcc.n	800689e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d11d      	bne.n	80068da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068a8:	2b40      	cmp	r3, #64	@ 0x40
 80068aa:	d016      	beq.n	80068da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2220      	movs	r2, #32
 80068b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c6:	f043 0220 	orr.w	r2, r3, #32
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e007      	b.n	80068ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	695b      	ldr	r3, [r3, #20]
 80068e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068e4:	2b40      	cmp	r3, #64	@ 0x40
 80068e6:	d1ae      	bne.n	8006846 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b083      	sub	sp, #12
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006904:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006908:	d11b      	bne.n	8006942 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006912:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2220      	movs	r2, #32
 800691e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800692e:	f043 0204 	orr.w	r2, r3, #4
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e000      	b.n	8006944 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d101      	bne.n	8006962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e267      	b.n	8006e32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b00      	cmp	r3, #0
 800696c:	d075      	beq.n	8006a5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800696e:	4b88      	ldr	r3, [pc, #544]	@ (8006b90 <HAL_RCC_OscConfig+0x240>)
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f003 030c 	and.w	r3, r3, #12
 8006976:	2b04      	cmp	r3, #4
 8006978:	d00c      	beq.n	8006994 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800697a:	4b85      	ldr	r3, [pc, #532]	@ (8006b90 <HAL_RCC_OscConfig+0x240>)
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006982:	2b08      	cmp	r3, #8
 8006984:	d112      	bne.n	80069ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006986:	4b82      	ldr	r3, [pc, #520]	@ (8006b90 <HAL_RCC_OscConfig+0x240>)
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800698e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006992:	d10b      	bne.n	80069ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006994:	4b7e      	ldr	r3, [pc, #504]	@ (8006b90 <HAL_RCC_OscConfig+0x240>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d05b      	beq.n	8006a58 <HAL_RCC_OscConfig+0x108>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d157      	bne.n	8006a58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e242      	b.n	8006e32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069b4:	d106      	bne.n	80069c4 <HAL_RCC_OscConfig+0x74>
 80069b6:	4b76      	ldr	r3, [pc, #472]	@ (8006b90 <HAL_RCC_OscConfig+0x240>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a75      	ldr	r2, [pc, #468]	@ (8006b90 <HAL_RCC_OscConfig+0x240>)
 80069bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069c0:	6013      	str	r3, [r2, #0]
 80069c2:	e01d      	b.n	8006a00 <HAL_RCC_OscConfig+0xb0>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80069cc:	d10c      	bne.n	80069e8 <HAL_RCC_OscConfig+0x98>
 80069ce:	4b70      	ldr	r3, [pc, #448]	@ (8006b90 <HAL_RCC_OscConfig+0x240>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a6f      	ldr	r2, [pc, #444]	@ (8006b90 <HAL_RCC_OscConfig+0x240>)
 80069d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80069d8:	6013      	str	r3, [r2, #0]
 80069da:	4b6d      	ldr	r3, [pc, #436]	@ (8006b90 <HAL_RCC_OscConfig+0x240>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a6c      	ldr	r2, [pc, #432]	@ (8006b90 <HAL_RCC_OscConfig+0x240>)
 80069e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069e4:	6013      	str	r3, [r2, #0]
 80069e6:	e00b      	b.n	8006a00 <HAL_RCC_OscConfig+0xb0>
 80069e8:	4b69      	ldr	r3, [pc, #420]	@ (8006b90 <HAL_RCC_OscConfig+0x240>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a68      	ldr	r2, [pc, #416]	@ (8006b90 <HAL_RCC_OscConfig+0x240>)
 80069ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069f2:	6013      	str	r3, [r2, #0]
 80069f4:	4b66      	ldr	r3, [pc, #408]	@ (8006b90 <HAL_RCC_OscConfig+0x240>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a65      	ldr	r2, [pc, #404]	@ (8006b90 <HAL_RCC_OscConfig+0x240>)
 80069fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d013      	beq.n	8006a30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a08:	f7fd f9f0 	bl	8003dec <HAL_GetTick>
 8006a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a0e:	e008      	b.n	8006a22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a10:	f7fd f9ec 	bl	8003dec <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	2b64      	cmp	r3, #100	@ 0x64
 8006a1c:	d901      	bls.n	8006a22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e207      	b.n	8006e32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a22:	4b5b      	ldr	r3, [pc, #364]	@ (8006b90 <HAL_RCC_OscConfig+0x240>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d0f0      	beq.n	8006a10 <HAL_RCC_OscConfig+0xc0>
 8006a2e:	e014      	b.n	8006a5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a30:	f7fd f9dc 	bl	8003dec <HAL_GetTick>
 8006a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a36:	e008      	b.n	8006a4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a38:	f7fd f9d8 	bl	8003dec <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	2b64      	cmp	r3, #100	@ 0x64
 8006a44:	d901      	bls.n	8006a4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e1f3      	b.n	8006e32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a4a:	4b51      	ldr	r3, [pc, #324]	@ (8006b90 <HAL_RCC_OscConfig+0x240>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1f0      	bne.n	8006a38 <HAL_RCC_OscConfig+0xe8>
 8006a56:	e000      	b.n	8006a5a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0302 	and.w	r3, r3, #2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d063      	beq.n	8006b2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006a66:	4b4a      	ldr	r3, [pc, #296]	@ (8006b90 <HAL_RCC_OscConfig+0x240>)
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f003 030c 	and.w	r3, r3, #12
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00b      	beq.n	8006a8a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a72:	4b47      	ldr	r3, [pc, #284]	@ (8006b90 <HAL_RCC_OscConfig+0x240>)
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006a7a:	2b08      	cmp	r3, #8
 8006a7c:	d11c      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a7e:	4b44      	ldr	r3, [pc, #272]	@ (8006b90 <HAL_RCC_OscConfig+0x240>)
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d116      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a8a:	4b41      	ldr	r3, [pc, #260]	@ (8006b90 <HAL_RCC_OscConfig+0x240>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0302 	and.w	r3, r3, #2
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d005      	beq.n	8006aa2 <HAL_RCC_OscConfig+0x152>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d001      	beq.n	8006aa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e1c7      	b.n	8006e32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aa2:	4b3b      	ldr	r3, [pc, #236]	@ (8006b90 <HAL_RCC_OscConfig+0x240>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	00db      	lsls	r3, r3, #3
 8006ab0:	4937      	ldr	r1, [pc, #220]	@ (8006b90 <HAL_RCC_OscConfig+0x240>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ab6:	e03a      	b.n	8006b2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d020      	beq.n	8006b02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ac0:	4b34      	ldr	r3, [pc, #208]	@ (8006b94 <HAL_RCC_OscConfig+0x244>)
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac6:	f7fd f991 	bl	8003dec <HAL_GetTick>
 8006aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006acc:	e008      	b.n	8006ae0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ace:	f7fd f98d 	bl	8003dec <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d901      	bls.n	8006ae0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e1a8      	b.n	8006e32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ae0:	4b2b      	ldr	r3, [pc, #172]	@ (8006b90 <HAL_RCC_OscConfig+0x240>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d0f0      	beq.n	8006ace <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aec:	4b28      	ldr	r3, [pc, #160]	@ (8006b90 <HAL_RCC_OscConfig+0x240>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	00db      	lsls	r3, r3, #3
 8006afa:	4925      	ldr	r1, [pc, #148]	@ (8006b90 <HAL_RCC_OscConfig+0x240>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	600b      	str	r3, [r1, #0]
 8006b00:	e015      	b.n	8006b2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b02:	4b24      	ldr	r3, [pc, #144]	@ (8006b94 <HAL_RCC_OscConfig+0x244>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b08:	f7fd f970 	bl	8003dec <HAL_GetTick>
 8006b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b0e:	e008      	b.n	8006b22 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b10:	f7fd f96c 	bl	8003dec <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d901      	bls.n	8006b22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e187      	b.n	8006e32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b22:	4b1b      	ldr	r3, [pc, #108]	@ (8006b90 <HAL_RCC_OscConfig+0x240>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0302 	and.w	r3, r3, #2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1f0      	bne.n	8006b10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0308 	and.w	r3, r3, #8
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d036      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d016      	beq.n	8006b70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b42:	4b15      	ldr	r3, [pc, #84]	@ (8006b98 <HAL_RCC_OscConfig+0x248>)
 8006b44:	2201      	movs	r2, #1
 8006b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b48:	f7fd f950 	bl	8003dec <HAL_GetTick>
 8006b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b4e:	e008      	b.n	8006b62 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b50:	f7fd f94c 	bl	8003dec <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d901      	bls.n	8006b62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e167      	b.n	8006e32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b62:	4b0b      	ldr	r3, [pc, #44]	@ (8006b90 <HAL_RCC_OscConfig+0x240>)
 8006b64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d0f0      	beq.n	8006b50 <HAL_RCC_OscConfig+0x200>
 8006b6e:	e01b      	b.n	8006ba8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b70:	4b09      	ldr	r3, [pc, #36]	@ (8006b98 <HAL_RCC_OscConfig+0x248>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b76:	f7fd f939 	bl	8003dec <HAL_GetTick>
 8006b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b7c:	e00e      	b.n	8006b9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b7e:	f7fd f935 	bl	8003dec <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d907      	bls.n	8006b9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e150      	b.n	8006e32 <HAL_RCC_OscConfig+0x4e2>
 8006b90:	40023800 	.word	0x40023800
 8006b94:	42470000 	.word	0x42470000
 8006b98:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b9c:	4b88      	ldr	r3, [pc, #544]	@ (8006dc0 <HAL_RCC_OscConfig+0x470>)
 8006b9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ba0:	f003 0302 	and.w	r3, r3, #2
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1ea      	bne.n	8006b7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0304 	and.w	r3, r3, #4
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 8097 	beq.w	8006ce4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bba:	4b81      	ldr	r3, [pc, #516]	@ (8006dc0 <HAL_RCC_OscConfig+0x470>)
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10f      	bne.n	8006be6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	60bb      	str	r3, [r7, #8]
 8006bca:	4b7d      	ldr	r3, [pc, #500]	@ (8006dc0 <HAL_RCC_OscConfig+0x470>)
 8006bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bce:	4a7c      	ldr	r2, [pc, #496]	@ (8006dc0 <HAL_RCC_OscConfig+0x470>)
 8006bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8006bd6:	4b7a      	ldr	r3, [pc, #488]	@ (8006dc0 <HAL_RCC_OscConfig+0x470>)
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bde:	60bb      	str	r3, [r7, #8]
 8006be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006be2:	2301      	movs	r3, #1
 8006be4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006be6:	4b77      	ldr	r3, [pc, #476]	@ (8006dc4 <HAL_RCC_OscConfig+0x474>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d118      	bne.n	8006c24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bf2:	4b74      	ldr	r3, [pc, #464]	@ (8006dc4 <HAL_RCC_OscConfig+0x474>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a73      	ldr	r2, [pc, #460]	@ (8006dc4 <HAL_RCC_OscConfig+0x474>)
 8006bf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bfe:	f7fd f8f5 	bl	8003dec <HAL_GetTick>
 8006c02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c04:	e008      	b.n	8006c18 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c06:	f7fd f8f1 	bl	8003dec <HAL_GetTick>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d901      	bls.n	8006c18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e10c      	b.n	8006e32 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c18:	4b6a      	ldr	r3, [pc, #424]	@ (8006dc4 <HAL_RCC_OscConfig+0x474>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d0f0      	beq.n	8006c06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d106      	bne.n	8006c3a <HAL_RCC_OscConfig+0x2ea>
 8006c2c:	4b64      	ldr	r3, [pc, #400]	@ (8006dc0 <HAL_RCC_OscConfig+0x470>)
 8006c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c30:	4a63      	ldr	r2, [pc, #396]	@ (8006dc0 <HAL_RCC_OscConfig+0x470>)
 8006c32:	f043 0301 	orr.w	r3, r3, #1
 8006c36:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c38:	e01c      	b.n	8006c74 <HAL_RCC_OscConfig+0x324>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	2b05      	cmp	r3, #5
 8006c40:	d10c      	bne.n	8006c5c <HAL_RCC_OscConfig+0x30c>
 8006c42:	4b5f      	ldr	r3, [pc, #380]	@ (8006dc0 <HAL_RCC_OscConfig+0x470>)
 8006c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c46:	4a5e      	ldr	r2, [pc, #376]	@ (8006dc0 <HAL_RCC_OscConfig+0x470>)
 8006c48:	f043 0304 	orr.w	r3, r3, #4
 8006c4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c4e:	4b5c      	ldr	r3, [pc, #368]	@ (8006dc0 <HAL_RCC_OscConfig+0x470>)
 8006c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c52:	4a5b      	ldr	r2, [pc, #364]	@ (8006dc0 <HAL_RCC_OscConfig+0x470>)
 8006c54:	f043 0301 	orr.w	r3, r3, #1
 8006c58:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c5a:	e00b      	b.n	8006c74 <HAL_RCC_OscConfig+0x324>
 8006c5c:	4b58      	ldr	r3, [pc, #352]	@ (8006dc0 <HAL_RCC_OscConfig+0x470>)
 8006c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c60:	4a57      	ldr	r2, [pc, #348]	@ (8006dc0 <HAL_RCC_OscConfig+0x470>)
 8006c62:	f023 0301 	bic.w	r3, r3, #1
 8006c66:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c68:	4b55      	ldr	r3, [pc, #340]	@ (8006dc0 <HAL_RCC_OscConfig+0x470>)
 8006c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c6c:	4a54      	ldr	r2, [pc, #336]	@ (8006dc0 <HAL_RCC_OscConfig+0x470>)
 8006c6e:	f023 0304 	bic.w	r3, r3, #4
 8006c72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d015      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c7c:	f7fd f8b6 	bl	8003dec <HAL_GetTick>
 8006c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c82:	e00a      	b.n	8006c9a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c84:	f7fd f8b2 	bl	8003dec <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d901      	bls.n	8006c9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e0cb      	b.n	8006e32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c9a:	4b49      	ldr	r3, [pc, #292]	@ (8006dc0 <HAL_RCC_OscConfig+0x470>)
 8006c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c9e:	f003 0302 	and.w	r3, r3, #2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d0ee      	beq.n	8006c84 <HAL_RCC_OscConfig+0x334>
 8006ca6:	e014      	b.n	8006cd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ca8:	f7fd f8a0 	bl	8003dec <HAL_GetTick>
 8006cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cae:	e00a      	b.n	8006cc6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cb0:	f7fd f89c 	bl	8003dec <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d901      	bls.n	8006cc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e0b5      	b.n	8006e32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cc6:	4b3e      	ldr	r3, [pc, #248]	@ (8006dc0 <HAL_RCC_OscConfig+0x470>)
 8006cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cca:	f003 0302 	and.w	r3, r3, #2
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1ee      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006cd2:	7dfb      	ldrb	r3, [r7, #23]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d105      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cd8:	4b39      	ldr	r3, [pc, #228]	@ (8006dc0 <HAL_RCC_OscConfig+0x470>)
 8006cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cdc:	4a38      	ldr	r2, [pc, #224]	@ (8006dc0 <HAL_RCC_OscConfig+0x470>)
 8006cde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ce2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 80a1 	beq.w	8006e30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006cee:	4b34      	ldr	r3, [pc, #208]	@ (8006dc0 <HAL_RCC_OscConfig+0x470>)
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f003 030c 	and.w	r3, r3, #12
 8006cf6:	2b08      	cmp	r3, #8
 8006cf8:	d05c      	beq.n	8006db4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d141      	bne.n	8006d86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d02:	4b31      	ldr	r3, [pc, #196]	@ (8006dc8 <HAL_RCC_OscConfig+0x478>)
 8006d04:	2200      	movs	r2, #0
 8006d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d08:	f7fd f870 	bl	8003dec <HAL_GetTick>
 8006d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d0e:	e008      	b.n	8006d22 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d10:	f7fd f86c 	bl	8003dec <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d901      	bls.n	8006d22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e087      	b.n	8006e32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d22:	4b27      	ldr	r3, [pc, #156]	@ (8006dc0 <HAL_RCC_OscConfig+0x470>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1f0      	bne.n	8006d10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	69da      	ldr	r2, [r3, #28]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	431a      	orrs	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d3c:	019b      	lsls	r3, r3, #6
 8006d3e:	431a      	orrs	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d44:	085b      	lsrs	r3, r3, #1
 8006d46:	3b01      	subs	r3, #1
 8006d48:	041b      	lsls	r3, r3, #16
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d50:	061b      	lsls	r3, r3, #24
 8006d52:	491b      	ldr	r1, [pc, #108]	@ (8006dc0 <HAL_RCC_OscConfig+0x470>)
 8006d54:	4313      	orrs	r3, r2
 8006d56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d58:	4b1b      	ldr	r3, [pc, #108]	@ (8006dc8 <HAL_RCC_OscConfig+0x478>)
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d5e:	f7fd f845 	bl	8003dec <HAL_GetTick>
 8006d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d64:	e008      	b.n	8006d78 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d66:	f7fd f841 	bl	8003dec <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d901      	bls.n	8006d78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e05c      	b.n	8006e32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d78:	4b11      	ldr	r3, [pc, #68]	@ (8006dc0 <HAL_RCC_OscConfig+0x470>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d0f0      	beq.n	8006d66 <HAL_RCC_OscConfig+0x416>
 8006d84:	e054      	b.n	8006e30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d86:	4b10      	ldr	r3, [pc, #64]	@ (8006dc8 <HAL_RCC_OscConfig+0x478>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d8c:	f7fd f82e 	bl	8003dec <HAL_GetTick>
 8006d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d92:	e008      	b.n	8006da6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d94:	f7fd f82a 	bl	8003dec <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d901      	bls.n	8006da6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e045      	b.n	8006e32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006da6:	4b06      	ldr	r3, [pc, #24]	@ (8006dc0 <HAL_RCC_OscConfig+0x470>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1f0      	bne.n	8006d94 <HAL_RCC_OscConfig+0x444>
 8006db2:	e03d      	b.n	8006e30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d107      	bne.n	8006dcc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e038      	b.n	8006e32 <HAL_RCC_OscConfig+0x4e2>
 8006dc0:	40023800 	.word	0x40023800
 8006dc4:	40007000 	.word	0x40007000
 8006dc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8006e3c <HAL_RCC_OscConfig+0x4ec>)
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d028      	beq.n	8006e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d121      	bne.n	8006e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d11a      	bne.n	8006e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006e02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d111      	bne.n	8006e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e12:	085b      	lsrs	r3, r3, #1
 8006e14:	3b01      	subs	r3, #1
 8006e16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d107      	bne.n	8006e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d001      	beq.n	8006e30 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e000      	b.n	8006e32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3718      	adds	r7, #24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	40023800 	.word	0x40023800

08006e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e0cc      	b.n	8006fee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e54:	4b68      	ldr	r3, [pc, #416]	@ (8006ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0307 	and.w	r3, r3, #7
 8006e5c:	683a      	ldr	r2, [r7, #0]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d90c      	bls.n	8006e7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e62:	4b65      	ldr	r3, [pc, #404]	@ (8006ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e64:	683a      	ldr	r2, [r7, #0]
 8006e66:	b2d2      	uxtb	r2, r2
 8006e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e6a:	4b63      	ldr	r3, [pc, #396]	@ (8006ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0307 	and.w	r3, r3, #7
 8006e72:	683a      	ldr	r2, [r7, #0]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d001      	beq.n	8006e7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e0b8      	b.n	8006fee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0302 	and.w	r3, r3, #2
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d020      	beq.n	8006eca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0304 	and.w	r3, r3, #4
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d005      	beq.n	8006ea0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e94:	4b59      	ldr	r3, [pc, #356]	@ (8006ffc <HAL_RCC_ClockConfig+0x1bc>)
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	4a58      	ldr	r2, [pc, #352]	@ (8006ffc <HAL_RCC_ClockConfig+0x1bc>)
 8006e9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006e9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0308 	and.w	r3, r3, #8
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d005      	beq.n	8006eb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006eac:	4b53      	ldr	r3, [pc, #332]	@ (8006ffc <HAL_RCC_ClockConfig+0x1bc>)
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	4a52      	ldr	r2, [pc, #328]	@ (8006ffc <HAL_RCC_ClockConfig+0x1bc>)
 8006eb2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006eb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006eb8:	4b50      	ldr	r3, [pc, #320]	@ (8006ffc <HAL_RCC_ClockConfig+0x1bc>)
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	494d      	ldr	r1, [pc, #308]	@ (8006ffc <HAL_RCC_ClockConfig+0x1bc>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0301 	and.w	r3, r3, #1
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d044      	beq.n	8006f60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d107      	bne.n	8006eee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ede:	4b47      	ldr	r3, [pc, #284]	@ (8006ffc <HAL_RCC_ClockConfig+0x1bc>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d119      	bne.n	8006f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e07f      	b.n	8006fee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d003      	beq.n	8006efe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006efa:	2b03      	cmp	r3, #3
 8006efc:	d107      	bne.n	8006f0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006efe:	4b3f      	ldr	r3, [pc, #252]	@ (8006ffc <HAL_RCC_ClockConfig+0x1bc>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d109      	bne.n	8006f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e06f      	b.n	8006fee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f0e:	4b3b      	ldr	r3, [pc, #236]	@ (8006ffc <HAL_RCC_ClockConfig+0x1bc>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 0302 	and.w	r3, r3, #2
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d101      	bne.n	8006f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e067      	b.n	8006fee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f1e:	4b37      	ldr	r3, [pc, #220]	@ (8006ffc <HAL_RCC_ClockConfig+0x1bc>)
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f023 0203 	bic.w	r2, r3, #3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	4934      	ldr	r1, [pc, #208]	@ (8006ffc <HAL_RCC_ClockConfig+0x1bc>)
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f30:	f7fc ff5c 	bl	8003dec <HAL_GetTick>
 8006f34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f36:	e00a      	b.n	8006f4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f38:	f7fc ff58 	bl	8003dec <HAL_GetTick>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d901      	bls.n	8006f4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e04f      	b.n	8006fee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f4e:	4b2b      	ldr	r3, [pc, #172]	@ (8006ffc <HAL_RCC_ClockConfig+0x1bc>)
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f003 020c 	and.w	r2, r3, #12
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d1eb      	bne.n	8006f38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f60:	4b25      	ldr	r3, [pc, #148]	@ (8006ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0307 	and.w	r3, r3, #7
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d20c      	bcs.n	8006f88 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f6e:	4b22      	ldr	r3, [pc, #136]	@ (8006ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8006f70:	683a      	ldr	r2, [r7, #0]
 8006f72:	b2d2      	uxtb	r2, r2
 8006f74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f76:	4b20      	ldr	r3, [pc, #128]	@ (8006ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0307 	and.w	r3, r3, #7
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d001      	beq.n	8006f88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e032      	b.n	8006fee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0304 	and.w	r3, r3, #4
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d008      	beq.n	8006fa6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f94:	4b19      	ldr	r3, [pc, #100]	@ (8006ffc <HAL_RCC_ClockConfig+0x1bc>)
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	4916      	ldr	r1, [pc, #88]	@ (8006ffc <HAL_RCC_ClockConfig+0x1bc>)
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 0308 	and.w	r3, r3, #8
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d009      	beq.n	8006fc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fb2:	4b12      	ldr	r3, [pc, #72]	@ (8006ffc <HAL_RCC_ClockConfig+0x1bc>)
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	00db      	lsls	r3, r3, #3
 8006fc0:	490e      	ldr	r1, [pc, #56]	@ (8006ffc <HAL_RCC_ClockConfig+0x1bc>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006fc6:	f000 f821 	bl	800700c <HAL_RCC_GetSysClockFreq>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8006ffc <HAL_RCC_ClockConfig+0x1bc>)
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	091b      	lsrs	r3, r3, #4
 8006fd2:	f003 030f 	and.w	r3, r3, #15
 8006fd6:	490a      	ldr	r1, [pc, #40]	@ (8007000 <HAL_RCC_ClockConfig+0x1c0>)
 8006fd8:	5ccb      	ldrb	r3, [r1, r3]
 8006fda:	fa22 f303 	lsr.w	r3, r2, r3
 8006fde:	4a09      	ldr	r2, [pc, #36]	@ (8007004 <HAL_RCC_ClockConfig+0x1c4>)
 8006fe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006fe2:	4b09      	ldr	r3, [pc, #36]	@ (8007008 <HAL_RCC_ClockConfig+0x1c8>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fc febc 	bl	8003d64 <HAL_InitTick>

  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	40023c00 	.word	0x40023c00
 8006ffc:	40023800 	.word	0x40023800
 8007000:	08013ce0 	.word	0x08013ce0
 8007004:	20000008 	.word	0x20000008
 8007008:	2000000c 	.word	0x2000000c

0800700c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800700c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007010:	b090      	sub	sp, #64	@ 0x40
 8007012:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007014:	2300      	movs	r3, #0
 8007016:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007018:	2300      	movs	r3, #0
 800701a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800701c:	2300      	movs	r3, #0
 800701e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007020:	2300      	movs	r3, #0
 8007022:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007024:	4b59      	ldr	r3, [pc, #356]	@ (800718c <HAL_RCC_GetSysClockFreq+0x180>)
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f003 030c 	and.w	r3, r3, #12
 800702c:	2b08      	cmp	r3, #8
 800702e:	d00d      	beq.n	800704c <HAL_RCC_GetSysClockFreq+0x40>
 8007030:	2b08      	cmp	r3, #8
 8007032:	f200 80a1 	bhi.w	8007178 <HAL_RCC_GetSysClockFreq+0x16c>
 8007036:	2b00      	cmp	r3, #0
 8007038:	d002      	beq.n	8007040 <HAL_RCC_GetSysClockFreq+0x34>
 800703a:	2b04      	cmp	r3, #4
 800703c:	d003      	beq.n	8007046 <HAL_RCC_GetSysClockFreq+0x3a>
 800703e:	e09b      	b.n	8007178 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007040:	4b53      	ldr	r3, [pc, #332]	@ (8007190 <HAL_RCC_GetSysClockFreq+0x184>)
 8007042:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007044:	e09b      	b.n	800717e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007046:	4b53      	ldr	r3, [pc, #332]	@ (8007194 <HAL_RCC_GetSysClockFreq+0x188>)
 8007048:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800704a:	e098      	b.n	800717e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800704c:	4b4f      	ldr	r3, [pc, #316]	@ (800718c <HAL_RCC_GetSysClockFreq+0x180>)
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007054:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007056:	4b4d      	ldr	r3, [pc, #308]	@ (800718c <HAL_RCC_GetSysClockFreq+0x180>)
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d028      	beq.n	80070b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007062:	4b4a      	ldr	r3, [pc, #296]	@ (800718c <HAL_RCC_GetSysClockFreq+0x180>)
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	099b      	lsrs	r3, r3, #6
 8007068:	2200      	movs	r2, #0
 800706a:	623b      	str	r3, [r7, #32]
 800706c:	627a      	str	r2, [r7, #36]	@ 0x24
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007074:	2100      	movs	r1, #0
 8007076:	4b47      	ldr	r3, [pc, #284]	@ (8007194 <HAL_RCC_GetSysClockFreq+0x188>)
 8007078:	fb03 f201 	mul.w	r2, r3, r1
 800707c:	2300      	movs	r3, #0
 800707e:	fb00 f303 	mul.w	r3, r0, r3
 8007082:	4413      	add	r3, r2
 8007084:	4a43      	ldr	r2, [pc, #268]	@ (8007194 <HAL_RCC_GetSysClockFreq+0x188>)
 8007086:	fba0 1202 	umull	r1, r2, r0, r2
 800708a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800708c:	460a      	mov	r2, r1
 800708e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007090:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007092:	4413      	add	r3, r2
 8007094:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007098:	2200      	movs	r2, #0
 800709a:	61bb      	str	r3, [r7, #24]
 800709c:	61fa      	str	r2, [r7, #28]
 800709e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80070a6:	f7f9 fdf7 	bl	8000c98 <__aeabi_uldivmod>
 80070aa:	4602      	mov	r2, r0
 80070ac:	460b      	mov	r3, r1
 80070ae:	4613      	mov	r3, r2
 80070b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070b2:	e053      	b.n	800715c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070b4:	4b35      	ldr	r3, [pc, #212]	@ (800718c <HAL_RCC_GetSysClockFreq+0x180>)
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	099b      	lsrs	r3, r3, #6
 80070ba:	2200      	movs	r2, #0
 80070bc:	613b      	str	r3, [r7, #16]
 80070be:	617a      	str	r2, [r7, #20]
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80070c6:	f04f 0b00 	mov.w	fp, #0
 80070ca:	4652      	mov	r2, sl
 80070cc:	465b      	mov	r3, fp
 80070ce:	f04f 0000 	mov.w	r0, #0
 80070d2:	f04f 0100 	mov.w	r1, #0
 80070d6:	0159      	lsls	r1, r3, #5
 80070d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070dc:	0150      	lsls	r0, r2, #5
 80070de:	4602      	mov	r2, r0
 80070e0:	460b      	mov	r3, r1
 80070e2:	ebb2 080a 	subs.w	r8, r2, sl
 80070e6:	eb63 090b 	sbc.w	r9, r3, fp
 80070ea:	f04f 0200 	mov.w	r2, #0
 80070ee:	f04f 0300 	mov.w	r3, #0
 80070f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80070f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80070fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80070fe:	ebb2 0408 	subs.w	r4, r2, r8
 8007102:	eb63 0509 	sbc.w	r5, r3, r9
 8007106:	f04f 0200 	mov.w	r2, #0
 800710a:	f04f 0300 	mov.w	r3, #0
 800710e:	00eb      	lsls	r3, r5, #3
 8007110:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007114:	00e2      	lsls	r2, r4, #3
 8007116:	4614      	mov	r4, r2
 8007118:	461d      	mov	r5, r3
 800711a:	eb14 030a 	adds.w	r3, r4, sl
 800711e:	603b      	str	r3, [r7, #0]
 8007120:	eb45 030b 	adc.w	r3, r5, fp
 8007124:	607b      	str	r3, [r7, #4]
 8007126:	f04f 0200 	mov.w	r2, #0
 800712a:	f04f 0300 	mov.w	r3, #0
 800712e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007132:	4629      	mov	r1, r5
 8007134:	028b      	lsls	r3, r1, #10
 8007136:	4621      	mov	r1, r4
 8007138:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800713c:	4621      	mov	r1, r4
 800713e:	028a      	lsls	r2, r1, #10
 8007140:	4610      	mov	r0, r2
 8007142:	4619      	mov	r1, r3
 8007144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007146:	2200      	movs	r2, #0
 8007148:	60bb      	str	r3, [r7, #8]
 800714a:	60fa      	str	r2, [r7, #12]
 800714c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007150:	f7f9 fda2 	bl	8000c98 <__aeabi_uldivmod>
 8007154:	4602      	mov	r2, r0
 8007156:	460b      	mov	r3, r1
 8007158:	4613      	mov	r3, r2
 800715a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800715c:	4b0b      	ldr	r3, [pc, #44]	@ (800718c <HAL_RCC_GetSysClockFreq+0x180>)
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	0c1b      	lsrs	r3, r3, #16
 8007162:	f003 0303 	and.w	r3, r3, #3
 8007166:	3301      	adds	r3, #1
 8007168:	005b      	lsls	r3, r3, #1
 800716a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800716c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800716e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007170:	fbb2 f3f3 	udiv	r3, r2, r3
 8007174:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007176:	e002      	b.n	800717e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007178:	4b05      	ldr	r3, [pc, #20]	@ (8007190 <HAL_RCC_GetSysClockFreq+0x184>)
 800717a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800717c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800717e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007180:	4618      	mov	r0, r3
 8007182:	3740      	adds	r7, #64	@ 0x40
 8007184:	46bd      	mov	sp, r7
 8007186:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800718a:	bf00      	nop
 800718c:	40023800 	.word	0x40023800
 8007190:	00f42400 	.word	0x00f42400
 8007194:	017d7840 	.word	0x017d7840

08007198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007198:	b480      	push	{r7}
 800719a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800719c:	4b03      	ldr	r3, [pc, #12]	@ (80071ac <HAL_RCC_GetHCLKFreq+0x14>)
 800719e:	681b      	ldr	r3, [r3, #0]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	20000008 	.word	0x20000008

080071b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80071b4:	f7ff fff0 	bl	8007198 <HAL_RCC_GetHCLKFreq>
 80071b8:	4602      	mov	r2, r0
 80071ba:	4b05      	ldr	r3, [pc, #20]	@ (80071d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	0a9b      	lsrs	r3, r3, #10
 80071c0:	f003 0307 	and.w	r3, r3, #7
 80071c4:	4903      	ldr	r1, [pc, #12]	@ (80071d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071c6:	5ccb      	ldrb	r3, [r1, r3]
 80071c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	40023800 	.word	0x40023800
 80071d4:	08013cf0 	.word	0x08013cf0

080071d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80071dc:	f7ff ffdc 	bl	8007198 <HAL_RCC_GetHCLKFreq>
 80071e0:	4602      	mov	r2, r0
 80071e2:	4b05      	ldr	r3, [pc, #20]	@ (80071f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	0b5b      	lsrs	r3, r3, #13
 80071e8:	f003 0307 	and.w	r3, r3, #7
 80071ec:	4903      	ldr	r1, [pc, #12]	@ (80071fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80071ee:	5ccb      	ldrb	r3, [r1, r3]
 80071f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	40023800 	.word	0x40023800
 80071fc:	08013cf0 	.word	0x08013cf0

08007200 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e022      	b.n	8007258 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b00      	cmp	r3, #0
 800721c:	d105      	bne.n	800722a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f7fc fa03 	bl	8003630 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2203      	movs	r2, #3
 800722e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 f814 	bl	8007260 <HAL_SD_InitCard>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d001      	beq.n	8007242 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e00a      	b.n	8007258 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007260:	b5b0      	push	{r4, r5, r7, lr}
 8007262:	b08e      	sub	sp, #56	@ 0x38
 8007264:	af04      	add	r7, sp, #16
 8007266:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007268:	2300      	movs	r3, #0
 800726a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800726c:	2300      	movs	r3, #0
 800726e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007270:	2300      	movs	r3, #0
 8007272:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007274:	2300      	movs	r3, #0
 8007276:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007278:	2300      	movs	r3, #0
 800727a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800727c:	2376      	movs	r3, #118	@ 0x76
 800727e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681d      	ldr	r5, [r3, #0]
 8007284:	466c      	mov	r4, sp
 8007286:	f107 0314 	add.w	r3, r7, #20
 800728a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800728e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007292:	f107 0308 	add.w	r3, r7, #8
 8007296:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007298:	4628      	mov	r0, r5
 800729a:	f003 f801 	bl	800a2a0 <SDIO_Init>
 800729e:	4603      	mov	r3, r0
 80072a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80072a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e04f      	b.n	8007350 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80072b0:	4b29      	ldr	r3, [pc, #164]	@ (8007358 <HAL_SD_InitCard+0xf8>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4618      	mov	r0, r3
 80072bc:	f003 f839 	bl	800a332 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80072c0:	4b25      	ldr	r3, [pc, #148]	@ (8007358 <HAL_SD_InitCard+0xf8>)
 80072c2:	2201      	movs	r2, #1
 80072c4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80072c6:	2002      	movs	r0, #2
 80072c8:	f7fc fd9c 	bl	8003e04 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f001 f805 	bl	80082dc <SD_PowerON>
 80072d2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00b      	beq.n	80072f2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	431a      	orrs	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e02e      	b.n	8007350 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 ff24 	bl	8008140 <SD_InitCard>
 80072f8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072fa:	6a3b      	ldr	r3, [r7, #32]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00b      	beq.n	8007318 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800730c:	6a3b      	ldr	r3, [r7, #32]
 800730e:	431a      	orrs	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e01b      	b.n	8007350 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007320:	4618      	mov	r0, r3
 8007322:	f003 f898 	bl	800a456 <SDMMC_CmdBlockLength>
 8007326:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007328:	6a3b      	ldr	r3, [r7, #32]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00f      	beq.n	800734e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a0a      	ldr	r2, [pc, #40]	@ (800735c <HAL_SD_InitCard+0xfc>)
 8007334:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	431a      	orrs	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e000      	b.n	8007350 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3728      	adds	r7, #40	@ 0x28
 8007354:	46bd      	mov	sp, r7
 8007356:	bdb0      	pop	{r4, r5, r7, pc}
 8007358:	422580a0 	.word	0x422580a0
 800735c:	004005ff 	.word	0x004005ff

08007360 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b08c      	sub	sp, #48	@ 0x30
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	607a      	str	r2, [r7, #4]
 800736c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d107      	bne.n	8007388 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800737c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e0c0      	b.n	800750a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2b01      	cmp	r3, #1
 8007392:	f040 80b9 	bne.w	8007508 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800739c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	441a      	add	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d907      	bls.n	80073ba <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ae:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e0a7      	b.n	800750a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2203      	movs	r2, #3
 80073be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2200      	movs	r2, #0
 80073c8:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	6812      	ldr	r2, [r2, #0]
 80073d4:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 80073d8:	f043 0302 	orr.w	r3, r3, #2
 80073dc:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e2:	4a4c      	ldr	r2, [pc, #304]	@ (8007514 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80073e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ea:	4a4b      	ldr	r2, [pc, #300]	@ (8007518 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80073ec:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f2:	2200      	movs	r2, #0
 80073f4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073fa:	2200      	movs	r2, #0
 80073fc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740e:	689a      	ldr	r2, [r3, #8]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	430a      	orrs	r2, r1
 8007418:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	3380      	adds	r3, #128	@ 0x80
 8007424:	4619      	mov	r1, r3
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	025b      	lsls	r3, r3, #9
 800742c:	089b      	lsrs	r3, r3, #2
 800742e:	f7fd fabf 	bl	80049b0 <HAL_DMA_Start_IT>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d017      	beq.n	8007468 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8007446:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a33      	ldr	r2, [pc, #204]	@ (800751c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800744e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007454:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e050      	b.n	800750a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007468:	4b2d      	ldr	r3, [pc, #180]	@ (8007520 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800746a:	2201      	movs	r2, #1
 800746c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007472:	2b01      	cmp	r3, #1
 8007474:	d002      	beq.n	800747c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8007476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007478:	025b      	lsls	r3, r3, #9
 800747a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800747c:	f04f 33ff 	mov.w	r3, #4294967295
 8007480:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	025b      	lsls	r3, r3, #9
 8007486:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007488:	2390      	movs	r3, #144	@ 0x90
 800748a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800748c:	2302      	movs	r3, #2
 800748e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007490:	2300      	movs	r3, #0
 8007492:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007494:	2301      	movs	r3, #1
 8007496:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f107 0210 	add.w	r2, r7, #16
 80074a0:	4611      	mov	r1, r2
 80074a2:	4618      	mov	r0, r3
 80074a4:	f002 ffab 	bl	800a3fe <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d90a      	bls.n	80074c4 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2282      	movs	r2, #130	@ 0x82
 80074b2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074ba:	4618      	mov	r0, r3
 80074bc:	f003 f80f 	bl	800a4de <SDMMC_CmdReadMultiBlock>
 80074c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80074c2:	e009      	b.n	80074d8 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2281      	movs	r2, #129	@ 0x81
 80074c8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074d0:	4618      	mov	r0, r3
 80074d2:	f002 ffe2 	bl	800a49a <SDMMC_CmdReadSingleBlock>
 80074d6:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80074d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d012      	beq.n	8007504 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a0e      	ldr	r2, [pc, #56]	@ (800751c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80074e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ec:	431a      	orrs	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e002      	b.n	800750a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8007504:	2300      	movs	r3, #0
 8007506:	e000      	b.n	800750a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8007508:	2302      	movs	r3, #2
  }
}
 800750a:	4618      	mov	r0, r3
 800750c:	3730      	adds	r7, #48	@ 0x30
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	08007f4f 	.word	0x08007f4f
 8007518:	08007fc1 	.word	0x08007fc1
 800751c:	004005ff 	.word	0x004005ff
 8007520:	4225858c 	.word	0x4225858c

08007524 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b08c      	sub	sp, #48	@ 0x30
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
 8007530:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d107      	bne.n	800754c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007540:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e0c5      	b.n	80076d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b01      	cmp	r3, #1
 8007556:	f040 80be 	bne.w	80076d6 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007560:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	441a      	add	r2, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800756a:	429a      	cmp	r2, r3
 800756c:	d907      	bls.n	800757e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007572:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e0ac      	b.n	80076d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2203      	movs	r2, #3
 8007582:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2200      	movs	r2, #0
 800758c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	6812      	ldr	r2, [r2, #0]
 8007598:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 800759c:	f043 0302 	orr.w	r3, r3, #2
 80075a0:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075a6:	4a4e      	ldr	r2, [pc, #312]	@ (80076e0 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80075a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ae:	4a4d      	ldr	r2, [pc, #308]	@ (80076e4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80075b0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075b6:	2200      	movs	r2, #0
 80075b8:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d002      	beq.n	80075c8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80075c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c4:	025b      	lsls	r3, r3, #9
 80075c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d90a      	bls.n	80075e4 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	22a0      	movs	r2, #160	@ 0xa0
 80075d2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075da:	4618      	mov	r0, r3
 80075dc:	f002 ffc3 	bl	800a566 <SDMMC_CmdWriteMultiBlock>
 80075e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80075e2:	e009      	b.n	80075f8 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2290      	movs	r2, #144	@ 0x90
 80075e8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075f0:	4618      	mov	r0, r3
 80075f2:	f002 ff96 	bl	800a522 <SDMMC_CmdWriteSingleBlock>
 80075f6:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80075f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d012      	beq.n	8007624 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a39      	ldr	r2, [pc, #228]	@ (80076e8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8007604:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800760a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800760c:	431a      	orrs	r2, r3
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e059      	b.n	80076d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007624:	4b31      	ldr	r3, [pc, #196]	@ (80076ec <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8007626:	2201      	movs	r2, #1
 8007628:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800762e:	2240      	movs	r2, #64	@ 0x40
 8007630:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007642:	689a      	ldr	r2, [r3, #8]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	430a      	orrs	r2, r1
 800764c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007652:	68b9      	ldr	r1, [r7, #8]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	3380      	adds	r3, #128	@ 0x80
 800765a:	461a      	mov	r2, r3
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	025b      	lsls	r3, r3, #9
 8007660:	089b      	lsrs	r3, r3, #2
 8007662:	f7fd f9a5 	bl	80049b0 <HAL_DMA_Start_IT>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d01c      	beq.n	80076a6 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	6812      	ldr	r2, [r2, #0]
 8007676:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 800767a:	f023 0302 	bic.w	r3, r3, #2
 800767e:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a18      	ldr	r2, [pc, #96]	@ (80076e8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8007686:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800768c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e018      	b.n	80076d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80076a6:	f04f 33ff 	mov.w	r3, #4294967295
 80076aa:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	025b      	lsls	r3, r3, #9
 80076b0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80076b2:	2390      	movs	r3, #144	@ 0x90
 80076b4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80076b6:	2300      	movs	r3, #0
 80076b8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80076ba:	2300      	movs	r3, #0
 80076bc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80076be:	2301      	movs	r3, #1
 80076c0:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f107 0210 	add.w	r2, r7, #16
 80076ca:	4611      	mov	r1, r2
 80076cc:	4618      	mov	r0, r3
 80076ce:	f002 fe96 	bl	800a3fe <SDIO_ConfigData>

      return HAL_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	e000      	b.n	80076d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80076d6:	2302      	movs	r3, #2
  }
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3730      	adds	r7, #48	@ 0x30
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	08007f25 	.word	0x08007f25
 80076e4:	08007fc1 	.word	0x08007fc1
 80076e8:	004005ff 	.word	0x004005ff
 80076ec:	4225858c 	.word	0x4225858c

080076f0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076fc:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007704:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d008      	beq.n	800771e <HAL_SD_IRQHandler+0x2e>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f003 0308 	and.w	r3, r3, #8
 8007712:	2b00      	cmp	r3, #0
 8007714:	d003      	beq.n	800771e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f001 f806 	bl	8008728 <SD_Read_IT>
 800771c:	e165      	b.n	80079ea <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007728:	2b00      	cmp	r3, #0
 800772a:	f000 808f 	beq.w	800784c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007736:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	6812      	ldr	r2, [r2, #0]
 8007742:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8007746:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800774a:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f022 0201 	bic.w	r2, r2, #1
 800775a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f003 0308 	and.w	r3, r3, #8
 8007762:	2b00      	cmp	r3, #0
 8007764:	d039      	beq.n	80077da <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f003 0302 	and.w	r3, r3, #2
 800776c:	2b00      	cmp	r3, #0
 800776e:	d104      	bne.n	800777a <HAL_SD_IRQHandler+0x8a>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f003 0320 	and.w	r3, r3, #32
 8007776:	2b00      	cmp	r3, #0
 8007778:	d011      	beq.n	800779e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4618      	mov	r0, r3
 8007780:	f002 ff14 	bl	800a5ac <SDMMC_CmdStopTransfer>
 8007784:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d008      	beq.n	800779e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	431a      	orrs	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f92f 	bl	80079fc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f240 523a 	movw	r2, #1338	@ 0x53a
 80077a6:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d104      	bne.n	80077ca <HAL_SD_IRQHandler+0xda>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f003 0302 	and.w	r3, r3, #2
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d003      	beq.n	80077d2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f003 fb82 	bl	800aed4 <HAL_SD_RxCpltCallback>
 80077d0:	e10b      	b.n	80079ea <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f003 fb74 	bl	800aec0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80077d8:	e107      	b.n	80079ea <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f000 8102 	beq.w	80079ea <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f003 0320 	and.w	r3, r3, #32
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d011      	beq.n	8007814 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4618      	mov	r0, r3
 80077f6:	f002 fed9 	bl	800a5ac <SDMMC_CmdStopTransfer>
 80077fa:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d008      	beq.n	8007814 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	431a      	orrs	r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f8f4 	bl	80079fc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f003 0301 	and.w	r3, r3, #1
 800781a:	2b00      	cmp	r3, #0
 800781c:	f040 80e5 	bne.w	80079ea <HAL_SD_IRQHandler+0x2fa>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f003 0302 	and.w	r3, r3, #2
 8007826:	2b00      	cmp	r3, #0
 8007828:	f040 80df 	bne.w	80079ea <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f022 0208 	bic.w	r2, r2, #8
 800783a:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f003 fb3b 	bl	800aec0 <HAL_SD_TxCpltCallback>
}
 800784a:	e0ce      	b.n	80079ea <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007852:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007856:	2b00      	cmp	r3, #0
 8007858:	d008      	beq.n	800786c <HAL_SD_IRQHandler+0x17c>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f003 0308 	and.w	r3, r3, #8
 8007860:	2b00      	cmp	r3, #0
 8007862:	d003      	beq.n	800786c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 ffb0 	bl	80087ca <SD_Write_IT>
 800786a:	e0be      	b.n	80079ea <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007872:	f240 233a 	movw	r3, #570	@ 0x23a
 8007876:	4013      	ands	r3, r2
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 80b6 	beq.w	80079ea <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007884:	f003 0302 	and.w	r3, r3, #2
 8007888:	2b00      	cmp	r3, #0
 800788a:	d005      	beq.n	8007898 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007890:	f043 0202 	orr.w	r2, r3, #2
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800789e:	f003 0308 	and.w	r3, r3, #8
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d005      	beq.n	80078b2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078aa:	f043 0208 	orr.w	r2, r3, #8
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078b8:	f003 0320 	and.w	r3, r3, #32
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d005      	beq.n	80078cc <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c4:	f043 0220 	orr.w	r2, r3, #32
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078d2:	f003 0310 	and.w	r3, r3, #16
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d005      	beq.n	80078e6 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078de:	f043 0210 	orr.w	r2, r3, #16
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d005      	beq.n	8007900 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078f8:	f043 0208 	orr.w	r2, r3, #8
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f240 723a 	movw	r2, #1850	@ 0x73a
 8007908:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	6812      	ldr	r2, [r2, #0]
 8007914:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8007918:	f023 0302 	bic.w	r3, r3, #2
 800791c:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4618      	mov	r0, r3
 8007924:	f002 fe42 	bl	800a5ac <SDMMC_CmdStopTransfer>
 8007928:	4602      	mov	r2, r0
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800792e:	431a      	orrs	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f003 0308 	and.w	r3, r3, #8
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00a      	beq.n	8007954 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 f855 	bl	80079fc <HAL_SD_ErrorCallback>
}
 8007952:	e04a      	b.n	80079ea <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800795a:	2b00      	cmp	r3, #0
 800795c:	d045      	beq.n	80079ea <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f003 0310 	and.w	r3, r3, #16
 8007964:	2b00      	cmp	r3, #0
 8007966:	d104      	bne.n	8007972 <HAL_SD_IRQHandler+0x282>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f003 0320 	and.w	r3, r3, #32
 800796e:	2b00      	cmp	r3, #0
 8007970:	d011      	beq.n	8007996 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007976:	4a1f      	ldr	r2, [pc, #124]	@ (80079f4 <HAL_SD_IRQHandler+0x304>)
 8007978:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800797e:	4618      	mov	r0, r3
 8007980:	f7fd f8de 	bl	8004b40 <HAL_DMA_Abort_IT>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d02f      	beq.n	80079ea <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800798e:	4618      	mov	r0, r3
 8007990:	f000 fb68 	bl	8008064 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007994:	e029      	b.n	80079ea <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	2b00      	cmp	r3, #0
 800799e:	d104      	bne.n	80079aa <HAL_SD_IRQHandler+0x2ba>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f003 0302 	and.w	r3, r3, #2
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d011      	beq.n	80079ce <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ae:	4a12      	ldr	r2, [pc, #72]	@ (80079f8 <HAL_SD_IRQHandler+0x308>)
 80079b0:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fd f8c2 	bl	8004b40 <HAL_DMA_Abort_IT>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d013      	beq.n	80079ea <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 fb83 	bl	80080d2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80079cc:	e00d      	b.n	80079ea <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f003 fa62 	bl	800aeac <HAL_SD_AbortCallback>
}
 80079e8:	e7ff      	b.n	80079ea <HAL_SD_IRQHandler+0x2fa>
 80079ea:	bf00      	nop
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	08008065 	.word	0x08008065
 80079f8:	080080d3 	.word	0x080080d3

080079fc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a1e:	0f9b      	lsrs	r3, r3, #30
 8007a20:	b2da      	uxtb	r2, r3
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a2a:	0e9b      	lsrs	r3, r3, #26
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	f003 030f 	and.w	r3, r3, #15
 8007a32:	b2da      	uxtb	r2, r3
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a3c:	0e1b      	lsrs	r3, r3, #24
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	f003 0303 	and.w	r3, r3, #3
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a4e:	0c1b      	lsrs	r3, r3, #16
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a5a:	0a1b      	lsrs	r3, r3, #8
 8007a5c:	b2da      	uxtb	r2, r3
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a66:	b2da      	uxtb	r2, r3
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a70:	0d1b      	lsrs	r3, r3, #20
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a7c:	0c1b      	lsrs	r3, r3, #16
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	f003 030f 	and.w	r3, r3, #15
 8007a84:	b2da      	uxtb	r2, r3
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a8e:	0bdb      	lsrs	r3, r3, #15
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007aa0:	0b9b      	lsrs	r3, r3, #14
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	f003 0301 	and.w	r3, r3, #1
 8007aa8:	b2da      	uxtb	r2, r3
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ab2:	0b5b      	lsrs	r3, r3, #13
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	b2da      	uxtb	r2, r3
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ac4:	0b1b      	lsrs	r3, r3, #12
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	f003 0301 	and.w	r3, r3, #1
 8007acc:	b2da      	uxtb	r2, r3
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d163      	bne.n	8007ba8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ae4:	009a      	lsls	r2, r3, #2
 8007ae6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007aea:	4013      	ands	r3, r2
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8007af0:	0f92      	lsrs	r2, r2, #30
 8007af2:	431a      	orrs	r2, r3
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007afc:	0edb      	lsrs	r3, r3, #27
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	f003 0307 	and.w	r3, r3, #7
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b0e:	0e1b      	lsrs	r3, r3, #24
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	f003 0307 	and.w	r3, r3, #7
 8007b16:	b2da      	uxtb	r2, r3
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b20:	0d5b      	lsrs	r3, r3, #21
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	f003 0307 	and.w	r3, r3, #7
 8007b28:	b2da      	uxtb	r2, r3
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b32:	0c9b      	lsrs	r3, r3, #18
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	f003 0307 	and.w	r3, r3, #7
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b44:	0bdb      	lsrs	r3, r3, #15
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	f003 0307 	and.w	r3, r3, #7
 8007b4c:	b2da      	uxtb	r2, r3
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	1c5a      	adds	r2, r3, #1
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	7e1b      	ldrb	r3, [r3, #24]
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	f003 0307 	and.w	r3, r3, #7
 8007b66:	3302      	adds	r3, #2
 8007b68:	2201      	movs	r2, #1
 8007b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007b72:	fb03 f202 	mul.w	r2, r3, r2
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	7a1b      	ldrb	r3, [r3, #8]
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	f003 030f 	and.w	r3, r3, #15
 8007b84:	2201      	movs	r2, #1
 8007b86:	409a      	lsls	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007b94:	0a52      	lsrs	r2, r2, #9
 8007b96:	fb03 f202 	mul.w	r2, r3, r2
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ba4:	661a      	str	r2, [r3, #96]	@ 0x60
 8007ba6:	e031      	b.n	8007c0c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d11d      	bne.n	8007bec <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007bb4:	041b      	lsls	r3, r3, #16
 8007bb6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bbe:	0c1b      	lsrs	r3, r3, #16
 8007bc0:	431a      	orrs	r2, r3
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	029a      	lsls	r2, r3, #10
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007be0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	661a      	str	r2, [r3, #96]	@ 0x60
 8007bea:	e00f      	b.n	8007c0c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a58      	ldr	r2, [pc, #352]	@ (8007d54 <HAL_SD_GetCardCSD+0x344>)
 8007bf2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bf8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e09d      	b.n	8007d48 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c10:	0b9b      	lsrs	r3, r3, #14
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	f003 0301 	and.w	r3, r3, #1
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c22:	09db      	lsrs	r3, r3, #7
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c2a:	b2da      	uxtb	r2, r3
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c3a:	b2da      	uxtb	r2, r3
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c44:	0fdb      	lsrs	r3, r3, #31
 8007c46:	b2da      	uxtb	r2, r3
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c50:	0f5b      	lsrs	r3, r3, #29
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	f003 0303 	and.w	r3, r3, #3
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c62:	0e9b      	lsrs	r3, r3, #26
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	f003 0307 	and.w	r3, r3, #7
 8007c6a:	b2da      	uxtb	r2, r3
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c74:	0d9b      	lsrs	r3, r3, #22
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	f003 030f 	and.w	r3, r3, #15
 8007c7c:	b2da      	uxtb	r2, r3
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c86:	0d5b      	lsrs	r3, r3, #21
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	f003 0301 	and.w	r3, r3, #1
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ca2:	0c1b      	lsrs	r3, r3, #16
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	f003 0301 	and.w	r3, r3, #1
 8007caa:	b2da      	uxtb	r2, r3
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cb6:	0bdb      	lsrs	r3, r3, #15
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	b2da      	uxtb	r2, r3
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cca:	0b9b      	lsrs	r3, r3, #14
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	b2da      	uxtb	r2, r3
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cde:	0b5b      	lsrs	r3, r3, #13
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	f003 0301 	and.w	r3, r3, #1
 8007ce6:	b2da      	uxtb	r2, r3
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cf2:	0b1b      	lsrs	r3, r3, #12
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	b2da      	uxtb	r2, r3
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d06:	0a9b      	lsrs	r3, r3, #10
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	f003 0303 	and.w	r3, r3, #3
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d1a:	0a1b      	lsrs	r3, r3, #8
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	f003 0303 	and.w	r3, r3, #3
 8007d22:	b2da      	uxtb	r2, r3
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d2e:	085b      	lsrs	r3, r3, #1
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	2201      	movs	r2, #1
 8007d42:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr
 8007d54:	004005ff 	.word	0x004005ff

08007d58 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007db0:	b5b0      	push	{r4, r5, r7, lr}
 8007db2:	b08e      	sub	sp, #56	@ 0x38
 8007db4:	af04      	add	r7, sp, #16
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2203      	movs	r2, #3
 8007dc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dcc:	2b03      	cmp	r3, #3
 8007dce:	d02e      	beq.n	8007e2e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dd6:	d106      	bne.n	8007de6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ddc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	639a      	str	r2, [r3, #56]	@ 0x38
 8007de4:	e029      	b.n	8007e3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dec:	d10a      	bne.n	8007e04 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fb2a 	bl	8008448 <SD_WideBus_Enable>
 8007df4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dfa:	6a3b      	ldr	r3, [r7, #32]
 8007dfc:	431a      	orrs	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	639a      	str	r2, [r3, #56]	@ 0x38
 8007e02:	e01a      	b.n	8007e3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10a      	bne.n	8007e20 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fb67 	bl	80084de <SD_WideBus_Disable>
 8007e10:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e16:	6a3b      	ldr	r3, [r7, #32]
 8007e18:	431a      	orrs	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	639a      	str	r2, [r3, #56]	@ 0x38
 8007e1e:	e00c      	b.n	8007e3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e24:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8007e2c:	e005      	b.n	8007e3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e32:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00b      	beq.n	8007e5a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a26      	ldr	r2, [pc, #152]	@ (8007ee0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007e48:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007e58:	e01f      	b.n	8007e9a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	695b      	ldr	r3, [r3, #20]
 8007e74:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	699b      	ldr	r3, [r3, #24]
 8007e7a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681d      	ldr	r5, [r3, #0]
 8007e80:	466c      	mov	r4, sp
 8007e82:	f107 0314 	add.w	r3, r7, #20
 8007e86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007e8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007e8e:	f107 0308 	add.w	r3, r7, #8
 8007e92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e94:	4628      	mov	r0, r5
 8007e96:	f002 fa03 	bl	800a2a0 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f002 fad7 	bl	800a456 <SDMMC_CmdBlockLength>
 8007ea8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007eaa:	6a3b      	ldr	r3, [r7, #32]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00c      	beq.n	8007eca <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8007ee0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007eb6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ebc:	6a3b      	ldr	r3, [r7, #32]
 8007ebe:	431a      	orrs	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8007ed2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3728      	adds	r7, #40	@ 0x28
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bdb0      	pop	{r4, r5, r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	004005ff 	.word	0x004005ff

08007ee4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007eec:	2300      	movs	r3, #0
 8007eee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007ef0:	f107 030c 	add.w	r3, r7, #12
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fa7e 	bl	80083f8 <SD_SendStatus>
 8007efc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d005      	beq.n	8007f10 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	431a      	orrs	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	0a5b      	lsrs	r3, r3, #9
 8007f14:	f003 030f 	and.w	r3, r3, #15
 8007f18:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007f1a:	693b      	ldr	r3, [r7, #16]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3718      	adds	r7, #24
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f30:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f40:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8007f42:	bf00      	nop
 8007f44:	3714      	adds	r7, #20
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr

08007f4e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b084      	sub	sp, #16
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f5a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f60:	2b82      	cmp	r3, #130	@ 0x82
 8007f62:	d111      	bne.n	8007f88 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f002 fb1f 	bl	800a5ac <SDMMC_CmdStopTransfer>
 8007f6e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d008      	beq.n	8007f88 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	431a      	orrs	r2, r3
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f7ff fd3a 	bl	80079fc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f022 0208 	bic.w	r2, r2, #8
 8007f96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007fa0:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f002 ff8f 	bl	800aed4 <HAL_SD_RxCpltCallback>
#endif
}
 8007fb6:	bf00      	nop
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
	...

08007fc0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fcc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f7fc ff62 	bl	8004e98 <HAL_DMA_GetError>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d03e      	beq.n	8008058 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fe0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fe8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d002      	beq.n	8007ff6 <SD_DMAError+0x36>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d12d      	bne.n	8008052 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a19      	ldr	r2, [pc, #100]	@ (8008060 <SD_DMAError+0xa0>)
 8007ffc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800800c:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008012:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800801a:	6978      	ldr	r0, [r7, #20]
 800801c:	f7ff ff62 	bl	8007ee4 <HAL_SD_GetCardState>
 8008020:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	2b06      	cmp	r3, #6
 8008026:	d002      	beq.n	800802e <SD_DMAError+0x6e>
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	2b05      	cmp	r3, #5
 800802c:	d10a      	bne.n	8008044 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4618      	mov	r0, r3
 8008034:	f002 faba 	bl	800a5ac <SDMMC_CmdStopTransfer>
 8008038:	4602      	mov	r2, r0
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800803e:	431a      	orrs	r2, r3
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	2200      	movs	r2, #0
 8008050:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008052:	6978      	ldr	r0, [r7, #20]
 8008054:	f7ff fcd2 	bl	80079fc <HAL_SD_ErrorCallback>
#endif
  }
}
 8008058:	bf00      	nop
 800805a:	3718      	adds	r7, #24
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	004005ff 	.word	0x004005ff

08008064 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008070:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f240 523a 	movw	r2, #1338	@ 0x53a
 800807a:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f7ff ff31 	bl	8007ee4 <HAL_SD_GetCardState>
 8008082:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	2b06      	cmp	r3, #6
 8008096:	d002      	beq.n	800809e <SD_DMATxAbort+0x3a>
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	2b05      	cmp	r3, #5
 800809c:	d10a      	bne.n	80080b4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f002 fa82 	bl	800a5ac <SDMMC_CmdStopTransfer>
 80080a8:	4602      	mov	r2, r0
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ae:	431a      	orrs	r2, r3
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d103      	bne.n	80080c4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f002 fef5 	bl	800aeac <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80080c2:	e002      	b.n	80080ca <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f7ff fc99 	bl	80079fc <HAL_SD_ErrorCallback>
}
 80080ca:	bf00      	nop
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b084      	sub	sp, #16
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080de:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f240 523a 	movw	r2, #1338	@ 0x53a
 80080e8:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f7ff fefa 	bl	8007ee4 <HAL_SD_GetCardState>
 80080f0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2201      	movs	r2, #1
 80080f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	2b06      	cmp	r3, #6
 8008104:	d002      	beq.n	800810c <SD_DMARxAbort+0x3a>
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	2b05      	cmp	r3, #5
 800810a:	d10a      	bne.n	8008122 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4618      	mov	r0, r3
 8008112:	f002 fa4b 	bl	800a5ac <SDMMC_CmdStopTransfer>
 8008116:	4602      	mov	r2, r0
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800811c:	431a      	orrs	r2, r3
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008126:	2b00      	cmp	r3, #0
 8008128:	d103      	bne.n	8008132 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f002 febe 	bl	800aeac <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008130:	e002      	b.n	8008138 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f7ff fc62 	bl	80079fc <HAL_SD_ErrorCallback>
}
 8008138:	bf00      	nop
 800813a:	3710      	adds	r7, #16
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008140:	b5b0      	push	{r4, r5, r7, lr}
 8008142:	b094      	sub	sp, #80	@ 0x50
 8008144:	af04      	add	r7, sp, #16
 8008146:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008148:	2301      	movs	r3, #1
 800814a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4618      	mov	r0, r3
 8008152:	f002 f8fc 	bl	800a34e <SDIO_GetPowerState>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d102      	bne.n	8008162 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800815c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008160:	e0b8      	b.n	80082d4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008166:	2b03      	cmp	r3, #3
 8008168:	d02f      	beq.n	80081ca <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4618      	mov	r0, r3
 8008170:	f002 fb26 	bl	800a7c0 <SDMMC_CmdSendCID>
 8008174:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008178:	2b00      	cmp	r3, #0
 800817a:	d001      	beq.n	8008180 <SD_InitCard+0x40>
    {
      return errorstate;
 800817c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800817e:	e0a9      	b.n	80082d4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2100      	movs	r1, #0
 8008186:	4618      	mov	r0, r3
 8008188:	f002 f926 	bl	800a3d8 <SDIO_GetResponse>
 800818c:	4602      	mov	r2, r0
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2104      	movs	r1, #4
 8008198:	4618      	mov	r0, r3
 800819a:	f002 f91d 	bl	800a3d8 <SDIO_GetResponse>
 800819e:	4602      	mov	r2, r0
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2108      	movs	r1, #8
 80081aa:	4618      	mov	r0, r3
 80081ac:	f002 f914 	bl	800a3d8 <SDIO_GetResponse>
 80081b0:	4602      	mov	r2, r0
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	210c      	movs	r1, #12
 80081bc:	4618      	mov	r0, r3
 80081be:	f002 f90b 	bl	800a3d8 <SDIO_GetResponse>
 80081c2:	4602      	mov	r2, r0
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081ce:	2b03      	cmp	r3, #3
 80081d0:	d00d      	beq.n	80081ee <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f107 020e 	add.w	r2, r7, #14
 80081da:	4611      	mov	r1, r2
 80081dc:	4618      	mov	r0, r3
 80081de:	f002 fb2c 	bl	800a83a <SDMMC_CmdSetRelAdd>
 80081e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80081e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <SD_InitCard+0xae>
    {
      return errorstate;
 80081ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081ec:	e072      	b.n	80082d4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081f2:	2b03      	cmp	r3, #3
 80081f4:	d036      	beq.n	8008264 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80081f6:	89fb      	ldrh	r3, [r7, #14]
 80081f8:	461a      	mov	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008206:	041b      	lsls	r3, r3, #16
 8008208:	4619      	mov	r1, r3
 800820a:	4610      	mov	r0, r2
 800820c:	f002 faf6 	bl	800a7fc <SDMMC_CmdSendCSD>
 8008210:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008214:	2b00      	cmp	r3, #0
 8008216:	d001      	beq.n	800821c <SD_InitCard+0xdc>
    {
      return errorstate;
 8008218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800821a:	e05b      	b.n	80082d4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2100      	movs	r1, #0
 8008222:	4618      	mov	r0, r3
 8008224:	f002 f8d8 	bl	800a3d8 <SDIO_GetResponse>
 8008228:	4602      	mov	r2, r0
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2104      	movs	r1, #4
 8008234:	4618      	mov	r0, r3
 8008236:	f002 f8cf 	bl	800a3d8 <SDIO_GetResponse>
 800823a:	4602      	mov	r2, r0
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2108      	movs	r1, #8
 8008246:	4618      	mov	r0, r3
 8008248:	f002 f8c6 	bl	800a3d8 <SDIO_GetResponse>
 800824c:	4602      	mov	r2, r0
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	210c      	movs	r1, #12
 8008258:	4618      	mov	r0, r3
 800825a:	f002 f8bd 	bl	800a3d8 <SDIO_GetResponse>
 800825e:	4602      	mov	r2, r0
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2104      	movs	r1, #4
 800826a:	4618      	mov	r0, r3
 800826c:	f002 f8b4 	bl	800a3d8 <SDIO_GetResponse>
 8008270:	4603      	mov	r3, r0
 8008272:	0d1a      	lsrs	r2, r3, #20
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008278:	f107 0310 	add.w	r3, r7, #16
 800827c:	4619      	mov	r1, r3
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f7ff fbc6 	bl	8007a10 <HAL_SD_GetCardCSD>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d002      	beq.n	8008290 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800828a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800828e:	e021      	b.n	80082d4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6819      	ldr	r1, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008298:	041b      	lsls	r3, r3, #16
 800829a:	2200      	movs	r2, #0
 800829c:	461c      	mov	r4, r3
 800829e:	4615      	mov	r5, r2
 80082a0:	4622      	mov	r2, r4
 80082a2:	462b      	mov	r3, r5
 80082a4:	4608      	mov	r0, r1
 80082a6:	f002 f9a3 	bl	800a5f0 <SDMMC_CmdSelDesel>
 80082aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80082ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d001      	beq.n	80082b6 <SD_InitCard+0x176>
  {
    return errorstate;
 80082b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082b4:	e00e      	b.n	80082d4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681d      	ldr	r5, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	466c      	mov	r4, sp
 80082be:	f103 0210 	add.w	r2, r3, #16
 80082c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80082c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80082c8:	3304      	adds	r3, #4
 80082ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80082cc:	4628      	mov	r0, r5
 80082ce:	f001 ffe7 	bl	800a2a0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3740      	adds	r7, #64	@ 0x40
 80082d8:	46bd      	mov	sp, r7
 80082da:	bdb0      	pop	{r4, r5, r7, pc}

080082dc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082e4:	2300      	movs	r3, #0
 80082e6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80082e8:	2300      	movs	r3, #0
 80082ea:	617b      	str	r3, [r7, #20]
 80082ec:	2300      	movs	r3, #0
 80082ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4618      	mov	r0, r3
 80082f6:	f002 f99e 	bl	800a636 <SDMMC_CmdGoIdleState>
 80082fa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	e072      	b.n	80083ec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4618      	mov	r0, r3
 800830c:	f002 f9b1 	bl	800a672 <SDMMC_CmdOperCond>
 8008310:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00d      	beq.n	8008334 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4618      	mov	r0, r3
 8008324:	f002 f987 	bl	800a636 <SDMMC_CmdGoIdleState>
 8008328:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d004      	beq.n	800833a <SD_PowerON+0x5e>
    {
      return errorstate;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	e05b      	b.n	80083ec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800833e:	2b01      	cmp	r3, #1
 8008340:	d137      	bne.n	80083b2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2100      	movs	r1, #0
 8008348:	4618      	mov	r0, r3
 800834a:	f002 f9b1 	bl	800a6b0 <SDMMC_CmdAppCommand>
 800834e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d02d      	beq.n	80083b2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008356:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800835a:	e047      	b.n	80083ec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2100      	movs	r1, #0
 8008362:	4618      	mov	r0, r3
 8008364:	f002 f9a4 	bl	800a6b0 <SDMMC_CmdAppCommand>
 8008368:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d001      	beq.n	8008374 <SD_PowerON+0x98>
    {
      return errorstate;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	e03b      	b.n	80083ec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	491e      	ldr	r1, [pc, #120]	@ (80083f4 <SD_PowerON+0x118>)
 800837a:	4618      	mov	r0, r3
 800837c:	f002 f9ba 	bl	800a6f4 <SDMMC_CmdAppOperCommand>
 8008380:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d002      	beq.n	800838e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008388:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800838c:	e02e      	b.n	80083ec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2100      	movs	r1, #0
 8008394:	4618      	mov	r0, r3
 8008396:	f002 f81f 	bl	800a3d8 <SDIO_GetResponse>
 800839a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	0fdb      	lsrs	r3, r3, #31
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d101      	bne.n	80083a8 <SD_PowerON+0xcc>
 80083a4:	2301      	movs	r3, #1
 80083a6:	e000      	b.n	80083aa <SD_PowerON+0xce>
 80083a8:	2300      	movs	r3, #0
 80083aa:	613b      	str	r3, [r7, #16]

    count++;
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	3301      	adds	r3, #1
 80083b0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d802      	bhi.n	80083c2 <SD_PowerON+0xe6>
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d0cc      	beq.n	800835c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d902      	bls.n	80083d2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80083cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80083d0:	e00c      	b.n	80083ec <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d003      	beq.n	80083e4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	645a      	str	r2, [r3, #68]	@ 0x44
 80083e2:	e002      	b.n	80083ea <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3718      	adds	r7, #24
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	c1100000 	.word	0xc1100000

080083f8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d102      	bne.n	800840e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008408:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800840c:	e018      	b.n	8008440 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008416:	041b      	lsls	r3, r3, #16
 8008418:	4619      	mov	r1, r3
 800841a:	4610      	mov	r0, r2
 800841c:	f002 fa2e 	bl	800a87c <SDMMC_CmdSendStatus>
 8008420:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d001      	beq.n	800842c <SD_SendStatus+0x34>
  {
    return errorstate;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	e009      	b.n	8008440 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2100      	movs	r1, #0
 8008432:	4618      	mov	r0, r3
 8008434:	f001 ffd0 	bl	800a3d8 <SDIO_GetResponse>
 8008438:	4602      	mov	r2, r0
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3710      	adds	r7, #16
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b086      	sub	sp, #24
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008450:	2300      	movs	r3, #0
 8008452:	60fb      	str	r3, [r7, #12]
 8008454:	2300      	movs	r3, #0
 8008456:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2100      	movs	r1, #0
 800845e:	4618      	mov	r0, r3
 8008460:	f001 ffba 	bl	800a3d8 <SDIO_GetResponse>
 8008464:	4603      	mov	r3, r0
 8008466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800846a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800846e:	d102      	bne.n	8008476 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008470:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008474:	e02f      	b.n	80084d6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008476:	f107 030c 	add.w	r3, r7, #12
 800847a:	4619      	mov	r1, r3
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 f879 	bl	8008574 <SD_FindSCR>
 8008482:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d001      	beq.n	800848e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	e023      	b.n	80084d6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d01c      	beq.n	80084d2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084a0:	041b      	lsls	r3, r3, #16
 80084a2:	4619      	mov	r1, r3
 80084a4:	4610      	mov	r0, r2
 80084a6:	f002 f903 	bl	800a6b0 <SDMMC_CmdAppCommand>
 80084aa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d001      	beq.n	80084b6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	e00f      	b.n	80084d6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2102      	movs	r1, #2
 80084bc:	4618      	mov	r0, r3
 80084be:	f002 f93c 	bl	800a73a <SDMMC_CmdBusWidth>
 80084c2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d001      	beq.n	80084ce <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	e003      	b.n	80084d6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80084ce:	2300      	movs	r3, #0
 80084d0:	e001      	b.n	80084d6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80084d2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3718      	adds	r7, #24
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b086      	sub	sp, #24
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80084e6:	2300      	movs	r3, #0
 80084e8:	60fb      	str	r3, [r7, #12]
 80084ea:	2300      	movs	r3, #0
 80084ec:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2100      	movs	r1, #0
 80084f4:	4618      	mov	r0, r3
 80084f6:	f001 ff6f 	bl	800a3d8 <SDIO_GetResponse>
 80084fa:	4603      	mov	r3, r0
 80084fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008500:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008504:	d102      	bne.n	800850c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008506:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800850a:	e02f      	b.n	800856c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800850c:	f107 030c 	add.w	r3, r7, #12
 8008510:	4619      	mov	r1, r3
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f82e 	bl	8008574 <SD_FindSCR>
 8008518:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d001      	beq.n	8008524 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	e023      	b.n	800856c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800852a:	2b00      	cmp	r3, #0
 800852c:	d01c      	beq.n	8008568 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008536:	041b      	lsls	r3, r3, #16
 8008538:	4619      	mov	r1, r3
 800853a:	4610      	mov	r0, r2
 800853c:	f002 f8b8 	bl	800a6b0 <SDMMC_CmdAppCommand>
 8008540:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d001      	beq.n	800854c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	e00f      	b.n	800856c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2100      	movs	r1, #0
 8008552:	4618      	mov	r0, r3
 8008554:	f002 f8f1 	bl	800a73a <SDMMC_CmdBusWidth>
 8008558:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d001      	beq.n	8008564 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	e003      	b.n	800856c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008564:	2300      	movs	r3, #0
 8008566:	e001      	b.n	800856c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008568:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800856c:	4618      	mov	r0, r3
 800856e:	3718      	adds	r7, #24
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008574:	b590      	push	{r4, r7, lr}
 8008576:	b08f      	sub	sp, #60	@ 0x3c
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800857e:	f7fb fc35 	bl	8003dec <HAL_GetTick>
 8008582:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8008584:	2300      	movs	r3, #0
 8008586:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008588:	2300      	movs	r3, #0
 800858a:	60bb      	str	r3, [r7, #8]
 800858c:	2300      	movs	r3, #0
 800858e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2108      	movs	r1, #8
 800859a:	4618      	mov	r0, r3
 800859c:	f001 ff5b 	bl	800a456 <SDMMC_CmdBlockLength>
 80085a0:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80085a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d001      	beq.n	80085ac <SD_FindSCR+0x38>
  {
    return errorstate;
 80085a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085aa:	e0b9      	b.n	8008720 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085b4:	041b      	lsls	r3, r3, #16
 80085b6:	4619      	mov	r1, r3
 80085b8:	4610      	mov	r0, r2
 80085ba:	f002 f879 	bl	800a6b0 <SDMMC_CmdAppCommand>
 80085be:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80085c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <SD_FindSCR+0x56>
  {
    return errorstate;
 80085c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c8:	e0aa      	b.n	8008720 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80085ca:	f04f 33ff 	mov.w	r3, #4294967295
 80085ce:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80085d0:	2308      	movs	r3, #8
 80085d2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80085d4:	2330      	movs	r3, #48	@ 0x30
 80085d6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80085d8:	2302      	movs	r3, #2
 80085da:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80085dc:	2300      	movs	r3, #0
 80085de:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80085e0:	2301      	movs	r3, #1
 80085e2:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f107 0210 	add.w	r2, r7, #16
 80085ec:	4611      	mov	r1, r2
 80085ee:	4618      	mov	r0, r3
 80085f0:	f001 ff05 	bl	800a3fe <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4618      	mov	r0, r3
 80085fa:	f002 f8c0 	bl	800a77e <SDMMC_CmdSendSCR>
 80085fe:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008602:	2b00      	cmp	r3, #0
 8008604:	d02a      	beq.n	800865c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8008606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008608:	e08a      	b.n	8008720 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008610:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00f      	beq.n	8008638 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6819      	ldr	r1, [r3, #0]
 800861c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	f107 0208 	add.w	r2, r7, #8
 8008624:	18d4      	adds	r4, r2, r3
 8008626:	4608      	mov	r0, r1
 8008628:	f001 fe65 	bl	800a2f6 <SDIO_ReadFIFO>
 800862c:	4603      	mov	r3, r0
 800862e:	6023      	str	r3, [r4, #0]
      index++;
 8008630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008632:	3301      	adds	r3, #1
 8008634:	637b      	str	r3, [r7, #52]	@ 0x34
 8008636:	e006      	b.n	8008646 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800863e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008642:	2b00      	cmp	r3, #0
 8008644:	d012      	beq.n	800866c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8008646:	f7fb fbd1 	bl	8003dec <HAL_GetTick>
 800864a:	4602      	mov	r2, r0
 800864c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864e:	1ad3      	subs	r3, r2, r3
 8008650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008654:	d102      	bne.n	800865c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008656:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800865a:	e061      	b.n	8008720 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008662:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8008666:	2b00      	cmp	r3, #0
 8008668:	d0cf      	beq.n	800860a <SD_FindSCR+0x96>
 800866a:	e000      	b.n	800866e <SD_FindSCR+0xfa>
      break;
 800866c:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008674:	f003 0308 	and.w	r3, r3, #8
 8008678:	2b00      	cmp	r3, #0
 800867a:	d106      	bne.n	800868a <SD_FindSCR+0x116>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008682:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008686:	2b00      	cmp	r3, #0
 8008688:	d005      	beq.n	8008696 <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2208      	movs	r2, #8
 8008690:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008692:	2308      	movs	r3, #8
 8008694:	e044      	b.n	8008720 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800869c:	f003 0302 	and.w	r3, r3, #2
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d005      	beq.n	80086b0 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2202      	movs	r2, #2
 80086aa:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80086ac:	2302      	movs	r3, #2
 80086ae:	e037      	b.n	8008720 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086b6:	f003 0320 	and.w	r3, r3, #32
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d005      	beq.n	80086ca <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2220      	movs	r2, #32
 80086c4:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80086c6:	2320      	movs	r3, #32
 80086c8:	e02a      	b.n	8008720 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f240 523a 	movw	r2, #1338	@ 0x53a
 80086d2:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	061a      	lsls	r2, r3, #24
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	021b      	lsls	r3, r3, #8
 80086dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80086e0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	0a1b      	lsrs	r3, r3, #8
 80086e6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80086ea:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	0e1b      	lsrs	r3, r3, #24
 80086f0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80086f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f4:	601a      	str	r2, [r3, #0]
    scr++;
 80086f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f8:	3304      	adds	r3, #4
 80086fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	061a      	lsls	r2, r3, #24
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	021b      	lsls	r3, r3, #8
 8008704:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008708:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	0a1b      	lsrs	r3, r3, #8
 800870e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008712:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	0e1b      	lsrs	r3, r3, #24
 8008718:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800871a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800871c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	373c      	adds	r7, #60	@ 0x3c
 8008724:	46bd      	mov	sp, r7
 8008726:	bd90      	pop	{r4, r7, pc}

08008728 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008734:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800873a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d03f      	beq.n	80087c2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008742:	2300      	movs	r3, #0
 8008744:	617b      	str	r3, [r7, #20]
 8008746:	e033      	b.n	80087b0 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4618      	mov	r0, r3
 800874e:	f001 fdd2 	bl	800a2f6 <SDIO_ReadFIFO>
 8008752:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	b2da      	uxtb	r2, r3
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	3301      	adds	r3, #1
 8008760:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	3b01      	subs	r3, #1
 8008766:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	0a1b      	lsrs	r3, r3, #8
 800876c:	b2da      	uxtb	r2, r3
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	3301      	adds	r3, #1
 8008776:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	3b01      	subs	r3, #1
 800877c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	0c1b      	lsrs	r3, r3, #16
 8008782:	b2da      	uxtb	r2, r3
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	3301      	adds	r3, #1
 800878c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	3b01      	subs	r3, #1
 8008792:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	0e1b      	lsrs	r3, r3, #24
 8008798:	b2da      	uxtb	r2, r3
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	3301      	adds	r3, #1
 80087a2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	3b01      	subs	r3, #1
 80087a8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	3301      	adds	r3, #1
 80087ae:	617b      	str	r3, [r7, #20]
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	2b07      	cmp	r3, #7
 80087b4:	d9c8      	bls.n	8008748 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	68fa      	ldr	r2, [r7, #12]
 80087ba:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	693a      	ldr	r2, [r7, #16]
 80087c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 80087c2:	bf00      	nop
 80087c4:	3718      	adds	r7, #24
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b086      	sub	sp, #24
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087dc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d043      	beq.n	800886c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80087e4:	2300      	movs	r3, #0
 80087e6:	617b      	str	r3, [r7, #20]
 80087e8:	e037      	b.n	800885a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	60bb      	str	r3, [r7, #8]
      tmp++;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	3301      	adds	r3, #1
 80087f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	3b01      	subs	r3, #1
 80087fa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	021a      	lsls	r2, r3, #8
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	4313      	orrs	r3, r2
 8008806:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	3301      	adds	r3, #1
 800880c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	3b01      	subs	r3, #1
 8008812:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	041a      	lsls	r2, r3, #16
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	4313      	orrs	r3, r2
 800881e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	3301      	adds	r3, #1
 8008824:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	3b01      	subs	r3, #1
 800882a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	061a      	lsls	r2, r3, #24
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	4313      	orrs	r3, r2
 8008836:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	3301      	adds	r3, #1
 800883c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	3b01      	subs	r3, #1
 8008842:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f107 0208 	add.w	r2, r7, #8
 800884c:	4611      	mov	r1, r2
 800884e:	4618      	mov	r0, r3
 8008850:	f001 fd5e 	bl	800a310 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	3301      	adds	r3, #1
 8008858:	617b      	str	r3, [r7, #20]
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	2b07      	cmp	r3, #7
 800885e:	d9c4      	bls.n	80087ea <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	693a      	ldr	r2, [r7, #16]
 800886a:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800886c:	bf00      	nop
 800886e:	3718      	adds	r7, #24
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d101      	bne.n	8008886 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	e041      	b.n	800890a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800888c:	b2db      	uxtb	r3, r3
 800888e:	2b00      	cmp	r3, #0
 8008890:	d106      	bne.n	80088a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f7fa ff9a 	bl	80037d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2202      	movs	r2, #2
 80088a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	3304      	adds	r3, #4
 80088b0:	4619      	mov	r1, r3
 80088b2:	4610      	mov	r0, r2
 80088b4:	f000 f9a0 	bl	8008bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	3708      	adds	r7, #8
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
	...

08008914 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d109      	bne.n	8008938 <HAL_TIM_PWM_Start+0x24>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800892a:	b2db      	uxtb	r3, r3
 800892c:	2b01      	cmp	r3, #1
 800892e:	bf14      	ite	ne
 8008930:	2301      	movne	r3, #1
 8008932:	2300      	moveq	r3, #0
 8008934:	b2db      	uxtb	r3, r3
 8008936:	e022      	b.n	800897e <HAL_TIM_PWM_Start+0x6a>
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	2b04      	cmp	r3, #4
 800893c:	d109      	bne.n	8008952 <HAL_TIM_PWM_Start+0x3e>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b01      	cmp	r3, #1
 8008948:	bf14      	ite	ne
 800894a:	2301      	movne	r3, #1
 800894c:	2300      	moveq	r3, #0
 800894e:	b2db      	uxtb	r3, r3
 8008950:	e015      	b.n	800897e <HAL_TIM_PWM_Start+0x6a>
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	2b08      	cmp	r3, #8
 8008956:	d109      	bne.n	800896c <HAL_TIM_PWM_Start+0x58>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b01      	cmp	r3, #1
 8008962:	bf14      	ite	ne
 8008964:	2301      	movne	r3, #1
 8008966:	2300      	moveq	r3, #0
 8008968:	b2db      	uxtb	r3, r3
 800896a:	e008      	b.n	800897e <HAL_TIM_PWM_Start+0x6a>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008972:	b2db      	uxtb	r3, r3
 8008974:	2b01      	cmp	r3, #1
 8008976:	bf14      	ite	ne
 8008978:	2301      	movne	r3, #1
 800897a:	2300      	moveq	r3, #0
 800897c:	b2db      	uxtb	r3, r3
 800897e:	2b00      	cmp	r3, #0
 8008980:	d001      	beq.n	8008986 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	e068      	b.n	8008a58 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d104      	bne.n	8008996 <HAL_TIM_PWM_Start+0x82>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2202      	movs	r2, #2
 8008990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008994:	e013      	b.n	80089be <HAL_TIM_PWM_Start+0xaa>
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	2b04      	cmp	r3, #4
 800899a:	d104      	bne.n	80089a6 <HAL_TIM_PWM_Start+0x92>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2202      	movs	r2, #2
 80089a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80089a4:	e00b      	b.n	80089be <HAL_TIM_PWM_Start+0xaa>
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	2b08      	cmp	r3, #8
 80089aa:	d104      	bne.n	80089b6 <HAL_TIM_PWM_Start+0xa2>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2202      	movs	r2, #2
 80089b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80089b4:	e003      	b.n	80089be <HAL_TIM_PWM_Start+0xaa>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2202      	movs	r2, #2
 80089ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2201      	movs	r2, #1
 80089c4:	6839      	ldr	r1, [r7, #0]
 80089c6:	4618      	mov	r0, r3
 80089c8:	f000 fb2e 	bl	8009028 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a23      	ldr	r2, [pc, #140]	@ (8008a60 <HAL_TIM_PWM_Start+0x14c>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d107      	bne.n	80089e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80089e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a1d      	ldr	r2, [pc, #116]	@ (8008a60 <HAL_TIM_PWM_Start+0x14c>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d018      	beq.n	8008a22 <HAL_TIM_PWM_Start+0x10e>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089f8:	d013      	beq.n	8008a22 <HAL_TIM_PWM_Start+0x10e>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a19      	ldr	r2, [pc, #100]	@ (8008a64 <HAL_TIM_PWM_Start+0x150>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d00e      	beq.n	8008a22 <HAL_TIM_PWM_Start+0x10e>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a17      	ldr	r2, [pc, #92]	@ (8008a68 <HAL_TIM_PWM_Start+0x154>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d009      	beq.n	8008a22 <HAL_TIM_PWM_Start+0x10e>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a16      	ldr	r2, [pc, #88]	@ (8008a6c <HAL_TIM_PWM_Start+0x158>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d004      	beq.n	8008a22 <HAL_TIM_PWM_Start+0x10e>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a14      	ldr	r2, [pc, #80]	@ (8008a70 <HAL_TIM_PWM_Start+0x15c>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d111      	bne.n	8008a46 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	f003 0307 	and.w	r3, r3, #7
 8008a2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2b06      	cmp	r3, #6
 8008a32:	d010      	beq.n	8008a56 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f042 0201 	orr.w	r2, r2, #1
 8008a42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a44:	e007      	b.n	8008a56 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f042 0201 	orr.w	r2, r2, #1
 8008a54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	40010000 	.word	0x40010000
 8008a64:	40000400 	.word	0x40000400
 8008a68:	40000800 	.word	0x40000800
 8008a6c:	40000c00 	.word	0x40000c00
 8008a70:	40014000 	.word	0x40014000

08008a74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b086      	sub	sp, #24
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a80:	2300      	movs	r3, #0
 8008a82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d101      	bne.n	8008a92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008a8e:	2302      	movs	r3, #2
 8008a90:	e0ae      	b.n	8008bf0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2201      	movs	r2, #1
 8008a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2b0c      	cmp	r3, #12
 8008a9e:	f200 809f 	bhi.w	8008be0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8008aa8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa8:	08008add 	.word	0x08008add
 8008aac:	08008be1 	.word	0x08008be1
 8008ab0:	08008be1 	.word	0x08008be1
 8008ab4:	08008be1 	.word	0x08008be1
 8008ab8:	08008b1d 	.word	0x08008b1d
 8008abc:	08008be1 	.word	0x08008be1
 8008ac0:	08008be1 	.word	0x08008be1
 8008ac4:	08008be1 	.word	0x08008be1
 8008ac8:	08008b5f 	.word	0x08008b5f
 8008acc:	08008be1 	.word	0x08008be1
 8008ad0:	08008be1 	.word	0x08008be1
 8008ad4:	08008be1 	.word	0x08008be1
 8008ad8:	08008b9f 	.word	0x08008b9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68b9      	ldr	r1, [r7, #8]
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f000 f914 	bl	8008d10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	699a      	ldr	r2, [r3, #24]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f042 0208 	orr.w	r2, r2, #8
 8008af6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	699a      	ldr	r2, [r3, #24]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f022 0204 	bic.w	r2, r2, #4
 8008b06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	6999      	ldr	r1, [r3, #24]
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	691a      	ldr	r2, [r3, #16]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	430a      	orrs	r2, r1
 8008b18:	619a      	str	r2, [r3, #24]
      break;
 8008b1a:	e064      	b.n	8008be6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68b9      	ldr	r1, [r7, #8]
 8008b22:	4618      	mov	r0, r3
 8008b24:	f000 f95a 	bl	8008ddc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	699a      	ldr	r2, [r3, #24]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	699a      	ldr	r2, [r3, #24]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	6999      	ldr	r1, [r3, #24]
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	021a      	lsls	r2, r3, #8
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	430a      	orrs	r2, r1
 8008b5a:	619a      	str	r2, [r3, #24]
      break;
 8008b5c:	e043      	b.n	8008be6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68b9      	ldr	r1, [r7, #8]
 8008b64:	4618      	mov	r0, r3
 8008b66:	f000 f9a5 	bl	8008eb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	69da      	ldr	r2, [r3, #28]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f042 0208 	orr.w	r2, r2, #8
 8008b78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	69da      	ldr	r2, [r3, #28]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f022 0204 	bic.w	r2, r2, #4
 8008b88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	69d9      	ldr	r1, [r3, #28]
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	691a      	ldr	r2, [r3, #16]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	430a      	orrs	r2, r1
 8008b9a:	61da      	str	r2, [r3, #28]
      break;
 8008b9c:	e023      	b.n	8008be6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68b9      	ldr	r1, [r7, #8]
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f000 f9ef 	bl	8008f88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	69da      	ldr	r2, [r3, #28]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	69da      	ldr	r2, [r3, #28]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	69d9      	ldr	r1, [r3, #28]
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	021a      	lsls	r2, r3, #8
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	430a      	orrs	r2, r1
 8008bdc:	61da      	str	r2, [r3, #28]
      break;
 8008bde:	e002      	b.n	8008be6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	75fb      	strb	r3, [r7, #23]
      break;
 8008be4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3718      	adds	r7, #24
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a3a      	ldr	r2, [pc, #232]	@ (8008cf4 <TIM_Base_SetConfig+0xfc>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d00f      	beq.n	8008c30 <TIM_Base_SetConfig+0x38>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c16:	d00b      	beq.n	8008c30 <TIM_Base_SetConfig+0x38>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a37      	ldr	r2, [pc, #220]	@ (8008cf8 <TIM_Base_SetConfig+0x100>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d007      	beq.n	8008c30 <TIM_Base_SetConfig+0x38>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a36      	ldr	r2, [pc, #216]	@ (8008cfc <TIM_Base_SetConfig+0x104>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d003      	beq.n	8008c30 <TIM_Base_SetConfig+0x38>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a35      	ldr	r2, [pc, #212]	@ (8008d00 <TIM_Base_SetConfig+0x108>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d108      	bne.n	8008c42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	68fa      	ldr	r2, [r7, #12]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a2b      	ldr	r2, [pc, #172]	@ (8008cf4 <TIM_Base_SetConfig+0xfc>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d01b      	beq.n	8008c82 <TIM_Base_SetConfig+0x8a>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c50:	d017      	beq.n	8008c82 <TIM_Base_SetConfig+0x8a>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4a28      	ldr	r2, [pc, #160]	@ (8008cf8 <TIM_Base_SetConfig+0x100>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d013      	beq.n	8008c82 <TIM_Base_SetConfig+0x8a>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4a27      	ldr	r2, [pc, #156]	@ (8008cfc <TIM_Base_SetConfig+0x104>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d00f      	beq.n	8008c82 <TIM_Base_SetConfig+0x8a>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a26      	ldr	r2, [pc, #152]	@ (8008d00 <TIM_Base_SetConfig+0x108>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d00b      	beq.n	8008c82 <TIM_Base_SetConfig+0x8a>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4a25      	ldr	r2, [pc, #148]	@ (8008d04 <TIM_Base_SetConfig+0x10c>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d007      	beq.n	8008c82 <TIM_Base_SetConfig+0x8a>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4a24      	ldr	r2, [pc, #144]	@ (8008d08 <TIM_Base_SetConfig+0x110>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d003      	beq.n	8008c82 <TIM_Base_SetConfig+0x8a>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4a23      	ldr	r2, [pc, #140]	@ (8008d0c <TIM_Base_SetConfig+0x114>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d108      	bne.n	8008c94 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	695b      	ldr	r3, [r3, #20]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	689a      	ldr	r2, [r3, #8]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a0e      	ldr	r2, [pc, #56]	@ (8008cf4 <TIM_Base_SetConfig+0xfc>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d103      	bne.n	8008cc8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	691a      	ldr	r2, [r3, #16]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	691b      	ldr	r3, [r3, #16]
 8008cd2:	f003 0301 	and.w	r3, r3, #1
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d105      	bne.n	8008ce6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	691b      	ldr	r3, [r3, #16]
 8008cde:	f023 0201 	bic.w	r2, r3, #1
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	611a      	str	r2, [r3, #16]
  }
}
 8008ce6:	bf00      	nop
 8008ce8:	3714      	adds	r7, #20
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	40010000 	.word	0x40010000
 8008cf8:	40000400 	.word	0x40000400
 8008cfc:	40000800 	.word	0x40000800
 8008d00:	40000c00 	.word	0x40000c00
 8008d04:	40014000 	.word	0x40014000
 8008d08:	40014400 	.word	0x40014400
 8008d0c:	40014800 	.word	0x40014800

08008d10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b087      	sub	sp, #28
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a1b      	ldr	r3, [r3, #32]
 8008d1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6a1b      	ldr	r3, [r3, #32]
 8008d24:	f023 0201 	bic.w	r2, r3, #1
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	699b      	ldr	r3, [r3, #24]
 8008d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f023 0303 	bic.w	r3, r3, #3
 8008d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	68fa      	ldr	r2, [r7, #12]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	f023 0302 	bic.w	r3, r3, #2
 8008d58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	697a      	ldr	r2, [r7, #20]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4a1c      	ldr	r2, [pc, #112]	@ (8008dd8 <TIM_OC1_SetConfig+0xc8>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d10c      	bne.n	8008d86 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	f023 0308 	bic.w	r3, r3, #8
 8008d72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	697a      	ldr	r2, [r7, #20]
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	f023 0304 	bic.w	r3, r3, #4
 8008d84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a13      	ldr	r2, [pc, #76]	@ (8008dd8 <TIM_OC1_SetConfig+0xc8>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d111      	bne.n	8008db2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	695b      	ldr	r3, [r3, #20]
 8008da2:	693a      	ldr	r2, [r7, #16]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	693a      	ldr	r2, [r7, #16]
 8008db6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	68fa      	ldr	r2, [r7, #12]
 8008dbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	685a      	ldr	r2, [r3, #4]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	697a      	ldr	r2, [r7, #20]
 8008dca:	621a      	str	r2, [r3, #32]
}
 8008dcc:	bf00      	nop
 8008dce:	371c      	adds	r7, #28
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr
 8008dd8:	40010000 	.word	0x40010000

08008ddc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b087      	sub	sp, #28
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a1b      	ldr	r3, [r3, #32]
 8008df0:	f023 0210 	bic.w	r2, r3, #16
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	021b      	lsls	r3, r3, #8
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	f023 0320 	bic.w	r3, r3, #32
 8008e26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	011b      	lsls	r3, r3, #4
 8008e2e:	697a      	ldr	r2, [r7, #20]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4a1e      	ldr	r2, [pc, #120]	@ (8008eb0 <TIM_OC2_SetConfig+0xd4>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d10d      	bne.n	8008e58 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	011b      	lsls	r3, r3, #4
 8008e4a:	697a      	ldr	r2, [r7, #20]
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a15      	ldr	r2, [pc, #84]	@ (8008eb0 <TIM_OC2_SetConfig+0xd4>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d113      	bne.n	8008e88 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	695b      	ldr	r3, [r3, #20]
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	693a      	ldr	r2, [r7, #16]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	693a      	ldr	r2, [r7, #16]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	693a      	ldr	r2, [r7, #16]
 8008e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	685a      	ldr	r2, [r3, #4]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	697a      	ldr	r2, [r7, #20]
 8008ea0:	621a      	str	r2, [r3, #32]
}
 8008ea2:	bf00      	nop
 8008ea4:	371c      	adds	r7, #28
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	40010000 	.word	0x40010000

08008eb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b087      	sub	sp, #28
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a1b      	ldr	r3, [r3, #32]
 8008ec2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6a1b      	ldr	r3, [r3, #32]
 8008ec8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	69db      	ldr	r3, [r3, #28]
 8008eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f023 0303 	bic.w	r3, r3, #3
 8008eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008efc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	021b      	lsls	r3, r3, #8
 8008f04:	697a      	ldr	r2, [r7, #20]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8008f84 <TIM_OC3_SetConfig+0xd0>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d10d      	bne.n	8008f2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	021b      	lsls	r3, r3, #8
 8008f20:	697a      	ldr	r2, [r7, #20]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008f2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4a14      	ldr	r2, [pc, #80]	@ (8008f84 <TIM_OC3_SetConfig+0xd0>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d113      	bne.n	8008f5e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008f44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	695b      	ldr	r3, [r3, #20]
 8008f4a:	011b      	lsls	r3, r3, #4
 8008f4c:	693a      	ldr	r2, [r7, #16]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	699b      	ldr	r3, [r3, #24]
 8008f56:	011b      	lsls	r3, r3, #4
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	693a      	ldr	r2, [r7, #16]
 8008f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	685a      	ldr	r2, [r3, #4]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	697a      	ldr	r2, [r7, #20]
 8008f76:	621a      	str	r2, [r3, #32]
}
 8008f78:	bf00      	nop
 8008f7a:	371c      	adds	r7, #28
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr
 8008f84:	40010000 	.word	0x40010000

08008f88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b087      	sub	sp, #28
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6a1b      	ldr	r3, [r3, #32]
 8008f96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a1b      	ldr	r3, [r3, #32]
 8008f9c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	69db      	ldr	r3, [r3, #28]
 8008fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	021b      	lsls	r3, r3, #8
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008fd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	031b      	lsls	r3, r3, #12
 8008fda:	693a      	ldr	r2, [r7, #16]
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4a10      	ldr	r2, [pc, #64]	@ (8009024 <TIM_OC4_SetConfig+0x9c>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d109      	bne.n	8008ffc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008fee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	695b      	ldr	r3, [r3, #20]
 8008ff4:	019b      	lsls	r3, r3, #6
 8008ff6:	697a      	ldr	r2, [r7, #20]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	697a      	ldr	r2, [r7, #20]
 8009000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	685a      	ldr	r2, [r3, #4]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	693a      	ldr	r2, [r7, #16]
 8009014:	621a      	str	r2, [r3, #32]
}
 8009016:	bf00      	nop
 8009018:	371c      	adds	r7, #28
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	40010000 	.word	0x40010000

08009028 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009028:	b480      	push	{r7}
 800902a:	b087      	sub	sp, #28
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	f003 031f 	and.w	r3, r3, #31
 800903a:	2201      	movs	r2, #1
 800903c:	fa02 f303 	lsl.w	r3, r2, r3
 8009040:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6a1a      	ldr	r2, [r3, #32]
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	43db      	mvns	r3, r3
 800904a:	401a      	ands	r2, r3
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6a1a      	ldr	r2, [r3, #32]
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	f003 031f 	and.w	r3, r3, #31
 800905a:	6879      	ldr	r1, [r7, #4]
 800905c:	fa01 f303 	lsl.w	r3, r1, r3
 8009060:	431a      	orrs	r2, r3
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	621a      	str	r2, [r3, #32]
}
 8009066:	bf00      	nop
 8009068:	371c      	adds	r7, #28
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
	...

08009074 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009074:	b480      	push	{r7}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009084:	2b01      	cmp	r3, #1
 8009086:	d101      	bne.n	800908c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009088:	2302      	movs	r3, #2
 800908a:	e050      	b.n	800912e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2202      	movs	r2, #2
 8009098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	68fa      	ldr	r2, [r7, #12]
 80090c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a1c      	ldr	r2, [pc, #112]	@ (800913c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d018      	beq.n	8009102 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090d8:	d013      	beq.n	8009102 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a18      	ldr	r2, [pc, #96]	@ (8009140 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d00e      	beq.n	8009102 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a16      	ldr	r2, [pc, #88]	@ (8009144 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d009      	beq.n	8009102 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a15      	ldr	r2, [pc, #84]	@ (8009148 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d004      	beq.n	8009102 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a13      	ldr	r2, [pc, #76]	@ (800914c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d10c      	bne.n	800911c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009108:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	68ba      	ldr	r2, [r7, #8]
 8009110:	4313      	orrs	r3, r2
 8009112:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68ba      	ldr	r2, [r7, #8]
 800911a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3714      	adds	r7, #20
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	40010000 	.word	0x40010000
 8009140:	40000400 	.word	0x40000400
 8009144:	40000800 	.word	0x40000800
 8009148:	40000c00 	.word	0x40000c00
 800914c:	40014000 	.word	0x40014000

08009150 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800915a:	2300      	movs	r3, #0
 800915c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009164:	2b01      	cmp	r3, #1
 8009166:	d101      	bne.n	800916c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009168:	2302      	movs	r3, #2
 800916a:	e03d      	b.n	80091e8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	68db      	ldr	r3, [r3, #12]
 800917e:	4313      	orrs	r3, r2
 8009180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	4313      	orrs	r3, r2
 800918e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	4313      	orrs	r3, r2
 800919c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4313      	orrs	r3, r2
 80091aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	4313      	orrs	r3, r2
 80091b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	695b      	ldr	r3, [r3, #20]
 80091c4:	4313      	orrs	r3, r2
 80091c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	69db      	ldr	r3, [r3, #28]
 80091d2:	4313      	orrs	r3, r2
 80091d4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3714      	adds	r7, #20
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d101      	bne.n	8009206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	e042      	b.n	800928c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800920c:	b2db      	uxtb	r3, r3
 800920e:	2b00      	cmp	r3, #0
 8009210:	d106      	bne.n	8009220 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f7fa fbac 	bl	8003978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2224      	movs	r2, #36	@ 0x24
 8009224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68da      	ldr	r2, [r3, #12]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009236:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 fdbd 	bl	8009db8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	691a      	ldr	r2, [r3, #16]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800924c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	695a      	ldr	r2, [r3, #20]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800925c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	68da      	ldr	r2, [r3, #12]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800926c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2220      	movs	r2, #32
 8009278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2220      	movs	r2, #32
 8009280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800928a:	2300      	movs	r3, #0
}
 800928c:	4618      	mov	r0, r3
 800928e:	3708      	adds	r7, #8
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b08a      	sub	sp, #40	@ 0x28
 8009298:	af02      	add	r7, sp, #8
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	603b      	str	r3, [r7, #0]
 80092a0:	4613      	mov	r3, r2
 80092a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80092a4:	2300      	movs	r3, #0
 80092a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	2b20      	cmp	r3, #32
 80092b2:	d175      	bne.n	80093a0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d002      	beq.n	80092c0 <HAL_UART_Transmit+0x2c>
 80092ba:	88fb      	ldrh	r3, [r7, #6]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d101      	bne.n	80092c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	e06e      	b.n	80093a2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2200      	movs	r2, #0
 80092c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2221      	movs	r2, #33	@ 0x21
 80092ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80092d2:	f7fa fd8b 	bl	8003dec <HAL_GetTick>
 80092d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	88fa      	ldrh	r2, [r7, #6]
 80092dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	88fa      	ldrh	r2, [r7, #6]
 80092e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092ec:	d108      	bne.n	8009300 <HAL_UART_Transmit+0x6c>
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d104      	bne.n	8009300 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80092f6:	2300      	movs	r3, #0
 80092f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	61bb      	str	r3, [r7, #24]
 80092fe:	e003      	b.n	8009308 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009304:	2300      	movs	r3, #0
 8009306:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009308:	e02e      	b.n	8009368 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	9300      	str	r3, [sp, #0]
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	2200      	movs	r2, #0
 8009312:	2180      	movs	r1, #128	@ 0x80
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f000 fb1f 	bl	8009958 <UART_WaitOnFlagUntilTimeout>
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d005      	beq.n	800932c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2220      	movs	r2, #32
 8009324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009328:	2303      	movs	r3, #3
 800932a:	e03a      	b.n	80093a2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d10b      	bne.n	800934a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	881b      	ldrh	r3, [r3, #0]
 8009336:	461a      	mov	r2, r3
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009340:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	3302      	adds	r3, #2
 8009346:	61bb      	str	r3, [r7, #24]
 8009348:	e007      	b.n	800935a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	781a      	ldrb	r2, [r3, #0]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	3301      	adds	r3, #1
 8009358:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800935e:	b29b      	uxth	r3, r3
 8009360:	3b01      	subs	r3, #1
 8009362:	b29a      	uxth	r2, r3
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800936c:	b29b      	uxth	r3, r3
 800936e:	2b00      	cmp	r3, #0
 8009370:	d1cb      	bne.n	800930a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	2200      	movs	r2, #0
 800937a:	2140      	movs	r1, #64	@ 0x40
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f000 faeb 	bl	8009958 <UART_WaitOnFlagUntilTimeout>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d005      	beq.n	8009394 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2220      	movs	r2, #32
 800938c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009390:	2303      	movs	r3, #3
 8009392:	e006      	b.n	80093a2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2220      	movs	r2, #32
 8009398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800939c:	2300      	movs	r3, #0
 800939e:	e000      	b.n	80093a2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80093a0:	2302      	movs	r3, #2
  }
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3720      	adds	r7, #32
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b084      	sub	sp, #16
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	60f8      	str	r0, [r7, #12]
 80093b2:	60b9      	str	r1, [r7, #8]
 80093b4:	4613      	mov	r3, r2
 80093b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b20      	cmp	r3, #32
 80093c2:	d112      	bne.n	80093ea <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d002      	beq.n	80093d0 <HAL_UART_Receive_IT+0x26>
 80093ca:	88fb      	ldrh	r3, [r7, #6]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d101      	bne.n	80093d4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80093d0:	2301      	movs	r3, #1
 80093d2:	e00b      	b.n	80093ec <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2200      	movs	r2, #0
 80093d8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80093da:	88fb      	ldrh	r3, [r7, #6]
 80093dc:	461a      	mov	r2, r3
 80093de:	68b9      	ldr	r1, [r7, #8]
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f000 fb12 	bl	8009a0a <UART_Start_Receive_IT>
 80093e6:	4603      	mov	r3, r0
 80093e8:	e000      	b.n	80093ec <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80093ea:	2302      	movs	r3, #2
  }
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b0ba      	sub	sp, #232	@ 0xe8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	695b      	ldr	r3, [r3, #20]
 8009416:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800941a:	2300      	movs	r3, #0
 800941c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009420:	2300      	movs	r3, #0
 8009422:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800942a:	f003 030f 	and.w	r3, r3, #15
 800942e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009432:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009436:	2b00      	cmp	r3, #0
 8009438:	d10f      	bne.n	800945a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800943a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800943e:	f003 0320 	and.w	r3, r3, #32
 8009442:	2b00      	cmp	r3, #0
 8009444:	d009      	beq.n	800945a <HAL_UART_IRQHandler+0x66>
 8009446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800944a:	f003 0320 	and.w	r3, r3, #32
 800944e:	2b00      	cmp	r3, #0
 8009450:	d003      	beq.n	800945a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 fbf2 	bl	8009c3c <UART_Receive_IT>
      return;
 8009458:	e25b      	b.n	8009912 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800945a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800945e:	2b00      	cmp	r3, #0
 8009460:	f000 80de 	beq.w	8009620 <HAL_UART_IRQHandler+0x22c>
 8009464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009468:	f003 0301 	and.w	r3, r3, #1
 800946c:	2b00      	cmp	r3, #0
 800946e:	d106      	bne.n	800947e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009474:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009478:	2b00      	cmp	r3, #0
 800947a:	f000 80d1 	beq.w	8009620 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800947e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009482:	f003 0301 	and.w	r3, r3, #1
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00b      	beq.n	80094a2 <HAL_UART_IRQHandler+0xae>
 800948a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800948e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009492:	2b00      	cmp	r3, #0
 8009494:	d005      	beq.n	80094a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800949a:	f043 0201 	orr.w	r2, r3, #1
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80094a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094a6:	f003 0304 	and.w	r3, r3, #4
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00b      	beq.n	80094c6 <HAL_UART_IRQHandler+0xd2>
 80094ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094b2:	f003 0301 	and.w	r3, r3, #1
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d005      	beq.n	80094c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094be:	f043 0202 	orr.w	r2, r3, #2
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80094c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094ca:	f003 0302 	and.w	r3, r3, #2
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00b      	beq.n	80094ea <HAL_UART_IRQHandler+0xf6>
 80094d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094d6:	f003 0301 	and.w	r3, r3, #1
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d005      	beq.n	80094ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094e2:	f043 0204 	orr.w	r2, r3, #4
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80094ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094ee:	f003 0308 	and.w	r3, r3, #8
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d011      	beq.n	800951a <HAL_UART_IRQHandler+0x126>
 80094f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094fa:	f003 0320 	and.w	r3, r3, #32
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d105      	bne.n	800950e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009506:	f003 0301 	and.w	r3, r3, #1
 800950a:	2b00      	cmp	r3, #0
 800950c:	d005      	beq.n	800951a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009512:	f043 0208 	orr.w	r2, r3, #8
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800951e:	2b00      	cmp	r3, #0
 8009520:	f000 81f2 	beq.w	8009908 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009528:	f003 0320 	and.w	r3, r3, #32
 800952c:	2b00      	cmp	r3, #0
 800952e:	d008      	beq.n	8009542 <HAL_UART_IRQHandler+0x14e>
 8009530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009534:	f003 0320 	and.w	r3, r3, #32
 8009538:	2b00      	cmp	r3, #0
 800953a:	d002      	beq.n	8009542 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 fb7d 	bl	8009c3c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	695b      	ldr	r3, [r3, #20]
 8009548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800954c:	2b40      	cmp	r3, #64	@ 0x40
 800954e:	bf0c      	ite	eq
 8009550:	2301      	moveq	r3, #1
 8009552:	2300      	movne	r3, #0
 8009554:	b2db      	uxtb	r3, r3
 8009556:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800955e:	f003 0308 	and.w	r3, r3, #8
 8009562:	2b00      	cmp	r3, #0
 8009564:	d103      	bne.n	800956e <HAL_UART_IRQHandler+0x17a>
 8009566:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800956a:	2b00      	cmp	r3, #0
 800956c:	d04f      	beq.n	800960e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 fa85 	bl	8009a7e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	695b      	ldr	r3, [r3, #20]
 800957a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800957e:	2b40      	cmp	r3, #64	@ 0x40
 8009580:	d141      	bne.n	8009606 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	3314      	adds	r3, #20
 8009588:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009590:	e853 3f00 	ldrex	r3, [r3]
 8009594:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009598:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800959c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	3314      	adds	r3, #20
 80095aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80095ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80095b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80095ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80095be:	e841 2300 	strex	r3, r2, [r1]
 80095c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80095c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1d9      	bne.n	8009582 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d013      	beq.n	80095fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095da:	4a7e      	ldr	r2, [pc, #504]	@ (80097d4 <HAL_UART_IRQHandler+0x3e0>)
 80095dc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7fb faac 	bl	8004b40 <HAL_DMA_Abort_IT>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d016      	beq.n	800961c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80095f8:	4610      	mov	r0, r2
 80095fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095fc:	e00e      	b.n	800961c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 f994 	bl	800992c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009604:	e00a      	b.n	800961c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 f990 	bl	800992c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800960c:	e006      	b.n	800961c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 f98c 	bl	800992c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2200      	movs	r2, #0
 8009618:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800961a:	e175      	b.n	8009908 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800961c:	bf00      	nop
    return;
 800961e:	e173      	b.n	8009908 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009624:	2b01      	cmp	r3, #1
 8009626:	f040 814f 	bne.w	80098c8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800962a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800962e:	f003 0310 	and.w	r3, r3, #16
 8009632:	2b00      	cmp	r3, #0
 8009634:	f000 8148 	beq.w	80098c8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800963c:	f003 0310 	and.w	r3, r3, #16
 8009640:	2b00      	cmp	r3, #0
 8009642:	f000 8141 	beq.w	80098c8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009646:	2300      	movs	r3, #0
 8009648:	60bb      	str	r3, [r7, #8]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	60bb      	str	r3, [r7, #8]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	60bb      	str	r3, [r7, #8]
 800965a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	695b      	ldr	r3, [r3, #20]
 8009662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009666:	2b40      	cmp	r3, #64	@ 0x40
 8009668:	f040 80b6 	bne.w	80097d8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009678:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800967c:	2b00      	cmp	r3, #0
 800967e:	f000 8145 	beq.w	800990c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009686:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800968a:	429a      	cmp	r2, r3
 800968c:	f080 813e 	bcs.w	800990c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009696:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800969c:	69db      	ldr	r3, [r3, #28]
 800969e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096a2:	f000 8088 	beq.w	80097b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	330c      	adds	r3, #12
 80096ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80096b4:	e853 3f00 	ldrex	r3, [r3]
 80096b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80096bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80096c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	330c      	adds	r3, #12
 80096ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80096d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80096d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80096de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80096e2:	e841 2300 	strex	r3, r2, [r1]
 80096e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80096ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d1d9      	bne.n	80096a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	3314      	adds	r3, #20
 80096f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80096fc:	e853 3f00 	ldrex	r3, [r3]
 8009700:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009702:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009704:	f023 0301 	bic.w	r3, r3, #1
 8009708:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	3314      	adds	r3, #20
 8009712:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009716:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800971a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800971e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009722:	e841 2300 	strex	r3, r2, [r1]
 8009726:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009728:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800972a:	2b00      	cmp	r3, #0
 800972c:	d1e1      	bne.n	80096f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	3314      	adds	r3, #20
 8009734:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009736:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009738:	e853 3f00 	ldrex	r3, [r3]
 800973c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800973e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009740:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009744:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	3314      	adds	r3, #20
 800974e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009752:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009754:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009756:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009758:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800975a:	e841 2300 	strex	r3, r2, [r1]
 800975e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009760:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009762:	2b00      	cmp	r3, #0
 8009764:	d1e3      	bne.n	800972e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2220      	movs	r2, #32
 800976a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	330c      	adds	r3, #12
 800977a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800977e:	e853 3f00 	ldrex	r3, [r3]
 8009782:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009786:	f023 0310 	bic.w	r3, r3, #16
 800978a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	330c      	adds	r3, #12
 8009794:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009798:	65ba      	str	r2, [r7, #88]	@ 0x58
 800979a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800979e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80097a0:	e841 2300 	strex	r3, r2, [r1]
 80097a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80097a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d1e3      	bne.n	8009774 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7fb f955 	bl	8004a60 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2202      	movs	r2, #2
 80097ba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	4619      	mov	r1, r3
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 f8b7 	bl	8009940 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80097d2:	e09b      	b.n	800990c <HAL_UART_IRQHandler+0x518>
 80097d4:	08009b45 	.word	0x08009b45
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	1ad3      	subs	r3, r2, r3
 80097e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f000 808e 	beq.w	8009910 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80097f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f000 8089 	beq.w	8009910 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	330c      	adds	r3, #12
 8009804:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009808:	e853 3f00 	ldrex	r3, [r3]
 800980c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800980e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009810:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009814:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	330c      	adds	r3, #12
 800981e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009822:	647a      	str	r2, [r7, #68]	@ 0x44
 8009824:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009826:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009828:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800982a:	e841 2300 	strex	r3, r2, [r1]
 800982e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1e3      	bne.n	80097fe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	3314      	adds	r3, #20
 800983c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800983e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009840:	e853 3f00 	ldrex	r3, [r3]
 8009844:	623b      	str	r3, [r7, #32]
   return(result);
 8009846:	6a3b      	ldr	r3, [r7, #32]
 8009848:	f023 0301 	bic.w	r3, r3, #1
 800984c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	3314      	adds	r3, #20
 8009856:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800985a:	633a      	str	r2, [r7, #48]	@ 0x30
 800985c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009860:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009862:	e841 2300 	strex	r3, r2, [r1]
 8009866:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1e3      	bne.n	8009836 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2220      	movs	r2, #32
 8009872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	330c      	adds	r3, #12
 8009882:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	e853 3f00 	ldrex	r3, [r3]
 800988a:	60fb      	str	r3, [r7, #12]
   return(result);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f023 0310 	bic.w	r3, r3, #16
 8009892:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	330c      	adds	r3, #12
 800989c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80098a0:	61fa      	str	r2, [r7, #28]
 80098a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a4:	69b9      	ldr	r1, [r7, #24]
 80098a6:	69fa      	ldr	r2, [r7, #28]
 80098a8:	e841 2300 	strex	r3, r2, [r1]
 80098ac:	617b      	str	r3, [r7, #20]
   return(result);
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d1e3      	bne.n	800987c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2202      	movs	r2, #2
 80098b8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80098ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80098be:	4619      	mov	r1, r3
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 f83d 	bl	8009940 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80098c6:	e023      	b.n	8009910 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80098c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d009      	beq.n	80098e8 <HAL_UART_IRQHandler+0x4f4>
 80098d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d003      	beq.n	80098e8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 f943 	bl	8009b6c <UART_Transmit_IT>
    return;
 80098e6:	e014      	b.n	8009912 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80098e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00e      	beq.n	8009912 <HAL_UART_IRQHandler+0x51e>
 80098f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d008      	beq.n	8009912 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 f983 	bl	8009c0c <UART_EndTransmit_IT>
    return;
 8009906:	e004      	b.n	8009912 <HAL_UART_IRQHandler+0x51e>
    return;
 8009908:	bf00      	nop
 800990a:	e002      	b.n	8009912 <HAL_UART_IRQHandler+0x51e>
      return;
 800990c:	bf00      	nop
 800990e:	e000      	b.n	8009912 <HAL_UART_IRQHandler+0x51e>
      return;
 8009910:	bf00      	nop
  }
}
 8009912:	37e8      	adds	r7, #232	@ 0xe8
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009920:	bf00      	nop
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009934:	bf00      	nop
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	460b      	mov	r3, r1
 800994a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800994c:	bf00      	nop
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b086      	sub	sp, #24
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	603b      	str	r3, [r7, #0]
 8009964:	4613      	mov	r3, r2
 8009966:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009968:	e03b      	b.n	80099e2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800996a:	6a3b      	ldr	r3, [r7, #32]
 800996c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009970:	d037      	beq.n	80099e2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009972:	f7fa fa3b 	bl	8003dec <HAL_GetTick>
 8009976:	4602      	mov	r2, r0
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	1ad3      	subs	r3, r2, r3
 800997c:	6a3a      	ldr	r2, [r7, #32]
 800997e:	429a      	cmp	r2, r3
 8009980:	d302      	bcc.n	8009988 <UART_WaitOnFlagUntilTimeout+0x30>
 8009982:	6a3b      	ldr	r3, [r7, #32]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d101      	bne.n	800998c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009988:	2303      	movs	r3, #3
 800998a:	e03a      	b.n	8009a02 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	f003 0304 	and.w	r3, r3, #4
 8009996:	2b00      	cmp	r3, #0
 8009998:	d023      	beq.n	80099e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	2b80      	cmp	r3, #128	@ 0x80
 800999e:	d020      	beq.n	80099e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	2b40      	cmp	r3, #64	@ 0x40
 80099a4:	d01d      	beq.n	80099e2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f003 0308 	and.w	r3, r3, #8
 80099b0:	2b08      	cmp	r3, #8
 80099b2:	d116      	bne.n	80099e2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80099b4:	2300      	movs	r3, #0
 80099b6:	617b      	str	r3, [r7, #20]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	617b      	str	r3, [r7, #20]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	617b      	str	r3, [r7, #20]
 80099c8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80099ca:	68f8      	ldr	r0, [r7, #12]
 80099cc:	f000 f857 	bl	8009a7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2208      	movs	r2, #8
 80099d4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2200      	movs	r2, #0
 80099da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	e00f      	b.n	8009a02 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	4013      	ands	r3, r2
 80099ec:	68ba      	ldr	r2, [r7, #8]
 80099ee:	429a      	cmp	r2, r3
 80099f0:	bf0c      	ite	eq
 80099f2:	2301      	moveq	r3, #1
 80099f4:	2300      	movne	r3, #0
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	461a      	mov	r2, r3
 80099fa:	79fb      	ldrb	r3, [r7, #7]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d0b4      	beq.n	800996a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3718      	adds	r7, #24
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a0a:	b480      	push	{r7}
 8009a0c:	b085      	sub	sp, #20
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	60f8      	str	r0, [r7, #12]
 8009a12:	60b9      	str	r1, [r7, #8]
 8009a14:	4613      	mov	r3, r2
 8009a16:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	88fa      	ldrh	r2, [r7, #6]
 8009a22:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	88fa      	ldrh	r2, [r7, #6]
 8009a28:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2222      	movs	r2, #34	@ 0x22
 8009a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d007      	beq.n	8009a50 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	68da      	ldr	r2, [r3, #12]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009a4e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	695a      	ldr	r2, [r3, #20]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f042 0201 	orr.w	r2, r2, #1
 8009a5e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68da      	ldr	r2, [r3, #12]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f042 0220 	orr.w	r2, r2, #32
 8009a6e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3714      	adds	r7, #20
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr

08009a7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a7e:	b480      	push	{r7}
 8009a80:	b095      	sub	sp, #84	@ 0x54
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	330c      	adds	r3, #12
 8009a8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a90:	e853 3f00 	ldrex	r3, [r3]
 8009a94:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	330c      	adds	r3, #12
 8009aa4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009aa6:	643a      	str	r2, [r7, #64]	@ 0x40
 8009aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aaa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009aac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009aae:	e841 2300 	strex	r3, r2, [r1]
 8009ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1e5      	bne.n	8009a86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	3314      	adds	r3, #20
 8009ac0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac2:	6a3b      	ldr	r3, [r7, #32]
 8009ac4:	e853 3f00 	ldrex	r3, [r3]
 8009ac8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009aca:	69fb      	ldr	r3, [r7, #28]
 8009acc:	f023 0301 	bic.w	r3, r3, #1
 8009ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	3314      	adds	r3, #20
 8009ad8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ada:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009adc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ade:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ae0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ae2:	e841 2300 	strex	r3, r2, [r1]
 8009ae6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1e5      	bne.n	8009aba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d119      	bne.n	8009b2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	330c      	adds	r3, #12
 8009afc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	e853 3f00 	ldrex	r3, [r3]
 8009b04:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	f023 0310 	bic.w	r3, r3, #16
 8009b0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	330c      	adds	r3, #12
 8009b14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b16:	61ba      	str	r2, [r7, #24]
 8009b18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1a:	6979      	ldr	r1, [r7, #20]
 8009b1c:	69ba      	ldr	r2, [r7, #24]
 8009b1e:	e841 2300 	strex	r3, r2, [r1]
 8009b22:	613b      	str	r3, [r7, #16]
   return(result);
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d1e5      	bne.n	8009af6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2220      	movs	r2, #32
 8009b2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009b38:	bf00      	nop
 8009b3a:	3754      	adds	r7, #84	@ 0x54
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2200      	movs	r2, #0
 8009b56:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b5e:	68f8      	ldr	r0, [r7, #12]
 8009b60:	f7ff fee4 	bl	800992c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b64:	bf00      	nop
 8009b66:	3710      	adds	r7, #16
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b085      	sub	sp, #20
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	2b21      	cmp	r3, #33	@ 0x21
 8009b7e:	d13e      	bne.n	8009bfe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b88:	d114      	bne.n	8009bb4 <UART_Transmit_IT+0x48>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d110      	bne.n	8009bb4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6a1b      	ldr	r3, [r3, #32]
 8009b96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	881b      	ldrh	r3, [r3, #0]
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ba6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6a1b      	ldr	r3, [r3, #32]
 8009bac:	1c9a      	adds	r2, r3, #2
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	621a      	str	r2, [r3, #32]
 8009bb2:	e008      	b.n	8009bc6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6a1b      	ldr	r3, [r3, #32]
 8009bb8:	1c59      	adds	r1, r3, #1
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	6211      	str	r1, [r2, #32]
 8009bbe:	781a      	ldrb	r2, [r3, #0]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d10f      	bne.n	8009bfa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68da      	ldr	r2, [r3, #12]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009be8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	68da      	ldr	r2, [r3, #12]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009bf8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	e000      	b.n	8009c00 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009bfe:	2302      	movs	r3, #2
  }
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3714      	adds	r7, #20
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b082      	sub	sp, #8
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	68da      	ldr	r2, [r3, #12]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c22:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2220      	movs	r2, #32
 8009c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f7ff fe73 	bl	8009918 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009c32:	2300      	movs	r3, #0
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3708      	adds	r7, #8
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b08c      	sub	sp, #48	@ 0x30
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	2b22      	cmp	r3, #34	@ 0x22
 8009c4e:	f040 80ae 	bne.w	8009dae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c5a:	d117      	bne.n	8009c8c <UART_Receive_IT+0x50>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	691b      	ldr	r3, [r3, #16]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d113      	bne.n	8009c8c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009c64:	2300      	movs	r3, #0
 8009c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c7a:	b29a      	uxth	r2, r3
 8009c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c7e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c84:	1c9a      	adds	r2, r3, #2
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	629a      	str	r2, [r3, #40]	@ 0x28
 8009c8a:	e026      	b.n	8009cda <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009c92:	2300      	movs	r3, #0
 8009c94:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	689b      	ldr	r3, [r3, #8]
 8009c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c9e:	d007      	beq.n	8009cb0 <UART_Receive_IT+0x74>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d10a      	bne.n	8009cbe <UART_Receive_IT+0x82>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d106      	bne.n	8009cbe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	b2da      	uxtb	r2, r3
 8009cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cba:	701a      	strb	r2, [r3, #0]
 8009cbc:	e008      	b.n	8009cd0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cca:	b2da      	uxtb	r2, r3
 8009ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cd4:	1c5a      	adds	r2, r3, #1
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	3b01      	subs	r3, #1
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d15d      	bne.n	8009daa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	68da      	ldr	r2, [r3, #12]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f022 0220 	bic.w	r2, r2, #32
 8009cfc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	68da      	ldr	r2, [r3, #12]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009d0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	695a      	ldr	r2, [r3, #20]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f022 0201 	bic.w	r2, r2, #1
 8009d1c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2220      	movs	r2, #32
 8009d22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d135      	bne.n	8009da0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	330c      	adds	r3, #12
 8009d40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	e853 3f00 	ldrex	r3, [r3]
 8009d48:	613b      	str	r3, [r7, #16]
   return(result);
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	f023 0310 	bic.w	r3, r3, #16
 8009d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	330c      	adds	r3, #12
 8009d58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d5a:	623a      	str	r2, [r7, #32]
 8009d5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5e:	69f9      	ldr	r1, [r7, #28]
 8009d60:	6a3a      	ldr	r2, [r7, #32]
 8009d62:	e841 2300 	strex	r3, r2, [r1]
 8009d66:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d1e5      	bne.n	8009d3a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f003 0310 	and.w	r3, r3, #16
 8009d78:	2b10      	cmp	r3, #16
 8009d7a:	d10a      	bne.n	8009d92 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	60fb      	str	r3, [r7, #12]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	60fb      	str	r3, [r7, #12]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	60fb      	str	r3, [r7, #12]
 8009d90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009d96:	4619      	mov	r1, r3
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f7ff fdd1 	bl	8009940 <HAL_UARTEx_RxEventCallback>
 8009d9e:	e002      	b.n	8009da6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f7f7 fe0b 	bl	80019bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009da6:	2300      	movs	r3, #0
 8009da8:	e002      	b.n	8009db0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009daa:	2300      	movs	r3, #0
 8009dac:	e000      	b.n	8009db0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009dae:	2302      	movs	r3, #2
  }
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3730      	adds	r7, #48	@ 0x30
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009dbc:	b0c0      	sub	sp, #256	@ 0x100
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dd4:	68d9      	ldr	r1, [r3, #12]
 8009dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	ea40 0301 	orr.w	r3, r0, r1
 8009de0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009de6:	689a      	ldr	r2, [r3, #8]
 8009de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dec:	691b      	ldr	r3, [r3, #16]
 8009dee:	431a      	orrs	r2, r3
 8009df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009df4:	695b      	ldr	r3, [r3, #20]
 8009df6:	431a      	orrs	r2, r3
 8009df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dfc:	69db      	ldr	r3, [r3, #28]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009e10:	f021 010c 	bic.w	r1, r1, #12
 8009e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009e1e:	430b      	orrs	r3, r1
 8009e20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	695b      	ldr	r3, [r3, #20]
 8009e2a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e32:	6999      	ldr	r1, [r3, #24]
 8009e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	ea40 0301 	orr.w	r3, r0, r1
 8009e3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	4b8f      	ldr	r3, [pc, #572]	@ (800a084 <UART_SetConfig+0x2cc>)
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d005      	beq.n	8009e58 <UART_SetConfig+0xa0>
 8009e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	4b8d      	ldr	r3, [pc, #564]	@ (800a088 <UART_SetConfig+0x2d0>)
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d104      	bne.n	8009e62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009e58:	f7fd f9be 	bl	80071d8 <HAL_RCC_GetPCLK2Freq>
 8009e5c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009e60:	e003      	b.n	8009e6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009e62:	f7fd f9a5 	bl	80071b0 <HAL_RCC_GetPCLK1Freq>
 8009e66:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e6e:	69db      	ldr	r3, [r3, #28]
 8009e70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e74:	f040 810c 	bne.w	800a090 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009e78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009e82:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009e86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009e8a:	4622      	mov	r2, r4
 8009e8c:	462b      	mov	r3, r5
 8009e8e:	1891      	adds	r1, r2, r2
 8009e90:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009e92:	415b      	adcs	r3, r3
 8009e94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009e9a:	4621      	mov	r1, r4
 8009e9c:	eb12 0801 	adds.w	r8, r2, r1
 8009ea0:	4629      	mov	r1, r5
 8009ea2:	eb43 0901 	adc.w	r9, r3, r1
 8009ea6:	f04f 0200 	mov.w	r2, #0
 8009eaa:	f04f 0300 	mov.w	r3, #0
 8009eae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009eb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009eb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009eba:	4690      	mov	r8, r2
 8009ebc:	4699      	mov	r9, r3
 8009ebe:	4623      	mov	r3, r4
 8009ec0:	eb18 0303 	adds.w	r3, r8, r3
 8009ec4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009ec8:	462b      	mov	r3, r5
 8009eca:	eb49 0303 	adc.w	r3, r9, r3
 8009ece:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009ede:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009ee2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	18db      	adds	r3, r3, r3
 8009eea:	653b      	str	r3, [r7, #80]	@ 0x50
 8009eec:	4613      	mov	r3, r2
 8009eee:	eb42 0303 	adc.w	r3, r2, r3
 8009ef2:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ef4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009ef8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009efc:	f7f6 fecc 	bl	8000c98 <__aeabi_uldivmod>
 8009f00:	4602      	mov	r2, r0
 8009f02:	460b      	mov	r3, r1
 8009f04:	4b61      	ldr	r3, [pc, #388]	@ (800a08c <UART_SetConfig+0x2d4>)
 8009f06:	fba3 2302 	umull	r2, r3, r3, r2
 8009f0a:	095b      	lsrs	r3, r3, #5
 8009f0c:	011c      	lsls	r4, r3, #4
 8009f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f12:	2200      	movs	r2, #0
 8009f14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009f18:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009f1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009f20:	4642      	mov	r2, r8
 8009f22:	464b      	mov	r3, r9
 8009f24:	1891      	adds	r1, r2, r2
 8009f26:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009f28:	415b      	adcs	r3, r3
 8009f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009f30:	4641      	mov	r1, r8
 8009f32:	eb12 0a01 	adds.w	sl, r2, r1
 8009f36:	4649      	mov	r1, r9
 8009f38:	eb43 0b01 	adc.w	fp, r3, r1
 8009f3c:	f04f 0200 	mov.w	r2, #0
 8009f40:	f04f 0300 	mov.w	r3, #0
 8009f44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009f48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009f4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f50:	4692      	mov	sl, r2
 8009f52:	469b      	mov	fp, r3
 8009f54:	4643      	mov	r3, r8
 8009f56:	eb1a 0303 	adds.w	r3, sl, r3
 8009f5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009f5e:	464b      	mov	r3, r9
 8009f60:	eb4b 0303 	adc.w	r3, fp, r3
 8009f64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009f74:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009f78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	18db      	adds	r3, r3, r3
 8009f80:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f82:	4613      	mov	r3, r2
 8009f84:	eb42 0303 	adc.w	r3, r2, r3
 8009f88:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009f8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009f92:	f7f6 fe81 	bl	8000c98 <__aeabi_uldivmod>
 8009f96:	4602      	mov	r2, r0
 8009f98:	460b      	mov	r3, r1
 8009f9a:	4611      	mov	r1, r2
 8009f9c:	4b3b      	ldr	r3, [pc, #236]	@ (800a08c <UART_SetConfig+0x2d4>)
 8009f9e:	fba3 2301 	umull	r2, r3, r3, r1
 8009fa2:	095b      	lsrs	r3, r3, #5
 8009fa4:	2264      	movs	r2, #100	@ 0x64
 8009fa6:	fb02 f303 	mul.w	r3, r2, r3
 8009faa:	1acb      	subs	r3, r1, r3
 8009fac:	00db      	lsls	r3, r3, #3
 8009fae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009fb2:	4b36      	ldr	r3, [pc, #216]	@ (800a08c <UART_SetConfig+0x2d4>)
 8009fb4:	fba3 2302 	umull	r2, r3, r3, r2
 8009fb8:	095b      	lsrs	r3, r3, #5
 8009fba:	005b      	lsls	r3, r3, #1
 8009fbc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009fc0:	441c      	add	r4, r3
 8009fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009fcc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009fd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009fd4:	4642      	mov	r2, r8
 8009fd6:	464b      	mov	r3, r9
 8009fd8:	1891      	adds	r1, r2, r2
 8009fda:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009fdc:	415b      	adcs	r3, r3
 8009fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fe0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009fe4:	4641      	mov	r1, r8
 8009fe6:	1851      	adds	r1, r2, r1
 8009fe8:	6339      	str	r1, [r7, #48]	@ 0x30
 8009fea:	4649      	mov	r1, r9
 8009fec:	414b      	adcs	r3, r1
 8009fee:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ff0:	f04f 0200 	mov.w	r2, #0
 8009ff4:	f04f 0300 	mov.w	r3, #0
 8009ff8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009ffc:	4659      	mov	r1, fp
 8009ffe:	00cb      	lsls	r3, r1, #3
 800a000:	4651      	mov	r1, sl
 800a002:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a006:	4651      	mov	r1, sl
 800a008:	00ca      	lsls	r2, r1, #3
 800a00a:	4610      	mov	r0, r2
 800a00c:	4619      	mov	r1, r3
 800a00e:	4603      	mov	r3, r0
 800a010:	4642      	mov	r2, r8
 800a012:	189b      	adds	r3, r3, r2
 800a014:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a018:	464b      	mov	r3, r9
 800a01a:	460a      	mov	r2, r1
 800a01c:	eb42 0303 	adc.w	r3, r2, r3
 800a020:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a030:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a034:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a038:	460b      	mov	r3, r1
 800a03a:	18db      	adds	r3, r3, r3
 800a03c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a03e:	4613      	mov	r3, r2
 800a040:	eb42 0303 	adc.w	r3, r2, r3
 800a044:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a046:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a04a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a04e:	f7f6 fe23 	bl	8000c98 <__aeabi_uldivmod>
 800a052:	4602      	mov	r2, r0
 800a054:	460b      	mov	r3, r1
 800a056:	4b0d      	ldr	r3, [pc, #52]	@ (800a08c <UART_SetConfig+0x2d4>)
 800a058:	fba3 1302 	umull	r1, r3, r3, r2
 800a05c:	095b      	lsrs	r3, r3, #5
 800a05e:	2164      	movs	r1, #100	@ 0x64
 800a060:	fb01 f303 	mul.w	r3, r1, r3
 800a064:	1ad3      	subs	r3, r2, r3
 800a066:	00db      	lsls	r3, r3, #3
 800a068:	3332      	adds	r3, #50	@ 0x32
 800a06a:	4a08      	ldr	r2, [pc, #32]	@ (800a08c <UART_SetConfig+0x2d4>)
 800a06c:	fba2 2303 	umull	r2, r3, r2, r3
 800a070:	095b      	lsrs	r3, r3, #5
 800a072:	f003 0207 	and.w	r2, r3, #7
 800a076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4422      	add	r2, r4
 800a07e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a080:	e106      	b.n	800a290 <UART_SetConfig+0x4d8>
 800a082:	bf00      	nop
 800a084:	40011000 	.word	0x40011000
 800a088:	40011400 	.word	0x40011400
 800a08c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a094:	2200      	movs	r2, #0
 800a096:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a09a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a09e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a0a2:	4642      	mov	r2, r8
 800a0a4:	464b      	mov	r3, r9
 800a0a6:	1891      	adds	r1, r2, r2
 800a0a8:	6239      	str	r1, [r7, #32]
 800a0aa:	415b      	adcs	r3, r3
 800a0ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a0b2:	4641      	mov	r1, r8
 800a0b4:	1854      	adds	r4, r2, r1
 800a0b6:	4649      	mov	r1, r9
 800a0b8:	eb43 0501 	adc.w	r5, r3, r1
 800a0bc:	f04f 0200 	mov.w	r2, #0
 800a0c0:	f04f 0300 	mov.w	r3, #0
 800a0c4:	00eb      	lsls	r3, r5, #3
 800a0c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a0ca:	00e2      	lsls	r2, r4, #3
 800a0cc:	4614      	mov	r4, r2
 800a0ce:	461d      	mov	r5, r3
 800a0d0:	4643      	mov	r3, r8
 800a0d2:	18e3      	adds	r3, r4, r3
 800a0d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a0d8:	464b      	mov	r3, r9
 800a0da:	eb45 0303 	adc.w	r3, r5, r3
 800a0de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a0e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a0ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a0f2:	f04f 0200 	mov.w	r2, #0
 800a0f6:	f04f 0300 	mov.w	r3, #0
 800a0fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a0fe:	4629      	mov	r1, r5
 800a100:	008b      	lsls	r3, r1, #2
 800a102:	4621      	mov	r1, r4
 800a104:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a108:	4621      	mov	r1, r4
 800a10a:	008a      	lsls	r2, r1, #2
 800a10c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a110:	f7f6 fdc2 	bl	8000c98 <__aeabi_uldivmod>
 800a114:	4602      	mov	r2, r0
 800a116:	460b      	mov	r3, r1
 800a118:	4b60      	ldr	r3, [pc, #384]	@ (800a29c <UART_SetConfig+0x4e4>)
 800a11a:	fba3 2302 	umull	r2, r3, r3, r2
 800a11e:	095b      	lsrs	r3, r3, #5
 800a120:	011c      	lsls	r4, r3, #4
 800a122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a126:	2200      	movs	r2, #0
 800a128:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a12c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a130:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a134:	4642      	mov	r2, r8
 800a136:	464b      	mov	r3, r9
 800a138:	1891      	adds	r1, r2, r2
 800a13a:	61b9      	str	r1, [r7, #24]
 800a13c:	415b      	adcs	r3, r3
 800a13e:	61fb      	str	r3, [r7, #28]
 800a140:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a144:	4641      	mov	r1, r8
 800a146:	1851      	adds	r1, r2, r1
 800a148:	6139      	str	r1, [r7, #16]
 800a14a:	4649      	mov	r1, r9
 800a14c:	414b      	adcs	r3, r1
 800a14e:	617b      	str	r3, [r7, #20]
 800a150:	f04f 0200 	mov.w	r2, #0
 800a154:	f04f 0300 	mov.w	r3, #0
 800a158:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a15c:	4659      	mov	r1, fp
 800a15e:	00cb      	lsls	r3, r1, #3
 800a160:	4651      	mov	r1, sl
 800a162:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a166:	4651      	mov	r1, sl
 800a168:	00ca      	lsls	r2, r1, #3
 800a16a:	4610      	mov	r0, r2
 800a16c:	4619      	mov	r1, r3
 800a16e:	4603      	mov	r3, r0
 800a170:	4642      	mov	r2, r8
 800a172:	189b      	adds	r3, r3, r2
 800a174:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a178:	464b      	mov	r3, r9
 800a17a:	460a      	mov	r2, r1
 800a17c:	eb42 0303 	adc.w	r3, r2, r3
 800a180:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a18e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a190:	f04f 0200 	mov.w	r2, #0
 800a194:	f04f 0300 	mov.w	r3, #0
 800a198:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a19c:	4649      	mov	r1, r9
 800a19e:	008b      	lsls	r3, r1, #2
 800a1a0:	4641      	mov	r1, r8
 800a1a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a1a6:	4641      	mov	r1, r8
 800a1a8:	008a      	lsls	r2, r1, #2
 800a1aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a1ae:	f7f6 fd73 	bl	8000c98 <__aeabi_uldivmod>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	4611      	mov	r1, r2
 800a1b8:	4b38      	ldr	r3, [pc, #224]	@ (800a29c <UART_SetConfig+0x4e4>)
 800a1ba:	fba3 2301 	umull	r2, r3, r3, r1
 800a1be:	095b      	lsrs	r3, r3, #5
 800a1c0:	2264      	movs	r2, #100	@ 0x64
 800a1c2:	fb02 f303 	mul.w	r3, r2, r3
 800a1c6:	1acb      	subs	r3, r1, r3
 800a1c8:	011b      	lsls	r3, r3, #4
 800a1ca:	3332      	adds	r3, #50	@ 0x32
 800a1cc:	4a33      	ldr	r2, [pc, #204]	@ (800a29c <UART_SetConfig+0x4e4>)
 800a1ce:	fba2 2303 	umull	r2, r3, r2, r3
 800a1d2:	095b      	lsrs	r3, r3, #5
 800a1d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a1d8:	441c      	add	r4, r3
 800a1da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a1de:	2200      	movs	r2, #0
 800a1e0:	673b      	str	r3, [r7, #112]	@ 0x70
 800a1e2:	677a      	str	r2, [r7, #116]	@ 0x74
 800a1e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a1e8:	4642      	mov	r2, r8
 800a1ea:	464b      	mov	r3, r9
 800a1ec:	1891      	adds	r1, r2, r2
 800a1ee:	60b9      	str	r1, [r7, #8]
 800a1f0:	415b      	adcs	r3, r3
 800a1f2:	60fb      	str	r3, [r7, #12]
 800a1f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a1f8:	4641      	mov	r1, r8
 800a1fa:	1851      	adds	r1, r2, r1
 800a1fc:	6039      	str	r1, [r7, #0]
 800a1fe:	4649      	mov	r1, r9
 800a200:	414b      	adcs	r3, r1
 800a202:	607b      	str	r3, [r7, #4]
 800a204:	f04f 0200 	mov.w	r2, #0
 800a208:	f04f 0300 	mov.w	r3, #0
 800a20c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a210:	4659      	mov	r1, fp
 800a212:	00cb      	lsls	r3, r1, #3
 800a214:	4651      	mov	r1, sl
 800a216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a21a:	4651      	mov	r1, sl
 800a21c:	00ca      	lsls	r2, r1, #3
 800a21e:	4610      	mov	r0, r2
 800a220:	4619      	mov	r1, r3
 800a222:	4603      	mov	r3, r0
 800a224:	4642      	mov	r2, r8
 800a226:	189b      	adds	r3, r3, r2
 800a228:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a22a:	464b      	mov	r3, r9
 800a22c:	460a      	mov	r2, r1
 800a22e:	eb42 0303 	adc.w	r3, r2, r3
 800a232:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a23e:	667a      	str	r2, [r7, #100]	@ 0x64
 800a240:	f04f 0200 	mov.w	r2, #0
 800a244:	f04f 0300 	mov.w	r3, #0
 800a248:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a24c:	4649      	mov	r1, r9
 800a24e:	008b      	lsls	r3, r1, #2
 800a250:	4641      	mov	r1, r8
 800a252:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a256:	4641      	mov	r1, r8
 800a258:	008a      	lsls	r2, r1, #2
 800a25a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a25e:	f7f6 fd1b 	bl	8000c98 <__aeabi_uldivmod>
 800a262:	4602      	mov	r2, r0
 800a264:	460b      	mov	r3, r1
 800a266:	4b0d      	ldr	r3, [pc, #52]	@ (800a29c <UART_SetConfig+0x4e4>)
 800a268:	fba3 1302 	umull	r1, r3, r3, r2
 800a26c:	095b      	lsrs	r3, r3, #5
 800a26e:	2164      	movs	r1, #100	@ 0x64
 800a270:	fb01 f303 	mul.w	r3, r1, r3
 800a274:	1ad3      	subs	r3, r2, r3
 800a276:	011b      	lsls	r3, r3, #4
 800a278:	3332      	adds	r3, #50	@ 0x32
 800a27a:	4a08      	ldr	r2, [pc, #32]	@ (800a29c <UART_SetConfig+0x4e4>)
 800a27c:	fba2 2303 	umull	r2, r3, r2, r3
 800a280:	095b      	lsrs	r3, r3, #5
 800a282:	f003 020f 	and.w	r2, r3, #15
 800a286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4422      	add	r2, r4
 800a28e:	609a      	str	r2, [r3, #8]
}
 800a290:	bf00      	nop
 800a292:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a296:	46bd      	mov	sp, r7
 800a298:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a29c:	51eb851f 	.word	0x51eb851f

0800a2a0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a2a0:	b084      	sub	sp, #16
 800a2a2:	b480      	push	{r7}
 800a2a4:	b085      	sub	sp, #20
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
 800a2aa:	f107 001c 	add.w	r0, r7, #28
 800a2ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a2b6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a2b8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a2ba:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800a2be:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800a2c2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a2c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800a2c6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a2c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800a2ca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a2cc:	68fa      	ldr	r2, [r7, #12]
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800a2da:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a2de:	68fa      	ldr	r2, [r7, #12]
 800a2e0:	431a      	orrs	r2, r3
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a2e6:	2300      	movs	r3, #0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3714      	adds	r7, #20
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	b004      	add	sp, #16
 800a2f4:	4770      	bx	lr

0800a2f6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a2f6:	b480      	push	{r7}
 800a2f8:	b083      	sub	sp, #12
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a304:	4618      	mov	r0, r3
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a324:	2300      	movs	r3, #0
}
 800a326:	4618      	mov	r0, r3
 800a328:	370c      	adds	r7, #12
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr

0800a332 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a332:	b480      	push	{r7}
 800a334:	b083      	sub	sp, #12
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2203      	movs	r2, #3
 800a33e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	370c      	adds	r7, #12
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr

0800a34e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a34e:	b480      	push	{r7}
 800a350:	b083      	sub	sp, #12
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f003 0303 	and.w	r3, r3, #3
}
 800a35e:	4618      	mov	r0, r3
 800a360:	370c      	adds	r7, #12
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr

0800a36a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a36a:	b480      	push	{r7}
 800a36c:	b085      	sub	sp, #20
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
 800a372:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a374:	2300      	movs	r3, #0
 800a376:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a388:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a38e:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a394:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a396:	68fa      	ldr	r2, [r7, #12]
 800a398:	4313      	orrs	r3, r2
 800a39a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a3a4:	f023 030f 	bic.w	r3, r3, #15
 800a3a8:	68fa      	ldr	r2, [r7, #12]
 800a3aa:	431a      	orrs	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a3b0:	2300      	movs	r3, #0
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3714      	adds	r7, #20
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr

0800a3be <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a3be:	b480      	push	{r7}
 800a3c0:	b083      	sub	sp, #12
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	691b      	ldr	r3, [r3, #16]
 800a3ca:	b2db      	uxtb	r3, r3
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b085      	sub	sp, #20
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	3314      	adds	r3, #20
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	4413      	add	r3, r2
 800a3ec:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
}  
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3714      	adds	r7, #20
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr

0800a3fe <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a3fe:	b480      	push	{r7}
 800a400:	b085      	sub	sp, #20
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
 800a406:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a408:	2300      	movs	r3, #0
 800a40a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	681a      	ldr	r2, [r3, #0]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	685a      	ldr	r2, [r3, #4]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a424:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a42a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a430:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a432:	68fa      	ldr	r2, [r7, #12]
 800a434:	4313      	orrs	r3, r2
 800a436:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a43c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	431a      	orrs	r2, r3
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a448:	2300      	movs	r3, #0

}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3714      	adds	r7, #20
 800a44e:	46bd      	mov	sp, r7
 800a450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a454:	4770      	bx	lr

0800a456 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a456:	b580      	push	{r7, lr}
 800a458:	b088      	sub	sp, #32
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
 800a45e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a464:	2310      	movs	r3, #16
 800a466:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a468:	2340      	movs	r3, #64	@ 0x40
 800a46a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a46c:	2300      	movs	r3, #0
 800a46e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a470:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a474:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a476:	f107 0308 	add.w	r3, r7, #8
 800a47a:	4619      	mov	r1, r3
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f7ff ff74 	bl	800a36a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a482:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a486:	2110      	movs	r1, #16
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 fa19 	bl	800a8c0 <SDMMC_GetCmdResp1>
 800a48e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a490:	69fb      	ldr	r3, [r7, #28]
}
 800a492:	4618      	mov	r0, r3
 800a494:	3720      	adds	r7, #32
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b088      	sub	sp, #32
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
 800a4a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a4a8:	2311      	movs	r3, #17
 800a4aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a4ac:	2340      	movs	r3, #64	@ 0x40
 800a4ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a4b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4ba:	f107 0308 	add.w	r3, r7, #8
 800a4be:	4619      	mov	r1, r3
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f7ff ff52 	bl	800a36a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a4c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4ca:	2111      	movs	r1, #17
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 f9f7 	bl	800a8c0 <SDMMC_GetCmdResp1>
 800a4d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4d4:	69fb      	ldr	r3, [r7, #28]
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3720      	adds	r7, #32
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b088      	sub	sp, #32
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
 800a4e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a4ec:	2312      	movs	r3, #18
 800a4ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a4f0:	2340      	movs	r3, #64	@ 0x40
 800a4f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a4f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4fe:	f107 0308 	add.w	r3, r7, #8
 800a502:	4619      	mov	r1, r3
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f7ff ff30 	bl	800a36a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a50a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a50e:	2112      	movs	r1, #18
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 f9d5 	bl	800a8c0 <SDMMC_GetCmdResp1>
 800a516:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a518:	69fb      	ldr	r3, [r7, #28]
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3720      	adds	r7, #32
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}

0800a522 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a522:	b580      	push	{r7, lr}
 800a524:	b088      	sub	sp, #32
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
 800a52a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a530:	2318      	movs	r3, #24
 800a532:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a534:	2340      	movs	r3, #64	@ 0x40
 800a536:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a538:	2300      	movs	r3, #0
 800a53a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a53c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a540:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a542:	f107 0308 	add.w	r3, r7, #8
 800a546:	4619      	mov	r1, r3
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f7ff ff0e 	bl	800a36a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a54e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a552:	2118      	movs	r1, #24
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 f9b3 	bl	800a8c0 <SDMMC_GetCmdResp1>
 800a55a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a55c:	69fb      	ldr	r3, [r7, #28]
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3720      	adds	r7, #32
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a566:	b580      	push	{r7, lr}
 800a568:	b088      	sub	sp, #32
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
 800a56e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a574:	2319      	movs	r3, #25
 800a576:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a578:	2340      	movs	r3, #64	@ 0x40
 800a57a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a57c:	2300      	movs	r3, #0
 800a57e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a580:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a584:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a586:	f107 0308 	add.w	r3, r7, #8
 800a58a:	4619      	mov	r1, r3
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f7ff feec 	bl	800a36a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a592:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a596:	2119      	movs	r1, #25
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 f991 	bl	800a8c0 <SDMMC_GetCmdResp1>
 800a59e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5a0:	69fb      	ldr	r3, [r7, #28]
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3720      	adds	r7, #32
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
	...

0800a5ac <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b088      	sub	sp, #32
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a5b8:	230c      	movs	r3, #12
 800a5ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a5bc:	2340      	movs	r3, #64	@ 0x40
 800a5be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5ca:	f107 0308 	add.w	r3, r7, #8
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f7ff feca 	bl	800a36a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a5d6:	4a05      	ldr	r2, [pc, #20]	@ (800a5ec <SDMMC_CmdStopTransfer+0x40>)
 800a5d8:	210c      	movs	r1, #12
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f000 f970 	bl	800a8c0 <SDMMC_GetCmdResp1>
 800a5e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5e2:	69fb      	ldr	r3, [r7, #28]
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3720      	adds	r7, #32
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	05f5e100 	.word	0x05f5e100

0800a5f0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b08a      	sub	sp, #40	@ 0x28
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a600:	2307      	movs	r3, #7
 800a602:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a604:	2340      	movs	r3, #64	@ 0x40
 800a606:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a608:	2300      	movs	r3, #0
 800a60a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a60c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a610:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a612:	f107 0310 	add.w	r3, r7, #16
 800a616:	4619      	mov	r1, r3
 800a618:	68f8      	ldr	r0, [r7, #12]
 800a61a:	f7ff fea6 	bl	800a36a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a61e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a622:	2107      	movs	r1, #7
 800a624:	68f8      	ldr	r0, [r7, #12]
 800a626:	f000 f94b 	bl	800a8c0 <SDMMC_GetCmdResp1>
 800a62a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3728      	adds	r7, #40	@ 0x28
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}

0800a636 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a636:	b580      	push	{r7, lr}
 800a638:	b088      	sub	sp, #32
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a63e:	2300      	movs	r3, #0
 800a640:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a642:	2300      	movs	r3, #0
 800a644:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a646:	2300      	movs	r3, #0
 800a648:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a64a:	2300      	movs	r3, #0
 800a64c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a64e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a652:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a654:	f107 0308 	add.w	r3, r7, #8
 800a658:	4619      	mov	r1, r3
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f7ff fe85 	bl	800a36a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 fb65 	bl	800ad30 <SDMMC_GetCmdError>
 800a666:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a668:	69fb      	ldr	r3, [r7, #28]
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3720      	adds	r7, #32
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}

0800a672 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a672:	b580      	push	{r7, lr}
 800a674:	b088      	sub	sp, #32
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a67a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a67e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a680:	2308      	movs	r3, #8
 800a682:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a684:	2340      	movs	r3, #64	@ 0x40
 800a686:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a688:	2300      	movs	r3, #0
 800a68a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a68c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a690:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a692:	f107 0308 	add.w	r3, r7, #8
 800a696:	4619      	mov	r1, r3
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f7ff fe66 	bl	800a36a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 faf8 	bl	800ac94 <SDMMC_GetCmdResp7>
 800a6a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6a6:	69fb      	ldr	r3, [r7, #28]
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3720      	adds	r7, #32
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b088      	sub	sp, #32
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a6be:	2337      	movs	r3, #55	@ 0x37
 800a6c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a6c2:	2340      	movs	r3, #64	@ 0x40
 800a6c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a6ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6d0:	f107 0308 	add.w	r3, r7, #8
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f7ff fe47 	bl	800a36a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a6dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6e0:	2137      	movs	r1, #55	@ 0x37
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 f8ec 	bl	800a8c0 <SDMMC_GetCmdResp1>
 800a6e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6ea:	69fb      	ldr	r3, [r7, #28]
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3720      	adds	r7, #32
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b088      	sub	sp, #32
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a704:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a708:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a70a:	2329      	movs	r3, #41	@ 0x29
 800a70c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a70e:	2340      	movs	r3, #64	@ 0x40
 800a710:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a712:	2300      	movs	r3, #0
 800a714:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a716:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a71a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a71c:	f107 0308 	add.w	r3, r7, #8
 800a720:	4619      	mov	r1, r3
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f7ff fe21 	bl	800a36a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f000 f9ff 	bl	800ab2c <SDMMC_GetCmdResp3>
 800a72e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a730:	69fb      	ldr	r3, [r7, #28]
}
 800a732:	4618      	mov	r0, r3
 800a734:	3720      	adds	r7, #32
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b088      	sub	sp, #32
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
 800a742:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a748:	2306      	movs	r3, #6
 800a74a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a74c:	2340      	movs	r3, #64	@ 0x40
 800a74e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a750:	2300      	movs	r3, #0
 800a752:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a754:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a758:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a75a:	f107 0308 	add.w	r3, r7, #8
 800a75e:	4619      	mov	r1, r3
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f7ff fe02 	bl	800a36a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a76a:	2106      	movs	r1, #6
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 f8a7 	bl	800a8c0 <SDMMC_GetCmdResp1>
 800a772:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a774:	69fb      	ldr	r3, [r7, #28]
}
 800a776:	4618      	mov	r0, r3
 800a778:	3720      	adds	r7, #32
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b088      	sub	sp, #32
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a786:	2300      	movs	r3, #0
 800a788:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a78a:	2333      	movs	r3, #51	@ 0x33
 800a78c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a78e:	2340      	movs	r3, #64	@ 0x40
 800a790:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a792:	2300      	movs	r3, #0
 800a794:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a796:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a79a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a79c:	f107 0308 	add.w	r3, r7, #8
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f7ff fde1 	bl	800a36a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a7a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7ac:	2133      	movs	r1, #51	@ 0x33
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 f886 	bl	800a8c0 <SDMMC_GetCmdResp1>
 800a7b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7b6:	69fb      	ldr	r3, [r7, #28]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3720      	adds	r7, #32
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b088      	sub	sp, #32
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a7cc:	2302      	movs	r3, #2
 800a7ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a7d0:	23c0      	movs	r3, #192	@ 0xc0
 800a7d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a7d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a7de:	f107 0308 	add.w	r3, r7, #8
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f7ff fdc0 	bl	800a36a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 f956 	bl	800aa9c <SDMMC_GetCmdResp2>
 800a7f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7f2:	69fb      	ldr	r3, [r7, #28]
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3720      	adds	r7, #32
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b088      	sub	sp, #32
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a80a:	2309      	movs	r3, #9
 800a80c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a80e:	23c0      	movs	r3, #192	@ 0xc0
 800a810:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a812:	2300      	movs	r3, #0
 800a814:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a816:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a81a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a81c:	f107 0308 	add.w	r3, r7, #8
 800a820:	4619      	mov	r1, r3
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f7ff fda1 	bl	800a36a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 f937 	bl	800aa9c <SDMMC_GetCmdResp2>
 800a82e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a830:	69fb      	ldr	r3, [r7, #28]
}
 800a832:	4618      	mov	r0, r3
 800a834:	3720      	adds	r7, #32
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b088      	sub	sp, #32
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
 800a842:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a844:	2300      	movs	r3, #0
 800a846:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a848:	2303      	movs	r3, #3
 800a84a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a84c:	2340      	movs	r3, #64	@ 0x40
 800a84e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a850:	2300      	movs	r3, #0
 800a852:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a854:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a858:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a85a:	f107 0308 	add.w	r3, r7, #8
 800a85e:	4619      	mov	r1, r3
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f7ff fd82 	bl	800a36a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a866:	683a      	ldr	r2, [r7, #0]
 800a868:	2103      	movs	r1, #3
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 f99c 	bl	800aba8 <SDMMC_GetCmdResp6>
 800a870:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a872:	69fb      	ldr	r3, [r7, #28]
}
 800a874:	4618      	mov	r0, r3
 800a876:	3720      	adds	r7, #32
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b088      	sub	sp, #32
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a88a:	230d      	movs	r3, #13
 800a88c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a88e:	2340      	movs	r3, #64	@ 0x40
 800a890:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a892:	2300      	movs	r3, #0
 800a894:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a896:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a89a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a89c:	f107 0308 	add.w	r3, r7, #8
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f7ff fd61 	bl	800a36a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a8a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8ac:	210d      	movs	r1, #13
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 f806 	bl	800a8c0 <SDMMC_GetCmdResp1>
 800a8b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8b6:	69fb      	ldr	r3, [r7, #28]
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3720      	adds	r7, #32
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b088      	sub	sp, #32
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	607a      	str	r2, [r7, #4]
 800a8cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a8ce:	4b70      	ldr	r3, [pc, #448]	@ (800aa90 <SDMMC_GetCmdResp1+0x1d0>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4a70      	ldr	r2, [pc, #448]	@ (800aa94 <SDMMC_GetCmdResp1+0x1d4>)
 800a8d4:	fba2 2303 	umull	r2, r3, r2, r3
 800a8d8:	0a5a      	lsrs	r2, r3, #9
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	fb02 f303 	mul.w	r3, r2, r3
 800a8e0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a8e2:	69fb      	ldr	r3, [r7, #28]
 800a8e4:	1e5a      	subs	r2, r3, #1
 800a8e6:	61fa      	str	r2, [r7, #28]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d102      	bne.n	800a8f2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a8ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a8f0:	e0c9      	b.n	800aa86 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8f6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a8f8:	69bb      	ldr	r3, [r7, #24]
 800a8fa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d0ef      	beq.n	800a8e2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a902:	69bb      	ldr	r3, [r7, #24]
 800a904:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d1ea      	bne.n	800a8e2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a910:	f003 0304 	and.w	r3, r3, #4
 800a914:	2b00      	cmp	r3, #0
 800a916:	d004      	beq.n	800a922 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2204      	movs	r2, #4
 800a91c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a91e:	2304      	movs	r3, #4
 800a920:	e0b1      	b.n	800aa86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a926:	f003 0301 	and.w	r3, r3, #1
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d004      	beq.n	800a938 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2201      	movs	r2, #1
 800a932:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a934:	2301      	movs	r3, #1
 800a936:	e0a6      	b.n	800aa86 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	22c5      	movs	r2, #197	@ 0xc5
 800a93c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a93e:	68f8      	ldr	r0, [r7, #12]
 800a940:	f7ff fd3d 	bl	800a3be <SDIO_GetCommandResponse>
 800a944:	4603      	mov	r3, r0
 800a946:	461a      	mov	r2, r3
 800a948:	7afb      	ldrb	r3, [r7, #11]
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d001      	beq.n	800a952 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a94e:	2301      	movs	r3, #1
 800a950:	e099      	b.n	800aa86 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a952:	2100      	movs	r1, #0
 800a954:	68f8      	ldr	r0, [r7, #12]
 800a956:	f7ff fd3f 	bl	800a3d8 <SDIO_GetResponse>
 800a95a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a95c:	697a      	ldr	r2, [r7, #20]
 800a95e:	4b4e      	ldr	r3, [pc, #312]	@ (800aa98 <SDMMC_GetCmdResp1+0x1d8>)
 800a960:	4013      	ands	r3, r2
 800a962:	2b00      	cmp	r3, #0
 800a964:	d101      	bne.n	800a96a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a966:	2300      	movs	r3, #0
 800a968:	e08d      	b.n	800aa86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	da02      	bge.n	800a976 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a970:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a974:	e087      	b.n	800aa86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d001      	beq.n	800a984 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a980:	2340      	movs	r3, #64	@ 0x40
 800a982:	e080      	b.n	800aa86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d001      	beq.n	800a992 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a98e:	2380      	movs	r3, #128	@ 0x80
 800a990:	e079      	b.n	800aa86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d002      	beq.n	800a9a2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a99c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a9a0:	e071      	b.n	800aa86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d002      	beq.n	800a9b2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a9ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a9b0:	e069      	b.n	800aa86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d002      	beq.n	800a9c2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a9bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a9c0:	e061      	b.n	800aa86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d002      	beq.n	800a9d2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a9cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a9d0:	e059      	b.n	800aa86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d002      	beq.n	800a9e2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a9dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a9e0:	e051      	b.n	800aa86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d002      	beq.n	800a9f2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a9ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a9f0:	e049      	b.n	800aa86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d002      	beq.n	800aa02 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a9fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800aa00:	e041      	b.n	800aa86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d002      	beq.n	800aa12 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800aa0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa10:	e039      	b.n	800aa86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d002      	beq.n	800aa22 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800aa1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800aa20:	e031      	b.n	800aa86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d002      	beq.n	800aa32 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800aa2c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800aa30:	e029      	b.n	800aa86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d002      	beq.n	800aa42 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800aa3c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800aa40:	e021      	b.n	800aa86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d002      	beq.n	800aa52 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800aa4c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800aa50:	e019      	b.n	800aa86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d002      	beq.n	800aa62 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800aa5c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800aa60:	e011      	b.n	800aa86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d002      	beq.n	800aa72 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800aa6c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800aa70:	e009      	b.n	800aa86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	f003 0308 	and.w	r3, r3, #8
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d002      	beq.n	800aa82 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800aa7c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800aa80:	e001      	b.n	800aa86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800aa82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3720      	adds	r7, #32
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	20000008 	.word	0x20000008
 800aa94:	10624dd3 	.word	0x10624dd3
 800aa98:	fdffe008 	.word	0xfdffe008

0800aa9c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aaa4:	4b1f      	ldr	r3, [pc, #124]	@ (800ab24 <SDMMC_GetCmdResp2+0x88>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a1f      	ldr	r2, [pc, #124]	@ (800ab28 <SDMMC_GetCmdResp2+0x8c>)
 800aaaa:	fba2 2303 	umull	r2, r3, r2, r3
 800aaae:	0a5b      	lsrs	r3, r3, #9
 800aab0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aab4:	fb02 f303 	mul.w	r3, r2, r3
 800aab8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	1e5a      	subs	r2, r3, #1
 800aabe:	60fa      	str	r2, [r7, #12]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d102      	bne.n	800aaca <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aac4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aac8:	e026      	b.n	800ab18 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aace:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d0ef      	beq.n	800aaba <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d1ea      	bne.n	800aaba <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aae8:	f003 0304 	and.w	r3, r3, #4
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d004      	beq.n	800aafa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2204      	movs	r2, #4
 800aaf4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aaf6:	2304      	movs	r3, #4
 800aaf8:	e00e      	b.n	800ab18 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aafe:	f003 0301 	and.w	r3, r3, #1
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d004      	beq.n	800ab10 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2201      	movs	r2, #1
 800ab0a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	e003      	b.n	800ab18 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	22c5      	movs	r2, #197	@ 0xc5
 800ab14:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ab16:	2300      	movs	r3, #0
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3714      	adds	r7, #20
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr
 800ab24:	20000008 	.word	0x20000008
 800ab28:	10624dd3 	.word	0x10624dd3

0800ab2c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b085      	sub	sp, #20
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ab34:	4b1a      	ldr	r3, [pc, #104]	@ (800aba0 <SDMMC_GetCmdResp3+0x74>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a1a      	ldr	r2, [pc, #104]	@ (800aba4 <SDMMC_GetCmdResp3+0x78>)
 800ab3a:	fba2 2303 	umull	r2, r3, r2, r3
 800ab3e:	0a5b      	lsrs	r3, r3, #9
 800ab40:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab44:	fb02 f303 	mul.w	r3, r2, r3
 800ab48:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	1e5a      	subs	r2, r3, #1
 800ab4e:	60fa      	str	r2, [r7, #12]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d102      	bne.n	800ab5a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab54:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ab58:	e01b      	b.n	800ab92 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab5e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d0ef      	beq.n	800ab4a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d1ea      	bne.n	800ab4a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab78:	f003 0304 	and.w	r3, r3, #4
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d004      	beq.n	800ab8a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2204      	movs	r2, #4
 800ab84:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab86:	2304      	movs	r3, #4
 800ab88:	e003      	b.n	800ab92 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	22c5      	movs	r2, #197	@ 0xc5
 800ab8e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ab90:	2300      	movs	r3, #0
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3714      	adds	r7, #20
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr
 800ab9e:	bf00      	nop
 800aba0:	20000008 	.word	0x20000008
 800aba4:	10624dd3 	.word	0x10624dd3

0800aba8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b088      	sub	sp, #32
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	460b      	mov	r3, r1
 800abb2:	607a      	str	r2, [r7, #4]
 800abb4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800abb6:	4b35      	ldr	r3, [pc, #212]	@ (800ac8c <SDMMC_GetCmdResp6+0xe4>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a35      	ldr	r2, [pc, #212]	@ (800ac90 <SDMMC_GetCmdResp6+0xe8>)
 800abbc:	fba2 2303 	umull	r2, r3, r2, r3
 800abc0:	0a5b      	lsrs	r3, r3, #9
 800abc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abc6:	fb02 f303 	mul.w	r3, r2, r3
 800abca:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	1e5a      	subs	r2, r3, #1
 800abd0:	61fa      	str	r2, [r7, #28]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d102      	bne.n	800abdc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800abd6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800abda:	e052      	b.n	800ac82 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abe0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800abe2:	69bb      	ldr	r3, [r7, #24]
 800abe4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d0ef      	beq.n	800abcc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800abec:	69bb      	ldr	r3, [r7, #24]
 800abee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d1ea      	bne.n	800abcc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abfa:	f003 0304 	and.w	r3, r3, #4
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d004      	beq.n	800ac0c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2204      	movs	r2, #4
 800ac06:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac08:	2304      	movs	r3, #4
 800ac0a:	e03a      	b.n	800ac82 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac10:	f003 0301 	and.w	r3, r3, #1
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d004      	beq.n	800ac22 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e02f      	b.n	800ac82 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ac22:	68f8      	ldr	r0, [r7, #12]
 800ac24:	f7ff fbcb 	bl	800a3be <SDIO_GetCommandResponse>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	7afb      	ldrb	r3, [r7, #11]
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d001      	beq.n	800ac36 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac32:	2301      	movs	r3, #1
 800ac34:	e025      	b.n	800ac82 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	22c5      	movs	r2, #197	@ 0xc5
 800ac3a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ac3c:	2100      	movs	r1, #0
 800ac3e:	68f8      	ldr	r0, [r7, #12]
 800ac40:	f7ff fbca 	bl	800a3d8 <SDIO_GetResponse>
 800ac44:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d106      	bne.n	800ac5e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	0c1b      	lsrs	r3, r3, #16
 800ac54:	b29a      	uxth	r2, r3
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	e011      	b.n	800ac82 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d002      	beq.n	800ac6e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ac68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ac6c:	e009      	b.n	800ac82 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d002      	beq.n	800ac7e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ac78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ac7c:	e001      	b.n	800ac82 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ac7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3720      	adds	r7, #32
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	20000008 	.word	0x20000008
 800ac90:	10624dd3 	.word	0x10624dd3

0800ac94 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b085      	sub	sp, #20
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ac9c:	4b22      	ldr	r3, [pc, #136]	@ (800ad28 <SDMMC_GetCmdResp7+0x94>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a22      	ldr	r2, [pc, #136]	@ (800ad2c <SDMMC_GetCmdResp7+0x98>)
 800aca2:	fba2 2303 	umull	r2, r3, r2, r3
 800aca6:	0a5b      	lsrs	r3, r3, #9
 800aca8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800acac:	fb02 f303 	mul.w	r3, r2, r3
 800acb0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	1e5a      	subs	r2, r3, #1
 800acb6:	60fa      	str	r2, [r7, #12]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d102      	bne.n	800acc2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800acbc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800acc0:	e02c      	b.n	800ad1c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acc6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d0ef      	beq.n	800acb2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d1ea      	bne.n	800acb2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ace0:	f003 0304 	and.w	r3, r3, #4
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d004      	beq.n	800acf2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2204      	movs	r2, #4
 800acec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800acee:	2304      	movs	r3, #4
 800acf0:	e014      	b.n	800ad1c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acf6:	f003 0301 	and.w	r3, r3, #1
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d004      	beq.n	800ad08 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2201      	movs	r2, #1
 800ad02:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad04:	2301      	movs	r3, #1
 800ad06:	e009      	b.n	800ad1c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d002      	beq.n	800ad1a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2240      	movs	r2, #64	@ 0x40
 800ad18:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ad1a:	2300      	movs	r3, #0
  
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3714      	adds	r7, #20
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr
 800ad28:	20000008 	.word	0x20000008
 800ad2c:	10624dd3 	.word	0x10624dd3

0800ad30 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b085      	sub	sp, #20
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ad38:	4b11      	ldr	r3, [pc, #68]	@ (800ad80 <SDMMC_GetCmdError+0x50>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a11      	ldr	r2, [pc, #68]	@ (800ad84 <SDMMC_GetCmdError+0x54>)
 800ad3e:	fba2 2303 	umull	r2, r3, r2, r3
 800ad42:	0a5b      	lsrs	r3, r3, #9
 800ad44:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad48:	fb02 f303 	mul.w	r3, r2, r3
 800ad4c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	1e5a      	subs	r2, r3, #1
 800ad52:	60fa      	str	r2, [r7, #12]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d102      	bne.n	800ad5e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad58:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ad5c:	e009      	b.n	800ad72 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d0f1      	beq.n	800ad4e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	22c5      	movs	r2, #197	@ 0xc5
 800ad6e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800ad70:	2300      	movs	r3, #0
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3714      	adds	r7, #20
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr
 800ad7e:	bf00      	nop
 800ad80:	20000008 	.word	0x20000008
 800ad84:	10624dd3 	.word	0x10624dd3

0800ad88 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ad8c:	4904      	ldr	r1, [pc, #16]	@ (800ada0 <MX_FATFS_Init+0x18>)
 800ad8e:	4805      	ldr	r0, [pc, #20]	@ (800ada4 <MX_FATFS_Init+0x1c>)
 800ad90:	f002 fdda 	bl	800d948 <FATFS_LinkDriver>
 800ad94:	4603      	mov	r3, r0
 800ad96:	461a      	mov	r2, r3
 800ad98:	4b03      	ldr	r3, [pc, #12]	@ (800ada8 <MX_FATFS_Init+0x20>)
 800ad9a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ad9c:	bf00      	nop
 800ad9e:	bd80      	pop	{r7, pc}
 800ada0:	20002b94 	.word	0x20002b94
 800ada4:	08013d00 	.word	0x08013d00
 800ada8:	20002b90 	.word	0x20002b90

0800adac <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800adac:	b480      	push	{r7}
 800adae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800adb0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800adc2:	2300      	movs	r3, #0
 800adc4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800adc6:	f000 f896 	bl	800aef6 <BSP_SD_IsDetected>
 800adca:	4603      	mov	r3, r0
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d001      	beq.n	800add4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800add0:	2301      	movs	r3, #1
 800add2:	e012      	b.n	800adfa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800add4:	480b      	ldr	r0, [pc, #44]	@ (800ae04 <BSP_SD_Init+0x48>)
 800add6:	f7fc fa13 	bl	8007200 <HAL_SD_Init>
 800adda:	4603      	mov	r3, r0
 800addc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800adde:	79fb      	ldrb	r3, [r7, #7]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d109      	bne.n	800adf8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800ade4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800ade8:	4806      	ldr	r0, [pc, #24]	@ (800ae04 <BSP_SD_Init+0x48>)
 800adea:	f7fc ffe1 	bl	8007db0 <HAL_SD_ConfigWideBusOperation>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d001      	beq.n	800adf8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800adf4:	2301      	movs	r3, #1
 800adf6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800adf8:	79fb      	ldrb	r3, [r7, #7]
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3708      	adds	r7, #8
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	200026b8 	.word	0x200026b8

0800ae08 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b086      	sub	sp, #24
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ae14:	2300      	movs	r3, #0
 800ae16:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	68ba      	ldr	r2, [r7, #8]
 800ae1c:	68f9      	ldr	r1, [r7, #12]
 800ae1e:	4806      	ldr	r0, [pc, #24]	@ (800ae38 <BSP_SD_ReadBlocks_DMA+0x30>)
 800ae20:	f7fc fa9e 	bl	8007360 <HAL_SD_ReadBlocks_DMA>
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d001      	beq.n	800ae2e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ae2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3718      	adds	r7, #24
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	200026b8 	.word	0x200026b8

0800ae3c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b086      	sub	sp, #24
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	60b9      	str	r1, [r7, #8]
 800ae46:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	68ba      	ldr	r2, [r7, #8]
 800ae50:	68f9      	ldr	r1, [r7, #12]
 800ae52:	4806      	ldr	r0, [pc, #24]	@ (800ae6c <BSP_SD_WriteBlocks_DMA+0x30>)
 800ae54:	f7fc fb66 	bl	8007524 <HAL_SD_WriteBlocks_DMA>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d001      	beq.n	800ae62 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ae5e:	2301      	movs	r3, #1
 800ae60:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ae62:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3718      	adds	r7, #24
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}
 800ae6c:	200026b8 	.word	0x200026b8

0800ae70 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ae74:	4805      	ldr	r0, [pc, #20]	@ (800ae8c <BSP_SD_GetCardState+0x1c>)
 800ae76:	f7fd f835 	bl	8007ee4 <HAL_SD_GetCardState>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	2b04      	cmp	r3, #4
 800ae7e:	bf14      	ite	ne
 800ae80:	2301      	movne	r3, #1
 800ae82:	2300      	moveq	r3, #0
 800ae84:	b2db      	uxtb	r3, r3
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	200026b8 	.word	0x200026b8

0800ae90 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800ae98:	6879      	ldr	r1, [r7, #4]
 800ae9a:	4803      	ldr	r0, [pc, #12]	@ (800aea8 <BSP_SD_GetCardInfo+0x18>)
 800ae9c:	f7fc ff5c 	bl	8007d58 <HAL_SD_GetCardInfo>
}
 800aea0:	bf00      	nop
 800aea2:	3708      	adds	r7, #8
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}
 800aea8:	200026b8 	.word	0x200026b8

0800aeac <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800aeb4:	f000 f818 	bl	800aee8 <BSP_SD_AbortCallback>
}
 800aeb8:	bf00      	nop
 800aeba:	3708      	adds	r7, #8
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800aec8:	f000 f98c 	bl	800b1e4 <BSP_SD_WriteCpltCallback>
}
 800aecc:	bf00      	nop
 800aece:	3708      	adds	r7, #8
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800aedc:	f000 f98e 	bl	800b1fc <BSP_SD_ReadCpltCallback>
}
 800aee0:	bf00      	nop
 800aee2:	3708      	adds	r7, #8
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800aee8:	b480      	push	{r7}
 800aeea:	af00      	add	r7, sp, #0

}
 800aeec:	bf00      	nop
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr

0800aef6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800aef6:	b480      	push	{r7}
 800aef8:	b083      	sub	sp, #12
 800aefa:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800aefc:	2301      	movs	r3, #1
 800aefe:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800af00:	79fb      	ldrb	r3, [r7, #7]
 800af02:	b2db      	uxtb	r3, r3
}
 800af04:	4618      	mov	r0, r3
 800af06:	370c      	adds	r7, #12
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr

0800af10 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800af18:	f7f8 ff68 	bl	8003dec <HAL_GetTick>
 800af1c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800af1e:	e006      	b.n	800af2e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800af20:	f7ff ffa6 	bl	800ae70 <BSP_SD_GetCardState>
 800af24:	4603      	mov	r3, r0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d101      	bne.n	800af2e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800af2a:	2300      	movs	r3, #0
 800af2c:	e009      	b.n	800af42 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800af2e:	f7f8 ff5d 	bl	8003dec <HAL_GetTick>
 800af32:	4602      	mov	r2, r0
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	1ad3      	subs	r3, r2, r3
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d8f0      	bhi.n	800af20 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800af3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800af42:	4618      	mov	r0, r3
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
	...

0800af4c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	4603      	mov	r3, r0
 800af54:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800af56:	4b0b      	ldr	r3, [pc, #44]	@ (800af84 <SD_CheckStatus+0x38>)
 800af58:	2201      	movs	r2, #1
 800af5a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800af5c:	f7ff ff88 	bl	800ae70 <BSP_SD_GetCardState>
 800af60:	4603      	mov	r3, r0
 800af62:	2b00      	cmp	r3, #0
 800af64:	d107      	bne.n	800af76 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800af66:	4b07      	ldr	r3, [pc, #28]	@ (800af84 <SD_CheckStatus+0x38>)
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	f023 0301 	bic.w	r3, r3, #1
 800af70:	b2da      	uxtb	r2, r3
 800af72:	4b04      	ldr	r3, [pc, #16]	@ (800af84 <SD_CheckStatus+0x38>)
 800af74:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800af76:	4b03      	ldr	r3, [pc, #12]	@ (800af84 <SD_CheckStatus+0x38>)
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	b2db      	uxtb	r3, r3
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}
 800af84:	20000011 	.word	0x20000011

0800af88 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	4603      	mov	r3, r0
 800af90:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800af92:	f7ff ff13 	bl	800adbc <BSP_SD_Init>
 800af96:	4603      	mov	r3, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d107      	bne.n	800afac <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800af9c:	79fb      	ldrb	r3, [r7, #7]
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7ff ffd4 	bl	800af4c <SD_CheckStatus>
 800afa4:	4603      	mov	r3, r0
 800afa6:	461a      	mov	r2, r3
 800afa8:	4b04      	ldr	r3, [pc, #16]	@ (800afbc <SD_initialize+0x34>)
 800afaa:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800afac:	4b03      	ldr	r3, [pc, #12]	@ (800afbc <SD_initialize+0x34>)
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	b2db      	uxtb	r3, r3
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3708      	adds	r7, #8
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}
 800afba:	bf00      	nop
 800afbc:	20000011 	.word	0x20000011

0800afc0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b082      	sub	sp, #8
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	4603      	mov	r3, r0
 800afc8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800afca:	79fb      	ldrb	r3, [r7, #7]
 800afcc:	4618      	mov	r0, r3
 800afce:	f7ff ffbd 	bl	800af4c <SD_CheckStatus>
 800afd2:	4603      	mov	r3, r0
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3708      	adds	r7, #8
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b086      	sub	sp, #24
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	60b9      	str	r1, [r7, #8]
 800afe4:	607a      	str	r2, [r7, #4]
 800afe6:	603b      	str	r3, [r7, #0]
 800afe8:	4603      	mov	r3, r0
 800afea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800afec:	2301      	movs	r3, #1
 800afee:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800aff0:	f247 5030 	movw	r0, #30000	@ 0x7530
 800aff4:	f7ff ff8c 	bl	800af10 <SD_CheckStatusWithTimeout>
 800aff8:	4603      	mov	r3, r0
 800affa:	2b00      	cmp	r3, #0
 800affc:	da01      	bge.n	800b002 <SD_read+0x26>
  {
    return res;
 800affe:	7dfb      	ldrb	r3, [r7, #23]
 800b000:	e03b      	b.n	800b07a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b002:	683a      	ldr	r2, [r7, #0]
 800b004:	6879      	ldr	r1, [r7, #4]
 800b006:	68b8      	ldr	r0, [r7, #8]
 800b008:	f7ff fefe 	bl	800ae08 <BSP_SD_ReadBlocks_DMA>
 800b00c:	4603      	mov	r3, r0
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d132      	bne.n	800b078 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b012:	4b1c      	ldr	r3, [pc, #112]	@ (800b084 <SD_read+0xa8>)
 800b014:	2200      	movs	r2, #0
 800b016:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b018:	f7f8 fee8 	bl	8003dec <HAL_GetTick>
 800b01c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b01e:	bf00      	nop
 800b020:	4b18      	ldr	r3, [pc, #96]	@ (800b084 <SD_read+0xa8>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d108      	bne.n	800b03a <SD_read+0x5e>
 800b028:	f7f8 fee0 	bl	8003dec <HAL_GetTick>
 800b02c:	4602      	mov	r2, r0
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	1ad3      	subs	r3, r2, r3
 800b032:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b036:	4293      	cmp	r3, r2
 800b038:	d9f2      	bls.n	800b020 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800b03a:	4b12      	ldr	r3, [pc, #72]	@ (800b084 <SD_read+0xa8>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d102      	bne.n	800b048 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800b042:	2301      	movs	r3, #1
 800b044:	75fb      	strb	r3, [r7, #23]
 800b046:	e017      	b.n	800b078 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800b048:	4b0e      	ldr	r3, [pc, #56]	@ (800b084 <SD_read+0xa8>)
 800b04a:	2200      	movs	r2, #0
 800b04c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b04e:	f7f8 fecd 	bl	8003dec <HAL_GetTick>
 800b052:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b054:	e007      	b.n	800b066 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b056:	f7ff ff0b 	bl	800ae70 <BSP_SD_GetCardState>
 800b05a:	4603      	mov	r3, r0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d102      	bne.n	800b066 <SD_read+0x8a>
          {
            res = RES_OK;
 800b060:	2300      	movs	r3, #0
 800b062:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b064:	e008      	b.n	800b078 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b066:	f7f8 fec1 	bl	8003dec <HAL_GetTick>
 800b06a:	4602      	mov	r2, r0
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	1ad3      	subs	r3, r2, r3
 800b070:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b074:	4293      	cmp	r3, r2
 800b076:	d9ee      	bls.n	800b056 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800b078:	7dfb      	ldrb	r3, [r7, #23]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3718      	adds	r7, #24
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	20002b9c 	.word	0x20002b9c

0800b088 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b086      	sub	sp, #24
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60b9      	str	r1, [r7, #8]
 800b090:	607a      	str	r2, [r7, #4]
 800b092:	603b      	str	r3, [r7, #0]
 800b094:	4603      	mov	r3, r0
 800b096:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b098:	2301      	movs	r3, #1
 800b09a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800b09c:	4b24      	ldr	r3, [pc, #144]	@ (800b130 <SD_write+0xa8>)
 800b09e:	2200      	movs	r2, #0
 800b0a0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b0a2:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b0a6:	f7ff ff33 	bl	800af10 <SD_CheckStatusWithTimeout>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	da01      	bge.n	800b0b4 <SD_write+0x2c>
  {
    return res;
 800b0b0:	7dfb      	ldrb	r3, [r7, #23]
 800b0b2:	e038      	b.n	800b126 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b0b4:	683a      	ldr	r2, [r7, #0]
 800b0b6:	6879      	ldr	r1, [r7, #4]
 800b0b8:	68b8      	ldr	r0, [r7, #8]
 800b0ba:	f7ff febf 	bl	800ae3c <BSP_SD_WriteBlocks_DMA>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d12f      	bne.n	800b124 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800b0c4:	f7f8 fe92 	bl	8003dec <HAL_GetTick>
 800b0c8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b0ca:	bf00      	nop
 800b0cc:	4b18      	ldr	r3, [pc, #96]	@ (800b130 <SD_write+0xa8>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d108      	bne.n	800b0e6 <SD_write+0x5e>
 800b0d4:	f7f8 fe8a 	bl	8003dec <HAL_GetTick>
 800b0d8:	4602      	mov	r2, r0
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	1ad3      	subs	r3, r2, r3
 800b0de:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d9f2      	bls.n	800b0cc <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800b0e6:	4b12      	ldr	r3, [pc, #72]	@ (800b130 <SD_write+0xa8>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d102      	bne.n	800b0f4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	75fb      	strb	r3, [r7, #23]
 800b0f2:	e017      	b.n	800b124 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800b0f4:	4b0e      	ldr	r3, [pc, #56]	@ (800b130 <SD_write+0xa8>)
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b0fa:	f7f8 fe77 	bl	8003dec <HAL_GetTick>
 800b0fe:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b100:	e007      	b.n	800b112 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b102:	f7ff feb5 	bl	800ae70 <BSP_SD_GetCardState>
 800b106:	4603      	mov	r3, r0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d102      	bne.n	800b112 <SD_write+0x8a>
          {
            res = RES_OK;
 800b10c:	2300      	movs	r3, #0
 800b10e:	75fb      	strb	r3, [r7, #23]
            break;
 800b110:	e008      	b.n	800b124 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b112:	f7f8 fe6b 	bl	8003dec <HAL_GetTick>
 800b116:	4602      	mov	r2, r0
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	1ad3      	subs	r3, r2, r3
 800b11c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b120:	4293      	cmp	r3, r2
 800b122:	d9ee      	bls.n	800b102 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800b124:	7dfb      	ldrb	r3, [r7, #23]
}
 800b126:	4618      	mov	r0, r3
 800b128:	3718      	adds	r7, #24
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	20002b98 	.word	0x20002b98

0800b134 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b08c      	sub	sp, #48	@ 0x30
 800b138:	af00      	add	r7, sp, #0
 800b13a:	4603      	mov	r3, r0
 800b13c:	603a      	str	r2, [r7, #0]
 800b13e:	71fb      	strb	r3, [r7, #7]
 800b140:	460b      	mov	r3, r1
 800b142:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b144:	2301      	movs	r3, #1
 800b146:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b14a:	4b25      	ldr	r3, [pc, #148]	@ (800b1e0 <SD_ioctl+0xac>)
 800b14c:	781b      	ldrb	r3, [r3, #0]
 800b14e:	b2db      	uxtb	r3, r3
 800b150:	f003 0301 	and.w	r3, r3, #1
 800b154:	2b00      	cmp	r3, #0
 800b156:	d001      	beq.n	800b15c <SD_ioctl+0x28>
 800b158:	2303      	movs	r3, #3
 800b15a:	e03c      	b.n	800b1d6 <SD_ioctl+0xa2>

  switch (cmd)
 800b15c:	79bb      	ldrb	r3, [r7, #6]
 800b15e:	2b03      	cmp	r3, #3
 800b160:	d834      	bhi.n	800b1cc <SD_ioctl+0x98>
 800b162:	a201      	add	r2, pc, #4	@ (adr r2, 800b168 <SD_ioctl+0x34>)
 800b164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b168:	0800b179 	.word	0x0800b179
 800b16c:	0800b181 	.word	0x0800b181
 800b170:	0800b199 	.word	0x0800b199
 800b174:	0800b1b3 	.word	0x0800b1b3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b178:	2300      	movs	r3, #0
 800b17a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b17e:	e028      	b.n	800b1d2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b180:	f107 030c 	add.w	r3, r7, #12
 800b184:	4618      	mov	r0, r3
 800b186:	f7ff fe83 	bl	800ae90 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b18a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b190:	2300      	movs	r3, #0
 800b192:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b196:	e01c      	b.n	800b1d2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b198:	f107 030c 	add.w	r3, r7, #12
 800b19c:	4618      	mov	r0, r3
 800b19e:	f7ff fe77 	bl	800ae90 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1a4:	b29a      	uxth	r2, r3
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b1b0:	e00f      	b.n	800b1d2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b1b2:	f107 030c 	add.w	r3, r7, #12
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7ff fe6a 	bl	800ae90 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b1bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1be:	0a5a      	lsrs	r2, r3, #9
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b1ca:	e002      	b.n	800b1d2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b1cc:	2304      	movs	r3, #4
 800b1ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800b1d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3730      	adds	r7, #48	@ 0x30
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	20000011 	.word	0x20000011

0800b1e4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800b1e8:	4b03      	ldr	r3, [pc, #12]	@ (800b1f8 <BSP_SD_WriteCpltCallback+0x14>)
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	601a      	str	r2, [r3, #0]
}
 800b1ee:	bf00      	nop
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr
 800b1f8:	20002b98 	.word	0x20002b98

0800b1fc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800b200:	4b03      	ldr	r3, [pc, #12]	@ (800b210 <BSP_SD_ReadCpltCallback+0x14>)
 800b202:	2201      	movs	r2, #1
 800b204:	601a      	str	r2, [r3, #0]
}
 800b206:	bf00      	nop
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr
 800b210:	20002b9c 	.word	0x20002b9c

0800b214 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	4603      	mov	r3, r0
 800b21c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b21e:	79fb      	ldrb	r3, [r7, #7]
 800b220:	4a08      	ldr	r2, [pc, #32]	@ (800b244 <disk_status+0x30>)
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	4413      	add	r3, r2
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	79fa      	ldrb	r2, [r7, #7]
 800b22c:	4905      	ldr	r1, [pc, #20]	@ (800b244 <disk_status+0x30>)
 800b22e:	440a      	add	r2, r1
 800b230:	7a12      	ldrb	r2, [r2, #8]
 800b232:	4610      	mov	r0, r2
 800b234:	4798      	blx	r3
 800b236:	4603      	mov	r3, r0
 800b238:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b23a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3710      	adds	r7, #16
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}
 800b244:	20002bc8 	.word	0x20002bc8

0800b248 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	4603      	mov	r3, r0
 800b250:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b252:	2300      	movs	r3, #0
 800b254:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b256:	79fb      	ldrb	r3, [r7, #7]
 800b258:	4a0e      	ldr	r2, [pc, #56]	@ (800b294 <disk_initialize+0x4c>)
 800b25a:	5cd3      	ldrb	r3, [r2, r3]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d114      	bne.n	800b28a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b260:	79fb      	ldrb	r3, [r7, #7]
 800b262:	4a0c      	ldr	r2, [pc, #48]	@ (800b294 <disk_initialize+0x4c>)
 800b264:	009b      	lsls	r3, r3, #2
 800b266:	4413      	add	r3, r2
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	79fa      	ldrb	r2, [r7, #7]
 800b26e:	4909      	ldr	r1, [pc, #36]	@ (800b294 <disk_initialize+0x4c>)
 800b270:	440a      	add	r2, r1
 800b272:	7a12      	ldrb	r2, [r2, #8]
 800b274:	4610      	mov	r0, r2
 800b276:	4798      	blx	r3
 800b278:	4603      	mov	r3, r0
 800b27a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800b27c:	7bfb      	ldrb	r3, [r7, #15]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d103      	bne.n	800b28a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800b282:	79fb      	ldrb	r3, [r7, #7]
 800b284:	4a03      	ldr	r2, [pc, #12]	@ (800b294 <disk_initialize+0x4c>)
 800b286:	2101      	movs	r1, #1
 800b288:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800b28a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3710      	adds	r7, #16
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}
 800b294:	20002bc8 	.word	0x20002bc8

0800b298 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b298:	b590      	push	{r4, r7, lr}
 800b29a:	b087      	sub	sp, #28
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	60b9      	str	r1, [r7, #8]
 800b2a0:	607a      	str	r2, [r7, #4]
 800b2a2:	603b      	str	r3, [r7, #0]
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b2a8:	7bfb      	ldrb	r3, [r7, #15]
 800b2aa:	4a0a      	ldr	r2, [pc, #40]	@ (800b2d4 <disk_read+0x3c>)
 800b2ac:	009b      	lsls	r3, r3, #2
 800b2ae:	4413      	add	r3, r2
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	689c      	ldr	r4, [r3, #8]
 800b2b4:	7bfb      	ldrb	r3, [r7, #15]
 800b2b6:	4a07      	ldr	r2, [pc, #28]	@ (800b2d4 <disk_read+0x3c>)
 800b2b8:	4413      	add	r3, r2
 800b2ba:	7a18      	ldrb	r0, [r3, #8]
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	68b9      	ldr	r1, [r7, #8]
 800b2c2:	47a0      	blx	r4
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	75fb      	strb	r3, [r7, #23]
  return res;
 800b2c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	371c      	adds	r7, #28
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd90      	pop	{r4, r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	20002bc8 	.word	0x20002bc8

0800b2d8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b2d8:	b590      	push	{r4, r7, lr}
 800b2da:	b087      	sub	sp, #28
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	60b9      	str	r1, [r7, #8]
 800b2e0:	607a      	str	r2, [r7, #4]
 800b2e2:	603b      	str	r3, [r7, #0]
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b2e8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ea:	4a0a      	ldr	r2, [pc, #40]	@ (800b314 <disk_write+0x3c>)
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	4413      	add	r3, r2
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	68dc      	ldr	r4, [r3, #12]
 800b2f4:	7bfb      	ldrb	r3, [r7, #15]
 800b2f6:	4a07      	ldr	r2, [pc, #28]	@ (800b314 <disk_write+0x3c>)
 800b2f8:	4413      	add	r3, r2
 800b2fa:	7a18      	ldrb	r0, [r3, #8]
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	68b9      	ldr	r1, [r7, #8]
 800b302:	47a0      	blx	r4
 800b304:	4603      	mov	r3, r0
 800b306:	75fb      	strb	r3, [r7, #23]
  return res;
 800b308:	7dfb      	ldrb	r3, [r7, #23]
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	371c      	adds	r7, #28
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd90      	pop	{r4, r7, pc}
 800b312:	bf00      	nop
 800b314:	20002bc8 	.word	0x20002bc8

0800b318 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	4603      	mov	r3, r0
 800b320:	603a      	str	r2, [r7, #0]
 800b322:	71fb      	strb	r3, [r7, #7]
 800b324:	460b      	mov	r3, r1
 800b326:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b328:	79fb      	ldrb	r3, [r7, #7]
 800b32a:	4a09      	ldr	r2, [pc, #36]	@ (800b350 <disk_ioctl+0x38>)
 800b32c:	009b      	lsls	r3, r3, #2
 800b32e:	4413      	add	r3, r2
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	691b      	ldr	r3, [r3, #16]
 800b334:	79fa      	ldrb	r2, [r7, #7]
 800b336:	4906      	ldr	r1, [pc, #24]	@ (800b350 <disk_ioctl+0x38>)
 800b338:	440a      	add	r2, r1
 800b33a:	7a10      	ldrb	r0, [r2, #8]
 800b33c:	79b9      	ldrb	r1, [r7, #6]
 800b33e:	683a      	ldr	r2, [r7, #0]
 800b340:	4798      	blx	r3
 800b342:	4603      	mov	r3, r0
 800b344:	73fb      	strb	r3, [r7, #15]
  return res;
 800b346:	7bfb      	ldrb	r3, [r7, #15]
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3710      	adds	r7, #16
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	20002bc8 	.word	0x20002bc8

0800b354 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b354:	b480      	push	{r7}
 800b356:	b085      	sub	sp, #20
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	3301      	adds	r3, #1
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b364:	89fb      	ldrh	r3, [r7, #14]
 800b366:	021b      	lsls	r3, r3, #8
 800b368:	b21a      	sxth	r2, r3
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	b21b      	sxth	r3, r3
 800b370:	4313      	orrs	r3, r2
 800b372:	b21b      	sxth	r3, r3
 800b374:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b376:	89fb      	ldrh	r3, [r7, #14]
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3714      	adds	r7, #20
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr

0800b384 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b384:	b480      	push	{r7}
 800b386:	b085      	sub	sp, #20
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	3303      	adds	r3, #3
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	021b      	lsls	r3, r3, #8
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	3202      	adds	r2, #2
 800b39c:	7812      	ldrb	r2, [r2, #0]
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	021b      	lsls	r3, r3, #8
 800b3a6:	687a      	ldr	r2, [r7, #4]
 800b3a8:	3201      	adds	r2, #1
 800b3aa:	7812      	ldrb	r2, [r2, #0]
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	021b      	lsls	r3, r3, #8
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	7812      	ldrb	r2, [r2, #0]
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	60fb      	str	r3, [r7, #12]
	return rv;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3714      	adds	r7, #20
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr

0800b3ca <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b3ca:	b480      	push	{r7}
 800b3cc:	b083      	sub	sp, #12
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	1c5a      	adds	r2, r3, #1
 800b3da:	607a      	str	r2, [r7, #4]
 800b3dc:	887a      	ldrh	r2, [r7, #2]
 800b3de:	b2d2      	uxtb	r2, r2
 800b3e0:	701a      	strb	r2, [r3, #0]
 800b3e2:	887b      	ldrh	r3, [r7, #2]
 800b3e4:	0a1b      	lsrs	r3, r3, #8
 800b3e6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	1c5a      	adds	r2, r3, #1
 800b3ec:	607a      	str	r2, [r7, #4]
 800b3ee:	887a      	ldrh	r2, [r7, #2]
 800b3f0:	b2d2      	uxtb	r2, r2
 800b3f2:	701a      	strb	r2, [r3, #0]
}
 800b3f4:	bf00      	nop
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr

0800b400 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b400:	b480      	push	{r7}
 800b402:	b083      	sub	sp, #12
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	1c5a      	adds	r2, r3, #1
 800b40e:	607a      	str	r2, [r7, #4]
 800b410:	683a      	ldr	r2, [r7, #0]
 800b412:	b2d2      	uxtb	r2, r2
 800b414:	701a      	strb	r2, [r3, #0]
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	0a1b      	lsrs	r3, r3, #8
 800b41a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	1c5a      	adds	r2, r3, #1
 800b420:	607a      	str	r2, [r7, #4]
 800b422:	683a      	ldr	r2, [r7, #0]
 800b424:	b2d2      	uxtb	r2, r2
 800b426:	701a      	strb	r2, [r3, #0]
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	0a1b      	lsrs	r3, r3, #8
 800b42c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	1c5a      	adds	r2, r3, #1
 800b432:	607a      	str	r2, [r7, #4]
 800b434:	683a      	ldr	r2, [r7, #0]
 800b436:	b2d2      	uxtb	r2, r2
 800b438:	701a      	strb	r2, [r3, #0]
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	0a1b      	lsrs	r3, r3, #8
 800b43e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	1c5a      	adds	r2, r3, #1
 800b444:	607a      	str	r2, [r7, #4]
 800b446:	683a      	ldr	r2, [r7, #0]
 800b448:	b2d2      	uxtb	r2, r2
 800b44a:	701a      	strb	r2, [r3, #0]
}
 800b44c:	bf00      	nop
 800b44e:	370c      	adds	r7, #12
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b458:	b480      	push	{r7}
 800b45a:	b087      	sub	sp, #28
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	60b9      	str	r1, [r7, #8]
 800b462:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d00d      	beq.n	800b48e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b472:	693a      	ldr	r2, [r7, #16]
 800b474:	1c53      	adds	r3, r2, #1
 800b476:	613b      	str	r3, [r7, #16]
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	1c59      	adds	r1, r3, #1
 800b47c:	6179      	str	r1, [r7, #20]
 800b47e:	7812      	ldrb	r2, [r2, #0]
 800b480:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	3b01      	subs	r3, #1
 800b486:	607b      	str	r3, [r7, #4]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d1f1      	bne.n	800b472 <mem_cpy+0x1a>
	}
}
 800b48e:	bf00      	nop
 800b490:	371c      	adds	r7, #28
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr

0800b49a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b49a:	b480      	push	{r7}
 800b49c:	b087      	sub	sp, #28
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	60f8      	str	r0, [r7, #12]
 800b4a2:	60b9      	str	r1, [r7, #8]
 800b4a4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	1c5a      	adds	r2, r3, #1
 800b4ae:	617a      	str	r2, [r7, #20]
 800b4b0:	68ba      	ldr	r2, [r7, #8]
 800b4b2:	b2d2      	uxtb	r2, r2
 800b4b4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	3b01      	subs	r3, #1
 800b4ba:	607b      	str	r3, [r7, #4]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d1f3      	bne.n	800b4aa <mem_set+0x10>
}
 800b4c2:	bf00      	nop
 800b4c4:	bf00      	nop
 800b4c6:	371c      	adds	r7, #28
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr

0800b4d0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b4d0:	b480      	push	{r7}
 800b4d2:	b089      	sub	sp, #36	@ 0x24
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	60f8      	str	r0, [r7, #12]
 800b4d8:	60b9      	str	r1, [r7, #8]
 800b4da:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	61fb      	str	r3, [r7, #28]
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b4e8:	69fb      	ldr	r3, [r7, #28]
 800b4ea:	1c5a      	adds	r2, r3, #1
 800b4ec:	61fa      	str	r2, [r7, #28]
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	69bb      	ldr	r3, [r7, #24]
 800b4f4:	1c5a      	adds	r2, r3, #1
 800b4f6:	61ba      	str	r2, [r7, #24]
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	1acb      	subs	r3, r1, r3
 800b4fc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	3b01      	subs	r3, #1
 800b502:	607b      	str	r3, [r7, #4]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d002      	beq.n	800b510 <mem_cmp+0x40>
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d0eb      	beq.n	800b4e8 <mem_cmp+0x18>

	return r;
 800b510:	697b      	ldr	r3, [r7, #20]
}
 800b512:	4618      	mov	r0, r3
 800b514:	3724      	adds	r7, #36	@ 0x24
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr

0800b51e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b51e:	b480      	push	{r7}
 800b520:	b083      	sub	sp, #12
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
 800b526:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b528:	e002      	b.n	800b530 <chk_chr+0x12>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	3301      	adds	r3, #1
 800b52e:	607b      	str	r3, [r7, #4]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d005      	beq.n	800b544 <chk_chr+0x26>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	461a      	mov	r2, r3
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	4293      	cmp	r3, r2
 800b542:	d1f2      	bne.n	800b52a <chk_chr+0xc>
	return *str;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	781b      	ldrb	r3, [r3, #0]
}
 800b548:	4618      	mov	r0, r3
 800b54a:	370c      	adds	r7, #12
 800b54c:	46bd      	mov	sp, r7
 800b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b552:	4770      	bx	lr

0800b554 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b554:	b480      	push	{r7}
 800b556:	b085      	sub	sp, #20
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b55e:	2300      	movs	r3, #0
 800b560:	60bb      	str	r3, [r7, #8]
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	60fb      	str	r3, [r7, #12]
 800b566:	e029      	b.n	800b5bc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b568:	4a27      	ldr	r2, [pc, #156]	@ (800b608 <chk_lock+0xb4>)
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	011b      	lsls	r3, r3, #4
 800b56e:	4413      	add	r3, r2
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d01d      	beq.n	800b5b2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b576:	4a24      	ldr	r2, [pc, #144]	@ (800b608 <chk_lock+0xb4>)
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	011b      	lsls	r3, r3, #4
 800b57c:	4413      	add	r3, r2
 800b57e:	681a      	ldr	r2, [r3, #0]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	429a      	cmp	r2, r3
 800b586:	d116      	bne.n	800b5b6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b588:	4a1f      	ldr	r2, [pc, #124]	@ (800b608 <chk_lock+0xb4>)
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	011b      	lsls	r3, r3, #4
 800b58e:	4413      	add	r3, r2
 800b590:	3304      	adds	r3, #4
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b598:	429a      	cmp	r2, r3
 800b59a:	d10c      	bne.n	800b5b6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b59c:	4a1a      	ldr	r2, [pc, #104]	@ (800b608 <chk_lock+0xb4>)
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	011b      	lsls	r3, r3, #4
 800b5a2:	4413      	add	r3, r2
 800b5a4:	3308      	adds	r3, #8
 800b5a6:	681a      	ldr	r2, [r3, #0]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d102      	bne.n	800b5b6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b5b0:	e007      	b.n	800b5c2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	60fb      	str	r3, [r7, #12]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2b01      	cmp	r3, #1
 800b5c0:	d9d2      	bls.n	800b568 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2b02      	cmp	r3, #2
 800b5c6:	d109      	bne.n	800b5dc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d102      	bne.n	800b5d4 <chk_lock+0x80>
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	2b02      	cmp	r3, #2
 800b5d2:	d101      	bne.n	800b5d8 <chk_lock+0x84>
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	e010      	b.n	800b5fa <chk_lock+0xa6>
 800b5d8:	2312      	movs	r3, #18
 800b5da:	e00e      	b.n	800b5fa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d108      	bne.n	800b5f4 <chk_lock+0xa0>
 800b5e2:	4a09      	ldr	r2, [pc, #36]	@ (800b608 <chk_lock+0xb4>)
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	011b      	lsls	r3, r3, #4
 800b5e8:	4413      	add	r3, r2
 800b5ea:	330c      	adds	r3, #12
 800b5ec:	881b      	ldrh	r3, [r3, #0]
 800b5ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5f2:	d101      	bne.n	800b5f8 <chk_lock+0xa4>
 800b5f4:	2310      	movs	r3, #16
 800b5f6:	e000      	b.n	800b5fa <chk_lock+0xa6>
 800b5f8:	2300      	movs	r3, #0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3714      	adds	r7, #20
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr
 800b606:	bf00      	nop
 800b608:	20002ba8 	.word	0x20002ba8

0800b60c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b60c:	b480      	push	{r7}
 800b60e:	b083      	sub	sp, #12
 800b610:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b612:	2300      	movs	r3, #0
 800b614:	607b      	str	r3, [r7, #4]
 800b616:	e002      	b.n	800b61e <enq_lock+0x12>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	3301      	adds	r3, #1
 800b61c:	607b      	str	r3, [r7, #4]
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2b01      	cmp	r3, #1
 800b622:	d806      	bhi.n	800b632 <enq_lock+0x26>
 800b624:	4a09      	ldr	r2, [pc, #36]	@ (800b64c <enq_lock+0x40>)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	011b      	lsls	r3, r3, #4
 800b62a:	4413      	add	r3, r2
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d1f2      	bne.n	800b618 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2b02      	cmp	r3, #2
 800b636:	bf14      	ite	ne
 800b638:	2301      	movne	r3, #1
 800b63a:	2300      	moveq	r3, #0
 800b63c:	b2db      	uxtb	r3, r3
}
 800b63e:	4618      	mov	r0, r3
 800b640:	370c      	adds	r7, #12
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr
 800b64a:	bf00      	nop
 800b64c:	20002ba8 	.word	0x20002ba8

0800b650 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b650:	b480      	push	{r7}
 800b652:	b085      	sub	sp, #20
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b65a:	2300      	movs	r3, #0
 800b65c:	60fb      	str	r3, [r7, #12]
 800b65e:	e01f      	b.n	800b6a0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b660:	4a41      	ldr	r2, [pc, #260]	@ (800b768 <inc_lock+0x118>)
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	011b      	lsls	r3, r3, #4
 800b666:	4413      	add	r3, r2
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	429a      	cmp	r2, r3
 800b670:	d113      	bne.n	800b69a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b672:	4a3d      	ldr	r2, [pc, #244]	@ (800b768 <inc_lock+0x118>)
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	011b      	lsls	r3, r3, #4
 800b678:	4413      	add	r3, r2
 800b67a:	3304      	adds	r3, #4
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b682:	429a      	cmp	r2, r3
 800b684:	d109      	bne.n	800b69a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b686:	4a38      	ldr	r2, [pc, #224]	@ (800b768 <inc_lock+0x118>)
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	011b      	lsls	r3, r3, #4
 800b68c:	4413      	add	r3, r2
 800b68e:	3308      	adds	r3, #8
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b696:	429a      	cmp	r2, r3
 800b698:	d006      	beq.n	800b6a8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	3301      	adds	r3, #1
 800b69e:	60fb      	str	r3, [r7, #12]
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2b01      	cmp	r3, #1
 800b6a4:	d9dc      	bls.n	800b660 <inc_lock+0x10>
 800b6a6:	e000      	b.n	800b6aa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b6a8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2b02      	cmp	r3, #2
 800b6ae:	d132      	bne.n	800b716 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	60fb      	str	r3, [r7, #12]
 800b6b4:	e002      	b.n	800b6bc <inc_lock+0x6c>
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	3301      	adds	r3, #1
 800b6ba:	60fb      	str	r3, [r7, #12]
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2b01      	cmp	r3, #1
 800b6c0:	d806      	bhi.n	800b6d0 <inc_lock+0x80>
 800b6c2:	4a29      	ldr	r2, [pc, #164]	@ (800b768 <inc_lock+0x118>)
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	011b      	lsls	r3, r3, #4
 800b6c8:	4413      	add	r3, r2
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d1f2      	bne.n	800b6b6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	2b02      	cmp	r3, #2
 800b6d4:	d101      	bne.n	800b6da <inc_lock+0x8a>
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	e040      	b.n	800b75c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	4922      	ldr	r1, [pc, #136]	@ (800b768 <inc_lock+0x118>)
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	011b      	lsls	r3, r3, #4
 800b6e4:	440b      	add	r3, r1
 800b6e6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	689a      	ldr	r2, [r3, #8]
 800b6ec:	491e      	ldr	r1, [pc, #120]	@ (800b768 <inc_lock+0x118>)
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	011b      	lsls	r3, r3, #4
 800b6f2:	440b      	add	r3, r1
 800b6f4:	3304      	adds	r3, #4
 800b6f6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	695a      	ldr	r2, [r3, #20]
 800b6fc:	491a      	ldr	r1, [pc, #104]	@ (800b768 <inc_lock+0x118>)
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	011b      	lsls	r3, r3, #4
 800b702:	440b      	add	r3, r1
 800b704:	3308      	adds	r3, #8
 800b706:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b708:	4a17      	ldr	r2, [pc, #92]	@ (800b768 <inc_lock+0x118>)
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	011b      	lsls	r3, r3, #4
 800b70e:	4413      	add	r3, r2
 800b710:	330c      	adds	r3, #12
 800b712:	2200      	movs	r2, #0
 800b714:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d009      	beq.n	800b730 <inc_lock+0xe0>
 800b71c:	4a12      	ldr	r2, [pc, #72]	@ (800b768 <inc_lock+0x118>)
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	011b      	lsls	r3, r3, #4
 800b722:	4413      	add	r3, r2
 800b724:	330c      	adds	r3, #12
 800b726:	881b      	ldrh	r3, [r3, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d001      	beq.n	800b730 <inc_lock+0xe0>
 800b72c:	2300      	movs	r3, #0
 800b72e:	e015      	b.n	800b75c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d108      	bne.n	800b748 <inc_lock+0xf8>
 800b736:	4a0c      	ldr	r2, [pc, #48]	@ (800b768 <inc_lock+0x118>)
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	011b      	lsls	r3, r3, #4
 800b73c:	4413      	add	r3, r2
 800b73e:	330c      	adds	r3, #12
 800b740:	881b      	ldrh	r3, [r3, #0]
 800b742:	3301      	adds	r3, #1
 800b744:	b29a      	uxth	r2, r3
 800b746:	e001      	b.n	800b74c <inc_lock+0xfc>
 800b748:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b74c:	4906      	ldr	r1, [pc, #24]	@ (800b768 <inc_lock+0x118>)
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	011b      	lsls	r3, r3, #4
 800b752:	440b      	add	r3, r1
 800b754:	330c      	adds	r3, #12
 800b756:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	3301      	adds	r3, #1
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3714      	adds	r7, #20
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr
 800b768:	20002ba8 	.word	0x20002ba8

0800b76c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b085      	sub	sp, #20
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	3b01      	subs	r3, #1
 800b778:	607b      	str	r3, [r7, #4]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	d825      	bhi.n	800b7cc <dec_lock+0x60>
		n = Files[i].ctr;
 800b780:	4a17      	ldr	r2, [pc, #92]	@ (800b7e0 <dec_lock+0x74>)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	011b      	lsls	r3, r3, #4
 800b786:	4413      	add	r3, r2
 800b788:	330c      	adds	r3, #12
 800b78a:	881b      	ldrh	r3, [r3, #0]
 800b78c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b78e:	89fb      	ldrh	r3, [r7, #14]
 800b790:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b794:	d101      	bne.n	800b79a <dec_lock+0x2e>
 800b796:	2300      	movs	r3, #0
 800b798:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b79a:	89fb      	ldrh	r3, [r7, #14]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d002      	beq.n	800b7a6 <dec_lock+0x3a>
 800b7a0:	89fb      	ldrh	r3, [r7, #14]
 800b7a2:	3b01      	subs	r3, #1
 800b7a4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b7a6:	4a0e      	ldr	r2, [pc, #56]	@ (800b7e0 <dec_lock+0x74>)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	011b      	lsls	r3, r3, #4
 800b7ac:	4413      	add	r3, r2
 800b7ae:	330c      	adds	r3, #12
 800b7b0:	89fa      	ldrh	r2, [r7, #14]
 800b7b2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b7b4:	89fb      	ldrh	r3, [r7, #14]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d105      	bne.n	800b7c6 <dec_lock+0x5a>
 800b7ba:	4a09      	ldr	r2, [pc, #36]	@ (800b7e0 <dec_lock+0x74>)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	011b      	lsls	r3, r3, #4
 800b7c0:	4413      	add	r3, r2
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	737b      	strb	r3, [r7, #13]
 800b7ca:	e001      	b.n	800b7d0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b7cc:	2302      	movs	r3, #2
 800b7ce:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b7d0:	7b7b      	ldrb	r3, [r7, #13]
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3714      	adds	r7, #20
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7dc:	4770      	bx	lr
 800b7de:	bf00      	nop
 800b7e0:	20002ba8 	.word	0x20002ba8

0800b7e4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b085      	sub	sp, #20
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	60fb      	str	r3, [r7, #12]
 800b7f0:	e010      	b.n	800b814 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b7f2:	4a0d      	ldr	r2, [pc, #52]	@ (800b828 <clear_lock+0x44>)
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	011b      	lsls	r3, r3, #4
 800b7f8:	4413      	add	r3, r2
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	687a      	ldr	r2, [r7, #4]
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d105      	bne.n	800b80e <clear_lock+0x2a>
 800b802:	4a09      	ldr	r2, [pc, #36]	@ (800b828 <clear_lock+0x44>)
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	011b      	lsls	r3, r3, #4
 800b808:	4413      	add	r3, r2
 800b80a:	2200      	movs	r2, #0
 800b80c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	3301      	adds	r3, #1
 800b812:	60fb      	str	r3, [r7, #12]
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2b01      	cmp	r3, #1
 800b818:	d9eb      	bls.n	800b7f2 <clear_lock+0xe>
	}
}
 800b81a:	bf00      	nop
 800b81c:	bf00      	nop
 800b81e:	3714      	adds	r7, #20
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr
 800b828:	20002ba8 	.word	0x20002ba8

0800b82c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b086      	sub	sp, #24
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b834:	2300      	movs	r3, #0
 800b836:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	78db      	ldrb	r3, [r3, #3]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d034      	beq.n	800b8aa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b844:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	7858      	ldrb	r0, [r3, #1]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b850:	2301      	movs	r3, #1
 800b852:	697a      	ldr	r2, [r7, #20]
 800b854:	f7ff fd40 	bl	800b2d8 <disk_write>
 800b858:	4603      	mov	r3, r0
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d002      	beq.n	800b864 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b85e:	2301      	movs	r3, #1
 800b860:	73fb      	strb	r3, [r7, #15]
 800b862:	e022      	b.n	800b8aa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2200      	movs	r2, #0
 800b868:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b86e:	697a      	ldr	r2, [r7, #20]
 800b870:	1ad2      	subs	r2, r2, r3
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	69db      	ldr	r3, [r3, #28]
 800b876:	429a      	cmp	r2, r3
 800b878:	d217      	bcs.n	800b8aa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	789b      	ldrb	r3, [r3, #2]
 800b87e:	613b      	str	r3, [r7, #16]
 800b880:	e010      	b.n	800b8a4 <sync_window+0x78>
					wsect += fs->fsize;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	69db      	ldr	r3, [r3, #28]
 800b886:	697a      	ldr	r2, [r7, #20]
 800b888:	4413      	add	r3, r2
 800b88a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	7858      	ldrb	r0, [r3, #1]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b896:	2301      	movs	r3, #1
 800b898:	697a      	ldr	r2, [r7, #20]
 800b89a:	f7ff fd1d 	bl	800b2d8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	3b01      	subs	r3, #1
 800b8a2:	613b      	str	r3, [r7, #16]
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	2b01      	cmp	r3, #1
 800b8a8:	d8eb      	bhi.n	800b882 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b8aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3718      	adds	r7, #24
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8c6:	683a      	ldr	r2, [r7, #0]
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d01b      	beq.n	800b904 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f7ff ffad 	bl	800b82c <sync_window>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b8d6:	7bfb      	ldrb	r3, [r7, #15]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d113      	bne.n	800b904 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	7858      	ldrb	r0, [r3, #1]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	683a      	ldr	r2, [r7, #0]
 800b8ea:	f7ff fcd5 	bl	800b298 <disk_read>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d004      	beq.n	800b8fe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b8f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b8f8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	683a      	ldr	r2, [r7, #0]
 800b902:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800b904:	7bfb      	ldrb	r3, [r7, #15]
}
 800b906:	4618      	mov	r0, r3
 800b908:	3710      	adds	r7, #16
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}
	...

0800b910 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b084      	sub	sp, #16
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f7ff ff87 	bl	800b82c <sync_window>
 800b91e:	4603      	mov	r3, r0
 800b920:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b922:	7bfb      	ldrb	r3, [r7, #15]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d159      	bne.n	800b9dc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	2b03      	cmp	r3, #3
 800b92e:	d149      	bne.n	800b9c4 <sync_fs+0xb4>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	791b      	ldrb	r3, [r3, #4]
 800b934:	2b01      	cmp	r3, #1
 800b936:	d145      	bne.n	800b9c4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	899b      	ldrh	r3, [r3, #12]
 800b942:	461a      	mov	r2, r3
 800b944:	2100      	movs	r1, #0
 800b946:	f7ff fda8 	bl	800b49a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	3334      	adds	r3, #52	@ 0x34
 800b94e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b952:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b956:	4618      	mov	r0, r3
 800b958:	f7ff fd37 	bl	800b3ca <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	3334      	adds	r3, #52	@ 0x34
 800b960:	4921      	ldr	r1, [pc, #132]	@ (800b9e8 <sync_fs+0xd8>)
 800b962:	4618      	mov	r0, r3
 800b964:	f7ff fd4c 	bl	800b400 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	3334      	adds	r3, #52	@ 0x34
 800b96c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b970:	491e      	ldr	r1, [pc, #120]	@ (800b9ec <sync_fs+0xdc>)
 800b972:	4618      	mov	r0, r3
 800b974:	f7ff fd44 	bl	800b400 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	3334      	adds	r3, #52	@ 0x34
 800b97c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	695b      	ldr	r3, [r3, #20]
 800b984:	4619      	mov	r1, r3
 800b986:	4610      	mov	r0, r2
 800b988:	f7ff fd3a 	bl	800b400 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	3334      	adds	r3, #52	@ 0x34
 800b990:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	691b      	ldr	r3, [r3, #16]
 800b998:	4619      	mov	r1, r3
 800b99a:	4610      	mov	r0, r2
 800b99c:	f7ff fd30 	bl	800b400 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6a1b      	ldr	r3, [r3, #32]
 800b9a4:	1c5a      	adds	r2, r3, #1
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	7858      	ldrb	r0, [r3, #1]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	f7ff fc8d 	bl	800b2d8 <disk_write>
			fs->fsi_flag = 0;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	785b      	ldrb	r3, [r3, #1]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	2100      	movs	r1, #0
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7ff fca3 	bl	800b318 <disk_ioctl>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d001      	beq.n	800b9dc <sync_fs+0xcc>
 800b9d8:	2301      	movs	r3, #1
 800b9da:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b9dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3710      	adds	r7, #16
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	41615252 	.word	0x41615252
 800b9ec:	61417272 	.word	0x61417272

0800b9f0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	3b02      	subs	r3, #2
 800b9fe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	699b      	ldr	r3, [r3, #24]
 800ba04:	3b02      	subs	r3, #2
 800ba06:	683a      	ldr	r2, [r7, #0]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d301      	bcc.n	800ba10 <clust2sect+0x20>
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	e008      	b.n	800ba22 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	895b      	ldrh	r3, [r3, #10]
 800ba14:	461a      	mov	r2, r3
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	fb03 f202 	mul.w	r2, r3, r2
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba20:	4413      	add	r3, r2
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	370c      	adds	r7, #12
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr

0800ba2e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ba2e:	b580      	push	{r7, lr}
 800ba30:	b086      	sub	sp, #24
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
 800ba36:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d904      	bls.n	800ba4e <get_fat+0x20>
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	699b      	ldr	r3, [r3, #24]
 800ba48:	683a      	ldr	r2, [r7, #0]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d302      	bcc.n	800ba54 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ba4e:	2301      	movs	r3, #1
 800ba50:	617b      	str	r3, [r7, #20]
 800ba52:	e0ba      	b.n	800bbca <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ba54:	f04f 33ff 	mov.w	r3, #4294967295
 800ba58:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	2b03      	cmp	r3, #3
 800ba60:	f000 8082 	beq.w	800bb68 <get_fat+0x13a>
 800ba64:	2b03      	cmp	r3, #3
 800ba66:	f300 80a6 	bgt.w	800bbb6 <get_fat+0x188>
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d002      	beq.n	800ba74 <get_fat+0x46>
 800ba6e:	2b02      	cmp	r3, #2
 800ba70:	d055      	beq.n	800bb1e <get_fat+0xf0>
 800ba72:	e0a0      	b.n	800bbb6 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	60fb      	str	r3, [r7, #12]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	085b      	lsrs	r3, r3, #1
 800ba7c:	68fa      	ldr	r2, [r7, #12]
 800ba7e:	4413      	add	r3, r2
 800ba80:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	899b      	ldrh	r3, [r3, #12]
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba92:	4413      	add	r3, r2
 800ba94:	4619      	mov	r1, r3
 800ba96:	6938      	ldr	r0, [r7, #16]
 800ba98:	f7ff ff0c 	bl	800b8b4 <move_window>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	f040 808c 	bne.w	800bbbc <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	1c5a      	adds	r2, r3, #1
 800baa8:	60fa      	str	r2, [r7, #12]
 800baaa:	693a      	ldr	r2, [r7, #16]
 800baac:	8992      	ldrh	r2, [r2, #12]
 800baae:	fbb3 f1f2 	udiv	r1, r3, r2
 800bab2:	fb01 f202 	mul.w	r2, r1, r2
 800bab6:	1a9b      	subs	r3, r3, r2
 800bab8:	693a      	ldr	r2, [r7, #16]
 800baba:	4413      	add	r3, r2
 800babc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bac0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	899b      	ldrh	r3, [r3, #12]
 800baca:	4619      	mov	r1, r3
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	fbb3 f3f1 	udiv	r3, r3, r1
 800bad2:	4413      	add	r3, r2
 800bad4:	4619      	mov	r1, r3
 800bad6:	6938      	ldr	r0, [r7, #16]
 800bad8:	f7ff feec 	bl	800b8b4 <move_window>
 800badc:	4603      	mov	r3, r0
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d16e      	bne.n	800bbc0 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	899b      	ldrh	r3, [r3, #12]
 800bae6:	461a      	mov	r2, r3
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	fbb3 f1f2 	udiv	r1, r3, r2
 800baee:	fb01 f202 	mul.w	r2, r1, r2
 800baf2:	1a9b      	subs	r3, r3, r2
 800baf4:	693a      	ldr	r2, [r7, #16]
 800baf6:	4413      	add	r3, r2
 800baf8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bafc:	021b      	lsls	r3, r3, #8
 800bafe:	68ba      	ldr	r2, [r7, #8]
 800bb00:	4313      	orrs	r3, r2
 800bb02:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	f003 0301 	and.w	r3, r3, #1
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d002      	beq.n	800bb14 <get_fat+0xe6>
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	091b      	lsrs	r3, r3, #4
 800bb12:	e002      	b.n	800bb1a <get_fat+0xec>
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bb1a:	617b      	str	r3, [r7, #20]
			break;
 800bb1c:	e055      	b.n	800bbca <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	899b      	ldrh	r3, [r3, #12]
 800bb26:	085b      	lsrs	r3, r3, #1
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb32:	4413      	add	r3, r2
 800bb34:	4619      	mov	r1, r3
 800bb36:	6938      	ldr	r0, [r7, #16]
 800bb38:	f7ff febc 	bl	800b8b4 <move_window>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d140      	bne.n	800bbc4 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	005b      	lsls	r3, r3, #1
 800bb4c:	693a      	ldr	r2, [r7, #16]
 800bb4e:	8992      	ldrh	r2, [r2, #12]
 800bb50:	fbb3 f0f2 	udiv	r0, r3, r2
 800bb54:	fb00 f202 	mul.w	r2, r0, r2
 800bb58:	1a9b      	subs	r3, r3, r2
 800bb5a:	440b      	add	r3, r1
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7ff fbf9 	bl	800b354 <ld_word>
 800bb62:	4603      	mov	r3, r0
 800bb64:	617b      	str	r3, [r7, #20]
			break;
 800bb66:	e030      	b.n	800bbca <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	899b      	ldrh	r3, [r3, #12]
 800bb70:	089b      	lsrs	r3, r3, #2
 800bb72:	b29b      	uxth	r3, r3
 800bb74:	4619      	mov	r1, r3
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb7c:	4413      	add	r3, r2
 800bb7e:	4619      	mov	r1, r3
 800bb80:	6938      	ldr	r0, [r7, #16]
 800bb82:	f7ff fe97 	bl	800b8b4 <move_window>
 800bb86:	4603      	mov	r3, r0
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d11d      	bne.n	800bbc8 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	009b      	lsls	r3, r3, #2
 800bb96:	693a      	ldr	r2, [r7, #16]
 800bb98:	8992      	ldrh	r2, [r2, #12]
 800bb9a:	fbb3 f0f2 	udiv	r0, r3, r2
 800bb9e:	fb00 f202 	mul.w	r2, r0, r2
 800bba2:	1a9b      	subs	r3, r3, r2
 800bba4:	440b      	add	r3, r1
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7ff fbec 	bl	800b384 <ld_dword>
 800bbac:	4603      	mov	r3, r0
 800bbae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800bbb2:	617b      	str	r3, [r7, #20]
			break;
 800bbb4:	e009      	b.n	800bbca <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	617b      	str	r3, [r7, #20]
 800bbba:	e006      	b.n	800bbca <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bbbc:	bf00      	nop
 800bbbe:	e004      	b.n	800bbca <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bbc0:	bf00      	nop
 800bbc2:	e002      	b.n	800bbca <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bbc4:	bf00      	nop
 800bbc6:	e000      	b.n	800bbca <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bbc8:	bf00      	nop
		}
	}

	return val;
 800bbca:	697b      	ldr	r3, [r7, #20]
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3718      	adds	r7, #24
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bbd4:	b590      	push	{r4, r7, lr}
 800bbd6:	b089      	sub	sp, #36	@ 0x24
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	60b9      	str	r1, [r7, #8]
 800bbde:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bbe0:	2302      	movs	r3, #2
 800bbe2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	f240 8109 	bls.w	800bdfe <put_fat+0x22a>
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	699b      	ldr	r3, [r3, #24]
 800bbf0:	68ba      	ldr	r2, [r7, #8]
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	f080 8103 	bcs.w	800bdfe <put_fat+0x22a>
		switch (fs->fs_type) {
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	2b03      	cmp	r3, #3
 800bbfe:	f000 80b6 	beq.w	800bd6e <put_fat+0x19a>
 800bc02:	2b03      	cmp	r3, #3
 800bc04:	f300 80fb 	bgt.w	800bdfe <put_fat+0x22a>
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d003      	beq.n	800bc14 <put_fat+0x40>
 800bc0c:	2b02      	cmp	r3, #2
 800bc0e:	f000 8083 	beq.w	800bd18 <put_fat+0x144>
 800bc12:	e0f4      	b.n	800bdfe <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	61bb      	str	r3, [r7, #24]
 800bc18:	69bb      	ldr	r3, [r7, #24]
 800bc1a:	085b      	lsrs	r3, r3, #1
 800bc1c:	69ba      	ldr	r2, [r7, #24]
 800bc1e:	4413      	add	r3, r2
 800bc20:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	899b      	ldrh	r3, [r3, #12]
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	69bb      	ldr	r3, [r7, #24]
 800bc2e:	fbb3 f3f1 	udiv	r3, r3, r1
 800bc32:	4413      	add	r3, r2
 800bc34:	4619      	mov	r1, r3
 800bc36:	68f8      	ldr	r0, [r7, #12]
 800bc38:	f7ff fe3c 	bl	800b8b4 <move_window>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bc40:	7ffb      	ldrb	r3, [r7, #31]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	f040 80d4 	bne.w	800bdf0 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bc4e:	69bb      	ldr	r3, [r7, #24]
 800bc50:	1c5a      	adds	r2, r3, #1
 800bc52:	61ba      	str	r2, [r7, #24]
 800bc54:	68fa      	ldr	r2, [r7, #12]
 800bc56:	8992      	ldrh	r2, [r2, #12]
 800bc58:	fbb3 f0f2 	udiv	r0, r3, r2
 800bc5c:	fb00 f202 	mul.w	r2, r0, r2
 800bc60:	1a9b      	subs	r3, r3, r2
 800bc62:	440b      	add	r3, r1
 800bc64:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	f003 0301 	and.w	r3, r3, #1
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d00d      	beq.n	800bc8c <put_fat+0xb8>
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	781b      	ldrb	r3, [r3, #0]
 800bc74:	b25b      	sxtb	r3, r3
 800bc76:	f003 030f 	and.w	r3, r3, #15
 800bc7a:	b25a      	sxtb	r2, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	b2db      	uxtb	r3, r3
 800bc80:	011b      	lsls	r3, r3, #4
 800bc82:	b25b      	sxtb	r3, r3
 800bc84:	4313      	orrs	r3, r2
 800bc86:	b25b      	sxtb	r3, r3
 800bc88:	b2db      	uxtb	r3, r3
 800bc8a:	e001      	b.n	800bc90 <put_fat+0xbc>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	b2db      	uxtb	r3, r3
 800bc90:	697a      	ldr	r2, [r7, #20]
 800bc92:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2201      	movs	r2, #1
 800bc98:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	899b      	ldrh	r3, [r3, #12]
 800bca2:	4619      	mov	r1, r3
 800bca4:	69bb      	ldr	r3, [r7, #24]
 800bca6:	fbb3 f3f1 	udiv	r3, r3, r1
 800bcaa:	4413      	add	r3, r2
 800bcac:	4619      	mov	r1, r3
 800bcae:	68f8      	ldr	r0, [r7, #12]
 800bcb0:	f7ff fe00 	bl	800b8b4 <move_window>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bcb8:	7ffb      	ldrb	r3, [r7, #31]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	f040 809a 	bne.w	800bdf4 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	899b      	ldrh	r3, [r3, #12]
 800bcca:	461a      	mov	r2, r3
 800bccc:	69bb      	ldr	r3, [r7, #24]
 800bcce:	fbb3 f0f2 	udiv	r0, r3, r2
 800bcd2:	fb00 f202 	mul.w	r2, r0, r2
 800bcd6:	1a9b      	subs	r3, r3, r2
 800bcd8:	440b      	add	r3, r1
 800bcda:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	f003 0301 	and.w	r3, r3, #1
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d003      	beq.n	800bcee <put_fat+0x11a>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	091b      	lsrs	r3, r3, #4
 800bcea:	b2db      	uxtb	r3, r3
 800bcec:	e00e      	b.n	800bd0c <put_fat+0x138>
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	b25b      	sxtb	r3, r3
 800bcf4:	f023 030f 	bic.w	r3, r3, #15
 800bcf8:	b25a      	sxtb	r2, r3
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	0a1b      	lsrs	r3, r3, #8
 800bcfe:	b25b      	sxtb	r3, r3
 800bd00:	f003 030f 	and.w	r3, r3, #15
 800bd04:	b25b      	sxtb	r3, r3
 800bd06:	4313      	orrs	r3, r2
 800bd08:	b25b      	sxtb	r3, r3
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	697a      	ldr	r2, [r7, #20]
 800bd0e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2201      	movs	r2, #1
 800bd14:	70da      	strb	r2, [r3, #3]
			break;
 800bd16:	e072      	b.n	800bdfe <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	899b      	ldrh	r3, [r3, #12]
 800bd20:	085b      	lsrs	r3, r3, #1
 800bd22:	b29b      	uxth	r3, r3
 800bd24:	4619      	mov	r1, r3
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd2c:	4413      	add	r3, r2
 800bd2e:	4619      	mov	r1, r3
 800bd30:	68f8      	ldr	r0, [r7, #12]
 800bd32:	f7ff fdbf 	bl	800b8b4 <move_window>
 800bd36:	4603      	mov	r3, r0
 800bd38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd3a:	7ffb      	ldrb	r3, [r7, #31]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d15b      	bne.n	800bdf8 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	005b      	lsls	r3, r3, #1
 800bd4a:	68fa      	ldr	r2, [r7, #12]
 800bd4c:	8992      	ldrh	r2, [r2, #12]
 800bd4e:	fbb3 f0f2 	udiv	r0, r3, r2
 800bd52:	fb00 f202 	mul.w	r2, r0, r2
 800bd56:	1a9b      	subs	r3, r3, r2
 800bd58:	440b      	add	r3, r1
 800bd5a:	687a      	ldr	r2, [r7, #4]
 800bd5c:	b292      	uxth	r2, r2
 800bd5e:	4611      	mov	r1, r2
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7ff fb32 	bl	800b3ca <st_word>
			fs->wflag = 1;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2201      	movs	r2, #1
 800bd6a:	70da      	strb	r2, [r3, #3]
			break;
 800bd6c:	e047      	b.n	800bdfe <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	899b      	ldrh	r3, [r3, #12]
 800bd76:	089b      	lsrs	r3, r3, #2
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd82:	4413      	add	r3, r2
 800bd84:	4619      	mov	r1, r3
 800bd86:	68f8      	ldr	r0, [r7, #12]
 800bd88:	f7ff fd94 	bl	800b8b4 <move_window>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd90:	7ffb      	ldrb	r3, [r7, #31]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d132      	bne.n	800bdfc <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	009b      	lsls	r3, r3, #2
 800bda6:	68fa      	ldr	r2, [r7, #12]
 800bda8:	8992      	ldrh	r2, [r2, #12]
 800bdaa:	fbb3 f0f2 	udiv	r0, r3, r2
 800bdae:	fb00 f202 	mul.w	r2, r0, r2
 800bdb2:	1a9b      	subs	r3, r3, r2
 800bdb4:	440b      	add	r3, r1
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7ff fae4 	bl	800b384 <ld_dword>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800bdc2:	4323      	orrs	r3, r4
 800bdc4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	009b      	lsls	r3, r3, #2
 800bdd0:	68fa      	ldr	r2, [r7, #12]
 800bdd2:	8992      	ldrh	r2, [r2, #12]
 800bdd4:	fbb3 f0f2 	udiv	r0, r3, r2
 800bdd8:	fb00 f202 	mul.w	r2, r0, r2
 800bddc:	1a9b      	subs	r3, r3, r2
 800bdde:	440b      	add	r3, r1
 800bde0:	6879      	ldr	r1, [r7, #4]
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7ff fb0c 	bl	800b400 <st_dword>
			fs->wflag = 1;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	2201      	movs	r2, #1
 800bdec:	70da      	strb	r2, [r3, #3]
			break;
 800bdee:	e006      	b.n	800bdfe <put_fat+0x22a>
			if (res != FR_OK) break;
 800bdf0:	bf00      	nop
 800bdf2:	e004      	b.n	800bdfe <put_fat+0x22a>
			if (res != FR_OK) break;
 800bdf4:	bf00      	nop
 800bdf6:	e002      	b.n	800bdfe <put_fat+0x22a>
			if (res != FR_OK) break;
 800bdf8:	bf00      	nop
 800bdfa:	e000      	b.n	800bdfe <put_fat+0x22a>
			if (res != FR_OK) break;
 800bdfc:	bf00      	nop
		}
	}
	return res;
 800bdfe:	7ffb      	ldrb	r3, [r7, #31]
}
 800be00:	4618      	mov	r0, r3
 800be02:	3724      	adds	r7, #36	@ 0x24
 800be04:	46bd      	mov	sp, r7
 800be06:	bd90      	pop	{r4, r7, pc}

0800be08 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b088      	sub	sp, #32
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	60f8      	str	r0, [r7, #12]
 800be10:	60b9      	str	r1, [r7, #8]
 800be12:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800be14:	2300      	movs	r3, #0
 800be16:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	2b01      	cmp	r3, #1
 800be22:	d904      	bls.n	800be2e <remove_chain+0x26>
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	699b      	ldr	r3, [r3, #24]
 800be28:	68ba      	ldr	r2, [r7, #8]
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d301      	bcc.n	800be32 <remove_chain+0x2a>
 800be2e:	2302      	movs	r3, #2
 800be30:	e04b      	b.n	800beca <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d00c      	beq.n	800be52 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800be38:	f04f 32ff 	mov.w	r2, #4294967295
 800be3c:	6879      	ldr	r1, [r7, #4]
 800be3e:	69b8      	ldr	r0, [r7, #24]
 800be40:	f7ff fec8 	bl	800bbd4 <put_fat>
 800be44:	4603      	mov	r3, r0
 800be46:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800be48:	7ffb      	ldrb	r3, [r7, #31]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d001      	beq.n	800be52 <remove_chain+0x4a>
 800be4e:	7ffb      	ldrb	r3, [r7, #31]
 800be50:	e03b      	b.n	800beca <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800be52:	68b9      	ldr	r1, [r7, #8]
 800be54:	68f8      	ldr	r0, [r7, #12]
 800be56:	f7ff fdea 	bl	800ba2e <get_fat>
 800be5a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d031      	beq.n	800bec6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	2b01      	cmp	r3, #1
 800be66:	d101      	bne.n	800be6c <remove_chain+0x64>
 800be68:	2302      	movs	r3, #2
 800be6a:	e02e      	b.n	800beca <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be72:	d101      	bne.n	800be78 <remove_chain+0x70>
 800be74:	2301      	movs	r3, #1
 800be76:	e028      	b.n	800beca <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800be78:	2200      	movs	r2, #0
 800be7a:	68b9      	ldr	r1, [r7, #8]
 800be7c:	69b8      	ldr	r0, [r7, #24]
 800be7e:	f7ff fea9 	bl	800bbd4 <put_fat>
 800be82:	4603      	mov	r3, r0
 800be84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800be86:	7ffb      	ldrb	r3, [r7, #31]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d001      	beq.n	800be90 <remove_chain+0x88>
 800be8c:	7ffb      	ldrb	r3, [r7, #31]
 800be8e:	e01c      	b.n	800beca <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800be90:	69bb      	ldr	r3, [r7, #24]
 800be92:	695a      	ldr	r2, [r3, #20]
 800be94:	69bb      	ldr	r3, [r7, #24]
 800be96:	699b      	ldr	r3, [r3, #24]
 800be98:	3b02      	subs	r3, #2
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d20b      	bcs.n	800beb6 <remove_chain+0xae>
			fs->free_clst++;
 800be9e:	69bb      	ldr	r3, [r7, #24]
 800bea0:	695b      	ldr	r3, [r3, #20]
 800bea2:	1c5a      	adds	r2, r3, #1
 800bea4:	69bb      	ldr	r3, [r7, #24]
 800bea6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800bea8:	69bb      	ldr	r3, [r7, #24]
 800beaa:	791b      	ldrb	r3, [r3, #4]
 800beac:	f043 0301 	orr.w	r3, r3, #1
 800beb0:	b2da      	uxtb	r2, r3
 800beb2:	69bb      	ldr	r3, [r7, #24]
 800beb4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800beba:	69bb      	ldr	r3, [r7, #24]
 800bebc:	699b      	ldr	r3, [r3, #24]
 800bebe:	68ba      	ldr	r2, [r7, #8]
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d3c6      	bcc.n	800be52 <remove_chain+0x4a>
 800bec4:	e000      	b.n	800bec8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bec6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bec8:	2300      	movs	r3, #0
}
 800beca:	4618      	mov	r0, r3
 800becc:	3720      	adds	r7, #32
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}

0800bed2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bed2:	b580      	push	{r7, lr}
 800bed4:	b088      	sub	sp, #32
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
 800beda:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d10d      	bne.n	800bf04 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	691b      	ldr	r3, [r3, #16]
 800beec:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800beee:	69bb      	ldr	r3, [r7, #24]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d004      	beq.n	800befe <create_chain+0x2c>
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	699b      	ldr	r3, [r3, #24]
 800bef8:	69ba      	ldr	r2, [r7, #24]
 800befa:	429a      	cmp	r2, r3
 800befc:	d31b      	bcc.n	800bf36 <create_chain+0x64>
 800befe:	2301      	movs	r3, #1
 800bf00:	61bb      	str	r3, [r7, #24]
 800bf02:	e018      	b.n	800bf36 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bf04:	6839      	ldr	r1, [r7, #0]
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f7ff fd91 	bl	800ba2e <get_fat>
 800bf0c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	d801      	bhi.n	800bf18 <create_chain+0x46>
 800bf14:	2301      	movs	r3, #1
 800bf16:	e070      	b.n	800bffa <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf1e:	d101      	bne.n	800bf24 <create_chain+0x52>
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	e06a      	b.n	800bffa <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	699b      	ldr	r3, [r3, #24]
 800bf28:	68fa      	ldr	r2, [r7, #12]
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d201      	bcs.n	800bf32 <create_chain+0x60>
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	e063      	b.n	800bffa <create_chain+0x128>
		scl = clst;
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bf36:	69bb      	ldr	r3, [r7, #24]
 800bf38:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bf3a:	69fb      	ldr	r3, [r7, #28]
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	699b      	ldr	r3, [r3, #24]
 800bf44:	69fa      	ldr	r2, [r7, #28]
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d307      	bcc.n	800bf5a <create_chain+0x88>
				ncl = 2;
 800bf4a:	2302      	movs	r3, #2
 800bf4c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bf4e:	69fa      	ldr	r2, [r7, #28]
 800bf50:	69bb      	ldr	r3, [r7, #24]
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d901      	bls.n	800bf5a <create_chain+0x88>
 800bf56:	2300      	movs	r3, #0
 800bf58:	e04f      	b.n	800bffa <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bf5a:	69f9      	ldr	r1, [r7, #28]
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f7ff fd66 	bl	800ba2e <get_fat>
 800bf62:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d00e      	beq.n	800bf88 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	d003      	beq.n	800bf78 <create_chain+0xa6>
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf76:	d101      	bne.n	800bf7c <create_chain+0xaa>
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	e03e      	b.n	800bffa <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bf7c:	69fa      	ldr	r2, [r7, #28]
 800bf7e:	69bb      	ldr	r3, [r7, #24]
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d1da      	bne.n	800bf3a <create_chain+0x68>
 800bf84:	2300      	movs	r3, #0
 800bf86:	e038      	b.n	800bffa <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bf88:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bf8a:	f04f 32ff 	mov.w	r2, #4294967295
 800bf8e:	69f9      	ldr	r1, [r7, #28]
 800bf90:	6938      	ldr	r0, [r7, #16]
 800bf92:	f7ff fe1f 	bl	800bbd4 <put_fat>
 800bf96:	4603      	mov	r3, r0
 800bf98:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bf9a:	7dfb      	ldrb	r3, [r7, #23]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d109      	bne.n	800bfb4 <create_chain+0xe2>
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d006      	beq.n	800bfb4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bfa6:	69fa      	ldr	r2, [r7, #28]
 800bfa8:	6839      	ldr	r1, [r7, #0]
 800bfaa:	6938      	ldr	r0, [r7, #16]
 800bfac:	f7ff fe12 	bl	800bbd4 <put_fat>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bfb4:	7dfb      	ldrb	r3, [r7, #23]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d116      	bne.n	800bfe8 <create_chain+0x116>
		fs->last_clst = ncl;
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	69fa      	ldr	r2, [r7, #28]
 800bfbe:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	695a      	ldr	r2, [r3, #20]
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	699b      	ldr	r3, [r3, #24]
 800bfc8:	3b02      	subs	r3, #2
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d804      	bhi.n	800bfd8 <create_chain+0x106>
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	695b      	ldr	r3, [r3, #20]
 800bfd2:	1e5a      	subs	r2, r3, #1
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	791b      	ldrb	r3, [r3, #4]
 800bfdc:	f043 0301 	orr.w	r3, r3, #1
 800bfe0:	b2da      	uxtb	r2, r3
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	711a      	strb	r2, [r3, #4]
 800bfe6:	e007      	b.n	800bff8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bfe8:	7dfb      	ldrb	r3, [r7, #23]
 800bfea:	2b01      	cmp	r3, #1
 800bfec:	d102      	bne.n	800bff4 <create_chain+0x122>
 800bfee:	f04f 33ff 	mov.w	r3, #4294967295
 800bff2:	e000      	b.n	800bff6 <create_chain+0x124>
 800bff4:	2301      	movs	r3, #1
 800bff6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bff8:	69fb      	ldr	r3, [r7, #28]
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3720      	adds	r7, #32
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c002:	b480      	push	{r7}
 800c004:	b087      	sub	sp, #28
 800c006:	af00      	add	r7, sp, #0
 800c008:	6078      	str	r0, [r7, #4]
 800c00a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c016:	3304      	adds	r3, #4
 800c018:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	899b      	ldrh	r3, [r3, #12]
 800c01e:	461a      	mov	r2, r3
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	fbb3 f3f2 	udiv	r3, r3, r2
 800c026:	68fa      	ldr	r2, [r7, #12]
 800c028:	8952      	ldrh	r2, [r2, #10]
 800c02a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c02e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	1d1a      	adds	r2, r3, #4
 800c034:	613a      	str	r2, [r7, #16]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d101      	bne.n	800c044 <clmt_clust+0x42>
 800c040:	2300      	movs	r3, #0
 800c042:	e010      	b.n	800c066 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800c044:	697a      	ldr	r2, [r7, #20]
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	429a      	cmp	r2, r3
 800c04a:	d307      	bcc.n	800c05c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800c04c:	697a      	ldr	r2, [r7, #20]
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	1ad3      	subs	r3, r2, r3
 800c052:	617b      	str	r3, [r7, #20]
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	3304      	adds	r3, #4
 800c058:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c05a:	e7e9      	b.n	800c030 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800c05c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	681a      	ldr	r2, [r3, #0]
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	4413      	add	r3, r2
}
 800c066:	4618      	mov	r0, r3
 800c068:	371c      	adds	r7, #28
 800c06a:	46bd      	mov	sp, r7
 800c06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c070:	4770      	bx	lr

0800c072 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c072:	b580      	push	{r7, lr}
 800c074:	b086      	sub	sp, #24
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
 800c07a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c088:	d204      	bcs.n	800c094 <dir_sdi+0x22>
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	f003 031f 	and.w	r3, r3, #31
 800c090:	2b00      	cmp	r3, #0
 800c092:	d001      	beq.n	800c098 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c094:	2302      	movs	r3, #2
 800c096:	e071      	b.n	800c17c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	683a      	ldr	r2, [r7, #0]
 800c09c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	689b      	ldr	r3, [r3, #8]
 800c0a2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d106      	bne.n	800c0b8 <dir_sdi+0x46>
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	2b02      	cmp	r3, #2
 800c0b0:	d902      	bls.n	800c0b8 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0b6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d10c      	bne.n	800c0d8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	095b      	lsrs	r3, r3, #5
 800c0c2:	693a      	ldr	r2, [r7, #16]
 800c0c4:	8912      	ldrh	r2, [r2, #8]
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d301      	bcc.n	800c0ce <dir_sdi+0x5c>
 800c0ca:	2302      	movs	r3, #2
 800c0cc:	e056      	b.n	800c17c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	61da      	str	r2, [r3, #28]
 800c0d6:	e02d      	b.n	800c134 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	895b      	ldrh	r3, [r3, #10]
 800c0dc:	461a      	mov	r2, r3
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	899b      	ldrh	r3, [r3, #12]
 800c0e2:	fb02 f303 	mul.w	r3, r2, r3
 800c0e6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c0e8:	e019      	b.n	800c11e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6979      	ldr	r1, [r7, #20]
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7ff fc9d 	bl	800ba2e <get_fat>
 800c0f4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0fc:	d101      	bne.n	800c102 <dir_sdi+0x90>
 800c0fe:	2301      	movs	r3, #1
 800c100:	e03c      	b.n	800c17c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	2b01      	cmp	r3, #1
 800c106:	d904      	bls.n	800c112 <dir_sdi+0xa0>
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	699b      	ldr	r3, [r3, #24]
 800c10c:	697a      	ldr	r2, [r7, #20]
 800c10e:	429a      	cmp	r2, r3
 800c110:	d301      	bcc.n	800c116 <dir_sdi+0xa4>
 800c112:	2302      	movs	r3, #2
 800c114:	e032      	b.n	800c17c <dir_sdi+0x10a>
			ofs -= csz;
 800c116:	683a      	ldr	r2, [r7, #0]
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	1ad3      	subs	r3, r2, r3
 800c11c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c11e:	683a      	ldr	r2, [r7, #0]
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	429a      	cmp	r2, r3
 800c124:	d2e1      	bcs.n	800c0ea <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800c126:	6979      	ldr	r1, [r7, #20]
 800c128:	6938      	ldr	r0, [r7, #16]
 800c12a:	f7ff fc61 	bl	800b9f0 <clust2sect>
 800c12e:	4602      	mov	r2, r0
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	697a      	ldr	r2, [r7, #20]
 800c138:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	69db      	ldr	r3, [r3, #28]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d101      	bne.n	800c146 <dir_sdi+0xd4>
 800c142:	2302      	movs	r3, #2
 800c144:	e01a      	b.n	800c17c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	69da      	ldr	r2, [r3, #28]
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	899b      	ldrh	r3, [r3, #12]
 800c14e:	4619      	mov	r1, r3
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	fbb3 f3f1 	udiv	r3, r3, r1
 800c156:	441a      	add	r2, r3
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	899b      	ldrh	r3, [r3, #12]
 800c166:	461a      	mov	r2, r3
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	fbb3 f0f2 	udiv	r0, r3, r2
 800c16e:	fb00 f202 	mul.w	r2, r0, r2
 800c172:	1a9b      	subs	r3, r3, r2
 800c174:	18ca      	adds	r2, r1, r3
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c17a:	2300      	movs	r3, #0
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3718      	adds	r7, #24
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}

0800c184 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b086      	sub	sp, #24
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	695b      	ldr	r3, [r3, #20]
 800c198:	3320      	adds	r3, #32
 800c19a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	69db      	ldr	r3, [r3, #28]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d003      	beq.n	800c1ac <dir_next+0x28>
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c1aa:	d301      	bcc.n	800c1b0 <dir_next+0x2c>
 800c1ac:	2304      	movs	r3, #4
 800c1ae:	e0bb      	b.n	800c328 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	899b      	ldrh	r3, [r3, #12]
 800c1b4:	461a      	mov	r2, r3
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	fbb3 f1f2 	udiv	r1, r3, r2
 800c1bc:	fb01 f202 	mul.w	r2, r1, r2
 800c1c0:	1a9b      	subs	r3, r3, r2
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	f040 809d 	bne.w	800c302 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	69db      	ldr	r3, [r3, #28]
 800c1cc:	1c5a      	adds	r2, r3, #1
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	699b      	ldr	r3, [r3, #24]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d10b      	bne.n	800c1f2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	095b      	lsrs	r3, r3, #5
 800c1de:	68fa      	ldr	r2, [r7, #12]
 800c1e0:	8912      	ldrh	r2, [r2, #8]
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	f0c0 808d 	bcc.w	800c302 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	61da      	str	r2, [r3, #28]
 800c1ee:	2304      	movs	r3, #4
 800c1f0:	e09a      	b.n	800c328 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	899b      	ldrh	r3, [r3, #12]
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1fe:	68fa      	ldr	r2, [r7, #12]
 800c200:	8952      	ldrh	r2, [r2, #10]
 800c202:	3a01      	subs	r2, #1
 800c204:	4013      	ands	r3, r2
 800c206:	2b00      	cmp	r3, #0
 800c208:	d17b      	bne.n	800c302 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c20a:	687a      	ldr	r2, [r7, #4]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	699b      	ldr	r3, [r3, #24]
 800c210:	4619      	mov	r1, r3
 800c212:	4610      	mov	r0, r2
 800c214:	f7ff fc0b 	bl	800ba2e <get_fat>
 800c218:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d801      	bhi.n	800c224 <dir_next+0xa0>
 800c220:	2302      	movs	r3, #2
 800c222:	e081      	b.n	800c328 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c22a:	d101      	bne.n	800c230 <dir_next+0xac>
 800c22c:	2301      	movs	r3, #1
 800c22e:	e07b      	b.n	800c328 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	699b      	ldr	r3, [r3, #24]
 800c234:	697a      	ldr	r2, [r7, #20]
 800c236:	429a      	cmp	r2, r3
 800c238:	d359      	bcc.n	800c2ee <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d104      	bne.n	800c24a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2200      	movs	r2, #0
 800c244:	61da      	str	r2, [r3, #28]
 800c246:	2304      	movs	r3, #4
 800c248:	e06e      	b.n	800c328 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	699b      	ldr	r3, [r3, #24]
 800c250:	4619      	mov	r1, r3
 800c252:	4610      	mov	r0, r2
 800c254:	f7ff fe3d 	bl	800bed2 <create_chain>
 800c258:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d101      	bne.n	800c264 <dir_next+0xe0>
 800c260:	2307      	movs	r3, #7
 800c262:	e061      	b.n	800c328 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	2b01      	cmp	r3, #1
 800c268:	d101      	bne.n	800c26e <dir_next+0xea>
 800c26a:	2302      	movs	r3, #2
 800c26c:	e05c      	b.n	800c328 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c274:	d101      	bne.n	800c27a <dir_next+0xf6>
 800c276:	2301      	movs	r3, #1
 800c278:	e056      	b.n	800c328 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c27a:	68f8      	ldr	r0, [r7, #12]
 800c27c:	f7ff fad6 	bl	800b82c <sync_window>
 800c280:	4603      	mov	r3, r0
 800c282:	2b00      	cmp	r3, #0
 800c284:	d001      	beq.n	800c28a <dir_next+0x106>
 800c286:	2301      	movs	r3, #1
 800c288:	e04e      	b.n	800c328 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	899b      	ldrh	r3, [r3, #12]
 800c294:	461a      	mov	r2, r3
 800c296:	2100      	movs	r1, #0
 800c298:	f7ff f8ff 	bl	800b49a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c29c:	2300      	movs	r3, #0
 800c29e:	613b      	str	r3, [r7, #16]
 800c2a0:	6979      	ldr	r1, [r7, #20]
 800c2a2:	68f8      	ldr	r0, [r7, #12]
 800c2a4:	f7ff fba4 	bl	800b9f0 <clust2sect>
 800c2a8:	4602      	mov	r2, r0
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	631a      	str	r2, [r3, #48]	@ 0x30
 800c2ae:	e012      	b.n	800c2d6 <dir_next+0x152>
						fs->wflag = 1;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c2b6:	68f8      	ldr	r0, [r7, #12]
 800c2b8:	f7ff fab8 	bl	800b82c <sync_window>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d001      	beq.n	800c2c6 <dir_next+0x142>
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	e030      	b.n	800c328 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	613b      	str	r3, [r7, #16]
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2d0:	1c5a      	adds	r2, r3, #1
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	631a      	str	r2, [r3, #48]	@ 0x30
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	895b      	ldrh	r3, [r3, #10]
 800c2da:	461a      	mov	r2, r3
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d3e6      	bcc.n	800c2b0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	1ad2      	subs	r2, r2, r3
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	697a      	ldr	r2, [r7, #20]
 800c2f2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c2f4:	6979      	ldr	r1, [r7, #20]
 800c2f6:	68f8      	ldr	r0, [r7, #12]
 800c2f8:	f7ff fb7a 	bl	800b9f0 <clust2sect>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	68ba      	ldr	r2, [r7, #8]
 800c306:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	899b      	ldrh	r3, [r3, #12]
 800c312:	461a      	mov	r2, r3
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	fbb3 f0f2 	udiv	r0, r3, r2
 800c31a:	fb00 f202 	mul.w	r2, r0, r2
 800c31e:	1a9b      	subs	r3, r3, r2
 800c320:	18ca      	adds	r2, r1, r3
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c326:	2300      	movs	r3, #0
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3718      	adds	r7, #24
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b086      	sub	sp, #24
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c340:	2100      	movs	r1, #0
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f7ff fe95 	bl	800c072 <dir_sdi>
 800c348:	4603      	mov	r3, r0
 800c34a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c34c:	7dfb      	ldrb	r3, [r7, #23]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d12b      	bne.n	800c3aa <dir_alloc+0x7a>
		n = 0;
 800c352:	2300      	movs	r3, #0
 800c354:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	69db      	ldr	r3, [r3, #28]
 800c35a:	4619      	mov	r1, r3
 800c35c:	68f8      	ldr	r0, [r7, #12]
 800c35e:	f7ff faa9 	bl	800b8b4 <move_window>
 800c362:	4603      	mov	r3, r0
 800c364:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c366:	7dfb      	ldrb	r3, [r7, #23]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d11d      	bne.n	800c3a8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6a1b      	ldr	r3, [r3, #32]
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	2be5      	cmp	r3, #229	@ 0xe5
 800c374:	d004      	beq.n	800c380 <dir_alloc+0x50>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6a1b      	ldr	r3, [r3, #32]
 800c37a:	781b      	ldrb	r3, [r3, #0]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d107      	bne.n	800c390 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	3301      	adds	r3, #1
 800c384:	613b      	str	r3, [r7, #16]
 800c386:	693a      	ldr	r2, [r7, #16]
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d102      	bne.n	800c394 <dir_alloc+0x64>
 800c38e:	e00c      	b.n	800c3aa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c390:	2300      	movs	r3, #0
 800c392:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c394:	2101      	movs	r1, #1
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f7ff fef4 	bl	800c184 <dir_next>
 800c39c:	4603      	mov	r3, r0
 800c39e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c3a0:	7dfb      	ldrb	r3, [r7, #23]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d0d7      	beq.n	800c356 <dir_alloc+0x26>
 800c3a6:	e000      	b.n	800c3aa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c3a8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c3aa:	7dfb      	ldrb	r3, [r7, #23]
 800c3ac:	2b04      	cmp	r3, #4
 800c3ae:	d101      	bne.n	800c3b4 <dir_alloc+0x84>
 800c3b0:	2307      	movs	r3, #7
 800c3b2:	75fb      	strb	r3, [r7, #23]
	return res;
 800c3b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3718      	adds	r7, #24
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}

0800c3be <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c3be:	b580      	push	{r7, lr}
 800c3c0:	b084      	sub	sp, #16
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
 800c3c6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	331a      	adds	r3, #26
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7fe ffc1 	bl	800b354 <ld_word>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	2b03      	cmp	r3, #3
 800c3dc:	d109      	bne.n	800c3f2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	3314      	adds	r3, #20
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f7fe ffb6 	bl	800b354 <ld_word>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	041b      	lsls	r3, r3, #16
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3710      	adds	r7, #16
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	60f8      	str	r0, [r7, #12]
 800c404:	60b9      	str	r1, [r7, #8]
 800c406:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	331a      	adds	r3, #26
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	b292      	uxth	r2, r2
 800c410:	4611      	mov	r1, r2
 800c412:	4618      	mov	r0, r3
 800c414:	f7fe ffd9 	bl	800b3ca <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	2b03      	cmp	r3, #3
 800c41e:	d109      	bne.n	800c434 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	f103 0214 	add.w	r2, r3, #20
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	0c1b      	lsrs	r3, r3, #16
 800c42a:	b29b      	uxth	r3, r3
 800c42c:	4619      	mov	r1, r3
 800c42e:	4610      	mov	r0, r2
 800c430:	f7fe ffcb 	bl	800b3ca <st_word>
	}
}
 800c434:	bf00      	nop
 800c436:	3710      	adds	r7, #16
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b086      	sub	sp, #24
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c44a:	2100      	movs	r1, #0
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f7ff fe10 	bl	800c072 <dir_sdi>
 800c452:	4603      	mov	r3, r0
 800c454:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c456:	7dfb      	ldrb	r3, [r7, #23]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d001      	beq.n	800c460 <dir_find+0x24>
 800c45c:	7dfb      	ldrb	r3, [r7, #23]
 800c45e:	e03e      	b.n	800c4de <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	69db      	ldr	r3, [r3, #28]
 800c464:	4619      	mov	r1, r3
 800c466:	6938      	ldr	r0, [r7, #16]
 800c468:	f7ff fa24 	bl	800b8b4 <move_window>
 800c46c:	4603      	mov	r3, r0
 800c46e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c470:	7dfb      	ldrb	r3, [r7, #23]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d12f      	bne.n	800c4d6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6a1b      	ldr	r3, [r3, #32]
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c47e:	7bfb      	ldrb	r3, [r7, #15]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d102      	bne.n	800c48a <dir_find+0x4e>
 800c484:	2304      	movs	r3, #4
 800c486:	75fb      	strb	r3, [r7, #23]
 800c488:	e028      	b.n	800c4dc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6a1b      	ldr	r3, [r3, #32]
 800c48e:	330b      	adds	r3, #11
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c496:	b2da      	uxtb	r2, r3
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6a1b      	ldr	r3, [r3, #32]
 800c4a0:	330b      	adds	r3, #11
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	f003 0308 	and.w	r3, r3, #8
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d10a      	bne.n	800c4c2 <dir_find+0x86>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6a18      	ldr	r0, [r3, #32]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	3324      	adds	r3, #36	@ 0x24
 800c4b4:	220b      	movs	r2, #11
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	f7ff f80a 	bl	800b4d0 <mem_cmp>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d00b      	beq.n	800c4da <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c4c2:	2100      	movs	r1, #0
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f7ff fe5d 	bl	800c184 <dir_next>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c4ce:	7dfb      	ldrb	r3, [r7, #23]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d0c5      	beq.n	800c460 <dir_find+0x24>
 800c4d4:	e002      	b.n	800c4dc <dir_find+0xa0>
		if (res != FR_OK) break;
 800c4d6:	bf00      	nop
 800c4d8:	e000      	b.n	800c4dc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c4da:	bf00      	nop

	return res;
 800c4dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3718      	adds	r7, #24
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}

0800c4e6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c4e6:	b580      	push	{r7, lr}
 800c4e8:	b084      	sub	sp, #16
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c4f4:	2101      	movs	r1, #1
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f7ff ff1a 	bl	800c330 <dir_alloc>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c500:	7bfb      	ldrb	r3, [r7, #15]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d11c      	bne.n	800c540 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	69db      	ldr	r3, [r3, #28]
 800c50a:	4619      	mov	r1, r3
 800c50c:	68b8      	ldr	r0, [r7, #8]
 800c50e:	f7ff f9d1 	bl	800b8b4 <move_window>
 800c512:	4603      	mov	r3, r0
 800c514:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c516:	7bfb      	ldrb	r3, [r7, #15]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d111      	bne.n	800c540 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6a1b      	ldr	r3, [r3, #32]
 800c520:	2220      	movs	r2, #32
 800c522:	2100      	movs	r1, #0
 800c524:	4618      	mov	r0, r3
 800c526:	f7fe ffb8 	bl	800b49a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6a18      	ldr	r0, [r3, #32]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	3324      	adds	r3, #36	@ 0x24
 800c532:	220b      	movs	r2, #11
 800c534:	4619      	mov	r1, r3
 800c536:	f7fe ff8f 	bl	800b458 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	2201      	movs	r2, #1
 800c53e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c540:	7bfb      	ldrb	r3, [r7, #15]
}
 800c542:	4618      	mov	r0, r3
 800c544:	3710      	adds	r7, #16
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
	...

0800c54c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b088      	sub	sp, #32
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	60fb      	str	r3, [r7, #12]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	3324      	adds	r3, #36	@ 0x24
 800c560:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c562:	220b      	movs	r2, #11
 800c564:	2120      	movs	r1, #32
 800c566:	68b8      	ldr	r0, [r7, #8]
 800c568:	f7fe ff97 	bl	800b49a <mem_set>
	si = i = 0; ni = 8;
 800c56c:	2300      	movs	r3, #0
 800c56e:	613b      	str	r3, [r7, #16]
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	61fb      	str	r3, [r7, #28]
 800c574:	2308      	movs	r3, #8
 800c576:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c578:	69fb      	ldr	r3, [r7, #28]
 800c57a:	1c5a      	adds	r2, r3, #1
 800c57c:	61fa      	str	r2, [r7, #28]
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	4413      	add	r3, r2
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c586:	7efb      	ldrb	r3, [r7, #27]
 800c588:	2b20      	cmp	r3, #32
 800c58a:	d94e      	bls.n	800c62a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c58c:	7efb      	ldrb	r3, [r7, #27]
 800c58e:	2b2f      	cmp	r3, #47	@ 0x2f
 800c590:	d006      	beq.n	800c5a0 <create_name+0x54>
 800c592:	7efb      	ldrb	r3, [r7, #27]
 800c594:	2b5c      	cmp	r3, #92	@ 0x5c
 800c596:	d110      	bne.n	800c5ba <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c598:	e002      	b.n	800c5a0 <create_name+0x54>
 800c59a:	69fb      	ldr	r3, [r7, #28]
 800c59c:	3301      	adds	r3, #1
 800c59e:	61fb      	str	r3, [r7, #28]
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	69fb      	ldr	r3, [r7, #28]
 800c5a4:	4413      	add	r3, r2
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	2b2f      	cmp	r3, #47	@ 0x2f
 800c5aa:	d0f6      	beq.n	800c59a <create_name+0x4e>
 800c5ac:	68fa      	ldr	r2, [r7, #12]
 800c5ae:	69fb      	ldr	r3, [r7, #28]
 800c5b0:	4413      	add	r3, r2
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	2b5c      	cmp	r3, #92	@ 0x5c
 800c5b6:	d0f0      	beq.n	800c59a <create_name+0x4e>
			break;
 800c5b8:	e038      	b.n	800c62c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c5ba:	7efb      	ldrb	r3, [r7, #27]
 800c5bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800c5be:	d003      	beq.n	800c5c8 <create_name+0x7c>
 800c5c0:	693a      	ldr	r2, [r7, #16]
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d30c      	bcc.n	800c5e2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	2b0b      	cmp	r3, #11
 800c5cc:	d002      	beq.n	800c5d4 <create_name+0x88>
 800c5ce:	7efb      	ldrb	r3, [r7, #27]
 800c5d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800c5d2:	d001      	beq.n	800c5d8 <create_name+0x8c>
 800c5d4:	2306      	movs	r3, #6
 800c5d6:	e044      	b.n	800c662 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c5d8:	2308      	movs	r3, #8
 800c5da:	613b      	str	r3, [r7, #16]
 800c5dc:	230b      	movs	r3, #11
 800c5de:	617b      	str	r3, [r7, #20]
			continue;
 800c5e0:	e022      	b.n	800c628 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c5e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	da04      	bge.n	800c5f4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c5ea:	7efb      	ldrb	r3, [r7, #27]
 800c5ec:	3b80      	subs	r3, #128	@ 0x80
 800c5ee:	4a1f      	ldr	r2, [pc, #124]	@ (800c66c <create_name+0x120>)
 800c5f0:	5cd3      	ldrb	r3, [r2, r3]
 800c5f2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c5f4:	7efb      	ldrb	r3, [r7, #27]
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	481d      	ldr	r0, [pc, #116]	@ (800c670 <create_name+0x124>)
 800c5fa:	f7fe ff90 	bl	800b51e <chk_chr>
 800c5fe:	4603      	mov	r3, r0
 800c600:	2b00      	cmp	r3, #0
 800c602:	d001      	beq.n	800c608 <create_name+0xbc>
 800c604:	2306      	movs	r3, #6
 800c606:	e02c      	b.n	800c662 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c608:	7efb      	ldrb	r3, [r7, #27]
 800c60a:	2b60      	cmp	r3, #96	@ 0x60
 800c60c:	d905      	bls.n	800c61a <create_name+0xce>
 800c60e:	7efb      	ldrb	r3, [r7, #27]
 800c610:	2b7a      	cmp	r3, #122	@ 0x7a
 800c612:	d802      	bhi.n	800c61a <create_name+0xce>
 800c614:	7efb      	ldrb	r3, [r7, #27]
 800c616:	3b20      	subs	r3, #32
 800c618:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	1c5a      	adds	r2, r3, #1
 800c61e:	613a      	str	r2, [r7, #16]
 800c620:	68ba      	ldr	r2, [r7, #8]
 800c622:	4413      	add	r3, r2
 800c624:	7efa      	ldrb	r2, [r7, #27]
 800c626:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c628:	e7a6      	b.n	800c578 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c62a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c62c:	68fa      	ldr	r2, [r7, #12]
 800c62e:	69fb      	ldr	r3, [r7, #28]
 800c630:	441a      	add	r2, r3
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d101      	bne.n	800c640 <create_name+0xf4>
 800c63c:	2306      	movs	r3, #6
 800c63e:	e010      	b.n	800c662 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	2be5      	cmp	r3, #229	@ 0xe5
 800c646:	d102      	bne.n	800c64e <create_name+0x102>
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	2205      	movs	r2, #5
 800c64c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c64e:	7efb      	ldrb	r3, [r7, #27]
 800c650:	2b20      	cmp	r3, #32
 800c652:	d801      	bhi.n	800c658 <create_name+0x10c>
 800c654:	2204      	movs	r2, #4
 800c656:	e000      	b.n	800c65a <create_name+0x10e>
 800c658:	2200      	movs	r2, #0
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	330b      	adds	r3, #11
 800c65e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c660:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c662:	4618      	mov	r0, r3
 800c664:	3720      	adds	r7, #32
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}
 800c66a:	bf00      	nop
 800c66c:	08013d14 	.word	0x08013d14
 800c670:	08013c90 	.word	0x08013c90

0800c674 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b086      	sub	sp, #24
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c688:	e002      	b.n	800c690 <follow_path+0x1c>
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	3301      	adds	r3, #1
 800c68e:	603b      	str	r3, [r7, #0]
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	781b      	ldrb	r3, [r3, #0]
 800c694:	2b2f      	cmp	r3, #47	@ 0x2f
 800c696:	d0f8      	beq.n	800c68a <follow_path+0x16>
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	2b5c      	cmp	r3, #92	@ 0x5c
 800c69e:	d0f4      	beq.n	800c68a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	781b      	ldrb	r3, [r3, #0]
 800c6aa:	2b1f      	cmp	r3, #31
 800c6ac:	d80a      	bhi.n	800c6c4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2280      	movs	r2, #128	@ 0x80
 800c6b2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c6b6:	2100      	movs	r1, #0
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f7ff fcda 	bl	800c072 <dir_sdi>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	75fb      	strb	r3, [r7, #23]
 800c6c2:	e048      	b.n	800c756 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c6c4:	463b      	mov	r3, r7
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f7ff ff3f 	bl	800c54c <create_name>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c6d2:	7dfb      	ldrb	r3, [r7, #23]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d139      	bne.n	800c74c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f7ff feaf 	bl	800c43c <dir_find>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c6e8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c6ea:	7dfb      	ldrb	r3, [r7, #23]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d00a      	beq.n	800c706 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c6f0:	7dfb      	ldrb	r3, [r7, #23]
 800c6f2:	2b04      	cmp	r3, #4
 800c6f4:	d12c      	bne.n	800c750 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c6f6:	7afb      	ldrb	r3, [r7, #11]
 800c6f8:	f003 0304 	and.w	r3, r3, #4
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d127      	bne.n	800c750 <follow_path+0xdc>
 800c700:	2305      	movs	r3, #5
 800c702:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c704:	e024      	b.n	800c750 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c706:	7afb      	ldrb	r3, [r7, #11]
 800c708:	f003 0304 	and.w	r3, r3, #4
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d121      	bne.n	800c754 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	799b      	ldrb	r3, [r3, #6]
 800c714:	f003 0310 	and.w	r3, r3, #16
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d102      	bne.n	800c722 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c71c:	2305      	movs	r3, #5
 800c71e:	75fb      	strb	r3, [r7, #23]
 800c720:	e019      	b.n	800c756 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	695b      	ldr	r3, [r3, #20]
 800c72c:	68fa      	ldr	r2, [r7, #12]
 800c72e:	8992      	ldrh	r2, [r2, #12]
 800c730:	fbb3 f0f2 	udiv	r0, r3, r2
 800c734:	fb00 f202 	mul.w	r2, r0, r2
 800c738:	1a9b      	subs	r3, r3, r2
 800c73a:	440b      	add	r3, r1
 800c73c:	4619      	mov	r1, r3
 800c73e:	68f8      	ldr	r0, [r7, #12]
 800c740:	f7ff fe3d 	bl	800c3be <ld_clust>
 800c744:	4602      	mov	r2, r0
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c74a:	e7bb      	b.n	800c6c4 <follow_path+0x50>
			if (res != FR_OK) break;
 800c74c:	bf00      	nop
 800c74e:	e002      	b.n	800c756 <follow_path+0xe2>
				break;
 800c750:	bf00      	nop
 800c752:	e000      	b.n	800c756 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c754:	bf00      	nop
			}
		}
	}

	return res;
 800c756:	7dfb      	ldrb	r3, [r7, #23]
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3718      	adds	r7, #24
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}

0800c760 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c760:	b480      	push	{r7}
 800c762:	b087      	sub	sp, #28
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c768:	f04f 33ff 	mov.w	r3, #4294967295
 800c76c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d031      	beq.n	800c7da <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	617b      	str	r3, [r7, #20]
 800c77c:	e002      	b.n	800c784 <get_ldnumber+0x24>
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	3301      	adds	r3, #1
 800c782:	617b      	str	r3, [r7, #20]
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	2b20      	cmp	r3, #32
 800c78a:	d903      	bls.n	800c794 <get_ldnumber+0x34>
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	2b3a      	cmp	r3, #58	@ 0x3a
 800c792:	d1f4      	bne.n	800c77e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	2b3a      	cmp	r3, #58	@ 0x3a
 800c79a:	d11c      	bne.n	800c7d6 <get_ldnumber+0x76>
			tp = *path;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	1c5a      	adds	r2, r3, #1
 800c7a6:	60fa      	str	r2, [r7, #12]
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	3b30      	subs	r3, #48	@ 0x30
 800c7ac:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	2b09      	cmp	r3, #9
 800c7b2:	d80e      	bhi.n	800c7d2 <get_ldnumber+0x72>
 800c7b4:	68fa      	ldr	r2, [r7, #12]
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d10a      	bne.n	800c7d2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d107      	bne.n	800c7d2 <get_ldnumber+0x72>
					vol = (int)i;
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	617b      	str	r3, [r7, #20]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	697a      	ldr	r2, [r7, #20]
 800c7d0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	e002      	b.n	800c7dc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c7da:	693b      	ldr	r3, [r7, #16]
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	371c      	adds	r7, #28
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr

0800c7e8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b082      	sub	sp, #8
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	70da      	strb	r2, [r3, #3]
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f04f 32ff 	mov.w	r2, #4294967295
 800c7fe:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c800:	6839      	ldr	r1, [r7, #0]
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f7ff f856 	bl	800b8b4 <move_window>
 800c808:	4603      	mov	r3, r0
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d001      	beq.n	800c812 <check_fs+0x2a>
 800c80e:	2304      	movs	r3, #4
 800c810:	e038      	b.n	800c884 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	3334      	adds	r3, #52	@ 0x34
 800c816:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c81a:	4618      	mov	r0, r3
 800c81c:	f7fe fd9a 	bl	800b354 <ld_word>
 800c820:	4603      	mov	r3, r0
 800c822:	461a      	mov	r2, r3
 800c824:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c828:	429a      	cmp	r2, r3
 800c82a:	d001      	beq.n	800c830 <check_fs+0x48>
 800c82c:	2303      	movs	r3, #3
 800c82e:	e029      	b.n	800c884 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c836:	2be9      	cmp	r3, #233	@ 0xe9
 800c838:	d009      	beq.n	800c84e <check_fs+0x66>
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c840:	2beb      	cmp	r3, #235	@ 0xeb
 800c842:	d11e      	bne.n	800c882 <check_fs+0x9a>
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800c84a:	2b90      	cmp	r3, #144	@ 0x90
 800c84c:	d119      	bne.n	800c882 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	3334      	adds	r3, #52	@ 0x34
 800c852:	3336      	adds	r3, #54	@ 0x36
 800c854:	4618      	mov	r0, r3
 800c856:	f7fe fd95 	bl	800b384 <ld_dword>
 800c85a:	4603      	mov	r3, r0
 800c85c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c860:	4a0a      	ldr	r2, [pc, #40]	@ (800c88c <check_fs+0xa4>)
 800c862:	4293      	cmp	r3, r2
 800c864:	d101      	bne.n	800c86a <check_fs+0x82>
 800c866:	2300      	movs	r3, #0
 800c868:	e00c      	b.n	800c884 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	3334      	adds	r3, #52	@ 0x34
 800c86e:	3352      	adds	r3, #82	@ 0x52
 800c870:	4618      	mov	r0, r3
 800c872:	f7fe fd87 	bl	800b384 <ld_dword>
 800c876:	4603      	mov	r3, r0
 800c878:	4a05      	ldr	r2, [pc, #20]	@ (800c890 <check_fs+0xa8>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d101      	bne.n	800c882 <check_fs+0x9a>
 800c87e:	2300      	movs	r3, #0
 800c880:	e000      	b.n	800c884 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c882:	2302      	movs	r3, #2
}
 800c884:	4618      	mov	r0, r3
 800c886:	3708      	adds	r7, #8
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}
 800c88c:	00544146 	.word	0x00544146
 800c890:	33544146 	.word	0x33544146

0800c894 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b096      	sub	sp, #88	@ 0x58
 800c898:	af00      	add	r7, sp, #0
 800c89a:	60f8      	str	r0, [r7, #12]
 800c89c:	60b9      	str	r1, [r7, #8]
 800c89e:	4613      	mov	r3, r2
 800c8a0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c8a8:	68f8      	ldr	r0, [r7, #12]
 800c8aa:	f7ff ff59 	bl	800c760 <get_ldnumber>
 800c8ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c8b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	da01      	bge.n	800c8ba <find_volume+0x26>
 800c8b6:	230b      	movs	r3, #11
 800c8b8:	e262      	b.n	800cd80 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c8ba:	4a9f      	ldr	r2, [pc, #636]	@ (800cb38 <find_volume+0x2a4>)
 800c8bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8c2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c8c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d101      	bne.n	800c8ce <find_volume+0x3a>
 800c8ca:	230c      	movs	r3, #12
 800c8cc:	e258      	b.n	800cd80 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c8d2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c8d4:	79fb      	ldrb	r3, [r7, #7]
 800c8d6:	f023 0301 	bic.w	r3, r3, #1
 800c8da:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c8dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d01a      	beq.n	800c91a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c8e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8e6:	785b      	ldrb	r3, [r3, #1]
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f7fe fc93 	bl	800b214 <disk_status>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c8f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c8f8:	f003 0301 	and.w	r3, r3, #1
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d10c      	bne.n	800c91a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c900:	79fb      	ldrb	r3, [r7, #7]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d007      	beq.n	800c916 <find_volume+0x82>
 800c906:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c90a:	f003 0304 	and.w	r3, r3, #4
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d001      	beq.n	800c916 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c912:	230a      	movs	r3, #10
 800c914:	e234      	b.n	800cd80 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800c916:	2300      	movs	r3, #0
 800c918:	e232      	b.n	800cd80 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c91a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c91c:	2200      	movs	r2, #0
 800c91e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c922:	b2da      	uxtb	r2, r3
 800c924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c926:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c92a:	785b      	ldrb	r3, [r3, #1]
 800c92c:	4618      	mov	r0, r3
 800c92e:	f7fe fc8b 	bl	800b248 <disk_initialize>
 800c932:	4603      	mov	r3, r0
 800c934:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c938:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c93c:	f003 0301 	and.w	r3, r3, #1
 800c940:	2b00      	cmp	r3, #0
 800c942:	d001      	beq.n	800c948 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c944:	2303      	movs	r3, #3
 800c946:	e21b      	b.n	800cd80 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c948:	79fb      	ldrb	r3, [r7, #7]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d007      	beq.n	800c95e <find_volume+0xca>
 800c94e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c952:	f003 0304 	and.w	r3, r3, #4
 800c956:	2b00      	cmp	r3, #0
 800c958:	d001      	beq.n	800c95e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c95a:	230a      	movs	r3, #10
 800c95c:	e210      	b.n	800cd80 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c95e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c960:	7858      	ldrb	r0, [r3, #1]
 800c962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c964:	330c      	adds	r3, #12
 800c966:	461a      	mov	r2, r3
 800c968:	2102      	movs	r1, #2
 800c96a:	f7fe fcd5 	bl	800b318 <disk_ioctl>
 800c96e:	4603      	mov	r3, r0
 800c970:	2b00      	cmp	r3, #0
 800c972:	d001      	beq.n	800c978 <find_volume+0xe4>
 800c974:	2301      	movs	r3, #1
 800c976:	e203      	b.n	800cd80 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c97a:	899b      	ldrh	r3, [r3, #12]
 800c97c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c980:	d80d      	bhi.n	800c99e <find_volume+0x10a>
 800c982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c984:	899b      	ldrh	r3, [r3, #12]
 800c986:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c98a:	d308      	bcc.n	800c99e <find_volume+0x10a>
 800c98c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c98e:	899b      	ldrh	r3, [r3, #12]
 800c990:	461a      	mov	r2, r3
 800c992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c994:	899b      	ldrh	r3, [r3, #12]
 800c996:	3b01      	subs	r3, #1
 800c998:	4013      	ands	r3, r2
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d001      	beq.n	800c9a2 <find_volume+0x10e>
 800c99e:	2301      	movs	r3, #1
 800c9a0:	e1ee      	b.n	800cd80 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c9a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c9a8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c9aa:	f7ff ff1d 	bl	800c7e8 <check_fs>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c9b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c9b8:	2b02      	cmp	r3, #2
 800c9ba:	d149      	bne.n	800ca50 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c9bc:	2300      	movs	r3, #0
 800c9be:	643b      	str	r3, [r7, #64]	@ 0x40
 800c9c0:	e01e      	b.n	800ca00 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c9c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9c4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c9c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9ca:	011b      	lsls	r3, r3, #4
 800c9cc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c9d0:	4413      	add	r3, r2
 800c9d2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c9d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9d6:	3304      	adds	r3, #4
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d006      	beq.n	800c9ec <find_volume+0x158>
 800c9de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9e0:	3308      	adds	r3, #8
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f7fe fcce 	bl	800b384 <ld_dword>
 800c9e8:	4602      	mov	r2, r0
 800c9ea:	e000      	b.n	800c9ee <find_volume+0x15a>
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9f0:	009b      	lsls	r3, r3, #2
 800c9f2:	3358      	adds	r3, #88	@ 0x58
 800c9f4:	443b      	add	r3, r7
 800c9f6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c9fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9fc:	3301      	adds	r3, #1
 800c9fe:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca02:	2b03      	cmp	r3, #3
 800ca04:	d9dd      	bls.n	800c9c2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ca06:	2300      	movs	r3, #0
 800ca08:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800ca0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d002      	beq.n	800ca16 <find_volume+0x182>
 800ca10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca12:	3b01      	subs	r3, #1
 800ca14:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ca16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca18:	009b      	lsls	r3, r3, #2
 800ca1a:	3358      	adds	r3, #88	@ 0x58
 800ca1c:	443b      	add	r3, r7
 800ca1e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ca22:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ca24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d005      	beq.n	800ca36 <find_volume+0x1a2>
 800ca2a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ca2c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ca2e:	f7ff fedb 	bl	800c7e8 <check_fs>
 800ca32:	4603      	mov	r3, r0
 800ca34:	e000      	b.n	800ca38 <find_volume+0x1a4>
 800ca36:	2303      	movs	r3, #3
 800ca38:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ca3c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	d905      	bls.n	800ca50 <find_volume+0x1bc>
 800ca44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca46:	3301      	adds	r3, #1
 800ca48:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca4c:	2b03      	cmp	r3, #3
 800ca4e:	d9e2      	bls.n	800ca16 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ca50:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ca54:	2b04      	cmp	r3, #4
 800ca56:	d101      	bne.n	800ca5c <find_volume+0x1c8>
 800ca58:	2301      	movs	r3, #1
 800ca5a:	e191      	b.n	800cd80 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ca5c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ca60:	2b01      	cmp	r3, #1
 800ca62:	d901      	bls.n	800ca68 <find_volume+0x1d4>
 800ca64:	230d      	movs	r3, #13
 800ca66:	e18b      	b.n	800cd80 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ca68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca6a:	3334      	adds	r3, #52	@ 0x34
 800ca6c:	330b      	adds	r3, #11
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f7fe fc70 	bl	800b354 <ld_word>
 800ca74:	4603      	mov	r3, r0
 800ca76:	461a      	mov	r2, r3
 800ca78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca7a:	899b      	ldrh	r3, [r3, #12]
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d001      	beq.n	800ca84 <find_volume+0x1f0>
 800ca80:	230d      	movs	r3, #13
 800ca82:	e17d      	b.n	800cd80 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ca84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca86:	3334      	adds	r3, #52	@ 0x34
 800ca88:	3316      	adds	r3, #22
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f7fe fc62 	bl	800b354 <ld_word>
 800ca90:	4603      	mov	r3, r0
 800ca92:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ca94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d106      	bne.n	800caa8 <find_volume+0x214>
 800ca9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca9c:	3334      	adds	r3, #52	@ 0x34
 800ca9e:	3324      	adds	r3, #36	@ 0x24
 800caa0:	4618      	mov	r0, r3
 800caa2:	f7fe fc6f 	bl	800b384 <ld_dword>
 800caa6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800caa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caaa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800caac:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800caae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cab0:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800cab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cab6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caba:	789b      	ldrb	r3, [r3, #2]
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	d005      	beq.n	800cacc <find_volume+0x238>
 800cac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cac2:	789b      	ldrb	r3, [r3, #2]
 800cac4:	2b02      	cmp	r3, #2
 800cac6:	d001      	beq.n	800cacc <find_volume+0x238>
 800cac8:	230d      	movs	r3, #13
 800caca:	e159      	b.n	800cd80 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cacc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cace:	789b      	ldrb	r3, [r3, #2]
 800cad0:	461a      	mov	r2, r3
 800cad2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cad4:	fb02 f303 	mul.w	r3, r2, r3
 800cad8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cadc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cae0:	461a      	mov	r2, r3
 800cae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cae4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cae8:	895b      	ldrh	r3, [r3, #10]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d008      	beq.n	800cb00 <find_volume+0x26c>
 800caee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caf0:	895b      	ldrh	r3, [r3, #10]
 800caf2:	461a      	mov	r2, r3
 800caf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caf6:	895b      	ldrh	r3, [r3, #10]
 800caf8:	3b01      	subs	r3, #1
 800cafa:	4013      	ands	r3, r2
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d001      	beq.n	800cb04 <find_volume+0x270>
 800cb00:	230d      	movs	r3, #13
 800cb02:	e13d      	b.n	800cd80 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cb04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb06:	3334      	adds	r3, #52	@ 0x34
 800cb08:	3311      	adds	r3, #17
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7fe fc22 	bl	800b354 <ld_word>
 800cb10:	4603      	mov	r3, r0
 800cb12:	461a      	mov	r2, r3
 800cb14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb16:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cb18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb1a:	891b      	ldrh	r3, [r3, #8]
 800cb1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb1e:	8992      	ldrh	r2, [r2, #12]
 800cb20:	0952      	lsrs	r2, r2, #5
 800cb22:	b292      	uxth	r2, r2
 800cb24:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb28:	fb01 f202 	mul.w	r2, r1, r2
 800cb2c:	1a9b      	subs	r3, r3, r2
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d003      	beq.n	800cb3c <find_volume+0x2a8>
 800cb34:	230d      	movs	r3, #13
 800cb36:	e123      	b.n	800cd80 <find_volume+0x4ec>
 800cb38:	20002ba0 	.word	0x20002ba0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cb3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb3e:	3334      	adds	r3, #52	@ 0x34
 800cb40:	3313      	adds	r3, #19
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7fe fc06 	bl	800b354 <ld_word>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cb4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d106      	bne.n	800cb60 <find_volume+0x2cc>
 800cb52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb54:	3334      	adds	r3, #52	@ 0x34
 800cb56:	3320      	adds	r3, #32
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f7fe fc13 	bl	800b384 <ld_dword>
 800cb5e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cb60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb62:	3334      	adds	r3, #52	@ 0x34
 800cb64:	330e      	adds	r3, #14
 800cb66:	4618      	mov	r0, r3
 800cb68:	f7fe fbf4 	bl	800b354 <ld_word>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cb70:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d101      	bne.n	800cb7a <find_volume+0x2e6>
 800cb76:	230d      	movs	r3, #13
 800cb78:	e102      	b.n	800cd80 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cb7a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cb7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb7e:	4413      	add	r3, r2
 800cb80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb82:	8911      	ldrh	r1, [r2, #8]
 800cb84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb86:	8992      	ldrh	r2, [r2, #12]
 800cb88:	0952      	lsrs	r2, r2, #5
 800cb8a:	b292      	uxth	r2, r2
 800cb8c:	fbb1 f2f2 	udiv	r2, r1, r2
 800cb90:	b292      	uxth	r2, r2
 800cb92:	4413      	add	r3, r2
 800cb94:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cb96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	d201      	bcs.n	800cba2 <find_volume+0x30e>
 800cb9e:	230d      	movs	r3, #13
 800cba0:	e0ee      	b.n	800cd80 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cba2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba6:	1ad3      	subs	r3, r2, r3
 800cba8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cbaa:	8952      	ldrh	r2, [r2, #10]
 800cbac:	fbb3 f3f2 	udiv	r3, r3, r2
 800cbb0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cbb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d101      	bne.n	800cbbc <find_volume+0x328>
 800cbb8:	230d      	movs	r3, #13
 800cbba:	e0e1      	b.n	800cd80 <find_volume+0x4ec>
		fmt = FS_FAT32;
 800cbbc:	2303      	movs	r3, #3
 800cbbe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cbc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	d802      	bhi.n	800cbd2 <find_volume+0x33e>
 800cbcc:	2302      	movs	r3, #2
 800cbce:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cbd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbd4:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d802      	bhi.n	800cbe2 <find_volume+0x34e>
 800cbdc:	2301      	movs	r3, #1
 800cbde:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cbe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe4:	1c9a      	adds	r2, r3, #2
 800cbe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbe8:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800cbea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cbee:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cbf0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cbf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbf4:	441a      	add	r2, r3
 800cbf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbf8:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800cbfa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cbfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbfe:	441a      	add	r2, r3
 800cc00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc02:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800cc04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cc08:	2b03      	cmp	r3, #3
 800cc0a:	d11e      	bne.n	800cc4a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cc0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc0e:	3334      	adds	r3, #52	@ 0x34
 800cc10:	332a      	adds	r3, #42	@ 0x2a
 800cc12:	4618      	mov	r0, r3
 800cc14:	f7fe fb9e 	bl	800b354 <ld_word>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d001      	beq.n	800cc22 <find_volume+0x38e>
 800cc1e:	230d      	movs	r3, #13
 800cc20:	e0ae      	b.n	800cd80 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cc22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc24:	891b      	ldrh	r3, [r3, #8]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d001      	beq.n	800cc2e <find_volume+0x39a>
 800cc2a:	230d      	movs	r3, #13
 800cc2c:	e0a8      	b.n	800cd80 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cc2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc30:	3334      	adds	r3, #52	@ 0x34
 800cc32:	332c      	adds	r3, #44	@ 0x2c
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7fe fba5 	bl	800b384 <ld_dword>
 800cc3a:	4602      	mov	r2, r0
 800cc3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc3e:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cc40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc42:	699b      	ldr	r3, [r3, #24]
 800cc44:	009b      	lsls	r3, r3, #2
 800cc46:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc48:	e01f      	b.n	800cc8a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cc4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc4c:	891b      	ldrh	r3, [r3, #8]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d101      	bne.n	800cc56 <find_volume+0x3c2>
 800cc52:	230d      	movs	r3, #13
 800cc54:	e094      	b.n	800cd80 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cc56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cc5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc5c:	441a      	add	r2, r3
 800cc5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc60:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cc62:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cc66:	2b02      	cmp	r3, #2
 800cc68:	d103      	bne.n	800cc72 <find_volume+0x3de>
 800cc6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc6c:	699b      	ldr	r3, [r3, #24]
 800cc6e:	005b      	lsls	r3, r3, #1
 800cc70:	e00a      	b.n	800cc88 <find_volume+0x3f4>
 800cc72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc74:	699a      	ldr	r2, [r3, #24]
 800cc76:	4613      	mov	r3, r2
 800cc78:	005b      	lsls	r3, r3, #1
 800cc7a:	4413      	add	r3, r2
 800cc7c:	085a      	lsrs	r2, r3, #1
 800cc7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc80:	699b      	ldr	r3, [r3, #24]
 800cc82:	f003 0301 	and.w	r3, r3, #1
 800cc86:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cc88:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cc8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc8c:	69da      	ldr	r2, [r3, #28]
 800cc8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc90:	899b      	ldrh	r3, [r3, #12]
 800cc92:	4619      	mov	r1, r3
 800cc94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc96:	440b      	add	r3, r1
 800cc98:	3b01      	subs	r3, #1
 800cc9a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cc9c:	8989      	ldrh	r1, [r1, #12]
 800cc9e:	fbb3 f3f1 	udiv	r3, r3, r1
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d201      	bcs.n	800ccaa <find_volume+0x416>
 800cca6:	230d      	movs	r3, #13
 800cca8:	e06a      	b.n	800cd80 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ccaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccac:	f04f 32ff 	mov.w	r2, #4294967295
 800ccb0:	615a      	str	r2, [r3, #20]
 800ccb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb4:	695a      	ldr	r2, [r3, #20]
 800ccb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ccba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccbc:	2280      	movs	r2, #128	@ 0x80
 800ccbe:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ccc0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ccc4:	2b03      	cmp	r3, #3
 800ccc6:	d149      	bne.n	800cd5c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ccc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccca:	3334      	adds	r3, #52	@ 0x34
 800cccc:	3330      	adds	r3, #48	@ 0x30
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f7fe fb40 	bl	800b354 <ld_word>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	2b01      	cmp	r3, #1
 800ccd8:	d140      	bne.n	800cd5c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ccda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccdc:	3301      	adds	r3, #1
 800ccde:	4619      	mov	r1, r3
 800cce0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cce2:	f7fe fde7 	bl	800b8b4 <move_window>
 800cce6:	4603      	mov	r3, r0
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d137      	bne.n	800cd5c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800ccec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccee:	2200      	movs	r2, #0
 800ccf0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ccf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccf4:	3334      	adds	r3, #52	@ 0x34
 800ccf6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f7fe fb2a 	bl	800b354 <ld_word>
 800cd00:	4603      	mov	r3, r0
 800cd02:	461a      	mov	r2, r3
 800cd04:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d127      	bne.n	800cd5c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cd0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd0e:	3334      	adds	r3, #52	@ 0x34
 800cd10:	4618      	mov	r0, r3
 800cd12:	f7fe fb37 	bl	800b384 <ld_dword>
 800cd16:	4603      	mov	r3, r0
 800cd18:	4a1b      	ldr	r2, [pc, #108]	@ (800cd88 <find_volume+0x4f4>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d11e      	bne.n	800cd5c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cd1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd20:	3334      	adds	r3, #52	@ 0x34
 800cd22:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7fe fb2c 	bl	800b384 <ld_dword>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	4a17      	ldr	r2, [pc, #92]	@ (800cd8c <find_volume+0x4f8>)
 800cd30:	4293      	cmp	r3, r2
 800cd32:	d113      	bne.n	800cd5c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cd34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd36:	3334      	adds	r3, #52	@ 0x34
 800cd38:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f7fe fb21 	bl	800b384 <ld_dword>
 800cd42:	4602      	mov	r2, r0
 800cd44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd46:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cd48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd4a:	3334      	adds	r3, #52	@ 0x34
 800cd4c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800cd50:	4618      	mov	r0, r3
 800cd52:	f7fe fb17 	bl	800b384 <ld_dword>
 800cd56:	4602      	mov	r2, r0
 800cd58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd5a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cd5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd5e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800cd62:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cd64:	4b0a      	ldr	r3, [pc, #40]	@ (800cd90 <find_volume+0x4fc>)
 800cd66:	881b      	ldrh	r3, [r3, #0]
 800cd68:	3301      	adds	r3, #1
 800cd6a:	b29a      	uxth	r2, r3
 800cd6c:	4b08      	ldr	r3, [pc, #32]	@ (800cd90 <find_volume+0x4fc>)
 800cd6e:	801a      	strh	r2, [r3, #0]
 800cd70:	4b07      	ldr	r3, [pc, #28]	@ (800cd90 <find_volume+0x4fc>)
 800cd72:	881a      	ldrh	r2, [r3, #0]
 800cd74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd76:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cd78:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cd7a:	f7fe fd33 	bl	800b7e4 <clear_lock>
#endif
	return FR_OK;
 800cd7e:	2300      	movs	r3, #0
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3758      	adds	r7, #88	@ 0x58
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}
 800cd88:	41615252 	.word	0x41615252
 800cd8c:	61417272 	.word	0x61417272
 800cd90:	20002ba4 	.word	0x20002ba4

0800cd94 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b084      	sub	sp, #16
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
 800cd9c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cd9e:	2309      	movs	r3, #9
 800cda0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d01c      	beq.n	800cde2 <validate+0x4e>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d018      	beq.n	800cde2 <validate+0x4e>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	781b      	ldrb	r3, [r3, #0]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d013      	beq.n	800cde2 <validate+0x4e>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	889a      	ldrh	r2, [r3, #4]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	88db      	ldrh	r3, [r3, #6]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d10c      	bne.n	800cde2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	785b      	ldrb	r3, [r3, #1]
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f7fe fa20 	bl	800b214 <disk_status>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	f003 0301 	and.w	r3, r3, #1
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d101      	bne.n	800cde2 <validate+0x4e>
			res = FR_OK;
 800cdde:	2300      	movs	r3, #0
 800cde0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cde2:	7bfb      	ldrb	r3, [r7, #15]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d102      	bne.n	800cdee <validate+0x5a>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	e000      	b.n	800cdf0 <validate+0x5c>
 800cdee:	2300      	movs	r3, #0
 800cdf0:	683a      	ldr	r2, [r7, #0]
 800cdf2:	6013      	str	r3, [r2, #0]
	return res;
 800cdf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3710      	adds	r7, #16
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}
	...

0800ce00 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b088      	sub	sp, #32
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	60f8      	str	r0, [r7, #12]
 800ce08:	60b9      	str	r1, [r7, #8]
 800ce0a:	4613      	mov	r3, r2
 800ce0c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ce12:	f107 0310 	add.w	r3, r7, #16
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7ff fca2 	bl	800c760 <get_ldnumber>
 800ce1c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ce1e:	69fb      	ldr	r3, [r7, #28]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	da01      	bge.n	800ce28 <f_mount+0x28>
 800ce24:	230b      	movs	r3, #11
 800ce26:	e02b      	b.n	800ce80 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ce28:	4a17      	ldr	r2, [pc, #92]	@ (800ce88 <f_mount+0x88>)
 800ce2a:	69fb      	ldr	r3, [r7, #28]
 800ce2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce30:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ce32:	69bb      	ldr	r3, [r7, #24]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d005      	beq.n	800ce44 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ce38:	69b8      	ldr	r0, [r7, #24]
 800ce3a:	f7fe fcd3 	bl	800b7e4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ce3e:	69bb      	ldr	r3, [r7, #24]
 800ce40:	2200      	movs	r2, #0
 800ce42:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d002      	beq.n	800ce50 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ce50:	68fa      	ldr	r2, [r7, #12]
 800ce52:	490d      	ldr	r1, [pc, #52]	@ (800ce88 <f_mount+0x88>)
 800ce54:	69fb      	ldr	r3, [r7, #28]
 800ce56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d002      	beq.n	800ce66 <f_mount+0x66>
 800ce60:	79fb      	ldrb	r3, [r7, #7]
 800ce62:	2b01      	cmp	r3, #1
 800ce64:	d001      	beq.n	800ce6a <f_mount+0x6a>
 800ce66:	2300      	movs	r3, #0
 800ce68:	e00a      	b.n	800ce80 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ce6a:	f107 010c 	add.w	r1, r7, #12
 800ce6e:	f107 0308 	add.w	r3, r7, #8
 800ce72:	2200      	movs	r2, #0
 800ce74:	4618      	mov	r0, r3
 800ce76:	f7ff fd0d 	bl	800c894 <find_volume>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ce7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3720      	adds	r7, #32
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}
 800ce88:	20002ba0 	.word	0x20002ba0

0800ce8c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b098      	sub	sp, #96	@ 0x60
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	60b9      	str	r1, [r7, #8]
 800ce96:	4613      	mov	r3, r2
 800ce98:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d101      	bne.n	800cea4 <f_open+0x18>
 800cea0:	2309      	movs	r3, #9
 800cea2:	e1b7      	b.n	800d214 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cea4:	79fb      	ldrb	r3, [r7, #7]
 800cea6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ceaa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ceac:	79fa      	ldrb	r2, [r7, #7]
 800ceae:	f107 0110 	add.w	r1, r7, #16
 800ceb2:	f107 0308 	add.w	r3, r7, #8
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f7ff fcec 	bl	800c894 <find_volume>
 800cebc:	4603      	mov	r3, r0
 800cebe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800cec2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	f040 819b 	bne.w	800d202 <f_open+0x376>
		dj.obj.fs = fs;
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ced0:	68ba      	ldr	r2, [r7, #8]
 800ced2:	f107 0314 	add.w	r3, r7, #20
 800ced6:	4611      	mov	r1, r2
 800ced8:	4618      	mov	r0, r3
 800ceda:	f7ff fbcb 	bl	800c674 <follow_path>
 800cede:	4603      	mov	r3, r0
 800cee0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cee4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d118      	bne.n	800cf1e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ceec:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cef0:	b25b      	sxtb	r3, r3
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	da03      	bge.n	800cefe <f_open+0x72>
				res = FR_INVALID_NAME;
 800cef6:	2306      	movs	r3, #6
 800cef8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cefc:	e00f      	b.n	800cf1e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cefe:	79fb      	ldrb	r3, [r7, #7]
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	bf8c      	ite	hi
 800cf04:	2301      	movhi	r3, #1
 800cf06:	2300      	movls	r3, #0
 800cf08:	b2db      	uxtb	r3, r3
 800cf0a:	461a      	mov	r2, r3
 800cf0c:	f107 0314 	add.w	r3, r7, #20
 800cf10:	4611      	mov	r1, r2
 800cf12:	4618      	mov	r0, r3
 800cf14:	f7fe fb1e 	bl	800b554 <chk_lock>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cf1e:	79fb      	ldrb	r3, [r7, #7]
 800cf20:	f003 031c 	and.w	r3, r3, #28
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d07f      	beq.n	800d028 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800cf28:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d017      	beq.n	800cf60 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cf30:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf34:	2b04      	cmp	r3, #4
 800cf36:	d10e      	bne.n	800cf56 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cf38:	f7fe fb68 	bl	800b60c <enq_lock>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d006      	beq.n	800cf50 <f_open+0xc4>
 800cf42:	f107 0314 	add.w	r3, r7, #20
 800cf46:	4618      	mov	r0, r3
 800cf48:	f7ff facd 	bl	800c4e6 <dir_register>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	e000      	b.n	800cf52 <f_open+0xc6>
 800cf50:	2312      	movs	r3, #18
 800cf52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cf56:	79fb      	ldrb	r3, [r7, #7]
 800cf58:	f043 0308 	orr.w	r3, r3, #8
 800cf5c:	71fb      	strb	r3, [r7, #7]
 800cf5e:	e010      	b.n	800cf82 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cf60:	7ebb      	ldrb	r3, [r7, #26]
 800cf62:	f003 0311 	and.w	r3, r3, #17
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d003      	beq.n	800cf72 <f_open+0xe6>
					res = FR_DENIED;
 800cf6a:	2307      	movs	r3, #7
 800cf6c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cf70:	e007      	b.n	800cf82 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cf72:	79fb      	ldrb	r3, [r7, #7]
 800cf74:	f003 0304 	and.w	r3, r3, #4
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d002      	beq.n	800cf82 <f_open+0xf6>
 800cf7c:	2308      	movs	r3, #8
 800cf7e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cf82:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d168      	bne.n	800d05c <f_open+0x1d0>
 800cf8a:	79fb      	ldrb	r3, [r7, #7]
 800cf8c:	f003 0308 	and.w	r3, r3, #8
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d063      	beq.n	800d05c <f_open+0x1d0>
				dw = GET_FATTIME();
 800cf94:	f7fd ff0a 	bl	800adac <get_fattime>
 800cf98:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cf9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf9c:	330e      	adds	r3, #14
 800cf9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f7fe fa2d 	bl	800b400 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cfa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfa8:	3316      	adds	r3, #22
 800cfaa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7fe fa27 	bl	800b400 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cfb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfb4:	330b      	adds	r3, #11
 800cfb6:	2220      	movs	r2, #32
 800cfb8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cfba:	693b      	ldr	r3, [r7, #16]
 800cfbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cfbe:	4611      	mov	r1, r2
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7ff f9fc 	bl	800c3be <ld_clust>
 800cfc6:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cfcc:	2200      	movs	r2, #0
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f7ff fa14 	bl	800c3fc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cfd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfd6:	331c      	adds	r3, #28
 800cfd8:	2100      	movs	r1, #0
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f7fe fa10 	bl	800b400 <st_dword>
					fs->wflag = 1;
 800cfe0:	693b      	ldr	r3, [r7, #16]
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cfe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d037      	beq.n	800d05c <f_open+0x1d0>
						dw = fs->winsect;
 800cfec:	693b      	ldr	r3, [r7, #16]
 800cfee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cff0:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800cff2:	f107 0314 	add.w	r3, r7, #20
 800cff6:	2200      	movs	r2, #0
 800cff8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800cffa:	4618      	mov	r0, r3
 800cffc:	f7fe ff04 	bl	800be08 <remove_chain>
 800d000:	4603      	mov	r3, r0
 800d002:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800d006:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d126      	bne.n	800d05c <f_open+0x1d0>
							res = move_window(fs, dw);
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d012:	4618      	mov	r0, r3
 800d014:	f7fe fc4e 	bl	800b8b4 <move_window>
 800d018:	4603      	mov	r3, r0
 800d01a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d022:	3a01      	subs	r2, #1
 800d024:	611a      	str	r2, [r3, #16]
 800d026:	e019      	b.n	800d05c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d028:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d115      	bne.n	800d05c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d030:	7ebb      	ldrb	r3, [r7, #26]
 800d032:	f003 0310 	and.w	r3, r3, #16
 800d036:	2b00      	cmp	r3, #0
 800d038:	d003      	beq.n	800d042 <f_open+0x1b6>
					res = FR_NO_FILE;
 800d03a:	2304      	movs	r3, #4
 800d03c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d040:	e00c      	b.n	800d05c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d042:	79fb      	ldrb	r3, [r7, #7]
 800d044:	f003 0302 	and.w	r3, r3, #2
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d007      	beq.n	800d05c <f_open+0x1d0>
 800d04c:	7ebb      	ldrb	r3, [r7, #26]
 800d04e:	f003 0301 	and.w	r3, r3, #1
 800d052:	2b00      	cmp	r3, #0
 800d054:	d002      	beq.n	800d05c <f_open+0x1d0>
						res = FR_DENIED;
 800d056:	2307      	movs	r3, #7
 800d058:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d05c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d060:	2b00      	cmp	r3, #0
 800d062:	d126      	bne.n	800d0b2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d064:	79fb      	ldrb	r3, [r7, #7]
 800d066:	f003 0308 	and.w	r3, r3, #8
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d003      	beq.n	800d076 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800d06e:	79fb      	ldrb	r3, [r7, #7]
 800d070:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d074:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800d07e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d084:	79fb      	ldrb	r3, [r7, #7]
 800d086:	2b01      	cmp	r3, #1
 800d088:	bf8c      	ite	hi
 800d08a:	2301      	movhi	r3, #1
 800d08c:	2300      	movls	r3, #0
 800d08e:	b2db      	uxtb	r3, r3
 800d090:	461a      	mov	r2, r3
 800d092:	f107 0314 	add.w	r3, r7, #20
 800d096:	4611      	mov	r1, r2
 800d098:	4618      	mov	r0, r3
 800d09a:	f7fe fad9 	bl	800b650 <inc_lock>
 800d09e:	4602      	mov	r2, r0
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	691b      	ldr	r3, [r3, #16]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d102      	bne.n	800d0b2 <f_open+0x226>
 800d0ac:	2302      	movs	r3, #2
 800d0ae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d0b2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	f040 80a3 	bne.w	800d202 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d0c0:	4611      	mov	r1, r2
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7ff f97b 	bl	800c3be <ld_clust>
 800d0c8:	4602      	mov	r2, r0
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d0ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0d0:	331c      	adds	r3, #28
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f7fe f956 	bl	800b384 <ld_dword>
 800d0d8:	4602      	mov	r2, r0
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d0e4:	693a      	ldr	r2, [r7, #16]
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	88da      	ldrh	r2, [r3, #6]
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	79fa      	ldrb	r2, [r7, #7]
 800d0f6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2200      	movs	r2, #0
 800d102:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2200      	movs	r2, #0
 800d108:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	3330      	adds	r3, #48	@ 0x30
 800d10e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800d112:	2100      	movs	r1, #0
 800d114:	4618      	mov	r0, r3
 800d116:	f7fe f9c0 	bl	800b49a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d11a:	79fb      	ldrb	r3, [r7, #7]
 800d11c:	f003 0320 	and.w	r3, r3, #32
 800d120:	2b00      	cmp	r3, #0
 800d122:	d06e      	beq.n	800d202 <f_open+0x376>
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	68db      	ldr	r3, [r3, #12]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d06a      	beq.n	800d202 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	68da      	ldr	r2, [r3, #12]
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d134:	693b      	ldr	r3, [r7, #16]
 800d136:	895b      	ldrh	r3, [r3, #10]
 800d138:	461a      	mov	r2, r3
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	899b      	ldrh	r3, [r3, #12]
 800d13e:	fb02 f303 	mul.w	r3, r2, r3
 800d142:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	689b      	ldr	r3, [r3, #8]
 800d148:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	68db      	ldr	r3, [r3, #12]
 800d14e:	657b      	str	r3, [r7, #84]	@ 0x54
 800d150:	e016      	b.n	800d180 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d156:	4618      	mov	r0, r3
 800d158:	f7fe fc69 	bl	800ba2e <get_fat>
 800d15c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d15e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d160:	2b01      	cmp	r3, #1
 800d162:	d802      	bhi.n	800d16a <f_open+0x2de>
 800d164:	2302      	movs	r3, #2
 800d166:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d16a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d16c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d170:	d102      	bne.n	800d178 <f_open+0x2ec>
 800d172:	2301      	movs	r3, #1
 800d174:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d178:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d17a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d17c:	1ad3      	subs	r3, r2, r3
 800d17e:	657b      	str	r3, [r7, #84]	@ 0x54
 800d180:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d184:	2b00      	cmp	r3, #0
 800d186:	d103      	bne.n	800d190 <f_open+0x304>
 800d188:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d18a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d8e0      	bhi.n	800d152 <f_open+0x2c6>
				}
				fp->clust = clst;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d194:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d196:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d131      	bne.n	800d202 <f_open+0x376>
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	899b      	ldrh	r3, [r3, #12]
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1a6:	fbb3 f1f2 	udiv	r1, r3, r2
 800d1aa:	fb01 f202 	mul.w	r2, r1, r2
 800d1ae:	1a9b      	subs	r3, r3, r2
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d026      	beq.n	800d202 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f7fe fc19 	bl	800b9f0 <clust2sect>
 800d1be:	6478      	str	r0, [r7, #68]	@ 0x44
 800d1c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d103      	bne.n	800d1ce <f_open+0x342>
						res = FR_INT_ERR;
 800d1c6:	2302      	movs	r3, #2
 800d1c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d1cc:	e019      	b.n	800d202 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d1ce:	693b      	ldr	r3, [r7, #16]
 800d1d0:	899b      	ldrh	r3, [r3, #12]
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1d6:	fbb3 f2f2 	udiv	r2, r3, r2
 800d1da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1dc:	441a      	add	r2, r3
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	7858      	ldrb	r0, [r3, #1]
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	6a1a      	ldr	r2, [r3, #32]
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	f7fe f851 	bl	800b298 <disk_read>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d002      	beq.n	800d202 <f_open+0x376>
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d202:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d206:	2b00      	cmp	r3, #0
 800d208:	d002      	beq.n	800d210 <f_open+0x384>
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	2200      	movs	r2, #0
 800d20e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d210:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800d214:	4618      	mov	r0, r3
 800d216:	3760      	adds	r7, #96	@ 0x60
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}

0800d21c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b08c      	sub	sp, #48	@ 0x30
 800d220:	af00      	add	r7, sp, #0
 800d222:	60f8      	str	r0, [r7, #12]
 800d224:	60b9      	str	r1, [r7, #8]
 800d226:	607a      	str	r2, [r7, #4]
 800d228:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	2200      	movs	r2, #0
 800d232:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	f107 0210 	add.w	r2, r7, #16
 800d23a:	4611      	mov	r1, r2
 800d23c:	4618      	mov	r0, r3
 800d23e:	f7ff fda9 	bl	800cd94 <validate>
 800d242:	4603      	mov	r3, r0
 800d244:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d248:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d107      	bne.n	800d260 <f_write+0x44>
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	7d5b      	ldrb	r3, [r3, #21]
 800d254:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d258:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d002      	beq.n	800d266 <f_write+0x4a>
 800d260:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d264:	e16a      	b.n	800d53c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	7d1b      	ldrb	r3, [r3, #20]
 800d26a:	f003 0302 	and.w	r3, r3, #2
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d101      	bne.n	800d276 <f_write+0x5a>
 800d272:	2307      	movs	r3, #7
 800d274:	e162      	b.n	800d53c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	699a      	ldr	r2, [r3, #24]
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	441a      	add	r2, r3
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	699b      	ldr	r3, [r3, #24]
 800d282:	429a      	cmp	r2, r3
 800d284:	f080 814c 	bcs.w	800d520 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	699b      	ldr	r3, [r3, #24]
 800d28c:	43db      	mvns	r3, r3
 800d28e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d290:	e146      	b.n	800d520 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	699b      	ldr	r3, [r3, #24]
 800d296:	693a      	ldr	r2, [r7, #16]
 800d298:	8992      	ldrh	r2, [r2, #12]
 800d29a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d29e:	fb01 f202 	mul.w	r2, r1, r2
 800d2a2:	1a9b      	subs	r3, r3, r2
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	f040 80f1 	bne.w	800d48c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	699b      	ldr	r3, [r3, #24]
 800d2ae:	693a      	ldr	r2, [r7, #16]
 800d2b0:	8992      	ldrh	r2, [r2, #12]
 800d2b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d2b6:	693a      	ldr	r2, [r7, #16]
 800d2b8:	8952      	ldrh	r2, [r2, #10]
 800d2ba:	3a01      	subs	r2, #1
 800d2bc:	4013      	ands	r3, r2
 800d2be:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d2c0:	69bb      	ldr	r3, [r7, #24]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d143      	bne.n	800d34e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	699b      	ldr	r3, [r3, #24]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d10c      	bne.n	800d2e8 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	689b      	ldr	r3, [r3, #8]
 800d2d2:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d11a      	bne.n	800d310 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	2100      	movs	r1, #0
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f7fe fdf7 	bl	800bed2 <create_chain>
 800d2e4:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d2e6:	e013      	b.n	800d310 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d007      	beq.n	800d300 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	699b      	ldr	r3, [r3, #24]
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	68f8      	ldr	r0, [r7, #12]
 800d2f8:	f7fe fe83 	bl	800c002 <clmt_clust>
 800d2fc:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d2fe:	e007      	b.n	800d310 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d300:	68fa      	ldr	r2, [r7, #12]
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	69db      	ldr	r3, [r3, #28]
 800d306:	4619      	mov	r1, r3
 800d308:	4610      	mov	r0, r2
 800d30a:	f7fe fde2 	bl	800bed2 <create_chain>
 800d30e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d312:	2b00      	cmp	r3, #0
 800d314:	f000 8109 	beq.w	800d52a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d31a:	2b01      	cmp	r3, #1
 800d31c:	d104      	bne.n	800d328 <f_write+0x10c>
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	2202      	movs	r2, #2
 800d322:	755a      	strb	r2, [r3, #21]
 800d324:	2302      	movs	r3, #2
 800d326:	e109      	b.n	800d53c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d32a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d32e:	d104      	bne.n	800d33a <f_write+0x11e>
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	2201      	movs	r2, #1
 800d334:	755a      	strb	r2, [r3, #21]
 800d336:	2301      	movs	r3, #1
 800d338:	e100      	b.n	800d53c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d33e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	689b      	ldr	r3, [r3, #8]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d102      	bne.n	800d34e <f_write+0x132>
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d34c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	7d1b      	ldrb	r3, [r3, #20]
 800d352:	b25b      	sxtb	r3, r3
 800d354:	2b00      	cmp	r3, #0
 800d356:	da18      	bge.n	800d38a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	7858      	ldrb	r0, [r3, #1]
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	6a1a      	ldr	r2, [r3, #32]
 800d366:	2301      	movs	r3, #1
 800d368:	f7fd ffb6 	bl	800b2d8 <disk_write>
 800d36c:	4603      	mov	r3, r0
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d004      	beq.n	800d37c <f_write+0x160>
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	2201      	movs	r2, #1
 800d376:	755a      	strb	r2, [r3, #21]
 800d378:	2301      	movs	r3, #1
 800d37a:	e0df      	b.n	800d53c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	7d1b      	ldrb	r3, [r3, #20]
 800d380:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d384:	b2da      	uxtb	r2, r3
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d38a:	693a      	ldr	r2, [r7, #16]
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	69db      	ldr	r3, [r3, #28]
 800d390:	4619      	mov	r1, r3
 800d392:	4610      	mov	r0, r2
 800d394:	f7fe fb2c 	bl	800b9f0 <clust2sect>
 800d398:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d104      	bne.n	800d3aa <f_write+0x18e>
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	2202      	movs	r2, #2
 800d3a4:	755a      	strb	r2, [r3, #21]
 800d3a6:	2302      	movs	r3, #2
 800d3a8:	e0c8      	b.n	800d53c <f_write+0x320>
			sect += csect;
 800d3aa:	697a      	ldr	r2, [r7, #20]
 800d3ac:	69bb      	ldr	r3, [r7, #24]
 800d3ae:	4413      	add	r3, r2
 800d3b0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	899b      	ldrh	r3, [r3, #12]
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3be:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d3c0:	6a3b      	ldr	r3, [r7, #32]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d043      	beq.n	800d44e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d3c6:	69ba      	ldr	r2, [r7, #24]
 800d3c8:	6a3b      	ldr	r3, [r7, #32]
 800d3ca:	4413      	add	r3, r2
 800d3cc:	693a      	ldr	r2, [r7, #16]
 800d3ce:	8952      	ldrh	r2, [r2, #10]
 800d3d0:	4293      	cmp	r3, r2
 800d3d2:	d905      	bls.n	800d3e0 <f_write+0x1c4>
					cc = fs->csize - csect;
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	895b      	ldrh	r3, [r3, #10]
 800d3d8:	461a      	mov	r2, r3
 800d3da:	69bb      	ldr	r3, [r7, #24]
 800d3dc:	1ad3      	subs	r3, r2, r3
 800d3de:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	7858      	ldrb	r0, [r3, #1]
 800d3e4:	6a3b      	ldr	r3, [r7, #32]
 800d3e6:	697a      	ldr	r2, [r7, #20]
 800d3e8:	69f9      	ldr	r1, [r7, #28]
 800d3ea:	f7fd ff75 	bl	800b2d8 <disk_write>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d004      	beq.n	800d3fe <f_write+0x1e2>
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	2201      	movs	r2, #1
 800d3f8:	755a      	strb	r2, [r3, #21]
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	e09e      	b.n	800d53c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	6a1a      	ldr	r2, [r3, #32]
 800d402:	697b      	ldr	r3, [r7, #20]
 800d404:	1ad3      	subs	r3, r2, r3
 800d406:	6a3a      	ldr	r2, [r7, #32]
 800d408:	429a      	cmp	r2, r3
 800d40a:	d918      	bls.n	800d43e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	6a1a      	ldr	r2, [r3, #32]
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	1ad3      	subs	r3, r2, r3
 800d41a:	693a      	ldr	r2, [r7, #16]
 800d41c:	8992      	ldrh	r2, [r2, #12]
 800d41e:	fb02 f303 	mul.w	r3, r2, r3
 800d422:	69fa      	ldr	r2, [r7, #28]
 800d424:	18d1      	adds	r1, r2, r3
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	899b      	ldrh	r3, [r3, #12]
 800d42a:	461a      	mov	r2, r3
 800d42c:	f7fe f814 	bl	800b458 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	7d1b      	ldrb	r3, [r3, #20]
 800d434:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d438:	b2da      	uxtb	r2, r3
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	899b      	ldrh	r3, [r3, #12]
 800d442:	461a      	mov	r2, r3
 800d444:	6a3b      	ldr	r3, [r7, #32]
 800d446:	fb02 f303 	mul.w	r3, r2, r3
 800d44a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800d44c:	e04b      	b.n	800d4e6 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	6a1b      	ldr	r3, [r3, #32]
 800d452:	697a      	ldr	r2, [r7, #20]
 800d454:	429a      	cmp	r2, r3
 800d456:	d016      	beq.n	800d486 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	699a      	ldr	r2, [r3, #24]
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d460:	429a      	cmp	r2, r3
 800d462:	d210      	bcs.n	800d486 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	7858      	ldrb	r0, [r3, #1]
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d46e:	2301      	movs	r3, #1
 800d470:	697a      	ldr	r2, [r7, #20]
 800d472:	f7fd ff11 	bl	800b298 <disk_read>
 800d476:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d004      	beq.n	800d486 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	2201      	movs	r2, #1
 800d480:	755a      	strb	r2, [r3, #21]
 800d482:	2301      	movs	r3, #1
 800d484:	e05a      	b.n	800d53c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	697a      	ldr	r2, [r7, #20]
 800d48a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	899b      	ldrh	r3, [r3, #12]
 800d490:	4618      	mov	r0, r3
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	699b      	ldr	r3, [r3, #24]
 800d496:	693a      	ldr	r2, [r7, #16]
 800d498:	8992      	ldrh	r2, [r2, #12]
 800d49a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d49e:	fb01 f202 	mul.w	r2, r1, r2
 800d4a2:	1a9b      	subs	r3, r3, r2
 800d4a4:	1ac3      	subs	r3, r0, r3
 800d4a6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d4a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d901      	bls.n	800d4b4 <f_write+0x298>
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	699b      	ldr	r3, [r3, #24]
 800d4be:	693a      	ldr	r2, [r7, #16]
 800d4c0:	8992      	ldrh	r2, [r2, #12]
 800d4c2:	fbb3 f0f2 	udiv	r0, r3, r2
 800d4c6:	fb00 f202 	mul.w	r2, r0, r2
 800d4ca:	1a9b      	subs	r3, r3, r2
 800d4cc:	440b      	add	r3, r1
 800d4ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4d0:	69f9      	ldr	r1, [r7, #28]
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f7fd ffc0 	bl	800b458 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	7d1b      	ldrb	r3, [r3, #20]
 800d4dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d4e0:	b2da      	uxtb	r2, r3
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d4e6:	69fa      	ldr	r2, [r7, #28]
 800d4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ea:	4413      	add	r3, r2
 800d4ec:	61fb      	str	r3, [r7, #28]
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	699a      	ldr	r2, [r3, #24]
 800d4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f4:	441a      	add	r2, r3
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	619a      	str	r2, [r3, #24]
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	68da      	ldr	r2, [r3, #12]
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	699b      	ldr	r3, [r3, #24]
 800d502:	429a      	cmp	r2, r3
 800d504:	bf38      	it	cc
 800d506:	461a      	movcc	r2, r3
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	60da      	str	r2, [r3, #12]
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	681a      	ldr	r2, [r3, #0]
 800d510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d512:	441a      	add	r2, r3
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	601a      	str	r2, [r3, #0]
 800d518:	687a      	ldr	r2, [r7, #4]
 800d51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d51c:	1ad3      	subs	r3, r2, r3
 800d51e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2b00      	cmp	r3, #0
 800d524:	f47f aeb5 	bne.w	800d292 <f_write+0x76>
 800d528:	e000      	b.n	800d52c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d52a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	7d1b      	ldrb	r3, [r3, #20]
 800d530:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d534:	b2da      	uxtb	r2, r3
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d53a:	2300      	movs	r3, #0
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3730      	adds	r7, #48	@ 0x30
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b086      	sub	sp, #24
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f107 0208 	add.w	r2, r7, #8
 800d552:	4611      	mov	r1, r2
 800d554:	4618      	mov	r0, r3
 800d556:	f7ff fc1d 	bl	800cd94 <validate>
 800d55a:	4603      	mov	r3, r0
 800d55c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d55e:	7dfb      	ldrb	r3, [r7, #23]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d168      	bne.n	800d636 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	7d1b      	ldrb	r3, [r3, #20]
 800d568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d062      	beq.n	800d636 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	7d1b      	ldrb	r3, [r3, #20]
 800d574:	b25b      	sxtb	r3, r3
 800d576:	2b00      	cmp	r3, #0
 800d578:	da15      	bge.n	800d5a6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	7858      	ldrb	r0, [r3, #1]
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6a1a      	ldr	r2, [r3, #32]
 800d588:	2301      	movs	r3, #1
 800d58a:	f7fd fea5 	bl	800b2d8 <disk_write>
 800d58e:	4603      	mov	r3, r0
 800d590:	2b00      	cmp	r3, #0
 800d592:	d001      	beq.n	800d598 <f_sync+0x54>
 800d594:	2301      	movs	r3, #1
 800d596:	e04f      	b.n	800d638 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	7d1b      	ldrb	r3, [r3, #20]
 800d59c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d5a0:	b2da      	uxtb	r2, r3
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d5a6:	f7fd fc01 	bl	800adac <get_fattime>
 800d5aa:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d5ac:	68ba      	ldr	r2, [r7, #8]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5b2:	4619      	mov	r1, r3
 800d5b4:	4610      	mov	r0, r2
 800d5b6:	f7fe f97d 	bl	800b8b4 <move_window>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d5be:	7dfb      	ldrb	r3, [r7, #23]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d138      	bne.n	800d636 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5c8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	330b      	adds	r3, #11
 800d5ce:	781a      	ldrb	r2, [r3, #0]
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	330b      	adds	r3, #11
 800d5d4:	f042 0220 	orr.w	r2, r2, #32
 800d5d8:	b2d2      	uxtb	r2, r2
 800d5da:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6818      	ldr	r0, [r3, #0]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	689b      	ldr	r3, [r3, #8]
 800d5e4:	461a      	mov	r2, r3
 800d5e6:	68f9      	ldr	r1, [r7, #12]
 800d5e8:	f7fe ff08 	bl	800c3fc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	f103 021c 	add.w	r2, r3, #28
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	68db      	ldr	r3, [r3, #12]
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	4610      	mov	r0, r2
 800d5fa:	f7fd ff01 	bl	800b400 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	3316      	adds	r3, #22
 800d602:	6939      	ldr	r1, [r7, #16]
 800d604:	4618      	mov	r0, r3
 800d606:	f7fd fefb 	bl	800b400 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	3312      	adds	r3, #18
 800d60e:	2100      	movs	r1, #0
 800d610:	4618      	mov	r0, r3
 800d612:	f7fd feda 	bl	800b3ca <st_word>
					fs->wflag = 1;
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	2201      	movs	r2, #1
 800d61a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	4618      	mov	r0, r3
 800d620:	f7fe f976 	bl	800b910 <sync_fs>
 800d624:	4603      	mov	r3, r0
 800d626:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	7d1b      	ldrb	r3, [r3, #20]
 800d62c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d630:	b2da      	uxtb	r2, r3
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d636:	7dfb      	ldrb	r3, [r7, #23]
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3718      	adds	r7, #24
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}

0800d640 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b084      	sub	sp, #16
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f7ff ff7b 	bl	800d544 <f_sync>
 800d64e:	4603      	mov	r3, r0
 800d650:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d652:	7bfb      	ldrb	r3, [r7, #15]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d118      	bne.n	800d68a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f107 0208 	add.w	r2, r7, #8
 800d65e:	4611      	mov	r1, r2
 800d660:	4618      	mov	r0, r3
 800d662:	f7ff fb97 	bl	800cd94 <validate>
 800d666:	4603      	mov	r3, r0
 800d668:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d66a:	7bfb      	ldrb	r3, [r7, #15]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d10c      	bne.n	800d68a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	691b      	ldr	r3, [r3, #16]
 800d674:	4618      	mov	r0, r3
 800d676:	f7fe f879 	bl	800b76c <dec_lock>
 800d67a:	4603      	mov	r3, r0
 800d67c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d67e:	7bfb      	ldrb	r3, [r7, #15]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d102      	bne.n	800d68a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2200      	movs	r2, #0
 800d688:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	3710      	adds	r7, #16
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}

0800d694 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b096      	sub	sp, #88	@ 0x58
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800d69c:	f107 0108 	add.w	r1, r7, #8
 800d6a0:	1d3b      	adds	r3, r7, #4
 800d6a2:	2202      	movs	r2, #2
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f7ff f8f5 	bl	800c894 <find_volume>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800d6b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	f040 80f2 	bne.w	800d8a2 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800d6be:	687a      	ldr	r2, [r7, #4]
 800d6c0:	f107 030c 	add.w	r3, r7, #12
 800d6c4:	4611      	mov	r1, r2
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7fe ffd4 	bl	800c674 <follow_path>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800d6d2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d102      	bne.n	800d6e0 <f_mkdir+0x4c>
 800d6da:	2308      	movs	r3, #8
 800d6dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800d6e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d6e4:	2b04      	cmp	r3, #4
 800d6e6:	f040 80dc 	bne.w	800d8a2 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800d6ea:	f107 030c 	add.w	r3, r7, #12
 800d6ee:	2100      	movs	r1, #0
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f7fe fbee 	bl	800bed2 <create_chain>
 800d6f6:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	895b      	ldrh	r3, [r3, #10]
 800d6fc:	461a      	mov	r2, r3
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	899b      	ldrh	r3, [r3, #12]
 800d702:	fb02 f303 	mul.w	r3, r2, r3
 800d706:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800d708:	2300      	movs	r3, #0
 800d70a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800d70e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d710:	2b00      	cmp	r3, #0
 800d712:	d102      	bne.n	800d71a <f_mkdir+0x86>
 800d714:	2307      	movs	r3, #7
 800d716:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800d71a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d71c:	2b01      	cmp	r3, #1
 800d71e:	d102      	bne.n	800d726 <f_mkdir+0x92>
 800d720:	2302      	movs	r3, #2
 800d722:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d726:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d72c:	d102      	bne.n	800d734 <f_mkdir+0xa0>
 800d72e:	2301      	movs	r3, #1
 800d730:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800d734:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d106      	bne.n	800d74a <f_mkdir+0xb6>
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	4618      	mov	r0, r3
 800d740:	f7fe f874 	bl	800b82c <sync_window>
 800d744:	4603      	mov	r3, r0
 800d746:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 800d74a:	f7fd fb2f 	bl	800adac <get_fattime>
 800d74e:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800d750:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d754:	2b00      	cmp	r3, #0
 800d756:	d16c      	bne.n	800d832 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 800d758:	68bb      	ldr	r3, [r7, #8]
 800d75a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7fe f947 	bl	800b9f0 <clust2sect>
 800d762:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	3334      	adds	r3, #52	@ 0x34
 800d768:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	899b      	ldrh	r3, [r3, #12]
 800d76e:	461a      	mov	r2, r3
 800d770:	2100      	movs	r1, #0
 800d772:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d774:	f7fd fe91 	bl	800b49a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800d778:	220b      	movs	r2, #11
 800d77a:	2120      	movs	r1, #32
 800d77c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d77e:	f7fd fe8c 	bl	800b49a <mem_set>
					dir[DIR_Name] = '.';
 800d782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d784:	222e      	movs	r2, #46	@ 0x2e
 800d786:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800d788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d78a:	330b      	adds	r3, #11
 800d78c:	2210      	movs	r2, #16
 800d78e:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800d790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d792:	3316      	adds	r3, #22
 800d794:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d796:	4618      	mov	r0, r3
 800d798:	f7fd fe32 	bl	800b400 <st_dword>
					st_clust(fs, dir, dcl);
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d7a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f7fe fe2a 	bl	800c3fc <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800d7a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7aa:	3320      	adds	r3, #32
 800d7ac:	2220      	movs	r2, #32
 800d7ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f7fd fe51 	bl	800b458 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800d7b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7b8:	3321      	adds	r3, #33	@ 0x21
 800d7ba:	222e      	movs	r2, #46	@ 0x2e
 800d7bc:	701a      	strb	r2, [r3, #0]
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	781b      	ldrb	r3, [r3, #0]
 800d7c6:	2b03      	cmp	r3, #3
 800d7c8:	d106      	bne.n	800d7d8 <f_mkdir+0x144>
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d101      	bne.n	800d7d8 <f_mkdir+0x144>
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800d7d8:	68b8      	ldr	r0, [r7, #8]
 800d7da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7dc:	3320      	adds	r3, #32
 800d7de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	f7fe fe0b 	bl	800c3fc <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	895b      	ldrh	r3, [r3, #10]
 800d7ea:	653b      	str	r3, [r7, #80]	@ 0x50
 800d7ec:	e01c      	b.n	800d828 <f_mkdir+0x194>
					fs->winsect = dsc++;
 800d7ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7f0:	1c5a      	adds	r2, r3, #1
 800d7f2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800d7f4:	68ba      	ldr	r2, [r7, #8]
 800d7f6:	6313      	str	r3, [r2, #48]	@ 0x30
					fs->wflag = 1;
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	4618      	mov	r0, r3
 800d802:	f7fe f813 	bl	800b82c <sync_window>
 800d806:	4603      	mov	r3, r0
 800d808:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 800d80c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d810:	2b00      	cmp	r3, #0
 800d812:	d10d      	bne.n	800d830 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	899b      	ldrh	r3, [r3, #12]
 800d818:	461a      	mov	r2, r3
 800d81a:	2100      	movs	r1, #0
 800d81c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d81e:	f7fd fe3c 	bl	800b49a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800d822:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d824:	3b01      	subs	r3, #1
 800d826:	653b      	str	r3, [r7, #80]	@ 0x50
 800d828:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d1df      	bne.n	800d7ee <f_mkdir+0x15a>
 800d82e:	e000      	b.n	800d832 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 800d830:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800d832:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d836:	2b00      	cmp	r3, #0
 800d838:	d107      	bne.n	800d84a <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800d83a:	f107 030c 	add.w	r3, r7, #12
 800d83e:	4618      	mov	r0, r3
 800d840:	f7fe fe51 	bl	800c4e6 <dir_register>
 800d844:	4603      	mov	r3, r0
 800d846:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 800d84a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d120      	bne.n	800d894 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800d852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d854:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800d856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d858:	3316      	adds	r3, #22
 800d85a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d85c:	4618      	mov	r0, r3
 800d85e:	f7fd fdcf 	bl	800b400 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d866:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d868:	4618      	mov	r0, r3
 800d86a:	f7fe fdc7 	bl	800c3fc <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800d86e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d870:	330b      	adds	r3, #11
 800d872:	2210      	movs	r2, #16
 800d874:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	2201      	movs	r2, #1
 800d87a:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800d87c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d880:	2b00      	cmp	r3, #0
 800d882:	d10e      	bne.n	800d8a2 <f_mkdir+0x20e>
					res = sync_fs(fs);
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	4618      	mov	r0, r3
 800d888:	f7fe f842 	bl	800b910 <sync_fs>
 800d88c:	4603      	mov	r3, r0
 800d88e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800d892:	e006      	b.n	800d8a2 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800d894:	f107 030c 	add.w	r3, r7, #12
 800d898:	2200      	movs	r2, #0
 800d89a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d89c:	4618      	mov	r0, r3
 800d89e:	f7fe fab3 	bl	800be08 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800d8a2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3758      	adds	r7, #88	@ 0x58
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}
	...

0800d8b0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b087      	sub	sp, #28
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	60f8      	str	r0, [r7, #12]
 800d8b8:	60b9      	str	r1, [r7, #8]
 800d8ba:	4613      	mov	r3, r2
 800d8bc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d8be:	2301      	movs	r3, #1
 800d8c0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d8c6:	4b1f      	ldr	r3, [pc, #124]	@ (800d944 <FATFS_LinkDriverEx+0x94>)
 800d8c8:	7a5b      	ldrb	r3, [r3, #9]
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d131      	bne.n	800d934 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d8d0:	4b1c      	ldr	r3, [pc, #112]	@ (800d944 <FATFS_LinkDriverEx+0x94>)
 800d8d2:	7a5b      	ldrb	r3, [r3, #9]
 800d8d4:	b2db      	uxtb	r3, r3
 800d8d6:	461a      	mov	r2, r3
 800d8d8:	4b1a      	ldr	r3, [pc, #104]	@ (800d944 <FATFS_LinkDriverEx+0x94>)
 800d8da:	2100      	movs	r1, #0
 800d8dc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d8de:	4b19      	ldr	r3, [pc, #100]	@ (800d944 <FATFS_LinkDriverEx+0x94>)
 800d8e0:	7a5b      	ldrb	r3, [r3, #9]
 800d8e2:	b2db      	uxtb	r3, r3
 800d8e4:	4a17      	ldr	r2, [pc, #92]	@ (800d944 <FATFS_LinkDriverEx+0x94>)
 800d8e6:	009b      	lsls	r3, r3, #2
 800d8e8:	4413      	add	r3, r2
 800d8ea:	68fa      	ldr	r2, [r7, #12]
 800d8ec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d8ee:	4b15      	ldr	r3, [pc, #84]	@ (800d944 <FATFS_LinkDriverEx+0x94>)
 800d8f0:	7a5b      	ldrb	r3, [r3, #9]
 800d8f2:	b2db      	uxtb	r3, r3
 800d8f4:	461a      	mov	r2, r3
 800d8f6:	4b13      	ldr	r3, [pc, #76]	@ (800d944 <FATFS_LinkDriverEx+0x94>)
 800d8f8:	4413      	add	r3, r2
 800d8fa:	79fa      	ldrb	r2, [r7, #7]
 800d8fc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d8fe:	4b11      	ldr	r3, [pc, #68]	@ (800d944 <FATFS_LinkDriverEx+0x94>)
 800d900:	7a5b      	ldrb	r3, [r3, #9]
 800d902:	b2db      	uxtb	r3, r3
 800d904:	1c5a      	adds	r2, r3, #1
 800d906:	b2d1      	uxtb	r1, r2
 800d908:	4a0e      	ldr	r2, [pc, #56]	@ (800d944 <FATFS_LinkDriverEx+0x94>)
 800d90a:	7251      	strb	r1, [r2, #9]
 800d90c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d90e:	7dbb      	ldrb	r3, [r7, #22]
 800d910:	3330      	adds	r3, #48	@ 0x30
 800d912:	b2da      	uxtb	r2, r3
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	3301      	adds	r3, #1
 800d91c:	223a      	movs	r2, #58	@ 0x3a
 800d91e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	3302      	adds	r3, #2
 800d924:	222f      	movs	r2, #47	@ 0x2f
 800d926:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	3303      	adds	r3, #3
 800d92c:	2200      	movs	r2, #0
 800d92e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d930:	2300      	movs	r3, #0
 800d932:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d934:	7dfb      	ldrb	r3, [r7, #23]
}
 800d936:	4618      	mov	r0, r3
 800d938:	371c      	adds	r7, #28
 800d93a:	46bd      	mov	sp, r7
 800d93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d940:	4770      	bx	lr
 800d942:	bf00      	nop
 800d944:	20002bc8 	.word	0x20002bc8

0800d948 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d952:	2200      	movs	r2, #0
 800d954:	6839      	ldr	r1, [r7, #0]
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f7ff ffaa 	bl	800d8b0 <FATFS_LinkDriverEx>
 800d95c:	4603      	mov	r3, r0
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3708      	adds	r7, #8
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}

0800d966 <__cvt>:
 800d966:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d96a:	ec57 6b10 	vmov	r6, r7, d0
 800d96e:	2f00      	cmp	r7, #0
 800d970:	460c      	mov	r4, r1
 800d972:	4619      	mov	r1, r3
 800d974:	463b      	mov	r3, r7
 800d976:	bfbb      	ittet	lt
 800d978:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d97c:	461f      	movlt	r7, r3
 800d97e:	2300      	movge	r3, #0
 800d980:	232d      	movlt	r3, #45	@ 0x2d
 800d982:	700b      	strb	r3, [r1, #0]
 800d984:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d986:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d98a:	4691      	mov	r9, r2
 800d98c:	f023 0820 	bic.w	r8, r3, #32
 800d990:	bfbc      	itt	lt
 800d992:	4632      	movlt	r2, r6
 800d994:	4616      	movlt	r6, r2
 800d996:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d99a:	d005      	beq.n	800d9a8 <__cvt+0x42>
 800d99c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d9a0:	d100      	bne.n	800d9a4 <__cvt+0x3e>
 800d9a2:	3401      	adds	r4, #1
 800d9a4:	2102      	movs	r1, #2
 800d9a6:	e000      	b.n	800d9aa <__cvt+0x44>
 800d9a8:	2103      	movs	r1, #3
 800d9aa:	ab03      	add	r3, sp, #12
 800d9ac:	9301      	str	r3, [sp, #4]
 800d9ae:	ab02      	add	r3, sp, #8
 800d9b0:	9300      	str	r3, [sp, #0]
 800d9b2:	ec47 6b10 	vmov	d0, r6, r7
 800d9b6:	4653      	mov	r3, sl
 800d9b8:	4622      	mov	r2, r4
 800d9ba:	f001 f9c5 	bl	800ed48 <_dtoa_r>
 800d9be:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d9c2:	4605      	mov	r5, r0
 800d9c4:	d119      	bne.n	800d9fa <__cvt+0x94>
 800d9c6:	f019 0f01 	tst.w	r9, #1
 800d9ca:	d00e      	beq.n	800d9ea <__cvt+0x84>
 800d9cc:	eb00 0904 	add.w	r9, r0, r4
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	4630      	mov	r0, r6
 800d9d6:	4639      	mov	r1, r7
 800d9d8:	f7f3 f87e 	bl	8000ad8 <__aeabi_dcmpeq>
 800d9dc:	b108      	cbz	r0, 800d9e2 <__cvt+0x7c>
 800d9de:	f8cd 900c 	str.w	r9, [sp, #12]
 800d9e2:	2230      	movs	r2, #48	@ 0x30
 800d9e4:	9b03      	ldr	r3, [sp, #12]
 800d9e6:	454b      	cmp	r3, r9
 800d9e8:	d31e      	bcc.n	800da28 <__cvt+0xc2>
 800d9ea:	9b03      	ldr	r3, [sp, #12]
 800d9ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d9ee:	1b5b      	subs	r3, r3, r5
 800d9f0:	4628      	mov	r0, r5
 800d9f2:	6013      	str	r3, [r2, #0]
 800d9f4:	b004      	add	sp, #16
 800d9f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9fa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d9fe:	eb00 0904 	add.w	r9, r0, r4
 800da02:	d1e5      	bne.n	800d9d0 <__cvt+0x6a>
 800da04:	7803      	ldrb	r3, [r0, #0]
 800da06:	2b30      	cmp	r3, #48	@ 0x30
 800da08:	d10a      	bne.n	800da20 <__cvt+0xba>
 800da0a:	2200      	movs	r2, #0
 800da0c:	2300      	movs	r3, #0
 800da0e:	4630      	mov	r0, r6
 800da10:	4639      	mov	r1, r7
 800da12:	f7f3 f861 	bl	8000ad8 <__aeabi_dcmpeq>
 800da16:	b918      	cbnz	r0, 800da20 <__cvt+0xba>
 800da18:	f1c4 0401 	rsb	r4, r4, #1
 800da1c:	f8ca 4000 	str.w	r4, [sl]
 800da20:	f8da 3000 	ldr.w	r3, [sl]
 800da24:	4499      	add	r9, r3
 800da26:	e7d3      	b.n	800d9d0 <__cvt+0x6a>
 800da28:	1c59      	adds	r1, r3, #1
 800da2a:	9103      	str	r1, [sp, #12]
 800da2c:	701a      	strb	r2, [r3, #0]
 800da2e:	e7d9      	b.n	800d9e4 <__cvt+0x7e>

0800da30 <__exponent>:
 800da30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da32:	2900      	cmp	r1, #0
 800da34:	bfba      	itte	lt
 800da36:	4249      	neglt	r1, r1
 800da38:	232d      	movlt	r3, #45	@ 0x2d
 800da3a:	232b      	movge	r3, #43	@ 0x2b
 800da3c:	2909      	cmp	r1, #9
 800da3e:	7002      	strb	r2, [r0, #0]
 800da40:	7043      	strb	r3, [r0, #1]
 800da42:	dd29      	ble.n	800da98 <__exponent+0x68>
 800da44:	f10d 0307 	add.w	r3, sp, #7
 800da48:	461d      	mov	r5, r3
 800da4a:	270a      	movs	r7, #10
 800da4c:	461a      	mov	r2, r3
 800da4e:	fbb1 f6f7 	udiv	r6, r1, r7
 800da52:	fb07 1416 	mls	r4, r7, r6, r1
 800da56:	3430      	adds	r4, #48	@ 0x30
 800da58:	f802 4c01 	strb.w	r4, [r2, #-1]
 800da5c:	460c      	mov	r4, r1
 800da5e:	2c63      	cmp	r4, #99	@ 0x63
 800da60:	f103 33ff 	add.w	r3, r3, #4294967295
 800da64:	4631      	mov	r1, r6
 800da66:	dcf1      	bgt.n	800da4c <__exponent+0x1c>
 800da68:	3130      	adds	r1, #48	@ 0x30
 800da6a:	1e94      	subs	r4, r2, #2
 800da6c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800da70:	1c41      	adds	r1, r0, #1
 800da72:	4623      	mov	r3, r4
 800da74:	42ab      	cmp	r3, r5
 800da76:	d30a      	bcc.n	800da8e <__exponent+0x5e>
 800da78:	f10d 0309 	add.w	r3, sp, #9
 800da7c:	1a9b      	subs	r3, r3, r2
 800da7e:	42ac      	cmp	r4, r5
 800da80:	bf88      	it	hi
 800da82:	2300      	movhi	r3, #0
 800da84:	3302      	adds	r3, #2
 800da86:	4403      	add	r3, r0
 800da88:	1a18      	subs	r0, r3, r0
 800da8a:	b003      	add	sp, #12
 800da8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da8e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800da92:	f801 6f01 	strb.w	r6, [r1, #1]!
 800da96:	e7ed      	b.n	800da74 <__exponent+0x44>
 800da98:	2330      	movs	r3, #48	@ 0x30
 800da9a:	3130      	adds	r1, #48	@ 0x30
 800da9c:	7083      	strb	r3, [r0, #2]
 800da9e:	70c1      	strb	r1, [r0, #3]
 800daa0:	1d03      	adds	r3, r0, #4
 800daa2:	e7f1      	b.n	800da88 <__exponent+0x58>

0800daa4 <_printf_float>:
 800daa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daa8:	b08d      	sub	sp, #52	@ 0x34
 800daaa:	460c      	mov	r4, r1
 800daac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800dab0:	4616      	mov	r6, r2
 800dab2:	461f      	mov	r7, r3
 800dab4:	4605      	mov	r5, r0
 800dab6:	f001 f831 	bl	800eb1c <_localeconv_r>
 800daba:	6803      	ldr	r3, [r0, #0]
 800dabc:	9304      	str	r3, [sp, #16]
 800dabe:	4618      	mov	r0, r3
 800dac0:	f7f2 fbde 	bl	8000280 <strlen>
 800dac4:	2300      	movs	r3, #0
 800dac6:	930a      	str	r3, [sp, #40]	@ 0x28
 800dac8:	f8d8 3000 	ldr.w	r3, [r8]
 800dacc:	9005      	str	r0, [sp, #20]
 800dace:	3307      	adds	r3, #7
 800dad0:	f023 0307 	bic.w	r3, r3, #7
 800dad4:	f103 0208 	add.w	r2, r3, #8
 800dad8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800dadc:	f8d4 b000 	ldr.w	fp, [r4]
 800dae0:	f8c8 2000 	str.w	r2, [r8]
 800dae4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dae8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800daec:	9307      	str	r3, [sp, #28]
 800daee:	f8cd 8018 	str.w	r8, [sp, #24]
 800daf2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800daf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dafa:	4b9c      	ldr	r3, [pc, #624]	@ (800dd6c <_printf_float+0x2c8>)
 800dafc:	f04f 32ff 	mov.w	r2, #4294967295
 800db00:	f7f3 f81c 	bl	8000b3c <__aeabi_dcmpun>
 800db04:	bb70      	cbnz	r0, 800db64 <_printf_float+0xc0>
 800db06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800db0a:	4b98      	ldr	r3, [pc, #608]	@ (800dd6c <_printf_float+0x2c8>)
 800db0c:	f04f 32ff 	mov.w	r2, #4294967295
 800db10:	f7f2 fff6 	bl	8000b00 <__aeabi_dcmple>
 800db14:	bb30      	cbnz	r0, 800db64 <_printf_float+0xc0>
 800db16:	2200      	movs	r2, #0
 800db18:	2300      	movs	r3, #0
 800db1a:	4640      	mov	r0, r8
 800db1c:	4649      	mov	r1, r9
 800db1e:	f7f2 ffe5 	bl	8000aec <__aeabi_dcmplt>
 800db22:	b110      	cbz	r0, 800db2a <_printf_float+0x86>
 800db24:	232d      	movs	r3, #45	@ 0x2d
 800db26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db2a:	4a91      	ldr	r2, [pc, #580]	@ (800dd70 <_printf_float+0x2cc>)
 800db2c:	4b91      	ldr	r3, [pc, #580]	@ (800dd74 <_printf_float+0x2d0>)
 800db2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800db32:	bf94      	ite	ls
 800db34:	4690      	movls	r8, r2
 800db36:	4698      	movhi	r8, r3
 800db38:	2303      	movs	r3, #3
 800db3a:	6123      	str	r3, [r4, #16]
 800db3c:	f02b 0304 	bic.w	r3, fp, #4
 800db40:	6023      	str	r3, [r4, #0]
 800db42:	f04f 0900 	mov.w	r9, #0
 800db46:	9700      	str	r7, [sp, #0]
 800db48:	4633      	mov	r3, r6
 800db4a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800db4c:	4621      	mov	r1, r4
 800db4e:	4628      	mov	r0, r5
 800db50:	f000 f9d2 	bl	800def8 <_printf_common>
 800db54:	3001      	adds	r0, #1
 800db56:	f040 808d 	bne.w	800dc74 <_printf_float+0x1d0>
 800db5a:	f04f 30ff 	mov.w	r0, #4294967295
 800db5e:	b00d      	add	sp, #52	@ 0x34
 800db60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db64:	4642      	mov	r2, r8
 800db66:	464b      	mov	r3, r9
 800db68:	4640      	mov	r0, r8
 800db6a:	4649      	mov	r1, r9
 800db6c:	f7f2 ffe6 	bl	8000b3c <__aeabi_dcmpun>
 800db70:	b140      	cbz	r0, 800db84 <_printf_float+0xe0>
 800db72:	464b      	mov	r3, r9
 800db74:	2b00      	cmp	r3, #0
 800db76:	bfbc      	itt	lt
 800db78:	232d      	movlt	r3, #45	@ 0x2d
 800db7a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800db7e:	4a7e      	ldr	r2, [pc, #504]	@ (800dd78 <_printf_float+0x2d4>)
 800db80:	4b7e      	ldr	r3, [pc, #504]	@ (800dd7c <_printf_float+0x2d8>)
 800db82:	e7d4      	b.n	800db2e <_printf_float+0x8a>
 800db84:	6863      	ldr	r3, [r4, #4]
 800db86:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800db8a:	9206      	str	r2, [sp, #24]
 800db8c:	1c5a      	adds	r2, r3, #1
 800db8e:	d13b      	bne.n	800dc08 <_printf_float+0x164>
 800db90:	2306      	movs	r3, #6
 800db92:	6063      	str	r3, [r4, #4]
 800db94:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800db98:	2300      	movs	r3, #0
 800db9a:	6022      	str	r2, [r4, #0]
 800db9c:	9303      	str	r3, [sp, #12]
 800db9e:	ab0a      	add	r3, sp, #40	@ 0x28
 800dba0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800dba4:	ab09      	add	r3, sp, #36	@ 0x24
 800dba6:	9300      	str	r3, [sp, #0]
 800dba8:	6861      	ldr	r1, [r4, #4]
 800dbaa:	ec49 8b10 	vmov	d0, r8, r9
 800dbae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800dbb2:	4628      	mov	r0, r5
 800dbb4:	f7ff fed7 	bl	800d966 <__cvt>
 800dbb8:	9b06      	ldr	r3, [sp, #24]
 800dbba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dbbc:	2b47      	cmp	r3, #71	@ 0x47
 800dbbe:	4680      	mov	r8, r0
 800dbc0:	d129      	bne.n	800dc16 <_printf_float+0x172>
 800dbc2:	1cc8      	adds	r0, r1, #3
 800dbc4:	db02      	blt.n	800dbcc <_printf_float+0x128>
 800dbc6:	6863      	ldr	r3, [r4, #4]
 800dbc8:	4299      	cmp	r1, r3
 800dbca:	dd41      	ble.n	800dc50 <_printf_float+0x1ac>
 800dbcc:	f1aa 0a02 	sub.w	sl, sl, #2
 800dbd0:	fa5f fa8a 	uxtb.w	sl, sl
 800dbd4:	3901      	subs	r1, #1
 800dbd6:	4652      	mov	r2, sl
 800dbd8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800dbdc:	9109      	str	r1, [sp, #36]	@ 0x24
 800dbde:	f7ff ff27 	bl	800da30 <__exponent>
 800dbe2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dbe4:	1813      	adds	r3, r2, r0
 800dbe6:	2a01      	cmp	r2, #1
 800dbe8:	4681      	mov	r9, r0
 800dbea:	6123      	str	r3, [r4, #16]
 800dbec:	dc02      	bgt.n	800dbf4 <_printf_float+0x150>
 800dbee:	6822      	ldr	r2, [r4, #0]
 800dbf0:	07d2      	lsls	r2, r2, #31
 800dbf2:	d501      	bpl.n	800dbf8 <_printf_float+0x154>
 800dbf4:	3301      	adds	r3, #1
 800dbf6:	6123      	str	r3, [r4, #16]
 800dbf8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d0a2      	beq.n	800db46 <_printf_float+0xa2>
 800dc00:	232d      	movs	r3, #45	@ 0x2d
 800dc02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc06:	e79e      	b.n	800db46 <_printf_float+0xa2>
 800dc08:	9a06      	ldr	r2, [sp, #24]
 800dc0a:	2a47      	cmp	r2, #71	@ 0x47
 800dc0c:	d1c2      	bne.n	800db94 <_printf_float+0xf0>
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d1c0      	bne.n	800db94 <_printf_float+0xf0>
 800dc12:	2301      	movs	r3, #1
 800dc14:	e7bd      	b.n	800db92 <_printf_float+0xee>
 800dc16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dc1a:	d9db      	bls.n	800dbd4 <_printf_float+0x130>
 800dc1c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800dc20:	d118      	bne.n	800dc54 <_printf_float+0x1b0>
 800dc22:	2900      	cmp	r1, #0
 800dc24:	6863      	ldr	r3, [r4, #4]
 800dc26:	dd0b      	ble.n	800dc40 <_printf_float+0x19c>
 800dc28:	6121      	str	r1, [r4, #16]
 800dc2a:	b913      	cbnz	r3, 800dc32 <_printf_float+0x18e>
 800dc2c:	6822      	ldr	r2, [r4, #0]
 800dc2e:	07d0      	lsls	r0, r2, #31
 800dc30:	d502      	bpl.n	800dc38 <_printf_float+0x194>
 800dc32:	3301      	adds	r3, #1
 800dc34:	440b      	add	r3, r1
 800dc36:	6123      	str	r3, [r4, #16]
 800dc38:	65a1      	str	r1, [r4, #88]	@ 0x58
 800dc3a:	f04f 0900 	mov.w	r9, #0
 800dc3e:	e7db      	b.n	800dbf8 <_printf_float+0x154>
 800dc40:	b913      	cbnz	r3, 800dc48 <_printf_float+0x1a4>
 800dc42:	6822      	ldr	r2, [r4, #0]
 800dc44:	07d2      	lsls	r2, r2, #31
 800dc46:	d501      	bpl.n	800dc4c <_printf_float+0x1a8>
 800dc48:	3302      	adds	r3, #2
 800dc4a:	e7f4      	b.n	800dc36 <_printf_float+0x192>
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	e7f2      	b.n	800dc36 <_printf_float+0x192>
 800dc50:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800dc54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc56:	4299      	cmp	r1, r3
 800dc58:	db05      	blt.n	800dc66 <_printf_float+0x1c2>
 800dc5a:	6823      	ldr	r3, [r4, #0]
 800dc5c:	6121      	str	r1, [r4, #16]
 800dc5e:	07d8      	lsls	r0, r3, #31
 800dc60:	d5ea      	bpl.n	800dc38 <_printf_float+0x194>
 800dc62:	1c4b      	adds	r3, r1, #1
 800dc64:	e7e7      	b.n	800dc36 <_printf_float+0x192>
 800dc66:	2900      	cmp	r1, #0
 800dc68:	bfd4      	ite	le
 800dc6a:	f1c1 0202 	rsble	r2, r1, #2
 800dc6e:	2201      	movgt	r2, #1
 800dc70:	4413      	add	r3, r2
 800dc72:	e7e0      	b.n	800dc36 <_printf_float+0x192>
 800dc74:	6823      	ldr	r3, [r4, #0]
 800dc76:	055a      	lsls	r2, r3, #21
 800dc78:	d407      	bmi.n	800dc8a <_printf_float+0x1e6>
 800dc7a:	6923      	ldr	r3, [r4, #16]
 800dc7c:	4642      	mov	r2, r8
 800dc7e:	4631      	mov	r1, r6
 800dc80:	4628      	mov	r0, r5
 800dc82:	47b8      	blx	r7
 800dc84:	3001      	adds	r0, #1
 800dc86:	d12b      	bne.n	800dce0 <_printf_float+0x23c>
 800dc88:	e767      	b.n	800db5a <_printf_float+0xb6>
 800dc8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dc8e:	f240 80dd 	bls.w	800de4c <_printf_float+0x3a8>
 800dc92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dc96:	2200      	movs	r2, #0
 800dc98:	2300      	movs	r3, #0
 800dc9a:	f7f2 ff1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800dc9e:	2800      	cmp	r0, #0
 800dca0:	d033      	beq.n	800dd0a <_printf_float+0x266>
 800dca2:	4a37      	ldr	r2, [pc, #220]	@ (800dd80 <_printf_float+0x2dc>)
 800dca4:	2301      	movs	r3, #1
 800dca6:	4631      	mov	r1, r6
 800dca8:	4628      	mov	r0, r5
 800dcaa:	47b8      	blx	r7
 800dcac:	3001      	adds	r0, #1
 800dcae:	f43f af54 	beq.w	800db5a <_printf_float+0xb6>
 800dcb2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800dcb6:	4543      	cmp	r3, r8
 800dcb8:	db02      	blt.n	800dcc0 <_printf_float+0x21c>
 800dcba:	6823      	ldr	r3, [r4, #0]
 800dcbc:	07d8      	lsls	r0, r3, #31
 800dcbe:	d50f      	bpl.n	800dce0 <_printf_float+0x23c>
 800dcc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dcc4:	4631      	mov	r1, r6
 800dcc6:	4628      	mov	r0, r5
 800dcc8:	47b8      	blx	r7
 800dcca:	3001      	adds	r0, #1
 800dccc:	f43f af45 	beq.w	800db5a <_printf_float+0xb6>
 800dcd0:	f04f 0900 	mov.w	r9, #0
 800dcd4:	f108 38ff 	add.w	r8, r8, #4294967295
 800dcd8:	f104 0a1a 	add.w	sl, r4, #26
 800dcdc:	45c8      	cmp	r8, r9
 800dcde:	dc09      	bgt.n	800dcf4 <_printf_float+0x250>
 800dce0:	6823      	ldr	r3, [r4, #0]
 800dce2:	079b      	lsls	r3, r3, #30
 800dce4:	f100 8103 	bmi.w	800deee <_printf_float+0x44a>
 800dce8:	68e0      	ldr	r0, [r4, #12]
 800dcea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dcec:	4298      	cmp	r0, r3
 800dcee:	bfb8      	it	lt
 800dcf0:	4618      	movlt	r0, r3
 800dcf2:	e734      	b.n	800db5e <_printf_float+0xba>
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	4652      	mov	r2, sl
 800dcf8:	4631      	mov	r1, r6
 800dcfa:	4628      	mov	r0, r5
 800dcfc:	47b8      	blx	r7
 800dcfe:	3001      	adds	r0, #1
 800dd00:	f43f af2b 	beq.w	800db5a <_printf_float+0xb6>
 800dd04:	f109 0901 	add.w	r9, r9, #1
 800dd08:	e7e8      	b.n	800dcdc <_printf_float+0x238>
 800dd0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	dc39      	bgt.n	800dd84 <_printf_float+0x2e0>
 800dd10:	4a1b      	ldr	r2, [pc, #108]	@ (800dd80 <_printf_float+0x2dc>)
 800dd12:	2301      	movs	r3, #1
 800dd14:	4631      	mov	r1, r6
 800dd16:	4628      	mov	r0, r5
 800dd18:	47b8      	blx	r7
 800dd1a:	3001      	adds	r0, #1
 800dd1c:	f43f af1d 	beq.w	800db5a <_printf_float+0xb6>
 800dd20:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800dd24:	ea59 0303 	orrs.w	r3, r9, r3
 800dd28:	d102      	bne.n	800dd30 <_printf_float+0x28c>
 800dd2a:	6823      	ldr	r3, [r4, #0]
 800dd2c:	07d9      	lsls	r1, r3, #31
 800dd2e:	d5d7      	bpl.n	800dce0 <_printf_float+0x23c>
 800dd30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd34:	4631      	mov	r1, r6
 800dd36:	4628      	mov	r0, r5
 800dd38:	47b8      	blx	r7
 800dd3a:	3001      	adds	r0, #1
 800dd3c:	f43f af0d 	beq.w	800db5a <_printf_float+0xb6>
 800dd40:	f04f 0a00 	mov.w	sl, #0
 800dd44:	f104 0b1a 	add.w	fp, r4, #26
 800dd48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd4a:	425b      	negs	r3, r3
 800dd4c:	4553      	cmp	r3, sl
 800dd4e:	dc01      	bgt.n	800dd54 <_printf_float+0x2b0>
 800dd50:	464b      	mov	r3, r9
 800dd52:	e793      	b.n	800dc7c <_printf_float+0x1d8>
 800dd54:	2301      	movs	r3, #1
 800dd56:	465a      	mov	r2, fp
 800dd58:	4631      	mov	r1, r6
 800dd5a:	4628      	mov	r0, r5
 800dd5c:	47b8      	blx	r7
 800dd5e:	3001      	adds	r0, #1
 800dd60:	f43f aefb 	beq.w	800db5a <_printf_float+0xb6>
 800dd64:	f10a 0a01 	add.w	sl, sl, #1
 800dd68:	e7ee      	b.n	800dd48 <_printf_float+0x2a4>
 800dd6a:	bf00      	nop
 800dd6c:	7fefffff 	.word	0x7fefffff
 800dd70:	08013d94 	.word	0x08013d94
 800dd74:	08013d98 	.word	0x08013d98
 800dd78:	08013d9c 	.word	0x08013d9c
 800dd7c:	08013da0 	.word	0x08013da0
 800dd80:	08014130 	.word	0x08014130
 800dd84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dd86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dd8a:	4553      	cmp	r3, sl
 800dd8c:	bfa8      	it	ge
 800dd8e:	4653      	movge	r3, sl
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	4699      	mov	r9, r3
 800dd94:	dc36      	bgt.n	800de04 <_printf_float+0x360>
 800dd96:	f04f 0b00 	mov.w	fp, #0
 800dd9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dd9e:	f104 021a 	add.w	r2, r4, #26
 800dda2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dda4:	9306      	str	r3, [sp, #24]
 800dda6:	eba3 0309 	sub.w	r3, r3, r9
 800ddaa:	455b      	cmp	r3, fp
 800ddac:	dc31      	bgt.n	800de12 <_printf_float+0x36e>
 800ddae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddb0:	459a      	cmp	sl, r3
 800ddb2:	dc3a      	bgt.n	800de2a <_printf_float+0x386>
 800ddb4:	6823      	ldr	r3, [r4, #0]
 800ddb6:	07da      	lsls	r2, r3, #31
 800ddb8:	d437      	bmi.n	800de2a <_printf_float+0x386>
 800ddba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddbc:	ebaa 0903 	sub.w	r9, sl, r3
 800ddc0:	9b06      	ldr	r3, [sp, #24]
 800ddc2:	ebaa 0303 	sub.w	r3, sl, r3
 800ddc6:	4599      	cmp	r9, r3
 800ddc8:	bfa8      	it	ge
 800ddca:	4699      	movge	r9, r3
 800ddcc:	f1b9 0f00 	cmp.w	r9, #0
 800ddd0:	dc33      	bgt.n	800de3a <_printf_float+0x396>
 800ddd2:	f04f 0800 	mov.w	r8, #0
 800ddd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ddda:	f104 0b1a 	add.w	fp, r4, #26
 800ddde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dde0:	ebaa 0303 	sub.w	r3, sl, r3
 800dde4:	eba3 0309 	sub.w	r3, r3, r9
 800dde8:	4543      	cmp	r3, r8
 800ddea:	f77f af79 	ble.w	800dce0 <_printf_float+0x23c>
 800ddee:	2301      	movs	r3, #1
 800ddf0:	465a      	mov	r2, fp
 800ddf2:	4631      	mov	r1, r6
 800ddf4:	4628      	mov	r0, r5
 800ddf6:	47b8      	blx	r7
 800ddf8:	3001      	adds	r0, #1
 800ddfa:	f43f aeae 	beq.w	800db5a <_printf_float+0xb6>
 800ddfe:	f108 0801 	add.w	r8, r8, #1
 800de02:	e7ec      	b.n	800ddde <_printf_float+0x33a>
 800de04:	4642      	mov	r2, r8
 800de06:	4631      	mov	r1, r6
 800de08:	4628      	mov	r0, r5
 800de0a:	47b8      	blx	r7
 800de0c:	3001      	adds	r0, #1
 800de0e:	d1c2      	bne.n	800dd96 <_printf_float+0x2f2>
 800de10:	e6a3      	b.n	800db5a <_printf_float+0xb6>
 800de12:	2301      	movs	r3, #1
 800de14:	4631      	mov	r1, r6
 800de16:	4628      	mov	r0, r5
 800de18:	9206      	str	r2, [sp, #24]
 800de1a:	47b8      	blx	r7
 800de1c:	3001      	adds	r0, #1
 800de1e:	f43f ae9c 	beq.w	800db5a <_printf_float+0xb6>
 800de22:	9a06      	ldr	r2, [sp, #24]
 800de24:	f10b 0b01 	add.w	fp, fp, #1
 800de28:	e7bb      	b.n	800dda2 <_printf_float+0x2fe>
 800de2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de2e:	4631      	mov	r1, r6
 800de30:	4628      	mov	r0, r5
 800de32:	47b8      	blx	r7
 800de34:	3001      	adds	r0, #1
 800de36:	d1c0      	bne.n	800ddba <_printf_float+0x316>
 800de38:	e68f      	b.n	800db5a <_printf_float+0xb6>
 800de3a:	9a06      	ldr	r2, [sp, #24]
 800de3c:	464b      	mov	r3, r9
 800de3e:	4442      	add	r2, r8
 800de40:	4631      	mov	r1, r6
 800de42:	4628      	mov	r0, r5
 800de44:	47b8      	blx	r7
 800de46:	3001      	adds	r0, #1
 800de48:	d1c3      	bne.n	800ddd2 <_printf_float+0x32e>
 800de4a:	e686      	b.n	800db5a <_printf_float+0xb6>
 800de4c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800de50:	f1ba 0f01 	cmp.w	sl, #1
 800de54:	dc01      	bgt.n	800de5a <_printf_float+0x3b6>
 800de56:	07db      	lsls	r3, r3, #31
 800de58:	d536      	bpl.n	800dec8 <_printf_float+0x424>
 800de5a:	2301      	movs	r3, #1
 800de5c:	4642      	mov	r2, r8
 800de5e:	4631      	mov	r1, r6
 800de60:	4628      	mov	r0, r5
 800de62:	47b8      	blx	r7
 800de64:	3001      	adds	r0, #1
 800de66:	f43f ae78 	beq.w	800db5a <_printf_float+0xb6>
 800de6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de6e:	4631      	mov	r1, r6
 800de70:	4628      	mov	r0, r5
 800de72:	47b8      	blx	r7
 800de74:	3001      	adds	r0, #1
 800de76:	f43f ae70 	beq.w	800db5a <_printf_float+0xb6>
 800de7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800de7e:	2200      	movs	r2, #0
 800de80:	2300      	movs	r3, #0
 800de82:	f10a 3aff 	add.w	sl, sl, #4294967295
 800de86:	f7f2 fe27 	bl	8000ad8 <__aeabi_dcmpeq>
 800de8a:	b9c0      	cbnz	r0, 800debe <_printf_float+0x41a>
 800de8c:	4653      	mov	r3, sl
 800de8e:	f108 0201 	add.w	r2, r8, #1
 800de92:	4631      	mov	r1, r6
 800de94:	4628      	mov	r0, r5
 800de96:	47b8      	blx	r7
 800de98:	3001      	adds	r0, #1
 800de9a:	d10c      	bne.n	800deb6 <_printf_float+0x412>
 800de9c:	e65d      	b.n	800db5a <_printf_float+0xb6>
 800de9e:	2301      	movs	r3, #1
 800dea0:	465a      	mov	r2, fp
 800dea2:	4631      	mov	r1, r6
 800dea4:	4628      	mov	r0, r5
 800dea6:	47b8      	blx	r7
 800dea8:	3001      	adds	r0, #1
 800deaa:	f43f ae56 	beq.w	800db5a <_printf_float+0xb6>
 800deae:	f108 0801 	add.w	r8, r8, #1
 800deb2:	45d0      	cmp	r8, sl
 800deb4:	dbf3      	blt.n	800de9e <_printf_float+0x3fa>
 800deb6:	464b      	mov	r3, r9
 800deb8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800debc:	e6df      	b.n	800dc7e <_printf_float+0x1da>
 800debe:	f04f 0800 	mov.w	r8, #0
 800dec2:	f104 0b1a 	add.w	fp, r4, #26
 800dec6:	e7f4      	b.n	800deb2 <_printf_float+0x40e>
 800dec8:	2301      	movs	r3, #1
 800deca:	4642      	mov	r2, r8
 800decc:	e7e1      	b.n	800de92 <_printf_float+0x3ee>
 800dece:	2301      	movs	r3, #1
 800ded0:	464a      	mov	r2, r9
 800ded2:	4631      	mov	r1, r6
 800ded4:	4628      	mov	r0, r5
 800ded6:	47b8      	blx	r7
 800ded8:	3001      	adds	r0, #1
 800deda:	f43f ae3e 	beq.w	800db5a <_printf_float+0xb6>
 800dede:	f108 0801 	add.w	r8, r8, #1
 800dee2:	68e3      	ldr	r3, [r4, #12]
 800dee4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dee6:	1a5b      	subs	r3, r3, r1
 800dee8:	4543      	cmp	r3, r8
 800deea:	dcf0      	bgt.n	800dece <_printf_float+0x42a>
 800deec:	e6fc      	b.n	800dce8 <_printf_float+0x244>
 800deee:	f04f 0800 	mov.w	r8, #0
 800def2:	f104 0919 	add.w	r9, r4, #25
 800def6:	e7f4      	b.n	800dee2 <_printf_float+0x43e>

0800def8 <_printf_common>:
 800def8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800defc:	4616      	mov	r6, r2
 800defe:	4698      	mov	r8, r3
 800df00:	688a      	ldr	r2, [r1, #8]
 800df02:	690b      	ldr	r3, [r1, #16]
 800df04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800df08:	4293      	cmp	r3, r2
 800df0a:	bfb8      	it	lt
 800df0c:	4613      	movlt	r3, r2
 800df0e:	6033      	str	r3, [r6, #0]
 800df10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800df14:	4607      	mov	r7, r0
 800df16:	460c      	mov	r4, r1
 800df18:	b10a      	cbz	r2, 800df1e <_printf_common+0x26>
 800df1a:	3301      	adds	r3, #1
 800df1c:	6033      	str	r3, [r6, #0]
 800df1e:	6823      	ldr	r3, [r4, #0]
 800df20:	0699      	lsls	r1, r3, #26
 800df22:	bf42      	ittt	mi
 800df24:	6833      	ldrmi	r3, [r6, #0]
 800df26:	3302      	addmi	r3, #2
 800df28:	6033      	strmi	r3, [r6, #0]
 800df2a:	6825      	ldr	r5, [r4, #0]
 800df2c:	f015 0506 	ands.w	r5, r5, #6
 800df30:	d106      	bne.n	800df40 <_printf_common+0x48>
 800df32:	f104 0a19 	add.w	sl, r4, #25
 800df36:	68e3      	ldr	r3, [r4, #12]
 800df38:	6832      	ldr	r2, [r6, #0]
 800df3a:	1a9b      	subs	r3, r3, r2
 800df3c:	42ab      	cmp	r3, r5
 800df3e:	dc26      	bgt.n	800df8e <_printf_common+0x96>
 800df40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800df44:	6822      	ldr	r2, [r4, #0]
 800df46:	3b00      	subs	r3, #0
 800df48:	bf18      	it	ne
 800df4a:	2301      	movne	r3, #1
 800df4c:	0692      	lsls	r2, r2, #26
 800df4e:	d42b      	bmi.n	800dfa8 <_printf_common+0xb0>
 800df50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800df54:	4641      	mov	r1, r8
 800df56:	4638      	mov	r0, r7
 800df58:	47c8      	blx	r9
 800df5a:	3001      	adds	r0, #1
 800df5c:	d01e      	beq.n	800df9c <_printf_common+0xa4>
 800df5e:	6823      	ldr	r3, [r4, #0]
 800df60:	6922      	ldr	r2, [r4, #16]
 800df62:	f003 0306 	and.w	r3, r3, #6
 800df66:	2b04      	cmp	r3, #4
 800df68:	bf02      	ittt	eq
 800df6a:	68e5      	ldreq	r5, [r4, #12]
 800df6c:	6833      	ldreq	r3, [r6, #0]
 800df6e:	1aed      	subeq	r5, r5, r3
 800df70:	68a3      	ldr	r3, [r4, #8]
 800df72:	bf0c      	ite	eq
 800df74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df78:	2500      	movne	r5, #0
 800df7a:	4293      	cmp	r3, r2
 800df7c:	bfc4      	itt	gt
 800df7e:	1a9b      	subgt	r3, r3, r2
 800df80:	18ed      	addgt	r5, r5, r3
 800df82:	2600      	movs	r6, #0
 800df84:	341a      	adds	r4, #26
 800df86:	42b5      	cmp	r5, r6
 800df88:	d11a      	bne.n	800dfc0 <_printf_common+0xc8>
 800df8a:	2000      	movs	r0, #0
 800df8c:	e008      	b.n	800dfa0 <_printf_common+0xa8>
 800df8e:	2301      	movs	r3, #1
 800df90:	4652      	mov	r2, sl
 800df92:	4641      	mov	r1, r8
 800df94:	4638      	mov	r0, r7
 800df96:	47c8      	blx	r9
 800df98:	3001      	adds	r0, #1
 800df9a:	d103      	bne.n	800dfa4 <_printf_common+0xac>
 800df9c:	f04f 30ff 	mov.w	r0, #4294967295
 800dfa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfa4:	3501      	adds	r5, #1
 800dfa6:	e7c6      	b.n	800df36 <_printf_common+0x3e>
 800dfa8:	18e1      	adds	r1, r4, r3
 800dfaa:	1c5a      	adds	r2, r3, #1
 800dfac:	2030      	movs	r0, #48	@ 0x30
 800dfae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dfb2:	4422      	add	r2, r4
 800dfb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dfb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dfbc:	3302      	adds	r3, #2
 800dfbe:	e7c7      	b.n	800df50 <_printf_common+0x58>
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	4622      	mov	r2, r4
 800dfc4:	4641      	mov	r1, r8
 800dfc6:	4638      	mov	r0, r7
 800dfc8:	47c8      	blx	r9
 800dfca:	3001      	adds	r0, #1
 800dfcc:	d0e6      	beq.n	800df9c <_printf_common+0xa4>
 800dfce:	3601      	adds	r6, #1
 800dfd0:	e7d9      	b.n	800df86 <_printf_common+0x8e>
	...

0800dfd4 <_printf_i>:
 800dfd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dfd8:	7e0f      	ldrb	r7, [r1, #24]
 800dfda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dfdc:	2f78      	cmp	r7, #120	@ 0x78
 800dfde:	4691      	mov	r9, r2
 800dfe0:	4680      	mov	r8, r0
 800dfe2:	460c      	mov	r4, r1
 800dfe4:	469a      	mov	sl, r3
 800dfe6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dfea:	d807      	bhi.n	800dffc <_printf_i+0x28>
 800dfec:	2f62      	cmp	r7, #98	@ 0x62
 800dfee:	d80a      	bhi.n	800e006 <_printf_i+0x32>
 800dff0:	2f00      	cmp	r7, #0
 800dff2:	f000 80d2 	beq.w	800e19a <_printf_i+0x1c6>
 800dff6:	2f58      	cmp	r7, #88	@ 0x58
 800dff8:	f000 80b9 	beq.w	800e16e <_printf_i+0x19a>
 800dffc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e000:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e004:	e03a      	b.n	800e07c <_printf_i+0xa8>
 800e006:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e00a:	2b15      	cmp	r3, #21
 800e00c:	d8f6      	bhi.n	800dffc <_printf_i+0x28>
 800e00e:	a101      	add	r1, pc, #4	@ (adr r1, 800e014 <_printf_i+0x40>)
 800e010:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e014:	0800e06d 	.word	0x0800e06d
 800e018:	0800e081 	.word	0x0800e081
 800e01c:	0800dffd 	.word	0x0800dffd
 800e020:	0800dffd 	.word	0x0800dffd
 800e024:	0800dffd 	.word	0x0800dffd
 800e028:	0800dffd 	.word	0x0800dffd
 800e02c:	0800e081 	.word	0x0800e081
 800e030:	0800dffd 	.word	0x0800dffd
 800e034:	0800dffd 	.word	0x0800dffd
 800e038:	0800dffd 	.word	0x0800dffd
 800e03c:	0800dffd 	.word	0x0800dffd
 800e040:	0800e181 	.word	0x0800e181
 800e044:	0800e0ab 	.word	0x0800e0ab
 800e048:	0800e13b 	.word	0x0800e13b
 800e04c:	0800dffd 	.word	0x0800dffd
 800e050:	0800dffd 	.word	0x0800dffd
 800e054:	0800e1a3 	.word	0x0800e1a3
 800e058:	0800dffd 	.word	0x0800dffd
 800e05c:	0800e0ab 	.word	0x0800e0ab
 800e060:	0800dffd 	.word	0x0800dffd
 800e064:	0800dffd 	.word	0x0800dffd
 800e068:	0800e143 	.word	0x0800e143
 800e06c:	6833      	ldr	r3, [r6, #0]
 800e06e:	1d1a      	adds	r2, r3, #4
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	6032      	str	r2, [r6, #0]
 800e074:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e078:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e07c:	2301      	movs	r3, #1
 800e07e:	e09d      	b.n	800e1bc <_printf_i+0x1e8>
 800e080:	6833      	ldr	r3, [r6, #0]
 800e082:	6820      	ldr	r0, [r4, #0]
 800e084:	1d19      	adds	r1, r3, #4
 800e086:	6031      	str	r1, [r6, #0]
 800e088:	0606      	lsls	r6, r0, #24
 800e08a:	d501      	bpl.n	800e090 <_printf_i+0xbc>
 800e08c:	681d      	ldr	r5, [r3, #0]
 800e08e:	e003      	b.n	800e098 <_printf_i+0xc4>
 800e090:	0645      	lsls	r5, r0, #25
 800e092:	d5fb      	bpl.n	800e08c <_printf_i+0xb8>
 800e094:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e098:	2d00      	cmp	r5, #0
 800e09a:	da03      	bge.n	800e0a4 <_printf_i+0xd0>
 800e09c:	232d      	movs	r3, #45	@ 0x2d
 800e09e:	426d      	negs	r5, r5
 800e0a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e0a4:	4859      	ldr	r0, [pc, #356]	@ (800e20c <_printf_i+0x238>)
 800e0a6:	230a      	movs	r3, #10
 800e0a8:	e011      	b.n	800e0ce <_printf_i+0xfa>
 800e0aa:	6821      	ldr	r1, [r4, #0]
 800e0ac:	6833      	ldr	r3, [r6, #0]
 800e0ae:	0608      	lsls	r0, r1, #24
 800e0b0:	f853 5b04 	ldr.w	r5, [r3], #4
 800e0b4:	d402      	bmi.n	800e0bc <_printf_i+0xe8>
 800e0b6:	0649      	lsls	r1, r1, #25
 800e0b8:	bf48      	it	mi
 800e0ba:	b2ad      	uxthmi	r5, r5
 800e0bc:	2f6f      	cmp	r7, #111	@ 0x6f
 800e0be:	4853      	ldr	r0, [pc, #332]	@ (800e20c <_printf_i+0x238>)
 800e0c0:	6033      	str	r3, [r6, #0]
 800e0c2:	bf14      	ite	ne
 800e0c4:	230a      	movne	r3, #10
 800e0c6:	2308      	moveq	r3, #8
 800e0c8:	2100      	movs	r1, #0
 800e0ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e0ce:	6866      	ldr	r6, [r4, #4]
 800e0d0:	60a6      	str	r6, [r4, #8]
 800e0d2:	2e00      	cmp	r6, #0
 800e0d4:	bfa2      	ittt	ge
 800e0d6:	6821      	ldrge	r1, [r4, #0]
 800e0d8:	f021 0104 	bicge.w	r1, r1, #4
 800e0dc:	6021      	strge	r1, [r4, #0]
 800e0de:	b90d      	cbnz	r5, 800e0e4 <_printf_i+0x110>
 800e0e0:	2e00      	cmp	r6, #0
 800e0e2:	d04b      	beq.n	800e17c <_printf_i+0x1a8>
 800e0e4:	4616      	mov	r6, r2
 800e0e6:	fbb5 f1f3 	udiv	r1, r5, r3
 800e0ea:	fb03 5711 	mls	r7, r3, r1, r5
 800e0ee:	5dc7      	ldrb	r7, [r0, r7]
 800e0f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e0f4:	462f      	mov	r7, r5
 800e0f6:	42bb      	cmp	r3, r7
 800e0f8:	460d      	mov	r5, r1
 800e0fa:	d9f4      	bls.n	800e0e6 <_printf_i+0x112>
 800e0fc:	2b08      	cmp	r3, #8
 800e0fe:	d10b      	bne.n	800e118 <_printf_i+0x144>
 800e100:	6823      	ldr	r3, [r4, #0]
 800e102:	07df      	lsls	r7, r3, #31
 800e104:	d508      	bpl.n	800e118 <_printf_i+0x144>
 800e106:	6923      	ldr	r3, [r4, #16]
 800e108:	6861      	ldr	r1, [r4, #4]
 800e10a:	4299      	cmp	r1, r3
 800e10c:	bfde      	ittt	le
 800e10e:	2330      	movle	r3, #48	@ 0x30
 800e110:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e114:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e118:	1b92      	subs	r2, r2, r6
 800e11a:	6122      	str	r2, [r4, #16]
 800e11c:	f8cd a000 	str.w	sl, [sp]
 800e120:	464b      	mov	r3, r9
 800e122:	aa03      	add	r2, sp, #12
 800e124:	4621      	mov	r1, r4
 800e126:	4640      	mov	r0, r8
 800e128:	f7ff fee6 	bl	800def8 <_printf_common>
 800e12c:	3001      	adds	r0, #1
 800e12e:	d14a      	bne.n	800e1c6 <_printf_i+0x1f2>
 800e130:	f04f 30ff 	mov.w	r0, #4294967295
 800e134:	b004      	add	sp, #16
 800e136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e13a:	6823      	ldr	r3, [r4, #0]
 800e13c:	f043 0320 	orr.w	r3, r3, #32
 800e140:	6023      	str	r3, [r4, #0]
 800e142:	4833      	ldr	r0, [pc, #204]	@ (800e210 <_printf_i+0x23c>)
 800e144:	2778      	movs	r7, #120	@ 0x78
 800e146:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e14a:	6823      	ldr	r3, [r4, #0]
 800e14c:	6831      	ldr	r1, [r6, #0]
 800e14e:	061f      	lsls	r7, r3, #24
 800e150:	f851 5b04 	ldr.w	r5, [r1], #4
 800e154:	d402      	bmi.n	800e15c <_printf_i+0x188>
 800e156:	065f      	lsls	r7, r3, #25
 800e158:	bf48      	it	mi
 800e15a:	b2ad      	uxthmi	r5, r5
 800e15c:	6031      	str	r1, [r6, #0]
 800e15e:	07d9      	lsls	r1, r3, #31
 800e160:	bf44      	itt	mi
 800e162:	f043 0320 	orrmi.w	r3, r3, #32
 800e166:	6023      	strmi	r3, [r4, #0]
 800e168:	b11d      	cbz	r5, 800e172 <_printf_i+0x19e>
 800e16a:	2310      	movs	r3, #16
 800e16c:	e7ac      	b.n	800e0c8 <_printf_i+0xf4>
 800e16e:	4827      	ldr	r0, [pc, #156]	@ (800e20c <_printf_i+0x238>)
 800e170:	e7e9      	b.n	800e146 <_printf_i+0x172>
 800e172:	6823      	ldr	r3, [r4, #0]
 800e174:	f023 0320 	bic.w	r3, r3, #32
 800e178:	6023      	str	r3, [r4, #0]
 800e17a:	e7f6      	b.n	800e16a <_printf_i+0x196>
 800e17c:	4616      	mov	r6, r2
 800e17e:	e7bd      	b.n	800e0fc <_printf_i+0x128>
 800e180:	6833      	ldr	r3, [r6, #0]
 800e182:	6825      	ldr	r5, [r4, #0]
 800e184:	6961      	ldr	r1, [r4, #20]
 800e186:	1d18      	adds	r0, r3, #4
 800e188:	6030      	str	r0, [r6, #0]
 800e18a:	062e      	lsls	r6, r5, #24
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	d501      	bpl.n	800e194 <_printf_i+0x1c0>
 800e190:	6019      	str	r1, [r3, #0]
 800e192:	e002      	b.n	800e19a <_printf_i+0x1c6>
 800e194:	0668      	lsls	r0, r5, #25
 800e196:	d5fb      	bpl.n	800e190 <_printf_i+0x1bc>
 800e198:	8019      	strh	r1, [r3, #0]
 800e19a:	2300      	movs	r3, #0
 800e19c:	6123      	str	r3, [r4, #16]
 800e19e:	4616      	mov	r6, r2
 800e1a0:	e7bc      	b.n	800e11c <_printf_i+0x148>
 800e1a2:	6833      	ldr	r3, [r6, #0]
 800e1a4:	1d1a      	adds	r2, r3, #4
 800e1a6:	6032      	str	r2, [r6, #0]
 800e1a8:	681e      	ldr	r6, [r3, #0]
 800e1aa:	6862      	ldr	r2, [r4, #4]
 800e1ac:	2100      	movs	r1, #0
 800e1ae:	4630      	mov	r0, r6
 800e1b0:	f7f2 f816 	bl	80001e0 <memchr>
 800e1b4:	b108      	cbz	r0, 800e1ba <_printf_i+0x1e6>
 800e1b6:	1b80      	subs	r0, r0, r6
 800e1b8:	6060      	str	r0, [r4, #4]
 800e1ba:	6863      	ldr	r3, [r4, #4]
 800e1bc:	6123      	str	r3, [r4, #16]
 800e1be:	2300      	movs	r3, #0
 800e1c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e1c4:	e7aa      	b.n	800e11c <_printf_i+0x148>
 800e1c6:	6923      	ldr	r3, [r4, #16]
 800e1c8:	4632      	mov	r2, r6
 800e1ca:	4649      	mov	r1, r9
 800e1cc:	4640      	mov	r0, r8
 800e1ce:	47d0      	blx	sl
 800e1d0:	3001      	adds	r0, #1
 800e1d2:	d0ad      	beq.n	800e130 <_printf_i+0x15c>
 800e1d4:	6823      	ldr	r3, [r4, #0]
 800e1d6:	079b      	lsls	r3, r3, #30
 800e1d8:	d413      	bmi.n	800e202 <_printf_i+0x22e>
 800e1da:	68e0      	ldr	r0, [r4, #12]
 800e1dc:	9b03      	ldr	r3, [sp, #12]
 800e1de:	4298      	cmp	r0, r3
 800e1e0:	bfb8      	it	lt
 800e1e2:	4618      	movlt	r0, r3
 800e1e4:	e7a6      	b.n	800e134 <_printf_i+0x160>
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	4632      	mov	r2, r6
 800e1ea:	4649      	mov	r1, r9
 800e1ec:	4640      	mov	r0, r8
 800e1ee:	47d0      	blx	sl
 800e1f0:	3001      	adds	r0, #1
 800e1f2:	d09d      	beq.n	800e130 <_printf_i+0x15c>
 800e1f4:	3501      	adds	r5, #1
 800e1f6:	68e3      	ldr	r3, [r4, #12]
 800e1f8:	9903      	ldr	r1, [sp, #12]
 800e1fa:	1a5b      	subs	r3, r3, r1
 800e1fc:	42ab      	cmp	r3, r5
 800e1fe:	dcf2      	bgt.n	800e1e6 <_printf_i+0x212>
 800e200:	e7eb      	b.n	800e1da <_printf_i+0x206>
 800e202:	2500      	movs	r5, #0
 800e204:	f104 0619 	add.w	r6, r4, #25
 800e208:	e7f5      	b.n	800e1f6 <_printf_i+0x222>
 800e20a:	bf00      	nop
 800e20c:	08013da4 	.word	0x08013da4
 800e210:	08013db5 	.word	0x08013db5

0800e214 <_scanf_float>:
 800e214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e218:	b087      	sub	sp, #28
 800e21a:	4617      	mov	r7, r2
 800e21c:	9303      	str	r3, [sp, #12]
 800e21e:	688b      	ldr	r3, [r1, #8]
 800e220:	1e5a      	subs	r2, r3, #1
 800e222:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e226:	bf81      	itttt	hi
 800e228:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e22c:	eb03 0b05 	addhi.w	fp, r3, r5
 800e230:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e234:	608b      	strhi	r3, [r1, #8]
 800e236:	680b      	ldr	r3, [r1, #0]
 800e238:	460a      	mov	r2, r1
 800e23a:	f04f 0500 	mov.w	r5, #0
 800e23e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e242:	f842 3b1c 	str.w	r3, [r2], #28
 800e246:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e24a:	4680      	mov	r8, r0
 800e24c:	460c      	mov	r4, r1
 800e24e:	bf98      	it	ls
 800e250:	f04f 0b00 	movls.w	fp, #0
 800e254:	9201      	str	r2, [sp, #4]
 800e256:	4616      	mov	r6, r2
 800e258:	46aa      	mov	sl, r5
 800e25a:	46a9      	mov	r9, r5
 800e25c:	9502      	str	r5, [sp, #8]
 800e25e:	68a2      	ldr	r2, [r4, #8]
 800e260:	b152      	cbz	r2, 800e278 <_scanf_float+0x64>
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	781b      	ldrb	r3, [r3, #0]
 800e266:	2b4e      	cmp	r3, #78	@ 0x4e
 800e268:	d864      	bhi.n	800e334 <_scanf_float+0x120>
 800e26a:	2b40      	cmp	r3, #64	@ 0x40
 800e26c:	d83c      	bhi.n	800e2e8 <_scanf_float+0xd4>
 800e26e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e272:	b2c8      	uxtb	r0, r1
 800e274:	280e      	cmp	r0, #14
 800e276:	d93a      	bls.n	800e2ee <_scanf_float+0xda>
 800e278:	f1b9 0f00 	cmp.w	r9, #0
 800e27c:	d003      	beq.n	800e286 <_scanf_float+0x72>
 800e27e:	6823      	ldr	r3, [r4, #0]
 800e280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e284:	6023      	str	r3, [r4, #0]
 800e286:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e28a:	f1ba 0f01 	cmp.w	sl, #1
 800e28e:	f200 8117 	bhi.w	800e4c0 <_scanf_float+0x2ac>
 800e292:	9b01      	ldr	r3, [sp, #4]
 800e294:	429e      	cmp	r6, r3
 800e296:	f200 8108 	bhi.w	800e4aa <_scanf_float+0x296>
 800e29a:	2001      	movs	r0, #1
 800e29c:	b007      	add	sp, #28
 800e29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2a2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e2a6:	2a0d      	cmp	r2, #13
 800e2a8:	d8e6      	bhi.n	800e278 <_scanf_float+0x64>
 800e2aa:	a101      	add	r1, pc, #4	@ (adr r1, 800e2b0 <_scanf_float+0x9c>)
 800e2ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e2b0:	0800e3f7 	.word	0x0800e3f7
 800e2b4:	0800e279 	.word	0x0800e279
 800e2b8:	0800e279 	.word	0x0800e279
 800e2bc:	0800e279 	.word	0x0800e279
 800e2c0:	0800e457 	.word	0x0800e457
 800e2c4:	0800e42f 	.word	0x0800e42f
 800e2c8:	0800e279 	.word	0x0800e279
 800e2cc:	0800e279 	.word	0x0800e279
 800e2d0:	0800e405 	.word	0x0800e405
 800e2d4:	0800e279 	.word	0x0800e279
 800e2d8:	0800e279 	.word	0x0800e279
 800e2dc:	0800e279 	.word	0x0800e279
 800e2e0:	0800e279 	.word	0x0800e279
 800e2e4:	0800e3bd 	.word	0x0800e3bd
 800e2e8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e2ec:	e7db      	b.n	800e2a6 <_scanf_float+0x92>
 800e2ee:	290e      	cmp	r1, #14
 800e2f0:	d8c2      	bhi.n	800e278 <_scanf_float+0x64>
 800e2f2:	a001      	add	r0, pc, #4	@ (adr r0, 800e2f8 <_scanf_float+0xe4>)
 800e2f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e2f8:	0800e3ad 	.word	0x0800e3ad
 800e2fc:	0800e279 	.word	0x0800e279
 800e300:	0800e3ad 	.word	0x0800e3ad
 800e304:	0800e443 	.word	0x0800e443
 800e308:	0800e279 	.word	0x0800e279
 800e30c:	0800e355 	.word	0x0800e355
 800e310:	0800e393 	.word	0x0800e393
 800e314:	0800e393 	.word	0x0800e393
 800e318:	0800e393 	.word	0x0800e393
 800e31c:	0800e393 	.word	0x0800e393
 800e320:	0800e393 	.word	0x0800e393
 800e324:	0800e393 	.word	0x0800e393
 800e328:	0800e393 	.word	0x0800e393
 800e32c:	0800e393 	.word	0x0800e393
 800e330:	0800e393 	.word	0x0800e393
 800e334:	2b6e      	cmp	r3, #110	@ 0x6e
 800e336:	d809      	bhi.n	800e34c <_scanf_float+0x138>
 800e338:	2b60      	cmp	r3, #96	@ 0x60
 800e33a:	d8b2      	bhi.n	800e2a2 <_scanf_float+0x8e>
 800e33c:	2b54      	cmp	r3, #84	@ 0x54
 800e33e:	d07b      	beq.n	800e438 <_scanf_float+0x224>
 800e340:	2b59      	cmp	r3, #89	@ 0x59
 800e342:	d199      	bne.n	800e278 <_scanf_float+0x64>
 800e344:	2d07      	cmp	r5, #7
 800e346:	d197      	bne.n	800e278 <_scanf_float+0x64>
 800e348:	2508      	movs	r5, #8
 800e34a:	e02c      	b.n	800e3a6 <_scanf_float+0x192>
 800e34c:	2b74      	cmp	r3, #116	@ 0x74
 800e34e:	d073      	beq.n	800e438 <_scanf_float+0x224>
 800e350:	2b79      	cmp	r3, #121	@ 0x79
 800e352:	e7f6      	b.n	800e342 <_scanf_float+0x12e>
 800e354:	6821      	ldr	r1, [r4, #0]
 800e356:	05c8      	lsls	r0, r1, #23
 800e358:	d51b      	bpl.n	800e392 <_scanf_float+0x17e>
 800e35a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e35e:	6021      	str	r1, [r4, #0]
 800e360:	f109 0901 	add.w	r9, r9, #1
 800e364:	f1bb 0f00 	cmp.w	fp, #0
 800e368:	d003      	beq.n	800e372 <_scanf_float+0x15e>
 800e36a:	3201      	adds	r2, #1
 800e36c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e370:	60a2      	str	r2, [r4, #8]
 800e372:	68a3      	ldr	r3, [r4, #8]
 800e374:	3b01      	subs	r3, #1
 800e376:	60a3      	str	r3, [r4, #8]
 800e378:	6923      	ldr	r3, [r4, #16]
 800e37a:	3301      	adds	r3, #1
 800e37c:	6123      	str	r3, [r4, #16]
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	3b01      	subs	r3, #1
 800e382:	2b00      	cmp	r3, #0
 800e384:	607b      	str	r3, [r7, #4]
 800e386:	f340 8087 	ble.w	800e498 <_scanf_float+0x284>
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	3301      	adds	r3, #1
 800e38e:	603b      	str	r3, [r7, #0]
 800e390:	e765      	b.n	800e25e <_scanf_float+0x4a>
 800e392:	eb1a 0105 	adds.w	r1, sl, r5
 800e396:	f47f af6f 	bne.w	800e278 <_scanf_float+0x64>
 800e39a:	6822      	ldr	r2, [r4, #0]
 800e39c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e3a0:	6022      	str	r2, [r4, #0]
 800e3a2:	460d      	mov	r5, r1
 800e3a4:	468a      	mov	sl, r1
 800e3a6:	f806 3b01 	strb.w	r3, [r6], #1
 800e3aa:	e7e2      	b.n	800e372 <_scanf_float+0x15e>
 800e3ac:	6822      	ldr	r2, [r4, #0]
 800e3ae:	0610      	lsls	r0, r2, #24
 800e3b0:	f57f af62 	bpl.w	800e278 <_scanf_float+0x64>
 800e3b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e3b8:	6022      	str	r2, [r4, #0]
 800e3ba:	e7f4      	b.n	800e3a6 <_scanf_float+0x192>
 800e3bc:	f1ba 0f00 	cmp.w	sl, #0
 800e3c0:	d10e      	bne.n	800e3e0 <_scanf_float+0x1cc>
 800e3c2:	f1b9 0f00 	cmp.w	r9, #0
 800e3c6:	d10e      	bne.n	800e3e6 <_scanf_float+0x1d2>
 800e3c8:	6822      	ldr	r2, [r4, #0]
 800e3ca:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e3ce:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e3d2:	d108      	bne.n	800e3e6 <_scanf_float+0x1d2>
 800e3d4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e3d8:	6022      	str	r2, [r4, #0]
 800e3da:	f04f 0a01 	mov.w	sl, #1
 800e3de:	e7e2      	b.n	800e3a6 <_scanf_float+0x192>
 800e3e0:	f1ba 0f02 	cmp.w	sl, #2
 800e3e4:	d055      	beq.n	800e492 <_scanf_float+0x27e>
 800e3e6:	2d01      	cmp	r5, #1
 800e3e8:	d002      	beq.n	800e3f0 <_scanf_float+0x1dc>
 800e3ea:	2d04      	cmp	r5, #4
 800e3ec:	f47f af44 	bne.w	800e278 <_scanf_float+0x64>
 800e3f0:	3501      	adds	r5, #1
 800e3f2:	b2ed      	uxtb	r5, r5
 800e3f4:	e7d7      	b.n	800e3a6 <_scanf_float+0x192>
 800e3f6:	f1ba 0f01 	cmp.w	sl, #1
 800e3fa:	f47f af3d 	bne.w	800e278 <_scanf_float+0x64>
 800e3fe:	f04f 0a02 	mov.w	sl, #2
 800e402:	e7d0      	b.n	800e3a6 <_scanf_float+0x192>
 800e404:	b97d      	cbnz	r5, 800e426 <_scanf_float+0x212>
 800e406:	f1b9 0f00 	cmp.w	r9, #0
 800e40a:	f47f af38 	bne.w	800e27e <_scanf_float+0x6a>
 800e40e:	6822      	ldr	r2, [r4, #0]
 800e410:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e414:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e418:	f040 8108 	bne.w	800e62c <_scanf_float+0x418>
 800e41c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e420:	6022      	str	r2, [r4, #0]
 800e422:	2501      	movs	r5, #1
 800e424:	e7bf      	b.n	800e3a6 <_scanf_float+0x192>
 800e426:	2d03      	cmp	r5, #3
 800e428:	d0e2      	beq.n	800e3f0 <_scanf_float+0x1dc>
 800e42a:	2d05      	cmp	r5, #5
 800e42c:	e7de      	b.n	800e3ec <_scanf_float+0x1d8>
 800e42e:	2d02      	cmp	r5, #2
 800e430:	f47f af22 	bne.w	800e278 <_scanf_float+0x64>
 800e434:	2503      	movs	r5, #3
 800e436:	e7b6      	b.n	800e3a6 <_scanf_float+0x192>
 800e438:	2d06      	cmp	r5, #6
 800e43a:	f47f af1d 	bne.w	800e278 <_scanf_float+0x64>
 800e43e:	2507      	movs	r5, #7
 800e440:	e7b1      	b.n	800e3a6 <_scanf_float+0x192>
 800e442:	6822      	ldr	r2, [r4, #0]
 800e444:	0591      	lsls	r1, r2, #22
 800e446:	f57f af17 	bpl.w	800e278 <_scanf_float+0x64>
 800e44a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e44e:	6022      	str	r2, [r4, #0]
 800e450:	f8cd 9008 	str.w	r9, [sp, #8]
 800e454:	e7a7      	b.n	800e3a6 <_scanf_float+0x192>
 800e456:	6822      	ldr	r2, [r4, #0]
 800e458:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e45c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e460:	d006      	beq.n	800e470 <_scanf_float+0x25c>
 800e462:	0550      	lsls	r0, r2, #21
 800e464:	f57f af08 	bpl.w	800e278 <_scanf_float+0x64>
 800e468:	f1b9 0f00 	cmp.w	r9, #0
 800e46c:	f000 80de 	beq.w	800e62c <_scanf_float+0x418>
 800e470:	0591      	lsls	r1, r2, #22
 800e472:	bf58      	it	pl
 800e474:	9902      	ldrpl	r1, [sp, #8]
 800e476:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e47a:	bf58      	it	pl
 800e47c:	eba9 0101 	subpl.w	r1, r9, r1
 800e480:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e484:	bf58      	it	pl
 800e486:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e48a:	6022      	str	r2, [r4, #0]
 800e48c:	f04f 0900 	mov.w	r9, #0
 800e490:	e789      	b.n	800e3a6 <_scanf_float+0x192>
 800e492:	f04f 0a03 	mov.w	sl, #3
 800e496:	e786      	b.n	800e3a6 <_scanf_float+0x192>
 800e498:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e49c:	4639      	mov	r1, r7
 800e49e:	4640      	mov	r0, r8
 800e4a0:	4798      	blx	r3
 800e4a2:	2800      	cmp	r0, #0
 800e4a4:	f43f aedb 	beq.w	800e25e <_scanf_float+0x4a>
 800e4a8:	e6e6      	b.n	800e278 <_scanf_float+0x64>
 800e4aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e4ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e4b2:	463a      	mov	r2, r7
 800e4b4:	4640      	mov	r0, r8
 800e4b6:	4798      	blx	r3
 800e4b8:	6923      	ldr	r3, [r4, #16]
 800e4ba:	3b01      	subs	r3, #1
 800e4bc:	6123      	str	r3, [r4, #16]
 800e4be:	e6e8      	b.n	800e292 <_scanf_float+0x7e>
 800e4c0:	1e6b      	subs	r3, r5, #1
 800e4c2:	2b06      	cmp	r3, #6
 800e4c4:	d824      	bhi.n	800e510 <_scanf_float+0x2fc>
 800e4c6:	2d02      	cmp	r5, #2
 800e4c8:	d836      	bhi.n	800e538 <_scanf_float+0x324>
 800e4ca:	9b01      	ldr	r3, [sp, #4]
 800e4cc:	429e      	cmp	r6, r3
 800e4ce:	f67f aee4 	bls.w	800e29a <_scanf_float+0x86>
 800e4d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e4d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e4da:	463a      	mov	r2, r7
 800e4dc:	4640      	mov	r0, r8
 800e4de:	4798      	blx	r3
 800e4e0:	6923      	ldr	r3, [r4, #16]
 800e4e2:	3b01      	subs	r3, #1
 800e4e4:	6123      	str	r3, [r4, #16]
 800e4e6:	e7f0      	b.n	800e4ca <_scanf_float+0x2b6>
 800e4e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e4ec:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e4f0:	463a      	mov	r2, r7
 800e4f2:	4640      	mov	r0, r8
 800e4f4:	4798      	blx	r3
 800e4f6:	6923      	ldr	r3, [r4, #16]
 800e4f8:	3b01      	subs	r3, #1
 800e4fa:	6123      	str	r3, [r4, #16]
 800e4fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e500:	fa5f fa8a 	uxtb.w	sl, sl
 800e504:	f1ba 0f02 	cmp.w	sl, #2
 800e508:	d1ee      	bne.n	800e4e8 <_scanf_float+0x2d4>
 800e50a:	3d03      	subs	r5, #3
 800e50c:	b2ed      	uxtb	r5, r5
 800e50e:	1b76      	subs	r6, r6, r5
 800e510:	6823      	ldr	r3, [r4, #0]
 800e512:	05da      	lsls	r2, r3, #23
 800e514:	d530      	bpl.n	800e578 <_scanf_float+0x364>
 800e516:	055b      	lsls	r3, r3, #21
 800e518:	d511      	bpl.n	800e53e <_scanf_float+0x32a>
 800e51a:	9b01      	ldr	r3, [sp, #4]
 800e51c:	429e      	cmp	r6, r3
 800e51e:	f67f aebc 	bls.w	800e29a <_scanf_float+0x86>
 800e522:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e526:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e52a:	463a      	mov	r2, r7
 800e52c:	4640      	mov	r0, r8
 800e52e:	4798      	blx	r3
 800e530:	6923      	ldr	r3, [r4, #16]
 800e532:	3b01      	subs	r3, #1
 800e534:	6123      	str	r3, [r4, #16]
 800e536:	e7f0      	b.n	800e51a <_scanf_float+0x306>
 800e538:	46aa      	mov	sl, r5
 800e53a:	46b3      	mov	fp, r6
 800e53c:	e7de      	b.n	800e4fc <_scanf_float+0x2e8>
 800e53e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e542:	6923      	ldr	r3, [r4, #16]
 800e544:	2965      	cmp	r1, #101	@ 0x65
 800e546:	f103 33ff 	add.w	r3, r3, #4294967295
 800e54a:	f106 35ff 	add.w	r5, r6, #4294967295
 800e54e:	6123      	str	r3, [r4, #16]
 800e550:	d00c      	beq.n	800e56c <_scanf_float+0x358>
 800e552:	2945      	cmp	r1, #69	@ 0x45
 800e554:	d00a      	beq.n	800e56c <_scanf_float+0x358>
 800e556:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e55a:	463a      	mov	r2, r7
 800e55c:	4640      	mov	r0, r8
 800e55e:	4798      	blx	r3
 800e560:	6923      	ldr	r3, [r4, #16]
 800e562:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e566:	3b01      	subs	r3, #1
 800e568:	1eb5      	subs	r5, r6, #2
 800e56a:	6123      	str	r3, [r4, #16]
 800e56c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e570:	463a      	mov	r2, r7
 800e572:	4640      	mov	r0, r8
 800e574:	4798      	blx	r3
 800e576:	462e      	mov	r6, r5
 800e578:	6822      	ldr	r2, [r4, #0]
 800e57a:	f012 0210 	ands.w	r2, r2, #16
 800e57e:	d001      	beq.n	800e584 <_scanf_float+0x370>
 800e580:	2000      	movs	r0, #0
 800e582:	e68b      	b.n	800e29c <_scanf_float+0x88>
 800e584:	7032      	strb	r2, [r6, #0]
 800e586:	6823      	ldr	r3, [r4, #0]
 800e588:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e58c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e590:	d11c      	bne.n	800e5cc <_scanf_float+0x3b8>
 800e592:	9b02      	ldr	r3, [sp, #8]
 800e594:	454b      	cmp	r3, r9
 800e596:	eba3 0209 	sub.w	r2, r3, r9
 800e59a:	d123      	bne.n	800e5e4 <_scanf_float+0x3d0>
 800e59c:	9901      	ldr	r1, [sp, #4]
 800e59e:	2200      	movs	r2, #0
 800e5a0:	4640      	mov	r0, r8
 800e5a2:	f002 fd49 	bl	8011038 <_strtod_r>
 800e5a6:	9b03      	ldr	r3, [sp, #12]
 800e5a8:	6821      	ldr	r1, [r4, #0]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	f011 0f02 	tst.w	r1, #2
 800e5b0:	ec57 6b10 	vmov	r6, r7, d0
 800e5b4:	f103 0204 	add.w	r2, r3, #4
 800e5b8:	d01f      	beq.n	800e5fa <_scanf_float+0x3e6>
 800e5ba:	9903      	ldr	r1, [sp, #12]
 800e5bc:	600a      	str	r2, [r1, #0]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	e9c3 6700 	strd	r6, r7, [r3]
 800e5c4:	68e3      	ldr	r3, [r4, #12]
 800e5c6:	3301      	adds	r3, #1
 800e5c8:	60e3      	str	r3, [r4, #12]
 800e5ca:	e7d9      	b.n	800e580 <_scanf_float+0x36c>
 800e5cc:	9b04      	ldr	r3, [sp, #16]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d0e4      	beq.n	800e59c <_scanf_float+0x388>
 800e5d2:	9905      	ldr	r1, [sp, #20]
 800e5d4:	230a      	movs	r3, #10
 800e5d6:	3101      	adds	r1, #1
 800e5d8:	4640      	mov	r0, r8
 800e5da:	f002 fdad 	bl	8011138 <_strtol_r>
 800e5de:	9b04      	ldr	r3, [sp, #16]
 800e5e0:	9e05      	ldr	r6, [sp, #20]
 800e5e2:	1ac2      	subs	r2, r0, r3
 800e5e4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e5e8:	429e      	cmp	r6, r3
 800e5ea:	bf28      	it	cs
 800e5ec:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e5f0:	4910      	ldr	r1, [pc, #64]	@ (800e634 <_scanf_float+0x420>)
 800e5f2:	4630      	mov	r0, r6
 800e5f4:	f000 f954 	bl	800e8a0 <siprintf>
 800e5f8:	e7d0      	b.n	800e59c <_scanf_float+0x388>
 800e5fa:	f011 0f04 	tst.w	r1, #4
 800e5fe:	9903      	ldr	r1, [sp, #12]
 800e600:	600a      	str	r2, [r1, #0]
 800e602:	d1dc      	bne.n	800e5be <_scanf_float+0x3aa>
 800e604:	681d      	ldr	r5, [r3, #0]
 800e606:	4632      	mov	r2, r6
 800e608:	463b      	mov	r3, r7
 800e60a:	4630      	mov	r0, r6
 800e60c:	4639      	mov	r1, r7
 800e60e:	f7f2 fa95 	bl	8000b3c <__aeabi_dcmpun>
 800e612:	b128      	cbz	r0, 800e620 <_scanf_float+0x40c>
 800e614:	4808      	ldr	r0, [pc, #32]	@ (800e638 <_scanf_float+0x424>)
 800e616:	f000 fb07 	bl	800ec28 <nanf>
 800e61a:	ed85 0a00 	vstr	s0, [r5]
 800e61e:	e7d1      	b.n	800e5c4 <_scanf_float+0x3b0>
 800e620:	4630      	mov	r0, r6
 800e622:	4639      	mov	r1, r7
 800e624:	f7f2 fae8 	bl	8000bf8 <__aeabi_d2f>
 800e628:	6028      	str	r0, [r5, #0]
 800e62a:	e7cb      	b.n	800e5c4 <_scanf_float+0x3b0>
 800e62c:	f04f 0900 	mov.w	r9, #0
 800e630:	e629      	b.n	800e286 <_scanf_float+0x72>
 800e632:	bf00      	nop
 800e634:	08013dc6 	.word	0x08013dc6
 800e638:	08014178 	.word	0x08014178

0800e63c <std>:
 800e63c:	2300      	movs	r3, #0
 800e63e:	b510      	push	{r4, lr}
 800e640:	4604      	mov	r4, r0
 800e642:	e9c0 3300 	strd	r3, r3, [r0]
 800e646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e64a:	6083      	str	r3, [r0, #8]
 800e64c:	8181      	strh	r1, [r0, #12]
 800e64e:	6643      	str	r3, [r0, #100]	@ 0x64
 800e650:	81c2      	strh	r2, [r0, #14]
 800e652:	6183      	str	r3, [r0, #24]
 800e654:	4619      	mov	r1, r3
 800e656:	2208      	movs	r2, #8
 800e658:	305c      	adds	r0, #92	@ 0x5c
 800e65a:	f000 fa45 	bl	800eae8 <memset>
 800e65e:	4b0d      	ldr	r3, [pc, #52]	@ (800e694 <std+0x58>)
 800e660:	6263      	str	r3, [r4, #36]	@ 0x24
 800e662:	4b0d      	ldr	r3, [pc, #52]	@ (800e698 <std+0x5c>)
 800e664:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e666:	4b0d      	ldr	r3, [pc, #52]	@ (800e69c <std+0x60>)
 800e668:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e66a:	4b0d      	ldr	r3, [pc, #52]	@ (800e6a0 <std+0x64>)
 800e66c:	6323      	str	r3, [r4, #48]	@ 0x30
 800e66e:	4b0d      	ldr	r3, [pc, #52]	@ (800e6a4 <std+0x68>)
 800e670:	6224      	str	r4, [r4, #32]
 800e672:	429c      	cmp	r4, r3
 800e674:	d006      	beq.n	800e684 <std+0x48>
 800e676:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e67a:	4294      	cmp	r4, r2
 800e67c:	d002      	beq.n	800e684 <std+0x48>
 800e67e:	33d0      	adds	r3, #208	@ 0xd0
 800e680:	429c      	cmp	r4, r3
 800e682:	d105      	bne.n	800e690 <std+0x54>
 800e684:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e68c:	f000 baba 	b.w	800ec04 <__retarget_lock_init_recursive>
 800e690:	bd10      	pop	{r4, pc}
 800e692:	bf00      	nop
 800e694:	0800e935 	.word	0x0800e935
 800e698:	0800e95b 	.word	0x0800e95b
 800e69c:	0800e993 	.word	0x0800e993
 800e6a0:	0800e9b7 	.word	0x0800e9b7
 800e6a4:	20002bd4 	.word	0x20002bd4

0800e6a8 <stdio_exit_handler>:
 800e6a8:	4a02      	ldr	r2, [pc, #8]	@ (800e6b4 <stdio_exit_handler+0xc>)
 800e6aa:	4903      	ldr	r1, [pc, #12]	@ (800e6b8 <stdio_exit_handler+0x10>)
 800e6ac:	4803      	ldr	r0, [pc, #12]	@ (800e6bc <stdio_exit_handler+0x14>)
 800e6ae:	f000 b869 	b.w	800e784 <_fwalk_sglue>
 800e6b2:	bf00      	nop
 800e6b4:	20000014 	.word	0x20000014
 800e6b8:	08011dad 	.word	0x08011dad
 800e6bc:	20000024 	.word	0x20000024

0800e6c0 <cleanup_stdio>:
 800e6c0:	6841      	ldr	r1, [r0, #4]
 800e6c2:	4b0c      	ldr	r3, [pc, #48]	@ (800e6f4 <cleanup_stdio+0x34>)
 800e6c4:	4299      	cmp	r1, r3
 800e6c6:	b510      	push	{r4, lr}
 800e6c8:	4604      	mov	r4, r0
 800e6ca:	d001      	beq.n	800e6d0 <cleanup_stdio+0x10>
 800e6cc:	f003 fb6e 	bl	8011dac <_fflush_r>
 800e6d0:	68a1      	ldr	r1, [r4, #8]
 800e6d2:	4b09      	ldr	r3, [pc, #36]	@ (800e6f8 <cleanup_stdio+0x38>)
 800e6d4:	4299      	cmp	r1, r3
 800e6d6:	d002      	beq.n	800e6de <cleanup_stdio+0x1e>
 800e6d8:	4620      	mov	r0, r4
 800e6da:	f003 fb67 	bl	8011dac <_fflush_r>
 800e6de:	68e1      	ldr	r1, [r4, #12]
 800e6e0:	4b06      	ldr	r3, [pc, #24]	@ (800e6fc <cleanup_stdio+0x3c>)
 800e6e2:	4299      	cmp	r1, r3
 800e6e4:	d004      	beq.n	800e6f0 <cleanup_stdio+0x30>
 800e6e6:	4620      	mov	r0, r4
 800e6e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6ec:	f003 bb5e 	b.w	8011dac <_fflush_r>
 800e6f0:	bd10      	pop	{r4, pc}
 800e6f2:	bf00      	nop
 800e6f4:	20002bd4 	.word	0x20002bd4
 800e6f8:	20002c3c 	.word	0x20002c3c
 800e6fc:	20002ca4 	.word	0x20002ca4

0800e700 <global_stdio_init.part.0>:
 800e700:	b510      	push	{r4, lr}
 800e702:	4b0b      	ldr	r3, [pc, #44]	@ (800e730 <global_stdio_init.part.0+0x30>)
 800e704:	4c0b      	ldr	r4, [pc, #44]	@ (800e734 <global_stdio_init.part.0+0x34>)
 800e706:	4a0c      	ldr	r2, [pc, #48]	@ (800e738 <global_stdio_init.part.0+0x38>)
 800e708:	601a      	str	r2, [r3, #0]
 800e70a:	4620      	mov	r0, r4
 800e70c:	2200      	movs	r2, #0
 800e70e:	2104      	movs	r1, #4
 800e710:	f7ff ff94 	bl	800e63c <std>
 800e714:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e718:	2201      	movs	r2, #1
 800e71a:	2109      	movs	r1, #9
 800e71c:	f7ff ff8e 	bl	800e63c <std>
 800e720:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e724:	2202      	movs	r2, #2
 800e726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e72a:	2112      	movs	r1, #18
 800e72c:	f7ff bf86 	b.w	800e63c <std>
 800e730:	20002d0c 	.word	0x20002d0c
 800e734:	20002bd4 	.word	0x20002bd4
 800e738:	0800e6a9 	.word	0x0800e6a9

0800e73c <__sfp_lock_acquire>:
 800e73c:	4801      	ldr	r0, [pc, #4]	@ (800e744 <__sfp_lock_acquire+0x8>)
 800e73e:	f000 ba62 	b.w	800ec06 <__retarget_lock_acquire_recursive>
 800e742:	bf00      	nop
 800e744:	20002d15 	.word	0x20002d15

0800e748 <__sfp_lock_release>:
 800e748:	4801      	ldr	r0, [pc, #4]	@ (800e750 <__sfp_lock_release+0x8>)
 800e74a:	f000 ba5d 	b.w	800ec08 <__retarget_lock_release_recursive>
 800e74e:	bf00      	nop
 800e750:	20002d15 	.word	0x20002d15

0800e754 <__sinit>:
 800e754:	b510      	push	{r4, lr}
 800e756:	4604      	mov	r4, r0
 800e758:	f7ff fff0 	bl	800e73c <__sfp_lock_acquire>
 800e75c:	6a23      	ldr	r3, [r4, #32]
 800e75e:	b11b      	cbz	r3, 800e768 <__sinit+0x14>
 800e760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e764:	f7ff bff0 	b.w	800e748 <__sfp_lock_release>
 800e768:	4b04      	ldr	r3, [pc, #16]	@ (800e77c <__sinit+0x28>)
 800e76a:	6223      	str	r3, [r4, #32]
 800e76c:	4b04      	ldr	r3, [pc, #16]	@ (800e780 <__sinit+0x2c>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d1f5      	bne.n	800e760 <__sinit+0xc>
 800e774:	f7ff ffc4 	bl	800e700 <global_stdio_init.part.0>
 800e778:	e7f2      	b.n	800e760 <__sinit+0xc>
 800e77a:	bf00      	nop
 800e77c:	0800e6c1 	.word	0x0800e6c1
 800e780:	20002d0c 	.word	0x20002d0c

0800e784 <_fwalk_sglue>:
 800e784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e788:	4607      	mov	r7, r0
 800e78a:	4688      	mov	r8, r1
 800e78c:	4614      	mov	r4, r2
 800e78e:	2600      	movs	r6, #0
 800e790:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e794:	f1b9 0901 	subs.w	r9, r9, #1
 800e798:	d505      	bpl.n	800e7a6 <_fwalk_sglue+0x22>
 800e79a:	6824      	ldr	r4, [r4, #0]
 800e79c:	2c00      	cmp	r4, #0
 800e79e:	d1f7      	bne.n	800e790 <_fwalk_sglue+0xc>
 800e7a0:	4630      	mov	r0, r6
 800e7a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7a6:	89ab      	ldrh	r3, [r5, #12]
 800e7a8:	2b01      	cmp	r3, #1
 800e7aa:	d907      	bls.n	800e7bc <_fwalk_sglue+0x38>
 800e7ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	d003      	beq.n	800e7bc <_fwalk_sglue+0x38>
 800e7b4:	4629      	mov	r1, r5
 800e7b6:	4638      	mov	r0, r7
 800e7b8:	47c0      	blx	r8
 800e7ba:	4306      	orrs	r6, r0
 800e7bc:	3568      	adds	r5, #104	@ 0x68
 800e7be:	e7e9      	b.n	800e794 <_fwalk_sglue+0x10>

0800e7c0 <iprintf>:
 800e7c0:	b40f      	push	{r0, r1, r2, r3}
 800e7c2:	b507      	push	{r0, r1, r2, lr}
 800e7c4:	4906      	ldr	r1, [pc, #24]	@ (800e7e0 <iprintf+0x20>)
 800e7c6:	ab04      	add	r3, sp, #16
 800e7c8:	6808      	ldr	r0, [r1, #0]
 800e7ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7ce:	6881      	ldr	r1, [r0, #8]
 800e7d0:	9301      	str	r3, [sp, #4]
 800e7d2:	f003 f801 	bl	80117d8 <_vfiprintf_r>
 800e7d6:	b003      	add	sp, #12
 800e7d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7dc:	b004      	add	sp, #16
 800e7de:	4770      	bx	lr
 800e7e0:	20000020 	.word	0x20000020

0800e7e4 <_puts_r>:
 800e7e4:	6a03      	ldr	r3, [r0, #32]
 800e7e6:	b570      	push	{r4, r5, r6, lr}
 800e7e8:	6884      	ldr	r4, [r0, #8]
 800e7ea:	4605      	mov	r5, r0
 800e7ec:	460e      	mov	r6, r1
 800e7ee:	b90b      	cbnz	r3, 800e7f4 <_puts_r+0x10>
 800e7f0:	f7ff ffb0 	bl	800e754 <__sinit>
 800e7f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e7f6:	07db      	lsls	r3, r3, #31
 800e7f8:	d405      	bmi.n	800e806 <_puts_r+0x22>
 800e7fa:	89a3      	ldrh	r3, [r4, #12]
 800e7fc:	0598      	lsls	r0, r3, #22
 800e7fe:	d402      	bmi.n	800e806 <_puts_r+0x22>
 800e800:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e802:	f000 fa00 	bl	800ec06 <__retarget_lock_acquire_recursive>
 800e806:	89a3      	ldrh	r3, [r4, #12]
 800e808:	0719      	lsls	r1, r3, #28
 800e80a:	d502      	bpl.n	800e812 <_puts_r+0x2e>
 800e80c:	6923      	ldr	r3, [r4, #16]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d135      	bne.n	800e87e <_puts_r+0x9a>
 800e812:	4621      	mov	r1, r4
 800e814:	4628      	mov	r0, r5
 800e816:	f000 f911 	bl	800ea3c <__swsetup_r>
 800e81a:	b380      	cbz	r0, 800e87e <_puts_r+0x9a>
 800e81c:	f04f 35ff 	mov.w	r5, #4294967295
 800e820:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e822:	07da      	lsls	r2, r3, #31
 800e824:	d405      	bmi.n	800e832 <_puts_r+0x4e>
 800e826:	89a3      	ldrh	r3, [r4, #12]
 800e828:	059b      	lsls	r3, r3, #22
 800e82a:	d402      	bmi.n	800e832 <_puts_r+0x4e>
 800e82c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e82e:	f000 f9eb 	bl	800ec08 <__retarget_lock_release_recursive>
 800e832:	4628      	mov	r0, r5
 800e834:	bd70      	pop	{r4, r5, r6, pc}
 800e836:	2b00      	cmp	r3, #0
 800e838:	da04      	bge.n	800e844 <_puts_r+0x60>
 800e83a:	69a2      	ldr	r2, [r4, #24]
 800e83c:	429a      	cmp	r2, r3
 800e83e:	dc17      	bgt.n	800e870 <_puts_r+0x8c>
 800e840:	290a      	cmp	r1, #10
 800e842:	d015      	beq.n	800e870 <_puts_r+0x8c>
 800e844:	6823      	ldr	r3, [r4, #0]
 800e846:	1c5a      	adds	r2, r3, #1
 800e848:	6022      	str	r2, [r4, #0]
 800e84a:	7019      	strb	r1, [r3, #0]
 800e84c:	68a3      	ldr	r3, [r4, #8]
 800e84e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e852:	3b01      	subs	r3, #1
 800e854:	60a3      	str	r3, [r4, #8]
 800e856:	2900      	cmp	r1, #0
 800e858:	d1ed      	bne.n	800e836 <_puts_r+0x52>
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	da11      	bge.n	800e882 <_puts_r+0x9e>
 800e85e:	4622      	mov	r2, r4
 800e860:	210a      	movs	r1, #10
 800e862:	4628      	mov	r0, r5
 800e864:	f000 f8ab 	bl	800e9be <__swbuf_r>
 800e868:	3001      	adds	r0, #1
 800e86a:	d0d7      	beq.n	800e81c <_puts_r+0x38>
 800e86c:	250a      	movs	r5, #10
 800e86e:	e7d7      	b.n	800e820 <_puts_r+0x3c>
 800e870:	4622      	mov	r2, r4
 800e872:	4628      	mov	r0, r5
 800e874:	f000 f8a3 	bl	800e9be <__swbuf_r>
 800e878:	3001      	adds	r0, #1
 800e87a:	d1e7      	bne.n	800e84c <_puts_r+0x68>
 800e87c:	e7ce      	b.n	800e81c <_puts_r+0x38>
 800e87e:	3e01      	subs	r6, #1
 800e880:	e7e4      	b.n	800e84c <_puts_r+0x68>
 800e882:	6823      	ldr	r3, [r4, #0]
 800e884:	1c5a      	adds	r2, r3, #1
 800e886:	6022      	str	r2, [r4, #0]
 800e888:	220a      	movs	r2, #10
 800e88a:	701a      	strb	r2, [r3, #0]
 800e88c:	e7ee      	b.n	800e86c <_puts_r+0x88>
	...

0800e890 <puts>:
 800e890:	4b02      	ldr	r3, [pc, #8]	@ (800e89c <puts+0xc>)
 800e892:	4601      	mov	r1, r0
 800e894:	6818      	ldr	r0, [r3, #0]
 800e896:	f7ff bfa5 	b.w	800e7e4 <_puts_r>
 800e89a:	bf00      	nop
 800e89c:	20000020 	.word	0x20000020

0800e8a0 <siprintf>:
 800e8a0:	b40e      	push	{r1, r2, r3}
 800e8a2:	b500      	push	{lr}
 800e8a4:	b09c      	sub	sp, #112	@ 0x70
 800e8a6:	ab1d      	add	r3, sp, #116	@ 0x74
 800e8a8:	9002      	str	r0, [sp, #8]
 800e8aa:	9006      	str	r0, [sp, #24]
 800e8ac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e8b0:	4809      	ldr	r0, [pc, #36]	@ (800e8d8 <siprintf+0x38>)
 800e8b2:	9107      	str	r1, [sp, #28]
 800e8b4:	9104      	str	r1, [sp, #16]
 800e8b6:	4909      	ldr	r1, [pc, #36]	@ (800e8dc <siprintf+0x3c>)
 800e8b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8bc:	9105      	str	r1, [sp, #20]
 800e8be:	6800      	ldr	r0, [r0, #0]
 800e8c0:	9301      	str	r3, [sp, #4]
 800e8c2:	a902      	add	r1, sp, #8
 800e8c4:	f002 fc96 	bl	80111f4 <_svfiprintf_r>
 800e8c8:	9b02      	ldr	r3, [sp, #8]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	701a      	strb	r2, [r3, #0]
 800e8ce:	b01c      	add	sp, #112	@ 0x70
 800e8d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e8d4:	b003      	add	sp, #12
 800e8d6:	4770      	bx	lr
 800e8d8:	20000020 	.word	0x20000020
 800e8dc:	ffff0208 	.word	0xffff0208

0800e8e0 <siscanf>:
 800e8e0:	b40e      	push	{r1, r2, r3}
 800e8e2:	b530      	push	{r4, r5, lr}
 800e8e4:	b09c      	sub	sp, #112	@ 0x70
 800e8e6:	ac1f      	add	r4, sp, #124	@ 0x7c
 800e8e8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800e8ec:	f854 5b04 	ldr.w	r5, [r4], #4
 800e8f0:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e8f4:	9002      	str	r0, [sp, #8]
 800e8f6:	9006      	str	r0, [sp, #24]
 800e8f8:	f7f1 fcc2 	bl	8000280 <strlen>
 800e8fc:	4b0b      	ldr	r3, [pc, #44]	@ (800e92c <siscanf+0x4c>)
 800e8fe:	9003      	str	r0, [sp, #12]
 800e900:	9007      	str	r0, [sp, #28]
 800e902:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e904:	480a      	ldr	r0, [pc, #40]	@ (800e930 <siscanf+0x50>)
 800e906:	9401      	str	r4, [sp, #4]
 800e908:	2300      	movs	r3, #0
 800e90a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e90c:	9314      	str	r3, [sp, #80]	@ 0x50
 800e90e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e912:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e916:	462a      	mov	r2, r5
 800e918:	4623      	mov	r3, r4
 800e91a:	a902      	add	r1, sp, #8
 800e91c:	6800      	ldr	r0, [r0, #0]
 800e91e:	f002 fdbd 	bl	801149c <__ssvfiscanf_r>
 800e922:	b01c      	add	sp, #112	@ 0x70
 800e924:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e928:	b003      	add	sp, #12
 800e92a:	4770      	bx	lr
 800e92c:	0800e957 	.word	0x0800e957
 800e930:	20000020 	.word	0x20000020

0800e934 <__sread>:
 800e934:	b510      	push	{r4, lr}
 800e936:	460c      	mov	r4, r1
 800e938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e93c:	f000 f914 	bl	800eb68 <_read_r>
 800e940:	2800      	cmp	r0, #0
 800e942:	bfab      	itete	ge
 800e944:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e946:	89a3      	ldrhlt	r3, [r4, #12]
 800e948:	181b      	addge	r3, r3, r0
 800e94a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e94e:	bfac      	ite	ge
 800e950:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e952:	81a3      	strhlt	r3, [r4, #12]
 800e954:	bd10      	pop	{r4, pc}

0800e956 <__seofread>:
 800e956:	2000      	movs	r0, #0
 800e958:	4770      	bx	lr

0800e95a <__swrite>:
 800e95a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e95e:	461f      	mov	r7, r3
 800e960:	898b      	ldrh	r3, [r1, #12]
 800e962:	05db      	lsls	r3, r3, #23
 800e964:	4605      	mov	r5, r0
 800e966:	460c      	mov	r4, r1
 800e968:	4616      	mov	r6, r2
 800e96a:	d505      	bpl.n	800e978 <__swrite+0x1e>
 800e96c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e970:	2302      	movs	r3, #2
 800e972:	2200      	movs	r2, #0
 800e974:	f000 f8e6 	bl	800eb44 <_lseek_r>
 800e978:	89a3      	ldrh	r3, [r4, #12]
 800e97a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e97e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e982:	81a3      	strh	r3, [r4, #12]
 800e984:	4632      	mov	r2, r6
 800e986:	463b      	mov	r3, r7
 800e988:	4628      	mov	r0, r5
 800e98a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e98e:	f000 b8fd 	b.w	800eb8c <_write_r>

0800e992 <__sseek>:
 800e992:	b510      	push	{r4, lr}
 800e994:	460c      	mov	r4, r1
 800e996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e99a:	f000 f8d3 	bl	800eb44 <_lseek_r>
 800e99e:	1c43      	adds	r3, r0, #1
 800e9a0:	89a3      	ldrh	r3, [r4, #12]
 800e9a2:	bf15      	itete	ne
 800e9a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e9a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e9aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e9ae:	81a3      	strheq	r3, [r4, #12]
 800e9b0:	bf18      	it	ne
 800e9b2:	81a3      	strhne	r3, [r4, #12]
 800e9b4:	bd10      	pop	{r4, pc}

0800e9b6 <__sclose>:
 800e9b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9ba:	f000 b8b3 	b.w	800eb24 <_close_r>

0800e9be <__swbuf_r>:
 800e9be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9c0:	460e      	mov	r6, r1
 800e9c2:	4614      	mov	r4, r2
 800e9c4:	4605      	mov	r5, r0
 800e9c6:	b118      	cbz	r0, 800e9d0 <__swbuf_r+0x12>
 800e9c8:	6a03      	ldr	r3, [r0, #32]
 800e9ca:	b90b      	cbnz	r3, 800e9d0 <__swbuf_r+0x12>
 800e9cc:	f7ff fec2 	bl	800e754 <__sinit>
 800e9d0:	69a3      	ldr	r3, [r4, #24]
 800e9d2:	60a3      	str	r3, [r4, #8]
 800e9d4:	89a3      	ldrh	r3, [r4, #12]
 800e9d6:	071a      	lsls	r2, r3, #28
 800e9d8:	d501      	bpl.n	800e9de <__swbuf_r+0x20>
 800e9da:	6923      	ldr	r3, [r4, #16]
 800e9dc:	b943      	cbnz	r3, 800e9f0 <__swbuf_r+0x32>
 800e9de:	4621      	mov	r1, r4
 800e9e0:	4628      	mov	r0, r5
 800e9e2:	f000 f82b 	bl	800ea3c <__swsetup_r>
 800e9e6:	b118      	cbz	r0, 800e9f0 <__swbuf_r+0x32>
 800e9e8:	f04f 37ff 	mov.w	r7, #4294967295
 800e9ec:	4638      	mov	r0, r7
 800e9ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9f0:	6823      	ldr	r3, [r4, #0]
 800e9f2:	6922      	ldr	r2, [r4, #16]
 800e9f4:	1a98      	subs	r0, r3, r2
 800e9f6:	6963      	ldr	r3, [r4, #20]
 800e9f8:	b2f6      	uxtb	r6, r6
 800e9fa:	4283      	cmp	r3, r0
 800e9fc:	4637      	mov	r7, r6
 800e9fe:	dc05      	bgt.n	800ea0c <__swbuf_r+0x4e>
 800ea00:	4621      	mov	r1, r4
 800ea02:	4628      	mov	r0, r5
 800ea04:	f003 f9d2 	bl	8011dac <_fflush_r>
 800ea08:	2800      	cmp	r0, #0
 800ea0a:	d1ed      	bne.n	800e9e8 <__swbuf_r+0x2a>
 800ea0c:	68a3      	ldr	r3, [r4, #8]
 800ea0e:	3b01      	subs	r3, #1
 800ea10:	60a3      	str	r3, [r4, #8]
 800ea12:	6823      	ldr	r3, [r4, #0]
 800ea14:	1c5a      	adds	r2, r3, #1
 800ea16:	6022      	str	r2, [r4, #0]
 800ea18:	701e      	strb	r6, [r3, #0]
 800ea1a:	6962      	ldr	r2, [r4, #20]
 800ea1c:	1c43      	adds	r3, r0, #1
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	d004      	beq.n	800ea2c <__swbuf_r+0x6e>
 800ea22:	89a3      	ldrh	r3, [r4, #12]
 800ea24:	07db      	lsls	r3, r3, #31
 800ea26:	d5e1      	bpl.n	800e9ec <__swbuf_r+0x2e>
 800ea28:	2e0a      	cmp	r6, #10
 800ea2a:	d1df      	bne.n	800e9ec <__swbuf_r+0x2e>
 800ea2c:	4621      	mov	r1, r4
 800ea2e:	4628      	mov	r0, r5
 800ea30:	f003 f9bc 	bl	8011dac <_fflush_r>
 800ea34:	2800      	cmp	r0, #0
 800ea36:	d0d9      	beq.n	800e9ec <__swbuf_r+0x2e>
 800ea38:	e7d6      	b.n	800e9e8 <__swbuf_r+0x2a>
	...

0800ea3c <__swsetup_r>:
 800ea3c:	b538      	push	{r3, r4, r5, lr}
 800ea3e:	4b29      	ldr	r3, [pc, #164]	@ (800eae4 <__swsetup_r+0xa8>)
 800ea40:	4605      	mov	r5, r0
 800ea42:	6818      	ldr	r0, [r3, #0]
 800ea44:	460c      	mov	r4, r1
 800ea46:	b118      	cbz	r0, 800ea50 <__swsetup_r+0x14>
 800ea48:	6a03      	ldr	r3, [r0, #32]
 800ea4a:	b90b      	cbnz	r3, 800ea50 <__swsetup_r+0x14>
 800ea4c:	f7ff fe82 	bl	800e754 <__sinit>
 800ea50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea54:	0719      	lsls	r1, r3, #28
 800ea56:	d422      	bmi.n	800ea9e <__swsetup_r+0x62>
 800ea58:	06da      	lsls	r2, r3, #27
 800ea5a:	d407      	bmi.n	800ea6c <__swsetup_r+0x30>
 800ea5c:	2209      	movs	r2, #9
 800ea5e:	602a      	str	r2, [r5, #0]
 800ea60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea64:	81a3      	strh	r3, [r4, #12]
 800ea66:	f04f 30ff 	mov.w	r0, #4294967295
 800ea6a:	e033      	b.n	800ead4 <__swsetup_r+0x98>
 800ea6c:	0758      	lsls	r0, r3, #29
 800ea6e:	d512      	bpl.n	800ea96 <__swsetup_r+0x5a>
 800ea70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ea72:	b141      	cbz	r1, 800ea86 <__swsetup_r+0x4a>
 800ea74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ea78:	4299      	cmp	r1, r3
 800ea7a:	d002      	beq.n	800ea82 <__swsetup_r+0x46>
 800ea7c:	4628      	mov	r0, r5
 800ea7e:	f000 ff27 	bl	800f8d0 <_free_r>
 800ea82:	2300      	movs	r3, #0
 800ea84:	6363      	str	r3, [r4, #52]	@ 0x34
 800ea86:	89a3      	ldrh	r3, [r4, #12]
 800ea88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ea8c:	81a3      	strh	r3, [r4, #12]
 800ea8e:	2300      	movs	r3, #0
 800ea90:	6063      	str	r3, [r4, #4]
 800ea92:	6923      	ldr	r3, [r4, #16]
 800ea94:	6023      	str	r3, [r4, #0]
 800ea96:	89a3      	ldrh	r3, [r4, #12]
 800ea98:	f043 0308 	orr.w	r3, r3, #8
 800ea9c:	81a3      	strh	r3, [r4, #12]
 800ea9e:	6923      	ldr	r3, [r4, #16]
 800eaa0:	b94b      	cbnz	r3, 800eab6 <__swsetup_r+0x7a>
 800eaa2:	89a3      	ldrh	r3, [r4, #12]
 800eaa4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800eaa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eaac:	d003      	beq.n	800eab6 <__swsetup_r+0x7a>
 800eaae:	4621      	mov	r1, r4
 800eab0:	4628      	mov	r0, r5
 800eab2:	f003 f9c9 	bl	8011e48 <__smakebuf_r>
 800eab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eaba:	f013 0201 	ands.w	r2, r3, #1
 800eabe:	d00a      	beq.n	800ead6 <__swsetup_r+0x9a>
 800eac0:	2200      	movs	r2, #0
 800eac2:	60a2      	str	r2, [r4, #8]
 800eac4:	6962      	ldr	r2, [r4, #20]
 800eac6:	4252      	negs	r2, r2
 800eac8:	61a2      	str	r2, [r4, #24]
 800eaca:	6922      	ldr	r2, [r4, #16]
 800eacc:	b942      	cbnz	r2, 800eae0 <__swsetup_r+0xa4>
 800eace:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ead2:	d1c5      	bne.n	800ea60 <__swsetup_r+0x24>
 800ead4:	bd38      	pop	{r3, r4, r5, pc}
 800ead6:	0799      	lsls	r1, r3, #30
 800ead8:	bf58      	it	pl
 800eada:	6962      	ldrpl	r2, [r4, #20]
 800eadc:	60a2      	str	r2, [r4, #8]
 800eade:	e7f4      	b.n	800eaca <__swsetup_r+0x8e>
 800eae0:	2000      	movs	r0, #0
 800eae2:	e7f7      	b.n	800ead4 <__swsetup_r+0x98>
 800eae4:	20000020 	.word	0x20000020

0800eae8 <memset>:
 800eae8:	4402      	add	r2, r0
 800eaea:	4603      	mov	r3, r0
 800eaec:	4293      	cmp	r3, r2
 800eaee:	d100      	bne.n	800eaf2 <memset+0xa>
 800eaf0:	4770      	bx	lr
 800eaf2:	f803 1b01 	strb.w	r1, [r3], #1
 800eaf6:	e7f9      	b.n	800eaec <memset+0x4>

0800eaf8 <strncmp>:
 800eaf8:	b510      	push	{r4, lr}
 800eafa:	b16a      	cbz	r2, 800eb18 <strncmp+0x20>
 800eafc:	3901      	subs	r1, #1
 800eafe:	1884      	adds	r4, r0, r2
 800eb00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb04:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d103      	bne.n	800eb14 <strncmp+0x1c>
 800eb0c:	42a0      	cmp	r0, r4
 800eb0e:	d001      	beq.n	800eb14 <strncmp+0x1c>
 800eb10:	2a00      	cmp	r2, #0
 800eb12:	d1f5      	bne.n	800eb00 <strncmp+0x8>
 800eb14:	1ad0      	subs	r0, r2, r3
 800eb16:	bd10      	pop	{r4, pc}
 800eb18:	4610      	mov	r0, r2
 800eb1a:	e7fc      	b.n	800eb16 <strncmp+0x1e>

0800eb1c <_localeconv_r>:
 800eb1c:	4800      	ldr	r0, [pc, #0]	@ (800eb20 <_localeconv_r+0x4>)
 800eb1e:	4770      	bx	lr
 800eb20:	20000160 	.word	0x20000160

0800eb24 <_close_r>:
 800eb24:	b538      	push	{r3, r4, r5, lr}
 800eb26:	4d06      	ldr	r5, [pc, #24]	@ (800eb40 <_close_r+0x1c>)
 800eb28:	2300      	movs	r3, #0
 800eb2a:	4604      	mov	r4, r0
 800eb2c:	4608      	mov	r0, r1
 800eb2e:	602b      	str	r3, [r5, #0]
 800eb30:	f7f5 f850 	bl	8003bd4 <_close>
 800eb34:	1c43      	adds	r3, r0, #1
 800eb36:	d102      	bne.n	800eb3e <_close_r+0x1a>
 800eb38:	682b      	ldr	r3, [r5, #0]
 800eb3a:	b103      	cbz	r3, 800eb3e <_close_r+0x1a>
 800eb3c:	6023      	str	r3, [r4, #0]
 800eb3e:	bd38      	pop	{r3, r4, r5, pc}
 800eb40:	20002d10 	.word	0x20002d10

0800eb44 <_lseek_r>:
 800eb44:	b538      	push	{r3, r4, r5, lr}
 800eb46:	4d07      	ldr	r5, [pc, #28]	@ (800eb64 <_lseek_r+0x20>)
 800eb48:	4604      	mov	r4, r0
 800eb4a:	4608      	mov	r0, r1
 800eb4c:	4611      	mov	r1, r2
 800eb4e:	2200      	movs	r2, #0
 800eb50:	602a      	str	r2, [r5, #0]
 800eb52:	461a      	mov	r2, r3
 800eb54:	f7f5 f865 	bl	8003c22 <_lseek>
 800eb58:	1c43      	adds	r3, r0, #1
 800eb5a:	d102      	bne.n	800eb62 <_lseek_r+0x1e>
 800eb5c:	682b      	ldr	r3, [r5, #0]
 800eb5e:	b103      	cbz	r3, 800eb62 <_lseek_r+0x1e>
 800eb60:	6023      	str	r3, [r4, #0]
 800eb62:	bd38      	pop	{r3, r4, r5, pc}
 800eb64:	20002d10 	.word	0x20002d10

0800eb68 <_read_r>:
 800eb68:	b538      	push	{r3, r4, r5, lr}
 800eb6a:	4d07      	ldr	r5, [pc, #28]	@ (800eb88 <_read_r+0x20>)
 800eb6c:	4604      	mov	r4, r0
 800eb6e:	4608      	mov	r0, r1
 800eb70:	4611      	mov	r1, r2
 800eb72:	2200      	movs	r2, #0
 800eb74:	602a      	str	r2, [r5, #0]
 800eb76:	461a      	mov	r2, r3
 800eb78:	f7f4 fff3 	bl	8003b62 <_read>
 800eb7c:	1c43      	adds	r3, r0, #1
 800eb7e:	d102      	bne.n	800eb86 <_read_r+0x1e>
 800eb80:	682b      	ldr	r3, [r5, #0]
 800eb82:	b103      	cbz	r3, 800eb86 <_read_r+0x1e>
 800eb84:	6023      	str	r3, [r4, #0]
 800eb86:	bd38      	pop	{r3, r4, r5, pc}
 800eb88:	20002d10 	.word	0x20002d10

0800eb8c <_write_r>:
 800eb8c:	b538      	push	{r3, r4, r5, lr}
 800eb8e:	4d07      	ldr	r5, [pc, #28]	@ (800ebac <_write_r+0x20>)
 800eb90:	4604      	mov	r4, r0
 800eb92:	4608      	mov	r0, r1
 800eb94:	4611      	mov	r1, r2
 800eb96:	2200      	movs	r2, #0
 800eb98:	602a      	str	r2, [r5, #0]
 800eb9a:	461a      	mov	r2, r3
 800eb9c:	f7f4 fffe 	bl	8003b9c <_write>
 800eba0:	1c43      	adds	r3, r0, #1
 800eba2:	d102      	bne.n	800ebaa <_write_r+0x1e>
 800eba4:	682b      	ldr	r3, [r5, #0]
 800eba6:	b103      	cbz	r3, 800ebaa <_write_r+0x1e>
 800eba8:	6023      	str	r3, [r4, #0]
 800ebaa:	bd38      	pop	{r3, r4, r5, pc}
 800ebac:	20002d10 	.word	0x20002d10

0800ebb0 <__errno>:
 800ebb0:	4b01      	ldr	r3, [pc, #4]	@ (800ebb8 <__errno+0x8>)
 800ebb2:	6818      	ldr	r0, [r3, #0]
 800ebb4:	4770      	bx	lr
 800ebb6:	bf00      	nop
 800ebb8:	20000020 	.word	0x20000020

0800ebbc <__libc_init_array>:
 800ebbc:	b570      	push	{r4, r5, r6, lr}
 800ebbe:	4d0d      	ldr	r5, [pc, #52]	@ (800ebf4 <__libc_init_array+0x38>)
 800ebc0:	4c0d      	ldr	r4, [pc, #52]	@ (800ebf8 <__libc_init_array+0x3c>)
 800ebc2:	1b64      	subs	r4, r4, r5
 800ebc4:	10a4      	asrs	r4, r4, #2
 800ebc6:	2600      	movs	r6, #0
 800ebc8:	42a6      	cmp	r6, r4
 800ebca:	d109      	bne.n	800ebe0 <__libc_init_array+0x24>
 800ebcc:	4d0b      	ldr	r5, [pc, #44]	@ (800ebfc <__libc_init_array+0x40>)
 800ebce:	4c0c      	ldr	r4, [pc, #48]	@ (800ec00 <__libc_init_array+0x44>)
 800ebd0:	f004 fe2c 	bl	801382c <_init>
 800ebd4:	1b64      	subs	r4, r4, r5
 800ebd6:	10a4      	asrs	r4, r4, #2
 800ebd8:	2600      	movs	r6, #0
 800ebda:	42a6      	cmp	r6, r4
 800ebdc:	d105      	bne.n	800ebea <__libc_init_array+0x2e>
 800ebde:	bd70      	pop	{r4, r5, r6, pc}
 800ebe0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebe4:	4798      	blx	r3
 800ebe6:	3601      	adds	r6, #1
 800ebe8:	e7ee      	b.n	800ebc8 <__libc_init_array+0xc>
 800ebea:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebee:	4798      	blx	r3
 800ebf0:	3601      	adds	r6, #1
 800ebf2:	e7f2      	b.n	800ebda <__libc_init_array+0x1e>
 800ebf4:	08014218 	.word	0x08014218
 800ebf8:	08014218 	.word	0x08014218
 800ebfc:	08014218 	.word	0x08014218
 800ec00:	0801421c 	.word	0x0801421c

0800ec04 <__retarget_lock_init_recursive>:
 800ec04:	4770      	bx	lr

0800ec06 <__retarget_lock_acquire_recursive>:
 800ec06:	4770      	bx	lr

0800ec08 <__retarget_lock_release_recursive>:
 800ec08:	4770      	bx	lr

0800ec0a <memcpy>:
 800ec0a:	440a      	add	r2, r1
 800ec0c:	4291      	cmp	r1, r2
 800ec0e:	f100 33ff 	add.w	r3, r0, #4294967295
 800ec12:	d100      	bne.n	800ec16 <memcpy+0xc>
 800ec14:	4770      	bx	lr
 800ec16:	b510      	push	{r4, lr}
 800ec18:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec20:	4291      	cmp	r1, r2
 800ec22:	d1f9      	bne.n	800ec18 <memcpy+0xe>
 800ec24:	bd10      	pop	{r4, pc}
	...

0800ec28 <nanf>:
 800ec28:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ec30 <nanf+0x8>
 800ec2c:	4770      	bx	lr
 800ec2e:	bf00      	nop
 800ec30:	7fc00000 	.word	0x7fc00000

0800ec34 <quorem>:
 800ec34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec38:	6903      	ldr	r3, [r0, #16]
 800ec3a:	690c      	ldr	r4, [r1, #16]
 800ec3c:	42a3      	cmp	r3, r4
 800ec3e:	4607      	mov	r7, r0
 800ec40:	db7e      	blt.n	800ed40 <quorem+0x10c>
 800ec42:	3c01      	subs	r4, #1
 800ec44:	f101 0814 	add.w	r8, r1, #20
 800ec48:	00a3      	lsls	r3, r4, #2
 800ec4a:	f100 0514 	add.w	r5, r0, #20
 800ec4e:	9300      	str	r3, [sp, #0]
 800ec50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ec54:	9301      	str	r3, [sp, #4]
 800ec56:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ec5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ec5e:	3301      	adds	r3, #1
 800ec60:	429a      	cmp	r2, r3
 800ec62:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ec66:	fbb2 f6f3 	udiv	r6, r2, r3
 800ec6a:	d32e      	bcc.n	800ecca <quorem+0x96>
 800ec6c:	f04f 0a00 	mov.w	sl, #0
 800ec70:	46c4      	mov	ip, r8
 800ec72:	46ae      	mov	lr, r5
 800ec74:	46d3      	mov	fp, sl
 800ec76:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ec7a:	b298      	uxth	r0, r3
 800ec7c:	fb06 a000 	mla	r0, r6, r0, sl
 800ec80:	0c02      	lsrs	r2, r0, #16
 800ec82:	0c1b      	lsrs	r3, r3, #16
 800ec84:	fb06 2303 	mla	r3, r6, r3, r2
 800ec88:	f8de 2000 	ldr.w	r2, [lr]
 800ec8c:	b280      	uxth	r0, r0
 800ec8e:	b292      	uxth	r2, r2
 800ec90:	1a12      	subs	r2, r2, r0
 800ec92:	445a      	add	r2, fp
 800ec94:	f8de 0000 	ldr.w	r0, [lr]
 800ec98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ec9c:	b29b      	uxth	r3, r3
 800ec9e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800eca2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800eca6:	b292      	uxth	r2, r2
 800eca8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ecac:	45e1      	cmp	r9, ip
 800ecae:	f84e 2b04 	str.w	r2, [lr], #4
 800ecb2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ecb6:	d2de      	bcs.n	800ec76 <quorem+0x42>
 800ecb8:	9b00      	ldr	r3, [sp, #0]
 800ecba:	58eb      	ldr	r3, [r5, r3]
 800ecbc:	b92b      	cbnz	r3, 800ecca <quorem+0x96>
 800ecbe:	9b01      	ldr	r3, [sp, #4]
 800ecc0:	3b04      	subs	r3, #4
 800ecc2:	429d      	cmp	r5, r3
 800ecc4:	461a      	mov	r2, r3
 800ecc6:	d32f      	bcc.n	800ed28 <quorem+0xf4>
 800ecc8:	613c      	str	r4, [r7, #16]
 800ecca:	4638      	mov	r0, r7
 800eccc:	f001 f9c4 	bl	8010058 <__mcmp>
 800ecd0:	2800      	cmp	r0, #0
 800ecd2:	db25      	blt.n	800ed20 <quorem+0xec>
 800ecd4:	4629      	mov	r1, r5
 800ecd6:	2000      	movs	r0, #0
 800ecd8:	f858 2b04 	ldr.w	r2, [r8], #4
 800ecdc:	f8d1 c000 	ldr.w	ip, [r1]
 800ece0:	fa1f fe82 	uxth.w	lr, r2
 800ece4:	fa1f f38c 	uxth.w	r3, ip
 800ece8:	eba3 030e 	sub.w	r3, r3, lr
 800ecec:	4403      	add	r3, r0
 800ecee:	0c12      	lsrs	r2, r2, #16
 800ecf0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ecf4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ecf8:	b29b      	uxth	r3, r3
 800ecfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ecfe:	45c1      	cmp	r9, r8
 800ed00:	f841 3b04 	str.w	r3, [r1], #4
 800ed04:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ed08:	d2e6      	bcs.n	800ecd8 <quorem+0xa4>
 800ed0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ed0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ed12:	b922      	cbnz	r2, 800ed1e <quorem+0xea>
 800ed14:	3b04      	subs	r3, #4
 800ed16:	429d      	cmp	r5, r3
 800ed18:	461a      	mov	r2, r3
 800ed1a:	d30b      	bcc.n	800ed34 <quorem+0x100>
 800ed1c:	613c      	str	r4, [r7, #16]
 800ed1e:	3601      	adds	r6, #1
 800ed20:	4630      	mov	r0, r6
 800ed22:	b003      	add	sp, #12
 800ed24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed28:	6812      	ldr	r2, [r2, #0]
 800ed2a:	3b04      	subs	r3, #4
 800ed2c:	2a00      	cmp	r2, #0
 800ed2e:	d1cb      	bne.n	800ecc8 <quorem+0x94>
 800ed30:	3c01      	subs	r4, #1
 800ed32:	e7c6      	b.n	800ecc2 <quorem+0x8e>
 800ed34:	6812      	ldr	r2, [r2, #0]
 800ed36:	3b04      	subs	r3, #4
 800ed38:	2a00      	cmp	r2, #0
 800ed3a:	d1ef      	bne.n	800ed1c <quorem+0xe8>
 800ed3c:	3c01      	subs	r4, #1
 800ed3e:	e7ea      	b.n	800ed16 <quorem+0xe2>
 800ed40:	2000      	movs	r0, #0
 800ed42:	e7ee      	b.n	800ed22 <quorem+0xee>
 800ed44:	0000      	movs	r0, r0
	...

0800ed48 <_dtoa_r>:
 800ed48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed4c:	69c7      	ldr	r7, [r0, #28]
 800ed4e:	b099      	sub	sp, #100	@ 0x64
 800ed50:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ed54:	ec55 4b10 	vmov	r4, r5, d0
 800ed58:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ed5a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ed5c:	4683      	mov	fp, r0
 800ed5e:	920e      	str	r2, [sp, #56]	@ 0x38
 800ed60:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ed62:	b97f      	cbnz	r7, 800ed84 <_dtoa_r+0x3c>
 800ed64:	2010      	movs	r0, #16
 800ed66:	f000 fdfd 	bl	800f964 <malloc>
 800ed6a:	4602      	mov	r2, r0
 800ed6c:	f8cb 001c 	str.w	r0, [fp, #28]
 800ed70:	b920      	cbnz	r0, 800ed7c <_dtoa_r+0x34>
 800ed72:	4ba7      	ldr	r3, [pc, #668]	@ (800f010 <_dtoa_r+0x2c8>)
 800ed74:	21ef      	movs	r1, #239	@ 0xef
 800ed76:	48a7      	ldr	r0, [pc, #668]	@ (800f014 <_dtoa_r+0x2cc>)
 800ed78:	f003 f96a 	bl	8012050 <__assert_func>
 800ed7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ed80:	6007      	str	r7, [r0, #0]
 800ed82:	60c7      	str	r7, [r0, #12]
 800ed84:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ed88:	6819      	ldr	r1, [r3, #0]
 800ed8a:	b159      	cbz	r1, 800eda4 <_dtoa_r+0x5c>
 800ed8c:	685a      	ldr	r2, [r3, #4]
 800ed8e:	604a      	str	r2, [r1, #4]
 800ed90:	2301      	movs	r3, #1
 800ed92:	4093      	lsls	r3, r2
 800ed94:	608b      	str	r3, [r1, #8]
 800ed96:	4658      	mov	r0, fp
 800ed98:	f000 feda 	bl	800fb50 <_Bfree>
 800ed9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800eda0:	2200      	movs	r2, #0
 800eda2:	601a      	str	r2, [r3, #0]
 800eda4:	1e2b      	subs	r3, r5, #0
 800eda6:	bfb9      	ittee	lt
 800eda8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800edac:	9303      	strlt	r3, [sp, #12]
 800edae:	2300      	movge	r3, #0
 800edb0:	6033      	strge	r3, [r6, #0]
 800edb2:	9f03      	ldr	r7, [sp, #12]
 800edb4:	4b98      	ldr	r3, [pc, #608]	@ (800f018 <_dtoa_r+0x2d0>)
 800edb6:	bfbc      	itt	lt
 800edb8:	2201      	movlt	r2, #1
 800edba:	6032      	strlt	r2, [r6, #0]
 800edbc:	43bb      	bics	r3, r7
 800edbe:	d112      	bne.n	800ede6 <_dtoa_r+0x9e>
 800edc0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800edc2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800edc6:	6013      	str	r3, [r2, #0]
 800edc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800edcc:	4323      	orrs	r3, r4
 800edce:	f000 854d 	beq.w	800f86c <_dtoa_r+0xb24>
 800edd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800edd4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f02c <_dtoa_r+0x2e4>
 800edd8:	2b00      	cmp	r3, #0
 800edda:	f000 854f 	beq.w	800f87c <_dtoa_r+0xb34>
 800edde:	f10a 0303 	add.w	r3, sl, #3
 800ede2:	f000 bd49 	b.w	800f878 <_dtoa_r+0xb30>
 800ede6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800edea:	2200      	movs	r2, #0
 800edec:	ec51 0b17 	vmov	r0, r1, d7
 800edf0:	2300      	movs	r3, #0
 800edf2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800edf6:	f7f1 fe6f 	bl	8000ad8 <__aeabi_dcmpeq>
 800edfa:	4680      	mov	r8, r0
 800edfc:	b158      	cbz	r0, 800ee16 <_dtoa_r+0xce>
 800edfe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ee00:	2301      	movs	r3, #1
 800ee02:	6013      	str	r3, [r2, #0]
 800ee04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ee06:	b113      	cbz	r3, 800ee0e <_dtoa_r+0xc6>
 800ee08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ee0a:	4b84      	ldr	r3, [pc, #528]	@ (800f01c <_dtoa_r+0x2d4>)
 800ee0c:	6013      	str	r3, [r2, #0]
 800ee0e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f030 <_dtoa_r+0x2e8>
 800ee12:	f000 bd33 	b.w	800f87c <_dtoa_r+0xb34>
 800ee16:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ee1a:	aa16      	add	r2, sp, #88	@ 0x58
 800ee1c:	a917      	add	r1, sp, #92	@ 0x5c
 800ee1e:	4658      	mov	r0, fp
 800ee20:	f001 fa3a 	bl	8010298 <__d2b>
 800ee24:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ee28:	4681      	mov	r9, r0
 800ee2a:	2e00      	cmp	r6, #0
 800ee2c:	d077      	beq.n	800ef1e <_dtoa_r+0x1d6>
 800ee2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ee30:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ee34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ee3c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ee40:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ee44:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ee48:	4619      	mov	r1, r3
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	4b74      	ldr	r3, [pc, #464]	@ (800f020 <_dtoa_r+0x2d8>)
 800ee4e:	f7f1 fa23 	bl	8000298 <__aeabi_dsub>
 800ee52:	a369      	add	r3, pc, #420	@ (adr r3, 800eff8 <_dtoa_r+0x2b0>)
 800ee54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee58:	f7f1 fbd6 	bl	8000608 <__aeabi_dmul>
 800ee5c:	a368      	add	r3, pc, #416	@ (adr r3, 800f000 <_dtoa_r+0x2b8>)
 800ee5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee62:	f7f1 fa1b 	bl	800029c <__adddf3>
 800ee66:	4604      	mov	r4, r0
 800ee68:	4630      	mov	r0, r6
 800ee6a:	460d      	mov	r5, r1
 800ee6c:	f7f1 fb62 	bl	8000534 <__aeabi_i2d>
 800ee70:	a365      	add	r3, pc, #404	@ (adr r3, 800f008 <_dtoa_r+0x2c0>)
 800ee72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee76:	f7f1 fbc7 	bl	8000608 <__aeabi_dmul>
 800ee7a:	4602      	mov	r2, r0
 800ee7c:	460b      	mov	r3, r1
 800ee7e:	4620      	mov	r0, r4
 800ee80:	4629      	mov	r1, r5
 800ee82:	f7f1 fa0b 	bl	800029c <__adddf3>
 800ee86:	4604      	mov	r4, r0
 800ee88:	460d      	mov	r5, r1
 800ee8a:	f7f1 fe6d 	bl	8000b68 <__aeabi_d2iz>
 800ee8e:	2200      	movs	r2, #0
 800ee90:	4607      	mov	r7, r0
 800ee92:	2300      	movs	r3, #0
 800ee94:	4620      	mov	r0, r4
 800ee96:	4629      	mov	r1, r5
 800ee98:	f7f1 fe28 	bl	8000aec <__aeabi_dcmplt>
 800ee9c:	b140      	cbz	r0, 800eeb0 <_dtoa_r+0x168>
 800ee9e:	4638      	mov	r0, r7
 800eea0:	f7f1 fb48 	bl	8000534 <__aeabi_i2d>
 800eea4:	4622      	mov	r2, r4
 800eea6:	462b      	mov	r3, r5
 800eea8:	f7f1 fe16 	bl	8000ad8 <__aeabi_dcmpeq>
 800eeac:	b900      	cbnz	r0, 800eeb0 <_dtoa_r+0x168>
 800eeae:	3f01      	subs	r7, #1
 800eeb0:	2f16      	cmp	r7, #22
 800eeb2:	d851      	bhi.n	800ef58 <_dtoa_r+0x210>
 800eeb4:	4b5b      	ldr	r3, [pc, #364]	@ (800f024 <_dtoa_r+0x2dc>)
 800eeb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800eeba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eebe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eec2:	f7f1 fe13 	bl	8000aec <__aeabi_dcmplt>
 800eec6:	2800      	cmp	r0, #0
 800eec8:	d048      	beq.n	800ef5c <_dtoa_r+0x214>
 800eeca:	3f01      	subs	r7, #1
 800eecc:	2300      	movs	r3, #0
 800eece:	9312      	str	r3, [sp, #72]	@ 0x48
 800eed0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800eed2:	1b9b      	subs	r3, r3, r6
 800eed4:	1e5a      	subs	r2, r3, #1
 800eed6:	bf44      	itt	mi
 800eed8:	f1c3 0801 	rsbmi	r8, r3, #1
 800eedc:	2300      	movmi	r3, #0
 800eede:	9208      	str	r2, [sp, #32]
 800eee0:	bf54      	ite	pl
 800eee2:	f04f 0800 	movpl.w	r8, #0
 800eee6:	9308      	strmi	r3, [sp, #32]
 800eee8:	2f00      	cmp	r7, #0
 800eeea:	db39      	blt.n	800ef60 <_dtoa_r+0x218>
 800eeec:	9b08      	ldr	r3, [sp, #32]
 800eeee:	970f      	str	r7, [sp, #60]	@ 0x3c
 800eef0:	443b      	add	r3, r7
 800eef2:	9308      	str	r3, [sp, #32]
 800eef4:	2300      	movs	r3, #0
 800eef6:	930a      	str	r3, [sp, #40]	@ 0x28
 800eef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eefa:	2b09      	cmp	r3, #9
 800eefc:	d864      	bhi.n	800efc8 <_dtoa_r+0x280>
 800eefe:	2b05      	cmp	r3, #5
 800ef00:	bfc4      	itt	gt
 800ef02:	3b04      	subgt	r3, #4
 800ef04:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ef06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef08:	f1a3 0302 	sub.w	r3, r3, #2
 800ef0c:	bfcc      	ite	gt
 800ef0e:	2400      	movgt	r4, #0
 800ef10:	2401      	movle	r4, #1
 800ef12:	2b03      	cmp	r3, #3
 800ef14:	d863      	bhi.n	800efde <_dtoa_r+0x296>
 800ef16:	e8df f003 	tbb	[pc, r3]
 800ef1a:	372a      	.short	0x372a
 800ef1c:	5535      	.short	0x5535
 800ef1e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ef22:	441e      	add	r6, r3
 800ef24:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ef28:	2b20      	cmp	r3, #32
 800ef2a:	bfc1      	itttt	gt
 800ef2c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ef30:	409f      	lslgt	r7, r3
 800ef32:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ef36:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ef3a:	bfd6      	itet	le
 800ef3c:	f1c3 0320 	rsble	r3, r3, #32
 800ef40:	ea47 0003 	orrgt.w	r0, r7, r3
 800ef44:	fa04 f003 	lslle.w	r0, r4, r3
 800ef48:	f7f1 fae4 	bl	8000514 <__aeabi_ui2d>
 800ef4c:	2201      	movs	r2, #1
 800ef4e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ef52:	3e01      	subs	r6, #1
 800ef54:	9214      	str	r2, [sp, #80]	@ 0x50
 800ef56:	e777      	b.n	800ee48 <_dtoa_r+0x100>
 800ef58:	2301      	movs	r3, #1
 800ef5a:	e7b8      	b.n	800eece <_dtoa_r+0x186>
 800ef5c:	9012      	str	r0, [sp, #72]	@ 0x48
 800ef5e:	e7b7      	b.n	800eed0 <_dtoa_r+0x188>
 800ef60:	427b      	negs	r3, r7
 800ef62:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef64:	2300      	movs	r3, #0
 800ef66:	eba8 0807 	sub.w	r8, r8, r7
 800ef6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ef6c:	e7c4      	b.n	800eef8 <_dtoa_r+0x1b0>
 800ef6e:	2300      	movs	r3, #0
 800ef70:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ef72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	dc35      	bgt.n	800efe4 <_dtoa_r+0x29c>
 800ef78:	2301      	movs	r3, #1
 800ef7a:	9300      	str	r3, [sp, #0]
 800ef7c:	9307      	str	r3, [sp, #28]
 800ef7e:	461a      	mov	r2, r3
 800ef80:	920e      	str	r2, [sp, #56]	@ 0x38
 800ef82:	e00b      	b.n	800ef9c <_dtoa_r+0x254>
 800ef84:	2301      	movs	r3, #1
 800ef86:	e7f3      	b.n	800ef70 <_dtoa_r+0x228>
 800ef88:	2300      	movs	r3, #0
 800ef8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ef8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef8e:	18fb      	adds	r3, r7, r3
 800ef90:	9300      	str	r3, [sp, #0]
 800ef92:	3301      	adds	r3, #1
 800ef94:	2b01      	cmp	r3, #1
 800ef96:	9307      	str	r3, [sp, #28]
 800ef98:	bfb8      	it	lt
 800ef9a:	2301      	movlt	r3, #1
 800ef9c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800efa0:	2100      	movs	r1, #0
 800efa2:	2204      	movs	r2, #4
 800efa4:	f102 0514 	add.w	r5, r2, #20
 800efa8:	429d      	cmp	r5, r3
 800efaa:	d91f      	bls.n	800efec <_dtoa_r+0x2a4>
 800efac:	6041      	str	r1, [r0, #4]
 800efae:	4658      	mov	r0, fp
 800efb0:	f000 fd8e 	bl	800fad0 <_Balloc>
 800efb4:	4682      	mov	sl, r0
 800efb6:	2800      	cmp	r0, #0
 800efb8:	d13c      	bne.n	800f034 <_dtoa_r+0x2ec>
 800efba:	4b1b      	ldr	r3, [pc, #108]	@ (800f028 <_dtoa_r+0x2e0>)
 800efbc:	4602      	mov	r2, r0
 800efbe:	f240 11af 	movw	r1, #431	@ 0x1af
 800efc2:	e6d8      	b.n	800ed76 <_dtoa_r+0x2e>
 800efc4:	2301      	movs	r3, #1
 800efc6:	e7e0      	b.n	800ef8a <_dtoa_r+0x242>
 800efc8:	2401      	movs	r4, #1
 800efca:	2300      	movs	r3, #0
 800efcc:	9309      	str	r3, [sp, #36]	@ 0x24
 800efce:	940b      	str	r4, [sp, #44]	@ 0x2c
 800efd0:	f04f 33ff 	mov.w	r3, #4294967295
 800efd4:	9300      	str	r3, [sp, #0]
 800efd6:	9307      	str	r3, [sp, #28]
 800efd8:	2200      	movs	r2, #0
 800efda:	2312      	movs	r3, #18
 800efdc:	e7d0      	b.n	800ef80 <_dtoa_r+0x238>
 800efde:	2301      	movs	r3, #1
 800efe0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800efe2:	e7f5      	b.n	800efd0 <_dtoa_r+0x288>
 800efe4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800efe6:	9300      	str	r3, [sp, #0]
 800efe8:	9307      	str	r3, [sp, #28]
 800efea:	e7d7      	b.n	800ef9c <_dtoa_r+0x254>
 800efec:	3101      	adds	r1, #1
 800efee:	0052      	lsls	r2, r2, #1
 800eff0:	e7d8      	b.n	800efa4 <_dtoa_r+0x25c>
 800eff2:	bf00      	nop
 800eff4:	f3af 8000 	nop.w
 800eff8:	636f4361 	.word	0x636f4361
 800effc:	3fd287a7 	.word	0x3fd287a7
 800f000:	8b60c8b3 	.word	0x8b60c8b3
 800f004:	3fc68a28 	.word	0x3fc68a28
 800f008:	509f79fb 	.word	0x509f79fb
 800f00c:	3fd34413 	.word	0x3fd34413
 800f010:	08013dd8 	.word	0x08013dd8
 800f014:	08013def 	.word	0x08013def
 800f018:	7ff00000 	.word	0x7ff00000
 800f01c:	08014131 	.word	0x08014131
 800f020:	3ff80000 	.word	0x3ff80000
 800f024:	08013ee8 	.word	0x08013ee8
 800f028:	08013e47 	.word	0x08013e47
 800f02c:	08013dd4 	.word	0x08013dd4
 800f030:	08014130 	.word	0x08014130
 800f034:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f038:	6018      	str	r0, [r3, #0]
 800f03a:	9b07      	ldr	r3, [sp, #28]
 800f03c:	2b0e      	cmp	r3, #14
 800f03e:	f200 80a4 	bhi.w	800f18a <_dtoa_r+0x442>
 800f042:	2c00      	cmp	r4, #0
 800f044:	f000 80a1 	beq.w	800f18a <_dtoa_r+0x442>
 800f048:	2f00      	cmp	r7, #0
 800f04a:	dd33      	ble.n	800f0b4 <_dtoa_r+0x36c>
 800f04c:	4bad      	ldr	r3, [pc, #692]	@ (800f304 <_dtoa_r+0x5bc>)
 800f04e:	f007 020f 	and.w	r2, r7, #15
 800f052:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f056:	ed93 7b00 	vldr	d7, [r3]
 800f05a:	05f8      	lsls	r0, r7, #23
 800f05c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f060:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f064:	d516      	bpl.n	800f094 <_dtoa_r+0x34c>
 800f066:	4ba8      	ldr	r3, [pc, #672]	@ (800f308 <_dtoa_r+0x5c0>)
 800f068:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f06c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f070:	f7f1 fbf4 	bl	800085c <__aeabi_ddiv>
 800f074:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f078:	f004 040f 	and.w	r4, r4, #15
 800f07c:	2603      	movs	r6, #3
 800f07e:	4da2      	ldr	r5, [pc, #648]	@ (800f308 <_dtoa_r+0x5c0>)
 800f080:	b954      	cbnz	r4, 800f098 <_dtoa_r+0x350>
 800f082:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f08a:	f7f1 fbe7 	bl	800085c <__aeabi_ddiv>
 800f08e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f092:	e028      	b.n	800f0e6 <_dtoa_r+0x39e>
 800f094:	2602      	movs	r6, #2
 800f096:	e7f2      	b.n	800f07e <_dtoa_r+0x336>
 800f098:	07e1      	lsls	r1, r4, #31
 800f09a:	d508      	bpl.n	800f0ae <_dtoa_r+0x366>
 800f09c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f0a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f0a4:	f7f1 fab0 	bl	8000608 <__aeabi_dmul>
 800f0a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f0ac:	3601      	adds	r6, #1
 800f0ae:	1064      	asrs	r4, r4, #1
 800f0b0:	3508      	adds	r5, #8
 800f0b2:	e7e5      	b.n	800f080 <_dtoa_r+0x338>
 800f0b4:	f000 80d2 	beq.w	800f25c <_dtoa_r+0x514>
 800f0b8:	427c      	negs	r4, r7
 800f0ba:	4b92      	ldr	r3, [pc, #584]	@ (800f304 <_dtoa_r+0x5bc>)
 800f0bc:	4d92      	ldr	r5, [pc, #584]	@ (800f308 <_dtoa_r+0x5c0>)
 800f0be:	f004 020f 	and.w	r2, r4, #15
 800f0c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f0ce:	f7f1 fa9b 	bl	8000608 <__aeabi_dmul>
 800f0d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f0d6:	1124      	asrs	r4, r4, #4
 800f0d8:	2300      	movs	r3, #0
 800f0da:	2602      	movs	r6, #2
 800f0dc:	2c00      	cmp	r4, #0
 800f0de:	f040 80b2 	bne.w	800f246 <_dtoa_r+0x4fe>
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d1d3      	bne.n	800f08e <_dtoa_r+0x346>
 800f0e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f0e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	f000 80b7 	beq.w	800f260 <_dtoa_r+0x518>
 800f0f2:	4b86      	ldr	r3, [pc, #536]	@ (800f30c <_dtoa_r+0x5c4>)
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	4620      	mov	r0, r4
 800f0f8:	4629      	mov	r1, r5
 800f0fa:	f7f1 fcf7 	bl	8000aec <__aeabi_dcmplt>
 800f0fe:	2800      	cmp	r0, #0
 800f100:	f000 80ae 	beq.w	800f260 <_dtoa_r+0x518>
 800f104:	9b07      	ldr	r3, [sp, #28]
 800f106:	2b00      	cmp	r3, #0
 800f108:	f000 80aa 	beq.w	800f260 <_dtoa_r+0x518>
 800f10c:	9b00      	ldr	r3, [sp, #0]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	dd37      	ble.n	800f182 <_dtoa_r+0x43a>
 800f112:	1e7b      	subs	r3, r7, #1
 800f114:	9304      	str	r3, [sp, #16]
 800f116:	4620      	mov	r0, r4
 800f118:	4b7d      	ldr	r3, [pc, #500]	@ (800f310 <_dtoa_r+0x5c8>)
 800f11a:	2200      	movs	r2, #0
 800f11c:	4629      	mov	r1, r5
 800f11e:	f7f1 fa73 	bl	8000608 <__aeabi_dmul>
 800f122:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f126:	9c00      	ldr	r4, [sp, #0]
 800f128:	3601      	adds	r6, #1
 800f12a:	4630      	mov	r0, r6
 800f12c:	f7f1 fa02 	bl	8000534 <__aeabi_i2d>
 800f130:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f134:	f7f1 fa68 	bl	8000608 <__aeabi_dmul>
 800f138:	4b76      	ldr	r3, [pc, #472]	@ (800f314 <_dtoa_r+0x5cc>)
 800f13a:	2200      	movs	r2, #0
 800f13c:	f7f1 f8ae 	bl	800029c <__adddf3>
 800f140:	4605      	mov	r5, r0
 800f142:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f146:	2c00      	cmp	r4, #0
 800f148:	f040 808d 	bne.w	800f266 <_dtoa_r+0x51e>
 800f14c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f150:	4b71      	ldr	r3, [pc, #452]	@ (800f318 <_dtoa_r+0x5d0>)
 800f152:	2200      	movs	r2, #0
 800f154:	f7f1 f8a0 	bl	8000298 <__aeabi_dsub>
 800f158:	4602      	mov	r2, r0
 800f15a:	460b      	mov	r3, r1
 800f15c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f160:	462a      	mov	r2, r5
 800f162:	4633      	mov	r3, r6
 800f164:	f7f1 fce0 	bl	8000b28 <__aeabi_dcmpgt>
 800f168:	2800      	cmp	r0, #0
 800f16a:	f040 828b 	bne.w	800f684 <_dtoa_r+0x93c>
 800f16e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f172:	462a      	mov	r2, r5
 800f174:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f178:	f7f1 fcb8 	bl	8000aec <__aeabi_dcmplt>
 800f17c:	2800      	cmp	r0, #0
 800f17e:	f040 8128 	bne.w	800f3d2 <_dtoa_r+0x68a>
 800f182:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f186:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f18a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	f2c0 815a 	blt.w	800f446 <_dtoa_r+0x6fe>
 800f192:	2f0e      	cmp	r7, #14
 800f194:	f300 8157 	bgt.w	800f446 <_dtoa_r+0x6fe>
 800f198:	4b5a      	ldr	r3, [pc, #360]	@ (800f304 <_dtoa_r+0x5bc>)
 800f19a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f19e:	ed93 7b00 	vldr	d7, [r3]
 800f1a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	ed8d 7b00 	vstr	d7, [sp]
 800f1aa:	da03      	bge.n	800f1b4 <_dtoa_r+0x46c>
 800f1ac:	9b07      	ldr	r3, [sp, #28]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	f340 8101 	ble.w	800f3b6 <_dtoa_r+0x66e>
 800f1b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f1b8:	4656      	mov	r6, sl
 800f1ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f1be:	4620      	mov	r0, r4
 800f1c0:	4629      	mov	r1, r5
 800f1c2:	f7f1 fb4b 	bl	800085c <__aeabi_ddiv>
 800f1c6:	f7f1 fccf 	bl	8000b68 <__aeabi_d2iz>
 800f1ca:	4680      	mov	r8, r0
 800f1cc:	f7f1 f9b2 	bl	8000534 <__aeabi_i2d>
 800f1d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f1d4:	f7f1 fa18 	bl	8000608 <__aeabi_dmul>
 800f1d8:	4602      	mov	r2, r0
 800f1da:	460b      	mov	r3, r1
 800f1dc:	4620      	mov	r0, r4
 800f1de:	4629      	mov	r1, r5
 800f1e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f1e4:	f7f1 f858 	bl	8000298 <__aeabi_dsub>
 800f1e8:	f806 4b01 	strb.w	r4, [r6], #1
 800f1ec:	9d07      	ldr	r5, [sp, #28]
 800f1ee:	eba6 040a 	sub.w	r4, r6, sl
 800f1f2:	42a5      	cmp	r5, r4
 800f1f4:	4602      	mov	r2, r0
 800f1f6:	460b      	mov	r3, r1
 800f1f8:	f040 8117 	bne.w	800f42a <_dtoa_r+0x6e2>
 800f1fc:	f7f1 f84e 	bl	800029c <__adddf3>
 800f200:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f204:	4604      	mov	r4, r0
 800f206:	460d      	mov	r5, r1
 800f208:	f7f1 fc8e 	bl	8000b28 <__aeabi_dcmpgt>
 800f20c:	2800      	cmp	r0, #0
 800f20e:	f040 80f9 	bne.w	800f404 <_dtoa_r+0x6bc>
 800f212:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f216:	4620      	mov	r0, r4
 800f218:	4629      	mov	r1, r5
 800f21a:	f7f1 fc5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800f21e:	b118      	cbz	r0, 800f228 <_dtoa_r+0x4e0>
 800f220:	f018 0f01 	tst.w	r8, #1
 800f224:	f040 80ee 	bne.w	800f404 <_dtoa_r+0x6bc>
 800f228:	4649      	mov	r1, r9
 800f22a:	4658      	mov	r0, fp
 800f22c:	f000 fc90 	bl	800fb50 <_Bfree>
 800f230:	2300      	movs	r3, #0
 800f232:	7033      	strb	r3, [r6, #0]
 800f234:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f236:	3701      	adds	r7, #1
 800f238:	601f      	str	r7, [r3, #0]
 800f23a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	f000 831d 	beq.w	800f87c <_dtoa_r+0xb34>
 800f242:	601e      	str	r6, [r3, #0]
 800f244:	e31a      	b.n	800f87c <_dtoa_r+0xb34>
 800f246:	07e2      	lsls	r2, r4, #31
 800f248:	d505      	bpl.n	800f256 <_dtoa_r+0x50e>
 800f24a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f24e:	f7f1 f9db 	bl	8000608 <__aeabi_dmul>
 800f252:	3601      	adds	r6, #1
 800f254:	2301      	movs	r3, #1
 800f256:	1064      	asrs	r4, r4, #1
 800f258:	3508      	adds	r5, #8
 800f25a:	e73f      	b.n	800f0dc <_dtoa_r+0x394>
 800f25c:	2602      	movs	r6, #2
 800f25e:	e742      	b.n	800f0e6 <_dtoa_r+0x39e>
 800f260:	9c07      	ldr	r4, [sp, #28]
 800f262:	9704      	str	r7, [sp, #16]
 800f264:	e761      	b.n	800f12a <_dtoa_r+0x3e2>
 800f266:	4b27      	ldr	r3, [pc, #156]	@ (800f304 <_dtoa_r+0x5bc>)
 800f268:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f26a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f26e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f272:	4454      	add	r4, sl
 800f274:	2900      	cmp	r1, #0
 800f276:	d053      	beq.n	800f320 <_dtoa_r+0x5d8>
 800f278:	4928      	ldr	r1, [pc, #160]	@ (800f31c <_dtoa_r+0x5d4>)
 800f27a:	2000      	movs	r0, #0
 800f27c:	f7f1 faee 	bl	800085c <__aeabi_ddiv>
 800f280:	4633      	mov	r3, r6
 800f282:	462a      	mov	r2, r5
 800f284:	f7f1 f808 	bl	8000298 <__aeabi_dsub>
 800f288:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f28c:	4656      	mov	r6, sl
 800f28e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f292:	f7f1 fc69 	bl	8000b68 <__aeabi_d2iz>
 800f296:	4605      	mov	r5, r0
 800f298:	f7f1 f94c 	bl	8000534 <__aeabi_i2d>
 800f29c:	4602      	mov	r2, r0
 800f29e:	460b      	mov	r3, r1
 800f2a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f2a4:	f7f0 fff8 	bl	8000298 <__aeabi_dsub>
 800f2a8:	3530      	adds	r5, #48	@ 0x30
 800f2aa:	4602      	mov	r2, r0
 800f2ac:	460b      	mov	r3, r1
 800f2ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f2b2:	f806 5b01 	strb.w	r5, [r6], #1
 800f2b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f2ba:	f7f1 fc17 	bl	8000aec <__aeabi_dcmplt>
 800f2be:	2800      	cmp	r0, #0
 800f2c0:	d171      	bne.n	800f3a6 <_dtoa_r+0x65e>
 800f2c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f2c6:	4911      	ldr	r1, [pc, #68]	@ (800f30c <_dtoa_r+0x5c4>)
 800f2c8:	2000      	movs	r0, #0
 800f2ca:	f7f0 ffe5 	bl	8000298 <__aeabi_dsub>
 800f2ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f2d2:	f7f1 fc0b 	bl	8000aec <__aeabi_dcmplt>
 800f2d6:	2800      	cmp	r0, #0
 800f2d8:	f040 8095 	bne.w	800f406 <_dtoa_r+0x6be>
 800f2dc:	42a6      	cmp	r6, r4
 800f2de:	f43f af50 	beq.w	800f182 <_dtoa_r+0x43a>
 800f2e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f2e6:	4b0a      	ldr	r3, [pc, #40]	@ (800f310 <_dtoa_r+0x5c8>)
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	f7f1 f98d 	bl	8000608 <__aeabi_dmul>
 800f2ee:	4b08      	ldr	r3, [pc, #32]	@ (800f310 <_dtoa_r+0x5c8>)
 800f2f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f2fa:	f7f1 f985 	bl	8000608 <__aeabi_dmul>
 800f2fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f302:	e7c4      	b.n	800f28e <_dtoa_r+0x546>
 800f304:	08013ee8 	.word	0x08013ee8
 800f308:	08013ec0 	.word	0x08013ec0
 800f30c:	3ff00000 	.word	0x3ff00000
 800f310:	40240000 	.word	0x40240000
 800f314:	401c0000 	.word	0x401c0000
 800f318:	40140000 	.word	0x40140000
 800f31c:	3fe00000 	.word	0x3fe00000
 800f320:	4631      	mov	r1, r6
 800f322:	4628      	mov	r0, r5
 800f324:	f7f1 f970 	bl	8000608 <__aeabi_dmul>
 800f328:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f32c:	9415      	str	r4, [sp, #84]	@ 0x54
 800f32e:	4656      	mov	r6, sl
 800f330:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f334:	f7f1 fc18 	bl	8000b68 <__aeabi_d2iz>
 800f338:	4605      	mov	r5, r0
 800f33a:	f7f1 f8fb 	bl	8000534 <__aeabi_i2d>
 800f33e:	4602      	mov	r2, r0
 800f340:	460b      	mov	r3, r1
 800f342:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f346:	f7f0 ffa7 	bl	8000298 <__aeabi_dsub>
 800f34a:	3530      	adds	r5, #48	@ 0x30
 800f34c:	f806 5b01 	strb.w	r5, [r6], #1
 800f350:	4602      	mov	r2, r0
 800f352:	460b      	mov	r3, r1
 800f354:	42a6      	cmp	r6, r4
 800f356:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f35a:	f04f 0200 	mov.w	r2, #0
 800f35e:	d124      	bne.n	800f3aa <_dtoa_r+0x662>
 800f360:	4bac      	ldr	r3, [pc, #688]	@ (800f614 <_dtoa_r+0x8cc>)
 800f362:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f366:	f7f0 ff99 	bl	800029c <__adddf3>
 800f36a:	4602      	mov	r2, r0
 800f36c:	460b      	mov	r3, r1
 800f36e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f372:	f7f1 fbd9 	bl	8000b28 <__aeabi_dcmpgt>
 800f376:	2800      	cmp	r0, #0
 800f378:	d145      	bne.n	800f406 <_dtoa_r+0x6be>
 800f37a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f37e:	49a5      	ldr	r1, [pc, #660]	@ (800f614 <_dtoa_r+0x8cc>)
 800f380:	2000      	movs	r0, #0
 800f382:	f7f0 ff89 	bl	8000298 <__aeabi_dsub>
 800f386:	4602      	mov	r2, r0
 800f388:	460b      	mov	r3, r1
 800f38a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f38e:	f7f1 fbad 	bl	8000aec <__aeabi_dcmplt>
 800f392:	2800      	cmp	r0, #0
 800f394:	f43f aef5 	beq.w	800f182 <_dtoa_r+0x43a>
 800f398:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f39a:	1e73      	subs	r3, r6, #1
 800f39c:	9315      	str	r3, [sp, #84]	@ 0x54
 800f39e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f3a2:	2b30      	cmp	r3, #48	@ 0x30
 800f3a4:	d0f8      	beq.n	800f398 <_dtoa_r+0x650>
 800f3a6:	9f04      	ldr	r7, [sp, #16]
 800f3a8:	e73e      	b.n	800f228 <_dtoa_r+0x4e0>
 800f3aa:	4b9b      	ldr	r3, [pc, #620]	@ (800f618 <_dtoa_r+0x8d0>)
 800f3ac:	f7f1 f92c 	bl	8000608 <__aeabi_dmul>
 800f3b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3b4:	e7bc      	b.n	800f330 <_dtoa_r+0x5e8>
 800f3b6:	d10c      	bne.n	800f3d2 <_dtoa_r+0x68a>
 800f3b8:	4b98      	ldr	r3, [pc, #608]	@ (800f61c <_dtoa_r+0x8d4>)
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f3c0:	f7f1 f922 	bl	8000608 <__aeabi_dmul>
 800f3c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f3c8:	f7f1 fba4 	bl	8000b14 <__aeabi_dcmpge>
 800f3cc:	2800      	cmp	r0, #0
 800f3ce:	f000 8157 	beq.w	800f680 <_dtoa_r+0x938>
 800f3d2:	2400      	movs	r4, #0
 800f3d4:	4625      	mov	r5, r4
 800f3d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f3d8:	43db      	mvns	r3, r3
 800f3da:	9304      	str	r3, [sp, #16]
 800f3dc:	4656      	mov	r6, sl
 800f3de:	2700      	movs	r7, #0
 800f3e0:	4621      	mov	r1, r4
 800f3e2:	4658      	mov	r0, fp
 800f3e4:	f000 fbb4 	bl	800fb50 <_Bfree>
 800f3e8:	2d00      	cmp	r5, #0
 800f3ea:	d0dc      	beq.n	800f3a6 <_dtoa_r+0x65e>
 800f3ec:	b12f      	cbz	r7, 800f3fa <_dtoa_r+0x6b2>
 800f3ee:	42af      	cmp	r7, r5
 800f3f0:	d003      	beq.n	800f3fa <_dtoa_r+0x6b2>
 800f3f2:	4639      	mov	r1, r7
 800f3f4:	4658      	mov	r0, fp
 800f3f6:	f000 fbab 	bl	800fb50 <_Bfree>
 800f3fa:	4629      	mov	r1, r5
 800f3fc:	4658      	mov	r0, fp
 800f3fe:	f000 fba7 	bl	800fb50 <_Bfree>
 800f402:	e7d0      	b.n	800f3a6 <_dtoa_r+0x65e>
 800f404:	9704      	str	r7, [sp, #16]
 800f406:	4633      	mov	r3, r6
 800f408:	461e      	mov	r6, r3
 800f40a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f40e:	2a39      	cmp	r2, #57	@ 0x39
 800f410:	d107      	bne.n	800f422 <_dtoa_r+0x6da>
 800f412:	459a      	cmp	sl, r3
 800f414:	d1f8      	bne.n	800f408 <_dtoa_r+0x6c0>
 800f416:	9a04      	ldr	r2, [sp, #16]
 800f418:	3201      	adds	r2, #1
 800f41a:	9204      	str	r2, [sp, #16]
 800f41c:	2230      	movs	r2, #48	@ 0x30
 800f41e:	f88a 2000 	strb.w	r2, [sl]
 800f422:	781a      	ldrb	r2, [r3, #0]
 800f424:	3201      	adds	r2, #1
 800f426:	701a      	strb	r2, [r3, #0]
 800f428:	e7bd      	b.n	800f3a6 <_dtoa_r+0x65e>
 800f42a:	4b7b      	ldr	r3, [pc, #492]	@ (800f618 <_dtoa_r+0x8d0>)
 800f42c:	2200      	movs	r2, #0
 800f42e:	f7f1 f8eb 	bl	8000608 <__aeabi_dmul>
 800f432:	2200      	movs	r2, #0
 800f434:	2300      	movs	r3, #0
 800f436:	4604      	mov	r4, r0
 800f438:	460d      	mov	r5, r1
 800f43a:	f7f1 fb4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800f43e:	2800      	cmp	r0, #0
 800f440:	f43f aebb 	beq.w	800f1ba <_dtoa_r+0x472>
 800f444:	e6f0      	b.n	800f228 <_dtoa_r+0x4e0>
 800f446:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f448:	2a00      	cmp	r2, #0
 800f44a:	f000 80db 	beq.w	800f604 <_dtoa_r+0x8bc>
 800f44e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f450:	2a01      	cmp	r2, #1
 800f452:	f300 80bf 	bgt.w	800f5d4 <_dtoa_r+0x88c>
 800f456:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f458:	2a00      	cmp	r2, #0
 800f45a:	f000 80b7 	beq.w	800f5cc <_dtoa_r+0x884>
 800f45e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f462:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f464:	4646      	mov	r6, r8
 800f466:	9a08      	ldr	r2, [sp, #32]
 800f468:	2101      	movs	r1, #1
 800f46a:	441a      	add	r2, r3
 800f46c:	4658      	mov	r0, fp
 800f46e:	4498      	add	r8, r3
 800f470:	9208      	str	r2, [sp, #32]
 800f472:	f000 fc6b 	bl	800fd4c <__i2b>
 800f476:	4605      	mov	r5, r0
 800f478:	b15e      	cbz	r6, 800f492 <_dtoa_r+0x74a>
 800f47a:	9b08      	ldr	r3, [sp, #32]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	dd08      	ble.n	800f492 <_dtoa_r+0x74a>
 800f480:	42b3      	cmp	r3, r6
 800f482:	9a08      	ldr	r2, [sp, #32]
 800f484:	bfa8      	it	ge
 800f486:	4633      	movge	r3, r6
 800f488:	eba8 0803 	sub.w	r8, r8, r3
 800f48c:	1af6      	subs	r6, r6, r3
 800f48e:	1ad3      	subs	r3, r2, r3
 800f490:	9308      	str	r3, [sp, #32]
 800f492:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f494:	b1f3      	cbz	r3, 800f4d4 <_dtoa_r+0x78c>
 800f496:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f498:	2b00      	cmp	r3, #0
 800f49a:	f000 80b7 	beq.w	800f60c <_dtoa_r+0x8c4>
 800f49e:	b18c      	cbz	r4, 800f4c4 <_dtoa_r+0x77c>
 800f4a0:	4629      	mov	r1, r5
 800f4a2:	4622      	mov	r2, r4
 800f4a4:	4658      	mov	r0, fp
 800f4a6:	f000 fd11 	bl	800fecc <__pow5mult>
 800f4aa:	464a      	mov	r2, r9
 800f4ac:	4601      	mov	r1, r0
 800f4ae:	4605      	mov	r5, r0
 800f4b0:	4658      	mov	r0, fp
 800f4b2:	f000 fc61 	bl	800fd78 <__multiply>
 800f4b6:	4649      	mov	r1, r9
 800f4b8:	9004      	str	r0, [sp, #16]
 800f4ba:	4658      	mov	r0, fp
 800f4bc:	f000 fb48 	bl	800fb50 <_Bfree>
 800f4c0:	9b04      	ldr	r3, [sp, #16]
 800f4c2:	4699      	mov	r9, r3
 800f4c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f4c6:	1b1a      	subs	r2, r3, r4
 800f4c8:	d004      	beq.n	800f4d4 <_dtoa_r+0x78c>
 800f4ca:	4649      	mov	r1, r9
 800f4cc:	4658      	mov	r0, fp
 800f4ce:	f000 fcfd 	bl	800fecc <__pow5mult>
 800f4d2:	4681      	mov	r9, r0
 800f4d4:	2101      	movs	r1, #1
 800f4d6:	4658      	mov	r0, fp
 800f4d8:	f000 fc38 	bl	800fd4c <__i2b>
 800f4dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4de:	4604      	mov	r4, r0
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	f000 81cf 	beq.w	800f884 <_dtoa_r+0xb3c>
 800f4e6:	461a      	mov	r2, r3
 800f4e8:	4601      	mov	r1, r0
 800f4ea:	4658      	mov	r0, fp
 800f4ec:	f000 fcee 	bl	800fecc <__pow5mult>
 800f4f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4f2:	2b01      	cmp	r3, #1
 800f4f4:	4604      	mov	r4, r0
 800f4f6:	f300 8095 	bgt.w	800f624 <_dtoa_r+0x8dc>
 800f4fa:	9b02      	ldr	r3, [sp, #8]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	f040 8087 	bne.w	800f610 <_dtoa_r+0x8c8>
 800f502:	9b03      	ldr	r3, [sp, #12]
 800f504:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f508:	2b00      	cmp	r3, #0
 800f50a:	f040 8089 	bne.w	800f620 <_dtoa_r+0x8d8>
 800f50e:	9b03      	ldr	r3, [sp, #12]
 800f510:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f514:	0d1b      	lsrs	r3, r3, #20
 800f516:	051b      	lsls	r3, r3, #20
 800f518:	b12b      	cbz	r3, 800f526 <_dtoa_r+0x7de>
 800f51a:	9b08      	ldr	r3, [sp, #32]
 800f51c:	3301      	adds	r3, #1
 800f51e:	9308      	str	r3, [sp, #32]
 800f520:	f108 0801 	add.w	r8, r8, #1
 800f524:	2301      	movs	r3, #1
 800f526:	930a      	str	r3, [sp, #40]	@ 0x28
 800f528:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	f000 81b0 	beq.w	800f890 <_dtoa_r+0xb48>
 800f530:	6923      	ldr	r3, [r4, #16]
 800f532:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f536:	6918      	ldr	r0, [r3, #16]
 800f538:	f000 fbbc 	bl	800fcb4 <__hi0bits>
 800f53c:	f1c0 0020 	rsb	r0, r0, #32
 800f540:	9b08      	ldr	r3, [sp, #32]
 800f542:	4418      	add	r0, r3
 800f544:	f010 001f 	ands.w	r0, r0, #31
 800f548:	d077      	beq.n	800f63a <_dtoa_r+0x8f2>
 800f54a:	f1c0 0320 	rsb	r3, r0, #32
 800f54e:	2b04      	cmp	r3, #4
 800f550:	dd6b      	ble.n	800f62a <_dtoa_r+0x8e2>
 800f552:	9b08      	ldr	r3, [sp, #32]
 800f554:	f1c0 001c 	rsb	r0, r0, #28
 800f558:	4403      	add	r3, r0
 800f55a:	4480      	add	r8, r0
 800f55c:	4406      	add	r6, r0
 800f55e:	9308      	str	r3, [sp, #32]
 800f560:	f1b8 0f00 	cmp.w	r8, #0
 800f564:	dd05      	ble.n	800f572 <_dtoa_r+0x82a>
 800f566:	4649      	mov	r1, r9
 800f568:	4642      	mov	r2, r8
 800f56a:	4658      	mov	r0, fp
 800f56c:	f000 fd08 	bl	800ff80 <__lshift>
 800f570:	4681      	mov	r9, r0
 800f572:	9b08      	ldr	r3, [sp, #32]
 800f574:	2b00      	cmp	r3, #0
 800f576:	dd05      	ble.n	800f584 <_dtoa_r+0x83c>
 800f578:	4621      	mov	r1, r4
 800f57a:	461a      	mov	r2, r3
 800f57c:	4658      	mov	r0, fp
 800f57e:	f000 fcff 	bl	800ff80 <__lshift>
 800f582:	4604      	mov	r4, r0
 800f584:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f586:	2b00      	cmp	r3, #0
 800f588:	d059      	beq.n	800f63e <_dtoa_r+0x8f6>
 800f58a:	4621      	mov	r1, r4
 800f58c:	4648      	mov	r0, r9
 800f58e:	f000 fd63 	bl	8010058 <__mcmp>
 800f592:	2800      	cmp	r0, #0
 800f594:	da53      	bge.n	800f63e <_dtoa_r+0x8f6>
 800f596:	1e7b      	subs	r3, r7, #1
 800f598:	9304      	str	r3, [sp, #16]
 800f59a:	4649      	mov	r1, r9
 800f59c:	2300      	movs	r3, #0
 800f59e:	220a      	movs	r2, #10
 800f5a0:	4658      	mov	r0, fp
 800f5a2:	f000 faf7 	bl	800fb94 <__multadd>
 800f5a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f5a8:	4681      	mov	r9, r0
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	f000 8172 	beq.w	800f894 <_dtoa_r+0xb4c>
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	4629      	mov	r1, r5
 800f5b4:	220a      	movs	r2, #10
 800f5b6:	4658      	mov	r0, fp
 800f5b8:	f000 faec 	bl	800fb94 <__multadd>
 800f5bc:	9b00      	ldr	r3, [sp, #0]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	4605      	mov	r5, r0
 800f5c2:	dc67      	bgt.n	800f694 <_dtoa_r+0x94c>
 800f5c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5c6:	2b02      	cmp	r3, #2
 800f5c8:	dc41      	bgt.n	800f64e <_dtoa_r+0x906>
 800f5ca:	e063      	b.n	800f694 <_dtoa_r+0x94c>
 800f5cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f5ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f5d2:	e746      	b.n	800f462 <_dtoa_r+0x71a>
 800f5d4:	9b07      	ldr	r3, [sp, #28]
 800f5d6:	1e5c      	subs	r4, r3, #1
 800f5d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5da:	42a3      	cmp	r3, r4
 800f5dc:	bfbf      	itttt	lt
 800f5de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f5e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f5e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f5e4:	1ae3      	sublt	r3, r4, r3
 800f5e6:	bfb4      	ite	lt
 800f5e8:	18d2      	addlt	r2, r2, r3
 800f5ea:	1b1c      	subge	r4, r3, r4
 800f5ec:	9b07      	ldr	r3, [sp, #28]
 800f5ee:	bfbc      	itt	lt
 800f5f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f5f2:	2400      	movlt	r4, #0
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	bfb5      	itete	lt
 800f5f8:	eba8 0603 	sublt.w	r6, r8, r3
 800f5fc:	9b07      	ldrge	r3, [sp, #28]
 800f5fe:	2300      	movlt	r3, #0
 800f600:	4646      	movge	r6, r8
 800f602:	e730      	b.n	800f466 <_dtoa_r+0x71e>
 800f604:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f606:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f608:	4646      	mov	r6, r8
 800f60a:	e735      	b.n	800f478 <_dtoa_r+0x730>
 800f60c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f60e:	e75c      	b.n	800f4ca <_dtoa_r+0x782>
 800f610:	2300      	movs	r3, #0
 800f612:	e788      	b.n	800f526 <_dtoa_r+0x7de>
 800f614:	3fe00000 	.word	0x3fe00000
 800f618:	40240000 	.word	0x40240000
 800f61c:	40140000 	.word	0x40140000
 800f620:	9b02      	ldr	r3, [sp, #8]
 800f622:	e780      	b.n	800f526 <_dtoa_r+0x7de>
 800f624:	2300      	movs	r3, #0
 800f626:	930a      	str	r3, [sp, #40]	@ 0x28
 800f628:	e782      	b.n	800f530 <_dtoa_r+0x7e8>
 800f62a:	d099      	beq.n	800f560 <_dtoa_r+0x818>
 800f62c:	9a08      	ldr	r2, [sp, #32]
 800f62e:	331c      	adds	r3, #28
 800f630:	441a      	add	r2, r3
 800f632:	4498      	add	r8, r3
 800f634:	441e      	add	r6, r3
 800f636:	9208      	str	r2, [sp, #32]
 800f638:	e792      	b.n	800f560 <_dtoa_r+0x818>
 800f63a:	4603      	mov	r3, r0
 800f63c:	e7f6      	b.n	800f62c <_dtoa_r+0x8e4>
 800f63e:	9b07      	ldr	r3, [sp, #28]
 800f640:	9704      	str	r7, [sp, #16]
 800f642:	2b00      	cmp	r3, #0
 800f644:	dc20      	bgt.n	800f688 <_dtoa_r+0x940>
 800f646:	9300      	str	r3, [sp, #0]
 800f648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f64a:	2b02      	cmp	r3, #2
 800f64c:	dd1e      	ble.n	800f68c <_dtoa_r+0x944>
 800f64e:	9b00      	ldr	r3, [sp, #0]
 800f650:	2b00      	cmp	r3, #0
 800f652:	f47f aec0 	bne.w	800f3d6 <_dtoa_r+0x68e>
 800f656:	4621      	mov	r1, r4
 800f658:	2205      	movs	r2, #5
 800f65a:	4658      	mov	r0, fp
 800f65c:	f000 fa9a 	bl	800fb94 <__multadd>
 800f660:	4601      	mov	r1, r0
 800f662:	4604      	mov	r4, r0
 800f664:	4648      	mov	r0, r9
 800f666:	f000 fcf7 	bl	8010058 <__mcmp>
 800f66a:	2800      	cmp	r0, #0
 800f66c:	f77f aeb3 	ble.w	800f3d6 <_dtoa_r+0x68e>
 800f670:	4656      	mov	r6, sl
 800f672:	2331      	movs	r3, #49	@ 0x31
 800f674:	f806 3b01 	strb.w	r3, [r6], #1
 800f678:	9b04      	ldr	r3, [sp, #16]
 800f67a:	3301      	adds	r3, #1
 800f67c:	9304      	str	r3, [sp, #16]
 800f67e:	e6ae      	b.n	800f3de <_dtoa_r+0x696>
 800f680:	9c07      	ldr	r4, [sp, #28]
 800f682:	9704      	str	r7, [sp, #16]
 800f684:	4625      	mov	r5, r4
 800f686:	e7f3      	b.n	800f670 <_dtoa_r+0x928>
 800f688:	9b07      	ldr	r3, [sp, #28]
 800f68a:	9300      	str	r3, [sp, #0]
 800f68c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f68e:	2b00      	cmp	r3, #0
 800f690:	f000 8104 	beq.w	800f89c <_dtoa_r+0xb54>
 800f694:	2e00      	cmp	r6, #0
 800f696:	dd05      	ble.n	800f6a4 <_dtoa_r+0x95c>
 800f698:	4629      	mov	r1, r5
 800f69a:	4632      	mov	r2, r6
 800f69c:	4658      	mov	r0, fp
 800f69e:	f000 fc6f 	bl	800ff80 <__lshift>
 800f6a2:	4605      	mov	r5, r0
 800f6a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d05a      	beq.n	800f760 <_dtoa_r+0xa18>
 800f6aa:	6869      	ldr	r1, [r5, #4]
 800f6ac:	4658      	mov	r0, fp
 800f6ae:	f000 fa0f 	bl	800fad0 <_Balloc>
 800f6b2:	4606      	mov	r6, r0
 800f6b4:	b928      	cbnz	r0, 800f6c2 <_dtoa_r+0x97a>
 800f6b6:	4b84      	ldr	r3, [pc, #528]	@ (800f8c8 <_dtoa_r+0xb80>)
 800f6b8:	4602      	mov	r2, r0
 800f6ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f6be:	f7ff bb5a 	b.w	800ed76 <_dtoa_r+0x2e>
 800f6c2:	692a      	ldr	r2, [r5, #16]
 800f6c4:	3202      	adds	r2, #2
 800f6c6:	0092      	lsls	r2, r2, #2
 800f6c8:	f105 010c 	add.w	r1, r5, #12
 800f6cc:	300c      	adds	r0, #12
 800f6ce:	f7ff fa9c 	bl	800ec0a <memcpy>
 800f6d2:	2201      	movs	r2, #1
 800f6d4:	4631      	mov	r1, r6
 800f6d6:	4658      	mov	r0, fp
 800f6d8:	f000 fc52 	bl	800ff80 <__lshift>
 800f6dc:	f10a 0301 	add.w	r3, sl, #1
 800f6e0:	9307      	str	r3, [sp, #28]
 800f6e2:	9b00      	ldr	r3, [sp, #0]
 800f6e4:	4453      	add	r3, sl
 800f6e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f6e8:	9b02      	ldr	r3, [sp, #8]
 800f6ea:	f003 0301 	and.w	r3, r3, #1
 800f6ee:	462f      	mov	r7, r5
 800f6f0:	930a      	str	r3, [sp, #40]	@ 0x28
 800f6f2:	4605      	mov	r5, r0
 800f6f4:	9b07      	ldr	r3, [sp, #28]
 800f6f6:	4621      	mov	r1, r4
 800f6f8:	3b01      	subs	r3, #1
 800f6fa:	4648      	mov	r0, r9
 800f6fc:	9300      	str	r3, [sp, #0]
 800f6fe:	f7ff fa99 	bl	800ec34 <quorem>
 800f702:	4639      	mov	r1, r7
 800f704:	9002      	str	r0, [sp, #8]
 800f706:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f70a:	4648      	mov	r0, r9
 800f70c:	f000 fca4 	bl	8010058 <__mcmp>
 800f710:	462a      	mov	r2, r5
 800f712:	9008      	str	r0, [sp, #32]
 800f714:	4621      	mov	r1, r4
 800f716:	4658      	mov	r0, fp
 800f718:	f000 fcba 	bl	8010090 <__mdiff>
 800f71c:	68c2      	ldr	r2, [r0, #12]
 800f71e:	4606      	mov	r6, r0
 800f720:	bb02      	cbnz	r2, 800f764 <_dtoa_r+0xa1c>
 800f722:	4601      	mov	r1, r0
 800f724:	4648      	mov	r0, r9
 800f726:	f000 fc97 	bl	8010058 <__mcmp>
 800f72a:	4602      	mov	r2, r0
 800f72c:	4631      	mov	r1, r6
 800f72e:	4658      	mov	r0, fp
 800f730:	920e      	str	r2, [sp, #56]	@ 0x38
 800f732:	f000 fa0d 	bl	800fb50 <_Bfree>
 800f736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f738:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f73a:	9e07      	ldr	r6, [sp, #28]
 800f73c:	ea43 0102 	orr.w	r1, r3, r2
 800f740:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f742:	4319      	orrs	r1, r3
 800f744:	d110      	bne.n	800f768 <_dtoa_r+0xa20>
 800f746:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f74a:	d029      	beq.n	800f7a0 <_dtoa_r+0xa58>
 800f74c:	9b08      	ldr	r3, [sp, #32]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	dd02      	ble.n	800f758 <_dtoa_r+0xa10>
 800f752:	9b02      	ldr	r3, [sp, #8]
 800f754:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f758:	9b00      	ldr	r3, [sp, #0]
 800f75a:	f883 8000 	strb.w	r8, [r3]
 800f75e:	e63f      	b.n	800f3e0 <_dtoa_r+0x698>
 800f760:	4628      	mov	r0, r5
 800f762:	e7bb      	b.n	800f6dc <_dtoa_r+0x994>
 800f764:	2201      	movs	r2, #1
 800f766:	e7e1      	b.n	800f72c <_dtoa_r+0x9e4>
 800f768:	9b08      	ldr	r3, [sp, #32]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	db04      	blt.n	800f778 <_dtoa_r+0xa30>
 800f76e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f770:	430b      	orrs	r3, r1
 800f772:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f774:	430b      	orrs	r3, r1
 800f776:	d120      	bne.n	800f7ba <_dtoa_r+0xa72>
 800f778:	2a00      	cmp	r2, #0
 800f77a:	dded      	ble.n	800f758 <_dtoa_r+0xa10>
 800f77c:	4649      	mov	r1, r9
 800f77e:	2201      	movs	r2, #1
 800f780:	4658      	mov	r0, fp
 800f782:	f000 fbfd 	bl	800ff80 <__lshift>
 800f786:	4621      	mov	r1, r4
 800f788:	4681      	mov	r9, r0
 800f78a:	f000 fc65 	bl	8010058 <__mcmp>
 800f78e:	2800      	cmp	r0, #0
 800f790:	dc03      	bgt.n	800f79a <_dtoa_r+0xa52>
 800f792:	d1e1      	bne.n	800f758 <_dtoa_r+0xa10>
 800f794:	f018 0f01 	tst.w	r8, #1
 800f798:	d0de      	beq.n	800f758 <_dtoa_r+0xa10>
 800f79a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f79e:	d1d8      	bne.n	800f752 <_dtoa_r+0xa0a>
 800f7a0:	9a00      	ldr	r2, [sp, #0]
 800f7a2:	2339      	movs	r3, #57	@ 0x39
 800f7a4:	7013      	strb	r3, [r2, #0]
 800f7a6:	4633      	mov	r3, r6
 800f7a8:	461e      	mov	r6, r3
 800f7aa:	3b01      	subs	r3, #1
 800f7ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f7b0:	2a39      	cmp	r2, #57	@ 0x39
 800f7b2:	d052      	beq.n	800f85a <_dtoa_r+0xb12>
 800f7b4:	3201      	adds	r2, #1
 800f7b6:	701a      	strb	r2, [r3, #0]
 800f7b8:	e612      	b.n	800f3e0 <_dtoa_r+0x698>
 800f7ba:	2a00      	cmp	r2, #0
 800f7bc:	dd07      	ble.n	800f7ce <_dtoa_r+0xa86>
 800f7be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f7c2:	d0ed      	beq.n	800f7a0 <_dtoa_r+0xa58>
 800f7c4:	9a00      	ldr	r2, [sp, #0]
 800f7c6:	f108 0301 	add.w	r3, r8, #1
 800f7ca:	7013      	strb	r3, [r2, #0]
 800f7cc:	e608      	b.n	800f3e0 <_dtoa_r+0x698>
 800f7ce:	9b07      	ldr	r3, [sp, #28]
 800f7d0:	9a07      	ldr	r2, [sp, #28]
 800f7d2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f7d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f7d8:	4293      	cmp	r3, r2
 800f7da:	d028      	beq.n	800f82e <_dtoa_r+0xae6>
 800f7dc:	4649      	mov	r1, r9
 800f7de:	2300      	movs	r3, #0
 800f7e0:	220a      	movs	r2, #10
 800f7e2:	4658      	mov	r0, fp
 800f7e4:	f000 f9d6 	bl	800fb94 <__multadd>
 800f7e8:	42af      	cmp	r7, r5
 800f7ea:	4681      	mov	r9, r0
 800f7ec:	f04f 0300 	mov.w	r3, #0
 800f7f0:	f04f 020a 	mov.w	r2, #10
 800f7f4:	4639      	mov	r1, r7
 800f7f6:	4658      	mov	r0, fp
 800f7f8:	d107      	bne.n	800f80a <_dtoa_r+0xac2>
 800f7fa:	f000 f9cb 	bl	800fb94 <__multadd>
 800f7fe:	4607      	mov	r7, r0
 800f800:	4605      	mov	r5, r0
 800f802:	9b07      	ldr	r3, [sp, #28]
 800f804:	3301      	adds	r3, #1
 800f806:	9307      	str	r3, [sp, #28]
 800f808:	e774      	b.n	800f6f4 <_dtoa_r+0x9ac>
 800f80a:	f000 f9c3 	bl	800fb94 <__multadd>
 800f80e:	4629      	mov	r1, r5
 800f810:	4607      	mov	r7, r0
 800f812:	2300      	movs	r3, #0
 800f814:	220a      	movs	r2, #10
 800f816:	4658      	mov	r0, fp
 800f818:	f000 f9bc 	bl	800fb94 <__multadd>
 800f81c:	4605      	mov	r5, r0
 800f81e:	e7f0      	b.n	800f802 <_dtoa_r+0xaba>
 800f820:	9b00      	ldr	r3, [sp, #0]
 800f822:	2b00      	cmp	r3, #0
 800f824:	bfcc      	ite	gt
 800f826:	461e      	movgt	r6, r3
 800f828:	2601      	movle	r6, #1
 800f82a:	4456      	add	r6, sl
 800f82c:	2700      	movs	r7, #0
 800f82e:	4649      	mov	r1, r9
 800f830:	2201      	movs	r2, #1
 800f832:	4658      	mov	r0, fp
 800f834:	f000 fba4 	bl	800ff80 <__lshift>
 800f838:	4621      	mov	r1, r4
 800f83a:	4681      	mov	r9, r0
 800f83c:	f000 fc0c 	bl	8010058 <__mcmp>
 800f840:	2800      	cmp	r0, #0
 800f842:	dcb0      	bgt.n	800f7a6 <_dtoa_r+0xa5e>
 800f844:	d102      	bne.n	800f84c <_dtoa_r+0xb04>
 800f846:	f018 0f01 	tst.w	r8, #1
 800f84a:	d1ac      	bne.n	800f7a6 <_dtoa_r+0xa5e>
 800f84c:	4633      	mov	r3, r6
 800f84e:	461e      	mov	r6, r3
 800f850:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f854:	2a30      	cmp	r2, #48	@ 0x30
 800f856:	d0fa      	beq.n	800f84e <_dtoa_r+0xb06>
 800f858:	e5c2      	b.n	800f3e0 <_dtoa_r+0x698>
 800f85a:	459a      	cmp	sl, r3
 800f85c:	d1a4      	bne.n	800f7a8 <_dtoa_r+0xa60>
 800f85e:	9b04      	ldr	r3, [sp, #16]
 800f860:	3301      	adds	r3, #1
 800f862:	9304      	str	r3, [sp, #16]
 800f864:	2331      	movs	r3, #49	@ 0x31
 800f866:	f88a 3000 	strb.w	r3, [sl]
 800f86a:	e5b9      	b.n	800f3e0 <_dtoa_r+0x698>
 800f86c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f86e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f8cc <_dtoa_r+0xb84>
 800f872:	b11b      	cbz	r3, 800f87c <_dtoa_r+0xb34>
 800f874:	f10a 0308 	add.w	r3, sl, #8
 800f878:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f87a:	6013      	str	r3, [r2, #0]
 800f87c:	4650      	mov	r0, sl
 800f87e:	b019      	add	sp, #100	@ 0x64
 800f880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f886:	2b01      	cmp	r3, #1
 800f888:	f77f ae37 	ble.w	800f4fa <_dtoa_r+0x7b2>
 800f88c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f88e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f890:	2001      	movs	r0, #1
 800f892:	e655      	b.n	800f540 <_dtoa_r+0x7f8>
 800f894:	9b00      	ldr	r3, [sp, #0]
 800f896:	2b00      	cmp	r3, #0
 800f898:	f77f aed6 	ble.w	800f648 <_dtoa_r+0x900>
 800f89c:	4656      	mov	r6, sl
 800f89e:	4621      	mov	r1, r4
 800f8a0:	4648      	mov	r0, r9
 800f8a2:	f7ff f9c7 	bl	800ec34 <quorem>
 800f8a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f8aa:	f806 8b01 	strb.w	r8, [r6], #1
 800f8ae:	9b00      	ldr	r3, [sp, #0]
 800f8b0:	eba6 020a 	sub.w	r2, r6, sl
 800f8b4:	4293      	cmp	r3, r2
 800f8b6:	ddb3      	ble.n	800f820 <_dtoa_r+0xad8>
 800f8b8:	4649      	mov	r1, r9
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	220a      	movs	r2, #10
 800f8be:	4658      	mov	r0, fp
 800f8c0:	f000 f968 	bl	800fb94 <__multadd>
 800f8c4:	4681      	mov	r9, r0
 800f8c6:	e7ea      	b.n	800f89e <_dtoa_r+0xb56>
 800f8c8:	08013e47 	.word	0x08013e47
 800f8cc:	08013dcb 	.word	0x08013dcb

0800f8d0 <_free_r>:
 800f8d0:	b538      	push	{r3, r4, r5, lr}
 800f8d2:	4605      	mov	r5, r0
 800f8d4:	2900      	cmp	r1, #0
 800f8d6:	d041      	beq.n	800f95c <_free_r+0x8c>
 800f8d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8dc:	1f0c      	subs	r4, r1, #4
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	bfb8      	it	lt
 800f8e2:	18e4      	addlt	r4, r4, r3
 800f8e4:	f000 f8e8 	bl	800fab8 <__malloc_lock>
 800f8e8:	4a1d      	ldr	r2, [pc, #116]	@ (800f960 <_free_r+0x90>)
 800f8ea:	6813      	ldr	r3, [r2, #0]
 800f8ec:	b933      	cbnz	r3, 800f8fc <_free_r+0x2c>
 800f8ee:	6063      	str	r3, [r4, #4]
 800f8f0:	6014      	str	r4, [r2, #0]
 800f8f2:	4628      	mov	r0, r5
 800f8f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8f8:	f000 b8e4 	b.w	800fac4 <__malloc_unlock>
 800f8fc:	42a3      	cmp	r3, r4
 800f8fe:	d908      	bls.n	800f912 <_free_r+0x42>
 800f900:	6820      	ldr	r0, [r4, #0]
 800f902:	1821      	adds	r1, r4, r0
 800f904:	428b      	cmp	r3, r1
 800f906:	bf01      	itttt	eq
 800f908:	6819      	ldreq	r1, [r3, #0]
 800f90a:	685b      	ldreq	r3, [r3, #4]
 800f90c:	1809      	addeq	r1, r1, r0
 800f90e:	6021      	streq	r1, [r4, #0]
 800f910:	e7ed      	b.n	800f8ee <_free_r+0x1e>
 800f912:	461a      	mov	r2, r3
 800f914:	685b      	ldr	r3, [r3, #4]
 800f916:	b10b      	cbz	r3, 800f91c <_free_r+0x4c>
 800f918:	42a3      	cmp	r3, r4
 800f91a:	d9fa      	bls.n	800f912 <_free_r+0x42>
 800f91c:	6811      	ldr	r1, [r2, #0]
 800f91e:	1850      	adds	r0, r2, r1
 800f920:	42a0      	cmp	r0, r4
 800f922:	d10b      	bne.n	800f93c <_free_r+0x6c>
 800f924:	6820      	ldr	r0, [r4, #0]
 800f926:	4401      	add	r1, r0
 800f928:	1850      	adds	r0, r2, r1
 800f92a:	4283      	cmp	r3, r0
 800f92c:	6011      	str	r1, [r2, #0]
 800f92e:	d1e0      	bne.n	800f8f2 <_free_r+0x22>
 800f930:	6818      	ldr	r0, [r3, #0]
 800f932:	685b      	ldr	r3, [r3, #4]
 800f934:	6053      	str	r3, [r2, #4]
 800f936:	4408      	add	r0, r1
 800f938:	6010      	str	r0, [r2, #0]
 800f93a:	e7da      	b.n	800f8f2 <_free_r+0x22>
 800f93c:	d902      	bls.n	800f944 <_free_r+0x74>
 800f93e:	230c      	movs	r3, #12
 800f940:	602b      	str	r3, [r5, #0]
 800f942:	e7d6      	b.n	800f8f2 <_free_r+0x22>
 800f944:	6820      	ldr	r0, [r4, #0]
 800f946:	1821      	adds	r1, r4, r0
 800f948:	428b      	cmp	r3, r1
 800f94a:	bf04      	itt	eq
 800f94c:	6819      	ldreq	r1, [r3, #0]
 800f94e:	685b      	ldreq	r3, [r3, #4]
 800f950:	6063      	str	r3, [r4, #4]
 800f952:	bf04      	itt	eq
 800f954:	1809      	addeq	r1, r1, r0
 800f956:	6021      	streq	r1, [r4, #0]
 800f958:	6054      	str	r4, [r2, #4]
 800f95a:	e7ca      	b.n	800f8f2 <_free_r+0x22>
 800f95c:	bd38      	pop	{r3, r4, r5, pc}
 800f95e:	bf00      	nop
 800f960:	20002d1c 	.word	0x20002d1c

0800f964 <malloc>:
 800f964:	4b02      	ldr	r3, [pc, #8]	@ (800f970 <malloc+0xc>)
 800f966:	4601      	mov	r1, r0
 800f968:	6818      	ldr	r0, [r3, #0]
 800f96a:	f000 b825 	b.w	800f9b8 <_malloc_r>
 800f96e:	bf00      	nop
 800f970:	20000020 	.word	0x20000020

0800f974 <sbrk_aligned>:
 800f974:	b570      	push	{r4, r5, r6, lr}
 800f976:	4e0f      	ldr	r6, [pc, #60]	@ (800f9b4 <sbrk_aligned+0x40>)
 800f978:	460c      	mov	r4, r1
 800f97a:	6831      	ldr	r1, [r6, #0]
 800f97c:	4605      	mov	r5, r0
 800f97e:	b911      	cbnz	r1, 800f986 <sbrk_aligned+0x12>
 800f980:	f002 fb4e 	bl	8012020 <_sbrk_r>
 800f984:	6030      	str	r0, [r6, #0]
 800f986:	4621      	mov	r1, r4
 800f988:	4628      	mov	r0, r5
 800f98a:	f002 fb49 	bl	8012020 <_sbrk_r>
 800f98e:	1c43      	adds	r3, r0, #1
 800f990:	d103      	bne.n	800f99a <sbrk_aligned+0x26>
 800f992:	f04f 34ff 	mov.w	r4, #4294967295
 800f996:	4620      	mov	r0, r4
 800f998:	bd70      	pop	{r4, r5, r6, pc}
 800f99a:	1cc4      	adds	r4, r0, #3
 800f99c:	f024 0403 	bic.w	r4, r4, #3
 800f9a0:	42a0      	cmp	r0, r4
 800f9a2:	d0f8      	beq.n	800f996 <sbrk_aligned+0x22>
 800f9a4:	1a21      	subs	r1, r4, r0
 800f9a6:	4628      	mov	r0, r5
 800f9a8:	f002 fb3a 	bl	8012020 <_sbrk_r>
 800f9ac:	3001      	adds	r0, #1
 800f9ae:	d1f2      	bne.n	800f996 <sbrk_aligned+0x22>
 800f9b0:	e7ef      	b.n	800f992 <sbrk_aligned+0x1e>
 800f9b2:	bf00      	nop
 800f9b4:	20002d18 	.word	0x20002d18

0800f9b8 <_malloc_r>:
 800f9b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9bc:	1ccd      	adds	r5, r1, #3
 800f9be:	f025 0503 	bic.w	r5, r5, #3
 800f9c2:	3508      	adds	r5, #8
 800f9c4:	2d0c      	cmp	r5, #12
 800f9c6:	bf38      	it	cc
 800f9c8:	250c      	movcc	r5, #12
 800f9ca:	2d00      	cmp	r5, #0
 800f9cc:	4606      	mov	r6, r0
 800f9ce:	db01      	blt.n	800f9d4 <_malloc_r+0x1c>
 800f9d0:	42a9      	cmp	r1, r5
 800f9d2:	d904      	bls.n	800f9de <_malloc_r+0x26>
 800f9d4:	230c      	movs	r3, #12
 800f9d6:	6033      	str	r3, [r6, #0]
 800f9d8:	2000      	movs	r0, #0
 800f9da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fab4 <_malloc_r+0xfc>
 800f9e2:	f000 f869 	bl	800fab8 <__malloc_lock>
 800f9e6:	f8d8 3000 	ldr.w	r3, [r8]
 800f9ea:	461c      	mov	r4, r3
 800f9ec:	bb44      	cbnz	r4, 800fa40 <_malloc_r+0x88>
 800f9ee:	4629      	mov	r1, r5
 800f9f0:	4630      	mov	r0, r6
 800f9f2:	f7ff ffbf 	bl	800f974 <sbrk_aligned>
 800f9f6:	1c43      	adds	r3, r0, #1
 800f9f8:	4604      	mov	r4, r0
 800f9fa:	d158      	bne.n	800faae <_malloc_r+0xf6>
 800f9fc:	f8d8 4000 	ldr.w	r4, [r8]
 800fa00:	4627      	mov	r7, r4
 800fa02:	2f00      	cmp	r7, #0
 800fa04:	d143      	bne.n	800fa8e <_malloc_r+0xd6>
 800fa06:	2c00      	cmp	r4, #0
 800fa08:	d04b      	beq.n	800faa2 <_malloc_r+0xea>
 800fa0a:	6823      	ldr	r3, [r4, #0]
 800fa0c:	4639      	mov	r1, r7
 800fa0e:	4630      	mov	r0, r6
 800fa10:	eb04 0903 	add.w	r9, r4, r3
 800fa14:	f002 fb04 	bl	8012020 <_sbrk_r>
 800fa18:	4581      	cmp	r9, r0
 800fa1a:	d142      	bne.n	800faa2 <_malloc_r+0xea>
 800fa1c:	6821      	ldr	r1, [r4, #0]
 800fa1e:	1a6d      	subs	r5, r5, r1
 800fa20:	4629      	mov	r1, r5
 800fa22:	4630      	mov	r0, r6
 800fa24:	f7ff ffa6 	bl	800f974 <sbrk_aligned>
 800fa28:	3001      	adds	r0, #1
 800fa2a:	d03a      	beq.n	800faa2 <_malloc_r+0xea>
 800fa2c:	6823      	ldr	r3, [r4, #0]
 800fa2e:	442b      	add	r3, r5
 800fa30:	6023      	str	r3, [r4, #0]
 800fa32:	f8d8 3000 	ldr.w	r3, [r8]
 800fa36:	685a      	ldr	r2, [r3, #4]
 800fa38:	bb62      	cbnz	r2, 800fa94 <_malloc_r+0xdc>
 800fa3a:	f8c8 7000 	str.w	r7, [r8]
 800fa3e:	e00f      	b.n	800fa60 <_malloc_r+0xa8>
 800fa40:	6822      	ldr	r2, [r4, #0]
 800fa42:	1b52      	subs	r2, r2, r5
 800fa44:	d420      	bmi.n	800fa88 <_malloc_r+0xd0>
 800fa46:	2a0b      	cmp	r2, #11
 800fa48:	d917      	bls.n	800fa7a <_malloc_r+0xc2>
 800fa4a:	1961      	adds	r1, r4, r5
 800fa4c:	42a3      	cmp	r3, r4
 800fa4e:	6025      	str	r5, [r4, #0]
 800fa50:	bf18      	it	ne
 800fa52:	6059      	strne	r1, [r3, #4]
 800fa54:	6863      	ldr	r3, [r4, #4]
 800fa56:	bf08      	it	eq
 800fa58:	f8c8 1000 	streq.w	r1, [r8]
 800fa5c:	5162      	str	r2, [r4, r5]
 800fa5e:	604b      	str	r3, [r1, #4]
 800fa60:	4630      	mov	r0, r6
 800fa62:	f000 f82f 	bl	800fac4 <__malloc_unlock>
 800fa66:	f104 000b 	add.w	r0, r4, #11
 800fa6a:	1d23      	adds	r3, r4, #4
 800fa6c:	f020 0007 	bic.w	r0, r0, #7
 800fa70:	1ac2      	subs	r2, r0, r3
 800fa72:	bf1c      	itt	ne
 800fa74:	1a1b      	subne	r3, r3, r0
 800fa76:	50a3      	strne	r3, [r4, r2]
 800fa78:	e7af      	b.n	800f9da <_malloc_r+0x22>
 800fa7a:	6862      	ldr	r2, [r4, #4]
 800fa7c:	42a3      	cmp	r3, r4
 800fa7e:	bf0c      	ite	eq
 800fa80:	f8c8 2000 	streq.w	r2, [r8]
 800fa84:	605a      	strne	r2, [r3, #4]
 800fa86:	e7eb      	b.n	800fa60 <_malloc_r+0xa8>
 800fa88:	4623      	mov	r3, r4
 800fa8a:	6864      	ldr	r4, [r4, #4]
 800fa8c:	e7ae      	b.n	800f9ec <_malloc_r+0x34>
 800fa8e:	463c      	mov	r4, r7
 800fa90:	687f      	ldr	r7, [r7, #4]
 800fa92:	e7b6      	b.n	800fa02 <_malloc_r+0x4a>
 800fa94:	461a      	mov	r2, r3
 800fa96:	685b      	ldr	r3, [r3, #4]
 800fa98:	42a3      	cmp	r3, r4
 800fa9a:	d1fb      	bne.n	800fa94 <_malloc_r+0xdc>
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	6053      	str	r3, [r2, #4]
 800faa0:	e7de      	b.n	800fa60 <_malloc_r+0xa8>
 800faa2:	230c      	movs	r3, #12
 800faa4:	6033      	str	r3, [r6, #0]
 800faa6:	4630      	mov	r0, r6
 800faa8:	f000 f80c 	bl	800fac4 <__malloc_unlock>
 800faac:	e794      	b.n	800f9d8 <_malloc_r+0x20>
 800faae:	6005      	str	r5, [r0, #0]
 800fab0:	e7d6      	b.n	800fa60 <_malloc_r+0xa8>
 800fab2:	bf00      	nop
 800fab4:	20002d1c 	.word	0x20002d1c

0800fab8 <__malloc_lock>:
 800fab8:	4801      	ldr	r0, [pc, #4]	@ (800fac0 <__malloc_lock+0x8>)
 800faba:	f7ff b8a4 	b.w	800ec06 <__retarget_lock_acquire_recursive>
 800fabe:	bf00      	nop
 800fac0:	20002d14 	.word	0x20002d14

0800fac4 <__malloc_unlock>:
 800fac4:	4801      	ldr	r0, [pc, #4]	@ (800facc <__malloc_unlock+0x8>)
 800fac6:	f7ff b89f 	b.w	800ec08 <__retarget_lock_release_recursive>
 800faca:	bf00      	nop
 800facc:	20002d14 	.word	0x20002d14

0800fad0 <_Balloc>:
 800fad0:	b570      	push	{r4, r5, r6, lr}
 800fad2:	69c6      	ldr	r6, [r0, #28]
 800fad4:	4604      	mov	r4, r0
 800fad6:	460d      	mov	r5, r1
 800fad8:	b976      	cbnz	r6, 800faf8 <_Balloc+0x28>
 800fada:	2010      	movs	r0, #16
 800fadc:	f7ff ff42 	bl	800f964 <malloc>
 800fae0:	4602      	mov	r2, r0
 800fae2:	61e0      	str	r0, [r4, #28]
 800fae4:	b920      	cbnz	r0, 800faf0 <_Balloc+0x20>
 800fae6:	4b18      	ldr	r3, [pc, #96]	@ (800fb48 <_Balloc+0x78>)
 800fae8:	4818      	ldr	r0, [pc, #96]	@ (800fb4c <_Balloc+0x7c>)
 800faea:	216b      	movs	r1, #107	@ 0x6b
 800faec:	f002 fab0 	bl	8012050 <__assert_func>
 800faf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800faf4:	6006      	str	r6, [r0, #0]
 800faf6:	60c6      	str	r6, [r0, #12]
 800faf8:	69e6      	ldr	r6, [r4, #28]
 800fafa:	68f3      	ldr	r3, [r6, #12]
 800fafc:	b183      	cbz	r3, 800fb20 <_Balloc+0x50>
 800fafe:	69e3      	ldr	r3, [r4, #28]
 800fb00:	68db      	ldr	r3, [r3, #12]
 800fb02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fb06:	b9b8      	cbnz	r0, 800fb38 <_Balloc+0x68>
 800fb08:	2101      	movs	r1, #1
 800fb0a:	fa01 f605 	lsl.w	r6, r1, r5
 800fb0e:	1d72      	adds	r2, r6, #5
 800fb10:	0092      	lsls	r2, r2, #2
 800fb12:	4620      	mov	r0, r4
 800fb14:	f002 faba 	bl	801208c <_calloc_r>
 800fb18:	b160      	cbz	r0, 800fb34 <_Balloc+0x64>
 800fb1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fb1e:	e00e      	b.n	800fb3e <_Balloc+0x6e>
 800fb20:	2221      	movs	r2, #33	@ 0x21
 800fb22:	2104      	movs	r1, #4
 800fb24:	4620      	mov	r0, r4
 800fb26:	f002 fab1 	bl	801208c <_calloc_r>
 800fb2a:	69e3      	ldr	r3, [r4, #28]
 800fb2c:	60f0      	str	r0, [r6, #12]
 800fb2e:	68db      	ldr	r3, [r3, #12]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d1e4      	bne.n	800fafe <_Balloc+0x2e>
 800fb34:	2000      	movs	r0, #0
 800fb36:	bd70      	pop	{r4, r5, r6, pc}
 800fb38:	6802      	ldr	r2, [r0, #0]
 800fb3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fb3e:	2300      	movs	r3, #0
 800fb40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fb44:	e7f7      	b.n	800fb36 <_Balloc+0x66>
 800fb46:	bf00      	nop
 800fb48:	08013dd8 	.word	0x08013dd8
 800fb4c:	08013e58 	.word	0x08013e58

0800fb50 <_Bfree>:
 800fb50:	b570      	push	{r4, r5, r6, lr}
 800fb52:	69c6      	ldr	r6, [r0, #28]
 800fb54:	4605      	mov	r5, r0
 800fb56:	460c      	mov	r4, r1
 800fb58:	b976      	cbnz	r6, 800fb78 <_Bfree+0x28>
 800fb5a:	2010      	movs	r0, #16
 800fb5c:	f7ff ff02 	bl	800f964 <malloc>
 800fb60:	4602      	mov	r2, r0
 800fb62:	61e8      	str	r0, [r5, #28]
 800fb64:	b920      	cbnz	r0, 800fb70 <_Bfree+0x20>
 800fb66:	4b09      	ldr	r3, [pc, #36]	@ (800fb8c <_Bfree+0x3c>)
 800fb68:	4809      	ldr	r0, [pc, #36]	@ (800fb90 <_Bfree+0x40>)
 800fb6a:	218f      	movs	r1, #143	@ 0x8f
 800fb6c:	f002 fa70 	bl	8012050 <__assert_func>
 800fb70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fb74:	6006      	str	r6, [r0, #0]
 800fb76:	60c6      	str	r6, [r0, #12]
 800fb78:	b13c      	cbz	r4, 800fb8a <_Bfree+0x3a>
 800fb7a:	69eb      	ldr	r3, [r5, #28]
 800fb7c:	6862      	ldr	r2, [r4, #4]
 800fb7e:	68db      	ldr	r3, [r3, #12]
 800fb80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fb84:	6021      	str	r1, [r4, #0]
 800fb86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fb8a:	bd70      	pop	{r4, r5, r6, pc}
 800fb8c:	08013dd8 	.word	0x08013dd8
 800fb90:	08013e58 	.word	0x08013e58

0800fb94 <__multadd>:
 800fb94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb98:	690d      	ldr	r5, [r1, #16]
 800fb9a:	4607      	mov	r7, r0
 800fb9c:	460c      	mov	r4, r1
 800fb9e:	461e      	mov	r6, r3
 800fba0:	f101 0c14 	add.w	ip, r1, #20
 800fba4:	2000      	movs	r0, #0
 800fba6:	f8dc 3000 	ldr.w	r3, [ip]
 800fbaa:	b299      	uxth	r1, r3
 800fbac:	fb02 6101 	mla	r1, r2, r1, r6
 800fbb0:	0c1e      	lsrs	r6, r3, #16
 800fbb2:	0c0b      	lsrs	r3, r1, #16
 800fbb4:	fb02 3306 	mla	r3, r2, r6, r3
 800fbb8:	b289      	uxth	r1, r1
 800fbba:	3001      	adds	r0, #1
 800fbbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fbc0:	4285      	cmp	r5, r0
 800fbc2:	f84c 1b04 	str.w	r1, [ip], #4
 800fbc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fbca:	dcec      	bgt.n	800fba6 <__multadd+0x12>
 800fbcc:	b30e      	cbz	r6, 800fc12 <__multadd+0x7e>
 800fbce:	68a3      	ldr	r3, [r4, #8]
 800fbd0:	42ab      	cmp	r3, r5
 800fbd2:	dc19      	bgt.n	800fc08 <__multadd+0x74>
 800fbd4:	6861      	ldr	r1, [r4, #4]
 800fbd6:	4638      	mov	r0, r7
 800fbd8:	3101      	adds	r1, #1
 800fbda:	f7ff ff79 	bl	800fad0 <_Balloc>
 800fbde:	4680      	mov	r8, r0
 800fbe0:	b928      	cbnz	r0, 800fbee <__multadd+0x5a>
 800fbe2:	4602      	mov	r2, r0
 800fbe4:	4b0c      	ldr	r3, [pc, #48]	@ (800fc18 <__multadd+0x84>)
 800fbe6:	480d      	ldr	r0, [pc, #52]	@ (800fc1c <__multadd+0x88>)
 800fbe8:	21ba      	movs	r1, #186	@ 0xba
 800fbea:	f002 fa31 	bl	8012050 <__assert_func>
 800fbee:	6922      	ldr	r2, [r4, #16]
 800fbf0:	3202      	adds	r2, #2
 800fbf2:	f104 010c 	add.w	r1, r4, #12
 800fbf6:	0092      	lsls	r2, r2, #2
 800fbf8:	300c      	adds	r0, #12
 800fbfa:	f7ff f806 	bl	800ec0a <memcpy>
 800fbfe:	4621      	mov	r1, r4
 800fc00:	4638      	mov	r0, r7
 800fc02:	f7ff ffa5 	bl	800fb50 <_Bfree>
 800fc06:	4644      	mov	r4, r8
 800fc08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fc0c:	3501      	adds	r5, #1
 800fc0e:	615e      	str	r6, [r3, #20]
 800fc10:	6125      	str	r5, [r4, #16]
 800fc12:	4620      	mov	r0, r4
 800fc14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc18:	08013e47 	.word	0x08013e47
 800fc1c:	08013e58 	.word	0x08013e58

0800fc20 <__s2b>:
 800fc20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc24:	460c      	mov	r4, r1
 800fc26:	4615      	mov	r5, r2
 800fc28:	461f      	mov	r7, r3
 800fc2a:	2209      	movs	r2, #9
 800fc2c:	3308      	adds	r3, #8
 800fc2e:	4606      	mov	r6, r0
 800fc30:	fb93 f3f2 	sdiv	r3, r3, r2
 800fc34:	2100      	movs	r1, #0
 800fc36:	2201      	movs	r2, #1
 800fc38:	429a      	cmp	r2, r3
 800fc3a:	db09      	blt.n	800fc50 <__s2b+0x30>
 800fc3c:	4630      	mov	r0, r6
 800fc3e:	f7ff ff47 	bl	800fad0 <_Balloc>
 800fc42:	b940      	cbnz	r0, 800fc56 <__s2b+0x36>
 800fc44:	4602      	mov	r2, r0
 800fc46:	4b19      	ldr	r3, [pc, #100]	@ (800fcac <__s2b+0x8c>)
 800fc48:	4819      	ldr	r0, [pc, #100]	@ (800fcb0 <__s2b+0x90>)
 800fc4a:	21d3      	movs	r1, #211	@ 0xd3
 800fc4c:	f002 fa00 	bl	8012050 <__assert_func>
 800fc50:	0052      	lsls	r2, r2, #1
 800fc52:	3101      	adds	r1, #1
 800fc54:	e7f0      	b.n	800fc38 <__s2b+0x18>
 800fc56:	9b08      	ldr	r3, [sp, #32]
 800fc58:	6143      	str	r3, [r0, #20]
 800fc5a:	2d09      	cmp	r5, #9
 800fc5c:	f04f 0301 	mov.w	r3, #1
 800fc60:	6103      	str	r3, [r0, #16]
 800fc62:	dd16      	ble.n	800fc92 <__s2b+0x72>
 800fc64:	f104 0909 	add.w	r9, r4, #9
 800fc68:	46c8      	mov	r8, r9
 800fc6a:	442c      	add	r4, r5
 800fc6c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fc70:	4601      	mov	r1, r0
 800fc72:	3b30      	subs	r3, #48	@ 0x30
 800fc74:	220a      	movs	r2, #10
 800fc76:	4630      	mov	r0, r6
 800fc78:	f7ff ff8c 	bl	800fb94 <__multadd>
 800fc7c:	45a0      	cmp	r8, r4
 800fc7e:	d1f5      	bne.n	800fc6c <__s2b+0x4c>
 800fc80:	f1a5 0408 	sub.w	r4, r5, #8
 800fc84:	444c      	add	r4, r9
 800fc86:	1b2d      	subs	r5, r5, r4
 800fc88:	1963      	adds	r3, r4, r5
 800fc8a:	42bb      	cmp	r3, r7
 800fc8c:	db04      	blt.n	800fc98 <__s2b+0x78>
 800fc8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc92:	340a      	adds	r4, #10
 800fc94:	2509      	movs	r5, #9
 800fc96:	e7f6      	b.n	800fc86 <__s2b+0x66>
 800fc98:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fc9c:	4601      	mov	r1, r0
 800fc9e:	3b30      	subs	r3, #48	@ 0x30
 800fca0:	220a      	movs	r2, #10
 800fca2:	4630      	mov	r0, r6
 800fca4:	f7ff ff76 	bl	800fb94 <__multadd>
 800fca8:	e7ee      	b.n	800fc88 <__s2b+0x68>
 800fcaa:	bf00      	nop
 800fcac:	08013e47 	.word	0x08013e47
 800fcb0:	08013e58 	.word	0x08013e58

0800fcb4 <__hi0bits>:
 800fcb4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fcb8:	4603      	mov	r3, r0
 800fcba:	bf36      	itet	cc
 800fcbc:	0403      	lslcc	r3, r0, #16
 800fcbe:	2000      	movcs	r0, #0
 800fcc0:	2010      	movcc	r0, #16
 800fcc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fcc6:	bf3c      	itt	cc
 800fcc8:	021b      	lslcc	r3, r3, #8
 800fcca:	3008      	addcc	r0, #8
 800fccc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fcd0:	bf3c      	itt	cc
 800fcd2:	011b      	lslcc	r3, r3, #4
 800fcd4:	3004      	addcc	r0, #4
 800fcd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fcda:	bf3c      	itt	cc
 800fcdc:	009b      	lslcc	r3, r3, #2
 800fcde:	3002      	addcc	r0, #2
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	db05      	blt.n	800fcf0 <__hi0bits+0x3c>
 800fce4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fce8:	f100 0001 	add.w	r0, r0, #1
 800fcec:	bf08      	it	eq
 800fcee:	2020      	moveq	r0, #32
 800fcf0:	4770      	bx	lr

0800fcf2 <__lo0bits>:
 800fcf2:	6803      	ldr	r3, [r0, #0]
 800fcf4:	4602      	mov	r2, r0
 800fcf6:	f013 0007 	ands.w	r0, r3, #7
 800fcfa:	d00b      	beq.n	800fd14 <__lo0bits+0x22>
 800fcfc:	07d9      	lsls	r1, r3, #31
 800fcfe:	d421      	bmi.n	800fd44 <__lo0bits+0x52>
 800fd00:	0798      	lsls	r0, r3, #30
 800fd02:	bf49      	itett	mi
 800fd04:	085b      	lsrmi	r3, r3, #1
 800fd06:	089b      	lsrpl	r3, r3, #2
 800fd08:	2001      	movmi	r0, #1
 800fd0a:	6013      	strmi	r3, [r2, #0]
 800fd0c:	bf5c      	itt	pl
 800fd0e:	6013      	strpl	r3, [r2, #0]
 800fd10:	2002      	movpl	r0, #2
 800fd12:	4770      	bx	lr
 800fd14:	b299      	uxth	r1, r3
 800fd16:	b909      	cbnz	r1, 800fd1c <__lo0bits+0x2a>
 800fd18:	0c1b      	lsrs	r3, r3, #16
 800fd1a:	2010      	movs	r0, #16
 800fd1c:	b2d9      	uxtb	r1, r3
 800fd1e:	b909      	cbnz	r1, 800fd24 <__lo0bits+0x32>
 800fd20:	3008      	adds	r0, #8
 800fd22:	0a1b      	lsrs	r3, r3, #8
 800fd24:	0719      	lsls	r1, r3, #28
 800fd26:	bf04      	itt	eq
 800fd28:	091b      	lsreq	r3, r3, #4
 800fd2a:	3004      	addeq	r0, #4
 800fd2c:	0799      	lsls	r1, r3, #30
 800fd2e:	bf04      	itt	eq
 800fd30:	089b      	lsreq	r3, r3, #2
 800fd32:	3002      	addeq	r0, #2
 800fd34:	07d9      	lsls	r1, r3, #31
 800fd36:	d403      	bmi.n	800fd40 <__lo0bits+0x4e>
 800fd38:	085b      	lsrs	r3, r3, #1
 800fd3a:	f100 0001 	add.w	r0, r0, #1
 800fd3e:	d003      	beq.n	800fd48 <__lo0bits+0x56>
 800fd40:	6013      	str	r3, [r2, #0]
 800fd42:	4770      	bx	lr
 800fd44:	2000      	movs	r0, #0
 800fd46:	4770      	bx	lr
 800fd48:	2020      	movs	r0, #32
 800fd4a:	4770      	bx	lr

0800fd4c <__i2b>:
 800fd4c:	b510      	push	{r4, lr}
 800fd4e:	460c      	mov	r4, r1
 800fd50:	2101      	movs	r1, #1
 800fd52:	f7ff febd 	bl	800fad0 <_Balloc>
 800fd56:	4602      	mov	r2, r0
 800fd58:	b928      	cbnz	r0, 800fd66 <__i2b+0x1a>
 800fd5a:	4b05      	ldr	r3, [pc, #20]	@ (800fd70 <__i2b+0x24>)
 800fd5c:	4805      	ldr	r0, [pc, #20]	@ (800fd74 <__i2b+0x28>)
 800fd5e:	f240 1145 	movw	r1, #325	@ 0x145
 800fd62:	f002 f975 	bl	8012050 <__assert_func>
 800fd66:	2301      	movs	r3, #1
 800fd68:	6144      	str	r4, [r0, #20]
 800fd6a:	6103      	str	r3, [r0, #16]
 800fd6c:	bd10      	pop	{r4, pc}
 800fd6e:	bf00      	nop
 800fd70:	08013e47 	.word	0x08013e47
 800fd74:	08013e58 	.word	0x08013e58

0800fd78 <__multiply>:
 800fd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd7c:	4614      	mov	r4, r2
 800fd7e:	690a      	ldr	r2, [r1, #16]
 800fd80:	6923      	ldr	r3, [r4, #16]
 800fd82:	429a      	cmp	r2, r3
 800fd84:	bfa8      	it	ge
 800fd86:	4623      	movge	r3, r4
 800fd88:	460f      	mov	r7, r1
 800fd8a:	bfa4      	itt	ge
 800fd8c:	460c      	movge	r4, r1
 800fd8e:	461f      	movge	r7, r3
 800fd90:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fd94:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fd98:	68a3      	ldr	r3, [r4, #8]
 800fd9a:	6861      	ldr	r1, [r4, #4]
 800fd9c:	eb0a 0609 	add.w	r6, sl, r9
 800fda0:	42b3      	cmp	r3, r6
 800fda2:	b085      	sub	sp, #20
 800fda4:	bfb8      	it	lt
 800fda6:	3101      	addlt	r1, #1
 800fda8:	f7ff fe92 	bl	800fad0 <_Balloc>
 800fdac:	b930      	cbnz	r0, 800fdbc <__multiply+0x44>
 800fdae:	4602      	mov	r2, r0
 800fdb0:	4b44      	ldr	r3, [pc, #272]	@ (800fec4 <__multiply+0x14c>)
 800fdb2:	4845      	ldr	r0, [pc, #276]	@ (800fec8 <__multiply+0x150>)
 800fdb4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fdb8:	f002 f94a 	bl	8012050 <__assert_func>
 800fdbc:	f100 0514 	add.w	r5, r0, #20
 800fdc0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fdc4:	462b      	mov	r3, r5
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	4543      	cmp	r3, r8
 800fdca:	d321      	bcc.n	800fe10 <__multiply+0x98>
 800fdcc:	f107 0114 	add.w	r1, r7, #20
 800fdd0:	f104 0214 	add.w	r2, r4, #20
 800fdd4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fdd8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fddc:	9302      	str	r3, [sp, #8]
 800fdde:	1b13      	subs	r3, r2, r4
 800fde0:	3b15      	subs	r3, #21
 800fde2:	f023 0303 	bic.w	r3, r3, #3
 800fde6:	3304      	adds	r3, #4
 800fde8:	f104 0715 	add.w	r7, r4, #21
 800fdec:	42ba      	cmp	r2, r7
 800fdee:	bf38      	it	cc
 800fdf0:	2304      	movcc	r3, #4
 800fdf2:	9301      	str	r3, [sp, #4]
 800fdf4:	9b02      	ldr	r3, [sp, #8]
 800fdf6:	9103      	str	r1, [sp, #12]
 800fdf8:	428b      	cmp	r3, r1
 800fdfa:	d80c      	bhi.n	800fe16 <__multiply+0x9e>
 800fdfc:	2e00      	cmp	r6, #0
 800fdfe:	dd03      	ble.n	800fe08 <__multiply+0x90>
 800fe00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d05b      	beq.n	800fec0 <__multiply+0x148>
 800fe08:	6106      	str	r6, [r0, #16]
 800fe0a:	b005      	add	sp, #20
 800fe0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe10:	f843 2b04 	str.w	r2, [r3], #4
 800fe14:	e7d8      	b.n	800fdc8 <__multiply+0x50>
 800fe16:	f8b1 a000 	ldrh.w	sl, [r1]
 800fe1a:	f1ba 0f00 	cmp.w	sl, #0
 800fe1e:	d024      	beq.n	800fe6a <__multiply+0xf2>
 800fe20:	f104 0e14 	add.w	lr, r4, #20
 800fe24:	46a9      	mov	r9, r5
 800fe26:	f04f 0c00 	mov.w	ip, #0
 800fe2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fe2e:	f8d9 3000 	ldr.w	r3, [r9]
 800fe32:	fa1f fb87 	uxth.w	fp, r7
 800fe36:	b29b      	uxth	r3, r3
 800fe38:	fb0a 330b 	mla	r3, sl, fp, r3
 800fe3c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fe40:	f8d9 7000 	ldr.w	r7, [r9]
 800fe44:	4463      	add	r3, ip
 800fe46:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fe4a:	fb0a c70b 	mla	r7, sl, fp, ip
 800fe4e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fe52:	b29b      	uxth	r3, r3
 800fe54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fe58:	4572      	cmp	r2, lr
 800fe5a:	f849 3b04 	str.w	r3, [r9], #4
 800fe5e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fe62:	d8e2      	bhi.n	800fe2a <__multiply+0xb2>
 800fe64:	9b01      	ldr	r3, [sp, #4]
 800fe66:	f845 c003 	str.w	ip, [r5, r3]
 800fe6a:	9b03      	ldr	r3, [sp, #12]
 800fe6c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fe70:	3104      	adds	r1, #4
 800fe72:	f1b9 0f00 	cmp.w	r9, #0
 800fe76:	d021      	beq.n	800febc <__multiply+0x144>
 800fe78:	682b      	ldr	r3, [r5, #0]
 800fe7a:	f104 0c14 	add.w	ip, r4, #20
 800fe7e:	46ae      	mov	lr, r5
 800fe80:	f04f 0a00 	mov.w	sl, #0
 800fe84:	f8bc b000 	ldrh.w	fp, [ip]
 800fe88:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fe8c:	fb09 770b 	mla	r7, r9, fp, r7
 800fe90:	4457      	add	r7, sl
 800fe92:	b29b      	uxth	r3, r3
 800fe94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fe98:	f84e 3b04 	str.w	r3, [lr], #4
 800fe9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fea0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fea4:	f8be 3000 	ldrh.w	r3, [lr]
 800fea8:	fb09 330a 	mla	r3, r9, sl, r3
 800feac:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800feb0:	4562      	cmp	r2, ip
 800feb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800feb6:	d8e5      	bhi.n	800fe84 <__multiply+0x10c>
 800feb8:	9f01      	ldr	r7, [sp, #4]
 800feba:	51eb      	str	r3, [r5, r7]
 800febc:	3504      	adds	r5, #4
 800febe:	e799      	b.n	800fdf4 <__multiply+0x7c>
 800fec0:	3e01      	subs	r6, #1
 800fec2:	e79b      	b.n	800fdfc <__multiply+0x84>
 800fec4:	08013e47 	.word	0x08013e47
 800fec8:	08013e58 	.word	0x08013e58

0800fecc <__pow5mult>:
 800fecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fed0:	4615      	mov	r5, r2
 800fed2:	f012 0203 	ands.w	r2, r2, #3
 800fed6:	4607      	mov	r7, r0
 800fed8:	460e      	mov	r6, r1
 800feda:	d007      	beq.n	800feec <__pow5mult+0x20>
 800fedc:	4c25      	ldr	r4, [pc, #148]	@ (800ff74 <__pow5mult+0xa8>)
 800fede:	3a01      	subs	r2, #1
 800fee0:	2300      	movs	r3, #0
 800fee2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fee6:	f7ff fe55 	bl	800fb94 <__multadd>
 800feea:	4606      	mov	r6, r0
 800feec:	10ad      	asrs	r5, r5, #2
 800feee:	d03d      	beq.n	800ff6c <__pow5mult+0xa0>
 800fef0:	69fc      	ldr	r4, [r7, #28]
 800fef2:	b97c      	cbnz	r4, 800ff14 <__pow5mult+0x48>
 800fef4:	2010      	movs	r0, #16
 800fef6:	f7ff fd35 	bl	800f964 <malloc>
 800fefa:	4602      	mov	r2, r0
 800fefc:	61f8      	str	r0, [r7, #28]
 800fefe:	b928      	cbnz	r0, 800ff0c <__pow5mult+0x40>
 800ff00:	4b1d      	ldr	r3, [pc, #116]	@ (800ff78 <__pow5mult+0xac>)
 800ff02:	481e      	ldr	r0, [pc, #120]	@ (800ff7c <__pow5mult+0xb0>)
 800ff04:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ff08:	f002 f8a2 	bl	8012050 <__assert_func>
 800ff0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ff10:	6004      	str	r4, [r0, #0]
 800ff12:	60c4      	str	r4, [r0, #12]
 800ff14:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ff18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ff1c:	b94c      	cbnz	r4, 800ff32 <__pow5mult+0x66>
 800ff1e:	f240 2171 	movw	r1, #625	@ 0x271
 800ff22:	4638      	mov	r0, r7
 800ff24:	f7ff ff12 	bl	800fd4c <__i2b>
 800ff28:	2300      	movs	r3, #0
 800ff2a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ff2e:	4604      	mov	r4, r0
 800ff30:	6003      	str	r3, [r0, #0]
 800ff32:	f04f 0900 	mov.w	r9, #0
 800ff36:	07eb      	lsls	r3, r5, #31
 800ff38:	d50a      	bpl.n	800ff50 <__pow5mult+0x84>
 800ff3a:	4631      	mov	r1, r6
 800ff3c:	4622      	mov	r2, r4
 800ff3e:	4638      	mov	r0, r7
 800ff40:	f7ff ff1a 	bl	800fd78 <__multiply>
 800ff44:	4631      	mov	r1, r6
 800ff46:	4680      	mov	r8, r0
 800ff48:	4638      	mov	r0, r7
 800ff4a:	f7ff fe01 	bl	800fb50 <_Bfree>
 800ff4e:	4646      	mov	r6, r8
 800ff50:	106d      	asrs	r5, r5, #1
 800ff52:	d00b      	beq.n	800ff6c <__pow5mult+0xa0>
 800ff54:	6820      	ldr	r0, [r4, #0]
 800ff56:	b938      	cbnz	r0, 800ff68 <__pow5mult+0x9c>
 800ff58:	4622      	mov	r2, r4
 800ff5a:	4621      	mov	r1, r4
 800ff5c:	4638      	mov	r0, r7
 800ff5e:	f7ff ff0b 	bl	800fd78 <__multiply>
 800ff62:	6020      	str	r0, [r4, #0]
 800ff64:	f8c0 9000 	str.w	r9, [r0]
 800ff68:	4604      	mov	r4, r0
 800ff6a:	e7e4      	b.n	800ff36 <__pow5mult+0x6a>
 800ff6c:	4630      	mov	r0, r6
 800ff6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff72:	bf00      	nop
 800ff74:	08013eb4 	.word	0x08013eb4
 800ff78:	08013dd8 	.word	0x08013dd8
 800ff7c:	08013e58 	.word	0x08013e58

0800ff80 <__lshift>:
 800ff80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff84:	460c      	mov	r4, r1
 800ff86:	6849      	ldr	r1, [r1, #4]
 800ff88:	6923      	ldr	r3, [r4, #16]
 800ff8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ff8e:	68a3      	ldr	r3, [r4, #8]
 800ff90:	4607      	mov	r7, r0
 800ff92:	4691      	mov	r9, r2
 800ff94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ff98:	f108 0601 	add.w	r6, r8, #1
 800ff9c:	42b3      	cmp	r3, r6
 800ff9e:	db0b      	blt.n	800ffb8 <__lshift+0x38>
 800ffa0:	4638      	mov	r0, r7
 800ffa2:	f7ff fd95 	bl	800fad0 <_Balloc>
 800ffa6:	4605      	mov	r5, r0
 800ffa8:	b948      	cbnz	r0, 800ffbe <__lshift+0x3e>
 800ffaa:	4602      	mov	r2, r0
 800ffac:	4b28      	ldr	r3, [pc, #160]	@ (8010050 <__lshift+0xd0>)
 800ffae:	4829      	ldr	r0, [pc, #164]	@ (8010054 <__lshift+0xd4>)
 800ffb0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ffb4:	f002 f84c 	bl	8012050 <__assert_func>
 800ffb8:	3101      	adds	r1, #1
 800ffba:	005b      	lsls	r3, r3, #1
 800ffbc:	e7ee      	b.n	800ff9c <__lshift+0x1c>
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	f100 0114 	add.w	r1, r0, #20
 800ffc4:	f100 0210 	add.w	r2, r0, #16
 800ffc8:	4618      	mov	r0, r3
 800ffca:	4553      	cmp	r3, sl
 800ffcc:	db33      	blt.n	8010036 <__lshift+0xb6>
 800ffce:	6920      	ldr	r0, [r4, #16]
 800ffd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ffd4:	f104 0314 	add.w	r3, r4, #20
 800ffd8:	f019 091f 	ands.w	r9, r9, #31
 800ffdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ffe0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ffe4:	d02b      	beq.n	801003e <__lshift+0xbe>
 800ffe6:	f1c9 0e20 	rsb	lr, r9, #32
 800ffea:	468a      	mov	sl, r1
 800ffec:	2200      	movs	r2, #0
 800ffee:	6818      	ldr	r0, [r3, #0]
 800fff0:	fa00 f009 	lsl.w	r0, r0, r9
 800fff4:	4310      	orrs	r0, r2
 800fff6:	f84a 0b04 	str.w	r0, [sl], #4
 800fffa:	f853 2b04 	ldr.w	r2, [r3], #4
 800fffe:	459c      	cmp	ip, r3
 8010000:	fa22 f20e 	lsr.w	r2, r2, lr
 8010004:	d8f3      	bhi.n	800ffee <__lshift+0x6e>
 8010006:	ebac 0304 	sub.w	r3, ip, r4
 801000a:	3b15      	subs	r3, #21
 801000c:	f023 0303 	bic.w	r3, r3, #3
 8010010:	3304      	adds	r3, #4
 8010012:	f104 0015 	add.w	r0, r4, #21
 8010016:	4584      	cmp	ip, r0
 8010018:	bf38      	it	cc
 801001a:	2304      	movcc	r3, #4
 801001c:	50ca      	str	r2, [r1, r3]
 801001e:	b10a      	cbz	r2, 8010024 <__lshift+0xa4>
 8010020:	f108 0602 	add.w	r6, r8, #2
 8010024:	3e01      	subs	r6, #1
 8010026:	4638      	mov	r0, r7
 8010028:	612e      	str	r6, [r5, #16]
 801002a:	4621      	mov	r1, r4
 801002c:	f7ff fd90 	bl	800fb50 <_Bfree>
 8010030:	4628      	mov	r0, r5
 8010032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010036:	f842 0f04 	str.w	r0, [r2, #4]!
 801003a:	3301      	adds	r3, #1
 801003c:	e7c5      	b.n	800ffca <__lshift+0x4a>
 801003e:	3904      	subs	r1, #4
 8010040:	f853 2b04 	ldr.w	r2, [r3], #4
 8010044:	f841 2f04 	str.w	r2, [r1, #4]!
 8010048:	459c      	cmp	ip, r3
 801004a:	d8f9      	bhi.n	8010040 <__lshift+0xc0>
 801004c:	e7ea      	b.n	8010024 <__lshift+0xa4>
 801004e:	bf00      	nop
 8010050:	08013e47 	.word	0x08013e47
 8010054:	08013e58 	.word	0x08013e58

08010058 <__mcmp>:
 8010058:	690a      	ldr	r2, [r1, #16]
 801005a:	4603      	mov	r3, r0
 801005c:	6900      	ldr	r0, [r0, #16]
 801005e:	1a80      	subs	r0, r0, r2
 8010060:	b530      	push	{r4, r5, lr}
 8010062:	d10e      	bne.n	8010082 <__mcmp+0x2a>
 8010064:	3314      	adds	r3, #20
 8010066:	3114      	adds	r1, #20
 8010068:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801006c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010070:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010074:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010078:	4295      	cmp	r5, r2
 801007a:	d003      	beq.n	8010084 <__mcmp+0x2c>
 801007c:	d205      	bcs.n	801008a <__mcmp+0x32>
 801007e:	f04f 30ff 	mov.w	r0, #4294967295
 8010082:	bd30      	pop	{r4, r5, pc}
 8010084:	42a3      	cmp	r3, r4
 8010086:	d3f3      	bcc.n	8010070 <__mcmp+0x18>
 8010088:	e7fb      	b.n	8010082 <__mcmp+0x2a>
 801008a:	2001      	movs	r0, #1
 801008c:	e7f9      	b.n	8010082 <__mcmp+0x2a>
	...

08010090 <__mdiff>:
 8010090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010094:	4689      	mov	r9, r1
 8010096:	4606      	mov	r6, r0
 8010098:	4611      	mov	r1, r2
 801009a:	4648      	mov	r0, r9
 801009c:	4614      	mov	r4, r2
 801009e:	f7ff ffdb 	bl	8010058 <__mcmp>
 80100a2:	1e05      	subs	r5, r0, #0
 80100a4:	d112      	bne.n	80100cc <__mdiff+0x3c>
 80100a6:	4629      	mov	r1, r5
 80100a8:	4630      	mov	r0, r6
 80100aa:	f7ff fd11 	bl	800fad0 <_Balloc>
 80100ae:	4602      	mov	r2, r0
 80100b0:	b928      	cbnz	r0, 80100be <__mdiff+0x2e>
 80100b2:	4b3f      	ldr	r3, [pc, #252]	@ (80101b0 <__mdiff+0x120>)
 80100b4:	f240 2137 	movw	r1, #567	@ 0x237
 80100b8:	483e      	ldr	r0, [pc, #248]	@ (80101b4 <__mdiff+0x124>)
 80100ba:	f001 ffc9 	bl	8012050 <__assert_func>
 80100be:	2301      	movs	r3, #1
 80100c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80100c4:	4610      	mov	r0, r2
 80100c6:	b003      	add	sp, #12
 80100c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100cc:	bfbc      	itt	lt
 80100ce:	464b      	movlt	r3, r9
 80100d0:	46a1      	movlt	r9, r4
 80100d2:	4630      	mov	r0, r6
 80100d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80100d8:	bfba      	itte	lt
 80100da:	461c      	movlt	r4, r3
 80100dc:	2501      	movlt	r5, #1
 80100de:	2500      	movge	r5, #0
 80100e0:	f7ff fcf6 	bl	800fad0 <_Balloc>
 80100e4:	4602      	mov	r2, r0
 80100e6:	b918      	cbnz	r0, 80100f0 <__mdiff+0x60>
 80100e8:	4b31      	ldr	r3, [pc, #196]	@ (80101b0 <__mdiff+0x120>)
 80100ea:	f240 2145 	movw	r1, #581	@ 0x245
 80100ee:	e7e3      	b.n	80100b8 <__mdiff+0x28>
 80100f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80100f4:	6926      	ldr	r6, [r4, #16]
 80100f6:	60c5      	str	r5, [r0, #12]
 80100f8:	f109 0310 	add.w	r3, r9, #16
 80100fc:	f109 0514 	add.w	r5, r9, #20
 8010100:	f104 0e14 	add.w	lr, r4, #20
 8010104:	f100 0b14 	add.w	fp, r0, #20
 8010108:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801010c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010110:	9301      	str	r3, [sp, #4]
 8010112:	46d9      	mov	r9, fp
 8010114:	f04f 0c00 	mov.w	ip, #0
 8010118:	9b01      	ldr	r3, [sp, #4]
 801011a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801011e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010122:	9301      	str	r3, [sp, #4]
 8010124:	fa1f f38a 	uxth.w	r3, sl
 8010128:	4619      	mov	r1, r3
 801012a:	b283      	uxth	r3, r0
 801012c:	1acb      	subs	r3, r1, r3
 801012e:	0c00      	lsrs	r0, r0, #16
 8010130:	4463      	add	r3, ip
 8010132:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010136:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801013a:	b29b      	uxth	r3, r3
 801013c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010140:	4576      	cmp	r6, lr
 8010142:	f849 3b04 	str.w	r3, [r9], #4
 8010146:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801014a:	d8e5      	bhi.n	8010118 <__mdiff+0x88>
 801014c:	1b33      	subs	r3, r6, r4
 801014e:	3b15      	subs	r3, #21
 8010150:	f023 0303 	bic.w	r3, r3, #3
 8010154:	3415      	adds	r4, #21
 8010156:	3304      	adds	r3, #4
 8010158:	42a6      	cmp	r6, r4
 801015a:	bf38      	it	cc
 801015c:	2304      	movcc	r3, #4
 801015e:	441d      	add	r5, r3
 8010160:	445b      	add	r3, fp
 8010162:	461e      	mov	r6, r3
 8010164:	462c      	mov	r4, r5
 8010166:	4544      	cmp	r4, r8
 8010168:	d30e      	bcc.n	8010188 <__mdiff+0xf8>
 801016a:	f108 0103 	add.w	r1, r8, #3
 801016e:	1b49      	subs	r1, r1, r5
 8010170:	f021 0103 	bic.w	r1, r1, #3
 8010174:	3d03      	subs	r5, #3
 8010176:	45a8      	cmp	r8, r5
 8010178:	bf38      	it	cc
 801017a:	2100      	movcc	r1, #0
 801017c:	440b      	add	r3, r1
 801017e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010182:	b191      	cbz	r1, 80101aa <__mdiff+0x11a>
 8010184:	6117      	str	r7, [r2, #16]
 8010186:	e79d      	b.n	80100c4 <__mdiff+0x34>
 8010188:	f854 1b04 	ldr.w	r1, [r4], #4
 801018c:	46e6      	mov	lr, ip
 801018e:	0c08      	lsrs	r0, r1, #16
 8010190:	fa1c fc81 	uxtah	ip, ip, r1
 8010194:	4471      	add	r1, lr
 8010196:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801019a:	b289      	uxth	r1, r1
 801019c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80101a0:	f846 1b04 	str.w	r1, [r6], #4
 80101a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80101a8:	e7dd      	b.n	8010166 <__mdiff+0xd6>
 80101aa:	3f01      	subs	r7, #1
 80101ac:	e7e7      	b.n	801017e <__mdiff+0xee>
 80101ae:	bf00      	nop
 80101b0:	08013e47 	.word	0x08013e47
 80101b4:	08013e58 	.word	0x08013e58

080101b8 <__ulp>:
 80101b8:	b082      	sub	sp, #8
 80101ba:	ed8d 0b00 	vstr	d0, [sp]
 80101be:	9a01      	ldr	r2, [sp, #4]
 80101c0:	4b0f      	ldr	r3, [pc, #60]	@ (8010200 <__ulp+0x48>)
 80101c2:	4013      	ands	r3, r2
 80101c4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	dc08      	bgt.n	80101de <__ulp+0x26>
 80101cc:	425b      	negs	r3, r3
 80101ce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80101d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80101d6:	da04      	bge.n	80101e2 <__ulp+0x2a>
 80101d8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80101dc:	4113      	asrs	r3, r2
 80101de:	2200      	movs	r2, #0
 80101e0:	e008      	b.n	80101f4 <__ulp+0x3c>
 80101e2:	f1a2 0314 	sub.w	r3, r2, #20
 80101e6:	2b1e      	cmp	r3, #30
 80101e8:	bfda      	itte	le
 80101ea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80101ee:	40da      	lsrle	r2, r3
 80101f0:	2201      	movgt	r2, #1
 80101f2:	2300      	movs	r3, #0
 80101f4:	4619      	mov	r1, r3
 80101f6:	4610      	mov	r0, r2
 80101f8:	ec41 0b10 	vmov	d0, r0, r1
 80101fc:	b002      	add	sp, #8
 80101fe:	4770      	bx	lr
 8010200:	7ff00000 	.word	0x7ff00000

08010204 <__b2d>:
 8010204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010208:	6906      	ldr	r6, [r0, #16]
 801020a:	f100 0814 	add.w	r8, r0, #20
 801020e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010212:	1f37      	subs	r7, r6, #4
 8010214:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010218:	4610      	mov	r0, r2
 801021a:	f7ff fd4b 	bl	800fcb4 <__hi0bits>
 801021e:	f1c0 0320 	rsb	r3, r0, #32
 8010222:	280a      	cmp	r0, #10
 8010224:	600b      	str	r3, [r1, #0]
 8010226:	491b      	ldr	r1, [pc, #108]	@ (8010294 <__b2d+0x90>)
 8010228:	dc15      	bgt.n	8010256 <__b2d+0x52>
 801022a:	f1c0 0c0b 	rsb	ip, r0, #11
 801022e:	fa22 f30c 	lsr.w	r3, r2, ip
 8010232:	45b8      	cmp	r8, r7
 8010234:	ea43 0501 	orr.w	r5, r3, r1
 8010238:	bf34      	ite	cc
 801023a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801023e:	2300      	movcs	r3, #0
 8010240:	3015      	adds	r0, #21
 8010242:	fa02 f000 	lsl.w	r0, r2, r0
 8010246:	fa23 f30c 	lsr.w	r3, r3, ip
 801024a:	4303      	orrs	r3, r0
 801024c:	461c      	mov	r4, r3
 801024e:	ec45 4b10 	vmov	d0, r4, r5
 8010252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010256:	45b8      	cmp	r8, r7
 8010258:	bf3a      	itte	cc
 801025a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801025e:	f1a6 0708 	subcc.w	r7, r6, #8
 8010262:	2300      	movcs	r3, #0
 8010264:	380b      	subs	r0, #11
 8010266:	d012      	beq.n	801028e <__b2d+0x8a>
 8010268:	f1c0 0120 	rsb	r1, r0, #32
 801026c:	fa23 f401 	lsr.w	r4, r3, r1
 8010270:	4082      	lsls	r2, r0
 8010272:	4322      	orrs	r2, r4
 8010274:	4547      	cmp	r7, r8
 8010276:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801027a:	bf8c      	ite	hi
 801027c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010280:	2200      	movls	r2, #0
 8010282:	4083      	lsls	r3, r0
 8010284:	40ca      	lsrs	r2, r1
 8010286:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801028a:	4313      	orrs	r3, r2
 801028c:	e7de      	b.n	801024c <__b2d+0x48>
 801028e:	ea42 0501 	orr.w	r5, r2, r1
 8010292:	e7db      	b.n	801024c <__b2d+0x48>
 8010294:	3ff00000 	.word	0x3ff00000

08010298 <__d2b>:
 8010298:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801029c:	460f      	mov	r7, r1
 801029e:	2101      	movs	r1, #1
 80102a0:	ec59 8b10 	vmov	r8, r9, d0
 80102a4:	4616      	mov	r6, r2
 80102a6:	f7ff fc13 	bl	800fad0 <_Balloc>
 80102aa:	4604      	mov	r4, r0
 80102ac:	b930      	cbnz	r0, 80102bc <__d2b+0x24>
 80102ae:	4602      	mov	r2, r0
 80102b0:	4b23      	ldr	r3, [pc, #140]	@ (8010340 <__d2b+0xa8>)
 80102b2:	4824      	ldr	r0, [pc, #144]	@ (8010344 <__d2b+0xac>)
 80102b4:	f240 310f 	movw	r1, #783	@ 0x30f
 80102b8:	f001 feca 	bl	8012050 <__assert_func>
 80102bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80102c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80102c4:	b10d      	cbz	r5, 80102ca <__d2b+0x32>
 80102c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80102ca:	9301      	str	r3, [sp, #4]
 80102cc:	f1b8 0300 	subs.w	r3, r8, #0
 80102d0:	d023      	beq.n	801031a <__d2b+0x82>
 80102d2:	4668      	mov	r0, sp
 80102d4:	9300      	str	r3, [sp, #0]
 80102d6:	f7ff fd0c 	bl	800fcf2 <__lo0bits>
 80102da:	e9dd 1200 	ldrd	r1, r2, [sp]
 80102de:	b1d0      	cbz	r0, 8010316 <__d2b+0x7e>
 80102e0:	f1c0 0320 	rsb	r3, r0, #32
 80102e4:	fa02 f303 	lsl.w	r3, r2, r3
 80102e8:	430b      	orrs	r3, r1
 80102ea:	40c2      	lsrs	r2, r0
 80102ec:	6163      	str	r3, [r4, #20]
 80102ee:	9201      	str	r2, [sp, #4]
 80102f0:	9b01      	ldr	r3, [sp, #4]
 80102f2:	61a3      	str	r3, [r4, #24]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	bf0c      	ite	eq
 80102f8:	2201      	moveq	r2, #1
 80102fa:	2202      	movne	r2, #2
 80102fc:	6122      	str	r2, [r4, #16]
 80102fe:	b1a5      	cbz	r5, 801032a <__d2b+0x92>
 8010300:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010304:	4405      	add	r5, r0
 8010306:	603d      	str	r5, [r7, #0]
 8010308:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801030c:	6030      	str	r0, [r6, #0]
 801030e:	4620      	mov	r0, r4
 8010310:	b003      	add	sp, #12
 8010312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010316:	6161      	str	r1, [r4, #20]
 8010318:	e7ea      	b.n	80102f0 <__d2b+0x58>
 801031a:	a801      	add	r0, sp, #4
 801031c:	f7ff fce9 	bl	800fcf2 <__lo0bits>
 8010320:	9b01      	ldr	r3, [sp, #4]
 8010322:	6163      	str	r3, [r4, #20]
 8010324:	3020      	adds	r0, #32
 8010326:	2201      	movs	r2, #1
 8010328:	e7e8      	b.n	80102fc <__d2b+0x64>
 801032a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801032e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010332:	6038      	str	r0, [r7, #0]
 8010334:	6918      	ldr	r0, [r3, #16]
 8010336:	f7ff fcbd 	bl	800fcb4 <__hi0bits>
 801033a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801033e:	e7e5      	b.n	801030c <__d2b+0x74>
 8010340:	08013e47 	.word	0x08013e47
 8010344:	08013e58 	.word	0x08013e58

08010348 <__ratio>:
 8010348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801034c:	b085      	sub	sp, #20
 801034e:	e9cd 1000 	strd	r1, r0, [sp]
 8010352:	a902      	add	r1, sp, #8
 8010354:	f7ff ff56 	bl	8010204 <__b2d>
 8010358:	9800      	ldr	r0, [sp, #0]
 801035a:	a903      	add	r1, sp, #12
 801035c:	ec55 4b10 	vmov	r4, r5, d0
 8010360:	f7ff ff50 	bl	8010204 <__b2d>
 8010364:	9b01      	ldr	r3, [sp, #4]
 8010366:	6919      	ldr	r1, [r3, #16]
 8010368:	9b00      	ldr	r3, [sp, #0]
 801036a:	691b      	ldr	r3, [r3, #16]
 801036c:	1ac9      	subs	r1, r1, r3
 801036e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010372:	1a9b      	subs	r3, r3, r2
 8010374:	ec5b ab10 	vmov	sl, fp, d0
 8010378:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801037c:	2b00      	cmp	r3, #0
 801037e:	bfce      	itee	gt
 8010380:	462a      	movgt	r2, r5
 8010382:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010386:	465a      	movle	r2, fp
 8010388:	462f      	mov	r7, r5
 801038a:	46d9      	mov	r9, fp
 801038c:	bfcc      	ite	gt
 801038e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010392:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8010396:	464b      	mov	r3, r9
 8010398:	4652      	mov	r2, sl
 801039a:	4620      	mov	r0, r4
 801039c:	4639      	mov	r1, r7
 801039e:	f7f0 fa5d 	bl	800085c <__aeabi_ddiv>
 80103a2:	ec41 0b10 	vmov	d0, r0, r1
 80103a6:	b005      	add	sp, #20
 80103a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080103ac <__copybits>:
 80103ac:	3901      	subs	r1, #1
 80103ae:	b570      	push	{r4, r5, r6, lr}
 80103b0:	1149      	asrs	r1, r1, #5
 80103b2:	6914      	ldr	r4, [r2, #16]
 80103b4:	3101      	adds	r1, #1
 80103b6:	f102 0314 	add.w	r3, r2, #20
 80103ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80103be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80103c2:	1f05      	subs	r5, r0, #4
 80103c4:	42a3      	cmp	r3, r4
 80103c6:	d30c      	bcc.n	80103e2 <__copybits+0x36>
 80103c8:	1aa3      	subs	r3, r4, r2
 80103ca:	3b11      	subs	r3, #17
 80103cc:	f023 0303 	bic.w	r3, r3, #3
 80103d0:	3211      	adds	r2, #17
 80103d2:	42a2      	cmp	r2, r4
 80103d4:	bf88      	it	hi
 80103d6:	2300      	movhi	r3, #0
 80103d8:	4418      	add	r0, r3
 80103da:	2300      	movs	r3, #0
 80103dc:	4288      	cmp	r0, r1
 80103de:	d305      	bcc.n	80103ec <__copybits+0x40>
 80103e0:	bd70      	pop	{r4, r5, r6, pc}
 80103e2:	f853 6b04 	ldr.w	r6, [r3], #4
 80103e6:	f845 6f04 	str.w	r6, [r5, #4]!
 80103ea:	e7eb      	b.n	80103c4 <__copybits+0x18>
 80103ec:	f840 3b04 	str.w	r3, [r0], #4
 80103f0:	e7f4      	b.n	80103dc <__copybits+0x30>

080103f2 <__any_on>:
 80103f2:	f100 0214 	add.w	r2, r0, #20
 80103f6:	6900      	ldr	r0, [r0, #16]
 80103f8:	114b      	asrs	r3, r1, #5
 80103fa:	4298      	cmp	r0, r3
 80103fc:	b510      	push	{r4, lr}
 80103fe:	db11      	blt.n	8010424 <__any_on+0x32>
 8010400:	dd0a      	ble.n	8010418 <__any_on+0x26>
 8010402:	f011 011f 	ands.w	r1, r1, #31
 8010406:	d007      	beq.n	8010418 <__any_on+0x26>
 8010408:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801040c:	fa24 f001 	lsr.w	r0, r4, r1
 8010410:	fa00 f101 	lsl.w	r1, r0, r1
 8010414:	428c      	cmp	r4, r1
 8010416:	d10b      	bne.n	8010430 <__any_on+0x3e>
 8010418:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801041c:	4293      	cmp	r3, r2
 801041e:	d803      	bhi.n	8010428 <__any_on+0x36>
 8010420:	2000      	movs	r0, #0
 8010422:	bd10      	pop	{r4, pc}
 8010424:	4603      	mov	r3, r0
 8010426:	e7f7      	b.n	8010418 <__any_on+0x26>
 8010428:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801042c:	2900      	cmp	r1, #0
 801042e:	d0f5      	beq.n	801041c <__any_on+0x2a>
 8010430:	2001      	movs	r0, #1
 8010432:	e7f6      	b.n	8010422 <__any_on+0x30>

08010434 <sulp>:
 8010434:	b570      	push	{r4, r5, r6, lr}
 8010436:	4604      	mov	r4, r0
 8010438:	460d      	mov	r5, r1
 801043a:	ec45 4b10 	vmov	d0, r4, r5
 801043e:	4616      	mov	r6, r2
 8010440:	f7ff feba 	bl	80101b8 <__ulp>
 8010444:	ec51 0b10 	vmov	r0, r1, d0
 8010448:	b17e      	cbz	r6, 801046a <sulp+0x36>
 801044a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801044e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010452:	2b00      	cmp	r3, #0
 8010454:	dd09      	ble.n	801046a <sulp+0x36>
 8010456:	051b      	lsls	r3, r3, #20
 8010458:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801045c:	2400      	movs	r4, #0
 801045e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8010462:	4622      	mov	r2, r4
 8010464:	462b      	mov	r3, r5
 8010466:	f7f0 f8cf 	bl	8000608 <__aeabi_dmul>
 801046a:	ec41 0b10 	vmov	d0, r0, r1
 801046e:	bd70      	pop	{r4, r5, r6, pc}

08010470 <_strtod_l>:
 8010470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010474:	b09f      	sub	sp, #124	@ 0x7c
 8010476:	460c      	mov	r4, r1
 8010478:	9217      	str	r2, [sp, #92]	@ 0x5c
 801047a:	2200      	movs	r2, #0
 801047c:	921a      	str	r2, [sp, #104]	@ 0x68
 801047e:	9005      	str	r0, [sp, #20]
 8010480:	f04f 0a00 	mov.w	sl, #0
 8010484:	f04f 0b00 	mov.w	fp, #0
 8010488:	460a      	mov	r2, r1
 801048a:	9219      	str	r2, [sp, #100]	@ 0x64
 801048c:	7811      	ldrb	r1, [r2, #0]
 801048e:	292b      	cmp	r1, #43	@ 0x2b
 8010490:	d04a      	beq.n	8010528 <_strtod_l+0xb8>
 8010492:	d838      	bhi.n	8010506 <_strtod_l+0x96>
 8010494:	290d      	cmp	r1, #13
 8010496:	d832      	bhi.n	80104fe <_strtod_l+0x8e>
 8010498:	2908      	cmp	r1, #8
 801049a:	d832      	bhi.n	8010502 <_strtod_l+0x92>
 801049c:	2900      	cmp	r1, #0
 801049e:	d03b      	beq.n	8010518 <_strtod_l+0xa8>
 80104a0:	2200      	movs	r2, #0
 80104a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80104a4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80104a6:	782a      	ldrb	r2, [r5, #0]
 80104a8:	2a30      	cmp	r2, #48	@ 0x30
 80104aa:	f040 80b3 	bne.w	8010614 <_strtod_l+0x1a4>
 80104ae:	786a      	ldrb	r2, [r5, #1]
 80104b0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80104b4:	2a58      	cmp	r2, #88	@ 0x58
 80104b6:	d16e      	bne.n	8010596 <_strtod_l+0x126>
 80104b8:	9302      	str	r3, [sp, #8]
 80104ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80104bc:	9301      	str	r3, [sp, #4]
 80104be:	ab1a      	add	r3, sp, #104	@ 0x68
 80104c0:	9300      	str	r3, [sp, #0]
 80104c2:	4a8e      	ldr	r2, [pc, #568]	@ (80106fc <_strtod_l+0x28c>)
 80104c4:	9805      	ldr	r0, [sp, #20]
 80104c6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80104c8:	a919      	add	r1, sp, #100	@ 0x64
 80104ca:	f001 fe5b 	bl	8012184 <__gethex>
 80104ce:	f010 060f 	ands.w	r6, r0, #15
 80104d2:	4604      	mov	r4, r0
 80104d4:	d005      	beq.n	80104e2 <_strtod_l+0x72>
 80104d6:	2e06      	cmp	r6, #6
 80104d8:	d128      	bne.n	801052c <_strtod_l+0xbc>
 80104da:	3501      	adds	r5, #1
 80104dc:	2300      	movs	r3, #0
 80104de:	9519      	str	r5, [sp, #100]	@ 0x64
 80104e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80104e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	f040 858e 	bne.w	8011006 <_strtod_l+0xb96>
 80104ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80104ec:	b1cb      	cbz	r3, 8010522 <_strtod_l+0xb2>
 80104ee:	4652      	mov	r2, sl
 80104f0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80104f4:	ec43 2b10 	vmov	d0, r2, r3
 80104f8:	b01f      	add	sp, #124	@ 0x7c
 80104fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104fe:	2920      	cmp	r1, #32
 8010500:	d1ce      	bne.n	80104a0 <_strtod_l+0x30>
 8010502:	3201      	adds	r2, #1
 8010504:	e7c1      	b.n	801048a <_strtod_l+0x1a>
 8010506:	292d      	cmp	r1, #45	@ 0x2d
 8010508:	d1ca      	bne.n	80104a0 <_strtod_l+0x30>
 801050a:	2101      	movs	r1, #1
 801050c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801050e:	1c51      	adds	r1, r2, #1
 8010510:	9119      	str	r1, [sp, #100]	@ 0x64
 8010512:	7852      	ldrb	r2, [r2, #1]
 8010514:	2a00      	cmp	r2, #0
 8010516:	d1c5      	bne.n	80104a4 <_strtod_l+0x34>
 8010518:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801051a:	9419      	str	r4, [sp, #100]	@ 0x64
 801051c:	2b00      	cmp	r3, #0
 801051e:	f040 8570 	bne.w	8011002 <_strtod_l+0xb92>
 8010522:	4652      	mov	r2, sl
 8010524:	465b      	mov	r3, fp
 8010526:	e7e5      	b.n	80104f4 <_strtod_l+0x84>
 8010528:	2100      	movs	r1, #0
 801052a:	e7ef      	b.n	801050c <_strtod_l+0x9c>
 801052c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801052e:	b13a      	cbz	r2, 8010540 <_strtod_l+0xd0>
 8010530:	2135      	movs	r1, #53	@ 0x35
 8010532:	a81c      	add	r0, sp, #112	@ 0x70
 8010534:	f7ff ff3a 	bl	80103ac <__copybits>
 8010538:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801053a:	9805      	ldr	r0, [sp, #20]
 801053c:	f7ff fb08 	bl	800fb50 <_Bfree>
 8010540:	3e01      	subs	r6, #1
 8010542:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010544:	2e04      	cmp	r6, #4
 8010546:	d806      	bhi.n	8010556 <_strtod_l+0xe6>
 8010548:	e8df f006 	tbb	[pc, r6]
 801054c:	201d0314 	.word	0x201d0314
 8010550:	14          	.byte	0x14
 8010551:	00          	.byte	0x00
 8010552:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8010556:	05e1      	lsls	r1, r4, #23
 8010558:	bf48      	it	mi
 801055a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801055e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010562:	0d1b      	lsrs	r3, r3, #20
 8010564:	051b      	lsls	r3, r3, #20
 8010566:	2b00      	cmp	r3, #0
 8010568:	d1bb      	bne.n	80104e2 <_strtod_l+0x72>
 801056a:	f7fe fb21 	bl	800ebb0 <__errno>
 801056e:	2322      	movs	r3, #34	@ 0x22
 8010570:	6003      	str	r3, [r0, #0]
 8010572:	e7b6      	b.n	80104e2 <_strtod_l+0x72>
 8010574:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8010578:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801057c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010580:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010584:	e7e7      	b.n	8010556 <_strtod_l+0xe6>
 8010586:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8010704 <_strtod_l+0x294>
 801058a:	e7e4      	b.n	8010556 <_strtod_l+0xe6>
 801058c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010590:	f04f 3aff 	mov.w	sl, #4294967295
 8010594:	e7df      	b.n	8010556 <_strtod_l+0xe6>
 8010596:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010598:	1c5a      	adds	r2, r3, #1
 801059a:	9219      	str	r2, [sp, #100]	@ 0x64
 801059c:	785b      	ldrb	r3, [r3, #1]
 801059e:	2b30      	cmp	r3, #48	@ 0x30
 80105a0:	d0f9      	beq.n	8010596 <_strtod_l+0x126>
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d09d      	beq.n	80104e2 <_strtod_l+0x72>
 80105a6:	2301      	movs	r3, #1
 80105a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80105aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80105ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80105ae:	2300      	movs	r3, #0
 80105b0:	9308      	str	r3, [sp, #32]
 80105b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80105b4:	461f      	mov	r7, r3
 80105b6:	220a      	movs	r2, #10
 80105b8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80105ba:	7805      	ldrb	r5, [r0, #0]
 80105bc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80105c0:	b2d9      	uxtb	r1, r3
 80105c2:	2909      	cmp	r1, #9
 80105c4:	d928      	bls.n	8010618 <_strtod_l+0x1a8>
 80105c6:	494e      	ldr	r1, [pc, #312]	@ (8010700 <_strtod_l+0x290>)
 80105c8:	2201      	movs	r2, #1
 80105ca:	f7fe fa95 	bl	800eaf8 <strncmp>
 80105ce:	2800      	cmp	r0, #0
 80105d0:	d032      	beq.n	8010638 <_strtod_l+0x1c8>
 80105d2:	2000      	movs	r0, #0
 80105d4:	462a      	mov	r2, r5
 80105d6:	4681      	mov	r9, r0
 80105d8:	463d      	mov	r5, r7
 80105da:	4603      	mov	r3, r0
 80105dc:	2a65      	cmp	r2, #101	@ 0x65
 80105de:	d001      	beq.n	80105e4 <_strtod_l+0x174>
 80105e0:	2a45      	cmp	r2, #69	@ 0x45
 80105e2:	d114      	bne.n	801060e <_strtod_l+0x19e>
 80105e4:	b91d      	cbnz	r5, 80105ee <_strtod_l+0x17e>
 80105e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80105e8:	4302      	orrs	r2, r0
 80105ea:	d095      	beq.n	8010518 <_strtod_l+0xa8>
 80105ec:	2500      	movs	r5, #0
 80105ee:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80105f0:	1c62      	adds	r2, r4, #1
 80105f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80105f4:	7862      	ldrb	r2, [r4, #1]
 80105f6:	2a2b      	cmp	r2, #43	@ 0x2b
 80105f8:	d077      	beq.n	80106ea <_strtod_l+0x27a>
 80105fa:	2a2d      	cmp	r2, #45	@ 0x2d
 80105fc:	d07b      	beq.n	80106f6 <_strtod_l+0x286>
 80105fe:	f04f 0c00 	mov.w	ip, #0
 8010602:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010606:	2909      	cmp	r1, #9
 8010608:	f240 8082 	bls.w	8010710 <_strtod_l+0x2a0>
 801060c:	9419      	str	r4, [sp, #100]	@ 0x64
 801060e:	f04f 0800 	mov.w	r8, #0
 8010612:	e0a2      	b.n	801075a <_strtod_l+0x2ea>
 8010614:	2300      	movs	r3, #0
 8010616:	e7c7      	b.n	80105a8 <_strtod_l+0x138>
 8010618:	2f08      	cmp	r7, #8
 801061a:	bfd5      	itete	le
 801061c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801061e:	9908      	ldrgt	r1, [sp, #32]
 8010620:	fb02 3301 	mlale	r3, r2, r1, r3
 8010624:	fb02 3301 	mlagt	r3, r2, r1, r3
 8010628:	f100 0001 	add.w	r0, r0, #1
 801062c:	bfd4      	ite	le
 801062e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8010630:	9308      	strgt	r3, [sp, #32]
 8010632:	3701      	adds	r7, #1
 8010634:	9019      	str	r0, [sp, #100]	@ 0x64
 8010636:	e7bf      	b.n	80105b8 <_strtod_l+0x148>
 8010638:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801063a:	1c5a      	adds	r2, r3, #1
 801063c:	9219      	str	r2, [sp, #100]	@ 0x64
 801063e:	785a      	ldrb	r2, [r3, #1]
 8010640:	b37f      	cbz	r7, 80106a2 <_strtod_l+0x232>
 8010642:	4681      	mov	r9, r0
 8010644:	463d      	mov	r5, r7
 8010646:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801064a:	2b09      	cmp	r3, #9
 801064c:	d912      	bls.n	8010674 <_strtod_l+0x204>
 801064e:	2301      	movs	r3, #1
 8010650:	e7c4      	b.n	80105dc <_strtod_l+0x16c>
 8010652:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010654:	1c5a      	adds	r2, r3, #1
 8010656:	9219      	str	r2, [sp, #100]	@ 0x64
 8010658:	785a      	ldrb	r2, [r3, #1]
 801065a:	3001      	adds	r0, #1
 801065c:	2a30      	cmp	r2, #48	@ 0x30
 801065e:	d0f8      	beq.n	8010652 <_strtod_l+0x1e2>
 8010660:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8010664:	2b08      	cmp	r3, #8
 8010666:	f200 84d3 	bhi.w	8011010 <_strtod_l+0xba0>
 801066a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801066c:	930c      	str	r3, [sp, #48]	@ 0x30
 801066e:	4681      	mov	r9, r0
 8010670:	2000      	movs	r0, #0
 8010672:	4605      	mov	r5, r0
 8010674:	3a30      	subs	r2, #48	@ 0x30
 8010676:	f100 0301 	add.w	r3, r0, #1
 801067a:	d02a      	beq.n	80106d2 <_strtod_l+0x262>
 801067c:	4499      	add	r9, r3
 801067e:	eb00 0c05 	add.w	ip, r0, r5
 8010682:	462b      	mov	r3, r5
 8010684:	210a      	movs	r1, #10
 8010686:	4563      	cmp	r3, ip
 8010688:	d10d      	bne.n	80106a6 <_strtod_l+0x236>
 801068a:	1c69      	adds	r1, r5, #1
 801068c:	4401      	add	r1, r0
 801068e:	4428      	add	r0, r5
 8010690:	2808      	cmp	r0, #8
 8010692:	dc16      	bgt.n	80106c2 <_strtod_l+0x252>
 8010694:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010696:	230a      	movs	r3, #10
 8010698:	fb03 2300 	mla	r3, r3, r0, r2
 801069c:	930a      	str	r3, [sp, #40]	@ 0x28
 801069e:	2300      	movs	r3, #0
 80106a0:	e018      	b.n	80106d4 <_strtod_l+0x264>
 80106a2:	4638      	mov	r0, r7
 80106a4:	e7da      	b.n	801065c <_strtod_l+0x1ec>
 80106a6:	2b08      	cmp	r3, #8
 80106a8:	f103 0301 	add.w	r3, r3, #1
 80106ac:	dc03      	bgt.n	80106b6 <_strtod_l+0x246>
 80106ae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80106b0:	434e      	muls	r6, r1
 80106b2:	960a      	str	r6, [sp, #40]	@ 0x28
 80106b4:	e7e7      	b.n	8010686 <_strtod_l+0x216>
 80106b6:	2b10      	cmp	r3, #16
 80106b8:	bfde      	ittt	le
 80106ba:	9e08      	ldrle	r6, [sp, #32]
 80106bc:	434e      	mulle	r6, r1
 80106be:	9608      	strle	r6, [sp, #32]
 80106c0:	e7e1      	b.n	8010686 <_strtod_l+0x216>
 80106c2:	280f      	cmp	r0, #15
 80106c4:	dceb      	bgt.n	801069e <_strtod_l+0x22e>
 80106c6:	9808      	ldr	r0, [sp, #32]
 80106c8:	230a      	movs	r3, #10
 80106ca:	fb03 2300 	mla	r3, r3, r0, r2
 80106ce:	9308      	str	r3, [sp, #32]
 80106d0:	e7e5      	b.n	801069e <_strtod_l+0x22e>
 80106d2:	4629      	mov	r1, r5
 80106d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80106d6:	1c50      	adds	r0, r2, #1
 80106d8:	9019      	str	r0, [sp, #100]	@ 0x64
 80106da:	7852      	ldrb	r2, [r2, #1]
 80106dc:	4618      	mov	r0, r3
 80106de:	460d      	mov	r5, r1
 80106e0:	e7b1      	b.n	8010646 <_strtod_l+0x1d6>
 80106e2:	f04f 0900 	mov.w	r9, #0
 80106e6:	2301      	movs	r3, #1
 80106e8:	e77d      	b.n	80105e6 <_strtod_l+0x176>
 80106ea:	f04f 0c00 	mov.w	ip, #0
 80106ee:	1ca2      	adds	r2, r4, #2
 80106f0:	9219      	str	r2, [sp, #100]	@ 0x64
 80106f2:	78a2      	ldrb	r2, [r4, #2]
 80106f4:	e785      	b.n	8010602 <_strtod_l+0x192>
 80106f6:	f04f 0c01 	mov.w	ip, #1
 80106fa:	e7f8      	b.n	80106ee <_strtod_l+0x27e>
 80106fc:	08013fc8 	.word	0x08013fc8
 8010700:	08013fb0 	.word	0x08013fb0
 8010704:	7ff00000 	.word	0x7ff00000
 8010708:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801070a:	1c51      	adds	r1, r2, #1
 801070c:	9119      	str	r1, [sp, #100]	@ 0x64
 801070e:	7852      	ldrb	r2, [r2, #1]
 8010710:	2a30      	cmp	r2, #48	@ 0x30
 8010712:	d0f9      	beq.n	8010708 <_strtod_l+0x298>
 8010714:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8010718:	2908      	cmp	r1, #8
 801071a:	f63f af78 	bhi.w	801060e <_strtod_l+0x19e>
 801071e:	3a30      	subs	r2, #48	@ 0x30
 8010720:	920e      	str	r2, [sp, #56]	@ 0x38
 8010722:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010724:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010726:	f04f 080a 	mov.w	r8, #10
 801072a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801072c:	1c56      	adds	r6, r2, #1
 801072e:	9619      	str	r6, [sp, #100]	@ 0x64
 8010730:	7852      	ldrb	r2, [r2, #1]
 8010732:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8010736:	f1be 0f09 	cmp.w	lr, #9
 801073a:	d939      	bls.n	80107b0 <_strtod_l+0x340>
 801073c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801073e:	1a76      	subs	r6, r6, r1
 8010740:	2e08      	cmp	r6, #8
 8010742:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8010746:	dc03      	bgt.n	8010750 <_strtod_l+0x2e0>
 8010748:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801074a:	4588      	cmp	r8, r1
 801074c:	bfa8      	it	ge
 801074e:	4688      	movge	r8, r1
 8010750:	f1bc 0f00 	cmp.w	ip, #0
 8010754:	d001      	beq.n	801075a <_strtod_l+0x2ea>
 8010756:	f1c8 0800 	rsb	r8, r8, #0
 801075a:	2d00      	cmp	r5, #0
 801075c:	d14e      	bne.n	80107fc <_strtod_l+0x38c>
 801075e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010760:	4308      	orrs	r0, r1
 8010762:	f47f aebe 	bne.w	80104e2 <_strtod_l+0x72>
 8010766:	2b00      	cmp	r3, #0
 8010768:	f47f aed6 	bne.w	8010518 <_strtod_l+0xa8>
 801076c:	2a69      	cmp	r2, #105	@ 0x69
 801076e:	d028      	beq.n	80107c2 <_strtod_l+0x352>
 8010770:	dc25      	bgt.n	80107be <_strtod_l+0x34e>
 8010772:	2a49      	cmp	r2, #73	@ 0x49
 8010774:	d025      	beq.n	80107c2 <_strtod_l+0x352>
 8010776:	2a4e      	cmp	r2, #78	@ 0x4e
 8010778:	f47f aece 	bne.w	8010518 <_strtod_l+0xa8>
 801077c:	499b      	ldr	r1, [pc, #620]	@ (80109ec <_strtod_l+0x57c>)
 801077e:	a819      	add	r0, sp, #100	@ 0x64
 8010780:	f001 ff22 	bl	80125c8 <__match>
 8010784:	2800      	cmp	r0, #0
 8010786:	f43f aec7 	beq.w	8010518 <_strtod_l+0xa8>
 801078a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801078c:	781b      	ldrb	r3, [r3, #0]
 801078e:	2b28      	cmp	r3, #40	@ 0x28
 8010790:	d12e      	bne.n	80107f0 <_strtod_l+0x380>
 8010792:	4997      	ldr	r1, [pc, #604]	@ (80109f0 <_strtod_l+0x580>)
 8010794:	aa1c      	add	r2, sp, #112	@ 0x70
 8010796:	a819      	add	r0, sp, #100	@ 0x64
 8010798:	f001 ff2a 	bl	80125f0 <__hexnan>
 801079c:	2805      	cmp	r0, #5
 801079e:	d127      	bne.n	80107f0 <_strtod_l+0x380>
 80107a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80107a2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80107a6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80107aa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80107ae:	e698      	b.n	80104e2 <_strtod_l+0x72>
 80107b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80107b2:	fb08 2101 	mla	r1, r8, r1, r2
 80107b6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80107ba:	920e      	str	r2, [sp, #56]	@ 0x38
 80107bc:	e7b5      	b.n	801072a <_strtod_l+0x2ba>
 80107be:	2a6e      	cmp	r2, #110	@ 0x6e
 80107c0:	e7da      	b.n	8010778 <_strtod_l+0x308>
 80107c2:	498c      	ldr	r1, [pc, #560]	@ (80109f4 <_strtod_l+0x584>)
 80107c4:	a819      	add	r0, sp, #100	@ 0x64
 80107c6:	f001 feff 	bl	80125c8 <__match>
 80107ca:	2800      	cmp	r0, #0
 80107cc:	f43f aea4 	beq.w	8010518 <_strtod_l+0xa8>
 80107d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80107d2:	4989      	ldr	r1, [pc, #548]	@ (80109f8 <_strtod_l+0x588>)
 80107d4:	3b01      	subs	r3, #1
 80107d6:	a819      	add	r0, sp, #100	@ 0x64
 80107d8:	9319      	str	r3, [sp, #100]	@ 0x64
 80107da:	f001 fef5 	bl	80125c8 <__match>
 80107de:	b910      	cbnz	r0, 80107e6 <_strtod_l+0x376>
 80107e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80107e2:	3301      	adds	r3, #1
 80107e4:	9319      	str	r3, [sp, #100]	@ 0x64
 80107e6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8010a08 <_strtod_l+0x598>
 80107ea:	f04f 0a00 	mov.w	sl, #0
 80107ee:	e678      	b.n	80104e2 <_strtod_l+0x72>
 80107f0:	4882      	ldr	r0, [pc, #520]	@ (80109fc <_strtod_l+0x58c>)
 80107f2:	f001 fc25 	bl	8012040 <nan>
 80107f6:	ec5b ab10 	vmov	sl, fp, d0
 80107fa:	e672      	b.n	80104e2 <_strtod_l+0x72>
 80107fc:	eba8 0309 	sub.w	r3, r8, r9
 8010800:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010802:	9309      	str	r3, [sp, #36]	@ 0x24
 8010804:	2f00      	cmp	r7, #0
 8010806:	bf08      	it	eq
 8010808:	462f      	moveq	r7, r5
 801080a:	2d10      	cmp	r5, #16
 801080c:	462c      	mov	r4, r5
 801080e:	bfa8      	it	ge
 8010810:	2410      	movge	r4, #16
 8010812:	f7ef fe7f 	bl	8000514 <__aeabi_ui2d>
 8010816:	2d09      	cmp	r5, #9
 8010818:	4682      	mov	sl, r0
 801081a:	468b      	mov	fp, r1
 801081c:	dc13      	bgt.n	8010846 <_strtod_l+0x3d6>
 801081e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010820:	2b00      	cmp	r3, #0
 8010822:	f43f ae5e 	beq.w	80104e2 <_strtod_l+0x72>
 8010826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010828:	dd78      	ble.n	801091c <_strtod_l+0x4ac>
 801082a:	2b16      	cmp	r3, #22
 801082c:	dc5f      	bgt.n	80108ee <_strtod_l+0x47e>
 801082e:	4974      	ldr	r1, [pc, #464]	@ (8010a00 <_strtod_l+0x590>)
 8010830:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010834:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010838:	4652      	mov	r2, sl
 801083a:	465b      	mov	r3, fp
 801083c:	f7ef fee4 	bl	8000608 <__aeabi_dmul>
 8010840:	4682      	mov	sl, r0
 8010842:	468b      	mov	fp, r1
 8010844:	e64d      	b.n	80104e2 <_strtod_l+0x72>
 8010846:	4b6e      	ldr	r3, [pc, #440]	@ (8010a00 <_strtod_l+0x590>)
 8010848:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801084c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010850:	f7ef feda 	bl	8000608 <__aeabi_dmul>
 8010854:	4682      	mov	sl, r0
 8010856:	9808      	ldr	r0, [sp, #32]
 8010858:	468b      	mov	fp, r1
 801085a:	f7ef fe5b 	bl	8000514 <__aeabi_ui2d>
 801085e:	4602      	mov	r2, r0
 8010860:	460b      	mov	r3, r1
 8010862:	4650      	mov	r0, sl
 8010864:	4659      	mov	r1, fp
 8010866:	f7ef fd19 	bl	800029c <__adddf3>
 801086a:	2d0f      	cmp	r5, #15
 801086c:	4682      	mov	sl, r0
 801086e:	468b      	mov	fp, r1
 8010870:	ddd5      	ble.n	801081e <_strtod_l+0x3ae>
 8010872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010874:	1b2c      	subs	r4, r5, r4
 8010876:	441c      	add	r4, r3
 8010878:	2c00      	cmp	r4, #0
 801087a:	f340 8096 	ble.w	80109aa <_strtod_l+0x53a>
 801087e:	f014 030f 	ands.w	r3, r4, #15
 8010882:	d00a      	beq.n	801089a <_strtod_l+0x42a>
 8010884:	495e      	ldr	r1, [pc, #376]	@ (8010a00 <_strtod_l+0x590>)
 8010886:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801088a:	4652      	mov	r2, sl
 801088c:	465b      	mov	r3, fp
 801088e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010892:	f7ef feb9 	bl	8000608 <__aeabi_dmul>
 8010896:	4682      	mov	sl, r0
 8010898:	468b      	mov	fp, r1
 801089a:	f034 040f 	bics.w	r4, r4, #15
 801089e:	d073      	beq.n	8010988 <_strtod_l+0x518>
 80108a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80108a4:	dd48      	ble.n	8010938 <_strtod_l+0x4c8>
 80108a6:	2400      	movs	r4, #0
 80108a8:	46a0      	mov	r8, r4
 80108aa:	940a      	str	r4, [sp, #40]	@ 0x28
 80108ac:	46a1      	mov	r9, r4
 80108ae:	9a05      	ldr	r2, [sp, #20]
 80108b0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8010a08 <_strtod_l+0x598>
 80108b4:	2322      	movs	r3, #34	@ 0x22
 80108b6:	6013      	str	r3, [r2, #0]
 80108b8:	f04f 0a00 	mov.w	sl, #0
 80108bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80108be:	2b00      	cmp	r3, #0
 80108c0:	f43f ae0f 	beq.w	80104e2 <_strtod_l+0x72>
 80108c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80108c6:	9805      	ldr	r0, [sp, #20]
 80108c8:	f7ff f942 	bl	800fb50 <_Bfree>
 80108cc:	9805      	ldr	r0, [sp, #20]
 80108ce:	4649      	mov	r1, r9
 80108d0:	f7ff f93e 	bl	800fb50 <_Bfree>
 80108d4:	9805      	ldr	r0, [sp, #20]
 80108d6:	4641      	mov	r1, r8
 80108d8:	f7ff f93a 	bl	800fb50 <_Bfree>
 80108dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80108de:	9805      	ldr	r0, [sp, #20]
 80108e0:	f7ff f936 	bl	800fb50 <_Bfree>
 80108e4:	9805      	ldr	r0, [sp, #20]
 80108e6:	4621      	mov	r1, r4
 80108e8:	f7ff f932 	bl	800fb50 <_Bfree>
 80108ec:	e5f9      	b.n	80104e2 <_strtod_l+0x72>
 80108ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80108f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80108f4:	4293      	cmp	r3, r2
 80108f6:	dbbc      	blt.n	8010872 <_strtod_l+0x402>
 80108f8:	4c41      	ldr	r4, [pc, #260]	@ (8010a00 <_strtod_l+0x590>)
 80108fa:	f1c5 050f 	rsb	r5, r5, #15
 80108fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010902:	4652      	mov	r2, sl
 8010904:	465b      	mov	r3, fp
 8010906:	e9d1 0100 	ldrd	r0, r1, [r1]
 801090a:	f7ef fe7d 	bl	8000608 <__aeabi_dmul>
 801090e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010910:	1b5d      	subs	r5, r3, r5
 8010912:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010916:	e9d4 2300 	ldrd	r2, r3, [r4]
 801091a:	e78f      	b.n	801083c <_strtod_l+0x3cc>
 801091c:	3316      	adds	r3, #22
 801091e:	dba8      	blt.n	8010872 <_strtod_l+0x402>
 8010920:	4b37      	ldr	r3, [pc, #220]	@ (8010a00 <_strtod_l+0x590>)
 8010922:	eba9 0808 	sub.w	r8, r9, r8
 8010926:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801092a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801092e:	4650      	mov	r0, sl
 8010930:	4659      	mov	r1, fp
 8010932:	f7ef ff93 	bl	800085c <__aeabi_ddiv>
 8010936:	e783      	b.n	8010840 <_strtod_l+0x3d0>
 8010938:	4b32      	ldr	r3, [pc, #200]	@ (8010a04 <_strtod_l+0x594>)
 801093a:	9308      	str	r3, [sp, #32]
 801093c:	2300      	movs	r3, #0
 801093e:	1124      	asrs	r4, r4, #4
 8010940:	4650      	mov	r0, sl
 8010942:	4659      	mov	r1, fp
 8010944:	461e      	mov	r6, r3
 8010946:	2c01      	cmp	r4, #1
 8010948:	dc21      	bgt.n	801098e <_strtod_l+0x51e>
 801094a:	b10b      	cbz	r3, 8010950 <_strtod_l+0x4e0>
 801094c:	4682      	mov	sl, r0
 801094e:	468b      	mov	fp, r1
 8010950:	492c      	ldr	r1, [pc, #176]	@ (8010a04 <_strtod_l+0x594>)
 8010952:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010956:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801095a:	4652      	mov	r2, sl
 801095c:	465b      	mov	r3, fp
 801095e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010962:	f7ef fe51 	bl	8000608 <__aeabi_dmul>
 8010966:	4b28      	ldr	r3, [pc, #160]	@ (8010a08 <_strtod_l+0x598>)
 8010968:	460a      	mov	r2, r1
 801096a:	400b      	ands	r3, r1
 801096c:	4927      	ldr	r1, [pc, #156]	@ (8010a0c <_strtod_l+0x59c>)
 801096e:	428b      	cmp	r3, r1
 8010970:	4682      	mov	sl, r0
 8010972:	d898      	bhi.n	80108a6 <_strtod_l+0x436>
 8010974:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8010978:	428b      	cmp	r3, r1
 801097a:	bf86      	itte	hi
 801097c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8010a10 <_strtod_l+0x5a0>
 8010980:	f04f 3aff 	movhi.w	sl, #4294967295
 8010984:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8010988:	2300      	movs	r3, #0
 801098a:	9308      	str	r3, [sp, #32]
 801098c:	e07a      	b.n	8010a84 <_strtod_l+0x614>
 801098e:	07e2      	lsls	r2, r4, #31
 8010990:	d505      	bpl.n	801099e <_strtod_l+0x52e>
 8010992:	9b08      	ldr	r3, [sp, #32]
 8010994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010998:	f7ef fe36 	bl	8000608 <__aeabi_dmul>
 801099c:	2301      	movs	r3, #1
 801099e:	9a08      	ldr	r2, [sp, #32]
 80109a0:	3208      	adds	r2, #8
 80109a2:	3601      	adds	r6, #1
 80109a4:	1064      	asrs	r4, r4, #1
 80109a6:	9208      	str	r2, [sp, #32]
 80109a8:	e7cd      	b.n	8010946 <_strtod_l+0x4d6>
 80109aa:	d0ed      	beq.n	8010988 <_strtod_l+0x518>
 80109ac:	4264      	negs	r4, r4
 80109ae:	f014 020f 	ands.w	r2, r4, #15
 80109b2:	d00a      	beq.n	80109ca <_strtod_l+0x55a>
 80109b4:	4b12      	ldr	r3, [pc, #72]	@ (8010a00 <_strtod_l+0x590>)
 80109b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80109ba:	4650      	mov	r0, sl
 80109bc:	4659      	mov	r1, fp
 80109be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109c2:	f7ef ff4b 	bl	800085c <__aeabi_ddiv>
 80109c6:	4682      	mov	sl, r0
 80109c8:	468b      	mov	fp, r1
 80109ca:	1124      	asrs	r4, r4, #4
 80109cc:	d0dc      	beq.n	8010988 <_strtod_l+0x518>
 80109ce:	2c1f      	cmp	r4, #31
 80109d0:	dd20      	ble.n	8010a14 <_strtod_l+0x5a4>
 80109d2:	2400      	movs	r4, #0
 80109d4:	46a0      	mov	r8, r4
 80109d6:	940a      	str	r4, [sp, #40]	@ 0x28
 80109d8:	46a1      	mov	r9, r4
 80109da:	9a05      	ldr	r2, [sp, #20]
 80109dc:	2322      	movs	r3, #34	@ 0x22
 80109de:	f04f 0a00 	mov.w	sl, #0
 80109e2:	f04f 0b00 	mov.w	fp, #0
 80109e6:	6013      	str	r3, [r2, #0]
 80109e8:	e768      	b.n	80108bc <_strtod_l+0x44c>
 80109ea:	bf00      	nop
 80109ec:	08013da1 	.word	0x08013da1
 80109f0:	08013fb4 	.word	0x08013fb4
 80109f4:	08013d99 	.word	0x08013d99
 80109f8:	08013dce 	.word	0x08013dce
 80109fc:	08014178 	.word	0x08014178
 8010a00:	08013ee8 	.word	0x08013ee8
 8010a04:	08013ec0 	.word	0x08013ec0
 8010a08:	7ff00000 	.word	0x7ff00000
 8010a0c:	7ca00000 	.word	0x7ca00000
 8010a10:	7fefffff 	.word	0x7fefffff
 8010a14:	f014 0310 	ands.w	r3, r4, #16
 8010a18:	bf18      	it	ne
 8010a1a:	236a      	movne	r3, #106	@ 0x6a
 8010a1c:	4ea9      	ldr	r6, [pc, #676]	@ (8010cc4 <_strtod_l+0x854>)
 8010a1e:	9308      	str	r3, [sp, #32]
 8010a20:	4650      	mov	r0, sl
 8010a22:	4659      	mov	r1, fp
 8010a24:	2300      	movs	r3, #0
 8010a26:	07e2      	lsls	r2, r4, #31
 8010a28:	d504      	bpl.n	8010a34 <_strtod_l+0x5c4>
 8010a2a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010a2e:	f7ef fdeb 	bl	8000608 <__aeabi_dmul>
 8010a32:	2301      	movs	r3, #1
 8010a34:	1064      	asrs	r4, r4, #1
 8010a36:	f106 0608 	add.w	r6, r6, #8
 8010a3a:	d1f4      	bne.n	8010a26 <_strtod_l+0x5b6>
 8010a3c:	b10b      	cbz	r3, 8010a42 <_strtod_l+0x5d2>
 8010a3e:	4682      	mov	sl, r0
 8010a40:	468b      	mov	fp, r1
 8010a42:	9b08      	ldr	r3, [sp, #32]
 8010a44:	b1b3      	cbz	r3, 8010a74 <_strtod_l+0x604>
 8010a46:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010a4a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	4659      	mov	r1, fp
 8010a52:	dd0f      	ble.n	8010a74 <_strtod_l+0x604>
 8010a54:	2b1f      	cmp	r3, #31
 8010a56:	dd55      	ble.n	8010b04 <_strtod_l+0x694>
 8010a58:	2b34      	cmp	r3, #52	@ 0x34
 8010a5a:	bfde      	ittt	le
 8010a5c:	f04f 33ff 	movle.w	r3, #4294967295
 8010a60:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8010a64:	4093      	lslle	r3, r2
 8010a66:	f04f 0a00 	mov.w	sl, #0
 8010a6a:	bfcc      	ite	gt
 8010a6c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8010a70:	ea03 0b01 	andle.w	fp, r3, r1
 8010a74:	2200      	movs	r2, #0
 8010a76:	2300      	movs	r3, #0
 8010a78:	4650      	mov	r0, sl
 8010a7a:	4659      	mov	r1, fp
 8010a7c:	f7f0 f82c 	bl	8000ad8 <__aeabi_dcmpeq>
 8010a80:	2800      	cmp	r0, #0
 8010a82:	d1a6      	bne.n	80109d2 <_strtod_l+0x562>
 8010a84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a86:	9300      	str	r3, [sp, #0]
 8010a88:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010a8a:	9805      	ldr	r0, [sp, #20]
 8010a8c:	462b      	mov	r3, r5
 8010a8e:	463a      	mov	r2, r7
 8010a90:	f7ff f8c6 	bl	800fc20 <__s2b>
 8010a94:	900a      	str	r0, [sp, #40]	@ 0x28
 8010a96:	2800      	cmp	r0, #0
 8010a98:	f43f af05 	beq.w	80108a6 <_strtod_l+0x436>
 8010a9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010a9e:	2a00      	cmp	r2, #0
 8010aa0:	eba9 0308 	sub.w	r3, r9, r8
 8010aa4:	bfa8      	it	ge
 8010aa6:	2300      	movge	r3, #0
 8010aa8:	9312      	str	r3, [sp, #72]	@ 0x48
 8010aaa:	2400      	movs	r4, #0
 8010aac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010ab0:	9316      	str	r3, [sp, #88]	@ 0x58
 8010ab2:	46a0      	mov	r8, r4
 8010ab4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ab6:	9805      	ldr	r0, [sp, #20]
 8010ab8:	6859      	ldr	r1, [r3, #4]
 8010aba:	f7ff f809 	bl	800fad0 <_Balloc>
 8010abe:	4681      	mov	r9, r0
 8010ac0:	2800      	cmp	r0, #0
 8010ac2:	f43f aef4 	beq.w	80108ae <_strtod_l+0x43e>
 8010ac6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ac8:	691a      	ldr	r2, [r3, #16]
 8010aca:	3202      	adds	r2, #2
 8010acc:	f103 010c 	add.w	r1, r3, #12
 8010ad0:	0092      	lsls	r2, r2, #2
 8010ad2:	300c      	adds	r0, #12
 8010ad4:	f7fe f899 	bl	800ec0a <memcpy>
 8010ad8:	ec4b ab10 	vmov	d0, sl, fp
 8010adc:	9805      	ldr	r0, [sp, #20]
 8010ade:	aa1c      	add	r2, sp, #112	@ 0x70
 8010ae0:	a91b      	add	r1, sp, #108	@ 0x6c
 8010ae2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8010ae6:	f7ff fbd7 	bl	8010298 <__d2b>
 8010aea:	901a      	str	r0, [sp, #104]	@ 0x68
 8010aec:	2800      	cmp	r0, #0
 8010aee:	f43f aede 	beq.w	80108ae <_strtod_l+0x43e>
 8010af2:	9805      	ldr	r0, [sp, #20]
 8010af4:	2101      	movs	r1, #1
 8010af6:	f7ff f929 	bl	800fd4c <__i2b>
 8010afa:	4680      	mov	r8, r0
 8010afc:	b948      	cbnz	r0, 8010b12 <_strtod_l+0x6a2>
 8010afe:	f04f 0800 	mov.w	r8, #0
 8010b02:	e6d4      	b.n	80108ae <_strtod_l+0x43e>
 8010b04:	f04f 32ff 	mov.w	r2, #4294967295
 8010b08:	fa02 f303 	lsl.w	r3, r2, r3
 8010b0c:	ea03 0a0a 	and.w	sl, r3, sl
 8010b10:	e7b0      	b.n	8010a74 <_strtod_l+0x604>
 8010b12:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8010b14:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010b16:	2d00      	cmp	r5, #0
 8010b18:	bfab      	itete	ge
 8010b1a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8010b1c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8010b1e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010b20:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8010b22:	bfac      	ite	ge
 8010b24:	18ef      	addge	r7, r5, r3
 8010b26:	1b5e      	sublt	r6, r3, r5
 8010b28:	9b08      	ldr	r3, [sp, #32]
 8010b2a:	1aed      	subs	r5, r5, r3
 8010b2c:	4415      	add	r5, r2
 8010b2e:	4b66      	ldr	r3, [pc, #408]	@ (8010cc8 <_strtod_l+0x858>)
 8010b30:	3d01      	subs	r5, #1
 8010b32:	429d      	cmp	r5, r3
 8010b34:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010b38:	da50      	bge.n	8010bdc <_strtod_l+0x76c>
 8010b3a:	1b5b      	subs	r3, r3, r5
 8010b3c:	2b1f      	cmp	r3, #31
 8010b3e:	eba2 0203 	sub.w	r2, r2, r3
 8010b42:	f04f 0101 	mov.w	r1, #1
 8010b46:	dc3d      	bgt.n	8010bc4 <_strtod_l+0x754>
 8010b48:	fa01 f303 	lsl.w	r3, r1, r3
 8010b4c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010b4e:	2300      	movs	r3, #0
 8010b50:	9310      	str	r3, [sp, #64]	@ 0x40
 8010b52:	18bd      	adds	r5, r7, r2
 8010b54:	9b08      	ldr	r3, [sp, #32]
 8010b56:	42af      	cmp	r7, r5
 8010b58:	4416      	add	r6, r2
 8010b5a:	441e      	add	r6, r3
 8010b5c:	463b      	mov	r3, r7
 8010b5e:	bfa8      	it	ge
 8010b60:	462b      	movge	r3, r5
 8010b62:	42b3      	cmp	r3, r6
 8010b64:	bfa8      	it	ge
 8010b66:	4633      	movge	r3, r6
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	bfc2      	ittt	gt
 8010b6c:	1aed      	subgt	r5, r5, r3
 8010b6e:	1af6      	subgt	r6, r6, r3
 8010b70:	1aff      	subgt	r7, r7, r3
 8010b72:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	dd16      	ble.n	8010ba6 <_strtod_l+0x736>
 8010b78:	4641      	mov	r1, r8
 8010b7a:	9805      	ldr	r0, [sp, #20]
 8010b7c:	461a      	mov	r2, r3
 8010b7e:	f7ff f9a5 	bl	800fecc <__pow5mult>
 8010b82:	4680      	mov	r8, r0
 8010b84:	2800      	cmp	r0, #0
 8010b86:	d0ba      	beq.n	8010afe <_strtod_l+0x68e>
 8010b88:	4601      	mov	r1, r0
 8010b8a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010b8c:	9805      	ldr	r0, [sp, #20]
 8010b8e:	f7ff f8f3 	bl	800fd78 <__multiply>
 8010b92:	900e      	str	r0, [sp, #56]	@ 0x38
 8010b94:	2800      	cmp	r0, #0
 8010b96:	f43f ae8a 	beq.w	80108ae <_strtod_l+0x43e>
 8010b9a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010b9c:	9805      	ldr	r0, [sp, #20]
 8010b9e:	f7fe ffd7 	bl	800fb50 <_Bfree>
 8010ba2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ba4:	931a      	str	r3, [sp, #104]	@ 0x68
 8010ba6:	2d00      	cmp	r5, #0
 8010ba8:	dc1d      	bgt.n	8010be6 <_strtod_l+0x776>
 8010baa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	dd23      	ble.n	8010bf8 <_strtod_l+0x788>
 8010bb0:	4649      	mov	r1, r9
 8010bb2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010bb4:	9805      	ldr	r0, [sp, #20]
 8010bb6:	f7ff f989 	bl	800fecc <__pow5mult>
 8010bba:	4681      	mov	r9, r0
 8010bbc:	b9e0      	cbnz	r0, 8010bf8 <_strtod_l+0x788>
 8010bbe:	f04f 0900 	mov.w	r9, #0
 8010bc2:	e674      	b.n	80108ae <_strtod_l+0x43e>
 8010bc4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8010bc8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8010bcc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010bd0:	35e2      	adds	r5, #226	@ 0xe2
 8010bd2:	fa01 f305 	lsl.w	r3, r1, r5
 8010bd6:	9310      	str	r3, [sp, #64]	@ 0x40
 8010bd8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010bda:	e7ba      	b.n	8010b52 <_strtod_l+0x6e2>
 8010bdc:	2300      	movs	r3, #0
 8010bde:	9310      	str	r3, [sp, #64]	@ 0x40
 8010be0:	2301      	movs	r3, #1
 8010be2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010be4:	e7b5      	b.n	8010b52 <_strtod_l+0x6e2>
 8010be6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010be8:	9805      	ldr	r0, [sp, #20]
 8010bea:	462a      	mov	r2, r5
 8010bec:	f7ff f9c8 	bl	800ff80 <__lshift>
 8010bf0:	901a      	str	r0, [sp, #104]	@ 0x68
 8010bf2:	2800      	cmp	r0, #0
 8010bf4:	d1d9      	bne.n	8010baa <_strtod_l+0x73a>
 8010bf6:	e65a      	b.n	80108ae <_strtod_l+0x43e>
 8010bf8:	2e00      	cmp	r6, #0
 8010bfa:	dd07      	ble.n	8010c0c <_strtod_l+0x79c>
 8010bfc:	4649      	mov	r1, r9
 8010bfe:	9805      	ldr	r0, [sp, #20]
 8010c00:	4632      	mov	r2, r6
 8010c02:	f7ff f9bd 	bl	800ff80 <__lshift>
 8010c06:	4681      	mov	r9, r0
 8010c08:	2800      	cmp	r0, #0
 8010c0a:	d0d8      	beq.n	8010bbe <_strtod_l+0x74e>
 8010c0c:	2f00      	cmp	r7, #0
 8010c0e:	dd08      	ble.n	8010c22 <_strtod_l+0x7b2>
 8010c10:	4641      	mov	r1, r8
 8010c12:	9805      	ldr	r0, [sp, #20]
 8010c14:	463a      	mov	r2, r7
 8010c16:	f7ff f9b3 	bl	800ff80 <__lshift>
 8010c1a:	4680      	mov	r8, r0
 8010c1c:	2800      	cmp	r0, #0
 8010c1e:	f43f ae46 	beq.w	80108ae <_strtod_l+0x43e>
 8010c22:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010c24:	9805      	ldr	r0, [sp, #20]
 8010c26:	464a      	mov	r2, r9
 8010c28:	f7ff fa32 	bl	8010090 <__mdiff>
 8010c2c:	4604      	mov	r4, r0
 8010c2e:	2800      	cmp	r0, #0
 8010c30:	f43f ae3d 	beq.w	80108ae <_strtod_l+0x43e>
 8010c34:	68c3      	ldr	r3, [r0, #12]
 8010c36:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010c38:	2300      	movs	r3, #0
 8010c3a:	60c3      	str	r3, [r0, #12]
 8010c3c:	4641      	mov	r1, r8
 8010c3e:	f7ff fa0b 	bl	8010058 <__mcmp>
 8010c42:	2800      	cmp	r0, #0
 8010c44:	da46      	bge.n	8010cd4 <_strtod_l+0x864>
 8010c46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c48:	ea53 030a 	orrs.w	r3, r3, sl
 8010c4c:	d16c      	bne.n	8010d28 <_strtod_l+0x8b8>
 8010c4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d168      	bne.n	8010d28 <_strtod_l+0x8b8>
 8010c56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010c5a:	0d1b      	lsrs	r3, r3, #20
 8010c5c:	051b      	lsls	r3, r3, #20
 8010c5e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010c62:	d961      	bls.n	8010d28 <_strtod_l+0x8b8>
 8010c64:	6963      	ldr	r3, [r4, #20]
 8010c66:	b913      	cbnz	r3, 8010c6e <_strtod_l+0x7fe>
 8010c68:	6923      	ldr	r3, [r4, #16]
 8010c6a:	2b01      	cmp	r3, #1
 8010c6c:	dd5c      	ble.n	8010d28 <_strtod_l+0x8b8>
 8010c6e:	4621      	mov	r1, r4
 8010c70:	2201      	movs	r2, #1
 8010c72:	9805      	ldr	r0, [sp, #20]
 8010c74:	f7ff f984 	bl	800ff80 <__lshift>
 8010c78:	4641      	mov	r1, r8
 8010c7a:	4604      	mov	r4, r0
 8010c7c:	f7ff f9ec 	bl	8010058 <__mcmp>
 8010c80:	2800      	cmp	r0, #0
 8010c82:	dd51      	ble.n	8010d28 <_strtod_l+0x8b8>
 8010c84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010c88:	9a08      	ldr	r2, [sp, #32]
 8010c8a:	0d1b      	lsrs	r3, r3, #20
 8010c8c:	051b      	lsls	r3, r3, #20
 8010c8e:	2a00      	cmp	r2, #0
 8010c90:	d06b      	beq.n	8010d6a <_strtod_l+0x8fa>
 8010c92:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010c96:	d868      	bhi.n	8010d6a <_strtod_l+0x8fa>
 8010c98:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8010c9c:	f67f ae9d 	bls.w	80109da <_strtod_l+0x56a>
 8010ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8010ccc <_strtod_l+0x85c>)
 8010ca2:	4650      	mov	r0, sl
 8010ca4:	4659      	mov	r1, fp
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	f7ef fcae 	bl	8000608 <__aeabi_dmul>
 8010cac:	4b08      	ldr	r3, [pc, #32]	@ (8010cd0 <_strtod_l+0x860>)
 8010cae:	400b      	ands	r3, r1
 8010cb0:	4682      	mov	sl, r0
 8010cb2:	468b      	mov	fp, r1
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	f47f ae05 	bne.w	80108c4 <_strtod_l+0x454>
 8010cba:	9a05      	ldr	r2, [sp, #20]
 8010cbc:	2322      	movs	r3, #34	@ 0x22
 8010cbe:	6013      	str	r3, [r2, #0]
 8010cc0:	e600      	b.n	80108c4 <_strtod_l+0x454>
 8010cc2:	bf00      	nop
 8010cc4:	08013fe0 	.word	0x08013fe0
 8010cc8:	fffffc02 	.word	0xfffffc02
 8010ccc:	39500000 	.word	0x39500000
 8010cd0:	7ff00000 	.word	0x7ff00000
 8010cd4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010cd8:	d165      	bne.n	8010da6 <_strtod_l+0x936>
 8010cda:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010cdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010ce0:	b35a      	cbz	r2, 8010d3a <_strtod_l+0x8ca>
 8010ce2:	4a9f      	ldr	r2, [pc, #636]	@ (8010f60 <_strtod_l+0xaf0>)
 8010ce4:	4293      	cmp	r3, r2
 8010ce6:	d12b      	bne.n	8010d40 <_strtod_l+0x8d0>
 8010ce8:	9b08      	ldr	r3, [sp, #32]
 8010cea:	4651      	mov	r1, sl
 8010cec:	b303      	cbz	r3, 8010d30 <_strtod_l+0x8c0>
 8010cee:	4b9d      	ldr	r3, [pc, #628]	@ (8010f64 <_strtod_l+0xaf4>)
 8010cf0:	465a      	mov	r2, fp
 8010cf2:	4013      	ands	r3, r2
 8010cf4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8010cfc:	d81b      	bhi.n	8010d36 <_strtod_l+0x8c6>
 8010cfe:	0d1b      	lsrs	r3, r3, #20
 8010d00:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010d04:	fa02 f303 	lsl.w	r3, r2, r3
 8010d08:	4299      	cmp	r1, r3
 8010d0a:	d119      	bne.n	8010d40 <_strtod_l+0x8d0>
 8010d0c:	4b96      	ldr	r3, [pc, #600]	@ (8010f68 <_strtod_l+0xaf8>)
 8010d0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010d10:	429a      	cmp	r2, r3
 8010d12:	d102      	bne.n	8010d1a <_strtod_l+0x8aa>
 8010d14:	3101      	adds	r1, #1
 8010d16:	f43f adca 	beq.w	80108ae <_strtod_l+0x43e>
 8010d1a:	4b92      	ldr	r3, [pc, #584]	@ (8010f64 <_strtod_l+0xaf4>)
 8010d1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010d1e:	401a      	ands	r2, r3
 8010d20:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8010d24:	f04f 0a00 	mov.w	sl, #0
 8010d28:	9b08      	ldr	r3, [sp, #32]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d1b8      	bne.n	8010ca0 <_strtod_l+0x830>
 8010d2e:	e5c9      	b.n	80108c4 <_strtod_l+0x454>
 8010d30:	f04f 33ff 	mov.w	r3, #4294967295
 8010d34:	e7e8      	b.n	8010d08 <_strtod_l+0x898>
 8010d36:	4613      	mov	r3, r2
 8010d38:	e7e6      	b.n	8010d08 <_strtod_l+0x898>
 8010d3a:	ea53 030a 	orrs.w	r3, r3, sl
 8010d3e:	d0a1      	beq.n	8010c84 <_strtod_l+0x814>
 8010d40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010d42:	b1db      	cbz	r3, 8010d7c <_strtod_l+0x90c>
 8010d44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010d46:	4213      	tst	r3, r2
 8010d48:	d0ee      	beq.n	8010d28 <_strtod_l+0x8b8>
 8010d4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d4c:	9a08      	ldr	r2, [sp, #32]
 8010d4e:	4650      	mov	r0, sl
 8010d50:	4659      	mov	r1, fp
 8010d52:	b1bb      	cbz	r3, 8010d84 <_strtod_l+0x914>
 8010d54:	f7ff fb6e 	bl	8010434 <sulp>
 8010d58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010d5c:	ec53 2b10 	vmov	r2, r3, d0
 8010d60:	f7ef fa9c 	bl	800029c <__adddf3>
 8010d64:	4682      	mov	sl, r0
 8010d66:	468b      	mov	fp, r1
 8010d68:	e7de      	b.n	8010d28 <_strtod_l+0x8b8>
 8010d6a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010d6e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010d72:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010d76:	f04f 3aff 	mov.w	sl, #4294967295
 8010d7a:	e7d5      	b.n	8010d28 <_strtod_l+0x8b8>
 8010d7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010d7e:	ea13 0f0a 	tst.w	r3, sl
 8010d82:	e7e1      	b.n	8010d48 <_strtod_l+0x8d8>
 8010d84:	f7ff fb56 	bl	8010434 <sulp>
 8010d88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010d8c:	ec53 2b10 	vmov	r2, r3, d0
 8010d90:	f7ef fa82 	bl	8000298 <__aeabi_dsub>
 8010d94:	2200      	movs	r2, #0
 8010d96:	2300      	movs	r3, #0
 8010d98:	4682      	mov	sl, r0
 8010d9a:	468b      	mov	fp, r1
 8010d9c:	f7ef fe9c 	bl	8000ad8 <__aeabi_dcmpeq>
 8010da0:	2800      	cmp	r0, #0
 8010da2:	d0c1      	beq.n	8010d28 <_strtod_l+0x8b8>
 8010da4:	e619      	b.n	80109da <_strtod_l+0x56a>
 8010da6:	4641      	mov	r1, r8
 8010da8:	4620      	mov	r0, r4
 8010daa:	f7ff facd 	bl	8010348 <__ratio>
 8010dae:	ec57 6b10 	vmov	r6, r7, d0
 8010db2:	2200      	movs	r2, #0
 8010db4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010db8:	4630      	mov	r0, r6
 8010dba:	4639      	mov	r1, r7
 8010dbc:	f7ef fea0 	bl	8000b00 <__aeabi_dcmple>
 8010dc0:	2800      	cmp	r0, #0
 8010dc2:	d06f      	beq.n	8010ea4 <_strtod_l+0xa34>
 8010dc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d17a      	bne.n	8010ec0 <_strtod_l+0xa50>
 8010dca:	f1ba 0f00 	cmp.w	sl, #0
 8010dce:	d158      	bne.n	8010e82 <_strtod_l+0xa12>
 8010dd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010dd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d15a      	bne.n	8010e90 <_strtod_l+0xa20>
 8010dda:	4b64      	ldr	r3, [pc, #400]	@ (8010f6c <_strtod_l+0xafc>)
 8010ddc:	2200      	movs	r2, #0
 8010dde:	4630      	mov	r0, r6
 8010de0:	4639      	mov	r1, r7
 8010de2:	f7ef fe83 	bl	8000aec <__aeabi_dcmplt>
 8010de6:	2800      	cmp	r0, #0
 8010de8:	d159      	bne.n	8010e9e <_strtod_l+0xa2e>
 8010dea:	4630      	mov	r0, r6
 8010dec:	4639      	mov	r1, r7
 8010dee:	4b60      	ldr	r3, [pc, #384]	@ (8010f70 <_strtod_l+0xb00>)
 8010df0:	2200      	movs	r2, #0
 8010df2:	f7ef fc09 	bl	8000608 <__aeabi_dmul>
 8010df6:	4606      	mov	r6, r0
 8010df8:	460f      	mov	r7, r1
 8010dfa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8010dfe:	9606      	str	r6, [sp, #24]
 8010e00:	9307      	str	r3, [sp, #28]
 8010e02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010e06:	4d57      	ldr	r5, [pc, #348]	@ (8010f64 <_strtod_l+0xaf4>)
 8010e08:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010e0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010e0e:	401d      	ands	r5, r3
 8010e10:	4b58      	ldr	r3, [pc, #352]	@ (8010f74 <_strtod_l+0xb04>)
 8010e12:	429d      	cmp	r5, r3
 8010e14:	f040 80b2 	bne.w	8010f7c <_strtod_l+0xb0c>
 8010e18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010e1a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8010e1e:	ec4b ab10 	vmov	d0, sl, fp
 8010e22:	f7ff f9c9 	bl	80101b8 <__ulp>
 8010e26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010e2a:	ec51 0b10 	vmov	r0, r1, d0
 8010e2e:	f7ef fbeb 	bl	8000608 <__aeabi_dmul>
 8010e32:	4652      	mov	r2, sl
 8010e34:	465b      	mov	r3, fp
 8010e36:	f7ef fa31 	bl	800029c <__adddf3>
 8010e3a:	460b      	mov	r3, r1
 8010e3c:	4949      	ldr	r1, [pc, #292]	@ (8010f64 <_strtod_l+0xaf4>)
 8010e3e:	4a4e      	ldr	r2, [pc, #312]	@ (8010f78 <_strtod_l+0xb08>)
 8010e40:	4019      	ands	r1, r3
 8010e42:	4291      	cmp	r1, r2
 8010e44:	4682      	mov	sl, r0
 8010e46:	d942      	bls.n	8010ece <_strtod_l+0xa5e>
 8010e48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010e4a:	4b47      	ldr	r3, [pc, #284]	@ (8010f68 <_strtod_l+0xaf8>)
 8010e4c:	429a      	cmp	r2, r3
 8010e4e:	d103      	bne.n	8010e58 <_strtod_l+0x9e8>
 8010e50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010e52:	3301      	adds	r3, #1
 8010e54:	f43f ad2b 	beq.w	80108ae <_strtod_l+0x43e>
 8010e58:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8010f68 <_strtod_l+0xaf8>
 8010e5c:	f04f 3aff 	mov.w	sl, #4294967295
 8010e60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010e62:	9805      	ldr	r0, [sp, #20]
 8010e64:	f7fe fe74 	bl	800fb50 <_Bfree>
 8010e68:	9805      	ldr	r0, [sp, #20]
 8010e6a:	4649      	mov	r1, r9
 8010e6c:	f7fe fe70 	bl	800fb50 <_Bfree>
 8010e70:	9805      	ldr	r0, [sp, #20]
 8010e72:	4641      	mov	r1, r8
 8010e74:	f7fe fe6c 	bl	800fb50 <_Bfree>
 8010e78:	9805      	ldr	r0, [sp, #20]
 8010e7a:	4621      	mov	r1, r4
 8010e7c:	f7fe fe68 	bl	800fb50 <_Bfree>
 8010e80:	e618      	b.n	8010ab4 <_strtod_l+0x644>
 8010e82:	f1ba 0f01 	cmp.w	sl, #1
 8010e86:	d103      	bne.n	8010e90 <_strtod_l+0xa20>
 8010e88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	f43f ada5 	beq.w	80109da <_strtod_l+0x56a>
 8010e90:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8010f40 <_strtod_l+0xad0>
 8010e94:	4f35      	ldr	r7, [pc, #212]	@ (8010f6c <_strtod_l+0xafc>)
 8010e96:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010e9a:	2600      	movs	r6, #0
 8010e9c:	e7b1      	b.n	8010e02 <_strtod_l+0x992>
 8010e9e:	4f34      	ldr	r7, [pc, #208]	@ (8010f70 <_strtod_l+0xb00>)
 8010ea0:	2600      	movs	r6, #0
 8010ea2:	e7aa      	b.n	8010dfa <_strtod_l+0x98a>
 8010ea4:	4b32      	ldr	r3, [pc, #200]	@ (8010f70 <_strtod_l+0xb00>)
 8010ea6:	4630      	mov	r0, r6
 8010ea8:	4639      	mov	r1, r7
 8010eaa:	2200      	movs	r2, #0
 8010eac:	f7ef fbac 	bl	8000608 <__aeabi_dmul>
 8010eb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010eb2:	4606      	mov	r6, r0
 8010eb4:	460f      	mov	r7, r1
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d09f      	beq.n	8010dfa <_strtod_l+0x98a>
 8010eba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010ebe:	e7a0      	b.n	8010e02 <_strtod_l+0x992>
 8010ec0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010f48 <_strtod_l+0xad8>
 8010ec4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010ec8:	ec57 6b17 	vmov	r6, r7, d7
 8010ecc:	e799      	b.n	8010e02 <_strtod_l+0x992>
 8010ece:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010ed2:	9b08      	ldr	r3, [sp, #32]
 8010ed4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d1c1      	bne.n	8010e60 <_strtod_l+0x9f0>
 8010edc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010ee0:	0d1b      	lsrs	r3, r3, #20
 8010ee2:	051b      	lsls	r3, r3, #20
 8010ee4:	429d      	cmp	r5, r3
 8010ee6:	d1bb      	bne.n	8010e60 <_strtod_l+0x9f0>
 8010ee8:	4630      	mov	r0, r6
 8010eea:	4639      	mov	r1, r7
 8010eec:	f7ef feec 	bl	8000cc8 <__aeabi_d2lz>
 8010ef0:	f7ef fb5c 	bl	80005ac <__aeabi_l2d>
 8010ef4:	4602      	mov	r2, r0
 8010ef6:	460b      	mov	r3, r1
 8010ef8:	4630      	mov	r0, r6
 8010efa:	4639      	mov	r1, r7
 8010efc:	f7ef f9cc 	bl	8000298 <__aeabi_dsub>
 8010f00:	460b      	mov	r3, r1
 8010f02:	4602      	mov	r2, r0
 8010f04:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010f08:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8010f0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010f0e:	ea46 060a 	orr.w	r6, r6, sl
 8010f12:	431e      	orrs	r6, r3
 8010f14:	d06f      	beq.n	8010ff6 <_strtod_l+0xb86>
 8010f16:	a30e      	add	r3, pc, #56	@ (adr r3, 8010f50 <_strtod_l+0xae0>)
 8010f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f1c:	f7ef fde6 	bl	8000aec <__aeabi_dcmplt>
 8010f20:	2800      	cmp	r0, #0
 8010f22:	f47f accf 	bne.w	80108c4 <_strtod_l+0x454>
 8010f26:	a30c      	add	r3, pc, #48	@ (adr r3, 8010f58 <_strtod_l+0xae8>)
 8010f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010f30:	f7ef fdfa 	bl	8000b28 <__aeabi_dcmpgt>
 8010f34:	2800      	cmp	r0, #0
 8010f36:	d093      	beq.n	8010e60 <_strtod_l+0x9f0>
 8010f38:	e4c4      	b.n	80108c4 <_strtod_l+0x454>
 8010f3a:	bf00      	nop
 8010f3c:	f3af 8000 	nop.w
 8010f40:	00000000 	.word	0x00000000
 8010f44:	bff00000 	.word	0xbff00000
 8010f48:	00000000 	.word	0x00000000
 8010f4c:	3ff00000 	.word	0x3ff00000
 8010f50:	94a03595 	.word	0x94a03595
 8010f54:	3fdfffff 	.word	0x3fdfffff
 8010f58:	35afe535 	.word	0x35afe535
 8010f5c:	3fe00000 	.word	0x3fe00000
 8010f60:	000fffff 	.word	0x000fffff
 8010f64:	7ff00000 	.word	0x7ff00000
 8010f68:	7fefffff 	.word	0x7fefffff
 8010f6c:	3ff00000 	.word	0x3ff00000
 8010f70:	3fe00000 	.word	0x3fe00000
 8010f74:	7fe00000 	.word	0x7fe00000
 8010f78:	7c9fffff 	.word	0x7c9fffff
 8010f7c:	9b08      	ldr	r3, [sp, #32]
 8010f7e:	b323      	cbz	r3, 8010fca <_strtod_l+0xb5a>
 8010f80:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8010f84:	d821      	bhi.n	8010fca <_strtod_l+0xb5a>
 8010f86:	a328      	add	r3, pc, #160	@ (adr r3, 8011028 <_strtod_l+0xbb8>)
 8010f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f8c:	4630      	mov	r0, r6
 8010f8e:	4639      	mov	r1, r7
 8010f90:	f7ef fdb6 	bl	8000b00 <__aeabi_dcmple>
 8010f94:	b1a0      	cbz	r0, 8010fc0 <_strtod_l+0xb50>
 8010f96:	4639      	mov	r1, r7
 8010f98:	4630      	mov	r0, r6
 8010f9a:	f7ef fe0d 	bl	8000bb8 <__aeabi_d2uiz>
 8010f9e:	2801      	cmp	r0, #1
 8010fa0:	bf38      	it	cc
 8010fa2:	2001      	movcc	r0, #1
 8010fa4:	f7ef fab6 	bl	8000514 <__aeabi_ui2d>
 8010fa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010faa:	4606      	mov	r6, r0
 8010fac:	460f      	mov	r7, r1
 8010fae:	b9fb      	cbnz	r3, 8010ff0 <_strtod_l+0xb80>
 8010fb0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010fb4:	9014      	str	r0, [sp, #80]	@ 0x50
 8010fb6:	9315      	str	r3, [sp, #84]	@ 0x54
 8010fb8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8010fbc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010fc0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010fc2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8010fc6:	1b5b      	subs	r3, r3, r5
 8010fc8:	9311      	str	r3, [sp, #68]	@ 0x44
 8010fca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010fce:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8010fd2:	f7ff f8f1 	bl	80101b8 <__ulp>
 8010fd6:	4650      	mov	r0, sl
 8010fd8:	ec53 2b10 	vmov	r2, r3, d0
 8010fdc:	4659      	mov	r1, fp
 8010fde:	f7ef fb13 	bl	8000608 <__aeabi_dmul>
 8010fe2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010fe6:	f7ef f959 	bl	800029c <__adddf3>
 8010fea:	4682      	mov	sl, r0
 8010fec:	468b      	mov	fp, r1
 8010fee:	e770      	b.n	8010ed2 <_strtod_l+0xa62>
 8010ff0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8010ff4:	e7e0      	b.n	8010fb8 <_strtod_l+0xb48>
 8010ff6:	a30e      	add	r3, pc, #56	@ (adr r3, 8011030 <_strtod_l+0xbc0>)
 8010ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ffc:	f7ef fd76 	bl	8000aec <__aeabi_dcmplt>
 8011000:	e798      	b.n	8010f34 <_strtod_l+0xac4>
 8011002:	2300      	movs	r3, #0
 8011004:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011006:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011008:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801100a:	6013      	str	r3, [r2, #0]
 801100c:	f7ff ba6d 	b.w	80104ea <_strtod_l+0x7a>
 8011010:	2a65      	cmp	r2, #101	@ 0x65
 8011012:	f43f ab66 	beq.w	80106e2 <_strtod_l+0x272>
 8011016:	2a45      	cmp	r2, #69	@ 0x45
 8011018:	f43f ab63 	beq.w	80106e2 <_strtod_l+0x272>
 801101c:	2301      	movs	r3, #1
 801101e:	f7ff bb9e 	b.w	801075e <_strtod_l+0x2ee>
 8011022:	bf00      	nop
 8011024:	f3af 8000 	nop.w
 8011028:	ffc00000 	.word	0xffc00000
 801102c:	41dfffff 	.word	0x41dfffff
 8011030:	94a03595 	.word	0x94a03595
 8011034:	3fcfffff 	.word	0x3fcfffff

08011038 <_strtod_r>:
 8011038:	4b01      	ldr	r3, [pc, #4]	@ (8011040 <_strtod_r+0x8>)
 801103a:	f7ff ba19 	b.w	8010470 <_strtod_l>
 801103e:	bf00      	nop
 8011040:	20000070 	.word	0x20000070

08011044 <_strtol_l.constprop.0>:
 8011044:	2b24      	cmp	r3, #36	@ 0x24
 8011046:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801104a:	4686      	mov	lr, r0
 801104c:	4690      	mov	r8, r2
 801104e:	d801      	bhi.n	8011054 <_strtol_l.constprop.0+0x10>
 8011050:	2b01      	cmp	r3, #1
 8011052:	d106      	bne.n	8011062 <_strtol_l.constprop.0+0x1e>
 8011054:	f7fd fdac 	bl	800ebb0 <__errno>
 8011058:	2316      	movs	r3, #22
 801105a:	6003      	str	r3, [r0, #0]
 801105c:	2000      	movs	r0, #0
 801105e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011062:	4834      	ldr	r0, [pc, #208]	@ (8011134 <_strtol_l.constprop.0+0xf0>)
 8011064:	460d      	mov	r5, r1
 8011066:	462a      	mov	r2, r5
 8011068:	f815 4b01 	ldrb.w	r4, [r5], #1
 801106c:	5d06      	ldrb	r6, [r0, r4]
 801106e:	f016 0608 	ands.w	r6, r6, #8
 8011072:	d1f8      	bne.n	8011066 <_strtol_l.constprop.0+0x22>
 8011074:	2c2d      	cmp	r4, #45	@ 0x2d
 8011076:	d12d      	bne.n	80110d4 <_strtol_l.constprop.0+0x90>
 8011078:	782c      	ldrb	r4, [r5, #0]
 801107a:	2601      	movs	r6, #1
 801107c:	1c95      	adds	r5, r2, #2
 801107e:	f033 0210 	bics.w	r2, r3, #16
 8011082:	d109      	bne.n	8011098 <_strtol_l.constprop.0+0x54>
 8011084:	2c30      	cmp	r4, #48	@ 0x30
 8011086:	d12a      	bne.n	80110de <_strtol_l.constprop.0+0x9a>
 8011088:	782a      	ldrb	r2, [r5, #0]
 801108a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801108e:	2a58      	cmp	r2, #88	@ 0x58
 8011090:	d125      	bne.n	80110de <_strtol_l.constprop.0+0x9a>
 8011092:	786c      	ldrb	r4, [r5, #1]
 8011094:	2310      	movs	r3, #16
 8011096:	3502      	adds	r5, #2
 8011098:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801109c:	f10c 3cff 	add.w	ip, ip, #4294967295
 80110a0:	2200      	movs	r2, #0
 80110a2:	fbbc f9f3 	udiv	r9, ip, r3
 80110a6:	4610      	mov	r0, r2
 80110a8:	fb03 ca19 	mls	sl, r3, r9, ip
 80110ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80110b0:	2f09      	cmp	r7, #9
 80110b2:	d81b      	bhi.n	80110ec <_strtol_l.constprop.0+0xa8>
 80110b4:	463c      	mov	r4, r7
 80110b6:	42a3      	cmp	r3, r4
 80110b8:	dd27      	ble.n	801110a <_strtol_l.constprop.0+0xc6>
 80110ba:	1c57      	adds	r7, r2, #1
 80110bc:	d007      	beq.n	80110ce <_strtol_l.constprop.0+0x8a>
 80110be:	4581      	cmp	r9, r0
 80110c0:	d320      	bcc.n	8011104 <_strtol_l.constprop.0+0xc0>
 80110c2:	d101      	bne.n	80110c8 <_strtol_l.constprop.0+0x84>
 80110c4:	45a2      	cmp	sl, r4
 80110c6:	db1d      	blt.n	8011104 <_strtol_l.constprop.0+0xc0>
 80110c8:	fb00 4003 	mla	r0, r0, r3, r4
 80110cc:	2201      	movs	r2, #1
 80110ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80110d2:	e7eb      	b.n	80110ac <_strtol_l.constprop.0+0x68>
 80110d4:	2c2b      	cmp	r4, #43	@ 0x2b
 80110d6:	bf04      	itt	eq
 80110d8:	782c      	ldrbeq	r4, [r5, #0]
 80110da:	1c95      	addeq	r5, r2, #2
 80110dc:	e7cf      	b.n	801107e <_strtol_l.constprop.0+0x3a>
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d1da      	bne.n	8011098 <_strtol_l.constprop.0+0x54>
 80110e2:	2c30      	cmp	r4, #48	@ 0x30
 80110e4:	bf0c      	ite	eq
 80110e6:	2308      	moveq	r3, #8
 80110e8:	230a      	movne	r3, #10
 80110ea:	e7d5      	b.n	8011098 <_strtol_l.constprop.0+0x54>
 80110ec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80110f0:	2f19      	cmp	r7, #25
 80110f2:	d801      	bhi.n	80110f8 <_strtol_l.constprop.0+0xb4>
 80110f4:	3c37      	subs	r4, #55	@ 0x37
 80110f6:	e7de      	b.n	80110b6 <_strtol_l.constprop.0+0x72>
 80110f8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80110fc:	2f19      	cmp	r7, #25
 80110fe:	d804      	bhi.n	801110a <_strtol_l.constprop.0+0xc6>
 8011100:	3c57      	subs	r4, #87	@ 0x57
 8011102:	e7d8      	b.n	80110b6 <_strtol_l.constprop.0+0x72>
 8011104:	f04f 32ff 	mov.w	r2, #4294967295
 8011108:	e7e1      	b.n	80110ce <_strtol_l.constprop.0+0x8a>
 801110a:	1c53      	adds	r3, r2, #1
 801110c:	d108      	bne.n	8011120 <_strtol_l.constprop.0+0xdc>
 801110e:	2322      	movs	r3, #34	@ 0x22
 8011110:	f8ce 3000 	str.w	r3, [lr]
 8011114:	4660      	mov	r0, ip
 8011116:	f1b8 0f00 	cmp.w	r8, #0
 801111a:	d0a0      	beq.n	801105e <_strtol_l.constprop.0+0x1a>
 801111c:	1e69      	subs	r1, r5, #1
 801111e:	e006      	b.n	801112e <_strtol_l.constprop.0+0xea>
 8011120:	b106      	cbz	r6, 8011124 <_strtol_l.constprop.0+0xe0>
 8011122:	4240      	negs	r0, r0
 8011124:	f1b8 0f00 	cmp.w	r8, #0
 8011128:	d099      	beq.n	801105e <_strtol_l.constprop.0+0x1a>
 801112a:	2a00      	cmp	r2, #0
 801112c:	d1f6      	bne.n	801111c <_strtol_l.constprop.0+0xd8>
 801112e:	f8c8 1000 	str.w	r1, [r8]
 8011132:	e794      	b.n	801105e <_strtol_l.constprop.0+0x1a>
 8011134:	08014009 	.word	0x08014009

08011138 <_strtol_r>:
 8011138:	f7ff bf84 	b.w	8011044 <_strtol_l.constprop.0>

0801113c <__ssputs_r>:
 801113c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011140:	688e      	ldr	r6, [r1, #8]
 8011142:	461f      	mov	r7, r3
 8011144:	42be      	cmp	r6, r7
 8011146:	680b      	ldr	r3, [r1, #0]
 8011148:	4682      	mov	sl, r0
 801114a:	460c      	mov	r4, r1
 801114c:	4690      	mov	r8, r2
 801114e:	d82d      	bhi.n	80111ac <__ssputs_r+0x70>
 8011150:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011154:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011158:	d026      	beq.n	80111a8 <__ssputs_r+0x6c>
 801115a:	6965      	ldr	r5, [r4, #20]
 801115c:	6909      	ldr	r1, [r1, #16]
 801115e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011162:	eba3 0901 	sub.w	r9, r3, r1
 8011166:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801116a:	1c7b      	adds	r3, r7, #1
 801116c:	444b      	add	r3, r9
 801116e:	106d      	asrs	r5, r5, #1
 8011170:	429d      	cmp	r5, r3
 8011172:	bf38      	it	cc
 8011174:	461d      	movcc	r5, r3
 8011176:	0553      	lsls	r3, r2, #21
 8011178:	d527      	bpl.n	80111ca <__ssputs_r+0x8e>
 801117a:	4629      	mov	r1, r5
 801117c:	f7fe fc1c 	bl	800f9b8 <_malloc_r>
 8011180:	4606      	mov	r6, r0
 8011182:	b360      	cbz	r0, 80111de <__ssputs_r+0xa2>
 8011184:	6921      	ldr	r1, [r4, #16]
 8011186:	464a      	mov	r2, r9
 8011188:	f7fd fd3f 	bl	800ec0a <memcpy>
 801118c:	89a3      	ldrh	r3, [r4, #12]
 801118e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011196:	81a3      	strh	r3, [r4, #12]
 8011198:	6126      	str	r6, [r4, #16]
 801119a:	6165      	str	r5, [r4, #20]
 801119c:	444e      	add	r6, r9
 801119e:	eba5 0509 	sub.w	r5, r5, r9
 80111a2:	6026      	str	r6, [r4, #0]
 80111a4:	60a5      	str	r5, [r4, #8]
 80111a6:	463e      	mov	r6, r7
 80111a8:	42be      	cmp	r6, r7
 80111aa:	d900      	bls.n	80111ae <__ssputs_r+0x72>
 80111ac:	463e      	mov	r6, r7
 80111ae:	6820      	ldr	r0, [r4, #0]
 80111b0:	4632      	mov	r2, r6
 80111b2:	4641      	mov	r1, r8
 80111b4:	f000 fef7 	bl	8011fa6 <memmove>
 80111b8:	68a3      	ldr	r3, [r4, #8]
 80111ba:	1b9b      	subs	r3, r3, r6
 80111bc:	60a3      	str	r3, [r4, #8]
 80111be:	6823      	ldr	r3, [r4, #0]
 80111c0:	4433      	add	r3, r6
 80111c2:	6023      	str	r3, [r4, #0]
 80111c4:	2000      	movs	r0, #0
 80111c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111ca:	462a      	mov	r2, r5
 80111cc:	f001 fabd 	bl	801274a <_realloc_r>
 80111d0:	4606      	mov	r6, r0
 80111d2:	2800      	cmp	r0, #0
 80111d4:	d1e0      	bne.n	8011198 <__ssputs_r+0x5c>
 80111d6:	6921      	ldr	r1, [r4, #16]
 80111d8:	4650      	mov	r0, sl
 80111da:	f7fe fb79 	bl	800f8d0 <_free_r>
 80111de:	230c      	movs	r3, #12
 80111e0:	f8ca 3000 	str.w	r3, [sl]
 80111e4:	89a3      	ldrh	r3, [r4, #12]
 80111e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80111ea:	81a3      	strh	r3, [r4, #12]
 80111ec:	f04f 30ff 	mov.w	r0, #4294967295
 80111f0:	e7e9      	b.n	80111c6 <__ssputs_r+0x8a>
	...

080111f4 <_svfiprintf_r>:
 80111f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111f8:	4698      	mov	r8, r3
 80111fa:	898b      	ldrh	r3, [r1, #12]
 80111fc:	061b      	lsls	r3, r3, #24
 80111fe:	b09d      	sub	sp, #116	@ 0x74
 8011200:	4607      	mov	r7, r0
 8011202:	460d      	mov	r5, r1
 8011204:	4614      	mov	r4, r2
 8011206:	d510      	bpl.n	801122a <_svfiprintf_r+0x36>
 8011208:	690b      	ldr	r3, [r1, #16]
 801120a:	b973      	cbnz	r3, 801122a <_svfiprintf_r+0x36>
 801120c:	2140      	movs	r1, #64	@ 0x40
 801120e:	f7fe fbd3 	bl	800f9b8 <_malloc_r>
 8011212:	6028      	str	r0, [r5, #0]
 8011214:	6128      	str	r0, [r5, #16]
 8011216:	b930      	cbnz	r0, 8011226 <_svfiprintf_r+0x32>
 8011218:	230c      	movs	r3, #12
 801121a:	603b      	str	r3, [r7, #0]
 801121c:	f04f 30ff 	mov.w	r0, #4294967295
 8011220:	b01d      	add	sp, #116	@ 0x74
 8011222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011226:	2340      	movs	r3, #64	@ 0x40
 8011228:	616b      	str	r3, [r5, #20]
 801122a:	2300      	movs	r3, #0
 801122c:	9309      	str	r3, [sp, #36]	@ 0x24
 801122e:	2320      	movs	r3, #32
 8011230:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011234:	f8cd 800c 	str.w	r8, [sp, #12]
 8011238:	2330      	movs	r3, #48	@ 0x30
 801123a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80113d8 <_svfiprintf_r+0x1e4>
 801123e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011242:	f04f 0901 	mov.w	r9, #1
 8011246:	4623      	mov	r3, r4
 8011248:	469a      	mov	sl, r3
 801124a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801124e:	b10a      	cbz	r2, 8011254 <_svfiprintf_r+0x60>
 8011250:	2a25      	cmp	r2, #37	@ 0x25
 8011252:	d1f9      	bne.n	8011248 <_svfiprintf_r+0x54>
 8011254:	ebba 0b04 	subs.w	fp, sl, r4
 8011258:	d00b      	beq.n	8011272 <_svfiprintf_r+0x7e>
 801125a:	465b      	mov	r3, fp
 801125c:	4622      	mov	r2, r4
 801125e:	4629      	mov	r1, r5
 8011260:	4638      	mov	r0, r7
 8011262:	f7ff ff6b 	bl	801113c <__ssputs_r>
 8011266:	3001      	adds	r0, #1
 8011268:	f000 80a7 	beq.w	80113ba <_svfiprintf_r+0x1c6>
 801126c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801126e:	445a      	add	r2, fp
 8011270:	9209      	str	r2, [sp, #36]	@ 0x24
 8011272:	f89a 3000 	ldrb.w	r3, [sl]
 8011276:	2b00      	cmp	r3, #0
 8011278:	f000 809f 	beq.w	80113ba <_svfiprintf_r+0x1c6>
 801127c:	2300      	movs	r3, #0
 801127e:	f04f 32ff 	mov.w	r2, #4294967295
 8011282:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011286:	f10a 0a01 	add.w	sl, sl, #1
 801128a:	9304      	str	r3, [sp, #16]
 801128c:	9307      	str	r3, [sp, #28]
 801128e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011292:	931a      	str	r3, [sp, #104]	@ 0x68
 8011294:	4654      	mov	r4, sl
 8011296:	2205      	movs	r2, #5
 8011298:	f814 1b01 	ldrb.w	r1, [r4], #1
 801129c:	484e      	ldr	r0, [pc, #312]	@ (80113d8 <_svfiprintf_r+0x1e4>)
 801129e:	f7ee ff9f 	bl	80001e0 <memchr>
 80112a2:	9a04      	ldr	r2, [sp, #16]
 80112a4:	b9d8      	cbnz	r0, 80112de <_svfiprintf_r+0xea>
 80112a6:	06d0      	lsls	r0, r2, #27
 80112a8:	bf44      	itt	mi
 80112aa:	2320      	movmi	r3, #32
 80112ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80112b0:	0711      	lsls	r1, r2, #28
 80112b2:	bf44      	itt	mi
 80112b4:	232b      	movmi	r3, #43	@ 0x2b
 80112b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80112ba:	f89a 3000 	ldrb.w	r3, [sl]
 80112be:	2b2a      	cmp	r3, #42	@ 0x2a
 80112c0:	d015      	beq.n	80112ee <_svfiprintf_r+0xfa>
 80112c2:	9a07      	ldr	r2, [sp, #28]
 80112c4:	4654      	mov	r4, sl
 80112c6:	2000      	movs	r0, #0
 80112c8:	f04f 0c0a 	mov.w	ip, #10
 80112cc:	4621      	mov	r1, r4
 80112ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80112d2:	3b30      	subs	r3, #48	@ 0x30
 80112d4:	2b09      	cmp	r3, #9
 80112d6:	d94b      	bls.n	8011370 <_svfiprintf_r+0x17c>
 80112d8:	b1b0      	cbz	r0, 8011308 <_svfiprintf_r+0x114>
 80112da:	9207      	str	r2, [sp, #28]
 80112dc:	e014      	b.n	8011308 <_svfiprintf_r+0x114>
 80112de:	eba0 0308 	sub.w	r3, r0, r8
 80112e2:	fa09 f303 	lsl.w	r3, r9, r3
 80112e6:	4313      	orrs	r3, r2
 80112e8:	9304      	str	r3, [sp, #16]
 80112ea:	46a2      	mov	sl, r4
 80112ec:	e7d2      	b.n	8011294 <_svfiprintf_r+0xa0>
 80112ee:	9b03      	ldr	r3, [sp, #12]
 80112f0:	1d19      	adds	r1, r3, #4
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	9103      	str	r1, [sp, #12]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	bfbb      	ittet	lt
 80112fa:	425b      	neglt	r3, r3
 80112fc:	f042 0202 	orrlt.w	r2, r2, #2
 8011300:	9307      	strge	r3, [sp, #28]
 8011302:	9307      	strlt	r3, [sp, #28]
 8011304:	bfb8      	it	lt
 8011306:	9204      	strlt	r2, [sp, #16]
 8011308:	7823      	ldrb	r3, [r4, #0]
 801130a:	2b2e      	cmp	r3, #46	@ 0x2e
 801130c:	d10a      	bne.n	8011324 <_svfiprintf_r+0x130>
 801130e:	7863      	ldrb	r3, [r4, #1]
 8011310:	2b2a      	cmp	r3, #42	@ 0x2a
 8011312:	d132      	bne.n	801137a <_svfiprintf_r+0x186>
 8011314:	9b03      	ldr	r3, [sp, #12]
 8011316:	1d1a      	adds	r2, r3, #4
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	9203      	str	r2, [sp, #12]
 801131c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011320:	3402      	adds	r4, #2
 8011322:	9305      	str	r3, [sp, #20]
 8011324:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80113e8 <_svfiprintf_r+0x1f4>
 8011328:	7821      	ldrb	r1, [r4, #0]
 801132a:	2203      	movs	r2, #3
 801132c:	4650      	mov	r0, sl
 801132e:	f7ee ff57 	bl	80001e0 <memchr>
 8011332:	b138      	cbz	r0, 8011344 <_svfiprintf_r+0x150>
 8011334:	9b04      	ldr	r3, [sp, #16]
 8011336:	eba0 000a 	sub.w	r0, r0, sl
 801133a:	2240      	movs	r2, #64	@ 0x40
 801133c:	4082      	lsls	r2, r0
 801133e:	4313      	orrs	r3, r2
 8011340:	3401      	adds	r4, #1
 8011342:	9304      	str	r3, [sp, #16]
 8011344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011348:	4824      	ldr	r0, [pc, #144]	@ (80113dc <_svfiprintf_r+0x1e8>)
 801134a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801134e:	2206      	movs	r2, #6
 8011350:	f7ee ff46 	bl	80001e0 <memchr>
 8011354:	2800      	cmp	r0, #0
 8011356:	d036      	beq.n	80113c6 <_svfiprintf_r+0x1d2>
 8011358:	4b21      	ldr	r3, [pc, #132]	@ (80113e0 <_svfiprintf_r+0x1ec>)
 801135a:	bb1b      	cbnz	r3, 80113a4 <_svfiprintf_r+0x1b0>
 801135c:	9b03      	ldr	r3, [sp, #12]
 801135e:	3307      	adds	r3, #7
 8011360:	f023 0307 	bic.w	r3, r3, #7
 8011364:	3308      	adds	r3, #8
 8011366:	9303      	str	r3, [sp, #12]
 8011368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801136a:	4433      	add	r3, r6
 801136c:	9309      	str	r3, [sp, #36]	@ 0x24
 801136e:	e76a      	b.n	8011246 <_svfiprintf_r+0x52>
 8011370:	fb0c 3202 	mla	r2, ip, r2, r3
 8011374:	460c      	mov	r4, r1
 8011376:	2001      	movs	r0, #1
 8011378:	e7a8      	b.n	80112cc <_svfiprintf_r+0xd8>
 801137a:	2300      	movs	r3, #0
 801137c:	3401      	adds	r4, #1
 801137e:	9305      	str	r3, [sp, #20]
 8011380:	4619      	mov	r1, r3
 8011382:	f04f 0c0a 	mov.w	ip, #10
 8011386:	4620      	mov	r0, r4
 8011388:	f810 2b01 	ldrb.w	r2, [r0], #1
 801138c:	3a30      	subs	r2, #48	@ 0x30
 801138e:	2a09      	cmp	r2, #9
 8011390:	d903      	bls.n	801139a <_svfiprintf_r+0x1a6>
 8011392:	2b00      	cmp	r3, #0
 8011394:	d0c6      	beq.n	8011324 <_svfiprintf_r+0x130>
 8011396:	9105      	str	r1, [sp, #20]
 8011398:	e7c4      	b.n	8011324 <_svfiprintf_r+0x130>
 801139a:	fb0c 2101 	mla	r1, ip, r1, r2
 801139e:	4604      	mov	r4, r0
 80113a0:	2301      	movs	r3, #1
 80113a2:	e7f0      	b.n	8011386 <_svfiprintf_r+0x192>
 80113a4:	ab03      	add	r3, sp, #12
 80113a6:	9300      	str	r3, [sp, #0]
 80113a8:	462a      	mov	r2, r5
 80113aa:	4b0e      	ldr	r3, [pc, #56]	@ (80113e4 <_svfiprintf_r+0x1f0>)
 80113ac:	a904      	add	r1, sp, #16
 80113ae:	4638      	mov	r0, r7
 80113b0:	f7fc fb78 	bl	800daa4 <_printf_float>
 80113b4:	1c42      	adds	r2, r0, #1
 80113b6:	4606      	mov	r6, r0
 80113b8:	d1d6      	bne.n	8011368 <_svfiprintf_r+0x174>
 80113ba:	89ab      	ldrh	r3, [r5, #12]
 80113bc:	065b      	lsls	r3, r3, #25
 80113be:	f53f af2d 	bmi.w	801121c <_svfiprintf_r+0x28>
 80113c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80113c4:	e72c      	b.n	8011220 <_svfiprintf_r+0x2c>
 80113c6:	ab03      	add	r3, sp, #12
 80113c8:	9300      	str	r3, [sp, #0]
 80113ca:	462a      	mov	r2, r5
 80113cc:	4b05      	ldr	r3, [pc, #20]	@ (80113e4 <_svfiprintf_r+0x1f0>)
 80113ce:	a904      	add	r1, sp, #16
 80113d0:	4638      	mov	r0, r7
 80113d2:	f7fc fdff 	bl	800dfd4 <_printf_i>
 80113d6:	e7ed      	b.n	80113b4 <_svfiprintf_r+0x1c0>
 80113d8:	08014109 	.word	0x08014109
 80113dc:	08014113 	.word	0x08014113
 80113e0:	0800daa5 	.word	0x0800daa5
 80113e4:	0801113d 	.word	0x0801113d
 80113e8:	0801410f 	.word	0x0801410f

080113ec <_sungetc_r>:
 80113ec:	b538      	push	{r3, r4, r5, lr}
 80113ee:	1c4b      	adds	r3, r1, #1
 80113f0:	4614      	mov	r4, r2
 80113f2:	d103      	bne.n	80113fc <_sungetc_r+0x10>
 80113f4:	f04f 35ff 	mov.w	r5, #4294967295
 80113f8:	4628      	mov	r0, r5
 80113fa:	bd38      	pop	{r3, r4, r5, pc}
 80113fc:	8993      	ldrh	r3, [r2, #12]
 80113fe:	f023 0320 	bic.w	r3, r3, #32
 8011402:	8193      	strh	r3, [r2, #12]
 8011404:	6853      	ldr	r3, [r2, #4]
 8011406:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8011408:	b2cd      	uxtb	r5, r1
 801140a:	b18a      	cbz	r2, 8011430 <_sungetc_r+0x44>
 801140c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801140e:	429a      	cmp	r2, r3
 8011410:	dd08      	ble.n	8011424 <_sungetc_r+0x38>
 8011412:	6823      	ldr	r3, [r4, #0]
 8011414:	1e5a      	subs	r2, r3, #1
 8011416:	6022      	str	r2, [r4, #0]
 8011418:	f803 5c01 	strb.w	r5, [r3, #-1]
 801141c:	6863      	ldr	r3, [r4, #4]
 801141e:	3301      	adds	r3, #1
 8011420:	6063      	str	r3, [r4, #4]
 8011422:	e7e9      	b.n	80113f8 <_sungetc_r+0xc>
 8011424:	4621      	mov	r1, r4
 8011426:	f000 fd84 	bl	8011f32 <__submore>
 801142a:	2800      	cmp	r0, #0
 801142c:	d0f1      	beq.n	8011412 <_sungetc_r+0x26>
 801142e:	e7e1      	b.n	80113f4 <_sungetc_r+0x8>
 8011430:	6921      	ldr	r1, [r4, #16]
 8011432:	6822      	ldr	r2, [r4, #0]
 8011434:	b141      	cbz	r1, 8011448 <_sungetc_r+0x5c>
 8011436:	4291      	cmp	r1, r2
 8011438:	d206      	bcs.n	8011448 <_sungetc_r+0x5c>
 801143a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801143e:	42a9      	cmp	r1, r5
 8011440:	d102      	bne.n	8011448 <_sungetc_r+0x5c>
 8011442:	3a01      	subs	r2, #1
 8011444:	6022      	str	r2, [r4, #0]
 8011446:	e7ea      	b.n	801141e <_sungetc_r+0x32>
 8011448:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 801144c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011450:	6363      	str	r3, [r4, #52]	@ 0x34
 8011452:	2303      	movs	r3, #3
 8011454:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011456:	4623      	mov	r3, r4
 8011458:	f803 5f46 	strb.w	r5, [r3, #70]!
 801145c:	6023      	str	r3, [r4, #0]
 801145e:	2301      	movs	r3, #1
 8011460:	e7de      	b.n	8011420 <_sungetc_r+0x34>

08011462 <__ssrefill_r>:
 8011462:	b510      	push	{r4, lr}
 8011464:	460c      	mov	r4, r1
 8011466:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011468:	b169      	cbz	r1, 8011486 <__ssrefill_r+0x24>
 801146a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801146e:	4299      	cmp	r1, r3
 8011470:	d001      	beq.n	8011476 <__ssrefill_r+0x14>
 8011472:	f7fe fa2d 	bl	800f8d0 <_free_r>
 8011476:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011478:	6063      	str	r3, [r4, #4]
 801147a:	2000      	movs	r0, #0
 801147c:	6360      	str	r0, [r4, #52]	@ 0x34
 801147e:	b113      	cbz	r3, 8011486 <__ssrefill_r+0x24>
 8011480:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011482:	6023      	str	r3, [r4, #0]
 8011484:	bd10      	pop	{r4, pc}
 8011486:	6923      	ldr	r3, [r4, #16]
 8011488:	6023      	str	r3, [r4, #0]
 801148a:	2300      	movs	r3, #0
 801148c:	6063      	str	r3, [r4, #4]
 801148e:	89a3      	ldrh	r3, [r4, #12]
 8011490:	f043 0320 	orr.w	r3, r3, #32
 8011494:	81a3      	strh	r3, [r4, #12]
 8011496:	f04f 30ff 	mov.w	r0, #4294967295
 801149a:	e7f3      	b.n	8011484 <__ssrefill_r+0x22>

0801149c <__ssvfiscanf_r>:
 801149c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114a0:	460c      	mov	r4, r1
 80114a2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80114a6:	2100      	movs	r1, #0
 80114a8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80114ac:	49a5      	ldr	r1, [pc, #660]	@ (8011744 <__ssvfiscanf_r+0x2a8>)
 80114ae:	91a0      	str	r1, [sp, #640]	@ 0x280
 80114b0:	f10d 0804 	add.w	r8, sp, #4
 80114b4:	49a4      	ldr	r1, [pc, #656]	@ (8011748 <__ssvfiscanf_r+0x2ac>)
 80114b6:	4fa5      	ldr	r7, [pc, #660]	@ (801174c <__ssvfiscanf_r+0x2b0>)
 80114b8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80114bc:	4606      	mov	r6, r0
 80114be:	91a1      	str	r1, [sp, #644]	@ 0x284
 80114c0:	9300      	str	r3, [sp, #0]
 80114c2:	7813      	ldrb	r3, [r2, #0]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	f000 8158 	beq.w	801177a <__ssvfiscanf_r+0x2de>
 80114ca:	5cf9      	ldrb	r1, [r7, r3]
 80114cc:	f011 0108 	ands.w	r1, r1, #8
 80114d0:	f102 0501 	add.w	r5, r2, #1
 80114d4:	d019      	beq.n	801150a <__ssvfiscanf_r+0x6e>
 80114d6:	6863      	ldr	r3, [r4, #4]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	dd0f      	ble.n	80114fc <__ssvfiscanf_r+0x60>
 80114dc:	6823      	ldr	r3, [r4, #0]
 80114de:	781a      	ldrb	r2, [r3, #0]
 80114e0:	5cba      	ldrb	r2, [r7, r2]
 80114e2:	0712      	lsls	r2, r2, #28
 80114e4:	d401      	bmi.n	80114ea <__ssvfiscanf_r+0x4e>
 80114e6:	462a      	mov	r2, r5
 80114e8:	e7eb      	b.n	80114c2 <__ssvfiscanf_r+0x26>
 80114ea:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80114ec:	3201      	adds	r2, #1
 80114ee:	9245      	str	r2, [sp, #276]	@ 0x114
 80114f0:	6862      	ldr	r2, [r4, #4]
 80114f2:	3301      	adds	r3, #1
 80114f4:	3a01      	subs	r2, #1
 80114f6:	6062      	str	r2, [r4, #4]
 80114f8:	6023      	str	r3, [r4, #0]
 80114fa:	e7ec      	b.n	80114d6 <__ssvfiscanf_r+0x3a>
 80114fc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80114fe:	4621      	mov	r1, r4
 8011500:	4630      	mov	r0, r6
 8011502:	4798      	blx	r3
 8011504:	2800      	cmp	r0, #0
 8011506:	d0e9      	beq.n	80114dc <__ssvfiscanf_r+0x40>
 8011508:	e7ed      	b.n	80114e6 <__ssvfiscanf_r+0x4a>
 801150a:	2b25      	cmp	r3, #37	@ 0x25
 801150c:	d012      	beq.n	8011534 <__ssvfiscanf_r+0x98>
 801150e:	4699      	mov	r9, r3
 8011510:	6863      	ldr	r3, [r4, #4]
 8011512:	2b00      	cmp	r3, #0
 8011514:	f340 8093 	ble.w	801163e <__ssvfiscanf_r+0x1a2>
 8011518:	6822      	ldr	r2, [r4, #0]
 801151a:	7813      	ldrb	r3, [r2, #0]
 801151c:	454b      	cmp	r3, r9
 801151e:	f040 812c 	bne.w	801177a <__ssvfiscanf_r+0x2de>
 8011522:	6863      	ldr	r3, [r4, #4]
 8011524:	3b01      	subs	r3, #1
 8011526:	6063      	str	r3, [r4, #4]
 8011528:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801152a:	3201      	adds	r2, #1
 801152c:	3301      	adds	r3, #1
 801152e:	6022      	str	r2, [r4, #0]
 8011530:	9345      	str	r3, [sp, #276]	@ 0x114
 8011532:	e7d8      	b.n	80114e6 <__ssvfiscanf_r+0x4a>
 8011534:	9141      	str	r1, [sp, #260]	@ 0x104
 8011536:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011538:	7853      	ldrb	r3, [r2, #1]
 801153a:	2b2a      	cmp	r3, #42	@ 0x2a
 801153c:	bf02      	ittt	eq
 801153e:	2310      	moveq	r3, #16
 8011540:	1c95      	addeq	r5, r2, #2
 8011542:	9341      	streq	r3, [sp, #260]	@ 0x104
 8011544:	220a      	movs	r2, #10
 8011546:	46a9      	mov	r9, r5
 8011548:	f819 1b01 	ldrb.w	r1, [r9], #1
 801154c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8011550:	2b09      	cmp	r3, #9
 8011552:	d91e      	bls.n	8011592 <__ssvfiscanf_r+0xf6>
 8011554:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8011750 <__ssvfiscanf_r+0x2b4>
 8011558:	2203      	movs	r2, #3
 801155a:	4650      	mov	r0, sl
 801155c:	f7ee fe40 	bl	80001e0 <memchr>
 8011560:	b138      	cbz	r0, 8011572 <__ssvfiscanf_r+0xd6>
 8011562:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011564:	eba0 000a 	sub.w	r0, r0, sl
 8011568:	2301      	movs	r3, #1
 801156a:	4083      	lsls	r3, r0
 801156c:	4313      	orrs	r3, r2
 801156e:	9341      	str	r3, [sp, #260]	@ 0x104
 8011570:	464d      	mov	r5, r9
 8011572:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011576:	2b78      	cmp	r3, #120	@ 0x78
 8011578:	d806      	bhi.n	8011588 <__ssvfiscanf_r+0xec>
 801157a:	2b57      	cmp	r3, #87	@ 0x57
 801157c:	d810      	bhi.n	80115a0 <__ssvfiscanf_r+0x104>
 801157e:	2b25      	cmp	r3, #37	@ 0x25
 8011580:	d0c5      	beq.n	801150e <__ssvfiscanf_r+0x72>
 8011582:	d857      	bhi.n	8011634 <__ssvfiscanf_r+0x198>
 8011584:	2b00      	cmp	r3, #0
 8011586:	d065      	beq.n	8011654 <__ssvfiscanf_r+0x1b8>
 8011588:	2303      	movs	r3, #3
 801158a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801158c:	230a      	movs	r3, #10
 801158e:	9342      	str	r3, [sp, #264]	@ 0x108
 8011590:	e078      	b.n	8011684 <__ssvfiscanf_r+0x1e8>
 8011592:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8011594:	fb02 1103 	mla	r1, r2, r3, r1
 8011598:	3930      	subs	r1, #48	@ 0x30
 801159a:	9143      	str	r1, [sp, #268]	@ 0x10c
 801159c:	464d      	mov	r5, r9
 801159e:	e7d2      	b.n	8011546 <__ssvfiscanf_r+0xaa>
 80115a0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80115a4:	2a20      	cmp	r2, #32
 80115a6:	d8ef      	bhi.n	8011588 <__ssvfiscanf_r+0xec>
 80115a8:	a101      	add	r1, pc, #4	@ (adr r1, 80115b0 <__ssvfiscanf_r+0x114>)
 80115aa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80115ae:	bf00      	nop
 80115b0:	08011663 	.word	0x08011663
 80115b4:	08011589 	.word	0x08011589
 80115b8:	08011589 	.word	0x08011589
 80115bc:	080116bd 	.word	0x080116bd
 80115c0:	08011589 	.word	0x08011589
 80115c4:	08011589 	.word	0x08011589
 80115c8:	08011589 	.word	0x08011589
 80115cc:	08011589 	.word	0x08011589
 80115d0:	08011589 	.word	0x08011589
 80115d4:	08011589 	.word	0x08011589
 80115d8:	08011589 	.word	0x08011589
 80115dc:	080116d3 	.word	0x080116d3
 80115e0:	080116b9 	.word	0x080116b9
 80115e4:	0801163b 	.word	0x0801163b
 80115e8:	0801163b 	.word	0x0801163b
 80115ec:	0801163b 	.word	0x0801163b
 80115f0:	08011589 	.word	0x08011589
 80115f4:	08011675 	.word	0x08011675
 80115f8:	08011589 	.word	0x08011589
 80115fc:	08011589 	.word	0x08011589
 8011600:	08011589 	.word	0x08011589
 8011604:	08011589 	.word	0x08011589
 8011608:	080116e3 	.word	0x080116e3
 801160c:	0801167d 	.word	0x0801167d
 8011610:	0801165b 	.word	0x0801165b
 8011614:	08011589 	.word	0x08011589
 8011618:	08011589 	.word	0x08011589
 801161c:	080116df 	.word	0x080116df
 8011620:	08011589 	.word	0x08011589
 8011624:	080116b9 	.word	0x080116b9
 8011628:	08011589 	.word	0x08011589
 801162c:	08011589 	.word	0x08011589
 8011630:	08011663 	.word	0x08011663
 8011634:	3b45      	subs	r3, #69	@ 0x45
 8011636:	2b02      	cmp	r3, #2
 8011638:	d8a6      	bhi.n	8011588 <__ssvfiscanf_r+0xec>
 801163a:	2305      	movs	r3, #5
 801163c:	e021      	b.n	8011682 <__ssvfiscanf_r+0x1e6>
 801163e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011640:	4621      	mov	r1, r4
 8011642:	4630      	mov	r0, r6
 8011644:	4798      	blx	r3
 8011646:	2800      	cmp	r0, #0
 8011648:	f43f af66 	beq.w	8011518 <__ssvfiscanf_r+0x7c>
 801164c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801164e:	2800      	cmp	r0, #0
 8011650:	f040 808b 	bne.w	801176a <__ssvfiscanf_r+0x2ce>
 8011654:	f04f 30ff 	mov.w	r0, #4294967295
 8011658:	e08b      	b.n	8011772 <__ssvfiscanf_r+0x2d6>
 801165a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801165c:	f042 0220 	orr.w	r2, r2, #32
 8011660:	9241      	str	r2, [sp, #260]	@ 0x104
 8011662:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011664:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011668:	9241      	str	r2, [sp, #260]	@ 0x104
 801166a:	2210      	movs	r2, #16
 801166c:	2b6e      	cmp	r3, #110	@ 0x6e
 801166e:	9242      	str	r2, [sp, #264]	@ 0x108
 8011670:	d902      	bls.n	8011678 <__ssvfiscanf_r+0x1dc>
 8011672:	e005      	b.n	8011680 <__ssvfiscanf_r+0x1e4>
 8011674:	2300      	movs	r3, #0
 8011676:	9342      	str	r3, [sp, #264]	@ 0x108
 8011678:	2303      	movs	r3, #3
 801167a:	e002      	b.n	8011682 <__ssvfiscanf_r+0x1e6>
 801167c:	2308      	movs	r3, #8
 801167e:	9342      	str	r3, [sp, #264]	@ 0x108
 8011680:	2304      	movs	r3, #4
 8011682:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011684:	6863      	ldr	r3, [r4, #4]
 8011686:	2b00      	cmp	r3, #0
 8011688:	dd39      	ble.n	80116fe <__ssvfiscanf_r+0x262>
 801168a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801168c:	0659      	lsls	r1, r3, #25
 801168e:	d404      	bmi.n	801169a <__ssvfiscanf_r+0x1fe>
 8011690:	6823      	ldr	r3, [r4, #0]
 8011692:	781a      	ldrb	r2, [r3, #0]
 8011694:	5cba      	ldrb	r2, [r7, r2]
 8011696:	0712      	lsls	r2, r2, #28
 8011698:	d438      	bmi.n	801170c <__ssvfiscanf_r+0x270>
 801169a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801169c:	2b02      	cmp	r3, #2
 801169e:	dc47      	bgt.n	8011730 <__ssvfiscanf_r+0x294>
 80116a0:	466b      	mov	r3, sp
 80116a2:	4622      	mov	r2, r4
 80116a4:	a941      	add	r1, sp, #260	@ 0x104
 80116a6:	4630      	mov	r0, r6
 80116a8:	f000 f9ae 	bl	8011a08 <_scanf_chars>
 80116ac:	2801      	cmp	r0, #1
 80116ae:	d064      	beq.n	801177a <__ssvfiscanf_r+0x2de>
 80116b0:	2802      	cmp	r0, #2
 80116b2:	f47f af18 	bne.w	80114e6 <__ssvfiscanf_r+0x4a>
 80116b6:	e7c9      	b.n	801164c <__ssvfiscanf_r+0x1b0>
 80116b8:	220a      	movs	r2, #10
 80116ba:	e7d7      	b.n	801166c <__ssvfiscanf_r+0x1d0>
 80116bc:	4629      	mov	r1, r5
 80116be:	4640      	mov	r0, r8
 80116c0:	f000 fbfe 	bl	8011ec0 <__sccl>
 80116c4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80116c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80116ca:	9341      	str	r3, [sp, #260]	@ 0x104
 80116cc:	4605      	mov	r5, r0
 80116ce:	2301      	movs	r3, #1
 80116d0:	e7d7      	b.n	8011682 <__ssvfiscanf_r+0x1e6>
 80116d2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80116d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80116d8:	9341      	str	r3, [sp, #260]	@ 0x104
 80116da:	2300      	movs	r3, #0
 80116dc:	e7d1      	b.n	8011682 <__ssvfiscanf_r+0x1e6>
 80116de:	2302      	movs	r3, #2
 80116e0:	e7cf      	b.n	8011682 <__ssvfiscanf_r+0x1e6>
 80116e2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80116e4:	06c3      	lsls	r3, r0, #27
 80116e6:	f53f aefe 	bmi.w	80114e6 <__ssvfiscanf_r+0x4a>
 80116ea:	9b00      	ldr	r3, [sp, #0]
 80116ec:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80116ee:	1d19      	adds	r1, r3, #4
 80116f0:	9100      	str	r1, [sp, #0]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	07c0      	lsls	r0, r0, #31
 80116f6:	bf4c      	ite	mi
 80116f8:	801a      	strhmi	r2, [r3, #0]
 80116fa:	601a      	strpl	r2, [r3, #0]
 80116fc:	e6f3      	b.n	80114e6 <__ssvfiscanf_r+0x4a>
 80116fe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011700:	4621      	mov	r1, r4
 8011702:	4630      	mov	r0, r6
 8011704:	4798      	blx	r3
 8011706:	2800      	cmp	r0, #0
 8011708:	d0bf      	beq.n	801168a <__ssvfiscanf_r+0x1ee>
 801170a:	e79f      	b.n	801164c <__ssvfiscanf_r+0x1b0>
 801170c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801170e:	3201      	adds	r2, #1
 8011710:	9245      	str	r2, [sp, #276]	@ 0x114
 8011712:	6862      	ldr	r2, [r4, #4]
 8011714:	3a01      	subs	r2, #1
 8011716:	2a00      	cmp	r2, #0
 8011718:	6062      	str	r2, [r4, #4]
 801171a:	dd02      	ble.n	8011722 <__ssvfiscanf_r+0x286>
 801171c:	3301      	adds	r3, #1
 801171e:	6023      	str	r3, [r4, #0]
 8011720:	e7b6      	b.n	8011690 <__ssvfiscanf_r+0x1f4>
 8011722:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011724:	4621      	mov	r1, r4
 8011726:	4630      	mov	r0, r6
 8011728:	4798      	blx	r3
 801172a:	2800      	cmp	r0, #0
 801172c:	d0b0      	beq.n	8011690 <__ssvfiscanf_r+0x1f4>
 801172e:	e78d      	b.n	801164c <__ssvfiscanf_r+0x1b0>
 8011730:	2b04      	cmp	r3, #4
 8011732:	dc0f      	bgt.n	8011754 <__ssvfiscanf_r+0x2b8>
 8011734:	466b      	mov	r3, sp
 8011736:	4622      	mov	r2, r4
 8011738:	a941      	add	r1, sp, #260	@ 0x104
 801173a:	4630      	mov	r0, r6
 801173c:	f000 f9be 	bl	8011abc <_scanf_i>
 8011740:	e7b4      	b.n	80116ac <__ssvfiscanf_r+0x210>
 8011742:	bf00      	nop
 8011744:	080113ed 	.word	0x080113ed
 8011748:	08011463 	.word	0x08011463
 801174c:	08014009 	.word	0x08014009
 8011750:	0801410f 	.word	0x0801410f
 8011754:	4b0a      	ldr	r3, [pc, #40]	@ (8011780 <__ssvfiscanf_r+0x2e4>)
 8011756:	2b00      	cmp	r3, #0
 8011758:	f43f aec5 	beq.w	80114e6 <__ssvfiscanf_r+0x4a>
 801175c:	466b      	mov	r3, sp
 801175e:	4622      	mov	r2, r4
 8011760:	a941      	add	r1, sp, #260	@ 0x104
 8011762:	4630      	mov	r0, r6
 8011764:	f7fc fd56 	bl	800e214 <_scanf_float>
 8011768:	e7a0      	b.n	80116ac <__ssvfiscanf_r+0x210>
 801176a:	89a3      	ldrh	r3, [r4, #12]
 801176c:	065b      	lsls	r3, r3, #25
 801176e:	f53f af71 	bmi.w	8011654 <__ssvfiscanf_r+0x1b8>
 8011772:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8011776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801177a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801177c:	e7f9      	b.n	8011772 <__ssvfiscanf_r+0x2d6>
 801177e:	bf00      	nop
 8011780:	0800e215 	.word	0x0800e215

08011784 <__sfputc_r>:
 8011784:	6893      	ldr	r3, [r2, #8]
 8011786:	3b01      	subs	r3, #1
 8011788:	2b00      	cmp	r3, #0
 801178a:	b410      	push	{r4}
 801178c:	6093      	str	r3, [r2, #8]
 801178e:	da08      	bge.n	80117a2 <__sfputc_r+0x1e>
 8011790:	6994      	ldr	r4, [r2, #24]
 8011792:	42a3      	cmp	r3, r4
 8011794:	db01      	blt.n	801179a <__sfputc_r+0x16>
 8011796:	290a      	cmp	r1, #10
 8011798:	d103      	bne.n	80117a2 <__sfputc_r+0x1e>
 801179a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801179e:	f7fd b90e 	b.w	800e9be <__swbuf_r>
 80117a2:	6813      	ldr	r3, [r2, #0]
 80117a4:	1c58      	adds	r0, r3, #1
 80117a6:	6010      	str	r0, [r2, #0]
 80117a8:	7019      	strb	r1, [r3, #0]
 80117aa:	4608      	mov	r0, r1
 80117ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80117b0:	4770      	bx	lr

080117b2 <__sfputs_r>:
 80117b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117b4:	4606      	mov	r6, r0
 80117b6:	460f      	mov	r7, r1
 80117b8:	4614      	mov	r4, r2
 80117ba:	18d5      	adds	r5, r2, r3
 80117bc:	42ac      	cmp	r4, r5
 80117be:	d101      	bne.n	80117c4 <__sfputs_r+0x12>
 80117c0:	2000      	movs	r0, #0
 80117c2:	e007      	b.n	80117d4 <__sfputs_r+0x22>
 80117c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117c8:	463a      	mov	r2, r7
 80117ca:	4630      	mov	r0, r6
 80117cc:	f7ff ffda 	bl	8011784 <__sfputc_r>
 80117d0:	1c43      	adds	r3, r0, #1
 80117d2:	d1f3      	bne.n	80117bc <__sfputs_r+0xa>
 80117d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080117d8 <_vfiprintf_r>:
 80117d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117dc:	460d      	mov	r5, r1
 80117de:	b09d      	sub	sp, #116	@ 0x74
 80117e0:	4614      	mov	r4, r2
 80117e2:	4698      	mov	r8, r3
 80117e4:	4606      	mov	r6, r0
 80117e6:	b118      	cbz	r0, 80117f0 <_vfiprintf_r+0x18>
 80117e8:	6a03      	ldr	r3, [r0, #32]
 80117ea:	b90b      	cbnz	r3, 80117f0 <_vfiprintf_r+0x18>
 80117ec:	f7fc ffb2 	bl	800e754 <__sinit>
 80117f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80117f2:	07d9      	lsls	r1, r3, #31
 80117f4:	d405      	bmi.n	8011802 <_vfiprintf_r+0x2a>
 80117f6:	89ab      	ldrh	r3, [r5, #12]
 80117f8:	059a      	lsls	r2, r3, #22
 80117fa:	d402      	bmi.n	8011802 <_vfiprintf_r+0x2a>
 80117fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80117fe:	f7fd fa02 	bl	800ec06 <__retarget_lock_acquire_recursive>
 8011802:	89ab      	ldrh	r3, [r5, #12]
 8011804:	071b      	lsls	r3, r3, #28
 8011806:	d501      	bpl.n	801180c <_vfiprintf_r+0x34>
 8011808:	692b      	ldr	r3, [r5, #16]
 801180a:	b99b      	cbnz	r3, 8011834 <_vfiprintf_r+0x5c>
 801180c:	4629      	mov	r1, r5
 801180e:	4630      	mov	r0, r6
 8011810:	f7fd f914 	bl	800ea3c <__swsetup_r>
 8011814:	b170      	cbz	r0, 8011834 <_vfiprintf_r+0x5c>
 8011816:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011818:	07dc      	lsls	r4, r3, #31
 801181a:	d504      	bpl.n	8011826 <_vfiprintf_r+0x4e>
 801181c:	f04f 30ff 	mov.w	r0, #4294967295
 8011820:	b01d      	add	sp, #116	@ 0x74
 8011822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011826:	89ab      	ldrh	r3, [r5, #12]
 8011828:	0598      	lsls	r0, r3, #22
 801182a:	d4f7      	bmi.n	801181c <_vfiprintf_r+0x44>
 801182c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801182e:	f7fd f9eb 	bl	800ec08 <__retarget_lock_release_recursive>
 8011832:	e7f3      	b.n	801181c <_vfiprintf_r+0x44>
 8011834:	2300      	movs	r3, #0
 8011836:	9309      	str	r3, [sp, #36]	@ 0x24
 8011838:	2320      	movs	r3, #32
 801183a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801183e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011842:	2330      	movs	r3, #48	@ 0x30
 8011844:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80119f4 <_vfiprintf_r+0x21c>
 8011848:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801184c:	f04f 0901 	mov.w	r9, #1
 8011850:	4623      	mov	r3, r4
 8011852:	469a      	mov	sl, r3
 8011854:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011858:	b10a      	cbz	r2, 801185e <_vfiprintf_r+0x86>
 801185a:	2a25      	cmp	r2, #37	@ 0x25
 801185c:	d1f9      	bne.n	8011852 <_vfiprintf_r+0x7a>
 801185e:	ebba 0b04 	subs.w	fp, sl, r4
 8011862:	d00b      	beq.n	801187c <_vfiprintf_r+0xa4>
 8011864:	465b      	mov	r3, fp
 8011866:	4622      	mov	r2, r4
 8011868:	4629      	mov	r1, r5
 801186a:	4630      	mov	r0, r6
 801186c:	f7ff ffa1 	bl	80117b2 <__sfputs_r>
 8011870:	3001      	adds	r0, #1
 8011872:	f000 80a7 	beq.w	80119c4 <_vfiprintf_r+0x1ec>
 8011876:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011878:	445a      	add	r2, fp
 801187a:	9209      	str	r2, [sp, #36]	@ 0x24
 801187c:	f89a 3000 	ldrb.w	r3, [sl]
 8011880:	2b00      	cmp	r3, #0
 8011882:	f000 809f 	beq.w	80119c4 <_vfiprintf_r+0x1ec>
 8011886:	2300      	movs	r3, #0
 8011888:	f04f 32ff 	mov.w	r2, #4294967295
 801188c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011890:	f10a 0a01 	add.w	sl, sl, #1
 8011894:	9304      	str	r3, [sp, #16]
 8011896:	9307      	str	r3, [sp, #28]
 8011898:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801189c:	931a      	str	r3, [sp, #104]	@ 0x68
 801189e:	4654      	mov	r4, sl
 80118a0:	2205      	movs	r2, #5
 80118a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118a6:	4853      	ldr	r0, [pc, #332]	@ (80119f4 <_vfiprintf_r+0x21c>)
 80118a8:	f7ee fc9a 	bl	80001e0 <memchr>
 80118ac:	9a04      	ldr	r2, [sp, #16]
 80118ae:	b9d8      	cbnz	r0, 80118e8 <_vfiprintf_r+0x110>
 80118b0:	06d1      	lsls	r1, r2, #27
 80118b2:	bf44      	itt	mi
 80118b4:	2320      	movmi	r3, #32
 80118b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80118ba:	0713      	lsls	r3, r2, #28
 80118bc:	bf44      	itt	mi
 80118be:	232b      	movmi	r3, #43	@ 0x2b
 80118c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80118c4:	f89a 3000 	ldrb.w	r3, [sl]
 80118c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80118ca:	d015      	beq.n	80118f8 <_vfiprintf_r+0x120>
 80118cc:	9a07      	ldr	r2, [sp, #28]
 80118ce:	4654      	mov	r4, sl
 80118d0:	2000      	movs	r0, #0
 80118d2:	f04f 0c0a 	mov.w	ip, #10
 80118d6:	4621      	mov	r1, r4
 80118d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80118dc:	3b30      	subs	r3, #48	@ 0x30
 80118de:	2b09      	cmp	r3, #9
 80118e0:	d94b      	bls.n	801197a <_vfiprintf_r+0x1a2>
 80118e2:	b1b0      	cbz	r0, 8011912 <_vfiprintf_r+0x13a>
 80118e4:	9207      	str	r2, [sp, #28]
 80118e6:	e014      	b.n	8011912 <_vfiprintf_r+0x13a>
 80118e8:	eba0 0308 	sub.w	r3, r0, r8
 80118ec:	fa09 f303 	lsl.w	r3, r9, r3
 80118f0:	4313      	orrs	r3, r2
 80118f2:	9304      	str	r3, [sp, #16]
 80118f4:	46a2      	mov	sl, r4
 80118f6:	e7d2      	b.n	801189e <_vfiprintf_r+0xc6>
 80118f8:	9b03      	ldr	r3, [sp, #12]
 80118fa:	1d19      	adds	r1, r3, #4
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	9103      	str	r1, [sp, #12]
 8011900:	2b00      	cmp	r3, #0
 8011902:	bfbb      	ittet	lt
 8011904:	425b      	neglt	r3, r3
 8011906:	f042 0202 	orrlt.w	r2, r2, #2
 801190a:	9307      	strge	r3, [sp, #28]
 801190c:	9307      	strlt	r3, [sp, #28]
 801190e:	bfb8      	it	lt
 8011910:	9204      	strlt	r2, [sp, #16]
 8011912:	7823      	ldrb	r3, [r4, #0]
 8011914:	2b2e      	cmp	r3, #46	@ 0x2e
 8011916:	d10a      	bne.n	801192e <_vfiprintf_r+0x156>
 8011918:	7863      	ldrb	r3, [r4, #1]
 801191a:	2b2a      	cmp	r3, #42	@ 0x2a
 801191c:	d132      	bne.n	8011984 <_vfiprintf_r+0x1ac>
 801191e:	9b03      	ldr	r3, [sp, #12]
 8011920:	1d1a      	adds	r2, r3, #4
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	9203      	str	r2, [sp, #12]
 8011926:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801192a:	3402      	adds	r4, #2
 801192c:	9305      	str	r3, [sp, #20]
 801192e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011a04 <_vfiprintf_r+0x22c>
 8011932:	7821      	ldrb	r1, [r4, #0]
 8011934:	2203      	movs	r2, #3
 8011936:	4650      	mov	r0, sl
 8011938:	f7ee fc52 	bl	80001e0 <memchr>
 801193c:	b138      	cbz	r0, 801194e <_vfiprintf_r+0x176>
 801193e:	9b04      	ldr	r3, [sp, #16]
 8011940:	eba0 000a 	sub.w	r0, r0, sl
 8011944:	2240      	movs	r2, #64	@ 0x40
 8011946:	4082      	lsls	r2, r0
 8011948:	4313      	orrs	r3, r2
 801194a:	3401      	adds	r4, #1
 801194c:	9304      	str	r3, [sp, #16]
 801194e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011952:	4829      	ldr	r0, [pc, #164]	@ (80119f8 <_vfiprintf_r+0x220>)
 8011954:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011958:	2206      	movs	r2, #6
 801195a:	f7ee fc41 	bl	80001e0 <memchr>
 801195e:	2800      	cmp	r0, #0
 8011960:	d03f      	beq.n	80119e2 <_vfiprintf_r+0x20a>
 8011962:	4b26      	ldr	r3, [pc, #152]	@ (80119fc <_vfiprintf_r+0x224>)
 8011964:	bb1b      	cbnz	r3, 80119ae <_vfiprintf_r+0x1d6>
 8011966:	9b03      	ldr	r3, [sp, #12]
 8011968:	3307      	adds	r3, #7
 801196a:	f023 0307 	bic.w	r3, r3, #7
 801196e:	3308      	adds	r3, #8
 8011970:	9303      	str	r3, [sp, #12]
 8011972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011974:	443b      	add	r3, r7
 8011976:	9309      	str	r3, [sp, #36]	@ 0x24
 8011978:	e76a      	b.n	8011850 <_vfiprintf_r+0x78>
 801197a:	fb0c 3202 	mla	r2, ip, r2, r3
 801197e:	460c      	mov	r4, r1
 8011980:	2001      	movs	r0, #1
 8011982:	e7a8      	b.n	80118d6 <_vfiprintf_r+0xfe>
 8011984:	2300      	movs	r3, #0
 8011986:	3401      	adds	r4, #1
 8011988:	9305      	str	r3, [sp, #20]
 801198a:	4619      	mov	r1, r3
 801198c:	f04f 0c0a 	mov.w	ip, #10
 8011990:	4620      	mov	r0, r4
 8011992:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011996:	3a30      	subs	r2, #48	@ 0x30
 8011998:	2a09      	cmp	r2, #9
 801199a:	d903      	bls.n	80119a4 <_vfiprintf_r+0x1cc>
 801199c:	2b00      	cmp	r3, #0
 801199e:	d0c6      	beq.n	801192e <_vfiprintf_r+0x156>
 80119a0:	9105      	str	r1, [sp, #20]
 80119a2:	e7c4      	b.n	801192e <_vfiprintf_r+0x156>
 80119a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80119a8:	4604      	mov	r4, r0
 80119aa:	2301      	movs	r3, #1
 80119ac:	e7f0      	b.n	8011990 <_vfiprintf_r+0x1b8>
 80119ae:	ab03      	add	r3, sp, #12
 80119b0:	9300      	str	r3, [sp, #0]
 80119b2:	462a      	mov	r2, r5
 80119b4:	4b12      	ldr	r3, [pc, #72]	@ (8011a00 <_vfiprintf_r+0x228>)
 80119b6:	a904      	add	r1, sp, #16
 80119b8:	4630      	mov	r0, r6
 80119ba:	f7fc f873 	bl	800daa4 <_printf_float>
 80119be:	4607      	mov	r7, r0
 80119c0:	1c78      	adds	r0, r7, #1
 80119c2:	d1d6      	bne.n	8011972 <_vfiprintf_r+0x19a>
 80119c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80119c6:	07d9      	lsls	r1, r3, #31
 80119c8:	d405      	bmi.n	80119d6 <_vfiprintf_r+0x1fe>
 80119ca:	89ab      	ldrh	r3, [r5, #12]
 80119cc:	059a      	lsls	r2, r3, #22
 80119ce:	d402      	bmi.n	80119d6 <_vfiprintf_r+0x1fe>
 80119d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80119d2:	f7fd f919 	bl	800ec08 <__retarget_lock_release_recursive>
 80119d6:	89ab      	ldrh	r3, [r5, #12]
 80119d8:	065b      	lsls	r3, r3, #25
 80119da:	f53f af1f 	bmi.w	801181c <_vfiprintf_r+0x44>
 80119de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80119e0:	e71e      	b.n	8011820 <_vfiprintf_r+0x48>
 80119e2:	ab03      	add	r3, sp, #12
 80119e4:	9300      	str	r3, [sp, #0]
 80119e6:	462a      	mov	r2, r5
 80119e8:	4b05      	ldr	r3, [pc, #20]	@ (8011a00 <_vfiprintf_r+0x228>)
 80119ea:	a904      	add	r1, sp, #16
 80119ec:	4630      	mov	r0, r6
 80119ee:	f7fc faf1 	bl	800dfd4 <_printf_i>
 80119f2:	e7e4      	b.n	80119be <_vfiprintf_r+0x1e6>
 80119f4:	08014109 	.word	0x08014109
 80119f8:	08014113 	.word	0x08014113
 80119fc:	0800daa5 	.word	0x0800daa5
 8011a00:	080117b3 	.word	0x080117b3
 8011a04:	0801410f 	.word	0x0801410f

08011a08 <_scanf_chars>:
 8011a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a0c:	4615      	mov	r5, r2
 8011a0e:	688a      	ldr	r2, [r1, #8]
 8011a10:	4680      	mov	r8, r0
 8011a12:	460c      	mov	r4, r1
 8011a14:	b932      	cbnz	r2, 8011a24 <_scanf_chars+0x1c>
 8011a16:	698a      	ldr	r2, [r1, #24]
 8011a18:	2a00      	cmp	r2, #0
 8011a1a:	bf14      	ite	ne
 8011a1c:	f04f 32ff 	movne.w	r2, #4294967295
 8011a20:	2201      	moveq	r2, #1
 8011a22:	608a      	str	r2, [r1, #8]
 8011a24:	6822      	ldr	r2, [r4, #0]
 8011a26:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8011ab8 <_scanf_chars+0xb0>
 8011a2a:	06d1      	lsls	r1, r2, #27
 8011a2c:	bf5f      	itttt	pl
 8011a2e:	681a      	ldrpl	r2, [r3, #0]
 8011a30:	1d11      	addpl	r1, r2, #4
 8011a32:	6019      	strpl	r1, [r3, #0]
 8011a34:	6816      	ldrpl	r6, [r2, #0]
 8011a36:	2700      	movs	r7, #0
 8011a38:	69a0      	ldr	r0, [r4, #24]
 8011a3a:	b188      	cbz	r0, 8011a60 <_scanf_chars+0x58>
 8011a3c:	2801      	cmp	r0, #1
 8011a3e:	d107      	bne.n	8011a50 <_scanf_chars+0x48>
 8011a40:	682b      	ldr	r3, [r5, #0]
 8011a42:	781a      	ldrb	r2, [r3, #0]
 8011a44:	6963      	ldr	r3, [r4, #20]
 8011a46:	5c9b      	ldrb	r3, [r3, r2]
 8011a48:	b953      	cbnz	r3, 8011a60 <_scanf_chars+0x58>
 8011a4a:	2f00      	cmp	r7, #0
 8011a4c:	d031      	beq.n	8011ab2 <_scanf_chars+0xaa>
 8011a4e:	e022      	b.n	8011a96 <_scanf_chars+0x8e>
 8011a50:	2802      	cmp	r0, #2
 8011a52:	d120      	bne.n	8011a96 <_scanf_chars+0x8e>
 8011a54:	682b      	ldr	r3, [r5, #0]
 8011a56:	781b      	ldrb	r3, [r3, #0]
 8011a58:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011a5c:	071b      	lsls	r3, r3, #28
 8011a5e:	d41a      	bmi.n	8011a96 <_scanf_chars+0x8e>
 8011a60:	6823      	ldr	r3, [r4, #0]
 8011a62:	06da      	lsls	r2, r3, #27
 8011a64:	bf5e      	ittt	pl
 8011a66:	682b      	ldrpl	r3, [r5, #0]
 8011a68:	781b      	ldrbpl	r3, [r3, #0]
 8011a6a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011a6e:	682a      	ldr	r2, [r5, #0]
 8011a70:	686b      	ldr	r3, [r5, #4]
 8011a72:	3201      	adds	r2, #1
 8011a74:	602a      	str	r2, [r5, #0]
 8011a76:	68a2      	ldr	r2, [r4, #8]
 8011a78:	3b01      	subs	r3, #1
 8011a7a:	3a01      	subs	r2, #1
 8011a7c:	606b      	str	r3, [r5, #4]
 8011a7e:	3701      	adds	r7, #1
 8011a80:	60a2      	str	r2, [r4, #8]
 8011a82:	b142      	cbz	r2, 8011a96 <_scanf_chars+0x8e>
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	dcd7      	bgt.n	8011a38 <_scanf_chars+0x30>
 8011a88:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011a8c:	4629      	mov	r1, r5
 8011a8e:	4640      	mov	r0, r8
 8011a90:	4798      	blx	r3
 8011a92:	2800      	cmp	r0, #0
 8011a94:	d0d0      	beq.n	8011a38 <_scanf_chars+0x30>
 8011a96:	6823      	ldr	r3, [r4, #0]
 8011a98:	f013 0310 	ands.w	r3, r3, #16
 8011a9c:	d105      	bne.n	8011aaa <_scanf_chars+0xa2>
 8011a9e:	68e2      	ldr	r2, [r4, #12]
 8011aa0:	3201      	adds	r2, #1
 8011aa2:	60e2      	str	r2, [r4, #12]
 8011aa4:	69a2      	ldr	r2, [r4, #24]
 8011aa6:	b102      	cbz	r2, 8011aaa <_scanf_chars+0xa2>
 8011aa8:	7033      	strb	r3, [r6, #0]
 8011aaa:	6923      	ldr	r3, [r4, #16]
 8011aac:	443b      	add	r3, r7
 8011aae:	6123      	str	r3, [r4, #16]
 8011ab0:	2000      	movs	r0, #0
 8011ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ab6:	bf00      	nop
 8011ab8:	08014009 	.word	0x08014009

08011abc <_scanf_i>:
 8011abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ac0:	4698      	mov	r8, r3
 8011ac2:	4b74      	ldr	r3, [pc, #464]	@ (8011c94 <_scanf_i+0x1d8>)
 8011ac4:	460c      	mov	r4, r1
 8011ac6:	4682      	mov	sl, r0
 8011ac8:	4616      	mov	r6, r2
 8011aca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011ace:	b087      	sub	sp, #28
 8011ad0:	ab03      	add	r3, sp, #12
 8011ad2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011ad6:	4b70      	ldr	r3, [pc, #448]	@ (8011c98 <_scanf_i+0x1dc>)
 8011ad8:	69a1      	ldr	r1, [r4, #24]
 8011ada:	4a70      	ldr	r2, [pc, #448]	@ (8011c9c <_scanf_i+0x1e0>)
 8011adc:	2903      	cmp	r1, #3
 8011ade:	bf08      	it	eq
 8011ae0:	461a      	moveq	r2, r3
 8011ae2:	68a3      	ldr	r3, [r4, #8]
 8011ae4:	9201      	str	r2, [sp, #4]
 8011ae6:	1e5a      	subs	r2, r3, #1
 8011ae8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8011aec:	bf88      	it	hi
 8011aee:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011af2:	4627      	mov	r7, r4
 8011af4:	bf82      	ittt	hi
 8011af6:	eb03 0905 	addhi.w	r9, r3, r5
 8011afa:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8011afe:	60a3      	strhi	r3, [r4, #8]
 8011b00:	f857 3b1c 	ldr.w	r3, [r7], #28
 8011b04:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8011b08:	bf98      	it	ls
 8011b0a:	f04f 0900 	movls.w	r9, #0
 8011b0e:	6023      	str	r3, [r4, #0]
 8011b10:	463d      	mov	r5, r7
 8011b12:	f04f 0b00 	mov.w	fp, #0
 8011b16:	6831      	ldr	r1, [r6, #0]
 8011b18:	ab03      	add	r3, sp, #12
 8011b1a:	7809      	ldrb	r1, [r1, #0]
 8011b1c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8011b20:	2202      	movs	r2, #2
 8011b22:	f7ee fb5d 	bl	80001e0 <memchr>
 8011b26:	b328      	cbz	r0, 8011b74 <_scanf_i+0xb8>
 8011b28:	f1bb 0f01 	cmp.w	fp, #1
 8011b2c:	d159      	bne.n	8011be2 <_scanf_i+0x126>
 8011b2e:	6862      	ldr	r2, [r4, #4]
 8011b30:	b92a      	cbnz	r2, 8011b3e <_scanf_i+0x82>
 8011b32:	6822      	ldr	r2, [r4, #0]
 8011b34:	2108      	movs	r1, #8
 8011b36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011b3a:	6061      	str	r1, [r4, #4]
 8011b3c:	6022      	str	r2, [r4, #0]
 8011b3e:	6822      	ldr	r2, [r4, #0]
 8011b40:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8011b44:	6022      	str	r2, [r4, #0]
 8011b46:	68a2      	ldr	r2, [r4, #8]
 8011b48:	1e51      	subs	r1, r2, #1
 8011b4a:	60a1      	str	r1, [r4, #8]
 8011b4c:	b192      	cbz	r2, 8011b74 <_scanf_i+0xb8>
 8011b4e:	6832      	ldr	r2, [r6, #0]
 8011b50:	1c51      	adds	r1, r2, #1
 8011b52:	6031      	str	r1, [r6, #0]
 8011b54:	7812      	ldrb	r2, [r2, #0]
 8011b56:	f805 2b01 	strb.w	r2, [r5], #1
 8011b5a:	6872      	ldr	r2, [r6, #4]
 8011b5c:	3a01      	subs	r2, #1
 8011b5e:	2a00      	cmp	r2, #0
 8011b60:	6072      	str	r2, [r6, #4]
 8011b62:	dc07      	bgt.n	8011b74 <_scanf_i+0xb8>
 8011b64:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8011b68:	4631      	mov	r1, r6
 8011b6a:	4650      	mov	r0, sl
 8011b6c:	4790      	blx	r2
 8011b6e:	2800      	cmp	r0, #0
 8011b70:	f040 8085 	bne.w	8011c7e <_scanf_i+0x1c2>
 8011b74:	f10b 0b01 	add.w	fp, fp, #1
 8011b78:	f1bb 0f03 	cmp.w	fp, #3
 8011b7c:	d1cb      	bne.n	8011b16 <_scanf_i+0x5a>
 8011b7e:	6863      	ldr	r3, [r4, #4]
 8011b80:	b90b      	cbnz	r3, 8011b86 <_scanf_i+0xca>
 8011b82:	230a      	movs	r3, #10
 8011b84:	6063      	str	r3, [r4, #4]
 8011b86:	6863      	ldr	r3, [r4, #4]
 8011b88:	4945      	ldr	r1, [pc, #276]	@ (8011ca0 <_scanf_i+0x1e4>)
 8011b8a:	6960      	ldr	r0, [r4, #20]
 8011b8c:	1ac9      	subs	r1, r1, r3
 8011b8e:	f000 f997 	bl	8011ec0 <__sccl>
 8011b92:	f04f 0b00 	mov.w	fp, #0
 8011b96:	68a3      	ldr	r3, [r4, #8]
 8011b98:	6822      	ldr	r2, [r4, #0]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d03d      	beq.n	8011c1a <_scanf_i+0x15e>
 8011b9e:	6831      	ldr	r1, [r6, #0]
 8011ba0:	6960      	ldr	r0, [r4, #20]
 8011ba2:	f891 c000 	ldrb.w	ip, [r1]
 8011ba6:	f810 000c 	ldrb.w	r0, [r0, ip]
 8011baa:	2800      	cmp	r0, #0
 8011bac:	d035      	beq.n	8011c1a <_scanf_i+0x15e>
 8011bae:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8011bb2:	d124      	bne.n	8011bfe <_scanf_i+0x142>
 8011bb4:	0510      	lsls	r0, r2, #20
 8011bb6:	d522      	bpl.n	8011bfe <_scanf_i+0x142>
 8011bb8:	f10b 0b01 	add.w	fp, fp, #1
 8011bbc:	f1b9 0f00 	cmp.w	r9, #0
 8011bc0:	d003      	beq.n	8011bca <_scanf_i+0x10e>
 8011bc2:	3301      	adds	r3, #1
 8011bc4:	f109 39ff 	add.w	r9, r9, #4294967295
 8011bc8:	60a3      	str	r3, [r4, #8]
 8011bca:	6873      	ldr	r3, [r6, #4]
 8011bcc:	3b01      	subs	r3, #1
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	6073      	str	r3, [r6, #4]
 8011bd2:	dd1b      	ble.n	8011c0c <_scanf_i+0x150>
 8011bd4:	6833      	ldr	r3, [r6, #0]
 8011bd6:	3301      	adds	r3, #1
 8011bd8:	6033      	str	r3, [r6, #0]
 8011bda:	68a3      	ldr	r3, [r4, #8]
 8011bdc:	3b01      	subs	r3, #1
 8011bde:	60a3      	str	r3, [r4, #8]
 8011be0:	e7d9      	b.n	8011b96 <_scanf_i+0xda>
 8011be2:	f1bb 0f02 	cmp.w	fp, #2
 8011be6:	d1ae      	bne.n	8011b46 <_scanf_i+0x8a>
 8011be8:	6822      	ldr	r2, [r4, #0]
 8011bea:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8011bee:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8011bf2:	d1bf      	bne.n	8011b74 <_scanf_i+0xb8>
 8011bf4:	2110      	movs	r1, #16
 8011bf6:	6061      	str	r1, [r4, #4]
 8011bf8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011bfc:	e7a2      	b.n	8011b44 <_scanf_i+0x88>
 8011bfe:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8011c02:	6022      	str	r2, [r4, #0]
 8011c04:	780b      	ldrb	r3, [r1, #0]
 8011c06:	f805 3b01 	strb.w	r3, [r5], #1
 8011c0a:	e7de      	b.n	8011bca <_scanf_i+0x10e>
 8011c0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011c10:	4631      	mov	r1, r6
 8011c12:	4650      	mov	r0, sl
 8011c14:	4798      	blx	r3
 8011c16:	2800      	cmp	r0, #0
 8011c18:	d0df      	beq.n	8011bda <_scanf_i+0x11e>
 8011c1a:	6823      	ldr	r3, [r4, #0]
 8011c1c:	05d9      	lsls	r1, r3, #23
 8011c1e:	d50d      	bpl.n	8011c3c <_scanf_i+0x180>
 8011c20:	42bd      	cmp	r5, r7
 8011c22:	d909      	bls.n	8011c38 <_scanf_i+0x17c>
 8011c24:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011c28:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011c2c:	4632      	mov	r2, r6
 8011c2e:	4650      	mov	r0, sl
 8011c30:	4798      	blx	r3
 8011c32:	f105 39ff 	add.w	r9, r5, #4294967295
 8011c36:	464d      	mov	r5, r9
 8011c38:	42bd      	cmp	r5, r7
 8011c3a:	d028      	beq.n	8011c8e <_scanf_i+0x1d2>
 8011c3c:	6822      	ldr	r2, [r4, #0]
 8011c3e:	f012 0210 	ands.w	r2, r2, #16
 8011c42:	d113      	bne.n	8011c6c <_scanf_i+0x1b0>
 8011c44:	702a      	strb	r2, [r5, #0]
 8011c46:	6863      	ldr	r3, [r4, #4]
 8011c48:	9e01      	ldr	r6, [sp, #4]
 8011c4a:	4639      	mov	r1, r7
 8011c4c:	4650      	mov	r0, sl
 8011c4e:	47b0      	blx	r6
 8011c50:	f8d8 3000 	ldr.w	r3, [r8]
 8011c54:	6821      	ldr	r1, [r4, #0]
 8011c56:	1d1a      	adds	r2, r3, #4
 8011c58:	f8c8 2000 	str.w	r2, [r8]
 8011c5c:	f011 0f20 	tst.w	r1, #32
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	d00f      	beq.n	8011c84 <_scanf_i+0x1c8>
 8011c64:	6018      	str	r0, [r3, #0]
 8011c66:	68e3      	ldr	r3, [r4, #12]
 8011c68:	3301      	adds	r3, #1
 8011c6a:	60e3      	str	r3, [r4, #12]
 8011c6c:	6923      	ldr	r3, [r4, #16]
 8011c6e:	1bed      	subs	r5, r5, r7
 8011c70:	445d      	add	r5, fp
 8011c72:	442b      	add	r3, r5
 8011c74:	6123      	str	r3, [r4, #16]
 8011c76:	2000      	movs	r0, #0
 8011c78:	b007      	add	sp, #28
 8011c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c7e:	f04f 0b00 	mov.w	fp, #0
 8011c82:	e7ca      	b.n	8011c1a <_scanf_i+0x15e>
 8011c84:	07ca      	lsls	r2, r1, #31
 8011c86:	bf4c      	ite	mi
 8011c88:	8018      	strhmi	r0, [r3, #0]
 8011c8a:	6018      	strpl	r0, [r3, #0]
 8011c8c:	e7eb      	b.n	8011c66 <_scanf_i+0x1aa>
 8011c8e:	2001      	movs	r0, #1
 8011c90:	e7f2      	b.n	8011c78 <_scanf_i+0x1bc>
 8011c92:	bf00      	nop
 8011c94:	08013cd4 	.word	0x08013cd4
 8011c98:	08011139 	.word	0x08011139
 8011c9c:	08012885 	.word	0x08012885
 8011ca0:	0801412a 	.word	0x0801412a

08011ca4 <__sflush_r>:
 8011ca4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cac:	0716      	lsls	r6, r2, #28
 8011cae:	4605      	mov	r5, r0
 8011cb0:	460c      	mov	r4, r1
 8011cb2:	d454      	bmi.n	8011d5e <__sflush_r+0xba>
 8011cb4:	684b      	ldr	r3, [r1, #4]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	dc02      	bgt.n	8011cc0 <__sflush_r+0x1c>
 8011cba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	dd48      	ble.n	8011d52 <__sflush_r+0xae>
 8011cc0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011cc2:	2e00      	cmp	r6, #0
 8011cc4:	d045      	beq.n	8011d52 <__sflush_r+0xae>
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011ccc:	682f      	ldr	r7, [r5, #0]
 8011cce:	6a21      	ldr	r1, [r4, #32]
 8011cd0:	602b      	str	r3, [r5, #0]
 8011cd2:	d030      	beq.n	8011d36 <__sflush_r+0x92>
 8011cd4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011cd6:	89a3      	ldrh	r3, [r4, #12]
 8011cd8:	0759      	lsls	r1, r3, #29
 8011cda:	d505      	bpl.n	8011ce8 <__sflush_r+0x44>
 8011cdc:	6863      	ldr	r3, [r4, #4]
 8011cde:	1ad2      	subs	r2, r2, r3
 8011ce0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011ce2:	b10b      	cbz	r3, 8011ce8 <__sflush_r+0x44>
 8011ce4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011ce6:	1ad2      	subs	r2, r2, r3
 8011ce8:	2300      	movs	r3, #0
 8011cea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011cec:	6a21      	ldr	r1, [r4, #32]
 8011cee:	4628      	mov	r0, r5
 8011cf0:	47b0      	blx	r6
 8011cf2:	1c43      	adds	r3, r0, #1
 8011cf4:	89a3      	ldrh	r3, [r4, #12]
 8011cf6:	d106      	bne.n	8011d06 <__sflush_r+0x62>
 8011cf8:	6829      	ldr	r1, [r5, #0]
 8011cfa:	291d      	cmp	r1, #29
 8011cfc:	d82b      	bhi.n	8011d56 <__sflush_r+0xb2>
 8011cfe:	4a2a      	ldr	r2, [pc, #168]	@ (8011da8 <__sflush_r+0x104>)
 8011d00:	410a      	asrs	r2, r1
 8011d02:	07d6      	lsls	r6, r2, #31
 8011d04:	d427      	bmi.n	8011d56 <__sflush_r+0xb2>
 8011d06:	2200      	movs	r2, #0
 8011d08:	6062      	str	r2, [r4, #4]
 8011d0a:	04d9      	lsls	r1, r3, #19
 8011d0c:	6922      	ldr	r2, [r4, #16]
 8011d0e:	6022      	str	r2, [r4, #0]
 8011d10:	d504      	bpl.n	8011d1c <__sflush_r+0x78>
 8011d12:	1c42      	adds	r2, r0, #1
 8011d14:	d101      	bne.n	8011d1a <__sflush_r+0x76>
 8011d16:	682b      	ldr	r3, [r5, #0]
 8011d18:	b903      	cbnz	r3, 8011d1c <__sflush_r+0x78>
 8011d1a:	6560      	str	r0, [r4, #84]	@ 0x54
 8011d1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011d1e:	602f      	str	r7, [r5, #0]
 8011d20:	b1b9      	cbz	r1, 8011d52 <__sflush_r+0xae>
 8011d22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011d26:	4299      	cmp	r1, r3
 8011d28:	d002      	beq.n	8011d30 <__sflush_r+0x8c>
 8011d2a:	4628      	mov	r0, r5
 8011d2c:	f7fd fdd0 	bl	800f8d0 <_free_r>
 8011d30:	2300      	movs	r3, #0
 8011d32:	6363      	str	r3, [r4, #52]	@ 0x34
 8011d34:	e00d      	b.n	8011d52 <__sflush_r+0xae>
 8011d36:	2301      	movs	r3, #1
 8011d38:	4628      	mov	r0, r5
 8011d3a:	47b0      	blx	r6
 8011d3c:	4602      	mov	r2, r0
 8011d3e:	1c50      	adds	r0, r2, #1
 8011d40:	d1c9      	bne.n	8011cd6 <__sflush_r+0x32>
 8011d42:	682b      	ldr	r3, [r5, #0]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d0c6      	beq.n	8011cd6 <__sflush_r+0x32>
 8011d48:	2b1d      	cmp	r3, #29
 8011d4a:	d001      	beq.n	8011d50 <__sflush_r+0xac>
 8011d4c:	2b16      	cmp	r3, #22
 8011d4e:	d11e      	bne.n	8011d8e <__sflush_r+0xea>
 8011d50:	602f      	str	r7, [r5, #0]
 8011d52:	2000      	movs	r0, #0
 8011d54:	e022      	b.n	8011d9c <__sflush_r+0xf8>
 8011d56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d5a:	b21b      	sxth	r3, r3
 8011d5c:	e01b      	b.n	8011d96 <__sflush_r+0xf2>
 8011d5e:	690f      	ldr	r7, [r1, #16]
 8011d60:	2f00      	cmp	r7, #0
 8011d62:	d0f6      	beq.n	8011d52 <__sflush_r+0xae>
 8011d64:	0793      	lsls	r3, r2, #30
 8011d66:	680e      	ldr	r6, [r1, #0]
 8011d68:	bf08      	it	eq
 8011d6a:	694b      	ldreq	r3, [r1, #20]
 8011d6c:	600f      	str	r7, [r1, #0]
 8011d6e:	bf18      	it	ne
 8011d70:	2300      	movne	r3, #0
 8011d72:	eba6 0807 	sub.w	r8, r6, r7
 8011d76:	608b      	str	r3, [r1, #8]
 8011d78:	f1b8 0f00 	cmp.w	r8, #0
 8011d7c:	dde9      	ble.n	8011d52 <__sflush_r+0xae>
 8011d7e:	6a21      	ldr	r1, [r4, #32]
 8011d80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011d82:	4643      	mov	r3, r8
 8011d84:	463a      	mov	r2, r7
 8011d86:	4628      	mov	r0, r5
 8011d88:	47b0      	blx	r6
 8011d8a:	2800      	cmp	r0, #0
 8011d8c:	dc08      	bgt.n	8011da0 <__sflush_r+0xfc>
 8011d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d96:	81a3      	strh	r3, [r4, #12]
 8011d98:	f04f 30ff 	mov.w	r0, #4294967295
 8011d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011da0:	4407      	add	r7, r0
 8011da2:	eba8 0800 	sub.w	r8, r8, r0
 8011da6:	e7e7      	b.n	8011d78 <__sflush_r+0xd4>
 8011da8:	dfbffffe 	.word	0xdfbffffe

08011dac <_fflush_r>:
 8011dac:	b538      	push	{r3, r4, r5, lr}
 8011dae:	690b      	ldr	r3, [r1, #16]
 8011db0:	4605      	mov	r5, r0
 8011db2:	460c      	mov	r4, r1
 8011db4:	b913      	cbnz	r3, 8011dbc <_fflush_r+0x10>
 8011db6:	2500      	movs	r5, #0
 8011db8:	4628      	mov	r0, r5
 8011dba:	bd38      	pop	{r3, r4, r5, pc}
 8011dbc:	b118      	cbz	r0, 8011dc6 <_fflush_r+0x1a>
 8011dbe:	6a03      	ldr	r3, [r0, #32]
 8011dc0:	b90b      	cbnz	r3, 8011dc6 <_fflush_r+0x1a>
 8011dc2:	f7fc fcc7 	bl	800e754 <__sinit>
 8011dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d0f3      	beq.n	8011db6 <_fflush_r+0xa>
 8011dce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011dd0:	07d0      	lsls	r0, r2, #31
 8011dd2:	d404      	bmi.n	8011dde <_fflush_r+0x32>
 8011dd4:	0599      	lsls	r1, r3, #22
 8011dd6:	d402      	bmi.n	8011dde <_fflush_r+0x32>
 8011dd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011dda:	f7fc ff14 	bl	800ec06 <__retarget_lock_acquire_recursive>
 8011dde:	4628      	mov	r0, r5
 8011de0:	4621      	mov	r1, r4
 8011de2:	f7ff ff5f 	bl	8011ca4 <__sflush_r>
 8011de6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011de8:	07da      	lsls	r2, r3, #31
 8011dea:	4605      	mov	r5, r0
 8011dec:	d4e4      	bmi.n	8011db8 <_fflush_r+0xc>
 8011dee:	89a3      	ldrh	r3, [r4, #12]
 8011df0:	059b      	lsls	r3, r3, #22
 8011df2:	d4e1      	bmi.n	8011db8 <_fflush_r+0xc>
 8011df4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011df6:	f7fc ff07 	bl	800ec08 <__retarget_lock_release_recursive>
 8011dfa:	e7dd      	b.n	8011db8 <_fflush_r+0xc>

08011dfc <__swhatbuf_r>:
 8011dfc:	b570      	push	{r4, r5, r6, lr}
 8011dfe:	460c      	mov	r4, r1
 8011e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e04:	2900      	cmp	r1, #0
 8011e06:	b096      	sub	sp, #88	@ 0x58
 8011e08:	4615      	mov	r5, r2
 8011e0a:	461e      	mov	r6, r3
 8011e0c:	da0d      	bge.n	8011e2a <__swhatbuf_r+0x2e>
 8011e0e:	89a3      	ldrh	r3, [r4, #12]
 8011e10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011e14:	f04f 0100 	mov.w	r1, #0
 8011e18:	bf14      	ite	ne
 8011e1a:	2340      	movne	r3, #64	@ 0x40
 8011e1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011e20:	2000      	movs	r0, #0
 8011e22:	6031      	str	r1, [r6, #0]
 8011e24:	602b      	str	r3, [r5, #0]
 8011e26:	b016      	add	sp, #88	@ 0x58
 8011e28:	bd70      	pop	{r4, r5, r6, pc}
 8011e2a:	466a      	mov	r2, sp
 8011e2c:	f000 f8d6 	bl	8011fdc <_fstat_r>
 8011e30:	2800      	cmp	r0, #0
 8011e32:	dbec      	blt.n	8011e0e <__swhatbuf_r+0x12>
 8011e34:	9901      	ldr	r1, [sp, #4]
 8011e36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011e3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011e3e:	4259      	negs	r1, r3
 8011e40:	4159      	adcs	r1, r3
 8011e42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011e46:	e7eb      	b.n	8011e20 <__swhatbuf_r+0x24>

08011e48 <__smakebuf_r>:
 8011e48:	898b      	ldrh	r3, [r1, #12]
 8011e4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011e4c:	079d      	lsls	r5, r3, #30
 8011e4e:	4606      	mov	r6, r0
 8011e50:	460c      	mov	r4, r1
 8011e52:	d507      	bpl.n	8011e64 <__smakebuf_r+0x1c>
 8011e54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011e58:	6023      	str	r3, [r4, #0]
 8011e5a:	6123      	str	r3, [r4, #16]
 8011e5c:	2301      	movs	r3, #1
 8011e5e:	6163      	str	r3, [r4, #20]
 8011e60:	b003      	add	sp, #12
 8011e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e64:	ab01      	add	r3, sp, #4
 8011e66:	466a      	mov	r2, sp
 8011e68:	f7ff ffc8 	bl	8011dfc <__swhatbuf_r>
 8011e6c:	9f00      	ldr	r7, [sp, #0]
 8011e6e:	4605      	mov	r5, r0
 8011e70:	4639      	mov	r1, r7
 8011e72:	4630      	mov	r0, r6
 8011e74:	f7fd fda0 	bl	800f9b8 <_malloc_r>
 8011e78:	b948      	cbnz	r0, 8011e8e <__smakebuf_r+0x46>
 8011e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e7e:	059a      	lsls	r2, r3, #22
 8011e80:	d4ee      	bmi.n	8011e60 <__smakebuf_r+0x18>
 8011e82:	f023 0303 	bic.w	r3, r3, #3
 8011e86:	f043 0302 	orr.w	r3, r3, #2
 8011e8a:	81a3      	strh	r3, [r4, #12]
 8011e8c:	e7e2      	b.n	8011e54 <__smakebuf_r+0xc>
 8011e8e:	89a3      	ldrh	r3, [r4, #12]
 8011e90:	6020      	str	r0, [r4, #0]
 8011e92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e96:	81a3      	strh	r3, [r4, #12]
 8011e98:	9b01      	ldr	r3, [sp, #4]
 8011e9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011e9e:	b15b      	cbz	r3, 8011eb8 <__smakebuf_r+0x70>
 8011ea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ea4:	4630      	mov	r0, r6
 8011ea6:	f000 f8ab 	bl	8012000 <_isatty_r>
 8011eaa:	b128      	cbz	r0, 8011eb8 <__smakebuf_r+0x70>
 8011eac:	89a3      	ldrh	r3, [r4, #12]
 8011eae:	f023 0303 	bic.w	r3, r3, #3
 8011eb2:	f043 0301 	orr.w	r3, r3, #1
 8011eb6:	81a3      	strh	r3, [r4, #12]
 8011eb8:	89a3      	ldrh	r3, [r4, #12]
 8011eba:	431d      	orrs	r5, r3
 8011ebc:	81a5      	strh	r5, [r4, #12]
 8011ebe:	e7cf      	b.n	8011e60 <__smakebuf_r+0x18>

08011ec0 <__sccl>:
 8011ec0:	b570      	push	{r4, r5, r6, lr}
 8011ec2:	780b      	ldrb	r3, [r1, #0]
 8011ec4:	4604      	mov	r4, r0
 8011ec6:	2b5e      	cmp	r3, #94	@ 0x5e
 8011ec8:	bf0b      	itete	eq
 8011eca:	784b      	ldrbeq	r3, [r1, #1]
 8011ecc:	1c4a      	addne	r2, r1, #1
 8011ece:	1c8a      	addeq	r2, r1, #2
 8011ed0:	2100      	movne	r1, #0
 8011ed2:	bf08      	it	eq
 8011ed4:	2101      	moveq	r1, #1
 8011ed6:	3801      	subs	r0, #1
 8011ed8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8011edc:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011ee0:	42a8      	cmp	r0, r5
 8011ee2:	d1fb      	bne.n	8011edc <__sccl+0x1c>
 8011ee4:	b90b      	cbnz	r3, 8011eea <__sccl+0x2a>
 8011ee6:	1e50      	subs	r0, r2, #1
 8011ee8:	bd70      	pop	{r4, r5, r6, pc}
 8011eea:	f081 0101 	eor.w	r1, r1, #1
 8011eee:	54e1      	strb	r1, [r4, r3]
 8011ef0:	4610      	mov	r0, r2
 8011ef2:	4602      	mov	r2, r0
 8011ef4:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011ef8:	2d2d      	cmp	r5, #45	@ 0x2d
 8011efa:	d005      	beq.n	8011f08 <__sccl+0x48>
 8011efc:	2d5d      	cmp	r5, #93	@ 0x5d
 8011efe:	d016      	beq.n	8011f2e <__sccl+0x6e>
 8011f00:	2d00      	cmp	r5, #0
 8011f02:	d0f1      	beq.n	8011ee8 <__sccl+0x28>
 8011f04:	462b      	mov	r3, r5
 8011f06:	e7f2      	b.n	8011eee <__sccl+0x2e>
 8011f08:	7846      	ldrb	r6, [r0, #1]
 8011f0a:	2e5d      	cmp	r6, #93	@ 0x5d
 8011f0c:	d0fa      	beq.n	8011f04 <__sccl+0x44>
 8011f0e:	42b3      	cmp	r3, r6
 8011f10:	dcf8      	bgt.n	8011f04 <__sccl+0x44>
 8011f12:	3002      	adds	r0, #2
 8011f14:	461a      	mov	r2, r3
 8011f16:	3201      	adds	r2, #1
 8011f18:	4296      	cmp	r6, r2
 8011f1a:	54a1      	strb	r1, [r4, r2]
 8011f1c:	dcfb      	bgt.n	8011f16 <__sccl+0x56>
 8011f1e:	1af2      	subs	r2, r6, r3
 8011f20:	3a01      	subs	r2, #1
 8011f22:	1c5d      	adds	r5, r3, #1
 8011f24:	42b3      	cmp	r3, r6
 8011f26:	bfa8      	it	ge
 8011f28:	2200      	movge	r2, #0
 8011f2a:	18ab      	adds	r3, r5, r2
 8011f2c:	e7e1      	b.n	8011ef2 <__sccl+0x32>
 8011f2e:	4610      	mov	r0, r2
 8011f30:	e7da      	b.n	8011ee8 <__sccl+0x28>

08011f32 <__submore>:
 8011f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f36:	460c      	mov	r4, r1
 8011f38:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011f3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011f3e:	4299      	cmp	r1, r3
 8011f40:	d11d      	bne.n	8011f7e <__submore+0x4c>
 8011f42:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8011f46:	f7fd fd37 	bl	800f9b8 <_malloc_r>
 8011f4a:	b918      	cbnz	r0, 8011f54 <__submore+0x22>
 8011f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8011f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011f58:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011f5a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8011f5e:	6360      	str	r0, [r4, #52]	@ 0x34
 8011f60:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8011f64:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8011f68:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8011f6c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011f70:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8011f74:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8011f78:	6020      	str	r0, [r4, #0]
 8011f7a:	2000      	movs	r0, #0
 8011f7c:	e7e8      	b.n	8011f50 <__submore+0x1e>
 8011f7e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8011f80:	0077      	lsls	r7, r6, #1
 8011f82:	463a      	mov	r2, r7
 8011f84:	f000 fbe1 	bl	801274a <_realloc_r>
 8011f88:	4605      	mov	r5, r0
 8011f8a:	2800      	cmp	r0, #0
 8011f8c:	d0de      	beq.n	8011f4c <__submore+0x1a>
 8011f8e:	eb00 0806 	add.w	r8, r0, r6
 8011f92:	4601      	mov	r1, r0
 8011f94:	4632      	mov	r2, r6
 8011f96:	4640      	mov	r0, r8
 8011f98:	f7fc fe37 	bl	800ec0a <memcpy>
 8011f9c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8011fa0:	f8c4 8000 	str.w	r8, [r4]
 8011fa4:	e7e9      	b.n	8011f7a <__submore+0x48>

08011fa6 <memmove>:
 8011fa6:	4288      	cmp	r0, r1
 8011fa8:	b510      	push	{r4, lr}
 8011faa:	eb01 0402 	add.w	r4, r1, r2
 8011fae:	d902      	bls.n	8011fb6 <memmove+0x10>
 8011fb0:	4284      	cmp	r4, r0
 8011fb2:	4623      	mov	r3, r4
 8011fb4:	d807      	bhi.n	8011fc6 <memmove+0x20>
 8011fb6:	1e43      	subs	r3, r0, #1
 8011fb8:	42a1      	cmp	r1, r4
 8011fba:	d008      	beq.n	8011fce <memmove+0x28>
 8011fbc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011fc0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011fc4:	e7f8      	b.n	8011fb8 <memmove+0x12>
 8011fc6:	4402      	add	r2, r0
 8011fc8:	4601      	mov	r1, r0
 8011fca:	428a      	cmp	r2, r1
 8011fcc:	d100      	bne.n	8011fd0 <memmove+0x2a>
 8011fce:	bd10      	pop	{r4, pc}
 8011fd0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011fd4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011fd8:	e7f7      	b.n	8011fca <memmove+0x24>
	...

08011fdc <_fstat_r>:
 8011fdc:	b538      	push	{r3, r4, r5, lr}
 8011fde:	4d07      	ldr	r5, [pc, #28]	@ (8011ffc <_fstat_r+0x20>)
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	4604      	mov	r4, r0
 8011fe4:	4608      	mov	r0, r1
 8011fe6:	4611      	mov	r1, r2
 8011fe8:	602b      	str	r3, [r5, #0]
 8011fea:	f7f1 fdff 	bl	8003bec <_fstat>
 8011fee:	1c43      	adds	r3, r0, #1
 8011ff0:	d102      	bne.n	8011ff8 <_fstat_r+0x1c>
 8011ff2:	682b      	ldr	r3, [r5, #0]
 8011ff4:	b103      	cbz	r3, 8011ff8 <_fstat_r+0x1c>
 8011ff6:	6023      	str	r3, [r4, #0]
 8011ff8:	bd38      	pop	{r3, r4, r5, pc}
 8011ffa:	bf00      	nop
 8011ffc:	20002d10 	.word	0x20002d10

08012000 <_isatty_r>:
 8012000:	b538      	push	{r3, r4, r5, lr}
 8012002:	4d06      	ldr	r5, [pc, #24]	@ (801201c <_isatty_r+0x1c>)
 8012004:	2300      	movs	r3, #0
 8012006:	4604      	mov	r4, r0
 8012008:	4608      	mov	r0, r1
 801200a:	602b      	str	r3, [r5, #0]
 801200c:	f7f1 fdfe 	bl	8003c0c <_isatty>
 8012010:	1c43      	adds	r3, r0, #1
 8012012:	d102      	bne.n	801201a <_isatty_r+0x1a>
 8012014:	682b      	ldr	r3, [r5, #0]
 8012016:	b103      	cbz	r3, 801201a <_isatty_r+0x1a>
 8012018:	6023      	str	r3, [r4, #0]
 801201a:	bd38      	pop	{r3, r4, r5, pc}
 801201c:	20002d10 	.word	0x20002d10

08012020 <_sbrk_r>:
 8012020:	b538      	push	{r3, r4, r5, lr}
 8012022:	4d06      	ldr	r5, [pc, #24]	@ (801203c <_sbrk_r+0x1c>)
 8012024:	2300      	movs	r3, #0
 8012026:	4604      	mov	r4, r0
 8012028:	4608      	mov	r0, r1
 801202a:	602b      	str	r3, [r5, #0]
 801202c:	f7f1 fe06 	bl	8003c3c <_sbrk>
 8012030:	1c43      	adds	r3, r0, #1
 8012032:	d102      	bne.n	801203a <_sbrk_r+0x1a>
 8012034:	682b      	ldr	r3, [r5, #0]
 8012036:	b103      	cbz	r3, 801203a <_sbrk_r+0x1a>
 8012038:	6023      	str	r3, [r4, #0]
 801203a:	bd38      	pop	{r3, r4, r5, pc}
 801203c:	20002d10 	.word	0x20002d10

08012040 <nan>:
 8012040:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012048 <nan+0x8>
 8012044:	4770      	bx	lr
 8012046:	bf00      	nop
 8012048:	00000000 	.word	0x00000000
 801204c:	7ff80000 	.word	0x7ff80000

08012050 <__assert_func>:
 8012050:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012052:	4614      	mov	r4, r2
 8012054:	461a      	mov	r2, r3
 8012056:	4b09      	ldr	r3, [pc, #36]	@ (801207c <__assert_func+0x2c>)
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	4605      	mov	r5, r0
 801205c:	68d8      	ldr	r0, [r3, #12]
 801205e:	b954      	cbnz	r4, 8012076 <__assert_func+0x26>
 8012060:	4b07      	ldr	r3, [pc, #28]	@ (8012080 <__assert_func+0x30>)
 8012062:	461c      	mov	r4, r3
 8012064:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012068:	9100      	str	r1, [sp, #0]
 801206a:	462b      	mov	r3, r5
 801206c:	4905      	ldr	r1, [pc, #20]	@ (8012084 <__assert_func+0x34>)
 801206e:	f000 fc19 	bl	80128a4 <fiprintf>
 8012072:	f000 fc29 	bl	80128c8 <abort>
 8012076:	4b04      	ldr	r3, [pc, #16]	@ (8012088 <__assert_func+0x38>)
 8012078:	e7f4      	b.n	8012064 <__assert_func+0x14>
 801207a:	bf00      	nop
 801207c:	20000020 	.word	0x20000020
 8012080:	08014178 	.word	0x08014178
 8012084:	0801414a 	.word	0x0801414a
 8012088:	0801413d 	.word	0x0801413d

0801208c <_calloc_r>:
 801208c:	b570      	push	{r4, r5, r6, lr}
 801208e:	fba1 5402 	umull	r5, r4, r1, r2
 8012092:	b93c      	cbnz	r4, 80120a4 <_calloc_r+0x18>
 8012094:	4629      	mov	r1, r5
 8012096:	f7fd fc8f 	bl	800f9b8 <_malloc_r>
 801209a:	4606      	mov	r6, r0
 801209c:	b928      	cbnz	r0, 80120aa <_calloc_r+0x1e>
 801209e:	2600      	movs	r6, #0
 80120a0:	4630      	mov	r0, r6
 80120a2:	bd70      	pop	{r4, r5, r6, pc}
 80120a4:	220c      	movs	r2, #12
 80120a6:	6002      	str	r2, [r0, #0]
 80120a8:	e7f9      	b.n	801209e <_calloc_r+0x12>
 80120aa:	462a      	mov	r2, r5
 80120ac:	4621      	mov	r1, r4
 80120ae:	f7fc fd1b 	bl	800eae8 <memset>
 80120b2:	e7f5      	b.n	80120a0 <_calloc_r+0x14>

080120b4 <rshift>:
 80120b4:	6903      	ldr	r3, [r0, #16]
 80120b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80120ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80120be:	ea4f 1261 	mov.w	r2, r1, asr #5
 80120c2:	f100 0414 	add.w	r4, r0, #20
 80120c6:	dd45      	ble.n	8012154 <rshift+0xa0>
 80120c8:	f011 011f 	ands.w	r1, r1, #31
 80120cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80120d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80120d4:	d10c      	bne.n	80120f0 <rshift+0x3c>
 80120d6:	f100 0710 	add.w	r7, r0, #16
 80120da:	4629      	mov	r1, r5
 80120dc:	42b1      	cmp	r1, r6
 80120de:	d334      	bcc.n	801214a <rshift+0x96>
 80120e0:	1a9b      	subs	r3, r3, r2
 80120e2:	009b      	lsls	r3, r3, #2
 80120e4:	1eea      	subs	r2, r5, #3
 80120e6:	4296      	cmp	r6, r2
 80120e8:	bf38      	it	cc
 80120ea:	2300      	movcc	r3, #0
 80120ec:	4423      	add	r3, r4
 80120ee:	e015      	b.n	801211c <rshift+0x68>
 80120f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80120f4:	f1c1 0820 	rsb	r8, r1, #32
 80120f8:	40cf      	lsrs	r7, r1
 80120fa:	f105 0e04 	add.w	lr, r5, #4
 80120fe:	46a1      	mov	r9, r4
 8012100:	4576      	cmp	r6, lr
 8012102:	46f4      	mov	ip, lr
 8012104:	d815      	bhi.n	8012132 <rshift+0x7e>
 8012106:	1a9a      	subs	r2, r3, r2
 8012108:	0092      	lsls	r2, r2, #2
 801210a:	3a04      	subs	r2, #4
 801210c:	3501      	adds	r5, #1
 801210e:	42ae      	cmp	r6, r5
 8012110:	bf38      	it	cc
 8012112:	2200      	movcc	r2, #0
 8012114:	18a3      	adds	r3, r4, r2
 8012116:	50a7      	str	r7, [r4, r2]
 8012118:	b107      	cbz	r7, 801211c <rshift+0x68>
 801211a:	3304      	adds	r3, #4
 801211c:	1b1a      	subs	r2, r3, r4
 801211e:	42a3      	cmp	r3, r4
 8012120:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012124:	bf08      	it	eq
 8012126:	2300      	moveq	r3, #0
 8012128:	6102      	str	r2, [r0, #16]
 801212a:	bf08      	it	eq
 801212c:	6143      	streq	r3, [r0, #20]
 801212e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012132:	f8dc c000 	ldr.w	ip, [ip]
 8012136:	fa0c fc08 	lsl.w	ip, ip, r8
 801213a:	ea4c 0707 	orr.w	r7, ip, r7
 801213e:	f849 7b04 	str.w	r7, [r9], #4
 8012142:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012146:	40cf      	lsrs	r7, r1
 8012148:	e7da      	b.n	8012100 <rshift+0x4c>
 801214a:	f851 cb04 	ldr.w	ip, [r1], #4
 801214e:	f847 cf04 	str.w	ip, [r7, #4]!
 8012152:	e7c3      	b.n	80120dc <rshift+0x28>
 8012154:	4623      	mov	r3, r4
 8012156:	e7e1      	b.n	801211c <rshift+0x68>

08012158 <__hexdig_fun>:
 8012158:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801215c:	2b09      	cmp	r3, #9
 801215e:	d802      	bhi.n	8012166 <__hexdig_fun+0xe>
 8012160:	3820      	subs	r0, #32
 8012162:	b2c0      	uxtb	r0, r0
 8012164:	4770      	bx	lr
 8012166:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801216a:	2b05      	cmp	r3, #5
 801216c:	d801      	bhi.n	8012172 <__hexdig_fun+0x1a>
 801216e:	3847      	subs	r0, #71	@ 0x47
 8012170:	e7f7      	b.n	8012162 <__hexdig_fun+0xa>
 8012172:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8012176:	2b05      	cmp	r3, #5
 8012178:	d801      	bhi.n	801217e <__hexdig_fun+0x26>
 801217a:	3827      	subs	r0, #39	@ 0x27
 801217c:	e7f1      	b.n	8012162 <__hexdig_fun+0xa>
 801217e:	2000      	movs	r0, #0
 8012180:	4770      	bx	lr
	...

08012184 <__gethex>:
 8012184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012188:	b085      	sub	sp, #20
 801218a:	468a      	mov	sl, r1
 801218c:	9302      	str	r3, [sp, #8]
 801218e:	680b      	ldr	r3, [r1, #0]
 8012190:	9001      	str	r0, [sp, #4]
 8012192:	4690      	mov	r8, r2
 8012194:	1c9c      	adds	r4, r3, #2
 8012196:	46a1      	mov	r9, r4
 8012198:	f814 0b01 	ldrb.w	r0, [r4], #1
 801219c:	2830      	cmp	r0, #48	@ 0x30
 801219e:	d0fa      	beq.n	8012196 <__gethex+0x12>
 80121a0:	eba9 0303 	sub.w	r3, r9, r3
 80121a4:	f1a3 0b02 	sub.w	fp, r3, #2
 80121a8:	f7ff ffd6 	bl	8012158 <__hexdig_fun>
 80121ac:	4605      	mov	r5, r0
 80121ae:	2800      	cmp	r0, #0
 80121b0:	d168      	bne.n	8012284 <__gethex+0x100>
 80121b2:	49a0      	ldr	r1, [pc, #640]	@ (8012434 <__gethex+0x2b0>)
 80121b4:	2201      	movs	r2, #1
 80121b6:	4648      	mov	r0, r9
 80121b8:	f7fc fc9e 	bl	800eaf8 <strncmp>
 80121bc:	4607      	mov	r7, r0
 80121be:	2800      	cmp	r0, #0
 80121c0:	d167      	bne.n	8012292 <__gethex+0x10e>
 80121c2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80121c6:	4626      	mov	r6, r4
 80121c8:	f7ff ffc6 	bl	8012158 <__hexdig_fun>
 80121cc:	2800      	cmp	r0, #0
 80121ce:	d062      	beq.n	8012296 <__gethex+0x112>
 80121d0:	4623      	mov	r3, r4
 80121d2:	7818      	ldrb	r0, [r3, #0]
 80121d4:	2830      	cmp	r0, #48	@ 0x30
 80121d6:	4699      	mov	r9, r3
 80121d8:	f103 0301 	add.w	r3, r3, #1
 80121dc:	d0f9      	beq.n	80121d2 <__gethex+0x4e>
 80121de:	f7ff ffbb 	bl	8012158 <__hexdig_fun>
 80121e2:	fab0 f580 	clz	r5, r0
 80121e6:	096d      	lsrs	r5, r5, #5
 80121e8:	f04f 0b01 	mov.w	fp, #1
 80121ec:	464a      	mov	r2, r9
 80121ee:	4616      	mov	r6, r2
 80121f0:	3201      	adds	r2, #1
 80121f2:	7830      	ldrb	r0, [r6, #0]
 80121f4:	f7ff ffb0 	bl	8012158 <__hexdig_fun>
 80121f8:	2800      	cmp	r0, #0
 80121fa:	d1f8      	bne.n	80121ee <__gethex+0x6a>
 80121fc:	498d      	ldr	r1, [pc, #564]	@ (8012434 <__gethex+0x2b0>)
 80121fe:	2201      	movs	r2, #1
 8012200:	4630      	mov	r0, r6
 8012202:	f7fc fc79 	bl	800eaf8 <strncmp>
 8012206:	2800      	cmp	r0, #0
 8012208:	d13f      	bne.n	801228a <__gethex+0x106>
 801220a:	b944      	cbnz	r4, 801221e <__gethex+0x9a>
 801220c:	1c74      	adds	r4, r6, #1
 801220e:	4622      	mov	r2, r4
 8012210:	4616      	mov	r6, r2
 8012212:	3201      	adds	r2, #1
 8012214:	7830      	ldrb	r0, [r6, #0]
 8012216:	f7ff ff9f 	bl	8012158 <__hexdig_fun>
 801221a:	2800      	cmp	r0, #0
 801221c:	d1f8      	bne.n	8012210 <__gethex+0x8c>
 801221e:	1ba4      	subs	r4, r4, r6
 8012220:	00a7      	lsls	r7, r4, #2
 8012222:	7833      	ldrb	r3, [r6, #0]
 8012224:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8012228:	2b50      	cmp	r3, #80	@ 0x50
 801222a:	d13e      	bne.n	80122aa <__gethex+0x126>
 801222c:	7873      	ldrb	r3, [r6, #1]
 801222e:	2b2b      	cmp	r3, #43	@ 0x2b
 8012230:	d033      	beq.n	801229a <__gethex+0x116>
 8012232:	2b2d      	cmp	r3, #45	@ 0x2d
 8012234:	d034      	beq.n	80122a0 <__gethex+0x11c>
 8012236:	1c71      	adds	r1, r6, #1
 8012238:	2400      	movs	r4, #0
 801223a:	7808      	ldrb	r0, [r1, #0]
 801223c:	f7ff ff8c 	bl	8012158 <__hexdig_fun>
 8012240:	1e43      	subs	r3, r0, #1
 8012242:	b2db      	uxtb	r3, r3
 8012244:	2b18      	cmp	r3, #24
 8012246:	d830      	bhi.n	80122aa <__gethex+0x126>
 8012248:	f1a0 0210 	sub.w	r2, r0, #16
 801224c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012250:	f7ff ff82 	bl	8012158 <__hexdig_fun>
 8012254:	f100 3cff 	add.w	ip, r0, #4294967295
 8012258:	fa5f fc8c 	uxtb.w	ip, ip
 801225c:	f1bc 0f18 	cmp.w	ip, #24
 8012260:	f04f 030a 	mov.w	r3, #10
 8012264:	d91e      	bls.n	80122a4 <__gethex+0x120>
 8012266:	b104      	cbz	r4, 801226a <__gethex+0xe6>
 8012268:	4252      	negs	r2, r2
 801226a:	4417      	add	r7, r2
 801226c:	f8ca 1000 	str.w	r1, [sl]
 8012270:	b1ed      	cbz	r5, 80122ae <__gethex+0x12a>
 8012272:	f1bb 0f00 	cmp.w	fp, #0
 8012276:	bf0c      	ite	eq
 8012278:	2506      	moveq	r5, #6
 801227a:	2500      	movne	r5, #0
 801227c:	4628      	mov	r0, r5
 801227e:	b005      	add	sp, #20
 8012280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012284:	2500      	movs	r5, #0
 8012286:	462c      	mov	r4, r5
 8012288:	e7b0      	b.n	80121ec <__gethex+0x68>
 801228a:	2c00      	cmp	r4, #0
 801228c:	d1c7      	bne.n	801221e <__gethex+0x9a>
 801228e:	4627      	mov	r7, r4
 8012290:	e7c7      	b.n	8012222 <__gethex+0x9e>
 8012292:	464e      	mov	r6, r9
 8012294:	462f      	mov	r7, r5
 8012296:	2501      	movs	r5, #1
 8012298:	e7c3      	b.n	8012222 <__gethex+0x9e>
 801229a:	2400      	movs	r4, #0
 801229c:	1cb1      	adds	r1, r6, #2
 801229e:	e7cc      	b.n	801223a <__gethex+0xb6>
 80122a0:	2401      	movs	r4, #1
 80122a2:	e7fb      	b.n	801229c <__gethex+0x118>
 80122a4:	fb03 0002 	mla	r0, r3, r2, r0
 80122a8:	e7ce      	b.n	8012248 <__gethex+0xc4>
 80122aa:	4631      	mov	r1, r6
 80122ac:	e7de      	b.n	801226c <__gethex+0xe8>
 80122ae:	eba6 0309 	sub.w	r3, r6, r9
 80122b2:	3b01      	subs	r3, #1
 80122b4:	4629      	mov	r1, r5
 80122b6:	2b07      	cmp	r3, #7
 80122b8:	dc0a      	bgt.n	80122d0 <__gethex+0x14c>
 80122ba:	9801      	ldr	r0, [sp, #4]
 80122bc:	f7fd fc08 	bl	800fad0 <_Balloc>
 80122c0:	4604      	mov	r4, r0
 80122c2:	b940      	cbnz	r0, 80122d6 <__gethex+0x152>
 80122c4:	4b5c      	ldr	r3, [pc, #368]	@ (8012438 <__gethex+0x2b4>)
 80122c6:	4602      	mov	r2, r0
 80122c8:	21e4      	movs	r1, #228	@ 0xe4
 80122ca:	485c      	ldr	r0, [pc, #368]	@ (801243c <__gethex+0x2b8>)
 80122cc:	f7ff fec0 	bl	8012050 <__assert_func>
 80122d0:	3101      	adds	r1, #1
 80122d2:	105b      	asrs	r3, r3, #1
 80122d4:	e7ef      	b.n	80122b6 <__gethex+0x132>
 80122d6:	f100 0a14 	add.w	sl, r0, #20
 80122da:	2300      	movs	r3, #0
 80122dc:	4655      	mov	r5, sl
 80122de:	469b      	mov	fp, r3
 80122e0:	45b1      	cmp	r9, r6
 80122e2:	d337      	bcc.n	8012354 <__gethex+0x1d0>
 80122e4:	f845 bb04 	str.w	fp, [r5], #4
 80122e8:	eba5 050a 	sub.w	r5, r5, sl
 80122ec:	10ad      	asrs	r5, r5, #2
 80122ee:	6125      	str	r5, [r4, #16]
 80122f0:	4658      	mov	r0, fp
 80122f2:	f7fd fcdf 	bl	800fcb4 <__hi0bits>
 80122f6:	016d      	lsls	r5, r5, #5
 80122f8:	f8d8 6000 	ldr.w	r6, [r8]
 80122fc:	1a2d      	subs	r5, r5, r0
 80122fe:	42b5      	cmp	r5, r6
 8012300:	dd54      	ble.n	80123ac <__gethex+0x228>
 8012302:	1bad      	subs	r5, r5, r6
 8012304:	4629      	mov	r1, r5
 8012306:	4620      	mov	r0, r4
 8012308:	f7fe f873 	bl	80103f2 <__any_on>
 801230c:	4681      	mov	r9, r0
 801230e:	b178      	cbz	r0, 8012330 <__gethex+0x1ac>
 8012310:	1e6b      	subs	r3, r5, #1
 8012312:	1159      	asrs	r1, r3, #5
 8012314:	f003 021f 	and.w	r2, r3, #31
 8012318:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801231c:	f04f 0901 	mov.w	r9, #1
 8012320:	fa09 f202 	lsl.w	r2, r9, r2
 8012324:	420a      	tst	r2, r1
 8012326:	d003      	beq.n	8012330 <__gethex+0x1ac>
 8012328:	454b      	cmp	r3, r9
 801232a:	dc36      	bgt.n	801239a <__gethex+0x216>
 801232c:	f04f 0902 	mov.w	r9, #2
 8012330:	4629      	mov	r1, r5
 8012332:	4620      	mov	r0, r4
 8012334:	f7ff febe 	bl	80120b4 <rshift>
 8012338:	442f      	add	r7, r5
 801233a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801233e:	42bb      	cmp	r3, r7
 8012340:	da42      	bge.n	80123c8 <__gethex+0x244>
 8012342:	9801      	ldr	r0, [sp, #4]
 8012344:	4621      	mov	r1, r4
 8012346:	f7fd fc03 	bl	800fb50 <_Bfree>
 801234a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801234c:	2300      	movs	r3, #0
 801234e:	6013      	str	r3, [r2, #0]
 8012350:	25a3      	movs	r5, #163	@ 0xa3
 8012352:	e793      	b.n	801227c <__gethex+0xf8>
 8012354:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012358:	2a2e      	cmp	r2, #46	@ 0x2e
 801235a:	d012      	beq.n	8012382 <__gethex+0x1fe>
 801235c:	2b20      	cmp	r3, #32
 801235e:	d104      	bne.n	801236a <__gethex+0x1e6>
 8012360:	f845 bb04 	str.w	fp, [r5], #4
 8012364:	f04f 0b00 	mov.w	fp, #0
 8012368:	465b      	mov	r3, fp
 801236a:	7830      	ldrb	r0, [r6, #0]
 801236c:	9303      	str	r3, [sp, #12]
 801236e:	f7ff fef3 	bl	8012158 <__hexdig_fun>
 8012372:	9b03      	ldr	r3, [sp, #12]
 8012374:	f000 000f 	and.w	r0, r0, #15
 8012378:	4098      	lsls	r0, r3
 801237a:	ea4b 0b00 	orr.w	fp, fp, r0
 801237e:	3304      	adds	r3, #4
 8012380:	e7ae      	b.n	80122e0 <__gethex+0x15c>
 8012382:	45b1      	cmp	r9, r6
 8012384:	d8ea      	bhi.n	801235c <__gethex+0x1d8>
 8012386:	492b      	ldr	r1, [pc, #172]	@ (8012434 <__gethex+0x2b0>)
 8012388:	9303      	str	r3, [sp, #12]
 801238a:	2201      	movs	r2, #1
 801238c:	4630      	mov	r0, r6
 801238e:	f7fc fbb3 	bl	800eaf8 <strncmp>
 8012392:	9b03      	ldr	r3, [sp, #12]
 8012394:	2800      	cmp	r0, #0
 8012396:	d1e1      	bne.n	801235c <__gethex+0x1d8>
 8012398:	e7a2      	b.n	80122e0 <__gethex+0x15c>
 801239a:	1ea9      	subs	r1, r5, #2
 801239c:	4620      	mov	r0, r4
 801239e:	f7fe f828 	bl	80103f2 <__any_on>
 80123a2:	2800      	cmp	r0, #0
 80123a4:	d0c2      	beq.n	801232c <__gethex+0x1a8>
 80123a6:	f04f 0903 	mov.w	r9, #3
 80123aa:	e7c1      	b.n	8012330 <__gethex+0x1ac>
 80123ac:	da09      	bge.n	80123c2 <__gethex+0x23e>
 80123ae:	1b75      	subs	r5, r6, r5
 80123b0:	4621      	mov	r1, r4
 80123b2:	9801      	ldr	r0, [sp, #4]
 80123b4:	462a      	mov	r2, r5
 80123b6:	f7fd fde3 	bl	800ff80 <__lshift>
 80123ba:	1b7f      	subs	r7, r7, r5
 80123bc:	4604      	mov	r4, r0
 80123be:	f100 0a14 	add.w	sl, r0, #20
 80123c2:	f04f 0900 	mov.w	r9, #0
 80123c6:	e7b8      	b.n	801233a <__gethex+0x1b6>
 80123c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80123cc:	42bd      	cmp	r5, r7
 80123ce:	dd6f      	ble.n	80124b0 <__gethex+0x32c>
 80123d0:	1bed      	subs	r5, r5, r7
 80123d2:	42ae      	cmp	r6, r5
 80123d4:	dc34      	bgt.n	8012440 <__gethex+0x2bc>
 80123d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80123da:	2b02      	cmp	r3, #2
 80123dc:	d022      	beq.n	8012424 <__gethex+0x2a0>
 80123de:	2b03      	cmp	r3, #3
 80123e0:	d024      	beq.n	801242c <__gethex+0x2a8>
 80123e2:	2b01      	cmp	r3, #1
 80123e4:	d115      	bne.n	8012412 <__gethex+0x28e>
 80123e6:	42ae      	cmp	r6, r5
 80123e8:	d113      	bne.n	8012412 <__gethex+0x28e>
 80123ea:	2e01      	cmp	r6, #1
 80123ec:	d10b      	bne.n	8012406 <__gethex+0x282>
 80123ee:	9a02      	ldr	r2, [sp, #8]
 80123f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80123f4:	6013      	str	r3, [r2, #0]
 80123f6:	2301      	movs	r3, #1
 80123f8:	6123      	str	r3, [r4, #16]
 80123fa:	f8ca 3000 	str.w	r3, [sl]
 80123fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012400:	2562      	movs	r5, #98	@ 0x62
 8012402:	601c      	str	r4, [r3, #0]
 8012404:	e73a      	b.n	801227c <__gethex+0xf8>
 8012406:	1e71      	subs	r1, r6, #1
 8012408:	4620      	mov	r0, r4
 801240a:	f7fd fff2 	bl	80103f2 <__any_on>
 801240e:	2800      	cmp	r0, #0
 8012410:	d1ed      	bne.n	80123ee <__gethex+0x26a>
 8012412:	9801      	ldr	r0, [sp, #4]
 8012414:	4621      	mov	r1, r4
 8012416:	f7fd fb9b 	bl	800fb50 <_Bfree>
 801241a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801241c:	2300      	movs	r3, #0
 801241e:	6013      	str	r3, [r2, #0]
 8012420:	2550      	movs	r5, #80	@ 0x50
 8012422:	e72b      	b.n	801227c <__gethex+0xf8>
 8012424:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012426:	2b00      	cmp	r3, #0
 8012428:	d1f3      	bne.n	8012412 <__gethex+0x28e>
 801242a:	e7e0      	b.n	80123ee <__gethex+0x26a>
 801242c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801242e:	2b00      	cmp	r3, #0
 8012430:	d1dd      	bne.n	80123ee <__gethex+0x26a>
 8012432:	e7ee      	b.n	8012412 <__gethex+0x28e>
 8012434:	08013fb0 	.word	0x08013fb0
 8012438:	08013e47 	.word	0x08013e47
 801243c:	08014179 	.word	0x08014179
 8012440:	1e6f      	subs	r7, r5, #1
 8012442:	f1b9 0f00 	cmp.w	r9, #0
 8012446:	d130      	bne.n	80124aa <__gethex+0x326>
 8012448:	b127      	cbz	r7, 8012454 <__gethex+0x2d0>
 801244a:	4639      	mov	r1, r7
 801244c:	4620      	mov	r0, r4
 801244e:	f7fd ffd0 	bl	80103f2 <__any_on>
 8012452:	4681      	mov	r9, r0
 8012454:	117a      	asrs	r2, r7, #5
 8012456:	2301      	movs	r3, #1
 8012458:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801245c:	f007 071f 	and.w	r7, r7, #31
 8012460:	40bb      	lsls	r3, r7
 8012462:	4213      	tst	r3, r2
 8012464:	4629      	mov	r1, r5
 8012466:	4620      	mov	r0, r4
 8012468:	bf18      	it	ne
 801246a:	f049 0902 	orrne.w	r9, r9, #2
 801246e:	f7ff fe21 	bl	80120b4 <rshift>
 8012472:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8012476:	1b76      	subs	r6, r6, r5
 8012478:	2502      	movs	r5, #2
 801247a:	f1b9 0f00 	cmp.w	r9, #0
 801247e:	d047      	beq.n	8012510 <__gethex+0x38c>
 8012480:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012484:	2b02      	cmp	r3, #2
 8012486:	d015      	beq.n	80124b4 <__gethex+0x330>
 8012488:	2b03      	cmp	r3, #3
 801248a:	d017      	beq.n	80124bc <__gethex+0x338>
 801248c:	2b01      	cmp	r3, #1
 801248e:	d109      	bne.n	80124a4 <__gethex+0x320>
 8012490:	f019 0f02 	tst.w	r9, #2
 8012494:	d006      	beq.n	80124a4 <__gethex+0x320>
 8012496:	f8da 3000 	ldr.w	r3, [sl]
 801249a:	ea49 0903 	orr.w	r9, r9, r3
 801249e:	f019 0f01 	tst.w	r9, #1
 80124a2:	d10e      	bne.n	80124c2 <__gethex+0x33e>
 80124a4:	f045 0510 	orr.w	r5, r5, #16
 80124a8:	e032      	b.n	8012510 <__gethex+0x38c>
 80124aa:	f04f 0901 	mov.w	r9, #1
 80124ae:	e7d1      	b.n	8012454 <__gethex+0x2d0>
 80124b0:	2501      	movs	r5, #1
 80124b2:	e7e2      	b.n	801247a <__gethex+0x2f6>
 80124b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80124b6:	f1c3 0301 	rsb	r3, r3, #1
 80124ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80124bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d0f0      	beq.n	80124a4 <__gethex+0x320>
 80124c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80124c6:	f104 0314 	add.w	r3, r4, #20
 80124ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80124ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80124d2:	f04f 0c00 	mov.w	ip, #0
 80124d6:	4618      	mov	r0, r3
 80124d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80124dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80124e0:	d01b      	beq.n	801251a <__gethex+0x396>
 80124e2:	3201      	adds	r2, #1
 80124e4:	6002      	str	r2, [r0, #0]
 80124e6:	2d02      	cmp	r5, #2
 80124e8:	f104 0314 	add.w	r3, r4, #20
 80124ec:	d13c      	bne.n	8012568 <__gethex+0x3e4>
 80124ee:	f8d8 2000 	ldr.w	r2, [r8]
 80124f2:	3a01      	subs	r2, #1
 80124f4:	42b2      	cmp	r2, r6
 80124f6:	d109      	bne.n	801250c <__gethex+0x388>
 80124f8:	1171      	asrs	r1, r6, #5
 80124fa:	2201      	movs	r2, #1
 80124fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012500:	f006 061f 	and.w	r6, r6, #31
 8012504:	fa02 f606 	lsl.w	r6, r2, r6
 8012508:	421e      	tst	r6, r3
 801250a:	d13a      	bne.n	8012582 <__gethex+0x3fe>
 801250c:	f045 0520 	orr.w	r5, r5, #32
 8012510:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012512:	601c      	str	r4, [r3, #0]
 8012514:	9b02      	ldr	r3, [sp, #8]
 8012516:	601f      	str	r7, [r3, #0]
 8012518:	e6b0      	b.n	801227c <__gethex+0xf8>
 801251a:	4299      	cmp	r1, r3
 801251c:	f843 cc04 	str.w	ip, [r3, #-4]
 8012520:	d8d9      	bhi.n	80124d6 <__gethex+0x352>
 8012522:	68a3      	ldr	r3, [r4, #8]
 8012524:	459b      	cmp	fp, r3
 8012526:	db17      	blt.n	8012558 <__gethex+0x3d4>
 8012528:	6861      	ldr	r1, [r4, #4]
 801252a:	9801      	ldr	r0, [sp, #4]
 801252c:	3101      	adds	r1, #1
 801252e:	f7fd facf 	bl	800fad0 <_Balloc>
 8012532:	4681      	mov	r9, r0
 8012534:	b918      	cbnz	r0, 801253e <__gethex+0x3ba>
 8012536:	4b1a      	ldr	r3, [pc, #104]	@ (80125a0 <__gethex+0x41c>)
 8012538:	4602      	mov	r2, r0
 801253a:	2184      	movs	r1, #132	@ 0x84
 801253c:	e6c5      	b.n	80122ca <__gethex+0x146>
 801253e:	6922      	ldr	r2, [r4, #16]
 8012540:	3202      	adds	r2, #2
 8012542:	f104 010c 	add.w	r1, r4, #12
 8012546:	0092      	lsls	r2, r2, #2
 8012548:	300c      	adds	r0, #12
 801254a:	f7fc fb5e 	bl	800ec0a <memcpy>
 801254e:	4621      	mov	r1, r4
 8012550:	9801      	ldr	r0, [sp, #4]
 8012552:	f7fd fafd 	bl	800fb50 <_Bfree>
 8012556:	464c      	mov	r4, r9
 8012558:	6923      	ldr	r3, [r4, #16]
 801255a:	1c5a      	adds	r2, r3, #1
 801255c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012560:	6122      	str	r2, [r4, #16]
 8012562:	2201      	movs	r2, #1
 8012564:	615a      	str	r2, [r3, #20]
 8012566:	e7be      	b.n	80124e6 <__gethex+0x362>
 8012568:	6922      	ldr	r2, [r4, #16]
 801256a:	455a      	cmp	r2, fp
 801256c:	dd0b      	ble.n	8012586 <__gethex+0x402>
 801256e:	2101      	movs	r1, #1
 8012570:	4620      	mov	r0, r4
 8012572:	f7ff fd9f 	bl	80120b4 <rshift>
 8012576:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801257a:	3701      	adds	r7, #1
 801257c:	42bb      	cmp	r3, r7
 801257e:	f6ff aee0 	blt.w	8012342 <__gethex+0x1be>
 8012582:	2501      	movs	r5, #1
 8012584:	e7c2      	b.n	801250c <__gethex+0x388>
 8012586:	f016 061f 	ands.w	r6, r6, #31
 801258a:	d0fa      	beq.n	8012582 <__gethex+0x3fe>
 801258c:	4453      	add	r3, sl
 801258e:	f1c6 0620 	rsb	r6, r6, #32
 8012592:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012596:	f7fd fb8d 	bl	800fcb4 <__hi0bits>
 801259a:	42b0      	cmp	r0, r6
 801259c:	dbe7      	blt.n	801256e <__gethex+0x3ea>
 801259e:	e7f0      	b.n	8012582 <__gethex+0x3fe>
 80125a0:	08013e47 	.word	0x08013e47

080125a4 <L_shift>:
 80125a4:	f1c2 0208 	rsb	r2, r2, #8
 80125a8:	0092      	lsls	r2, r2, #2
 80125aa:	b570      	push	{r4, r5, r6, lr}
 80125ac:	f1c2 0620 	rsb	r6, r2, #32
 80125b0:	6843      	ldr	r3, [r0, #4]
 80125b2:	6804      	ldr	r4, [r0, #0]
 80125b4:	fa03 f506 	lsl.w	r5, r3, r6
 80125b8:	432c      	orrs	r4, r5
 80125ba:	40d3      	lsrs	r3, r2
 80125bc:	6004      	str	r4, [r0, #0]
 80125be:	f840 3f04 	str.w	r3, [r0, #4]!
 80125c2:	4288      	cmp	r0, r1
 80125c4:	d3f4      	bcc.n	80125b0 <L_shift+0xc>
 80125c6:	bd70      	pop	{r4, r5, r6, pc}

080125c8 <__match>:
 80125c8:	b530      	push	{r4, r5, lr}
 80125ca:	6803      	ldr	r3, [r0, #0]
 80125cc:	3301      	adds	r3, #1
 80125ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80125d2:	b914      	cbnz	r4, 80125da <__match+0x12>
 80125d4:	6003      	str	r3, [r0, #0]
 80125d6:	2001      	movs	r0, #1
 80125d8:	bd30      	pop	{r4, r5, pc}
 80125da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80125de:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80125e2:	2d19      	cmp	r5, #25
 80125e4:	bf98      	it	ls
 80125e6:	3220      	addls	r2, #32
 80125e8:	42a2      	cmp	r2, r4
 80125ea:	d0f0      	beq.n	80125ce <__match+0x6>
 80125ec:	2000      	movs	r0, #0
 80125ee:	e7f3      	b.n	80125d8 <__match+0x10>

080125f0 <__hexnan>:
 80125f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125f4:	680b      	ldr	r3, [r1, #0]
 80125f6:	6801      	ldr	r1, [r0, #0]
 80125f8:	115e      	asrs	r6, r3, #5
 80125fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80125fe:	f013 031f 	ands.w	r3, r3, #31
 8012602:	b087      	sub	sp, #28
 8012604:	bf18      	it	ne
 8012606:	3604      	addne	r6, #4
 8012608:	2500      	movs	r5, #0
 801260a:	1f37      	subs	r7, r6, #4
 801260c:	4682      	mov	sl, r0
 801260e:	4690      	mov	r8, r2
 8012610:	9301      	str	r3, [sp, #4]
 8012612:	f846 5c04 	str.w	r5, [r6, #-4]
 8012616:	46b9      	mov	r9, r7
 8012618:	463c      	mov	r4, r7
 801261a:	9502      	str	r5, [sp, #8]
 801261c:	46ab      	mov	fp, r5
 801261e:	784a      	ldrb	r2, [r1, #1]
 8012620:	1c4b      	adds	r3, r1, #1
 8012622:	9303      	str	r3, [sp, #12]
 8012624:	b342      	cbz	r2, 8012678 <__hexnan+0x88>
 8012626:	4610      	mov	r0, r2
 8012628:	9105      	str	r1, [sp, #20]
 801262a:	9204      	str	r2, [sp, #16]
 801262c:	f7ff fd94 	bl	8012158 <__hexdig_fun>
 8012630:	2800      	cmp	r0, #0
 8012632:	d151      	bne.n	80126d8 <__hexnan+0xe8>
 8012634:	9a04      	ldr	r2, [sp, #16]
 8012636:	9905      	ldr	r1, [sp, #20]
 8012638:	2a20      	cmp	r2, #32
 801263a:	d818      	bhi.n	801266e <__hexnan+0x7e>
 801263c:	9b02      	ldr	r3, [sp, #8]
 801263e:	459b      	cmp	fp, r3
 8012640:	dd13      	ble.n	801266a <__hexnan+0x7a>
 8012642:	454c      	cmp	r4, r9
 8012644:	d206      	bcs.n	8012654 <__hexnan+0x64>
 8012646:	2d07      	cmp	r5, #7
 8012648:	dc04      	bgt.n	8012654 <__hexnan+0x64>
 801264a:	462a      	mov	r2, r5
 801264c:	4649      	mov	r1, r9
 801264e:	4620      	mov	r0, r4
 8012650:	f7ff ffa8 	bl	80125a4 <L_shift>
 8012654:	4544      	cmp	r4, r8
 8012656:	d952      	bls.n	80126fe <__hexnan+0x10e>
 8012658:	2300      	movs	r3, #0
 801265a:	f1a4 0904 	sub.w	r9, r4, #4
 801265e:	f844 3c04 	str.w	r3, [r4, #-4]
 8012662:	f8cd b008 	str.w	fp, [sp, #8]
 8012666:	464c      	mov	r4, r9
 8012668:	461d      	mov	r5, r3
 801266a:	9903      	ldr	r1, [sp, #12]
 801266c:	e7d7      	b.n	801261e <__hexnan+0x2e>
 801266e:	2a29      	cmp	r2, #41	@ 0x29
 8012670:	d157      	bne.n	8012722 <__hexnan+0x132>
 8012672:	3102      	adds	r1, #2
 8012674:	f8ca 1000 	str.w	r1, [sl]
 8012678:	f1bb 0f00 	cmp.w	fp, #0
 801267c:	d051      	beq.n	8012722 <__hexnan+0x132>
 801267e:	454c      	cmp	r4, r9
 8012680:	d206      	bcs.n	8012690 <__hexnan+0xa0>
 8012682:	2d07      	cmp	r5, #7
 8012684:	dc04      	bgt.n	8012690 <__hexnan+0xa0>
 8012686:	462a      	mov	r2, r5
 8012688:	4649      	mov	r1, r9
 801268a:	4620      	mov	r0, r4
 801268c:	f7ff ff8a 	bl	80125a4 <L_shift>
 8012690:	4544      	cmp	r4, r8
 8012692:	d936      	bls.n	8012702 <__hexnan+0x112>
 8012694:	f1a8 0204 	sub.w	r2, r8, #4
 8012698:	4623      	mov	r3, r4
 801269a:	f853 1b04 	ldr.w	r1, [r3], #4
 801269e:	f842 1f04 	str.w	r1, [r2, #4]!
 80126a2:	429f      	cmp	r7, r3
 80126a4:	d2f9      	bcs.n	801269a <__hexnan+0xaa>
 80126a6:	1b3b      	subs	r3, r7, r4
 80126a8:	f023 0303 	bic.w	r3, r3, #3
 80126ac:	3304      	adds	r3, #4
 80126ae:	3401      	adds	r4, #1
 80126b0:	3e03      	subs	r6, #3
 80126b2:	42b4      	cmp	r4, r6
 80126b4:	bf88      	it	hi
 80126b6:	2304      	movhi	r3, #4
 80126b8:	4443      	add	r3, r8
 80126ba:	2200      	movs	r2, #0
 80126bc:	f843 2b04 	str.w	r2, [r3], #4
 80126c0:	429f      	cmp	r7, r3
 80126c2:	d2fb      	bcs.n	80126bc <__hexnan+0xcc>
 80126c4:	683b      	ldr	r3, [r7, #0]
 80126c6:	b91b      	cbnz	r3, 80126d0 <__hexnan+0xe0>
 80126c8:	4547      	cmp	r7, r8
 80126ca:	d128      	bne.n	801271e <__hexnan+0x12e>
 80126cc:	2301      	movs	r3, #1
 80126ce:	603b      	str	r3, [r7, #0]
 80126d0:	2005      	movs	r0, #5
 80126d2:	b007      	add	sp, #28
 80126d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126d8:	3501      	adds	r5, #1
 80126da:	2d08      	cmp	r5, #8
 80126dc:	f10b 0b01 	add.w	fp, fp, #1
 80126e0:	dd06      	ble.n	80126f0 <__hexnan+0x100>
 80126e2:	4544      	cmp	r4, r8
 80126e4:	d9c1      	bls.n	801266a <__hexnan+0x7a>
 80126e6:	2300      	movs	r3, #0
 80126e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80126ec:	2501      	movs	r5, #1
 80126ee:	3c04      	subs	r4, #4
 80126f0:	6822      	ldr	r2, [r4, #0]
 80126f2:	f000 000f 	and.w	r0, r0, #15
 80126f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80126fa:	6020      	str	r0, [r4, #0]
 80126fc:	e7b5      	b.n	801266a <__hexnan+0x7a>
 80126fe:	2508      	movs	r5, #8
 8012700:	e7b3      	b.n	801266a <__hexnan+0x7a>
 8012702:	9b01      	ldr	r3, [sp, #4]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d0dd      	beq.n	80126c4 <__hexnan+0xd4>
 8012708:	f1c3 0320 	rsb	r3, r3, #32
 801270c:	f04f 32ff 	mov.w	r2, #4294967295
 8012710:	40da      	lsrs	r2, r3
 8012712:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012716:	4013      	ands	r3, r2
 8012718:	f846 3c04 	str.w	r3, [r6, #-4]
 801271c:	e7d2      	b.n	80126c4 <__hexnan+0xd4>
 801271e:	3f04      	subs	r7, #4
 8012720:	e7d0      	b.n	80126c4 <__hexnan+0xd4>
 8012722:	2004      	movs	r0, #4
 8012724:	e7d5      	b.n	80126d2 <__hexnan+0xe2>

08012726 <__ascii_mbtowc>:
 8012726:	b082      	sub	sp, #8
 8012728:	b901      	cbnz	r1, 801272c <__ascii_mbtowc+0x6>
 801272a:	a901      	add	r1, sp, #4
 801272c:	b142      	cbz	r2, 8012740 <__ascii_mbtowc+0x1a>
 801272e:	b14b      	cbz	r3, 8012744 <__ascii_mbtowc+0x1e>
 8012730:	7813      	ldrb	r3, [r2, #0]
 8012732:	600b      	str	r3, [r1, #0]
 8012734:	7812      	ldrb	r2, [r2, #0]
 8012736:	1e10      	subs	r0, r2, #0
 8012738:	bf18      	it	ne
 801273a:	2001      	movne	r0, #1
 801273c:	b002      	add	sp, #8
 801273e:	4770      	bx	lr
 8012740:	4610      	mov	r0, r2
 8012742:	e7fb      	b.n	801273c <__ascii_mbtowc+0x16>
 8012744:	f06f 0001 	mvn.w	r0, #1
 8012748:	e7f8      	b.n	801273c <__ascii_mbtowc+0x16>

0801274a <_realloc_r>:
 801274a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801274e:	4680      	mov	r8, r0
 8012750:	4615      	mov	r5, r2
 8012752:	460c      	mov	r4, r1
 8012754:	b921      	cbnz	r1, 8012760 <_realloc_r+0x16>
 8012756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801275a:	4611      	mov	r1, r2
 801275c:	f7fd b92c 	b.w	800f9b8 <_malloc_r>
 8012760:	b92a      	cbnz	r2, 801276e <_realloc_r+0x24>
 8012762:	f7fd f8b5 	bl	800f8d0 <_free_r>
 8012766:	2400      	movs	r4, #0
 8012768:	4620      	mov	r0, r4
 801276a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801276e:	f000 f8b2 	bl	80128d6 <_malloc_usable_size_r>
 8012772:	4285      	cmp	r5, r0
 8012774:	4606      	mov	r6, r0
 8012776:	d802      	bhi.n	801277e <_realloc_r+0x34>
 8012778:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801277c:	d8f4      	bhi.n	8012768 <_realloc_r+0x1e>
 801277e:	4629      	mov	r1, r5
 8012780:	4640      	mov	r0, r8
 8012782:	f7fd f919 	bl	800f9b8 <_malloc_r>
 8012786:	4607      	mov	r7, r0
 8012788:	2800      	cmp	r0, #0
 801278a:	d0ec      	beq.n	8012766 <_realloc_r+0x1c>
 801278c:	42b5      	cmp	r5, r6
 801278e:	462a      	mov	r2, r5
 8012790:	4621      	mov	r1, r4
 8012792:	bf28      	it	cs
 8012794:	4632      	movcs	r2, r6
 8012796:	f7fc fa38 	bl	800ec0a <memcpy>
 801279a:	4621      	mov	r1, r4
 801279c:	4640      	mov	r0, r8
 801279e:	f7fd f897 	bl	800f8d0 <_free_r>
 80127a2:	463c      	mov	r4, r7
 80127a4:	e7e0      	b.n	8012768 <_realloc_r+0x1e>
	...

080127a8 <_strtoul_l.constprop.0>:
 80127a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80127ac:	4e34      	ldr	r6, [pc, #208]	@ (8012880 <_strtoul_l.constprop.0+0xd8>)
 80127ae:	4686      	mov	lr, r0
 80127b0:	460d      	mov	r5, r1
 80127b2:	4628      	mov	r0, r5
 80127b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80127b8:	5d37      	ldrb	r7, [r6, r4]
 80127ba:	f017 0708 	ands.w	r7, r7, #8
 80127be:	d1f8      	bne.n	80127b2 <_strtoul_l.constprop.0+0xa>
 80127c0:	2c2d      	cmp	r4, #45	@ 0x2d
 80127c2:	d12f      	bne.n	8012824 <_strtoul_l.constprop.0+0x7c>
 80127c4:	782c      	ldrb	r4, [r5, #0]
 80127c6:	2701      	movs	r7, #1
 80127c8:	1c85      	adds	r5, r0, #2
 80127ca:	f033 0010 	bics.w	r0, r3, #16
 80127ce:	d109      	bne.n	80127e4 <_strtoul_l.constprop.0+0x3c>
 80127d0:	2c30      	cmp	r4, #48	@ 0x30
 80127d2:	d12c      	bne.n	801282e <_strtoul_l.constprop.0+0x86>
 80127d4:	7828      	ldrb	r0, [r5, #0]
 80127d6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80127da:	2858      	cmp	r0, #88	@ 0x58
 80127dc:	d127      	bne.n	801282e <_strtoul_l.constprop.0+0x86>
 80127de:	786c      	ldrb	r4, [r5, #1]
 80127e0:	2310      	movs	r3, #16
 80127e2:	3502      	adds	r5, #2
 80127e4:	f04f 38ff 	mov.w	r8, #4294967295
 80127e8:	2600      	movs	r6, #0
 80127ea:	fbb8 f8f3 	udiv	r8, r8, r3
 80127ee:	fb03 f908 	mul.w	r9, r3, r8
 80127f2:	ea6f 0909 	mvn.w	r9, r9
 80127f6:	4630      	mov	r0, r6
 80127f8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80127fc:	f1bc 0f09 	cmp.w	ip, #9
 8012800:	d81c      	bhi.n	801283c <_strtoul_l.constprop.0+0x94>
 8012802:	4664      	mov	r4, ip
 8012804:	42a3      	cmp	r3, r4
 8012806:	dd2a      	ble.n	801285e <_strtoul_l.constprop.0+0xb6>
 8012808:	f1b6 3fff 	cmp.w	r6, #4294967295
 801280c:	d007      	beq.n	801281e <_strtoul_l.constprop.0+0x76>
 801280e:	4580      	cmp	r8, r0
 8012810:	d322      	bcc.n	8012858 <_strtoul_l.constprop.0+0xb0>
 8012812:	d101      	bne.n	8012818 <_strtoul_l.constprop.0+0x70>
 8012814:	45a1      	cmp	r9, r4
 8012816:	db1f      	blt.n	8012858 <_strtoul_l.constprop.0+0xb0>
 8012818:	fb00 4003 	mla	r0, r0, r3, r4
 801281c:	2601      	movs	r6, #1
 801281e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012822:	e7e9      	b.n	80127f8 <_strtoul_l.constprop.0+0x50>
 8012824:	2c2b      	cmp	r4, #43	@ 0x2b
 8012826:	bf04      	itt	eq
 8012828:	782c      	ldrbeq	r4, [r5, #0]
 801282a:	1c85      	addeq	r5, r0, #2
 801282c:	e7cd      	b.n	80127ca <_strtoul_l.constprop.0+0x22>
 801282e:	2b00      	cmp	r3, #0
 8012830:	d1d8      	bne.n	80127e4 <_strtoul_l.constprop.0+0x3c>
 8012832:	2c30      	cmp	r4, #48	@ 0x30
 8012834:	bf0c      	ite	eq
 8012836:	2308      	moveq	r3, #8
 8012838:	230a      	movne	r3, #10
 801283a:	e7d3      	b.n	80127e4 <_strtoul_l.constprop.0+0x3c>
 801283c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8012840:	f1bc 0f19 	cmp.w	ip, #25
 8012844:	d801      	bhi.n	801284a <_strtoul_l.constprop.0+0xa2>
 8012846:	3c37      	subs	r4, #55	@ 0x37
 8012848:	e7dc      	b.n	8012804 <_strtoul_l.constprop.0+0x5c>
 801284a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801284e:	f1bc 0f19 	cmp.w	ip, #25
 8012852:	d804      	bhi.n	801285e <_strtoul_l.constprop.0+0xb6>
 8012854:	3c57      	subs	r4, #87	@ 0x57
 8012856:	e7d5      	b.n	8012804 <_strtoul_l.constprop.0+0x5c>
 8012858:	f04f 36ff 	mov.w	r6, #4294967295
 801285c:	e7df      	b.n	801281e <_strtoul_l.constprop.0+0x76>
 801285e:	1c73      	adds	r3, r6, #1
 8012860:	d106      	bne.n	8012870 <_strtoul_l.constprop.0+0xc8>
 8012862:	2322      	movs	r3, #34	@ 0x22
 8012864:	f8ce 3000 	str.w	r3, [lr]
 8012868:	4630      	mov	r0, r6
 801286a:	b932      	cbnz	r2, 801287a <_strtoul_l.constprop.0+0xd2>
 801286c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012870:	b107      	cbz	r7, 8012874 <_strtoul_l.constprop.0+0xcc>
 8012872:	4240      	negs	r0, r0
 8012874:	2a00      	cmp	r2, #0
 8012876:	d0f9      	beq.n	801286c <_strtoul_l.constprop.0+0xc4>
 8012878:	b106      	cbz	r6, 801287c <_strtoul_l.constprop.0+0xd4>
 801287a:	1e69      	subs	r1, r5, #1
 801287c:	6011      	str	r1, [r2, #0]
 801287e:	e7f5      	b.n	801286c <_strtoul_l.constprop.0+0xc4>
 8012880:	08014009 	.word	0x08014009

08012884 <_strtoul_r>:
 8012884:	f7ff bf90 	b.w	80127a8 <_strtoul_l.constprop.0>

08012888 <__ascii_wctomb>:
 8012888:	4603      	mov	r3, r0
 801288a:	4608      	mov	r0, r1
 801288c:	b141      	cbz	r1, 80128a0 <__ascii_wctomb+0x18>
 801288e:	2aff      	cmp	r2, #255	@ 0xff
 8012890:	d904      	bls.n	801289c <__ascii_wctomb+0x14>
 8012892:	228a      	movs	r2, #138	@ 0x8a
 8012894:	601a      	str	r2, [r3, #0]
 8012896:	f04f 30ff 	mov.w	r0, #4294967295
 801289a:	4770      	bx	lr
 801289c:	700a      	strb	r2, [r1, #0]
 801289e:	2001      	movs	r0, #1
 80128a0:	4770      	bx	lr
	...

080128a4 <fiprintf>:
 80128a4:	b40e      	push	{r1, r2, r3}
 80128a6:	b503      	push	{r0, r1, lr}
 80128a8:	4601      	mov	r1, r0
 80128aa:	ab03      	add	r3, sp, #12
 80128ac:	4805      	ldr	r0, [pc, #20]	@ (80128c4 <fiprintf+0x20>)
 80128ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80128b2:	6800      	ldr	r0, [r0, #0]
 80128b4:	9301      	str	r3, [sp, #4]
 80128b6:	f7fe ff8f 	bl	80117d8 <_vfiprintf_r>
 80128ba:	b002      	add	sp, #8
 80128bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80128c0:	b003      	add	sp, #12
 80128c2:	4770      	bx	lr
 80128c4:	20000020 	.word	0x20000020

080128c8 <abort>:
 80128c8:	b508      	push	{r3, lr}
 80128ca:	2006      	movs	r0, #6
 80128cc:	f000 f834 	bl	8012938 <raise>
 80128d0:	2001      	movs	r0, #1
 80128d2:	f7f1 f93b 	bl	8003b4c <_exit>

080128d6 <_malloc_usable_size_r>:
 80128d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80128da:	1f18      	subs	r0, r3, #4
 80128dc:	2b00      	cmp	r3, #0
 80128de:	bfbc      	itt	lt
 80128e0:	580b      	ldrlt	r3, [r1, r0]
 80128e2:	18c0      	addlt	r0, r0, r3
 80128e4:	4770      	bx	lr

080128e6 <_raise_r>:
 80128e6:	291f      	cmp	r1, #31
 80128e8:	b538      	push	{r3, r4, r5, lr}
 80128ea:	4605      	mov	r5, r0
 80128ec:	460c      	mov	r4, r1
 80128ee:	d904      	bls.n	80128fa <_raise_r+0x14>
 80128f0:	2316      	movs	r3, #22
 80128f2:	6003      	str	r3, [r0, #0]
 80128f4:	f04f 30ff 	mov.w	r0, #4294967295
 80128f8:	bd38      	pop	{r3, r4, r5, pc}
 80128fa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80128fc:	b112      	cbz	r2, 8012904 <_raise_r+0x1e>
 80128fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012902:	b94b      	cbnz	r3, 8012918 <_raise_r+0x32>
 8012904:	4628      	mov	r0, r5
 8012906:	f000 f831 	bl	801296c <_getpid_r>
 801290a:	4622      	mov	r2, r4
 801290c:	4601      	mov	r1, r0
 801290e:	4628      	mov	r0, r5
 8012910:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012914:	f000 b818 	b.w	8012948 <_kill_r>
 8012918:	2b01      	cmp	r3, #1
 801291a:	d00a      	beq.n	8012932 <_raise_r+0x4c>
 801291c:	1c59      	adds	r1, r3, #1
 801291e:	d103      	bne.n	8012928 <_raise_r+0x42>
 8012920:	2316      	movs	r3, #22
 8012922:	6003      	str	r3, [r0, #0]
 8012924:	2001      	movs	r0, #1
 8012926:	e7e7      	b.n	80128f8 <_raise_r+0x12>
 8012928:	2100      	movs	r1, #0
 801292a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801292e:	4620      	mov	r0, r4
 8012930:	4798      	blx	r3
 8012932:	2000      	movs	r0, #0
 8012934:	e7e0      	b.n	80128f8 <_raise_r+0x12>
	...

08012938 <raise>:
 8012938:	4b02      	ldr	r3, [pc, #8]	@ (8012944 <raise+0xc>)
 801293a:	4601      	mov	r1, r0
 801293c:	6818      	ldr	r0, [r3, #0]
 801293e:	f7ff bfd2 	b.w	80128e6 <_raise_r>
 8012942:	bf00      	nop
 8012944:	20000020 	.word	0x20000020

08012948 <_kill_r>:
 8012948:	b538      	push	{r3, r4, r5, lr}
 801294a:	4d07      	ldr	r5, [pc, #28]	@ (8012968 <_kill_r+0x20>)
 801294c:	2300      	movs	r3, #0
 801294e:	4604      	mov	r4, r0
 8012950:	4608      	mov	r0, r1
 8012952:	4611      	mov	r1, r2
 8012954:	602b      	str	r3, [r5, #0]
 8012956:	f7f1 f8e9 	bl	8003b2c <_kill>
 801295a:	1c43      	adds	r3, r0, #1
 801295c:	d102      	bne.n	8012964 <_kill_r+0x1c>
 801295e:	682b      	ldr	r3, [r5, #0]
 8012960:	b103      	cbz	r3, 8012964 <_kill_r+0x1c>
 8012962:	6023      	str	r3, [r4, #0]
 8012964:	bd38      	pop	{r3, r4, r5, pc}
 8012966:	bf00      	nop
 8012968:	20002d10 	.word	0x20002d10

0801296c <_getpid_r>:
 801296c:	f7f1 b8d6 	b.w	8003b1c <_getpid>

08012970 <pow>:
 8012970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012972:	ed2d 8b02 	vpush	{d8}
 8012976:	eeb0 8a40 	vmov.f32	s16, s0
 801297a:	eef0 8a60 	vmov.f32	s17, s1
 801297e:	ec55 4b11 	vmov	r4, r5, d1
 8012982:	f000 f871 	bl	8012a68 <__ieee754_pow>
 8012986:	4622      	mov	r2, r4
 8012988:	462b      	mov	r3, r5
 801298a:	4620      	mov	r0, r4
 801298c:	4629      	mov	r1, r5
 801298e:	ec57 6b10 	vmov	r6, r7, d0
 8012992:	f7ee f8d3 	bl	8000b3c <__aeabi_dcmpun>
 8012996:	2800      	cmp	r0, #0
 8012998:	d13b      	bne.n	8012a12 <pow+0xa2>
 801299a:	ec51 0b18 	vmov	r0, r1, d8
 801299e:	2200      	movs	r2, #0
 80129a0:	2300      	movs	r3, #0
 80129a2:	f7ee f899 	bl	8000ad8 <__aeabi_dcmpeq>
 80129a6:	b1b8      	cbz	r0, 80129d8 <pow+0x68>
 80129a8:	2200      	movs	r2, #0
 80129aa:	2300      	movs	r3, #0
 80129ac:	4620      	mov	r0, r4
 80129ae:	4629      	mov	r1, r5
 80129b0:	f7ee f892 	bl	8000ad8 <__aeabi_dcmpeq>
 80129b4:	2800      	cmp	r0, #0
 80129b6:	d146      	bne.n	8012a46 <pow+0xd6>
 80129b8:	ec45 4b10 	vmov	d0, r4, r5
 80129bc:	f000 f848 	bl	8012a50 <finite>
 80129c0:	b338      	cbz	r0, 8012a12 <pow+0xa2>
 80129c2:	2200      	movs	r2, #0
 80129c4:	2300      	movs	r3, #0
 80129c6:	4620      	mov	r0, r4
 80129c8:	4629      	mov	r1, r5
 80129ca:	f7ee f88f 	bl	8000aec <__aeabi_dcmplt>
 80129ce:	b300      	cbz	r0, 8012a12 <pow+0xa2>
 80129d0:	f7fc f8ee 	bl	800ebb0 <__errno>
 80129d4:	2322      	movs	r3, #34	@ 0x22
 80129d6:	e01b      	b.n	8012a10 <pow+0xa0>
 80129d8:	ec47 6b10 	vmov	d0, r6, r7
 80129dc:	f000 f838 	bl	8012a50 <finite>
 80129e0:	b9e0      	cbnz	r0, 8012a1c <pow+0xac>
 80129e2:	eeb0 0a48 	vmov.f32	s0, s16
 80129e6:	eef0 0a68 	vmov.f32	s1, s17
 80129ea:	f000 f831 	bl	8012a50 <finite>
 80129ee:	b1a8      	cbz	r0, 8012a1c <pow+0xac>
 80129f0:	ec45 4b10 	vmov	d0, r4, r5
 80129f4:	f000 f82c 	bl	8012a50 <finite>
 80129f8:	b180      	cbz	r0, 8012a1c <pow+0xac>
 80129fa:	4632      	mov	r2, r6
 80129fc:	463b      	mov	r3, r7
 80129fe:	4630      	mov	r0, r6
 8012a00:	4639      	mov	r1, r7
 8012a02:	f7ee f89b 	bl	8000b3c <__aeabi_dcmpun>
 8012a06:	2800      	cmp	r0, #0
 8012a08:	d0e2      	beq.n	80129d0 <pow+0x60>
 8012a0a:	f7fc f8d1 	bl	800ebb0 <__errno>
 8012a0e:	2321      	movs	r3, #33	@ 0x21
 8012a10:	6003      	str	r3, [r0, #0]
 8012a12:	ecbd 8b02 	vpop	{d8}
 8012a16:	ec47 6b10 	vmov	d0, r6, r7
 8012a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	2300      	movs	r3, #0
 8012a20:	4630      	mov	r0, r6
 8012a22:	4639      	mov	r1, r7
 8012a24:	f7ee f858 	bl	8000ad8 <__aeabi_dcmpeq>
 8012a28:	2800      	cmp	r0, #0
 8012a2a:	d0f2      	beq.n	8012a12 <pow+0xa2>
 8012a2c:	eeb0 0a48 	vmov.f32	s0, s16
 8012a30:	eef0 0a68 	vmov.f32	s1, s17
 8012a34:	f000 f80c 	bl	8012a50 <finite>
 8012a38:	2800      	cmp	r0, #0
 8012a3a:	d0ea      	beq.n	8012a12 <pow+0xa2>
 8012a3c:	ec45 4b10 	vmov	d0, r4, r5
 8012a40:	f000 f806 	bl	8012a50 <finite>
 8012a44:	e7c3      	b.n	80129ce <pow+0x5e>
 8012a46:	4f01      	ldr	r7, [pc, #4]	@ (8012a4c <pow+0xdc>)
 8012a48:	2600      	movs	r6, #0
 8012a4a:	e7e2      	b.n	8012a12 <pow+0xa2>
 8012a4c:	3ff00000 	.word	0x3ff00000

08012a50 <finite>:
 8012a50:	b082      	sub	sp, #8
 8012a52:	ed8d 0b00 	vstr	d0, [sp]
 8012a56:	9801      	ldr	r0, [sp, #4]
 8012a58:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8012a5c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8012a60:	0fc0      	lsrs	r0, r0, #31
 8012a62:	b002      	add	sp, #8
 8012a64:	4770      	bx	lr
	...

08012a68 <__ieee754_pow>:
 8012a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a6c:	b091      	sub	sp, #68	@ 0x44
 8012a6e:	ed8d 1b00 	vstr	d1, [sp]
 8012a72:	e9dd 1900 	ldrd	r1, r9, [sp]
 8012a76:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8012a7a:	ea5a 0001 	orrs.w	r0, sl, r1
 8012a7e:	ec57 6b10 	vmov	r6, r7, d0
 8012a82:	d113      	bne.n	8012aac <__ieee754_pow+0x44>
 8012a84:	19b3      	adds	r3, r6, r6
 8012a86:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8012a8a:	4152      	adcs	r2, r2
 8012a8c:	4298      	cmp	r0, r3
 8012a8e:	4b98      	ldr	r3, [pc, #608]	@ (8012cf0 <__ieee754_pow+0x288>)
 8012a90:	4193      	sbcs	r3, r2
 8012a92:	f080 84ea 	bcs.w	801346a <__ieee754_pow+0xa02>
 8012a96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012a9a:	4630      	mov	r0, r6
 8012a9c:	4639      	mov	r1, r7
 8012a9e:	f7ed fbfd 	bl	800029c <__adddf3>
 8012aa2:	ec41 0b10 	vmov	d0, r0, r1
 8012aa6:	b011      	add	sp, #68	@ 0x44
 8012aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aac:	4a91      	ldr	r2, [pc, #580]	@ (8012cf4 <__ieee754_pow+0x28c>)
 8012aae:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012ab2:	4590      	cmp	r8, r2
 8012ab4:	463d      	mov	r5, r7
 8012ab6:	4633      	mov	r3, r6
 8012ab8:	d806      	bhi.n	8012ac8 <__ieee754_pow+0x60>
 8012aba:	d101      	bne.n	8012ac0 <__ieee754_pow+0x58>
 8012abc:	2e00      	cmp	r6, #0
 8012abe:	d1ea      	bne.n	8012a96 <__ieee754_pow+0x2e>
 8012ac0:	4592      	cmp	sl, r2
 8012ac2:	d801      	bhi.n	8012ac8 <__ieee754_pow+0x60>
 8012ac4:	d10e      	bne.n	8012ae4 <__ieee754_pow+0x7c>
 8012ac6:	b169      	cbz	r1, 8012ae4 <__ieee754_pow+0x7c>
 8012ac8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8012acc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8012ad0:	431d      	orrs	r5, r3
 8012ad2:	d1e0      	bne.n	8012a96 <__ieee754_pow+0x2e>
 8012ad4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012ad8:	18db      	adds	r3, r3, r3
 8012ada:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8012ade:	4152      	adcs	r2, r2
 8012ae0:	429d      	cmp	r5, r3
 8012ae2:	e7d4      	b.n	8012a8e <__ieee754_pow+0x26>
 8012ae4:	2d00      	cmp	r5, #0
 8012ae6:	46c3      	mov	fp, r8
 8012ae8:	da3a      	bge.n	8012b60 <__ieee754_pow+0xf8>
 8012aea:	4a83      	ldr	r2, [pc, #524]	@ (8012cf8 <__ieee754_pow+0x290>)
 8012aec:	4592      	cmp	sl, r2
 8012aee:	d84d      	bhi.n	8012b8c <__ieee754_pow+0x124>
 8012af0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8012af4:	4592      	cmp	sl, r2
 8012af6:	f240 84c7 	bls.w	8013488 <__ieee754_pow+0xa20>
 8012afa:	ea4f 522a 	mov.w	r2, sl, asr #20
 8012afe:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8012b02:	2a14      	cmp	r2, #20
 8012b04:	dd0f      	ble.n	8012b26 <__ieee754_pow+0xbe>
 8012b06:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8012b0a:	fa21 f402 	lsr.w	r4, r1, r2
 8012b0e:	fa04 f202 	lsl.w	r2, r4, r2
 8012b12:	428a      	cmp	r2, r1
 8012b14:	f040 84b8 	bne.w	8013488 <__ieee754_pow+0xa20>
 8012b18:	f004 0401 	and.w	r4, r4, #1
 8012b1c:	f1c4 0402 	rsb	r4, r4, #2
 8012b20:	2900      	cmp	r1, #0
 8012b22:	d158      	bne.n	8012bd6 <__ieee754_pow+0x16e>
 8012b24:	e00e      	b.n	8012b44 <__ieee754_pow+0xdc>
 8012b26:	2900      	cmp	r1, #0
 8012b28:	d154      	bne.n	8012bd4 <__ieee754_pow+0x16c>
 8012b2a:	f1c2 0214 	rsb	r2, r2, #20
 8012b2e:	fa4a f402 	asr.w	r4, sl, r2
 8012b32:	fa04 f202 	lsl.w	r2, r4, r2
 8012b36:	4552      	cmp	r2, sl
 8012b38:	f040 84a3 	bne.w	8013482 <__ieee754_pow+0xa1a>
 8012b3c:	f004 0401 	and.w	r4, r4, #1
 8012b40:	f1c4 0402 	rsb	r4, r4, #2
 8012b44:	4a6d      	ldr	r2, [pc, #436]	@ (8012cfc <__ieee754_pow+0x294>)
 8012b46:	4592      	cmp	sl, r2
 8012b48:	d12e      	bne.n	8012ba8 <__ieee754_pow+0x140>
 8012b4a:	f1b9 0f00 	cmp.w	r9, #0
 8012b4e:	f280 8494 	bge.w	801347a <__ieee754_pow+0xa12>
 8012b52:	496a      	ldr	r1, [pc, #424]	@ (8012cfc <__ieee754_pow+0x294>)
 8012b54:	4632      	mov	r2, r6
 8012b56:	463b      	mov	r3, r7
 8012b58:	2000      	movs	r0, #0
 8012b5a:	f7ed fe7f 	bl	800085c <__aeabi_ddiv>
 8012b5e:	e7a0      	b.n	8012aa2 <__ieee754_pow+0x3a>
 8012b60:	2400      	movs	r4, #0
 8012b62:	bbc1      	cbnz	r1, 8012bd6 <__ieee754_pow+0x16e>
 8012b64:	4a63      	ldr	r2, [pc, #396]	@ (8012cf4 <__ieee754_pow+0x28c>)
 8012b66:	4592      	cmp	sl, r2
 8012b68:	d1ec      	bne.n	8012b44 <__ieee754_pow+0xdc>
 8012b6a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8012b6e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8012b72:	431a      	orrs	r2, r3
 8012b74:	f000 8479 	beq.w	801346a <__ieee754_pow+0xa02>
 8012b78:	4b61      	ldr	r3, [pc, #388]	@ (8012d00 <__ieee754_pow+0x298>)
 8012b7a:	4598      	cmp	r8, r3
 8012b7c:	d908      	bls.n	8012b90 <__ieee754_pow+0x128>
 8012b7e:	f1b9 0f00 	cmp.w	r9, #0
 8012b82:	f2c0 8476 	blt.w	8013472 <__ieee754_pow+0xa0a>
 8012b86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012b8a:	e78a      	b.n	8012aa2 <__ieee754_pow+0x3a>
 8012b8c:	2402      	movs	r4, #2
 8012b8e:	e7e8      	b.n	8012b62 <__ieee754_pow+0xfa>
 8012b90:	f1b9 0f00 	cmp.w	r9, #0
 8012b94:	f04f 0000 	mov.w	r0, #0
 8012b98:	f04f 0100 	mov.w	r1, #0
 8012b9c:	da81      	bge.n	8012aa2 <__ieee754_pow+0x3a>
 8012b9e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012ba2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012ba6:	e77c      	b.n	8012aa2 <__ieee754_pow+0x3a>
 8012ba8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8012bac:	d106      	bne.n	8012bbc <__ieee754_pow+0x154>
 8012bae:	4632      	mov	r2, r6
 8012bb0:	463b      	mov	r3, r7
 8012bb2:	4630      	mov	r0, r6
 8012bb4:	4639      	mov	r1, r7
 8012bb6:	f7ed fd27 	bl	8000608 <__aeabi_dmul>
 8012bba:	e772      	b.n	8012aa2 <__ieee754_pow+0x3a>
 8012bbc:	4a51      	ldr	r2, [pc, #324]	@ (8012d04 <__ieee754_pow+0x29c>)
 8012bbe:	4591      	cmp	r9, r2
 8012bc0:	d109      	bne.n	8012bd6 <__ieee754_pow+0x16e>
 8012bc2:	2d00      	cmp	r5, #0
 8012bc4:	db07      	blt.n	8012bd6 <__ieee754_pow+0x16e>
 8012bc6:	ec47 6b10 	vmov	d0, r6, r7
 8012bca:	b011      	add	sp, #68	@ 0x44
 8012bcc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bd0:	f000 bd52 	b.w	8013678 <__ieee754_sqrt>
 8012bd4:	2400      	movs	r4, #0
 8012bd6:	ec47 6b10 	vmov	d0, r6, r7
 8012bda:	9302      	str	r3, [sp, #8]
 8012bdc:	f000 fc88 	bl	80134f0 <fabs>
 8012be0:	9b02      	ldr	r3, [sp, #8]
 8012be2:	ec51 0b10 	vmov	r0, r1, d0
 8012be6:	bb53      	cbnz	r3, 8012c3e <__ieee754_pow+0x1d6>
 8012be8:	4b44      	ldr	r3, [pc, #272]	@ (8012cfc <__ieee754_pow+0x294>)
 8012bea:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8012bee:	429a      	cmp	r2, r3
 8012bf0:	d002      	beq.n	8012bf8 <__ieee754_pow+0x190>
 8012bf2:	f1b8 0f00 	cmp.w	r8, #0
 8012bf6:	d122      	bne.n	8012c3e <__ieee754_pow+0x1d6>
 8012bf8:	f1b9 0f00 	cmp.w	r9, #0
 8012bfc:	da05      	bge.n	8012c0a <__ieee754_pow+0x1a2>
 8012bfe:	4602      	mov	r2, r0
 8012c00:	460b      	mov	r3, r1
 8012c02:	2000      	movs	r0, #0
 8012c04:	493d      	ldr	r1, [pc, #244]	@ (8012cfc <__ieee754_pow+0x294>)
 8012c06:	f7ed fe29 	bl	800085c <__aeabi_ddiv>
 8012c0a:	2d00      	cmp	r5, #0
 8012c0c:	f6bf af49 	bge.w	8012aa2 <__ieee754_pow+0x3a>
 8012c10:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8012c14:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8012c18:	ea58 0804 	orrs.w	r8, r8, r4
 8012c1c:	d108      	bne.n	8012c30 <__ieee754_pow+0x1c8>
 8012c1e:	4602      	mov	r2, r0
 8012c20:	460b      	mov	r3, r1
 8012c22:	4610      	mov	r0, r2
 8012c24:	4619      	mov	r1, r3
 8012c26:	f7ed fb37 	bl	8000298 <__aeabi_dsub>
 8012c2a:	4602      	mov	r2, r0
 8012c2c:	460b      	mov	r3, r1
 8012c2e:	e794      	b.n	8012b5a <__ieee754_pow+0xf2>
 8012c30:	2c01      	cmp	r4, #1
 8012c32:	f47f af36 	bne.w	8012aa2 <__ieee754_pow+0x3a>
 8012c36:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012c3a:	4619      	mov	r1, r3
 8012c3c:	e731      	b.n	8012aa2 <__ieee754_pow+0x3a>
 8012c3e:	0feb      	lsrs	r3, r5, #31
 8012c40:	3b01      	subs	r3, #1
 8012c42:	ea53 0204 	orrs.w	r2, r3, r4
 8012c46:	d102      	bne.n	8012c4e <__ieee754_pow+0x1e6>
 8012c48:	4632      	mov	r2, r6
 8012c4a:	463b      	mov	r3, r7
 8012c4c:	e7e9      	b.n	8012c22 <__ieee754_pow+0x1ba>
 8012c4e:	3c01      	subs	r4, #1
 8012c50:	431c      	orrs	r4, r3
 8012c52:	d016      	beq.n	8012c82 <__ieee754_pow+0x21a>
 8012c54:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8012ce0 <__ieee754_pow+0x278>
 8012c58:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8012c5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012c60:	f240 8112 	bls.w	8012e88 <__ieee754_pow+0x420>
 8012c64:	4b28      	ldr	r3, [pc, #160]	@ (8012d08 <__ieee754_pow+0x2a0>)
 8012c66:	459a      	cmp	sl, r3
 8012c68:	4b25      	ldr	r3, [pc, #148]	@ (8012d00 <__ieee754_pow+0x298>)
 8012c6a:	d916      	bls.n	8012c9a <__ieee754_pow+0x232>
 8012c6c:	4598      	cmp	r8, r3
 8012c6e:	d80b      	bhi.n	8012c88 <__ieee754_pow+0x220>
 8012c70:	f1b9 0f00 	cmp.w	r9, #0
 8012c74:	da0b      	bge.n	8012c8e <__ieee754_pow+0x226>
 8012c76:	2000      	movs	r0, #0
 8012c78:	b011      	add	sp, #68	@ 0x44
 8012c7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c7e:	f000 bcf3 	b.w	8013668 <__math_oflow>
 8012c82:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8012ce8 <__ieee754_pow+0x280>
 8012c86:	e7e7      	b.n	8012c58 <__ieee754_pow+0x1f0>
 8012c88:	f1b9 0f00 	cmp.w	r9, #0
 8012c8c:	dcf3      	bgt.n	8012c76 <__ieee754_pow+0x20e>
 8012c8e:	2000      	movs	r0, #0
 8012c90:	b011      	add	sp, #68	@ 0x44
 8012c92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c96:	f000 bcdf 	b.w	8013658 <__math_uflow>
 8012c9a:	4598      	cmp	r8, r3
 8012c9c:	d20c      	bcs.n	8012cb8 <__ieee754_pow+0x250>
 8012c9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	f7ed ff21 	bl	8000aec <__aeabi_dcmplt>
 8012caa:	3800      	subs	r0, #0
 8012cac:	bf18      	it	ne
 8012cae:	2001      	movne	r0, #1
 8012cb0:	f1b9 0f00 	cmp.w	r9, #0
 8012cb4:	daec      	bge.n	8012c90 <__ieee754_pow+0x228>
 8012cb6:	e7df      	b.n	8012c78 <__ieee754_pow+0x210>
 8012cb8:	4b10      	ldr	r3, [pc, #64]	@ (8012cfc <__ieee754_pow+0x294>)
 8012cba:	4598      	cmp	r8, r3
 8012cbc:	f04f 0200 	mov.w	r2, #0
 8012cc0:	d924      	bls.n	8012d0c <__ieee754_pow+0x2a4>
 8012cc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	f7ed ff10 	bl	8000aec <__aeabi_dcmplt>
 8012ccc:	3800      	subs	r0, #0
 8012cce:	bf18      	it	ne
 8012cd0:	2001      	movne	r0, #1
 8012cd2:	f1b9 0f00 	cmp.w	r9, #0
 8012cd6:	dccf      	bgt.n	8012c78 <__ieee754_pow+0x210>
 8012cd8:	e7da      	b.n	8012c90 <__ieee754_pow+0x228>
 8012cda:	bf00      	nop
 8012cdc:	f3af 8000 	nop.w
 8012ce0:	00000000 	.word	0x00000000
 8012ce4:	3ff00000 	.word	0x3ff00000
 8012ce8:	00000000 	.word	0x00000000
 8012cec:	bff00000 	.word	0xbff00000
 8012cf0:	fff00000 	.word	0xfff00000
 8012cf4:	7ff00000 	.word	0x7ff00000
 8012cf8:	433fffff 	.word	0x433fffff
 8012cfc:	3ff00000 	.word	0x3ff00000
 8012d00:	3fefffff 	.word	0x3fefffff
 8012d04:	3fe00000 	.word	0x3fe00000
 8012d08:	43f00000 	.word	0x43f00000
 8012d0c:	4b5a      	ldr	r3, [pc, #360]	@ (8012e78 <__ieee754_pow+0x410>)
 8012d0e:	f7ed fac3 	bl	8000298 <__aeabi_dsub>
 8012d12:	a351      	add	r3, pc, #324	@ (adr r3, 8012e58 <__ieee754_pow+0x3f0>)
 8012d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d18:	4604      	mov	r4, r0
 8012d1a:	460d      	mov	r5, r1
 8012d1c:	f7ed fc74 	bl	8000608 <__aeabi_dmul>
 8012d20:	a34f      	add	r3, pc, #316	@ (adr r3, 8012e60 <__ieee754_pow+0x3f8>)
 8012d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d26:	4606      	mov	r6, r0
 8012d28:	460f      	mov	r7, r1
 8012d2a:	4620      	mov	r0, r4
 8012d2c:	4629      	mov	r1, r5
 8012d2e:	f7ed fc6b 	bl	8000608 <__aeabi_dmul>
 8012d32:	4b52      	ldr	r3, [pc, #328]	@ (8012e7c <__ieee754_pow+0x414>)
 8012d34:	4682      	mov	sl, r0
 8012d36:	468b      	mov	fp, r1
 8012d38:	2200      	movs	r2, #0
 8012d3a:	4620      	mov	r0, r4
 8012d3c:	4629      	mov	r1, r5
 8012d3e:	f7ed fc63 	bl	8000608 <__aeabi_dmul>
 8012d42:	4602      	mov	r2, r0
 8012d44:	460b      	mov	r3, r1
 8012d46:	a148      	add	r1, pc, #288	@ (adr r1, 8012e68 <__ieee754_pow+0x400>)
 8012d48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d4c:	f7ed faa4 	bl	8000298 <__aeabi_dsub>
 8012d50:	4622      	mov	r2, r4
 8012d52:	462b      	mov	r3, r5
 8012d54:	f7ed fc58 	bl	8000608 <__aeabi_dmul>
 8012d58:	4602      	mov	r2, r0
 8012d5a:	460b      	mov	r3, r1
 8012d5c:	2000      	movs	r0, #0
 8012d5e:	4948      	ldr	r1, [pc, #288]	@ (8012e80 <__ieee754_pow+0x418>)
 8012d60:	f7ed fa9a 	bl	8000298 <__aeabi_dsub>
 8012d64:	4622      	mov	r2, r4
 8012d66:	4680      	mov	r8, r0
 8012d68:	4689      	mov	r9, r1
 8012d6a:	462b      	mov	r3, r5
 8012d6c:	4620      	mov	r0, r4
 8012d6e:	4629      	mov	r1, r5
 8012d70:	f7ed fc4a 	bl	8000608 <__aeabi_dmul>
 8012d74:	4602      	mov	r2, r0
 8012d76:	460b      	mov	r3, r1
 8012d78:	4640      	mov	r0, r8
 8012d7a:	4649      	mov	r1, r9
 8012d7c:	f7ed fc44 	bl	8000608 <__aeabi_dmul>
 8012d80:	a33b      	add	r3, pc, #236	@ (adr r3, 8012e70 <__ieee754_pow+0x408>)
 8012d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d86:	f7ed fc3f 	bl	8000608 <__aeabi_dmul>
 8012d8a:	4602      	mov	r2, r0
 8012d8c:	460b      	mov	r3, r1
 8012d8e:	4650      	mov	r0, sl
 8012d90:	4659      	mov	r1, fp
 8012d92:	f7ed fa81 	bl	8000298 <__aeabi_dsub>
 8012d96:	4602      	mov	r2, r0
 8012d98:	460b      	mov	r3, r1
 8012d9a:	4680      	mov	r8, r0
 8012d9c:	4689      	mov	r9, r1
 8012d9e:	4630      	mov	r0, r6
 8012da0:	4639      	mov	r1, r7
 8012da2:	f7ed fa7b 	bl	800029c <__adddf3>
 8012da6:	2400      	movs	r4, #0
 8012da8:	4632      	mov	r2, r6
 8012daa:	463b      	mov	r3, r7
 8012dac:	4620      	mov	r0, r4
 8012dae:	460d      	mov	r5, r1
 8012db0:	f7ed fa72 	bl	8000298 <__aeabi_dsub>
 8012db4:	4602      	mov	r2, r0
 8012db6:	460b      	mov	r3, r1
 8012db8:	4640      	mov	r0, r8
 8012dba:	4649      	mov	r1, r9
 8012dbc:	f7ed fa6c 	bl	8000298 <__aeabi_dsub>
 8012dc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012dc4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012dc8:	2300      	movs	r3, #0
 8012dca:	9304      	str	r3, [sp, #16]
 8012dcc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8012dd0:	4606      	mov	r6, r0
 8012dd2:	460f      	mov	r7, r1
 8012dd4:	4652      	mov	r2, sl
 8012dd6:	465b      	mov	r3, fp
 8012dd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012ddc:	f7ed fa5c 	bl	8000298 <__aeabi_dsub>
 8012de0:	4622      	mov	r2, r4
 8012de2:	462b      	mov	r3, r5
 8012de4:	f7ed fc10 	bl	8000608 <__aeabi_dmul>
 8012de8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012dec:	4680      	mov	r8, r0
 8012dee:	4689      	mov	r9, r1
 8012df0:	4630      	mov	r0, r6
 8012df2:	4639      	mov	r1, r7
 8012df4:	f7ed fc08 	bl	8000608 <__aeabi_dmul>
 8012df8:	4602      	mov	r2, r0
 8012dfa:	460b      	mov	r3, r1
 8012dfc:	4640      	mov	r0, r8
 8012dfe:	4649      	mov	r1, r9
 8012e00:	f7ed fa4c 	bl	800029c <__adddf3>
 8012e04:	4652      	mov	r2, sl
 8012e06:	465b      	mov	r3, fp
 8012e08:	4606      	mov	r6, r0
 8012e0a:	460f      	mov	r7, r1
 8012e0c:	4620      	mov	r0, r4
 8012e0e:	4629      	mov	r1, r5
 8012e10:	f7ed fbfa 	bl	8000608 <__aeabi_dmul>
 8012e14:	460b      	mov	r3, r1
 8012e16:	4602      	mov	r2, r0
 8012e18:	4680      	mov	r8, r0
 8012e1a:	4689      	mov	r9, r1
 8012e1c:	4630      	mov	r0, r6
 8012e1e:	4639      	mov	r1, r7
 8012e20:	f7ed fa3c 	bl	800029c <__adddf3>
 8012e24:	4b17      	ldr	r3, [pc, #92]	@ (8012e84 <__ieee754_pow+0x41c>)
 8012e26:	4299      	cmp	r1, r3
 8012e28:	4604      	mov	r4, r0
 8012e2a:	460d      	mov	r5, r1
 8012e2c:	468a      	mov	sl, r1
 8012e2e:	468b      	mov	fp, r1
 8012e30:	f340 82ef 	ble.w	8013412 <__ieee754_pow+0x9aa>
 8012e34:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8012e38:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8012e3c:	4303      	orrs	r3, r0
 8012e3e:	f000 81e8 	beq.w	8013212 <__ieee754_pow+0x7aa>
 8012e42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e46:	2200      	movs	r2, #0
 8012e48:	2300      	movs	r3, #0
 8012e4a:	f7ed fe4f 	bl	8000aec <__aeabi_dcmplt>
 8012e4e:	3800      	subs	r0, #0
 8012e50:	bf18      	it	ne
 8012e52:	2001      	movne	r0, #1
 8012e54:	e710      	b.n	8012c78 <__ieee754_pow+0x210>
 8012e56:	bf00      	nop
 8012e58:	60000000 	.word	0x60000000
 8012e5c:	3ff71547 	.word	0x3ff71547
 8012e60:	f85ddf44 	.word	0xf85ddf44
 8012e64:	3e54ae0b 	.word	0x3e54ae0b
 8012e68:	55555555 	.word	0x55555555
 8012e6c:	3fd55555 	.word	0x3fd55555
 8012e70:	652b82fe 	.word	0x652b82fe
 8012e74:	3ff71547 	.word	0x3ff71547
 8012e78:	3ff00000 	.word	0x3ff00000
 8012e7c:	3fd00000 	.word	0x3fd00000
 8012e80:	3fe00000 	.word	0x3fe00000
 8012e84:	408fffff 	.word	0x408fffff
 8012e88:	4bd5      	ldr	r3, [pc, #852]	@ (80131e0 <__ieee754_pow+0x778>)
 8012e8a:	402b      	ands	r3, r5
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	b92b      	cbnz	r3, 8012e9c <__ieee754_pow+0x434>
 8012e90:	4bd4      	ldr	r3, [pc, #848]	@ (80131e4 <__ieee754_pow+0x77c>)
 8012e92:	f7ed fbb9 	bl	8000608 <__aeabi_dmul>
 8012e96:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8012e9a:	468b      	mov	fp, r1
 8012e9c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8012ea0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8012ea4:	4413      	add	r3, r2
 8012ea6:	930a      	str	r3, [sp, #40]	@ 0x28
 8012ea8:	4bcf      	ldr	r3, [pc, #828]	@ (80131e8 <__ieee754_pow+0x780>)
 8012eaa:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8012eae:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8012eb2:	459b      	cmp	fp, r3
 8012eb4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012eb8:	dd08      	ble.n	8012ecc <__ieee754_pow+0x464>
 8012eba:	4bcc      	ldr	r3, [pc, #816]	@ (80131ec <__ieee754_pow+0x784>)
 8012ebc:	459b      	cmp	fp, r3
 8012ebe:	f340 81a5 	ble.w	801320c <__ieee754_pow+0x7a4>
 8012ec2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012ec4:	3301      	adds	r3, #1
 8012ec6:	930a      	str	r3, [sp, #40]	@ 0x28
 8012ec8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8012ecc:	f04f 0a00 	mov.w	sl, #0
 8012ed0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8012ed4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012ed6:	4bc6      	ldr	r3, [pc, #792]	@ (80131f0 <__ieee754_pow+0x788>)
 8012ed8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012edc:	ed93 7b00 	vldr	d7, [r3]
 8012ee0:	4629      	mov	r1, r5
 8012ee2:	ec53 2b17 	vmov	r2, r3, d7
 8012ee6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012eea:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012eee:	f7ed f9d3 	bl	8000298 <__aeabi_dsub>
 8012ef2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012ef6:	4606      	mov	r6, r0
 8012ef8:	460f      	mov	r7, r1
 8012efa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012efe:	f7ed f9cd 	bl	800029c <__adddf3>
 8012f02:	4602      	mov	r2, r0
 8012f04:	460b      	mov	r3, r1
 8012f06:	2000      	movs	r0, #0
 8012f08:	49ba      	ldr	r1, [pc, #744]	@ (80131f4 <__ieee754_pow+0x78c>)
 8012f0a:	f7ed fca7 	bl	800085c <__aeabi_ddiv>
 8012f0e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8012f12:	4602      	mov	r2, r0
 8012f14:	460b      	mov	r3, r1
 8012f16:	4630      	mov	r0, r6
 8012f18:	4639      	mov	r1, r7
 8012f1a:	f7ed fb75 	bl	8000608 <__aeabi_dmul>
 8012f1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012f22:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8012f26:	106d      	asrs	r5, r5, #1
 8012f28:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8012f2c:	f04f 0b00 	mov.w	fp, #0
 8012f30:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8012f34:	4661      	mov	r1, ip
 8012f36:	2200      	movs	r2, #0
 8012f38:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8012f3c:	4658      	mov	r0, fp
 8012f3e:	46e1      	mov	r9, ip
 8012f40:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8012f44:	4614      	mov	r4, r2
 8012f46:	461d      	mov	r5, r3
 8012f48:	f7ed fb5e 	bl	8000608 <__aeabi_dmul>
 8012f4c:	4602      	mov	r2, r0
 8012f4e:	460b      	mov	r3, r1
 8012f50:	4630      	mov	r0, r6
 8012f52:	4639      	mov	r1, r7
 8012f54:	f7ed f9a0 	bl	8000298 <__aeabi_dsub>
 8012f58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012f5c:	4606      	mov	r6, r0
 8012f5e:	460f      	mov	r7, r1
 8012f60:	4620      	mov	r0, r4
 8012f62:	4629      	mov	r1, r5
 8012f64:	f7ed f998 	bl	8000298 <__aeabi_dsub>
 8012f68:	4602      	mov	r2, r0
 8012f6a:	460b      	mov	r3, r1
 8012f6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012f70:	f7ed f992 	bl	8000298 <__aeabi_dsub>
 8012f74:	465a      	mov	r2, fp
 8012f76:	464b      	mov	r3, r9
 8012f78:	f7ed fb46 	bl	8000608 <__aeabi_dmul>
 8012f7c:	4602      	mov	r2, r0
 8012f7e:	460b      	mov	r3, r1
 8012f80:	4630      	mov	r0, r6
 8012f82:	4639      	mov	r1, r7
 8012f84:	f7ed f988 	bl	8000298 <__aeabi_dsub>
 8012f88:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8012f8c:	f7ed fb3c 	bl	8000608 <__aeabi_dmul>
 8012f90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012f94:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012f98:	4610      	mov	r0, r2
 8012f9a:	4619      	mov	r1, r3
 8012f9c:	f7ed fb34 	bl	8000608 <__aeabi_dmul>
 8012fa0:	a37d      	add	r3, pc, #500	@ (adr r3, 8013198 <__ieee754_pow+0x730>)
 8012fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fa6:	4604      	mov	r4, r0
 8012fa8:	460d      	mov	r5, r1
 8012faa:	f7ed fb2d 	bl	8000608 <__aeabi_dmul>
 8012fae:	a37c      	add	r3, pc, #496	@ (adr r3, 80131a0 <__ieee754_pow+0x738>)
 8012fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fb4:	f7ed f972 	bl	800029c <__adddf3>
 8012fb8:	4622      	mov	r2, r4
 8012fba:	462b      	mov	r3, r5
 8012fbc:	f7ed fb24 	bl	8000608 <__aeabi_dmul>
 8012fc0:	a379      	add	r3, pc, #484	@ (adr r3, 80131a8 <__ieee754_pow+0x740>)
 8012fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fc6:	f7ed f969 	bl	800029c <__adddf3>
 8012fca:	4622      	mov	r2, r4
 8012fcc:	462b      	mov	r3, r5
 8012fce:	f7ed fb1b 	bl	8000608 <__aeabi_dmul>
 8012fd2:	a377      	add	r3, pc, #476	@ (adr r3, 80131b0 <__ieee754_pow+0x748>)
 8012fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fd8:	f7ed f960 	bl	800029c <__adddf3>
 8012fdc:	4622      	mov	r2, r4
 8012fde:	462b      	mov	r3, r5
 8012fe0:	f7ed fb12 	bl	8000608 <__aeabi_dmul>
 8012fe4:	a374      	add	r3, pc, #464	@ (adr r3, 80131b8 <__ieee754_pow+0x750>)
 8012fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fea:	f7ed f957 	bl	800029c <__adddf3>
 8012fee:	4622      	mov	r2, r4
 8012ff0:	462b      	mov	r3, r5
 8012ff2:	f7ed fb09 	bl	8000608 <__aeabi_dmul>
 8012ff6:	a372      	add	r3, pc, #456	@ (adr r3, 80131c0 <__ieee754_pow+0x758>)
 8012ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ffc:	f7ed f94e 	bl	800029c <__adddf3>
 8013000:	4622      	mov	r2, r4
 8013002:	4606      	mov	r6, r0
 8013004:	460f      	mov	r7, r1
 8013006:	462b      	mov	r3, r5
 8013008:	4620      	mov	r0, r4
 801300a:	4629      	mov	r1, r5
 801300c:	f7ed fafc 	bl	8000608 <__aeabi_dmul>
 8013010:	4602      	mov	r2, r0
 8013012:	460b      	mov	r3, r1
 8013014:	4630      	mov	r0, r6
 8013016:	4639      	mov	r1, r7
 8013018:	f7ed faf6 	bl	8000608 <__aeabi_dmul>
 801301c:	465a      	mov	r2, fp
 801301e:	4604      	mov	r4, r0
 8013020:	460d      	mov	r5, r1
 8013022:	464b      	mov	r3, r9
 8013024:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013028:	f7ed f938 	bl	800029c <__adddf3>
 801302c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013030:	f7ed faea 	bl	8000608 <__aeabi_dmul>
 8013034:	4622      	mov	r2, r4
 8013036:	462b      	mov	r3, r5
 8013038:	f7ed f930 	bl	800029c <__adddf3>
 801303c:	465a      	mov	r2, fp
 801303e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013042:	464b      	mov	r3, r9
 8013044:	4658      	mov	r0, fp
 8013046:	4649      	mov	r1, r9
 8013048:	f7ed fade 	bl	8000608 <__aeabi_dmul>
 801304c:	4b6a      	ldr	r3, [pc, #424]	@ (80131f8 <__ieee754_pow+0x790>)
 801304e:	2200      	movs	r2, #0
 8013050:	4606      	mov	r6, r0
 8013052:	460f      	mov	r7, r1
 8013054:	f7ed f922 	bl	800029c <__adddf3>
 8013058:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801305c:	f7ed f91e 	bl	800029c <__adddf3>
 8013060:	46d8      	mov	r8, fp
 8013062:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8013066:	460d      	mov	r5, r1
 8013068:	465a      	mov	r2, fp
 801306a:	460b      	mov	r3, r1
 801306c:	4640      	mov	r0, r8
 801306e:	4649      	mov	r1, r9
 8013070:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8013074:	f7ed fac8 	bl	8000608 <__aeabi_dmul>
 8013078:	465c      	mov	r4, fp
 801307a:	4680      	mov	r8, r0
 801307c:	4689      	mov	r9, r1
 801307e:	4b5e      	ldr	r3, [pc, #376]	@ (80131f8 <__ieee754_pow+0x790>)
 8013080:	2200      	movs	r2, #0
 8013082:	4620      	mov	r0, r4
 8013084:	4629      	mov	r1, r5
 8013086:	f7ed f907 	bl	8000298 <__aeabi_dsub>
 801308a:	4632      	mov	r2, r6
 801308c:	463b      	mov	r3, r7
 801308e:	f7ed f903 	bl	8000298 <__aeabi_dsub>
 8013092:	4602      	mov	r2, r0
 8013094:	460b      	mov	r3, r1
 8013096:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801309a:	f7ed f8fd 	bl	8000298 <__aeabi_dsub>
 801309e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80130a2:	f7ed fab1 	bl	8000608 <__aeabi_dmul>
 80130a6:	4622      	mov	r2, r4
 80130a8:	4606      	mov	r6, r0
 80130aa:	460f      	mov	r7, r1
 80130ac:	462b      	mov	r3, r5
 80130ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80130b2:	f7ed faa9 	bl	8000608 <__aeabi_dmul>
 80130b6:	4602      	mov	r2, r0
 80130b8:	460b      	mov	r3, r1
 80130ba:	4630      	mov	r0, r6
 80130bc:	4639      	mov	r1, r7
 80130be:	f7ed f8ed 	bl	800029c <__adddf3>
 80130c2:	4606      	mov	r6, r0
 80130c4:	460f      	mov	r7, r1
 80130c6:	4602      	mov	r2, r0
 80130c8:	460b      	mov	r3, r1
 80130ca:	4640      	mov	r0, r8
 80130cc:	4649      	mov	r1, r9
 80130ce:	f7ed f8e5 	bl	800029c <__adddf3>
 80130d2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80130d6:	a33c      	add	r3, pc, #240	@ (adr r3, 80131c8 <__ieee754_pow+0x760>)
 80130d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130dc:	4658      	mov	r0, fp
 80130de:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80130e2:	460d      	mov	r5, r1
 80130e4:	f7ed fa90 	bl	8000608 <__aeabi_dmul>
 80130e8:	465c      	mov	r4, fp
 80130ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80130ee:	4642      	mov	r2, r8
 80130f0:	464b      	mov	r3, r9
 80130f2:	4620      	mov	r0, r4
 80130f4:	4629      	mov	r1, r5
 80130f6:	f7ed f8cf 	bl	8000298 <__aeabi_dsub>
 80130fa:	4602      	mov	r2, r0
 80130fc:	460b      	mov	r3, r1
 80130fe:	4630      	mov	r0, r6
 8013100:	4639      	mov	r1, r7
 8013102:	f7ed f8c9 	bl	8000298 <__aeabi_dsub>
 8013106:	a332      	add	r3, pc, #200	@ (adr r3, 80131d0 <__ieee754_pow+0x768>)
 8013108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801310c:	f7ed fa7c 	bl	8000608 <__aeabi_dmul>
 8013110:	a331      	add	r3, pc, #196	@ (adr r3, 80131d8 <__ieee754_pow+0x770>)
 8013112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013116:	4606      	mov	r6, r0
 8013118:	460f      	mov	r7, r1
 801311a:	4620      	mov	r0, r4
 801311c:	4629      	mov	r1, r5
 801311e:	f7ed fa73 	bl	8000608 <__aeabi_dmul>
 8013122:	4602      	mov	r2, r0
 8013124:	460b      	mov	r3, r1
 8013126:	4630      	mov	r0, r6
 8013128:	4639      	mov	r1, r7
 801312a:	f7ed f8b7 	bl	800029c <__adddf3>
 801312e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013130:	4b32      	ldr	r3, [pc, #200]	@ (80131fc <__ieee754_pow+0x794>)
 8013132:	4413      	add	r3, r2
 8013134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013138:	f7ed f8b0 	bl	800029c <__adddf3>
 801313c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013140:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013142:	f7ed f9f7 	bl	8000534 <__aeabi_i2d>
 8013146:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013148:	4b2d      	ldr	r3, [pc, #180]	@ (8013200 <__ieee754_pow+0x798>)
 801314a:	4413      	add	r3, r2
 801314c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013150:	4606      	mov	r6, r0
 8013152:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013156:	460f      	mov	r7, r1
 8013158:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801315c:	f7ed f89e 	bl	800029c <__adddf3>
 8013160:	4642      	mov	r2, r8
 8013162:	464b      	mov	r3, r9
 8013164:	f7ed f89a 	bl	800029c <__adddf3>
 8013168:	4632      	mov	r2, r6
 801316a:	463b      	mov	r3, r7
 801316c:	f7ed f896 	bl	800029c <__adddf3>
 8013170:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8013174:	4632      	mov	r2, r6
 8013176:	463b      	mov	r3, r7
 8013178:	4658      	mov	r0, fp
 801317a:	460d      	mov	r5, r1
 801317c:	f7ed f88c 	bl	8000298 <__aeabi_dsub>
 8013180:	4642      	mov	r2, r8
 8013182:	464b      	mov	r3, r9
 8013184:	f7ed f888 	bl	8000298 <__aeabi_dsub>
 8013188:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801318c:	f7ed f884 	bl	8000298 <__aeabi_dsub>
 8013190:	465c      	mov	r4, fp
 8013192:	4602      	mov	r2, r0
 8013194:	e036      	b.n	8013204 <__ieee754_pow+0x79c>
 8013196:	bf00      	nop
 8013198:	4a454eef 	.word	0x4a454eef
 801319c:	3fca7e28 	.word	0x3fca7e28
 80131a0:	93c9db65 	.word	0x93c9db65
 80131a4:	3fcd864a 	.word	0x3fcd864a
 80131a8:	a91d4101 	.word	0xa91d4101
 80131ac:	3fd17460 	.word	0x3fd17460
 80131b0:	518f264d 	.word	0x518f264d
 80131b4:	3fd55555 	.word	0x3fd55555
 80131b8:	db6fabff 	.word	0xdb6fabff
 80131bc:	3fdb6db6 	.word	0x3fdb6db6
 80131c0:	33333303 	.word	0x33333303
 80131c4:	3fe33333 	.word	0x3fe33333
 80131c8:	e0000000 	.word	0xe0000000
 80131cc:	3feec709 	.word	0x3feec709
 80131d0:	dc3a03fd 	.word	0xdc3a03fd
 80131d4:	3feec709 	.word	0x3feec709
 80131d8:	145b01f5 	.word	0x145b01f5
 80131dc:	be3e2fe0 	.word	0xbe3e2fe0
 80131e0:	7ff00000 	.word	0x7ff00000
 80131e4:	43400000 	.word	0x43400000
 80131e8:	0003988e 	.word	0x0003988e
 80131ec:	000bb679 	.word	0x000bb679
 80131f0:	08014200 	.word	0x08014200
 80131f4:	3ff00000 	.word	0x3ff00000
 80131f8:	40080000 	.word	0x40080000
 80131fc:	080141e0 	.word	0x080141e0
 8013200:	080141f0 	.word	0x080141f0
 8013204:	460b      	mov	r3, r1
 8013206:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801320a:	e5d7      	b.n	8012dbc <__ieee754_pow+0x354>
 801320c:	f04f 0a01 	mov.w	sl, #1
 8013210:	e65e      	b.n	8012ed0 <__ieee754_pow+0x468>
 8013212:	a3b4      	add	r3, pc, #720	@ (adr r3, 80134e4 <__ieee754_pow+0xa7c>)
 8013214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013218:	4630      	mov	r0, r6
 801321a:	4639      	mov	r1, r7
 801321c:	f7ed f83e 	bl	800029c <__adddf3>
 8013220:	4642      	mov	r2, r8
 8013222:	e9cd 0100 	strd	r0, r1, [sp]
 8013226:	464b      	mov	r3, r9
 8013228:	4620      	mov	r0, r4
 801322a:	4629      	mov	r1, r5
 801322c:	f7ed f834 	bl	8000298 <__aeabi_dsub>
 8013230:	4602      	mov	r2, r0
 8013232:	460b      	mov	r3, r1
 8013234:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013238:	f7ed fc76 	bl	8000b28 <__aeabi_dcmpgt>
 801323c:	2800      	cmp	r0, #0
 801323e:	f47f ae00 	bne.w	8012e42 <__ieee754_pow+0x3da>
 8013242:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8013246:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801324a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 801324e:	fa43 fa0a 	asr.w	sl, r3, sl
 8013252:	44da      	add	sl, fp
 8013254:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8013258:	489d      	ldr	r0, [pc, #628]	@ (80134d0 <__ieee754_pow+0xa68>)
 801325a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801325e:	4108      	asrs	r0, r1
 8013260:	ea00 030a 	and.w	r3, r0, sl
 8013264:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8013268:	f1c1 0114 	rsb	r1, r1, #20
 801326c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8013270:	fa4a fa01 	asr.w	sl, sl, r1
 8013274:	f1bb 0f00 	cmp.w	fp, #0
 8013278:	4640      	mov	r0, r8
 801327a:	4649      	mov	r1, r9
 801327c:	f04f 0200 	mov.w	r2, #0
 8013280:	bfb8      	it	lt
 8013282:	f1ca 0a00 	rsblt	sl, sl, #0
 8013286:	f7ed f807 	bl	8000298 <__aeabi_dsub>
 801328a:	4680      	mov	r8, r0
 801328c:	4689      	mov	r9, r1
 801328e:	4632      	mov	r2, r6
 8013290:	463b      	mov	r3, r7
 8013292:	4640      	mov	r0, r8
 8013294:	4649      	mov	r1, r9
 8013296:	f7ed f801 	bl	800029c <__adddf3>
 801329a:	2400      	movs	r4, #0
 801329c:	a37c      	add	r3, pc, #496	@ (adr r3, 8013490 <__ieee754_pow+0xa28>)
 801329e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132a2:	4620      	mov	r0, r4
 80132a4:	460d      	mov	r5, r1
 80132a6:	f7ed f9af 	bl	8000608 <__aeabi_dmul>
 80132aa:	4642      	mov	r2, r8
 80132ac:	e9cd 0100 	strd	r0, r1, [sp]
 80132b0:	464b      	mov	r3, r9
 80132b2:	4620      	mov	r0, r4
 80132b4:	4629      	mov	r1, r5
 80132b6:	f7ec ffef 	bl	8000298 <__aeabi_dsub>
 80132ba:	4602      	mov	r2, r0
 80132bc:	460b      	mov	r3, r1
 80132be:	4630      	mov	r0, r6
 80132c0:	4639      	mov	r1, r7
 80132c2:	f7ec ffe9 	bl	8000298 <__aeabi_dsub>
 80132c6:	a374      	add	r3, pc, #464	@ (adr r3, 8013498 <__ieee754_pow+0xa30>)
 80132c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132cc:	f7ed f99c 	bl	8000608 <__aeabi_dmul>
 80132d0:	a373      	add	r3, pc, #460	@ (adr r3, 80134a0 <__ieee754_pow+0xa38>)
 80132d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132d6:	4680      	mov	r8, r0
 80132d8:	4689      	mov	r9, r1
 80132da:	4620      	mov	r0, r4
 80132dc:	4629      	mov	r1, r5
 80132de:	f7ed f993 	bl	8000608 <__aeabi_dmul>
 80132e2:	4602      	mov	r2, r0
 80132e4:	460b      	mov	r3, r1
 80132e6:	4640      	mov	r0, r8
 80132e8:	4649      	mov	r1, r9
 80132ea:	f7ec ffd7 	bl	800029c <__adddf3>
 80132ee:	4604      	mov	r4, r0
 80132f0:	460d      	mov	r5, r1
 80132f2:	4602      	mov	r2, r0
 80132f4:	460b      	mov	r3, r1
 80132f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80132fa:	f7ec ffcf 	bl	800029c <__adddf3>
 80132fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013302:	4680      	mov	r8, r0
 8013304:	4689      	mov	r9, r1
 8013306:	f7ec ffc7 	bl	8000298 <__aeabi_dsub>
 801330a:	4602      	mov	r2, r0
 801330c:	460b      	mov	r3, r1
 801330e:	4620      	mov	r0, r4
 8013310:	4629      	mov	r1, r5
 8013312:	f7ec ffc1 	bl	8000298 <__aeabi_dsub>
 8013316:	4642      	mov	r2, r8
 8013318:	4606      	mov	r6, r0
 801331a:	460f      	mov	r7, r1
 801331c:	464b      	mov	r3, r9
 801331e:	4640      	mov	r0, r8
 8013320:	4649      	mov	r1, r9
 8013322:	f7ed f971 	bl	8000608 <__aeabi_dmul>
 8013326:	a360      	add	r3, pc, #384	@ (adr r3, 80134a8 <__ieee754_pow+0xa40>)
 8013328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801332c:	4604      	mov	r4, r0
 801332e:	460d      	mov	r5, r1
 8013330:	f7ed f96a 	bl	8000608 <__aeabi_dmul>
 8013334:	a35e      	add	r3, pc, #376	@ (adr r3, 80134b0 <__ieee754_pow+0xa48>)
 8013336:	e9d3 2300 	ldrd	r2, r3, [r3]
 801333a:	f7ec ffad 	bl	8000298 <__aeabi_dsub>
 801333e:	4622      	mov	r2, r4
 8013340:	462b      	mov	r3, r5
 8013342:	f7ed f961 	bl	8000608 <__aeabi_dmul>
 8013346:	a35c      	add	r3, pc, #368	@ (adr r3, 80134b8 <__ieee754_pow+0xa50>)
 8013348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801334c:	f7ec ffa6 	bl	800029c <__adddf3>
 8013350:	4622      	mov	r2, r4
 8013352:	462b      	mov	r3, r5
 8013354:	f7ed f958 	bl	8000608 <__aeabi_dmul>
 8013358:	a359      	add	r3, pc, #356	@ (adr r3, 80134c0 <__ieee754_pow+0xa58>)
 801335a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801335e:	f7ec ff9b 	bl	8000298 <__aeabi_dsub>
 8013362:	4622      	mov	r2, r4
 8013364:	462b      	mov	r3, r5
 8013366:	f7ed f94f 	bl	8000608 <__aeabi_dmul>
 801336a:	a357      	add	r3, pc, #348	@ (adr r3, 80134c8 <__ieee754_pow+0xa60>)
 801336c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013370:	f7ec ff94 	bl	800029c <__adddf3>
 8013374:	4622      	mov	r2, r4
 8013376:	462b      	mov	r3, r5
 8013378:	f7ed f946 	bl	8000608 <__aeabi_dmul>
 801337c:	4602      	mov	r2, r0
 801337e:	460b      	mov	r3, r1
 8013380:	4640      	mov	r0, r8
 8013382:	4649      	mov	r1, r9
 8013384:	f7ec ff88 	bl	8000298 <__aeabi_dsub>
 8013388:	4604      	mov	r4, r0
 801338a:	460d      	mov	r5, r1
 801338c:	4602      	mov	r2, r0
 801338e:	460b      	mov	r3, r1
 8013390:	4640      	mov	r0, r8
 8013392:	4649      	mov	r1, r9
 8013394:	f7ed f938 	bl	8000608 <__aeabi_dmul>
 8013398:	2200      	movs	r2, #0
 801339a:	e9cd 0100 	strd	r0, r1, [sp]
 801339e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80133a2:	4620      	mov	r0, r4
 80133a4:	4629      	mov	r1, r5
 80133a6:	f7ec ff77 	bl	8000298 <__aeabi_dsub>
 80133aa:	4602      	mov	r2, r0
 80133ac:	460b      	mov	r3, r1
 80133ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80133b2:	f7ed fa53 	bl	800085c <__aeabi_ddiv>
 80133b6:	4632      	mov	r2, r6
 80133b8:	4604      	mov	r4, r0
 80133ba:	460d      	mov	r5, r1
 80133bc:	463b      	mov	r3, r7
 80133be:	4640      	mov	r0, r8
 80133c0:	4649      	mov	r1, r9
 80133c2:	f7ed f921 	bl	8000608 <__aeabi_dmul>
 80133c6:	4632      	mov	r2, r6
 80133c8:	463b      	mov	r3, r7
 80133ca:	f7ec ff67 	bl	800029c <__adddf3>
 80133ce:	4602      	mov	r2, r0
 80133d0:	460b      	mov	r3, r1
 80133d2:	4620      	mov	r0, r4
 80133d4:	4629      	mov	r1, r5
 80133d6:	f7ec ff5f 	bl	8000298 <__aeabi_dsub>
 80133da:	4642      	mov	r2, r8
 80133dc:	464b      	mov	r3, r9
 80133de:	f7ec ff5b 	bl	8000298 <__aeabi_dsub>
 80133e2:	460b      	mov	r3, r1
 80133e4:	4602      	mov	r2, r0
 80133e6:	493b      	ldr	r1, [pc, #236]	@ (80134d4 <__ieee754_pow+0xa6c>)
 80133e8:	2000      	movs	r0, #0
 80133ea:	f7ec ff55 	bl	8000298 <__aeabi_dsub>
 80133ee:	ec41 0b10 	vmov	d0, r0, r1
 80133f2:	ee10 3a90 	vmov	r3, s1
 80133f6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80133fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80133fe:	da30      	bge.n	8013462 <__ieee754_pow+0x9fa>
 8013400:	4650      	mov	r0, sl
 8013402:	f000 f87d 	bl	8013500 <scalbn>
 8013406:	ec51 0b10 	vmov	r0, r1, d0
 801340a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801340e:	f7ff bbd2 	b.w	8012bb6 <__ieee754_pow+0x14e>
 8013412:	4c31      	ldr	r4, [pc, #196]	@ (80134d8 <__ieee754_pow+0xa70>)
 8013414:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013418:	42a3      	cmp	r3, r4
 801341a:	d91a      	bls.n	8013452 <__ieee754_pow+0x9ea>
 801341c:	4b2f      	ldr	r3, [pc, #188]	@ (80134dc <__ieee754_pow+0xa74>)
 801341e:	440b      	add	r3, r1
 8013420:	4303      	orrs	r3, r0
 8013422:	d009      	beq.n	8013438 <__ieee754_pow+0x9d0>
 8013424:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013428:	2200      	movs	r2, #0
 801342a:	2300      	movs	r3, #0
 801342c:	f7ed fb5e 	bl	8000aec <__aeabi_dcmplt>
 8013430:	3800      	subs	r0, #0
 8013432:	bf18      	it	ne
 8013434:	2001      	movne	r0, #1
 8013436:	e42b      	b.n	8012c90 <__ieee754_pow+0x228>
 8013438:	4642      	mov	r2, r8
 801343a:	464b      	mov	r3, r9
 801343c:	f7ec ff2c 	bl	8000298 <__aeabi_dsub>
 8013440:	4632      	mov	r2, r6
 8013442:	463b      	mov	r3, r7
 8013444:	f7ed fb66 	bl	8000b14 <__aeabi_dcmpge>
 8013448:	2800      	cmp	r0, #0
 801344a:	d1eb      	bne.n	8013424 <__ieee754_pow+0x9bc>
 801344c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80134ec <__ieee754_pow+0xa84>
 8013450:	e6f7      	b.n	8013242 <__ieee754_pow+0x7da>
 8013452:	469a      	mov	sl, r3
 8013454:	4b22      	ldr	r3, [pc, #136]	@ (80134e0 <__ieee754_pow+0xa78>)
 8013456:	459a      	cmp	sl, r3
 8013458:	f63f aef3 	bhi.w	8013242 <__ieee754_pow+0x7da>
 801345c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8013460:	e715      	b.n	801328e <__ieee754_pow+0x826>
 8013462:	ec51 0b10 	vmov	r0, r1, d0
 8013466:	4619      	mov	r1, r3
 8013468:	e7cf      	b.n	801340a <__ieee754_pow+0x9a2>
 801346a:	491a      	ldr	r1, [pc, #104]	@ (80134d4 <__ieee754_pow+0xa6c>)
 801346c:	2000      	movs	r0, #0
 801346e:	f7ff bb18 	b.w	8012aa2 <__ieee754_pow+0x3a>
 8013472:	2000      	movs	r0, #0
 8013474:	2100      	movs	r1, #0
 8013476:	f7ff bb14 	b.w	8012aa2 <__ieee754_pow+0x3a>
 801347a:	4630      	mov	r0, r6
 801347c:	4639      	mov	r1, r7
 801347e:	f7ff bb10 	b.w	8012aa2 <__ieee754_pow+0x3a>
 8013482:	460c      	mov	r4, r1
 8013484:	f7ff bb5e 	b.w	8012b44 <__ieee754_pow+0xdc>
 8013488:	2400      	movs	r4, #0
 801348a:	f7ff bb49 	b.w	8012b20 <__ieee754_pow+0xb8>
 801348e:	bf00      	nop
 8013490:	00000000 	.word	0x00000000
 8013494:	3fe62e43 	.word	0x3fe62e43
 8013498:	fefa39ef 	.word	0xfefa39ef
 801349c:	3fe62e42 	.word	0x3fe62e42
 80134a0:	0ca86c39 	.word	0x0ca86c39
 80134a4:	be205c61 	.word	0xbe205c61
 80134a8:	72bea4d0 	.word	0x72bea4d0
 80134ac:	3e663769 	.word	0x3e663769
 80134b0:	c5d26bf1 	.word	0xc5d26bf1
 80134b4:	3ebbbd41 	.word	0x3ebbbd41
 80134b8:	af25de2c 	.word	0xaf25de2c
 80134bc:	3f11566a 	.word	0x3f11566a
 80134c0:	16bebd93 	.word	0x16bebd93
 80134c4:	3f66c16c 	.word	0x3f66c16c
 80134c8:	5555553e 	.word	0x5555553e
 80134cc:	3fc55555 	.word	0x3fc55555
 80134d0:	fff00000 	.word	0xfff00000
 80134d4:	3ff00000 	.word	0x3ff00000
 80134d8:	4090cbff 	.word	0x4090cbff
 80134dc:	3f6f3400 	.word	0x3f6f3400
 80134e0:	3fe00000 	.word	0x3fe00000
 80134e4:	652b82fe 	.word	0x652b82fe
 80134e8:	3c971547 	.word	0x3c971547
 80134ec:	4090cc00 	.word	0x4090cc00

080134f0 <fabs>:
 80134f0:	ec51 0b10 	vmov	r0, r1, d0
 80134f4:	4602      	mov	r2, r0
 80134f6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80134fa:	ec43 2b10 	vmov	d0, r2, r3
 80134fe:	4770      	bx	lr

08013500 <scalbn>:
 8013500:	b570      	push	{r4, r5, r6, lr}
 8013502:	ec55 4b10 	vmov	r4, r5, d0
 8013506:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801350a:	4606      	mov	r6, r0
 801350c:	462b      	mov	r3, r5
 801350e:	b991      	cbnz	r1, 8013536 <scalbn+0x36>
 8013510:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8013514:	4323      	orrs	r3, r4
 8013516:	d03d      	beq.n	8013594 <scalbn+0x94>
 8013518:	4b35      	ldr	r3, [pc, #212]	@ (80135f0 <scalbn+0xf0>)
 801351a:	4620      	mov	r0, r4
 801351c:	4629      	mov	r1, r5
 801351e:	2200      	movs	r2, #0
 8013520:	f7ed f872 	bl	8000608 <__aeabi_dmul>
 8013524:	4b33      	ldr	r3, [pc, #204]	@ (80135f4 <scalbn+0xf4>)
 8013526:	429e      	cmp	r6, r3
 8013528:	4604      	mov	r4, r0
 801352a:	460d      	mov	r5, r1
 801352c:	da0f      	bge.n	801354e <scalbn+0x4e>
 801352e:	a328      	add	r3, pc, #160	@ (adr r3, 80135d0 <scalbn+0xd0>)
 8013530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013534:	e01e      	b.n	8013574 <scalbn+0x74>
 8013536:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801353a:	4291      	cmp	r1, r2
 801353c:	d10b      	bne.n	8013556 <scalbn+0x56>
 801353e:	4622      	mov	r2, r4
 8013540:	4620      	mov	r0, r4
 8013542:	4629      	mov	r1, r5
 8013544:	f7ec feaa 	bl	800029c <__adddf3>
 8013548:	4604      	mov	r4, r0
 801354a:	460d      	mov	r5, r1
 801354c:	e022      	b.n	8013594 <scalbn+0x94>
 801354e:	460b      	mov	r3, r1
 8013550:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013554:	3936      	subs	r1, #54	@ 0x36
 8013556:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801355a:	4296      	cmp	r6, r2
 801355c:	dd0d      	ble.n	801357a <scalbn+0x7a>
 801355e:	2d00      	cmp	r5, #0
 8013560:	a11d      	add	r1, pc, #116	@ (adr r1, 80135d8 <scalbn+0xd8>)
 8013562:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013566:	da02      	bge.n	801356e <scalbn+0x6e>
 8013568:	a11d      	add	r1, pc, #116	@ (adr r1, 80135e0 <scalbn+0xe0>)
 801356a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801356e:	a31a      	add	r3, pc, #104	@ (adr r3, 80135d8 <scalbn+0xd8>)
 8013570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013574:	f7ed f848 	bl	8000608 <__aeabi_dmul>
 8013578:	e7e6      	b.n	8013548 <scalbn+0x48>
 801357a:	1872      	adds	r2, r6, r1
 801357c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8013580:	428a      	cmp	r2, r1
 8013582:	dcec      	bgt.n	801355e <scalbn+0x5e>
 8013584:	2a00      	cmp	r2, #0
 8013586:	dd08      	ble.n	801359a <scalbn+0x9a>
 8013588:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801358c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013590:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013594:	ec45 4b10 	vmov	d0, r4, r5
 8013598:	bd70      	pop	{r4, r5, r6, pc}
 801359a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801359e:	da08      	bge.n	80135b2 <scalbn+0xb2>
 80135a0:	2d00      	cmp	r5, #0
 80135a2:	a10b      	add	r1, pc, #44	@ (adr r1, 80135d0 <scalbn+0xd0>)
 80135a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80135a8:	dac1      	bge.n	801352e <scalbn+0x2e>
 80135aa:	a10f      	add	r1, pc, #60	@ (adr r1, 80135e8 <scalbn+0xe8>)
 80135ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80135b0:	e7bd      	b.n	801352e <scalbn+0x2e>
 80135b2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80135b6:	3236      	adds	r2, #54	@ 0x36
 80135b8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80135bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80135c0:	4620      	mov	r0, r4
 80135c2:	4b0d      	ldr	r3, [pc, #52]	@ (80135f8 <scalbn+0xf8>)
 80135c4:	4629      	mov	r1, r5
 80135c6:	2200      	movs	r2, #0
 80135c8:	e7d4      	b.n	8013574 <scalbn+0x74>
 80135ca:	bf00      	nop
 80135cc:	f3af 8000 	nop.w
 80135d0:	c2f8f359 	.word	0xc2f8f359
 80135d4:	01a56e1f 	.word	0x01a56e1f
 80135d8:	8800759c 	.word	0x8800759c
 80135dc:	7e37e43c 	.word	0x7e37e43c
 80135e0:	8800759c 	.word	0x8800759c
 80135e4:	fe37e43c 	.word	0xfe37e43c
 80135e8:	c2f8f359 	.word	0xc2f8f359
 80135ec:	81a56e1f 	.word	0x81a56e1f
 80135f0:	43500000 	.word	0x43500000
 80135f4:	ffff3cb0 	.word	0xffff3cb0
 80135f8:	3c900000 	.word	0x3c900000

080135fc <with_errno>:
 80135fc:	b510      	push	{r4, lr}
 80135fe:	ed2d 8b02 	vpush	{d8}
 8013602:	eeb0 8a40 	vmov.f32	s16, s0
 8013606:	eef0 8a60 	vmov.f32	s17, s1
 801360a:	4604      	mov	r4, r0
 801360c:	f7fb fad0 	bl	800ebb0 <__errno>
 8013610:	eeb0 0a48 	vmov.f32	s0, s16
 8013614:	eef0 0a68 	vmov.f32	s1, s17
 8013618:	ecbd 8b02 	vpop	{d8}
 801361c:	6004      	str	r4, [r0, #0]
 801361e:	bd10      	pop	{r4, pc}

08013620 <xflow>:
 8013620:	4603      	mov	r3, r0
 8013622:	b507      	push	{r0, r1, r2, lr}
 8013624:	ec51 0b10 	vmov	r0, r1, d0
 8013628:	b183      	cbz	r3, 801364c <xflow+0x2c>
 801362a:	4602      	mov	r2, r0
 801362c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013630:	e9cd 2300 	strd	r2, r3, [sp]
 8013634:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013638:	f7ec ffe6 	bl	8000608 <__aeabi_dmul>
 801363c:	ec41 0b10 	vmov	d0, r0, r1
 8013640:	2022      	movs	r0, #34	@ 0x22
 8013642:	b003      	add	sp, #12
 8013644:	f85d eb04 	ldr.w	lr, [sp], #4
 8013648:	f7ff bfd8 	b.w	80135fc <with_errno>
 801364c:	4602      	mov	r2, r0
 801364e:	460b      	mov	r3, r1
 8013650:	e7ee      	b.n	8013630 <xflow+0x10>
 8013652:	0000      	movs	r0, r0
 8013654:	0000      	movs	r0, r0
	...

08013658 <__math_uflow>:
 8013658:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013660 <__math_uflow+0x8>
 801365c:	f7ff bfe0 	b.w	8013620 <xflow>
 8013660:	00000000 	.word	0x00000000
 8013664:	10000000 	.word	0x10000000

08013668 <__math_oflow>:
 8013668:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013670 <__math_oflow+0x8>
 801366c:	f7ff bfd8 	b.w	8013620 <xflow>
 8013670:	00000000 	.word	0x00000000
 8013674:	70000000 	.word	0x70000000

08013678 <__ieee754_sqrt>:
 8013678:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801367c:	4a68      	ldr	r2, [pc, #416]	@ (8013820 <__ieee754_sqrt+0x1a8>)
 801367e:	ec55 4b10 	vmov	r4, r5, d0
 8013682:	43aa      	bics	r2, r5
 8013684:	462b      	mov	r3, r5
 8013686:	4621      	mov	r1, r4
 8013688:	d110      	bne.n	80136ac <__ieee754_sqrt+0x34>
 801368a:	4622      	mov	r2, r4
 801368c:	4620      	mov	r0, r4
 801368e:	4629      	mov	r1, r5
 8013690:	f7ec ffba 	bl	8000608 <__aeabi_dmul>
 8013694:	4602      	mov	r2, r0
 8013696:	460b      	mov	r3, r1
 8013698:	4620      	mov	r0, r4
 801369a:	4629      	mov	r1, r5
 801369c:	f7ec fdfe 	bl	800029c <__adddf3>
 80136a0:	4604      	mov	r4, r0
 80136a2:	460d      	mov	r5, r1
 80136a4:	ec45 4b10 	vmov	d0, r4, r5
 80136a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136ac:	2d00      	cmp	r5, #0
 80136ae:	dc0e      	bgt.n	80136ce <__ieee754_sqrt+0x56>
 80136b0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80136b4:	4322      	orrs	r2, r4
 80136b6:	d0f5      	beq.n	80136a4 <__ieee754_sqrt+0x2c>
 80136b8:	b19d      	cbz	r5, 80136e2 <__ieee754_sqrt+0x6a>
 80136ba:	4622      	mov	r2, r4
 80136bc:	4620      	mov	r0, r4
 80136be:	4629      	mov	r1, r5
 80136c0:	f7ec fdea 	bl	8000298 <__aeabi_dsub>
 80136c4:	4602      	mov	r2, r0
 80136c6:	460b      	mov	r3, r1
 80136c8:	f7ed f8c8 	bl	800085c <__aeabi_ddiv>
 80136cc:	e7e8      	b.n	80136a0 <__ieee754_sqrt+0x28>
 80136ce:	152a      	asrs	r2, r5, #20
 80136d0:	d115      	bne.n	80136fe <__ieee754_sqrt+0x86>
 80136d2:	2000      	movs	r0, #0
 80136d4:	e009      	b.n	80136ea <__ieee754_sqrt+0x72>
 80136d6:	0acb      	lsrs	r3, r1, #11
 80136d8:	3a15      	subs	r2, #21
 80136da:	0549      	lsls	r1, r1, #21
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d0fa      	beq.n	80136d6 <__ieee754_sqrt+0x5e>
 80136e0:	e7f7      	b.n	80136d2 <__ieee754_sqrt+0x5a>
 80136e2:	462a      	mov	r2, r5
 80136e4:	e7fa      	b.n	80136dc <__ieee754_sqrt+0x64>
 80136e6:	005b      	lsls	r3, r3, #1
 80136e8:	3001      	adds	r0, #1
 80136ea:	02dc      	lsls	r4, r3, #11
 80136ec:	d5fb      	bpl.n	80136e6 <__ieee754_sqrt+0x6e>
 80136ee:	1e44      	subs	r4, r0, #1
 80136f0:	1b12      	subs	r2, r2, r4
 80136f2:	f1c0 0420 	rsb	r4, r0, #32
 80136f6:	fa21 f404 	lsr.w	r4, r1, r4
 80136fa:	4323      	orrs	r3, r4
 80136fc:	4081      	lsls	r1, r0
 80136fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013702:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8013706:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801370a:	07d2      	lsls	r2, r2, #31
 801370c:	bf5c      	itt	pl
 801370e:	005b      	lslpl	r3, r3, #1
 8013710:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8013714:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013718:	bf58      	it	pl
 801371a:	0049      	lslpl	r1, r1, #1
 801371c:	2600      	movs	r6, #0
 801371e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8013722:	106d      	asrs	r5, r5, #1
 8013724:	0049      	lsls	r1, r1, #1
 8013726:	2016      	movs	r0, #22
 8013728:	4632      	mov	r2, r6
 801372a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801372e:	1917      	adds	r7, r2, r4
 8013730:	429f      	cmp	r7, r3
 8013732:	bfde      	ittt	le
 8013734:	193a      	addle	r2, r7, r4
 8013736:	1bdb      	suble	r3, r3, r7
 8013738:	1936      	addle	r6, r6, r4
 801373a:	0fcf      	lsrs	r7, r1, #31
 801373c:	3801      	subs	r0, #1
 801373e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8013742:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013746:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801374a:	d1f0      	bne.n	801372e <__ieee754_sqrt+0xb6>
 801374c:	4604      	mov	r4, r0
 801374e:	2720      	movs	r7, #32
 8013750:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8013754:	429a      	cmp	r2, r3
 8013756:	eb00 0e0c 	add.w	lr, r0, ip
 801375a:	db02      	blt.n	8013762 <__ieee754_sqrt+0xea>
 801375c:	d113      	bne.n	8013786 <__ieee754_sqrt+0x10e>
 801375e:	458e      	cmp	lr, r1
 8013760:	d811      	bhi.n	8013786 <__ieee754_sqrt+0x10e>
 8013762:	f1be 0f00 	cmp.w	lr, #0
 8013766:	eb0e 000c 	add.w	r0, lr, ip
 801376a:	da42      	bge.n	80137f2 <__ieee754_sqrt+0x17a>
 801376c:	2800      	cmp	r0, #0
 801376e:	db40      	blt.n	80137f2 <__ieee754_sqrt+0x17a>
 8013770:	f102 0801 	add.w	r8, r2, #1
 8013774:	1a9b      	subs	r3, r3, r2
 8013776:	458e      	cmp	lr, r1
 8013778:	bf88      	it	hi
 801377a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801377e:	eba1 010e 	sub.w	r1, r1, lr
 8013782:	4464      	add	r4, ip
 8013784:	4642      	mov	r2, r8
 8013786:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801378a:	3f01      	subs	r7, #1
 801378c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8013790:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013794:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8013798:	d1dc      	bne.n	8013754 <__ieee754_sqrt+0xdc>
 801379a:	4319      	orrs	r1, r3
 801379c:	d01b      	beq.n	80137d6 <__ieee754_sqrt+0x15e>
 801379e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8013824 <__ieee754_sqrt+0x1ac>
 80137a2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8013828 <__ieee754_sqrt+0x1b0>
 80137a6:	e9da 0100 	ldrd	r0, r1, [sl]
 80137aa:	e9db 2300 	ldrd	r2, r3, [fp]
 80137ae:	f7ec fd73 	bl	8000298 <__aeabi_dsub>
 80137b2:	e9da 8900 	ldrd	r8, r9, [sl]
 80137b6:	4602      	mov	r2, r0
 80137b8:	460b      	mov	r3, r1
 80137ba:	4640      	mov	r0, r8
 80137bc:	4649      	mov	r1, r9
 80137be:	f7ed f99f 	bl	8000b00 <__aeabi_dcmple>
 80137c2:	b140      	cbz	r0, 80137d6 <__ieee754_sqrt+0x15e>
 80137c4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80137c8:	e9da 0100 	ldrd	r0, r1, [sl]
 80137cc:	e9db 2300 	ldrd	r2, r3, [fp]
 80137d0:	d111      	bne.n	80137f6 <__ieee754_sqrt+0x17e>
 80137d2:	3601      	adds	r6, #1
 80137d4:	463c      	mov	r4, r7
 80137d6:	1072      	asrs	r2, r6, #1
 80137d8:	0863      	lsrs	r3, r4, #1
 80137da:	07f1      	lsls	r1, r6, #31
 80137dc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80137e0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80137e4:	bf48      	it	mi
 80137e6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80137ea:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80137ee:	4618      	mov	r0, r3
 80137f0:	e756      	b.n	80136a0 <__ieee754_sqrt+0x28>
 80137f2:	4690      	mov	r8, r2
 80137f4:	e7be      	b.n	8013774 <__ieee754_sqrt+0xfc>
 80137f6:	f7ec fd51 	bl	800029c <__adddf3>
 80137fa:	e9da 8900 	ldrd	r8, r9, [sl]
 80137fe:	4602      	mov	r2, r0
 8013800:	460b      	mov	r3, r1
 8013802:	4640      	mov	r0, r8
 8013804:	4649      	mov	r1, r9
 8013806:	f7ed f971 	bl	8000aec <__aeabi_dcmplt>
 801380a:	b120      	cbz	r0, 8013816 <__ieee754_sqrt+0x19e>
 801380c:	1ca0      	adds	r0, r4, #2
 801380e:	bf08      	it	eq
 8013810:	3601      	addeq	r6, #1
 8013812:	3402      	adds	r4, #2
 8013814:	e7df      	b.n	80137d6 <__ieee754_sqrt+0x15e>
 8013816:	1c63      	adds	r3, r4, #1
 8013818:	f023 0401 	bic.w	r4, r3, #1
 801381c:	e7db      	b.n	80137d6 <__ieee754_sqrt+0x15e>
 801381e:	bf00      	nop
 8013820:	7ff00000 	.word	0x7ff00000
 8013824:	200001e8 	.word	0x200001e8
 8013828:	200001e0 	.word	0x200001e0

0801382c <_init>:
 801382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801382e:	bf00      	nop
 8013830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013832:	bc08      	pop	{r3}
 8013834:	469e      	mov	lr, r3
 8013836:	4770      	bx	lr

08013838 <_fini>:
 8013838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801383a:	bf00      	nop
 801383c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801383e:	bc08      	pop	{r3}
 8013840:	469e      	mov	lr, r3
 8013842:	4770      	bx	lr
