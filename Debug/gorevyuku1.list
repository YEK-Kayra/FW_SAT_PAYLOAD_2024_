
gorevyuku1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee8c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000774  0800f030  0800f030  00010030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f7a4  0800f7a4  000111e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f7a4  0800f7a4  000107a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f7ac  0800f7ac  000111e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f7ac  0800f7ac  000107ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f7b0  0800f7b0  000107b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800f7b4  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000960  200001e0  0800f994  000111e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000b40  0800f994  00011b40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b884  00000000  00000000  00011210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041d8  00000000  00000000  0002ca94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  00030c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012cd  00000000  00000000  00032480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000079ee  00000000  00000000  0003374d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000214a4  00000000  00000000  0003b13b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a77c2  00000000  00000000  0005c5df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00103da1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c0c  00000000  00000000  00103de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0010b9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f014 	.word	0x0800f014

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800f014 	.word	0x0800f014

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <SubSys_Actuator_Servo_MoveTo>:
 * 		   The correct duty cycle range is between 2% and 12%.
 *
 * @param *dev, Connect struct parameter htim_X, tim_channel_in as given below
 * @param Angle The desired angle for the motor to turn.
 */
void SubSys_Actuator_Servo_MoveTo(Actuator_Servo_HandleTypeDef *dev, uint16_t Angle){
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	807b      	strh	r3, [r7, #2]

	if(dev == &dev_Servo_Separation){
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a17      	ldr	r2, [pc, #92]	@ (8001060 <SubSys_Actuator_Servo_MoveTo+0x6c>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d110      	bne.n	800102a <SubSys_Actuator_Servo_MoveTo+0x36>
		dev->htim_X->Instance->CCR2 = (((Angle*100)/180)+20);
 8001008:	887b      	ldrh	r3, [r7, #2]
 800100a:	2264      	movs	r2, #100	@ 0x64
 800100c:	fb02 f303 	mul.w	r3, r2, r3
 8001010:	4a14      	ldr	r2, [pc, #80]	@ (8001064 <SubSys_Actuator_Servo_MoveTo+0x70>)
 8001012:	fb82 1203 	smull	r1, r2, r2, r3
 8001016:	441a      	add	r2, r3
 8001018:	11d2      	asrs	r2, r2, #7
 800101a:	17db      	asrs	r3, r3, #31
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	f103 0214 	add.w	r2, r3, #20
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	639a      	str	r2, [r3, #56]	@ 0x38
	}

	if(dev == &dev_Servo_ColorFilter){
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a0e      	ldr	r2, [pc, #56]	@ (8001068 <SubSys_Actuator_Servo_MoveTo+0x74>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d110      	bne.n	8001054 <SubSys_Actuator_Servo_MoveTo+0x60>
		dev->htim_X->Instance->CCR1 = (((Angle*100)/180)+20);
 8001032:	887b      	ldrh	r3, [r7, #2]
 8001034:	2264      	movs	r2, #100	@ 0x64
 8001036:	fb02 f303 	mul.w	r3, r2, r3
 800103a:	4a0a      	ldr	r2, [pc, #40]	@ (8001064 <SubSys_Actuator_Servo_MoveTo+0x70>)
 800103c:	fb82 1203 	smull	r1, r2, r2, r3
 8001040:	441a      	add	r2, r3
 8001042:	11d2      	asrs	r2, r2, #7
 8001044:	17db      	asrs	r3, r3, #31
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	f103 0214 	add.w	r2, r3, #20
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	635a      	str	r2, [r3, #52]	@ 0x34
	}

}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	200009a4 	.word	0x200009a4
 8001064:	b60b60b7 	.word	0xb60b60b7
 8001068:	200009ac 	.word	0x200009ac

0800106c <PassiveBuzz_ON>:
 * @brief : Buzzer is set when the function is called(DutyCycle is configurated by the CCRx REG)
 * @param :  htim_X        : it's set by &htimX. X is the number of timers
 * @param :  PWM_Channel_X :  it's set by TIM_CHANNEL_X . X is the number of timer's channels
 * @retval: None
 */
void PassiveBuzz_ON(TIM_HandleTypeDef *htim_X, uint32_t PWM_Channel_X){
 800106c:	b590      	push	{r4, r7, lr}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]

	switch (PWM_Channel_X){
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	2b0c      	cmp	r3, #12
 800107a:	d875      	bhi.n	8001168 <PassiveBuzz_ON+0xfc>
 800107c:	a201      	add	r2, pc, #4	@ (adr r2, 8001084 <PassiveBuzz_ON+0x18>)
 800107e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001082:	bf00      	nop
 8001084:	080010b9 	.word	0x080010b9
 8001088:	08001169 	.word	0x08001169
 800108c:	08001169 	.word	0x08001169
 8001090:	08001169 	.word	0x08001169
 8001094:	080010e5 	.word	0x080010e5
 8001098:	08001169 	.word	0x08001169
 800109c:	08001169 	.word	0x08001169
 80010a0:	08001169 	.word	0x08001169
 80010a4:	08001111 	.word	0x08001111
 80010a8:	08001169 	.word	0x08001169
 80010ac:	08001169 	.word	0x08001169
 80010b0:	08001169 	.word	0x08001169
 80010b4:	0800113d 	.word	0x0800113d

	case TIM_CHANNEL_1 :
		htim_X->Instance->CCR1 =  0.5 * (htim_X->Instance->ARR);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fa28 	bl	8000514 <__aeabi_ui2d>
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	4b29      	ldr	r3, [pc, #164]	@ (8001170 <PassiveBuzz_ON+0x104>)
 80010ca:	f7ff fa9d 	bl	8000608 <__aeabi_dmul>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4610      	mov	r0, r2
 80010d4:	4619      	mov	r1, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681c      	ldr	r4, [r3, #0]
 80010da:	f7ff fd6d 	bl	8000bb8 <__aeabi_d2uiz>
 80010de:	4603      	mov	r3, r0
 80010e0:	6363      	str	r3, [r4, #52]	@ 0x34
	break;
 80010e2:	e041      	b.n	8001168 <PassiveBuzz_ON+0xfc>

	case TIM_CHANNEL_2 :
		htim_X->Instance->CCR2 =  0.5 * (htim_X->Instance->ARR);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fa12 	bl	8000514 <__aeabi_ui2d>
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001170 <PassiveBuzz_ON+0x104>)
 80010f6:	f7ff fa87 	bl	8000608 <__aeabi_dmul>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681c      	ldr	r4, [r3, #0]
 8001106:	f7ff fd57 	bl	8000bb8 <__aeabi_d2uiz>
 800110a:	4603      	mov	r3, r0
 800110c:	63a3      	str	r3, [r4, #56]	@ 0x38
	break;
 800110e:	e02b      	b.n	8001168 <PassiveBuzz_ON+0xfc>

	case TIM_CHANNEL_3 :
		htim_X->Instance->CCR3 =  0.5 * (htim_X->Instance->ARR);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff f9fc 	bl	8000514 <__aeabi_ui2d>
 800111c:	f04f 0200 	mov.w	r2, #0
 8001120:	4b13      	ldr	r3, [pc, #76]	@ (8001170 <PassiveBuzz_ON+0x104>)
 8001122:	f7ff fa71 	bl	8000608 <__aeabi_dmul>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681c      	ldr	r4, [r3, #0]
 8001132:	f7ff fd41 	bl	8000bb8 <__aeabi_d2uiz>
 8001136:	4603      	mov	r3, r0
 8001138:	63e3      	str	r3, [r4, #60]	@ 0x3c
	break;
 800113a:	e015      	b.n	8001168 <PassiveBuzz_ON+0xfc>

	case TIM_CHANNEL_4 :
		htim_X->Instance->CCR4 =  0.5 * (htim_X->Instance->ARR);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff f9e6 	bl	8000514 <__aeabi_ui2d>
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <PassiveBuzz_ON+0x104>)
 800114e:	f7ff fa5b 	bl	8000608 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681c      	ldr	r4, [r3, #0]
 800115e:	f7ff fd2b 	bl	8000bb8 <__aeabi_d2uiz>
 8001162:	4603      	mov	r3, r0
 8001164:	6423      	str	r3, [r4, #64]	@ 0x40
	break;
 8001166:	bf00      	nop
	}


}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	bd90      	pop	{r4, r7, pc}
 8001170:	3fe00000 	.word	0x3fe00000

08001174 <SubSys_SatelliteMission_Continue>:

#include "SubSys_Payload_FlightStatus.h"


void SubSys_SatelliteMission_Continue(){
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0


	SubSys_Payload_MissionRetryLoop();
 8001178:	f000 f8a4 	bl	80012c4 <SubSys_Payload_MissionRetryLoop>

	/*! Model Satellite is on the ground*/
	if( ((-2 <= MS5611_VertSpeed) && (MS5611_VertSpeed <= 4)) && (SatelliteStatus == ReadyForLaunch) )
 800117c:	4b4a      	ldr	r3, [pc, #296]	@ (80012a8 <SubSys_SatelliteMission_Continue+0x134>)
 800117e:	edd3 7a00 	vldr	s15, [r3]
 8001182:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001186:	eef4 7ac7 	vcmpe.f32	s15, s14
 800118a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118e:	db0f      	blt.n	80011b0 <SubSys_SatelliteMission_Continue+0x3c>
 8001190:	4b45      	ldr	r3, [pc, #276]	@ (80012a8 <SubSys_SatelliteMission_Continue+0x134>)
 8001192:	edd3 7a00 	vldr	s15, [r3]
 8001196:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800119a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800119e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a2:	d805      	bhi.n	80011b0 <SubSys_SatelliteMission_Continue+0x3c>
 80011a4:	4b41      	ldr	r3, [pc, #260]	@ (80012ac <SubSys_SatelliteMission_Continue+0x138>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d101      	bne.n	80011b0 <SubSys_SatelliteMission_Continue+0x3c>
	{
		__NOP();
 80011ac:	bf00      	nop
					PassiveBuzz_ON(&htim3, TIM_CHANNEL_1);		/*! The payload of the satellite has made contact with the ground */
				}

	     }

}
 80011ae:	e078      	b.n	80012a2 <SubSys_SatelliteMission_Continue+0x12e>
		SatelliteStatus = Ascent;
 80011b0:	4b3e      	ldr	r3, [pc, #248]	@ (80012ac <SubSys_SatelliteMission_Continue+0x138>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
				if( ((0 <= MS5611_VertSpeed) && (MS5611_VertSpeed <= 3))  && (SatelliteStatus == Ascent) )	//TODO: Euler angles will be added
 80011b6:	4b3c      	ldr	r3, [pc, #240]	@ (80012a8 <SubSys_SatelliteMission_Continue+0x134>)
 80011b8:	edd3 7a00 	vldr	s15, [r3]
 80011bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c4:	db10      	blt.n	80011e8 <SubSys_SatelliteMission_Continue+0x74>
 80011c6:	4b38      	ldr	r3, [pc, #224]	@ (80012a8 <SubSys_SatelliteMission_Continue+0x134>)
 80011c8:	edd3 7a00 	vldr	s15, [r3]
 80011cc:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80011d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d8:	d806      	bhi.n	80011e8 <SubSys_SatelliteMission_Continue+0x74>
 80011da:	4b34      	ldr	r3, [pc, #208]	@ (80012ac <SubSys_SatelliteMission_Continue+0x138>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d102      	bne.n	80011e8 <SubSys_SatelliteMission_Continue+0x74>
					SatelliteStatus = ModelSatelliteDescent;
 80011e2:	4b32      	ldr	r3, [pc, #200]	@ (80012ac <SubSys_SatelliteMission_Continue+0x138>)
 80011e4:	2202      	movs	r2, #2
 80011e6:	701a      	strb	r2, [r3, #0]
				if( ((-14 <= MS5611_VertSpeed) && (MS5611_VertSpeed <= -12)) && (SatelliteStatus == ModelSatelliteDescent) )
 80011e8:	4b2f      	ldr	r3, [pc, #188]	@ (80012a8 <SubSys_SatelliteMission_Continue+0x134>)
 80011ea:	edd3 7a00 	vldr	s15, [r3]
 80011ee:	eeba 7a0c 	vmov.f32	s14, #172	@ 0xc1600000 -14.0
 80011f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fa:	db13      	blt.n	8001224 <SubSys_SatelliteMission_Continue+0xb0>
 80011fc:	4b2a      	ldr	r3, [pc, #168]	@ (80012a8 <SubSys_SatelliteMission_Continue+0x134>)
 80011fe:	edd3 7a00 	vldr	s15, [r3]
 8001202:	eeba 7a08 	vmov.f32	s14, #168	@ 0xc1400000 -12.0
 8001206:	eef4 7ac7 	vcmpe.f32	s15, s14
 800120a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120e:	d809      	bhi.n	8001224 <SubSys_SatelliteMission_Continue+0xb0>
 8001210:	4b26      	ldr	r3, [pc, #152]	@ (80012ac <SubSys_SatelliteMission_Continue+0x138>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b02      	cmp	r3, #2
 8001216:	d105      	bne.n	8001224 <SubSys_SatelliteMission_Continue+0xb0>
					SatelliteStatus = Separation;
 8001218:	4b24      	ldr	r3, [pc, #144]	@ (80012ac <SubSys_SatelliteMission_Continue+0x138>)
 800121a:	2203      	movs	r2, #3
 800121c:	701a      	strb	r2, [r3, #0]
					AutonomoSeparationStatus = Permission_OK;
 800121e:	4b24      	ldr	r3, [pc, #144]	@ (80012b0 <SubSys_SatelliteMission_Continue+0x13c>)
 8001220:	2201      	movs	r2, #1
 8001222:	701a      	strb	r2, [r3, #0]
				if( ((390 <= MS5611_Altitude) && (MS5611_Altitude <= 410)) && (AutonomoSeparationStatus = Permission_OK) && (SatelliteStatus == Separation) )
 8001224:	4b23      	ldr	r3, [pc, #140]	@ (80012b4 <SubSys_SatelliteMission_Continue+0x140>)
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80012b8 <SubSys_SatelliteMission_Continue+0x144>
 800122e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001236:	db15      	blt.n	8001264 <SubSys_SatelliteMission_Continue+0xf0>
 8001238:	4b1e      	ldr	r3, [pc, #120]	@ (80012b4 <SubSys_SatelliteMission_Continue+0x140>)
 800123a:	edd3 7a00 	vldr	s15, [r3]
 800123e:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80012bc <SubSys_SatelliteMission_Continue+0x148>
 8001242:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124a:	d80b      	bhi.n	8001264 <SubSys_SatelliteMission_Continue+0xf0>
 800124c:	4b18      	ldr	r3, [pc, #96]	@ (80012b0 <SubSys_SatelliteMission_Continue+0x13c>)
 800124e:	2201      	movs	r2, #1
 8001250:	701a      	strb	r2, [r3, #0]
 8001252:	4b16      	ldr	r3, [pc, #88]	@ (80012ac <SubSys_SatelliteMission_Continue+0x138>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b03      	cmp	r3, #3
 8001258:	d104      	bne.n	8001264 <SubSys_SatelliteMission_Continue+0xf0>
					SatelliteStatus = PayloadDescent;
 800125a:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <SubSys_SatelliteMission_Continue+0x138>)
 800125c:	2204      	movs	r2, #4
 800125e:	701a      	strb	r2, [r3, #0]
					SubSys_SeparationMechanism_UnLock_PayloadFromCarrier();
 8001260:	f000 fc58 	bl	8001b14 <SubSys_SeparationMechanism_UnLock_PayloadFromCarrier>
				if( ((0 <= MS5611_Altitude) && (MS5611_Altitude <= 2)) && (SatelliteStatus == PayloadDescent) )
 8001264:	4b13      	ldr	r3, [pc, #76]	@ (80012b4 <SubSys_SatelliteMission_Continue+0x140>)
 8001266:	edd3 7a00 	vldr	s15, [r3]
 800126a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800126e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001272:	da00      	bge.n	8001276 <SubSys_SatelliteMission_Continue+0x102>
}
 8001274:	e015      	b.n	80012a2 <SubSys_SatelliteMission_Continue+0x12e>
				if( ((0 <= MS5611_Altitude) && (MS5611_Altitude <= 2)) && (SatelliteStatus == PayloadDescent) )
 8001276:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <SubSys_SatelliteMission_Continue+0x140>)
 8001278:	edd3 7a00 	vldr	s15, [r3]
 800127c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001280:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001288:	d900      	bls.n	800128c <SubSys_SatelliteMission_Continue+0x118>
}
 800128a:	e00a      	b.n	80012a2 <SubSys_SatelliteMission_Continue+0x12e>
				if( ((0 <= MS5611_Altitude) && (MS5611_Altitude <= 2)) && (SatelliteStatus == PayloadDescent) )
 800128c:	4b07      	ldr	r3, [pc, #28]	@ (80012ac <SubSys_SatelliteMission_Continue+0x138>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b04      	cmp	r3, #4
 8001292:	d106      	bne.n	80012a2 <SubSys_SatelliteMission_Continue+0x12e>
					SatelliteStatus = Recovery;
 8001294:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <SubSys_SatelliteMission_Continue+0x138>)
 8001296:	2205      	movs	r2, #5
 8001298:	701a      	strb	r2, [r3, #0]
					PassiveBuzz_ON(&htim3, TIM_CHANNEL_1);		/*! The payload of the satellite has made contact with the ground */
 800129a:	2100      	movs	r1, #0
 800129c:	4808      	ldr	r0, [pc, #32]	@ (80012c0 <SubSys_SatelliteMission_Continue+0x14c>)
 800129e:	f7ff fee5 	bl	800106c <PassiveBuzz_ON>
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000758 	.word	0x20000758
 80012ac:	200009b4 	.word	0x200009b4
 80012b0:	200009b5 	.word	0x200009b5
 80012b4:	20000754 	.word	0x20000754
 80012b8:	43c30000 	.word	0x43c30000
 80012bc:	43cd0000 	.word	0x43cd0000
 80012c0:	20000634 	.word	0x20000634

080012c4 <SubSys_Payload_MissionRetryLoop>:

#include "SubSys_Payload_PeriodicReattempt.h"

void SubSys_Payload_MissionRetryLoop(){
 80012c4:	b598      	push	{r3, r4, r7, lr}
 80012c6:	af00      	add	r7, sp, #0

	/*! At the beginning of each loop, the system retrieves the last recorded milliseconds */
	SystemTick = HAL_GetTick();
 80012c8:	f002 f84e 	bl	8003368 <HAL_GetTick>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001300 <SubSys_Payload_MissionRetryLoop+0x3c>)
 80012d0:	6013      	str	r3, [r2, #0]

	/*! Get ARAS status data and save value into the "SatelliteErrorCode"*/
	//ARAS_CheckSystem();

	/*! Get the Roll, Pitch, and Yaw values from the IMU sensor variables. */
	IMU_GetEulerVector();
 80012d2:	f000 fbd9 	bl	8001a88 <IMU_GetEulerVector>
	//SD_Write(SdDatasBuf, "SAT_PAY/STM32.TXT");

	/*! Transfer all necessary datas from Carrier to Payload of Satellite*/
	//SubSys_WirelessCom_Telemetry_Transfer_From_To(Sat_Payload, GroundStation, &dev_WirelessComApp);

	NumberOfTelePacket++;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <SubSys_Payload_MissionRetryLoop+0x40>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	3301      	adds	r3, #1
 80012dc:	4a09      	ldr	r2, [pc, #36]	@ (8001304 <SubSys_Payload_MissionRetryLoop+0x40>)
 80012de:	6013      	str	r3, [r2, #0]

	/*! The system time is retrieved again and the loop waits until the elapsed time reaches 1000 milliseconds*/
	HAL_Delay(abs(100 - (HAL_GetTick() - SystemTick)));
 80012e0:	4b07      	ldr	r3, [pc, #28]	@ (8001300 <SubSys_Payload_MissionRetryLoop+0x3c>)
 80012e2:	681c      	ldr	r4, [r3, #0]
 80012e4:	f002 f840 	bl	8003368 <HAL_GetTick>
 80012e8:	4603      	mov	r3, r0
 80012ea:	1ae3      	subs	r3, r4, r3
 80012ec:	3364      	adds	r3, #100	@ 0x64
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	bfb8      	it	lt
 80012f2:	425b      	neglt	r3, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	f002 f843 	bl	8003380 <HAL_Delay>

}
 80012fa:	bf00      	nop
 80012fc:	bd98      	pop	{r3, r4, r7, pc}
 80012fe:	bf00      	nop
 8001300:	200009b8 	.word	0x200009b8
 8001304:	200009bc 	.word	0x200009bc

08001308 <GPS_UART_CallBack>:
{
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
}


void GPS_UART_CallBack(){
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 800130c:	4b16      	ldr	r3, [pc, #88]	@ (8001368 <GPS_UART_CallBack+0x60>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b0a      	cmp	r3, #10
 8001312:	d010      	beq.n	8001336 <GPS_UART_CallBack+0x2e>
 8001314:	4b15      	ldr	r3, [pc, #84]	@ (800136c <GPS_UART_CallBack+0x64>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	b25b      	sxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	db0b      	blt.n	8001336 <GPS_UART_CallBack+0x2e>
		rx_buffer[rx_index++] = rx_data;
 800131e:	4b13      	ldr	r3, [pc, #76]	@ (800136c <GPS_UART_CallBack+0x64>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	b2d1      	uxtb	r1, r2
 8001326:	4a11      	ldr	r2, [pc, #68]	@ (800136c <GPS_UART_CallBack+0x64>)
 8001328:	7011      	strb	r1, [r2, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	4b0e      	ldr	r3, [pc, #56]	@ (8001368 <GPS_UART_CallBack+0x60>)
 800132e:	7819      	ldrb	r1, [r3, #0]
 8001330:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <GPS_UART_CallBack+0x68>)
 8001332:	5499      	strb	r1, [r3, r2]
 8001334:	e010      	b.n	8001358 <GPS_UART_CallBack+0x50>
	} else {

		if(GPS_validate((char*) rx_buffer))
 8001336:	480e      	ldr	r0, [pc, #56]	@ (8001370 <GPS_UART_CallBack+0x68>)
 8001338:	f000 f81e 	bl	8001378 <GPS_validate>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d002      	beq.n	8001348 <GPS_UART_CallBack+0x40>
			GPS_parse((char*) rx_buffer);
 8001342:	480b      	ldr	r0, [pc, #44]	@ (8001370 <GPS_UART_CallBack+0x68>)
 8001344:	f000 f87a 	bl	800143c <GPS_parse>
		rx_index = 0;
 8001348:	4b08      	ldr	r3, [pc, #32]	@ (800136c <GPS_UART_CallBack+0x64>)
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 800134e:	2280      	movs	r2, #128	@ 0x80
 8001350:	2100      	movs	r1, #0
 8001352:	4807      	ldr	r0, [pc, #28]	@ (8001370 <GPS_UART_CallBack+0x68>)
 8001354:	f00a fd04 	bl	800bd60 <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001358:	2201      	movs	r2, #1
 800135a:	4903      	ldr	r1, [pc, #12]	@ (8001368 <GPS_UART_CallBack+0x60>)
 800135c:	4805      	ldr	r0, [pc, #20]	@ (8001374 <GPS_UART_CallBack+0x6c>)
 800135e:	f006 fef3 	bl	8008148 <HAL_UART_Receive_IT>
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200001fc 	.word	0x200001fc
 800136c:	20000280 	.word	0x20000280
 8001370:	20000200 	.word	0x20000200
 8001374:	200006c4 	.word	0x200006c4

08001378 <GPS_validate>:


int GPS_validate(char *nmeastr){
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8001384:	2300      	movs	r3, #0
 8001386:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b24      	cmp	r3, #36	@ 0x24
 8001392:	d103      	bne.n	800139c <GPS_validate+0x24>
        i++;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	3301      	adds	r3, #1
 8001398:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800139a:	e00c      	b.n	80013b6 <GPS_validate+0x3e>
        return 0;
 800139c:	2300      	movs	r3, #0
 800139e:	e047      	b.n	8001430 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4053      	eors	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        i++;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	3301      	adds	r3, #1
 80013b4:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	4413      	add	r3, r2
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d008      	beq.n	80013d4 <GPS_validate+0x5c>
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80013cc:	d002      	beq.n	80013d4 <GPS_validate+0x5c>
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	2b4a      	cmp	r3, #74	@ 0x4a
 80013d2:	dde5      	ble.n	80013a0 <GPS_validate+0x28>
    }

    if(i >= 75){
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	2b4a      	cmp	r3, #74	@ 0x4a
 80013d8:	dd01      	ble.n	80013de <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80013da:	2300      	movs	r3, #0
 80013dc:	e028      	b.n	8001430 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	4413      	add	r3, r2
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80013e8:	d119      	bne.n	800141e <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	3301      	adds	r3, #1
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	3302      	adds	r3, #2
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	490a      	ldr	r1, [pc, #40]	@ (8001438 <GPS_validate+0xc0>)
 800140e:	4618      	mov	r0, r3
 8001410:	f00a fb82 	bl	800bb18 <siprintf>
    return((checkcalcstr[0] == check[0])
 8001414:	7a3a      	ldrb	r2, [r7, #8]
 8001416:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001418:	429a      	cmp	r2, r3
 800141a:	d108      	bne.n	800142e <GPS_validate+0xb6>
 800141c:	e001      	b.n	8001422 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 800141e:	2300      	movs	r3, #0
 8001420:	e006      	b.n	8001430 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001422:	7a7a      	ldrb	r2, [r7, #9]
 8001424:	7b7b      	ldrb	r3, [r7, #13]
 8001426:	429a      	cmp	r2, r3
 8001428:	d101      	bne.n	800142e <GPS_validate+0xb6>
 800142a:	2301      	movs	r3, #1
 800142c:	e000      	b.n	8001430 <GPS_validate+0xb8>
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	0800f030 	.word	0x0800f030

0800143c <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	@ 0x28
 8001440:	af08      	add	r7, sp, #32
 8001442:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8001444:	2206      	movs	r2, #6
 8001446:	4950      	ldr	r1, [pc, #320]	@ (8001588 <GPS_parse+0x14c>)
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f00a fc9e 	bl	800bd8a <strncmp>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d143      	bne.n	80014dc <GPS_parse+0xa0>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8001454:	4b4d      	ldr	r3, [pc, #308]	@ (800158c <GPS_parse+0x150>)
 8001456:	9307      	str	r3, [sp, #28]
 8001458:	4b4d      	ldr	r3, [pc, #308]	@ (8001590 <GPS_parse+0x154>)
 800145a:	9306      	str	r3, [sp, #24]
 800145c:	4b4d      	ldr	r3, [pc, #308]	@ (8001594 <GPS_parse+0x158>)
 800145e:	9305      	str	r3, [sp, #20]
 8001460:	4b4d      	ldr	r3, [pc, #308]	@ (8001598 <GPS_parse+0x15c>)
 8001462:	9304      	str	r3, [sp, #16]
 8001464:	4b4d      	ldr	r3, [pc, #308]	@ (800159c <GPS_parse+0x160>)
 8001466:	9303      	str	r3, [sp, #12]
 8001468:	4b4d      	ldr	r3, [pc, #308]	@ (80015a0 <GPS_parse+0x164>)
 800146a:	9302      	str	r3, [sp, #8]
 800146c:	4b4d      	ldr	r3, [pc, #308]	@ (80015a4 <GPS_parse+0x168>)
 800146e:	9301      	str	r3, [sp, #4]
 8001470:	4b4d      	ldr	r3, [pc, #308]	@ (80015a8 <GPS_parse+0x16c>)
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	4b4d      	ldr	r3, [pc, #308]	@ (80015ac <GPS_parse+0x170>)
 8001476:	4a4e      	ldr	r2, [pc, #312]	@ (80015b0 <GPS_parse+0x174>)
 8001478:	494e      	ldr	r1, [pc, #312]	@ (80015b4 <GPS_parse+0x178>)
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f00a fb6c 	bl	800bb58 <siscanf>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	dd7c      	ble.n	8001580 <GPS_parse+0x144>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001486:	4b4c      	ldr	r3, [pc, #304]	@ (80015b8 <GPS_parse+0x17c>)
 8001488:	edd3 7a04 	vldr	s15, [r3, #16]
 800148c:	4b4a      	ldr	r3, [pc, #296]	@ (80015b8 <GPS_parse+0x17c>)
 800148e:	7e1b      	ldrb	r3, [r3, #24]
 8001490:	4618      	mov	r0, r3
 8001492:	eeb0 0a67 	vmov.f32	s0, s15
 8001496:	f000 f8b9 	bl	800160c <GPS_nmea_to_dec>
 800149a:	eef0 7a40 	vmov.f32	s15, s0
 800149e:	4b46      	ldr	r3, [pc, #280]	@ (80015b8 <GPS_parse+0x17c>)
 80014a0:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80014a4:	4b44      	ldr	r3, [pc, #272]	@ (80015b8 <GPS_parse+0x17c>)
 80014a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80014aa:	4b43      	ldr	r3, [pc, #268]	@ (80015b8 <GPS_parse+0x17c>)
 80014ac:	7e5b      	ldrb	r3, [r3, #25]
 80014ae:	4618      	mov	r0, r3
 80014b0:	eeb0 0a67 	vmov.f32	s0, s15
 80014b4:	f000 f8aa 	bl	800160c <GPS_nmea_to_dec>
 80014b8:	eef0 7a40 	vmov.f32	s15, s0
 80014bc:	4b3e      	ldr	r3, [pc, #248]	@ (80015b8 <GPS_parse+0x17c>)
 80014be:	edc3 7a00 	vstr	s15, [r3]

    		GPS_Latitude = GPS.dec_latitude;
 80014c2:	4b3d      	ldr	r3, [pc, #244]	@ (80015b8 <GPS_parse+0x17c>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	4a3d      	ldr	r2, [pc, #244]	@ (80015bc <GPS_parse+0x180>)
 80014c8:	6013      	str	r3, [r2, #0]
    		GPS_Longitude = GPS.dec_longitude;
 80014ca:	4b3b      	ldr	r3, [pc, #236]	@ (80015b8 <GPS_parse+0x17c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a3c      	ldr	r2, [pc, #240]	@ (80015c0 <GPS_parse+0x184>)
 80014d0:	6013      	str	r3, [r2, #0]
			GPS_Altitude = GPS.msl_altitude;
 80014d2:	4b39      	ldr	r3, [pc, #228]	@ (80015b8 <GPS_parse+0x17c>)
 80014d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d6:	4a3b      	ldr	r2, [pc, #236]	@ (80015c4 <GPS_parse+0x188>)
 80014d8:	6013      	str	r3, [r2, #0]
    		return;
 80014da:	e051      	b.n	8001580 <GPS_parse+0x144>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 80014dc:	2206      	movs	r2, #6
 80014de:	493a      	ldr	r1, [pc, #232]	@ (80015c8 <GPS_parse+0x18c>)
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f00a fc52 	bl	800bd8a <strncmp>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d114      	bne.n	8001516 <GPS_parse+0xda>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 80014ec:	4b37      	ldr	r3, [pc, #220]	@ (80015cc <GPS_parse+0x190>)
 80014ee:	9305      	str	r3, [sp, #20]
 80014f0:	4b37      	ldr	r3, [pc, #220]	@ (80015d0 <GPS_parse+0x194>)
 80014f2:	9304      	str	r3, [sp, #16]
 80014f4:	4b37      	ldr	r3, [pc, #220]	@ (80015d4 <GPS_parse+0x198>)
 80014f6:	9303      	str	r3, [sp, #12]
 80014f8:	4b29      	ldr	r3, [pc, #164]	@ (80015a0 <GPS_parse+0x164>)
 80014fa:	9302      	str	r3, [sp, #8]
 80014fc:	4b29      	ldr	r3, [pc, #164]	@ (80015a4 <GPS_parse+0x168>)
 80014fe:	9301      	str	r3, [sp, #4]
 8001500:	4b29      	ldr	r3, [pc, #164]	@ (80015a8 <GPS_parse+0x16c>)
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	4b29      	ldr	r3, [pc, #164]	@ (80015ac <GPS_parse+0x170>)
 8001506:	4a2a      	ldr	r2, [pc, #168]	@ (80015b0 <GPS_parse+0x174>)
 8001508:	4933      	ldr	r1, [pc, #204]	@ (80015d8 <GPS_parse+0x19c>)
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f00a fb24 	bl	800bb58 <siscanf>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	e034      	b.n	8001580 <GPS_parse+0x144>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 8001516:	2206      	movs	r2, #6
 8001518:	4930      	ldr	r1, [pc, #192]	@ (80015dc <GPS_parse+0x1a0>)
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f00a fc35 	bl	800bd8a <strncmp>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d110      	bne.n	8001548 <GPS_parse+0x10c>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 8001526:	4b2e      	ldr	r3, [pc, #184]	@ (80015e0 <GPS_parse+0x1a4>)
 8001528:	9303      	str	r3, [sp, #12]
 800152a:	4b21      	ldr	r3, [pc, #132]	@ (80015b0 <GPS_parse+0x174>)
 800152c:	9302      	str	r3, [sp, #8]
 800152e:	4b1c      	ldr	r3, [pc, #112]	@ (80015a0 <GPS_parse+0x164>)
 8001530:	9301      	str	r3, [sp, #4]
 8001532:	4b1c      	ldr	r3, [pc, #112]	@ (80015a4 <GPS_parse+0x168>)
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	4b1c      	ldr	r3, [pc, #112]	@ (80015a8 <GPS_parse+0x16c>)
 8001538:	4a1c      	ldr	r2, [pc, #112]	@ (80015ac <GPS_parse+0x170>)
 800153a:	492a      	ldr	r1, [pc, #168]	@ (80015e4 <GPS_parse+0x1a8>)
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f00a fb0b 	bl	800bb58 <siscanf>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	e01b      	b.n	8001580 <GPS_parse+0x144>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 8001548:	2206      	movs	r2, #6
 800154a:	4927      	ldr	r1, [pc, #156]	@ (80015e8 <GPS_parse+0x1ac>)
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f00a fc1c 	bl	800bd8a <strncmp>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d113      	bne.n	8001580 <GPS_parse+0x144>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001558:	4b24      	ldr	r3, [pc, #144]	@ (80015ec <GPS_parse+0x1b0>)
 800155a:	9305      	str	r3, [sp, #20]
 800155c:	4b24      	ldr	r3, [pc, #144]	@ (80015f0 <GPS_parse+0x1b4>)
 800155e:	9304      	str	r3, [sp, #16]
 8001560:	4b24      	ldr	r3, [pc, #144]	@ (80015f4 <GPS_parse+0x1b8>)
 8001562:	9303      	str	r3, [sp, #12]
 8001564:	4b1b      	ldr	r3, [pc, #108]	@ (80015d4 <GPS_parse+0x198>)
 8001566:	9302      	str	r3, [sp, #8]
 8001568:	4b23      	ldr	r3, [pc, #140]	@ (80015f8 <GPS_parse+0x1bc>)
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	4b23      	ldr	r3, [pc, #140]	@ (80015fc <GPS_parse+0x1c0>)
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	4b23      	ldr	r3, [pc, #140]	@ (8001600 <GPS_parse+0x1c4>)
 8001572:	4a24      	ldr	r2, [pc, #144]	@ (8001604 <GPS_parse+0x1c8>)
 8001574:	4924      	ldr	r1, [pc, #144]	@ (8001608 <GPS_parse+0x1cc>)
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f00a faee 	bl	800bb58 <siscanf>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
            return;
    }
}
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	0800f038 	.word	0x0800f038
 800158c:	200002b0 	.word	0x200002b0
 8001590:	200002ac 	.word	0x200002ac
 8001594:	200002a8 	.word	0x200002a8
 8001598:	200002a4 	.word	0x200002a4
 800159c:	200002a0 	.word	0x200002a0
 80015a0:	2000029d 	.word	0x2000029d
 80015a4:	20000290 	.word	0x20000290
 80015a8:	2000029c 	.word	0x2000029c
 80015ac:	20000294 	.word	0x20000294
 80015b0:	20000298 	.word	0x20000298
 80015b4:	0800f040 	.word	0x0800f040
 80015b8:	20000284 	.word	0x20000284
 80015bc:	20000764 	.word	0x20000764
 80015c0:	20000760 	.word	0x20000760
 80015c4:	2000075c 	.word	0x2000075c
 80015c8:	0800f068 	.word	0x0800f068
 80015cc:	200002bc 	.word	0x200002bc
 80015d0:	200002b8 	.word	0x200002b8
 80015d4:	200002b4 	.word	0x200002b4
 80015d8:	0800f070 	.word	0x0800f070
 80015dc:	0800f090 	.word	0x0800f090
 80015e0:	200002c0 	.word	0x200002c0
 80015e4:	0800f098 	.word	0x0800f098
 80015e8:	0800f0b4 	.word	0x0800f0b4
 80015ec:	200002d8 	.word	0x200002d8
 80015f0:	200002d4 	.word	0x200002d4
 80015f4:	200002d1 	.word	0x200002d1
 80015f8:	200002d0 	.word	0x200002d0
 80015fc:	200002cc 	.word	0x200002cc
 8001600:	200002c8 	.word	0x200002c8
 8001604:	200002c4 	.word	0x200002c4
 8001608:	0800f0bc 	.word	0x0800f0bc

0800160c <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 800160c:	b480      	push	{r7}
 800160e:	b087      	sub	sp, #28
 8001610:	af00      	add	r7, sp, #0
 8001612:	ed87 0a01 	vstr	s0, [r7, #4]
 8001616:	4603      	mov	r3, r0
 8001618:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 800161a:	ed97 7a01 	vldr	s14, [r7, #4]
 800161e:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80016a0 <GPS_nmea_to_dec+0x94>
 8001622:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001626:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800162a:	ee17 3a90 	vmov	r3, s15
 800162e:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	2264      	movs	r2, #100	@ 0x64
 8001634:	fb02 f303 	mul.w	r3, r2, r3
 8001638:	ee07 3a90 	vmov	s15, r3
 800163c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001640:	ed97 7a01 	vldr	s14, [r7, #4]
 8001644:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001648:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 800164c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001650:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80016a4 <GPS_nmea_to_dec+0x98>
 8001654:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001658:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	ee07 3a90 	vmov	s15, r3
 8001662:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001666:	ed97 7a02 	vldr	s14, [r7, #8]
 800166a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166e:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8001672:	78fb      	ldrb	r3, [r7, #3]
 8001674:	2b53      	cmp	r3, #83	@ 0x53
 8001676:	d002      	beq.n	800167e <GPS_nmea_to_dec+0x72>
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	2b57      	cmp	r3, #87	@ 0x57
 800167c:	d105      	bne.n	800168a <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 800167e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001682:	eef1 7a67 	vneg.f32	s15, s15
 8001686:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	ee07 3a90 	vmov	s15, r3
}
 8001690:	eeb0 0a67 	vmov.f32	s0, s15
 8001694:	371c      	adds	r7, #28
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	42c80000 	.word	0x42c80000
 80016a4:	42700000 	.word	0x42700000

080016a8 <bno055_setPage>:
extern 	bno055_vector_t vectorIMU;
extern float euler_roll;
extern float euler_pitch;
extern float euler_yaw;

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	4619      	mov	r1, r3
 80016b6:	2007      	movs	r0, #7
 80016b8:	f000 fb86 	bl	8001dc8 <bno055_writeData>
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	4619      	mov	r1, r3
 80016d2:	203d      	movs	r0, #61	@ 0x3d
 80016d4:	f000 fb78 	bl	8001dc8 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d103      	bne.n	80016e6 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 80016de:	2013      	movs	r0, #19
 80016e0:	f000 fb66 	bl	8001db0 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 80016e4:	e002      	b.n	80016ec <bno055_setOperationMode+0x28>
    bno055_delay(7);
 80016e6:	2007      	movs	r0, #7
 80016e8:	f000 fb62 	bl	8001db0 <bno055_delay>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 80016f8:	2000      	movs	r0, #0
 80016fa:	f7ff ffe3 	bl	80016c4 <bno055_setOperationMode>
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}

08001702 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8001702:	b580      	push	{r7, lr}
 8001704:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001706:	200c      	movs	r0, #12
 8001708:	f7ff ffdc 	bl	80016c4 <bno055_setOperationMode>
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}

08001710 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8001714:	2120      	movs	r1, #32
 8001716:	203f      	movs	r0, #63	@ 0x3f
 8001718:	f000 fb56 	bl	8001dc8 <bno055_writeData>
  bno055_delay(700);
 800171c:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001720:	f000 fb46 	bl	8001db0 <bno055_delay>
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}

08001728 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
  bno055_reset();
 800172e:	f7ff ffef 	bl	8001710 <bno055_reset>

  uint8_t id = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8001736:	1dfb      	adds	r3, r7, #7
 8001738:	2201      	movs	r2, #1
 800173a:	4619      	mov	r1, r3
 800173c:	2000      	movs	r0, #0
 800173e:	f000 fc2f 	bl	8001fa0 <bno055_readData>
  if (id != BNO055_ID) {
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	2ba0      	cmp	r3, #160	@ 0xa0
 8001746:	d004      	beq.n	8001752 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	4619      	mov	r1, r3
 800174c:	4809      	ldr	r0, [pc, #36]	@ (8001774 <bno055_setup+0x4c>)
 800174e:	f00a f973 	bl	800ba38 <iprintf>
  }
  bno055_setPage(0);
 8001752:	2000      	movs	r0, #0
 8001754:	f7ff ffa8 	bl	80016a8 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8001758:	2100      	movs	r1, #0
 800175a:	203f      	movs	r0, #63	@ 0x3f
 800175c:	f000 fb34 	bl	8001dc8 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8001760:	f7ff ffc8 	bl	80016f4 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001764:	200a      	movs	r0, #10
 8001766:	f000 fb23 	bl	8001db0 <bno055_delay>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	0800f0dc 	.word	0x0800f0dc

08001778 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8001778:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800177c:	b09e      	sub	sp, #120	@ 0x78
 800177e:	af00      	add	r7, sp, #0
 8001780:	4603      	mov	r3, r0
 8001782:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 8001786:	2000      	movs	r0, #0
 8001788:	f7ff ff8e 	bl	80016a8 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 800178c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001790:	2b20      	cmp	r3, #32
 8001792:	d108      	bne.n	80017a6 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001794:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001798:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800179c:	2208      	movs	r2, #8
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 fbfe 	bl	8001fa0 <bno055_readData>
 80017a4:	e007      	b.n	80017b6 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 80017a6:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80017aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017ae:	2206      	movs	r2, #6
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 fbf5 	bl	8001fa0 <bno055_readData>

  double scale = 1;
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	4b8b      	ldr	r3, [pc, #556]	@ (80019e8 <bno055_getVector+0x270>)
 80017bc:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 80017c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017c4:	2b0e      	cmp	r3, #14
 80017c6:	d109      	bne.n	80017dc <bno055_getVector+0x64>
    scale = magScale;
 80017c8:	4b88      	ldr	r3, [pc, #544]	@ (80019ec <bno055_getVector+0x274>)
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe fea1 	bl	8000514 <__aeabi_ui2d>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 80017da:	e03e      	b.n	800185a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 80017dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	d007      	beq.n	80017f4 <bno055_getVector+0x7c>
 80017e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017e8:	2b28      	cmp	r3, #40	@ 0x28
 80017ea:	d003      	beq.n	80017f4 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 80017ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80017f2:	d109      	bne.n	8001808 <bno055_getVector+0x90>
    scale = accelScale;
 80017f4:	4b7e      	ldr	r3, [pc, #504]	@ (80019f0 <bno055_getVector+0x278>)
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fe8b 	bl	8000514 <__aeabi_ui2d>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001806:	e028      	b.n	800185a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001808:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800180c:	2b14      	cmp	r3, #20
 800180e:	d109      	bne.n	8001824 <bno055_getVector+0xac>
    scale = angularRateScale;
 8001810:	4b78      	ldr	r3, [pc, #480]	@ (80019f4 <bno055_getVector+0x27c>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fe7d 	bl	8000514 <__aeabi_ui2d>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001822:	e01a      	b.n	800185a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001824:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001828:	2b1a      	cmp	r3, #26
 800182a:	d109      	bne.n	8001840 <bno055_getVector+0xc8>
    scale = eulerScale;
 800182c:	4b72      	ldr	r3, [pc, #456]	@ (80019f8 <bno055_getVector+0x280>)
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7fe fe6f 	bl	8000514 <__aeabi_ui2d>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 800183e:	e00c      	b.n	800185a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8001840:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001844:	2b20      	cmp	r3, #32
 8001846:	d108      	bne.n	800185a <bno055_getVector+0xe2>
    scale = quaScale;
 8001848:	4b6c      	ldr	r3, [pc, #432]	@ (80019fc <bno055_getVector+0x284>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fe61 	bl	8000514 <__aeabi_ui2d>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 800185a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800185e:	2220      	movs	r2, #32
 8001860:	2100      	movs	r1, #0
 8001862:	4618      	mov	r0, r3
 8001864:	f00a fa7c 	bl	800bd60 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001868:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800186c:	2b20      	cmp	r3, #32
 800186e:	d150      	bne.n	8001912 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001870:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	b21a      	sxth	r2, r3
 8001878:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800187c:	b21b      	sxth	r3, r3
 800187e:	4313      	orrs	r3, r2
 8001880:	b21b      	sxth	r3, r3
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fe56 	bl	8000534 <__aeabi_i2d>
 8001888:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800188c:	f7fe ffe6 	bl	800085c <__aeabi_ddiv>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001898:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	b21a      	sxth	r2, r3
 80018a0:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80018a4:	b21b      	sxth	r3, r3
 80018a6:	4313      	orrs	r3, r2
 80018a8:	b21b      	sxth	r3, r3
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fe42 	bl	8000534 <__aeabi_i2d>
 80018b0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80018b4:	f7fe ffd2 	bl	800085c <__aeabi_ddiv>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80018c0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80018c4:	021b      	lsls	r3, r3, #8
 80018c6:	b21a      	sxth	r2, r3
 80018c8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80018cc:	b21b      	sxth	r3, r3
 80018ce:	4313      	orrs	r3, r2
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fe2e 	bl	8000534 <__aeabi_i2d>
 80018d8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80018dc:	f7fe ffbe 	bl	800085c <__aeabi_ddiv>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80018e8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80018ec:	021b      	lsls	r3, r3, #8
 80018ee:	b21a      	sxth	r2, r3
 80018f0:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	4313      	orrs	r3, r2
 80018f8:	b21b      	sxth	r3, r3
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fe1a 	bl	8000534 <__aeabi_i2d>
 8001900:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001904:	f7fe ffaa 	bl	800085c <__aeabi_ddiv>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8001910:	e03b      	b.n	800198a <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001912:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001916:	021b      	lsls	r3, r3, #8
 8001918:	b21a      	sxth	r2, r3
 800191a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800191e:	b21b      	sxth	r3, r3
 8001920:	4313      	orrs	r3, r2
 8001922:	b21b      	sxth	r3, r3
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fe05 	bl	8000534 <__aeabi_i2d>
 800192a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800192e:	f7fe ff95 	bl	800085c <__aeabi_ddiv>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800193a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	b21a      	sxth	r2, r3
 8001942:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001946:	b21b      	sxth	r3, r3
 8001948:	4313      	orrs	r3, r2
 800194a:	b21b      	sxth	r3, r3
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fdf1 	bl	8000534 <__aeabi_i2d>
 8001952:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001956:	f7fe ff81 	bl	800085c <__aeabi_ddiv>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001962:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001966:	021b      	lsls	r3, r3, #8
 8001968:	b21a      	sxth	r2, r3
 800196a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800196e:	b21b      	sxth	r3, r3
 8001970:	4313      	orrs	r3, r2
 8001972:	b21b      	sxth	r3, r3
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fddd 	bl	8000534 <__aeabi_i2d>
 800197a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800197e:	f7fe ff6d 	bl	800085c <__aeabi_ddiv>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 800198a:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 800198e:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8001992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001994:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001996:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800199a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800199e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80019a2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80019a6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80019aa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80019ae:	ec49 8b14 	vmov	d4, r8, r9
 80019b2:	ec45 4b15 	vmov	d5, r4, r5
 80019b6:	ec41 0b16 	vmov	d6, r0, r1
 80019ba:	ec43 2b17 	vmov	d7, r2, r3
}
 80019be:	eeb0 0a44 	vmov.f32	s0, s8
 80019c2:	eef0 0a64 	vmov.f32	s1, s9
 80019c6:	eeb0 1a45 	vmov.f32	s2, s10
 80019ca:	eef0 1a65 	vmov.f32	s3, s11
 80019ce:	eeb0 2a46 	vmov.f32	s4, s12
 80019d2:	eef0 2a66 	vmov.f32	s5, s13
 80019d6:	eeb0 3a47 	vmov.f32	s6, s14
 80019da:	eef0 3a67 	vmov.f32	s7, s15
 80019de:	3778      	adds	r7, #120	@ 0x78
 80019e0:	46bd      	mov	sp, r7
 80019e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019e6:	bf00      	nop
 80019e8:	3ff00000 	.word	0x3ff00000
 80019ec:	20000006 	.word	0x20000006
 80019f0:	20000000 	.word	0x20000000
 80019f4:	20000002 	.word	0x20000002
 80019f8:	20000004 	.word	0x20000004
 80019fc:	20000008 	.word	0x20000008

08001a00 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8001a00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a04:	b090      	sub	sp, #64	@ 0x40
 8001a06:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8001a08:	201a      	movs	r0, #26
 8001a0a:	f7ff feb5 	bl	8001778 <bno055_getVector>
 8001a0e:	eeb0 4a40 	vmov.f32	s8, s0
 8001a12:	eef0 4a60 	vmov.f32	s9, s1
 8001a16:	eeb0 5a41 	vmov.f32	s10, s2
 8001a1a:	eef0 5a61 	vmov.f32	s11, s3
 8001a1e:	eeb0 6a42 	vmov.f32	s12, s4
 8001a22:	eef0 6a62 	vmov.f32	s13, s5
 8001a26:	eeb0 7a43 	vmov.f32	s14, s6
 8001a2a:	eef0 7a63 	vmov.f32	s15, s7
 8001a2e:	ed87 4b08 	vstr	d4, [r7, #32]
 8001a32:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8001a36:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8001a3a:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8001a3e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a42:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001a46:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001a4a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001a4e:	ec49 8b14 	vmov	d4, r8, r9
 8001a52:	ec45 4b15 	vmov	d5, r4, r5
 8001a56:	ec41 0b16 	vmov	d6, r0, r1
 8001a5a:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a5e:	eeb0 0a44 	vmov.f32	s0, s8
 8001a62:	eef0 0a64 	vmov.f32	s1, s9
 8001a66:	eeb0 1a45 	vmov.f32	s2, s10
 8001a6a:	eef0 1a65 	vmov.f32	s3, s11
 8001a6e:	eeb0 2a46 	vmov.f32	s4, s12
 8001a72:	eef0 2a66 	vmov.f32	s5, s13
 8001a76:	eeb0 3a47 	vmov.f32	s6, s14
 8001a7a:	eef0 3a67 	vmov.f32	s7, s15
 8001a7e:	3740      	adds	r7, #64	@ 0x40
 8001a80:	46bd      	mov	sp, r7
 8001a82:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001a88 <IMU_GetEulerVector>:
  bno055_writeData(BNO055_AXIS_MAP_CONFIG, axisRemap);
  bno055_writeData(BNO055_AXIS_MAP_SIGN, axisMapSign);
}


void IMU_GetEulerVector(){
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
	  vectorIMU = bno055_getVectorEuler();
 8001a8c:	f7ff ffb8 	bl	8001a00 <bno055_getVectorEuler>
 8001a90:	eeb0 4a40 	vmov.f32	s8, s0
 8001a94:	eef0 4a60 	vmov.f32	s9, s1
 8001a98:	eeb0 5a41 	vmov.f32	s10, s2
 8001a9c:	eef0 5a61 	vmov.f32	s11, s3
 8001aa0:	eeb0 6a42 	vmov.f32	s12, s4
 8001aa4:	eef0 6a62 	vmov.f32	s13, s5
 8001aa8:	eeb0 7a43 	vmov.f32	s14, s6
 8001aac:	eef0 7a63 	vmov.f32	s15, s7
 8001ab0:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <IMU_GetEulerVector+0x7c>)
 8001ab2:	ed83 4b00 	vstr	d4, [r3]
 8001ab6:	ed83 5b02 	vstr	d5, [r3, #8]
 8001aba:	ed83 6b04 	vstr	d6, [r3, #16]
 8001abe:	ed83 7b06 	vstr	d7, [r3, #24]
	  euler_roll = vectorIMU.z;
 8001ac2:	4b10      	ldr	r3, [pc, #64]	@ (8001b04 <IMU_GetEulerVector+0x7c>)
 8001ac4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001ac8:	4610      	mov	r0, r2
 8001aca:	4619      	mov	r1, r3
 8001acc:	f7ff f894 	bl	8000bf8 <__aeabi_d2f>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4a0d      	ldr	r2, [pc, #52]	@ (8001b08 <IMU_GetEulerVector+0x80>)
 8001ad4:	6013      	str	r3, [r2, #0]
	  euler_pitch= vectorIMU.y;
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b04 <IMU_GetEulerVector+0x7c>)
 8001ad8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f7ff f88a 	bl	8000bf8 <__aeabi_d2f>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4a09      	ldr	r2, [pc, #36]	@ (8001b0c <IMU_GetEulerVector+0x84>)
 8001ae8:	6013      	str	r3, [r2, #0]
	  euler_yaw = vectorIMU.x;
 8001aea:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <IMU_GetEulerVector+0x7c>)
 8001aec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	f7ff f880 	bl	8000bf8 <__aeabi_d2f>
 8001af8:	4603      	mov	r3, r0
 8001afa:	4a05      	ldr	r2, [pc, #20]	@ (8001b10 <IMU_GetEulerVector+0x88>)
 8001afc:	6013      	str	r3, [r2, #0]
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000978 	.word	0x20000978
 8001b08:	20000998 	.word	0x20000998
 8001b0c:	2000099c 	.word	0x2000099c
 8001b10:	200009a0 	.word	0x200009a0

08001b14 <SubSys_SeparationMechanism_UnLock_PayloadFromCarrier>:
void SubSys_SeparationMechanism_Lock_PayloadToCarrier(void){

	SubSys_Actuator_Servo_MoveTo(&dev_Servo_Separation,0);

}
void SubSys_SeparationMechanism_UnLock_PayloadFromCarrier(void){
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0

	SubSys_Actuator_Servo_MoveTo(&dev_Servo_Separation,90);
 8001b18:	215a      	movs	r1, #90	@ 0x5a
 8001b1a:	4802      	ldr	r0, [pc, #8]	@ (8001b24 <SubSys_SeparationMechanism_UnLock_PayloadFromCarrier+0x10>)
 8001b1c:	f7ff fa6a 	bl	8000ff4 <SubSys_Actuator_Servo_MoveTo>

}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	200009a4 	.word	0x200009a4

08001b28 <HAL_UART_RxCpltCallback>:
#include "SubSys_USART_ReceiveIT_CallBacks_Driver.h"

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]


	/*! which UART interface receive data?
	 * UART2 is for Wireless communication
	 */
	if(huart->Instance == USART2){
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a09      	ldr	r2, [pc, #36]	@ (8001b5c <HAL_UART_RxCpltCallback+0x34>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d104      	bne.n	8001b44 <HAL_UART_RxCpltCallback+0x1c>
		SubSys_WirelessCom_Telemetry_Receive_From_To(Sat_Carrier, Sat_Payload, &dev_WirelessComApp);
 8001b3a:	4a09      	ldr	r2, [pc, #36]	@ (8001b60 <HAL_UART_RxCpltCallback+0x38>)
 8001b3c:	2102      	movs	r1, #2
 8001b3e:	2001      	movs	r0, #1
 8001b40:	f000 f812 	bl	8001b68 <SubSys_WirelessCom_Telemetry_Receive_From_To>
	}

	/*!
	 * USART1 is for GPS
	 */
	if(huart->Instance == USART1){
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a06      	ldr	r2, [pc, #24]	@ (8001b64 <HAL_UART_RxCpltCallback+0x3c>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d101      	bne.n	8001b52 <HAL_UART_RxCpltCallback+0x2a>
		GPS_UART_CallBack();
 8001b4e:	f7ff fbdb 	bl	8001308 <GPS_UART_CallBack>
	}


}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40004400 	.word	0x40004400
 8001b60:	20000768 	.word	0x20000768
 8001b64:	40011000 	.word	0x40011000

08001b68 <SubSys_WirelessCom_Telemetry_Receive_From_To>:
			break;

		   }

}
void SubSys_WirelessCom_Telemetry_Receive_From_To(MissionUnit From_X, MissionUnit To_Y, SubSys_WirelessCom_APP_HandleTypeDef *dev_WirelessComApp){
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	603a      	str	r2, [r7, #0]
 8001b72:	71fb      	strb	r3, [r7, #7]
 8001b74:	460b      	mov	r3, r1
 8001b76:	71bb      	strb	r3, [r7, #6]
					 * We need to parse the incoming array so that we can learn it.
					 * If the message packet contains the 'C' character, then this message belongs to the Carrier
					 * If the message packet contains the 'G' character, then this message belongs to the Ground Station*/

					/* The data sequence in the telemetry packet is as follows: <ADDH><ADDL><CHN><FromWhereCharacter><SatelliteDatas....>"*/
					if(dev_WirelessComApp->Buffer.Rx[0] == 'C')
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	f893 3190 	ldrb.w	r3, [r3, #400]	@ 0x190
 8001b7e:	2b43      	cmp	r3, #67	@ 0x43
 8001b80:	d11f      	bne.n	8001bc2 <SubSys_WirelessCom_Telemetry_Receive_From_To+0x5a>
					{
						extractValues_Carrier(dev_WirelessComApp->Buffer.Rx, value1, value2);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8001b88:	4a32      	ldr	r2, [pc, #200]	@ (8001c54 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xec>)
 8001b8a:	4933      	ldr	r1, [pc, #204]	@ (8001c58 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xf0>)
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f000 f871 	bl	8001c74 <extractValues_Carrier>

						CarrierPressure   = atof(value1);
 8001b92:	4831      	ldr	r0, [pc, #196]	@ (8001c58 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xf0>)
 8001b94:	f008 fa09 	bl	8009faa <atof>
 8001b98:	ec53 2b10 	vmov	r2, r3, d0
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f7ff f82a 	bl	8000bf8 <__aeabi_d2f>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4a2d      	ldr	r2, [pc, #180]	@ (8001c5c <SubSys_WirelessCom_Telemetry_Receive_From_To+0xf4>)
 8001ba8:	6013      	str	r3, [r2, #0]
						CarrierVertHeight = atof(value2);
 8001baa:	482a      	ldr	r0, [pc, #168]	@ (8001c54 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xec>)
 8001bac:	f008 f9fd 	bl	8009faa <atof>
 8001bb0:	ec53 2b10 	vmov	r2, r3, d0
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f7ff f81e 	bl	8000bf8 <__aeabi_d2f>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	4a28      	ldr	r2, [pc, #160]	@ (8001c60 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xf8>)
 8001bc0:	6013      	str	r3, [r2, #0]

					}

					if(dev_WirelessComApp->Buffer.Rx[0] == 'G')
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	f893 3190 	ldrb.w	r3, [r3, #400]	@ 0x190
 8001bc8:	2b47      	cmp	r3, #71	@ 0x47
 8001bca:	d134      	bne.n	8001c36 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xce>
						 *
						 *	"G<RHRH+><IOTdata>" or "G<RHRH-><IOTdata>"
						 */

						/*! RHRH data */
						command_RHRH[0] = dev_WirelessComApp->Buffer.Rx[2];
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	f893 2192 	ldrb.w	r2, [r3, #402]	@ 0x192
 8001bd2:	4b24      	ldr	r3, [pc, #144]	@ (8001c64 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xfc>)
 8001bd4:	701a      	strb	r2, [r3, #0]
						command_RHRH[1] = dev_WirelessComApp->Buffer.Rx[3];
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	f893 2193 	ldrb.w	r2, [r3, #403]	@ 0x193
 8001bdc:	4b21      	ldr	r3, [pc, #132]	@ (8001c64 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xfc>)
 8001bde:	705a      	strb	r2, [r3, #1]
						command_RHRH[2] = dev_WirelessComApp->Buffer.Rx[4];
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	f893 2194 	ldrb.w	r2, [r3, #404]	@ 0x194
 8001be6:	4b1f      	ldr	r3, [pc, #124]	@ (8001c64 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xfc>)
 8001be8:	709a      	strb	r2, [r3, #2]
						command_RHRH[3] = dev_WirelessComApp->Buffer.Rx[5];
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	f893 2195 	ldrb.w	r2, [r3, #405]	@ 0x195
 8001bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c64 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xfc>)
 8001bf2:	70da      	strb	r2, [r3, #3]

						/*! +,- ==> '+' symbol means that manual separation should be performed
						 *      ==> '-' symbol means that manual separation should not be performed
						 */
						ManuelSeparationCommand = dev_WirelessComApp->Buffer.Rx[6];
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	f893 2196 	ldrb.w	r2, [r3, #406]	@ 0x196
 8001bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8001c68 <SubSys_WirelessCom_Telemetry_Receive_From_To+0x100>)
 8001bfc:	701a      	strb	r2, [r3, #0]

						if(ManuelSeparationCommand == '$'){
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8001c68 <SubSys_WirelessCom_Telemetry_Receive_From_To+0x100>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b24      	cmp	r3, #36	@ 0x24
 8001c04:	d104      	bne.n	8001c10 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xa8>

							SubSys_SeparationMechanism_UnLock_PayloadFromCarrier();
 8001c06:	f7ff ff85 	bl	8001b14 <SubSys_SeparationMechanism_UnLock_PayloadFromCarrier>
							ManuelSeparationCommand = '-';
 8001c0a:	4b17      	ldr	r3, [pc, #92]	@ (8001c68 <SubSys_WirelessCom_Telemetry_Receive_From_To+0x100>)
 8001c0c:	222d      	movs	r2, #45	@ 0x2d
 8001c0e:	701a      	strb	r2, [r3, #0]

						}

						extractValues_GroundStation(dev_WirelessComApp->Buffer.Rx, value3);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8001c16:	4915      	ldr	r1, [pc, #84]	@ (8001c6c <SubSys_WirelessCom_Telemetry_Receive_From_To+0x104>)
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 f88f 	bl	8001d3c <extractValues_GroundStation>
						GroundStation_IOTTemparature = atof(value3);
 8001c1e:	4813      	ldr	r0, [pc, #76]	@ (8001c6c <SubSys_WirelessCom_Telemetry_Receive_From_To+0x104>)
 8001c20:	f008 f9c3 	bl	8009faa <atof>
 8001c24:	ec53 2b10 	vmov	r2, r3, d0
 8001c28:	4610      	mov	r0, r2
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	f7fe ffe4 	bl	8000bf8 <__aeabi_d2f>
 8001c30:	4603      	mov	r3, r0
 8001c32:	4a0f      	ldr	r2, [pc, #60]	@ (8001c70 <SubSys_WirelessCom_Telemetry_Receive_From_To+0x108>)
 8001c34:	6013      	str	r3, [r2, #0]

					/*! Contanie to receive data from carrier unit or ground station.
					 *  Good news and bad news, all of them can be filled but the order of the data can be stuck
					 *  We'll see bro
					 */
					HAL_UART_Receive_IT(dev_WirelessComApp->huartX, (uint8_t *)dev_WirelessComApp->Buffer.Rx, sizeof(dev_WirelessComApp->Buffer.Rx));
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	f8d3 0200 	ldr.w	r0, [r3, #512]	@ 0x200
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8001c42:	221b      	movs	r2, #27
 8001c44:	4619      	mov	r1, r3
 8001c46:	f006 fa7f 	bl	8008148 <HAL_UART_Receive_IT>

}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	200002f0 	.word	0x200002f0
 8001c58:	200002dc 	.word	0x200002dc
 8001c5c:	200009c0 	.word	0x200009c0
 8001c60:	200009c4 	.word	0x200009c4
 8001c64:	200009cc 	.word	0x200009cc
 8001c68:	200009b6 	.word	0x200009b6
 8001c6c:	20000304 	.word	0x20000304
 8001c70:	200009c8 	.word	0x200009c8

08001c74 <extractValues_Carrier>:

#include "SubSys_WirelessCommunication_Telemetry_ExtractValue_Driver.h"

void extractValues_Carrier(const char* input, char* value1, char* value2){
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
    const char* start = strchr(input, '<');
 8001c80:	213c      	movs	r1, #60	@ 0x3c
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f00a f874 	bl	800bd70 <strchr>
 8001c88:	61f8      	str	r0, [r7, #28]
    if (start != NULL) {
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d04b      	beq.n	8001d28 <extractValues_Carrier+0xb4>
        start++;  // '<' karakterinin sonrasına geç
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	3301      	adds	r3, #1
 8001c94:	61fb      	str	r3, [r7, #28]
        const char* end = strchr(start, '>');
 8001c96:	213e      	movs	r1, #62	@ 0x3e
 8001c98:	69f8      	ldr	r0, [r7, #28]
 8001c9a:	f00a f869 	bl	800bd70 <strchr>
 8001c9e:	61b8      	str	r0, [r7, #24]
        if (end != NULL) {
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d039      	beq.n	8001d1a <extractValues_Carrier+0xa6>
            size_t length = end - start;  // İlk '<' ve '>' arasındaki uzunluk
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	617b      	str	r3, [r7, #20]
            strncpy(value1, start, length);  // İlk değeri kopyala
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	69f9      	ldr	r1, [r7, #28]
 8001cb2:	68b8      	ldr	r0, [r7, #8]
 8001cb4:	f00a f87b 	bl	800bdae <strncpy>
            value1[length] = '\0';  // Null karakter ekle
 8001cb8:	68ba      	ldr	r2, [r7, #8]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]

            start = strchr(end + 1, '<');
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	213c      	movs	r1, #60	@ 0x3c
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f00a f851 	bl	800bd70 <strchr>
 8001cce:	61f8      	str	r0, [r7, #28]
            if (start != NULL) {
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d01d      	beq.n	8001d12 <extractValues_Carrier+0x9e>
                start++;  // İkinci '<' karakterinin sonrasına geç
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	61fb      	str	r3, [r7, #28]
                end = strchr(start, '>');
 8001cdc:	213e      	movs	r1, #62	@ 0x3e
 8001cde:	69f8      	ldr	r0, [r7, #28]
 8001ce0:	f00a f846 	bl	800bd70 <strchr>
 8001ce4:	61b8      	str	r0, [r7, #24]
                if (end != NULL) {
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00e      	beq.n	8001d0a <extractValues_Carrier+0x96>
                    length = end - start;  // İkinci '<' ve '>' arasındaki uzunluk
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	617b      	str	r3, [r7, #20]
                    strncpy(value2, start, length);  // İkinci değeri kopyala
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	69f9      	ldr	r1, [r7, #28]
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f00a f858 	bl	800bdae <strncpy>
                    value2[length] = '\0';  // Null karakter ekle
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	4413      	add	r3, r2
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
    } else {
        value1[0] = '\0';  // İlk '<' bulunamazsa boş string döndür
        value2[0] = '\0';  // İkinci '<' ve '>' arasında veri yoksa boş string döndür
    }

}
 8001d08:	e014      	b.n	8001d34 <extractValues_Carrier+0xc0>
                    value2[0] = '\0';  // İkinci değer yoksa boş string döndür
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
}
 8001d10:	e010      	b.n	8001d34 <extractValues_Carrier+0xc0>
                value2[0] = '\0';  // İkinci '<' bulunamazsa boş string döndür
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
}
 8001d18:	e00c      	b.n	8001d34 <extractValues_Carrier+0xc0>
            value1[0] = '\0';  // İlk '>' bulunamazsa boş string döndür
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
            value2[0] = '\0';  // İkinci '<' ve '>' arasında veri yoksa boş string döndür
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
}
 8001d26:	e005      	b.n	8001d34 <extractValues_Carrier+0xc0>
        value1[0] = '\0';  // İlk '<' bulunamazsa boş string döndür
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]
        value2[0] = '\0';  // İkinci '<' ve '>' arasında veri yoksa boş string döndür
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
}
 8001d34:	bf00      	nop
 8001d36:	3720      	adds	r7, #32
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <extractValues_GroundStation>:

void extractValues_GroundStation(const char* input, char* value3){
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
	 const char* start = strchr(input, '<');					/*! input dizisi içinde İlk '<' karakterini bul ve adresini sakla*/
 8001d46:	213c      	movs	r1, #60	@ 0x3c
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f00a f811 	bl	800bd70 <strchr>
 8001d4e:	6178      	str	r0, [r7, #20]
	 if (start != NULL) {										/*! Eğer başlangıç adresi NULL dan farklıysa bu dizide veri var anlamına geliyor*/
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d018      	beq.n	8001d88 <extractValues_GroundStation+0x4c>
		 start+=8;  											/*! '<' karakterinin sonrasına geç adresini +1byte arttırmayı sağlıyor  */
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	3308      	adds	r3, #8
 8001d5a:	617b      	str	r3, [r7, #20]
		 const char* end = strchr(start, '>');					/*! Start adresinden itibaren ilk '>' verisine ulaş ve onun adresini al */
 8001d5c:	213e      	movs	r1, #62	@ 0x3e
 8001d5e:	6978      	ldr	r0, [r7, #20]
 8001d60:	f00a f806 	bl	800bd70 <strchr>
 8001d64:	6138      	str	r0, [r7, #16]
		 if (end != NULL) {										/*! Bitiş adresi de NULL karakterden farklıysa burada da veri var		*/
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00d      	beq.n	8001d88 <extractValues_GroundStation+0x4c>
			 size_t length = end - start;  						/*! İlk '<' ve '>' arasındaki uzunluğu al 1byte*length olmuş olcak 		*/
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	60fb      	str	r3, [r7, #12]
			 strncpy(value3, start, length);  					/*! Start dizisinden Value3 dizisine lenght kadarını kopyala	*/
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	6979      	ldr	r1, [r7, #20]
 8001d78:	6838      	ldr	r0, [r7, #0]
 8001d7a:	f00a f818 	bl	800bdae <strncpy>
			 value3[length] = '\0';  							/*! Null karakter ekle dizinin sonuna										*/
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4413      	add	r3, r2
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
		 }

	 }

}
 8001d88:	bf00      	nop
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <bno055_assignI2C>:

#include "SubSys_Sensor_IMU_APP_Driver.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001d98:	4a04      	ldr	r2, [pc, #16]	@ (8001dac <bno055_assignI2C+0x1c>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6013      	str	r3, [r2, #0]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	20000318 	.word	0x20000318

08001db0 <bno055_delay>:

void bno055_delay(int time) {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f001 fae0 	bl	8003380 <HAL_Delay>
#endif
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	4603      	mov	r3, r0
 8001dd0:	460a      	mov	r2, r1
 8001dd2:	71fb      	strb	r3, [r7, #7]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	733b      	strb	r3, [r7, #12]
 8001ddc:	79bb      	ldrb	r3, [r7, #6]
 8001dde:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001de0:	4b5a      	ldr	r3, [pc, #360]	@ (8001f4c <bno055_writeData+0x184>)
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	f107 020c 	add.w	r2, r7, #12
 8001de8:	230a      	movs	r3, #10
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	2302      	movs	r3, #2
 8001dee:	2150      	movs	r1, #80	@ 0x50
 8001df0:	f002 fd5e 	bl	80048b0 <HAL_I2C_Master_Transmit>
 8001df4:	4603      	mov	r3, r0
 8001df6:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001df8:	7dfb      	ldrb	r3, [r7, #23]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 80a0 	beq.w	8001f40 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d103      	bne.n	8001e0e <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8001e06:	4852      	ldr	r0, [pc, #328]	@ (8001f50 <bno055_writeData+0x188>)
 8001e08:	f009 fe7e 	bl	800bb08 <puts>
 8001e0c:	e012      	b.n	8001e34 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001e0e:	7dfb      	ldrb	r3, [r7, #23]
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d103      	bne.n	8001e1c <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001e14:	484f      	ldr	r0, [pc, #316]	@ (8001f54 <bno055_writeData+0x18c>)
 8001e16:	f009 fe77 	bl	800bb08 <puts>
 8001e1a:	e00b      	b.n	8001e34 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001e1c:	7dfb      	ldrb	r3, [r7, #23]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d103      	bne.n	8001e2a <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001e22:	484d      	ldr	r0, [pc, #308]	@ (8001f58 <bno055_writeData+0x190>)
 8001e24:	f009 fe70 	bl	800bb08 <puts>
 8001e28:	e004      	b.n	8001e34 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001e2a:	7dfb      	ldrb	r3, [r7, #23]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	484b      	ldr	r0, [pc, #300]	@ (8001f5c <bno055_writeData+0x194>)
 8001e30:	f009 fe02 	bl	800ba38 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001e34:	4b45      	ldr	r3, [pc, #276]	@ (8001f4c <bno055_writeData+0x184>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f003 f877 	bl	8004f2c <HAL_I2C_GetError>
 8001e3e:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d07e      	beq.n	8001f44 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d103      	bne.n	8001e54 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001e4c:	4844      	ldr	r0, [pc, #272]	@ (8001f60 <bno055_writeData+0x198>)
 8001e4e:	f009 fe5b 	bl	800bb08 <puts>
 8001e52:	e021      	b.n	8001e98 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d103      	bne.n	8001e62 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001e5a:	4842      	ldr	r0, [pc, #264]	@ (8001f64 <bno055_writeData+0x19c>)
 8001e5c:	f009 fe54 	bl	800bb08 <puts>
 8001e60:	e01a      	b.n	8001e98 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d103      	bne.n	8001e70 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001e68:	483f      	ldr	r0, [pc, #252]	@ (8001f68 <bno055_writeData+0x1a0>)
 8001e6a:	f009 fe4d 	bl	800bb08 <puts>
 8001e6e:	e013      	b.n	8001e98 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	2b08      	cmp	r3, #8
 8001e74:	d103      	bne.n	8001e7e <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001e76:	483d      	ldr	r0, [pc, #244]	@ (8001f6c <bno055_writeData+0x1a4>)
 8001e78:	f009 fe46 	bl	800bb08 <puts>
 8001e7c:	e00c      	b.n	8001e98 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	2b10      	cmp	r3, #16
 8001e82:	d103      	bne.n	8001e8c <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001e84:	483a      	ldr	r0, [pc, #232]	@ (8001f70 <bno055_writeData+0x1a8>)
 8001e86:	f009 fe3f 	bl	800bb08 <puts>
 8001e8a:	e005      	b.n	8001e98 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	2b20      	cmp	r3, #32
 8001e90:	d102      	bne.n	8001e98 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8001e92:	4838      	ldr	r0, [pc, #224]	@ (8001f74 <bno055_writeData+0x1ac>)
 8001e94:	f009 fe38 	bl	800bb08 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001e98:	4b2c      	ldr	r3, [pc, #176]	@ (8001f4c <bno055_writeData+0x184>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f003 f837 	bl	8004f10 <HAL_I2C_GetState>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d103      	bne.n	8001eb4 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001eac:	4832      	ldr	r0, [pc, #200]	@ (8001f78 <bno055_writeData+0x1b0>)
 8001eae:	f009 fe2b 	bl	800bb08 <puts>
 8001eb2:	e048      	b.n	8001f46 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	2b20      	cmp	r3, #32
 8001eb8:	d103      	bne.n	8001ec2 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001eba:	482f      	ldr	r0, [pc, #188]	@ (8001f78 <bno055_writeData+0x1b0>)
 8001ebc:	f009 fe24 	bl	800bb08 <puts>
 8001ec0:	e041      	b.n	8001f46 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
 8001ec4:	2b24      	cmp	r3, #36	@ 0x24
 8001ec6:	d103      	bne.n	8001ed0 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001ec8:	482c      	ldr	r0, [pc, #176]	@ (8001f7c <bno055_writeData+0x1b4>)
 8001eca:	f009 fe1d 	bl	800bb08 <puts>
 8001ece:	e03a      	b.n	8001f46 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	2b21      	cmp	r3, #33	@ 0x21
 8001ed4:	d103      	bne.n	8001ede <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8001ed6:	482a      	ldr	r0, [pc, #168]	@ (8001f80 <bno055_writeData+0x1b8>)
 8001ed8:	f009 fe16 	bl	800bb08 <puts>
 8001edc:	e033      	b.n	8001f46 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	2b22      	cmp	r3, #34	@ 0x22
 8001ee2:	d103      	bne.n	8001eec <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001ee4:	4827      	ldr	r0, [pc, #156]	@ (8001f84 <bno055_writeData+0x1bc>)
 8001ee6:	f009 fe0f 	bl	800bb08 <puts>
 8001eea:	e02c      	b.n	8001f46 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	2b28      	cmp	r3, #40	@ 0x28
 8001ef0:	d103      	bne.n	8001efa <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8001ef2:	4825      	ldr	r0, [pc, #148]	@ (8001f88 <bno055_writeData+0x1c0>)
 8001ef4:	f009 fe08 	bl	800bb08 <puts>
 8001ef8:	e025      	b.n	8001f46 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001efa:	7bfb      	ldrb	r3, [r7, #15]
 8001efc:	2b29      	cmp	r3, #41	@ 0x29
 8001efe:	d103      	bne.n	8001f08 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001f00:	4822      	ldr	r0, [pc, #136]	@ (8001f8c <bno055_writeData+0x1c4>)
 8001f02:	f009 fe01 	bl	800bb08 <puts>
 8001f06:	e01e      	b.n	8001f46 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
 8001f0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f0c:	d103      	bne.n	8001f16 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001f0e:	4820      	ldr	r0, [pc, #128]	@ (8001f90 <bno055_writeData+0x1c8>)
 8001f10:	f009 fdfa 	bl	800bb08 <puts>
 8001f14:	e017      	b.n	8001f46 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	2b60      	cmp	r3, #96	@ 0x60
 8001f1a:	d103      	bne.n	8001f24 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001f1c:	481d      	ldr	r0, [pc, #116]	@ (8001f94 <bno055_writeData+0x1cc>)
 8001f1e:	f009 fdf3 	bl	800bb08 <puts>
 8001f22:	e010      	b.n	8001f46 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f28:	d103      	bne.n	8001f32 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001f2a:	481b      	ldr	r0, [pc, #108]	@ (8001f98 <bno055_writeData+0x1d0>)
 8001f2c:	f009 fdec 	bl	800bb08 <puts>
 8001f30:	e009      	b.n	8001f46 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	2be0      	cmp	r3, #224	@ 0xe0
 8001f36:	d106      	bne.n	8001f46 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001f38:	4818      	ldr	r0, [pc, #96]	@ (8001f9c <bno055_writeData+0x1d4>)
 8001f3a:	f009 fde5 	bl	800bb08 <puts>
 8001f3e:	e002      	b.n	8001f46 <bno055_writeData+0x17e>
    return;
 8001f40:	bf00      	nop
 8001f42:	e000      	b.n	8001f46 <bno055_writeData+0x17e>
    return;
 8001f44:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20000318 	.word	0x20000318
 8001f50:	0800f118 	.word	0x0800f118
 8001f54:	0800f13c 	.word	0x0800f13c
 8001f58:	0800f164 	.word	0x0800f164
 8001f5c:	0800f188 	.word	0x0800f188
 8001f60:	0800f1a0 	.word	0x0800f1a0
 8001f64:	0800f1b4 	.word	0x0800f1b4
 8001f68:	0800f1c8 	.word	0x0800f1c8
 8001f6c:	0800f1dc 	.word	0x0800f1dc
 8001f70:	0800f1f0 	.word	0x0800f1f0
 8001f74:	0800f204 	.word	0x0800f204
 8001f78:	0800f21c 	.word	0x0800f21c
 8001f7c:	0800f234 	.word	0x0800f234
 8001f80:	0800f248 	.word	0x0800f248
 8001f84:	0800f260 	.word	0x0800f260
 8001f88:	0800f278 	.word	0x0800f278
 8001f8c:	0800f290 	.word	0x0800f290
 8001f90:	0800f2b0 	.word	0x0800f2b0
 8001f94:	0800f2d0 	.word	0x0800f2d0
 8001f98:	0800f2e8 	.word	0x0800f2e8
 8001f9c:	0800f300 	.word	0x0800f300

08001fa0 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af02      	add	r7, sp, #8
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	6039      	str	r1, [r7, #0]
 8001faa:	71fb      	strb	r3, [r7, #7]
 8001fac:	4613      	mov	r3, r2
 8001fae:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe0 <bno055_readData+0x40>)
 8001fb2:	6818      	ldr	r0, [r3, #0]
 8001fb4:	1dfa      	adds	r2, r7, #7
 8001fb6:	2364      	movs	r3, #100	@ 0x64
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	2301      	movs	r3, #1
 8001fbc:	2150      	movs	r1, #80	@ 0x50
 8001fbe:	f002 fc77 	bl	80048b0 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8001fc2:	4b07      	ldr	r3, [pc, #28]	@ (8001fe0 <bno055_readData+0x40>)
 8001fc4:	6818      	ldr	r0, [r3, #0]
 8001fc6:	79bb      	ldrb	r3, [r7, #6]
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	2264      	movs	r2, #100	@ 0x64
 8001fcc:	9200      	str	r2, [sp, #0]
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	2150      	movs	r1, #80	@ 0x50
 8001fd2:	f002 fd6b 	bl	8004aac <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000318 	.word	0x20000318

08001fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fe8:	f001 f958 	bl	800329c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fec:	f000 f828 	bl	8002040 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ff0:	f000 fb8e 	bl	8002710 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ff4:	f000 fb64 	bl	80026c0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001ff8:	f000 f8dc 	bl	80021b4 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001ffc:	f000 f888 	bl	8002110 <MX_ADC1_Init>
  MX_TIM3_Init();
 8002000:	f000 fa62 	bl	80024c8 <MX_TIM3_Init>
  MX_SDIO_SD_Init();
 8002004:	f000 f960 	bl	80022c8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8002008:	f007 fd36 	bl	8009a78 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 800200c:	f000 fb04 	bl	8002618 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8002010:	f000 f8fe 	bl	8002210 <MX_I2C2_Init>
  MX_TIM1_Init();
 8002014:	f000 f97a 	bl	800230c <MX_TIM1_Init>
  MX_TIM2_Init();
 8002018:	f000 f9fc 	bl	8002414 <MX_TIM2_Init>
  MX_I2C3_Init();
 800201c:	f000 f926 	bl	800226c <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8002020:	f000 fb24 	bl	800266c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8002024:	f000 faaa 	bl	800257c <MX_TIM4_Init>

  /******>>> SENSOR IMU  INITIALIZATION BEGIN >>>******/
	#ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_SENSOR_IMU_APP_H

	 //*! BNO055 OR MPU9250 IMU SENSOR WİLL BE USED*//
	bno055_assignI2C(&hi2c2);
 8002028:	4804      	ldr	r0, [pc, #16]	@ (800203c <main+0x58>)
 800202a:	f7ff feb1 	bl	8001d90 <bno055_assignI2C>
	bno055_setup();
 800202e:	f7ff fb7b 	bl	8001728 <bno055_setup>
	bno055_setOperationModeNDOF();
 8002032:	f7ff fb66 	bl	8001702 <bno055_setOperationModeNDOF>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 SubSys_SatelliteMission_Continue();
 8002036:	f7ff f89d 	bl	8001174 <SubSys_SatelliteMission_Continue>
 800203a:	e7fc      	b.n	8002036 <main+0x52>
 800203c:	200003b8 	.word	0x200003b8

08002040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b094      	sub	sp, #80	@ 0x50
 8002044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002046:	f107 0320 	add.w	r3, r7, #32
 800204a:	2230      	movs	r2, #48	@ 0x30
 800204c:	2100      	movs	r1, #0
 800204e:	4618      	mov	r0, r3
 8002050:	f009 fe86 	bl	800bd60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002054:	f107 030c 	add.w	r3, r7, #12
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002064:	2300      	movs	r3, #0
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	4b27      	ldr	r3, [pc, #156]	@ (8002108 <SystemClock_Config+0xc8>)
 800206a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206c:	4a26      	ldr	r2, [pc, #152]	@ (8002108 <SystemClock_Config+0xc8>)
 800206e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002072:	6413      	str	r3, [r2, #64]	@ 0x40
 8002074:	4b24      	ldr	r3, [pc, #144]	@ (8002108 <SystemClock_Config+0xc8>)
 8002076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002080:	2300      	movs	r3, #0
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	4b21      	ldr	r3, [pc, #132]	@ (800210c <SystemClock_Config+0xcc>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a20      	ldr	r2, [pc, #128]	@ (800210c <SystemClock_Config+0xcc>)
 800208a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	4b1e      	ldr	r3, [pc, #120]	@ (800210c <SystemClock_Config+0xcc>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800209c:	2302      	movs	r3, #2
 800209e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020a0:	2301      	movs	r3, #1
 80020a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020a4:	2310      	movs	r3, #16
 80020a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020a8:	2302      	movs	r3, #2
 80020aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020ac:	2300      	movs	r3, #0
 80020ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80020b0:	2308      	movs	r3, #8
 80020b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80020b4:	2348      	movs	r3, #72	@ 0x48
 80020b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020b8:	2302      	movs	r3, #2
 80020ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80020bc:	2303      	movs	r3, #3
 80020be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020c0:	f107 0320 	add.w	r3, r7, #32
 80020c4:	4618      	mov	r0, r3
 80020c6:	f003 fac3 	bl	8005650 <HAL_RCC_OscConfig>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80020d0:	f000 fba0 	bl	8002814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020d4:	230f      	movs	r3, #15
 80020d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020d8:	2302      	movs	r3, #2
 80020da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020ea:	f107 030c 	add.w	r3, r7, #12
 80020ee:	2102      	movs	r1, #2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f003 fd25 	bl	8005b40 <HAL_RCC_ClockConfig>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80020fc:	f000 fb8a 	bl	8002814 <Error_Handler>
  }
}
 8002100:	bf00      	nop
 8002102:	3750      	adds	r7, #80	@ 0x50
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40023800 	.word	0x40023800
 800210c:	40007000 	.word	0x40007000

08002110 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002116:	463b      	mov	r3, r7
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002122:	4b21      	ldr	r3, [pc, #132]	@ (80021a8 <MX_ADC1_Init+0x98>)
 8002124:	4a21      	ldr	r2, [pc, #132]	@ (80021ac <MX_ADC1_Init+0x9c>)
 8002126:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002128:	4b1f      	ldr	r3, [pc, #124]	@ (80021a8 <MX_ADC1_Init+0x98>)
 800212a:	2200      	movs	r2, #0
 800212c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800212e:	4b1e      	ldr	r3, [pc, #120]	@ (80021a8 <MX_ADC1_Init+0x98>)
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002134:	4b1c      	ldr	r3, [pc, #112]	@ (80021a8 <MX_ADC1_Init+0x98>)
 8002136:	2200      	movs	r2, #0
 8002138:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800213a:	4b1b      	ldr	r3, [pc, #108]	@ (80021a8 <MX_ADC1_Init+0x98>)
 800213c:	2201      	movs	r2, #1
 800213e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002140:	4b19      	ldr	r3, [pc, #100]	@ (80021a8 <MX_ADC1_Init+0x98>)
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002148:	4b17      	ldr	r3, [pc, #92]	@ (80021a8 <MX_ADC1_Init+0x98>)
 800214a:	2200      	movs	r2, #0
 800214c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800214e:	4b16      	ldr	r3, [pc, #88]	@ (80021a8 <MX_ADC1_Init+0x98>)
 8002150:	4a17      	ldr	r2, [pc, #92]	@ (80021b0 <MX_ADC1_Init+0xa0>)
 8002152:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002154:	4b14      	ldr	r3, [pc, #80]	@ (80021a8 <MX_ADC1_Init+0x98>)
 8002156:	2200      	movs	r2, #0
 8002158:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800215a:	4b13      	ldr	r3, [pc, #76]	@ (80021a8 <MX_ADC1_Init+0x98>)
 800215c:	2201      	movs	r2, #1
 800215e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002160:	4b11      	ldr	r3, [pc, #68]	@ (80021a8 <MX_ADC1_Init+0x98>)
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002168:	4b0f      	ldr	r3, [pc, #60]	@ (80021a8 <MX_ADC1_Init+0x98>)
 800216a:	2201      	movs	r2, #1
 800216c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800216e:	480e      	ldr	r0, [pc, #56]	@ (80021a8 <MX_ADC1_Init+0x98>)
 8002170:	f001 f92a 	bl	80033c8 <HAL_ADC_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800217a:	f000 fb4b 	bl	8002814 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800217e:	2300      	movs	r3, #0
 8002180:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002182:	2301      	movs	r3, #1
 8002184:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800218a:	463b      	mov	r3, r7
 800218c:	4619      	mov	r1, r3
 800218e:	4806      	ldr	r0, [pc, #24]	@ (80021a8 <MX_ADC1_Init+0x98>)
 8002190:	f001 f95e 	bl	8003450 <HAL_ADC_ConfigChannel>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800219a:	f000 fb3b 	bl	8002814 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800219e:	bf00      	nop
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	2000031c 	.word	0x2000031c
 80021ac:	40012000 	.word	0x40012000
 80021b0:	0f000001 	.word	0x0f000001

080021b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021b8:	4b12      	ldr	r3, [pc, #72]	@ (8002204 <MX_I2C1_Init+0x50>)
 80021ba:	4a13      	ldr	r2, [pc, #76]	@ (8002208 <MX_I2C1_Init+0x54>)
 80021bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80021be:	4b11      	ldr	r3, [pc, #68]	@ (8002204 <MX_I2C1_Init+0x50>)
 80021c0:	4a12      	ldr	r2, [pc, #72]	@ (800220c <MX_I2C1_Init+0x58>)
 80021c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002204 <MX_I2C1_Init+0x50>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002204 <MX_I2C1_Init+0x50>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002204 <MX_I2C1_Init+0x50>)
 80021d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80021d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002204 <MX_I2C1_Init+0x50>)
 80021da:	2200      	movs	r2, #0
 80021dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021de:	4b09      	ldr	r3, [pc, #36]	@ (8002204 <MX_I2C1_Init+0x50>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021e4:	4b07      	ldr	r3, [pc, #28]	@ (8002204 <MX_I2C1_Init+0x50>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021ea:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <MX_I2C1_Init+0x50>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021f0:	4804      	ldr	r0, [pc, #16]	@ (8002204 <MX_I2C1_Init+0x50>)
 80021f2:	f002 fa19 	bl	8004628 <HAL_I2C_Init>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80021fc:	f000 fb0a 	bl	8002814 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20000364 	.word	0x20000364
 8002208:	40005400 	.word	0x40005400
 800220c:	000186a0 	.word	0x000186a0

08002210 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002214:	4b12      	ldr	r3, [pc, #72]	@ (8002260 <MX_I2C2_Init+0x50>)
 8002216:	4a13      	ldr	r2, [pc, #76]	@ (8002264 <MX_I2C2_Init+0x54>)
 8002218:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800221a:	4b11      	ldr	r3, [pc, #68]	@ (8002260 <MX_I2C2_Init+0x50>)
 800221c:	4a12      	ldr	r2, [pc, #72]	@ (8002268 <MX_I2C2_Init+0x58>)
 800221e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002220:	4b0f      	ldr	r3, [pc, #60]	@ (8002260 <MX_I2C2_Init+0x50>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002226:	4b0e      	ldr	r3, [pc, #56]	@ (8002260 <MX_I2C2_Init+0x50>)
 8002228:	2200      	movs	r2, #0
 800222a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800222c:	4b0c      	ldr	r3, [pc, #48]	@ (8002260 <MX_I2C2_Init+0x50>)
 800222e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002232:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002234:	4b0a      	ldr	r3, [pc, #40]	@ (8002260 <MX_I2C2_Init+0x50>)
 8002236:	2200      	movs	r2, #0
 8002238:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800223a:	4b09      	ldr	r3, [pc, #36]	@ (8002260 <MX_I2C2_Init+0x50>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002240:	4b07      	ldr	r3, [pc, #28]	@ (8002260 <MX_I2C2_Init+0x50>)
 8002242:	2200      	movs	r2, #0
 8002244:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002246:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <MX_I2C2_Init+0x50>)
 8002248:	2200      	movs	r2, #0
 800224a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800224c:	4804      	ldr	r0, [pc, #16]	@ (8002260 <MX_I2C2_Init+0x50>)
 800224e:	f002 f9eb 	bl	8004628 <HAL_I2C_Init>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002258:	f000 fadc 	bl	8002814 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800225c:	bf00      	nop
 800225e:	bd80      	pop	{r7, pc}
 8002260:	200003b8 	.word	0x200003b8
 8002264:	40005800 	.word	0x40005800
 8002268:	000186a0 	.word	0x000186a0

0800226c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002270:	4b12      	ldr	r3, [pc, #72]	@ (80022bc <MX_I2C3_Init+0x50>)
 8002272:	4a13      	ldr	r2, [pc, #76]	@ (80022c0 <MX_I2C3_Init+0x54>)
 8002274:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002276:	4b11      	ldr	r3, [pc, #68]	@ (80022bc <MX_I2C3_Init+0x50>)
 8002278:	4a12      	ldr	r2, [pc, #72]	@ (80022c4 <MX_I2C3_Init+0x58>)
 800227a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800227c:	4b0f      	ldr	r3, [pc, #60]	@ (80022bc <MX_I2C3_Init+0x50>)
 800227e:	2200      	movs	r2, #0
 8002280:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002282:	4b0e      	ldr	r3, [pc, #56]	@ (80022bc <MX_I2C3_Init+0x50>)
 8002284:	2200      	movs	r2, #0
 8002286:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002288:	4b0c      	ldr	r3, [pc, #48]	@ (80022bc <MX_I2C3_Init+0x50>)
 800228a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800228e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002290:	4b0a      	ldr	r3, [pc, #40]	@ (80022bc <MX_I2C3_Init+0x50>)
 8002292:	2200      	movs	r2, #0
 8002294:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002296:	4b09      	ldr	r3, [pc, #36]	@ (80022bc <MX_I2C3_Init+0x50>)
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800229c:	4b07      	ldr	r3, [pc, #28]	@ (80022bc <MX_I2C3_Init+0x50>)
 800229e:	2200      	movs	r2, #0
 80022a0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022a2:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <MX_I2C3_Init+0x50>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80022a8:	4804      	ldr	r0, [pc, #16]	@ (80022bc <MX_I2C3_Init+0x50>)
 80022aa:	f002 f9bd 	bl	8004628 <HAL_I2C_Init>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80022b4:	f000 faae 	bl	8002814 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	2000040c 	.word	0x2000040c
 80022c0:	40005c00 	.word	0x40005c00
 80022c4:	000186a0 	.word	0x000186a0

080022c8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80022cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002304 <MX_SDIO_SD_Init+0x3c>)
 80022ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002308 <MX_SDIO_SD_Init+0x40>)
 80022d0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80022d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002304 <MX_SDIO_SD_Init+0x3c>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80022d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002304 <MX_SDIO_SD_Init+0x3c>)
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80022de:	4b09      	ldr	r3, [pc, #36]	@ (8002304 <MX_SDIO_SD_Init+0x3c>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 80022e4:	4b07      	ldr	r3, [pc, #28]	@ (8002304 <MX_SDIO_SD_Init+0x3c>)
 80022e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80022ea:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80022ec:	4b05      	ldr	r3, [pc, #20]	@ (8002304 <MX_SDIO_SD_Init+0x3c>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80022f2:	4b04      	ldr	r3, [pc, #16]	@ (8002304 <MX_SDIO_SD_Init+0x3c>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	20000460 	.word	0x20000460
 8002308:	40012c00 	.word	0x40012c00

0800230c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b092      	sub	sp, #72	@ 0x48
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002312:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800231c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
 800232c:	615a      	str	r2, [r3, #20]
 800232e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002330:	1d3b      	adds	r3, r7, #4
 8002332:	2220      	movs	r2, #32
 8002334:	2100      	movs	r1, #0
 8002336:	4618      	mov	r0, r3
 8002338:	f009 fd12 	bl	800bd60 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800233c:	4b33      	ldr	r3, [pc, #204]	@ (800240c <MX_TIM1_Init+0x100>)
 800233e:	4a34      	ldr	r2, [pc, #208]	@ (8002410 <MX_TIM1_Init+0x104>)
 8002340:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1440-1;
 8002342:	4b32      	ldr	r3, [pc, #200]	@ (800240c <MX_TIM1_Init+0x100>)
 8002344:	f240 529f 	movw	r2, #1439	@ 0x59f
 8002348:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800234a:	4b30      	ldr	r3, [pc, #192]	@ (800240c <MX_TIM1_Init+0x100>)
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002350:	4b2e      	ldr	r3, [pc, #184]	@ (800240c <MX_TIM1_Init+0x100>)
 8002352:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002356:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002358:	4b2c      	ldr	r3, [pc, #176]	@ (800240c <MX_TIM1_Init+0x100>)
 800235a:	2200      	movs	r2, #0
 800235c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800235e:	4b2b      	ldr	r3, [pc, #172]	@ (800240c <MX_TIM1_Init+0x100>)
 8002360:	2200      	movs	r2, #0
 8002362:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002364:	4b29      	ldr	r3, [pc, #164]	@ (800240c <MX_TIM1_Init+0x100>)
 8002366:	2200      	movs	r2, #0
 8002368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800236a:	4828      	ldr	r0, [pc, #160]	@ (800240c <MX_TIM1_Init+0x100>)
 800236c:	f005 f951 	bl	8007612 <HAL_TIM_PWM_Init>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002376:	f000 fa4d 	bl	8002814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800237a:	2300      	movs	r3, #0
 800237c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800237e:	2300      	movs	r3, #0
 8002380:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002382:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002386:	4619      	mov	r1, r3
 8002388:	4820      	ldr	r0, [pc, #128]	@ (800240c <MX_TIM1_Init+0x100>)
 800238a:	f005 fdcd 	bl	8007f28 <HAL_TIMEx_MasterConfigSynchronization>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8002394:	f000 fa3e 	bl	8002814 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002398:	2360      	movs	r3, #96	@ 0x60
 800239a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023a0:	2300      	movs	r3, #0
 80023a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023a4:	2300      	movs	r3, #0
 80023a6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023ac:	2300      	movs	r3, #0
 80023ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023b0:	2300      	movs	r3, #0
 80023b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023b8:	2204      	movs	r2, #4
 80023ba:	4619      	mov	r1, r3
 80023bc:	4813      	ldr	r0, [pc, #76]	@ (800240c <MX_TIM1_Init+0x100>)
 80023be:	f005 f977 	bl	80076b0 <HAL_TIM_PWM_ConfigChannel>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80023c8:	f000 fa24 	bl	8002814 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023cc:	2300      	movs	r3, #0
 80023ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023d4:	2300      	movs	r3, #0
 80023d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023e6:	2300      	movs	r3, #0
 80023e8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80023ea:	1d3b      	adds	r3, r7, #4
 80023ec:	4619      	mov	r1, r3
 80023ee:	4807      	ldr	r0, [pc, #28]	@ (800240c <MX_TIM1_Init+0x100>)
 80023f0:	f005 fe08 	bl	8008004 <HAL_TIMEx_ConfigBreakDeadTime>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80023fa:	f000 fa0b 	bl	8002814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80023fe:	4803      	ldr	r0, [pc, #12]	@ (800240c <MX_TIM1_Init+0x100>)
 8002400:	f000 fcda 	bl	8002db8 <HAL_TIM_MspPostInit>

}
 8002404:	bf00      	nop
 8002406:	3748      	adds	r7, #72	@ 0x48
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	200005a4 	.word	0x200005a4
 8002410:	40010000 	.word	0x40010000

08002414 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08a      	sub	sp, #40	@ 0x28
 8002418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800241a:	f107 0320 	add.w	r3, r7, #32
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002424:	1d3b      	adds	r3, r7, #4
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	605a      	str	r2, [r3, #4]
 800242c:	609a      	str	r2, [r3, #8]
 800242e:	60da      	str	r2, [r3, #12]
 8002430:	611a      	str	r2, [r3, #16]
 8002432:	615a      	str	r2, [r3, #20]
 8002434:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002436:	4b23      	ldr	r3, [pc, #140]	@ (80024c4 <MX_TIM2_Init+0xb0>)
 8002438:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800243c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440-1;
 800243e:	4b21      	ldr	r3, [pc, #132]	@ (80024c4 <MX_TIM2_Init+0xb0>)
 8002440:	f240 529f 	movw	r2, #1439	@ 0x59f
 8002444:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002446:	4b1f      	ldr	r3, [pc, #124]	@ (80024c4 <MX_TIM2_Init+0xb0>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800244c:	4b1d      	ldr	r3, [pc, #116]	@ (80024c4 <MX_TIM2_Init+0xb0>)
 800244e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002452:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002454:	4b1b      	ldr	r3, [pc, #108]	@ (80024c4 <MX_TIM2_Init+0xb0>)
 8002456:	2200      	movs	r2, #0
 8002458:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800245a:	4b1a      	ldr	r3, [pc, #104]	@ (80024c4 <MX_TIM2_Init+0xb0>)
 800245c:	2200      	movs	r2, #0
 800245e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002460:	4818      	ldr	r0, [pc, #96]	@ (80024c4 <MX_TIM2_Init+0xb0>)
 8002462:	f005 f8d6 	bl	8007612 <HAL_TIM_PWM_Init>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800246c:	f000 f9d2 	bl	8002814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002470:	2300      	movs	r3, #0
 8002472:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002474:	2300      	movs	r3, #0
 8002476:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002478:	f107 0320 	add.w	r3, r7, #32
 800247c:	4619      	mov	r1, r3
 800247e:	4811      	ldr	r0, [pc, #68]	@ (80024c4 <MX_TIM2_Init+0xb0>)
 8002480:	f005 fd52 	bl	8007f28 <HAL_TIMEx_MasterConfigSynchronization>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800248a:	f000 f9c3 	bl	8002814 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800248e:	2360      	movs	r3, #96	@ 0x60
 8002490:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800249e:	1d3b      	adds	r3, r7, #4
 80024a0:	2200      	movs	r2, #0
 80024a2:	4619      	mov	r1, r3
 80024a4:	4807      	ldr	r0, [pc, #28]	@ (80024c4 <MX_TIM2_Init+0xb0>)
 80024a6:	f005 f903 	bl	80076b0 <HAL_TIM_PWM_ConfigChannel>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80024b0:	f000 f9b0 	bl	8002814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80024b4:	4803      	ldr	r0, [pc, #12]	@ (80024c4 <MX_TIM2_Init+0xb0>)
 80024b6:	f000 fc7f 	bl	8002db8 <HAL_TIM_MspPostInit>

}
 80024ba:	bf00      	nop
 80024bc:	3728      	adds	r7, #40	@ 0x28
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	200005ec 	.word	0x200005ec

080024c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08a      	sub	sp, #40	@ 0x28
 80024cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ce:	f107 0320 	add.w	r3, r7, #32
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024d8:	1d3b      	adds	r3, r7, #4
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	609a      	str	r2, [r3, #8]
 80024e2:	60da      	str	r2, [r3, #12]
 80024e4:	611a      	str	r2, [r3, #16]
 80024e6:	615a      	str	r2, [r3, #20]
 80024e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024ea:	4b22      	ldr	r3, [pc, #136]	@ (8002574 <MX_TIM3_Init+0xac>)
 80024ec:	4a22      	ldr	r2, [pc, #136]	@ (8002578 <MX_TIM3_Init+0xb0>)
 80024ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 263-1;
 80024f0:	4b20      	ldr	r3, [pc, #128]	@ (8002574 <MX_TIM3_Init+0xac>)
 80024f2:	f44f 7283 	mov.w	r2, #262	@ 0x106
 80024f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002574 <MX_TIM3_Init+0xac>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80024fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002574 <MX_TIM3_Init+0xac>)
 8002500:	2263      	movs	r2, #99	@ 0x63
 8002502:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002504:	4b1b      	ldr	r3, [pc, #108]	@ (8002574 <MX_TIM3_Init+0xac>)
 8002506:	2200      	movs	r2, #0
 8002508:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800250a:	4b1a      	ldr	r3, [pc, #104]	@ (8002574 <MX_TIM3_Init+0xac>)
 800250c:	2200      	movs	r2, #0
 800250e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002510:	4818      	ldr	r0, [pc, #96]	@ (8002574 <MX_TIM3_Init+0xac>)
 8002512:	f005 f87e 	bl	8007612 <HAL_TIM_PWM_Init>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800251c:	f000 f97a 	bl	8002814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002520:	2300      	movs	r3, #0
 8002522:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002524:	2300      	movs	r3, #0
 8002526:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002528:	f107 0320 	add.w	r3, r7, #32
 800252c:	4619      	mov	r1, r3
 800252e:	4811      	ldr	r0, [pc, #68]	@ (8002574 <MX_TIM3_Init+0xac>)
 8002530:	f005 fcfa 	bl	8007f28 <HAL_TIMEx_MasterConfigSynchronization>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800253a:	f000 f96b 	bl	8002814 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800253e:	2360      	movs	r3, #96	@ 0x60
 8002540:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	2200      	movs	r2, #0
 8002552:	4619      	mov	r1, r3
 8002554:	4807      	ldr	r0, [pc, #28]	@ (8002574 <MX_TIM3_Init+0xac>)
 8002556:	f005 f8ab 	bl	80076b0 <HAL_TIM_PWM_ConfigChannel>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002560:	f000 f958 	bl	8002814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002564:	4803      	ldr	r0, [pc, #12]	@ (8002574 <MX_TIM3_Init+0xac>)
 8002566:	f000 fc27 	bl	8002db8 <HAL_TIM_MspPostInit>

}
 800256a:	bf00      	nop
 800256c:	3728      	adds	r7, #40	@ 0x28
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000634 	.word	0x20000634
 8002578:	40000400 	.word	0x40000400

0800257c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002582:	f107 0308 	add.w	r3, r7, #8
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	605a      	str	r2, [r3, #4]
 800258c:	609a      	str	r2, [r3, #8]
 800258e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002590:	463b      	mov	r3, r7
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002598:	4b1d      	ldr	r3, [pc, #116]	@ (8002610 <MX_TIM4_Init+0x94>)
 800259a:	4a1e      	ldr	r2, [pc, #120]	@ (8002614 <MX_TIM4_Init+0x98>)
 800259c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800259e:	4b1c      	ldr	r3, [pc, #112]	@ (8002610 <MX_TIM4_Init+0x94>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002610 <MX_TIM4_Init+0x94>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80025aa:	4b19      	ldr	r3, [pc, #100]	@ (8002610 <MX_TIM4_Init+0x94>)
 80025ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025b0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025b2:	4b17      	ldr	r3, [pc, #92]	@ (8002610 <MX_TIM4_Init+0x94>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025b8:	4b15      	ldr	r3, [pc, #84]	@ (8002610 <MX_TIM4_Init+0x94>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80025be:	4814      	ldr	r0, [pc, #80]	@ (8002610 <MX_TIM4_Init+0x94>)
 80025c0:	f004 ffd8 	bl	8007574 <HAL_TIM_Base_Init>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80025ca:	f000 f923 	bl	8002814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80025d4:	f107 0308 	add.w	r3, r7, #8
 80025d8:	4619      	mov	r1, r3
 80025da:	480d      	ldr	r0, [pc, #52]	@ (8002610 <MX_TIM4_Init+0x94>)
 80025dc:	f005 f92a 	bl	8007834 <HAL_TIM_ConfigClockSource>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80025e6:	f000 f915 	bl	8002814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ea:	2300      	movs	r3, #0
 80025ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025f2:	463b      	mov	r3, r7
 80025f4:	4619      	mov	r1, r3
 80025f6:	4806      	ldr	r0, [pc, #24]	@ (8002610 <MX_TIM4_Init+0x94>)
 80025f8:	f005 fc96 	bl	8007f28 <HAL_TIMEx_MasterConfigSynchronization>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002602:	f000 f907 	bl	8002814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002606:	bf00      	nop
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	2000067c 	.word	0x2000067c
 8002614:	40000800 	.word	0x40000800

08002618 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800261c:	4b11      	ldr	r3, [pc, #68]	@ (8002664 <MX_USART1_UART_Init+0x4c>)
 800261e:	4a12      	ldr	r2, [pc, #72]	@ (8002668 <MX_USART1_UART_Init+0x50>)
 8002620:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002622:	4b10      	ldr	r3, [pc, #64]	@ (8002664 <MX_USART1_UART_Init+0x4c>)
 8002624:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002628:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800262a:	4b0e      	ldr	r3, [pc, #56]	@ (8002664 <MX_USART1_UART_Init+0x4c>)
 800262c:	2200      	movs	r2, #0
 800262e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002630:	4b0c      	ldr	r3, [pc, #48]	@ (8002664 <MX_USART1_UART_Init+0x4c>)
 8002632:	2200      	movs	r2, #0
 8002634:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002636:	4b0b      	ldr	r3, [pc, #44]	@ (8002664 <MX_USART1_UART_Init+0x4c>)
 8002638:	2200      	movs	r2, #0
 800263a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800263c:	4b09      	ldr	r3, [pc, #36]	@ (8002664 <MX_USART1_UART_Init+0x4c>)
 800263e:	220c      	movs	r2, #12
 8002640:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002642:	4b08      	ldr	r3, [pc, #32]	@ (8002664 <MX_USART1_UART_Init+0x4c>)
 8002644:	2200      	movs	r2, #0
 8002646:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002648:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <MX_USART1_UART_Init+0x4c>)
 800264a:	2200      	movs	r2, #0
 800264c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800264e:	4805      	ldr	r0, [pc, #20]	@ (8002664 <MX_USART1_UART_Init+0x4c>)
 8002650:	f005 fd2a 	bl	80080a8 <HAL_UART_Init>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800265a:	f000 f8db 	bl	8002814 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	200006c4 	.word	0x200006c4
 8002668:	40011000 	.word	0x40011000

0800266c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002670:	4b11      	ldr	r3, [pc, #68]	@ (80026b8 <MX_USART2_UART_Init+0x4c>)
 8002672:	4a12      	ldr	r2, [pc, #72]	@ (80026bc <MX_USART2_UART_Init+0x50>)
 8002674:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002676:	4b10      	ldr	r3, [pc, #64]	@ (80026b8 <MX_USART2_UART_Init+0x4c>)
 8002678:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800267c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800267e:	4b0e      	ldr	r3, [pc, #56]	@ (80026b8 <MX_USART2_UART_Init+0x4c>)
 8002680:	2200      	movs	r2, #0
 8002682:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002684:	4b0c      	ldr	r3, [pc, #48]	@ (80026b8 <MX_USART2_UART_Init+0x4c>)
 8002686:	2200      	movs	r2, #0
 8002688:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800268a:	4b0b      	ldr	r3, [pc, #44]	@ (80026b8 <MX_USART2_UART_Init+0x4c>)
 800268c:	2200      	movs	r2, #0
 800268e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002690:	4b09      	ldr	r3, [pc, #36]	@ (80026b8 <MX_USART2_UART_Init+0x4c>)
 8002692:	220c      	movs	r2, #12
 8002694:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002696:	4b08      	ldr	r3, [pc, #32]	@ (80026b8 <MX_USART2_UART_Init+0x4c>)
 8002698:	2200      	movs	r2, #0
 800269a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800269c:	4b06      	ldr	r3, [pc, #24]	@ (80026b8 <MX_USART2_UART_Init+0x4c>)
 800269e:	2200      	movs	r2, #0
 80026a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026a2:	4805      	ldr	r0, [pc, #20]	@ (80026b8 <MX_USART2_UART_Init+0x4c>)
 80026a4:	f005 fd00 	bl	80080a8 <HAL_UART_Init>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026ae:	f000 f8b1 	bl	8002814 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	2000070c 	.word	0x2000070c
 80026bc:	40004400 	.word	0x40004400

080026c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	607b      	str	r3, [r7, #4]
 80026ca:	4b10      	ldr	r3, [pc, #64]	@ (800270c <MX_DMA_Init+0x4c>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ce:	4a0f      	ldr	r2, [pc, #60]	@ (800270c <MX_DMA_Init+0x4c>)
 80026d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026d6:	4b0d      	ldr	r3, [pc, #52]	@ (800270c <MX_DMA_Init+0x4c>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026de:	607b      	str	r3, [r7, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 3);
 80026e2:	2203      	movs	r2, #3
 80026e4:	2103      	movs	r1, #3
 80026e6:	203b      	movs	r0, #59	@ 0x3b
 80026e8:	f001 f9bb 	bl	8003a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80026ec:	203b      	movs	r0, #59	@ 0x3b
 80026ee:	f001 f9d4 	bl	8003a9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 3, 3);
 80026f2:	2203      	movs	r2, #3
 80026f4:	2103      	movs	r1, #3
 80026f6:	2045      	movs	r0, #69	@ 0x45
 80026f8:	f001 f9b3 	bl	8003a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80026fc:	2045      	movs	r0, #69	@ 0x45
 80026fe:	f001 f9cc 	bl	8003a9a <HAL_NVIC_EnableIRQ>

}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800

08002710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08a      	sub	sp, #40	@ 0x28
 8002714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002716:	f107 0314 	add.w	r3, r7, #20
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	605a      	str	r2, [r3, #4]
 8002720:	609a      	str	r2, [r3, #8]
 8002722:	60da      	str	r2, [r3, #12]
 8002724:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	4b37      	ldr	r3, [pc, #220]	@ (8002808 <MX_GPIO_Init+0xf8>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	4a36      	ldr	r2, [pc, #216]	@ (8002808 <MX_GPIO_Init+0xf8>)
 8002730:	f043 0304 	orr.w	r3, r3, #4
 8002734:	6313      	str	r3, [r2, #48]	@ 0x30
 8002736:	4b34      	ldr	r3, [pc, #208]	@ (8002808 <MX_GPIO_Init+0xf8>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	4b30      	ldr	r3, [pc, #192]	@ (8002808 <MX_GPIO_Init+0xf8>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274a:	4a2f      	ldr	r2, [pc, #188]	@ (8002808 <MX_GPIO_Init+0xf8>)
 800274c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002750:	6313      	str	r3, [r2, #48]	@ 0x30
 8002752:	4b2d      	ldr	r3, [pc, #180]	@ (8002808 <MX_GPIO_Init+0xf8>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	4b29      	ldr	r3, [pc, #164]	@ (8002808 <MX_GPIO_Init+0xf8>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002766:	4a28      	ldr	r2, [pc, #160]	@ (8002808 <MX_GPIO_Init+0xf8>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6313      	str	r3, [r2, #48]	@ 0x30
 800276e:	4b26      	ldr	r3, [pc, #152]	@ (8002808 <MX_GPIO_Init+0xf8>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	60bb      	str	r3, [r7, #8]
 8002778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	607b      	str	r3, [r7, #4]
 800277e:	4b22      	ldr	r3, [pc, #136]	@ (8002808 <MX_GPIO_Init+0xf8>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	4a21      	ldr	r2, [pc, #132]	@ (8002808 <MX_GPIO_Init+0xf8>)
 8002784:	f043 0302 	orr.w	r3, r3, #2
 8002788:	6313      	str	r3, [r2, #48]	@ 0x30
 800278a:	4b1f      	ldr	r3, [pc, #124]	@ (8002808 <MX_GPIO_Init+0xf8>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	607b      	str	r3, [r7, #4]
 8002794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002796:	2200      	movs	r2, #0
 8002798:	2133      	movs	r1, #51	@ 0x33
 800279a:	481c      	ldr	r0, [pc, #112]	@ (800280c <MX_GPIO_Init+0xfc>)
 800279c:	f001 ff2a 	bl	80045f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80027a0:	2200      	movs	r2, #0
 80027a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80027a6:	481a      	ldr	r0, [pc, #104]	@ (8002810 <MX_GPIO_Init+0x100>)
 80027a8:	f001 ff24 	bl	80045f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80027ac:	2333      	movs	r3, #51	@ 0x33
 80027ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b0:	2301      	movs	r3, #1
 80027b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b8:	2300      	movs	r3, #0
 80027ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027bc:	f107 0314 	add.w	r3, r7, #20
 80027c0:	4619      	mov	r1, r3
 80027c2:	4812      	ldr	r0, [pc, #72]	@ (800280c <MX_GPIO_Init+0xfc>)
 80027c4:	f001 fd92 	bl	80042ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027c8:	2304      	movs	r3, #4
 80027ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d4:	f107 0314 	add.w	r3, r7, #20
 80027d8:	4619      	mov	r1, r3
 80027da:	480c      	ldr	r0, [pc, #48]	@ (800280c <MX_GPIO_Init+0xfc>)
 80027dc:	f001 fd86 	bl	80042ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80027e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027e6:	2301      	movs	r3, #1
 80027e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ee:	2300      	movs	r3, #0
 80027f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f2:	f107 0314 	add.w	r3, r7, #20
 80027f6:	4619      	mov	r1, r3
 80027f8:	4805      	ldr	r0, [pc, #20]	@ (8002810 <MX_GPIO_Init+0x100>)
 80027fa:	f001 fd77 	bl	80042ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027fe:	bf00      	nop
 8002800:	3728      	adds	r7, #40	@ 0x28
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40023800 	.word	0x40023800
 800280c:	40020800 	.word	0x40020800
 8002810:	40020400 	.word	0x40020400

08002814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002818:	b672      	cpsid	i
}
 800281a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800281c:	bf00      	nop
 800281e:	e7fd      	b.n	800281c <Error_Handler+0x8>

08002820 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	607b      	str	r3, [r7, #4]
 800282a:	4b10      	ldr	r3, [pc, #64]	@ (800286c <HAL_MspInit+0x4c>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282e:	4a0f      	ldr	r2, [pc, #60]	@ (800286c <HAL_MspInit+0x4c>)
 8002830:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002834:	6453      	str	r3, [r2, #68]	@ 0x44
 8002836:	4b0d      	ldr	r3, [pc, #52]	@ (800286c <HAL_MspInit+0x4c>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800283e:	607b      	str	r3, [r7, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	603b      	str	r3, [r7, #0]
 8002846:	4b09      	ldr	r3, [pc, #36]	@ (800286c <HAL_MspInit+0x4c>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284a:	4a08      	ldr	r2, [pc, #32]	@ (800286c <HAL_MspInit+0x4c>)
 800284c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002850:	6413      	str	r3, [r2, #64]	@ 0x40
 8002852:	4b06      	ldr	r3, [pc, #24]	@ (800286c <HAL_MspInit+0x4c>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800285a:	603b      	str	r3, [r7, #0]
 800285c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800285e:	2005      	movs	r0, #5
 8002860:	f001 f8f4 	bl	8003a4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002864:	bf00      	nop
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40023800 	.word	0x40023800

08002870 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08a      	sub	sp, #40	@ 0x28
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002878:	f107 0314 	add.w	r3, r7, #20
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a17      	ldr	r2, [pc, #92]	@ (80028ec <HAL_ADC_MspInit+0x7c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d127      	bne.n	80028e2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	4b16      	ldr	r3, [pc, #88]	@ (80028f0 <HAL_ADC_MspInit+0x80>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289a:	4a15      	ldr	r2, [pc, #84]	@ (80028f0 <HAL_ADC_MspInit+0x80>)
 800289c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80028a2:	4b13      	ldr	r3, [pc, #76]	@ (80028f0 <HAL_ADC_MspInit+0x80>)
 80028a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	4b0f      	ldr	r3, [pc, #60]	@ (80028f0 <HAL_ADC_MspInit+0x80>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	4a0e      	ldr	r2, [pc, #56]	@ (80028f0 <HAL_ADC_MspInit+0x80>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028be:	4b0c      	ldr	r3, [pc, #48]	@ (80028f0 <HAL_ADC_MspInit+0x80>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028ca:	2301      	movs	r3, #1
 80028cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028ce:	2303      	movs	r3, #3
 80028d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d6:	f107 0314 	add.w	r3, r7, #20
 80028da:	4619      	mov	r1, r3
 80028dc:	4805      	ldr	r0, [pc, #20]	@ (80028f4 <HAL_ADC_MspInit+0x84>)
 80028de:	f001 fd05 	bl	80042ec <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80028e2:	bf00      	nop
 80028e4:	3728      	adds	r7, #40	@ 0x28
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40012000 	.word	0x40012000
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40020000 	.word	0x40020000

080028f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08e      	sub	sp, #56	@ 0x38
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a63      	ldr	r2, [pc, #396]	@ (8002aa4 <HAL_I2C_MspInit+0x1ac>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d12c      	bne.n	8002974 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	623b      	str	r3, [r7, #32]
 800291e:	4b62      	ldr	r3, [pc, #392]	@ (8002aa8 <HAL_I2C_MspInit+0x1b0>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002922:	4a61      	ldr	r2, [pc, #388]	@ (8002aa8 <HAL_I2C_MspInit+0x1b0>)
 8002924:	f043 0302 	orr.w	r3, r3, #2
 8002928:	6313      	str	r3, [r2, #48]	@ 0x30
 800292a:	4b5f      	ldr	r3, [pc, #380]	@ (8002aa8 <HAL_I2C_MspInit+0x1b0>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	623b      	str	r3, [r7, #32]
 8002934:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002936:	23c0      	movs	r3, #192	@ 0xc0
 8002938:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800293a:	2312      	movs	r3, #18
 800293c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293e:	2300      	movs	r3, #0
 8002940:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002942:	2303      	movs	r3, #3
 8002944:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002946:	2304      	movs	r3, #4
 8002948:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800294e:	4619      	mov	r1, r3
 8002950:	4856      	ldr	r0, [pc, #344]	@ (8002aac <HAL_I2C_MspInit+0x1b4>)
 8002952:	f001 fccb 	bl	80042ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	61fb      	str	r3, [r7, #28]
 800295a:	4b53      	ldr	r3, [pc, #332]	@ (8002aa8 <HAL_I2C_MspInit+0x1b0>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	4a52      	ldr	r2, [pc, #328]	@ (8002aa8 <HAL_I2C_MspInit+0x1b0>)
 8002960:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002964:	6413      	str	r3, [r2, #64]	@ 0x40
 8002966:	4b50      	ldr	r3, [pc, #320]	@ (8002aa8 <HAL_I2C_MspInit+0x1b0>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800296e:	61fb      	str	r3, [r7, #28]
 8002970:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002972:	e092      	b.n	8002a9a <HAL_I2C_MspInit+0x1a2>
  else if(hi2c->Instance==I2C2)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a4d      	ldr	r2, [pc, #308]	@ (8002ab0 <HAL_I2C_MspInit+0x1b8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d13d      	bne.n	80029fa <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	61bb      	str	r3, [r7, #24]
 8002982:	4b49      	ldr	r3, [pc, #292]	@ (8002aa8 <HAL_I2C_MspInit+0x1b0>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002986:	4a48      	ldr	r2, [pc, #288]	@ (8002aa8 <HAL_I2C_MspInit+0x1b0>)
 8002988:	f043 0302 	orr.w	r3, r3, #2
 800298c:	6313      	str	r3, [r2, #48]	@ 0x30
 800298e:	4b46      	ldr	r3, [pc, #280]	@ (8002aa8 <HAL_I2C_MspInit+0x1b0>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	61bb      	str	r3, [r7, #24]
 8002998:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800299a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800299e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029a0:	2312      	movs	r3, #18
 80029a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a8:	2303      	movs	r3, #3
 80029aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80029ac:	2304      	movs	r3, #4
 80029ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029b4:	4619      	mov	r1, r3
 80029b6:	483d      	ldr	r0, [pc, #244]	@ (8002aac <HAL_I2C_MspInit+0x1b4>)
 80029b8:	f001 fc98 	bl	80042ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029bc:	2308      	movs	r3, #8
 80029be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029c0:	2312      	movs	r3, #18
 80029c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c8:	2303      	movs	r3, #3
 80029ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80029cc:	2309      	movs	r3, #9
 80029ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029d4:	4619      	mov	r1, r3
 80029d6:	4835      	ldr	r0, [pc, #212]	@ (8002aac <HAL_I2C_MspInit+0x1b4>)
 80029d8:	f001 fc88 	bl	80042ec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	4b31      	ldr	r3, [pc, #196]	@ (8002aa8 <HAL_I2C_MspInit+0x1b0>)
 80029e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e4:	4a30      	ldr	r2, [pc, #192]	@ (8002aa8 <HAL_I2C_MspInit+0x1b0>)
 80029e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ec:	4b2e      	ldr	r3, [pc, #184]	@ (8002aa8 <HAL_I2C_MspInit+0x1b0>)
 80029ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	697b      	ldr	r3, [r7, #20]
}
 80029f8:	e04f      	b.n	8002a9a <HAL_I2C_MspInit+0x1a2>
  else if(hi2c->Instance==I2C3)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a2d      	ldr	r2, [pc, #180]	@ (8002ab4 <HAL_I2C_MspInit+0x1bc>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d14a      	bne.n	8002a9a <HAL_I2C_MspInit+0x1a2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a04:	2300      	movs	r3, #0
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	4b27      	ldr	r3, [pc, #156]	@ (8002aa8 <HAL_I2C_MspInit+0x1b0>)
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0c:	4a26      	ldr	r2, [pc, #152]	@ (8002aa8 <HAL_I2C_MspInit+0x1b0>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a14:	4b24      	ldr	r3, [pc, #144]	@ (8002aa8 <HAL_I2C_MspInit+0x1b0>)
 8002a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a20:	2300      	movs	r3, #0
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	4b20      	ldr	r3, [pc, #128]	@ (8002aa8 <HAL_I2C_MspInit+0x1b0>)
 8002a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a28:	4a1f      	ldr	r2, [pc, #124]	@ (8002aa8 <HAL_I2C_MspInit+0x1b0>)
 8002a2a:	f043 0302 	orr.w	r3, r3, #2
 8002a2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a30:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa8 <HAL_I2C_MspInit+0x1b0>)
 8002a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a42:	2312      	movs	r3, #18
 8002a44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a4e:	2304      	movs	r3, #4
 8002a50:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a56:	4619      	mov	r1, r3
 8002a58:	4817      	ldr	r0, [pc, #92]	@ (8002ab8 <HAL_I2C_MspInit+0x1c0>)
 8002a5a:	f001 fc47 	bl	80042ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a5e:	2310      	movs	r3, #16
 8002a60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a62:	2312      	movs	r3, #18
 8002a64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8002a6e:	2309      	movs	r3, #9
 8002a70:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a76:	4619      	mov	r1, r3
 8002a78:	480c      	ldr	r0, [pc, #48]	@ (8002aac <HAL_I2C_MspInit+0x1b4>)
 8002a7a:	f001 fc37 	bl	80042ec <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	4b09      	ldr	r3, [pc, #36]	@ (8002aa8 <HAL_I2C_MspInit+0x1b0>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a86:	4a08      	ldr	r2, [pc, #32]	@ (8002aa8 <HAL_I2C_MspInit+0x1b0>)
 8002a88:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a8e:	4b06      	ldr	r3, [pc, #24]	@ (8002aa8 <HAL_I2C_MspInit+0x1b0>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	68bb      	ldr	r3, [r7, #8]
}
 8002a9a:	bf00      	nop
 8002a9c:	3738      	adds	r7, #56	@ 0x38
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40005400 	.word	0x40005400
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40020400 	.word	0x40020400
 8002ab0:	40005800 	.word	0x40005800
 8002ab4:	40005c00 	.word	0x40005c00
 8002ab8:	40020000 	.word	0x40020000

08002abc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08c      	sub	sp, #48	@ 0x30
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac4:	f107 031c 	add.w	r3, r7, #28
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a77      	ldr	r2, [pc, #476]	@ (8002cb8 <HAL_SD_MspInit+0x1fc>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	f040 80e8 	bne.w	8002cb0 <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	61bb      	str	r3, [r7, #24]
 8002ae4:	4b75      	ldr	r3, [pc, #468]	@ (8002cbc <HAL_SD_MspInit+0x200>)
 8002ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae8:	4a74      	ldr	r2, [pc, #464]	@ (8002cbc <HAL_SD_MspInit+0x200>)
 8002aea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002aee:	6453      	str	r3, [r2, #68]	@ 0x44
 8002af0:	4b72      	ldr	r3, [pc, #456]	@ (8002cbc <HAL_SD_MspInit+0x200>)
 8002af2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	4b6e      	ldr	r3, [pc, #440]	@ (8002cbc <HAL_SD_MspInit+0x200>)
 8002b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b04:	4a6d      	ldr	r2, [pc, #436]	@ (8002cbc <HAL_SD_MspInit+0x200>)
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b0c:	4b6b      	ldr	r3, [pc, #428]	@ (8002cbc <HAL_SD_MspInit+0x200>)
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b18:	2300      	movs	r3, #0
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	4b67      	ldr	r3, [pc, #412]	@ (8002cbc <HAL_SD_MspInit+0x200>)
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b20:	4a66      	ldr	r2, [pc, #408]	@ (8002cbc <HAL_SD_MspInit+0x200>)
 8002b22:	f043 0302 	orr.w	r3, r3, #2
 8002b26:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b28:	4b64      	ldr	r3, [pc, #400]	@ (8002cbc <HAL_SD_MspInit+0x200>)
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	613b      	str	r3, [r7, #16]
 8002b32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	4b60      	ldr	r3, [pc, #384]	@ (8002cbc <HAL_SD_MspInit+0x200>)
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3c:	4a5f      	ldr	r2, [pc, #380]	@ (8002cbc <HAL_SD_MspInit+0x200>)
 8002b3e:	f043 0304 	orr.w	r3, r3, #4
 8002b42:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b44:	4b5d      	ldr	r3, [pc, #372]	@ (8002cbc <HAL_SD_MspInit+0x200>)
 8002b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b50:	2340      	movs	r3, #64	@ 0x40
 8002b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002b60:	230c      	movs	r3, #12
 8002b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b64:	f107 031c 	add.w	r3, r7, #28
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4855      	ldr	r0, [pc, #340]	@ (8002cc0 <HAL_SD_MspInit+0x204>)
 8002b6c:	f001 fbbe 	bl	80042ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b76:	2302      	movs	r3, #2
 8002b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002b82:	230c      	movs	r3, #12
 8002b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b86:	f107 031c 	add.w	r3, r7, #28
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	484d      	ldr	r0, [pc, #308]	@ (8002cc4 <HAL_SD_MspInit+0x208>)
 8002b8e:	f001 fbad 	bl	80042ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002b92:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002ba4:	230c      	movs	r3, #12
 8002ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ba8:	f107 031c 	add.w	r3, r7, #28
 8002bac:	4619      	mov	r1, r3
 8002bae:	4846      	ldr	r0, [pc, #280]	@ (8002cc8 <HAL_SD_MspInit+0x20c>)
 8002bb0:	f001 fb9c 	bl	80042ec <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8002bb4:	4b45      	ldr	r3, [pc, #276]	@ (8002ccc <HAL_SD_MspInit+0x210>)
 8002bb6:	4a46      	ldr	r2, [pc, #280]	@ (8002cd0 <HAL_SD_MspInit+0x214>)
 8002bb8:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002bba:	4b44      	ldr	r3, [pc, #272]	@ (8002ccc <HAL_SD_MspInit+0x210>)
 8002bbc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002bc0:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bc2:	4b42      	ldr	r3, [pc, #264]	@ (8002ccc <HAL_SD_MspInit+0x210>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bc8:	4b40      	ldr	r3, [pc, #256]	@ (8002ccc <HAL_SD_MspInit+0x210>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bce:	4b3f      	ldr	r3, [pc, #252]	@ (8002ccc <HAL_SD_MspInit+0x210>)
 8002bd0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002bd4:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8002ccc <HAL_SD_MspInit+0x210>)
 8002bd8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002bdc:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002bde:	4b3b      	ldr	r3, [pc, #236]	@ (8002ccc <HAL_SD_MspInit+0x210>)
 8002be0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002be4:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002be6:	4b39      	ldr	r3, [pc, #228]	@ (8002ccc <HAL_SD_MspInit+0x210>)
 8002be8:	2220      	movs	r2, #32
 8002bea:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002bec:	4b37      	ldr	r3, [pc, #220]	@ (8002ccc <HAL_SD_MspInit+0x210>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002bf2:	4b36      	ldr	r3, [pc, #216]	@ (8002ccc <HAL_SD_MspInit+0x210>)
 8002bf4:	2204      	movs	r2, #4
 8002bf6:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002bf8:	4b34      	ldr	r3, [pc, #208]	@ (8002ccc <HAL_SD_MspInit+0x210>)
 8002bfa:	2203      	movs	r2, #3
 8002bfc:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002bfe:	4b33      	ldr	r3, [pc, #204]	@ (8002ccc <HAL_SD_MspInit+0x210>)
 8002c00:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002c04:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002c06:	4b31      	ldr	r3, [pc, #196]	@ (8002ccc <HAL_SD_MspInit+0x210>)
 8002c08:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002c0c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8002c0e:	482f      	ldr	r0, [pc, #188]	@ (8002ccc <HAL_SD_MspInit+0x210>)
 8002c10:	f000 ff5e 	bl	8003ad0 <HAL_DMA_Init>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_SD_MspInit+0x162>
    {
      Error_Handler();
 8002c1a:	f7ff fdfb 	bl	8002814 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a2a      	ldr	r2, [pc, #168]	@ (8002ccc <HAL_SD_MspInit+0x210>)
 8002c22:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c24:	4a29      	ldr	r2, [pc, #164]	@ (8002ccc <HAL_SD_MspInit+0x210>)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8002c2a:	4b2a      	ldr	r3, [pc, #168]	@ (8002cd4 <HAL_SD_MspInit+0x218>)
 8002c2c:	4a2a      	ldr	r2, [pc, #168]	@ (8002cd8 <HAL_SD_MspInit+0x21c>)
 8002c2e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8002c30:	4b28      	ldr	r3, [pc, #160]	@ (8002cd4 <HAL_SD_MspInit+0x218>)
 8002c32:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002c36:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c38:	4b26      	ldr	r3, [pc, #152]	@ (8002cd4 <HAL_SD_MspInit+0x218>)
 8002c3a:	2240      	movs	r2, #64	@ 0x40
 8002c3c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c3e:	4b25      	ldr	r3, [pc, #148]	@ (8002cd4 <HAL_SD_MspInit+0x218>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c44:	4b23      	ldr	r3, [pc, #140]	@ (8002cd4 <HAL_SD_MspInit+0x218>)
 8002c46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c4a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c4c:	4b21      	ldr	r3, [pc, #132]	@ (8002cd4 <HAL_SD_MspInit+0x218>)
 8002c4e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002c52:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c54:	4b1f      	ldr	r3, [pc, #124]	@ (8002cd4 <HAL_SD_MspInit+0x218>)
 8002c56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c5a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd4 <HAL_SD_MspInit+0x218>)
 8002c5e:	2220      	movs	r2, #32
 8002c60:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c62:	4b1c      	ldr	r3, [pc, #112]	@ (8002cd4 <HAL_SD_MspInit+0x218>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002c68:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd4 <HAL_SD_MspInit+0x218>)
 8002c6a:	2204      	movs	r2, #4
 8002c6c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002c6e:	4b19      	ldr	r3, [pc, #100]	@ (8002cd4 <HAL_SD_MspInit+0x218>)
 8002c70:	2203      	movs	r2, #3
 8002c72:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002c74:	4b17      	ldr	r3, [pc, #92]	@ (8002cd4 <HAL_SD_MspInit+0x218>)
 8002c76:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002c7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002c7c:	4b15      	ldr	r3, [pc, #84]	@ (8002cd4 <HAL_SD_MspInit+0x218>)
 8002c7e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002c82:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002c84:	4813      	ldr	r0, [pc, #76]	@ (8002cd4 <HAL_SD_MspInit+0x218>)
 8002c86:	f000 ff23 	bl	8003ad0 <HAL_DMA_Init>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_SD_MspInit+0x1d8>
    {
      Error_Handler();
 8002c90:	f7ff fdc0 	bl	8002814 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a0f      	ldr	r2, [pc, #60]	@ (8002cd4 <HAL_SD_MspInit+0x218>)
 8002c98:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c9a:	4a0e      	ldr	r2, [pc, #56]	@ (8002cd4 <HAL_SD_MspInit+0x218>)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 2, 2);
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	2102      	movs	r1, #2
 8002ca4:	2031      	movs	r0, #49	@ 0x31
 8002ca6:	f000 fedc 	bl	8003a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002caa:	2031      	movs	r0, #49	@ 0x31
 8002cac:	f000 fef5 	bl	8003a9a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8002cb0:	bf00      	nop
 8002cb2:	3730      	adds	r7, #48	@ 0x30
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40012c00 	.word	0x40012c00
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	40020000 	.word	0x40020000
 8002cc4:	40020400 	.word	0x40020400
 8002cc8:	40020800 	.word	0x40020800
 8002ccc:	200004e4 	.word	0x200004e4
 8002cd0:	40026458 	.word	0x40026458
 8002cd4:	20000544 	.word	0x20000544
 8002cd8:	400264a0 	.word	0x400264a0

08002cdc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a1f      	ldr	r2, [pc, #124]	@ (8002d68 <HAL_TIM_PWM_MspInit+0x8c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d10e      	bne.n	8002d0c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d6c <HAL_TIM_PWM_MspInit+0x90>)
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf6:	4a1d      	ldr	r2, [pc, #116]	@ (8002d6c <HAL_TIM_PWM_MspInit+0x90>)
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8002d6c <HAL_TIM_PWM_MspInit+0x90>)
 8002d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002d0a:	e026      	b.n	8002d5a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d14:	d10e      	bne.n	8002d34 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	4b14      	ldr	r3, [pc, #80]	@ (8002d6c <HAL_TIM_PWM_MspInit+0x90>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1e:	4a13      	ldr	r2, [pc, #76]	@ (8002d6c <HAL_TIM_PWM_MspInit+0x90>)
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d26:	4b11      	ldr	r3, [pc, #68]	@ (8002d6c <HAL_TIM_PWM_MspInit+0x90>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	693b      	ldr	r3, [r7, #16]
}
 8002d32:	e012      	b.n	8002d5a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a0d      	ldr	r2, [pc, #52]	@ (8002d70 <HAL_TIM_PWM_MspInit+0x94>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d10d      	bne.n	8002d5a <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	4b0a      	ldr	r3, [pc, #40]	@ (8002d6c <HAL_TIM_PWM_MspInit+0x90>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d46:	4a09      	ldr	r2, [pc, #36]	@ (8002d6c <HAL_TIM_PWM_MspInit+0x90>)
 8002d48:	f043 0302 	orr.w	r3, r3, #2
 8002d4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d4e:	4b07      	ldr	r3, [pc, #28]	@ (8002d6c <HAL_TIM_PWM_MspInit+0x90>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
}
 8002d5a:	bf00      	nop
 8002d5c:	371c      	adds	r7, #28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40010000 	.word	0x40010000
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	40000400 	.word	0x40000400

08002d74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a0b      	ldr	r2, [pc, #44]	@ (8002db0 <HAL_TIM_Base_MspInit+0x3c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d10d      	bne.n	8002da2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002db4 <HAL_TIM_Base_MspInit+0x40>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8e:	4a09      	ldr	r2, [pc, #36]	@ (8002db4 <HAL_TIM_Base_MspInit+0x40>)
 8002d90:	f043 0304 	orr.w	r3, r3, #4
 8002d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d96:	4b07      	ldr	r3, [pc, #28]	@ (8002db4 <HAL_TIM_Base_MspInit+0x40>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8002da2:	bf00      	nop
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40000800 	.word	0x40000800
 8002db4:	40023800 	.word	0x40023800

08002db8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08a      	sub	sp, #40	@ 0x28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc0:	f107 0314 	add.w	r3, r7, #20
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	60da      	str	r2, [r3, #12]
 8002dce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a36      	ldr	r2, [pc, #216]	@ (8002eb0 <HAL_TIM_MspPostInit+0xf8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d11f      	bne.n	8002e1a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	4b35      	ldr	r3, [pc, #212]	@ (8002eb4 <HAL_TIM_MspPostInit+0xfc>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de2:	4a34      	ldr	r2, [pc, #208]	@ (8002eb4 <HAL_TIM_MspPostInit+0xfc>)
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dea:	4b32      	ldr	r3, [pc, #200]	@ (8002eb4 <HAL_TIM_MspPostInit+0xfc>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002df6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e04:	2300      	movs	r3, #0
 8002e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e0c:	f107 0314 	add.w	r3, r7, #20
 8002e10:	4619      	mov	r1, r3
 8002e12:	4829      	ldr	r0, [pc, #164]	@ (8002eb8 <HAL_TIM_MspPostInit+0x100>)
 8002e14:	f001 fa6a 	bl	80042ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002e18:	e046      	b.n	8002ea8 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM2)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e22:	d11e      	bne.n	8002e62 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e24:	2300      	movs	r3, #0
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	4b22      	ldr	r3, [pc, #136]	@ (8002eb4 <HAL_TIM_MspPostInit+0xfc>)
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2c:	4a21      	ldr	r2, [pc, #132]	@ (8002eb4 <HAL_TIM_MspPostInit+0xfc>)
 8002e2e:	f043 0301 	orr.w	r3, r3, #1
 8002e32:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e34:	4b1f      	ldr	r3, [pc, #124]	@ (8002eb4 <HAL_TIM_MspPostInit+0xfc>)
 8002e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002e40:	2320      	movs	r3, #32
 8002e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e44:	2302      	movs	r3, #2
 8002e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e50:	2301      	movs	r3, #1
 8002e52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e54:	f107 0314 	add.w	r3, r7, #20
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4817      	ldr	r0, [pc, #92]	@ (8002eb8 <HAL_TIM_MspPostInit+0x100>)
 8002e5c:	f001 fa46 	bl	80042ec <HAL_GPIO_Init>
}
 8002e60:	e022      	b.n	8002ea8 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a15      	ldr	r2, [pc, #84]	@ (8002ebc <HAL_TIM_MspPostInit+0x104>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d11d      	bne.n	8002ea8 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60bb      	str	r3, [r7, #8]
 8002e70:	4b10      	ldr	r3, [pc, #64]	@ (8002eb4 <HAL_TIM_MspPostInit+0xfc>)
 8002e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e74:	4a0f      	ldr	r2, [pc, #60]	@ (8002eb4 <HAL_TIM_MspPostInit+0xfc>)
 8002e76:	f043 0304 	orr.w	r3, r3, #4
 8002e7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb4 <HAL_TIM_MspPostInit+0xfc>)
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e88:	2340      	movs	r3, #64	@ 0x40
 8002e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e94:	2300      	movs	r3, #0
 8002e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e9c:	f107 0314 	add.w	r3, r7, #20
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4807      	ldr	r0, [pc, #28]	@ (8002ec0 <HAL_TIM_MspPostInit+0x108>)
 8002ea4:	f001 fa22 	bl	80042ec <HAL_GPIO_Init>
}
 8002ea8:	bf00      	nop
 8002eaa:	3728      	adds	r7, #40	@ 0x28
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40010000 	.word	0x40010000
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40020000 	.word	0x40020000
 8002ebc:	40000400 	.word	0x40000400
 8002ec0:	40020800 	.word	0x40020800

08002ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08c      	sub	sp, #48	@ 0x30
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ecc:	f107 031c 	add.w	r3, r7, #28
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	60da      	str	r2, [r3, #12]
 8002eda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a3a      	ldr	r2, [pc, #232]	@ (8002fcc <HAL_UART_MspInit+0x108>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d135      	bne.n	8002f52 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61bb      	str	r3, [r7, #24]
 8002eea:	4b39      	ldr	r3, [pc, #228]	@ (8002fd0 <HAL_UART_MspInit+0x10c>)
 8002eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eee:	4a38      	ldr	r2, [pc, #224]	@ (8002fd0 <HAL_UART_MspInit+0x10c>)
 8002ef0:	f043 0310 	orr.w	r3, r3, #16
 8002ef4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ef6:	4b36      	ldr	r3, [pc, #216]	@ (8002fd0 <HAL_UART_MspInit+0x10c>)
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efa:	f003 0310 	and.w	r3, r3, #16
 8002efe:	61bb      	str	r3, [r7, #24]
 8002f00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	4b32      	ldr	r3, [pc, #200]	@ (8002fd0 <HAL_UART_MspInit+0x10c>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0a:	4a31      	ldr	r2, [pc, #196]	@ (8002fd0 <HAL_UART_MspInit+0x10c>)
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f12:	4b2f      	ldr	r3, [pc, #188]	@ (8002fd0 <HAL_UART_MspInit+0x10c>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8002f1e:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8002f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f24:	2302      	movs	r3, #2
 8002f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f30:	2307      	movs	r3, #7
 8002f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f34:	f107 031c 	add.w	r3, r7, #28
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4826      	ldr	r0, [pc, #152]	@ (8002fd4 <HAL_UART_MspInit+0x110>)
 8002f3c:	f001 f9d6 	bl	80042ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 1);
 8002f40:	2201      	movs	r2, #1
 8002f42:	2101      	movs	r1, #1
 8002f44:	2025      	movs	r0, #37	@ 0x25
 8002f46:	f000 fd8c 	bl	8003a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f4a:	2025      	movs	r0, #37	@ 0x25
 8002f4c:	f000 fda5 	bl	8003a9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f50:	e038      	b.n	8002fc4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a20      	ldr	r2, [pc, #128]	@ (8002fd8 <HAL_UART_MspInit+0x114>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d133      	bne.n	8002fc4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	613b      	str	r3, [r7, #16]
 8002f60:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd0 <HAL_UART_MspInit+0x10c>)
 8002f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f64:	4a1a      	ldr	r2, [pc, #104]	@ (8002fd0 <HAL_UART_MspInit+0x10c>)
 8002f66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f6c:	4b18      	ldr	r3, [pc, #96]	@ (8002fd0 <HAL_UART_MspInit+0x10c>)
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	4b14      	ldr	r3, [pc, #80]	@ (8002fd0 <HAL_UART_MspInit+0x10c>)
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f80:	4a13      	ldr	r2, [pc, #76]	@ (8002fd0 <HAL_UART_MspInit+0x10c>)
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f88:	4b11      	ldr	r3, [pc, #68]	@ (8002fd0 <HAL_UART_MspInit+0x10c>)
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f94:	230c      	movs	r3, #12
 8002f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fa4:	2307      	movs	r3, #7
 8002fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa8:	f107 031c 	add.w	r3, r7, #28
 8002fac:	4619      	mov	r1, r3
 8002fae:	4809      	ldr	r0, [pc, #36]	@ (8002fd4 <HAL_UART_MspInit+0x110>)
 8002fb0:	f001 f99c 	bl	80042ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	2026      	movs	r0, #38	@ 0x26
 8002fba:	f000 fd52 	bl	8003a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002fbe:	2026      	movs	r0, #38	@ 0x26
 8002fc0:	f000 fd6b 	bl	8003a9a <HAL_NVIC_EnableIRQ>
}
 8002fc4:	bf00      	nop
 8002fc6:	3730      	adds	r7, #48	@ 0x30
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40011000 	.word	0x40011000
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	40020000 	.word	0x40020000
 8002fd8:	40004400 	.word	0x40004400

08002fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fe0:	bf00      	nop
 8002fe2:	e7fd      	b.n	8002fe0 <NMI_Handler+0x4>

08002fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fe8:	bf00      	nop
 8002fea:	e7fd      	b.n	8002fe8 <MemManage_Handler+0x4>

08002fec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ff0:	bf00      	nop
 8002ff2:	e7fd      	b.n	8002ff0 <BusFault_Handler+0x4>

08002ff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ff8:	bf00      	nop
 8002ffa:	e7fd      	b.n	8002ff8 <UsageFault_Handler+0x4>

08002ffc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003000:	bf00      	nop
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800300a:	b480      	push	{r7}
 800300c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800300e:	bf00      	nop
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800301c:	bf00      	nop
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800302a:	f000 f989 	bl	8003340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800302e:	bf00      	nop
 8003030:	bd80      	pop	{r7, pc}
	...

08003034 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003038:	4802      	ldr	r0, [pc, #8]	@ (8003044 <USART1_IRQHandler+0x10>)
 800303a:	f005 f8ab 	bl	8008194 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800303e:	bf00      	nop
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	200006c4 	.word	0x200006c4

08003048 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800304c:	4802      	ldr	r0, [pc, #8]	@ (8003058 <USART2_IRQHandler+0x10>)
 800304e:	f005 f8a1 	bl	8008194 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	2000070c 	.word	0x2000070c

0800305c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003060:	4802      	ldr	r0, [pc, #8]	@ (800306c <SDIO_IRQHandler+0x10>)
 8003062:	f003 f9c5 	bl	80063f0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20000460 	.word	0x20000460

08003070 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8003074:	4802      	ldr	r0, [pc, #8]	@ (8003080 <DMA2_Stream3_IRQHandler+0x10>)
 8003076:	f000 fec3 	bl	8003e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800307a:	bf00      	nop
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	200004e4 	.word	0x200004e4

08003084 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8003088:	4802      	ldr	r0, [pc, #8]	@ (8003094 <DMA2_Stream6_IRQHandler+0x10>)
 800308a:	f000 feb9 	bl	8003e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20000544 	.word	0x20000544

08003098 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  return 1;
 800309c:	2301      	movs	r3, #1
}
 800309e:	4618      	mov	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <_kill>:

int _kill(int pid, int sig)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030b2:	f008 fed9 	bl	800be68 <__errno>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2216      	movs	r2, #22
 80030ba:	601a      	str	r2, [r3, #0]
  return -1;
 80030bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <_exit>:

void _exit (int status)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030d0:	f04f 31ff 	mov.w	r1, #4294967295
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f7ff ffe7 	bl	80030a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80030da:	bf00      	nop
 80030dc:	e7fd      	b.n	80030da <_exit+0x12>

080030de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b086      	sub	sp, #24
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	e00a      	b.n	8003106 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030f0:	f3af 8000 	nop.w
 80030f4:	4601      	mov	r1, r0
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	60ba      	str	r2, [r7, #8]
 80030fc:	b2ca      	uxtb	r2, r1
 80030fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	3301      	adds	r3, #1
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	429a      	cmp	r2, r3
 800310c:	dbf0      	blt.n	80030f0 <_read+0x12>
  }

  return len;
 800310e:	687b      	ldr	r3, [r7, #4]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003124:	2300      	movs	r3, #0
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	e009      	b.n	800313e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	60ba      	str	r2, [r7, #8]
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	3301      	adds	r3, #1
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	429a      	cmp	r2, r3
 8003144:	dbf1      	blt.n	800312a <_write+0x12>
  }
  return len;
 8003146:	687b      	ldr	r3, [r7, #4]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <_close>:

int _close(int file)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003158:	f04f 33ff 	mov.w	r3, #4294967295
}
 800315c:	4618      	mov	r0, r3
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003178:	605a      	str	r2, [r3, #4]
  return 0;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <_isatty>:

int _isatty(int file)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003190:	2301      	movs	r3, #1
}
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800319e:	b480      	push	{r7}
 80031a0:	b085      	sub	sp, #20
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031c0:	4a14      	ldr	r2, [pc, #80]	@ (8003214 <_sbrk+0x5c>)
 80031c2:	4b15      	ldr	r3, [pc, #84]	@ (8003218 <_sbrk+0x60>)
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031cc:	4b13      	ldr	r3, [pc, #76]	@ (800321c <_sbrk+0x64>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d102      	bne.n	80031da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031d4:	4b11      	ldr	r3, [pc, #68]	@ (800321c <_sbrk+0x64>)
 80031d6:	4a12      	ldr	r2, [pc, #72]	@ (8003220 <_sbrk+0x68>)
 80031d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031da:	4b10      	ldr	r3, [pc, #64]	@ (800321c <_sbrk+0x64>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4413      	add	r3, r2
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d207      	bcs.n	80031f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031e8:	f008 fe3e 	bl	800be68 <__errno>
 80031ec:	4603      	mov	r3, r0
 80031ee:	220c      	movs	r2, #12
 80031f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031f2:	f04f 33ff 	mov.w	r3, #4294967295
 80031f6:	e009      	b.n	800320c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031f8:	4b08      	ldr	r3, [pc, #32]	@ (800321c <_sbrk+0x64>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031fe:	4b07      	ldr	r3, [pc, #28]	@ (800321c <_sbrk+0x64>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4413      	add	r3, r2
 8003206:	4a05      	ldr	r2, [pc, #20]	@ (800321c <_sbrk+0x64>)
 8003208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800320a:	68fb      	ldr	r3, [r7, #12]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	20020000 	.word	0x20020000
 8003218:	00000400 	.word	0x00000400
 800321c:	200009d0 	.word	0x200009d0
 8003220:	20000b40 	.word	0x20000b40

08003224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003228:	4b06      	ldr	r3, [pc, #24]	@ (8003244 <SystemInit+0x20>)
 800322a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322e:	4a05      	ldr	r2, [pc, #20]	@ (8003244 <SystemInit+0x20>)
 8003230:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003234:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003238:	bf00      	nop
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003248:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003280 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800324c:	f7ff ffea 	bl	8003224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003250:	480c      	ldr	r0, [pc, #48]	@ (8003284 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003252:	490d      	ldr	r1, [pc, #52]	@ (8003288 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003254:	4a0d      	ldr	r2, [pc, #52]	@ (800328c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003258:	e002      	b.n	8003260 <LoopCopyDataInit>

0800325a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800325a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800325c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800325e:	3304      	adds	r3, #4

08003260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003264:	d3f9      	bcc.n	800325a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003266:	4a0a      	ldr	r2, [pc, #40]	@ (8003290 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003268:	4c0a      	ldr	r4, [pc, #40]	@ (8003294 <LoopFillZerobss+0x22>)
  movs r3, #0
 800326a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800326c:	e001      	b.n	8003272 <LoopFillZerobss>

0800326e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800326e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003270:	3204      	adds	r2, #4

08003272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003274:	d3fb      	bcc.n	800326e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003276:	f008 fdfd 	bl	800be74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800327a:	f7fe feb3 	bl	8001fe4 <main>
  bx  lr    
 800327e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003280:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003288:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800328c:	0800f7b4 	.word	0x0800f7b4
  ldr r2, =_sbss
 8003290:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003294:	20000b40 	.word	0x20000b40

08003298 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003298:	e7fe      	b.n	8003298 <ADC_IRQHandler>
	...

0800329c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032a0:	4b0e      	ldr	r3, [pc, #56]	@ (80032dc <HAL_Init+0x40>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a0d      	ldr	r2, [pc, #52]	@ (80032dc <HAL_Init+0x40>)
 80032a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032ac:	4b0b      	ldr	r3, [pc, #44]	@ (80032dc <HAL_Init+0x40>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a0a      	ldr	r2, [pc, #40]	@ (80032dc <HAL_Init+0x40>)
 80032b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032b8:	4b08      	ldr	r3, [pc, #32]	@ (80032dc <HAL_Init+0x40>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a07      	ldr	r2, [pc, #28]	@ (80032dc <HAL_Init+0x40>)
 80032be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032c4:	2003      	movs	r0, #3
 80032c6:	f000 fbc1 	bl	8003a4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032ca:	2000      	movs	r0, #0
 80032cc:	f000 f808 	bl	80032e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032d0:	f7ff faa6 	bl	8002820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40023c00 	.word	0x40023c00

080032e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032e8:	4b12      	ldr	r3, [pc, #72]	@ (8003334 <HAL_InitTick+0x54>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4b12      	ldr	r3, [pc, #72]	@ (8003338 <HAL_InitTick+0x58>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	4619      	mov	r1, r3
 80032f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fbd9 	bl	8003ab6 <HAL_SYSTICK_Config>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e00e      	b.n	800332c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b0f      	cmp	r3, #15
 8003312:	d80a      	bhi.n	800332a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003314:	2200      	movs	r2, #0
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	f04f 30ff 	mov.w	r0, #4294967295
 800331c:	f000 fba1 	bl	8003a62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003320:	4a06      	ldr	r2, [pc, #24]	@ (800333c <HAL_InitTick+0x5c>)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	e000      	b.n	800332c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
}
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	2000000c 	.word	0x2000000c
 8003338:	20000014 	.word	0x20000014
 800333c:	20000010 	.word	0x20000010

08003340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003344:	4b06      	ldr	r3, [pc, #24]	@ (8003360 <HAL_IncTick+0x20>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	461a      	mov	r2, r3
 800334a:	4b06      	ldr	r3, [pc, #24]	@ (8003364 <HAL_IncTick+0x24>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4413      	add	r3, r2
 8003350:	4a04      	ldr	r2, [pc, #16]	@ (8003364 <HAL_IncTick+0x24>)
 8003352:	6013      	str	r3, [r2, #0]
}
 8003354:	bf00      	nop
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	20000014 	.word	0x20000014
 8003364:	200009d4 	.word	0x200009d4

08003368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  return uwTick;
 800336c:	4b03      	ldr	r3, [pc, #12]	@ (800337c <HAL_GetTick+0x14>)
 800336e:	681b      	ldr	r3, [r3, #0]
}
 8003370:	4618      	mov	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	200009d4 	.word	0x200009d4

08003380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003388:	f7ff ffee 	bl	8003368 <HAL_GetTick>
 800338c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003398:	d005      	beq.n	80033a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800339a:	4b0a      	ldr	r3, [pc, #40]	@ (80033c4 <HAL_Delay+0x44>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4413      	add	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033a6:	bf00      	nop
 80033a8:	f7ff ffde 	bl	8003368 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d8f7      	bhi.n	80033a8 <HAL_Delay+0x28>
  {
  }
}
 80033b8:	bf00      	nop
 80033ba:	bf00      	nop
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20000014 	.word	0x20000014

080033c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e033      	b.n	8003446 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d109      	bne.n	80033fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff fa42 	bl	8002870 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	2b00      	cmp	r3, #0
 8003404:	d118      	bne.n	8003438 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800340e:	f023 0302 	bic.w	r3, r3, #2
 8003412:	f043 0202 	orr.w	r2, r3, #2
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f94a 	bl	80036b4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	f023 0303 	bic.w	r3, r3, #3
 800342e:	f043 0201 	orr.w	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	641a      	str	r2, [r3, #64]	@ 0x40
 8003436:	e001      	b.n	800343c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003444:	7bfb      	ldrb	r3, [r7, #15]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
	...

08003450 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_ADC_ConfigChannel+0x1c>
 8003468:	2302      	movs	r3, #2
 800346a:	e113      	b.n	8003694 <HAL_ADC_ConfigChannel+0x244>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2b09      	cmp	r3, #9
 800347a:	d925      	bls.n	80034c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68d9      	ldr	r1, [r3, #12]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	b29b      	uxth	r3, r3
 8003488:	461a      	mov	r2, r3
 800348a:	4613      	mov	r3, r2
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	4413      	add	r3, r2
 8003490:	3b1e      	subs	r3, #30
 8003492:	2207      	movs	r2, #7
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43da      	mvns	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	400a      	ands	r2, r1
 80034a0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68d9      	ldr	r1, [r3, #12]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	4618      	mov	r0, r3
 80034b4:	4603      	mov	r3, r0
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	4403      	add	r3, r0
 80034ba:	3b1e      	subs	r3, #30
 80034bc:	409a      	lsls	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	60da      	str	r2, [r3, #12]
 80034c6:	e022      	b.n	800350e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6919      	ldr	r1, [r3, #16]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	461a      	mov	r2, r3
 80034d6:	4613      	mov	r3, r2
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	4413      	add	r3, r2
 80034dc:	2207      	movs	r2, #7
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43da      	mvns	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	400a      	ands	r2, r1
 80034ea:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6919      	ldr	r1, [r3, #16]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	4618      	mov	r0, r3
 80034fe:	4603      	mov	r3, r0
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	4403      	add	r3, r0
 8003504:	409a      	lsls	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b06      	cmp	r3, #6
 8003514:	d824      	bhi.n	8003560 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	3b05      	subs	r3, #5
 8003528:	221f      	movs	r2, #31
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	43da      	mvns	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	400a      	ands	r2, r1
 8003536:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	b29b      	uxth	r3, r3
 8003544:	4618      	mov	r0, r3
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	3b05      	subs	r3, #5
 8003552:	fa00 f203 	lsl.w	r2, r0, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	635a      	str	r2, [r3, #52]	@ 0x34
 800355e:	e04c      	b.n	80035fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b0c      	cmp	r3, #12
 8003566:	d824      	bhi.n	80035b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	3b23      	subs	r3, #35	@ 0x23
 800357a:	221f      	movs	r2, #31
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43da      	mvns	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	400a      	ands	r2, r1
 8003588:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	b29b      	uxth	r3, r3
 8003596:	4618      	mov	r0, r3
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	3b23      	subs	r3, #35	@ 0x23
 80035a4:	fa00 f203 	lsl.w	r2, r0, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80035b0:	e023      	b.n	80035fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	3b41      	subs	r3, #65	@ 0x41
 80035c4:	221f      	movs	r2, #31
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43da      	mvns	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	400a      	ands	r2, r1
 80035d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	4618      	mov	r0, r3
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	3b41      	subs	r3, #65	@ 0x41
 80035ee:	fa00 f203 	lsl.w	r2, r0, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035fa:	4b29      	ldr	r3, [pc, #164]	@ (80036a0 <HAL_ADC_ConfigChannel+0x250>)
 80035fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a28      	ldr	r2, [pc, #160]	@ (80036a4 <HAL_ADC_ConfigChannel+0x254>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d10f      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x1d8>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b12      	cmp	r3, #18
 800360e:	d10b      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a1d      	ldr	r2, [pc, #116]	@ (80036a4 <HAL_ADC_ConfigChannel+0x254>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d12b      	bne.n	800368a <HAL_ADC_ConfigChannel+0x23a>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a1c      	ldr	r2, [pc, #112]	@ (80036a8 <HAL_ADC_ConfigChannel+0x258>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d003      	beq.n	8003644 <HAL_ADC_ConfigChannel+0x1f4>
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b11      	cmp	r3, #17
 8003642:	d122      	bne.n	800368a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a11      	ldr	r2, [pc, #68]	@ (80036a8 <HAL_ADC_ConfigChannel+0x258>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d111      	bne.n	800368a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003666:	4b11      	ldr	r3, [pc, #68]	@ (80036ac <HAL_ADC_ConfigChannel+0x25c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a11      	ldr	r2, [pc, #68]	@ (80036b0 <HAL_ADC_ConfigChannel+0x260>)
 800366c:	fba2 2303 	umull	r2, r3, r2, r3
 8003670:	0c9a      	lsrs	r2, r3, #18
 8003672:	4613      	mov	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800367c:	e002      	b.n	8003684 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	3b01      	subs	r3, #1
 8003682:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f9      	bne.n	800367e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	40012300 	.word	0x40012300
 80036a4:	40012000 	.word	0x40012000
 80036a8:	10000012 	.word	0x10000012
 80036ac:	2000000c 	.word	0x2000000c
 80036b0:	431bde83 	.word	0x431bde83

080036b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036bc:	4b79      	ldr	r3, [pc, #484]	@ (80038a4 <ADC_Init+0x1f0>)
 80036be:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	431a      	orrs	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6859      	ldr	r1, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	021a      	lsls	r2, r3, #8
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800370c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6859      	ldr	r1, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	430a      	orrs	r2, r1
 800371e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800372e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6899      	ldr	r1, [r3, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003746:	4a58      	ldr	r2, [pc, #352]	@ (80038a8 <ADC_Init+0x1f4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d022      	beq.n	8003792 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800375a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6899      	ldr	r1, [r3, #8]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800377c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6899      	ldr	r1, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	609a      	str	r2, [r3, #8]
 8003790:	e00f      	b.n	80037b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80037b0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0202 	bic.w	r2, r2, #2
 80037c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6899      	ldr	r1, [r3, #8]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	7e1b      	ldrb	r3, [r3, #24]
 80037cc:	005a      	lsls	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d01b      	beq.n	8003818 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037ee:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80037fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6859      	ldr	r1, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380a:	3b01      	subs	r3, #1
 800380c:	035a      	lsls	r2, r3, #13
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	605a      	str	r2, [r3, #4]
 8003816:	e007      	b.n	8003828 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003826:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003836:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	3b01      	subs	r3, #1
 8003844:	051a      	lsls	r2, r3, #20
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800385c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6899      	ldr	r1, [r3, #8]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800386a:	025a      	lsls	r2, r3, #9
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003882:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6899      	ldr	r1, [r3, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	029a      	lsls	r2, r3, #10
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	609a      	str	r2, [r3, #8]
}
 8003898:	bf00      	nop
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	40012300 	.word	0x40012300
 80038a8:	0f000001 	.word	0x0f000001

080038ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f003 0307 	and.w	r3, r3, #7
 80038ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038bc:	4b0c      	ldr	r3, [pc, #48]	@ (80038f0 <__NVIC_SetPriorityGrouping+0x44>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038c8:	4013      	ands	r3, r2
 80038ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038de:	4a04      	ldr	r2, [pc, #16]	@ (80038f0 <__NVIC_SetPriorityGrouping+0x44>)
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	60d3      	str	r3, [r2, #12]
}
 80038e4:	bf00      	nop
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	e000ed00 	.word	0xe000ed00

080038f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038f8:	4b04      	ldr	r3, [pc, #16]	@ (800390c <__NVIC_GetPriorityGrouping+0x18>)
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	0a1b      	lsrs	r3, r3, #8
 80038fe:	f003 0307 	and.w	r3, r3, #7
}
 8003902:	4618      	mov	r0, r3
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	e000ed00 	.word	0xe000ed00

08003910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	4603      	mov	r3, r0
 8003918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800391a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391e:	2b00      	cmp	r3, #0
 8003920:	db0b      	blt.n	800393a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	f003 021f 	and.w	r2, r3, #31
 8003928:	4907      	ldr	r1, [pc, #28]	@ (8003948 <__NVIC_EnableIRQ+0x38>)
 800392a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392e:	095b      	lsrs	r3, r3, #5
 8003930:	2001      	movs	r0, #1
 8003932:	fa00 f202 	lsl.w	r2, r0, r2
 8003936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	e000e100 	.word	0xe000e100

0800394c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	6039      	str	r1, [r7, #0]
 8003956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395c:	2b00      	cmp	r3, #0
 800395e:	db0a      	blt.n	8003976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	b2da      	uxtb	r2, r3
 8003964:	490c      	ldr	r1, [pc, #48]	@ (8003998 <__NVIC_SetPriority+0x4c>)
 8003966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396a:	0112      	lsls	r2, r2, #4
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	440b      	add	r3, r1
 8003970:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003974:	e00a      	b.n	800398c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	b2da      	uxtb	r2, r3
 800397a:	4908      	ldr	r1, [pc, #32]	@ (800399c <__NVIC_SetPriority+0x50>)
 800397c:	79fb      	ldrb	r3, [r7, #7]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	3b04      	subs	r3, #4
 8003984:	0112      	lsls	r2, r2, #4
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	440b      	add	r3, r1
 800398a:	761a      	strb	r2, [r3, #24]
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	e000e100 	.word	0xe000e100
 800399c:	e000ed00 	.word	0xe000ed00

080039a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b089      	sub	sp, #36	@ 0x24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f1c3 0307 	rsb	r3, r3, #7
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	bf28      	it	cs
 80039be:	2304      	movcs	r3, #4
 80039c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	3304      	adds	r3, #4
 80039c6:	2b06      	cmp	r3, #6
 80039c8:	d902      	bls.n	80039d0 <NVIC_EncodePriority+0x30>
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	3b03      	subs	r3, #3
 80039ce:	e000      	b.n	80039d2 <NVIC_EncodePriority+0x32>
 80039d0:	2300      	movs	r3, #0
 80039d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d4:	f04f 32ff 	mov.w	r2, #4294967295
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	43da      	mvns	r2, r3
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	401a      	ands	r2, r3
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039e8:	f04f 31ff 	mov.w	r1, #4294967295
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	fa01 f303 	lsl.w	r3, r1, r3
 80039f2:	43d9      	mvns	r1, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f8:	4313      	orrs	r3, r2
         );
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3724      	adds	r7, #36	@ 0x24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
	...

08003a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a18:	d301      	bcc.n	8003a1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e00f      	b.n	8003a3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a48 <SysTick_Config+0x40>)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a26:	210f      	movs	r1, #15
 8003a28:	f04f 30ff 	mov.w	r0, #4294967295
 8003a2c:	f7ff ff8e 	bl	800394c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a30:	4b05      	ldr	r3, [pc, #20]	@ (8003a48 <SysTick_Config+0x40>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a36:	4b04      	ldr	r3, [pc, #16]	@ (8003a48 <SysTick_Config+0x40>)
 8003a38:	2207      	movs	r2, #7
 8003a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	e000e010 	.word	0xe000e010

08003a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff ff29 	bl	80038ac <__NVIC_SetPriorityGrouping>
}
 8003a5a:	bf00      	nop
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b086      	sub	sp, #24
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	4603      	mov	r3, r0
 8003a6a:	60b9      	str	r1, [r7, #8]
 8003a6c:	607a      	str	r2, [r7, #4]
 8003a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a74:	f7ff ff3e 	bl	80038f4 <__NVIC_GetPriorityGrouping>
 8003a78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	68b9      	ldr	r1, [r7, #8]
 8003a7e:	6978      	ldr	r0, [r7, #20]
 8003a80:	f7ff ff8e 	bl	80039a0 <NVIC_EncodePriority>
 8003a84:	4602      	mov	r2, r0
 8003a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a8a:	4611      	mov	r1, r2
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff ff5d 	bl	800394c <__NVIC_SetPriority>
}
 8003a92:	bf00      	nop
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b082      	sub	sp, #8
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff ff31 	bl	8003910 <__NVIC_EnableIRQ>
}
 8003aae:	bf00      	nop
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b082      	sub	sp, #8
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7ff ffa2 	bl	8003a08 <SysTick_Config>
 8003ac4:	4603      	mov	r3, r0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
	...

08003ad0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003adc:	f7ff fc44 	bl	8003368 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e099      	b.n	8003c20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0201 	bic.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b0c:	e00f      	b.n	8003b2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b0e:	f7ff fc2b 	bl	8003368 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b05      	cmp	r3, #5
 8003b1a:	d908      	bls.n	8003b2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2203      	movs	r2, #3
 8003b26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e078      	b.n	8003c20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1e8      	bne.n	8003b0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	4b38      	ldr	r3, [pc, #224]	@ (8003c28 <HAL_DMA_Init+0x158>)
 8003b48:	4013      	ands	r3, r2
 8003b4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d107      	bne.n	8003b98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b90:	4313      	orrs	r3, r2
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f023 0307 	bic.w	r3, r3, #7
 8003bae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d117      	bne.n	8003bf2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00e      	beq.n	8003bf2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fb0d 	bl	80041f4 <DMA_CheckFifoParam>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2240      	movs	r2, #64	@ 0x40
 8003be4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e016      	b.n	8003c20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 fac4 	bl	8004188 <DMA_CalcBaseAndBitshift>
 8003c00:	4603      	mov	r3, r0
 8003c02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c08:	223f      	movs	r2, #63	@ 0x3f
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	f010803f 	.word	0xf010803f

08003c2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
 8003c38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d101      	bne.n	8003c52 <HAL_DMA_Start_IT+0x26>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	e040      	b.n	8003cd4 <HAL_DMA_Start_IT+0xa8>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d12f      	bne.n	8003cc6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2202      	movs	r2, #2
 8003c6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	68b9      	ldr	r1, [r7, #8]
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 fa56 	bl	800412c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c84:	223f      	movs	r2, #63	@ 0x3f
 8003c86:	409a      	lsls	r2, r3
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0216 	orr.w	r2, r2, #22
 8003c9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d007      	beq.n	8003cb4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0208 	orr.w	r2, r2, #8
 8003cb2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0201 	orr.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	e005      	b.n	8003cd2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003cce:	2302      	movs	r3, #2
 8003cd0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3718      	adds	r7, #24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003cea:	f7ff fb3d 	bl	8003368 <HAL_GetTick>
 8003cee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d008      	beq.n	8003d0e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2280      	movs	r2, #128	@ 0x80
 8003d00:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e052      	b.n	8003db4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0216 	bic.w	r2, r2, #22
 8003d1c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695a      	ldr	r2, [r3, #20]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d2c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d103      	bne.n	8003d3e <HAL_DMA_Abort+0x62>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d007      	beq.n	8003d4e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0208 	bic.w	r2, r2, #8
 8003d4c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0201 	bic.w	r2, r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d5e:	e013      	b.n	8003d88 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d60:	f7ff fb02 	bl	8003368 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b05      	cmp	r3, #5
 8003d6c:	d90c      	bls.n	8003d88 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2220      	movs	r2, #32
 8003d72:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2203      	movs	r2, #3
 8003d78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e015      	b.n	8003db4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1e4      	bne.n	8003d60 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d9a:	223f      	movs	r2, #63	@ 0x3f
 8003d9c:	409a      	lsls	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d004      	beq.n	8003dda <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2280      	movs	r2, #128	@ 0x80
 8003dd4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e00c      	b.n	8003df4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2205      	movs	r2, #5
 8003dde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0201 	bic.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e0c:	4b8e      	ldr	r3, [pc, #568]	@ (8004048 <HAL_DMA_IRQHandler+0x248>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a8e      	ldr	r2, [pc, #568]	@ (800404c <HAL_DMA_IRQHandler+0x24c>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	0a9b      	lsrs	r3, r3, #10
 8003e18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2a:	2208      	movs	r2, #8
 8003e2c:	409a      	lsls	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4013      	ands	r3, r2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d01a      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d013      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0204 	bic.w	r2, r2, #4
 8003e52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e58:	2208      	movs	r2, #8
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e64:	f043 0201 	orr.w	r2, r3, #1
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e70:	2201      	movs	r2, #1
 8003e72:	409a      	lsls	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4013      	ands	r3, r2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d012      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00b      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e8e:	2201      	movs	r2, #1
 8003e90:	409a      	lsls	r2, r3
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e9a:	f043 0202 	orr.w	r2, r3, #2
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea6:	2204      	movs	r2, #4
 8003ea8:	409a      	lsls	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4013      	ands	r3, r2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d012      	beq.n	8003ed8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00b      	beq.n	8003ed8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec4:	2204      	movs	r2, #4
 8003ec6:	409a      	lsls	r2, r3
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed0:	f043 0204 	orr.w	r2, r3, #4
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003edc:	2210      	movs	r2, #16
 8003ede:	409a      	lsls	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d043      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d03c      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003efa:	2210      	movs	r2, #16
 8003efc:	409a      	lsls	r2, r3
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d018      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d108      	bne.n	8003f30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d024      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	4798      	blx	r3
 8003f2e:	e01f      	b.n	8003f70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d01b      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	4798      	blx	r3
 8003f40:	e016      	b.n	8003f70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d107      	bne.n	8003f60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0208 	bic.w	r2, r2, #8
 8003f5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f74:	2220      	movs	r2, #32
 8003f76:	409a      	lsls	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 808f 	beq.w	80040a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 8087 	beq.w	80040a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f96:	2220      	movs	r2, #32
 8003f98:	409a      	lsls	r2, r3
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b05      	cmp	r3, #5
 8003fa8:	d136      	bne.n	8004018 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0216 	bic.w	r2, r2, #22
 8003fb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695a      	ldr	r2, [r3, #20]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003fc8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d103      	bne.n	8003fda <HAL_DMA_IRQHandler+0x1da>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d007      	beq.n	8003fea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0208 	bic.w	r2, r2, #8
 8003fe8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fee:	223f      	movs	r2, #63	@ 0x3f
 8003ff0:	409a      	lsls	r2, r3
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800400a:	2b00      	cmp	r3, #0
 800400c:	d07e      	beq.n	800410c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	4798      	blx	r3
        }
        return;
 8004016:	e079      	b.n	800410c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d01d      	beq.n	8004062 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10d      	bne.n	8004050 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004038:	2b00      	cmp	r3, #0
 800403a:	d031      	beq.n	80040a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	4798      	blx	r3
 8004044:	e02c      	b.n	80040a0 <HAL_DMA_IRQHandler+0x2a0>
 8004046:	bf00      	nop
 8004048:	2000000c 	.word	0x2000000c
 800404c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004054:	2b00      	cmp	r3, #0
 8004056:	d023      	beq.n	80040a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	4798      	blx	r3
 8004060:	e01e      	b.n	80040a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10f      	bne.n	8004090 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0210 	bic.w	r2, r2, #16
 800407e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d032      	beq.n	800410e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d022      	beq.n	80040fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2205      	movs	r2, #5
 80040b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0201 	bic.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	3301      	adds	r3, #1
 80040d0:	60bb      	str	r3, [r7, #8]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d307      	bcc.n	80040e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f2      	bne.n	80040cc <HAL_DMA_IRQHandler+0x2cc>
 80040e6:	e000      	b.n	80040ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80040e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d005      	beq.n	800410e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	4798      	blx	r3
 800410a:	e000      	b.n	800410e <HAL_DMA_IRQHandler+0x30e>
        return;
 800410c:	bf00      	nop
    }
  }
}
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004120:	4618      	mov	r0, r3
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
 8004138:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004148:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2b40      	cmp	r3, #64	@ 0x40
 8004158:	d108      	bne.n	800416c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800416a:	e007      	b.n	800417c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	60da      	str	r2, [r3, #12]
}
 800417c:	bf00      	nop
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	3b10      	subs	r3, #16
 8004198:	4a14      	ldr	r2, [pc, #80]	@ (80041ec <DMA_CalcBaseAndBitshift+0x64>)
 800419a:	fba2 2303 	umull	r2, r3, r2, r3
 800419e:	091b      	lsrs	r3, r3, #4
 80041a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041a2:	4a13      	ldr	r2, [pc, #76]	@ (80041f0 <DMA_CalcBaseAndBitshift+0x68>)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4413      	add	r3, r2
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	461a      	mov	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2b03      	cmp	r3, #3
 80041b4:	d909      	bls.n	80041ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80041be:	f023 0303 	bic.w	r3, r3, #3
 80041c2:	1d1a      	adds	r2, r3, #4
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80041c8:	e007      	b.n	80041da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80041d2:	f023 0303 	bic.w	r3, r3, #3
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	aaaaaaab 	.word	0xaaaaaaab
 80041f0:	0800f33c 	.word	0x0800f33c

080041f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004204:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d11f      	bne.n	800424e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b03      	cmp	r3, #3
 8004212:	d856      	bhi.n	80042c2 <DMA_CheckFifoParam+0xce>
 8004214:	a201      	add	r2, pc, #4	@ (adr r2, 800421c <DMA_CheckFifoParam+0x28>)
 8004216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421a:	bf00      	nop
 800421c:	0800422d 	.word	0x0800422d
 8004220:	0800423f 	.word	0x0800423f
 8004224:	0800422d 	.word	0x0800422d
 8004228:	080042c3 	.word	0x080042c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004230:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d046      	beq.n	80042c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800423c:	e043      	b.n	80042c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004242:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004246:	d140      	bne.n	80042ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800424c:	e03d      	b.n	80042ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004256:	d121      	bne.n	800429c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2b03      	cmp	r3, #3
 800425c:	d837      	bhi.n	80042ce <DMA_CheckFifoParam+0xda>
 800425e:	a201      	add	r2, pc, #4	@ (adr r2, 8004264 <DMA_CheckFifoParam+0x70>)
 8004260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004264:	08004275 	.word	0x08004275
 8004268:	0800427b 	.word	0x0800427b
 800426c:	08004275 	.word	0x08004275
 8004270:	0800428d 	.word	0x0800428d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	73fb      	strb	r3, [r7, #15]
      break;
 8004278:	e030      	b.n	80042dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d025      	beq.n	80042d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800428a:	e022      	b.n	80042d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004290:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004294:	d11f      	bne.n	80042d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800429a:	e01c      	b.n	80042d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d903      	bls.n	80042aa <DMA_CheckFifoParam+0xb6>
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	2b03      	cmp	r3, #3
 80042a6:	d003      	beq.n	80042b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042a8:	e018      	b.n	80042dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	73fb      	strb	r3, [r7, #15]
      break;
 80042ae:	e015      	b.n	80042dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00e      	beq.n	80042da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	73fb      	strb	r3, [r7, #15]
      break;
 80042c0:	e00b      	b.n	80042da <DMA_CheckFifoParam+0xe6>
      break;
 80042c2:	bf00      	nop
 80042c4:	e00a      	b.n	80042dc <DMA_CheckFifoParam+0xe8>
      break;
 80042c6:	bf00      	nop
 80042c8:	e008      	b.n	80042dc <DMA_CheckFifoParam+0xe8>
      break;
 80042ca:	bf00      	nop
 80042cc:	e006      	b.n	80042dc <DMA_CheckFifoParam+0xe8>
      break;
 80042ce:	bf00      	nop
 80042d0:	e004      	b.n	80042dc <DMA_CheckFifoParam+0xe8>
      break;
 80042d2:	bf00      	nop
 80042d4:	e002      	b.n	80042dc <DMA_CheckFifoParam+0xe8>
      break;   
 80042d6:	bf00      	nop
 80042d8:	e000      	b.n	80042dc <DMA_CheckFifoParam+0xe8>
      break;
 80042da:	bf00      	nop
    }
  } 
  
  return status; 
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop

080042ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b089      	sub	sp, #36	@ 0x24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042fe:	2300      	movs	r3, #0
 8004300:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004302:	2300      	movs	r3, #0
 8004304:	61fb      	str	r3, [r7, #28]
 8004306:	e159      	b.n	80045bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004308:	2201      	movs	r2, #1
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	4013      	ands	r3, r2
 800431a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	429a      	cmp	r2, r3
 8004322:	f040 8148 	bne.w	80045b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	2b01      	cmp	r3, #1
 8004330:	d005      	beq.n	800433e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800433a:	2b02      	cmp	r3, #2
 800433c:	d130      	bne.n	80043a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	2203      	movs	r2, #3
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	43db      	mvns	r3, r3
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	4013      	ands	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	4313      	orrs	r3, r2
 8004366:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004374:	2201      	movs	r2, #1
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	43db      	mvns	r3, r3
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	4013      	ands	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	091b      	lsrs	r3, r3, #4
 800438a:	f003 0201 	and.w	r2, r3, #1
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	4313      	orrs	r3, r2
 8004398:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f003 0303 	and.w	r3, r3, #3
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	d017      	beq.n	80043dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	2203      	movs	r2, #3
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	43db      	mvns	r3, r3
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4013      	ands	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	fa02 f303 	lsl.w	r3, r2, r3
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f003 0303 	and.w	r3, r3, #3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d123      	bne.n	8004430 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	08da      	lsrs	r2, r3, #3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3208      	adds	r2, #8
 80043f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	220f      	movs	r2, #15
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	43db      	mvns	r3, r3
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	4013      	ands	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	4313      	orrs	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	08da      	lsrs	r2, r3, #3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	3208      	adds	r2, #8
 800442a:	69b9      	ldr	r1, [r7, #24]
 800442c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	2203      	movs	r2, #3
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	43db      	mvns	r3, r3
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	4013      	ands	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f003 0203 	and.w	r2, r3, #3
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	4313      	orrs	r3, r2
 800445c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 80a2 	beq.w	80045b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	4b57      	ldr	r3, [pc, #348]	@ (80045d4 <HAL_GPIO_Init+0x2e8>)
 8004478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800447a:	4a56      	ldr	r2, [pc, #344]	@ (80045d4 <HAL_GPIO_Init+0x2e8>)
 800447c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004480:	6453      	str	r3, [r2, #68]	@ 0x44
 8004482:	4b54      	ldr	r3, [pc, #336]	@ (80045d4 <HAL_GPIO_Init+0x2e8>)
 8004484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004486:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800448e:	4a52      	ldr	r2, [pc, #328]	@ (80045d8 <HAL_GPIO_Init+0x2ec>)
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	089b      	lsrs	r3, r3, #2
 8004494:	3302      	adds	r3, #2
 8004496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800449a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	220f      	movs	r2, #15
 80044a6:	fa02 f303 	lsl.w	r3, r2, r3
 80044aa:	43db      	mvns	r3, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4013      	ands	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a49      	ldr	r2, [pc, #292]	@ (80045dc <HAL_GPIO_Init+0x2f0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d019      	beq.n	80044ee <HAL_GPIO_Init+0x202>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a48      	ldr	r2, [pc, #288]	@ (80045e0 <HAL_GPIO_Init+0x2f4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d013      	beq.n	80044ea <HAL_GPIO_Init+0x1fe>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a47      	ldr	r2, [pc, #284]	@ (80045e4 <HAL_GPIO_Init+0x2f8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00d      	beq.n	80044e6 <HAL_GPIO_Init+0x1fa>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a46      	ldr	r2, [pc, #280]	@ (80045e8 <HAL_GPIO_Init+0x2fc>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d007      	beq.n	80044e2 <HAL_GPIO_Init+0x1f6>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a45      	ldr	r2, [pc, #276]	@ (80045ec <HAL_GPIO_Init+0x300>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d101      	bne.n	80044de <HAL_GPIO_Init+0x1f2>
 80044da:	2304      	movs	r3, #4
 80044dc:	e008      	b.n	80044f0 <HAL_GPIO_Init+0x204>
 80044de:	2307      	movs	r3, #7
 80044e0:	e006      	b.n	80044f0 <HAL_GPIO_Init+0x204>
 80044e2:	2303      	movs	r3, #3
 80044e4:	e004      	b.n	80044f0 <HAL_GPIO_Init+0x204>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e002      	b.n	80044f0 <HAL_GPIO_Init+0x204>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <HAL_GPIO_Init+0x204>
 80044ee:	2300      	movs	r3, #0
 80044f0:	69fa      	ldr	r2, [r7, #28]
 80044f2:	f002 0203 	and.w	r2, r2, #3
 80044f6:	0092      	lsls	r2, r2, #2
 80044f8:	4093      	lsls	r3, r2
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004500:	4935      	ldr	r1, [pc, #212]	@ (80045d8 <HAL_GPIO_Init+0x2ec>)
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	089b      	lsrs	r3, r3, #2
 8004506:	3302      	adds	r3, #2
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800450e:	4b38      	ldr	r3, [pc, #224]	@ (80045f0 <HAL_GPIO_Init+0x304>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	43db      	mvns	r3, r3
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	4013      	ands	r3, r2
 800451c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	4313      	orrs	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004532:	4a2f      	ldr	r2, [pc, #188]	@ (80045f0 <HAL_GPIO_Init+0x304>)
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004538:	4b2d      	ldr	r3, [pc, #180]	@ (80045f0 <HAL_GPIO_Init+0x304>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	43db      	mvns	r3, r3
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	4013      	ands	r3, r2
 8004546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800455c:	4a24      	ldr	r2, [pc, #144]	@ (80045f0 <HAL_GPIO_Init+0x304>)
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004562:	4b23      	ldr	r3, [pc, #140]	@ (80045f0 <HAL_GPIO_Init+0x304>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	43db      	mvns	r3, r3
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	4013      	ands	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	4313      	orrs	r3, r2
 8004584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004586:	4a1a      	ldr	r2, [pc, #104]	@ (80045f0 <HAL_GPIO_Init+0x304>)
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800458c:	4b18      	ldr	r3, [pc, #96]	@ (80045f0 <HAL_GPIO_Init+0x304>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	43db      	mvns	r3, r3
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	4013      	ands	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045b0:	4a0f      	ldr	r2, [pc, #60]	@ (80045f0 <HAL_GPIO_Init+0x304>)
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	3301      	adds	r3, #1
 80045ba:	61fb      	str	r3, [r7, #28]
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	2b0f      	cmp	r3, #15
 80045c0:	f67f aea2 	bls.w	8004308 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045c4:	bf00      	nop
 80045c6:	bf00      	nop
 80045c8:	3724      	adds	r7, #36	@ 0x24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	40023800 	.word	0x40023800
 80045d8:	40013800 	.word	0x40013800
 80045dc:	40020000 	.word	0x40020000
 80045e0:	40020400 	.word	0x40020400
 80045e4:	40020800 	.word	0x40020800
 80045e8:	40020c00 	.word	0x40020c00
 80045ec:	40021000 	.word	0x40021000
 80045f0:	40013c00 	.word	0x40013c00

080045f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	460b      	mov	r3, r1
 80045fe:	807b      	strh	r3, [r7, #2]
 8004600:	4613      	mov	r3, r2
 8004602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004604:	787b      	ldrb	r3, [r7, #1]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800460a:	887a      	ldrh	r2, [r7, #2]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004610:	e003      	b.n	800461a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004612:	887b      	ldrh	r3, [r7, #2]
 8004614:	041a      	lsls	r2, r3, #16
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	619a      	str	r2, [r3, #24]
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
	...

08004628 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e12b      	b.n	8004892 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d106      	bne.n	8004654 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7fe f952 	bl	80028f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2224      	movs	r2, #36	@ 0x24
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 0201 	bic.w	r2, r2, #1
 800466a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800467a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800468a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800468c:	f001 fc10 	bl	8005eb0 <HAL_RCC_GetPCLK1Freq>
 8004690:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	4a81      	ldr	r2, [pc, #516]	@ (800489c <HAL_I2C_Init+0x274>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d807      	bhi.n	80046ac <HAL_I2C_Init+0x84>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4a80      	ldr	r2, [pc, #512]	@ (80048a0 <HAL_I2C_Init+0x278>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	bf94      	ite	ls
 80046a4:	2301      	movls	r3, #1
 80046a6:	2300      	movhi	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	e006      	b.n	80046ba <HAL_I2C_Init+0x92>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4a7d      	ldr	r2, [pc, #500]	@ (80048a4 <HAL_I2C_Init+0x27c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	bf94      	ite	ls
 80046b4:	2301      	movls	r3, #1
 80046b6:	2300      	movhi	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e0e7      	b.n	8004892 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4a78      	ldr	r2, [pc, #480]	@ (80048a8 <HAL_I2C_Init+0x280>)
 80046c6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ca:	0c9b      	lsrs	r3, r3, #18
 80046cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	4a6a      	ldr	r2, [pc, #424]	@ (800489c <HAL_I2C_Init+0x274>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d802      	bhi.n	80046fc <HAL_I2C_Init+0xd4>
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	3301      	adds	r3, #1
 80046fa:	e009      	b.n	8004710 <HAL_I2C_Init+0xe8>
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004702:	fb02 f303 	mul.w	r3, r2, r3
 8004706:	4a69      	ldr	r2, [pc, #420]	@ (80048ac <HAL_I2C_Init+0x284>)
 8004708:	fba2 2303 	umull	r2, r3, r2, r3
 800470c:	099b      	lsrs	r3, r3, #6
 800470e:	3301      	adds	r3, #1
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6812      	ldr	r2, [r2, #0]
 8004714:	430b      	orrs	r3, r1
 8004716:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004722:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	495c      	ldr	r1, [pc, #368]	@ (800489c <HAL_I2C_Init+0x274>)
 800472c:	428b      	cmp	r3, r1
 800472e:	d819      	bhi.n	8004764 <HAL_I2C_Init+0x13c>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	1e59      	subs	r1, r3, #1
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	fbb1 f3f3 	udiv	r3, r1, r3
 800473e:	1c59      	adds	r1, r3, #1
 8004740:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004744:	400b      	ands	r3, r1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <HAL_I2C_Init+0x138>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	1e59      	subs	r1, r3, #1
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	fbb1 f3f3 	udiv	r3, r1, r3
 8004758:	3301      	adds	r3, #1
 800475a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800475e:	e051      	b.n	8004804 <HAL_I2C_Init+0x1dc>
 8004760:	2304      	movs	r3, #4
 8004762:	e04f      	b.n	8004804 <HAL_I2C_Init+0x1dc>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d111      	bne.n	8004790 <HAL_I2C_Init+0x168>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	1e58      	subs	r0, r3, #1
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6859      	ldr	r1, [r3, #4]
 8004774:	460b      	mov	r3, r1
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	440b      	add	r3, r1
 800477a:	fbb0 f3f3 	udiv	r3, r0, r3
 800477e:	3301      	adds	r3, #1
 8004780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004784:	2b00      	cmp	r3, #0
 8004786:	bf0c      	ite	eq
 8004788:	2301      	moveq	r3, #1
 800478a:	2300      	movne	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	e012      	b.n	80047b6 <HAL_I2C_Init+0x18e>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	1e58      	subs	r0, r3, #1
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6859      	ldr	r1, [r3, #4]
 8004798:	460b      	mov	r3, r1
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	0099      	lsls	r1, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80047a6:	3301      	adds	r3, #1
 80047a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	bf0c      	ite	eq
 80047b0:	2301      	moveq	r3, #1
 80047b2:	2300      	movne	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <HAL_I2C_Init+0x196>
 80047ba:	2301      	movs	r3, #1
 80047bc:	e022      	b.n	8004804 <HAL_I2C_Init+0x1dc>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10e      	bne.n	80047e4 <HAL_I2C_Init+0x1bc>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	1e58      	subs	r0, r3, #1
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6859      	ldr	r1, [r3, #4]
 80047ce:	460b      	mov	r3, r1
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	440b      	add	r3, r1
 80047d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80047d8:	3301      	adds	r3, #1
 80047da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047e2:	e00f      	b.n	8004804 <HAL_I2C_Init+0x1dc>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	1e58      	subs	r0, r3, #1
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6859      	ldr	r1, [r3, #4]
 80047ec:	460b      	mov	r3, r1
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	0099      	lsls	r1, r3, #2
 80047f4:	440b      	add	r3, r1
 80047f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047fa:	3301      	adds	r3, #1
 80047fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004800:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004804:	6879      	ldr	r1, [r7, #4]
 8004806:	6809      	ldr	r1, [r1, #0]
 8004808:	4313      	orrs	r3, r2
 800480a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69da      	ldr	r2, [r3, #28]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	431a      	orrs	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004832:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6911      	ldr	r1, [r2, #16]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	68d2      	ldr	r2, [r2, #12]
 800483e:	4311      	orrs	r1, r2
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6812      	ldr	r2, [r2, #0]
 8004844:	430b      	orrs	r3, r1
 8004846:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695a      	ldr	r2, [r3, #20]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0201 	orr.w	r2, r2, #1
 8004872:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2220      	movs	r2, #32
 800487e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	000186a0 	.word	0x000186a0
 80048a0:	001e847f 	.word	0x001e847f
 80048a4:	003d08ff 	.word	0x003d08ff
 80048a8:	431bde83 	.word	0x431bde83
 80048ac:	10624dd3 	.word	0x10624dd3

080048b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af02      	add	r7, sp, #8
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	607a      	str	r2, [r7, #4]
 80048ba:	461a      	mov	r2, r3
 80048bc:	460b      	mov	r3, r1
 80048be:	817b      	strh	r3, [r7, #10]
 80048c0:	4613      	mov	r3, r2
 80048c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048c4:	f7fe fd50 	bl	8003368 <HAL_GetTick>
 80048c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	f040 80e0 	bne.w	8004a98 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	2319      	movs	r3, #25
 80048de:	2201      	movs	r2, #1
 80048e0:	4970      	ldr	r1, [pc, #448]	@ (8004aa4 <HAL_I2C_Master_Transmit+0x1f4>)
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 fc7e 	bl	80051e4 <I2C_WaitOnFlagUntilTimeout>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80048ee:	2302      	movs	r3, #2
 80048f0:	e0d3      	b.n	8004a9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <HAL_I2C_Master_Transmit+0x50>
 80048fc:	2302      	movs	r3, #2
 80048fe:	e0cc      	b.n	8004a9a <HAL_I2C_Master_Transmit+0x1ea>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b01      	cmp	r3, #1
 8004914:	d007      	beq.n	8004926 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f042 0201 	orr.w	r2, r2, #1
 8004924:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004934:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2221      	movs	r2, #33	@ 0x21
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2210      	movs	r2, #16
 8004942:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	893a      	ldrh	r2, [r7, #8]
 8004956:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800495c:	b29a      	uxth	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4a50      	ldr	r2, [pc, #320]	@ (8004aa8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004966:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004968:	8979      	ldrh	r1, [r7, #10]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	6a3a      	ldr	r2, [r7, #32]
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 fae8 	bl	8004f44 <I2C_MasterRequestWrite>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e08d      	b.n	8004a9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800497e:	2300      	movs	r3, #0
 8004980:	613b      	str	r3, [r7, #16]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	613b      	str	r3, [r7, #16]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	613b      	str	r3, [r7, #16]
 8004992:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004994:	e066      	b.n	8004a64 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	6a39      	ldr	r1, [r7, #32]
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 fd3c 	bl	8005418 <I2C_WaitOnTXEFlagUntilTimeout>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00d      	beq.n	80049c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d107      	bne.n	80049be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e06b      	b.n	8004a9a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c6:	781a      	ldrb	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d11b      	bne.n	8004a38 <HAL_I2C_Master_Transmit+0x188>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d017      	beq.n	8004a38 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0c:	781a      	ldrb	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	3b01      	subs	r3, #1
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a30:	3b01      	subs	r3, #1
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	6a39      	ldr	r1, [r7, #32]
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 fd33 	bl	80054a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00d      	beq.n	8004a64 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d107      	bne.n	8004a60 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a5e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e01a      	b.n	8004a9a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d194      	bne.n	8004996 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	e000      	b.n	8004a9a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004a98:	2302      	movs	r3, #2
  }
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	00100002 	.word	0x00100002
 8004aa8:	ffff0000 	.word	0xffff0000

08004aac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b08c      	sub	sp, #48	@ 0x30
 8004ab0:	af02      	add	r7, sp, #8
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	607a      	str	r2, [r7, #4]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	460b      	mov	r3, r1
 8004aba:	817b      	strh	r3, [r7, #10]
 8004abc:	4613      	mov	r3, r2
 8004abe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ac0:	f7fe fc52 	bl	8003368 <HAL_GetTick>
 8004ac4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b20      	cmp	r3, #32
 8004ad0:	f040 8217 	bne.w	8004f02 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	2319      	movs	r3, #25
 8004ada:	2201      	movs	r2, #1
 8004adc:	497c      	ldr	r1, [pc, #496]	@ (8004cd0 <HAL_I2C_Master_Receive+0x224>)
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 fb80 	bl	80051e4 <I2C_WaitOnFlagUntilTimeout>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004aea:	2302      	movs	r3, #2
 8004aec:	e20a      	b.n	8004f04 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d101      	bne.n	8004afc <HAL_I2C_Master_Receive+0x50>
 8004af8:	2302      	movs	r3, #2
 8004afa:	e203      	b.n	8004f04 <HAL_I2C_Master_Receive+0x458>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d007      	beq.n	8004b22 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f042 0201 	orr.w	r2, r2, #1
 8004b20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2222      	movs	r2, #34	@ 0x22
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2210      	movs	r2, #16
 8004b3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	893a      	ldrh	r2, [r7, #8]
 8004b52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4a5c      	ldr	r2, [pc, #368]	@ (8004cd4 <HAL_I2C_Master_Receive+0x228>)
 8004b62:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b64:	8979      	ldrh	r1, [r7, #10]
 8004b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 fa6c 	bl	8005048 <I2C_MasterRequestRead>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e1c4      	b.n	8004f04 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d113      	bne.n	8004baa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b82:	2300      	movs	r3, #0
 8004b84:	623b      	str	r3, [r7, #32]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	623b      	str	r3, [r7, #32]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	623b      	str	r3, [r7, #32]
 8004b96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ba6:	601a      	str	r2, [r3, #0]
 8004ba8:	e198      	b.n	8004edc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d11b      	bne.n	8004bea <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	61fb      	str	r3, [r7, #28]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	61fb      	str	r3, [r7, #28]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	61fb      	str	r3, [r7, #28]
 8004bd6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	e178      	b.n	8004edc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d11b      	bne.n	8004c2a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c12:	2300      	movs	r3, #0
 8004c14:	61bb      	str	r3, [r7, #24]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	61bb      	str	r3, [r7, #24]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	61bb      	str	r3, [r7, #24]
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	e158      	b.n	8004edc <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	617b      	str	r3, [r7, #20]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	617b      	str	r3, [r7, #20]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	617b      	str	r3, [r7, #20]
 8004c4e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c50:	e144      	b.n	8004edc <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c56:	2b03      	cmp	r3, #3
 8004c58:	f200 80f1 	bhi.w	8004e3e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d123      	bne.n	8004cac <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 fc65 	bl	8005538 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e145      	b.n	8004f04 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691a      	ldr	r2, [r3, #16]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c82:	b2d2      	uxtb	r2, r2
 8004c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8a:	1c5a      	adds	r2, r3, #1
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004caa:	e117      	b.n	8004edc <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d14e      	bne.n	8004d52 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cba:	2200      	movs	r2, #0
 8004cbc:	4906      	ldr	r1, [pc, #24]	@ (8004cd8 <HAL_I2C_Master_Receive+0x22c>)
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 fa90 	bl	80051e4 <I2C_WaitOnFlagUntilTimeout>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d008      	beq.n	8004cdc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e11a      	b.n	8004f04 <HAL_I2C_Master_Receive+0x458>
 8004cce:	bf00      	nop
 8004cd0:	00100002 	.word	0x00100002
 8004cd4:	ffff0000 	.word	0xffff0000
 8004cd8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691a      	ldr	r2, [r3, #16]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfe:	1c5a      	adds	r2, r3, #1
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	3b01      	subs	r3, #1
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d50:	e0c4      	b.n	8004edc <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d58:	2200      	movs	r2, #0
 8004d5a:	496c      	ldr	r1, [pc, #432]	@ (8004f0c <HAL_I2C_Master_Receive+0x460>)
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 fa41 	bl	80051e4 <I2C_WaitOnFlagUntilTimeout>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e0cb      	b.n	8004f04 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	691a      	ldr	r2, [r3, #16]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8e:	1c5a      	adds	r2, r3, #1
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db4:	2200      	movs	r2, #0
 8004db6:	4955      	ldr	r1, [pc, #340]	@ (8004f0c <HAL_I2C_Master_Receive+0x460>)
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 fa13 	bl	80051e4 <I2C_WaitOnFlagUntilTimeout>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e09d      	b.n	8004f04 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	691a      	ldr	r2, [r3, #16]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dea:	1c5a      	adds	r2, r3, #1
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	691a      	ldr	r2, [r3, #16]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e14:	b2d2      	uxtb	r2, r2
 8004e16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e26:	3b01      	subs	r3, #1
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e3c:	e04e      	b.n	8004edc <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e40:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f000 fb78 	bl	8005538 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e058      	b.n	8004f04 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	691a      	ldr	r2, [r3, #16]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5c:	b2d2      	uxtb	r2, r2
 8004e5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e64:	1c5a      	adds	r2, r3, #1
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	f003 0304 	and.w	r3, r3, #4
 8004e8e:	2b04      	cmp	r3, #4
 8004e90:	d124      	bne.n	8004edc <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e96:	2b03      	cmp	r3, #3
 8004e98:	d107      	bne.n	8004eaa <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ea8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	691a      	ldr	r2, [r3, #16]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb4:	b2d2      	uxtb	r2, r2
 8004eb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f47f aeb6 	bne.w	8004c52 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	e000      	b.n	8004f04 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004f02:	2302      	movs	r3, #2
  }
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3728      	adds	r7, #40	@ 0x28
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	00010004 	.word	0x00010004

08004f10 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f1e:	b2db      	uxtb	r3, r3
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b088      	sub	sp, #32
 8004f48:	af02      	add	r7, sp, #8
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	607a      	str	r2, [r7, #4]
 8004f4e:	603b      	str	r3, [r7, #0]
 8004f50:	460b      	mov	r3, r1
 8004f52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f58:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d006      	beq.n	8004f6e <I2C_MasterRequestWrite+0x2a>
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d003      	beq.n	8004f6e <I2C_MasterRequestWrite+0x2a>
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004f6c:	d108      	bne.n	8004f80 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	e00b      	b.n	8004f98 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f84:	2b12      	cmp	r3, #18
 8004f86:	d107      	bne.n	8004f98 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 f91d 	bl	80051e4 <I2C_WaitOnFlagUntilTimeout>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00d      	beq.n	8004fcc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fbe:	d103      	bne.n	8004fc8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fc6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e035      	b.n	8005038 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fd4:	d108      	bne.n	8004fe8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fd6:	897b      	ldrh	r3, [r7, #10]
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	461a      	mov	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004fe4:	611a      	str	r2, [r3, #16]
 8004fe6:	e01b      	b.n	8005020 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004fe8:	897b      	ldrh	r3, [r7, #10]
 8004fea:	11db      	asrs	r3, r3, #7
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	f003 0306 	and.w	r3, r3, #6
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	f063 030f 	orn	r3, r3, #15
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	490e      	ldr	r1, [pc, #56]	@ (8005040 <I2C_MasterRequestWrite+0xfc>)
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 f966 	bl	80052d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e010      	b.n	8005038 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005016:	897b      	ldrh	r3, [r7, #10]
 8005018:	b2da      	uxtb	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	4907      	ldr	r1, [pc, #28]	@ (8005044 <I2C_MasterRequestWrite+0x100>)
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 f956 	bl	80052d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e000      	b.n	8005038 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3718      	adds	r7, #24
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	00010008 	.word	0x00010008
 8005044:	00010002 	.word	0x00010002

08005048 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af02      	add	r7, sp, #8
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	607a      	str	r2, [r7, #4]
 8005052:	603b      	str	r3, [r7, #0]
 8005054:	460b      	mov	r3, r1
 8005056:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800506c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2b08      	cmp	r3, #8
 8005072:	d006      	beq.n	8005082 <I2C_MasterRequestRead+0x3a>
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d003      	beq.n	8005082 <I2C_MasterRequestRead+0x3a>
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005080:	d108      	bne.n	8005094 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	e00b      	b.n	80050ac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005098:	2b11      	cmp	r3, #17
 800509a:	d107      	bne.n	80050ac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 f893 	bl	80051e4 <I2C_WaitOnFlagUntilTimeout>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00d      	beq.n	80050e0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050d2:	d103      	bne.n	80050dc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e079      	b.n	80051d4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050e8:	d108      	bne.n	80050fc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80050ea:	897b      	ldrh	r3, [r7, #10]
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	f043 0301 	orr.w	r3, r3, #1
 80050f2:	b2da      	uxtb	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	611a      	str	r2, [r3, #16]
 80050fa:	e05f      	b.n	80051bc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80050fc:	897b      	ldrh	r3, [r7, #10]
 80050fe:	11db      	asrs	r3, r3, #7
 8005100:	b2db      	uxtb	r3, r3
 8005102:	f003 0306 	and.w	r3, r3, #6
 8005106:	b2db      	uxtb	r3, r3
 8005108:	f063 030f 	orn	r3, r3, #15
 800510c:	b2da      	uxtb	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	4930      	ldr	r1, [pc, #192]	@ (80051dc <I2C_MasterRequestRead+0x194>)
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f000 f8dc 	bl	80052d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e054      	b.n	80051d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800512a:	897b      	ldrh	r3, [r7, #10]
 800512c:	b2da      	uxtb	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	4929      	ldr	r1, [pc, #164]	@ (80051e0 <I2C_MasterRequestRead+0x198>)
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 f8cc 	bl	80052d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e044      	b.n	80051d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800514a:	2300      	movs	r3, #0
 800514c:	613b      	str	r3, [r7, #16]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	613b      	str	r3, [r7, #16]
 800515e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800516e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 f831 	bl	80051e4 <I2C_WaitOnFlagUntilTimeout>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00d      	beq.n	80051a4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005192:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005196:	d103      	bne.n	80051a0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800519e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e017      	b.n	80051d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80051a4:	897b      	ldrh	r3, [r7, #10]
 80051a6:	11db      	asrs	r3, r3, #7
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	f003 0306 	and.w	r3, r3, #6
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	f063 030e 	orn	r3, r3, #14
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	4907      	ldr	r1, [pc, #28]	@ (80051e0 <I2C_MasterRequestRead+0x198>)
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 f888 	bl	80052d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e000      	b.n	80051d4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3718      	adds	r7, #24
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	00010008 	.word	0x00010008
 80051e0:	00010002 	.word	0x00010002

080051e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	603b      	str	r3, [r7, #0]
 80051f0:	4613      	mov	r3, r2
 80051f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051f4:	e048      	b.n	8005288 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fc:	d044      	beq.n	8005288 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051fe:	f7fe f8b3 	bl	8003368 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	429a      	cmp	r2, r3
 800520c:	d302      	bcc.n	8005214 <I2C_WaitOnFlagUntilTimeout+0x30>
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d139      	bne.n	8005288 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	0c1b      	lsrs	r3, r3, #16
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b01      	cmp	r3, #1
 800521c:	d10d      	bne.n	800523a <I2C_WaitOnFlagUntilTimeout+0x56>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	43da      	mvns	r2, r3
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	4013      	ands	r3, r2
 800522a:	b29b      	uxth	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	bf0c      	ite	eq
 8005230:	2301      	moveq	r3, #1
 8005232:	2300      	movne	r3, #0
 8005234:	b2db      	uxtb	r3, r3
 8005236:	461a      	mov	r2, r3
 8005238:	e00c      	b.n	8005254 <I2C_WaitOnFlagUntilTimeout+0x70>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	43da      	mvns	r2, r3
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	4013      	ands	r3, r2
 8005246:	b29b      	uxth	r3, r3
 8005248:	2b00      	cmp	r3, #0
 800524a:	bf0c      	ite	eq
 800524c:	2301      	moveq	r3, #1
 800524e:	2300      	movne	r3, #0
 8005250:	b2db      	uxtb	r3, r3
 8005252:	461a      	mov	r2, r3
 8005254:	79fb      	ldrb	r3, [r7, #7]
 8005256:	429a      	cmp	r2, r3
 8005258:	d116      	bne.n	8005288 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2220      	movs	r2, #32
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005274:	f043 0220 	orr.w	r2, r3, #32
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e023      	b.n	80052d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	0c1b      	lsrs	r3, r3, #16
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b01      	cmp	r3, #1
 8005290:	d10d      	bne.n	80052ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	43da      	mvns	r2, r3
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	4013      	ands	r3, r2
 800529e:	b29b      	uxth	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	bf0c      	ite	eq
 80052a4:	2301      	moveq	r3, #1
 80052a6:	2300      	movne	r3, #0
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	461a      	mov	r2, r3
 80052ac:	e00c      	b.n	80052c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	43da      	mvns	r2, r3
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	4013      	ands	r3, r2
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	2b00      	cmp	r3, #0
 80052be:	bf0c      	ite	eq
 80052c0:	2301      	moveq	r3, #1
 80052c2:	2300      	movne	r3, #0
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	461a      	mov	r2, r3
 80052c8:	79fb      	ldrb	r3, [r7, #7]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d093      	beq.n	80051f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
 80052e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052e6:	e071      	b.n	80053cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052f6:	d123      	bne.n	8005340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005306:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005310:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2220      	movs	r2, #32
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532c:	f043 0204 	orr.w	r2, r3, #4
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e067      	b.n	8005410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005346:	d041      	beq.n	80053cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005348:	f7fe f80e 	bl	8003368 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	429a      	cmp	r2, r3
 8005356:	d302      	bcc.n	800535e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d136      	bne.n	80053cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	0c1b      	lsrs	r3, r3, #16
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	d10c      	bne.n	8005382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	43da      	mvns	r2, r3
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4013      	ands	r3, r2
 8005374:	b29b      	uxth	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	bf14      	ite	ne
 800537a:	2301      	movne	r3, #1
 800537c:	2300      	moveq	r3, #0
 800537e:	b2db      	uxtb	r3, r3
 8005380:	e00b      	b.n	800539a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	43da      	mvns	r2, r3
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	4013      	ands	r3, r2
 800538e:	b29b      	uxth	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	bf14      	ite	ne
 8005394:	2301      	movne	r3, #1
 8005396:	2300      	moveq	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d016      	beq.n	80053cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2220      	movs	r2, #32
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b8:	f043 0220 	orr.w	r2, r3, #32
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e021      	b.n	8005410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	0c1b      	lsrs	r3, r3, #16
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d10c      	bne.n	80053f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	43da      	mvns	r2, r3
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	4013      	ands	r3, r2
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	bf14      	ite	ne
 80053e8:	2301      	movne	r3, #1
 80053ea:	2300      	moveq	r3, #0
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	e00b      	b.n	8005408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	43da      	mvns	r2, r3
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4013      	ands	r3, r2
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	bf14      	ite	ne
 8005402:	2301      	movne	r3, #1
 8005404:	2300      	moveq	r3, #0
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	f47f af6d 	bne.w	80052e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005424:	e034      	b.n	8005490 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 f8e3 	bl	80055f2 <I2C_IsAcknowledgeFailed>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e034      	b.n	80054a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543c:	d028      	beq.n	8005490 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800543e:	f7fd ff93 	bl	8003368 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	429a      	cmp	r2, r3
 800544c:	d302      	bcc.n	8005454 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d11d      	bne.n	8005490 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800545e:	2b80      	cmp	r3, #128	@ 0x80
 8005460:	d016      	beq.n	8005490 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2220      	movs	r2, #32
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547c:	f043 0220 	orr.w	r2, r3, #32
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e007      	b.n	80054a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800549a:	2b80      	cmp	r3, #128	@ 0x80
 800549c:	d1c3      	bne.n	8005426 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054b4:	e034      	b.n	8005520 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 f89b 	bl	80055f2 <I2C_IsAcknowledgeFailed>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e034      	b.n	8005530 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054cc:	d028      	beq.n	8005520 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ce:	f7fd ff4b 	bl	8003368 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d302      	bcc.n	80054e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d11d      	bne.n	8005520 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	f003 0304 	and.w	r3, r3, #4
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	d016      	beq.n	8005520 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2220      	movs	r2, #32
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550c:	f043 0220 	orr.w	r2, r3, #32
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e007      	b.n	8005530 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	f003 0304 	and.w	r3, r3, #4
 800552a:	2b04      	cmp	r3, #4
 800552c:	d1c3      	bne.n	80054b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005544:	e049      	b.n	80055da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	f003 0310 	and.w	r3, r3, #16
 8005550:	2b10      	cmp	r3, #16
 8005552:	d119      	bne.n	8005588 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f06f 0210 	mvn.w	r2, #16
 800555c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2220      	movs	r2, #32
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e030      	b.n	80055ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005588:	f7fd feee 	bl	8003368 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	429a      	cmp	r2, r3
 8005596:	d302      	bcc.n	800559e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d11d      	bne.n	80055da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a8:	2b40      	cmp	r3, #64	@ 0x40
 80055aa:	d016      	beq.n	80055da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c6:	f043 0220 	orr.w	r2, r3, #32
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e007      	b.n	80055ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055e4:	2b40      	cmp	r3, #64	@ 0x40
 80055e6:	d1ae      	bne.n	8005546 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005604:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005608:	d11b      	bne.n	8005642 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005612:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2220      	movs	r2, #32
 800561e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562e:	f043 0204 	orr.w	r2, r3, #4
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e000      	b.n	8005644 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e267      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d075      	beq.n	800575a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800566e:	4b88      	ldr	r3, [pc, #544]	@ (8005890 <HAL_RCC_OscConfig+0x240>)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f003 030c 	and.w	r3, r3, #12
 8005676:	2b04      	cmp	r3, #4
 8005678:	d00c      	beq.n	8005694 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800567a:	4b85      	ldr	r3, [pc, #532]	@ (8005890 <HAL_RCC_OscConfig+0x240>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005682:	2b08      	cmp	r3, #8
 8005684:	d112      	bne.n	80056ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005686:	4b82      	ldr	r3, [pc, #520]	@ (8005890 <HAL_RCC_OscConfig+0x240>)
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800568e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005692:	d10b      	bne.n	80056ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005694:	4b7e      	ldr	r3, [pc, #504]	@ (8005890 <HAL_RCC_OscConfig+0x240>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d05b      	beq.n	8005758 <HAL_RCC_OscConfig+0x108>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d157      	bne.n	8005758 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e242      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056b4:	d106      	bne.n	80056c4 <HAL_RCC_OscConfig+0x74>
 80056b6:	4b76      	ldr	r3, [pc, #472]	@ (8005890 <HAL_RCC_OscConfig+0x240>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a75      	ldr	r2, [pc, #468]	@ (8005890 <HAL_RCC_OscConfig+0x240>)
 80056bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056c0:	6013      	str	r3, [r2, #0]
 80056c2:	e01d      	b.n	8005700 <HAL_RCC_OscConfig+0xb0>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80056cc:	d10c      	bne.n	80056e8 <HAL_RCC_OscConfig+0x98>
 80056ce:	4b70      	ldr	r3, [pc, #448]	@ (8005890 <HAL_RCC_OscConfig+0x240>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a6f      	ldr	r2, [pc, #444]	@ (8005890 <HAL_RCC_OscConfig+0x240>)
 80056d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056d8:	6013      	str	r3, [r2, #0]
 80056da:	4b6d      	ldr	r3, [pc, #436]	@ (8005890 <HAL_RCC_OscConfig+0x240>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a6c      	ldr	r2, [pc, #432]	@ (8005890 <HAL_RCC_OscConfig+0x240>)
 80056e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056e4:	6013      	str	r3, [r2, #0]
 80056e6:	e00b      	b.n	8005700 <HAL_RCC_OscConfig+0xb0>
 80056e8:	4b69      	ldr	r3, [pc, #420]	@ (8005890 <HAL_RCC_OscConfig+0x240>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a68      	ldr	r2, [pc, #416]	@ (8005890 <HAL_RCC_OscConfig+0x240>)
 80056ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056f2:	6013      	str	r3, [r2, #0]
 80056f4:	4b66      	ldr	r3, [pc, #408]	@ (8005890 <HAL_RCC_OscConfig+0x240>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a65      	ldr	r2, [pc, #404]	@ (8005890 <HAL_RCC_OscConfig+0x240>)
 80056fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d013      	beq.n	8005730 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005708:	f7fd fe2e 	bl	8003368 <HAL_GetTick>
 800570c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800570e:	e008      	b.n	8005722 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005710:	f7fd fe2a 	bl	8003368 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b64      	cmp	r3, #100	@ 0x64
 800571c:	d901      	bls.n	8005722 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e207      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005722:	4b5b      	ldr	r3, [pc, #364]	@ (8005890 <HAL_RCC_OscConfig+0x240>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d0f0      	beq.n	8005710 <HAL_RCC_OscConfig+0xc0>
 800572e:	e014      	b.n	800575a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005730:	f7fd fe1a 	bl	8003368 <HAL_GetTick>
 8005734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005736:	e008      	b.n	800574a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005738:	f7fd fe16 	bl	8003368 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b64      	cmp	r3, #100	@ 0x64
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e1f3      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800574a:	4b51      	ldr	r3, [pc, #324]	@ (8005890 <HAL_RCC_OscConfig+0x240>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1f0      	bne.n	8005738 <HAL_RCC_OscConfig+0xe8>
 8005756:	e000      	b.n	800575a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d063      	beq.n	800582e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005766:	4b4a      	ldr	r3, [pc, #296]	@ (8005890 <HAL_RCC_OscConfig+0x240>)
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f003 030c 	and.w	r3, r3, #12
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00b      	beq.n	800578a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005772:	4b47      	ldr	r3, [pc, #284]	@ (8005890 <HAL_RCC_OscConfig+0x240>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800577a:	2b08      	cmp	r3, #8
 800577c:	d11c      	bne.n	80057b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800577e:	4b44      	ldr	r3, [pc, #272]	@ (8005890 <HAL_RCC_OscConfig+0x240>)
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d116      	bne.n	80057b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800578a:	4b41      	ldr	r3, [pc, #260]	@ (8005890 <HAL_RCC_OscConfig+0x240>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d005      	beq.n	80057a2 <HAL_RCC_OscConfig+0x152>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d001      	beq.n	80057a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e1c7      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057a2:	4b3b      	ldr	r3, [pc, #236]	@ (8005890 <HAL_RCC_OscConfig+0x240>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	4937      	ldr	r1, [pc, #220]	@ (8005890 <HAL_RCC_OscConfig+0x240>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057b6:	e03a      	b.n	800582e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d020      	beq.n	8005802 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057c0:	4b34      	ldr	r3, [pc, #208]	@ (8005894 <HAL_RCC_OscConfig+0x244>)
 80057c2:	2201      	movs	r2, #1
 80057c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c6:	f7fd fdcf 	bl	8003368 <HAL_GetTick>
 80057ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057cc:	e008      	b.n	80057e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057ce:	f7fd fdcb 	bl	8003368 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d901      	bls.n	80057e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e1a8      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057e0:	4b2b      	ldr	r3, [pc, #172]	@ (8005890 <HAL_RCC_OscConfig+0x240>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0f0      	beq.n	80057ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ec:	4b28      	ldr	r3, [pc, #160]	@ (8005890 <HAL_RCC_OscConfig+0x240>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	00db      	lsls	r3, r3, #3
 80057fa:	4925      	ldr	r1, [pc, #148]	@ (8005890 <HAL_RCC_OscConfig+0x240>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	600b      	str	r3, [r1, #0]
 8005800:	e015      	b.n	800582e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005802:	4b24      	ldr	r3, [pc, #144]	@ (8005894 <HAL_RCC_OscConfig+0x244>)
 8005804:	2200      	movs	r2, #0
 8005806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005808:	f7fd fdae 	bl	8003368 <HAL_GetTick>
 800580c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800580e:	e008      	b.n	8005822 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005810:	f7fd fdaa 	bl	8003368 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b02      	cmp	r3, #2
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e187      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005822:	4b1b      	ldr	r3, [pc, #108]	@ (8005890 <HAL_RCC_OscConfig+0x240>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1f0      	bne.n	8005810 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0308 	and.w	r3, r3, #8
 8005836:	2b00      	cmp	r3, #0
 8005838:	d036      	beq.n	80058a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d016      	beq.n	8005870 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005842:	4b15      	ldr	r3, [pc, #84]	@ (8005898 <HAL_RCC_OscConfig+0x248>)
 8005844:	2201      	movs	r2, #1
 8005846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005848:	f7fd fd8e 	bl	8003368 <HAL_GetTick>
 800584c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800584e:	e008      	b.n	8005862 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005850:	f7fd fd8a 	bl	8003368 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	2b02      	cmp	r3, #2
 800585c:	d901      	bls.n	8005862 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e167      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005862:	4b0b      	ldr	r3, [pc, #44]	@ (8005890 <HAL_RCC_OscConfig+0x240>)
 8005864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d0f0      	beq.n	8005850 <HAL_RCC_OscConfig+0x200>
 800586e:	e01b      	b.n	80058a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005870:	4b09      	ldr	r3, [pc, #36]	@ (8005898 <HAL_RCC_OscConfig+0x248>)
 8005872:	2200      	movs	r2, #0
 8005874:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005876:	f7fd fd77 	bl	8003368 <HAL_GetTick>
 800587a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800587c:	e00e      	b.n	800589c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800587e:	f7fd fd73 	bl	8003368 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d907      	bls.n	800589c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e150      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
 8005890:	40023800 	.word	0x40023800
 8005894:	42470000 	.word	0x42470000
 8005898:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800589c:	4b88      	ldr	r3, [pc, #544]	@ (8005ac0 <HAL_RCC_OscConfig+0x470>)
 800589e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1ea      	bne.n	800587e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 8097 	beq.w	80059e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058b6:	2300      	movs	r3, #0
 80058b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058ba:	4b81      	ldr	r3, [pc, #516]	@ (8005ac0 <HAL_RCC_OscConfig+0x470>)
 80058bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10f      	bne.n	80058e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058c6:	2300      	movs	r3, #0
 80058c8:	60bb      	str	r3, [r7, #8]
 80058ca:	4b7d      	ldr	r3, [pc, #500]	@ (8005ac0 <HAL_RCC_OscConfig+0x470>)
 80058cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ce:	4a7c      	ldr	r2, [pc, #496]	@ (8005ac0 <HAL_RCC_OscConfig+0x470>)
 80058d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80058d6:	4b7a      	ldr	r3, [pc, #488]	@ (8005ac0 <HAL_RCC_OscConfig+0x470>)
 80058d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058de:	60bb      	str	r3, [r7, #8]
 80058e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058e2:	2301      	movs	r3, #1
 80058e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058e6:	4b77      	ldr	r3, [pc, #476]	@ (8005ac4 <HAL_RCC_OscConfig+0x474>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d118      	bne.n	8005924 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058f2:	4b74      	ldr	r3, [pc, #464]	@ (8005ac4 <HAL_RCC_OscConfig+0x474>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a73      	ldr	r2, [pc, #460]	@ (8005ac4 <HAL_RCC_OscConfig+0x474>)
 80058f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058fe:	f7fd fd33 	bl	8003368 <HAL_GetTick>
 8005902:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005904:	e008      	b.n	8005918 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005906:	f7fd fd2f 	bl	8003368 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	2b02      	cmp	r3, #2
 8005912:	d901      	bls.n	8005918 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e10c      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005918:	4b6a      	ldr	r3, [pc, #424]	@ (8005ac4 <HAL_RCC_OscConfig+0x474>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005920:	2b00      	cmp	r3, #0
 8005922:	d0f0      	beq.n	8005906 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d106      	bne.n	800593a <HAL_RCC_OscConfig+0x2ea>
 800592c:	4b64      	ldr	r3, [pc, #400]	@ (8005ac0 <HAL_RCC_OscConfig+0x470>)
 800592e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005930:	4a63      	ldr	r2, [pc, #396]	@ (8005ac0 <HAL_RCC_OscConfig+0x470>)
 8005932:	f043 0301 	orr.w	r3, r3, #1
 8005936:	6713      	str	r3, [r2, #112]	@ 0x70
 8005938:	e01c      	b.n	8005974 <HAL_RCC_OscConfig+0x324>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	2b05      	cmp	r3, #5
 8005940:	d10c      	bne.n	800595c <HAL_RCC_OscConfig+0x30c>
 8005942:	4b5f      	ldr	r3, [pc, #380]	@ (8005ac0 <HAL_RCC_OscConfig+0x470>)
 8005944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005946:	4a5e      	ldr	r2, [pc, #376]	@ (8005ac0 <HAL_RCC_OscConfig+0x470>)
 8005948:	f043 0304 	orr.w	r3, r3, #4
 800594c:	6713      	str	r3, [r2, #112]	@ 0x70
 800594e:	4b5c      	ldr	r3, [pc, #368]	@ (8005ac0 <HAL_RCC_OscConfig+0x470>)
 8005950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005952:	4a5b      	ldr	r2, [pc, #364]	@ (8005ac0 <HAL_RCC_OscConfig+0x470>)
 8005954:	f043 0301 	orr.w	r3, r3, #1
 8005958:	6713      	str	r3, [r2, #112]	@ 0x70
 800595a:	e00b      	b.n	8005974 <HAL_RCC_OscConfig+0x324>
 800595c:	4b58      	ldr	r3, [pc, #352]	@ (8005ac0 <HAL_RCC_OscConfig+0x470>)
 800595e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005960:	4a57      	ldr	r2, [pc, #348]	@ (8005ac0 <HAL_RCC_OscConfig+0x470>)
 8005962:	f023 0301 	bic.w	r3, r3, #1
 8005966:	6713      	str	r3, [r2, #112]	@ 0x70
 8005968:	4b55      	ldr	r3, [pc, #340]	@ (8005ac0 <HAL_RCC_OscConfig+0x470>)
 800596a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800596c:	4a54      	ldr	r2, [pc, #336]	@ (8005ac0 <HAL_RCC_OscConfig+0x470>)
 800596e:	f023 0304 	bic.w	r3, r3, #4
 8005972:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d015      	beq.n	80059a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800597c:	f7fd fcf4 	bl	8003368 <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005982:	e00a      	b.n	800599a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005984:	f7fd fcf0 	bl	8003368 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005992:	4293      	cmp	r3, r2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e0cb      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800599a:	4b49      	ldr	r3, [pc, #292]	@ (8005ac0 <HAL_RCC_OscConfig+0x470>)
 800599c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0ee      	beq.n	8005984 <HAL_RCC_OscConfig+0x334>
 80059a6:	e014      	b.n	80059d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059a8:	f7fd fcde 	bl	8003368 <HAL_GetTick>
 80059ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059ae:	e00a      	b.n	80059c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059b0:	f7fd fcda 	bl	8003368 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059be:	4293      	cmp	r3, r2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e0b5      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059c6:	4b3e      	ldr	r3, [pc, #248]	@ (8005ac0 <HAL_RCC_OscConfig+0x470>)
 80059c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1ee      	bne.n	80059b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059d2:	7dfb      	ldrb	r3, [r7, #23]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d105      	bne.n	80059e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059d8:	4b39      	ldr	r3, [pc, #228]	@ (8005ac0 <HAL_RCC_OscConfig+0x470>)
 80059da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059dc:	4a38      	ldr	r2, [pc, #224]	@ (8005ac0 <HAL_RCC_OscConfig+0x470>)
 80059de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 80a1 	beq.w	8005b30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059ee:	4b34      	ldr	r3, [pc, #208]	@ (8005ac0 <HAL_RCC_OscConfig+0x470>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 030c 	and.w	r3, r3, #12
 80059f6:	2b08      	cmp	r3, #8
 80059f8:	d05c      	beq.n	8005ab4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d141      	bne.n	8005a86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a02:	4b31      	ldr	r3, [pc, #196]	@ (8005ac8 <HAL_RCC_OscConfig+0x478>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a08:	f7fd fcae 	bl	8003368 <HAL_GetTick>
 8005a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a0e:	e008      	b.n	8005a22 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a10:	f7fd fcaa 	bl	8003368 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e087      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a22:	4b27      	ldr	r3, [pc, #156]	@ (8005ac0 <HAL_RCC_OscConfig+0x470>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1f0      	bne.n	8005a10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	69da      	ldr	r2, [r3, #28]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	431a      	orrs	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3c:	019b      	lsls	r3, r3, #6
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a44:	085b      	lsrs	r3, r3, #1
 8005a46:	3b01      	subs	r3, #1
 8005a48:	041b      	lsls	r3, r3, #16
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a50:	061b      	lsls	r3, r3, #24
 8005a52:	491b      	ldr	r1, [pc, #108]	@ (8005ac0 <HAL_RCC_OscConfig+0x470>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a58:	4b1b      	ldr	r3, [pc, #108]	@ (8005ac8 <HAL_RCC_OscConfig+0x478>)
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a5e:	f7fd fc83 	bl	8003368 <HAL_GetTick>
 8005a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a64:	e008      	b.n	8005a78 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a66:	f7fd fc7f 	bl	8003368 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d901      	bls.n	8005a78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e05c      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a78:	4b11      	ldr	r3, [pc, #68]	@ (8005ac0 <HAL_RCC_OscConfig+0x470>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d0f0      	beq.n	8005a66 <HAL_RCC_OscConfig+0x416>
 8005a84:	e054      	b.n	8005b30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a86:	4b10      	ldr	r3, [pc, #64]	@ (8005ac8 <HAL_RCC_OscConfig+0x478>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a8c:	f7fd fc6c 	bl	8003368 <HAL_GetTick>
 8005a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a92:	e008      	b.n	8005aa6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a94:	f7fd fc68 	bl	8003368 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d901      	bls.n	8005aa6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e045      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aa6:	4b06      	ldr	r3, [pc, #24]	@ (8005ac0 <HAL_RCC_OscConfig+0x470>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1f0      	bne.n	8005a94 <HAL_RCC_OscConfig+0x444>
 8005ab2:	e03d      	b.n	8005b30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d107      	bne.n	8005acc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e038      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
 8005ac0:	40023800 	.word	0x40023800
 8005ac4:	40007000 	.word	0x40007000
 8005ac8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005acc:	4b1b      	ldr	r3, [pc, #108]	@ (8005b3c <HAL_RCC_OscConfig+0x4ec>)
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d028      	beq.n	8005b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d121      	bne.n	8005b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d11a      	bne.n	8005b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005afc:	4013      	ands	r3, r2
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005b02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d111      	bne.n	8005b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b12:	085b      	lsrs	r3, r3, #1
 8005b14:	3b01      	subs	r3, #1
 8005b16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d107      	bne.n	8005b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d001      	beq.n	8005b30 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e000      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3718      	adds	r7, #24
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	40023800 	.word	0x40023800

08005b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d101      	bne.n	8005b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e0cc      	b.n	8005cee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b54:	4b68      	ldr	r3, [pc, #416]	@ (8005cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0307 	and.w	r3, r3, #7
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d90c      	bls.n	8005b7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b62:	4b65      	ldr	r3, [pc, #404]	@ (8005cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	b2d2      	uxtb	r2, r2
 8005b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b6a:	4b63      	ldr	r3, [pc, #396]	@ (8005cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0307 	and.w	r3, r3, #7
 8005b72:	683a      	ldr	r2, [r7, #0]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d001      	beq.n	8005b7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e0b8      	b.n	8005cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d020      	beq.n	8005bca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0304 	and.w	r3, r3, #4
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d005      	beq.n	8005ba0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b94:	4b59      	ldr	r3, [pc, #356]	@ (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	4a58      	ldr	r2, [pc, #352]	@ (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005b9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005b9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0308 	and.w	r3, r3, #8
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d005      	beq.n	8005bb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bac:	4b53      	ldr	r3, [pc, #332]	@ (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	4a52      	ldr	r2, [pc, #328]	@ (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005bb2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005bb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bb8:	4b50      	ldr	r3, [pc, #320]	@ (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	494d      	ldr	r1, [pc, #308]	@ (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d044      	beq.n	8005c60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d107      	bne.n	8005bee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bde:	4b47      	ldr	r3, [pc, #284]	@ (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d119      	bne.n	8005c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e07f      	b.n	8005cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d003      	beq.n	8005bfe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bfa:	2b03      	cmp	r3, #3
 8005bfc:	d107      	bne.n	8005c0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bfe:	4b3f      	ldr	r3, [pc, #252]	@ (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d109      	bne.n	8005c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e06f      	b.n	8005cee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c0e:	4b3b      	ldr	r3, [pc, #236]	@ (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e067      	b.n	8005cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c1e:	4b37      	ldr	r3, [pc, #220]	@ (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f023 0203 	bic.w	r2, r3, #3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	4934      	ldr	r1, [pc, #208]	@ (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c30:	f7fd fb9a 	bl	8003368 <HAL_GetTick>
 8005c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c36:	e00a      	b.n	8005c4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c38:	f7fd fb96 	bl	8003368 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e04f      	b.n	8005cee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c4e:	4b2b      	ldr	r3, [pc, #172]	@ (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 020c 	and.w	r2, r3, #12
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d1eb      	bne.n	8005c38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c60:	4b25      	ldr	r3, [pc, #148]	@ (8005cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0307 	and.w	r3, r3, #7
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d20c      	bcs.n	8005c88 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c6e:	4b22      	ldr	r3, [pc, #136]	@ (8005cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	b2d2      	uxtb	r2, r2
 8005c74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c76:	4b20      	ldr	r3, [pc, #128]	@ (8005cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0307 	and.w	r3, r3, #7
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d001      	beq.n	8005c88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e032      	b.n	8005cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0304 	and.w	r3, r3, #4
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d008      	beq.n	8005ca6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c94:	4b19      	ldr	r3, [pc, #100]	@ (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	4916      	ldr	r1, [pc, #88]	@ (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0308 	and.w	r3, r3, #8
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d009      	beq.n	8005cc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cb2:	4b12      	ldr	r3, [pc, #72]	@ (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	490e      	ldr	r1, [pc, #56]	@ (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005cc6:	f000 f821 	bl	8005d0c <HAL_RCC_GetSysClockFreq>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	091b      	lsrs	r3, r3, #4
 8005cd2:	f003 030f 	and.w	r3, r3, #15
 8005cd6:	490a      	ldr	r1, [pc, #40]	@ (8005d00 <HAL_RCC_ClockConfig+0x1c0>)
 8005cd8:	5ccb      	ldrb	r3, [r1, r3]
 8005cda:	fa22 f303 	lsr.w	r3, r2, r3
 8005cde:	4a09      	ldr	r2, [pc, #36]	@ (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005ce2:	4b09      	ldr	r3, [pc, #36]	@ (8005d08 <HAL_RCC_ClockConfig+0x1c8>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fd fafa 	bl	80032e0 <HAL_InitTick>

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	40023c00 	.word	0x40023c00
 8005cfc:	40023800 	.word	0x40023800
 8005d00:	0800f324 	.word	0x0800f324
 8005d04:	2000000c 	.word	0x2000000c
 8005d08:	20000010 	.word	0x20000010

08005d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d10:	b090      	sub	sp, #64	@ 0x40
 8005d12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005d14:	2300      	movs	r3, #0
 8005d16:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005d20:	2300      	movs	r3, #0
 8005d22:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d24:	4b59      	ldr	r3, [pc, #356]	@ (8005e8c <HAL_RCC_GetSysClockFreq+0x180>)
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f003 030c 	and.w	r3, r3, #12
 8005d2c:	2b08      	cmp	r3, #8
 8005d2e:	d00d      	beq.n	8005d4c <HAL_RCC_GetSysClockFreq+0x40>
 8005d30:	2b08      	cmp	r3, #8
 8005d32:	f200 80a1 	bhi.w	8005e78 <HAL_RCC_GetSysClockFreq+0x16c>
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d002      	beq.n	8005d40 <HAL_RCC_GetSysClockFreq+0x34>
 8005d3a:	2b04      	cmp	r3, #4
 8005d3c:	d003      	beq.n	8005d46 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d3e:	e09b      	b.n	8005e78 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d40:	4b53      	ldr	r3, [pc, #332]	@ (8005e90 <HAL_RCC_GetSysClockFreq+0x184>)
 8005d42:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005d44:	e09b      	b.n	8005e7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d46:	4b53      	ldr	r3, [pc, #332]	@ (8005e94 <HAL_RCC_GetSysClockFreq+0x188>)
 8005d48:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005d4a:	e098      	b.n	8005e7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d4c:	4b4f      	ldr	r3, [pc, #316]	@ (8005e8c <HAL_RCC_GetSysClockFreq+0x180>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d54:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d56:	4b4d      	ldr	r3, [pc, #308]	@ (8005e8c <HAL_RCC_GetSysClockFreq+0x180>)
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d028      	beq.n	8005db4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d62:	4b4a      	ldr	r3, [pc, #296]	@ (8005e8c <HAL_RCC_GetSysClockFreq+0x180>)
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	099b      	lsrs	r3, r3, #6
 8005d68:	2200      	movs	r2, #0
 8005d6a:	623b      	str	r3, [r7, #32]
 8005d6c:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d6e:	6a3b      	ldr	r3, [r7, #32]
 8005d70:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005d74:	2100      	movs	r1, #0
 8005d76:	4b47      	ldr	r3, [pc, #284]	@ (8005e94 <HAL_RCC_GetSysClockFreq+0x188>)
 8005d78:	fb03 f201 	mul.w	r2, r3, r1
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	fb00 f303 	mul.w	r3, r0, r3
 8005d82:	4413      	add	r3, r2
 8005d84:	4a43      	ldr	r2, [pc, #268]	@ (8005e94 <HAL_RCC_GetSysClockFreq+0x188>)
 8005d86:	fba0 1202 	umull	r1, r2, r0, r2
 8005d8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d8c:	460a      	mov	r2, r1
 8005d8e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005d90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d92:	4413      	add	r3, r2
 8005d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d98:	2200      	movs	r2, #0
 8005d9a:	61bb      	str	r3, [r7, #24]
 8005d9c:	61fa      	str	r2, [r7, #28]
 8005d9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005da2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005da6:	f7fa ff77 	bl	8000c98 <__aeabi_uldivmod>
 8005daa:	4602      	mov	r2, r0
 8005dac:	460b      	mov	r3, r1
 8005dae:	4613      	mov	r3, r2
 8005db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005db2:	e053      	b.n	8005e5c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005db4:	4b35      	ldr	r3, [pc, #212]	@ (8005e8c <HAL_RCC_GetSysClockFreq+0x180>)
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	099b      	lsrs	r3, r3, #6
 8005dba:	2200      	movs	r2, #0
 8005dbc:	613b      	str	r3, [r7, #16]
 8005dbe:	617a      	str	r2, [r7, #20]
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005dc6:	f04f 0b00 	mov.w	fp, #0
 8005dca:	4652      	mov	r2, sl
 8005dcc:	465b      	mov	r3, fp
 8005dce:	f04f 0000 	mov.w	r0, #0
 8005dd2:	f04f 0100 	mov.w	r1, #0
 8005dd6:	0159      	lsls	r1, r3, #5
 8005dd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ddc:	0150      	lsls	r0, r2, #5
 8005dde:	4602      	mov	r2, r0
 8005de0:	460b      	mov	r3, r1
 8005de2:	ebb2 080a 	subs.w	r8, r2, sl
 8005de6:	eb63 090b 	sbc.w	r9, r3, fp
 8005dea:	f04f 0200 	mov.w	r2, #0
 8005dee:	f04f 0300 	mov.w	r3, #0
 8005df2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005df6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005dfa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005dfe:	ebb2 0408 	subs.w	r4, r2, r8
 8005e02:	eb63 0509 	sbc.w	r5, r3, r9
 8005e06:	f04f 0200 	mov.w	r2, #0
 8005e0a:	f04f 0300 	mov.w	r3, #0
 8005e0e:	00eb      	lsls	r3, r5, #3
 8005e10:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e14:	00e2      	lsls	r2, r4, #3
 8005e16:	4614      	mov	r4, r2
 8005e18:	461d      	mov	r5, r3
 8005e1a:	eb14 030a 	adds.w	r3, r4, sl
 8005e1e:	603b      	str	r3, [r7, #0]
 8005e20:	eb45 030b 	adc.w	r3, r5, fp
 8005e24:	607b      	str	r3, [r7, #4]
 8005e26:	f04f 0200 	mov.w	r2, #0
 8005e2a:	f04f 0300 	mov.w	r3, #0
 8005e2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e32:	4629      	mov	r1, r5
 8005e34:	028b      	lsls	r3, r1, #10
 8005e36:	4621      	mov	r1, r4
 8005e38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e3c:	4621      	mov	r1, r4
 8005e3e:	028a      	lsls	r2, r1, #10
 8005e40:	4610      	mov	r0, r2
 8005e42:	4619      	mov	r1, r3
 8005e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e46:	2200      	movs	r2, #0
 8005e48:	60bb      	str	r3, [r7, #8]
 8005e4a:	60fa      	str	r2, [r7, #12]
 8005e4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e50:	f7fa ff22 	bl	8000c98 <__aeabi_uldivmod>
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	4613      	mov	r3, r2
 8005e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e8c <HAL_RCC_GetSysClockFreq+0x180>)
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	0c1b      	lsrs	r3, r3, #16
 8005e62:	f003 0303 	and.w	r3, r3, #3
 8005e66:	3301      	adds	r3, #1
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005e6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e74:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005e76:	e002      	b.n	8005e7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e78:	4b05      	ldr	r3, [pc, #20]	@ (8005e90 <HAL_RCC_GetSysClockFreq+0x184>)
 8005e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005e7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3740      	adds	r7, #64	@ 0x40
 8005e84:	46bd      	mov	sp, r7
 8005e86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e8a:	bf00      	nop
 8005e8c:	40023800 	.word	0x40023800
 8005e90:	00f42400 	.word	0x00f42400
 8005e94:	017d7840 	.word	0x017d7840

08005e98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e9c:	4b03      	ldr	r3, [pc, #12]	@ (8005eac <HAL_RCC_GetHCLKFreq+0x14>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	2000000c 	.word	0x2000000c

08005eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005eb4:	f7ff fff0 	bl	8005e98 <HAL_RCC_GetHCLKFreq>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	4b05      	ldr	r3, [pc, #20]	@ (8005ed0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	0a9b      	lsrs	r3, r3, #10
 8005ec0:	f003 0307 	and.w	r3, r3, #7
 8005ec4:	4903      	ldr	r1, [pc, #12]	@ (8005ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ec6:	5ccb      	ldrb	r3, [r1, r3]
 8005ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	40023800 	.word	0x40023800
 8005ed4:	0800f334 	.word	0x0800f334

08005ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005edc:	f7ff ffdc 	bl	8005e98 <HAL_RCC_GetHCLKFreq>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	4b05      	ldr	r3, [pc, #20]	@ (8005ef8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	0b5b      	lsrs	r3, r3, #13
 8005ee8:	f003 0307 	and.w	r3, r3, #7
 8005eec:	4903      	ldr	r1, [pc, #12]	@ (8005efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005eee:	5ccb      	ldrb	r3, [r1, r3]
 8005ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	40023800 	.word	0x40023800
 8005efc:	0800f334 	.word	0x0800f334

08005f00 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e022      	b.n	8005f58 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d105      	bne.n	8005f2a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f7fc fdc9 	bl	8002abc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2203      	movs	r2, #3
 8005f2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f814 	bl	8005f60 <HAL_SD_InitCard>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e00a      	b.n	8005f58 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005f60:	b5b0      	push	{r4, r5, r7, lr}
 8005f62:	b08e      	sub	sp, #56	@ 0x38
 8005f64:	af04      	add	r7, sp, #16
 8005f66:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005f70:	2300      	movs	r3, #0
 8005f72:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005f74:	2300      	movs	r3, #0
 8005f76:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005f7c:	2376      	movs	r3, #118	@ 0x76
 8005f7e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681d      	ldr	r5, [r3, #0]
 8005f84:	466c      	mov	r4, sp
 8005f86:	f107 0314 	add.w	r3, r7, #20
 8005f8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005f8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005f92:	f107 0308 	add.w	r3, r7, #8
 8005f96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f98:	4628      	mov	r0, r5
 8005f9a:	f002 fff9 	bl	8008f90 <SDIO_Init>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8005fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e04f      	b.n	8006050 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005fb0:	4b29      	ldr	r3, [pc, #164]	@ (8006058 <HAL_SD_InitCard+0xf8>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f003 f831 	bl	8009022 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005fc0:	4b25      	ldr	r3, [pc, #148]	@ (8006058 <HAL_SD_InitCard+0xf8>)
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005fc6:	2002      	movs	r0, #2
 8005fc8:	f7fd f9da 	bl	8003380 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f001 f805 	bl	8006fdc <SD_PowerON>
 8005fd2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00b      	beq.n	8005ff2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	431a      	orrs	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e02e      	b.n	8006050 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 ff24 	bl	8006e40 <SD_InitCard>
 8005ff8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00b      	beq.n	8006018 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800600c:	6a3b      	ldr	r3, [r7, #32]
 800600e:	431a      	orrs	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e01b      	b.n	8006050 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006020:	4618      	mov	r0, r3
 8006022:	f003 f890 	bl	8009146 <SDMMC_CmdBlockLength>
 8006026:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006028:	6a3b      	ldr	r3, [r7, #32]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00f      	beq.n	800604e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a0a      	ldr	r2, [pc, #40]	@ (800605c <HAL_SD_InitCard+0xfc>)
 8006034:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	431a      	orrs	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e000      	b.n	8006050 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3728      	adds	r7, #40	@ 0x28
 8006054:	46bd      	mov	sp, r7
 8006056:	bdb0      	pop	{r4, r5, r7, pc}
 8006058:	422580a0 	.word	0x422580a0
 800605c:	004005ff 	.word	0x004005ff

08006060 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b08c      	sub	sp, #48	@ 0x30
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
 800606c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d107      	bne.n	8006088 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800607c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e0c0      	b.n	800620a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b01      	cmp	r3, #1
 8006092:	f040 80b9 	bne.w	8006208 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800609c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	441a      	add	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d907      	bls.n	80060ba <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ae:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e0a7      	b.n	800620a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2203      	movs	r2, #3
 80060be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2200      	movs	r2, #0
 80060c8:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	6812      	ldr	r2, [r2, #0]
 80060d4:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 80060d8:	f043 0302 	orr.w	r3, r3, #2
 80060dc:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e2:	4a4c      	ldr	r2, [pc, #304]	@ (8006214 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80060e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ea:	4a4b      	ldr	r2, [pc, #300]	@ (8006218 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80060ec:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f2:	2200      	movs	r2, #0
 80060f4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060fa:	2200      	movs	r2, #0
 80060fc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610e:	689a      	ldr	r2, [r3, #8]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3380      	adds	r3, #128	@ 0x80
 8006124:	4619      	mov	r1, r3
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	025b      	lsls	r3, r3, #9
 800612c:	089b      	lsrs	r3, r3, #2
 800612e:	f7fd fd7d 	bl	8003c2c <HAL_DMA_Start_IT>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d017      	beq.n	8006168 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8006146:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a33      	ldr	r2, [pc, #204]	@ (800621c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800614e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006154:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e050      	b.n	800620a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006168:	4b2d      	ldr	r3, [pc, #180]	@ (8006220 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800616a:	2201      	movs	r2, #1
 800616c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006172:	2b01      	cmp	r3, #1
 8006174:	d002      	beq.n	800617c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8006176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006178:	025b      	lsls	r3, r3, #9
 800617a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800617c:	f04f 33ff 	mov.w	r3, #4294967295
 8006180:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	025b      	lsls	r3, r3, #9
 8006186:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006188:	2390      	movs	r3, #144	@ 0x90
 800618a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800618c:	2302      	movs	r3, #2
 800618e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006190:	2300      	movs	r3, #0
 8006192:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006194:	2301      	movs	r3, #1
 8006196:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f107 0210 	add.w	r2, r7, #16
 80061a0:	4611      	mov	r1, r2
 80061a2:	4618      	mov	r0, r3
 80061a4:	f002 ffa3 	bl	80090ee <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d90a      	bls.n	80061c4 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2282      	movs	r2, #130	@ 0x82
 80061b2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061ba:	4618      	mov	r0, r3
 80061bc:	f003 f807 	bl	80091ce <SDMMC_CmdReadMultiBlock>
 80061c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80061c2:	e009      	b.n	80061d8 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2281      	movs	r2, #129	@ 0x81
 80061c8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061d0:	4618      	mov	r0, r3
 80061d2:	f002 ffda 	bl	800918a <SDMMC_CmdReadSingleBlock>
 80061d6:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80061d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d012      	beq.n	8006204 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a0e      	ldr	r2, [pc, #56]	@ (800621c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80061e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ec:	431a      	orrs	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e002      	b.n	800620a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8006204:	2300      	movs	r3, #0
 8006206:	e000      	b.n	800620a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8006208:	2302      	movs	r3, #2
  }
}
 800620a:	4618      	mov	r0, r3
 800620c:	3730      	adds	r7, #48	@ 0x30
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	08006c4f 	.word	0x08006c4f
 8006218:	08006cc1 	.word	0x08006cc1
 800621c:	004005ff 	.word	0x004005ff
 8006220:	4225858c 	.word	0x4225858c

08006224 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b08c      	sub	sp, #48	@ 0x30
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
 8006230:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d107      	bne.n	800624c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006240:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e0c5      	b.n	80063d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b01      	cmp	r3, #1
 8006256:	f040 80be 	bne.w	80063d6 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006260:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	441a      	add	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800626a:	429a      	cmp	r2, r3
 800626c:	d907      	bls.n	800627e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006272:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e0ac      	b.n	80063d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2203      	movs	r2, #3
 8006282:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2200      	movs	r2, #0
 800628c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	6812      	ldr	r2, [r2, #0]
 8006298:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 800629c:	f043 0302 	orr.w	r3, r3, #2
 80062a0:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062a6:	4a4e      	ldr	r2, [pc, #312]	@ (80063e0 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80062a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ae:	4a4d      	ldr	r2, [pc, #308]	@ (80063e4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80062b0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062b6:	2200      	movs	r2, #0
 80062b8:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d002      	beq.n	80062c8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80062c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c4:	025b      	lsls	r3, r3, #9
 80062c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d90a      	bls.n	80062e4 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	22a0      	movs	r2, #160	@ 0xa0
 80062d2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062da:	4618      	mov	r0, r3
 80062dc:	f002 ffbb 	bl	8009256 <SDMMC_CmdWriteMultiBlock>
 80062e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80062e2:	e009      	b.n	80062f8 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2290      	movs	r2, #144	@ 0x90
 80062e8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062f0:	4618      	mov	r0, r3
 80062f2:	f002 ff8e 	bl	8009212 <SDMMC_CmdWriteSingleBlock>
 80062f6:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80062f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d012      	beq.n	8006324 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a39      	ldr	r2, [pc, #228]	@ (80063e8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006304:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800630a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800630c:	431a      	orrs	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e059      	b.n	80063d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006324:	4b31      	ldr	r3, [pc, #196]	@ (80063ec <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006326:	2201      	movs	r2, #1
 8006328:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800632e:	2240      	movs	r2, #64	@ 0x40
 8006330:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006352:	68b9      	ldr	r1, [r7, #8]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3380      	adds	r3, #128	@ 0x80
 800635a:	461a      	mov	r2, r3
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	025b      	lsls	r3, r3, #9
 8006360:	089b      	lsrs	r3, r3, #2
 8006362:	f7fd fc63 	bl	8003c2c <HAL_DMA_Start_IT>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d01c      	beq.n	80063a6 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	6812      	ldr	r2, [r2, #0]
 8006376:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 800637a:	f023 0302 	bic.w	r3, r3, #2
 800637e:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a18      	ldr	r2, [pc, #96]	@ (80063e8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006386:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800638c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e018      	b.n	80063d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80063a6:	f04f 33ff 	mov.w	r3, #4294967295
 80063aa:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	025b      	lsls	r3, r3, #9
 80063b0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80063b2:	2390      	movs	r3, #144	@ 0x90
 80063b4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80063b6:	2300      	movs	r3, #0
 80063b8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80063ba:	2300      	movs	r3, #0
 80063bc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80063be:	2301      	movs	r3, #1
 80063c0:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f107 0210 	add.w	r2, r7, #16
 80063ca:	4611      	mov	r1, r2
 80063cc:	4618      	mov	r0, r3
 80063ce:	f002 fe8e 	bl	80090ee <SDIO_ConfigData>

      return HAL_OK;
 80063d2:	2300      	movs	r3, #0
 80063d4:	e000      	b.n	80063d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80063d6:	2302      	movs	r3, #2
  }
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3730      	adds	r7, #48	@ 0x30
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	08006c25 	.word	0x08006c25
 80063e4:	08006cc1 	.word	0x08006cc1
 80063e8:	004005ff 	.word	0x004005ff
 80063ec:	4225858c 	.word	0x4225858c

080063f0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063fc:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006404:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d008      	beq.n	800641e <HAL_SD_IRQHandler+0x2e>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f003 0308 	and.w	r3, r3, #8
 8006412:	2b00      	cmp	r3, #0
 8006414:	d003      	beq.n	800641e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f001 f806 	bl	8007428 <SD_Read_IT>
 800641c:	e165      	b.n	80066ea <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 808f 	beq.w	800654c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006436:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	6812      	ldr	r2, [r2, #0]
 8006442:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8006446:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800644a:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f022 0201 	bic.w	r2, r2, #1
 800645a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f003 0308 	and.w	r3, r3, #8
 8006462:	2b00      	cmp	r3, #0
 8006464:	d039      	beq.n	80064da <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f003 0302 	and.w	r3, r3, #2
 800646c:	2b00      	cmp	r3, #0
 800646e:	d104      	bne.n	800647a <HAL_SD_IRQHandler+0x8a>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f003 0320 	and.w	r3, r3, #32
 8006476:	2b00      	cmp	r3, #0
 8006478:	d011      	beq.n	800649e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4618      	mov	r0, r3
 8006480:	f002 ff0c 	bl	800929c <SDMMC_CmdStopTransfer>
 8006484:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d008      	beq.n	800649e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	431a      	orrs	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f92f 	bl	80066fc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f240 523a 	movw	r2, #1338	@ 0x53a
 80064a6:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d104      	bne.n	80064ca <HAL_SD_IRQHandler+0xda>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d003      	beq.n	80064d2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f003 fb72 	bl	8009bb4 <HAL_SD_RxCpltCallback>
 80064d0:	e10b      	b.n	80066ea <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f003 fb64 	bl	8009ba0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80064d8:	e107      	b.n	80066ea <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 8102 	beq.w	80066ea <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f003 0320 	and.w	r3, r3, #32
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d011      	beq.n	8006514 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f002 fed1 	bl	800929c <SDMMC_CmdStopTransfer>
 80064fa:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d008      	beq.n	8006514 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	431a      	orrs	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f8f4 	bl	80066fc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	f040 80e5 	bne.w	80066ea <HAL_SD_IRQHandler+0x2fa>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	f040 80df 	bne.w	80066ea <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f022 0208 	bic.w	r2, r2, #8
 800653a:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f003 fb2b 	bl	8009ba0 <HAL_SD_TxCpltCallback>
}
 800654a:	e0ce      	b.n	80066ea <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006552:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d008      	beq.n	800656c <HAL_SD_IRQHandler+0x17c>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f003 0308 	and.w	r3, r3, #8
 8006560:	2b00      	cmp	r3, #0
 8006562:	d003      	beq.n	800656c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 ffb0 	bl	80074ca <SD_Write_IT>
 800656a:	e0be      	b.n	80066ea <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006572:	f240 233a 	movw	r3, #570	@ 0x23a
 8006576:	4013      	ands	r3, r2
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 80b6 	beq.w	80066ea <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d005      	beq.n	8006598 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006590:	f043 0202 	orr.w	r2, r3, #2
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800659e:	f003 0308 	and.w	r3, r3, #8
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d005      	beq.n	80065b2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065aa:	f043 0208 	orr.w	r2, r3, #8
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065b8:	f003 0320 	and.w	r3, r3, #32
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d005      	beq.n	80065cc <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065c4:	f043 0220 	orr.w	r2, r3, #32
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065d2:	f003 0310 	and.w	r3, r3, #16
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d005      	beq.n	80065e6 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065de:	f043 0210 	orr.w	r2, r3, #16
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d005      	beq.n	8006600 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f8:	f043 0208 	orr.w	r2, r3, #8
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f240 723a 	movw	r2, #1850	@ 0x73a
 8006608:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	6812      	ldr	r2, [r2, #0]
 8006614:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8006618:	f023 0302 	bic.w	r3, r3, #2
 800661c:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4618      	mov	r0, r3
 8006624:	f002 fe3a 	bl	800929c <SDMMC_CmdStopTransfer>
 8006628:	4602      	mov	r2, r0
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800662e:	431a      	orrs	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f003 0308 	and.w	r3, r3, #8
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00a      	beq.n	8006654 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f855 	bl	80066fc <HAL_SD_ErrorCallback>
}
 8006652:	e04a      	b.n	80066ea <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800665a:	2b00      	cmp	r3, #0
 800665c:	d045      	beq.n	80066ea <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f003 0310 	and.w	r3, r3, #16
 8006664:	2b00      	cmp	r3, #0
 8006666:	d104      	bne.n	8006672 <HAL_SD_IRQHandler+0x282>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f003 0320 	and.w	r3, r3, #32
 800666e:	2b00      	cmp	r3, #0
 8006670:	d011      	beq.n	8006696 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006676:	4a1f      	ldr	r2, [pc, #124]	@ (80066f4 <HAL_SD_IRQHandler+0x304>)
 8006678:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800667e:	4618      	mov	r0, r3
 8006680:	f7fd fb9c 	bl	8003dbc <HAL_DMA_Abort_IT>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d02f      	beq.n	80066ea <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800668e:	4618      	mov	r0, r3
 8006690:	f000 fb68 	bl	8006d64 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006694:	e029      	b.n	80066ea <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	2b00      	cmp	r3, #0
 800669e:	d104      	bne.n	80066aa <HAL_SD_IRQHandler+0x2ba>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f003 0302 	and.w	r3, r3, #2
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d011      	beq.n	80066ce <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ae:	4a12      	ldr	r2, [pc, #72]	@ (80066f8 <HAL_SD_IRQHandler+0x308>)
 80066b0:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7fd fb80 	bl	8003dbc <HAL_DMA_Abort_IT>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d013      	beq.n	80066ea <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 fb83 	bl	8006dd2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80066cc:	e00d      	b.n	80066ea <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f003 fa52 	bl	8009b8c <HAL_SD_AbortCallback>
}
 80066e8:	e7ff      	b.n	80066ea <HAL_SD_IRQHandler+0x2fa>
 80066ea:	bf00      	nop
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	08006d65 	.word	0x08006d65
 80066f8:	08006dd3 	.word	0x08006dd3

080066fc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800671e:	0f9b      	lsrs	r3, r3, #30
 8006720:	b2da      	uxtb	r2, r3
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800672a:	0e9b      	lsrs	r3, r3, #26
 800672c:	b2db      	uxtb	r3, r3
 800672e:	f003 030f 	and.w	r3, r3, #15
 8006732:	b2da      	uxtb	r2, r3
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800673c:	0e1b      	lsrs	r3, r3, #24
 800673e:	b2db      	uxtb	r3, r3
 8006740:	f003 0303 	and.w	r3, r3, #3
 8006744:	b2da      	uxtb	r2, r3
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800674e:	0c1b      	lsrs	r3, r3, #16
 8006750:	b2da      	uxtb	r2, r3
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800675a:	0a1b      	lsrs	r3, r3, #8
 800675c:	b2da      	uxtb	r2, r3
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006766:	b2da      	uxtb	r2, r3
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006770:	0d1b      	lsrs	r3, r3, #20
 8006772:	b29a      	uxth	r2, r3
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800677c:	0c1b      	lsrs	r3, r3, #16
 800677e:	b2db      	uxtb	r3, r3
 8006780:	f003 030f 	and.w	r3, r3, #15
 8006784:	b2da      	uxtb	r2, r3
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800678e:	0bdb      	lsrs	r3, r3, #15
 8006790:	b2db      	uxtb	r3, r3
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	b2da      	uxtb	r2, r3
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067a0:	0b9b      	lsrs	r3, r3, #14
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067b2:	0b5b      	lsrs	r3, r3, #13
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067c4:	0b1b      	lsrs	r3, r3, #12
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	f003 0301 	and.w	r3, r3, #1
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2200      	movs	r2, #0
 80067d6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d163      	bne.n	80068a8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067e4:	009a      	lsls	r2, r3, #2
 80067e6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80067ea:	4013      	ands	r3, r2
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80067f0:	0f92      	lsrs	r2, r2, #30
 80067f2:	431a      	orrs	r2, r3
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067fc:	0edb      	lsrs	r3, r3, #27
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	f003 0307 	and.w	r3, r3, #7
 8006804:	b2da      	uxtb	r2, r3
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800680e:	0e1b      	lsrs	r3, r3, #24
 8006810:	b2db      	uxtb	r3, r3
 8006812:	f003 0307 	and.w	r3, r3, #7
 8006816:	b2da      	uxtb	r2, r3
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006820:	0d5b      	lsrs	r3, r3, #21
 8006822:	b2db      	uxtb	r3, r3
 8006824:	f003 0307 	and.w	r3, r3, #7
 8006828:	b2da      	uxtb	r2, r3
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006832:	0c9b      	lsrs	r3, r3, #18
 8006834:	b2db      	uxtb	r3, r3
 8006836:	f003 0307 	and.w	r3, r3, #7
 800683a:	b2da      	uxtb	r2, r3
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006844:	0bdb      	lsrs	r3, r3, #15
 8006846:	b2db      	uxtb	r3, r3
 8006848:	f003 0307 	and.w	r3, r3, #7
 800684c:	b2da      	uxtb	r2, r3
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	1c5a      	adds	r2, r3, #1
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	7e1b      	ldrb	r3, [r3, #24]
 8006860:	b2db      	uxtb	r3, r3
 8006862:	f003 0307 	and.w	r3, r3, #7
 8006866:	3302      	adds	r3, #2
 8006868:	2201      	movs	r2, #1
 800686a:	fa02 f303 	lsl.w	r3, r2, r3
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006872:	fb03 f202 	mul.w	r2, r3, r2
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	7a1b      	ldrb	r3, [r3, #8]
 800687e:	b2db      	uxtb	r3, r3
 8006880:	f003 030f 	and.w	r3, r3, #15
 8006884:	2201      	movs	r2, #1
 8006886:	409a      	lsls	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006894:	0a52      	lsrs	r2, r2, #9
 8006896:	fb03 f202 	mul.w	r2, r3, r2
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068a4:	661a      	str	r2, [r3, #96]	@ 0x60
 80068a6:	e031      	b.n	800690c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d11d      	bne.n	80068ec <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068b4:	041b      	lsls	r3, r3, #16
 80068b6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068be:	0c1b      	lsrs	r3, r3, #16
 80068c0:	431a      	orrs	r2, r3
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	3301      	adds	r3, #1
 80068cc:	029a      	lsls	r2, r3, #10
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068e0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	661a      	str	r2, [r3, #96]	@ 0x60
 80068ea:	e00f      	b.n	800690c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a58      	ldr	r2, [pc, #352]	@ (8006a54 <HAL_SD_GetCardCSD+0x344>)
 80068f2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e09d      	b.n	8006a48 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006910:	0b9b      	lsrs	r3, r3, #14
 8006912:	b2db      	uxtb	r3, r3
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	b2da      	uxtb	r2, r3
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006922:	09db      	lsrs	r3, r3, #7
 8006924:	b2db      	uxtb	r3, r3
 8006926:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800692a:	b2da      	uxtb	r2, r3
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006934:	b2db      	uxtb	r3, r3
 8006936:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800693a:	b2da      	uxtb	r2, r3
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006944:	0fdb      	lsrs	r3, r3, #31
 8006946:	b2da      	uxtb	r2, r3
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006950:	0f5b      	lsrs	r3, r3, #29
 8006952:	b2db      	uxtb	r3, r3
 8006954:	f003 0303 	and.w	r3, r3, #3
 8006958:	b2da      	uxtb	r2, r3
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006962:	0e9b      	lsrs	r3, r3, #26
 8006964:	b2db      	uxtb	r3, r3
 8006966:	f003 0307 	and.w	r3, r3, #7
 800696a:	b2da      	uxtb	r2, r3
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006974:	0d9b      	lsrs	r3, r3, #22
 8006976:	b2db      	uxtb	r3, r3
 8006978:	f003 030f 	and.w	r3, r3, #15
 800697c:	b2da      	uxtb	r2, r3
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006986:	0d5b      	lsrs	r3, r3, #21
 8006988:	b2db      	uxtb	r3, r3
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	b2da      	uxtb	r2, r3
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069a2:	0c1b      	lsrs	r3, r3, #16
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	b2da      	uxtb	r2, r3
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069b6:	0bdb      	lsrs	r3, r3, #15
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ca:	0b9b      	lsrs	r3, r3, #14
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069de:	0b5b      	lsrs	r3, r3, #13
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069f2:	0b1b      	lsrs	r3, r3, #12
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a06:	0a9b      	lsrs	r3, r3, #10
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	f003 0303 	and.w	r3, r3, #3
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a1a:	0a1b      	lsrs	r3, r3, #8
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	f003 0303 	and.w	r3, r3, #3
 8006a22:	b2da      	uxtb	r2, r3
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a2e:	085b      	lsrs	r3, r3, #1
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a36:	b2da      	uxtb	r2, r3
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr
 8006a54:	004005ff 	.word	0x004005ff

08006a58 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006ab0:	b5b0      	push	{r4, r5, r7, lr}
 8006ab2:	b08e      	sub	sp, #56	@ 0x38
 8006ab4:	af04      	add	r7, sp, #16
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006aba:	2300      	movs	r3, #0
 8006abc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2203      	movs	r2, #3
 8006ac4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006acc:	2b03      	cmp	r3, #3
 8006ace:	d02e      	beq.n	8006b2e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ad6:	d106      	bne.n	8006ae6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006adc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	639a      	str	r2, [r3, #56]	@ 0x38
 8006ae4:	e029      	b.n	8006b3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006aec:	d10a      	bne.n	8006b04 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fb2a 	bl	8007148 <SD_WideBus_Enable>
 8006af4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006afa:	6a3b      	ldr	r3, [r7, #32]
 8006afc:	431a      	orrs	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	639a      	str	r2, [r3, #56]	@ 0x38
 8006b02:	e01a      	b.n	8006b3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10a      	bne.n	8006b20 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fb67 	bl	80071de <SD_WideBus_Disable>
 8006b10:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	431a      	orrs	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	639a      	str	r2, [r3, #56]	@ 0x38
 8006b1e:	e00c      	b.n	8006b3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b24:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8006b2c:	e005      	b.n	8006b3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b32:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00b      	beq.n	8006b5a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a26      	ldr	r2, [pc, #152]	@ (8006be0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006b48:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006b58:	e01f      	b.n	8006b9a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	695b      	ldr	r3, [r3, #20]
 8006b74:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681d      	ldr	r5, [r3, #0]
 8006b80:	466c      	mov	r4, sp
 8006b82:	f107 0314 	add.w	r3, r7, #20
 8006b86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006b8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006b8e:	f107 0308 	add.w	r3, r7, #8
 8006b92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b94:	4628      	mov	r0, r5
 8006b96:	f002 f9fb 	bl	8008f90 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f002 facf 	bl	8009146 <SDMMC_CmdBlockLength>
 8006ba8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006baa:	6a3b      	ldr	r3, [r7, #32]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00c      	beq.n	8006bca <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a0a      	ldr	r2, [pc, #40]	@ (8006be0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006bb6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bbc:	6a3b      	ldr	r3, [r7, #32]
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8006bd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3728      	adds	r7, #40	@ 0x28
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8006bde:	bf00      	nop
 8006be0:	004005ff 	.word	0x004005ff

08006be4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b086      	sub	sp, #24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006bec:	2300      	movs	r3, #0
 8006bee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006bf0:	f107 030c 	add.w	r3, r7, #12
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fa7e 	bl	80070f8 <SD_SendStatus>
 8006bfc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d005      	beq.n	8006c10 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	0a5b      	lsrs	r3, r3, #9
 8006c14:	f003 030f 	and.w	r3, r3, #15
 8006c18:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006c1a:	693b      	ldr	r3, [r7, #16]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3718      	adds	r7, #24
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c30:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c40:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8006c42:	bf00      	nop
 8006c44:	3714      	adds	r7, #20
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b084      	sub	sp, #16
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c5a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c60:	2b82      	cmp	r3, #130	@ 0x82
 8006c62:	d111      	bne.n	8006c88 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f002 fb17 	bl	800929c <SDMMC_CmdStopTransfer>
 8006c6e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d008      	beq.n	8006c88 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	431a      	orrs	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f7ff fd3a 	bl	80066fc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f022 0208 	bic.w	r2, r2, #8
 8006c96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006ca0:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f002 ff7f 	bl	8009bb4 <HAL_SD_RxCpltCallback>
#endif
}
 8006cb6:	bf00      	nop
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
	...

08006cc0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ccc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7fd fa20 	bl	8004114 <HAL_DMA_GetError>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d03e      	beq.n	8006d58 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ce0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ce8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d002      	beq.n	8006cf6 <SD_DMAError+0x36>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d12d      	bne.n	8006d52 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a19      	ldr	r2, [pc, #100]	@ (8006d60 <SD_DMAError+0xa0>)
 8006cfc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8006d0c:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d12:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006d1a:	6978      	ldr	r0, [r7, #20]
 8006d1c:	f7ff ff62 	bl	8006be4 <HAL_SD_GetCardState>
 8006d20:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	2b06      	cmp	r3, #6
 8006d26:	d002      	beq.n	8006d2e <SD_DMAError+0x6e>
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	2b05      	cmp	r3, #5
 8006d2c:	d10a      	bne.n	8006d44 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4618      	mov	r0, r3
 8006d34:	f002 fab2 	bl	800929c <SDMMC_CmdStopTransfer>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d3e:	431a      	orrs	r2, r3
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006d52:	6978      	ldr	r0, [r7, #20]
 8006d54:	f7ff fcd2 	bl	80066fc <HAL_SD_ErrorCallback>
#endif
  }
}
 8006d58:	bf00      	nop
 8006d5a:	3718      	adds	r7, #24
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	004005ff 	.word	0x004005ff

08006d64 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d70:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006d7a:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f7ff ff31 	bl	8006be4 <HAL_SD_GetCardState>
 8006d82:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	2b06      	cmp	r3, #6
 8006d96:	d002      	beq.n	8006d9e <SD_DMATxAbort+0x3a>
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2b05      	cmp	r3, #5
 8006d9c:	d10a      	bne.n	8006db4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f002 fa7a 	bl	800929c <SDMMC_CmdStopTransfer>
 8006da8:	4602      	mov	r2, r0
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dae:	431a      	orrs	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d103      	bne.n	8006dc4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f002 fee5 	bl	8009b8c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006dc2:	e002      	b.n	8006dca <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f7ff fc99 	bl	80066fc <HAL_SD_ErrorCallback>
}
 8006dca:	bf00      	nop
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b084      	sub	sp, #16
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dde:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006de8:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f7ff fefa 	bl	8006be4 <HAL_SD_GetCardState>
 8006df0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	2b06      	cmp	r3, #6
 8006e04:	d002      	beq.n	8006e0c <SD_DMARxAbort+0x3a>
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	2b05      	cmp	r3, #5
 8006e0a:	d10a      	bne.n	8006e22 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4618      	mov	r0, r3
 8006e12:	f002 fa43 	bl	800929c <SDMMC_CmdStopTransfer>
 8006e16:	4602      	mov	r2, r0
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e1c:	431a      	orrs	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d103      	bne.n	8006e32 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006e2a:	68f8      	ldr	r0, [r7, #12]
 8006e2c:	f002 feae 	bl	8009b8c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006e30:	e002      	b.n	8006e38 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f7ff fc62 	bl	80066fc <HAL_SD_ErrorCallback>
}
 8006e38:	bf00      	nop
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006e40:	b5b0      	push	{r4, r5, r7, lr}
 8006e42:	b094      	sub	sp, #80	@ 0x50
 8006e44:	af04      	add	r7, sp, #16
 8006e46:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4618      	mov	r0, r3
 8006e52:	f002 f8f4 	bl	800903e <SDIO_GetPowerState>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d102      	bne.n	8006e62 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006e5c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006e60:	e0b8      	b.n	8006fd4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e66:	2b03      	cmp	r3, #3
 8006e68:	d02f      	beq.n	8006eca <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f002 fb1e 	bl	80094b0 <SDMMC_CmdSendCID>
 8006e74:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <SD_InitCard+0x40>
    {
      return errorstate;
 8006e7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e7e:	e0a9      	b.n	8006fd4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2100      	movs	r1, #0
 8006e86:	4618      	mov	r0, r3
 8006e88:	f002 f91e 	bl	80090c8 <SDIO_GetResponse>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2104      	movs	r1, #4
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f002 f915 	bl	80090c8 <SDIO_GetResponse>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2108      	movs	r1, #8
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f002 f90c 	bl	80090c8 <SDIO_GetResponse>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	210c      	movs	r1, #12
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f002 f903 	bl	80090c8 <SDIO_GetResponse>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ece:	2b03      	cmp	r3, #3
 8006ed0:	d00d      	beq.n	8006eee <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f107 020e 	add.w	r2, r7, #14
 8006eda:	4611      	mov	r1, r2
 8006edc:	4618      	mov	r0, r3
 8006ede:	f002 fb24 	bl	800952a <SDMMC_CmdSetRelAdd>
 8006ee2:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d001      	beq.n	8006eee <SD_InitCard+0xae>
    {
      return errorstate;
 8006eea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006eec:	e072      	b.n	8006fd4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ef2:	2b03      	cmp	r3, #3
 8006ef4:	d036      	beq.n	8006f64 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006ef6:	89fb      	ldrh	r3, [r7, #14]
 8006ef8:	461a      	mov	r2, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f06:	041b      	lsls	r3, r3, #16
 8006f08:	4619      	mov	r1, r3
 8006f0a:	4610      	mov	r0, r2
 8006f0c:	f002 faee 	bl	80094ec <SDMMC_CmdSendCSD>
 8006f10:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d001      	beq.n	8006f1c <SD_InitCard+0xdc>
    {
      return errorstate;
 8006f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f1a:	e05b      	b.n	8006fd4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2100      	movs	r1, #0
 8006f22:	4618      	mov	r0, r3
 8006f24:	f002 f8d0 	bl	80090c8 <SDIO_GetResponse>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2104      	movs	r1, #4
 8006f34:	4618      	mov	r0, r3
 8006f36:	f002 f8c7 	bl	80090c8 <SDIO_GetResponse>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2108      	movs	r1, #8
 8006f46:	4618      	mov	r0, r3
 8006f48:	f002 f8be 	bl	80090c8 <SDIO_GetResponse>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	210c      	movs	r1, #12
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f002 f8b5 	bl	80090c8 <SDIO_GetResponse>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2104      	movs	r1, #4
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f002 f8ac 	bl	80090c8 <SDIO_GetResponse>
 8006f70:	4603      	mov	r3, r0
 8006f72:	0d1a      	lsrs	r2, r3, #20
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006f78:	f107 0310 	add.w	r3, r7, #16
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f7ff fbc6 	bl	8006710 <HAL_SD_GetCardCSD>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d002      	beq.n	8006f90 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f8a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006f8e:	e021      	b.n	8006fd4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6819      	ldr	r1, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f98:	041b      	lsls	r3, r3, #16
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	461c      	mov	r4, r3
 8006f9e:	4615      	mov	r5, r2
 8006fa0:	4622      	mov	r2, r4
 8006fa2:	462b      	mov	r3, r5
 8006fa4:	4608      	mov	r0, r1
 8006fa6:	f002 f99b 	bl	80092e0 <SDMMC_CmdSelDesel>
 8006faa:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d001      	beq.n	8006fb6 <SD_InitCard+0x176>
  {
    return errorstate;
 8006fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fb4:	e00e      	b.n	8006fd4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681d      	ldr	r5, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	466c      	mov	r4, sp
 8006fbe:	f103 0210 	add.w	r2, r3, #16
 8006fc2:	ca07      	ldmia	r2, {r0, r1, r2}
 8006fc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006fc8:	3304      	adds	r3, #4
 8006fca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006fcc:	4628      	mov	r0, r5
 8006fce:	f001 ffdf 	bl	8008f90 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3740      	adds	r7, #64	@ 0x40
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bdb0      	pop	{r4, r5, r7, pc}

08006fdc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	617b      	str	r3, [r7, #20]
 8006fec:	2300      	movs	r3, #0
 8006fee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f002 f996 	bl	8009326 <SDMMC_CmdGoIdleState>
 8006ffa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	e072      	b.n	80070ec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4618      	mov	r0, r3
 800700c:	f002 f9a9 	bl	8009362 <SDMMC_CmdOperCond>
 8007010:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00d      	beq.n	8007034 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4618      	mov	r0, r3
 8007024:	f002 f97f 	bl	8009326 <SDMMC_CmdGoIdleState>
 8007028:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d004      	beq.n	800703a <SD_PowerON+0x5e>
    {
      return errorstate;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	e05b      	b.n	80070ec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800703e:	2b01      	cmp	r3, #1
 8007040:	d137      	bne.n	80070b2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2100      	movs	r1, #0
 8007048:	4618      	mov	r0, r3
 800704a:	f002 f9a9 	bl	80093a0 <SDMMC_CmdAppCommand>
 800704e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d02d      	beq.n	80070b2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007056:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800705a:	e047      	b.n	80070ec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2100      	movs	r1, #0
 8007062:	4618      	mov	r0, r3
 8007064:	f002 f99c 	bl	80093a0 <SDMMC_CmdAppCommand>
 8007068:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d001      	beq.n	8007074 <SD_PowerON+0x98>
    {
      return errorstate;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	e03b      	b.n	80070ec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	491e      	ldr	r1, [pc, #120]	@ (80070f4 <SD_PowerON+0x118>)
 800707a:	4618      	mov	r0, r3
 800707c:	f002 f9b2 	bl	80093e4 <SDMMC_CmdAppOperCommand>
 8007080:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d002      	beq.n	800708e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007088:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800708c:	e02e      	b.n	80070ec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2100      	movs	r1, #0
 8007094:	4618      	mov	r0, r3
 8007096:	f002 f817 	bl	80090c8 <SDIO_GetResponse>
 800709a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	0fdb      	lsrs	r3, r3, #31
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d101      	bne.n	80070a8 <SD_PowerON+0xcc>
 80070a4:	2301      	movs	r3, #1
 80070a6:	e000      	b.n	80070aa <SD_PowerON+0xce>
 80070a8:	2300      	movs	r3, #0
 80070aa:	613b      	str	r3, [r7, #16]

    count++;
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	3301      	adds	r3, #1
 80070b0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d802      	bhi.n	80070c2 <SD_PowerON+0xe6>
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d0cc      	beq.n	800705c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d902      	bls.n	80070d2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80070cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80070d0:	e00c      	b.n	80070ec <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d003      	beq.n	80070e4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	645a      	str	r2, [r3, #68]	@ 0x44
 80070e2:	e002      	b.n	80070ea <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3718      	adds	r7, #24
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	c1100000 	.word	0xc1100000

080070f8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d102      	bne.n	800710e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007108:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800710c:	e018      	b.n	8007140 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007116:	041b      	lsls	r3, r3, #16
 8007118:	4619      	mov	r1, r3
 800711a:	4610      	mov	r0, r2
 800711c:	f002 fa26 	bl	800956c <SDMMC_CmdSendStatus>
 8007120:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d001      	beq.n	800712c <SD_SendStatus+0x34>
  {
    return errorstate;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	e009      	b.n	8007140 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2100      	movs	r1, #0
 8007132:	4618      	mov	r0, r3
 8007134:	f001 ffc8 	bl	80090c8 <SDIO_GetResponse>
 8007138:	4602      	mov	r2, r0
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b086      	sub	sp, #24
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007150:	2300      	movs	r3, #0
 8007152:	60fb      	str	r3, [r7, #12]
 8007154:	2300      	movs	r3, #0
 8007156:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2100      	movs	r1, #0
 800715e:	4618      	mov	r0, r3
 8007160:	f001 ffb2 	bl	80090c8 <SDIO_GetResponse>
 8007164:	4603      	mov	r3, r0
 8007166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800716a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800716e:	d102      	bne.n	8007176 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007170:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007174:	e02f      	b.n	80071d6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007176:	f107 030c 	add.w	r3, r7, #12
 800717a:	4619      	mov	r1, r3
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 f879 	bl	8007274 <SD_FindSCR>
 8007182:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	e023      	b.n	80071d6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d01c      	beq.n	80071d2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071a0:	041b      	lsls	r3, r3, #16
 80071a2:	4619      	mov	r1, r3
 80071a4:	4610      	mov	r0, r2
 80071a6:	f002 f8fb 	bl	80093a0 <SDMMC_CmdAppCommand>
 80071aa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d001      	beq.n	80071b6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	e00f      	b.n	80071d6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2102      	movs	r1, #2
 80071bc:	4618      	mov	r0, r3
 80071be:	f002 f934 	bl	800942a <SDMMC_CmdBusWidth>
 80071c2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d001      	beq.n	80071ce <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	e003      	b.n	80071d6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80071ce:	2300      	movs	r3, #0
 80071d0:	e001      	b.n	80071d6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80071d2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3718      	adds	r7, #24
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b086      	sub	sp, #24
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80071e6:	2300      	movs	r3, #0
 80071e8:	60fb      	str	r3, [r7, #12]
 80071ea:	2300      	movs	r3, #0
 80071ec:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2100      	movs	r1, #0
 80071f4:	4618      	mov	r0, r3
 80071f6:	f001 ff67 	bl	80090c8 <SDIO_GetResponse>
 80071fa:	4603      	mov	r3, r0
 80071fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007200:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007204:	d102      	bne.n	800720c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007206:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800720a:	e02f      	b.n	800726c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800720c:	f107 030c 	add.w	r3, r7, #12
 8007210:	4619      	mov	r1, r3
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f82e 	bl	8007274 <SD_FindSCR>
 8007218:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	e023      	b.n	800726c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d01c      	beq.n	8007268 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007236:	041b      	lsls	r3, r3, #16
 8007238:	4619      	mov	r1, r3
 800723a:	4610      	mov	r0, r2
 800723c:	f002 f8b0 	bl	80093a0 <SDMMC_CmdAppCommand>
 8007240:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d001      	beq.n	800724c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	e00f      	b.n	800726c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2100      	movs	r1, #0
 8007252:	4618      	mov	r0, r3
 8007254:	f002 f8e9 	bl	800942a <SDMMC_CmdBusWidth>
 8007258:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d001      	beq.n	8007264 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	e003      	b.n	800726c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007264:	2300      	movs	r3, #0
 8007266:	e001      	b.n	800726c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007268:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800726c:	4618      	mov	r0, r3
 800726e:	3718      	adds	r7, #24
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007274:	b590      	push	{r4, r7, lr}
 8007276:	b08f      	sub	sp, #60	@ 0x3c
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800727e:	f7fc f873 	bl	8003368 <HAL_GetTick>
 8007282:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8007284:	2300      	movs	r3, #0
 8007286:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007288:	2300      	movs	r3, #0
 800728a:	60bb      	str	r3, [r7, #8]
 800728c:	2300      	movs	r3, #0
 800728e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2108      	movs	r1, #8
 800729a:	4618      	mov	r0, r3
 800729c:	f001 ff53 	bl	8009146 <SDMMC_CmdBlockLength>
 80072a0:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80072a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d001      	beq.n	80072ac <SD_FindSCR+0x38>
  {
    return errorstate;
 80072a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072aa:	e0b9      	b.n	8007420 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072b4:	041b      	lsls	r3, r3, #16
 80072b6:	4619      	mov	r1, r3
 80072b8:	4610      	mov	r0, r2
 80072ba:	f002 f871 	bl	80093a0 <SDMMC_CmdAppCommand>
 80072be:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80072c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d001      	beq.n	80072ca <SD_FindSCR+0x56>
  {
    return errorstate;
 80072c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c8:	e0aa      	b.n	8007420 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80072ca:	f04f 33ff 	mov.w	r3, #4294967295
 80072ce:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80072d0:	2308      	movs	r3, #8
 80072d2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80072d4:	2330      	movs	r3, #48	@ 0x30
 80072d6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80072d8:	2302      	movs	r3, #2
 80072da:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80072dc:	2300      	movs	r3, #0
 80072de:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80072e0:	2301      	movs	r3, #1
 80072e2:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f107 0210 	add.w	r2, r7, #16
 80072ec:	4611      	mov	r1, r2
 80072ee:	4618      	mov	r0, r3
 80072f0:	f001 fefd 	bl	80090ee <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4618      	mov	r0, r3
 80072fa:	f002 f8b8 	bl	800946e <SDMMC_CmdSendSCR>
 80072fe:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007302:	2b00      	cmp	r3, #0
 8007304:	d02a      	beq.n	800735c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007308:	e08a      	b.n	8007420 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007310:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00f      	beq.n	8007338 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6819      	ldr	r1, [r3, #0]
 800731c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	f107 0208 	add.w	r2, r7, #8
 8007324:	18d4      	adds	r4, r2, r3
 8007326:	4608      	mov	r0, r1
 8007328:	f001 fe5d 	bl	8008fe6 <SDIO_ReadFIFO>
 800732c:	4603      	mov	r3, r0
 800732e:	6023      	str	r3, [r4, #0]
      index++;
 8007330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007332:	3301      	adds	r3, #1
 8007334:	637b      	str	r3, [r7, #52]	@ 0x34
 8007336:	e006      	b.n	8007346 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800733e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d012      	beq.n	800736c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8007346:	f7fc f80f 	bl	8003368 <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007354:	d102      	bne.n	800735c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007356:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800735a:	e061      	b.n	8007420 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007362:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8007366:	2b00      	cmp	r3, #0
 8007368:	d0cf      	beq.n	800730a <SD_FindSCR+0x96>
 800736a:	e000      	b.n	800736e <SD_FindSCR+0xfa>
      break;
 800736c:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007374:	f003 0308 	and.w	r3, r3, #8
 8007378:	2b00      	cmp	r3, #0
 800737a:	d106      	bne.n	800738a <SD_FindSCR+0x116>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007382:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007386:	2b00      	cmp	r3, #0
 8007388:	d005      	beq.n	8007396 <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2208      	movs	r2, #8
 8007390:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007392:	2308      	movs	r3, #8
 8007394:	e044      	b.n	8007420 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800739c:	f003 0302 	and.w	r3, r3, #2
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d005      	beq.n	80073b0 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2202      	movs	r2, #2
 80073aa:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80073ac:	2302      	movs	r3, #2
 80073ae:	e037      	b.n	8007420 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073b6:	f003 0320 	and.w	r3, r3, #32
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d005      	beq.n	80073ca <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2220      	movs	r2, #32
 80073c4:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80073c6:	2320      	movs	r3, #32
 80073c8:	e02a      	b.n	8007420 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f240 523a 	movw	r2, #1338	@ 0x53a
 80073d2:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	061a      	lsls	r2, r3, #24
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	021b      	lsls	r3, r3, #8
 80073dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80073e0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	0a1b      	lsrs	r3, r3, #8
 80073e6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80073ea:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	0e1b      	lsrs	r3, r3, #24
 80073f0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80073f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073f4:	601a      	str	r2, [r3, #0]
    scr++;
 80073f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073f8:	3304      	adds	r3, #4
 80073fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	061a      	lsls	r2, r3, #24
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	021b      	lsls	r3, r3, #8
 8007404:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007408:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	0a1b      	lsrs	r3, r3, #8
 800740e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007412:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	0e1b      	lsrs	r3, r3, #24
 8007418:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800741a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800741c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	373c      	adds	r7, #60	@ 0x3c
 8007424:	46bd      	mov	sp, r7
 8007426:	bd90      	pop	{r4, r7, pc}

08007428 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007434:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800743a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d03f      	beq.n	80074c2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007442:	2300      	movs	r3, #0
 8007444:	617b      	str	r3, [r7, #20]
 8007446:	e033      	b.n	80074b0 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4618      	mov	r0, r3
 800744e:	f001 fdca 	bl	8008fe6 <SDIO_ReadFIFO>
 8007452:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	b2da      	uxtb	r2, r3
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	3301      	adds	r3, #1
 8007460:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	3b01      	subs	r3, #1
 8007466:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	0a1b      	lsrs	r3, r3, #8
 800746c:	b2da      	uxtb	r2, r3
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	3301      	adds	r3, #1
 8007476:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	3b01      	subs	r3, #1
 800747c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	0c1b      	lsrs	r3, r3, #16
 8007482:	b2da      	uxtb	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	3301      	adds	r3, #1
 800748c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	3b01      	subs	r3, #1
 8007492:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	0e1b      	lsrs	r3, r3, #24
 8007498:	b2da      	uxtb	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	3301      	adds	r3, #1
 80074a2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	3b01      	subs	r3, #1
 80074a8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	3301      	adds	r3, #1
 80074ae:	617b      	str	r3, [r7, #20]
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	2b07      	cmp	r3, #7
 80074b4:	d9c8      	bls.n	8007448 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	693a      	ldr	r2, [r7, #16]
 80074c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 80074c2:	bf00      	nop
 80074c4:	3718      	adds	r7, #24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b086      	sub	sp, #24
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a1b      	ldr	r3, [r3, #32]
 80074d6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074dc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d043      	beq.n	800756c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80074e4:	2300      	movs	r3, #0
 80074e6:	617b      	str	r3, [r7, #20]
 80074e8:	e037      	b.n	800755a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	60bb      	str	r3, [r7, #8]
      tmp++;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	3301      	adds	r3, #1
 80074f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	3b01      	subs	r3, #1
 80074fa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	021a      	lsls	r2, r3, #8
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	4313      	orrs	r3, r2
 8007506:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	3301      	adds	r3, #1
 800750c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	3b01      	subs	r3, #1
 8007512:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	041a      	lsls	r2, r3, #16
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	4313      	orrs	r3, r2
 800751e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	3301      	adds	r3, #1
 8007524:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	3b01      	subs	r3, #1
 800752a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	061a      	lsls	r2, r3, #24
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	4313      	orrs	r3, r2
 8007536:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	3301      	adds	r3, #1
 800753c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	3b01      	subs	r3, #1
 8007542:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f107 0208 	add.w	r2, r7, #8
 800754c:	4611      	mov	r1, r2
 800754e:	4618      	mov	r0, r3
 8007550:	f001 fd56 	bl	8009000 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	3301      	adds	r3, #1
 8007558:	617b      	str	r3, [r7, #20]
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	2b07      	cmp	r3, #7
 800755e:	d9c4      	bls.n	80074ea <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800756c:	bf00      	nop
 800756e:	3718      	adds	r7, #24
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d101      	bne.n	8007586 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e041      	b.n	800760a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d106      	bne.n	80075a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f7fb fbea 	bl	8002d74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2202      	movs	r2, #2
 80075a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	3304      	adds	r3, #4
 80075b0:	4619      	mov	r1, r3
 80075b2:	4610      	mov	r0, r2
 80075b4:	f000 fa06 	bl	80079c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3708      	adds	r7, #8
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b082      	sub	sp, #8
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e041      	b.n	80076a8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b00      	cmp	r3, #0
 800762e:	d106      	bne.n	800763e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f7fb fb4f 	bl	8002cdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2202      	movs	r2, #2
 8007642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	3304      	adds	r3, #4
 800764e:	4619      	mov	r1, r3
 8007650:	4610      	mov	r0, r2
 8007652:	f000 f9b7 	bl	80079c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2201      	movs	r2, #1
 800767a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3708      	adds	r7, #8
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076bc:	2300      	movs	r3, #0
 80076be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d101      	bne.n	80076ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80076ca:	2302      	movs	r3, #2
 80076cc:	e0ae      	b.n	800782c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2b0c      	cmp	r3, #12
 80076da:	f200 809f 	bhi.w	800781c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80076de:	a201      	add	r2, pc, #4	@ (adr r2, 80076e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80076e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e4:	08007719 	.word	0x08007719
 80076e8:	0800781d 	.word	0x0800781d
 80076ec:	0800781d 	.word	0x0800781d
 80076f0:	0800781d 	.word	0x0800781d
 80076f4:	08007759 	.word	0x08007759
 80076f8:	0800781d 	.word	0x0800781d
 80076fc:	0800781d 	.word	0x0800781d
 8007700:	0800781d 	.word	0x0800781d
 8007704:	0800779b 	.word	0x0800779b
 8007708:	0800781d 	.word	0x0800781d
 800770c:	0800781d 	.word	0x0800781d
 8007710:	0800781d 	.word	0x0800781d
 8007714:	080077db 	.word	0x080077db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68b9      	ldr	r1, [r7, #8]
 800771e:	4618      	mov	r0, r3
 8007720:	f000 f9dc 	bl	8007adc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	699a      	ldr	r2, [r3, #24]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f042 0208 	orr.w	r2, r2, #8
 8007732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	699a      	ldr	r2, [r3, #24]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f022 0204 	bic.w	r2, r2, #4
 8007742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	6999      	ldr	r1, [r3, #24]
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	691a      	ldr	r2, [r3, #16]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	430a      	orrs	r2, r1
 8007754:	619a      	str	r2, [r3, #24]
      break;
 8007756:	e064      	b.n	8007822 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68b9      	ldr	r1, [r7, #8]
 800775e:	4618      	mov	r0, r3
 8007760:	f000 fa22 	bl	8007ba8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	699a      	ldr	r2, [r3, #24]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	699a      	ldr	r2, [r3, #24]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	6999      	ldr	r1, [r3, #24]
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	021a      	lsls	r2, r3, #8
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	430a      	orrs	r2, r1
 8007796:	619a      	str	r2, [r3, #24]
      break;
 8007798:	e043      	b.n	8007822 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68b9      	ldr	r1, [r7, #8]
 80077a0:	4618      	mov	r0, r3
 80077a2:	f000 fa6d 	bl	8007c80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	69da      	ldr	r2, [r3, #28]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f042 0208 	orr.w	r2, r2, #8
 80077b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	69da      	ldr	r2, [r3, #28]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f022 0204 	bic.w	r2, r2, #4
 80077c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	69d9      	ldr	r1, [r3, #28]
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	691a      	ldr	r2, [r3, #16]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	430a      	orrs	r2, r1
 80077d6:	61da      	str	r2, [r3, #28]
      break;
 80077d8:	e023      	b.n	8007822 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68b9      	ldr	r1, [r7, #8]
 80077e0:	4618      	mov	r0, r3
 80077e2:	f000 fab7 	bl	8007d54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	69da      	ldr	r2, [r3, #28]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	69da      	ldr	r2, [r3, #28]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007804:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	69d9      	ldr	r1, [r3, #28]
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	021a      	lsls	r2, r3, #8
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	430a      	orrs	r2, r1
 8007818:	61da      	str	r2, [r3, #28]
      break;
 800781a:	e002      	b.n	8007822 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	75fb      	strb	r3, [r7, #23]
      break;
 8007820:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800782a:	7dfb      	ldrb	r3, [r7, #23]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3718      	adds	r7, #24
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007848:	2b01      	cmp	r3, #1
 800784a:	d101      	bne.n	8007850 <HAL_TIM_ConfigClockSource+0x1c>
 800784c:	2302      	movs	r3, #2
 800784e:	e0b4      	b.n	80079ba <HAL_TIM_ConfigClockSource+0x186>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2202      	movs	r2, #2
 800785c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800786e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007876:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007888:	d03e      	beq.n	8007908 <HAL_TIM_ConfigClockSource+0xd4>
 800788a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800788e:	f200 8087 	bhi.w	80079a0 <HAL_TIM_ConfigClockSource+0x16c>
 8007892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007896:	f000 8086 	beq.w	80079a6 <HAL_TIM_ConfigClockSource+0x172>
 800789a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800789e:	d87f      	bhi.n	80079a0 <HAL_TIM_ConfigClockSource+0x16c>
 80078a0:	2b70      	cmp	r3, #112	@ 0x70
 80078a2:	d01a      	beq.n	80078da <HAL_TIM_ConfigClockSource+0xa6>
 80078a4:	2b70      	cmp	r3, #112	@ 0x70
 80078a6:	d87b      	bhi.n	80079a0 <HAL_TIM_ConfigClockSource+0x16c>
 80078a8:	2b60      	cmp	r3, #96	@ 0x60
 80078aa:	d050      	beq.n	800794e <HAL_TIM_ConfigClockSource+0x11a>
 80078ac:	2b60      	cmp	r3, #96	@ 0x60
 80078ae:	d877      	bhi.n	80079a0 <HAL_TIM_ConfigClockSource+0x16c>
 80078b0:	2b50      	cmp	r3, #80	@ 0x50
 80078b2:	d03c      	beq.n	800792e <HAL_TIM_ConfigClockSource+0xfa>
 80078b4:	2b50      	cmp	r3, #80	@ 0x50
 80078b6:	d873      	bhi.n	80079a0 <HAL_TIM_ConfigClockSource+0x16c>
 80078b8:	2b40      	cmp	r3, #64	@ 0x40
 80078ba:	d058      	beq.n	800796e <HAL_TIM_ConfigClockSource+0x13a>
 80078bc:	2b40      	cmp	r3, #64	@ 0x40
 80078be:	d86f      	bhi.n	80079a0 <HAL_TIM_ConfigClockSource+0x16c>
 80078c0:	2b30      	cmp	r3, #48	@ 0x30
 80078c2:	d064      	beq.n	800798e <HAL_TIM_ConfigClockSource+0x15a>
 80078c4:	2b30      	cmp	r3, #48	@ 0x30
 80078c6:	d86b      	bhi.n	80079a0 <HAL_TIM_ConfigClockSource+0x16c>
 80078c8:	2b20      	cmp	r3, #32
 80078ca:	d060      	beq.n	800798e <HAL_TIM_ConfigClockSource+0x15a>
 80078cc:	2b20      	cmp	r3, #32
 80078ce:	d867      	bhi.n	80079a0 <HAL_TIM_ConfigClockSource+0x16c>
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d05c      	beq.n	800798e <HAL_TIM_ConfigClockSource+0x15a>
 80078d4:	2b10      	cmp	r3, #16
 80078d6:	d05a      	beq.n	800798e <HAL_TIM_ConfigClockSource+0x15a>
 80078d8:	e062      	b.n	80079a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078ea:	f000 fafd 	bl	8007ee8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80078fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	609a      	str	r2, [r3, #8]
      break;
 8007906:	e04f      	b.n	80079a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007918:	f000 fae6 	bl	8007ee8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	689a      	ldr	r2, [r3, #8]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800792a:	609a      	str	r2, [r3, #8]
      break;
 800792c:	e03c      	b.n	80079a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800793a:	461a      	mov	r2, r3
 800793c:	f000 fa5a 	bl	8007df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2150      	movs	r1, #80	@ 0x50
 8007946:	4618      	mov	r0, r3
 8007948:	f000 fab3 	bl	8007eb2 <TIM_ITRx_SetConfig>
      break;
 800794c:	e02c      	b.n	80079a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800795a:	461a      	mov	r2, r3
 800795c:	f000 fa79 	bl	8007e52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2160      	movs	r1, #96	@ 0x60
 8007966:	4618      	mov	r0, r3
 8007968:	f000 faa3 	bl	8007eb2 <TIM_ITRx_SetConfig>
      break;
 800796c:	e01c      	b.n	80079a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800797a:	461a      	mov	r2, r3
 800797c:	f000 fa3a 	bl	8007df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2140      	movs	r1, #64	@ 0x40
 8007986:	4618      	mov	r0, r3
 8007988:	f000 fa93 	bl	8007eb2 <TIM_ITRx_SetConfig>
      break;
 800798c:	e00c      	b.n	80079a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4619      	mov	r1, r3
 8007998:	4610      	mov	r0, r2
 800799a:	f000 fa8a 	bl	8007eb2 <TIM_ITRx_SetConfig>
      break;
 800799e:	e003      	b.n	80079a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	73fb      	strb	r3, [r7, #15]
      break;
 80079a4:	e000      	b.n	80079a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80079a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
	...

080079c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a3a      	ldr	r2, [pc, #232]	@ (8007ac0 <TIM_Base_SetConfig+0xfc>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d00f      	beq.n	80079fc <TIM_Base_SetConfig+0x38>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079e2:	d00b      	beq.n	80079fc <TIM_Base_SetConfig+0x38>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a37      	ldr	r2, [pc, #220]	@ (8007ac4 <TIM_Base_SetConfig+0x100>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d007      	beq.n	80079fc <TIM_Base_SetConfig+0x38>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a36      	ldr	r2, [pc, #216]	@ (8007ac8 <TIM_Base_SetConfig+0x104>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d003      	beq.n	80079fc <TIM_Base_SetConfig+0x38>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4a35      	ldr	r2, [pc, #212]	@ (8007acc <TIM_Base_SetConfig+0x108>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d108      	bne.n	8007a0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a2b      	ldr	r2, [pc, #172]	@ (8007ac0 <TIM_Base_SetConfig+0xfc>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d01b      	beq.n	8007a4e <TIM_Base_SetConfig+0x8a>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a1c:	d017      	beq.n	8007a4e <TIM_Base_SetConfig+0x8a>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a28      	ldr	r2, [pc, #160]	@ (8007ac4 <TIM_Base_SetConfig+0x100>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d013      	beq.n	8007a4e <TIM_Base_SetConfig+0x8a>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a27      	ldr	r2, [pc, #156]	@ (8007ac8 <TIM_Base_SetConfig+0x104>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d00f      	beq.n	8007a4e <TIM_Base_SetConfig+0x8a>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a26      	ldr	r2, [pc, #152]	@ (8007acc <TIM_Base_SetConfig+0x108>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d00b      	beq.n	8007a4e <TIM_Base_SetConfig+0x8a>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a25      	ldr	r2, [pc, #148]	@ (8007ad0 <TIM_Base_SetConfig+0x10c>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d007      	beq.n	8007a4e <TIM_Base_SetConfig+0x8a>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a24      	ldr	r2, [pc, #144]	@ (8007ad4 <TIM_Base_SetConfig+0x110>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d003      	beq.n	8007a4e <TIM_Base_SetConfig+0x8a>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a23      	ldr	r2, [pc, #140]	@ (8007ad8 <TIM_Base_SetConfig+0x114>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d108      	bne.n	8007a60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	689a      	ldr	r2, [r3, #8]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a0e      	ldr	r2, [pc, #56]	@ (8007ac0 <TIM_Base_SetConfig+0xfc>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d103      	bne.n	8007a94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	691a      	ldr	r2, [r3, #16]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d105      	bne.n	8007ab2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	f023 0201 	bic.w	r2, r3, #1
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	611a      	str	r2, [r3, #16]
  }
}
 8007ab2:	bf00      	nop
 8007ab4:	3714      	adds	r7, #20
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	40010000 	.word	0x40010000
 8007ac4:	40000400 	.word	0x40000400
 8007ac8:	40000800 	.word	0x40000800
 8007acc:	40000c00 	.word	0x40000c00
 8007ad0:	40014000 	.word	0x40014000
 8007ad4:	40014400 	.word	0x40014400
 8007ad8:	40014800 	.word	0x40014800

08007adc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b087      	sub	sp, #28
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a1b      	ldr	r3, [r3, #32]
 8007af0:	f023 0201 	bic.w	r2, r3, #1
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f023 0303 	bic.w	r3, r3, #3
 8007b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f023 0302 	bic.w	r3, r3, #2
 8007b24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a1c      	ldr	r2, [pc, #112]	@ (8007ba4 <TIM_OC1_SetConfig+0xc8>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d10c      	bne.n	8007b52 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	f023 0308 	bic.w	r3, r3, #8
 8007b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	697a      	ldr	r2, [r7, #20]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	f023 0304 	bic.w	r3, r3, #4
 8007b50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a13      	ldr	r2, [pc, #76]	@ (8007ba4 <TIM_OC1_SetConfig+0xc8>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d111      	bne.n	8007b7e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007b68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	693a      	ldr	r2, [r7, #16]
 8007b82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	621a      	str	r2, [r3, #32]
}
 8007b98:	bf00      	nop
 8007b9a:	371c      	adds	r7, #28
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr
 8007ba4:	40010000 	.word	0x40010000

08007ba8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b087      	sub	sp, #28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
 8007bb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a1b      	ldr	r3, [r3, #32]
 8007bbc:	f023 0210 	bic.w	r2, r3, #16
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	021b      	lsls	r3, r3, #8
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f023 0320 	bic.w	r3, r3, #32
 8007bf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	011b      	lsls	r3, r3, #4
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a1e      	ldr	r2, [pc, #120]	@ (8007c7c <TIM_OC2_SetConfig+0xd4>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d10d      	bne.n	8007c24 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	011b      	lsls	r3, r3, #4
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a15      	ldr	r2, [pc, #84]	@ (8007c7c <TIM_OC2_SetConfig+0xd4>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d113      	bne.n	8007c54 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	695b      	ldr	r3, [r3, #20]
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	685a      	ldr	r2, [r3, #4]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	697a      	ldr	r2, [r7, #20]
 8007c6c:	621a      	str	r2, [r3, #32]
}
 8007c6e:	bf00      	nop
 8007c70:	371c      	adds	r7, #28
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	40010000 	.word	0x40010000

08007c80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b087      	sub	sp, #28
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a1b      	ldr	r3, [r3, #32]
 8007c8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6a1b      	ldr	r3, [r3, #32]
 8007c94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	69db      	ldr	r3, [r3, #28]
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f023 0303 	bic.w	r3, r3, #3
 8007cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007cc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	021b      	lsls	r3, r3, #8
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8007d50 <TIM_OC3_SetConfig+0xd0>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d10d      	bne.n	8007cfa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007ce4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	021b      	lsls	r3, r3, #8
 8007cec:	697a      	ldr	r2, [r7, #20]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007cf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a14      	ldr	r2, [pc, #80]	@ (8007d50 <TIM_OC3_SetConfig+0xd0>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d113      	bne.n	8007d2a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	695b      	ldr	r3, [r3, #20]
 8007d16:	011b      	lsls	r3, r3, #4
 8007d18:	693a      	ldr	r2, [r7, #16]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	011b      	lsls	r3, r3, #4
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	693a      	ldr	r2, [r7, #16]
 8007d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	685a      	ldr	r2, [r3, #4]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	621a      	str	r2, [r3, #32]
}
 8007d44:	bf00      	nop
 8007d46:	371c      	adds	r7, #28
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr
 8007d50:	40010000 	.word	0x40010000

08007d54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b087      	sub	sp, #28
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a1b      	ldr	r3, [r3, #32]
 8007d62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	69db      	ldr	r3, [r3, #28]
 8007d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	021b      	lsls	r3, r3, #8
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	031b      	lsls	r3, r3, #12
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a10      	ldr	r2, [pc, #64]	@ (8007df0 <TIM_OC4_SetConfig+0x9c>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d109      	bne.n	8007dc8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007dba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	695b      	ldr	r3, [r3, #20]
 8007dc0:	019b      	lsls	r3, r3, #6
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	685a      	ldr	r2, [r3, #4]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	693a      	ldr	r2, [r7, #16]
 8007de0:	621a      	str	r2, [r3, #32]
}
 8007de2:	bf00      	nop
 8007de4:	371c      	adds	r7, #28
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	40010000 	.word	0x40010000

08007df4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b087      	sub	sp, #28
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6a1b      	ldr	r3, [r3, #32]
 8007e04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	f023 0201 	bic.w	r2, r3, #1
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	699b      	ldr	r3, [r3, #24]
 8007e16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007e1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	011b      	lsls	r3, r3, #4
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	f023 030a 	bic.w	r3, r3, #10
 8007e30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e32:	697a      	ldr	r2, [r7, #20]
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	621a      	str	r2, [r3, #32]
}
 8007e46:	bf00      	nop
 8007e48:	371c      	adds	r7, #28
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e52:	b480      	push	{r7}
 8007e54:	b087      	sub	sp, #28
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	60f8      	str	r0, [r7, #12]
 8007e5a:	60b9      	str	r1, [r7, #8]
 8007e5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6a1b      	ldr	r3, [r3, #32]
 8007e68:	f023 0210 	bic.w	r2, r3, #16
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007e7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	031b      	lsls	r3, r3, #12
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007e8e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	011b      	lsls	r3, r3, #4
 8007e94:	697a      	ldr	r2, [r7, #20]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	697a      	ldr	r2, [r7, #20]
 8007ea4:	621a      	str	r2, [r3, #32]
}
 8007ea6:	bf00      	nop
 8007ea8:	371c      	adds	r7, #28
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr

08007eb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b085      	sub	sp, #20
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
 8007eba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ec8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	f043 0307 	orr.w	r3, r3, #7
 8007ed4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	609a      	str	r2, [r3, #8]
}
 8007edc:	bf00      	nop
 8007ede:	3714      	adds	r7, #20
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b087      	sub	sp, #28
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	607a      	str	r2, [r7, #4]
 8007ef4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	021a      	lsls	r2, r3, #8
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	431a      	orrs	r2, r3
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	697a      	ldr	r2, [r7, #20]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	697a      	ldr	r2, [r7, #20]
 8007f1a:	609a      	str	r2, [r3, #8]
}
 8007f1c:	bf00      	nop
 8007f1e:	371c      	adds	r7, #28
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d101      	bne.n	8007f40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	e050      	b.n	8007fe2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d018      	beq.n	8007fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f8c:	d013      	beq.n	8007fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a18      	ldr	r2, [pc, #96]	@ (8007ff4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d00e      	beq.n	8007fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a16      	ldr	r2, [pc, #88]	@ (8007ff8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d009      	beq.n	8007fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a15      	ldr	r2, [pc, #84]	@ (8007ffc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d004      	beq.n	8007fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a13      	ldr	r2, [pc, #76]	@ (8008000 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d10c      	bne.n	8007fd0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68ba      	ldr	r2, [r7, #8]
 8007fce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3714      	adds	r7, #20
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	40010000 	.word	0x40010000
 8007ff4:	40000400 	.word	0x40000400
 8007ff8:	40000800 	.word	0x40000800
 8007ffc:	40000c00 	.word	0x40000c00
 8008000:	40014000 	.word	0x40014000

08008004 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800800e:	2300      	movs	r3, #0
 8008010:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008018:	2b01      	cmp	r3, #1
 800801a:	d101      	bne.n	8008020 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800801c:	2302      	movs	r3, #2
 800801e:	e03d      	b.n	800809c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	4313      	orrs	r3, r2
 8008034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	4313      	orrs	r3, r2
 8008042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	4313      	orrs	r3, r2
 8008050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4313      	orrs	r3, r2
 800805e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	4313      	orrs	r3, r2
 800806c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	695b      	ldr	r3, [r3, #20]
 8008078:	4313      	orrs	r3, r2
 800807a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	69db      	ldr	r3, [r3, #28]
 8008086:	4313      	orrs	r3, r2
 8008088:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3714      	adds	r7, #20
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d101      	bne.n	80080ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	e042      	b.n	8008140 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d106      	bne.n	80080d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f7fa fef8 	bl	8002ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2224      	movs	r2, #36	@ 0x24
 80080d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68da      	ldr	r2, [r3, #12]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80080ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 fcdb 	bl	8008aa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	691a      	ldr	r2, [r3, #16]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008100:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	695a      	ldr	r2, [r3, #20]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008110:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68da      	ldr	r2, [r3, #12]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008120:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2220      	movs	r2, #32
 800812c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2220      	movs	r2, #32
 8008134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	4613      	mov	r3, r2
 8008154:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b20      	cmp	r3, #32
 8008160:	d112      	bne.n	8008188 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d002      	beq.n	800816e <HAL_UART_Receive_IT+0x26>
 8008168:	88fb      	ldrh	r3, [r7, #6]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d101      	bne.n	8008172 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	e00b      	b.n	800818a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008178:	88fb      	ldrh	r3, [r7, #6]
 800817a:	461a      	mov	r2, r3
 800817c:	68b9      	ldr	r1, [r7, #8]
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f000 faba 	bl	80086f8 <UART_Start_Receive_IT>
 8008184:	4603      	mov	r3, r0
 8008186:	e000      	b.n	800818a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008188:	2302      	movs	r3, #2
  }
}
 800818a:	4618      	mov	r0, r3
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
	...

08008194 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b0ba      	sub	sp, #232	@ 0xe8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	695b      	ldr	r3, [r3, #20]
 80081b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80081ba:	2300      	movs	r3, #0
 80081bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80081c0:	2300      	movs	r3, #0
 80081c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80081c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081ca:	f003 030f 	and.w	r3, r3, #15
 80081ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80081d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d10f      	bne.n	80081fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80081da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081de:	f003 0320 	and.w	r3, r3, #32
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d009      	beq.n	80081fa <HAL_UART_IRQHandler+0x66>
 80081e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081ea:	f003 0320 	and.w	r3, r3, #32
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d003      	beq.n	80081fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 fb99 	bl	800892a <UART_Receive_IT>
      return;
 80081f8:	e25b      	b.n	80086b2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80081fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f000 80de 	beq.w	80083c0 <HAL_UART_IRQHandler+0x22c>
 8008204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008208:	f003 0301 	and.w	r3, r3, #1
 800820c:	2b00      	cmp	r3, #0
 800820e:	d106      	bne.n	800821e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008214:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008218:	2b00      	cmp	r3, #0
 800821a:	f000 80d1 	beq.w	80083c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800821e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008222:	f003 0301 	and.w	r3, r3, #1
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00b      	beq.n	8008242 <HAL_UART_IRQHandler+0xae>
 800822a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800822e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008232:	2b00      	cmp	r3, #0
 8008234:	d005      	beq.n	8008242 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800823a:	f043 0201 	orr.w	r2, r3, #1
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008246:	f003 0304 	and.w	r3, r3, #4
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00b      	beq.n	8008266 <HAL_UART_IRQHandler+0xd2>
 800824e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	2b00      	cmp	r3, #0
 8008258:	d005      	beq.n	8008266 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800825e:	f043 0202 	orr.w	r2, r3, #2
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800826a:	f003 0302 	and.w	r3, r3, #2
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00b      	beq.n	800828a <HAL_UART_IRQHandler+0xf6>
 8008272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008276:	f003 0301 	and.w	r3, r3, #1
 800827a:	2b00      	cmp	r3, #0
 800827c:	d005      	beq.n	800828a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008282:	f043 0204 	orr.w	r2, r3, #4
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800828a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800828e:	f003 0308 	and.w	r3, r3, #8
 8008292:	2b00      	cmp	r3, #0
 8008294:	d011      	beq.n	80082ba <HAL_UART_IRQHandler+0x126>
 8008296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800829a:	f003 0320 	and.w	r3, r3, #32
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d105      	bne.n	80082ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80082a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d005      	beq.n	80082ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082b2:	f043 0208 	orr.w	r2, r3, #8
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082be:	2b00      	cmp	r3, #0
 80082c0:	f000 81f2 	beq.w	80086a8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082c8:	f003 0320 	and.w	r3, r3, #32
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d008      	beq.n	80082e2 <HAL_UART_IRQHandler+0x14e>
 80082d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082d4:	f003 0320 	and.w	r3, r3, #32
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d002      	beq.n	80082e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 fb24 	bl	800892a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	695b      	ldr	r3, [r3, #20]
 80082e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082ec:	2b40      	cmp	r3, #64	@ 0x40
 80082ee:	bf0c      	ite	eq
 80082f0:	2301      	moveq	r3, #1
 80082f2:	2300      	movne	r3, #0
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082fe:	f003 0308 	and.w	r3, r3, #8
 8008302:	2b00      	cmp	r3, #0
 8008304:	d103      	bne.n	800830e <HAL_UART_IRQHandler+0x17a>
 8008306:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800830a:	2b00      	cmp	r3, #0
 800830c:	d04f      	beq.n	80083ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fa2c 	bl	800876c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	695b      	ldr	r3, [r3, #20]
 800831a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800831e:	2b40      	cmp	r3, #64	@ 0x40
 8008320:	d141      	bne.n	80083a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3314      	adds	r3, #20
 8008328:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008330:	e853 3f00 	ldrex	r3, [r3]
 8008334:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008338:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800833c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008340:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	3314      	adds	r3, #20
 800834a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800834e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008352:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008356:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800835a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800835e:	e841 2300 	strex	r3, r2, [r1]
 8008362:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008366:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1d9      	bne.n	8008322 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008372:	2b00      	cmp	r3, #0
 8008374:	d013      	beq.n	800839e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800837a:	4a7e      	ldr	r2, [pc, #504]	@ (8008574 <HAL_UART_IRQHandler+0x3e0>)
 800837c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008382:	4618      	mov	r0, r3
 8008384:	f7fb fd1a 	bl	8003dbc <HAL_DMA_Abort_IT>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d016      	beq.n	80083bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008398:	4610      	mov	r0, r2
 800839a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800839c:	e00e      	b.n	80083bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 f994 	bl	80086cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083a4:	e00a      	b.n	80083bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f990 	bl	80086cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083ac:	e006      	b.n	80083bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f98c 	bl	80086cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80083ba:	e175      	b.n	80086a8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083bc:	bf00      	nop
    return;
 80083be:	e173      	b.n	80086a8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	f040 814f 	bne.w	8008668 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80083ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083ce:	f003 0310 	and.w	r3, r3, #16
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	f000 8148 	beq.w	8008668 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80083d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083dc:	f003 0310 	and.w	r3, r3, #16
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f000 8141 	beq.w	8008668 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80083e6:	2300      	movs	r3, #0
 80083e8:	60bb      	str	r3, [r7, #8]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	60bb      	str	r3, [r7, #8]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	60bb      	str	r3, [r7, #8]
 80083fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008406:	2b40      	cmp	r3, #64	@ 0x40
 8008408:	f040 80b6 	bne.w	8008578 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008418:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 8145 	beq.w	80086ac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008426:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800842a:	429a      	cmp	r2, r3
 800842c:	f080 813e 	bcs.w	80086ac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008436:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800843c:	69db      	ldr	r3, [r3, #28]
 800843e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008442:	f000 8088 	beq.w	8008556 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	330c      	adds	r3, #12
 800844c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008450:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008454:	e853 3f00 	ldrex	r3, [r3]
 8008458:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800845c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008460:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008464:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	330c      	adds	r3, #12
 800846e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008472:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008476:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800847e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008482:	e841 2300 	strex	r3, r2, [r1]
 8008486:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800848a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1d9      	bne.n	8008446 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	3314      	adds	r3, #20
 8008498:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800849c:	e853 3f00 	ldrex	r3, [r3]
 80084a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80084a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80084a4:	f023 0301 	bic.w	r3, r3, #1
 80084a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	3314      	adds	r3, #20
 80084b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80084b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80084ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80084be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80084c2:	e841 2300 	strex	r3, r2, [r1]
 80084c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80084c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1e1      	bne.n	8008492 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	3314      	adds	r3, #20
 80084d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084d8:	e853 3f00 	ldrex	r3, [r3]
 80084dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80084de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	3314      	adds	r3, #20
 80084ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80084f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80084f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80084f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80084fa:	e841 2300 	strex	r3, r2, [r1]
 80084fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008500:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1e3      	bne.n	80084ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2220      	movs	r2, #32
 800850a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	330c      	adds	r3, #12
 800851a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800851e:	e853 3f00 	ldrex	r3, [r3]
 8008522:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008524:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008526:	f023 0310 	bic.w	r3, r3, #16
 800852a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	330c      	adds	r3, #12
 8008534:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008538:	65ba      	str	r2, [r7, #88]	@ 0x58
 800853a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800853e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008540:	e841 2300 	strex	r3, r2, [r1]
 8008544:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008546:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1e3      	bne.n	8008514 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008550:	4618      	mov	r0, r3
 8008552:	f7fb fbc3 	bl	8003cdc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2202      	movs	r2, #2
 800855a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008564:	b29b      	uxth	r3, r3
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	b29b      	uxth	r3, r3
 800856a:	4619      	mov	r1, r3
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 f8b7 	bl	80086e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008572:	e09b      	b.n	80086ac <HAL_UART_IRQHandler+0x518>
 8008574:	08008833 	.word	0x08008833
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008580:	b29b      	uxth	r3, r3
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800858c:	b29b      	uxth	r3, r3
 800858e:	2b00      	cmp	r3, #0
 8008590:	f000 808e 	beq.w	80086b0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008594:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008598:	2b00      	cmp	r3, #0
 800859a:	f000 8089 	beq.w	80086b0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	330c      	adds	r3, #12
 80085a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a8:	e853 3f00 	ldrex	r3, [r3]
 80085ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80085ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	330c      	adds	r3, #12
 80085be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80085c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80085c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085ca:	e841 2300 	strex	r3, r2, [r1]
 80085ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1e3      	bne.n	800859e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	3314      	adds	r3, #20
 80085dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e0:	e853 3f00 	ldrex	r3, [r3]
 80085e4:	623b      	str	r3, [r7, #32]
   return(result);
 80085e6:	6a3b      	ldr	r3, [r7, #32]
 80085e8:	f023 0301 	bic.w	r3, r3, #1
 80085ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	3314      	adds	r3, #20
 80085f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80085fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80085fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008600:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008602:	e841 2300 	strex	r3, r2, [r1]
 8008606:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800860a:	2b00      	cmp	r3, #0
 800860c:	d1e3      	bne.n	80085d6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2220      	movs	r2, #32
 8008612:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	330c      	adds	r3, #12
 8008622:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	e853 3f00 	ldrex	r3, [r3]
 800862a:	60fb      	str	r3, [r7, #12]
   return(result);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f023 0310 	bic.w	r3, r3, #16
 8008632:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	330c      	adds	r3, #12
 800863c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008640:	61fa      	str	r2, [r7, #28]
 8008642:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008644:	69b9      	ldr	r1, [r7, #24]
 8008646:	69fa      	ldr	r2, [r7, #28]
 8008648:	e841 2300 	strex	r3, r2, [r1]
 800864c:	617b      	str	r3, [r7, #20]
   return(result);
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1e3      	bne.n	800861c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2202      	movs	r2, #2
 8008658:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800865a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800865e:	4619      	mov	r1, r3
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 f83d 	bl	80086e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008666:	e023      	b.n	80086b0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800866c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008670:	2b00      	cmp	r3, #0
 8008672:	d009      	beq.n	8008688 <HAL_UART_IRQHandler+0x4f4>
 8008674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008678:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800867c:	2b00      	cmp	r3, #0
 800867e:	d003      	beq.n	8008688 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f8ea 	bl	800885a <UART_Transmit_IT>
    return;
 8008686:	e014      	b.n	80086b2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800868c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00e      	beq.n	80086b2 <HAL_UART_IRQHandler+0x51e>
 8008694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800869c:	2b00      	cmp	r3, #0
 800869e:	d008      	beq.n	80086b2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 f92a 	bl	80088fa <UART_EndTransmit_IT>
    return;
 80086a6:	e004      	b.n	80086b2 <HAL_UART_IRQHandler+0x51e>
    return;
 80086a8:	bf00      	nop
 80086aa:	e002      	b.n	80086b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80086ac:	bf00      	nop
 80086ae:	e000      	b.n	80086b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80086b0:	bf00      	nop
  }
}
 80086b2:	37e8      	adds	r7, #232	@ 0xe8
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80086d4:	bf00      	nop
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	4613      	mov	r3, r2
 8008704:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	68ba      	ldr	r2, [r7, #8]
 800870a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	88fa      	ldrh	r2, [r7, #6]
 8008710:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	88fa      	ldrh	r2, [r7, #6]
 8008716:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2200      	movs	r2, #0
 800871c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2222      	movs	r2, #34	@ 0x22
 8008722:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d007      	beq.n	800873e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68da      	ldr	r2, [r3, #12]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800873c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	695a      	ldr	r2, [r3, #20]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f042 0201 	orr.w	r2, r2, #1
 800874c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68da      	ldr	r2, [r3, #12]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f042 0220 	orr.w	r2, r2, #32
 800875c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3714      	adds	r7, #20
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800876c:	b480      	push	{r7}
 800876e:	b095      	sub	sp, #84	@ 0x54
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	330c      	adds	r3, #12
 800877a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800877e:	e853 3f00 	ldrex	r3, [r3]
 8008782:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008786:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800878a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	330c      	adds	r3, #12
 8008792:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008794:	643a      	str	r2, [r7, #64]	@ 0x40
 8008796:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008798:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800879a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800879c:	e841 2300 	strex	r3, r2, [r1]
 80087a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80087a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e5      	bne.n	8008774 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	3314      	adds	r3, #20
 80087ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b0:	6a3b      	ldr	r3, [r7, #32]
 80087b2:	e853 3f00 	ldrex	r3, [r3]
 80087b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	f023 0301 	bic.w	r3, r3, #1
 80087be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3314      	adds	r3, #20
 80087c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80087ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087d0:	e841 2300 	strex	r3, r2, [r1]
 80087d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80087d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1e5      	bne.n	80087a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d119      	bne.n	8008818 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	330c      	adds	r3, #12
 80087ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	e853 3f00 	ldrex	r3, [r3]
 80087f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	f023 0310 	bic.w	r3, r3, #16
 80087fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	330c      	adds	r3, #12
 8008802:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008804:	61ba      	str	r2, [r7, #24]
 8008806:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008808:	6979      	ldr	r1, [r7, #20]
 800880a:	69ba      	ldr	r2, [r7, #24]
 800880c:	e841 2300 	strex	r3, r2, [r1]
 8008810:	613b      	str	r3, [r7, #16]
   return(result);
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d1e5      	bne.n	80087e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2220      	movs	r2, #32
 800881c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008826:	bf00      	nop
 8008828:	3754      	adds	r7, #84	@ 0x54
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b084      	sub	sp, #16
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800883e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2200      	movs	r2, #0
 8008844:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	f7ff ff3d 	bl	80086cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008852:	bf00      	nop
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800885a:	b480      	push	{r7}
 800885c:	b085      	sub	sp, #20
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b21      	cmp	r3, #33	@ 0x21
 800886c:	d13e      	bne.n	80088ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008876:	d114      	bne.n	80088a2 <UART_Transmit_IT+0x48>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d110      	bne.n	80088a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a1b      	ldr	r3, [r3, #32]
 8008884:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	881b      	ldrh	r3, [r3, #0]
 800888a:	461a      	mov	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008894:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a1b      	ldr	r3, [r3, #32]
 800889a:	1c9a      	adds	r2, r3, #2
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	621a      	str	r2, [r3, #32]
 80088a0:	e008      	b.n	80088b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a1b      	ldr	r3, [r3, #32]
 80088a6:	1c59      	adds	r1, r3, #1
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	6211      	str	r1, [r2, #32]
 80088ac:	781a      	ldrb	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	3b01      	subs	r3, #1
 80088bc:	b29b      	uxth	r3, r3
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	4619      	mov	r1, r3
 80088c2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10f      	bne.n	80088e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68da      	ldr	r2, [r3, #12]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80088d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68da      	ldr	r2, [r3, #12]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80088e8:	2300      	movs	r3, #0
 80088ea:	e000      	b.n	80088ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80088ec:	2302      	movs	r3, #2
  }
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3714      	adds	r7, #20
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b082      	sub	sp, #8
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68da      	ldr	r2, [r3, #12]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008910:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2220      	movs	r2, #32
 8008916:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f7ff fecc 	bl	80086b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008920:	2300      	movs	r3, #0
}
 8008922:	4618      	mov	r0, r3
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b08c      	sub	sp, #48	@ 0x30
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b22      	cmp	r3, #34	@ 0x22
 800893c:	f040 80ae 	bne.w	8008a9c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008948:	d117      	bne.n	800897a <UART_Receive_IT+0x50>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d113      	bne.n	800897a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008952:	2300      	movs	r3, #0
 8008954:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800895a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	b29b      	uxth	r3, r3
 8008964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008968:	b29a      	uxth	r2, r3
 800896a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800896c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008972:	1c9a      	adds	r2, r3, #2
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	629a      	str	r2, [r3, #40]	@ 0x28
 8008978:	e026      	b.n	80089c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800897e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008980:	2300      	movs	r3, #0
 8008982:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800898c:	d007      	beq.n	800899e <UART_Receive_IT+0x74>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d10a      	bne.n	80089ac <UART_Receive_IT+0x82>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d106      	bne.n	80089ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	b2da      	uxtb	r2, r3
 80089a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089a8:	701a      	strb	r2, [r3, #0]
 80089aa:	e008      	b.n	80089be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089b8:	b2da      	uxtb	r2, r3
 80089ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089c2:	1c5a      	adds	r2, r3, #1
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	3b01      	subs	r3, #1
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	4619      	mov	r1, r3
 80089d6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d15d      	bne.n	8008a98 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	68da      	ldr	r2, [r3, #12]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f022 0220 	bic.w	r2, r2, #32
 80089ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	68da      	ldr	r2, [r3, #12]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80089fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	695a      	ldr	r2, [r3, #20]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f022 0201 	bic.w	r2, r2, #1
 8008a0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2220      	movs	r2, #32
 8008a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d135      	bne.n	8008a8e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	330c      	adds	r3, #12
 8008a2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	e853 3f00 	ldrex	r3, [r3]
 8008a36:	613b      	str	r3, [r7, #16]
   return(result);
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	f023 0310 	bic.w	r3, r3, #16
 8008a3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	330c      	adds	r3, #12
 8008a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a48:	623a      	str	r2, [r7, #32]
 8008a4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4c:	69f9      	ldr	r1, [r7, #28]
 8008a4e:	6a3a      	ldr	r2, [r7, #32]
 8008a50:	e841 2300 	strex	r3, r2, [r1]
 8008a54:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1e5      	bne.n	8008a28 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f003 0310 	and.w	r3, r3, #16
 8008a66:	2b10      	cmp	r3, #16
 8008a68:	d10a      	bne.n	8008a80 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	60fb      	str	r3, [r7, #12]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	60fb      	str	r3, [r7, #12]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	60fb      	str	r3, [r7, #12]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008a84:	4619      	mov	r1, r3
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f7ff fe2a 	bl	80086e0 <HAL_UARTEx_RxEventCallback>
 8008a8c:	e002      	b.n	8008a94 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7f9 f84a 	bl	8001b28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008a94:	2300      	movs	r3, #0
 8008a96:	e002      	b.n	8008a9e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	e000      	b.n	8008a9e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008a9c:	2302      	movs	r3, #2
  }
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3730      	adds	r7, #48	@ 0x30
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
	...

08008aa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008aac:	b0c0      	sub	sp, #256	@ 0x100
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ac4:	68d9      	ldr	r1, [r3, #12]
 8008ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	ea40 0301 	orr.w	r3, r0, r1
 8008ad0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ad6:	689a      	ldr	r2, [r3, #8]
 8008ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	431a      	orrs	r2, r3
 8008ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ae4:	695b      	ldr	r3, [r3, #20]
 8008ae6:	431a      	orrs	r2, r3
 8008ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008aec:	69db      	ldr	r3, [r3, #28]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008b00:	f021 010c 	bic.w	r1, r1, #12
 8008b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008b0e:	430b      	orrs	r3, r1
 8008b10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	695b      	ldr	r3, [r3, #20]
 8008b1a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b22:	6999      	ldr	r1, [r3, #24]
 8008b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	ea40 0301 	orr.w	r3, r0, r1
 8008b2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	4b8f      	ldr	r3, [pc, #572]	@ (8008d74 <UART_SetConfig+0x2cc>)
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d005      	beq.n	8008b48 <UART_SetConfig+0xa0>
 8008b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	4b8d      	ldr	r3, [pc, #564]	@ (8008d78 <UART_SetConfig+0x2d0>)
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d104      	bne.n	8008b52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b48:	f7fd f9c6 	bl	8005ed8 <HAL_RCC_GetPCLK2Freq>
 8008b4c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008b50:	e003      	b.n	8008b5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b52:	f7fd f9ad 	bl	8005eb0 <HAL_RCC_GetPCLK1Freq>
 8008b56:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b5e:	69db      	ldr	r3, [r3, #28]
 8008b60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b64:	f040 810c 	bne.w	8008d80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008b72:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008b76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008b7a:	4622      	mov	r2, r4
 8008b7c:	462b      	mov	r3, r5
 8008b7e:	1891      	adds	r1, r2, r2
 8008b80:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008b82:	415b      	adcs	r3, r3
 8008b84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008b8a:	4621      	mov	r1, r4
 8008b8c:	eb12 0801 	adds.w	r8, r2, r1
 8008b90:	4629      	mov	r1, r5
 8008b92:	eb43 0901 	adc.w	r9, r3, r1
 8008b96:	f04f 0200 	mov.w	r2, #0
 8008b9a:	f04f 0300 	mov.w	r3, #0
 8008b9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008ba2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ba6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008baa:	4690      	mov	r8, r2
 8008bac:	4699      	mov	r9, r3
 8008bae:	4623      	mov	r3, r4
 8008bb0:	eb18 0303 	adds.w	r3, r8, r3
 8008bb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008bb8:	462b      	mov	r3, r5
 8008bba:	eb49 0303 	adc.w	r3, r9, r3
 8008bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008bce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008bd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	18db      	adds	r3, r3, r3
 8008bda:	653b      	str	r3, [r7, #80]	@ 0x50
 8008bdc:	4613      	mov	r3, r2
 8008bde:	eb42 0303 	adc.w	r3, r2, r3
 8008be2:	657b      	str	r3, [r7, #84]	@ 0x54
 8008be4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008be8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008bec:	f7f8 f854 	bl	8000c98 <__aeabi_uldivmod>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	4b61      	ldr	r3, [pc, #388]	@ (8008d7c <UART_SetConfig+0x2d4>)
 8008bf6:	fba3 2302 	umull	r2, r3, r3, r2
 8008bfa:	095b      	lsrs	r3, r3, #5
 8008bfc:	011c      	lsls	r4, r3, #4
 8008bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c02:	2200      	movs	r2, #0
 8008c04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c08:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008c0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008c10:	4642      	mov	r2, r8
 8008c12:	464b      	mov	r3, r9
 8008c14:	1891      	adds	r1, r2, r2
 8008c16:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008c18:	415b      	adcs	r3, r3
 8008c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008c20:	4641      	mov	r1, r8
 8008c22:	eb12 0a01 	adds.w	sl, r2, r1
 8008c26:	4649      	mov	r1, r9
 8008c28:	eb43 0b01 	adc.w	fp, r3, r1
 8008c2c:	f04f 0200 	mov.w	r2, #0
 8008c30:	f04f 0300 	mov.w	r3, #0
 8008c34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008c3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c40:	4692      	mov	sl, r2
 8008c42:	469b      	mov	fp, r3
 8008c44:	4643      	mov	r3, r8
 8008c46:	eb1a 0303 	adds.w	r3, sl, r3
 8008c4a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c4e:	464b      	mov	r3, r9
 8008c50:	eb4b 0303 	adc.w	r3, fp, r3
 8008c54:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008c64:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008c68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	18db      	adds	r3, r3, r3
 8008c70:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c72:	4613      	mov	r3, r2
 8008c74:	eb42 0303 	adc.w	r3, r2, r3
 8008c78:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008c7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008c82:	f7f8 f809 	bl	8000c98 <__aeabi_uldivmod>
 8008c86:	4602      	mov	r2, r0
 8008c88:	460b      	mov	r3, r1
 8008c8a:	4611      	mov	r1, r2
 8008c8c:	4b3b      	ldr	r3, [pc, #236]	@ (8008d7c <UART_SetConfig+0x2d4>)
 8008c8e:	fba3 2301 	umull	r2, r3, r3, r1
 8008c92:	095b      	lsrs	r3, r3, #5
 8008c94:	2264      	movs	r2, #100	@ 0x64
 8008c96:	fb02 f303 	mul.w	r3, r2, r3
 8008c9a:	1acb      	subs	r3, r1, r3
 8008c9c:	00db      	lsls	r3, r3, #3
 8008c9e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008ca2:	4b36      	ldr	r3, [pc, #216]	@ (8008d7c <UART_SetConfig+0x2d4>)
 8008ca4:	fba3 2302 	umull	r2, r3, r3, r2
 8008ca8:	095b      	lsrs	r3, r3, #5
 8008caa:	005b      	lsls	r3, r3, #1
 8008cac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008cb0:	441c      	add	r4, r3
 8008cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008cbc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008cc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008cc4:	4642      	mov	r2, r8
 8008cc6:	464b      	mov	r3, r9
 8008cc8:	1891      	adds	r1, r2, r2
 8008cca:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008ccc:	415b      	adcs	r3, r3
 8008cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008cd4:	4641      	mov	r1, r8
 8008cd6:	1851      	adds	r1, r2, r1
 8008cd8:	6339      	str	r1, [r7, #48]	@ 0x30
 8008cda:	4649      	mov	r1, r9
 8008cdc:	414b      	adcs	r3, r1
 8008cde:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ce0:	f04f 0200 	mov.w	r2, #0
 8008ce4:	f04f 0300 	mov.w	r3, #0
 8008ce8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008cec:	4659      	mov	r1, fp
 8008cee:	00cb      	lsls	r3, r1, #3
 8008cf0:	4651      	mov	r1, sl
 8008cf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cf6:	4651      	mov	r1, sl
 8008cf8:	00ca      	lsls	r2, r1, #3
 8008cfa:	4610      	mov	r0, r2
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	4603      	mov	r3, r0
 8008d00:	4642      	mov	r2, r8
 8008d02:	189b      	adds	r3, r3, r2
 8008d04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d08:	464b      	mov	r3, r9
 8008d0a:	460a      	mov	r2, r1
 8008d0c:	eb42 0303 	adc.w	r3, r2, r3
 8008d10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008d20:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008d24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008d28:	460b      	mov	r3, r1
 8008d2a:	18db      	adds	r3, r3, r3
 8008d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d2e:	4613      	mov	r3, r2
 8008d30:	eb42 0303 	adc.w	r3, r2, r3
 8008d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008d3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008d3e:	f7f7 ffab 	bl	8000c98 <__aeabi_uldivmod>
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	4b0d      	ldr	r3, [pc, #52]	@ (8008d7c <UART_SetConfig+0x2d4>)
 8008d48:	fba3 1302 	umull	r1, r3, r3, r2
 8008d4c:	095b      	lsrs	r3, r3, #5
 8008d4e:	2164      	movs	r1, #100	@ 0x64
 8008d50:	fb01 f303 	mul.w	r3, r1, r3
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	00db      	lsls	r3, r3, #3
 8008d58:	3332      	adds	r3, #50	@ 0x32
 8008d5a:	4a08      	ldr	r2, [pc, #32]	@ (8008d7c <UART_SetConfig+0x2d4>)
 8008d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d60:	095b      	lsrs	r3, r3, #5
 8008d62:	f003 0207 	and.w	r2, r3, #7
 8008d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4422      	add	r2, r4
 8008d6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d70:	e106      	b.n	8008f80 <UART_SetConfig+0x4d8>
 8008d72:	bf00      	nop
 8008d74:	40011000 	.word	0x40011000
 8008d78:	40011400 	.word	0x40011400
 8008d7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d84:	2200      	movs	r2, #0
 8008d86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008d8a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008d8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008d92:	4642      	mov	r2, r8
 8008d94:	464b      	mov	r3, r9
 8008d96:	1891      	adds	r1, r2, r2
 8008d98:	6239      	str	r1, [r7, #32]
 8008d9a:	415b      	adcs	r3, r3
 8008d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008da2:	4641      	mov	r1, r8
 8008da4:	1854      	adds	r4, r2, r1
 8008da6:	4649      	mov	r1, r9
 8008da8:	eb43 0501 	adc.w	r5, r3, r1
 8008dac:	f04f 0200 	mov.w	r2, #0
 8008db0:	f04f 0300 	mov.w	r3, #0
 8008db4:	00eb      	lsls	r3, r5, #3
 8008db6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008dba:	00e2      	lsls	r2, r4, #3
 8008dbc:	4614      	mov	r4, r2
 8008dbe:	461d      	mov	r5, r3
 8008dc0:	4643      	mov	r3, r8
 8008dc2:	18e3      	adds	r3, r4, r3
 8008dc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008dc8:	464b      	mov	r3, r9
 8008dca:	eb45 0303 	adc.w	r3, r5, r3
 8008dce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008dde:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008de2:	f04f 0200 	mov.w	r2, #0
 8008de6:	f04f 0300 	mov.w	r3, #0
 8008dea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008dee:	4629      	mov	r1, r5
 8008df0:	008b      	lsls	r3, r1, #2
 8008df2:	4621      	mov	r1, r4
 8008df4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008df8:	4621      	mov	r1, r4
 8008dfa:	008a      	lsls	r2, r1, #2
 8008dfc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008e00:	f7f7 ff4a 	bl	8000c98 <__aeabi_uldivmod>
 8008e04:	4602      	mov	r2, r0
 8008e06:	460b      	mov	r3, r1
 8008e08:	4b60      	ldr	r3, [pc, #384]	@ (8008f8c <UART_SetConfig+0x4e4>)
 8008e0a:	fba3 2302 	umull	r2, r3, r3, r2
 8008e0e:	095b      	lsrs	r3, r3, #5
 8008e10:	011c      	lsls	r4, r3, #4
 8008e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e16:	2200      	movs	r2, #0
 8008e18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008e1c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008e20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008e24:	4642      	mov	r2, r8
 8008e26:	464b      	mov	r3, r9
 8008e28:	1891      	adds	r1, r2, r2
 8008e2a:	61b9      	str	r1, [r7, #24]
 8008e2c:	415b      	adcs	r3, r3
 8008e2e:	61fb      	str	r3, [r7, #28]
 8008e30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e34:	4641      	mov	r1, r8
 8008e36:	1851      	adds	r1, r2, r1
 8008e38:	6139      	str	r1, [r7, #16]
 8008e3a:	4649      	mov	r1, r9
 8008e3c:	414b      	adcs	r3, r1
 8008e3e:	617b      	str	r3, [r7, #20]
 8008e40:	f04f 0200 	mov.w	r2, #0
 8008e44:	f04f 0300 	mov.w	r3, #0
 8008e48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e4c:	4659      	mov	r1, fp
 8008e4e:	00cb      	lsls	r3, r1, #3
 8008e50:	4651      	mov	r1, sl
 8008e52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e56:	4651      	mov	r1, sl
 8008e58:	00ca      	lsls	r2, r1, #3
 8008e5a:	4610      	mov	r0, r2
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	4603      	mov	r3, r0
 8008e60:	4642      	mov	r2, r8
 8008e62:	189b      	adds	r3, r3, r2
 8008e64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008e68:	464b      	mov	r3, r9
 8008e6a:	460a      	mov	r2, r1
 8008e6c:	eb42 0303 	adc.w	r3, r2, r3
 8008e70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008e7e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008e80:	f04f 0200 	mov.w	r2, #0
 8008e84:	f04f 0300 	mov.w	r3, #0
 8008e88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008e8c:	4649      	mov	r1, r9
 8008e8e:	008b      	lsls	r3, r1, #2
 8008e90:	4641      	mov	r1, r8
 8008e92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e96:	4641      	mov	r1, r8
 8008e98:	008a      	lsls	r2, r1, #2
 8008e9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008e9e:	f7f7 fefb 	bl	8000c98 <__aeabi_uldivmod>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	4611      	mov	r1, r2
 8008ea8:	4b38      	ldr	r3, [pc, #224]	@ (8008f8c <UART_SetConfig+0x4e4>)
 8008eaa:	fba3 2301 	umull	r2, r3, r3, r1
 8008eae:	095b      	lsrs	r3, r3, #5
 8008eb0:	2264      	movs	r2, #100	@ 0x64
 8008eb2:	fb02 f303 	mul.w	r3, r2, r3
 8008eb6:	1acb      	subs	r3, r1, r3
 8008eb8:	011b      	lsls	r3, r3, #4
 8008eba:	3332      	adds	r3, #50	@ 0x32
 8008ebc:	4a33      	ldr	r2, [pc, #204]	@ (8008f8c <UART_SetConfig+0x4e4>)
 8008ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8008ec2:	095b      	lsrs	r3, r3, #5
 8008ec4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ec8:	441c      	add	r4, r3
 8008eca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ece:	2200      	movs	r2, #0
 8008ed0:	673b      	str	r3, [r7, #112]	@ 0x70
 8008ed2:	677a      	str	r2, [r7, #116]	@ 0x74
 8008ed4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008ed8:	4642      	mov	r2, r8
 8008eda:	464b      	mov	r3, r9
 8008edc:	1891      	adds	r1, r2, r2
 8008ede:	60b9      	str	r1, [r7, #8]
 8008ee0:	415b      	adcs	r3, r3
 8008ee2:	60fb      	str	r3, [r7, #12]
 8008ee4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ee8:	4641      	mov	r1, r8
 8008eea:	1851      	adds	r1, r2, r1
 8008eec:	6039      	str	r1, [r7, #0]
 8008eee:	4649      	mov	r1, r9
 8008ef0:	414b      	adcs	r3, r1
 8008ef2:	607b      	str	r3, [r7, #4]
 8008ef4:	f04f 0200 	mov.w	r2, #0
 8008ef8:	f04f 0300 	mov.w	r3, #0
 8008efc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008f00:	4659      	mov	r1, fp
 8008f02:	00cb      	lsls	r3, r1, #3
 8008f04:	4651      	mov	r1, sl
 8008f06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f0a:	4651      	mov	r1, sl
 8008f0c:	00ca      	lsls	r2, r1, #3
 8008f0e:	4610      	mov	r0, r2
 8008f10:	4619      	mov	r1, r3
 8008f12:	4603      	mov	r3, r0
 8008f14:	4642      	mov	r2, r8
 8008f16:	189b      	adds	r3, r3, r2
 8008f18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f1a:	464b      	mov	r3, r9
 8008f1c:	460a      	mov	r2, r1
 8008f1e:	eb42 0303 	adc.w	r3, r2, r3
 8008f22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f2e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008f30:	f04f 0200 	mov.w	r2, #0
 8008f34:	f04f 0300 	mov.w	r3, #0
 8008f38:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008f3c:	4649      	mov	r1, r9
 8008f3e:	008b      	lsls	r3, r1, #2
 8008f40:	4641      	mov	r1, r8
 8008f42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f46:	4641      	mov	r1, r8
 8008f48:	008a      	lsls	r2, r1, #2
 8008f4a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008f4e:	f7f7 fea3 	bl	8000c98 <__aeabi_uldivmod>
 8008f52:	4602      	mov	r2, r0
 8008f54:	460b      	mov	r3, r1
 8008f56:	4b0d      	ldr	r3, [pc, #52]	@ (8008f8c <UART_SetConfig+0x4e4>)
 8008f58:	fba3 1302 	umull	r1, r3, r3, r2
 8008f5c:	095b      	lsrs	r3, r3, #5
 8008f5e:	2164      	movs	r1, #100	@ 0x64
 8008f60:	fb01 f303 	mul.w	r3, r1, r3
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	011b      	lsls	r3, r3, #4
 8008f68:	3332      	adds	r3, #50	@ 0x32
 8008f6a:	4a08      	ldr	r2, [pc, #32]	@ (8008f8c <UART_SetConfig+0x4e4>)
 8008f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f70:	095b      	lsrs	r3, r3, #5
 8008f72:	f003 020f 	and.w	r2, r3, #15
 8008f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4422      	add	r2, r4
 8008f7e:	609a      	str	r2, [r3, #8]
}
 8008f80:	bf00      	nop
 8008f82:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008f86:	46bd      	mov	sp, r7
 8008f88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f8c:	51eb851f 	.word	0x51eb851f

08008f90 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008f90:	b084      	sub	sp, #16
 8008f92:	b480      	push	{r7}
 8008f94:	b085      	sub	sp, #20
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
 8008f9a:	f107 001c 	add.w	r0, r7, #28
 8008f9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008fa6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008fa8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008faa:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8008fae:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8008fb2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8008fb6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8008fba:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8008fca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008fce:	68fa      	ldr	r2, [r7, #12]
 8008fd0:	431a      	orrs	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3714      	adds	r7, #20
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	b004      	add	sp, #16
 8008fe4:	4770      	bx	lr

08008fe6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008fe6:	b480      	push	{r7}
 8008fe8:	b083      	sub	sp, #12
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	370c      	adds	r7, #12
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	370c      	adds	r7, #12
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr

08009022 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009022:	b480      	push	{r7}
 8009024:	b083      	sub	sp, #12
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2203      	movs	r2, #3
 800902e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	370c      	adds	r7, #12
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr

0800903e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800903e:	b480      	push	{r7}
 8009040:	b083      	sub	sp, #12
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 0303 	and.w	r3, r3, #3
}
 800904e:	4618      	mov	r0, r3
 8009050:	370c      	adds	r7, #12
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr

0800905a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800905a:	b480      	push	{r7}
 800905c:	b085      	sub	sp, #20
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
 8009062:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009064:	2300      	movs	r3, #0
 8009066:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009078:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800907e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009084:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009086:	68fa      	ldr	r2, [r7, #12]
 8009088:	4313      	orrs	r3, r2
 800908a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8009094:	f023 030f 	bic.w	r3, r3, #15
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	431a      	orrs	r2, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3714      	adds	r7, #20
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr

080090ae <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80090ae:	b480      	push	{r7}
 80090b0:	b083      	sub	sp, #12
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	691b      	ldr	r3, [r3, #16]
 80090ba:	b2db      	uxtb	r3, r3
}
 80090bc:	4618      	mov	r0, r3
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	3314      	adds	r3, #20
 80090d6:	461a      	mov	r2, r3
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	4413      	add	r3, r2
 80090dc:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
}  
 80090e2:	4618      	mov	r0, r3
 80090e4:	3714      	adds	r7, #20
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr

080090ee <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80090ee:	b480      	push	{r7}
 80090f0:	b085      	sub	sp, #20
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
 80090f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80090f8:	2300      	movs	r3, #0
 80090fa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	685a      	ldr	r2, [r3, #4]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009114:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800911a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009120:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	4313      	orrs	r3, r2
 8009126:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800912c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	431a      	orrs	r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009138:	2300      	movs	r3, #0

}
 800913a:	4618      	mov	r0, r3
 800913c:	3714      	adds	r7, #20
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr

08009146 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b088      	sub	sp, #32
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
 800914e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009154:	2310      	movs	r3, #16
 8009156:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009158:	2340      	movs	r3, #64	@ 0x40
 800915a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800915c:	2300      	movs	r3, #0
 800915e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009160:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009164:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009166:	f107 0308 	add.w	r3, r7, #8
 800916a:	4619      	mov	r1, r3
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f7ff ff74 	bl	800905a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009176:	2110      	movs	r1, #16
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fa19 	bl	80095b0 <SDMMC_GetCmdResp1>
 800917e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009180:	69fb      	ldr	r3, [r7, #28]
}
 8009182:	4618      	mov	r0, r3
 8009184:	3720      	adds	r7, #32
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b088      	sub	sp, #32
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
 8009192:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009198:	2311      	movs	r3, #17
 800919a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800919c:	2340      	movs	r3, #64	@ 0x40
 800919e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091a0:	2300      	movs	r3, #0
 80091a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091aa:	f107 0308 	add.w	r3, r7, #8
 80091ae:	4619      	mov	r1, r3
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f7ff ff52 	bl	800905a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80091b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091ba:	2111      	movs	r1, #17
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f9f7 	bl	80095b0 <SDMMC_GetCmdResp1>
 80091c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091c4:	69fb      	ldr	r3, [r7, #28]
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3720      	adds	r7, #32
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b088      	sub	sp, #32
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
 80091d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80091dc:	2312      	movs	r3, #18
 80091de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80091e0:	2340      	movs	r3, #64	@ 0x40
 80091e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091e4:	2300      	movs	r3, #0
 80091e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091ee:	f107 0308 	add.w	r3, r7, #8
 80091f2:	4619      	mov	r1, r3
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f7ff ff30 	bl	800905a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80091fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091fe:	2112      	movs	r1, #18
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 f9d5 	bl	80095b0 <SDMMC_GetCmdResp1>
 8009206:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009208:	69fb      	ldr	r3, [r7, #28]
}
 800920a:	4618      	mov	r0, r3
 800920c:	3720      	adds	r7, #32
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b088      	sub	sp, #32
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
 800921a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009220:	2318      	movs	r3, #24
 8009222:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009224:	2340      	movs	r3, #64	@ 0x40
 8009226:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009228:	2300      	movs	r3, #0
 800922a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800922c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009230:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009232:	f107 0308 	add.w	r3, r7, #8
 8009236:	4619      	mov	r1, r3
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f7ff ff0e 	bl	800905a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800923e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009242:	2118      	movs	r1, #24
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 f9b3 	bl	80095b0 <SDMMC_GetCmdResp1>
 800924a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800924c:	69fb      	ldr	r3, [r7, #28]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3720      	adds	r7, #32
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b088      	sub	sp, #32
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
 800925e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009264:	2319      	movs	r3, #25
 8009266:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009268:	2340      	movs	r3, #64	@ 0x40
 800926a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800926c:	2300      	movs	r3, #0
 800926e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009270:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009274:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009276:	f107 0308 	add.w	r3, r7, #8
 800927a:	4619      	mov	r1, r3
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f7ff feec 	bl	800905a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009286:	2119      	movs	r1, #25
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 f991 	bl	80095b0 <SDMMC_GetCmdResp1>
 800928e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009290:	69fb      	ldr	r3, [r7, #28]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3720      	adds	r7, #32
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
	...

0800929c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b088      	sub	sp, #32
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80092a4:	2300      	movs	r3, #0
 80092a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80092a8:	230c      	movs	r3, #12
 80092aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80092ac:	2340      	movs	r3, #64	@ 0x40
 80092ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092b0:	2300      	movs	r3, #0
 80092b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092ba:	f107 0308 	add.w	r3, r7, #8
 80092be:	4619      	mov	r1, r3
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f7ff feca 	bl	800905a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80092c6:	4a05      	ldr	r2, [pc, #20]	@ (80092dc <SDMMC_CmdStopTransfer+0x40>)
 80092c8:	210c      	movs	r1, #12
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 f970 	bl	80095b0 <SDMMC_GetCmdResp1>
 80092d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092d2:	69fb      	ldr	r3, [r7, #28]
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3720      	adds	r7, #32
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	05f5e100 	.word	0x05f5e100

080092e0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b08a      	sub	sp, #40	@ 0x28
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80092f0:	2307      	movs	r3, #7
 80092f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80092f4:	2340      	movs	r3, #64	@ 0x40
 80092f6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092f8:	2300      	movs	r3, #0
 80092fa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009300:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009302:	f107 0310 	add.w	r3, r7, #16
 8009306:	4619      	mov	r1, r3
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f7ff fea6 	bl	800905a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800930e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009312:	2107      	movs	r1, #7
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f000 f94b 	bl	80095b0 <SDMMC_GetCmdResp1>
 800931a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800931c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800931e:	4618      	mov	r0, r3
 8009320:	3728      	adds	r7, #40	@ 0x28
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b088      	sub	sp, #32
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800932e:	2300      	movs	r3, #0
 8009330:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009332:	2300      	movs	r3, #0
 8009334:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009336:	2300      	movs	r3, #0
 8009338:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800933a:	2300      	movs	r3, #0
 800933c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800933e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009342:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009344:	f107 0308 	add.w	r3, r7, #8
 8009348:	4619      	mov	r1, r3
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f7ff fe85 	bl	800905a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 fb65 	bl	8009a20 <SDMMC_GetCmdError>
 8009356:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009358:	69fb      	ldr	r3, [r7, #28]
}
 800935a:	4618      	mov	r0, r3
 800935c:	3720      	adds	r7, #32
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b088      	sub	sp, #32
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800936a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800936e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009370:	2308      	movs	r3, #8
 8009372:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009374:	2340      	movs	r3, #64	@ 0x40
 8009376:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009378:	2300      	movs	r3, #0
 800937a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800937c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009380:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009382:	f107 0308 	add.w	r3, r7, #8
 8009386:	4619      	mov	r1, r3
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f7ff fe66 	bl	800905a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 faf8 	bl	8009984 <SDMMC_GetCmdResp7>
 8009394:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009396:	69fb      	ldr	r3, [r7, #28]
}
 8009398:	4618      	mov	r0, r3
 800939a:	3720      	adds	r7, #32
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b088      	sub	sp, #32
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80093ae:	2337      	movs	r3, #55	@ 0x37
 80093b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80093b2:	2340      	movs	r3, #64	@ 0x40
 80093b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80093b6:	2300      	movs	r3, #0
 80093b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80093ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80093c0:	f107 0308 	add.w	r3, r7, #8
 80093c4:	4619      	mov	r1, r3
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f7ff fe47 	bl	800905a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80093cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093d0:	2137      	movs	r1, #55	@ 0x37
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 f8ec 	bl	80095b0 <SDMMC_GetCmdResp1>
 80093d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093da:	69fb      	ldr	r3, [r7, #28]
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3720      	adds	r7, #32
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b088      	sub	sp, #32
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80093f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80093f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80093fa:	2329      	movs	r3, #41	@ 0x29
 80093fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80093fe:	2340      	movs	r3, #64	@ 0x40
 8009400:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009402:	2300      	movs	r3, #0
 8009404:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009406:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800940a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800940c:	f107 0308 	add.w	r3, r7, #8
 8009410:	4619      	mov	r1, r3
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f7ff fe21 	bl	800905a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 f9ff 	bl	800981c <SDMMC_GetCmdResp3>
 800941e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009420:	69fb      	ldr	r3, [r7, #28]
}
 8009422:	4618      	mov	r0, r3
 8009424:	3720      	adds	r7, #32
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b088      	sub	sp, #32
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
 8009432:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009438:	2306      	movs	r3, #6
 800943a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800943c:	2340      	movs	r3, #64	@ 0x40
 800943e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009440:	2300      	movs	r3, #0
 8009442:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009444:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009448:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800944a:	f107 0308 	add.w	r3, r7, #8
 800944e:	4619      	mov	r1, r3
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f7ff fe02 	bl	800905a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800945a:	2106      	movs	r1, #6
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 f8a7 	bl	80095b0 <SDMMC_GetCmdResp1>
 8009462:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009464:	69fb      	ldr	r3, [r7, #28]
}
 8009466:	4618      	mov	r0, r3
 8009468:	3720      	adds	r7, #32
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b088      	sub	sp, #32
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009476:	2300      	movs	r3, #0
 8009478:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800947a:	2333      	movs	r3, #51	@ 0x33
 800947c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800947e:	2340      	movs	r3, #64	@ 0x40
 8009480:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009482:	2300      	movs	r3, #0
 8009484:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009486:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800948a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800948c:	f107 0308 	add.w	r3, r7, #8
 8009490:	4619      	mov	r1, r3
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f7ff fde1 	bl	800905a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009498:	f241 3288 	movw	r2, #5000	@ 0x1388
 800949c:	2133      	movs	r1, #51	@ 0x33
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f886 	bl	80095b0 <SDMMC_GetCmdResp1>
 80094a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094a6:	69fb      	ldr	r3, [r7, #28]
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3720      	adds	r7, #32
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b088      	sub	sp, #32
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80094b8:	2300      	movs	r3, #0
 80094ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80094bc:	2302      	movs	r3, #2
 80094be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80094c0:	23c0      	movs	r3, #192	@ 0xc0
 80094c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80094c4:	2300      	movs	r3, #0
 80094c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80094c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80094cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80094ce:	f107 0308 	add.w	r3, r7, #8
 80094d2:	4619      	mov	r1, r3
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f7ff fdc0 	bl	800905a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 f956 	bl	800978c <SDMMC_GetCmdResp2>
 80094e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094e2:	69fb      	ldr	r3, [r7, #28]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3720      	adds	r7, #32
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b088      	sub	sp, #32
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80094fa:	2309      	movs	r3, #9
 80094fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80094fe:	23c0      	movs	r3, #192	@ 0xc0
 8009500:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009502:	2300      	movs	r3, #0
 8009504:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009506:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800950a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800950c:	f107 0308 	add.w	r3, r7, #8
 8009510:	4619      	mov	r1, r3
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f7ff fda1 	bl	800905a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 f937 	bl	800978c <SDMMC_GetCmdResp2>
 800951e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009520:	69fb      	ldr	r3, [r7, #28]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3720      	adds	r7, #32
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b088      	sub	sp, #32
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
 8009532:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009534:	2300      	movs	r3, #0
 8009536:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009538:	2303      	movs	r3, #3
 800953a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800953c:	2340      	movs	r3, #64	@ 0x40
 800953e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009540:	2300      	movs	r3, #0
 8009542:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009544:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009548:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800954a:	f107 0308 	add.w	r3, r7, #8
 800954e:	4619      	mov	r1, r3
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f7ff fd82 	bl	800905a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009556:	683a      	ldr	r2, [r7, #0]
 8009558:	2103      	movs	r1, #3
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f99c 	bl	8009898 <SDMMC_GetCmdResp6>
 8009560:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009562:	69fb      	ldr	r3, [r7, #28]
}
 8009564:	4618      	mov	r0, r3
 8009566:	3720      	adds	r7, #32
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b088      	sub	sp, #32
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800957a:	230d      	movs	r3, #13
 800957c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800957e:	2340      	movs	r3, #64	@ 0x40
 8009580:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009582:	2300      	movs	r3, #0
 8009584:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009586:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800958a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800958c:	f107 0308 	add.w	r3, r7, #8
 8009590:	4619      	mov	r1, r3
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f7ff fd61 	bl	800905a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800959c:	210d      	movs	r1, #13
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 f806 	bl	80095b0 <SDMMC_GetCmdResp1>
 80095a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095a6:	69fb      	ldr	r3, [r7, #28]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3720      	adds	r7, #32
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b088      	sub	sp, #32
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	460b      	mov	r3, r1
 80095ba:	607a      	str	r2, [r7, #4]
 80095bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80095be:	4b70      	ldr	r3, [pc, #448]	@ (8009780 <SDMMC_GetCmdResp1+0x1d0>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a70      	ldr	r2, [pc, #448]	@ (8009784 <SDMMC_GetCmdResp1+0x1d4>)
 80095c4:	fba2 2303 	umull	r2, r3, r2, r3
 80095c8:	0a5a      	lsrs	r2, r3, #9
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	fb02 f303 	mul.w	r3, r2, r3
 80095d0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	1e5a      	subs	r2, r3, #1
 80095d6:	61fa      	str	r2, [r7, #28]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d102      	bne.n	80095e2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80095dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80095e0:	e0c9      	b.n	8009776 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095e6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d0ef      	beq.n	80095d2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1ea      	bne.n	80095d2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009600:	f003 0304 	and.w	r3, r3, #4
 8009604:	2b00      	cmp	r3, #0
 8009606:	d004      	beq.n	8009612 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2204      	movs	r2, #4
 800960c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800960e:	2304      	movs	r3, #4
 8009610:	e0b1      	b.n	8009776 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009616:	f003 0301 	and.w	r3, r3, #1
 800961a:	2b00      	cmp	r3, #0
 800961c:	d004      	beq.n	8009628 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2201      	movs	r2, #1
 8009622:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009624:	2301      	movs	r3, #1
 8009626:	e0a6      	b.n	8009776 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	22c5      	movs	r2, #197	@ 0xc5
 800962c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f7ff fd3d 	bl	80090ae <SDIO_GetCommandResponse>
 8009634:	4603      	mov	r3, r0
 8009636:	461a      	mov	r2, r3
 8009638:	7afb      	ldrb	r3, [r7, #11]
 800963a:	4293      	cmp	r3, r2
 800963c:	d001      	beq.n	8009642 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800963e:	2301      	movs	r3, #1
 8009640:	e099      	b.n	8009776 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009642:	2100      	movs	r1, #0
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f7ff fd3f 	bl	80090c8 <SDIO_GetResponse>
 800964a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	4b4e      	ldr	r3, [pc, #312]	@ (8009788 <SDMMC_GetCmdResp1+0x1d8>)
 8009650:	4013      	ands	r3, r2
 8009652:	2b00      	cmp	r3, #0
 8009654:	d101      	bne.n	800965a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009656:	2300      	movs	r3, #0
 8009658:	e08d      	b.n	8009776 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	2b00      	cmp	r3, #0
 800965e:	da02      	bge.n	8009666 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009660:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009664:	e087      	b.n	8009776 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800966c:	2b00      	cmp	r3, #0
 800966e:	d001      	beq.n	8009674 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009670:	2340      	movs	r3, #64	@ 0x40
 8009672:	e080      	b.n	8009776 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800967a:	2b00      	cmp	r3, #0
 800967c:	d001      	beq.n	8009682 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800967e:	2380      	movs	r3, #128	@ 0x80
 8009680:	e079      	b.n	8009776 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009688:	2b00      	cmp	r3, #0
 800968a:	d002      	beq.n	8009692 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800968c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009690:	e071      	b.n	8009776 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009698:	2b00      	cmp	r3, #0
 800969a:	d002      	beq.n	80096a2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800969c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80096a0:	e069      	b.n	8009776 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d002      	beq.n	80096b2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80096ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80096b0:	e061      	b.n	8009776 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d002      	beq.n	80096c2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80096bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80096c0:	e059      	b.n	8009776 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d002      	beq.n	80096d2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80096cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80096d0:	e051      	b.n	8009776 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d002      	beq.n	80096e2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80096dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80096e0:	e049      	b.n	8009776 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d002      	beq.n	80096f2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80096ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80096f0:	e041      	b.n	8009776 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d002      	beq.n	8009702 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80096fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009700:	e039      	b.n	8009776 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009708:	2b00      	cmp	r3, #0
 800970a:	d002      	beq.n	8009712 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800970c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009710:	e031      	b.n	8009776 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009718:	2b00      	cmp	r3, #0
 800971a:	d002      	beq.n	8009722 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800971c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009720:	e029      	b.n	8009776 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009728:	2b00      	cmp	r3, #0
 800972a:	d002      	beq.n	8009732 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800972c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009730:	e021      	b.n	8009776 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009738:	2b00      	cmp	r3, #0
 800973a:	d002      	beq.n	8009742 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800973c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009740:	e019      	b.n	8009776 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009748:	2b00      	cmp	r3, #0
 800974a:	d002      	beq.n	8009752 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800974c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009750:	e011      	b.n	8009776 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009758:	2b00      	cmp	r3, #0
 800975a:	d002      	beq.n	8009762 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800975c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009760:	e009      	b.n	8009776 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	f003 0308 	and.w	r3, r3, #8
 8009768:	2b00      	cmp	r3, #0
 800976a:	d002      	beq.n	8009772 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800976c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8009770:	e001      	b.n	8009776 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009772:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009776:	4618      	mov	r0, r3
 8009778:	3720      	adds	r7, #32
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	2000000c 	.word	0x2000000c
 8009784:	10624dd3 	.word	0x10624dd3
 8009788:	fdffe008 	.word	0xfdffe008

0800978c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800978c:	b480      	push	{r7}
 800978e:	b085      	sub	sp, #20
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009794:	4b1f      	ldr	r3, [pc, #124]	@ (8009814 <SDMMC_GetCmdResp2+0x88>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a1f      	ldr	r2, [pc, #124]	@ (8009818 <SDMMC_GetCmdResp2+0x8c>)
 800979a:	fba2 2303 	umull	r2, r3, r2, r3
 800979e:	0a5b      	lsrs	r3, r3, #9
 80097a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097a4:	fb02 f303 	mul.w	r3, r2, r3
 80097a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	1e5a      	subs	r2, r3, #1
 80097ae:	60fa      	str	r2, [r7, #12]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d102      	bne.n	80097ba <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80097b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80097b8:	e026      	b.n	8009808 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d0ef      	beq.n	80097aa <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d1ea      	bne.n	80097aa <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097d8:	f003 0304 	and.w	r3, r3, #4
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d004      	beq.n	80097ea <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2204      	movs	r2, #4
 80097e4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80097e6:	2304      	movs	r3, #4
 80097e8:	e00e      	b.n	8009808 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097ee:	f003 0301 	and.w	r3, r3, #1
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d004      	beq.n	8009800 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2201      	movs	r2, #1
 80097fa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80097fc:	2301      	movs	r3, #1
 80097fe:	e003      	b.n	8009808 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	22c5      	movs	r2, #197	@ 0xc5
 8009804:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009806:	2300      	movs	r3, #0
}
 8009808:	4618      	mov	r0, r3
 800980a:	3714      	adds	r7, #20
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr
 8009814:	2000000c 	.word	0x2000000c
 8009818:	10624dd3 	.word	0x10624dd3

0800981c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800981c:	b480      	push	{r7}
 800981e:	b085      	sub	sp, #20
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009824:	4b1a      	ldr	r3, [pc, #104]	@ (8009890 <SDMMC_GetCmdResp3+0x74>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a1a      	ldr	r2, [pc, #104]	@ (8009894 <SDMMC_GetCmdResp3+0x78>)
 800982a:	fba2 2303 	umull	r2, r3, r2, r3
 800982e:	0a5b      	lsrs	r3, r3, #9
 8009830:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009834:	fb02 f303 	mul.w	r3, r2, r3
 8009838:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	1e5a      	subs	r2, r3, #1
 800983e:	60fa      	str	r2, [r7, #12]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d102      	bne.n	800984a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009844:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009848:	e01b      	b.n	8009882 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800984e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009856:	2b00      	cmp	r3, #0
 8009858:	d0ef      	beq.n	800983a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009860:	2b00      	cmp	r3, #0
 8009862:	d1ea      	bne.n	800983a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009868:	f003 0304 	and.w	r3, r3, #4
 800986c:	2b00      	cmp	r3, #0
 800986e:	d004      	beq.n	800987a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2204      	movs	r2, #4
 8009874:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009876:	2304      	movs	r3, #4
 8009878:	e003      	b.n	8009882 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	22c5      	movs	r2, #197	@ 0xc5
 800987e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3714      	adds	r7, #20
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	2000000c 	.word	0x2000000c
 8009894:	10624dd3 	.word	0x10624dd3

08009898 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b088      	sub	sp, #32
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	460b      	mov	r3, r1
 80098a2:	607a      	str	r2, [r7, #4]
 80098a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80098a6:	4b35      	ldr	r3, [pc, #212]	@ (800997c <SDMMC_GetCmdResp6+0xe4>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a35      	ldr	r2, [pc, #212]	@ (8009980 <SDMMC_GetCmdResp6+0xe8>)
 80098ac:	fba2 2303 	umull	r2, r3, r2, r3
 80098b0:	0a5b      	lsrs	r3, r3, #9
 80098b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80098b6:	fb02 f303 	mul.w	r3, r2, r3
 80098ba:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80098bc:	69fb      	ldr	r3, [r7, #28]
 80098be:	1e5a      	subs	r2, r3, #1
 80098c0:	61fa      	str	r2, [r7, #28]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d102      	bne.n	80098cc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80098c6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80098ca:	e052      	b.n	8009972 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098d0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d0ef      	beq.n	80098bc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80098dc:	69bb      	ldr	r3, [r7, #24]
 80098de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d1ea      	bne.n	80098bc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098ea:	f003 0304 	and.w	r3, r3, #4
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d004      	beq.n	80098fc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2204      	movs	r2, #4
 80098f6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80098f8:	2304      	movs	r3, #4
 80098fa:	e03a      	b.n	8009972 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009900:	f003 0301 	and.w	r3, r3, #1
 8009904:	2b00      	cmp	r3, #0
 8009906:	d004      	beq.n	8009912 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2201      	movs	r2, #1
 800990c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800990e:	2301      	movs	r3, #1
 8009910:	e02f      	b.n	8009972 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f7ff fbcb 	bl	80090ae <SDIO_GetCommandResponse>
 8009918:	4603      	mov	r3, r0
 800991a:	461a      	mov	r2, r3
 800991c:	7afb      	ldrb	r3, [r7, #11]
 800991e:	4293      	cmp	r3, r2
 8009920:	d001      	beq.n	8009926 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009922:	2301      	movs	r3, #1
 8009924:	e025      	b.n	8009972 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	22c5      	movs	r2, #197	@ 0xc5
 800992a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800992c:	2100      	movs	r1, #0
 800992e:	68f8      	ldr	r0, [r7, #12]
 8009930:	f7ff fbca 	bl	80090c8 <SDIO_GetResponse>
 8009934:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d106      	bne.n	800994e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	0c1b      	lsrs	r3, r3, #16
 8009944:	b29a      	uxth	r2, r3
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800994a:	2300      	movs	r3, #0
 800994c:	e011      	b.n	8009972 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009954:	2b00      	cmp	r3, #0
 8009956:	d002      	beq.n	800995e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009958:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800995c:	e009      	b.n	8009972 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009964:	2b00      	cmp	r3, #0
 8009966:	d002      	beq.n	800996e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009968:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800996c:	e001      	b.n	8009972 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800996e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009972:	4618      	mov	r0, r3
 8009974:	3720      	adds	r7, #32
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	2000000c 	.word	0x2000000c
 8009980:	10624dd3 	.word	0x10624dd3

08009984 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009984:	b480      	push	{r7}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800998c:	4b22      	ldr	r3, [pc, #136]	@ (8009a18 <SDMMC_GetCmdResp7+0x94>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a22      	ldr	r2, [pc, #136]	@ (8009a1c <SDMMC_GetCmdResp7+0x98>)
 8009992:	fba2 2303 	umull	r2, r3, r2, r3
 8009996:	0a5b      	lsrs	r3, r3, #9
 8009998:	f241 3288 	movw	r2, #5000	@ 0x1388
 800999c:	fb02 f303 	mul.w	r3, r2, r3
 80099a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	1e5a      	subs	r2, r3, #1
 80099a6:	60fa      	str	r2, [r7, #12]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d102      	bne.n	80099b2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80099ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80099b0:	e02c      	b.n	8009a0c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d0ef      	beq.n	80099a2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d1ea      	bne.n	80099a2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099d0:	f003 0304 	and.w	r3, r3, #4
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d004      	beq.n	80099e2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2204      	movs	r2, #4
 80099dc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80099de:	2304      	movs	r3, #4
 80099e0:	e014      	b.n	8009a0c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099e6:	f003 0301 	and.w	r3, r3, #1
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d004      	beq.n	80099f8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2201      	movs	r2, #1
 80099f2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80099f4:	2301      	movs	r3, #1
 80099f6:	e009      	b.n	8009a0c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d002      	beq.n	8009a0a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2240      	movs	r2, #64	@ 0x40
 8009a08:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009a0a:	2300      	movs	r3, #0
  
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3714      	adds	r7, #20
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr
 8009a18:	2000000c 	.word	0x2000000c
 8009a1c:	10624dd3 	.word	0x10624dd3

08009a20 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009a28:	4b11      	ldr	r3, [pc, #68]	@ (8009a70 <SDMMC_GetCmdError+0x50>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a11      	ldr	r2, [pc, #68]	@ (8009a74 <SDMMC_GetCmdError+0x54>)
 8009a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a32:	0a5b      	lsrs	r3, r3, #9
 8009a34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a38:	fb02 f303 	mul.w	r3, r2, r3
 8009a3c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	1e5a      	subs	r2, r3, #1
 8009a42:	60fa      	str	r2, [r7, #12]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d102      	bne.n	8009a4e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009a48:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009a4c:	e009      	b.n	8009a62 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d0f1      	beq.n	8009a3e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	22c5      	movs	r2, #197	@ 0xc5
 8009a5e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8009a60:	2300      	movs	r3, #0
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3714      	adds	r7, #20
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr
 8009a6e:	bf00      	nop
 8009a70:	2000000c 	.word	0x2000000c
 8009a74:	10624dd3 	.word	0x10624dd3

08009a78 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009a7c:	4904      	ldr	r1, [pc, #16]	@ (8009a90 <MX_FATFS_Init+0x18>)
 8009a7e:	4805      	ldr	r0, [pc, #20]	@ (8009a94 <MX_FATFS_Init+0x1c>)
 8009a80:	f000 fa84 	bl	8009f8c <FATFS_LinkDriver>
 8009a84:	4603      	mov	r3, r0
 8009a86:	461a      	mov	r2, r3
 8009a88:	4b03      	ldr	r3, [pc, #12]	@ (8009a98 <MX_FATFS_Init+0x20>)
 8009a8a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009a8c:	bf00      	nop
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	200009dc 	.word	0x200009dc
 8009a94:	0800f344 	.word	0x0800f344
 8009a98:	200009d8 	.word	0x200009d8

08009a9c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009aa6:	f000 f896 	bl	8009bd6 <BSP_SD_IsDetected>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d001      	beq.n	8009ab4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e012      	b.n	8009ada <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009ab4:	480b      	ldr	r0, [pc, #44]	@ (8009ae4 <BSP_SD_Init+0x48>)
 8009ab6:	f7fc fa23 	bl	8005f00 <HAL_SD_Init>
 8009aba:	4603      	mov	r3, r0
 8009abc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009abe:	79fb      	ldrb	r3, [r7, #7]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d109      	bne.n	8009ad8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009ac4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009ac8:	4806      	ldr	r0, [pc, #24]	@ (8009ae4 <BSP_SD_Init+0x48>)
 8009aca:	f7fc fff1 	bl	8006ab0 <HAL_SD_ConfigWideBusOperation>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d001      	beq.n	8009ad8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009ad8:	79fb      	ldrb	r3, [r7, #7]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3708      	adds	r7, #8
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	20000460 	.word	0x20000460

08009ae8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b086      	sub	sp, #24
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009af4:	2300      	movs	r3, #0
 8009af6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	68ba      	ldr	r2, [r7, #8]
 8009afc:	68f9      	ldr	r1, [r7, #12]
 8009afe:	4806      	ldr	r0, [pc, #24]	@ (8009b18 <BSP_SD_ReadBlocks_DMA+0x30>)
 8009b00:	f7fc faae 	bl	8006060 <HAL_SD_ReadBlocks_DMA>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d001      	beq.n	8009b0e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3718      	adds	r7, #24
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	20000460 	.word	0x20000460

08009b1c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b086      	sub	sp, #24
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	68ba      	ldr	r2, [r7, #8]
 8009b30:	68f9      	ldr	r1, [r7, #12]
 8009b32:	4806      	ldr	r0, [pc, #24]	@ (8009b4c <BSP_SD_WriteBlocks_DMA+0x30>)
 8009b34:	f7fc fb76 	bl	8006224 <HAL_SD_WriteBlocks_DMA>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d001      	beq.n	8009b42 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3718      	adds	r7, #24
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	20000460 	.word	0x20000460

08009b50 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009b54:	4805      	ldr	r0, [pc, #20]	@ (8009b6c <BSP_SD_GetCardState+0x1c>)
 8009b56:	f7fd f845 	bl	8006be4 <HAL_SD_GetCardState>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b04      	cmp	r3, #4
 8009b5e:	bf14      	ite	ne
 8009b60:	2301      	movne	r3, #1
 8009b62:	2300      	moveq	r3, #0
 8009b64:	b2db      	uxtb	r3, r3
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	20000460 	.word	0x20000460

08009b70 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009b78:	6879      	ldr	r1, [r7, #4]
 8009b7a:	4803      	ldr	r0, [pc, #12]	@ (8009b88 <BSP_SD_GetCardInfo+0x18>)
 8009b7c:	f7fc ff6c 	bl	8006a58 <HAL_SD_GetCardInfo>
}
 8009b80:	bf00      	nop
 8009b82:	3708      	adds	r7, #8
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	20000460 	.word	0x20000460

08009b8c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8009b94:	f000 f818 	bl	8009bc8 <BSP_SD_AbortCallback>
}
 8009b98:	bf00      	nop
 8009b9a:	3708      	adds	r7, #8
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009ba8:	f000 f98c 	bl	8009ec4 <BSP_SD_WriteCpltCallback>
}
 8009bac:	bf00      	nop
 8009bae:	3708      	adds	r7, #8
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009bbc:	f000 f98e 	bl	8009edc <BSP_SD_ReadCpltCallback>
}
 8009bc0:	bf00      	nop
 8009bc2:	3708      	adds	r7, #8
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	af00      	add	r7, sp, #0

}
 8009bcc:	bf00      	nop
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr

08009bd6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009bd6:	b480      	push	{r7}
 8009bd8:	b083      	sub	sp, #12
 8009bda:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8009be0:	79fb      	ldrb	r3, [r7, #7]
 8009be2:	b2db      	uxtb	r3, r3
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	370c      	adds	r7, #12
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009bf8:	f7f9 fbb6 	bl	8003368 <HAL_GetTick>
 8009bfc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8009bfe:	e006      	b.n	8009c0e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009c00:	f7ff ffa6 	bl	8009b50 <BSP_SD_GetCardState>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d101      	bne.n	8009c0e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	e009      	b.n	8009c22 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8009c0e:	f7f9 fbab 	bl	8003368 <HAL_GetTick>
 8009c12:	4602      	mov	r2, r0
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	1ad3      	subs	r3, r2, r3
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d8f0      	bhi.n	8009c00 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009c1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3710      	adds	r7, #16
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
	...

08009c2c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	4603      	mov	r3, r0
 8009c34:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009c36:	4b0b      	ldr	r3, [pc, #44]	@ (8009c64 <SD_CheckStatus+0x38>)
 8009c38:	2201      	movs	r2, #1
 8009c3a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009c3c:	f7ff ff88 	bl	8009b50 <BSP_SD_GetCardState>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d107      	bne.n	8009c56 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009c46:	4b07      	ldr	r3, [pc, #28]	@ (8009c64 <SD_CheckStatus+0x38>)
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	f023 0301 	bic.w	r3, r3, #1
 8009c50:	b2da      	uxtb	r2, r3
 8009c52:	4b04      	ldr	r3, [pc, #16]	@ (8009c64 <SD_CheckStatus+0x38>)
 8009c54:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009c56:	4b03      	ldr	r3, [pc, #12]	@ (8009c64 <SD_CheckStatus+0x38>)
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	b2db      	uxtb	r3, r3
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3708      	adds	r7, #8
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	20000015 	.word	0x20000015

08009c68 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	4603      	mov	r3, r0
 8009c70:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009c72:	f7ff ff13 	bl	8009a9c <BSP_SD_Init>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d107      	bne.n	8009c8c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8009c7c:	79fb      	ldrb	r3, [r7, #7]
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7ff ffd4 	bl	8009c2c <SD_CheckStatus>
 8009c84:	4603      	mov	r3, r0
 8009c86:	461a      	mov	r2, r3
 8009c88:	4b04      	ldr	r3, [pc, #16]	@ (8009c9c <SD_initialize+0x34>)
 8009c8a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009c8c:	4b03      	ldr	r3, [pc, #12]	@ (8009c9c <SD_initialize+0x34>)
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	b2db      	uxtb	r3, r3
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3708      	adds	r7, #8
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	20000015 	.word	0x20000015

08009ca0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009caa:	79fb      	ldrb	r3, [r7, #7]
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7ff ffbd 	bl	8009c2c <SD_CheckStatus>
 8009cb2:	4603      	mov	r3, r0
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b086      	sub	sp, #24
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60b9      	str	r1, [r7, #8]
 8009cc4:	607a      	str	r2, [r7, #4]
 8009cc6:	603b      	str	r3, [r7, #0]
 8009cc8:	4603      	mov	r3, r0
 8009cca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009cd0:	f247 5030 	movw	r0, #30000	@ 0x7530
 8009cd4:	f7ff ff8c 	bl	8009bf0 <SD_CheckStatusWithTimeout>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	da01      	bge.n	8009ce2 <SD_read+0x26>
  {
    return res;
 8009cde:	7dfb      	ldrb	r3, [r7, #23]
 8009ce0:	e03b      	b.n	8009d5a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009ce2:	683a      	ldr	r2, [r7, #0]
 8009ce4:	6879      	ldr	r1, [r7, #4]
 8009ce6:	68b8      	ldr	r0, [r7, #8]
 8009ce8:	f7ff fefe 	bl	8009ae8 <BSP_SD_ReadBlocks_DMA>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d132      	bne.n	8009d58 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8009d64 <SD_read+0xa8>)
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009cf8:	f7f9 fb36 	bl	8003368 <HAL_GetTick>
 8009cfc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009cfe:	bf00      	nop
 8009d00:	4b18      	ldr	r3, [pc, #96]	@ (8009d64 <SD_read+0xa8>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d108      	bne.n	8009d1a <SD_read+0x5e>
 8009d08:	f7f9 fb2e 	bl	8003368 <HAL_GetTick>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	1ad3      	subs	r3, r2, r3
 8009d12:	f247 522f 	movw	r2, #29999	@ 0x752f
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d9f2      	bls.n	8009d00 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8009d1a:	4b12      	ldr	r3, [pc, #72]	@ (8009d64 <SD_read+0xa8>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d102      	bne.n	8009d28 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	75fb      	strb	r3, [r7, #23]
 8009d26:	e017      	b.n	8009d58 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8009d28:	4b0e      	ldr	r3, [pc, #56]	@ (8009d64 <SD_read+0xa8>)
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009d2e:	f7f9 fb1b 	bl	8003368 <HAL_GetTick>
 8009d32:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009d34:	e007      	b.n	8009d46 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009d36:	f7ff ff0b 	bl	8009b50 <BSP_SD_GetCardState>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d102      	bne.n	8009d46 <SD_read+0x8a>
          {
            res = RES_OK;
 8009d40:	2300      	movs	r3, #0
 8009d42:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009d44:	e008      	b.n	8009d58 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009d46:	f7f9 fb0f 	bl	8003368 <HAL_GetTick>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	1ad3      	subs	r3, r2, r3
 8009d50:	f247 522f 	movw	r2, #29999	@ 0x752f
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d9ee      	bls.n	8009d36 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8009d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3718      	adds	r7, #24
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	200009e4 	.word	0x200009e4

08009d68 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60b9      	str	r1, [r7, #8]
 8009d70:	607a      	str	r2, [r7, #4]
 8009d72:	603b      	str	r3, [r7, #0]
 8009d74:	4603      	mov	r3, r0
 8009d76:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8009d7c:	4b24      	ldr	r3, [pc, #144]	@ (8009e10 <SD_write+0xa8>)
 8009d7e:	2200      	movs	r2, #0
 8009d80:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009d82:	f247 5030 	movw	r0, #30000	@ 0x7530
 8009d86:	f7ff ff33 	bl	8009bf0 <SD_CheckStatusWithTimeout>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	da01      	bge.n	8009d94 <SD_write+0x2c>
  {
    return res;
 8009d90:	7dfb      	ldrb	r3, [r7, #23]
 8009d92:	e038      	b.n	8009e06 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009d94:	683a      	ldr	r2, [r7, #0]
 8009d96:	6879      	ldr	r1, [r7, #4]
 8009d98:	68b8      	ldr	r0, [r7, #8]
 8009d9a:	f7ff febf 	bl	8009b1c <BSP_SD_WriteBlocks_DMA>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d12f      	bne.n	8009e04 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009da4:	f7f9 fae0 	bl	8003368 <HAL_GetTick>
 8009da8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009daa:	bf00      	nop
 8009dac:	4b18      	ldr	r3, [pc, #96]	@ (8009e10 <SD_write+0xa8>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d108      	bne.n	8009dc6 <SD_write+0x5e>
 8009db4:	f7f9 fad8 	bl	8003368 <HAL_GetTick>
 8009db8:	4602      	mov	r2, r0
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	1ad3      	subs	r3, r2, r3
 8009dbe:	f247 522f 	movw	r2, #29999	@ 0x752f
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d9f2      	bls.n	8009dac <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8009dc6:	4b12      	ldr	r3, [pc, #72]	@ (8009e10 <SD_write+0xa8>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d102      	bne.n	8009dd4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	75fb      	strb	r3, [r7, #23]
 8009dd2:	e017      	b.n	8009e04 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8009dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8009e10 <SD_write+0xa8>)
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009dda:	f7f9 fac5 	bl	8003368 <HAL_GetTick>
 8009dde:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009de0:	e007      	b.n	8009df2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009de2:	f7ff feb5 	bl	8009b50 <BSP_SD_GetCardState>
 8009de6:	4603      	mov	r3, r0
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d102      	bne.n	8009df2 <SD_write+0x8a>
          {
            res = RES_OK;
 8009dec:	2300      	movs	r3, #0
 8009dee:	75fb      	strb	r3, [r7, #23]
            break;
 8009df0:	e008      	b.n	8009e04 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009df2:	f7f9 fab9 	bl	8003368 <HAL_GetTick>
 8009df6:	4602      	mov	r2, r0
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	1ad3      	subs	r3, r2, r3
 8009dfc:	f247 522f 	movw	r2, #29999	@ 0x752f
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d9ee      	bls.n	8009de2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8009e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3718      	adds	r7, #24
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	200009e0 	.word	0x200009e0

08009e14 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b08c      	sub	sp, #48	@ 0x30
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	603a      	str	r2, [r7, #0]
 8009e1e:	71fb      	strb	r3, [r7, #7]
 8009e20:	460b      	mov	r3, r1
 8009e22:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009e24:	2301      	movs	r3, #1
 8009e26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009e2a:	4b25      	ldr	r3, [pc, #148]	@ (8009ec0 <SD_ioctl+0xac>)
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	f003 0301 	and.w	r3, r3, #1
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d001      	beq.n	8009e3c <SD_ioctl+0x28>
 8009e38:	2303      	movs	r3, #3
 8009e3a:	e03c      	b.n	8009eb6 <SD_ioctl+0xa2>

  switch (cmd)
 8009e3c:	79bb      	ldrb	r3, [r7, #6]
 8009e3e:	2b03      	cmp	r3, #3
 8009e40:	d834      	bhi.n	8009eac <SD_ioctl+0x98>
 8009e42:	a201      	add	r2, pc, #4	@ (adr r2, 8009e48 <SD_ioctl+0x34>)
 8009e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e48:	08009e59 	.word	0x08009e59
 8009e4c:	08009e61 	.word	0x08009e61
 8009e50:	08009e79 	.word	0x08009e79
 8009e54:	08009e93 	.word	0x08009e93
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009e5e:	e028      	b.n	8009eb2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009e60:	f107 030c 	add.w	r3, r7, #12
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7ff fe83 	bl	8009b70 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009e6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009e70:	2300      	movs	r3, #0
 8009e72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009e76:	e01c      	b.n	8009eb2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009e78:	f107 030c 	add.w	r3, r7, #12
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f7ff fe77 	bl	8009b70 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e84:	b29a      	uxth	r2, r3
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009e90:	e00f      	b.n	8009eb2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009e92:	f107 030c 	add.w	r3, r7, #12
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7ff fe6a 	bl	8009b70 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e9e:	0a5a      	lsrs	r2, r3, #9
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009eaa:	e002      	b.n	8009eb2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009eac:	2304      	movs	r3, #4
 8009eae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8009eb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3730      	adds	r7, #48	@ 0x30
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	20000015 	.word	0x20000015

08009ec4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8009ec8:	4b03      	ldr	r3, [pc, #12]	@ (8009ed8 <BSP_SD_WriteCpltCallback+0x14>)
 8009eca:	2201      	movs	r2, #1
 8009ecc:	601a      	str	r2, [r3, #0]
}
 8009ece:	bf00      	nop
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr
 8009ed8:	200009e0 	.word	0x200009e0

08009edc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009edc:	b480      	push	{r7}
 8009ede:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8009ee0:	4b03      	ldr	r3, [pc, #12]	@ (8009ef0 <BSP_SD_ReadCpltCallback+0x14>)
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	601a      	str	r2, [r3, #0]
}
 8009ee6:	bf00      	nop
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr
 8009ef0:	200009e4 	.word	0x200009e4

08009ef4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b087      	sub	sp, #28
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	4613      	mov	r3, r2
 8009f00:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009f02:	2301      	movs	r3, #1
 8009f04:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009f06:	2300      	movs	r3, #0
 8009f08:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8009f88 <FATFS_LinkDriverEx+0x94>)
 8009f0c:	7a5b      	ldrb	r3, [r3, #9]
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d131      	bne.n	8009f78 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009f14:	4b1c      	ldr	r3, [pc, #112]	@ (8009f88 <FATFS_LinkDriverEx+0x94>)
 8009f16:	7a5b      	ldrb	r3, [r3, #9]
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8009f88 <FATFS_LinkDriverEx+0x94>)
 8009f1e:	2100      	movs	r1, #0
 8009f20:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009f22:	4b19      	ldr	r3, [pc, #100]	@ (8009f88 <FATFS_LinkDriverEx+0x94>)
 8009f24:	7a5b      	ldrb	r3, [r3, #9]
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	4a17      	ldr	r2, [pc, #92]	@ (8009f88 <FATFS_LinkDriverEx+0x94>)
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	4413      	add	r3, r2
 8009f2e:	68fa      	ldr	r2, [r7, #12]
 8009f30:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009f32:	4b15      	ldr	r3, [pc, #84]	@ (8009f88 <FATFS_LinkDriverEx+0x94>)
 8009f34:	7a5b      	ldrb	r3, [r3, #9]
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	461a      	mov	r2, r3
 8009f3a:	4b13      	ldr	r3, [pc, #76]	@ (8009f88 <FATFS_LinkDriverEx+0x94>)
 8009f3c:	4413      	add	r3, r2
 8009f3e:	79fa      	ldrb	r2, [r7, #7]
 8009f40:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009f42:	4b11      	ldr	r3, [pc, #68]	@ (8009f88 <FATFS_LinkDriverEx+0x94>)
 8009f44:	7a5b      	ldrb	r3, [r3, #9]
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	1c5a      	adds	r2, r3, #1
 8009f4a:	b2d1      	uxtb	r1, r2
 8009f4c:	4a0e      	ldr	r2, [pc, #56]	@ (8009f88 <FATFS_LinkDriverEx+0x94>)
 8009f4e:	7251      	strb	r1, [r2, #9]
 8009f50:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009f52:	7dbb      	ldrb	r3, [r7, #22]
 8009f54:	3330      	adds	r3, #48	@ 0x30
 8009f56:	b2da      	uxtb	r2, r3
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	3301      	adds	r3, #1
 8009f60:	223a      	movs	r2, #58	@ 0x3a
 8009f62:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	3302      	adds	r3, #2
 8009f68:	222f      	movs	r2, #47	@ 0x2f
 8009f6a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	3303      	adds	r3, #3
 8009f70:	2200      	movs	r2, #0
 8009f72:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009f74:	2300      	movs	r3, #0
 8009f76:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	371c      	adds	r7, #28
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	200009e8 	.word	0x200009e8

08009f8c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b082      	sub	sp, #8
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009f96:	2200      	movs	r2, #0
 8009f98:	6839      	ldr	r1, [r7, #0]
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f7ff ffaa 	bl	8009ef4 <FATFS_LinkDriverEx>
 8009fa0:	4603      	mov	r3, r0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3708      	adds	r7, #8
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <atof>:
 8009faa:	2100      	movs	r1, #0
 8009fac:	f000 be0a 	b.w	800abc4 <strtod>

08009fb0 <sulp>:
 8009fb0:	b570      	push	{r4, r5, r6, lr}
 8009fb2:	4604      	mov	r4, r0
 8009fb4:	460d      	mov	r5, r1
 8009fb6:	ec45 4b10 	vmov	d0, r4, r5
 8009fba:	4616      	mov	r6, r2
 8009fbc:	f003 fdac 	bl	800db18 <__ulp>
 8009fc0:	ec51 0b10 	vmov	r0, r1, d0
 8009fc4:	b17e      	cbz	r6, 8009fe6 <sulp+0x36>
 8009fc6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009fca:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	dd09      	ble.n	8009fe6 <sulp+0x36>
 8009fd2:	051b      	lsls	r3, r3, #20
 8009fd4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009fd8:	2400      	movs	r4, #0
 8009fda:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009fde:	4622      	mov	r2, r4
 8009fe0:	462b      	mov	r3, r5
 8009fe2:	f7f6 fb11 	bl	8000608 <__aeabi_dmul>
 8009fe6:	ec41 0b10 	vmov	d0, r0, r1
 8009fea:	bd70      	pop	{r4, r5, r6, pc}
 8009fec:	0000      	movs	r0, r0
	...

08009ff0 <_strtod_l>:
 8009ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff4:	b09f      	sub	sp, #124	@ 0x7c
 8009ff6:	460c      	mov	r4, r1
 8009ff8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	921a      	str	r2, [sp, #104]	@ 0x68
 8009ffe:	9005      	str	r0, [sp, #20]
 800a000:	f04f 0a00 	mov.w	sl, #0
 800a004:	f04f 0b00 	mov.w	fp, #0
 800a008:	460a      	mov	r2, r1
 800a00a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a00c:	7811      	ldrb	r1, [r2, #0]
 800a00e:	292b      	cmp	r1, #43	@ 0x2b
 800a010:	d04a      	beq.n	800a0a8 <_strtod_l+0xb8>
 800a012:	d838      	bhi.n	800a086 <_strtod_l+0x96>
 800a014:	290d      	cmp	r1, #13
 800a016:	d832      	bhi.n	800a07e <_strtod_l+0x8e>
 800a018:	2908      	cmp	r1, #8
 800a01a:	d832      	bhi.n	800a082 <_strtod_l+0x92>
 800a01c:	2900      	cmp	r1, #0
 800a01e:	d03b      	beq.n	800a098 <_strtod_l+0xa8>
 800a020:	2200      	movs	r2, #0
 800a022:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a024:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a026:	782a      	ldrb	r2, [r5, #0]
 800a028:	2a30      	cmp	r2, #48	@ 0x30
 800a02a:	f040 80b3 	bne.w	800a194 <_strtod_l+0x1a4>
 800a02e:	786a      	ldrb	r2, [r5, #1]
 800a030:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a034:	2a58      	cmp	r2, #88	@ 0x58
 800a036:	d16e      	bne.n	800a116 <_strtod_l+0x126>
 800a038:	9302      	str	r3, [sp, #8]
 800a03a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a03c:	9301      	str	r3, [sp, #4]
 800a03e:	ab1a      	add	r3, sp, #104	@ 0x68
 800a040:	9300      	str	r3, [sp, #0]
 800a042:	4a8e      	ldr	r2, [pc, #568]	@ (800a27c <_strtod_l+0x28c>)
 800a044:	9805      	ldr	r0, [sp, #20]
 800a046:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a048:	a919      	add	r1, sp, #100	@ 0x64
 800a04a:	f002 fe57 	bl	800ccfc <__gethex>
 800a04e:	f010 060f 	ands.w	r6, r0, #15
 800a052:	4604      	mov	r4, r0
 800a054:	d005      	beq.n	800a062 <_strtod_l+0x72>
 800a056:	2e06      	cmp	r6, #6
 800a058:	d128      	bne.n	800a0ac <_strtod_l+0xbc>
 800a05a:	3501      	adds	r5, #1
 800a05c:	2300      	movs	r3, #0
 800a05e:	9519      	str	r5, [sp, #100]	@ 0x64
 800a060:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a062:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a064:	2b00      	cmp	r3, #0
 800a066:	f040 858e 	bne.w	800ab86 <_strtod_l+0xb96>
 800a06a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a06c:	b1cb      	cbz	r3, 800a0a2 <_strtod_l+0xb2>
 800a06e:	4652      	mov	r2, sl
 800a070:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a074:	ec43 2b10 	vmov	d0, r2, r3
 800a078:	b01f      	add	sp, #124	@ 0x7c
 800a07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a07e:	2920      	cmp	r1, #32
 800a080:	d1ce      	bne.n	800a020 <_strtod_l+0x30>
 800a082:	3201      	adds	r2, #1
 800a084:	e7c1      	b.n	800a00a <_strtod_l+0x1a>
 800a086:	292d      	cmp	r1, #45	@ 0x2d
 800a088:	d1ca      	bne.n	800a020 <_strtod_l+0x30>
 800a08a:	2101      	movs	r1, #1
 800a08c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a08e:	1c51      	adds	r1, r2, #1
 800a090:	9119      	str	r1, [sp, #100]	@ 0x64
 800a092:	7852      	ldrb	r2, [r2, #1]
 800a094:	2a00      	cmp	r2, #0
 800a096:	d1c5      	bne.n	800a024 <_strtod_l+0x34>
 800a098:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a09a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f040 8570 	bne.w	800ab82 <_strtod_l+0xb92>
 800a0a2:	4652      	mov	r2, sl
 800a0a4:	465b      	mov	r3, fp
 800a0a6:	e7e5      	b.n	800a074 <_strtod_l+0x84>
 800a0a8:	2100      	movs	r1, #0
 800a0aa:	e7ef      	b.n	800a08c <_strtod_l+0x9c>
 800a0ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a0ae:	b13a      	cbz	r2, 800a0c0 <_strtod_l+0xd0>
 800a0b0:	2135      	movs	r1, #53	@ 0x35
 800a0b2:	a81c      	add	r0, sp, #112	@ 0x70
 800a0b4:	f003 fe2a 	bl	800dd0c <__copybits>
 800a0b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a0ba:	9805      	ldr	r0, [sp, #20]
 800a0bc:	f003 f9f8 	bl	800d4b0 <_Bfree>
 800a0c0:	3e01      	subs	r6, #1
 800a0c2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a0c4:	2e04      	cmp	r6, #4
 800a0c6:	d806      	bhi.n	800a0d6 <_strtod_l+0xe6>
 800a0c8:	e8df f006 	tbb	[pc, r6]
 800a0cc:	201d0314 	.word	0x201d0314
 800a0d0:	14          	.byte	0x14
 800a0d1:	00          	.byte	0x00
 800a0d2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a0d6:	05e1      	lsls	r1, r4, #23
 800a0d8:	bf48      	it	mi
 800a0da:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a0de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a0e2:	0d1b      	lsrs	r3, r3, #20
 800a0e4:	051b      	lsls	r3, r3, #20
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d1bb      	bne.n	800a062 <_strtod_l+0x72>
 800a0ea:	f001 febd 	bl	800be68 <__errno>
 800a0ee:	2322      	movs	r3, #34	@ 0x22
 800a0f0:	6003      	str	r3, [r0, #0]
 800a0f2:	e7b6      	b.n	800a062 <_strtod_l+0x72>
 800a0f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a0f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a0fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a100:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a104:	e7e7      	b.n	800a0d6 <_strtod_l+0xe6>
 800a106:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a284 <_strtod_l+0x294>
 800a10a:	e7e4      	b.n	800a0d6 <_strtod_l+0xe6>
 800a10c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a110:	f04f 3aff 	mov.w	sl, #4294967295
 800a114:	e7df      	b.n	800a0d6 <_strtod_l+0xe6>
 800a116:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a118:	1c5a      	adds	r2, r3, #1
 800a11a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a11c:	785b      	ldrb	r3, [r3, #1]
 800a11e:	2b30      	cmp	r3, #48	@ 0x30
 800a120:	d0f9      	beq.n	800a116 <_strtod_l+0x126>
 800a122:	2b00      	cmp	r3, #0
 800a124:	d09d      	beq.n	800a062 <_strtod_l+0x72>
 800a126:	2301      	movs	r3, #1
 800a128:	9309      	str	r3, [sp, #36]	@ 0x24
 800a12a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a12c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a12e:	2300      	movs	r3, #0
 800a130:	9308      	str	r3, [sp, #32]
 800a132:	930a      	str	r3, [sp, #40]	@ 0x28
 800a134:	461f      	mov	r7, r3
 800a136:	220a      	movs	r2, #10
 800a138:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a13a:	7805      	ldrb	r5, [r0, #0]
 800a13c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a140:	b2d9      	uxtb	r1, r3
 800a142:	2909      	cmp	r1, #9
 800a144:	d928      	bls.n	800a198 <_strtod_l+0x1a8>
 800a146:	494e      	ldr	r1, [pc, #312]	@ (800a280 <_strtod_l+0x290>)
 800a148:	2201      	movs	r2, #1
 800a14a:	f001 fe1e 	bl	800bd8a <strncmp>
 800a14e:	2800      	cmp	r0, #0
 800a150:	d032      	beq.n	800a1b8 <_strtod_l+0x1c8>
 800a152:	2000      	movs	r0, #0
 800a154:	462a      	mov	r2, r5
 800a156:	4681      	mov	r9, r0
 800a158:	463d      	mov	r5, r7
 800a15a:	4603      	mov	r3, r0
 800a15c:	2a65      	cmp	r2, #101	@ 0x65
 800a15e:	d001      	beq.n	800a164 <_strtod_l+0x174>
 800a160:	2a45      	cmp	r2, #69	@ 0x45
 800a162:	d114      	bne.n	800a18e <_strtod_l+0x19e>
 800a164:	b91d      	cbnz	r5, 800a16e <_strtod_l+0x17e>
 800a166:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a168:	4302      	orrs	r2, r0
 800a16a:	d095      	beq.n	800a098 <_strtod_l+0xa8>
 800a16c:	2500      	movs	r5, #0
 800a16e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a170:	1c62      	adds	r2, r4, #1
 800a172:	9219      	str	r2, [sp, #100]	@ 0x64
 800a174:	7862      	ldrb	r2, [r4, #1]
 800a176:	2a2b      	cmp	r2, #43	@ 0x2b
 800a178:	d077      	beq.n	800a26a <_strtod_l+0x27a>
 800a17a:	2a2d      	cmp	r2, #45	@ 0x2d
 800a17c:	d07b      	beq.n	800a276 <_strtod_l+0x286>
 800a17e:	f04f 0c00 	mov.w	ip, #0
 800a182:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a186:	2909      	cmp	r1, #9
 800a188:	f240 8082 	bls.w	800a290 <_strtod_l+0x2a0>
 800a18c:	9419      	str	r4, [sp, #100]	@ 0x64
 800a18e:	f04f 0800 	mov.w	r8, #0
 800a192:	e0a2      	b.n	800a2da <_strtod_l+0x2ea>
 800a194:	2300      	movs	r3, #0
 800a196:	e7c7      	b.n	800a128 <_strtod_l+0x138>
 800a198:	2f08      	cmp	r7, #8
 800a19a:	bfd5      	itete	le
 800a19c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a19e:	9908      	ldrgt	r1, [sp, #32]
 800a1a0:	fb02 3301 	mlale	r3, r2, r1, r3
 800a1a4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a1a8:	f100 0001 	add.w	r0, r0, #1
 800a1ac:	bfd4      	ite	le
 800a1ae:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a1b0:	9308      	strgt	r3, [sp, #32]
 800a1b2:	3701      	adds	r7, #1
 800a1b4:	9019      	str	r0, [sp, #100]	@ 0x64
 800a1b6:	e7bf      	b.n	800a138 <_strtod_l+0x148>
 800a1b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a1ba:	1c5a      	adds	r2, r3, #1
 800a1bc:	9219      	str	r2, [sp, #100]	@ 0x64
 800a1be:	785a      	ldrb	r2, [r3, #1]
 800a1c0:	b37f      	cbz	r7, 800a222 <_strtod_l+0x232>
 800a1c2:	4681      	mov	r9, r0
 800a1c4:	463d      	mov	r5, r7
 800a1c6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a1ca:	2b09      	cmp	r3, #9
 800a1cc:	d912      	bls.n	800a1f4 <_strtod_l+0x204>
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e7c4      	b.n	800a15c <_strtod_l+0x16c>
 800a1d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a1d4:	1c5a      	adds	r2, r3, #1
 800a1d6:	9219      	str	r2, [sp, #100]	@ 0x64
 800a1d8:	785a      	ldrb	r2, [r3, #1]
 800a1da:	3001      	adds	r0, #1
 800a1dc:	2a30      	cmp	r2, #48	@ 0x30
 800a1de:	d0f8      	beq.n	800a1d2 <_strtod_l+0x1e2>
 800a1e0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a1e4:	2b08      	cmp	r3, #8
 800a1e6:	f200 84d3 	bhi.w	800ab90 <_strtod_l+0xba0>
 800a1ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a1ec:	930c      	str	r3, [sp, #48]	@ 0x30
 800a1ee:	4681      	mov	r9, r0
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	4605      	mov	r5, r0
 800a1f4:	3a30      	subs	r2, #48	@ 0x30
 800a1f6:	f100 0301 	add.w	r3, r0, #1
 800a1fa:	d02a      	beq.n	800a252 <_strtod_l+0x262>
 800a1fc:	4499      	add	r9, r3
 800a1fe:	eb00 0c05 	add.w	ip, r0, r5
 800a202:	462b      	mov	r3, r5
 800a204:	210a      	movs	r1, #10
 800a206:	4563      	cmp	r3, ip
 800a208:	d10d      	bne.n	800a226 <_strtod_l+0x236>
 800a20a:	1c69      	adds	r1, r5, #1
 800a20c:	4401      	add	r1, r0
 800a20e:	4428      	add	r0, r5
 800a210:	2808      	cmp	r0, #8
 800a212:	dc16      	bgt.n	800a242 <_strtod_l+0x252>
 800a214:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a216:	230a      	movs	r3, #10
 800a218:	fb03 2300 	mla	r3, r3, r0, r2
 800a21c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a21e:	2300      	movs	r3, #0
 800a220:	e018      	b.n	800a254 <_strtod_l+0x264>
 800a222:	4638      	mov	r0, r7
 800a224:	e7da      	b.n	800a1dc <_strtod_l+0x1ec>
 800a226:	2b08      	cmp	r3, #8
 800a228:	f103 0301 	add.w	r3, r3, #1
 800a22c:	dc03      	bgt.n	800a236 <_strtod_l+0x246>
 800a22e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a230:	434e      	muls	r6, r1
 800a232:	960a      	str	r6, [sp, #40]	@ 0x28
 800a234:	e7e7      	b.n	800a206 <_strtod_l+0x216>
 800a236:	2b10      	cmp	r3, #16
 800a238:	bfde      	ittt	le
 800a23a:	9e08      	ldrle	r6, [sp, #32]
 800a23c:	434e      	mulle	r6, r1
 800a23e:	9608      	strle	r6, [sp, #32]
 800a240:	e7e1      	b.n	800a206 <_strtod_l+0x216>
 800a242:	280f      	cmp	r0, #15
 800a244:	dceb      	bgt.n	800a21e <_strtod_l+0x22e>
 800a246:	9808      	ldr	r0, [sp, #32]
 800a248:	230a      	movs	r3, #10
 800a24a:	fb03 2300 	mla	r3, r3, r0, r2
 800a24e:	9308      	str	r3, [sp, #32]
 800a250:	e7e5      	b.n	800a21e <_strtod_l+0x22e>
 800a252:	4629      	mov	r1, r5
 800a254:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a256:	1c50      	adds	r0, r2, #1
 800a258:	9019      	str	r0, [sp, #100]	@ 0x64
 800a25a:	7852      	ldrb	r2, [r2, #1]
 800a25c:	4618      	mov	r0, r3
 800a25e:	460d      	mov	r5, r1
 800a260:	e7b1      	b.n	800a1c6 <_strtod_l+0x1d6>
 800a262:	f04f 0900 	mov.w	r9, #0
 800a266:	2301      	movs	r3, #1
 800a268:	e77d      	b.n	800a166 <_strtod_l+0x176>
 800a26a:	f04f 0c00 	mov.w	ip, #0
 800a26e:	1ca2      	adds	r2, r4, #2
 800a270:	9219      	str	r2, [sp, #100]	@ 0x64
 800a272:	78a2      	ldrb	r2, [r4, #2]
 800a274:	e785      	b.n	800a182 <_strtod_l+0x192>
 800a276:	f04f 0c01 	mov.w	ip, #1
 800a27a:	e7f8      	b.n	800a26e <_strtod_l+0x27e>
 800a27c:	0800f370 	.word	0x0800f370
 800a280:	0800f358 	.word	0x0800f358
 800a284:	7ff00000 	.word	0x7ff00000
 800a288:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a28a:	1c51      	adds	r1, r2, #1
 800a28c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a28e:	7852      	ldrb	r2, [r2, #1]
 800a290:	2a30      	cmp	r2, #48	@ 0x30
 800a292:	d0f9      	beq.n	800a288 <_strtod_l+0x298>
 800a294:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a298:	2908      	cmp	r1, #8
 800a29a:	f63f af78 	bhi.w	800a18e <_strtod_l+0x19e>
 800a29e:	3a30      	subs	r2, #48	@ 0x30
 800a2a0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a2a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a2a4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a2a6:	f04f 080a 	mov.w	r8, #10
 800a2aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a2ac:	1c56      	adds	r6, r2, #1
 800a2ae:	9619      	str	r6, [sp, #100]	@ 0x64
 800a2b0:	7852      	ldrb	r2, [r2, #1]
 800a2b2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a2b6:	f1be 0f09 	cmp.w	lr, #9
 800a2ba:	d939      	bls.n	800a330 <_strtod_l+0x340>
 800a2bc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a2be:	1a76      	subs	r6, r6, r1
 800a2c0:	2e08      	cmp	r6, #8
 800a2c2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a2c6:	dc03      	bgt.n	800a2d0 <_strtod_l+0x2e0>
 800a2c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a2ca:	4588      	cmp	r8, r1
 800a2cc:	bfa8      	it	ge
 800a2ce:	4688      	movge	r8, r1
 800a2d0:	f1bc 0f00 	cmp.w	ip, #0
 800a2d4:	d001      	beq.n	800a2da <_strtod_l+0x2ea>
 800a2d6:	f1c8 0800 	rsb	r8, r8, #0
 800a2da:	2d00      	cmp	r5, #0
 800a2dc:	d14e      	bne.n	800a37c <_strtod_l+0x38c>
 800a2de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a2e0:	4308      	orrs	r0, r1
 800a2e2:	f47f aebe 	bne.w	800a062 <_strtod_l+0x72>
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	f47f aed6 	bne.w	800a098 <_strtod_l+0xa8>
 800a2ec:	2a69      	cmp	r2, #105	@ 0x69
 800a2ee:	d028      	beq.n	800a342 <_strtod_l+0x352>
 800a2f0:	dc25      	bgt.n	800a33e <_strtod_l+0x34e>
 800a2f2:	2a49      	cmp	r2, #73	@ 0x49
 800a2f4:	d025      	beq.n	800a342 <_strtod_l+0x352>
 800a2f6:	2a4e      	cmp	r2, #78	@ 0x4e
 800a2f8:	f47f aece 	bne.w	800a098 <_strtod_l+0xa8>
 800a2fc:	499b      	ldr	r1, [pc, #620]	@ (800a56c <_strtod_l+0x57c>)
 800a2fe:	a819      	add	r0, sp, #100	@ 0x64
 800a300:	f002 ff1e 	bl	800d140 <__match>
 800a304:	2800      	cmp	r0, #0
 800a306:	f43f aec7 	beq.w	800a098 <_strtod_l+0xa8>
 800a30a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	2b28      	cmp	r3, #40	@ 0x28
 800a310:	d12e      	bne.n	800a370 <_strtod_l+0x380>
 800a312:	4997      	ldr	r1, [pc, #604]	@ (800a570 <_strtod_l+0x580>)
 800a314:	aa1c      	add	r2, sp, #112	@ 0x70
 800a316:	a819      	add	r0, sp, #100	@ 0x64
 800a318:	f002 ff26 	bl	800d168 <__hexnan>
 800a31c:	2805      	cmp	r0, #5
 800a31e:	d127      	bne.n	800a370 <_strtod_l+0x380>
 800a320:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a322:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a326:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a32a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a32e:	e698      	b.n	800a062 <_strtod_l+0x72>
 800a330:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a332:	fb08 2101 	mla	r1, r8, r1, r2
 800a336:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a33a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a33c:	e7b5      	b.n	800a2aa <_strtod_l+0x2ba>
 800a33e:	2a6e      	cmp	r2, #110	@ 0x6e
 800a340:	e7da      	b.n	800a2f8 <_strtod_l+0x308>
 800a342:	498c      	ldr	r1, [pc, #560]	@ (800a574 <_strtod_l+0x584>)
 800a344:	a819      	add	r0, sp, #100	@ 0x64
 800a346:	f002 fefb 	bl	800d140 <__match>
 800a34a:	2800      	cmp	r0, #0
 800a34c:	f43f aea4 	beq.w	800a098 <_strtod_l+0xa8>
 800a350:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a352:	4989      	ldr	r1, [pc, #548]	@ (800a578 <_strtod_l+0x588>)
 800a354:	3b01      	subs	r3, #1
 800a356:	a819      	add	r0, sp, #100	@ 0x64
 800a358:	9319      	str	r3, [sp, #100]	@ 0x64
 800a35a:	f002 fef1 	bl	800d140 <__match>
 800a35e:	b910      	cbnz	r0, 800a366 <_strtod_l+0x376>
 800a360:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a362:	3301      	adds	r3, #1
 800a364:	9319      	str	r3, [sp, #100]	@ 0x64
 800a366:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a588 <_strtod_l+0x598>
 800a36a:	f04f 0a00 	mov.w	sl, #0
 800a36e:	e678      	b.n	800a062 <_strtod_l+0x72>
 800a370:	4882      	ldr	r0, [pc, #520]	@ (800a57c <_strtod_l+0x58c>)
 800a372:	f001 fdb5 	bl	800bee0 <nan>
 800a376:	ec5b ab10 	vmov	sl, fp, d0
 800a37a:	e672      	b.n	800a062 <_strtod_l+0x72>
 800a37c:	eba8 0309 	sub.w	r3, r8, r9
 800a380:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a382:	9309      	str	r3, [sp, #36]	@ 0x24
 800a384:	2f00      	cmp	r7, #0
 800a386:	bf08      	it	eq
 800a388:	462f      	moveq	r7, r5
 800a38a:	2d10      	cmp	r5, #16
 800a38c:	462c      	mov	r4, r5
 800a38e:	bfa8      	it	ge
 800a390:	2410      	movge	r4, #16
 800a392:	f7f6 f8bf 	bl	8000514 <__aeabi_ui2d>
 800a396:	2d09      	cmp	r5, #9
 800a398:	4682      	mov	sl, r0
 800a39a:	468b      	mov	fp, r1
 800a39c:	dc13      	bgt.n	800a3c6 <_strtod_l+0x3d6>
 800a39e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	f43f ae5e 	beq.w	800a062 <_strtod_l+0x72>
 800a3a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3a8:	dd78      	ble.n	800a49c <_strtod_l+0x4ac>
 800a3aa:	2b16      	cmp	r3, #22
 800a3ac:	dc5f      	bgt.n	800a46e <_strtod_l+0x47e>
 800a3ae:	4974      	ldr	r1, [pc, #464]	@ (800a580 <_strtod_l+0x590>)
 800a3b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a3b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3b8:	4652      	mov	r2, sl
 800a3ba:	465b      	mov	r3, fp
 800a3bc:	f7f6 f924 	bl	8000608 <__aeabi_dmul>
 800a3c0:	4682      	mov	sl, r0
 800a3c2:	468b      	mov	fp, r1
 800a3c4:	e64d      	b.n	800a062 <_strtod_l+0x72>
 800a3c6:	4b6e      	ldr	r3, [pc, #440]	@ (800a580 <_strtod_l+0x590>)
 800a3c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a3cc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a3d0:	f7f6 f91a 	bl	8000608 <__aeabi_dmul>
 800a3d4:	4682      	mov	sl, r0
 800a3d6:	9808      	ldr	r0, [sp, #32]
 800a3d8:	468b      	mov	fp, r1
 800a3da:	f7f6 f89b 	bl	8000514 <__aeabi_ui2d>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	4650      	mov	r0, sl
 800a3e4:	4659      	mov	r1, fp
 800a3e6:	f7f5 ff59 	bl	800029c <__adddf3>
 800a3ea:	2d0f      	cmp	r5, #15
 800a3ec:	4682      	mov	sl, r0
 800a3ee:	468b      	mov	fp, r1
 800a3f0:	ddd5      	ble.n	800a39e <_strtod_l+0x3ae>
 800a3f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3f4:	1b2c      	subs	r4, r5, r4
 800a3f6:	441c      	add	r4, r3
 800a3f8:	2c00      	cmp	r4, #0
 800a3fa:	f340 8096 	ble.w	800a52a <_strtod_l+0x53a>
 800a3fe:	f014 030f 	ands.w	r3, r4, #15
 800a402:	d00a      	beq.n	800a41a <_strtod_l+0x42a>
 800a404:	495e      	ldr	r1, [pc, #376]	@ (800a580 <_strtod_l+0x590>)
 800a406:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a40a:	4652      	mov	r2, sl
 800a40c:	465b      	mov	r3, fp
 800a40e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a412:	f7f6 f8f9 	bl	8000608 <__aeabi_dmul>
 800a416:	4682      	mov	sl, r0
 800a418:	468b      	mov	fp, r1
 800a41a:	f034 040f 	bics.w	r4, r4, #15
 800a41e:	d073      	beq.n	800a508 <_strtod_l+0x518>
 800a420:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a424:	dd48      	ble.n	800a4b8 <_strtod_l+0x4c8>
 800a426:	2400      	movs	r4, #0
 800a428:	46a0      	mov	r8, r4
 800a42a:	940a      	str	r4, [sp, #40]	@ 0x28
 800a42c:	46a1      	mov	r9, r4
 800a42e:	9a05      	ldr	r2, [sp, #20]
 800a430:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a588 <_strtod_l+0x598>
 800a434:	2322      	movs	r3, #34	@ 0x22
 800a436:	6013      	str	r3, [r2, #0]
 800a438:	f04f 0a00 	mov.w	sl, #0
 800a43c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a43e:	2b00      	cmp	r3, #0
 800a440:	f43f ae0f 	beq.w	800a062 <_strtod_l+0x72>
 800a444:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a446:	9805      	ldr	r0, [sp, #20]
 800a448:	f003 f832 	bl	800d4b0 <_Bfree>
 800a44c:	9805      	ldr	r0, [sp, #20]
 800a44e:	4649      	mov	r1, r9
 800a450:	f003 f82e 	bl	800d4b0 <_Bfree>
 800a454:	9805      	ldr	r0, [sp, #20]
 800a456:	4641      	mov	r1, r8
 800a458:	f003 f82a 	bl	800d4b0 <_Bfree>
 800a45c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a45e:	9805      	ldr	r0, [sp, #20]
 800a460:	f003 f826 	bl	800d4b0 <_Bfree>
 800a464:	9805      	ldr	r0, [sp, #20]
 800a466:	4621      	mov	r1, r4
 800a468:	f003 f822 	bl	800d4b0 <_Bfree>
 800a46c:	e5f9      	b.n	800a062 <_strtod_l+0x72>
 800a46e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a470:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a474:	4293      	cmp	r3, r2
 800a476:	dbbc      	blt.n	800a3f2 <_strtod_l+0x402>
 800a478:	4c41      	ldr	r4, [pc, #260]	@ (800a580 <_strtod_l+0x590>)
 800a47a:	f1c5 050f 	rsb	r5, r5, #15
 800a47e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a482:	4652      	mov	r2, sl
 800a484:	465b      	mov	r3, fp
 800a486:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a48a:	f7f6 f8bd 	bl	8000608 <__aeabi_dmul>
 800a48e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a490:	1b5d      	subs	r5, r3, r5
 800a492:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a496:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a49a:	e78f      	b.n	800a3bc <_strtod_l+0x3cc>
 800a49c:	3316      	adds	r3, #22
 800a49e:	dba8      	blt.n	800a3f2 <_strtod_l+0x402>
 800a4a0:	4b37      	ldr	r3, [pc, #220]	@ (800a580 <_strtod_l+0x590>)
 800a4a2:	eba9 0808 	sub.w	r8, r9, r8
 800a4a6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a4aa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a4ae:	4650      	mov	r0, sl
 800a4b0:	4659      	mov	r1, fp
 800a4b2:	f7f6 f9d3 	bl	800085c <__aeabi_ddiv>
 800a4b6:	e783      	b.n	800a3c0 <_strtod_l+0x3d0>
 800a4b8:	4b32      	ldr	r3, [pc, #200]	@ (800a584 <_strtod_l+0x594>)
 800a4ba:	9308      	str	r3, [sp, #32]
 800a4bc:	2300      	movs	r3, #0
 800a4be:	1124      	asrs	r4, r4, #4
 800a4c0:	4650      	mov	r0, sl
 800a4c2:	4659      	mov	r1, fp
 800a4c4:	461e      	mov	r6, r3
 800a4c6:	2c01      	cmp	r4, #1
 800a4c8:	dc21      	bgt.n	800a50e <_strtod_l+0x51e>
 800a4ca:	b10b      	cbz	r3, 800a4d0 <_strtod_l+0x4e0>
 800a4cc:	4682      	mov	sl, r0
 800a4ce:	468b      	mov	fp, r1
 800a4d0:	492c      	ldr	r1, [pc, #176]	@ (800a584 <_strtod_l+0x594>)
 800a4d2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a4d6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a4da:	4652      	mov	r2, sl
 800a4dc:	465b      	mov	r3, fp
 800a4de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4e2:	f7f6 f891 	bl	8000608 <__aeabi_dmul>
 800a4e6:	4b28      	ldr	r3, [pc, #160]	@ (800a588 <_strtod_l+0x598>)
 800a4e8:	460a      	mov	r2, r1
 800a4ea:	400b      	ands	r3, r1
 800a4ec:	4927      	ldr	r1, [pc, #156]	@ (800a58c <_strtod_l+0x59c>)
 800a4ee:	428b      	cmp	r3, r1
 800a4f0:	4682      	mov	sl, r0
 800a4f2:	d898      	bhi.n	800a426 <_strtod_l+0x436>
 800a4f4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a4f8:	428b      	cmp	r3, r1
 800a4fa:	bf86      	itte	hi
 800a4fc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a590 <_strtod_l+0x5a0>
 800a500:	f04f 3aff 	movhi.w	sl, #4294967295
 800a504:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a508:	2300      	movs	r3, #0
 800a50a:	9308      	str	r3, [sp, #32]
 800a50c:	e07a      	b.n	800a604 <_strtod_l+0x614>
 800a50e:	07e2      	lsls	r2, r4, #31
 800a510:	d505      	bpl.n	800a51e <_strtod_l+0x52e>
 800a512:	9b08      	ldr	r3, [sp, #32]
 800a514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a518:	f7f6 f876 	bl	8000608 <__aeabi_dmul>
 800a51c:	2301      	movs	r3, #1
 800a51e:	9a08      	ldr	r2, [sp, #32]
 800a520:	3208      	adds	r2, #8
 800a522:	3601      	adds	r6, #1
 800a524:	1064      	asrs	r4, r4, #1
 800a526:	9208      	str	r2, [sp, #32]
 800a528:	e7cd      	b.n	800a4c6 <_strtod_l+0x4d6>
 800a52a:	d0ed      	beq.n	800a508 <_strtod_l+0x518>
 800a52c:	4264      	negs	r4, r4
 800a52e:	f014 020f 	ands.w	r2, r4, #15
 800a532:	d00a      	beq.n	800a54a <_strtod_l+0x55a>
 800a534:	4b12      	ldr	r3, [pc, #72]	@ (800a580 <_strtod_l+0x590>)
 800a536:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a53a:	4650      	mov	r0, sl
 800a53c:	4659      	mov	r1, fp
 800a53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a542:	f7f6 f98b 	bl	800085c <__aeabi_ddiv>
 800a546:	4682      	mov	sl, r0
 800a548:	468b      	mov	fp, r1
 800a54a:	1124      	asrs	r4, r4, #4
 800a54c:	d0dc      	beq.n	800a508 <_strtod_l+0x518>
 800a54e:	2c1f      	cmp	r4, #31
 800a550:	dd20      	ble.n	800a594 <_strtod_l+0x5a4>
 800a552:	2400      	movs	r4, #0
 800a554:	46a0      	mov	r8, r4
 800a556:	940a      	str	r4, [sp, #40]	@ 0x28
 800a558:	46a1      	mov	r9, r4
 800a55a:	9a05      	ldr	r2, [sp, #20]
 800a55c:	2322      	movs	r3, #34	@ 0x22
 800a55e:	f04f 0a00 	mov.w	sl, #0
 800a562:	f04f 0b00 	mov.w	fp, #0
 800a566:	6013      	str	r3, [r2, #0]
 800a568:	e768      	b.n	800a43c <_strtod_l+0x44c>
 800a56a:	bf00      	nop
 800a56c:	0800f3bd 	.word	0x0800f3bd
 800a570:	0800f35c 	.word	0x0800f35c
 800a574:	0800f3b5 	.word	0x0800f3b5
 800a578:	0800f3f2 	.word	0x0800f3f2
 800a57c:	0800f7a0 	.word	0x0800f7a0
 800a580:	0800f570 	.word	0x0800f570
 800a584:	0800f548 	.word	0x0800f548
 800a588:	7ff00000 	.word	0x7ff00000
 800a58c:	7ca00000 	.word	0x7ca00000
 800a590:	7fefffff 	.word	0x7fefffff
 800a594:	f014 0310 	ands.w	r3, r4, #16
 800a598:	bf18      	it	ne
 800a59a:	236a      	movne	r3, #106	@ 0x6a
 800a59c:	4ea9      	ldr	r6, [pc, #676]	@ (800a844 <_strtod_l+0x854>)
 800a59e:	9308      	str	r3, [sp, #32]
 800a5a0:	4650      	mov	r0, sl
 800a5a2:	4659      	mov	r1, fp
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	07e2      	lsls	r2, r4, #31
 800a5a8:	d504      	bpl.n	800a5b4 <_strtod_l+0x5c4>
 800a5aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a5ae:	f7f6 f82b 	bl	8000608 <__aeabi_dmul>
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	1064      	asrs	r4, r4, #1
 800a5b6:	f106 0608 	add.w	r6, r6, #8
 800a5ba:	d1f4      	bne.n	800a5a6 <_strtod_l+0x5b6>
 800a5bc:	b10b      	cbz	r3, 800a5c2 <_strtod_l+0x5d2>
 800a5be:	4682      	mov	sl, r0
 800a5c0:	468b      	mov	fp, r1
 800a5c2:	9b08      	ldr	r3, [sp, #32]
 800a5c4:	b1b3      	cbz	r3, 800a5f4 <_strtod_l+0x604>
 800a5c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a5ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	4659      	mov	r1, fp
 800a5d2:	dd0f      	ble.n	800a5f4 <_strtod_l+0x604>
 800a5d4:	2b1f      	cmp	r3, #31
 800a5d6:	dd55      	ble.n	800a684 <_strtod_l+0x694>
 800a5d8:	2b34      	cmp	r3, #52	@ 0x34
 800a5da:	bfde      	ittt	le
 800a5dc:	f04f 33ff 	movle.w	r3, #4294967295
 800a5e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a5e4:	4093      	lslle	r3, r2
 800a5e6:	f04f 0a00 	mov.w	sl, #0
 800a5ea:	bfcc      	ite	gt
 800a5ec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a5f0:	ea03 0b01 	andle.w	fp, r3, r1
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	4650      	mov	r0, sl
 800a5fa:	4659      	mov	r1, fp
 800a5fc:	f7f6 fa6c 	bl	8000ad8 <__aeabi_dcmpeq>
 800a600:	2800      	cmp	r0, #0
 800a602:	d1a6      	bne.n	800a552 <_strtod_l+0x562>
 800a604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a606:	9300      	str	r3, [sp, #0]
 800a608:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a60a:	9805      	ldr	r0, [sp, #20]
 800a60c:	462b      	mov	r3, r5
 800a60e:	463a      	mov	r2, r7
 800a610:	f002 ffb6 	bl	800d580 <__s2b>
 800a614:	900a      	str	r0, [sp, #40]	@ 0x28
 800a616:	2800      	cmp	r0, #0
 800a618:	f43f af05 	beq.w	800a426 <_strtod_l+0x436>
 800a61c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a61e:	2a00      	cmp	r2, #0
 800a620:	eba9 0308 	sub.w	r3, r9, r8
 800a624:	bfa8      	it	ge
 800a626:	2300      	movge	r3, #0
 800a628:	9312      	str	r3, [sp, #72]	@ 0x48
 800a62a:	2400      	movs	r4, #0
 800a62c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a630:	9316      	str	r3, [sp, #88]	@ 0x58
 800a632:	46a0      	mov	r8, r4
 800a634:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a636:	9805      	ldr	r0, [sp, #20]
 800a638:	6859      	ldr	r1, [r3, #4]
 800a63a:	f002 fef9 	bl	800d430 <_Balloc>
 800a63e:	4681      	mov	r9, r0
 800a640:	2800      	cmp	r0, #0
 800a642:	f43f aef4 	beq.w	800a42e <_strtod_l+0x43e>
 800a646:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a648:	691a      	ldr	r2, [r3, #16]
 800a64a:	3202      	adds	r2, #2
 800a64c:	f103 010c 	add.w	r1, r3, #12
 800a650:	0092      	lsls	r2, r2, #2
 800a652:	300c      	adds	r0, #12
 800a654:	f001 fc35 	bl	800bec2 <memcpy>
 800a658:	ec4b ab10 	vmov	d0, sl, fp
 800a65c:	9805      	ldr	r0, [sp, #20]
 800a65e:	aa1c      	add	r2, sp, #112	@ 0x70
 800a660:	a91b      	add	r1, sp, #108	@ 0x6c
 800a662:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a666:	f003 fac7 	bl	800dbf8 <__d2b>
 800a66a:	901a      	str	r0, [sp, #104]	@ 0x68
 800a66c:	2800      	cmp	r0, #0
 800a66e:	f43f aede 	beq.w	800a42e <_strtod_l+0x43e>
 800a672:	9805      	ldr	r0, [sp, #20]
 800a674:	2101      	movs	r1, #1
 800a676:	f003 f819 	bl	800d6ac <__i2b>
 800a67a:	4680      	mov	r8, r0
 800a67c:	b948      	cbnz	r0, 800a692 <_strtod_l+0x6a2>
 800a67e:	f04f 0800 	mov.w	r8, #0
 800a682:	e6d4      	b.n	800a42e <_strtod_l+0x43e>
 800a684:	f04f 32ff 	mov.w	r2, #4294967295
 800a688:	fa02 f303 	lsl.w	r3, r2, r3
 800a68c:	ea03 0a0a 	and.w	sl, r3, sl
 800a690:	e7b0      	b.n	800a5f4 <_strtod_l+0x604>
 800a692:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a694:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a696:	2d00      	cmp	r5, #0
 800a698:	bfab      	itete	ge
 800a69a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a69c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a69e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a6a0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a6a2:	bfac      	ite	ge
 800a6a4:	18ef      	addge	r7, r5, r3
 800a6a6:	1b5e      	sublt	r6, r3, r5
 800a6a8:	9b08      	ldr	r3, [sp, #32]
 800a6aa:	1aed      	subs	r5, r5, r3
 800a6ac:	4415      	add	r5, r2
 800a6ae:	4b66      	ldr	r3, [pc, #408]	@ (800a848 <_strtod_l+0x858>)
 800a6b0:	3d01      	subs	r5, #1
 800a6b2:	429d      	cmp	r5, r3
 800a6b4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a6b8:	da50      	bge.n	800a75c <_strtod_l+0x76c>
 800a6ba:	1b5b      	subs	r3, r3, r5
 800a6bc:	2b1f      	cmp	r3, #31
 800a6be:	eba2 0203 	sub.w	r2, r2, r3
 800a6c2:	f04f 0101 	mov.w	r1, #1
 800a6c6:	dc3d      	bgt.n	800a744 <_strtod_l+0x754>
 800a6c8:	fa01 f303 	lsl.w	r3, r1, r3
 800a6cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a6d2:	18bd      	adds	r5, r7, r2
 800a6d4:	9b08      	ldr	r3, [sp, #32]
 800a6d6:	42af      	cmp	r7, r5
 800a6d8:	4416      	add	r6, r2
 800a6da:	441e      	add	r6, r3
 800a6dc:	463b      	mov	r3, r7
 800a6de:	bfa8      	it	ge
 800a6e0:	462b      	movge	r3, r5
 800a6e2:	42b3      	cmp	r3, r6
 800a6e4:	bfa8      	it	ge
 800a6e6:	4633      	movge	r3, r6
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	bfc2      	ittt	gt
 800a6ec:	1aed      	subgt	r5, r5, r3
 800a6ee:	1af6      	subgt	r6, r6, r3
 800a6f0:	1aff      	subgt	r7, r7, r3
 800a6f2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	dd16      	ble.n	800a726 <_strtod_l+0x736>
 800a6f8:	4641      	mov	r1, r8
 800a6fa:	9805      	ldr	r0, [sp, #20]
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	f003 f895 	bl	800d82c <__pow5mult>
 800a702:	4680      	mov	r8, r0
 800a704:	2800      	cmp	r0, #0
 800a706:	d0ba      	beq.n	800a67e <_strtod_l+0x68e>
 800a708:	4601      	mov	r1, r0
 800a70a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a70c:	9805      	ldr	r0, [sp, #20]
 800a70e:	f002 ffe3 	bl	800d6d8 <__multiply>
 800a712:	900e      	str	r0, [sp, #56]	@ 0x38
 800a714:	2800      	cmp	r0, #0
 800a716:	f43f ae8a 	beq.w	800a42e <_strtod_l+0x43e>
 800a71a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a71c:	9805      	ldr	r0, [sp, #20]
 800a71e:	f002 fec7 	bl	800d4b0 <_Bfree>
 800a722:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a724:	931a      	str	r3, [sp, #104]	@ 0x68
 800a726:	2d00      	cmp	r5, #0
 800a728:	dc1d      	bgt.n	800a766 <_strtod_l+0x776>
 800a72a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	dd23      	ble.n	800a778 <_strtod_l+0x788>
 800a730:	4649      	mov	r1, r9
 800a732:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a734:	9805      	ldr	r0, [sp, #20]
 800a736:	f003 f879 	bl	800d82c <__pow5mult>
 800a73a:	4681      	mov	r9, r0
 800a73c:	b9e0      	cbnz	r0, 800a778 <_strtod_l+0x788>
 800a73e:	f04f 0900 	mov.w	r9, #0
 800a742:	e674      	b.n	800a42e <_strtod_l+0x43e>
 800a744:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a748:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a74c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a750:	35e2      	adds	r5, #226	@ 0xe2
 800a752:	fa01 f305 	lsl.w	r3, r1, r5
 800a756:	9310      	str	r3, [sp, #64]	@ 0x40
 800a758:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a75a:	e7ba      	b.n	800a6d2 <_strtod_l+0x6e2>
 800a75c:	2300      	movs	r3, #0
 800a75e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a760:	2301      	movs	r3, #1
 800a762:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a764:	e7b5      	b.n	800a6d2 <_strtod_l+0x6e2>
 800a766:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a768:	9805      	ldr	r0, [sp, #20]
 800a76a:	462a      	mov	r2, r5
 800a76c:	f003 f8b8 	bl	800d8e0 <__lshift>
 800a770:	901a      	str	r0, [sp, #104]	@ 0x68
 800a772:	2800      	cmp	r0, #0
 800a774:	d1d9      	bne.n	800a72a <_strtod_l+0x73a>
 800a776:	e65a      	b.n	800a42e <_strtod_l+0x43e>
 800a778:	2e00      	cmp	r6, #0
 800a77a:	dd07      	ble.n	800a78c <_strtod_l+0x79c>
 800a77c:	4649      	mov	r1, r9
 800a77e:	9805      	ldr	r0, [sp, #20]
 800a780:	4632      	mov	r2, r6
 800a782:	f003 f8ad 	bl	800d8e0 <__lshift>
 800a786:	4681      	mov	r9, r0
 800a788:	2800      	cmp	r0, #0
 800a78a:	d0d8      	beq.n	800a73e <_strtod_l+0x74e>
 800a78c:	2f00      	cmp	r7, #0
 800a78e:	dd08      	ble.n	800a7a2 <_strtod_l+0x7b2>
 800a790:	4641      	mov	r1, r8
 800a792:	9805      	ldr	r0, [sp, #20]
 800a794:	463a      	mov	r2, r7
 800a796:	f003 f8a3 	bl	800d8e0 <__lshift>
 800a79a:	4680      	mov	r8, r0
 800a79c:	2800      	cmp	r0, #0
 800a79e:	f43f ae46 	beq.w	800a42e <_strtod_l+0x43e>
 800a7a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a7a4:	9805      	ldr	r0, [sp, #20]
 800a7a6:	464a      	mov	r2, r9
 800a7a8:	f003 f922 	bl	800d9f0 <__mdiff>
 800a7ac:	4604      	mov	r4, r0
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	f43f ae3d 	beq.w	800a42e <_strtod_l+0x43e>
 800a7b4:	68c3      	ldr	r3, [r0, #12]
 800a7b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	60c3      	str	r3, [r0, #12]
 800a7bc:	4641      	mov	r1, r8
 800a7be:	f003 f8fb 	bl	800d9b8 <__mcmp>
 800a7c2:	2800      	cmp	r0, #0
 800a7c4:	da46      	bge.n	800a854 <_strtod_l+0x864>
 800a7c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7c8:	ea53 030a 	orrs.w	r3, r3, sl
 800a7cc:	d16c      	bne.n	800a8a8 <_strtod_l+0x8b8>
 800a7ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d168      	bne.n	800a8a8 <_strtod_l+0x8b8>
 800a7d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a7da:	0d1b      	lsrs	r3, r3, #20
 800a7dc:	051b      	lsls	r3, r3, #20
 800a7de:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a7e2:	d961      	bls.n	800a8a8 <_strtod_l+0x8b8>
 800a7e4:	6963      	ldr	r3, [r4, #20]
 800a7e6:	b913      	cbnz	r3, 800a7ee <_strtod_l+0x7fe>
 800a7e8:	6923      	ldr	r3, [r4, #16]
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	dd5c      	ble.n	800a8a8 <_strtod_l+0x8b8>
 800a7ee:	4621      	mov	r1, r4
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	9805      	ldr	r0, [sp, #20]
 800a7f4:	f003 f874 	bl	800d8e0 <__lshift>
 800a7f8:	4641      	mov	r1, r8
 800a7fa:	4604      	mov	r4, r0
 800a7fc:	f003 f8dc 	bl	800d9b8 <__mcmp>
 800a800:	2800      	cmp	r0, #0
 800a802:	dd51      	ble.n	800a8a8 <_strtod_l+0x8b8>
 800a804:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a808:	9a08      	ldr	r2, [sp, #32]
 800a80a:	0d1b      	lsrs	r3, r3, #20
 800a80c:	051b      	lsls	r3, r3, #20
 800a80e:	2a00      	cmp	r2, #0
 800a810:	d06b      	beq.n	800a8ea <_strtod_l+0x8fa>
 800a812:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a816:	d868      	bhi.n	800a8ea <_strtod_l+0x8fa>
 800a818:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a81c:	f67f ae9d 	bls.w	800a55a <_strtod_l+0x56a>
 800a820:	4b0a      	ldr	r3, [pc, #40]	@ (800a84c <_strtod_l+0x85c>)
 800a822:	4650      	mov	r0, sl
 800a824:	4659      	mov	r1, fp
 800a826:	2200      	movs	r2, #0
 800a828:	f7f5 feee 	bl	8000608 <__aeabi_dmul>
 800a82c:	4b08      	ldr	r3, [pc, #32]	@ (800a850 <_strtod_l+0x860>)
 800a82e:	400b      	ands	r3, r1
 800a830:	4682      	mov	sl, r0
 800a832:	468b      	mov	fp, r1
 800a834:	2b00      	cmp	r3, #0
 800a836:	f47f ae05 	bne.w	800a444 <_strtod_l+0x454>
 800a83a:	9a05      	ldr	r2, [sp, #20]
 800a83c:	2322      	movs	r3, #34	@ 0x22
 800a83e:	6013      	str	r3, [r2, #0]
 800a840:	e600      	b.n	800a444 <_strtod_l+0x454>
 800a842:	bf00      	nop
 800a844:	0800f388 	.word	0x0800f388
 800a848:	fffffc02 	.word	0xfffffc02
 800a84c:	39500000 	.word	0x39500000
 800a850:	7ff00000 	.word	0x7ff00000
 800a854:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a858:	d165      	bne.n	800a926 <_strtod_l+0x936>
 800a85a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a85c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a860:	b35a      	cbz	r2, 800a8ba <_strtod_l+0x8ca>
 800a862:	4a9f      	ldr	r2, [pc, #636]	@ (800aae0 <_strtod_l+0xaf0>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d12b      	bne.n	800a8c0 <_strtod_l+0x8d0>
 800a868:	9b08      	ldr	r3, [sp, #32]
 800a86a:	4651      	mov	r1, sl
 800a86c:	b303      	cbz	r3, 800a8b0 <_strtod_l+0x8c0>
 800a86e:	4b9d      	ldr	r3, [pc, #628]	@ (800aae4 <_strtod_l+0xaf4>)
 800a870:	465a      	mov	r2, fp
 800a872:	4013      	ands	r3, r2
 800a874:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a878:	f04f 32ff 	mov.w	r2, #4294967295
 800a87c:	d81b      	bhi.n	800a8b6 <_strtod_l+0x8c6>
 800a87e:	0d1b      	lsrs	r3, r3, #20
 800a880:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a884:	fa02 f303 	lsl.w	r3, r2, r3
 800a888:	4299      	cmp	r1, r3
 800a88a:	d119      	bne.n	800a8c0 <_strtod_l+0x8d0>
 800a88c:	4b96      	ldr	r3, [pc, #600]	@ (800aae8 <_strtod_l+0xaf8>)
 800a88e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a890:	429a      	cmp	r2, r3
 800a892:	d102      	bne.n	800a89a <_strtod_l+0x8aa>
 800a894:	3101      	adds	r1, #1
 800a896:	f43f adca 	beq.w	800a42e <_strtod_l+0x43e>
 800a89a:	4b92      	ldr	r3, [pc, #584]	@ (800aae4 <_strtod_l+0xaf4>)
 800a89c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a89e:	401a      	ands	r2, r3
 800a8a0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a8a4:	f04f 0a00 	mov.w	sl, #0
 800a8a8:	9b08      	ldr	r3, [sp, #32]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d1b8      	bne.n	800a820 <_strtod_l+0x830>
 800a8ae:	e5c9      	b.n	800a444 <_strtod_l+0x454>
 800a8b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a8b4:	e7e8      	b.n	800a888 <_strtod_l+0x898>
 800a8b6:	4613      	mov	r3, r2
 800a8b8:	e7e6      	b.n	800a888 <_strtod_l+0x898>
 800a8ba:	ea53 030a 	orrs.w	r3, r3, sl
 800a8be:	d0a1      	beq.n	800a804 <_strtod_l+0x814>
 800a8c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a8c2:	b1db      	cbz	r3, 800a8fc <_strtod_l+0x90c>
 800a8c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a8c6:	4213      	tst	r3, r2
 800a8c8:	d0ee      	beq.n	800a8a8 <_strtod_l+0x8b8>
 800a8ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8cc:	9a08      	ldr	r2, [sp, #32]
 800a8ce:	4650      	mov	r0, sl
 800a8d0:	4659      	mov	r1, fp
 800a8d2:	b1bb      	cbz	r3, 800a904 <_strtod_l+0x914>
 800a8d4:	f7ff fb6c 	bl	8009fb0 <sulp>
 800a8d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a8dc:	ec53 2b10 	vmov	r2, r3, d0
 800a8e0:	f7f5 fcdc 	bl	800029c <__adddf3>
 800a8e4:	4682      	mov	sl, r0
 800a8e6:	468b      	mov	fp, r1
 800a8e8:	e7de      	b.n	800a8a8 <_strtod_l+0x8b8>
 800a8ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a8ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a8f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a8f6:	f04f 3aff 	mov.w	sl, #4294967295
 800a8fa:	e7d5      	b.n	800a8a8 <_strtod_l+0x8b8>
 800a8fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a8fe:	ea13 0f0a 	tst.w	r3, sl
 800a902:	e7e1      	b.n	800a8c8 <_strtod_l+0x8d8>
 800a904:	f7ff fb54 	bl	8009fb0 <sulp>
 800a908:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a90c:	ec53 2b10 	vmov	r2, r3, d0
 800a910:	f7f5 fcc2 	bl	8000298 <__aeabi_dsub>
 800a914:	2200      	movs	r2, #0
 800a916:	2300      	movs	r3, #0
 800a918:	4682      	mov	sl, r0
 800a91a:	468b      	mov	fp, r1
 800a91c:	f7f6 f8dc 	bl	8000ad8 <__aeabi_dcmpeq>
 800a920:	2800      	cmp	r0, #0
 800a922:	d0c1      	beq.n	800a8a8 <_strtod_l+0x8b8>
 800a924:	e619      	b.n	800a55a <_strtod_l+0x56a>
 800a926:	4641      	mov	r1, r8
 800a928:	4620      	mov	r0, r4
 800a92a:	f003 f9bd 	bl	800dca8 <__ratio>
 800a92e:	ec57 6b10 	vmov	r6, r7, d0
 800a932:	2200      	movs	r2, #0
 800a934:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a938:	4630      	mov	r0, r6
 800a93a:	4639      	mov	r1, r7
 800a93c:	f7f6 f8e0 	bl	8000b00 <__aeabi_dcmple>
 800a940:	2800      	cmp	r0, #0
 800a942:	d06f      	beq.n	800aa24 <_strtod_l+0xa34>
 800a944:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a946:	2b00      	cmp	r3, #0
 800a948:	d17a      	bne.n	800aa40 <_strtod_l+0xa50>
 800a94a:	f1ba 0f00 	cmp.w	sl, #0
 800a94e:	d158      	bne.n	800aa02 <_strtod_l+0xa12>
 800a950:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a952:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a956:	2b00      	cmp	r3, #0
 800a958:	d15a      	bne.n	800aa10 <_strtod_l+0xa20>
 800a95a:	4b64      	ldr	r3, [pc, #400]	@ (800aaec <_strtod_l+0xafc>)
 800a95c:	2200      	movs	r2, #0
 800a95e:	4630      	mov	r0, r6
 800a960:	4639      	mov	r1, r7
 800a962:	f7f6 f8c3 	bl	8000aec <__aeabi_dcmplt>
 800a966:	2800      	cmp	r0, #0
 800a968:	d159      	bne.n	800aa1e <_strtod_l+0xa2e>
 800a96a:	4630      	mov	r0, r6
 800a96c:	4639      	mov	r1, r7
 800a96e:	4b60      	ldr	r3, [pc, #384]	@ (800aaf0 <_strtod_l+0xb00>)
 800a970:	2200      	movs	r2, #0
 800a972:	f7f5 fe49 	bl	8000608 <__aeabi_dmul>
 800a976:	4606      	mov	r6, r0
 800a978:	460f      	mov	r7, r1
 800a97a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a97e:	9606      	str	r6, [sp, #24]
 800a980:	9307      	str	r3, [sp, #28]
 800a982:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a986:	4d57      	ldr	r5, [pc, #348]	@ (800aae4 <_strtod_l+0xaf4>)
 800a988:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a98c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a98e:	401d      	ands	r5, r3
 800a990:	4b58      	ldr	r3, [pc, #352]	@ (800aaf4 <_strtod_l+0xb04>)
 800a992:	429d      	cmp	r5, r3
 800a994:	f040 80b2 	bne.w	800aafc <_strtod_l+0xb0c>
 800a998:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a99a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a99e:	ec4b ab10 	vmov	d0, sl, fp
 800a9a2:	f003 f8b9 	bl	800db18 <__ulp>
 800a9a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a9aa:	ec51 0b10 	vmov	r0, r1, d0
 800a9ae:	f7f5 fe2b 	bl	8000608 <__aeabi_dmul>
 800a9b2:	4652      	mov	r2, sl
 800a9b4:	465b      	mov	r3, fp
 800a9b6:	f7f5 fc71 	bl	800029c <__adddf3>
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	4949      	ldr	r1, [pc, #292]	@ (800aae4 <_strtod_l+0xaf4>)
 800a9be:	4a4e      	ldr	r2, [pc, #312]	@ (800aaf8 <_strtod_l+0xb08>)
 800a9c0:	4019      	ands	r1, r3
 800a9c2:	4291      	cmp	r1, r2
 800a9c4:	4682      	mov	sl, r0
 800a9c6:	d942      	bls.n	800aa4e <_strtod_l+0xa5e>
 800a9c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a9ca:	4b47      	ldr	r3, [pc, #284]	@ (800aae8 <_strtod_l+0xaf8>)
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d103      	bne.n	800a9d8 <_strtod_l+0x9e8>
 800a9d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	f43f ad2b 	beq.w	800a42e <_strtod_l+0x43e>
 800a9d8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800aae8 <_strtod_l+0xaf8>
 800a9dc:	f04f 3aff 	mov.w	sl, #4294967295
 800a9e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a9e2:	9805      	ldr	r0, [sp, #20]
 800a9e4:	f002 fd64 	bl	800d4b0 <_Bfree>
 800a9e8:	9805      	ldr	r0, [sp, #20]
 800a9ea:	4649      	mov	r1, r9
 800a9ec:	f002 fd60 	bl	800d4b0 <_Bfree>
 800a9f0:	9805      	ldr	r0, [sp, #20]
 800a9f2:	4641      	mov	r1, r8
 800a9f4:	f002 fd5c 	bl	800d4b0 <_Bfree>
 800a9f8:	9805      	ldr	r0, [sp, #20]
 800a9fa:	4621      	mov	r1, r4
 800a9fc:	f002 fd58 	bl	800d4b0 <_Bfree>
 800aa00:	e618      	b.n	800a634 <_strtod_l+0x644>
 800aa02:	f1ba 0f01 	cmp.w	sl, #1
 800aa06:	d103      	bne.n	800aa10 <_strtod_l+0xa20>
 800aa08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	f43f ada5 	beq.w	800a55a <_strtod_l+0x56a>
 800aa10:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800aac0 <_strtod_l+0xad0>
 800aa14:	4f35      	ldr	r7, [pc, #212]	@ (800aaec <_strtod_l+0xafc>)
 800aa16:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aa1a:	2600      	movs	r6, #0
 800aa1c:	e7b1      	b.n	800a982 <_strtod_l+0x992>
 800aa1e:	4f34      	ldr	r7, [pc, #208]	@ (800aaf0 <_strtod_l+0xb00>)
 800aa20:	2600      	movs	r6, #0
 800aa22:	e7aa      	b.n	800a97a <_strtod_l+0x98a>
 800aa24:	4b32      	ldr	r3, [pc, #200]	@ (800aaf0 <_strtod_l+0xb00>)
 800aa26:	4630      	mov	r0, r6
 800aa28:	4639      	mov	r1, r7
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f7f5 fdec 	bl	8000608 <__aeabi_dmul>
 800aa30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa32:	4606      	mov	r6, r0
 800aa34:	460f      	mov	r7, r1
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d09f      	beq.n	800a97a <_strtod_l+0x98a>
 800aa3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800aa3e:	e7a0      	b.n	800a982 <_strtod_l+0x992>
 800aa40:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800aac8 <_strtod_l+0xad8>
 800aa44:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aa48:	ec57 6b17 	vmov	r6, r7, d7
 800aa4c:	e799      	b.n	800a982 <_strtod_l+0x992>
 800aa4e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800aa52:	9b08      	ldr	r3, [sp, #32]
 800aa54:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d1c1      	bne.n	800a9e0 <_strtod_l+0x9f0>
 800aa5c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aa60:	0d1b      	lsrs	r3, r3, #20
 800aa62:	051b      	lsls	r3, r3, #20
 800aa64:	429d      	cmp	r5, r3
 800aa66:	d1bb      	bne.n	800a9e0 <_strtod_l+0x9f0>
 800aa68:	4630      	mov	r0, r6
 800aa6a:	4639      	mov	r1, r7
 800aa6c:	f7f6 f92c 	bl	8000cc8 <__aeabi_d2lz>
 800aa70:	f7f5 fd9c 	bl	80005ac <__aeabi_l2d>
 800aa74:	4602      	mov	r2, r0
 800aa76:	460b      	mov	r3, r1
 800aa78:	4630      	mov	r0, r6
 800aa7a:	4639      	mov	r1, r7
 800aa7c:	f7f5 fc0c 	bl	8000298 <__aeabi_dsub>
 800aa80:	460b      	mov	r3, r1
 800aa82:	4602      	mov	r2, r0
 800aa84:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800aa88:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800aa8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa8e:	ea46 060a 	orr.w	r6, r6, sl
 800aa92:	431e      	orrs	r6, r3
 800aa94:	d06f      	beq.n	800ab76 <_strtod_l+0xb86>
 800aa96:	a30e      	add	r3, pc, #56	@ (adr r3, 800aad0 <_strtod_l+0xae0>)
 800aa98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9c:	f7f6 f826 	bl	8000aec <__aeabi_dcmplt>
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	f47f accf 	bne.w	800a444 <_strtod_l+0x454>
 800aaa6:	a30c      	add	r3, pc, #48	@ (adr r3, 800aad8 <_strtod_l+0xae8>)
 800aaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aab0:	f7f6 f83a 	bl	8000b28 <__aeabi_dcmpgt>
 800aab4:	2800      	cmp	r0, #0
 800aab6:	d093      	beq.n	800a9e0 <_strtod_l+0x9f0>
 800aab8:	e4c4      	b.n	800a444 <_strtod_l+0x454>
 800aaba:	bf00      	nop
 800aabc:	f3af 8000 	nop.w
 800aac0:	00000000 	.word	0x00000000
 800aac4:	bff00000 	.word	0xbff00000
 800aac8:	00000000 	.word	0x00000000
 800aacc:	3ff00000 	.word	0x3ff00000
 800aad0:	94a03595 	.word	0x94a03595
 800aad4:	3fdfffff 	.word	0x3fdfffff
 800aad8:	35afe535 	.word	0x35afe535
 800aadc:	3fe00000 	.word	0x3fe00000
 800aae0:	000fffff 	.word	0x000fffff
 800aae4:	7ff00000 	.word	0x7ff00000
 800aae8:	7fefffff 	.word	0x7fefffff
 800aaec:	3ff00000 	.word	0x3ff00000
 800aaf0:	3fe00000 	.word	0x3fe00000
 800aaf4:	7fe00000 	.word	0x7fe00000
 800aaf8:	7c9fffff 	.word	0x7c9fffff
 800aafc:	9b08      	ldr	r3, [sp, #32]
 800aafe:	b323      	cbz	r3, 800ab4a <_strtod_l+0xb5a>
 800ab00:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ab04:	d821      	bhi.n	800ab4a <_strtod_l+0xb5a>
 800ab06:	a328      	add	r3, pc, #160	@ (adr r3, 800aba8 <_strtod_l+0xbb8>)
 800ab08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0c:	4630      	mov	r0, r6
 800ab0e:	4639      	mov	r1, r7
 800ab10:	f7f5 fff6 	bl	8000b00 <__aeabi_dcmple>
 800ab14:	b1a0      	cbz	r0, 800ab40 <_strtod_l+0xb50>
 800ab16:	4639      	mov	r1, r7
 800ab18:	4630      	mov	r0, r6
 800ab1a:	f7f6 f84d 	bl	8000bb8 <__aeabi_d2uiz>
 800ab1e:	2801      	cmp	r0, #1
 800ab20:	bf38      	it	cc
 800ab22:	2001      	movcc	r0, #1
 800ab24:	f7f5 fcf6 	bl	8000514 <__aeabi_ui2d>
 800ab28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab2a:	4606      	mov	r6, r0
 800ab2c:	460f      	mov	r7, r1
 800ab2e:	b9fb      	cbnz	r3, 800ab70 <_strtod_l+0xb80>
 800ab30:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ab34:	9014      	str	r0, [sp, #80]	@ 0x50
 800ab36:	9315      	str	r3, [sp, #84]	@ 0x54
 800ab38:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ab3c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ab40:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ab42:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ab46:	1b5b      	subs	r3, r3, r5
 800ab48:	9311      	str	r3, [sp, #68]	@ 0x44
 800ab4a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ab4e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ab52:	f002 ffe1 	bl	800db18 <__ulp>
 800ab56:	4650      	mov	r0, sl
 800ab58:	ec53 2b10 	vmov	r2, r3, d0
 800ab5c:	4659      	mov	r1, fp
 800ab5e:	f7f5 fd53 	bl	8000608 <__aeabi_dmul>
 800ab62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ab66:	f7f5 fb99 	bl	800029c <__adddf3>
 800ab6a:	4682      	mov	sl, r0
 800ab6c:	468b      	mov	fp, r1
 800ab6e:	e770      	b.n	800aa52 <_strtod_l+0xa62>
 800ab70:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ab74:	e7e0      	b.n	800ab38 <_strtod_l+0xb48>
 800ab76:	a30e      	add	r3, pc, #56	@ (adr r3, 800abb0 <_strtod_l+0xbc0>)
 800ab78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab7c:	f7f5 ffb6 	bl	8000aec <__aeabi_dcmplt>
 800ab80:	e798      	b.n	800aab4 <_strtod_l+0xac4>
 800ab82:	2300      	movs	r3, #0
 800ab84:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab86:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ab88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab8a:	6013      	str	r3, [r2, #0]
 800ab8c:	f7ff ba6d 	b.w	800a06a <_strtod_l+0x7a>
 800ab90:	2a65      	cmp	r2, #101	@ 0x65
 800ab92:	f43f ab66 	beq.w	800a262 <_strtod_l+0x272>
 800ab96:	2a45      	cmp	r2, #69	@ 0x45
 800ab98:	f43f ab63 	beq.w	800a262 <_strtod_l+0x272>
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	f7ff bb9e 	b.w	800a2de <_strtod_l+0x2ee>
 800aba2:	bf00      	nop
 800aba4:	f3af 8000 	nop.w
 800aba8:	ffc00000 	.word	0xffc00000
 800abac:	41dfffff 	.word	0x41dfffff
 800abb0:	94a03595 	.word	0x94a03595
 800abb4:	3fcfffff 	.word	0x3fcfffff

0800abb8 <_strtod_r>:
 800abb8:	4b01      	ldr	r3, [pc, #4]	@ (800abc0 <_strtod_r+0x8>)
 800abba:	f7ff ba19 	b.w	8009ff0 <_strtod_l>
 800abbe:	bf00      	nop
 800abc0:	20000024 	.word	0x20000024

0800abc4 <strtod>:
 800abc4:	460a      	mov	r2, r1
 800abc6:	4601      	mov	r1, r0
 800abc8:	4802      	ldr	r0, [pc, #8]	@ (800abd4 <strtod+0x10>)
 800abca:	4b03      	ldr	r3, [pc, #12]	@ (800abd8 <strtod+0x14>)
 800abcc:	6800      	ldr	r0, [r0, #0]
 800abce:	f7ff ba0f 	b.w	8009ff0 <_strtod_l>
 800abd2:	bf00      	nop
 800abd4:	20000190 	.word	0x20000190
 800abd8:	20000024 	.word	0x20000024

0800abdc <__cvt>:
 800abdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abe0:	ec57 6b10 	vmov	r6, r7, d0
 800abe4:	2f00      	cmp	r7, #0
 800abe6:	460c      	mov	r4, r1
 800abe8:	4619      	mov	r1, r3
 800abea:	463b      	mov	r3, r7
 800abec:	bfbb      	ittet	lt
 800abee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800abf2:	461f      	movlt	r7, r3
 800abf4:	2300      	movge	r3, #0
 800abf6:	232d      	movlt	r3, #45	@ 0x2d
 800abf8:	700b      	strb	r3, [r1, #0]
 800abfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800abfc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ac00:	4691      	mov	r9, r2
 800ac02:	f023 0820 	bic.w	r8, r3, #32
 800ac06:	bfbc      	itt	lt
 800ac08:	4632      	movlt	r2, r6
 800ac0a:	4616      	movlt	r6, r2
 800ac0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ac10:	d005      	beq.n	800ac1e <__cvt+0x42>
 800ac12:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ac16:	d100      	bne.n	800ac1a <__cvt+0x3e>
 800ac18:	3401      	adds	r4, #1
 800ac1a:	2102      	movs	r1, #2
 800ac1c:	e000      	b.n	800ac20 <__cvt+0x44>
 800ac1e:	2103      	movs	r1, #3
 800ac20:	ab03      	add	r3, sp, #12
 800ac22:	9301      	str	r3, [sp, #4]
 800ac24:	ab02      	add	r3, sp, #8
 800ac26:	9300      	str	r3, [sp, #0]
 800ac28:	ec47 6b10 	vmov	d0, r6, r7
 800ac2c:	4653      	mov	r3, sl
 800ac2e:	4622      	mov	r2, r4
 800ac30:	f001 f9ee 	bl	800c010 <_dtoa_r>
 800ac34:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ac38:	4605      	mov	r5, r0
 800ac3a:	d119      	bne.n	800ac70 <__cvt+0x94>
 800ac3c:	f019 0f01 	tst.w	r9, #1
 800ac40:	d00e      	beq.n	800ac60 <__cvt+0x84>
 800ac42:	eb00 0904 	add.w	r9, r0, r4
 800ac46:	2200      	movs	r2, #0
 800ac48:	2300      	movs	r3, #0
 800ac4a:	4630      	mov	r0, r6
 800ac4c:	4639      	mov	r1, r7
 800ac4e:	f7f5 ff43 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac52:	b108      	cbz	r0, 800ac58 <__cvt+0x7c>
 800ac54:	f8cd 900c 	str.w	r9, [sp, #12]
 800ac58:	2230      	movs	r2, #48	@ 0x30
 800ac5a:	9b03      	ldr	r3, [sp, #12]
 800ac5c:	454b      	cmp	r3, r9
 800ac5e:	d31e      	bcc.n	800ac9e <__cvt+0xc2>
 800ac60:	9b03      	ldr	r3, [sp, #12]
 800ac62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac64:	1b5b      	subs	r3, r3, r5
 800ac66:	4628      	mov	r0, r5
 800ac68:	6013      	str	r3, [r2, #0]
 800ac6a:	b004      	add	sp, #16
 800ac6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ac74:	eb00 0904 	add.w	r9, r0, r4
 800ac78:	d1e5      	bne.n	800ac46 <__cvt+0x6a>
 800ac7a:	7803      	ldrb	r3, [r0, #0]
 800ac7c:	2b30      	cmp	r3, #48	@ 0x30
 800ac7e:	d10a      	bne.n	800ac96 <__cvt+0xba>
 800ac80:	2200      	movs	r2, #0
 800ac82:	2300      	movs	r3, #0
 800ac84:	4630      	mov	r0, r6
 800ac86:	4639      	mov	r1, r7
 800ac88:	f7f5 ff26 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac8c:	b918      	cbnz	r0, 800ac96 <__cvt+0xba>
 800ac8e:	f1c4 0401 	rsb	r4, r4, #1
 800ac92:	f8ca 4000 	str.w	r4, [sl]
 800ac96:	f8da 3000 	ldr.w	r3, [sl]
 800ac9a:	4499      	add	r9, r3
 800ac9c:	e7d3      	b.n	800ac46 <__cvt+0x6a>
 800ac9e:	1c59      	adds	r1, r3, #1
 800aca0:	9103      	str	r1, [sp, #12]
 800aca2:	701a      	strb	r2, [r3, #0]
 800aca4:	e7d9      	b.n	800ac5a <__cvt+0x7e>

0800aca6 <__exponent>:
 800aca6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aca8:	2900      	cmp	r1, #0
 800acaa:	bfba      	itte	lt
 800acac:	4249      	neglt	r1, r1
 800acae:	232d      	movlt	r3, #45	@ 0x2d
 800acb0:	232b      	movge	r3, #43	@ 0x2b
 800acb2:	2909      	cmp	r1, #9
 800acb4:	7002      	strb	r2, [r0, #0]
 800acb6:	7043      	strb	r3, [r0, #1]
 800acb8:	dd29      	ble.n	800ad0e <__exponent+0x68>
 800acba:	f10d 0307 	add.w	r3, sp, #7
 800acbe:	461d      	mov	r5, r3
 800acc0:	270a      	movs	r7, #10
 800acc2:	461a      	mov	r2, r3
 800acc4:	fbb1 f6f7 	udiv	r6, r1, r7
 800acc8:	fb07 1416 	mls	r4, r7, r6, r1
 800accc:	3430      	adds	r4, #48	@ 0x30
 800acce:	f802 4c01 	strb.w	r4, [r2, #-1]
 800acd2:	460c      	mov	r4, r1
 800acd4:	2c63      	cmp	r4, #99	@ 0x63
 800acd6:	f103 33ff 	add.w	r3, r3, #4294967295
 800acda:	4631      	mov	r1, r6
 800acdc:	dcf1      	bgt.n	800acc2 <__exponent+0x1c>
 800acde:	3130      	adds	r1, #48	@ 0x30
 800ace0:	1e94      	subs	r4, r2, #2
 800ace2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ace6:	1c41      	adds	r1, r0, #1
 800ace8:	4623      	mov	r3, r4
 800acea:	42ab      	cmp	r3, r5
 800acec:	d30a      	bcc.n	800ad04 <__exponent+0x5e>
 800acee:	f10d 0309 	add.w	r3, sp, #9
 800acf2:	1a9b      	subs	r3, r3, r2
 800acf4:	42ac      	cmp	r4, r5
 800acf6:	bf88      	it	hi
 800acf8:	2300      	movhi	r3, #0
 800acfa:	3302      	adds	r3, #2
 800acfc:	4403      	add	r3, r0
 800acfe:	1a18      	subs	r0, r3, r0
 800ad00:	b003      	add	sp, #12
 800ad02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad04:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ad08:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ad0c:	e7ed      	b.n	800acea <__exponent+0x44>
 800ad0e:	2330      	movs	r3, #48	@ 0x30
 800ad10:	3130      	adds	r1, #48	@ 0x30
 800ad12:	7083      	strb	r3, [r0, #2]
 800ad14:	70c1      	strb	r1, [r0, #3]
 800ad16:	1d03      	adds	r3, r0, #4
 800ad18:	e7f1      	b.n	800acfe <__exponent+0x58>
	...

0800ad1c <_printf_float>:
 800ad1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad20:	b08d      	sub	sp, #52	@ 0x34
 800ad22:	460c      	mov	r4, r1
 800ad24:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ad28:	4616      	mov	r6, r2
 800ad2a:	461f      	mov	r7, r3
 800ad2c:	4605      	mov	r5, r0
 800ad2e:	f001 f851 	bl	800bdd4 <_localeconv_r>
 800ad32:	6803      	ldr	r3, [r0, #0]
 800ad34:	9304      	str	r3, [sp, #16]
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7f5 faa2 	bl	8000280 <strlen>
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad40:	f8d8 3000 	ldr.w	r3, [r8]
 800ad44:	9005      	str	r0, [sp, #20]
 800ad46:	3307      	adds	r3, #7
 800ad48:	f023 0307 	bic.w	r3, r3, #7
 800ad4c:	f103 0208 	add.w	r2, r3, #8
 800ad50:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ad54:	f8d4 b000 	ldr.w	fp, [r4]
 800ad58:	f8c8 2000 	str.w	r2, [r8]
 800ad5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad60:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ad64:	9307      	str	r3, [sp, #28]
 800ad66:	f8cd 8018 	str.w	r8, [sp, #24]
 800ad6a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ad6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad72:	4b9c      	ldr	r3, [pc, #624]	@ (800afe4 <_printf_float+0x2c8>)
 800ad74:	f04f 32ff 	mov.w	r2, #4294967295
 800ad78:	f7f5 fee0 	bl	8000b3c <__aeabi_dcmpun>
 800ad7c:	bb70      	cbnz	r0, 800addc <_printf_float+0xc0>
 800ad7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad82:	4b98      	ldr	r3, [pc, #608]	@ (800afe4 <_printf_float+0x2c8>)
 800ad84:	f04f 32ff 	mov.w	r2, #4294967295
 800ad88:	f7f5 feba 	bl	8000b00 <__aeabi_dcmple>
 800ad8c:	bb30      	cbnz	r0, 800addc <_printf_float+0xc0>
 800ad8e:	2200      	movs	r2, #0
 800ad90:	2300      	movs	r3, #0
 800ad92:	4640      	mov	r0, r8
 800ad94:	4649      	mov	r1, r9
 800ad96:	f7f5 fea9 	bl	8000aec <__aeabi_dcmplt>
 800ad9a:	b110      	cbz	r0, 800ada2 <_printf_float+0x86>
 800ad9c:	232d      	movs	r3, #45	@ 0x2d
 800ad9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ada2:	4a91      	ldr	r2, [pc, #580]	@ (800afe8 <_printf_float+0x2cc>)
 800ada4:	4b91      	ldr	r3, [pc, #580]	@ (800afec <_printf_float+0x2d0>)
 800ada6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800adaa:	bf94      	ite	ls
 800adac:	4690      	movls	r8, r2
 800adae:	4698      	movhi	r8, r3
 800adb0:	2303      	movs	r3, #3
 800adb2:	6123      	str	r3, [r4, #16]
 800adb4:	f02b 0304 	bic.w	r3, fp, #4
 800adb8:	6023      	str	r3, [r4, #0]
 800adba:	f04f 0900 	mov.w	r9, #0
 800adbe:	9700      	str	r7, [sp, #0]
 800adc0:	4633      	mov	r3, r6
 800adc2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800adc4:	4621      	mov	r1, r4
 800adc6:	4628      	mov	r0, r5
 800adc8:	f000 f9d2 	bl	800b170 <_printf_common>
 800adcc:	3001      	adds	r0, #1
 800adce:	f040 808d 	bne.w	800aeec <_printf_float+0x1d0>
 800add2:	f04f 30ff 	mov.w	r0, #4294967295
 800add6:	b00d      	add	sp, #52	@ 0x34
 800add8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800addc:	4642      	mov	r2, r8
 800adde:	464b      	mov	r3, r9
 800ade0:	4640      	mov	r0, r8
 800ade2:	4649      	mov	r1, r9
 800ade4:	f7f5 feaa 	bl	8000b3c <__aeabi_dcmpun>
 800ade8:	b140      	cbz	r0, 800adfc <_printf_float+0xe0>
 800adea:	464b      	mov	r3, r9
 800adec:	2b00      	cmp	r3, #0
 800adee:	bfbc      	itt	lt
 800adf0:	232d      	movlt	r3, #45	@ 0x2d
 800adf2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800adf6:	4a7e      	ldr	r2, [pc, #504]	@ (800aff0 <_printf_float+0x2d4>)
 800adf8:	4b7e      	ldr	r3, [pc, #504]	@ (800aff4 <_printf_float+0x2d8>)
 800adfa:	e7d4      	b.n	800ada6 <_printf_float+0x8a>
 800adfc:	6863      	ldr	r3, [r4, #4]
 800adfe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ae02:	9206      	str	r2, [sp, #24]
 800ae04:	1c5a      	adds	r2, r3, #1
 800ae06:	d13b      	bne.n	800ae80 <_printf_float+0x164>
 800ae08:	2306      	movs	r3, #6
 800ae0a:	6063      	str	r3, [r4, #4]
 800ae0c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ae10:	2300      	movs	r3, #0
 800ae12:	6022      	str	r2, [r4, #0]
 800ae14:	9303      	str	r3, [sp, #12]
 800ae16:	ab0a      	add	r3, sp, #40	@ 0x28
 800ae18:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ae1c:	ab09      	add	r3, sp, #36	@ 0x24
 800ae1e:	9300      	str	r3, [sp, #0]
 800ae20:	6861      	ldr	r1, [r4, #4]
 800ae22:	ec49 8b10 	vmov	d0, r8, r9
 800ae26:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	f7ff fed6 	bl	800abdc <__cvt>
 800ae30:	9b06      	ldr	r3, [sp, #24]
 800ae32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ae34:	2b47      	cmp	r3, #71	@ 0x47
 800ae36:	4680      	mov	r8, r0
 800ae38:	d129      	bne.n	800ae8e <_printf_float+0x172>
 800ae3a:	1cc8      	adds	r0, r1, #3
 800ae3c:	db02      	blt.n	800ae44 <_printf_float+0x128>
 800ae3e:	6863      	ldr	r3, [r4, #4]
 800ae40:	4299      	cmp	r1, r3
 800ae42:	dd41      	ble.n	800aec8 <_printf_float+0x1ac>
 800ae44:	f1aa 0a02 	sub.w	sl, sl, #2
 800ae48:	fa5f fa8a 	uxtb.w	sl, sl
 800ae4c:	3901      	subs	r1, #1
 800ae4e:	4652      	mov	r2, sl
 800ae50:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ae54:	9109      	str	r1, [sp, #36]	@ 0x24
 800ae56:	f7ff ff26 	bl	800aca6 <__exponent>
 800ae5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ae5c:	1813      	adds	r3, r2, r0
 800ae5e:	2a01      	cmp	r2, #1
 800ae60:	4681      	mov	r9, r0
 800ae62:	6123      	str	r3, [r4, #16]
 800ae64:	dc02      	bgt.n	800ae6c <_printf_float+0x150>
 800ae66:	6822      	ldr	r2, [r4, #0]
 800ae68:	07d2      	lsls	r2, r2, #31
 800ae6a:	d501      	bpl.n	800ae70 <_printf_float+0x154>
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	6123      	str	r3, [r4, #16]
 800ae70:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d0a2      	beq.n	800adbe <_printf_float+0xa2>
 800ae78:	232d      	movs	r3, #45	@ 0x2d
 800ae7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae7e:	e79e      	b.n	800adbe <_printf_float+0xa2>
 800ae80:	9a06      	ldr	r2, [sp, #24]
 800ae82:	2a47      	cmp	r2, #71	@ 0x47
 800ae84:	d1c2      	bne.n	800ae0c <_printf_float+0xf0>
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d1c0      	bne.n	800ae0c <_printf_float+0xf0>
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	e7bd      	b.n	800ae0a <_printf_float+0xee>
 800ae8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ae92:	d9db      	bls.n	800ae4c <_printf_float+0x130>
 800ae94:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ae98:	d118      	bne.n	800aecc <_printf_float+0x1b0>
 800ae9a:	2900      	cmp	r1, #0
 800ae9c:	6863      	ldr	r3, [r4, #4]
 800ae9e:	dd0b      	ble.n	800aeb8 <_printf_float+0x19c>
 800aea0:	6121      	str	r1, [r4, #16]
 800aea2:	b913      	cbnz	r3, 800aeaa <_printf_float+0x18e>
 800aea4:	6822      	ldr	r2, [r4, #0]
 800aea6:	07d0      	lsls	r0, r2, #31
 800aea8:	d502      	bpl.n	800aeb0 <_printf_float+0x194>
 800aeaa:	3301      	adds	r3, #1
 800aeac:	440b      	add	r3, r1
 800aeae:	6123      	str	r3, [r4, #16]
 800aeb0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800aeb2:	f04f 0900 	mov.w	r9, #0
 800aeb6:	e7db      	b.n	800ae70 <_printf_float+0x154>
 800aeb8:	b913      	cbnz	r3, 800aec0 <_printf_float+0x1a4>
 800aeba:	6822      	ldr	r2, [r4, #0]
 800aebc:	07d2      	lsls	r2, r2, #31
 800aebe:	d501      	bpl.n	800aec4 <_printf_float+0x1a8>
 800aec0:	3302      	adds	r3, #2
 800aec2:	e7f4      	b.n	800aeae <_printf_float+0x192>
 800aec4:	2301      	movs	r3, #1
 800aec6:	e7f2      	b.n	800aeae <_printf_float+0x192>
 800aec8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800aecc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aece:	4299      	cmp	r1, r3
 800aed0:	db05      	blt.n	800aede <_printf_float+0x1c2>
 800aed2:	6823      	ldr	r3, [r4, #0]
 800aed4:	6121      	str	r1, [r4, #16]
 800aed6:	07d8      	lsls	r0, r3, #31
 800aed8:	d5ea      	bpl.n	800aeb0 <_printf_float+0x194>
 800aeda:	1c4b      	adds	r3, r1, #1
 800aedc:	e7e7      	b.n	800aeae <_printf_float+0x192>
 800aede:	2900      	cmp	r1, #0
 800aee0:	bfd4      	ite	le
 800aee2:	f1c1 0202 	rsble	r2, r1, #2
 800aee6:	2201      	movgt	r2, #1
 800aee8:	4413      	add	r3, r2
 800aeea:	e7e0      	b.n	800aeae <_printf_float+0x192>
 800aeec:	6823      	ldr	r3, [r4, #0]
 800aeee:	055a      	lsls	r2, r3, #21
 800aef0:	d407      	bmi.n	800af02 <_printf_float+0x1e6>
 800aef2:	6923      	ldr	r3, [r4, #16]
 800aef4:	4642      	mov	r2, r8
 800aef6:	4631      	mov	r1, r6
 800aef8:	4628      	mov	r0, r5
 800aefa:	47b8      	blx	r7
 800aefc:	3001      	adds	r0, #1
 800aefe:	d12b      	bne.n	800af58 <_printf_float+0x23c>
 800af00:	e767      	b.n	800add2 <_printf_float+0xb6>
 800af02:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800af06:	f240 80dd 	bls.w	800b0c4 <_printf_float+0x3a8>
 800af0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800af0e:	2200      	movs	r2, #0
 800af10:	2300      	movs	r3, #0
 800af12:	f7f5 fde1 	bl	8000ad8 <__aeabi_dcmpeq>
 800af16:	2800      	cmp	r0, #0
 800af18:	d033      	beq.n	800af82 <_printf_float+0x266>
 800af1a:	4a37      	ldr	r2, [pc, #220]	@ (800aff8 <_printf_float+0x2dc>)
 800af1c:	2301      	movs	r3, #1
 800af1e:	4631      	mov	r1, r6
 800af20:	4628      	mov	r0, r5
 800af22:	47b8      	blx	r7
 800af24:	3001      	adds	r0, #1
 800af26:	f43f af54 	beq.w	800add2 <_printf_float+0xb6>
 800af2a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800af2e:	4543      	cmp	r3, r8
 800af30:	db02      	blt.n	800af38 <_printf_float+0x21c>
 800af32:	6823      	ldr	r3, [r4, #0]
 800af34:	07d8      	lsls	r0, r3, #31
 800af36:	d50f      	bpl.n	800af58 <_printf_float+0x23c>
 800af38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af3c:	4631      	mov	r1, r6
 800af3e:	4628      	mov	r0, r5
 800af40:	47b8      	blx	r7
 800af42:	3001      	adds	r0, #1
 800af44:	f43f af45 	beq.w	800add2 <_printf_float+0xb6>
 800af48:	f04f 0900 	mov.w	r9, #0
 800af4c:	f108 38ff 	add.w	r8, r8, #4294967295
 800af50:	f104 0a1a 	add.w	sl, r4, #26
 800af54:	45c8      	cmp	r8, r9
 800af56:	dc09      	bgt.n	800af6c <_printf_float+0x250>
 800af58:	6823      	ldr	r3, [r4, #0]
 800af5a:	079b      	lsls	r3, r3, #30
 800af5c:	f100 8103 	bmi.w	800b166 <_printf_float+0x44a>
 800af60:	68e0      	ldr	r0, [r4, #12]
 800af62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af64:	4298      	cmp	r0, r3
 800af66:	bfb8      	it	lt
 800af68:	4618      	movlt	r0, r3
 800af6a:	e734      	b.n	800add6 <_printf_float+0xba>
 800af6c:	2301      	movs	r3, #1
 800af6e:	4652      	mov	r2, sl
 800af70:	4631      	mov	r1, r6
 800af72:	4628      	mov	r0, r5
 800af74:	47b8      	blx	r7
 800af76:	3001      	adds	r0, #1
 800af78:	f43f af2b 	beq.w	800add2 <_printf_float+0xb6>
 800af7c:	f109 0901 	add.w	r9, r9, #1
 800af80:	e7e8      	b.n	800af54 <_printf_float+0x238>
 800af82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af84:	2b00      	cmp	r3, #0
 800af86:	dc39      	bgt.n	800affc <_printf_float+0x2e0>
 800af88:	4a1b      	ldr	r2, [pc, #108]	@ (800aff8 <_printf_float+0x2dc>)
 800af8a:	2301      	movs	r3, #1
 800af8c:	4631      	mov	r1, r6
 800af8e:	4628      	mov	r0, r5
 800af90:	47b8      	blx	r7
 800af92:	3001      	adds	r0, #1
 800af94:	f43f af1d 	beq.w	800add2 <_printf_float+0xb6>
 800af98:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800af9c:	ea59 0303 	orrs.w	r3, r9, r3
 800afa0:	d102      	bne.n	800afa8 <_printf_float+0x28c>
 800afa2:	6823      	ldr	r3, [r4, #0]
 800afa4:	07d9      	lsls	r1, r3, #31
 800afa6:	d5d7      	bpl.n	800af58 <_printf_float+0x23c>
 800afa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afac:	4631      	mov	r1, r6
 800afae:	4628      	mov	r0, r5
 800afb0:	47b8      	blx	r7
 800afb2:	3001      	adds	r0, #1
 800afb4:	f43f af0d 	beq.w	800add2 <_printf_float+0xb6>
 800afb8:	f04f 0a00 	mov.w	sl, #0
 800afbc:	f104 0b1a 	add.w	fp, r4, #26
 800afc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afc2:	425b      	negs	r3, r3
 800afc4:	4553      	cmp	r3, sl
 800afc6:	dc01      	bgt.n	800afcc <_printf_float+0x2b0>
 800afc8:	464b      	mov	r3, r9
 800afca:	e793      	b.n	800aef4 <_printf_float+0x1d8>
 800afcc:	2301      	movs	r3, #1
 800afce:	465a      	mov	r2, fp
 800afd0:	4631      	mov	r1, r6
 800afd2:	4628      	mov	r0, r5
 800afd4:	47b8      	blx	r7
 800afd6:	3001      	adds	r0, #1
 800afd8:	f43f aefb 	beq.w	800add2 <_printf_float+0xb6>
 800afdc:	f10a 0a01 	add.w	sl, sl, #1
 800afe0:	e7ee      	b.n	800afc0 <_printf_float+0x2a4>
 800afe2:	bf00      	nop
 800afe4:	7fefffff 	.word	0x7fefffff
 800afe8:	0800f3b0 	.word	0x0800f3b0
 800afec:	0800f3b4 	.word	0x0800f3b4
 800aff0:	0800f3b8 	.word	0x0800f3b8
 800aff4:	0800f3bc 	.word	0x0800f3bc
 800aff8:	0800f760 	.word	0x0800f760
 800affc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800affe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b002:	4553      	cmp	r3, sl
 800b004:	bfa8      	it	ge
 800b006:	4653      	movge	r3, sl
 800b008:	2b00      	cmp	r3, #0
 800b00a:	4699      	mov	r9, r3
 800b00c:	dc36      	bgt.n	800b07c <_printf_float+0x360>
 800b00e:	f04f 0b00 	mov.w	fp, #0
 800b012:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b016:	f104 021a 	add.w	r2, r4, #26
 800b01a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b01c:	9306      	str	r3, [sp, #24]
 800b01e:	eba3 0309 	sub.w	r3, r3, r9
 800b022:	455b      	cmp	r3, fp
 800b024:	dc31      	bgt.n	800b08a <_printf_float+0x36e>
 800b026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b028:	459a      	cmp	sl, r3
 800b02a:	dc3a      	bgt.n	800b0a2 <_printf_float+0x386>
 800b02c:	6823      	ldr	r3, [r4, #0]
 800b02e:	07da      	lsls	r2, r3, #31
 800b030:	d437      	bmi.n	800b0a2 <_printf_float+0x386>
 800b032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b034:	ebaa 0903 	sub.w	r9, sl, r3
 800b038:	9b06      	ldr	r3, [sp, #24]
 800b03a:	ebaa 0303 	sub.w	r3, sl, r3
 800b03e:	4599      	cmp	r9, r3
 800b040:	bfa8      	it	ge
 800b042:	4699      	movge	r9, r3
 800b044:	f1b9 0f00 	cmp.w	r9, #0
 800b048:	dc33      	bgt.n	800b0b2 <_printf_float+0x396>
 800b04a:	f04f 0800 	mov.w	r8, #0
 800b04e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b052:	f104 0b1a 	add.w	fp, r4, #26
 800b056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b058:	ebaa 0303 	sub.w	r3, sl, r3
 800b05c:	eba3 0309 	sub.w	r3, r3, r9
 800b060:	4543      	cmp	r3, r8
 800b062:	f77f af79 	ble.w	800af58 <_printf_float+0x23c>
 800b066:	2301      	movs	r3, #1
 800b068:	465a      	mov	r2, fp
 800b06a:	4631      	mov	r1, r6
 800b06c:	4628      	mov	r0, r5
 800b06e:	47b8      	blx	r7
 800b070:	3001      	adds	r0, #1
 800b072:	f43f aeae 	beq.w	800add2 <_printf_float+0xb6>
 800b076:	f108 0801 	add.w	r8, r8, #1
 800b07a:	e7ec      	b.n	800b056 <_printf_float+0x33a>
 800b07c:	4642      	mov	r2, r8
 800b07e:	4631      	mov	r1, r6
 800b080:	4628      	mov	r0, r5
 800b082:	47b8      	blx	r7
 800b084:	3001      	adds	r0, #1
 800b086:	d1c2      	bne.n	800b00e <_printf_float+0x2f2>
 800b088:	e6a3      	b.n	800add2 <_printf_float+0xb6>
 800b08a:	2301      	movs	r3, #1
 800b08c:	4631      	mov	r1, r6
 800b08e:	4628      	mov	r0, r5
 800b090:	9206      	str	r2, [sp, #24]
 800b092:	47b8      	blx	r7
 800b094:	3001      	adds	r0, #1
 800b096:	f43f ae9c 	beq.w	800add2 <_printf_float+0xb6>
 800b09a:	9a06      	ldr	r2, [sp, #24]
 800b09c:	f10b 0b01 	add.w	fp, fp, #1
 800b0a0:	e7bb      	b.n	800b01a <_printf_float+0x2fe>
 800b0a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0a6:	4631      	mov	r1, r6
 800b0a8:	4628      	mov	r0, r5
 800b0aa:	47b8      	blx	r7
 800b0ac:	3001      	adds	r0, #1
 800b0ae:	d1c0      	bne.n	800b032 <_printf_float+0x316>
 800b0b0:	e68f      	b.n	800add2 <_printf_float+0xb6>
 800b0b2:	9a06      	ldr	r2, [sp, #24]
 800b0b4:	464b      	mov	r3, r9
 800b0b6:	4442      	add	r2, r8
 800b0b8:	4631      	mov	r1, r6
 800b0ba:	4628      	mov	r0, r5
 800b0bc:	47b8      	blx	r7
 800b0be:	3001      	adds	r0, #1
 800b0c0:	d1c3      	bne.n	800b04a <_printf_float+0x32e>
 800b0c2:	e686      	b.n	800add2 <_printf_float+0xb6>
 800b0c4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b0c8:	f1ba 0f01 	cmp.w	sl, #1
 800b0cc:	dc01      	bgt.n	800b0d2 <_printf_float+0x3b6>
 800b0ce:	07db      	lsls	r3, r3, #31
 800b0d0:	d536      	bpl.n	800b140 <_printf_float+0x424>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	4642      	mov	r2, r8
 800b0d6:	4631      	mov	r1, r6
 800b0d8:	4628      	mov	r0, r5
 800b0da:	47b8      	blx	r7
 800b0dc:	3001      	adds	r0, #1
 800b0de:	f43f ae78 	beq.w	800add2 <_printf_float+0xb6>
 800b0e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0e6:	4631      	mov	r1, r6
 800b0e8:	4628      	mov	r0, r5
 800b0ea:	47b8      	blx	r7
 800b0ec:	3001      	adds	r0, #1
 800b0ee:	f43f ae70 	beq.w	800add2 <_printf_float+0xb6>
 800b0f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0fe:	f7f5 fceb 	bl	8000ad8 <__aeabi_dcmpeq>
 800b102:	b9c0      	cbnz	r0, 800b136 <_printf_float+0x41a>
 800b104:	4653      	mov	r3, sl
 800b106:	f108 0201 	add.w	r2, r8, #1
 800b10a:	4631      	mov	r1, r6
 800b10c:	4628      	mov	r0, r5
 800b10e:	47b8      	blx	r7
 800b110:	3001      	adds	r0, #1
 800b112:	d10c      	bne.n	800b12e <_printf_float+0x412>
 800b114:	e65d      	b.n	800add2 <_printf_float+0xb6>
 800b116:	2301      	movs	r3, #1
 800b118:	465a      	mov	r2, fp
 800b11a:	4631      	mov	r1, r6
 800b11c:	4628      	mov	r0, r5
 800b11e:	47b8      	blx	r7
 800b120:	3001      	adds	r0, #1
 800b122:	f43f ae56 	beq.w	800add2 <_printf_float+0xb6>
 800b126:	f108 0801 	add.w	r8, r8, #1
 800b12a:	45d0      	cmp	r8, sl
 800b12c:	dbf3      	blt.n	800b116 <_printf_float+0x3fa>
 800b12e:	464b      	mov	r3, r9
 800b130:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b134:	e6df      	b.n	800aef6 <_printf_float+0x1da>
 800b136:	f04f 0800 	mov.w	r8, #0
 800b13a:	f104 0b1a 	add.w	fp, r4, #26
 800b13e:	e7f4      	b.n	800b12a <_printf_float+0x40e>
 800b140:	2301      	movs	r3, #1
 800b142:	4642      	mov	r2, r8
 800b144:	e7e1      	b.n	800b10a <_printf_float+0x3ee>
 800b146:	2301      	movs	r3, #1
 800b148:	464a      	mov	r2, r9
 800b14a:	4631      	mov	r1, r6
 800b14c:	4628      	mov	r0, r5
 800b14e:	47b8      	blx	r7
 800b150:	3001      	adds	r0, #1
 800b152:	f43f ae3e 	beq.w	800add2 <_printf_float+0xb6>
 800b156:	f108 0801 	add.w	r8, r8, #1
 800b15a:	68e3      	ldr	r3, [r4, #12]
 800b15c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b15e:	1a5b      	subs	r3, r3, r1
 800b160:	4543      	cmp	r3, r8
 800b162:	dcf0      	bgt.n	800b146 <_printf_float+0x42a>
 800b164:	e6fc      	b.n	800af60 <_printf_float+0x244>
 800b166:	f04f 0800 	mov.w	r8, #0
 800b16a:	f104 0919 	add.w	r9, r4, #25
 800b16e:	e7f4      	b.n	800b15a <_printf_float+0x43e>

0800b170 <_printf_common>:
 800b170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b174:	4616      	mov	r6, r2
 800b176:	4698      	mov	r8, r3
 800b178:	688a      	ldr	r2, [r1, #8]
 800b17a:	690b      	ldr	r3, [r1, #16]
 800b17c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b180:	4293      	cmp	r3, r2
 800b182:	bfb8      	it	lt
 800b184:	4613      	movlt	r3, r2
 800b186:	6033      	str	r3, [r6, #0]
 800b188:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b18c:	4607      	mov	r7, r0
 800b18e:	460c      	mov	r4, r1
 800b190:	b10a      	cbz	r2, 800b196 <_printf_common+0x26>
 800b192:	3301      	adds	r3, #1
 800b194:	6033      	str	r3, [r6, #0]
 800b196:	6823      	ldr	r3, [r4, #0]
 800b198:	0699      	lsls	r1, r3, #26
 800b19a:	bf42      	ittt	mi
 800b19c:	6833      	ldrmi	r3, [r6, #0]
 800b19e:	3302      	addmi	r3, #2
 800b1a0:	6033      	strmi	r3, [r6, #0]
 800b1a2:	6825      	ldr	r5, [r4, #0]
 800b1a4:	f015 0506 	ands.w	r5, r5, #6
 800b1a8:	d106      	bne.n	800b1b8 <_printf_common+0x48>
 800b1aa:	f104 0a19 	add.w	sl, r4, #25
 800b1ae:	68e3      	ldr	r3, [r4, #12]
 800b1b0:	6832      	ldr	r2, [r6, #0]
 800b1b2:	1a9b      	subs	r3, r3, r2
 800b1b4:	42ab      	cmp	r3, r5
 800b1b6:	dc26      	bgt.n	800b206 <_printf_common+0x96>
 800b1b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b1bc:	6822      	ldr	r2, [r4, #0]
 800b1be:	3b00      	subs	r3, #0
 800b1c0:	bf18      	it	ne
 800b1c2:	2301      	movne	r3, #1
 800b1c4:	0692      	lsls	r2, r2, #26
 800b1c6:	d42b      	bmi.n	800b220 <_printf_common+0xb0>
 800b1c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b1cc:	4641      	mov	r1, r8
 800b1ce:	4638      	mov	r0, r7
 800b1d0:	47c8      	blx	r9
 800b1d2:	3001      	adds	r0, #1
 800b1d4:	d01e      	beq.n	800b214 <_printf_common+0xa4>
 800b1d6:	6823      	ldr	r3, [r4, #0]
 800b1d8:	6922      	ldr	r2, [r4, #16]
 800b1da:	f003 0306 	and.w	r3, r3, #6
 800b1de:	2b04      	cmp	r3, #4
 800b1e0:	bf02      	ittt	eq
 800b1e2:	68e5      	ldreq	r5, [r4, #12]
 800b1e4:	6833      	ldreq	r3, [r6, #0]
 800b1e6:	1aed      	subeq	r5, r5, r3
 800b1e8:	68a3      	ldr	r3, [r4, #8]
 800b1ea:	bf0c      	ite	eq
 800b1ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1f0:	2500      	movne	r5, #0
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	bfc4      	itt	gt
 800b1f6:	1a9b      	subgt	r3, r3, r2
 800b1f8:	18ed      	addgt	r5, r5, r3
 800b1fa:	2600      	movs	r6, #0
 800b1fc:	341a      	adds	r4, #26
 800b1fe:	42b5      	cmp	r5, r6
 800b200:	d11a      	bne.n	800b238 <_printf_common+0xc8>
 800b202:	2000      	movs	r0, #0
 800b204:	e008      	b.n	800b218 <_printf_common+0xa8>
 800b206:	2301      	movs	r3, #1
 800b208:	4652      	mov	r2, sl
 800b20a:	4641      	mov	r1, r8
 800b20c:	4638      	mov	r0, r7
 800b20e:	47c8      	blx	r9
 800b210:	3001      	adds	r0, #1
 800b212:	d103      	bne.n	800b21c <_printf_common+0xac>
 800b214:	f04f 30ff 	mov.w	r0, #4294967295
 800b218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b21c:	3501      	adds	r5, #1
 800b21e:	e7c6      	b.n	800b1ae <_printf_common+0x3e>
 800b220:	18e1      	adds	r1, r4, r3
 800b222:	1c5a      	adds	r2, r3, #1
 800b224:	2030      	movs	r0, #48	@ 0x30
 800b226:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b22a:	4422      	add	r2, r4
 800b22c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b230:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b234:	3302      	adds	r3, #2
 800b236:	e7c7      	b.n	800b1c8 <_printf_common+0x58>
 800b238:	2301      	movs	r3, #1
 800b23a:	4622      	mov	r2, r4
 800b23c:	4641      	mov	r1, r8
 800b23e:	4638      	mov	r0, r7
 800b240:	47c8      	blx	r9
 800b242:	3001      	adds	r0, #1
 800b244:	d0e6      	beq.n	800b214 <_printf_common+0xa4>
 800b246:	3601      	adds	r6, #1
 800b248:	e7d9      	b.n	800b1fe <_printf_common+0x8e>
	...

0800b24c <_printf_i>:
 800b24c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b250:	7e0f      	ldrb	r7, [r1, #24]
 800b252:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b254:	2f78      	cmp	r7, #120	@ 0x78
 800b256:	4691      	mov	r9, r2
 800b258:	4680      	mov	r8, r0
 800b25a:	460c      	mov	r4, r1
 800b25c:	469a      	mov	sl, r3
 800b25e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b262:	d807      	bhi.n	800b274 <_printf_i+0x28>
 800b264:	2f62      	cmp	r7, #98	@ 0x62
 800b266:	d80a      	bhi.n	800b27e <_printf_i+0x32>
 800b268:	2f00      	cmp	r7, #0
 800b26a:	f000 80d2 	beq.w	800b412 <_printf_i+0x1c6>
 800b26e:	2f58      	cmp	r7, #88	@ 0x58
 800b270:	f000 80b9 	beq.w	800b3e6 <_printf_i+0x19a>
 800b274:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b278:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b27c:	e03a      	b.n	800b2f4 <_printf_i+0xa8>
 800b27e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b282:	2b15      	cmp	r3, #21
 800b284:	d8f6      	bhi.n	800b274 <_printf_i+0x28>
 800b286:	a101      	add	r1, pc, #4	@ (adr r1, 800b28c <_printf_i+0x40>)
 800b288:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b28c:	0800b2e5 	.word	0x0800b2e5
 800b290:	0800b2f9 	.word	0x0800b2f9
 800b294:	0800b275 	.word	0x0800b275
 800b298:	0800b275 	.word	0x0800b275
 800b29c:	0800b275 	.word	0x0800b275
 800b2a0:	0800b275 	.word	0x0800b275
 800b2a4:	0800b2f9 	.word	0x0800b2f9
 800b2a8:	0800b275 	.word	0x0800b275
 800b2ac:	0800b275 	.word	0x0800b275
 800b2b0:	0800b275 	.word	0x0800b275
 800b2b4:	0800b275 	.word	0x0800b275
 800b2b8:	0800b3f9 	.word	0x0800b3f9
 800b2bc:	0800b323 	.word	0x0800b323
 800b2c0:	0800b3b3 	.word	0x0800b3b3
 800b2c4:	0800b275 	.word	0x0800b275
 800b2c8:	0800b275 	.word	0x0800b275
 800b2cc:	0800b41b 	.word	0x0800b41b
 800b2d0:	0800b275 	.word	0x0800b275
 800b2d4:	0800b323 	.word	0x0800b323
 800b2d8:	0800b275 	.word	0x0800b275
 800b2dc:	0800b275 	.word	0x0800b275
 800b2e0:	0800b3bb 	.word	0x0800b3bb
 800b2e4:	6833      	ldr	r3, [r6, #0]
 800b2e6:	1d1a      	adds	r2, r3, #4
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	6032      	str	r2, [r6, #0]
 800b2ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b2f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	e09d      	b.n	800b434 <_printf_i+0x1e8>
 800b2f8:	6833      	ldr	r3, [r6, #0]
 800b2fa:	6820      	ldr	r0, [r4, #0]
 800b2fc:	1d19      	adds	r1, r3, #4
 800b2fe:	6031      	str	r1, [r6, #0]
 800b300:	0606      	lsls	r6, r0, #24
 800b302:	d501      	bpl.n	800b308 <_printf_i+0xbc>
 800b304:	681d      	ldr	r5, [r3, #0]
 800b306:	e003      	b.n	800b310 <_printf_i+0xc4>
 800b308:	0645      	lsls	r5, r0, #25
 800b30a:	d5fb      	bpl.n	800b304 <_printf_i+0xb8>
 800b30c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b310:	2d00      	cmp	r5, #0
 800b312:	da03      	bge.n	800b31c <_printf_i+0xd0>
 800b314:	232d      	movs	r3, #45	@ 0x2d
 800b316:	426d      	negs	r5, r5
 800b318:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b31c:	4859      	ldr	r0, [pc, #356]	@ (800b484 <_printf_i+0x238>)
 800b31e:	230a      	movs	r3, #10
 800b320:	e011      	b.n	800b346 <_printf_i+0xfa>
 800b322:	6821      	ldr	r1, [r4, #0]
 800b324:	6833      	ldr	r3, [r6, #0]
 800b326:	0608      	lsls	r0, r1, #24
 800b328:	f853 5b04 	ldr.w	r5, [r3], #4
 800b32c:	d402      	bmi.n	800b334 <_printf_i+0xe8>
 800b32e:	0649      	lsls	r1, r1, #25
 800b330:	bf48      	it	mi
 800b332:	b2ad      	uxthmi	r5, r5
 800b334:	2f6f      	cmp	r7, #111	@ 0x6f
 800b336:	4853      	ldr	r0, [pc, #332]	@ (800b484 <_printf_i+0x238>)
 800b338:	6033      	str	r3, [r6, #0]
 800b33a:	bf14      	ite	ne
 800b33c:	230a      	movne	r3, #10
 800b33e:	2308      	moveq	r3, #8
 800b340:	2100      	movs	r1, #0
 800b342:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b346:	6866      	ldr	r6, [r4, #4]
 800b348:	60a6      	str	r6, [r4, #8]
 800b34a:	2e00      	cmp	r6, #0
 800b34c:	bfa2      	ittt	ge
 800b34e:	6821      	ldrge	r1, [r4, #0]
 800b350:	f021 0104 	bicge.w	r1, r1, #4
 800b354:	6021      	strge	r1, [r4, #0]
 800b356:	b90d      	cbnz	r5, 800b35c <_printf_i+0x110>
 800b358:	2e00      	cmp	r6, #0
 800b35a:	d04b      	beq.n	800b3f4 <_printf_i+0x1a8>
 800b35c:	4616      	mov	r6, r2
 800b35e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b362:	fb03 5711 	mls	r7, r3, r1, r5
 800b366:	5dc7      	ldrb	r7, [r0, r7]
 800b368:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b36c:	462f      	mov	r7, r5
 800b36e:	42bb      	cmp	r3, r7
 800b370:	460d      	mov	r5, r1
 800b372:	d9f4      	bls.n	800b35e <_printf_i+0x112>
 800b374:	2b08      	cmp	r3, #8
 800b376:	d10b      	bne.n	800b390 <_printf_i+0x144>
 800b378:	6823      	ldr	r3, [r4, #0]
 800b37a:	07df      	lsls	r7, r3, #31
 800b37c:	d508      	bpl.n	800b390 <_printf_i+0x144>
 800b37e:	6923      	ldr	r3, [r4, #16]
 800b380:	6861      	ldr	r1, [r4, #4]
 800b382:	4299      	cmp	r1, r3
 800b384:	bfde      	ittt	le
 800b386:	2330      	movle	r3, #48	@ 0x30
 800b388:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b38c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b390:	1b92      	subs	r2, r2, r6
 800b392:	6122      	str	r2, [r4, #16]
 800b394:	f8cd a000 	str.w	sl, [sp]
 800b398:	464b      	mov	r3, r9
 800b39a:	aa03      	add	r2, sp, #12
 800b39c:	4621      	mov	r1, r4
 800b39e:	4640      	mov	r0, r8
 800b3a0:	f7ff fee6 	bl	800b170 <_printf_common>
 800b3a4:	3001      	adds	r0, #1
 800b3a6:	d14a      	bne.n	800b43e <_printf_i+0x1f2>
 800b3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ac:	b004      	add	sp, #16
 800b3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3b2:	6823      	ldr	r3, [r4, #0]
 800b3b4:	f043 0320 	orr.w	r3, r3, #32
 800b3b8:	6023      	str	r3, [r4, #0]
 800b3ba:	4833      	ldr	r0, [pc, #204]	@ (800b488 <_printf_i+0x23c>)
 800b3bc:	2778      	movs	r7, #120	@ 0x78
 800b3be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b3c2:	6823      	ldr	r3, [r4, #0]
 800b3c4:	6831      	ldr	r1, [r6, #0]
 800b3c6:	061f      	lsls	r7, r3, #24
 800b3c8:	f851 5b04 	ldr.w	r5, [r1], #4
 800b3cc:	d402      	bmi.n	800b3d4 <_printf_i+0x188>
 800b3ce:	065f      	lsls	r7, r3, #25
 800b3d0:	bf48      	it	mi
 800b3d2:	b2ad      	uxthmi	r5, r5
 800b3d4:	6031      	str	r1, [r6, #0]
 800b3d6:	07d9      	lsls	r1, r3, #31
 800b3d8:	bf44      	itt	mi
 800b3da:	f043 0320 	orrmi.w	r3, r3, #32
 800b3de:	6023      	strmi	r3, [r4, #0]
 800b3e0:	b11d      	cbz	r5, 800b3ea <_printf_i+0x19e>
 800b3e2:	2310      	movs	r3, #16
 800b3e4:	e7ac      	b.n	800b340 <_printf_i+0xf4>
 800b3e6:	4827      	ldr	r0, [pc, #156]	@ (800b484 <_printf_i+0x238>)
 800b3e8:	e7e9      	b.n	800b3be <_printf_i+0x172>
 800b3ea:	6823      	ldr	r3, [r4, #0]
 800b3ec:	f023 0320 	bic.w	r3, r3, #32
 800b3f0:	6023      	str	r3, [r4, #0]
 800b3f2:	e7f6      	b.n	800b3e2 <_printf_i+0x196>
 800b3f4:	4616      	mov	r6, r2
 800b3f6:	e7bd      	b.n	800b374 <_printf_i+0x128>
 800b3f8:	6833      	ldr	r3, [r6, #0]
 800b3fa:	6825      	ldr	r5, [r4, #0]
 800b3fc:	6961      	ldr	r1, [r4, #20]
 800b3fe:	1d18      	adds	r0, r3, #4
 800b400:	6030      	str	r0, [r6, #0]
 800b402:	062e      	lsls	r6, r5, #24
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	d501      	bpl.n	800b40c <_printf_i+0x1c0>
 800b408:	6019      	str	r1, [r3, #0]
 800b40a:	e002      	b.n	800b412 <_printf_i+0x1c6>
 800b40c:	0668      	lsls	r0, r5, #25
 800b40e:	d5fb      	bpl.n	800b408 <_printf_i+0x1bc>
 800b410:	8019      	strh	r1, [r3, #0]
 800b412:	2300      	movs	r3, #0
 800b414:	6123      	str	r3, [r4, #16]
 800b416:	4616      	mov	r6, r2
 800b418:	e7bc      	b.n	800b394 <_printf_i+0x148>
 800b41a:	6833      	ldr	r3, [r6, #0]
 800b41c:	1d1a      	adds	r2, r3, #4
 800b41e:	6032      	str	r2, [r6, #0]
 800b420:	681e      	ldr	r6, [r3, #0]
 800b422:	6862      	ldr	r2, [r4, #4]
 800b424:	2100      	movs	r1, #0
 800b426:	4630      	mov	r0, r6
 800b428:	f7f4 feda 	bl	80001e0 <memchr>
 800b42c:	b108      	cbz	r0, 800b432 <_printf_i+0x1e6>
 800b42e:	1b80      	subs	r0, r0, r6
 800b430:	6060      	str	r0, [r4, #4]
 800b432:	6863      	ldr	r3, [r4, #4]
 800b434:	6123      	str	r3, [r4, #16]
 800b436:	2300      	movs	r3, #0
 800b438:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b43c:	e7aa      	b.n	800b394 <_printf_i+0x148>
 800b43e:	6923      	ldr	r3, [r4, #16]
 800b440:	4632      	mov	r2, r6
 800b442:	4649      	mov	r1, r9
 800b444:	4640      	mov	r0, r8
 800b446:	47d0      	blx	sl
 800b448:	3001      	adds	r0, #1
 800b44a:	d0ad      	beq.n	800b3a8 <_printf_i+0x15c>
 800b44c:	6823      	ldr	r3, [r4, #0]
 800b44e:	079b      	lsls	r3, r3, #30
 800b450:	d413      	bmi.n	800b47a <_printf_i+0x22e>
 800b452:	68e0      	ldr	r0, [r4, #12]
 800b454:	9b03      	ldr	r3, [sp, #12]
 800b456:	4298      	cmp	r0, r3
 800b458:	bfb8      	it	lt
 800b45a:	4618      	movlt	r0, r3
 800b45c:	e7a6      	b.n	800b3ac <_printf_i+0x160>
 800b45e:	2301      	movs	r3, #1
 800b460:	4632      	mov	r2, r6
 800b462:	4649      	mov	r1, r9
 800b464:	4640      	mov	r0, r8
 800b466:	47d0      	blx	sl
 800b468:	3001      	adds	r0, #1
 800b46a:	d09d      	beq.n	800b3a8 <_printf_i+0x15c>
 800b46c:	3501      	adds	r5, #1
 800b46e:	68e3      	ldr	r3, [r4, #12]
 800b470:	9903      	ldr	r1, [sp, #12]
 800b472:	1a5b      	subs	r3, r3, r1
 800b474:	42ab      	cmp	r3, r5
 800b476:	dcf2      	bgt.n	800b45e <_printf_i+0x212>
 800b478:	e7eb      	b.n	800b452 <_printf_i+0x206>
 800b47a:	2500      	movs	r5, #0
 800b47c:	f104 0619 	add.w	r6, r4, #25
 800b480:	e7f5      	b.n	800b46e <_printf_i+0x222>
 800b482:	bf00      	nop
 800b484:	0800f3c0 	.word	0x0800f3c0
 800b488:	0800f3d1 	.word	0x0800f3d1

0800b48c <_scanf_float>:
 800b48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b490:	b087      	sub	sp, #28
 800b492:	4617      	mov	r7, r2
 800b494:	9303      	str	r3, [sp, #12]
 800b496:	688b      	ldr	r3, [r1, #8]
 800b498:	1e5a      	subs	r2, r3, #1
 800b49a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b49e:	bf81      	itttt	hi
 800b4a0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b4a4:	eb03 0b05 	addhi.w	fp, r3, r5
 800b4a8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b4ac:	608b      	strhi	r3, [r1, #8]
 800b4ae:	680b      	ldr	r3, [r1, #0]
 800b4b0:	460a      	mov	r2, r1
 800b4b2:	f04f 0500 	mov.w	r5, #0
 800b4b6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b4ba:	f842 3b1c 	str.w	r3, [r2], #28
 800b4be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b4c2:	4680      	mov	r8, r0
 800b4c4:	460c      	mov	r4, r1
 800b4c6:	bf98      	it	ls
 800b4c8:	f04f 0b00 	movls.w	fp, #0
 800b4cc:	9201      	str	r2, [sp, #4]
 800b4ce:	4616      	mov	r6, r2
 800b4d0:	46aa      	mov	sl, r5
 800b4d2:	46a9      	mov	r9, r5
 800b4d4:	9502      	str	r5, [sp, #8]
 800b4d6:	68a2      	ldr	r2, [r4, #8]
 800b4d8:	b152      	cbz	r2, 800b4f0 <_scanf_float+0x64>
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	2b4e      	cmp	r3, #78	@ 0x4e
 800b4e0:	d864      	bhi.n	800b5ac <_scanf_float+0x120>
 800b4e2:	2b40      	cmp	r3, #64	@ 0x40
 800b4e4:	d83c      	bhi.n	800b560 <_scanf_float+0xd4>
 800b4e6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b4ea:	b2c8      	uxtb	r0, r1
 800b4ec:	280e      	cmp	r0, #14
 800b4ee:	d93a      	bls.n	800b566 <_scanf_float+0xda>
 800b4f0:	f1b9 0f00 	cmp.w	r9, #0
 800b4f4:	d003      	beq.n	800b4fe <_scanf_float+0x72>
 800b4f6:	6823      	ldr	r3, [r4, #0]
 800b4f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b4fc:	6023      	str	r3, [r4, #0]
 800b4fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b502:	f1ba 0f01 	cmp.w	sl, #1
 800b506:	f200 8117 	bhi.w	800b738 <_scanf_float+0x2ac>
 800b50a:	9b01      	ldr	r3, [sp, #4]
 800b50c:	429e      	cmp	r6, r3
 800b50e:	f200 8108 	bhi.w	800b722 <_scanf_float+0x296>
 800b512:	2001      	movs	r0, #1
 800b514:	b007      	add	sp, #28
 800b516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b51a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b51e:	2a0d      	cmp	r2, #13
 800b520:	d8e6      	bhi.n	800b4f0 <_scanf_float+0x64>
 800b522:	a101      	add	r1, pc, #4	@ (adr r1, 800b528 <_scanf_float+0x9c>)
 800b524:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b528:	0800b66f 	.word	0x0800b66f
 800b52c:	0800b4f1 	.word	0x0800b4f1
 800b530:	0800b4f1 	.word	0x0800b4f1
 800b534:	0800b4f1 	.word	0x0800b4f1
 800b538:	0800b6cf 	.word	0x0800b6cf
 800b53c:	0800b6a7 	.word	0x0800b6a7
 800b540:	0800b4f1 	.word	0x0800b4f1
 800b544:	0800b4f1 	.word	0x0800b4f1
 800b548:	0800b67d 	.word	0x0800b67d
 800b54c:	0800b4f1 	.word	0x0800b4f1
 800b550:	0800b4f1 	.word	0x0800b4f1
 800b554:	0800b4f1 	.word	0x0800b4f1
 800b558:	0800b4f1 	.word	0x0800b4f1
 800b55c:	0800b635 	.word	0x0800b635
 800b560:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b564:	e7db      	b.n	800b51e <_scanf_float+0x92>
 800b566:	290e      	cmp	r1, #14
 800b568:	d8c2      	bhi.n	800b4f0 <_scanf_float+0x64>
 800b56a:	a001      	add	r0, pc, #4	@ (adr r0, 800b570 <_scanf_float+0xe4>)
 800b56c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b570:	0800b625 	.word	0x0800b625
 800b574:	0800b4f1 	.word	0x0800b4f1
 800b578:	0800b625 	.word	0x0800b625
 800b57c:	0800b6bb 	.word	0x0800b6bb
 800b580:	0800b4f1 	.word	0x0800b4f1
 800b584:	0800b5cd 	.word	0x0800b5cd
 800b588:	0800b60b 	.word	0x0800b60b
 800b58c:	0800b60b 	.word	0x0800b60b
 800b590:	0800b60b 	.word	0x0800b60b
 800b594:	0800b60b 	.word	0x0800b60b
 800b598:	0800b60b 	.word	0x0800b60b
 800b59c:	0800b60b 	.word	0x0800b60b
 800b5a0:	0800b60b 	.word	0x0800b60b
 800b5a4:	0800b60b 	.word	0x0800b60b
 800b5a8:	0800b60b 	.word	0x0800b60b
 800b5ac:	2b6e      	cmp	r3, #110	@ 0x6e
 800b5ae:	d809      	bhi.n	800b5c4 <_scanf_float+0x138>
 800b5b0:	2b60      	cmp	r3, #96	@ 0x60
 800b5b2:	d8b2      	bhi.n	800b51a <_scanf_float+0x8e>
 800b5b4:	2b54      	cmp	r3, #84	@ 0x54
 800b5b6:	d07b      	beq.n	800b6b0 <_scanf_float+0x224>
 800b5b8:	2b59      	cmp	r3, #89	@ 0x59
 800b5ba:	d199      	bne.n	800b4f0 <_scanf_float+0x64>
 800b5bc:	2d07      	cmp	r5, #7
 800b5be:	d197      	bne.n	800b4f0 <_scanf_float+0x64>
 800b5c0:	2508      	movs	r5, #8
 800b5c2:	e02c      	b.n	800b61e <_scanf_float+0x192>
 800b5c4:	2b74      	cmp	r3, #116	@ 0x74
 800b5c6:	d073      	beq.n	800b6b0 <_scanf_float+0x224>
 800b5c8:	2b79      	cmp	r3, #121	@ 0x79
 800b5ca:	e7f6      	b.n	800b5ba <_scanf_float+0x12e>
 800b5cc:	6821      	ldr	r1, [r4, #0]
 800b5ce:	05c8      	lsls	r0, r1, #23
 800b5d0:	d51b      	bpl.n	800b60a <_scanf_float+0x17e>
 800b5d2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b5d6:	6021      	str	r1, [r4, #0]
 800b5d8:	f109 0901 	add.w	r9, r9, #1
 800b5dc:	f1bb 0f00 	cmp.w	fp, #0
 800b5e0:	d003      	beq.n	800b5ea <_scanf_float+0x15e>
 800b5e2:	3201      	adds	r2, #1
 800b5e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b5e8:	60a2      	str	r2, [r4, #8]
 800b5ea:	68a3      	ldr	r3, [r4, #8]
 800b5ec:	3b01      	subs	r3, #1
 800b5ee:	60a3      	str	r3, [r4, #8]
 800b5f0:	6923      	ldr	r3, [r4, #16]
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	6123      	str	r3, [r4, #16]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	3b01      	subs	r3, #1
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	607b      	str	r3, [r7, #4]
 800b5fe:	f340 8087 	ble.w	800b710 <_scanf_float+0x284>
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	3301      	adds	r3, #1
 800b606:	603b      	str	r3, [r7, #0]
 800b608:	e765      	b.n	800b4d6 <_scanf_float+0x4a>
 800b60a:	eb1a 0105 	adds.w	r1, sl, r5
 800b60e:	f47f af6f 	bne.w	800b4f0 <_scanf_float+0x64>
 800b612:	6822      	ldr	r2, [r4, #0]
 800b614:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b618:	6022      	str	r2, [r4, #0]
 800b61a:	460d      	mov	r5, r1
 800b61c:	468a      	mov	sl, r1
 800b61e:	f806 3b01 	strb.w	r3, [r6], #1
 800b622:	e7e2      	b.n	800b5ea <_scanf_float+0x15e>
 800b624:	6822      	ldr	r2, [r4, #0]
 800b626:	0610      	lsls	r0, r2, #24
 800b628:	f57f af62 	bpl.w	800b4f0 <_scanf_float+0x64>
 800b62c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b630:	6022      	str	r2, [r4, #0]
 800b632:	e7f4      	b.n	800b61e <_scanf_float+0x192>
 800b634:	f1ba 0f00 	cmp.w	sl, #0
 800b638:	d10e      	bne.n	800b658 <_scanf_float+0x1cc>
 800b63a:	f1b9 0f00 	cmp.w	r9, #0
 800b63e:	d10e      	bne.n	800b65e <_scanf_float+0x1d2>
 800b640:	6822      	ldr	r2, [r4, #0]
 800b642:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b646:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b64a:	d108      	bne.n	800b65e <_scanf_float+0x1d2>
 800b64c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b650:	6022      	str	r2, [r4, #0]
 800b652:	f04f 0a01 	mov.w	sl, #1
 800b656:	e7e2      	b.n	800b61e <_scanf_float+0x192>
 800b658:	f1ba 0f02 	cmp.w	sl, #2
 800b65c:	d055      	beq.n	800b70a <_scanf_float+0x27e>
 800b65e:	2d01      	cmp	r5, #1
 800b660:	d002      	beq.n	800b668 <_scanf_float+0x1dc>
 800b662:	2d04      	cmp	r5, #4
 800b664:	f47f af44 	bne.w	800b4f0 <_scanf_float+0x64>
 800b668:	3501      	adds	r5, #1
 800b66a:	b2ed      	uxtb	r5, r5
 800b66c:	e7d7      	b.n	800b61e <_scanf_float+0x192>
 800b66e:	f1ba 0f01 	cmp.w	sl, #1
 800b672:	f47f af3d 	bne.w	800b4f0 <_scanf_float+0x64>
 800b676:	f04f 0a02 	mov.w	sl, #2
 800b67a:	e7d0      	b.n	800b61e <_scanf_float+0x192>
 800b67c:	b97d      	cbnz	r5, 800b69e <_scanf_float+0x212>
 800b67e:	f1b9 0f00 	cmp.w	r9, #0
 800b682:	f47f af38 	bne.w	800b4f6 <_scanf_float+0x6a>
 800b686:	6822      	ldr	r2, [r4, #0]
 800b688:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b68c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b690:	f040 8108 	bne.w	800b8a4 <_scanf_float+0x418>
 800b694:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b698:	6022      	str	r2, [r4, #0]
 800b69a:	2501      	movs	r5, #1
 800b69c:	e7bf      	b.n	800b61e <_scanf_float+0x192>
 800b69e:	2d03      	cmp	r5, #3
 800b6a0:	d0e2      	beq.n	800b668 <_scanf_float+0x1dc>
 800b6a2:	2d05      	cmp	r5, #5
 800b6a4:	e7de      	b.n	800b664 <_scanf_float+0x1d8>
 800b6a6:	2d02      	cmp	r5, #2
 800b6a8:	f47f af22 	bne.w	800b4f0 <_scanf_float+0x64>
 800b6ac:	2503      	movs	r5, #3
 800b6ae:	e7b6      	b.n	800b61e <_scanf_float+0x192>
 800b6b0:	2d06      	cmp	r5, #6
 800b6b2:	f47f af1d 	bne.w	800b4f0 <_scanf_float+0x64>
 800b6b6:	2507      	movs	r5, #7
 800b6b8:	e7b1      	b.n	800b61e <_scanf_float+0x192>
 800b6ba:	6822      	ldr	r2, [r4, #0]
 800b6bc:	0591      	lsls	r1, r2, #22
 800b6be:	f57f af17 	bpl.w	800b4f0 <_scanf_float+0x64>
 800b6c2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b6c6:	6022      	str	r2, [r4, #0]
 800b6c8:	f8cd 9008 	str.w	r9, [sp, #8]
 800b6cc:	e7a7      	b.n	800b61e <_scanf_float+0x192>
 800b6ce:	6822      	ldr	r2, [r4, #0]
 800b6d0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b6d4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b6d8:	d006      	beq.n	800b6e8 <_scanf_float+0x25c>
 800b6da:	0550      	lsls	r0, r2, #21
 800b6dc:	f57f af08 	bpl.w	800b4f0 <_scanf_float+0x64>
 800b6e0:	f1b9 0f00 	cmp.w	r9, #0
 800b6e4:	f000 80de 	beq.w	800b8a4 <_scanf_float+0x418>
 800b6e8:	0591      	lsls	r1, r2, #22
 800b6ea:	bf58      	it	pl
 800b6ec:	9902      	ldrpl	r1, [sp, #8]
 800b6ee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b6f2:	bf58      	it	pl
 800b6f4:	eba9 0101 	subpl.w	r1, r9, r1
 800b6f8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b6fc:	bf58      	it	pl
 800b6fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b702:	6022      	str	r2, [r4, #0]
 800b704:	f04f 0900 	mov.w	r9, #0
 800b708:	e789      	b.n	800b61e <_scanf_float+0x192>
 800b70a:	f04f 0a03 	mov.w	sl, #3
 800b70e:	e786      	b.n	800b61e <_scanf_float+0x192>
 800b710:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b714:	4639      	mov	r1, r7
 800b716:	4640      	mov	r0, r8
 800b718:	4798      	blx	r3
 800b71a:	2800      	cmp	r0, #0
 800b71c:	f43f aedb 	beq.w	800b4d6 <_scanf_float+0x4a>
 800b720:	e6e6      	b.n	800b4f0 <_scanf_float+0x64>
 800b722:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b726:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b72a:	463a      	mov	r2, r7
 800b72c:	4640      	mov	r0, r8
 800b72e:	4798      	blx	r3
 800b730:	6923      	ldr	r3, [r4, #16]
 800b732:	3b01      	subs	r3, #1
 800b734:	6123      	str	r3, [r4, #16]
 800b736:	e6e8      	b.n	800b50a <_scanf_float+0x7e>
 800b738:	1e6b      	subs	r3, r5, #1
 800b73a:	2b06      	cmp	r3, #6
 800b73c:	d824      	bhi.n	800b788 <_scanf_float+0x2fc>
 800b73e:	2d02      	cmp	r5, #2
 800b740:	d836      	bhi.n	800b7b0 <_scanf_float+0x324>
 800b742:	9b01      	ldr	r3, [sp, #4]
 800b744:	429e      	cmp	r6, r3
 800b746:	f67f aee4 	bls.w	800b512 <_scanf_float+0x86>
 800b74a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b74e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b752:	463a      	mov	r2, r7
 800b754:	4640      	mov	r0, r8
 800b756:	4798      	blx	r3
 800b758:	6923      	ldr	r3, [r4, #16]
 800b75a:	3b01      	subs	r3, #1
 800b75c:	6123      	str	r3, [r4, #16]
 800b75e:	e7f0      	b.n	800b742 <_scanf_float+0x2b6>
 800b760:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b764:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b768:	463a      	mov	r2, r7
 800b76a:	4640      	mov	r0, r8
 800b76c:	4798      	blx	r3
 800b76e:	6923      	ldr	r3, [r4, #16]
 800b770:	3b01      	subs	r3, #1
 800b772:	6123      	str	r3, [r4, #16]
 800b774:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b778:	fa5f fa8a 	uxtb.w	sl, sl
 800b77c:	f1ba 0f02 	cmp.w	sl, #2
 800b780:	d1ee      	bne.n	800b760 <_scanf_float+0x2d4>
 800b782:	3d03      	subs	r5, #3
 800b784:	b2ed      	uxtb	r5, r5
 800b786:	1b76      	subs	r6, r6, r5
 800b788:	6823      	ldr	r3, [r4, #0]
 800b78a:	05da      	lsls	r2, r3, #23
 800b78c:	d530      	bpl.n	800b7f0 <_scanf_float+0x364>
 800b78e:	055b      	lsls	r3, r3, #21
 800b790:	d511      	bpl.n	800b7b6 <_scanf_float+0x32a>
 800b792:	9b01      	ldr	r3, [sp, #4]
 800b794:	429e      	cmp	r6, r3
 800b796:	f67f aebc 	bls.w	800b512 <_scanf_float+0x86>
 800b79a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b79e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b7a2:	463a      	mov	r2, r7
 800b7a4:	4640      	mov	r0, r8
 800b7a6:	4798      	blx	r3
 800b7a8:	6923      	ldr	r3, [r4, #16]
 800b7aa:	3b01      	subs	r3, #1
 800b7ac:	6123      	str	r3, [r4, #16]
 800b7ae:	e7f0      	b.n	800b792 <_scanf_float+0x306>
 800b7b0:	46aa      	mov	sl, r5
 800b7b2:	46b3      	mov	fp, r6
 800b7b4:	e7de      	b.n	800b774 <_scanf_float+0x2e8>
 800b7b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b7ba:	6923      	ldr	r3, [r4, #16]
 800b7bc:	2965      	cmp	r1, #101	@ 0x65
 800b7be:	f103 33ff 	add.w	r3, r3, #4294967295
 800b7c2:	f106 35ff 	add.w	r5, r6, #4294967295
 800b7c6:	6123      	str	r3, [r4, #16]
 800b7c8:	d00c      	beq.n	800b7e4 <_scanf_float+0x358>
 800b7ca:	2945      	cmp	r1, #69	@ 0x45
 800b7cc:	d00a      	beq.n	800b7e4 <_scanf_float+0x358>
 800b7ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b7d2:	463a      	mov	r2, r7
 800b7d4:	4640      	mov	r0, r8
 800b7d6:	4798      	blx	r3
 800b7d8:	6923      	ldr	r3, [r4, #16]
 800b7da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	1eb5      	subs	r5, r6, #2
 800b7e2:	6123      	str	r3, [r4, #16]
 800b7e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b7e8:	463a      	mov	r2, r7
 800b7ea:	4640      	mov	r0, r8
 800b7ec:	4798      	blx	r3
 800b7ee:	462e      	mov	r6, r5
 800b7f0:	6822      	ldr	r2, [r4, #0]
 800b7f2:	f012 0210 	ands.w	r2, r2, #16
 800b7f6:	d001      	beq.n	800b7fc <_scanf_float+0x370>
 800b7f8:	2000      	movs	r0, #0
 800b7fa:	e68b      	b.n	800b514 <_scanf_float+0x88>
 800b7fc:	7032      	strb	r2, [r6, #0]
 800b7fe:	6823      	ldr	r3, [r4, #0]
 800b800:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b804:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b808:	d11c      	bne.n	800b844 <_scanf_float+0x3b8>
 800b80a:	9b02      	ldr	r3, [sp, #8]
 800b80c:	454b      	cmp	r3, r9
 800b80e:	eba3 0209 	sub.w	r2, r3, r9
 800b812:	d123      	bne.n	800b85c <_scanf_float+0x3d0>
 800b814:	9901      	ldr	r1, [sp, #4]
 800b816:	2200      	movs	r2, #0
 800b818:	4640      	mov	r0, r8
 800b81a:	f7ff f9cd 	bl	800abb8 <_strtod_r>
 800b81e:	9b03      	ldr	r3, [sp, #12]
 800b820:	6821      	ldr	r1, [r4, #0]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f011 0f02 	tst.w	r1, #2
 800b828:	ec57 6b10 	vmov	r6, r7, d0
 800b82c:	f103 0204 	add.w	r2, r3, #4
 800b830:	d01f      	beq.n	800b872 <_scanf_float+0x3e6>
 800b832:	9903      	ldr	r1, [sp, #12]
 800b834:	600a      	str	r2, [r1, #0]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	e9c3 6700 	strd	r6, r7, [r3]
 800b83c:	68e3      	ldr	r3, [r4, #12]
 800b83e:	3301      	adds	r3, #1
 800b840:	60e3      	str	r3, [r4, #12]
 800b842:	e7d9      	b.n	800b7f8 <_scanf_float+0x36c>
 800b844:	9b04      	ldr	r3, [sp, #16]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d0e4      	beq.n	800b814 <_scanf_float+0x388>
 800b84a:	9905      	ldr	r1, [sp, #20]
 800b84c:	230a      	movs	r3, #10
 800b84e:	3101      	adds	r1, #1
 800b850:	4640      	mov	r0, r8
 800b852:	f002 fb19 	bl	800de88 <_strtol_r>
 800b856:	9b04      	ldr	r3, [sp, #16]
 800b858:	9e05      	ldr	r6, [sp, #20]
 800b85a:	1ac2      	subs	r2, r0, r3
 800b85c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b860:	429e      	cmp	r6, r3
 800b862:	bf28      	it	cs
 800b864:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b868:	4910      	ldr	r1, [pc, #64]	@ (800b8ac <_scanf_float+0x420>)
 800b86a:	4630      	mov	r0, r6
 800b86c:	f000 f954 	bl	800bb18 <siprintf>
 800b870:	e7d0      	b.n	800b814 <_scanf_float+0x388>
 800b872:	f011 0f04 	tst.w	r1, #4
 800b876:	9903      	ldr	r1, [sp, #12]
 800b878:	600a      	str	r2, [r1, #0]
 800b87a:	d1dc      	bne.n	800b836 <_scanf_float+0x3aa>
 800b87c:	681d      	ldr	r5, [r3, #0]
 800b87e:	4632      	mov	r2, r6
 800b880:	463b      	mov	r3, r7
 800b882:	4630      	mov	r0, r6
 800b884:	4639      	mov	r1, r7
 800b886:	f7f5 f959 	bl	8000b3c <__aeabi_dcmpun>
 800b88a:	b128      	cbz	r0, 800b898 <_scanf_float+0x40c>
 800b88c:	4808      	ldr	r0, [pc, #32]	@ (800b8b0 <_scanf_float+0x424>)
 800b88e:	f000 fb2f 	bl	800bef0 <nanf>
 800b892:	ed85 0a00 	vstr	s0, [r5]
 800b896:	e7d1      	b.n	800b83c <_scanf_float+0x3b0>
 800b898:	4630      	mov	r0, r6
 800b89a:	4639      	mov	r1, r7
 800b89c:	f7f5 f9ac 	bl	8000bf8 <__aeabi_d2f>
 800b8a0:	6028      	str	r0, [r5, #0]
 800b8a2:	e7cb      	b.n	800b83c <_scanf_float+0x3b0>
 800b8a4:	f04f 0900 	mov.w	r9, #0
 800b8a8:	e629      	b.n	800b4fe <_scanf_float+0x72>
 800b8aa:	bf00      	nop
 800b8ac:	0800f3e2 	.word	0x0800f3e2
 800b8b0:	0800f7a0 	.word	0x0800f7a0

0800b8b4 <std>:
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	b510      	push	{r4, lr}
 800b8b8:	4604      	mov	r4, r0
 800b8ba:	e9c0 3300 	strd	r3, r3, [r0]
 800b8be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b8c2:	6083      	str	r3, [r0, #8]
 800b8c4:	8181      	strh	r1, [r0, #12]
 800b8c6:	6643      	str	r3, [r0, #100]	@ 0x64
 800b8c8:	81c2      	strh	r2, [r0, #14]
 800b8ca:	6183      	str	r3, [r0, #24]
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	2208      	movs	r2, #8
 800b8d0:	305c      	adds	r0, #92	@ 0x5c
 800b8d2:	f000 fa45 	bl	800bd60 <memset>
 800b8d6:	4b0d      	ldr	r3, [pc, #52]	@ (800b90c <std+0x58>)
 800b8d8:	6263      	str	r3, [r4, #36]	@ 0x24
 800b8da:	4b0d      	ldr	r3, [pc, #52]	@ (800b910 <std+0x5c>)
 800b8dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b8de:	4b0d      	ldr	r3, [pc, #52]	@ (800b914 <std+0x60>)
 800b8e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b8e2:	4b0d      	ldr	r3, [pc, #52]	@ (800b918 <std+0x64>)
 800b8e4:	6323      	str	r3, [r4, #48]	@ 0x30
 800b8e6:	4b0d      	ldr	r3, [pc, #52]	@ (800b91c <std+0x68>)
 800b8e8:	6224      	str	r4, [r4, #32]
 800b8ea:	429c      	cmp	r4, r3
 800b8ec:	d006      	beq.n	800b8fc <std+0x48>
 800b8ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b8f2:	4294      	cmp	r4, r2
 800b8f4:	d002      	beq.n	800b8fc <std+0x48>
 800b8f6:	33d0      	adds	r3, #208	@ 0xd0
 800b8f8:	429c      	cmp	r4, r3
 800b8fa:	d105      	bne.n	800b908 <std+0x54>
 800b8fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b904:	f000 bada 	b.w	800bebc <__retarget_lock_init_recursive>
 800b908:	bd10      	pop	{r4, pc}
 800b90a:	bf00      	nop
 800b90c:	0800bbad 	.word	0x0800bbad
 800b910:	0800bbd3 	.word	0x0800bbd3
 800b914:	0800bc0b 	.word	0x0800bc0b
 800b918:	0800bc2f 	.word	0x0800bc2f
 800b91c:	200009f4 	.word	0x200009f4

0800b920 <stdio_exit_handler>:
 800b920:	4a02      	ldr	r2, [pc, #8]	@ (800b92c <stdio_exit_handler+0xc>)
 800b922:	4903      	ldr	r1, [pc, #12]	@ (800b930 <stdio_exit_handler+0x10>)
 800b924:	4803      	ldr	r0, [pc, #12]	@ (800b934 <stdio_exit_handler+0x14>)
 800b926:	f000 b869 	b.w	800b9fc <_fwalk_sglue>
 800b92a:	bf00      	nop
 800b92c:	20000018 	.word	0x20000018
 800b930:	0800eb15 	.word	0x0800eb15
 800b934:	20000194 	.word	0x20000194

0800b938 <cleanup_stdio>:
 800b938:	6841      	ldr	r1, [r0, #4]
 800b93a:	4b0c      	ldr	r3, [pc, #48]	@ (800b96c <cleanup_stdio+0x34>)
 800b93c:	4299      	cmp	r1, r3
 800b93e:	b510      	push	{r4, lr}
 800b940:	4604      	mov	r4, r0
 800b942:	d001      	beq.n	800b948 <cleanup_stdio+0x10>
 800b944:	f003 f8e6 	bl	800eb14 <_fflush_r>
 800b948:	68a1      	ldr	r1, [r4, #8]
 800b94a:	4b09      	ldr	r3, [pc, #36]	@ (800b970 <cleanup_stdio+0x38>)
 800b94c:	4299      	cmp	r1, r3
 800b94e:	d002      	beq.n	800b956 <cleanup_stdio+0x1e>
 800b950:	4620      	mov	r0, r4
 800b952:	f003 f8df 	bl	800eb14 <_fflush_r>
 800b956:	68e1      	ldr	r1, [r4, #12]
 800b958:	4b06      	ldr	r3, [pc, #24]	@ (800b974 <cleanup_stdio+0x3c>)
 800b95a:	4299      	cmp	r1, r3
 800b95c:	d004      	beq.n	800b968 <cleanup_stdio+0x30>
 800b95e:	4620      	mov	r0, r4
 800b960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b964:	f003 b8d6 	b.w	800eb14 <_fflush_r>
 800b968:	bd10      	pop	{r4, pc}
 800b96a:	bf00      	nop
 800b96c:	200009f4 	.word	0x200009f4
 800b970:	20000a5c 	.word	0x20000a5c
 800b974:	20000ac4 	.word	0x20000ac4

0800b978 <global_stdio_init.part.0>:
 800b978:	b510      	push	{r4, lr}
 800b97a:	4b0b      	ldr	r3, [pc, #44]	@ (800b9a8 <global_stdio_init.part.0+0x30>)
 800b97c:	4c0b      	ldr	r4, [pc, #44]	@ (800b9ac <global_stdio_init.part.0+0x34>)
 800b97e:	4a0c      	ldr	r2, [pc, #48]	@ (800b9b0 <global_stdio_init.part.0+0x38>)
 800b980:	601a      	str	r2, [r3, #0]
 800b982:	4620      	mov	r0, r4
 800b984:	2200      	movs	r2, #0
 800b986:	2104      	movs	r1, #4
 800b988:	f7ff ff94 	bl	800b8b4 <std>
 800b98c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b990:	2201      	movs	r2, #1
 800b992:	2109      	movs	r1, #9
 800b994:	f7ff ff8e 	bl	800b8b4 <std>
 800b998:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b99c:	2202      	movs	r2, #2
 800b99e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9a2:	2112      	movs	r1, #18
 800b9a4:	f7ff bf86 	b.w	800b8b4 <std>
 800b9a8:	20000b2c 	.word	0x20000b2c
 800b9ac:	200009f4 	.word	0x200009f4
 800b9b0:	0800b921 	.word	0x0800b921

0800b9b4 <__sfp_lock_acquire>:
 800b9b4:	4801      	ldr	r0, [pc, #4]	@ (800b9bc <__sfp_lock_acquire+0x8>)
 800b9b6:	f000 ba82 	b.w	800bebe <__retarget_lock_acquire_recursive>
 800b9ba:	bf00      	nop
 800b9bc:	20000b35 	.word	0x20000b35

0800b9c0 <__sfp_lock_release>:
 800b9c0:	4801      	ldr	r0, [pc, #4]	@ (800b9c8 <__sfp_lock_release+0x8>)
 800b9c2:	f000 ba7d 	b.w	800bec0 <__retarget_lock_release_recursive>
 800b9c6:	bf00      	nop
 800b9c8:	20000b35 	.word	0x20000b35

0800b9cc <__sinit>:
 800b9cc:	b510      	push	{r4, lr}
 800b9ce:	4604      	mov	r4, r0
 800b9d0:	f7ff fff0 	bl	800b9b4 <__sfp_lock_acquire>
 800b9d4:	6a23      	ldr	r3, [r4, #32]
 800b9d6:	b11b      	cbz	r3, 800b9e0 <__sinit+0x14>
 800b9d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9dc:	f7ff bff0 	b.w	800b9c0 <__sfp_lock_release>
 800b9e0:	4b04      	ldr	r3, [pc, #16]	@ (800b9f4 <__sinit+0x28>)
 800b9e2:	6223      	str	r3, [r4, #32]
 800b9e4:	4b04      	ldr	r3, [pc, #16]	@ (800b9f8 <__sinit+0x2c>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d1f5      	bne.n	800b9d8 <__sinit+0xc>
 800b9ec:	f7ff ffc4 	bl	800b978 <global_stdio_init.part.0>
 800b9f0:	e7f2      	b.n	800b9d8 <__sinit+0xc>
 800b9f2:	bf00      	nop
 800b9f4:	0800b939 	.word	0x0800b939
 800b9f8:	20000b2c 	.word	0x20000b2c

0800b9fc <_fwalk_sglue>:
 800b9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba00:	4607      	mov	r7, r0
 800ba02:	4688      	mov	r8, r1
 800ba04:	4614      	mov	r4, r2
 800ba06:	2600      	movs	r6, #0
 800ba08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba0c:	f1b9 0901 	subs.w	r9, r9, #1
 800ba10:	d505      	bpl.n	800ba1e <_fwalk_sglue+0x22>
 800ba12:	6824      	ldr	r4, [r4, #0]
 800ba14:	2c00      	cmp	r4, #0
 800ba16:	d1f7      	bne.n	800ba08 <_fwalk_sglue+0xc>
 800ba18:	4630      	mov	r0, r6
 800ba1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba1e:	89ab      	ldrh	r3, [r5, #12]
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d907      	bls.n	800ba34 <_fwalk_sglue+0x38>
 800ba24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba28:	3301      	adds	r3, #1
 800ba2a:	d003      	beq.n	800ba34 <_fwalk_sglue+0x38>
 800ba2c:	4629      	mov	r1, r5
 800ba2e:	4638      	mov	r0, r7
 800ba30:	47c0      	blx	r8
 800ba32:	4306      	orrs	r6, r0
 800ba34:	3568      	adds	r5, #104	@ 0x68
 800ba36:	e7e9      	b.n	800ba0c <_fwalk_sglue+0x10>

0800ba38 <iprintf>:
 800ba38:	b40f      	push	{r0, r1, r2, r3}
 800ba3a:	b507      	push	{r0, r1, r2, lr}
 800ba3c:	4906      	ldr	r1, [pc, #24]	@ (800ba58 <iprintf+0x20>)
 800ba3e:	ab04      	add	r3, sp, #16
 800ba40:	6808      	ldr	r0, [r1, #0]
 800ba42:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba46:	6881      	ldr	r1, [r0, #8]
 800ba48:	9301      	str	r3, [sp, #4]
 800ba4a:	f002 fd79 	bl	800e540 <_vfiprintf_r>
 800ba4e:	b003      	add	sp, #12
 800ba50:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba54:	b004      	add	sp, #16
 800ba56:	4770      	bx	lr
 800ba58:	20000190 	.word	0x20000190

0800ba5c <_puts_r>:
 800ba5c:	6a03      	ldr	r3, [r0, #32]
 800ba5e:	b570      	push	{r4, r5, r6, lr}
 800ba60:	6884      	ldr	r4, [r0, #8]
 800ba62:	4605      	mov	r5, r0
 800ba64:	460e      	mov	r6, r1
 800ba66:	b90b      	cbnz	r3, 800ba6c <_puts_r+0x10>
 800ba68:	f7ff ffb0 	bl	800b9cc <__sinit>
 800ba6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ba6e:	07db      	lsls	r3, r3, #31
 800ba70:	d405      	bmi.n	800ba7e <_puts_r+0x22>
 800ba72:	89a3      	ldrh	r3, [r4, #12]
 800ba74:	0598      	lsls	r0, r3, #22
 800ba76:	d402      	bmi.n	800ba7e <_puts_r+0x22>
 800ba78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba7a:	f000 fa20 	bl	800bebe <__retarget_lock_acquire_recursive>
 800ba7e:	89a3      	ldrh	r3, [r4, #12]
 800ba80:	0719      	lsls	r1, r3, #28
 800ba82:	d502      	bpl.n	800ba8a <_puts_r+0x2e>
 800ba84:	6923      	ldr	r3, [r4, #16]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d135      	bne.n	800baf6 <_puts_r+0x9a>
 800ba8a:	4621      	mov	r1, r4
 800ba8c:	4628      	mov	r0, r5
 800ba8e:	f000 f911 	bl	800bcb4 <__swsetup_r>
 800ba92:	b380      	cbz	r0, 800baf6 <_puts_r+0x9a>
 800ba94:	f04f 35ff 	mov.w	r5, #4294967295
 800ba98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ba9a:	07da      	lsls	r2, r3, #31
 800ba9c:	d405      	bmi.n	800baaa <_puts_r+0x4e>
 800ba9e:	89a3      	ldrh	r3, [r4, #12]
 800baa0:	059b      	lsls	r3, r3, #22
 800baa2:	d402      	bmi.n	800baaa <_puts_r+0x4e>
 800baa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800baa6:	f000 fa0b 	bl	800bec0 <__retarget_lock_release_recursive>
 800baaa:	4628      	mov	r0, r5
 800baac:	bd70      	pop	{r4, r5, r6, pc}
 800baae:	2b00      	cmp	r3, #0
 800bab0:	da04      	bge.n	800babc <_puts_r+0x60>
 800bab2:	69a2      	ldr	r2, [r4, #24]
 800bab4:	429a      	cmp	r2, r3
 800bab6:	dc17      	bgt.n	800bae8 <_puts_r+0x8c>
 800bab8:	290a      	cmp	r1, #10
 800baba:	d015      	beq.n	800bae8 <_puts_r+0x8c>
 800babc:	6823      	ldr	r3, [r4, #0]
 800babe:	1c5a      	adds	r2, r3, #1
 800bac0:	6022      	str	r2, [r4, #0]
 800bac2:	7019      	strb	r1, [r3, #0]
 800bac4:	68a3      	ldr	r3, [r4, #8]
 800bac6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800baca:	3b01      	subs	r3, #1
 800bacc:	60a3      	str	r3, [r4, #8]
 800bace:	2900      	cmp	r1, #0
 800bad0:	d1ed      	bne.n	800baae <_puts_r+0x52>
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	da11      	bge.n	800bafa <_puts_r+0x9e>
 800bad6:	4622      	mov	r2, r4
 800bad8:	210a      	movs	r1, #10
 800bada:	4628      	mov	r0, r5
 800badc:	f000 f8ab 	bl	800bc36 <__swbuf_r>
 800bae0:	3001      	adds	r0, #1
 800bae2:	d0d7      	beq.n	800ba94 <_puts_r+0x38>
 800bae4:	250a      	movs	r5, #10
 800bae6:	e7d7      	b.n	800ba98 <_puts_r+0x3c>
 800bae8:	4622      	mov	r2, r4
 800baea:	4628      	mov	r0, r5
 800baec:	f000 f8a3 	bl	800bc36 <__swbuf_r>
 800baf0:	3001      	adds	r0, #1
 800baf2:	d1e7      	bne.n	800bac4 <_puts_r+0x68>
 800baf4:	e7ce      	b.n	800ba94 <_puts_r+0x38>
 800baf6:	3e01      	subs	r6, #1
 800baf8:	e7e4      	b.n	800bac4 <_puts_r+0x68>
 800bafa:	6823      	ldr	r3, [r4, #0]
 800bafc:	1c5a      	adds	r2, r3, #1
 800bafe:	6022      	str	r2, [r4, #0]
 800bb00:	220a      	movs	r2, #10
 800bb02:	701a      	strb	r2, [r3, #0]
 800bb04:	e7ee      	b.n	800bae4 <_puts_r+0x88>
	...

0800bb08 <puts>:
 800bb08:	4b02      	ldr	r3, [pc, #8]	@ (800bb14 <puts+0xc>)
 800bb0a:	4601      	mov	r1, r0
 800bb0c:	6818      	ldr	r0, [r3, #0]
 800bb0e:	f7ff bfa5 	b.w	800ba5c <_puts_r>
 800bb12:	bf00      	nop
 800bb14:	20000190 	.word	0x20000190

0800bb18 <siprintf>:
 800bb18:	b40e      	push	{r1, r2, r3}
 800bb1a:	b500      	push	{lr}
 800bb1c:	b09c      	sub	sp, #112	@ 0x70
 800bb1e:	ab1d      	add	r3, sp, #116	@ 0x74
 800bb20:	9002      	str	r0, [sp, #8]
 800bb22:	9006      	str	r0, [sp, #24]
 800bb24:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bb28:	4809      	ldr	r0, [pc, #36]	@ (800bb50 <siprintf+0x38>)
 800bb2a:	9107      	str	r1, [sp, #28]
 800bb2c:	9104      	str	r1, [sp, #16]
 800bb2e:	4909      	ldr	r1, [pc, #36]	@ (800bb54 <siprintf+0x3c>)
 800bb30:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb34:	9105      	str	r1, [sp, #20]
 800bb36:	6800      	ldr	r0, [r0, #0]
 800bb38:	9301      	str	r3, [sp, #4]
 800bb3a:	a902      	add	r1, sp, #8
 800bb3c:	f002 fa0e 	bl	800df5c <_svfiprintf_r>
 800bb40:	9b02      	ldr	r3, [sp, #8]
 800bb42:	2200      	movs	r2, #0
 800bb44:	701a      	strb	r2, [r3, #0]
 800bb46:	b01c      	add	sp, #112	@ 0x70
 800bb48:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb4c:	b003      	add	sp, #12
 800bb4e:	4770      	bx	lr
 800bb50:	20000190 	.word	0x20000190
 800bb54:	ffff0208 	.word	0xffff0208

0800bb58 <siscanf>:
 800bb58:	b40e      	push	{r1, r2, r3}
 800bb5a:	b530      	push	{r4, r5, lr}
 800bb5c:	b09c      	sub	sp, #112	@ 0x70
 800bb5e:	ac1f      	add	r4, sp, #124	@ 0x7c
 800bb60:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800bb64:	f854 5b04 	ldr.w	r5, [r4], #4
 800bb68:	f8ad 2014 	strh.w	r2, [sp, #20]
 800bb6c:	9002      	str	r0, [sp, #8]
 800bb6e:	9006      	str	r0, [sp, #24]
 800bb70:	f7f4 fb86 	bl	8000280 <strlen>
 800bb74:	4b0b      	ldr	r3, [pc, #44]	@ (800bba4 <siscanf+0x4c>)
 800bb76:	9003      	str	r0, [sp, #12]
 800bb78:	9007      	str	r0, [sp, #28]
 800bb7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb7c:	480a      	ldr	r0, [pc, #40]	@ (800bba8 <siscanf+0x50>)
 800bb7e:	9401      	str	r4, [sp, #4]
 800bb80:	2300      	movs	r3, #0
 800bb82:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bb84:	9314      	str	r3, [sp, #80]	@ 0x50
 800bb86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bb8a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bb8e:	462a      	mov	r2, r5
 800bb90:	4623      	mov	r3, r4
 800bb92:	a902      	add	r1, sp, #8
 800bb94:	6800      	ldr	r0, [r0, #0]
 800bb96:	f002 fb35 	bl	800e204 <__ssvfiscanf_r>
 800bb9a:	b01c      	add	sp, #112	@ 0x70
 800bb9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bba0:	b003      	add	sp, #12
 800bba2:	4770      	bx	lr
 800bba4:	0800bbcf 	.word	0x0800bbcf
 800bba8:	20000190 	.word	0x20000190

0800bbac <__sread>:
 800bbac:	b510      	push	{r4, lr}
 800bbae:	460c      	mov	r4, r1
 800bbb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbb4:	f000 f934 	bl	800be20 <_read_r>
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	bfab      	itete	ge
 800bbbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bbbe:	89a3      	ldrhlt	r3, [r4, #12]
 800bbc0:	181b      	addge	r3, r3, r0
 800bbc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bbc6:	bfac      	ite	ge
 800bbc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bbca:	81a3      	strhlt	r3, [r4, #12]
 800bbcc:	bd10      	pop	{r4, pc}

0800bbce <__seofread>:
 800bbce:	2000      	movs	r0, #0
 800bbd0:	4770      	bx	lr

0800bbd2 <__swrite>:
 800bbd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbd6:	461f      	mov	r7, r3
 800bbd8:	898b      	ldrh	r3, [r1, #12]
 800bbda:	05db      	lsls	r3, r3, #23
 800bbdc:	4605      	mov	r5, r0
 800bbde:	460c      	mov	r4, r1
 800bbe0:	4616      	mov	r6, r2
 800bbe2:	d505      	bpl.n	800bbf0 <__swrite+0x1e>
 800bbe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbe8:	2302      	movs	r3, #2
 800bbea:	2200      	movs	r2, #0
 800bbec:	f000 f906 	bl	800bdfc <_lseek_r>
 800bbf0:	89a3      	ldrh	r3, [r4, #12]
 800bbf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bbfa:	81a3      	strh	r3, [r4, #12]
 800bbfc:	4632      	mov	r2, r6
 800bbfe:	463b      	mov	r3, r7
 800bc00:	4628      	mov	r0, r5
 800bc02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc06:	f000 b91d 	b.w	800be44 <_write_r>

0800bc0a <__sseek>:
 800bc0a:	b510      	push	{r4, lr}
 800bc0c:	460c      	mov	r4, r1
 800bc0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc12:	f000 f8f3 	bl	800bdfc <_lseek_r>
 800bc16:	1c43      	adds	r3, r0, #1
 800bc18:	89a3      	ldrh	r3, [r4, #12]
 800bc1a:	bf15      	itete	ne
 800bc1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bc1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bc22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bc26:	81a3      	strheq	r3, [r4, #12]
 800bc28:	bf18      	it	ne
 800bc2a:	81a3      	strhne	r3, [r4, #12]
 800bc2c:	bd10      	pop	{r4, pc}

0800bc2e <__sclose>:
 800bc2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc32:	f000 b8d3 	b.w	800bddc <_close_r>

0800bc36 <__swbuf_r>:
 800bc36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc38:	460e      	mov	r6, r1
 800bc3a:	4614      	mov	r4, r2
 800bc3c:	4605      	mov	r5, r0
 800bc3e:	b118      	cbz	r0, 800bc48 <__swbuf_r+0x12>
 800bc40:	6a03      	ldr	r3, [r0, #32]
 800bc42:	b90b      	cbnz	r3, 800bc48 <__swbuf_r+0x12>
 800bc44:	f7ff fec2 	bl	800b9cc <__sinit>
 800bc48:	69a3      	ldr	r3, [r4, #24]
 800bc4a:	60a3      	str	r3, [r4, #8]
 800bc4c:	89a3      	ldrh	r3, [r4, #12]
 800bc4e:	071a      	lsls	r2, r3, #28
 800bc50:	d501      	bpl.n	800bc56 <__swbuf_r+0x20>
 800bc52:	6923      	ldr	r3, [r4, #16]
 800bc54:	b943      	cbnz	r3, 800bc68 <__swbuf_r+0x32>
 800bc56:	4621      	mov	r1, r4
 800bc58:	4628      	mov	r0, r5
 800bc5a:	f000 f82b 	bl	800bcb4 <__swsetup_r>
 800bc5e:	b118      	cbz	r0, 800bc68 <__swbuf_r+0x32>
 800bc60:	f04f 37ff 	mov.w	r7, #4294967295
 800bc64:	4638      	mov	r0, r7
 800bc66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc68:	6823      	ldr	r3, [r4, #0]
 800bc6a:	6922      	ldr	r2, [r4, #16]
 800bc6c:	1a98      	subs	r0, r3, r2
 800bc6e:	6963      	ldr	r3, [r4, #20]
 800bc70:	b2f6      	uxtb	r6, r6
 800bc72:	4283      	cmp	r3, r0
 800bc74:	4637      	mov	r7, r6
 800bc76:	dc05      	bgt.n	800bc84 <__swbuf_r+0x4e>
 800bc78:	4621      	mov	r1, r4
 800bc7a:	4628      	mov	r0, r5
 800bc7c:	f002 ff4a 	bl	800eb14 <_fflush_r>
 800bc80:	2800      	cmp	r0, #0
 800bc82:	d1ed      	bne.n	800bc60 <__swbuf_r+0x2a>
 800bc84:	68a3      	ldr	r3, [r4, #8]
 800bc86:	3b01      	subs	r3, #1
 800bc88:	60a3      	str	r3, [r4, #8]
 800bc8a:	6823      	ldr	r3, [r4, #0]
 800bc8c:	1c5a      	adds	r2, r3, #1
 800bc8e:	6022      	str	r2, [r4, #0]
 800bc90:	701e      	strb	r6, [r3, #0]
 800bc92:	6962      	ldr	r2, [r4, #20]
 800bc94:	1c43      	adds	r3, r0, #1
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d004      	beq.n	800bca4 <__swbuf_r+0x6e>
 800bc9a:	89a3      	ldrh	r3, [r4, #12]
 800bc9c:	07db      	lsls	r3, r3, #31
 800bc9e:	d5e1      	bpl.n	800bc64 <__swbuf_r+0x2e>
 800bca0:	2e0a      	cmp	r6, #10
 800bca2:	d1df      	bne.n	800bc64 <__swbuf_r+0x2e>
 800bca4:	4621      	mov	r1, r4
 800bca6:	4628      	mov	r0, r5
 800bca8:	f002 ff34 	bl	800eb14 <_fflush_r>
 800bcac:	2800      	cmp	r0, #0
 800bcae:	d0d9      	beq.n	800bc64 <__swbuf_r+0x2e>
 800bcb0:	e7d6      	b.n	800bc60 <__swbuf_r+0x2a>
	...

0800bcb4 <__swsetup_r>:
 800bcb4:	b538      	push	{r3, r4, r5, lr}
 800bcb6:	4b29      	ldr	r3, [pc, #164]	@ (800bd5c <__swsetup_r+0xa8>)
 800bcb8:	4605      	mov	r5, r0
 800bcba:	6818      	ldr	r0, [r3, #0]
 800bcbc:	460c      	mov	r4, r1
 800bcbe:	b118      	cbz	r0, 800bcc8 <__swsetup_r+0x14>
 800bcc0:	6a03      	ldr	r3, [r0, #32]
 800bcc2:	b90b      	cbnz	r3, 800bcc8 <__swsetup_r+0x14>
 800bcc4:	f7ff fe82 	bl	800b9cc <__sinit>
 800bcc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bccc:	0719      	lsls	r1, r3, #28
 800bcce:	d422      	bmi.n	800bd16 <__swsetup_r+0x62>
 800bcd0:	06da      	lsls	r2, r3, #27
 800bcd2:	d407      	bmi.n	800bce4 <__swsetup_r+0x30>
 800bcd4:	2209      	movs	r2, #9
 800bcd6:	602a      	str	r2, [r5, #0]
 800bcd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcdc:	81a3      	strh	r3, [r4, #12]
 800bcde:	f04f 30ff 	mov.w	r0, #4294967295
 800bce2:	e033      	b.n	800bd4c <__swsetup_r+0x98>
 800bce4:	0758      	lsls	r0, r3, #29
 800bce6:	d512      	bpl.n	800bd0e <__swsetup_r+0x5a>
 800bce8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bcea:	b141      	cbz	r1, 800bcfe <__swsetup_r+0x4a>
 800bcec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bcf0:	4299      	cmp	r1, r3
 800bcf2:	d002      	beq.n	800bcfa <__swsetup_r+0x46>
 800bcf4:	4628      	mov	r0, r5
 800bcf6:	f000 ff4f 	bl	800cb98 <_free_r>
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	6363      	str	r3, [r4, #52]	@ 0x34
 800bcfe:	89a3      	ldrh	r3, [r4, #12]
 800bd00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bd04:	81a3      	strh	r3, [r4, #12]
 800bd06:	2300      	movs	r3, #0
 800bd08:	6063      	str	r3, [r4, #4]
 800bd0a:	6923      	ldr	r3, [r4, #16]
 800bd0c:	6023      	str	r3, [r4, #0]
 800bd0e:	89a3      	ldrh	r3, [r4, #12]
 800bd10:	f043 0308 	orr.w	r3, r3, #8
 800bd14:	81a3      	strh	r3, [r4, #12]
 800bd16:	6923      	ldr	r3, [r4, #16]
 800bd18:	b94b      	cbnz	r3, 800bd2e <__swsetup_r+0x7a>
 800bd1a:	89a3      	ldrh	r3, [r4, #12]
 800bd1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bd20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd24:	d003      	beq.n	800bd2e <__swsetup_r+0x7a>
 800bd26:	4621      	mov	r1, r4
 800bd28:	4628      	mov	r0, r5
 800bd2a:	f002 ff41 	bl	800ebb0 <__smakebuf_r>
 800bd2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd32:	f013 0201 	ands.w	r2, r3, #1
 800bd36:	d00a      	beq.n	800bd4e <__swsetup_r+0x9a>
 800bd38:	2200      	movs	r2, #0
 800bd3a:	60a2      	str	r2, [r4, #8]
 800bd3c:	6962      	ldr	r2, [r4, #20]
 800bd3e:	4252      	negs	r2, r2
 800bd40:	61a2      	str	r2, [r4, #24]
 800bd42:	6922      	ldr	r2, [r4, #16]
 800bd44:	b942      	cbnz	r2, 800bd58 <__swsetup_r+0xa4>
 800bd46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bd4a:	d1c5      	bne.n	800bcd8 <__swsetup_r+0x24>
 800bd4c:	bd38      	pop	{r3, r4, r5, pc}
 800bd4e:	0799      	lsls	r1, r3, #30
 800bd50:	bf58      	it	pl
 800bd52:	6962      	ldrpl	r2, [r4, #20]
 800bd54:	60a2      	str	r2, [r4, #8]
 800bd56:	e7f4      	b.n	800bd42 <__swsetup_r+0x8e>
 800bd58:	2000      	movs	r0, #0
 800bd5a:	e7f7      	b.n	800bd4c <__swsetup_r+0x98>
 800bd5c:	20000190 	.word	0x20000190

0800bd60 <memset>:
 800bd60:	4402      	add	r2, r0
 800bd62:	4603      	mov	r3, r0
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d100      	bne.n	800bd6a <memset+0xa>
 800bd68:	4770      	bx	lr
 800bd6a:	f803 1b01 	strb.w	r1, [r3], #1
 800bd6e:	e7f9      	b.n	800bd64 <memset+0x4>

0800bd70 <strchr>:
 800bd70:	b2c9      	uxtb	r1, r1
 800bd72:	4603      	mov	r3, r0
 800bd74:	4618      	mov	r0, r3
 800bd76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd7a:	b112      	cbz	r2, 800bd82 <strchr+0x12>
 800bd7c:	428a      	cmp	r2, r1
 800bd7e:	d1f9      	bne.n	800bd74 <strchr+0x4>
 800bd80:	4770      	bx	lr
 800bd82:	2900      	cmp	r1, #0
 800bd84:	bf18      	it	ne
 800bd86:	2000      	movne	r0, #0
 800bd88:	4770      	bx	lr

0800bd8a <strncmp>:
 800bd8a:	b510      	push	{r4, lr}
 800bd8c:	b16a      	cbz	r2, 800bdaa <strncmp+0x20>
 800bd8e:	3901      	subs	r1, #1
 800bd90:	1884      	adds	r4, r0, r2
 800bd92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd96:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d103      	bne.n	800bda6 <strncmp+0x1c>
 800bd9e:	42a0      	cmp	r0, r4
 800bda0:	d001      	beq.n	800bda6 <strncmp+0x1c>
 800bda2:	2a00      	cmp	r2, #0
 800bda4:	d1f5      	bne.n	800bd92 <strncmp+0x8>
 800bda6:	1ad0      	subs	r0, r2, r3
 800bda8:	bd10      	pop	{r4, pc}
 800bdaa:	4610      	mov	r0, r2
 800bdac:	e7fc      	b.n	800bda8 <strncmp+0x1e>

0800bdae <strncpy>:
 800bdae:	b510      	push	{r4, lr}
 800bdb0:	3901      	subs	r1, #1
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	b132      	cbz	r2, 800bdc4 <strncpy+0x16>
 800bdb6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bdba:	f803 4b01 	strb.w	r4, [r3], #1
 800bdbe:	3a01      	subs	r2, #1
 800bdc0:	2c00      	cmp	r4, #0
 800bdc2:	d1f7      	bne.n	800bdb4 <strncpy+0x6>
 800bdc4:	441a      	add	r2, r3
 800bdc6:	2100      	movs	r1, #0
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d100      	bne.n	800bdce <strncpy+0x20>
 800bdcc:	bd10      	pop	{r4, pc}
 800bdce:	f803 1b01 	strb.w	r1, [r3], #1
 800bdd2:	e7f9      	b.n	800bdc8 <strncpy+0x1a>

0800bdd4 <_localeconv_r>:
 800bdd4:	4800      	ldr	r0, [pc, #0]	@ (800bdd8 <_localeconv_r+0x4>)
 800bdd6:	4770      	bx	lr
 800bdd8:	20000114 	.word	0x20000114

0800bddc <_close_r>:
 800bddc:	b538      	push	{r3, r4, r5, lr}
 800bdde:	4d06      	ldr	r5, [pc, #24]	@ (800bdf8 <_close_r+0x1c>)
 800bde0:	2300      	movs	r3, #0
 800bde2:	4604      	mov	r4, r0
 800bde4:	4608      	mov	r0, r1
 800bde6:	602b      	str	r3, [r5, #0]
 800bde8:	f7f7 f9b2 	bl	8003150 <_close>
 800bdec:	1c43      	adds	r3, r0, #1
 800bdee:	d102      	bne.n	800bdf6 <_close_r+0x1a>
 800bdf0:	682b      	ldr	r3, [r5, #0]
 800bdf2:	b103      	cbz	r3, 800bdf6 <_close_r+0x1a>
 800bdf4:	6023      	str	r3, [r4, #0]
 800bdf6:	bd38      	pop	{r3, r4, r5, pc}
 800bdf8:	20000b30 	.word	0x20000b30

0800bdfc <_lseek_r>:
 800bdfc:	b538      	push	{r3, r4, r5, lr}
 800bdfe:	4d07      	ldr	r5, [pc, #28]	@ (800be1c <_lseek_r+0x20>)
 800be00:	4604      	mov	r4, r0
 800be02:	4608      	mov	r0, r1
 800be04:	4611      	mov	r1, r2
 800be06:	2200      	movs	r2, #0
 800be08:	602a      	str	r2, [r5, #0]
 800be0a:	461a      	mov	r2, r3
 800be0c:	f7f7 f9c7 	bl	800319e <_lseek>
 800be10:	1c43      	adds	r3, r0, #1
 800be12:	d102      	bne.n	800be1a <_lseek_r+0x1e>
 800be14:	682b      	ldr	r3, [r5, #0]
 800be16:	b103      	cbz	r3, 800be1a <_lseek_r+0x1e>
 800be18:	6023      	str	r3, [r4, #0]
 800be1a:	bd38      	pop	{r3, r4, r5, pc}
 800be1c:	20000b30 	.word	0x20000b30

0800be20 <_read_r>:
 800be20:	b538      	push	{r3, r4, r5, lr}
 800be22:	4d07      	ldr	r5, [pc, #28]	@ (800be40 <_read_r+0x20>)
 800be24:	4604      	mov	r4, r0
 800be26:	4608      	mov	r0, r1
 800be28:	4611      	mov	r1, r2
 800be2a:	2200      	movs	r2, #0
 800be2c:	602a      	str	r2, [r5, #0]
 800be2e:	461a      	mov	r2, r3
 800be30:	f7f7 f955 	bl	80030de <_read>
 800be34:	1c43      	adds	r3, r0, #1
 800be36:	d102      	bne.n	800be3e <_read_r+0x1e>
 800be38:	682b      	ldr	r3, [r5, #0]
 800be3a:	b103      	cbz	r3, 800be3e <_read_r+0x1e>
 800be3c:	6023      	str	r3, [r4, #0]
 800be3e:	bd38      	pop	{r3, r4, r5, pc}
 800be40:	20000b30 	.word	0x20000b30

0800be44 <_write_r>:
 800be44:	b538      	push	{r3, r4, r5, lr}
 800be46:	4d07      	ldr	r5, [pc, #28]	@ (800be64 <_write_r+0x20>)
 800be48:	4604      	mov	r4, r0
 800be4a:	4608      	mov	r0, r1
 800be4c:	4611      	mov	r1, r2
 800be4e:	2200      	movs	r2, #0
 800be50:	602a      	str	r2, [r5, #0]
 800be52:	461a      	mov	r2, r3
 800be54:	f7f7 f960 	bl	8003118 <_write>
 800be58:	1c43      	adds	r3, r0, #1
 800be5a:	d102      	bne.n	800be62 <_write_r+0x1e>
 800be5c:	682b      	ldr	r3, [r5, #0]
 800be5e:	b103      	cbz	r3, 800be62 <_write_r+0x1e>
 800be60:	6023      	str	r3, [r4, #0]
 800be62:	bd38      	pop	{r3, r4, r5, pc}
 800be64:	20000b30 	.word	0x20000b30

0800be68 <__errno>:
 800be68:	4b01      	ldr	r3, [pc, #4]	@ (800be70 <__errno+0x8>)
 800be6a:	6818      	ldr	r0, [r3, #0]
 800be6c:	4770      	bx	lr
 800be6e:	bf00      	nop
 800be70:	20000190 	.word	0x20000190

0800be74 <__libc_init_array>:
 800be74:	b570      	push	{r4, r5, r6, lr}
 800be76:	4d0d      	ldr	r5, [pc, #52]	@ (800beac <__libc_init_array+0x38>)
 800be78:	4c0d      	ldr	r4, [pc, #52]	@ (800beb0 <__libc_init_array+0x3c>)
 800be7a:	1b64      	subs	r4, r4, r5
 800be7c:	10a4      	asrs	r4, r4, #2
 800be7e:	2600      	movs	r6, #0
 800be80:	42a6      	cmp	r6, r4
 800be82:	d109      	bne.n	800be98 <__libc_init_array+0x24>
 800be84:	4d0b      	ldr	r5, [pc, #44]	@ (800beb4 <__libc_init_array+0x40>)
 800be86:	4c0c      	ldr	r4, [pc, #48]	@ (800beb8 <__libc_init_array+0x44>)
 800be88:	f003 f8c4 	bl	800f014 <_init>
 800be8c:	1b64      	subs	r4, r4, r5
 800be8e:	10a4      	asrs	r4, r4, #2
 800be90:	2600      	movs	r6, #0
 800be92:	42a6      	cmp	r6, r4
 800be94:	d105      	bne.n	800bea2 <__libc_init_array+0x2e>
 800be96:	bd70      	pop	{r4, r5, r6, pc}
 800be98:	f855 3b04 	ldr.w	r3, [r5], #4
 800be9c:	4798      	blx	r3
 800be9e:	3601      	adds	r6, #1
 800bea0:	e7ee      	b.n	800be80 <__libc_init_array+0xc>
 800bea2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bea6:	4798      	blx	r3
 800bea8:	3601      	adds	r6, #1
 800beaa:	e7f2      	b.n	800be92 <__libc_init_array+0x1e>
 800beac:	0800f7ac 	.word	0x0800f7ac
 800beb0:	0800f7ac 	.word	0x0800f7ac
 800beb4:	0800f7ac 	.word	0x0800f7ac
 800beb8:	0800f7b0 	.word	0x0800f7b0

0800bebc <__retarget_lock_init_recursive>:
 800bebc:	4770      	bx	lr

0800bebe <__retarget_lock_acquire_recursive>:
 800bebe:	4770      	bx	lr

0800bec0 <__retarget_lock_release_recursive>:
 800bec0:	4770      	bx	lr

0800bec2 <memcpy>:
 800bec2:	440a      	add	r2, r1
 800bec4:	4291      	cmp	r1, r2
 800bec6:	f100 33ff 	add.w	r3, r0, #4294967295
 800beca:	d100      	bne.n	800bece <memcpy+0xc>
 800becc:	4770      	bx	lr
 800bece:	b510      	push	{r4, lr}
 800bed0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bed4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bed8:	4291      	cmp	r1, r2
 800beda:	d1f9      	bne.n	800bed0 <memcpy+0xe>
 800bedc:	bd10      	pop	{r4, pc}
	...

0800bee0 <nan>:
 800bee0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bee8 <nan+0x8>
 800bee4:	4770      	bx	lr
 800bee6:	bf00      	nop
 800bee8:	00000000 	.word	0x00000000
 800beec:	7ff80000 	.word	0x7ff80000

0800bef0 <nanf>:
 800bef0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bef8 <nanf+0x8>
 800bef4:	4770      	bx	lr
 800bef6:	bf00      	nop
 800bef8:	7fc00000 	.word	0x7fc00000

0800befc <quorem>:
 800befc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf00:	6903      	ldr	r3, [r0, #16]
 800bf02:	690c      	ldr	r4, [r1, #16]
 800bf04:	42a3      	cmp	r3, r4
 800bf06:	4607      	mov	r7, r0
 800bf08:	db7e      	blt.n	800c008 <quorem+0x10c>
 800bf0a:	3c01      	subs	r4, #1
 800bf0c:	f101 0814 	add.w	r8, r1, #20
 800bf10:	00a3      	lsls	r3, r4, #2
 800bf12:	f100 0514 	add.w	r5, r0, #20
 800bf16:	9300      	str	r3, [sp, #0]
 800bf18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf1c:	9301      	str	r3, [sp, #4]
 800bf1e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bf22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf26:	3301      	adds	r3, #1
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bf2e:	fbb2 f6f3 	udiv	r6, r2, r3
 800bf32:	d32e      	bcc.n	800bf92 <quorem+0x96>
 800bf34:	f04f 0a00 	mov.w	sl, #0
 800bf38:	46c4      	mov	ip, r8
 800bf3a:	46ae      	mov	lr, r5
 800bf3c:	46d3      	mov	fp, sl
 800bf3e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bf42:	b298      	uxth	r0, r3
 800bf44:	fb06 a000 	mla	r0, r6, r0, sl
 800bf48:	0c02      	lsrs	r2, r0, #16
 800bf4a:	0c1b      	lsrs	r3, r3, #16
 800bf4c:	fb06 2303 	mla	r3, r6, r3, r2
 800bf50:	f8de 2000 	ldr.w	r2, [lr]
 800bf54:	b280      	uxth	r0, r0
 800bf56:	b292      	uxth	r2, r2
 800bf58:	1a12      	subs	r2, r2, r0
 800bf5a:	445a      	add	r2, fp
 800bf5c:	f8de 0000 	ldr.w	r0, [lr]
 800bf60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bf6a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bf6e:	b292      	uxth	r2, r2
 800bf70:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bf74:	45e1      	cmp	r9, ip
 800bf76:	f84e 2b04 	str.w	r2, [lr], #4
 800bf7a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bf7e:	d2de      	bcs.n	800bf3e <quorem+0x42>
 800bf80:	9b00      	ldr	r3, [sp, #0]
 800bf82:	58eb      	ldr	r3, [r5, r3]
 800bf84:	b92b      	cbnz	r3, 800bf92 <quorem+0x96>
 800bf86:	9b01      	ldr	r3, [sp, #4]
 800bf88:	3b04      	subs	r3, #4
 800bf8a:	429d      	cmp	r5, r3
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	d32f      	bcc.n	800bff0 <quorem+0xf4>
 800bf90:	613c      	str	r4, [r7, #16]
 800bf92:	4638      	mov	r0, r7
 800bf94:	f001 fd10 	bl	800d9b8 <__mcmp>
 800bf98:	2800      	cmp	r0, #0
 800bf9a:	db25      	blt.n	800bfe8 <quorem+0xec>
 800bf9c:	4629      	mov	r1, r5
 800bf9e:	2000      	movs	r0, #0
 800bfa0:	f858 2b04 	ldr.w	r2, [r8], #4
 800bfa4:	f8d1 c000 	ldr.w	ip, [r1]
 800bfa8:	fa1f fe82 	uxth.w	lr, r2
 800bfac:	fa1f f38c 	uxth.w	r3, ip
 800bfb0:	eba3 030e 	sub.w	r3, r3, lr
 800bfb4:	4403      	add	r3, r0
 800bfb6:	0c12      	lsrs	r2, r2, #16
 800bfb8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bfbc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bfc0:	b29b      	uxth	r3, r3
 800bfc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bfc6:	45c1      	cmp	r9, r8
 800bfc8:	f841 3b04 	str.w	r3, [r1], #4
 800bfcc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bfd0:	d2e6      	bcs.n	800bfa0 <quorem+0xa4>
 800bfd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bfd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bfda:	b922      	cbnz	r2, 800bfe6 <quorem+0xea>
 800bfdc:	3b04      	subs	r3, #4
 800bfde:	429d      	cmp	r5, r3
 800bfe0:	461a      	mov	r2, r3
 800bfe2:	d30b      	bcc.n	800bffc <quorem+0x100>
 800bfe4:	613c      	str	r4, [r7, #16]
 800bfe6:	3601      	adds	r6, #1
 800bfe8:	4630      	mov	r0, r6
 800bfea:	b003      	add	sp, #12
 800bfec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bff0:	6812      	ldr	r2, [r2, #0]
 800bff2:	3b04      	subs	r3, #4
 800bff4:	2a00      	cmp	r2, #0
 800bff6:	d1cb      	bne.n	800bf90 <quorem+0x94>
 800bff8:	3c01      	subs	r4, #1
 800bffa:	e7c6      	b.n	800bf8a <quorem+0x8e>
 800bffc:	6812      	ldr	r2, [r2, #0]
 800bffe:	3b04      	subs	r3, #4
 800c000:	2a00      	cmp	r2, #0
 800c002:	d1ef      	bne.n	800bfe4 <quorem+0xe8>
 800c004:	3c01      	subs	r4, #1
 800c006:	e7ea      	b.n	800bfde <quorem+0xe2>
 800c008:	2000      	movs	r0, #0
 800c00a:	e7ee      	b.n	800bfea <quorem+0xee>
 800c00c:	0000      	movs	r0, r0
	...

0800c010 <_dtoa_r>:
 800c010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c014:	69c7      	ldr	r7, [r0, #28]
 800c016:	b099      	sub	sp, #100	@ 0x64
 800c018:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c01c:	ec55 4b10 	vmov	r4, r5, d0
 800c020:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c022:	9109      	str	r1, [sp, #36]	@ 0x24
 800c024:	4683      	mov	fp, r0
 800c026:	920e      	str	r2, [sp, #56]	@ 0x38
 800c028:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c02a:	b97f      	cbnz	r7, 800c04c <_dtoa_r+0x3c>
 800c02c:	2010      	movs	r0, #16
 800c02e:	f001 f937 	bl	800d2a0 <malloc>
 800c032:	4602      	mov	r2, r0
 800c034:	f8cb 001c 	str.w	r0, [fp, #28]
 800c038:	b920      	cbnz	r0, 800c044 <_dtoa_r+0x34>
 800c03a:	4ba7      	ldr	r3, [pc, #668]	@ (800c2d8 <_dtoa_r+0x2c8>)
 800c03c:	21ef      	movs	r1, #239	@ 0xef
 800c03e:	48a7      	ldr	r0, [pc, #668]	@ (800c2dc <_dtoa_r+0x2cc>)
 800c040:	f002 feb2 	bl	800eda8 <__assert_func>
 800c044:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c048:	6007      	str	r7, [r0, #0]
 800c04a:	60c7      	str	r7, [r0, #12]
 800c04c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c050:	6819      	ldr	r1, [r3, #0]
 800c052:	b159      	cbz	r1, 800c06c <_dtoa_r+0x5c>
 800c054:	685a      	ldr	r2, [r3, #4]
 800c056:	604a      	str	r2, [r1, #4]
 800c058:	2301      	movs	r3, #1
 800c05a:	4093      	lsls	r3, r2
 800c05c:	608b      	str	r3, [r1, #8]
 800c05e:	4658      	mov	r0, fp
 800c060:	f001 fa26 	bl	800d4b0 <_Bfree>
 800c064:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c068:	2200      	movs	r2, #0
 800c06a:	601a      	str	r2, [r3, #0]
 800c06c:	1e2b      	subs	r3, r5, #0
 800c06e:	bfb9      	ittee	lt
 800c070:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c074:	9303      	strlt	r3, [sp, #12]
 800c076:	2300      	movge	r3, #0
 800c078:	6033      	strge	r3, [r6, #0]
 800c07a:	9f03      	ldr	r7, [sp, #12]
 800c07c:	4b98      	ldr	r3, [pc, #608]	@ (800c2e0 <_dtoa_r+0x2d0>)
 800c07e:	bfbc      	itt	lt
 800c080:	2201      	movlt	r2, #1
 800c082:	6032      	strlt	r2, [r6, #0]
 800c084:	43bb      	bics	r3, r7
 800c086:	d112      	bne.n	800c0ae <_dtoa_r+0x9e>
 800c088:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c08a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c08e:	6013      	str	r3, [r2, #0]
 800c090:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c094:	4323      	orrs	r3, r4
 800c096:	f000 854d 	beq.w	800cb34 <_dtoa_r+0xb24>
 800c09a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c09c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c2f4 <_dtoa_r+0x2e4>
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	f000 854f 	beq.w	800cb44 <_dtoa_r+0xb34>
 800c0a6:	f10a 0303 	add.w	r3, sl, #3
 800c0aa:	f000 bd49 	b.w	800cb40 <_dtoa_r+0xb30>
 800c0ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	ec51 0b17 	vmov	r0, r1, d7
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c0be:	f7f4 fd0b 	bl	8000ad8 <__aeabi_dcmpeq>
 800c0c2:	4680      	mov	r8, r0
 800c0c4:	b158      	cbz	r0, 800c0de <_dtoa_r+0xce>
 800c0c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	6013      	str	r3, [r2, #0]
 800c0cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c0ce:	b113      	cbz	r3, 800c0d6 <_dtoa_r+0xc6>
 800c0d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c0d2:	4b84      	ldr	r3, [pc, #528]	@ (800c2e4 <_dtoa_r+0x2d4>)
 800c0d4:	6013      	str	r3, [r2, #0]
 800c0d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c2f8 <_dtoa_r+0x2e8>
 800c0da:	f000 bd33 	b.w	800cb44 <_dtoa_r+0xb34>
 800c0de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c0e2:	aa16      	add	r2, sp, #88	@ 0x58
 800c0e4:	a917      	add	r1, sp, #92	@ 0x5c
 800c0e6:	4658      	mov	r0, fp
 800c0e8:	f001 fd86 	bl	800dbf8 <__d2b>
 800c0ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c0f0:	4681      	mov	r9, r0
 800c0f2:	2e00      	cmp	r6, #0
 800c0f4:	d077      	beq.n	800c1e6 <_dtoa_r+0x1d6>
 800c0f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c0f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c0fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c100:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c104:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c108:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c10c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c110:	4619      	mov	r1, r3
 800c112:	2200      	movs	r2, #0
 800c114:	4b74      	ldr	r3, [pc, #464]	@ (800c2e8 <_dtoa_r+0x2d8>)
 800c116:	f7f4 f8bf 	bl	8000298 <__aeabi_dsub>
 800c11a:	a369      	add	r3, pc, #420	@ (adr r3, 800c2c0 <_dtoa_r+0x2b0>)
 800c11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c120:	f7f4 fa72 	bl	8000608 <__aeabi_dmul>
 800c124:	a368      	add	r3, pc, #416	@ (adr r3, 800c2c8 <_dtoa_r+0x2b8>)
 800c126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12a:	f7f4 f8b7 	bl	800029c <__adddf3>
 800c12e:	4604      	mov	r4, r0
 800c130:	4630      	mov	r0, r6
 800c132:	460d      	mov	r5, r1
 800c134:	f7f4 f9fe 	bl	8000534 <__aeabi_i2d>
 800c138:	a365      	add	r3, pc, #404	@ (adr r3, 800c2d0 <_dtoa_r+0x2c0>)
 800c13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13e:	f7f4 fa63 	bl	8000608 <__aeabi_dmul>
 800c142:	4602      	mov	r2, r0
 800c144:	460b      	mov	r3, r1
 800c146:	4620      	mov	r0, r4
 800c148:	4629      	mov	r1, r5
 800c14a:	f7f4 f8a7 	bl	800029c <__adddf3>
 800c14e:	4604      	mov	r4, r0
 800c150:	460d      	mov	r5, r1
 800c152:	f7f4 fd09 	bl	8000b68 <__aeabi_d2iz>
 800c156:	2200      	movs	r2, #0
 800c158:	4607      	mov	r7, r0
 800c15a:	2300      	movs	r3, #0
 800c15c:	4620      	mov	r0, r4
 800c15e:	4629      	mov	r1, r5
 800c160:	f7f4 fcc4 	bl	8000aec <__aeabi_dcmplt>
 800c164:	b140      	cbz	r0, 800c178 <_dtoa_r+0x168>
 800c166:	4638      	mov	r0, r7
 800c168:	f7f4 f9e4 	bl	8000534 <__aeabi_i2d>
 800c16c:	4622      	mov	r2, r4
 800c16e:	462b      	mov	r3, r5
 800c170:	f7f4 fcb2 	bl	8000ad8 <__aeabi_dcmpeq>
 800c174:	b900      	cbnz	r0, 800c178 <_dtoa_r+0x168>
 800c176:	3f01      	subs	r7, #1
 800c178:	2f16      	cmp	r7, #22
 800c17a:	d851      	bhi.n	800c220 <_dtoa_r+0x210>
 800c17c:	4b5b      	ldr	r3, [pc, #364]	@ (800c2ec <_dtoa_r+0x2dc>)
 800c17e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c186:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c18a:	f7f4 fcaf 	bl	8000aec <__aeabi_dcmplt>
 800c18e:	2800      	cmp	r0, #0
 800c190:	d048      	beq.n	800c224 <_dtoa_r+0x214>
 800c192:	3f01      	subs	r7, #1
 800c194:	2300      	movs	r3, #0
 800c196:	9312      	str	r3, [sp, #72]	@ 0x48
 800c198:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c19a:	1b9b      	subs	r3, r3, r6
 800c19c:	1e5a      	subs	r2, r3, #1
 800c19e:	bf44      	itt	mi
 800c1a0:	f1c3 0801 	rsbmi	r8, r3, #1
 800c1a4:	2300      	movmi	r3, #0
 800c1a6:	9208      	str	r2, [sp, #32]
 800c1a8:	bf54      	ite	pl
 800c1aa:	f04f 0800 	movpl.w	r8, #0
 800c1ae:	9308      	strmi	r3, [sp, #32]
 800c1b0:	2f00      	cmp	r7, #0
 800c1b2:	db39      	blt.n	800c228 <_dtoa_r+0x218>
 800c1b4:	9b08      	ldr	r3, [sp, #32]
 800c1b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c1b8:	443b      	add	r3, r7
 800c1ba:	9308      	str	r3, [sp, #32]
 800c1bc:	2300      	movs	r3, #0
 800c1be:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1c2:	2b09      	cmp	r3, #9
 800c1c4:	d864      	bhi.n	800c290 <_dtoa_r+0x280>
 800c1c6:	2b05      	cmp	r3, #5
 800c1c8:	bfc4      	itt	gt
 800c1ca:	3b04      	subgt	r3, #4
 800c1cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c1ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1d0:	f1a3 0302 	sub.w	r3, r3, #2
 800c1d4:	bfcc      	ite	gt
 800c1d6:	2400      	movgt	r4, #0
 800c1d8:	2401      	movle	r4, #1
 800c1da:	2b03      	cmp	r3, #3
 800c1dc:	d863      	bhi.n	800c2a6 <_dtoa_r+0x296>
 800c1de:	e8df f003 	tbb	[pc, r3]
 800c1e2:	372a      	.short	0x372a
 800c1e4:	5535      	.short	0x5535
 800c1e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c1ea:	441e      	add	r6, r3
 800c1ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c1f0:	2b20      	cmp	r3, #32
 800c1f2:	bfc1      	itttt	gt
 800c1f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c1f8:	409f      	lslgt	r7, r3
 800c1fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c1fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c202:	bfd6      	itet	le
 800c204:	f1c3 0320 	rsble	r3, r3, #32
 800c208:	ea47 0003 	orrgt.w	r0, r7, r3
 800c20c:	fa04 f003 	lslle.w	r0, r4, r3
 800c210:	f7f4 f980 	bl	8000514 <__aeabi_ui2d>
 800c214:	2201      	movs	r2, #1
 800c216:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c21a:	3e01      	subs	r6, #1
 800c21c:	9214      	str	r2, [sp, #80]	@ 0x50
 800c21e:	e777      	b.n	800c110 <_dtoa_r+0x100>
 800c220:	2301      	movs	r3, #1
 800c222:	e7b8      	b.n	800c196 <_dtoa_r+0x186>
 800c224:	9012      	str	r0, [sp, #72]	@ 0x48
 800c226:	e7b7      	b.n	800c198 <_dtoa_r+0x188>
 800c228:	427b      	negs	r3, r7
 800c22a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c22c:	2300      	movs	r3, #0
 800c22e:	eba8 0807 	sub.w	r8, r8, r7
 800c232:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c234:	e7c4      	b.n	800c1c0 <_dtoa_r+0x1b0>
 800c236:	2300      	movs	r3, #0
 800c238:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c23a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	dc35      	bgt.n	800c2ac <_dtoa_r+0x29c>
 800c240:	2301      	movs	r3, #1
 800c242:	9300      	str	r3, [sp, #0]
 800c244:	9307      	str	r3, [sp, #28]
 800c246:	461a      	mov	r2, r3
 800c248:	920e      	str	r2, [sp, #56]	@ 0x38
 800c24a:	e00b      	b.n	800c264 <_dtoa_r+0x254>
 800c24c:	2301      	movs	r3, #1
 800c24e:	e7f3      	b.n	800c238 <_dtoa_r+0x228>
 800c250:	2300      	movs	r3, #0
 800c252:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c254:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c256:	18fb      	adds	r3, r7, r3
 800c258:	9300      	str	r3, [sp, #0]
 800c25a:	3301      	adds	r3, #1
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	9307      	str	r3, [sp, #28]
 800c260:	bfb8      	it	lt
 800c262:	2301      	movlt	r3, #1
 800c264:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c268:	2100      	movs	r1, #0
 800c26a:	2204      	movs	r2, #4
 800c26c:	f102 0514 	add.w	r5, r2, #20
 800c270:	429d      	cmp	r5, r3
 800c272:	d91f      	bls.n	800c2b4 <_dtoa_r+0x2a4>
 800c274:	6041      	str	r1, [r0, #4]
 800c276:	4658      	mov	r0, fp
 800c278:	f001 f8da 	bl	800d430 <_Balloc>
 800c27c:	4682      	mov	sl, r0
 800c27e:	2800      	cmp	r0, #0
 800c280:	d13c      	bne.n	800c2fc <_dtoa_r+0x2ec>
 800c282:	4b1b      	ldr	r3, [pc, #108]	@ (800c2f0 <_dtoa_r+0x2e0>)
 800c284:	4602      	mov	r2, r0
 800c286:	f240 11af 	movw	r1, #431	@ 0x1af
 800c28a:	e6d8      	b.n	800c03e <_dtoa_r+0x2e>
 800c28c:	2301      	movs	r3, #1
 800c28e:	e7e0      	b.n	800c252 <_dtoa_r+0x242>
 800c290:	2401      	movs	r4, #1
 800c292:	2300      	movs	r3, #0
 800c294:	9309      	str	r3, [sp, #36]	@ 0x24
 800c296:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c298:	f04f 33ff 	mov.w	r3, #4294967295
 800c29c:	9300      	str	r3, [sp, #0]
 800c29e:	9307      	str	r3, [sp, #28]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	2312      	movs	r3, #18
 800c2a4:	e7d0      	b.n	800c248 <_dtoa_r+0x238>
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2aa:	e7f5      	b.n	800c298 <_dtoa_r+0x288>
 800c2ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2ae:	9300      	str	r3, [sp, #0]
 800c2b0:	9307      	str	r3, [sp, #28]
 800c2b2:	e7d7      	b.n	800c264 <_dtoa_r+0x254>
 800c2b4:	3101      	adds	r1, #1
 800c2b6:	0052      	lsls	r2, r2, #1
 800c2b8:	e7d8      	b.n	800c26c <_dtoa_r+0x25c>
 800c2ba:	bf00      	nop
 800c2bc:	f3af 8000 	nop.w
 800c2c0:	636f4361 	.word	0x636f4361
 800c2c4:	3fd287a7 	.word	0x3fd287a7
 800c2c8:	8b60c8b3 	.word	0x8b60c8b3
 800c2cc:	3fc68a28 	.word	0x3fc68a28
 800c2d0:	509f79fb 	.word	0x509f79fb
 800c2d4:	3fd34413 	.word	0x3fd34413
 800c2d8:	0800f3fc 	.word	0x0800f3fc
 800c2dc:	0800f413 	.word	0x0800f413
 800c2e0:	7ff00000 	.word	0x7ff00000
 800c2e4:	0800f761 	.word	0x0800f761
 800c2e8:	3ff80000 	.word	0x3ff80000
 800c2ec:	0800f570 	.word	0x0800f570
 800c2f0:	0800f46b 	.word	0x0800f46b
 800c2f4:	0800f3f8 	.word	0x0800f3f8
 800c2f8:	0800f760 	.word	0x0800f760
 800c2fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c300:	6018      	str	r0, [r3, #0]
 800c302:	9b07      	ldr	r3, [sp, #28]
 800c304:	2b0e      	cmp	r3, #14
 800c306:	f200 80a4 	bhi.w	800c452 <_dtoa_r+0x442>
 800c30a:	2c00      	cmp	r4, #0
 800c30c:	f000 80a1 	beq.w	800c452 <_dtoa_r+0x442>
 800c310:	2f00      	cmp	r7, #0
 800c312:	dd33      	ble.n	800c37c <_dtoa_r+0x36c>
 800c314:	4bad      	ldr	r3, [pc, #692]	@ (800c5cc <_dtoa_r+0x5bc>)
 800c316:	f007 020f 	and.w	r2, r7, #15
 800c31a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c31e:	ed93 7b00 	vldr	d7, [r3]
 800c322:	05f8      	lsls	r0, r7, #23
 800c324:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c328:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c32c:	d516      	bpl.n	800c35c <_dtoa_r+0x34c>
 800c32e:	4ba8      	ldr	r3, [pc, #672]	@ (800c5d0 <_dtoa_r+0x5c0>)
 800c330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c334:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c338:	f7f4 fa90 	bl	800085c <__aeabi_ddiv>
 800c33c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c340:	f004 040f 	and.w	r4, r4, #15
 800c344:	2603      	movs	r6, #3
 800c346:	4da2      	ldr	r5, [pc, #648]	@ (800c5d0 <_dtoa_r+0x5c0>)
 800c348:	b954      	cbnz	r4, 800c360 <_dtoa_r+0x350>
 800c34a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c34e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c352:	f7f4 fa83 	bl	800085c <__aeabi_ddiv>
 800c356:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c35a:	e028      	b.n	800c3ae <_dtoa_r+0x39e>
 800c35c:	2602      	movs	r6, #2
 800c35e:	e7f2      	b.n	800c346 <_dtoa_r+0x336>
 800c360:	07e1      	lsls	r1, r4, #31
 800c362:	d508      	bpl.n	800c376 <_dtoa_r+0x366>
 800c364:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c368:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c36c:	f7f4 f94c 	bl	8000608 <__aeabi_dmul>
 800c370:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c374:	3601      	adds	r6, #1
 800c376:	1064      	asrs	r4, r4, #1
 800c378:	3508      	adds	r5, #8
 800c37a:	e7e5      	b.n	800c348 <_dtoa_r+0x338>
 800c37c:	f000 80d2 	beq.w	800c524 <_dtoa_r+0x514>
 800c380:	427c      	negs	r4, r7
 800c382:	4b92      	ldr	r3, [pc, #584]	@ (800c5cc <_dtoa_r+0x5bc>)
 800c384:	4d92      	ldr	r5, [pc, #584]	@ (800c5d0 <_dtoa_r+0x5c0>)
 800c386:	f004 020f 	and.w	r2, r4, #15
 800c38a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c392:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c396:	f7f4 f937 	bl	8000608 <__aeabi_dmul>
 800c39a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c39e:	1124      	asrs	r4, r4, #4
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	2602      	movs	r6, #2
 800c3a4:	2c00      	cmp	r4, #0
 800c3a6:	f040 80b2 	bne.w	800c50e <_dtoa_r+0x4fe>
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d1d3      	bne.n	800c356 <_dtoa_r+0x346>
 800c3ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c3b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	f000 80b7 	beq.w	800c528 <_dtoa_r+0x518>
 800c3ba:	4b86      	ldr	r3, [pc, #536]	@ (800c5d4 <_dtoa_r+0x5c4>)
 800c3bc:	2200      	movs	r2, #0
 800c3be:	4620      	mov	r0, r4
 800c3c0:	4629      	mov	r1, r5
 800c3c2:	f7f4 fb93 	bl	8000aec <__aeabi_dcmplt>
 800c3c6:	2800      	cmp	r0, #0
 800c3c8:	f000 80ae 	beq.w	800c528 <_dtoa_r+0x518>
 800c3cc:	9b07      	ldr	r3, [sp, #28]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	f000 80aa 	beq.w	800c528 <_dtoa_r+0x518>
 800c3d4:	9b00      	ldr	r3, [sp, #0]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	dd37      	ble.n	800c44a <_dtoa_r+0x43a>
 800c3da:	1e7b      	subs	r3, r7, #1
 800c3dc:	9304      	str	r3, [sp, #16]
 800c3de:	4620      	mov	r0, r4
 800c3e0:	4b7d      	ldr	r3, [pc, #500]	@ (800c5d8 <_dtoa_r+0x5c8>)
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	4629      	mov	r1, r5
 800c3e6:	f7f4 f90f 	bl	8000608 <__aeabi_dmul>
 800c3ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3ee:	9c00      	ldr	r4, [sp, #0]
 800c3f0:	3601      	adds	r6, #1
 800c3f2:	4630      	mov	r0, r6
 800c3f4:	f7f4 f89e 	bl	8000534 <__aeabi_i2d>
 800c3f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3fc:	f7f4 f904 	bl	8000608 <__aeabi_dmul>
 800c400:	4b76      	ldr	r3, [pc, #472]	@ (800c5dc <_dtoa_r+0x5cc>)
 800c402:	2200      	movs	r2, #0
 800c404:	f7f3 ff4a 	bl	800029c <__adddf3>
 800c408:	4605      	mov	r5, r0
 800c40a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c40e:	2c00      	cmp	r4, #0
 800c410:	f040 808d 	bne.w	800c52e <_dtoa_r+0x51e>
 800c414:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c418:	4b71      	ldr	r3, [pc, #452]	@ (800c5e0 <_dtoa_r+0x5d0>)
 800c41a:	2200      	movs	r2, #0
 800c41c:	f7f3 ff3c 	bl	8000298 <__aeabi_dsub>
 800c420:	4602      	mov	r2, r0
 800c422:	460b      	mov	r3, r1
 800c424:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c428:	462a      	mov	r2, r5
 800c42a:	4633      	mov	r3, r6
 800c42c:	f7f4 fb7c 	bl	8000b28 <__aeabi_dcmpgt>
 800c430:	2800      	cmp	r0, #0
 800c432:	f040 828b 	bne.w	800c94c <_dtoa_r+0x93c>
 800c436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c43a:	462a      	mov	r2, r5
 800c43c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c440:	f7f4 fb54 	bl	8000aec <__aeabi_dcmplt>
 800c444:	2800      	cmp	r0, #0
 800c446:	f040 8128 	bne.w	800c69a <_dtoa_r+0x68a>
 800c44a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c44e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c452:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c454:	2b00      	cmp	r3, #0
 800c456:	f2c0 815a 	blt.w	800c70e <_dtoa_r+0x6fe>
 800c45a:	2f0e      	cmp	r7, #14
 800c45c:	f300 8157 	bgt.w	800c70e <_dtoa_r+0x6fe>
 800c460:	4b5a      	ldr	r3, [pc, #360]	@ (800c5cc <_dtoa_r+0x5bc>)
 800c462:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c466:	ed93 7b00 	vldr	d7, [r3]
 800c46a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	ed8d 7b00 	vstr	d7, [sp]
 800c472:	da03      	bge.n	800c47c <_dtoa_r+0x46c>
 800c474:	9b07      	ldr	r3, [sp, #28]
 800c476:	2b00      	cmp	r3, #0
 800c478:	f340 8101 	ble.w	800c67e <_dtoa_r+0x66e>
 800c47c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c480:	4656      	mov	r6, sl
 800c482:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c486:	4620      	mov	r0, r4
 800c488:	4629      	mov	r1, r5
 800c48a:	f7f4 f9e7 	bl	800085c <__aeabi_ddiv>
 800c48e:	f7f4 fb6b 	bl	8000b68 <__aeabi_d2iz>
 800c492:	4680      	mov	r8, r0
 800c494:	f7f4 f84e 	bl	8000534 <__aeabi_i2d>
 800c498:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c49c:	f7f4 f8b4 	bl	8000608 <__aeabi_dmul>
 800c4a0:	4602      	mov	r2, r0
 800c4a2:	460b      	mov	r3, r1
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	4629      	mov	r1, r5
 800c4a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c4ac:	f7f3 fef4 	bl	8000298 <__aeabi_dsub>
 800c4b0:	f806 4b01 	strb.w	r4, [r6], #1
 800c4b4:	9d07      	ldr	r5, [sp, #28]
 800c4b6:	eba6 040a 	sub.w	r4, r6, sl
 800c4ba:	42a5      	cmp	r5, r4
 800c4bc:	4602      	mov	r2, r0
 800c4be:	460b      	mov	r3, r1
 800c4c0:	f040 8117 	bne.w	800c6f2 <_dtoa_r+0x6e2>
 800c4c4:	f7f3 feea 	bl	800029c <__adddf3>
 800c4c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4cc:	4604      	mov	r4, r0
 800c4ce:	460d      	mov	r5, r1
 800c4d0:	f7f4 fb2a 	bl	8000b28 <__aeabi_dcmpgt>
 800c4d4:	2800      	cmp	r0, #0
 800c4d6:	f040 80f9 	bne.w	800c6cc <_dtoa_r+0x6bc>
 800c4da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4de:	4620      	mov	r0, r4
 800c4e0:	4629      	mov	r1, r5
 800c4e2:	f7f4 faf9 	bl	8000ad8 <__aeabi_dcmpeq>
 800c4e6:	b118      	cbz	r0, 800c4f0 <_dtoa_r+0x4e0>
 800c4e8:	f018 0f01 	tst.w	r8, #1
 800c4ec:	f040 80ee 	bne.w	800c6cc <_dtoa_r+0x6bc>
 800c4f0:	4649      	mov	r1, r9
 800c4f2:	4658      	mov	r0, fp
 800c4f4:	f000 ffdc 	bl	800d4b0 <_Bfree>
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	7033      	strb	r3, [r6, #0]
 800c4fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c4fe:	3701      	adds	r7, #1
 800c500:	601f      	str	r7, [r3, #0]
 800c502:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c504:	2b00      	cmp	r3, #0
 800c506:	f000 831d 	beq.w	800cb44 <_dtoa_r+0xb34>
 800c50a:	601e      	str	r6, [r3, #0]
 800c50c:	e31a      	b.n	800cb44 <_dtoa_r+0xb34>
 800c50e:	07e2      	lsls	r2, r4, #31
 800c510:	d505      	bpl.n	800c51e <_dtoa_r+0x50e>
 800c512:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c516:	f7f4 f877 	bl	8000608 <__aeabi_dmul>
 800c51a:	3601      	adds	r6, #1
 800c51c:	2301      	movs	r3, #1
 800c51e:	1064      	asrs	r4, r4, #1
 800c520:	3508      	adds	r5, #8
 800c522:	e73f      	b.n	800c3a4 <_dtoa_r+0x394>
 800c524:	2602      	movs	r6, #2
 800c526:	e742      	b.n	800c3ae <_dtoa_r+0x39e>
 800c528:	9c07      	ldr	r4, [sp, #28]
 800c52a:	9704      	str	r7, [sp, #16]
 800c52c:	e761      	b.n	800c3f2 <_dtoa_r+0x3e2>
 800c52e:	4b27      	ldr	r3, [pc, #156]	@ (800c5cc <_dtoa_r+0x5bc>)
 800c530:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c532:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c536:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c53a:	4454      	add	r4, sl
 800c53c:	2900      	cmp	r1, #0
 800c53e:	d053      	beq.n	800c5e8 <_dtoa_r+0x5d8>
 800c540:	4928      	ldr	r1, [pc, #160]	@ (800c5e4 <_dtoa_r+0x5d4>)
 800c542:	2000      	movs	r0, #0
 800c544:	f7f4 f98a 	bl	800085c <__aeabi_ddiv>
 800c548:	4633      	mov	r3, r6
 800c54a:	462a      	mov	r2, r5
 800c54c:	f7f3 fea4 	bl	8000298 <__aeabi_dsub>
 800c550:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c554:	4656      	mov	r6, sl
 800c556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c55a:	f7f4 fb05 	bl	8000b68 <__aeabi_d2iz>
 800c55e:	4605      	mov	r5, r0
 800c560:	f7f3 ffe8 	bl	8000534 <__aeabi_i2d>
 800c564:	4602      	mov	r2, r0
 800c566:	460b      	mov	r3, r1
 800c568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c56c:	f7f3 fe94 	bl	8000298 <__aeabi_dsub>
 800c570:	3530      	adds	r5, #48	@ 0x30
 800c572:	4602      	mov	r2, r0
 800c574:	460b      	mov	r3, r1
 800c576:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c57a:	f806 5b01 	strb.w	r5, [r6], #1
 800c57e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c582:	f7f4 fab3 	bl	8000aec <__aeabi_dcmplt>
 800c586:	2800      	cmp	r0, #0
 800c588:	d171      	bne.n	800c66e <_dtoa_r+0x65e>
 800c58a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c58e:	4911      	ldr	r1, [pc, #68]	@ (800c5d4 <_dtoa_r+0x5c4>)
 800c590:	2000      	movs	r0, #0
 800c592:	f7f3 fe81 	bl	8000298 <__aeabi_dsub>
 800c596:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c59a:	f7f4 faa7 	bl	8000aec <__aeabi_dcmplt>
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	f040 8095 	bne.w	800c6ce <_dtoa_r+0x6be>
 800c5a4:	42a6      	cmp	r6, r4
 800c5a6:	f43f af50 	beq.w	800c44a <_dtoa_r+0x43a>
 800c5aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c5ae:	4b0a      	ldr	r3, [pc, #40]	@ (800c5d8 <_dtoa_r+0x5c8>)
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	f7f4 f829 	bl	8000608 <__aeabi_dmul>
 800c5b6:	4b08      	ldr	r3, [pc, #32]	@ (800c5d8 <_dtoa_r+0x5c8>)
 800c5b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c5bc:	2200      	movs	r2, #0
 800c5be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5c2:	f7f4 f821 	bl	8000608 <__aeabi_dmul>
 800c5c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5ca:	e7c4      	b.n	800c556 <_dtoa_r+0x546>
 800c5cc:	0800f570 	.word	0x0800f570
 800c5d0:	0800f548 	.word	0x0800f548
 800c5d4:	3ff00000 	.word	0x3ff00000
 800c5d8:	40240000 	.word	0x40240000
 800c5dc:	401c0000 	.word	0x401c0000
 800c5e0:	40140000 	.word	0x40140000
 800c5e4:	3fe00000 	.word	0x3fe00000
 800c5e8:	4631      	mov	r1, r6
 800c5ea:	4628      	mov	r0, r5
 800c5ec:	f7f4 f80c 	bl	8000608 <__aeabi_dmul>
 800c5f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c5f4:	9415      	str	r4, [sp, #84]	@ 0x54
 800c5f6:	4656      	mov	r6, sl
 800c5f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5fc:	f7f4 fab4 	bl	8000b68 <__aeabi_d2iz>
 800c600:	4605      	mov	r5, r0
 800c602:	f7f3 ff97 	bl	8000534 <__aeabi_i2d>
 800c606:	4602      	mov	r2, r0
 800c608:	460b      	mov	r3, r1
 800c60a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c60e:	f7f3 fe43 	bl	8000298 <__aeabi_dsub>
 800c612:	3530      	adds	r5, #48	@ 0x30
 800c614:	f806 5b01 	strb.w	r5, [r6], #1
 800c618:	4602      	mov	r2, r0
 800c61a:	460b      	mov	r3, r1
 800c61c:	42a6      	cmp	r6, r4
 800c61e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c622:	f04f 0200 	mov.w	r2, #0
 800c626:	d124      	bne.n	800c672 <_dtoa_r+0x662>
 800c628:	4bac      	ldr	r3, [pc, #688]	@ (800c8dc <_dtoa_r+0x8cc>)
 800c62a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c62e:	f7f3 fe35 	bl	800029c <__adddf3>
 800c632:	4602      	mov	r2, r0
 800c634:	460b      	mov	r3, r1
 800c636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c63a:	f7f4 fa75 	bl	8000b28 <__aeabi_dcmpgt>
 800c63e:	2800      	cmp	r0, #0
 800c640:	d145      	bne.n	800c6ce <_dtoa_r+0x6be>
 800c642:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c646:	49a5      	ldr	r1, [pc, #660]	@ (800c8dc <_dtoa_r+0x8cc>)
 800c648:	2000      	movs	r0, #0
 800c64a:	f7f3 fe25 	bl	8000298 <__aeabi_dsub>
 800c64e:	4602      	mov	r2, r0
 800c650:	460b      	mov	r3, r1
 800c652:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c656:	f7f4 fa49 	bl	8000aec <__aeabi_dcmplt>
 800c65a:	2800      	cmp	r0, #0
 800c65c:	f43f aef5 	beq.w	800c44a <_dtoa_r+0x43a>
 800c660:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c662:	1e73      	subs	r3, r6, #1
 800c664:	9315      	str	r3, [sp, #84]	@ 0x54
 800c666:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c66a:	2b30      	cmp	r3, #48	@ 0x30
 800c66c:	d0f8      	beq.n	800c660 <_dtoa_r+0x650>
 800c66e:	9f04      	ldr	r7, [sp, #16]
 800c670:	e73e      	b.n	800c4f0 <_dtoa_r+0x4e0>
 800c672:	4b9b      	ldr	r3, [pc, #620]	@ (800c8e0 <_dtoa_r+0x8d0>)
 800c674:	f7f3 ffc8 	bl	8000608 <__aeabi_dmul>
 800c678:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c67c:	e7bc      	b.n	800c5f8 <_dtoa_r+0x5e8>
 800c67e:	d10c      	bne.n	800c69a <_dtoa_r+0x68a>
 800c680:	4b98      	ldr	r3, [pc, #608]	@ (800c8e4 <_dtoa_r+0x8d4>)
 800c682:	2200      	movs	r2, #0
 800c684:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c688:	f7f3 ffbe 	bl	8000608 <__aeabi_dmul>
 800c68c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c690:	f7f4 fa40 	bl	8000b14 <__aeabi_dcmpge>
 800c694:	2800      	cmp	r0, #0
 800c696:	f000 8157 	beq.w	800c948 <_dtoa_r+0x938>
 800c69a:	2400      	movs	r4, #0
 800c69c:	4625      	mov	r5, r4
 800c69e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6a0:	43db      	mvns	r3, r3
 800c6a2:	9304      	str	r3, [sp, #16]
 800c6a4:	4656      	mov	r6, sl
 800c6a6:	2700      	movs	r7, #0
 800c6a8:	4621      	mov	r1, r4
 800c6aa:	4658      	mov	r0, fp
 800c6ac:	f000 ff00 	bl	800d4b0 <_Bfree>
 800c6b0:	2d00      	cmp	r5, #0
 800c6b2:	d0dc      	beq.n	800c66e <_dtoa_r+0x65e>
 800c6b4:	b12f      	cbz	r7, 800c6c2 <_dtoa_r+0x6b2>
 800c6b6:	42af      	cmp	r7, r5
 800c6b8:	d003      	beq.n	800c6c2 <_dtoa_r+0x6b2>
 800c6ba:	4639      	mov	r1, r7
 800c6bc:	4658      	mov	r0, fp
 800c6be:	f000 fef7 	bl	800d4b0 <_Bfree>
 800c6c2:	4629      	mov	r1, r5
 800c6c4:	4658      	mov	r0, fp
 800c6c6:	f000 fef3 	bl	800d4b0 <_Bfree>
 800c6ca:	e7d0      	b.n	800c66e <_dtoa_r+0x65e>
 800c6cc:	9704      	str	r7, [sp, #16]
 800c6ce:	4633      	mov	r3, r6
 800c6d0:	461e      	mov	r6, r3
 800c6d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c6d6:	2a39      	cmp	r2, #57	@ 0x39
 800c6d8:	d107      	bne.n	800c6ea <_dtoa_r+0x6da>
 800c6da:	459a      	cmp	sl, r3
 800c6dc:	d1f8      	bne.n	800c6d0 <_dtoa_r+0x6c0>
 800c6de:	9a04      	ldr	r2, [sp, #16]
 800c6e0:	3201      	adds	r2, #1
 800c6e2:	9204      	str	r2, [sp, #16]
 800c6e4:	2230      	movs	r2, #48	@ 0x30
 800c6e6:	f88a 2000 	strb.w	r2, [sl]
 800c6ea:	781a      	ldrb	r2, [r3, #0]
 800c6ec:	3201      	adds	r2, #1
 800c6ee:	701a      	strb	r2, [r3, #0]
 800c6f0:	e7bd      	b.n	800c66e <_dtoa_r+0x65e>
 800c6f2:	4b7b      	ldr	r3, [pc, #492]	@ (800c8e0 <_dtoa_r+0x8d0>)
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	f7f3 ff87 	bl	8000608 <__aeabi_dmul>
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	4604      	mov	r4, r0
 800c700:	460d      	mov	r5, r1
 800c702:	f7f4 f9e9 	bl	8000ad8 <__aeabi_dcmpeq>
 800c706:	2800      	cmp	r0, #0
 800c708:	f43f aebb 	beq.w	800c482 <_dtoa_r+0x472>
 800c70c:	e6f0      	b.n	800c4f0 <_dtoa_r+0x4e0>
 800c70e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c710:	2a00      	cmp	r2, #0
 800c712:	f000 80db 	beq.w	800c8cc <_dtoa_r+0x8bc>
 800c716:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c718:	2a01      	cmp	r2, #1
 800c71a:	f300 80bf 	bgt.w	800c89c <_dtoa_r+0x88c>
 800c71e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c720:	2a00      	cmp	r2, #0
 800c722:	f000 80b7 	beq.w	800c894 <_dtoa_r+0x884>
 800c726:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c72a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c72c:	4646      	mov	r6, r8
 800c72e:	9a08      	ldr	r2, [sp, #32]
 800c730:	2101      	movs	r1, #1
 800c732:	441a      	add	r2, r3
 800c734:	4658      	mov	r0, fp
 800c736:	4498      	add	r8, r3
 800c738:	9208      	str	r2, [sp, #32]
 800c73a:	f000 ffb7 	bl	800d6ac <__i2b>
 800c73e:	4605      	mov	r5, r0
 800c740:	b15e      	cbz	r6, 800c75a <_dtoa_r+0x74a>
 800c742:	9b08      	ldr	r3, [sp, #32]
 800c744:	2b00      	cmp	r3, #0
 800c746:	dd08      	ble.n	800c75a <_dtoa_r+0x74a>
 800c748:	42b3      	cmp	r3, r6
 800c74a:	9a08      	ldr	r2, [sp, #32]
 800c74c:	bfa8      	it	ge
 800c74e:	4633      	movge	r3, r6
 800c750:	eba8 0803 	sub.w	r8, r8, r3
 800c754:	1af6      	subs	r6, r6, r3
 800c756:	1ad3      	subs	r3, r2, r3
 800c758:	9308      	str	r3, [sp, #32]
 800c75a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c75c:	b1f3      	cbz	r3, 800c79c <_dtoa_r+0x78c>
 800c75e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c760:	2b00      	cmp	r3, #0
 800c762:	f000 80b7 	beq.w	800c8d4 <_dtoa_r+0x8c4>
 800c766:	b18c      	cbz	r4, 800c78c <_dtoa_r+0x77c>
 800c768:	4629      	mov	r1, r5
 800c76a:	4622      	mov	r2, r4
 800c76c:	4658      	mov	r0, fp
 800c76e:	f001 f85d 	bl	800d82c <__pow5mult>
 800c772:	464a      	mov	r2, r9
 800c774:	4601      	mov	r1, r0
 800c776:	4605      	mov	r5, r0
 800c778:	4658      	mov	r0, fp
 800c77a:	f000 ffad 	bl	800d6d8 <__multiply>
 800c77e:	4649      	mov	r1, r9
 800c780:	9004      	str	r0, [sp, #16]
 800c782:	4658      	mov	r0, fp
 800c784:	f000 fe94 	bl	800d4b0 <_Bfree>
 800c788:	9b04      	ldr	r3, [sp, #16]
 800c78a:	4699      	mov	r9, r3
 800c78c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c78e:	1b1a      	subs	r2, r3, r4
 800c790:	d004      	beq.n	800c79c <_dtoa_r+0x78c>
 800c792:	4649      	mov	r1, r9
 800c794:	4658      	mov	r0, fp
 800c796:	f001 f849 	bl	800d82c <__pow5mult>
 800c79a:	4681      	mov	r9, r0
 800c79c:	2101      	movs	r1, #1
 800c79e:	4658      	mov	r0, fp
 800c7a0:	f000 ff84 	bl	800d6ac <__i2b>
 800c7a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7a6:	4604      	mov	r4, r0
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	f000 81cf 	beq.w	800cb4c <_dtoa_r+0xb3c>
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	4601      	mov	r1, r0
 800c7b2:	4658      	mov	r0, fp
 800c7b4:	f001 f83a 	bl	800d82c <__pow5mult>
 800c7b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7ba:	2b01      	cmp	r3, #1
 800c7bc:	4604      	mov	r4, r0
 800c7be:	f300 8095 	bgt.w	800c8ec <_dtoa_r+0x8dc>
 800c7c2:	9b02      	ldr	r3, [sp, #8]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	f040 8087 	bne.w	800c8d8 <_dtoa_r+0x8c8>
 800c7ca:	9b03      	ldr	r3, [sp, #12]
 800c7cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	f040 8089 	bne.w	800c8e8 <_dtoa_r+0x8d8>
 800c7d6:	9b03      	ldr	r3, [sp, #12]
 800c7d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c7dc:	0d1b      	lsrs	r3, r3, #20
 800c7de:	051b      	lsls	r3, r3, #20
 800c7e0:	b12b      	cbz	r3, 800c7ee <_dtoa_r+0x7de>
 800c7e2:	9b08      	ldr	r3, [sp, #32]
 800c7e4:	3301      	adds	r3, #1
 800c7e6:	9308      	str	r3, [sp, #32]
 800c7e8:	f108 0801 	add.w	r8, r8, #1
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	f000 81b0 	beq.w	800cb58 <_dtoa_r+0xb48>
 800c7f8:	6923      	ldr	r3, [r4, #16]
 800c7fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c7fe:	6918      	ldr	r0, [r3, #16]
 800c800:	f000 ff08 	bl	800d614 <__hi0bits>
 800c804:	f1c0 0020 	rsb	r0, r0, #32
 800c808:	9b08      	ldr	r3, [sp, #32]
 800c80a:	4418      	add	r0, r3
 800c80c:	f010 001f 	ands.w	r0, r0, #31
 800c810:	d077      	beq.n	800c902 <_dtoa_r+0x8f2>
 800c812:	f1c0 0320 	rsb	r3, r0, #32
 800c816:	2b04      	cmp	r3, #4
 800c818:	dd6b      	ble.n	800c8f2 <_dtoa_r+0x8e2>
 800c81a:	9b08      	ldr	r3, [sp, #32]
 800c81c:	f1c0 001c 	rsb	r0, r0, #28
 800c820:	4403      	add	r3, r0
 800c822:	4480      	add	r8, r0
 800c824:	4406      	add	r6, r0
 800c826:	9308      	str	r3, [sp, #32]
 800c828:	f1b8 0f00 	cmp.w	r8, #0
 800c82c:	dd05      	ble.n	800c83a <_dtoa_r+0x82a>
 800c82e:	4649      	mov	r1, r9
 800c830:	4642      	mov	r2, r8
 800c832:	4658      	mov	r0, fp
 800c834:	f001 f854 	bl	800d8e0 <__lshift>
 800c838:	4681      	mov	r9, r0
 800c83a:	9b08      	ldr	r3, [sp, #32]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	dd05      	ble.n	800c84c <_dtoa_r+0x83c>
 800c840:	4621      	mov	r1, r4
 800c842:	461a      	mov	r2, r3
 800c844:	4658      	mov	r0, fp
 800c846:	f001 f84b 	bl	800d8e0 <__lshift>
 800c84a:	4604      	mov	r4, r0
 800c84c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d059      	beq.n	800c906 <_dtoa_r+0x8f6>
 800c852:	4621      	mov	r1, r4
 800c854:	4648      	mov	r0, r9
 800c856:	f001 f8af 	bl	800d9b8 <__mcmp>
 800c85a:	2800      	cmp	r0, #0
 800c85c:	da53      	bge.n	800c906 <_dtoa_r+0x8f6>
 800c85e:	1e7b      	subs	r3, r7, #1
 800c860:	9304      	str	r3, [sp, #16]
 800c862:	4649      	mov	r1, r9
 800c864:	2300      	movs	r3, #0
 800c866:	220a      	movs	r2, #10
 800c868:	4658      	mov	r0, fp
 800c86a:	f000 fe43 	bl	800d4f4 <__multadd>
 800c86e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c870:	4681      	mov	r9, r0
 800c872:	2b00      	cmp	r3, #0
 800c874:	f000 8172 	beq.w	800cb5c <_dtoa_r+0xb4c>
 800c878:	2300      	movs	r3, #0
 800c87a:	4629      	mov	r1, r5
 800c87c:	220a      	movs	r2, #10
 800c87e:	4658      	mov	r0, fp
 800c880:	f000 fe38 	bl	800d4f4 <__multadd>
 800c884:	9b00      	ldr	r3, [sp, #0]
 800c886:	2b00      	cmp	r3, #0
 800c888:	4605      	mov	r5, r0
 800c88a:	dc67      	bgt.n	800c95c <_dtoa_r+0x94c>
 800c88c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c88e:	2b02      	cmp	r3, #2
 800c890:	dc41      	bgt.n	800c916 <_dtoa_r+0x906>
 800c892:	e063      	b.n	800c95c <_dtoa_r+0x94c>
 800c894:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c896:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c89a:	e746      	b.n	800c72a <_dtoa_r+0x71a>
 800c89c:	9b07      	ldr	r3, [sp, #28]
 800c89e:	1e5c      	subs	r4, r3, #1
 800c8a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8a2:	42a3      	cmp	r3, r4
 800c8a4:	bfbf      	itttt	lt
 800c8a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c8a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c8aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c8ac:	1ae3      	sublt	r3, r4, r3
 800c8ae:	bfb4      	ite	lt
 800c8b0:	18d2      	addlt	r2, r2, r3
 800c8b2:	1b1c      	subge	r4, r3, r4
 800c8b4:	9b07      	ldr	r3, [sp, #28]
 800c8b6:	bfbc      	itt	lt
 800c8b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c8ba:	2400      	movlt	r4, #0
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	bfb5      	itete	lt
 800c8c0:	eba8 0603 	sublt.w	r6, r8, r3
 800c8c4:	9b07      	ldrge	r3, [sp, #28]
 800c8c6:	2300      	movlt	r3, #0
 800c8c8:	4646      	movge	r6, r8
 800c8ca:	e730      	b.n	800c72e <_dtoa_r+0x71e>
 800c8cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c8ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c8d0:	4646      	mov	r6, r8
 800c8d2:	e735      	b.n	800c740 <_dtoa_r+0x730>
 800c8d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c8d6:	e75c      	b.n	800c792 <_dtoa_r+0x782>
 800c8d8:	2300      	movs	r3, #0
 800c8da:	e788      	b.n	800c7ee <_dtoa_r+0x7de>
 800c8dc:	3fe00000 	.word	0x3fe00000
 800c8e0:	40240000 	.word	0x40240000
 800c8e4:	40140000 	.word	0x40140000
 800c8e8:	9b02      	ldr	r3, [sp, #8]
 800c8ea:	e780      	b.n	800c7ee <_dtoa_r+0x7de>
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800c8f0:	e782      	b.n	800c7f8 <_dtoa_r+0x7e8>
 800c8f2:	d099      	beq.n	800c828 <_dtoa_r+0x818>
 800c8f4:	9a08      	ldr	r2, [sp, #32]
 800c8f6:	331c      	adds	r3, #28
 800c8f8:	441a      	add	r2, r3
 800c8fa:	4498      	add	r8, r3
 800c8fc:	441e      	add	r6, r3
 800c8fe:	9208      	str	r2, [sp, #32]
 800c900:	e792      	b.n	800c828 <_dtoa_r+0x818>
 800c902:	4603      	mov	r3, r0
 800c904:	e7f6      	b.n	800c8f4 <_dtoa_r+0x8e4>
 800c906:	9b07      	ldr	r3, [sp, #28]
 800c908:	9704      	str	r7, [sp, #16]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	dc20      	bgt.n	800c950 <_dtoa_r+0x940>
 800c90e:	9300      	str	r3, [sp, #0]
 800c910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c912:	2b02      	cmp	r3, #2
 800c914:	dd1e      	ble.n	800c954 <_dtoa_r+0x944>
 800c916:	9b00      	ldr	r3, [sp, #0]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	f47f aec0 	bne.w	800c69e <_dtoa_r+0x68e>
 800c91e:	4621      	mov	r1, r4
 800c920:	2205      	movs	r2, #5
 800c922:	4658      	mov	r0, fp
 800c924:	f000 fde6 	bl	800d4f4 <__multadd>
 800c928:	4601      	mov	r1, r0
 800c92a:	4604      	mov	r4, r0
 800c92c:	4648      	mov	r0, r9
 800c92e:	f001 f843 	bl	800d9b8 <__mcmp>
 800c932:	2800      	cmp	r0, #0
 800c934:	f77f aeb3 	ble.w	800c69e <_dtoa_r+0x68e>
 800c938:	4656      	mov	r6, sl
 800c93a:	2331      	movs	r3, #49	@ 0x31
 800c93c:	f806 3b01 	strb.w	r3, [r6], #1
 800c940:	9b04      	ldr	r3, [sp, #16]
 800c942:	3301      	adds	r3, #1
 800c944:	9304      	str	r3, [sp, #16]
 800c946:	e6ae      	b.n	800c6a6 <_dtoa_r+0x696>
 800c948:	9c07      	ldr	r4, [sp, #28]
 800c94a:	9704      	str	r7, [sp, #16]
 800c94c:	4625      	mov	r5, r4
 800c94e:	e7f3      	b.n	800c938 <_dtoa_r+0x928>
 800c950:	9b07      	ldr	r3, [sp, #28]
 800c952:	9300      	str	r3, [sp, #0]
 800c954:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c956:	2b00      	cmp	r3, #0
 800c958:	f000 8104 	beq.w	800cb64 <_dtoa_r+0xb54>
 800c95c:	2e00      	cmp	r6, #0
 800c95e:	dd05      	ble.n	800c96c <_dtoa_r+0x95c>
 800c960:	4629      	mov	r1, r5
 800c962:	4632      	mov	r2, r6
 800c964:	4658      	mov	r0, fp
 800c966:	f000 ffbb 	bl	800d8e0 <__lshift>
 800c96a:	4605      	mov	r5, r0
 800c96c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d05a      	beq.n	800ca28 <_dtoa_r+0xa18>
 800c972:	6869      	ldr	r1, [r5, #4]
 800c974:	4658      	mov	r0, fp
 800c976:	f000 fd5b 	bl	800d430 <_Balloc>
 800c97a:	4606      	mov	r6, r0
 800c97c:	b928      	cbnz	r0, 800c98a <_dtoa_r+0x97a>
 800c97e:	4b84      	ldr	r3, [pc, #528]	@ (800cb90 <_dtoa_r+0xb80>)
 800c980:	4602      	mov	r2, r0
 800c982:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c986:	f7ff bb5a 	b.w	800c03e <_dtoa_r+0x2e>
 800c98a:	692a      	ldr	r2, [r5, #16]
 800c98c:	3202      	adds	r2, #2
 800c98e:	0092      	lsls	r2, r2, #2
 800c990:	f105 010c 	add.w	r1, r5, #12
 800c994:	300c      	adds	r0, #12
 800c996:	f7ff fa94 	bl	800bec2 <memcpy>
 800c99a:	2201      	movs	r2, #1
 800c99c:	4631      	mov	r1, r6
 800c99e:	4658      	mov	r0, fp
 800c9a0:	f000 ff9e 	bl	800d8e0 <__lshift>
 800c9a4:	f10a 0301 	add.w	r3, sl, #1
 800c9a8:	9307      	str	r3, [sp, #28]
 800c9aa:	9b00      	ldr	r3, [sp, #0]
 800c9ac:	4453      	add	r3, sl
 800c9ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c9b0:	9b02      	ldr	r3, [sp, #8]
 800c9b2:	f003 0301 	and.w	r3, r3, #1
 800c9b6:	462f      	mov	r7, r5
 800c9b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9ba:	4605      	mov	r5, r0
 800c9bc:	9b07      	ldr	r3, [sp, #28]
 800c9be:	4621      	mov	r1, r4
 800c9c0:	3b01      	subs	r3, #1
 800c9c2:	4648      	mov	r0, r9
 800c9c4:	9300      	str	r3, [sp, #0]
 800c9c6:	f7ff fa99 	bl	800befc <quorem>
 800c9ca:	4639      	mov	r1, r7
 800c9cc:	9002      	str	r0, [sp, #8]
 800c9ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c9d2:	4648      	mov	r0, r9
 800c9d4:	f000 fff0 	bl	800d9b8 <__mcmp>
 800c9d8:	462a      	mov	r2, r5
 800c9da:	9008      	str	r0, [sp, #32]
 800c9dc:	4621      	mov	r1, r4
 800c9de:	4658      	mov	r0, fp
 800c9e0:	f001 f806 	bl	800d9f0 <__mdiff>
 800c9e4:	68c2      	ldr	r2, [r0, #12]
 800c9e6:	4606      	mov	r6, r0
 800c9e8:	bb02      	cbnz	r2, 800ca2c <_dtoa_r+0xa1c>
 800c9ea:	4601      	mov	r1, r0
 800c9ec:	4648      	mov	r0, r9
 800c9ee:	f000 ffe3 	bl	800d9b8 <__mcmp>
 800c9f2:	4602      	mov	r2, r0
 800c9f4:	4631      	mov	r1, r6
 800c9f6:	4658      	mov	r0, fp
 800c9f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c9fa:	f000 fd59 	bl	800d4b0 <_Bfree>
 800c9fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca02:	9e07      	ldr	r6, [sp, #28]
 800ca04:	ea43 0102 	orr.w	r1, r3, r2
 800ca08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca0a:	4319      	orrs	r1, r3
 800ca0c:	d110      	bne.n	800ca30 <_dtoa_r+0xa20>
 800ca0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ca12:	d029      	beq.n	800ca68 <_dtoa_r+0xa58>
 800ca14:	9b08      	ldr	r3, [sp, #32]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	dd02      	ble.n	800ca20 <_dtoa_r+0xa10>
 800ca1a:	9b02      	ldr	r3, [sp, #8]
 800ca1c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ca20:	9b00      	ldr	r3, [sp, #0]
 800ca22:	f883 8000 	strb.w	r8, [r3]
 800ca26:	e63f      	b.n	800c6a8 <_dtoa_r+0x698>
 800ca28:	4628      	mov	r0, r5
 800ca2a:	e7bb      	b.n	800c9a4 <_dtoa_r+0x994>
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	e7e1      	b.n	800c9f4 <_dtoa_r+0x9e4>
 800ca30:	9b08      	ldr	r3, [sp, #32]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	db04      	blt.n	800ca40 <_dtoa_r+0xa30>
 800ca36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ca38:	430b      	orrs	r3, r1
 800ca3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ca3c:	430b      	orrs	r3, r1
 800ca3e:	d120      	bne.n	800ca82 <_dtoa_r+0xa72>
 800ca40:	2a00      	cmp	r2, #0
 800ca42:	dded      	ble.n	800ca20 <_dtoa_r+0xa10>
 800ca44:	4649      	mov	r1, r9
 800ca46:	2201      	movs	r2, #1
 800ca48:	4658      	mov	r0, fp
 800ca4a:	f000 ff49 	bl	800d8e0 <__lshift>
 800ca4e:	4621      	mov	r1, r4
 800ca50:	4681      	mov	r9, r0
 800ca52:	f000 ffb1 	bl	800d9b8 <__mcmp>
 800ca56:	2800      	cmp	r0, #0
 800ca58:	dc03      	bgt.n	800ca62 <_dtoa_r+0xa52>
 800ca5a:	d1e1      	bne.n	800ca20 <_dtoa_r+0xa10>
 800ca5c:	f018 0f01 	tst.w	r8, #1
 800ca60:	d0de      	beq.n	800ca20 <_dtoa_r+0xa10>
 800ca62:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ca66:	d1d8      	bne.n	800ca1a <_dtoa_r+0xa0a>
 800ca68:	9a00      	ldr	r2, [sp, #0]
 800ca6a:	2339      	movs	r3, #57	@ 0x39
 800ca6c:	7013      	strb	r3, [r2, #0]
 800ca6e:	4633      	mov	r3, r6
 800ca70:	461e      	mov	r6, r3
 800ca72:	3b01      	subs	r3, #1
 800ca74:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ca78:	2a39      	cmp	r2, #57	@ 0x39
 800ca7a:	d052      	beq.n	800cb22 <_dtoa_r+0xb12>
 800ca7c:	3201      	adds	r2, #1
 800ca7e:	701a      	strb	r2, [r3, #0]
 800ca80:	e612      	b.n	800c6a8 <_dtoa_r+0x698>
 800ca82:	2a00      	cmp	r2, #0
 800ca84:	dd07      	ble.n	800ca96 <_dtoa_r+0xa86>
 800ca86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ca8a:	d0ed      	beq.n	800ca68 <_dtoa_r+0xa58>
 800ca8c:	9a00      	ldr	r2, [sp, #0]
 800ca8e:	f108 0301 	add.w	r3, r8, #1
 800ca92:	7013      	strb	r3, [r2, #0]
 800ca94:	e608      	b.n	800c6a8 <_dtoa_r+0x698>
 800ca96:	9b07      	ldr	r3, [sp, #28]
 800ca98:	9a07      	ldr	r2, [sp, #28]
 800ca9a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ca9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d028      	beq.n	800caf6 <_dtoa_r+0xae6>
 800caa4:	4649      	mov	r1, r9
 800caa6:	2300      	movs	r3, #0
 800caa8:	220a      	movs	r2, #10
 800caaa:	4658      	mov	r0, fp
 800caac:	f000 fd22 	bl	800d4f4 <__multadd>
 800cab0:	42af      	cmp	r7, r5
 800cab2:	4681      	mov	r9, r0
 800cab4:	f04f 0300 	mov.w	r3, #0
 800cab8:	f04f 020a 	mov.w	r2, #10
 800cabc:	4639      	mov	r1, r7
 800cabe:	4658      	mov	r0, fp
 800cac0:	d107      	bne.n	800cad2 <_dtoa_r+0xac2>
 800cac2:	f000 fd17 	bl	800d4f4 <__multadd>
 800cac6:	4607      	mov	r7, r0
 800cac8:	4605      	mov	r5, r0
 800caca:	9b07      	ldr	r3, [sp, #28]
 800cacc:	3301      	adds	r3, #1
 800cace:	9307      	str	r3, [sp, #28]
 800cad0:	e774      	b.n	800c9bc <_dtoa_r+0x9ac>
 800cad2:	f000 fd0f 	bl	800d4f4 <__multadd>
 800cad6:	4629      	mov	r1, r5
 800cad8:	4607      	mov	r7, r0
 800cada:	2300      	movs	r3, #0
 800cadc:	220a      	movs	r2, #10
 800cade:	4658      	mov	r0, fp
 800cae0:	f000 fd08 	bl	800d4f4 <__multadd>
 800cae4:	4605      	mov	r5, r0
 800cae6:	e7f0      	b.n	800caca <_dtoa_r+0xaba>
 800cae8:	9b00      	ldr	r3, [sp, #0]
 800caea:	2b00      	cmp	r3, #0
 800caec:	bfcc      	ite	gt
 800caee:	461e      	movgt	r6, r3
 800caf0:	2601      	movle	r6, #1
 800caf2:	4456      	add	r6, sl
 800caf4:	2700      	movs	r7, #0
 800caf6:	4649      	mov	r1, r9
 800caf8:	2201      	movs	r2, #1
 800cafa:	4658      	mov	r0, fp
 800cafc:	f000 fef0 	bl	800d8e0 <__lshift>
 800cb00:	4621      	mov	r1, r4
 800cb02:	4681      	mov	r9, r0
 800cb04:	f000 ff58 	bl	800d9b8 <__mcmp>
 800cb08:	2800      	cmp	r0, #0
 800cb0a:	dcb0      	bgt.n	800ca6e <_dtoa_r+0xa5e>
 800cb0c:	d102      	bne.n	800cb14 <_dtoa_r+0xb04>
 800cb0e:	f018 0f01 	tst.w	r8, #1
 800cb12:	d1ac      	bne.n	800ca6e <_dtoa_r+0xa5e>
 800cb14:	4633      	mov	r3, r6
 800cb16:	461e      	mov	r6, r3
 800cb18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb1c:	2a30      	cmp	r2, #48	@ 0x30
 800cb1e:	d0fa      	beq.n	800cb16 <_dtoa_r+0xb06>
 800cb20:	e5c2      	b.n	800c6a8 <_dtoa_r+0x698>
 800cb22:	459a      	cmp	sl, r3
 800cb24:	d1a4      	bne.n	800ca70 <_dtoa_r+0xa60>
 800cb26:	9b04      	ldr	r3, [sp, #16]
 800cb28:	3301      	adds	r3, #1
 800cb2a:	9304      	str	r3, [sp, #16]
 800cb2c:	2331      	movs	r3, #49	@ 0x31
 800cb2e:	f88a 3000 	strb.w	r3, [sl]
 800cb32:	e5b9      	b.n	800c6a8 <_dtoa_r+0x698>
 800cb34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cb36:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cb94 <_dtoa_r+0xb84>
 800cb3a:	b11b      	cbz	r3, 800cb44 <_dtoa_r+0xb34>
 800cb3c:	f10a 0308 	add.w	r3, sl, #8
 800cb40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cb42:	6013      	str	r3, [r2, #0]
 800cb44:	4650      	mov	r0, sl
 800cb46:	b019      	add	sp, #100	@ 0x64
 800cb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb4e:	2b01      	cmp	r3, #1
 800cb50:	f77f ae37 	ble.w	800c7c2 <_dtoa_r+0x7b2>
 800cb54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb56:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb58:	2001      	movs	r0, #1
 800cb5a:	e655      	b.n	800c808 <_dtoa_r+0x7f8>
 800cb5c:	9b00      	ldr	r3, [sp, #0]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	f77f aed6 	ble.w	800c910 <_dtoa_r+0x900>
 800cb64:	4656      	mov	r6, sl
 800cb66:	4621      	mov	r1, r4
 800cb68:	4648      	mov	r0, r9
 800cb6a:	f7ff f9c7 	bl	800befc <quorem>
 800cb6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cb72:	f806 8b01 	strb.w	r8, [r6], #1
 800cb76:	9b00      	ldr	r3, [sp, #0]
 800cb78:	eba6 020a 	sub.w	r2, r6, sl
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	ddb3      	ble.n	800cae8 <_dtoa_r+0xad8>
 800cb80:	4649      	mov	r1, r9
 800cb82:	2300      	movs	r3, #0
 800cb84:	220a      	movs	r2, #10
 800cb86:	4658      	mov	r0, fp
 800cb88:	f000 fcb4 	bl	800d4f4 <__multadd>
 800cb8c:	4681      	mov	r9, r0
 800cb8e:	e7ea      	b.n	800cb66 <_dtoa_r+0xb56>
 800cb90:	0800f46b 	.word	0x0800f46b
 800cb94:	0800f3ef 	.word	0x0800f3ef

0800cb98 <_free_r>:
 800cb98:	b538      	push	{r3, r4, r5, lr}
 800cb9a:	4605      	mov	r5, r0
 800cb9c:	2900      	cmp	r1, #0
 800cb9e:	d041      	beq.n	800cc24 <_free_r+0x8c>
 800cba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cba4:	1f0c      	subs	r4, r1, #4
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	bfb8      	it	lt
 800cbaa:	18e4      	addlt	r4, r4, r3
 800cbac:	f000 fc34 	bl	800d418 <__malloc_lock>
 800cbb0:	4a1d      	ldr	r2, [pc, #116]	@ (800cc28 <_free_r+0x90>)
 800cbb2:	6813      	ldr	r3, [r2, #0]
 800cbb4:	b933      	cbnz	r3, 800cbc4 <_free_r+0x2c>
 800cbb6:	6063      	str	r3, [r4, #4]
 800cbb8:	6014      	str	r4, [r2, #0]
 800cbba:	4628      	mov	r0, r5
 800cbbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbc0:	f000 bc30 	b.w	800d424 <__malloc_unlock>
 800cbc4:	42a3      	cmp	r3, r4
 800cbc6:	d908      	bls.n	800cbda <_free_r+0x42>
 800cbc8:	6820      	ldr	r0, [r4, #0]
 800cbca:	1821      	adds	r1, r4, r0
 800cbcc:	428b      	cmp	r3, r1
 800cbce:	bf01      	itttt	eq
 800cbd0:	6819      	ldreq	r1, [r3, #0]
 800cbd2:	685b      	ldreq	r3, [r3, #4]
 800cbd4:	1809      	addeq	r1, r1, r0
 800cbd6:	6021      	streq	r1, [r4, #0]
 800cbd8:	e7ed      	b.n	800cbb6 <_free_r+0x1e>
 800cbda:	461a      	mov	r2, r3
 800cbdc:	685b      	ldr	r3, [r3, #4]
 800cbde:	b10b      	cbz	r3, 800cbe4 <_free_r+0x4c>
 800cbe0:	42a3      	cmp	r3, r4
 800cbe2:	d9fa      	bls.n	800cbda <_free_r+0x42>
 800cbe4:	6811      	ldr	r1, [r2, #0]
 800cbe6:	1850      	adds	r0, r2, r1
 800cbe8:	42a0      	cmp	r0, r4
 800cbea:	d10b      	bne.n	800cc04 <_free_r+0x6c>
 800cbec:	6820      	ldr	r0, [r4, #0]
 800cbee:	4401      	add	r1, r0
 800cbf0:	1850      	adds	r0, r2, r1
 800cbf2:	4283      	cmp	r3, r0
 800cbf4:	6011      	str	r1, [r2, #0]
 800cbf6:	d1e0      	bne.n	800cbba <_free_r+0x22>
 800cbf8:	6818      	ldr	r0, [r3, #0]
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	6053      	str	r3, [r2, #4]
 800cbfe:	4408      	add	r0, r1
 800cc00:	6010      	str	r0, [r2, #0]
 800cc02:	e7da      	b.n	800cbba <_free_r+0x22>
 800cc04:	d902      	bls.n	800cc0c <_free_r+0x74>
 800cc06:	230c      	movs	r3, #12
 800cc08:	602b      	str	r3, [r5, #0]
 800cc0a:	e7d6      	b.n	800cbba <_free_r+0x22>
 800cc0c:	6820      	ldr	r0, [r4, #0]
 800cc0e:	1821      	adds	r1, r4, r0
 800cc10:	428b      	cmp	r3, r1
 800cc12:	bf04      	itt	eq
 800cc14:	6819      	ldreq	r1, [r3, #0]
 800cc16:	685b      	ldreq	r3, [r3, #4]
 800cc18:	6063      	str	r3, [r4, #4]
 800cc1a:	bf04      	itt	eq
 800cc1c:	1809      	addeq	r1, r1, r0
 800cc1e:	6021      	streq	r1, [r4, #0]
 800cc20:	6054      	str	r4, [r2, #4]
 800cc22:	e7ca      	b.n	800cbba <_free_r+0x22>
 800cc24:	bd38      	pop	{r3, r4, r5, pc}
 800cc26:	bf00      	nop
 800cc28:	20000b3c 	.word	0x20000b3c

0800cc2c <rshift>:
 800cc2c:	6903      	ldr	r3, [r0, #16]
 800cc2e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cc32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc36:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cc3a:	f100 0414 	add.w	r4, r0, #20
 800cc3e:	dd45      	ble.n	800cccc <rshift+0xa0>
 800cc40:	f011 011f 	ands.w	r1, r1, #31
 800cc44:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cc48:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cc4c:	d10c      	bne.n	800cc68 <rshift+0x3c>
 800cc4e:	f100 0710 	add.w	r7, r0, #16
 800cc52:	4629      	mov	r1, r5
 800cc54:	42b1      	cmp	r1, r6
 800cc56:	d334      	bcc.n	800ccc2 <rshift+0x96>
 800cc58:	1a9b      	subs	r3, r3, r2
 800cc5a:	009b      	lsls	r3, r3, #2
 800cc5c:	1eea      	subs	r2, r5, #3
 800cc5e:	4296      	cmp	r6, r2
 800cc60:	bf38      	it	cc
 800cc62:	2300      	movcc	r3, #0
 800cc64:	4423      	add	r3, r4
 800cc66:	e015      	b.n	800cc94 <rshift+0x68>
 800cc68:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cc6c:	f1c1 0820 	rsb	r8, r1, #32
 800cc70:	40cf      	lsrs	r7, r1
 800cc72:	f105 0e04 	add.w	lr, r5, #4
 800cc76:	46a1      	mov	r9, r4
 800cc78:	4576      	cmp	r6, lr
 800cc7a:	46f4      	mov	ip, lr
 800cc7c:	d815      	bhi.n	800ccaa <rshift+0x7e>
 800cc7e:	1a9a      	subs	r2, r3, r2
 800cc80:	0092      	lsls	r2, r2, #2
 800cc82:	3a04      	subs	r2, #4
 800cc84:	3501      	adds	r5, #1
 800cc86:	42ae      	cmp	r6, r5
 800cc88:	bf38      	it	cc
 800cc8a:	2200      	movcc	r2, #0
 800cc8c:	18a3      	adds	r3, r4, r2
 800cc8e:	50a7      	str	r7, [r4, r2]
 800cc90:	b107      	cbz	r7, 800cc94 <rshift+0x68>
 800cc92:	3304      	adds	r3, #4
 800cc94:	1b1a      	subs	r2, r3, r4
 800cc96:	42a3      	cmp	r3, r4
 800cc98:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cc9c:	bf08      	it	eq
 800cc9e:	2300      	moveq	r3, #0
 800cca0:	6102      	str	r2, [r0, #16]
 800cca2:	bf08      	it	eq
 800cca4:	6143      	streq	r3, [r0, #20]
 800cca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccaa:	f8dc c000 	ldr.w	ip, [ip]
 800ccae:	fa0c fc08 	lsl.w	ip, ip, r8
 800ccb2:	ea4c 0707 	orr.w	r7, ip, r7
 800ccb6:	f849 7b04 	str.w	r7, [r9], #4
 800ccba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ccbe:	40cf      	lsrs	r7, r1
 800ccc0:	e7da      	b.n	800cc78 <rshift+0x4c>
 800ccc2:	f851 cb04 	ldr.w	ip, [r1], #4
 800ccc6:	f847 cf04 	str.w	ip, [r7, #4]!
 800ccca:	e7c3      	b.n	800cc54 <rshift+0x28>
 800cccc:	4623      	mov	r3, r4
 800ccce:	e7e1      	b.n	800cc94 <rshift+0x68>

0800ccd0 <__hexdig_fun>:
 800ccd0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ccd4:	2b09      	cmp	r3, #9
 800ccd6:	d802      	bhi.n	800ccde <__hexdig_fun+0xe>
 800ccd8:	3820      	subs	r0, #32
 800ccda:	b2c0      	uxtb	r0, r0
 800ccdc:	4770      	bx	lr
 800ccde:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cce2:	2b05      	cmp	r3, #5
 800cce4:	d801      	bhi.n	800ccea <__hexdig_fun+0x1a>
 800cce6:	3847      	subs	r0, #71	@ 0x47
 800cce8:	e7f7      	b.n	800ccda <__hexdig_fun+0xa>
 800ccea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ccee:	2b05      	cmp	r3, #5
 800ccf0:	d801      	bhi.n	800ccf6 <__hexdig_fun+0x26>
 800ccf2:	3827      	subs	r0, #39	@ 0x27
 800ccf4:	e7f1      	b.n	800ccda <__hexdig_fun+0xa>
 800ccf6:	2000      	movs	r0, #0
 800ccf8:	4770      	bx	lr
	...

0800ccfc <__gethex>:
 800ccfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd00:	b085      	sub	sp, #20
 800cd02:	468a      	mov	sl, r1
 800cd04:	9302      	str	r3, [sp, #8]
 800cd06:	680b      	ldr	r3, [r1, #0]
 800cd08:	9001      	str	r0, [sp, #4]
 800cd0a:	4690      	mov	r8, r2
 800cd0c:	1c9c      	adds	r4, r3, #2
 800cd0e:	46a1      	mov	r9, r4
 800cd10:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cd14:	2830      	cmp	r0, #48	@ 0x30
 800cd16:	d0fa      	beq.n	800cd0e <__gethex+0x12>
 800cd18:	eba9 0303 	sub.w	r3, r9, r3
 800cd1c:	f1a3 0b02 	sub.w	fp, r3, #2
 800cd20:	f7ff ffd6 	bl	800ccd0 <__hexdig_fun>
 800cd24:	4605      	mov	r5, r0
 800cd26:	2800      	cmp	r0, #0
 800cd28:	d168      	bne.n	800cdfc <__gethex+0x100>
 800cd2a:	49a0      	ldr	r1, [pc, #640]	@ (800cfac <__gethex+0x2b0>)
 800cd2c:	2201      	movs	r2, #1
 800cd2e:	4648      	mov	r0, r9
 800cd30:	f7ff f82b 	bl	800bd8a <strncmp>
 800cd34:	4607      	mov	r7, r0
 800cd36:	2800      	cmp	r0, #0
 800cd38:	d167      	bne.n	800ce0a <__gethex+0x10e>
 800cd3a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cd3e:	4626      	mov	r6, r4
 800cd40:	f7ff ffc6 	bl	800ccd0 <__hexdig_fun>
 800cd44:	2800      	cmp	r0, #0
 800cd46:	d062      	beq.n	800ce0e <__gethex+0x112>
 800cd48:	4623      	mov	r3, r4
 800cd4a:	7818      	ldrb	r0, [r3, #0]
 800cd4c:	2830      	cmp	r0, #48	@ 0x30
 800cd4e:	4699      	mov	r9, r3
 800cd50:	f103 0301 	add.w	r3, r3, #1
 800cd54:	d0f9      	beq.n	800cd4a <__gethex+0x4e>
 800cd56:	f7ff ffbb 	bl	800ccd0 <__hexdig_fun>
 800cd5a:	fab0 f580 	clz	r5, r0
 800cd5e:	096d      	lsrs	r5, r5, #5
 800cd60:	f04f 0b01 	mov.w	fp, #1
 800cd64:	464a      	mov	r2, r9
 800cd66:	4616      	mov	r6, r2
 800cd68:	3201      	adds	r2, #1
 800cd6a:	7830      	ldrb	r0, [r6, #0]
 800cd6c:	f7ff ffb0 	bl	800ccd0 <__hexdig_fun>
 800cd70:	2800      	cmp	r0, #0
 800cd72:	d1f8      	bne.n	800cd66 <__gethex+0x6a>
 800cd74:	498d      	ldr	r1, [pc, #564]	@ (800cfac <__gethex+0x2b0>)
 800cd76:	2201      	movs	r2, #1
 800cd78:	4630      	mov	r0, r6
 800cd7a:	f7ff f806 	bl	800bd8a <strncmp>
 800cd7e:	2800      	cmp	r0, #0
 800cd80:	d13f      	bne.n	800ce02 <__gethex+0x106>
 800cd82:	b944      	cbnz	r4, 800cd96 <__gethex+0x9a>
 800cd84:	1c74      	adds	r4, r6, #1
 800cd86:	4622      	mov	r2, r4
 800cd88:	4616      	mov	r6, r2
 800cd8a:	3201      	adds	r2, #1
 800cd8c:	7830      	ldrb	r0, [r6, #0]
 800cd8e:	f7ff ff9f 	bl	800ccd0 <__hexdig_fun>
 800cd92:	2800      	cmp	r0, #0
 800cd94:	d1f8      	bne.n	800cd88 <__gethex+0x8c>
 800cd96:	1ba4      	subs	r4, r4, r6
 800cd98:	00a7      	lsls	r7, r4, #2
 800cd9a:	7833      	ldrb	r3, [r6, #0]
 800cd9c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cda0:	2b50      	cmp	r3, #80	@ 0x50
 800cda2:	d13e      	bne.n	800ce22 <__gethex+0x126>
 800cda4:	7873      	ldrb	r3, [r6, #1]
 800cda6:	2b2b      	cmp	r3, #43	@ 0x2b
 800cda8:	d033      	beq.n	800ce12 <__gethex+0x116>
 800cdaa:	2b2d      	cmp	r3, #45	@ 0x2d
 800cdac:	d034      	beq.n	800ce18 <__gethex+0x11c>
 800cdae:	1c71      	adds	r1, r6, #1
 800cdb0:	2400      	movs	r4, #0
 800cdb2:	7808      	ldrb	r0, [r1, #0]
 800cdb4:	f7ff ff8c 	bl	800ccd0 <__hexdig_fun>
 800cdb8:	1e43      	subs	r3, r0, #1
 800cdba:	b2db      	uxtb	r3, r3
 800cdbc:	2b18      	cmp	r3, #24
 800cdbe:	d830      	bhi.n	800ce22 <__gethex+0x126>
 800cdc0:	f1a0 0210 	sub.w	r2, r0, #16
 800cdc4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cdc8:	f7ff ff82 	bl	800ccd0 <__hexdig_fun>
 800cdcc:	f100 3cff 	add.w	ip, r0, #4294967295
 800cdd0:	fa5f fc8c 	uxtb.w	ip, ip
 800cdd4:	f1bc 0f18 	cmp.w	ip, #24
 800cdd8:	f04f 030a 	mov.w	r3, #10
 800cddc:	d91e      	bls.n	800ce1c <__gethex+0x120>
 800cdde:	b104      	cbz	r4, 800cde2 <__gethex+0xe6>
 800cde0:	4252      	negs	r2, r2
 800cde2:	4417      	add	r7, r2
 800cde4:	f8ca 1000 	str.w	r1, [sl]
 800cde8:	b1ed      	cbz	r5, 800ce26 <__gethex+0x12a>
 800cdea:	f1bb 0f00 	cmp.w	fp, #0
 800cdee:	bf0c      	ite	eq
 800cdf0:	2506      	moveq	r5, #6
 800cdf2:	2500      	movne	r5, #0
 800cdf4:	4628      	mov	r0, r5
 800cdf6:	b005      	add	sp, #20
 800cdf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdfc:	2500      	movs	r5, #0
 800cdfe:	462c      	mov	r4, r5
 800ce00:	e7b0      	b.n	800cd64 <__gethex+0x68>
 800ce02:	2c00      	cmp	r4, #0
 800ce04:	d1c7      	bne.n	800cd96 <__gethex+0x9a>
 800ce06:	4627      	mov	r7, r4
 800ce08:	e7c7      	b.n	800cd9a <__gethex+0x9e>
 800ce0a:	464e      	mov	r6, r9
 800ce0c:	462f      	mov	r7, r5
 800ce0e:	2501      	movs	r5, #1
 800ce10:	e7c3      	b.n	800cd9a <__gethex+0x9e>
 800ce12:	2400      	movs	r4, #0
 800ce14:	1cb1      	adds	r1, r6, #2
 800ce16:	e7cc      	b.n	800cdb2 <__gethex+0xb6>
 800ce18:	2401      	movs	r4, #1
 800ce1a:	e7fb      	b.n	800ce14 <__gethex+0x118>
 800ce1c:	fb03 0002 	mla	r0, r3, r2, r0
 800ce20:	e7ce      	b.n	800cdc0 <__gethex+0xc4>
 800ce22:	4631      	mov	r1, r6
 800ce24:	e7de      	b.n	800cde4 <__gethex+0xe8>
 800ce26:	eba6 0309 	sub.w	r3, r6, r9
 800ce2a:	3b01      	subs	r3, #1
 800ce2c:	4629      	mov	r1, r5
 800ce2e:	2b07      	cmp	r3, #7
 800ce30:	dc0a      	bgt.n	800ce48 <__gethex+0x14c>
 800ce32:	9801      	ldr	r0, [sp, #4]
 800ce34:	f000 fafc 	bl	800d430 <_Balloc>
 800ce38:	4604      	mov	r4, r0
 800ce3a:	b940      	cbnz	r0, 800ce4e <__gethex+0x152>
 800ce3c:	4b5c      	ldr	r3, [pc, #368]	@ (800cfb0 <__gethex+0x2b4>)
 800ce3e:	4602      	mov	r2, r0
 800ce40:	21e4      	movs	r1, #228	@ 0xe4
 800ce42:	485c      	ldr	r0, [pc, #368]	@ (800cfb4 <__gethex+0x2b8>)
 800ce44:	f001 ffb0 	bl	800eda8 <__assert_func>
 800ce48:	3101      	adds	r1, #1
 800ce4a:	105b      	asrs	r3, r3, #1
 800ce4c:	e7ef      	b.n	800ce2e <__gethex+0x132>
 800ce4e:	f100 0a14 	add.w	sl, r0, #20
 800ce52:	2300      	movs	r3, #0
 800ce54:	4655      	mov	r5, sl
 800ce56:	469b      	mov	fp, r3
 800ce58:	45b1      	cmp	r9, r6
 800ce5a:	d337      	bcc.n	800cecc <__gethex+0x1d0>
 800ce5c:	f845 bb04 	str.w	fp, [r5], #4
 800ce60:	eba5 050a 	sub.w	r5, r5, sl
 800ce64:	10ad      	asrs	r5, r5, #2
 800ce66:	6125      	str	r5, [r4, #16]
 800ce68:	4658      	mov	r0, fp
 800ce6a:	f000 fbd3 	bl	800d614 <__hi0bits>
 800ce6e:	016d      	lsls	r5, r5, #5
 800ce70:	f8d8 6000 	ldr.w	r6, [r8]
 800ce74:	1a2d      	subs	r5, r5, r0
 800ce76:	42b5      	cmp	r5, r6
 800ce78:	dd54      	ble.n	800cf24 <__gethex+0x228>
 800ce7a:	1bad      	subs	r5, r5, r6
 800ce7c:	4629      	mov	r1, r5
 800ce7e:	4620      	mov	r0, r4
 800ce80:	f000 ff67 	bl	800dd52 <__any_on>
 800ce84:	4681      	mov	r9, r0
 800ce86:	b178      	cbz	r0, 800cea8 <__gethex+0x1ac>
 800ce88:	1e6b      	subs	r3, r5, #1
 800ce8a:	1159      	asrs	r1, r3, #5
 800ce8c:	f003 021f 	and.w	r2, r3, #31
 800ce90:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ce94:	f04f 0901 	mov.w	r9, #1
 800ce98:	fa09 f202 	lsl.w	r2, r9, r2
 800ce9c:	420a      	tst	r2, r1
 800ce9e:	d003      	beq.n	800cea8 <__gethex+0x1ac>
 800cea0:	454b      	cmp	r3, r9
 800cea2:	dc36      	bgt.n	800cf12 <__gethex+0x216>
 800cea4:	f04f 0902 	mov.w	r9, #2
 800cea8:	4629      	mov	r1, r5
 800ceaa:	4620      	mov	r0, r4
 800ceac:	f7ff febe 	bl	800cc2c <rshift>
 800ceb0:	442f      	add	r7, r5
 800ceb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ceb6:	42bb      	cmp	r3, r7
 800ceb8:	da42      	bge.n	800cf40 <__gethex+0x244>
 800ceba:	9801      	ldr	r0, [sp, #4]
 800cebc:	4621      	mov	r1, r4
 800cebe:	f000 faf7 	bl	800d4b0 <_Bfree>
 800cec2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cec4:	2300      	movs	r3, #0
 800cec6:	6013      	str	r3, [r2, #0]
 800cec8:	25a3      	movs	r5, #163	@ 0xa3
 800ceca:	e793      	b.n	800cdf4 <__gethex+0xf8>
 800cecc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ced0:	2a2e      	cmp	r2, #46	@ 0x2e
 800ced2:	d012      	beq.n	800cefa <__gethex+0x1fe>
 800ced4:	2b20      	cmp	r3, #32
 800ced6:	d104      	bne.n	800cee2 <__gethex+0x1e6>
 800ced8:	f845 bb04 	str.w	fp, [r5], #4
 800cedc:	f04f 0b00 	mov.w	fp, #0
 800cee0:	465b      	mov	r3, fp
 800cee2:	7830      	ldrb	r0, [r6, #0]
 800cee4:	9303      	str	r3, [sp, #12]
 800cee6:	f7ff fef3 	bl	800ccd0 <__hexdig_fun>
 800ceea:	9b03      	ldr	r3, [sp, #12]
 800ceec:	f000 000f 	and.w	r0, r0, #15
 800cef0:	4098      	lsls	r0, r3
 800cef2:	ea4b 0b00 	orr.w	fp, fp, r0
 800cef6:	3304      	adds	r3, #4
 800cef8:	e7ae      	b.n	800ce58 <__gethex+0x15c>
 800cefa:	45b1      	cmp	r9, r6
 800cefc:	d8ea      	bhi.n	800ced4 <__gethex+0x1d8>
 800cefe:	492b      	ldr	r1, [pc, #172]	@ (800cfac <__gethex+0x2b0>)
 800cf00:	9303      	str	r3, [sp, #12]
 800cf02:	2201      	movs	r2, #1
 800cf04:	4630      	mov	r0, r6
 800cf06:	f7fe ff40 	bl	800bd8a <strncmp>
 800cf0a:	9b03      	ldr	r3, [sp, #12]
 800cf0c:	2800      	cmp	r0, #0
 800cf0e:	d1e1      	bne.n	800ced4 <__gethex+0x1d8>
 800cf10:	e7a2      	b.n	800ce58 <__gethex+0x15c>
 800cf12:	1ea9      	subs	r1, r5, #2
 800cf14:	4620      	mov	r0, r4
 800cf16:	f000 ff1c 	bl	800dd52 <__any_on>
 800cf1a:	2800      	cmp	r0, #0
 800cf1c:	d0c2      	beq.n	800cea4 <__gethex+0x1a8>
 800cf1e:	f04f 0903 	mov.w	r9, #3
 800cf22:	e7c1      	b.n	800cea8 <__gethex+0x1ac>
 800cf24:	da09      	bge.n	800cf3a <__gethex+0x23e>
 800cf26:	1b75      	subs	r5, r6, r5
 800cf28:	4621      	mov	r1, r4
 800cf2a:	9801      	ldr	r0, [sp, #4]
 800cf2c:	462a      	mov	r2, r5
 800cf2e:	f000 fcd7 	bl	800d8e0 <__lshift>
 800cf32:	1b7f      	subs	r7, r7, r5
 800cf34:	4604      	mov	r4, r0
 800cf36:	f100 0a14 	add.w	sl, r0, #20
 800cf3a:	f04f 0900 	mov.w	r9, #0
 800cf3e:	e7b8      	b.n	800ceb2 <__gethex+0x1b6>
 800cf40:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cf44:	42bd      	cmp	r5, r7
 800cf46:	dd6f      	ble.n	800d028 <__gethex+0x32c>
 800cf48:	1bed      	subs	r5, r5, r7
 800cf4a:	42ae      	cmp	r6, r5
 800cf4c:	dc34      	bgt.n	800cfb8 <__gethex+0x2bc>
 800cf4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cf52:	2b02      	cmp	r3, #2
 800cf54:	d022      	beq.n	800cf9c <__gethex+0x2a0>
 800cf56:	2b03      	cmp	r3, #3
 800cf58:	d024      	beq.n	800cfa4 <__gethex+0x2a8>
 800cf5a:	2b01      	cmp	r3, #1
 800cf5c:	d115      	bne.n	800cf8a <__gethex+0x28e>
 800cf5e:	42ae      	cmp	r6, r5
 800cf60:	d113      	bne.n	800cf8a <__gethex+0x28e>
 800cf62:	2e01      	cmp	r6, #1
 800cf64:	d10b      	bne.n	800cf7e <__gethex+0x282>
 800cf66:	9a02      	ldr	r2, [sp, #8]
 800cf68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cf6c:	6013      	str	r3, [r2, #0]
 800cf6e:	2301      	movs	r3, #1
 800cf70:	6123      	str	r3, [r4, #16]
 800cf72:	f8ca 3000 	str.w	r3, [sl]
 800cf76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf78:	2562      	movs	r5, #98	@ 0x62
 800cf7a:	601c      	str	r4, [r3, #0]
 800cf7c:	e73a      	b.n	800cdf4 <__gethex+0xf8>
 800cf7e:	1e71      	subs	r1, r6, #1
 800cf80:	4620      	mov	r0, r4
 800cf82:	f000 fee6 	bl	800dd52 <__any_on>
 800cf86:	2800      	cmp	r0, #0
 800cf88:	d1ed      	bne.n	800cf66 <__gethex+0x26a>
 800cf8a:	9801      	ldr	r0, [sp, #4]
 800cf8c:	4621      	mov	r1, r4
 800cf8e:	f000 fa8f 	bl	800d4b0 <_Bfree>
 800cf92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf94:	2300      	movs	r3, #0
 800cf96:	6013      	str	r3, [r2, #0]
 800cf98:	2550      	movs	r5, #80	@ 0x50
 800cf9a:	e72b      	b.n	800cdf4 <__gethex+0xf8>
 800cf9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d1f3      	bne.n	800cf8a <__gethex+0x28e>
 800cfa2:	e7e0      	b.n	800cf66 <__gethex+0x26a>
 800cfa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d1dd      	bne.n	800cf66 <__gethex+0x26a>
 800cfaa:	e7ee      	b.n	800cf8a <__gethex+0x28e>
 800cfac:	0800f358 	.word	0x0800f358
 800cfb0:	0800f46b 	.word	0x0800f46b
 800cfb4:	0800f47c 	.word	0x0800f47c
 800cfb8:	1e6f      	subs	r7, r5, #1
 800cfba:	f1b9 0f00 	cmp.w	r9, #0
 800cfbe:	d130      	bne.n	800d022 <__gethex+0x326>
 800cfc0:	b127      	cbz	r7, 800cfcc <__gethex+0x2d0>
 800cfc2:	4639      	mov	r1, r7
 800cfc4:	4620      	mov	r0, r4
 800cfc6:	f000 fec4 	bl	800dd52 <__any_on>
 800cfca:	4681      	mov	r9, r0
 800cfcc:	117a      	asrs	r2, r7, #5
 800cfce:	2301      	movs	r3, #1
 800cfd0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cfd4:	f007 071f 	and.w	r7, r7, #31
 800cfd8:	40bb      	lsls	r3, r7
 800cfda:	4213      	tst	r3, r2
 800cfdc:	4629      	mov	r1, r5
 800cfde:	4620      	mov	r0, r4
 800cfe0:	bf18      	it	ne
 800cfe2:	f049 0902 	orrne.w	r9, r9, #2
 800cfe6:	f7ff fe21 	bl	800cc2c <rshift>
 800cfea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cfee:	1b76      	subs	r6, r6, r5
 800cff0:	2502      	movs	r5, #2
 800cff2:	f1b9 0f00 	cmp.w	r9, #0
 800cff6:	d047      	beq.n	800d088 <__gethex+0x38c>
 800cff8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cffc:	2b02      	cmp	r3, #2
 800cffe:	d015      	beq.n	800d02c <__gethex+0x330>
 800d000:	2b03      	cmp	r3, #3
 800d002:	d017      	beq.n	800d034 <__gethex+0x338>
 800d004:	2b01      	cmp	r3, #1
 800d006:	d109      	bne.n	800d01c <__gethex+0x320>
 800d008:	f019 0f02 	tst.w	r9, #2
 800d00c:	d006      	beq.n	800d01c <__gethex+0x320>
 800d00e:	f8da 3000 	ldr.w	r3, [sl]
 800d012:	ea49 0903 	orr.w	r9, r9, r3
 800d016:	f019 0f01 	tst.w	r9, #1
 800d01a:	d10e      	bne.n	800d03a <__gethex+0x33e>
 800d01c:	f045 0510 	orr.w	r5, r5, #16
 800d020:	e032      	b.n	800d088 <__gethex+0x38c>
 800d022:	f04f 0901 	mov.w	r9, #1
 800d026:	e7d1      	b.n	800cfcc <__gethex+0x2d0>
 800d028:	2501      	movs	r5, #1
 800d02a:	e7e2      	b.n	800cff2 <__gethex+0x2f6>
 800d02c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d02e:	f1c3 0301 	rsb	r3, r3, #1
 800d032:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d034:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d036:	2b00      	cmp	r3, #0
 800d038:	d0f0      	beq.n	800d01c <__gethex+0x320>
 800d03a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d03e:	f104 0314 	add.w	r3, r4, #20
 800d042:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d046:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d04a:	f04f 0c00 	mov.w	ip, #0
 800d04e:	4618      	mov	r0, r3
 800d050:	f853 2b04 	ldr.w	r2, [r3], #4
 800d054:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d058:	d01b      	beq.n	800d092 <__gethex+0x396>
 800d05a:	3201      	adds	r2, #1
 800d05c:	6002      	str	r2, [r0, #0]
 800d05e:	2d02      	cmp	r5, #2
 800d060:	f104 0314 	add.w	r3, r4, #20
 800d064:	d13c      	bne.n	800d0e0 <__gethex+0x3e4>
 800d066:	f8d8 2000 	ldr.w	r2, [r8]
 800d06a:	3a01      	subs	r2, #1
 800d06c:	42b2      	cmp	r2, r6
 800d06e:	d109      	bne.n	800d084 <__gethex+0x388>
 800d070:	1171      	asrs	r1, r6, #5
 800d072:	2201      	movs	r2, #1
 800d074:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d078:	f006 061f 	and.w	r6, r6, #31
 800d07c:	fa02 f606 	lsl.w	r6, r2, r6
 800d080:	421e      	tst	r6, r3
 800d082:	d13a      	bne.n	800d0fa <__gethex+0x3fe>
 800d084:	f045 0520 	orr.w	r5, r5, #32
 800d088:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d08a:	601c      	str	r4, [r3, #0]
 800d08c:	9b02      	ldr	r3, [sp, #8]
 800d08e:	601f      	str	r7, [r3, #0]
 800d090:	e6b0      	b.n	800cdf4 <__gethex+0xf8>
 800d092:	4299      	cmp	r1, r3
 800d094:	f843 cc04 	str.w	ip, [r3, #-4]
 800d098:	d8d9      	bhi.n	800d04e <__gethex+0x352>
 800d09a:	68a3      	ldr	r3, [r4, #8]
 800d09c:	459b      	cmp	fp, r3
 800d09e:	db17      	blt.n	800d0d0 <__gethex+0x3d4>
 800d0a0:	6861      	ldr	r1, [r4, #4]
 800d0a2:	9801      	ldr	r0, [sp, #4]
 800d0a4:	3101      	adds	r1, #1
 800d0a6:	f000 f9c3 	bl	800d430 <_Balloc>
 800d0aa:	4681      	mov	r9, r0
 800d0ac:	b918      	cbnz	r0, 800d0b6 <__gethex+0x3ba>
 800d0ae:	4b1a      	ldr	r3, [pc, #104]	@ (800d118 <__gethex+0x41c>)
 800d0b0:	4602      	mov	r2, r0
 800d0b2:	2184      	movs	r1, #132	@ 0x84
 800d0b4:	e6c5      	b.n	800ce42 <__gethex+0x146>
 800d0b6:	6922      	ldr	r2, [r4, #16]
 800d0b8:	3202      	adds	r2, #2
 800d0ba:	f104 010c 	add.w	r1, r4, #12
 800d0be:	0092      	lsls	r2, r2, #2
 800d0c0:	300c      	adds	r0, #12
 800d0c2:	f7fe fefe 	bl	800bec2 <memcpy>
 800d0c6:	4621      	mov	r1, r4
 800d0c8:	9801      	ldr	r0, [sp, #4]
 800d0ca:	f000 f9f1 	bl	800d4b0 <_Bfree>
 800d0ce:	464c      	mov	r4, r9
 800d0d0:	6923      	ldr	r3, [r4, #16]
 800d0d2:	1c5a      	adds	r2, r3, #1
 800d0d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d0d8:	6122      	str	r2, [r4, #16]
 800d0da:	2201      	movs	r2, #1
 800d0dc:	615a      	str	r2, [r3, #20]
 800d0de:	e7be      	b.n	800d05e <__gethex+0x362>
 800d0e0:	6922      	ldr	r2, [r4, #16]
 800d0e2:	455a      	cmp	r2, fp
 800d0e4:	dd0b      	ble.n	800d0fe <__gethex+0x402>
 800d0e6:	2101      	movs	r1, #1
 800d0e8:	4620      	mov	r0, r4
 800d0ea:	f7ff fd9f 	bl	800cc2c <rshift>
 800d0ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d0f2:	3701      	adds	r7, #1
 800d0f4:	42bb      	cmp	r3, r7
 800d0f6:	f6ff aee0 	blt.w	800ceba <__gethex+0x1be>
 800d0fa:	2501      	movs	r5, #1
 800d0fc:	e7c2      	b.n	800d084 <__gethex+0x388>
 800d0fe:	f016 061f 	ands.w	r6, r6, #31
 800d102:	d0fa      	beq.n	800d0fa <__gethex+0x3fe>
 800d104:	4453      	add	r3, sl
 800d106:	f1c6 0620 	rsb	r6, r6, #32
 800d10a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d10e:	f000 fa81 	bl	800d614 <__hi0bits>
 800d112:	42b0      	cmp	r0, r6
 800d114:	dbe7      	blt.n	800d0e6 <__gethex+0x3ea>
 800d116:	e7f0      	b.n	800d0fa <__gethex+0x3fe>
 800d118:	0800f46b 	.word	0x0800f46b

0800d11c <L_shift>:
 800d11c:	f1c2 0208 	rsb	r2, r2, #8
 800d120:	0092      	lsls	r2, r2, #2
 800d122:	b570      	push	{r4, r5, r6, lr}
 800d124:	f1c2 0620 	rsb	r6, r2, #32
 800d128:	6843      	ldr	r3, [r0, #4]
 800d12a:	6804      	ldr	r4, [r0, #0]
 800d12c:	fa03 f506 	lsl.w	r5, r3, r6
 800d130:	432c      	orrs	r4, r5
 800d132:	40d3      	lsrs	r3, r2
 800d134:	6004      	str	r4, [r0, #0]
 800d136:	f840 3f04 	str.w	r3, [r0, #4]!
 800d13a:	4288      	cmp	r0, r1
 800d13c:	d3f4      	bcc.n	800d128 <L_shift+0xc>
 800d13e:	bd70      	pop	{r4, r5, r6, pc}

0800d140 <__match>:
 800d140:	b530      	push	{r4, r5, lr}
 800d142:	6803      	ldr	r3, [r0, #0]
 800d144:	3301      	adds	r3, #1
 800d146:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d14a:	b914      	cbnz	r4, 800d152 <__match+0x12>
 800d14c:	6003      	str	r3, [r0, #0]
 800d14e:	2001      	movs	r0, #1
 800d150:	bd30      	pop	{r4, r5, pc}
 800d152:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d156:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d15a:	2d19      	cmp	r5, #25
 800d15c:	bf98      	it	ls
 800d15e:	3220      	addls	r2, #32
 800d160:	42a2      	cmp	r2, r4
 800d162:	d0f0      	beq.n	800d146 <__match+0x6>
 800d164:	2000      	movs	r0, #0
 800d166:	e7f3      	b.n	800d150 <__match+0x10>

0800d168 <__hexnan>:
 800d168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d16c:	680b      	ldr	r3, [r1, #0]
 800d16e:	6801      	ldr	r1, [r0, #0]
 800d170:	115e      	asrs	r6, r3, #5
 800d172:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d176:	f013 031f 	ands.w	r3, r3, #31
 800d17a:	b087      	sub	sp, #28
 800d17c:	bf18      	it	ne
 800d17e:	3604      	addne	r6, #4
 800d180:	2500      	movs	r5, #0
 800d182:	1f37      	subs	r7, r6, #4
 800d184:	4682      	mov	sl, r0
 800d186:	4690      	mov	r8, r2
 800d188:	9301      	str	r3, [sp, #4]
 800d18a:	f846 5c04 	str.w	r5, [r6, #-4]
 800d18e:	46b9      	mov	r9, r7
 800d190:	463c      	mov	r4, r7
 800d192:	9502      	str	r5, [sp, #8]
 800d194:	46ab      	mov	fp, r5
 800d196:	784a      	ldrb	r2, [r1, #1]
 800d198:	1c4b      	adds	r3, r1, #1
 800d19a:	9303      	str	r3, [sp, #12]
 800d19c:	b342      	cbz	r2, 800d1f0 <__hexnan+0x88>
 800d19e:	4610      	mov	r0, r2
 800d1a0:	9105      	str	r1, [sp, #20]
 800d1a2:	9204      	str	r2, [sp, #16]
 800d1a4:	f7ff fd94 	bl	800ccd0 <__hexdig_fun>
 800d1a8:	2800      	cmp	r0, #0
 800d1aa:	d151      	bne.n	800d250 <__hexnan+0xe8>
 800d1ac:	9a04      	ldr	r2, [sp, #16]
 800d1ae:	9905      	ldr	r1, [sp, #20]
 800d1b0:	2a20      	cmp	r2, #32
 800d1b2:	d818      	bhi.n	800d1e6 <__hexnan+0x7e>
 800d1b4:	9b02      	ldr	r3, [sp, #8]
 800d1b6:	459b      	cmp	fp, r3
 800d1b8:	dd13      	ble.n	800d1e2 <__hexnan+0x7a>
 800d1ba:	454c      	cmp	r4, r9
 800d1bc:	d206      	bcs.n	800d1cc <__hexnan+0x64>
 800d1be:	2d07      	cmp	r5, #7
 800d1c0:	dc04      	bgt.n	800d1cc <__hexnan+0x64>
 800d1c2:	462a      	mov	r2, r5
 800d1c4:	4649      	mov	r1, r9
 800d1c6:	4620      	mov	r0, r4
 800d1c8:	f7ff ffa8 	bl	800d11c <L_shift>
 800d1cc:	4544      	cmp	r4, r8
 800d1ce:	d952      	bls.n	800d276 <__hexnan+0x10e>
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	f1a4 0904 	sub.w	r9, r4, #4
 800d1d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800d1da:	f8cd b008 	str.w	fp, [sp, #8]
 800d1de:	464c      	mov	r4, r9
 800d1e0:	461d      	mov	r5, r3
 800d1e2:	9903      	ldr	r1, [sp, #12]
 800d1e4:	e7d7      	b.n	800d196 <__hexnan+0x2e>
 800d1e6:	2a29      	cmp	r2, #41	@ 0x29
 800d1e8:	d157      	bne.n	800d29a <__hexnan+0x132>
 800d1ea:	3102      	adds	r1, #2
 800d1ec:	f8ca 1000 	str.w	r1, [sl]
 800d1f0:	f1bb 0f00 	cmp.w	fp, #0
 800d1f4:	d051      	beq.n	800d29a <__hexnan+0x132>
 800d1f6:	454c      	cmp	r4, r9
 800d1f8:	d206      	bcs.n	800d208 <__hexnan+0xa0>
 800d1fa:	2d07      	cmp	r5, #7
 800d1fc:	dc04      	bgt.n	800d208 <__hexnan+0xa0>
 800d1fe:	462a      	mov	r2, r5
 800d200:	4649      	mov	r1, r9
 800d202:	4620      	mov	r0, r4
 800d204:	f7ff ff8a 	bl	800d11c <L_shift>
 800d208:	4544      	cmp	r4, r8
 800d20a:	d936      	bls.n	800d27a <__hexnan+0x112>
 800d20c:	f1a8 0204 	sub.w	r2, r8, #4
 800d210:	4623      	mov	r3, r4
 800d212:	f853 1b04 	ldr.w	r1, [r3], #4
 800d216:	f842 1f04 	str.w	r1, [r2, #4]!
 800d21a:	429f      	cmp	r7, r3
 800d21c:	d2f9      	bcs.n	800d212 <__hexnan+0xaa>
 800d21e:	1b3b      	subs	r3, r7, r4
 800d220:	f023 0303 	bic.w	r3, r3, #3
 800d224:	3304      	adds	r3, #4
 800d226:	3401      	adds	r4, #1
 800d228:	3e03      	subs	r6, #3
 800d22a:	42b4      	cmp	r4, r6
 800d22c:	bf88      	it	hi
 800d22e:	2304      	movhi	r3, #4
 800d230:	4443      	add	r3, r8
 800d232:	2200      	movs	r2, #0
 800d234:	f843 2b04 	str.w	r2, [r3], #4
 800d238:	429f      	cmp	r7, r3
 800d23a:	d2fb      	bcs.n	800d234 <__hexnan+0xcc>
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	b91b      	cbnz	r3, 800d248 <__hexnan+0xe0>
 800d240:	4547      	cmp	r7, r8
 800d242:	d128      	bne.n	800d296 <__hexnan+0x12e>
 800d244:	2301      	movs	r3, #1
 800d246:	603b      	str	r3, [r7, #0]
 800d248:	2005      	movs	r0, #5
 800d24a:	b007      	add	sp, #28
 800d24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d250:	3501      	adds	r5, #1
 800d252:	2d08      	cmp	r5, #8
 800d254:	f10b 0b01 	add.w	fp, fp, #1
 800d258:	dd06      	ble.n	800d268 <__hexnan+0x100>
 800d25a:	4544      	cmp	r4, r8
 800d25c:	d9c1      	bls.n	800d1e2 <__hexnan+0x7a>
 800d25e:	2300      	movs	r3, #0
 800d260:	f844 3c04 	str.w	r3, [r4, #-4]
 800d264:	2501      	movs	r5, #1
 800d266:	3c04      	subs	r4, #4
 800d268:	6822      	ldr	r2, [r4, #0]
 800d26a:	f000 000f 	and.w	r0, r0, #15
 800d26e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d272:	6020      	str	r0, [r4, #0]
 800d274:	e7b5      	b.n	800d1e2 <__hexnan+0x7a>
 800d276:	2508      	movs	r5, #8
 800d278:	e7b3      	b.n	800d1e2 <__hexnan+0x7a>
 800d27a:	9b01      	ldr	r3, [sp, #4]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d0dd      	beq.n	800d23c <__hexnan+0xd4>
 800d280:	f1c3 0320 	rsb	r3, r3, #32
 800d284:	f04f 32ff 	mov.w	r2, #4294967295
 800d288:	40da      	lsrs	r2, r3
 800d28a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d28e:	4013      	ands	r3, r2
 800d290:	f846 3c04 	str.w	r3, [r6, #-4]
 800d294:	e7d2      	b.n	800d23c <__hexnan+0xd4>
 800d296:	3f04      	subs	r7, #4
 800d298:	e7d0      	b.n	800d23c <__hexnan+0xd4>
 800d29a:	2004      	movs	r0, #4
 800d29c:	e7d5      	b.n	800d24a <__hexnan+0xe2>
	...

0800d2a0 <malloc>:
 800d2a0:	4b02      	ldr	r3, [pc, #8]	@ (800d2ac <malloc+0xc>)
 800d2a2:	4601      	mov	r1, r0
 800d2a4:	6818      	ldr	r0, [r3, #0]
 800d2a6:	f000 b825 	b.w	800d2f4 <_malloc_r>
 800d2aa:	bf00      	nop
 800d2ac:	20000190 	.word	0x20000190

0800d2b0 <sbrk_aligned>:
 800d2b0:	b570      	push	{r4, r5, r6, lr}
 800d2b2:	4e0f      	ldr	r6, [pc, #60]	@ (800d2f0 <sbrk_aligned+0x40>)
 800d2b4:	460c      	mov	r4, r1
 800d2b6:	6831      	ldr	r1, [r6, #0]
 800d2b8:	4605      	mov	r5, r0
 800d2ba:	b911      	cbnz	r1, 800d2c2 <sbrk_aligned+0x12>
 800d2bc:	f001 fd64 	bl	800ed88 <_sbrk_r>
 800d2c0:	6030      	str	r0, [r6, #0]
 800d2c2:	4621      	mov	r1, r4
 800d2c4:	4628      	mov	r0, r5
 800d2c6:	f001 fd5f 	bl	800ed88 <_sbrk_r>
 800d2ca:	1c43      	adds	r3, r0, #1
 800d2cc:	d103      	bne.n	800d2d6 <sbrk_aligned+0x26>
 800d2ce:	f04f 34ff 	mov.w	r4, #4294967295
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	bd70      	pop	{r4, r5, r6, pc}
 800d2d6:	1cc4      	adds	r4, r0, #3
 800d2d8:	f024 0403 	bic.w	r4, r4, #3
 800d2dc:	42a0      	cmp	r0, r4
 800d2de:	d0f8      	beq.n	800d2d2 <sbrk_aligned+0x22>
 800d2e0:	1a21      	subs	r1, r4, r0
 800d2e2:	4628      	mov	r0, r5
 800d2e4:	f001 fd50 	bl	800ed88 <_sbrk_r>
 800d2e8:	3001      	adds	r0, #1
 800d2ea:	d1f2      	bne.n	800d2d2 <sbrk_aligned+0x22>
 800d2ec:	e7ef      	b.n	800d2ce <sbrk_aligned+0x1e>
 800d2ee:	bf00      	nop
 800d2f0:	20000b38 	.word	0x20000b38

0800d2f4 <_malloc_r>:
 800d2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2f8:	1ccd      	adds	r5, r1, #3
 800d2fa:	f025 0503 	bic.w	r5, r5, #3
 800d2fe:	3508      	adds	r5, #8
 800d300:	2d0c      	cmp	r5, #12
 800d302:	bf38      	it	cc
 800d304:	250c      	movcc	r5, #12
 800d306:	2d00      	cmp	r5, #0
 800d308:	4606      	mov	r6, r0
 800d30a:	db01      	blt.n	800d310 <_malloc_r+0x1c>
 800d30c:	42a9      	cmp	r1, r5
 800d30e:	d904      	bls.n	800d31a <_malloc_r+0x26>
 800d310:	230c      	movs	r3, #12
 800d312:	6033      	str	r3, [r6, #0]
 800d314:	2000      	movs	r0, #0
 800d316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d31a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d3f0 <_malloc_r+0xfc>
 800d31e:	f000 f87b 	bl	800d418 <__malloc_lock>
 800d322:	f8d8 3000 	ldr.w	r3, [r8]
 800d326:	461c      	mov	r4, r3
 800d328:	bb44      	cbnz	r4, 800d37c <_malloc_r+0x88>
 800d32a:	4629      	mov	r1, r5
 800d32c:	4630      	mov	r0, r6
 800d32e:	f7ff ffbf 	bl	800d2b0 <sbrk_aligned>
 800d332:	1c43      	adds	r3, r0, #1
 800d334:	4604      	mov	r4, r0
 800d336:	d158      	bne.n	800d3ea <_malloc_r+0xf6>
 800d338:	f8d8 4000 	ldr.w	r4, [r8]
 800d33c:	4627      	mov	r7, r4
 800d33e:	2f00      	cmp	r7, #0
 800d340:	d143      	bne.n	800d3ca <_malloc_r+0xd6>
 800d342:	2c00      	cmp	r4, #0
 800d344:	d04b      	beq.n	800d3de <_malloc_r+0xea>
 800d346:	6823      	ldr	r3, [r4, #0]
 800d348:	4639      	mov	r1, r7
 800d34a:	4630      	mov	r0, r6
 800d34c:	eb04 0903 	add.w	r9, r4, r3
 800d350:	f001 fd1a 	bl	800ed88 <_sbrk_r>
 800d354:	4581      	cmp	r9, r0
 800d356:	d142      	bne.n	800d3de <_malloc_r+0xea>
 800d358:	6821      	ldr	r1, [r4, #0]
 800d35a:	1a6d      	subs	r5, r5, r1
 800d35c:	4629      	mov	r1, r5
 800d35e:	4630      	mov	r0, r6
 800d360:	f7ff ffa6 	bl	800d2b0 <sbrk_aligned>
 800d364:	3001      	adds	r0, #1
 800d366:	d03a      	beq.n	800d3de <_malloc_r+0xea>
 800d368:	6823      	ldr	r3, [r4, #0]
 800d36a:	442b      	add	r3, r5
 800d36c:	6023      	str	r3, [r4, #0]
 800d36e:	f8d8 3000 	ldr.w	r3, [r8]
 800d372:	685a      	ldr	r2, [r3, #4]
 800d374:	bb62      	cbnz	r2, 800d3d0 <_malloc_r+0xdc>
 800d376:	f8c8 7000 	str.w	r7, [r8]
 800d37a:	e00f      	b.n	800d39c <_malloc_r+0xa8>
 800d37c:	6822      	ldr	r2, [r4, #0]
 800d37e:	1b52      	subs	r2, r2, r5
 800d380:	d420      	bmi.n	800d3c4 <_malloc_r+0xd0>
 800d382:	2a0b      	cmp	r2, #11
 800d384:	d917      	bls.n	800d3b6 <_malloc_r+0xc2>
 800d386:	1961      	adds	r1, r4, r5
 800d388:	42a3      	cmp	r3, r4
 800d38a:	6025      	str	r5, [r4, #0]
 800d38c:	bf18      	it	ne
 800d38e:	6059      	strne	r1, [r3, #4]
 800d390:	6863      	ldr	r3, [r4, #4]
 800d392:	bf08      	it	eq
 800d394:	f8c8 1000 	streq.w	r1, [r8]
 800d398:	5162      	str	r2, [r4, r5]
 800d39a:	604b      	str	r3, [r1, #4]
 800d39c:	4630      	mov	r0, r6
 800d39e:	f000 f841 	bl	800d424 <__malloc_unlock>
 800d3a2:	f104 000b 	add.w	r0, r4, #11
 800d3a6:	1d23      	adds	r3, r4, #4
 800d3a8:	f020 0007 	bic.w	r0, r0, #7
 800d3ac:	1ac2      	subs	r2, r0, r3
 800d3ae:	bf1c      	itt	ne
 800d3b0:	1a1b      	subne	r3, r3, r0
 800d3b2:	50a3      	strne	r3, [r4, r2]
 800d3b4:	e7af      	b.n	800d316 <_malloc_r+0x22>
 800d3b6:	6862      	ldr	r2, [r4, #4]
 800d3b8:	42a3      	cmp	r3, r4
 800d3ba:	bf0c      	ite	eq
 800d3bc:	f8c8 2000 	streq.w	r2, [r8]
 800d3c0:	605a      	strne	r2, [r3, #4]
 800d3c2:	e7eb      	b.n	800d39c <_malloc_r+0xa8>
 800d3c4:	4623      	mov	r3, r4
 800d3c6:	6864      	ldr	r4, [r4, #4]
 800d3c8:	e7ae      	b.n	800d328 <_malloc_r+0x34>
 800d3ca:	463c      	mov	r4, r7
 800d3cc:	687f      	ldr	r7, [r7, #4]
 800d3ce:	e7b6      	b.n	800d33e <_malloc_r+0x4a>
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	42a3      	cmp	r3, r4
 800d3d6:	d1fb      	bne.n	800d3d0 <_malloc_r+0xdc>
 800d3d8:	2300      	movs	r3, #0
 800d3da:	6053      	str	r3, [r2, #4]
 800d3dc:	e7de      	b.n	800d39c <_malloc_r+0xa8>
 800d3de:	230c      	movs	r3, #12
 800d3e0:	6033      	str	r3, [r6, #0]
 800d3e2:	4630      	mov	r0, r6
 800d3e4:	f000 f81e 	bl	800d424 <__malloc_unlock>
 800d3e8:	e794      	b.n	800d314 <_malloc_r+0x20>
 800d3ea:	6005      	str	r5, [r0, #0]
 800d3ec:	e7d6      	b.n	800d39c <_malloc_r+0xa8>
 800d3ee:	bf00      	nop
 800d3f0:	20000b3c 	.word	0x20000b3c

0800d3f4 <__ascii_mbtowc>:
 800d3f4:	b082      	sub	sp, #8
 800d3f6:	b901      	cbnz	r1, 800d3fa <__ascii_mbtowc+0x6>
 800d3f8:	a901      	add	r1, sp, #4
 800d3fa:	b142      	cbz	r2, 800d40e <__ascii_mbtowc+0x1a>
 800d3fc:	b14b      	cbz	r3, 800d412 <__ascii_mbtowc+0x1e>
 800d3fe:	7813      	ldrb	r3, [r2, #0]
 800d400:	600b      	str	r3, [r1, #0]
 800d402:	7812      	ldrb	r2, [r2, #0]
 800d404:	1e10      	subs	r0, r2, #0
 800d406:	bf18      	it	ne
 800d408:	2001      	movne	r0, #1
 800d40a:	b002      	add	sp, #8
 800d40c:	4770      	bx	lr
 800d40e:	4610      	mov	r0, r2
 800d410:	e7fb      	b.n	800d40a <__ascii_mbtowc+0x16>
 800d412:	f06f 0001 	mvn.w	r0, #1
 800d416:	e7f8      	b.n	800d40a <__ascii_mbtowc+0x16>

0800d418 <__malloc_lock>:
 800d418:	4801      	ldr	r0, [pc, #4]	@ (800d420 <__malloc_lock+0x8>)
 800d41a:	f7fe bd50 	b.w	800bebe <__retarget_lock_acquire_recursive>
 800d41e:	bf00      	nop
 800d420:	20000b34 	.word	0x20000b34

0800d424 <__malloc_unlock>:
 800d424:	4801      	ldr	r0, [pc, #4]	@ (800d42c <__malloc_unlock+0x8>)
 800d426:	f7fe bd4b 	b.w	800bec0 <__retarget_lock_release_recursive>
 800d42a:	bf00      	nop
 800d42c:	20000b34 	.word	0x20000b34

0800d430 <_Balloc>:
 800d430:	b570      	push	{r4, r5, r6, lr}
 800d432:	69c6      	ldr	r6, [r0, #28]
 800d434:	4604      	mov	r4, r0
 800d436:	460d      	mov	r5, r1
 800d438:	b976      	cbnz	r6, 800d458 <_Balloc+0x28>
 800d43a:	2010      	movs	r0, #16
 800d43c:	f7ff ff30 	bl	800d2a0 <malloc>
 800d440:	4602      	mov	r2, r0
 800d442:	61e0      	str	r0, [r4, #28]
 800d444:	b920      	cbnz	r0, 800d450 <_Balloc+0x20>
 800d446:	4b18      	ldr	r3, [pc, #96]	@ (800d4a8 <_Balloc+0x78>)
 800d448:	4818      	ldr	r0, [pc, #96]	@ (800d4ac <_Balloc+0x7c>)
 800d44a:	216b      	movs	r1, #107	@ 0x6b
 800d44c:	f001 fcac 	bl	800eda8 <__assert_func>
 800d450:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d454:	6006      	str	r6, [r0, #0]
 800d456:	60c6      	str	r6, [r0, #12]
 800d458:	69e6      	ldr	r6, [r4, #28]
 800d45a:	68f3      	ldr	r3, [r6, #12]
 800d45c:	b183      	cbz	r3, 800d480 <_Balloc+0x50>
 800d45e:	69e3      	ldr	r3, [r4, #28]
 800d460:	68db      	ldr	r3, [r3, #12]
 800d462:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d466:	b9b8      	cbnz	r0, 800d498 <_Balloc+0x68>
 800d468:	2101      	movs	r1, #1
 800d46a:	fa01 f605 	lsl.w	r6, r1, r5
 800d46e:	1d72      	adds	r2, r6, #5
 800d470:	0092      	lsls	r2, r2, #2
 800d472:	4620      	mov	r0, r4
 800d474:	f001 fcb6 	bl	800ede4 <_calloc_r>
 800d478:	b160      	cbz	r0, 800d494 <_Balloc+0x64>
 800d47a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d47e:	e00e      	b.n	800d49e <_Balloc+0x6e>
 800d480:	2221      	movs	r2, #33	@ 0x21
 800d482:	2104      	movs	r1, #4
 800d484:	4620      	mov	r0, r4
 800d486:	f001 fcad 	bl	800ede4 <_calloc_r>
 800d48a:	69e3      	ldr	r3, [r4, #28]
 800d48c:	60f0      	str	r0, [r6, #12]
 800d48e:	68db      	ldr	r3, [r3, #12]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d1e4      	bne.n	800d45e <_Balloc+0x2e>
 800d494:	2000      	movs	r0, #0
 800d496:	bd70      	pop	{r4, r5, r6, pc}
 800d498:	6802      	ldr	r2, [r0, #0]
 800d49a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d49e:	2300      	movs	r3, #0
 800d4a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d4a4:	e7f7      	b.n	800d496 <_Balloc+0x66>
 800d4a6:	bf00      	nop
 800d4a8:	0800f3fc 	.word	0x0800f3fc
 800d4ac:	0800f4dc 	.word	0x0800f4dc

0800d4b0 <_Bfree>:
 800d4b0:	b570      	push	{r4, r5, r6, lr}
 800d4b2:	69c6      	ldr	r6, [r0, #28]
 800d4b4:	4605      	mov	r5, r0
 800d4b6:	460c      	mov	r4, r1
 800d4b8:	b976      	cbnz	r6, 800d4d8 <_Bfree+0x28>
 800d4ba:	2010      	movs	r0, #16
 800d4bc:	f7ff fef0 	bl	800d2a0 <malloc>
 800d4c0:	4602      	mov	r2, r0
 800d4c2:	61e8      	str	r0, [r5, #28]
 800d4c4:	b920      	cbnz	r0, 800d4d0 <_Bfree+0x20>
 800d4c6:	4b09      	ldr	r3, [pc, #36]	@ (800d4ec <_Bfree+0x3c>)
 800d4c8:	4809      	ldr	r0, [pc, #36]	@ (800d4f0 <_Bfree+0x40>)
 800d4ca:	218f      	movs	r1, #143	@ 0x8f
 800d4cc:	f001 fc6c 	bl	800eda8 <__assert_func>
 800d4d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d4d4:	6006      	str	r6, [r0, #0]
 800d4d6:	60c6      	str	r6, [r0, #12]
 800d4d8:	b13c      	cbz	r4, 800d4ea <_Bfree+0x3a>
 800d4da:	69eb      	ldr	r3, [r5, #28]
 800d4dc:	6862      	ldr	r2, [r4, #4]
 800d4de:	68db      	ldr	r3, [r3, #12]
 800d4e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d4e4:	6021      	str	r1, [r4, #0]
 800d4e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d4ea:	bd70      	pop	{r4, r5, r6, pc}
 800d4ec:	0800f3fc 	.word	0x0800f3fc
 800d4f0:	0800f4dc 	.word	0x0800f4dc

0800d4f4 <__multadd>:
 800d4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4f8:	690d      	ldr	r5, [r1, #16]
 800d4fa:	4607      	mov	r7, r0
 800d4fc:	460c      	mov	r4, r1
 800d4fe:	461e      	mov	r6, r3
 800d500:	f101 0c14 	add.w	ip, r1, #20
 800d504:	2000      	movs	r0, #0
 800d506:	f8dc 3000 	ldr.w	r3, [ip]
 800d50a:	b299      	uxth	r1, r3
 800d50c:	fb02 6101 	mla	r1, r2, r1, r6
 800d510:	0c1e      	lsrs	r6, r3, #16
 800d512:	0c0b      	lsrs	r3, r1, #16
 800d514:	fb02 3306 	mla	r3, r2, r6, r3
 800d518:	b289      	uxth	r1, r1
 800d51a:	3001      	adds	r0, #1
 800d51c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d520:	4285      	cmp	r5, r0
 800d522:	f84c 1b04 	str.w	r1, [ip], #4
 800d526:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d52a:	dcec      	bgt.n	800d506 <__multadd+0x12>
 800d52c:	b30e      	cbz	r6, 800d572 <__multadd+0x7e>
 800d52e:	68a3      	ldr	r3, [r4, #8]
 800d530:	42ab      	cmp	r3, r5
 800d532:	dc19      	bgt.n	800d568 <__multadd+0x74>
 800d534:	6861      	ldr	r1, [r4, #4]
 800d536:	4638      	mov	r0, r7
 800d538:	3101      	adds	r1, #1
 800d53a:	f7ff ff79 	bl	800d430 <_Balloc>
 800d53e:	4680      	mov	r8, r0
 800d540:	b928      	cbnz	r0, 800d54e <__multadd+0x5a>
 800d542:	4602      	mov	r2, r0
 800d544:	4b0c      	ldr	r3, [pc, #48]	@ (800d578 <__multadd+0x84>)
 800d546:	480d      	ldr	r0, [pc, #52]	@ (800d57c <__multadd+0x88>)
 800d548:	21ba      	movs	r1, #186	@ 0xba
 800d54a:	f001 fc2d 	bl	800eda8 <__assert_func>
 800d54e:	6922      	ldr	r2, [r4, #16]
 800d550:	3202      	adds	r2, #2
 800d552:	f104 010c 	add.w	r1, r4, #12
 800d556:	0092      	lsls	r2, r2, #2
 800d558:	300c      	adds	r0, #12
 800d55a:	f7fe fcb2 	bl	800bec2 <memcpy>
 800d55e:	4621      	mov	r1, r4
 800d560:	4638      	mov	r0, r7
 800d562:	f7ff ffa5 	bl	800d4b0 <_Bfree>
 800d566:	4644      	mov	r4, r8
 800d568:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d56c:	3501      	adds	r5, #1
 800d56e:	615e      	str	r6, [r3, #20]
 800d570:	6125      	str	r5, [r4, #16]
 800d572:	4620      	mov	r0, r4
 800d574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d578:	0800f46b 	.word	0x0800f46b
 800d57c:	0800f4dc 	.word	0x0800f4dc

0800d580 <__s2b>:
 800d580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d584:	460c      	mov	r4, r1
 800d586:	4615      	mov	r5, r2
 800d588:	461f      	mov	r7, r3
 800d58a:	2209      	movs	r2, #9
 800d58c:	3308      	adds	r3, #8
 800d58e:	4606      	mov	r6, r0
 800d590:	fb93 f3f2 	sdiv	r3, r3, r2
 800d594:	2100      	movs	r1, #0
 800d596:	2201      	movs	r2, #1
 800d598:	429a      	cmp	r2, r3
 800d59a:	db09      	blt.n	800d5b0 <__s2b+0x30>
 800d59c:	4630      	mov	r0, r6
 800d59e:	f7ff ff47 	bl	800d430 <_Balloc>
 800d5a2:	b940      	cbnz	r0, 800d5b6 <__s2b+0x36>
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	4b19      	ldr	r3, [pc, #100]	@ (800d60c <__s2b+0x8c>)
 800d5a8:	4819      	ldr	r0, [pc, #100]	@ (800d610 <__s2b+0x90>)
 800d5aa:	21d3      	movs	r1, #211	@ 0xd3
 800d5ac:	f001 fbfc 	bl	800eda8 <__assert_func>
 800d5b0:	0052      	lsls	r2, r2, #1
 800d5b2:	3101      	adds	r1, #1
 800d5b4:	e7f0      	b.n	800d598 <__s2b+0x18>
 800d5b6:	9b08      	ldr	r3, [sp, #32]
 800d5b8:	6143      	str	r3, [r0, #20]
 800d5ba:	2d09      	cmp	r5, #9
 800d5bc:	f04f 0301 	mov.w	r3, #1
 800d5c0:	6103      	str	r3, [r0, #16]
 800d5c2:	dd16      	ble.n	800d5f2 <__s2b+0x72>
 800d5c4:	f104 0909 	add.w	r9, r4, #9
 800d5c8:	46c8      	mov	r8, r9
 800d5ca:	442c      	add	r4, r5
 800d5cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d5d0:	4601      	mov	r1, r0
 800d5d2:	3b30      	subs	r3, #48	@ 0x30
 800d5d4:	220a      	movs	r2, #10
 800d5d6:	4630      	mov	r0, r6
 800d5d8:	f7ff ff8c 	bl	800d4f4 <__multadd>
 800d5dc:	45a0      	cmp	r8, r4
 800d5de:	d1f5      	bne.n	800d5cc <__s2b+0x4c>
 800d5e0:	f1a5 0408 	sub.w	r4, r5, #8
 800d5e4:	444c      	add	r4, r9
 800d5e6:	1b2d      	subs	r5, r5, r4
 800d5e8:	1963      	adds	r3, r4, r5
 800d5ea:	42bb      	cmp	r3, r7
 800d5ec:	db04      	blt.n	800d5f8 <__s2b+0x78>
 800d5ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5f2:	340a      	adds	r4, #10
 800d5f4:	2509      	movs	r5, #9
 800d5f6:	e7f6      	b.n	800d5e6 <__s2b+0x66>
 800d5f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d5fc:	4601      	mov	r1, r0
 800d5fe:	3b30      	subs	r3, #48	@ 0x30
 800d600:	220a      	movs	r2, #10
 800d602:	4630      	mov	r0, r6
 800d604:	f7ff ff76 	bl	800d4f4 <__multadd>
 800d608:	e7ee      	b.n	800d5e8 <__s2b+0x68>
 800d60a:	bf00      	nop
 800d60c:	0800f46b 	.word	0x0800f46b
 800d610:	0800f4dc 	.word	0x0800f4dc

0800d614 <__hi0bits>:
 800d614:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d618:	4603      	mov	r3, r0
 800d61a:	bf36      	itet	cc
 800d61c:	0403      	lslcc	r3, r0, #16
 800d61e:	2000      	movcs	r0, #0
 800d620:	2010      	movcc	r0, #16
 800d622:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d626:	bf3c      	itt	cc
 800d628:	021b      	lslcc	r3, r3, #8
 800d62a:	3008      	addcc	r0, #8
 800d62c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d630:	bf3c      	itt	cc
 800d632:	011b      	lslcc	r3, r3, #4
 800d634:	3004      	addcc	r0, #4
 800d636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d63a:	bf3c      	itt	cc
 800d63c:	009b      	lslcc	r3, r3, #2
 800d63e:	3002      	addcc	r0, #2
 800d640:	2b00      	cmp	r3, #0
 800d642:	db05      	blt.n	800d650 <__hi0bits+0x3c>
 800d644:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d648:	f100 0001 	add.w	r0, r0, #1
 800d64c:	bf08      	it	eq
 800d64e:	2020      	moveq	r0, #32
 800d650:	4770      	bx	lr

0800d652 <__lo0bits>:
 800d652:	6803      	ldr	r3, [r0, #0]
 800d654:	4602      	mov	r2, r0
 800d656:	f013 0007 	ands.w	r0, r3, #7
 800d65a:	d00b      	beq.n	800d674 <__lo0bits+0x22>
 800d65c:	07d9      	lsls	r1, r3, #31
 800d65e:	d421      	bmi.n	800d6a4 <__lo0bits+0x52>
 800d660:	0798      	lsls	r0, r3, #30
 800d662:	bf49      	itett	mi
 800d664:	085b      	lsrmi	r3, r3, #1
 800d666:	089b      	lsrpl	r3, r3, #2
 800d668:	2001      	movmi	r0, #1
 800d66a:	6013      	strmi	r3, [r2, #0]
 800d66c:	bf5c      	itt	pl
 800d66e:	6013      	strpl	r3, [r2, #0]
 800d670:	2002      	movpl	r0, #2
 800d672:	4770      	bx	lr
 800d674:	b299      	uxth	r1, r3
 800d676:	b909      	cbnz	r1, 800d67c <__lo0bits+0x2a>
 800d678:	0c1b      	lsrs	r3, r3, #16
 800d67a:	2010      	movs	r0, #16
 800d67c:	b2d9      	uxtb	r1, r3
 800d67e:	b909      	cbnz	r1, 800d684 <__lo0bits+0x32>
 800d680:	3008      	adds	r0, #8
 800d682:	0a1b      	lsrs	r3, r3, #8
 800d684:	0719      	lsls	r1, r3, #28
 800d686:	bf04      	itt	eq
 800d688:	091b      	lsreq	r3, r3, #4
 800d68a:	3004      	addeq	r0, #4
 800d68c:	0799      	lsls	r1, r3, #30
 800d68e:	bf04      	itt	eq
 800d690:	089b      	lsreq	r3, r3, #2
 800d692:	3002      	addeq	r0, #2
 800d694:	07d9      	lsls	r1, r3, #31
 800d696:	d403      	bmi.n	800d6a0 <__lo0bits+0x4e>
 800d698:	085b      	lsrs	r3, r3, #1
 800d69a:	f100 0001 	add.w	r0, r0, #1
 800d69e:	d003      	beq.n	800d6a8 <__lo0bits+0x56>
 800d6a0:	6013      	str	r3, [r2, #0]
 800d6a2:	4770      	bx	lr
 800d6a4:	2000      	movs	r0, #0
 800d6a6:	4770      	bx	lr
 800d6a8:	2020      	movs	r0, #32
 800d6aa:	4770      	bx	lr

0800d6ac <__i2b>:
 800d6ac:	b510      	push	{r4, lr}
 800d6ae:	460c      	mov	r4, r1
 800d6b0:	2101      	movs	r1, #1
 800d6b2:	f7ff febd 	bl	800d430 <_Balloc>
 800d6b6:	4602      	mov	r2, r0
 800d6b8:	b928      	cbnz	r0, 800d6c6 <__i2b+0x1a>
 800d6ba:	4b05      	ldr	r3, [pc, #20]	@ (800d6d0 <__i2b+0x24>)
 800d6bc:	4805      	ldr	r0, [pc, #20]	@ (800d6d4 <__i2b+0x28>)
 800d6be:	f240 1145 	movw	r1, #325	@ 0x145
 800d6c2:	f001 fb71 	bl	800eda8 <__assert_func>
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	6144      	str	r4, [r0, #20]
 800d6ca:	6103      	str	r3, [r0, #16]
 800d6cc:	bd10      	pop	{r4, pc}
 800d6ce:	bf00      	nop
 800d6d0:	0800f46b 	.word	0x0800f46b
 800d6d4:	0800f4dc 	.word	0x0800f4dc

0800d6d8 <__multiply>:
 800d6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6dc:	4614      	mov	r4, r2
 800d6de:	690a      	ldr	r2, [r1, #16]
 800d6e0:	6923      	ldr	r3, [r4, #16]
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	bfa8      	it	ge
 800d6e6:	4623      	movge	r3, r4
 800d6e8:	460f      	mov	r7, r1
 800d6ea:	bfa4      	itt	ge
 800d6ec:	460c      	movge	r4, r1
 800d6ee:	461f      	movge	r7, r3
 800d6f0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d6f4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d6f8:	68a3      	ldr	r3, [r4, #8]
 800d6fa:	6861      	ldr	r1, [r4, #4]
 800d6fc:	eb0a 0609 	add.w	r6, sl, r9
 800d700:	42b3      	cmp	r3, r6
 800d702:	b085      	sub	sp, #20
 800d704:	bfb8      	it	lt
 800d706:	3101      	addlt	r1, #1
 800d708:	f7ff fe92 	bl	800d430 <_Balloc>
 800d70c:	b930      	cbnz	r0, 800d71c <__multiply+0x44>
 800d70e:	4602      	mov	r2, r0
 800d710:	4b44      	ldr	r3, [pc, #272]	@ (800d824 <__multiply+0x14c>)
 800d712:	4845      	ldr	r0, [pc, #276]	@ (800d828 <__multiply+0x150>)
 800d714:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d718:	f001 fb46 	bl	800eda8 <__assert_func>
 800d71c:	f100 0514 	add.w	r5, r0, #20
 800d720:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d724:	462b      	mov	r3, r5
 800d726:	2200      	movs	r2, #0
 800d728:	4543      	cmp	r3, r8
 800d72a:	d321      	bcc.n	800d770 <__multiply+0x98>
 800d72c:	f107 0114 	add.w	r1, r7, #20
 800d730:	f104 0214 	add.w	r2, r4, #20
 800d734:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d738:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d73c:	9302      	str	r3, [sp, #8]
 800d73e:	1b13      	subs	r3, r2, r4
 800d740:	3b15      	subs	r3, #21
 800d742:	f023 0303 	bic.w	r3, r3, #3
 800d746:	3304      	adds	r3, #4
 800d748:	f104 0715 	add.w	r7, r4, #21
 800d74c:	42ba      	cmp	r2, r7
 800d74e:	bf38      	it	cc
 800d750:	2304      	movcc	r3, #4
 800d752:	9301      	str	r3, [sp, #4]
 800d754:	9b02      	ldr	r3, [sp, #8]
 800d756:	9103      	str	r1, [sp, #12]
 800d758:	428b      	cmp	r3, r1
 800d75a:	d80c      	bhi.n	800d776 <__multiply+0x9e>
 800d75c:	2e00      	cmp	r6, #0
 800d75e:	dd03      	ble.n	800d768 <__multiply+0x90>
 800d760:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d764:	2b00      	cmp	r3, #0
 800d766:	d05b      	beq.n	800d820 <__multiply+0x148>
 800d768:	6106      	str	r6, [r0, #16]
 800d76a:	b005      	add	sp, #20
 800d76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d770:	f843 2b04 	str.w	r2, [r3], #4
 800d774:	e7d8      	b.n	800d728 <__multiply+0x50>
 800d776:	f8b1 a000 	ldrh.w	sl, [r1]
 800d77a:	f1ba 0f00 	cmp.w	sl, #0
 800d77e:	d024      	beq.n	800d7ca <__multiply+0xf2>
 800d780:	f104 0e14 	add.w	lr, r4, #20
 800d784:	46a9      	mov	r9, r5
 800d786:	f04f 0c00 	mov.w	ip, #0
 800d78a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d78e:	f8d9 3000 	ldr.w	r3, [r9]
 800d792:	fa1f fb87 	uxth.w	fp, r7
 800d796:	b29b      	uxth	r3, r3
 800d798:	fb0a 330b 	mla	r3, sl, fp, r3
 800d79c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d7a0:	f8d9 7000 	ldr.w	r7, [r9]
 800d7a4:	4463      	add	r3, ip
 800d7a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d7aa:	fb0a c70b 	mla	r7, sl, fp, ip
 800d7ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d7b2:	b29b      	uxth	r3, r3
 800d7b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d7b8:	4572      	cmp	r2, lr
 800d7ba:	f849 3b04 	str.w	r3, [r9], #4
 800d7be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d7c2:	d8e2      	bhi.n	800d78a <__multiply+0xb2>
 800d7c4:	9b01      	ldr	r3, [sp, #4]
 800d7c6:	f845 c003 	str.w	ip, [r5, r3]
 800d7ca:	9b03      	ldr	r3, [sp, #12]
 800d7cc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d7d0:	3104      	adds	r1, #4
 800d7d2:	f1b9 0f00 	cmp.w	r9, #0
 800d7d6:	d021      	beq.n	800d81c <__multiply+0x144>
 800d7d8:	682b      	ldr	r3, [r5, #0]
 800d7da:	f104 0c14 	add.w	ip, r4, #20
 800d7de:	46ae      	mov	lr, r5
 800d7e0:	f04f 0a00 	mov.w	sl, #0
 800d7e4:	f8bc b000 	ldrh.w	fp, [ip]
 800d7e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d7ec:	fb09 770b 	mla	r7, r9, fp, r7
 800d7f0:	4457      	add	r7, sl
 800d7f2:	b29b      	uxth	r3, r3
 800d7f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d7f8:	f84e 3b04 	str.w	r3, [lr], #4
 800d7fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d800:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d804:	f8be 3000 	ldrh.w	r3, [lr]
 800d808:	fb09 330a 	mla	r3, r9, sl, r3
 800d80c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d810:	4562      	cmp	r2, ip
 800d812:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d816:	d8e5      	bhi.n	800d7e4 <__multiply+0x10c>
 800d818:	9f01      	ldr	r7, [sp, #4]
 800d81a:	51eb      	str	r3, [r5, r7]
 800d81c:	3504      	adds	r5, #4
 800d81e:	e799      	b.n	800d754 <__multiply+0x7c>
 800d820:	3e01      	subs	r6, #1
 800d822:	e79b      	b.n	800d75c <__multiply+0x84>
 800d824:	0800f46b 	.word	0x0800f46b
 800d828:	0800f4dc 	.word	0x0800f4dc

0800d82c <__pow5mult>:
 800d82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d830:	4615      	mov	r5, r2
 800d832:	f012 0203 	ands.w	r2, r2, #3
 800d836:	4607      	mov	r7, r0
 800d838:	460e      	mov	r6, r1
 800d83a:	d007      	beq.n	800d84c <__pow5mult+0x20>
 800d83c:	4c25      	ldr	r4, [pc, #148]	@ (800d8d4 <__pow5mult+0xa8>)
 800d83e:	3a01      	subs	r2, #1
 800d840:	2300      	movs	r3, #0
 800d842:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d846:	f7ff fe55 	bl	800d4f4 <__multadd>
 800d84a:	4606      	mov	r6, r0
 800d84c:	10ad      	asrs	r5, r5, #2
 800d84e:	d03d      	beq.n	800d8cc <__pow5mult+0xa0>
 800d850:	69fc      	ldr	r4, [r7, #28]
 800d852:	b97c      	cbnz	r4, 800d874 <__pow5mult+0x48>
 800d854:	2010      	movs	r0, #16
 800d856:	f7ff fd23 	bl	800d2a0 <malloc>
 800d85a:	4602      	mov	r2, r0
 800d85c:	61f8      	str	r0, [r7, #28]
 800d85e:	b928      	cbnz	r0, 800d86c <__pow5mult+0x40>
 800d860:	4b1d      	ldr	r3, [pc, #116]	@ (800d8d8 <__pow5mult+0xac>)
 800d862:	481e      	ldr	r0, [pc, #120]	@ (800d8dc <__pow5mult+0xb0>)
 800d864:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d868:	f001 fa9e 	bl	800eda8 <__assert_func>
 800d86c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d870:	6004      	str	r4, [r0, #0]
 800d872:	60c4      	str	r4, [r0, #12]
 800d874:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d878:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d87c:	b94c      	cbnz	r4, 800d892 <__pow5mult+0x66>
 800d87e:	f240 2171 	movw	r1, #625	@ 0x271
 800d882:	4638      	mov	r0, r7
 800d884:	f7ff ff12 	bl	800d6ac <__i2b>
 800d888:	2300      	movs	r3, #0
 800d88a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d88e:	4604      	mov	r4, r0
 800d890:	6003      	str	r3, [r0, #0]
 800d892:	f04f 0900 	mov.w	r9, #0
 800d896:	07eb      	lsls	r3, r5, #31
 800d898:	d50a      	bpl.n	800d8b0 <__pow5mult+0x84>
 800d89a:	4631      	mov	r1, r6
 800d89c:	4622      	mov	r2, r4
 800d89e:	4638      	mov	r0, r7
 800d8a0:	f7ff ff1a 	bl	800d6d8 <__multiply>
 800d8a4:	4631      	mov	r1, r6
 800d8a6:	4680      	mov	r8, r0
 800d8a8:	4638      	mov	r0, r7
 800d8aa:	f7ff fe01 	bl	800d4b0 <_Bfree>
 800d8ae:	4646      	mov	r6, r8
 800d8b0:	106d      	asrs	r5, r5, #1
 800d8b2:	d00b      	beq.n	800d8cc <__pow5mult+0xa0>
 800d8b4:	6820      	ldr	r0, [r4, #0]
 800d8b6:	b938      	cbnz	r0, 800d8c8 <__pow5mult+0x9c>
 800d8b8:	4622      	mov	r2, r4
 800d8ba:	4621      	mov	r1, r4
 800d8bc:	4638      	mov	r0, r7
 800d8be:	f7ff ff0b 	bl	800d6d8 <__multiply>
 800d8c2:	6020      	str	r0, [r4, #0]
 800d8c4:	f8c0 9000 	str.w	r9, [r0]
 800d8c8:	4604      	mov	r4, r0
 800d8ca:	e7e4      	b.n	800d896 <__pow5mult+0x6a>
 800d8cc:	4630      	mov	r0, r6
 800d8ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8d2:	bf00      	nop
 800d8d4:	0800f538 	.word	0x0800f538
 800d8d8:	0800f3fc 	.word	0x0800f3fc
 800d8dc:	0800f4dc 	.word	0x0800f4dc

0800d8e0 <__lshift>:
 800d8e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8e4:	460c      	mov	r4, r1
 800d8e6:	6849      	ldr	r1, [r1, #4]
 800d8e8:	6923      	ldr	r3, [r4, #16]
 800d8ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d8ee:	68a3      	ldr	r3, [r4, #8]
 800d8f0:	4607      	mov	r7, r0
 800d8f2:	4691      	mov	r9, r2
 800d8f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d8f8:	f108 0601 	add.w	r6, r8, #1
 800d8fc:	42b3      	cmp	r3, r6
 800d8fe:	db0b      	blt.n	800d918 <__lshift+0x38>
 800d900:	4638      	mov	r0, r7
 800d902:	f7ff fd95 	bl	800d430 <_Balloc>
 800d906:	4605      	mov	r5, r0
 800d908:	b948      	cbnz	r0, 800d91e <__lshift+0x3e>
 800d90a:	4602      	mov	r2, r0
 800d90c:	4b28      	ldr	r3, [pc, #160]	@ (800d9b0 <__lshift+0xd0>)
 800d90e:	4829      	ldr	r0, [pc, #164]	@ (800d9b4 <__lshift+0xd4>)
 800d910:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d914:	f001 fa48 	bl	800eda8 <__assert_func>
 800d918:	3101      	adds	r1, #1
 800d91a:	005b      	lsls	r3, r3, #1
 800d91c:	e7ee      	b.n	800d8fc <__lshift+0x1c>
 800d91e:	2300      	movs	r3, #0
 800d920:	f100 0114 	add.w	r1, r0, #20
 800d924:	f100 0210 	add.w	r2, r0, #16
 800d928:	4618      	mov	r0, r3
 800d92a:	4553      	cmp	r3, sl
 800d92c:	db33      	blt.n	800d996 <__lshift+0xb6>
 800d92e:	6920      	ldr	r0, [r4, #16]
 800d930:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d934:	f104 0314 	add.w	r3, r4, #20
 800d938:	f019 091f 	ands.w	r9, r9, #31
 800d93c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d940:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d944:	d02b      	beq.n	800d99e <__lshift+0xbe>
 800d946:	f1c9 0e20 	rsb	lr, r9, #32
 800d94a:	468a      	mov	sl, r1
 800d94c:	2200      	movs	r2, #0
 800d94e:	6818      	ldr	r0, [r3, #0]
 800d950:	fa00 f009 	lsl.w	r0, r0, r9
 800d954:	4310      	orrs	r0, r2
 800d956:	f84a 0b04 	str.w	r0, [sl], #4
 800d95a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d95e:	459c      	cmp	ip, r3
 800d960:	fa22 f20e 	lsr.w	r2, r2, lr
 800d964:	d8f3      	bhi.n	800d94e <__lshift+0x6e>
 800d966:	ebac 0304 	sub.w	r3, ip, r4
 800d96a:	3b15      	subs	r3, #21
 800d96c:	f023 0303 	bic.w	r3, r3, #3
 800d970:	3304      	adds	r3, #4
 800d972:	f104 0015 	add.w	r0, r4, #21
 800d976:	4584      	cmp	ip, r0
 800d978:	bf38      	it	cc
 800d97a:	2304      	movcc	r3, #4
 800d97c:	50ca      	str	r2, [r1, r3]
 800d97e:	b10a      	cbz	r2, 800d984 <__lshift+0xa4>
 800d980:	f108 0602 	add.w	r6, r8, #2
 800d984:	3e01      	subs	r6, #1
 800d986:	4638      	mov	r0, r7
 800d988:	612e      	str	r6, [r5, #16]
 800d98a:	4621      	mov	r1, r4
 800d98c:	f7ff fd90 	bl	800d4b0 <_Bfree>
 800d990:	4628      	mov	r0, r5
 800d992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d996:	f842 0f04 	str.w	r0, [r2, #4]!
 800d99a:	3301      	adds	r3, #1
 800d99c:	e7c5      	b.n	800d92a <__lshift+0x4a>
 800d99e:	3904      	subs	r1, #4
 800d9a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d9a8:	459c      	cmp	ip, r3
 800d9aa:	d8f9      	bhi.n	800d9a0 <__lshift+0xc0>
 800d9ac:	e7ea      	b.n	800d984 <__lshift+0xa4>
 800d9ae:	bf00      	nop
 800d9b0:	0800f46b 	.word	0x0800f46b
 800d9b4:	0800f4dc 	.word	0x0800f4dc

0800d9b8 <__mcmp>:
 800d9b8:	690a      	ldr	r2, [r1, #16]
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	6900      	ldr	r0, [r0, #16]
 800d9be:	1a80      	subs	r0, r0, r2
 800d9c0:	b530      	push	{r4, r5, lr}
 800d9c2:	d10e      	bne.n	800d9e2 <__mcmp+0x2a>
 800d9c4:	3314      	adds	r3, #20
 800d9c6:	3114      	adds	r1, #20
 800d9c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d9cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d9d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d9d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d9d8:	4295      	cmp	r5, r2
 800d9da:	d003      	beq.n	800d9e4 <__mcmp+0x2c>
 800d9dc:	d205      	bcs.n	800d9ea <__mcmp+0x32>
 800d9de:	f04f 30ff 	mov.w	r0, #4294967295
 800d9e2:	bd30      	pop	{r4, r5, pc}
 800d9e4:	42a3      	cmp	r3, r4
 800d9e6:	d3f3      	bcc.n	800d9d0 <__mcmp+0x18>
 800d9e8:	e7fb      	b.n	800d9e2 <__mcmp+0x2a>
 800d9ea:	2001      	movs	r0, #1
 800d9ec:	e7f9      	b.n	800d9e2 <__mcmp+0x2a>
	...

0800d9f0 <__mdiff>:
 800d9f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9f4:	4689      	mov	r9, r1
 800d9f6:	4606      	mov	r6, r0
 800d9f8:	4611      	mov	r1, r2
 800d9fa:	4648      	mov	r0, r9
 800d9fc:	4614      	mov	r4, r2
 800d9fe:	f7ff ffdb 	bl	800d9b8 <__mcmp>
 800da02:	1e05      	subs	r5, r0, #0
 800da04:	d112      	bne.n	800da2c <__mdiff+0x3c>
 800da06:	4629      	mov	r1, r5
 800da08:	4630      	mov	r0, r6
 800da0a:	f7ff fd11 	bl	800d430 <_Balloc>
 800da0e:	4602      	mov	r2, r0
 800da10:	b928      	cbnz	r0, 800da1e <__mdiff+0x2e>
 800da12:	4b3f      	ldr	r3, [pc, #252]	@ (800db10 <__mdiff+0x120>)
 800da14:	f240 2137 	movw	r1, #567	@ 0x237
 800da18:	483e      	ldr	r0, [pc, #248]	@ (800db14 <__mdiff+0x124>)
 800da1a:	f001 f9c5 	bl	800eda8 <__assert_func>
 800da1e:	2301      	movs	r3, #1
 800da20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800da24:	4610      	mov	r0, r2
 800da26:	b003      	add	sp, #12
 800da28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da2c:	bfbc      	itt	lt
 800da2e:	464b      	movlt	r3, r9
 800da30:	46a1      	movlt	r9, r4
 800da32:	4630      	mov	r0, r6
 800da34:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800da38:	bfba      	itte	lt
 800da3a:	461c      	movlt	r4, r3
 800da3c:	2501      	movlt	r5, #1
 800da3e:	2500      	movge	r5, #0
 800da40:	f7ff fcf6 	bl	800d430 <_Balloc>
 800da44:	4602      	mov	r2, r0
 800da46:	b918      	cbnz	r0, 800da50 <__mdiff+0x60>
 800da48:	4b31      	ldr	r3, [pc, #196]	@ (800db10 <__mdiff+0x120>)
 800da4a:	f240 2145 	movw	r1, #581	@ 0x245
 800da4e:	e7e3      	b.n	800da18 <__mdiff+0x28>
 800da50:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800da54:	6926      	ldr	r6, [r4, #16]
 800da56:	60c5      	str	r5, [r0, #12]
 800da58:	f109 0310 	add.w	r3, r9, #16
 800da5c:	f109 0514 	add.w	r5, r9, #20
 800da60:	f104 0e14 	add.w	lr, r4, #20
 800da64:	f100 0b14 	add.w	fp, r0, #20
 800da68:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800da6c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800da70:	9301      	str	r3, [sp, #4]
 800da72:	46d9      	mov	r9, fp
 800da74:	f04f 0c00 	mov.w	ip, #0
 800da78:	9b01      	ldr	r3, [sp, #4]
 800da7a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800da7e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800da82:	9301      	str	r3, [sp, #4]
 800da84:	fa1f f38a 	uxth.w	r3, sl
 800da88:	4619      	mov	r1, r3
 800da8a:	b283      	uxth	r3, r0
 800da8c:	1acb      	subs	r3, r1, r3
 800da8e:	0c00      	lsrs	r0, r0, #16
 800da90:	4463      	add	r3, ip
 800da92:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800da96:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800daa0:	4576      	cmp	r6, lr
 800daa2:	f849 3b04 	str.w	r3, [r9], #4
 800daa6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800daaa:	d8e5      	bhi.n	800da78 <__mdiff+0x88>
 800daac:	1b33      	subs	r3, r6, r4
 800daae:	3b15      	subs	r3, #21
 800dab0:	f023 0303 	bic.w	r3, r3, #3
 800dab4:	3415      	adds	r4, #21
 800dab6:	3304      	adds	r3, #4
 800dab8:	42a6      	cmp	r6, r4
 800daba:	bf38      	it	cc
 800dabc:	2304      	movcc	r3, #4
 800dabe:	441d      	add	r5, r3
 800dac0:	445b      	add	r3, fp
 800dac2:	461e      	mov	r6, r3
 800dac4:	462c      	mov	r4, r5
 800dac6:	4544      	cmp	r4, r8
 800dac8:	d30e      	bcc.n	800dae8 <__mdiff+0xf8>
 800daca:	f108 0103 	add.w	r1, r8, #3
 800dace:	1b49      	subs	r1, r1, r5
 800dad0:	f021 0103 	bic.w	r1, r1, #3
 800dad4:	3d03      	subs	r5, #3
 800dad6:	45a8      	cmp	r8, r5
 800dad8:	bf38      	it	cc
 800dada:	2100      	movcc	r1, #0
 800dadc:	440b      	add	r3, r1
 800dade:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dae2:	b191      	cbz	r1, 800db0a <__mdiff+0x11a>
 800dae4:	6117      	str	r7, [r2, #16]
 800dae6:	e79d      	b.n	800da24 <__mdiff+0x34>
 800dae8:	f854 1b04 	ldr.w	r1, [r4], #4
 800daec:	46e6      	mov	lr, ip
 800daee:	0c08      	lsrs	r0, r1, #16
 800daf0:	fa1c fc81 	uxtah	ip, ip, r1
 800daf4:	4471      	add	r1, lr
 800daf6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dafa:	b289      	uxth	r1, r1
 800dafc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800db00:	f846 1b04 	str.w	r1, [r6], #4
 800db04:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800db08:	e7dd      	b.n	800dac6 <__mdiff+0xd6>
 800db0a:	3f01      	subs	r7, #1
 800db0c:	e7e7      	b.n	800dade <__mdiff+0xee>
 800db0e:	bf00      	nop
 800db10:	0800f46b 	.word	0x0800f46b
 800db14:	0800f4dc 	.word	0x0800f4dc

0800db18 <__ulp>:
 800db18:	b082      	sub	sp, #8
 800db1a:	ed8d 0b00 	vstr	d0, [sp]
 800db1e:	9a01      	ldr	r2, [sp, #4]
 800db20:	4b0f      	ldr	r3, [pc, #60]	@ (800db60 <__ulp+0x48>)
 800db22:	4013      	ands	r3, r2
 800db24:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800db28:	2b00      	cmp	r3, #0
 800db2a:	dc08      	bgt.n	800db3e <__ulp+0x26>
 800db2c:	425b      	negs	r3, r3
 800db2e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800db32:	ea4f 5223 	mov.w	r2, r3, asr #20
 800db36:	da04      	bge.n	800db42 <__ulp+0x2a>
 800db38:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800db3c:	4113      	asrs	r3, r2
 800db3e:	2200      	movs	r2, #0
 800db40:	e008      	b.n	800db54 <__ulp+0x3c>
 800db42:	f1a2 0314 	sub.w	r3, r2, #20
 800db46:	2b1e      	cmp	r3, #30
 800db48:	bfda      	itte	le
 800db4a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800db4e:	40da      	lsrle	r2, r3
 800db50:	2201      	movgt	r2, #1
 800db52:	2300      	movs	r3, #0
 800db54:	4619      	mov	r1, r3
 800db56:	4610      	mov	r0, r2
 800db58:	ec41 0b10 	vmov	d0, r0, r1
 800db5c:	b002      	add	sp, #8
 800db5e:	4770      	bx	lr
 800db60:	7ff00000 	.word	0x7ff00000

0800db64 <__b2d>:
 800db64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db68:	6906      	ldr	r6, [r0, #16]
 800db6a:	f100 0814 	add.w	r8, r0, #20
 800db6e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800db72:	1f37      	subs	r7, r6, #4
 800db74:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800db78:	4610      	mov	r0, r2
 800db7a:	f7ff fd4b 	bl	800d614 <__hi0bits>
 800db7e:	f1c0 0320 	rsb	r3, r0, #32
 800db82:	280a      	cmp	r0, #10
 800db84:	600b      	str	r3, [r1, #0]
 800db86:	491b      	ldr	r1, [pc, #108]	@ (800dbf4 <__b2d+0x90>)
 800db88:	dc15      	bgt.n	800dbb6 <__b2d+0x52>
 800db8a:	f1c0 0c0b 	rsb	ip, r0, #11
 800db8e:	fa22 f30c 	lsr.w	r3, r2, ip
 800db92:	45b8      	cmp	r8, r7
 800db94:	ea43 0501 	orr.w	r5, r3, r1
 800db98:	bf34      	ite	cc
 800db9a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800db9e:	2300      	movcs	r3, #0
 800dba0:	3015      	adds	r0, #21
 800dba2:	fa02 f000 	lsl.w	r0, r2, r0
 800dba6:	fa23 f30c 	lsr.w	r3, r3, ip
 800dbaa:	4303      	orrs	r3, r0
 800dbac:	461c      	mov	r4, r3
 800dbae:	ec45 4b10 	vmov	d0, r4, r5
 800dbb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbb6:	45b8      	cmp	r8, r7
 800dbb8:	bf3a      	itte	cc
 800dbba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dbbe:	f1a6 0708 	subcc.w	r7, r6, #8
 800dbc2:	2300      	movcs	r3, #0
 800dbc4:	380b      	subs	r0, #11
 800dbc6:	d012      	beq.n	800dbee <__b2d+0x8a>
 800dbc8:	f1c0 0120 	rsb	r1, r0, #32
 800dbcc:	fa23 f401 	lsr.w	r4, r3, r1
 800dbd0:	4082      	lsls	r2, r0
 800dbd2:	4322      	orrs	r2, r4
 800dbd4:	4547      	cmp	r7, r8
 800dbd6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800dbda:	bf8c      	ite	hi
 800dbdc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800dbe0:	2200      	movls	r2, #0
 800dbe2:	4083      	lsls	r3, r0
 800dbe4:	40ca      	lsrs	r2, r1
 800dbe6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800dbea:	4313      	orrs	r3, r2
 800dbec:	e7de      	b.n	800dbac <__b2d+0x48>
 800dbee:	ea42 0501 	orr.w	r5, r2, r1
 800dbf2:	e7db      	b.n	800dbac <__b2d+0x48>
 800dbf4:	3ff00000 	.word	0x3ff00000

0800dbf8 <__d2b>:
 800dbf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dbfc:	460f      	mov	r7, r1
 800dbfe:	2101      	movs	r1, #1
 800dc00:	ec59 8b10 	vmov	r8, r9, d0
 800dc04:	4616      	mov	r6, r2
 800dc06:	f7ff fc13 	bl	800d430 <_Balloc>
 800dc0a:	4604      	mov	r4, r0
 800dc0c:	b930      	cbnz	r0, 800dc1c <__d2b+0x24>
 800dc0e:	4602      	mov	r2, r0
 800dc10:	4b23      	ldr	r3, [pc, #140]	@ (800dca0 <__d2b+0xa8>)
 800dc12:	4824      	ldr	r0, [pc, #144]	@ (800dca4 <__d2b+0xac>)
 800dc14:	f240 310f 	movw	r1, #783	@ 0x30f
 800dc18:	f001 f8c6 	bl	800eda8 <__assert_func>
 800dc1c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dc20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dc24:	b10d      	cbz	r5, 800dc2a <__d2b+0x32>
 800dc26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dc2a:	9301      	str	r3, [sp, #4]
 800dc2c:	f1b8 0300 	subs.w	r3, r8, #0
 800dc30:	d023      	beq.n	800dc7a <__d2b+0x82>
 800dc32:	4668      	mov	r0, sp
 800dc34:	9300      	str	r3, [sp, #0]
 800dc36:	f7ff fd0c 	bl	800d652 <__lo0bits>
 800dc3a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dc3e:	b1d0      	cbz	r0, 800dc76 <__d2b+0x7e>
 800dc40:	f1c0 0320 	rsb	r3, r0, #32
 800dc44:	fa02 f303 	lsl.w	r3, r2, r3
 800dc48:	430b      	orrs	r3, r1
 800dc4a:	40c2      	lsrs	r2, r0
 800dc4c:	6163      	str	r3, [r4, #20]
 800dc4e:	9201      	str	r2, [sp, #4]
 800dc50:	9b01      	ldr	r3, [sp, #4]
 800dc52:	61a3      	str	r3, [r4, #24]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	bf0c      	ite	eq
 800dc58:	2201      	moveq	r2, #1
 800dc5a:	2202      	movne	r2, #2
 800dc5c:	6122      	str	r2, [r4, #16]
 800dc5e:	b1a5      	cbz	r5, 800dc8a <__d2b+0x92>
 800dc60:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dc64:	4405      	add	r5, r0
 800dc66:	603d      	str	r5, [r7, #0]
 800dc68:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dc6c:	6030      	str	r0, [r6, #0]
 800dc6e:	4620      	mov	r0, r4
 800dc70:	b003      	add	sp, #12
 800dc72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc76:	6161      	str	r1, [r4, #20]
 800dc78:	e7ea      	b.n	800dc50 <__d2b+0x58>
 800dc7a:	a801      	add	r0, sp, #4
 800dc7c:	f7ff fce9 	bl	800d652 <__lo0bits>
 800dc80:	9b01      	ldr	r3, [sp, #4]
 800dc82:	6163      	str	r3, [r4, #20]
 800dc84:	3020      	adds	r0, #32
 800dc86:	2201      	movs	r2, #1
 800dc88:	e7e8      	b.n	800dc5c <__d2b+0x64>
 800dc8a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dc8e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800dc92:	6038      	str	r0, [r7, #0]
 800dc94:	6918      	ldr	r0, [r3, #16]
 800dc96:	f7ff fcbd 	bl	800d614 <__hi0bits>
 800dc9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dc9e:	e7e5      	b.n	800dc6c <__d2b+0x74>
 800dca0:	0800f46b 	.word	0x0800f46b
 800dca4:	0800f4dc 	.word	0x0800f4dc

0800dca8 <__ratio>:
 800dca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcac:	b085      	sub	sp, #20
 800dcae:	e9cd 1000 	strd	r1, r0, [sp]
 800dcb2:	a902      	add	r1, sp, #8
 800dcb4:	f7ff ff56 	bl	800db64 <__b2d>
 800dcb8:	9800      	ldr	r0, [sp, #0]
 800dcba:	a903      	add	r1, sp, #12
 800dcbc:	ec55 4b10 	vmov	r4, r5, d0
 800dcc0:	f7ff ff50 	bl	800db64 <__b2d>
 800dcc4:	9b01      	ldr	r3, [sp, #4]
 800dcc6:	6919      	ldr	r1, [r3, #16]
 800dcc8:	9b00      	ldr	r3, [sp, #0]
 800dcca:	691b      	ldr	r3, [r3, #16]
 800dccc:	1ac9      	subs	r1, r1, r3
 800dcce:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800dcd2:	1a9b      	subs	r3, r3, r2
 800dcd4:	ec5b ab10 	vmov	sl, fp, d0
 800dcd8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	bfce      	itee	gt
 800dce0:	462a      	movgt	r2, r5
 800dce2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dce6:	465a      	movle	r2, fp
 800dce8:	462f      	mov	r7, r5
 800dcea:	46d9      	mov	r9, fp
 800dcec:	bfcc      	ite	gt
 800dcee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dcf2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800dcf6:	464b      	mov	r3, r9
 800dcf8:	4652      	mov	r2, sl
 800dcfa:	4620      	mov	r0, r4
 800dcfc:	4639      	mov	r1, r7
 800dcfe:	f7f2 fdad 	bl	800085c <__aeabi_ddiv>
 800dd02:	ec41 0b10 	vmov	d0, r0, r1
 800dd06:	b005      	add	sp, #20
 800dd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dd0c <__copybits>:
 800dd0c:	3901      	subs	r1, #1
 800dd0e:	b570      	push	{r4, r5, r6, lr}
 800dd10:	1149      	asrs	r1, r1, #5
 800dd12:	6914      	ldr	r4, [r2, #16]
 800dd14:	3101      	adds	r1, #1
 800dd16:	f102 0314 	add.w	r3, r2, #20
 800dd1a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dd1e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dd22:	1f05      	subs	r5, r0, #4
 800dd24:	42a3      	cmp	r3, r4
 800dd26:	d30c      	bcc.n	800dd42 <__copybits+0x36>
 800dd28:	1aa3      	subs	r3, r4, r2
 800dd2a:	3b11      	subs	r3, #17
 800dd2c:	f023 0303 	bic.w	r3, r3, #3
 800dd30:	3211      	adds	r2, #17
 800dd32:	42a2      	cmp	r2, r4
 800dd34:	bf88      	it	hi
 800dd36:	2300      	movhi	r3, #0
 800dd38:	4418      	add	r0, r3
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	4288      	cmp	r0, r1
 800dd3e:	d305      	bcc.n	800dd4c <__copybits+0x40>
 800dd40:	bd70      	pop	{r4, r5, r6, pc}
 800dd42:	f853 6b04 	ldr.w	r6, [r3], #4
 800dd46:	f845 6f04 	str.w	r6, [r5, #4]!
 800dd4a:	e7eb      	b.n	800dd24 <__copybits+0x18>
 800dd4c:	f840 3b04 	str.w	r3, [r0], #4
 800dd50:	e7f4      	b.n	800dd3c <__copybits+0x30>

0800dd52 <__any_on>:
 800dd52:	f100 0214 	add.w	r2, r0, #20
 800dd56:	6900      	ldr	r0, [r0, #16]
 800dd58:	114b      	asrs	r3, r1, #5
 800dd5a:	4298      	cmp	r0, r3
 800dd5c:	b510      	push	{r4, lr}
 800dd5e:	db11      	blt.n	800dd84 <__any_on+0x32>
 800dd60:	dd0a      	ble.n	800dd78 <__any_on+0x26>
 800dd62:	f011 011f 	ands.w	r1, r1, #31
 800dd66:	d007      	beq.n	800dd78 <__any_on+0x26>
 800dd68:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dd6c:	fa24 f001 	lsr.w	r0, r4, r1
 800dd70:	fa00 f101 	lsl.w	r1, r0, r1
 800dd74:	428c      	cmp	r4, r1
 800dd76:	d10b      	bne.n	800dd90 <__any_on+0x3e>
 800dd78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dd7c:	4293      	cmp	r3, r2
 800dd7e:	d803      	bhi.n	800dd88 <__any_on+0x36>
 800dd80:	2000      	movs	r0, #0
 800dd82:	bd10      	pop	{r4, pc}
 800dd84:	4603      	mov	r3, r0
 800dd86:	e7f7      	b.n	800dd78 <__any_on+0x26>
 800dd88:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dd8c:	2900      	cmp	r1, #0
 800dd8e:	d0f5      	beq.n	800dd7c <__any_on+0x2a>
 800dd90:	2001      	movs	r0, #1
 800dd92:	e7f6      	b.n	800dd82 <__any_on+0x30>

0800dd94 <_strtol_l.constprop.0>:
 800dd94:	2b24      	cmp	r3, #36	@ 0x24
 800dd96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd9a:	4686      	mov	lr, r0
 800dd9c:	4690      	mov	r8, r2
 800dd9e:	d801      	bhi.n	800dda4 <_strtol_l.constprop.0+0x10>
 800dda0:	2b01      	cmp	r3, #1
 800dda2:	d106      	bne.n	800ddb2 <_strtol_l.constprop.0+0x1e>
 800dda4:	f7fe f860 	bl	800be68 <__errno>
 800dda8:	2316      	movs	r3, #22
 800ddaa:	6003      	str	r3, [r0, #0]
 800ddac:	2000      	movs	r0, #0
 800ddae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddb2:	4834      	ldr	r0, [pc, #208]	@ (800de84 <_strtol_l.constprop.0+0xf0>)
 800ddb4:	460d      	mov	r5, r1
 800ddb6:	462a      	mov	r2, r5
 800ddb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ddbc:	5d06      	ldrb	r6, [r0, r4]
 800ddbe:	f016 0608 	ands.w	r6, r6, #8
 800ddc2:	d1f8      	bne.n	800ddb6 <_strtol_l.constprop.0+0x22>
 800ddc4:	2c2d      	cmp	r4, #45	@ 0x2d
 800ddc6:	d12d      	bne.n	800de24 <_strtol_l.constprop.0+0x90>
 800ddc8:	782c      	ldrb	r4, [r5, #0]
 800ddca:	2601      	movs	r6, #1
 800ddcc:	1c95      	adds	r5, r2, #2
 800ddce:	f033 0210 	bics.w	r2, r3, #16
 800ddd2:	d109      	bne.n	800dde8 <_strtol_l.constprop.0+0x54>
 800ddd4:	2c30      	cmp	r4, #48	@ 0x30
 800ddd6:	d12a      	bne.n	800de2e <_strtol_l.constprop.0+0x9a>
 800ddd8:	782a      	ldrb	r2, [r5, #0]
 800ddda:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ddde:	2a58      	cmp	r2, #88	@ 0x58
 800dde0:	d125      	bne.n	800de2e <_strtol_l.constprop.0+0x9a>
 800dde2:	786c      	ldrb	r4, [r5, #1]
 800dde4:	2310      	movs	r3, #16
 800dde6:	3502      	adds	r5, #2
 800dde8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ddec:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	fbbc f9f3 	udiv	r9, ip, r3
 800ddf6:	4610      	mov	r0, r2
 800ddf8:	fb03 ca19 	mls	sl, r3, r9, ip
 800ddfc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800de00:	2f09      	cmp	r7, #9
 800de02:	d81b      	bhi.n	800de3c <_strtol_l.constprop.0+0xa8>
 800de04:	463c      	mov	r4, r7
 800de06:	42a3      	cmp	r3, r4
 800de08:	dd27      	ble.n	800de5a <_strtol_l.constprop.0+0xc6>
 800de0a:	1c57      	adds	r7, r2, #1
 800de0c:	d007      	beq.n	800de1e <_strtol_l.constprop.0+0x8a>
 800de0e:	4581      	cmp	r9, r0
 800de10:	d320      	bcc.n	800de54 <_strtol_l.constprop.0+0xc0>
 800de12:	d101      	bne.n	800de18 <_strtol_l.constprop.0+0x84>
 800de14:	45a2      	cmp	sl, r4
 800de16:	db1d      	blt.n	800de54 <_strtol_l.constprop.0+0xc0>
 800de18:	fb00 4003 	mla	r0, r0, r3, r4
 800de1c:	2201      	movs	r2, #1
 800de1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800de22:	e7eb      	b.n	800ddfc <_strtol_l.constprop.0+0x68>
 800de24:	2c2b      	cmp	r4, #43	@ 0x2b
 800de26:	bf04      	itt	eq
 800de28:	782c      	ldrbeq	r4, [r5, #0]
 800de2a:	1c95      	addeq	r5, r2, #2
 800de2c:	e7cf      	b.n	800ddce <_strtol_l.constprop.0+0x3a>
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d1da      	bne.n	800dde8 <_strtol_l.constprop.0+0x54>
 800de32:	2c30      	cmp	r4, #48	@ 0x30
 800de34:	bf0c      	ite	eq
 800de36:	2308      	moveq	r3, #8
 800de38:	230a      	movne	r3, #10
 800de3a:	e7d5      	b.n	800dde8 <_strtol_l.constprop.0+0x54>
 800de3c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800de40:	2f19      	cmp	r7, #25
 800de42:	d801      	bhi.n	800de48 <_strtol_l.constprop.0+0xb4>
 800de44:	3c37      	subs	r4, #55	@ 0x37
 800de46:	e7de      	b.n	800de06 <_strtol_l.constprop.0+0x72>
 800de48:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800de4c:	2f19      	cmp	r7, #25
 800de4e:	d804      	bhi.n	800de5a <_strtol_l.constprop.0+0xc6>
 800de50:	3c57      	subs	r4, #87	@ 0x57
 800de52:	e7d8      	b.n	800de06 <_strtol_l.constprop.0+0x72>
 800de54:	f04f 32ff 	mov.w	r2, #4294967295
 800de58:	e7e1      	b.n	800de1e <_strtol_l.constprop.0+0x8a>
 800de5a:	1c53      	adds	r3, r2, #1
 800de5c:	d108      	bne.n	800de70 <_strtol_l.constprop.0+0xdc>
 800de5e:	2322      	movs	r3, #34	@ 0x22
 800de60:	f8ce 3000 	str.w	r3, [lr]
 800de64:	4660      	mov	r0, ip
 800de66:	f1b8 0f00 	cmp.w	r8, #0
 800de6a:	d0a0      	beq.n	800ddae <_strtol_l.constprop.0+0x1a>
 800de6c:	1e69      	subs	r1, r5, #1
 800de6e:	e006      	b.n	800de7e <_strtol_l.constprop.0+0xea>
 800de70:	b106      	cbz	r6, 800de74 <_strtol_l.constprop.0+0xe0>
 800de72:	4240      	negs	r0, r0
 800de74:	f1b8 0f00 	cmp.w	r8, #0
 800de78:	d099      	beq.n	800ddae <_strtol_l.constprop.0+0x1a>
 800de7a:	2a00      	cmp	r2, #0
 800de7c:	d1f6      	bne.n	800de6c <_strtol_l.constprop.0+0xd8>
 800de7e:	f8c8 1000 	str.w	r1, [r8]
 800de82:	e794      	b.n	800ddae <_strtol_l.constprop.0+0x1a>
 800de84:	0800f639 	.word	0x0800f639

0800de88 <_strtol_r>:
 800de88:	f7ff bf84 	b.w	800dd94 <_strtol_l.constprop.0>

0800de8c <__ascii_wctomb>:
 800de8c:	4603      	mov	r3, r0
 800de8e:	4608      	mov	r0, r1
 800de90:	b141      	cbz	r1, 800dea4 <__ascii_wctomb+0x18>
 800de92:	2aff      	cmp	r2, #255	@ 0xff
 800de94:	d904      	bls.n	800dea0 <__ascii_wctomb+0x14>
 800de96:	228a      	movs	r2, #138	@ 0x8a
 800de98:	601a      	str	r2, [r3, #0]
 800de9a:	f04f 30ff 	mov.w	r0, #4294967295
 800de9e:	4770      	bx	lr
 800dea0:	700a      	strb	r2, [r1, #0]
 800dea2:	2001      	movs	r0, #1
 800dea4:	4770      	bx	lr

0800dea6 <__ssputs_r>:
 800dea6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800deaa:	688e      	ldr	r6, [r1, #8]
 800deac:	461f      	mov	r7, r3
 800deae:	42be      	cmp	r6, r7
 800deb0:	680b      	ldr	r3, [r1, #0]
 800deb2:	4682      	mov	sl, r0
 800deb4:	460c      	mov	r4, r1
 800deb6:	4690      	mov	r8, r2
 800deb8:	d82d      	bhi.n	800df16 <__ssputs_r+0x70>
 800deba:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800debe:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dec2:	d026      	beq.n	800df12 <__ssputs_r+0x6c>
 800dec4:	6965      	ldr	r5, [r4, #20]
 800dec6:	6909      	ldr	r1, [r1, #16]
 800dec8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800decc:	eba3 0901 	sub.w	r9, r3, r1
 800ded0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ded4:	1c7b      	adds	r3, r7, #1
 800ded6:	444b      	add	r3, r9
 800ded8:	106d      	asrs	r5, r5, #1
 800deda:	429d      	cmp	r5, r3
 800dedc:	bf38      	it	cc
 800dede:	461d      	movcc	r5, r3
 800dee0:	0553      	lsls	r3, r2, #21
 800dee2:	d527      	bpl.n	800df34 <__ssputs_r+0x8e>
 800dee4:	4629      	mov	r1, r5
 800dee6:	f7ff fa05 	bl	800d2f4 <_malloc_r>
 800deea:	4606      	mov	r6, r0
 800deec:	b360      	cbz	r0, 800df48 <__ssputs_r+0xa2>
 800deee:	6921      	ldr	r1, [r4, #16]
 800def0:	464a      	mov	r2, r9
 800def2:	f7fd ffe6 	bl	800bec2 <memcpy>
 800def6:	89a3      	ldrh	r3, [r4, #12]
 800def8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800defc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df00:	81a3      	strh	r3, [r4, #12]
 800df02:	6126      	str	r6, [r4, #16]
 800df04:	6165      	str	r5, [r4, #20]
 800df06:	444e      	add	r6, r9
 800df08:	eba5 0509 	sub.w	r5, r5, r9
 800df0c:	6026      	str	r6, [r4, #0]
 800df0e:	60a5      	str	r5, [r4, #8]
 800df10:	463e      	mov	r6, r7
 800df12:	42be      	cmp	r6, r7
 800df14:	d900      	bls.n	800df18 <__ssputs_r+0x72>
 800df16:	463e      	mov	r6, r7
 800df18:	6820      	ldr	r0, [r4, #0]
 800df1a:	4632      	mov	r2, r6
 800df1c:	4641      	mov	r1, r8
 800df1e:	f000 fef6 	bl	800ed0e <memmove>
 800df22:	68a3      	ldr	r3, [r4, #8]
 800df24:	1b9b      	subs	r3, r3, r6
 800df26:	60a3      	str	r3, [r4, #8]
 800df28:	6823      	ldr	r3, [r4, #0]
 800df2a:	4433      	add	r3, r6
 800df2c:	6023      	str	r3, [r4, #0]
 800df2e:	2000      	movs	r0, #0
 800df30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df34:	462a      	mov	r2, r5
 800df36:	f000 ff69 	bl	800ee0c <_realloc_r>
 800df3a:	4606      	mov	r6, r0
 800df3c:	2800      	cmp	r0, #0
 800df3e:	d1e0      	bne.n	800df02 <__ssputs_r+0x5c>
 800df40:	6921      	ldr	r1, [r4, #16]
 800df42:	4650      	mov	r0, sl
 800df44:	f7fe fe28 	bl	800cb98 <_free_r>
 800df48:	230c      	movs	r3, #12
 800df4a:	f8ca 3000 	str.w	r3, [sl]
 800df4e:	89a3      	ldrh	r3, [r4, #12]
 800df50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df54:	81a3      	strh	r3, [r4, #12]
 800df56:	f04f 30ff 	mov.w	r0, #4294967295
 800df5a:	e7e9      	b.n	800df30 <__ssputs_r+0x8a>

0800df5c <_svfiprintf_r>:
 800df5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df60:	4698      	mov	r8, r3
 800df62:	898b      	ldrh	r3, [r1, #12]
 800df64:	061b      	lsls	r3, r3, #24
 800df66:	b09d      	sub	sp, #116	@ 0x74
 800df68:	4607      	mov	r7, r0
 800df6a:	460d      	mov	r5, r1
 800df6c:	4614      	mov	r4, r2
 800df6e:	d510      	bpl.n	800df92 <_svfiprintf_r+0x36>
 800df70:	690b      	ldr	r3, [r1, #16]
 800df72:	b973      	cbnz	r3, 800df92 <_svfiprintf_r+0x36>
 800df74:	2140      	movs	r1, #64	@ 0x40
 800df76:	f7ff f9bd 	bl	800d2f4 <_malloc_r>
 800df7a:	6028      	str	r0, [r5, #0]
 800df7c:	6128      	str	r0, [r5, #16]
 800df7e:	b930      	cbnz	r0, 800df8e <_svfiprintf_r+0x32>
 800df80:	230c      	movs	r3, #12
 800df82:	603b      	str	r3, [r7, #0]
 800df84:	f04f 30ff 	mov.w	r0, #4294967295
 800df88:	b01d      	add	sp, #116	@ 0x74
 800df8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df8e:	2340      	movs	r3, #64	@ 0x40
 800df90:	616b      	str	r3, [r5, #20]
 800df92:	2300      	movs	r3, #0
 800df94:	9309      	str	r3, [sp, #36]	@ 0x24
 800df96:	2320      	movs	r3, #32
 800df98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800df9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800dfa0:	2330      	movs	r3, #48	@ 0x30
 800dfa2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e140 <_svfiprintf_r+0x1e4>
 800dfa6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dfaa:	f04f 0901 	mov.w	r9, #1
 800dfae:	4623      	mov	r3, r4
 800dfb0:	469a      	mov	sl, r3
 800dfb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfb6:	b10a      	cbz	r2, 800dfbc <_svfiprintf_r+0x60>
 800dfb8:	2a25      	cmp	r2, #37	@ 0x25
 800dfba:	d1f9      	bne.n	800dfb0 <_svfiprintf_r+0x54>
 800dfbc:	ebba 0b04 	subs.w	fp, sl, r4
 800dfc0:	d00b      	beq.n	800dfda <_svfiprintf_r+0x7e>
 800dfc2:	465b      	mov	r3, fp
 800dfc4:	4622      	mov	r2, r4
 800dfc6:	4629      	mov	r1, r5
 800dfc8:	4638      	mov	r0, r7
 800dfca:	f7ff ff6c 	bl	800dea6 <__ssputs_r>
 800dfce:	3001      	adds	r0, #1
 800dfd0:	f000 80a7 	beq.w	800e122 <_svfiprintf_r+0x1c6>
 800dfd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dfd6:	445a      	add	r2, fp
 800dfd8:	9209      	str	r2, [sp, #36]	@ 0x24
 800dfda:	f89a 3000 	ldrb.w	r3, [sl]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	f000 809f 	beq.w	800e122 <_svfiprintf_r+0x1c6>
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	f04f 32ff 	mov.w	r2, #4294967295
 800dfea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dfee:	f10a 0a01 	add.w	sl, sl, #1
 800dff2:	9304      	str	r3, [sp, #16]
 800dff4:	9307      	str	r3, [sp, #28]
 800dff6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dffa:	931a      	str	r3, [sp, #104]	@ 0x68
 800dffc:	4654      	mov	r4, sl
 800dffe:	2205      	movs	r2, #5
 800e000:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e004:	484e      	ldr	r0, [pc, #312]	@ (800e140 <_svfiprintf_r+0x1e4>)
 800e006:	f7f2 f8eb 	bl	80001e0 <memchr>
 800e00a:	9a04      	ldr	r2, [sp, #16]
 800e00c:	b9d8      	cbnz	r0, 800e046 <_svfiprintf_r+0xea>
 800e00e:	06d0      	lsls	r0, r2, #27
 800e010:	bf44      	itt	mi
 800e012:	2320      	movmi	r3, #32
 800e014:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e018:	0711      	lsls	r1, r2, #28
 800e01a:	bf44      	itt	mi
 800e01c:	232b      	movmi	r3, #43	@ 0x2b
 800e01e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e022:	f89a 3000 	ldrb.w	r3, [sl]
 800e026:	2b2a      	cmp	r3, #42	@ 0x2a
 800e028:	d015      	beq.n	800e056 <_svfiprintf_r+0xfa>
 800e02a:	9a07      	ldr	r2, [sp, #28]
 800e02c:	4654      	mov	r4, sl
 800e02e:	2000      	movs	r0, #0
 800e030:	f04f 0c0a 	mov.w	ip, #10
 800e034:	4621      	mov	r1, r4
 800e036:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e03a:	3b30      	subs	r3, #48	@ 0x30
 800e03c:	2b09      	cmp	r3, #9
 800e03e:	d94b      	bls.n	800e0d8 <_svfiprintf_r+0x17c>
 800e040:	b1b0      	cbz	r0, 800e070 <_svfiprintf_r+0x114>
 800e042:	9207      	str	r2, [sp, #28]
 800e044:	e014      	b.n	800e070 <_svfiprintf_r+0x114>
 800e046:	eba0 0308 	sub.w	r3, r0, r8
 800e04a:	fa09 f303 	lsl.w	r3, r9, r3
 800e04e:	4313      	orrs	r3, r2
 800e050:	9304      	str	r3, [sp, #16]
 800e052:	46a2      	mov	sl, r4
 800e054:	e7d2      	b.n	800dffc <_svfiprintf_r+0xa0>
 800e056:	9b03      	ldr	r3, [sp, #12]
 800e058:	1d19      	adds	r1, r3, #4
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	9103      	str	r1, [sp, #12]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	bfbb      	ittet	lt
 800e062:	425b      	neglt	r3, r3
 800e064:	f042 0202 	orrlt.w	r2, r2, #2
 800e068:	9307      	strge	r3, [sp, #28]
 800e06a:	9307      	strlt	r3, [sp, #28]
 800e06c:	bfb8      	it	lt
 800e06e:	9204      	strlt	r2, [sp, #16]
 800e070:	7823      	ldrb	r3, [r4, #0]
 800e072:	2b2e      	cmp	r3, #46	@ 0x2e
 800e074:	d10a      	bne.n	800e08c <_svfiprintf_r+0x130>
 800e076:	7863      	ldrb	r3, [r4, #1]
 800e078:	2b2a      	cmp	r3, #42	@ 0x2a
 800e07a:	d132      	bne.n	800e0e2 <_svfiprintf_r+0x186>
 800e07c:	9b03      	ldr	r3, [sp, #12]
 800e07e:	1d1a      	adds	r2, r3, #4
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	9203      	str	r2, [sp, #12]
 800e084:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e088:	3402      	adds	r4, #2
 800e08a:	9305      	str	r3, [sp, #20]
 800e08c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e150 <_svfiprintf_r+0x1f4>
 800e090:	7821      	ldrb	r1, [r4, #0]
 800e092:	2203      	movs	r2, #3
 800e094:	4650      	mov	r0, sl
 800e096:	f7f2 f8a3 	bl	80001e0 <memchr>
 800e09a:	b138      	cbz	r0, 800e0ac <_svfiprintf_r+0x150>
 800e09c:	9b04      	ldr	r3, [sp, #16]
 800e09e:	eba0 000a 	sub.w	r0, r0, sl
 800e0a2:	2240      	movs	r2, #64	@ 0x40
 800e0a4:	4082      	lsls	r2, r0
 800e0a6:	4313      	orrs	r3, r2
 800e0a8:	3401      	adds	r4, #1
 800e0aa:	9304      	str	r3, [sp, #16]
 800e0ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0b0:	4824      	ldr	r0, [pc, #144]	@ (800e144 <_svfiprintf_r+0x1e8>)
 800e0b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e0b6:	2206      	movs	r2, #6
 800e0b8:	f7f2 f892 	bl	80001e0 <memchr>
 800e0bc:	2800      	cmp	r0, #0
 800e0be:	d036      	beq.n	800e12e <_svfiprintf_r+0x1d2>
 800e0c0:	4b21      	ldr	r3, [pc, #132]	@ (800e148 <_svfiprintf_r+0x1ec>)
 800e0c2:	bb1b      	cbnz	r3, 800e10c <_svfiprintf_r+0x1b0>
 800e0c4:	9b03      	ldr	r3, [sp, #12]
 800e0c6:	3307      	adds	r3, #7
 800e0c8:	f023 0307 	bic.w	r3, r3, #7
 800e0cc:	3308      	adds	r3, #8
 800e0ce:	9303      	str	r3, [sp, #12]
 800e0d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0d2:	4433      	add	r3, r6
 800e0d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0d6:	e76a      	b.n	800dfae <_svfiprintf_r+0x52>
 800e0d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e0dc:	460c      	mov	r4, r1
 800e0de:	2001      	movs	r0, #1
 800e0e0:	e7a8      	b.n	800e034 <_svfiprintf_r+0xd8>
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	3401      	adds	r4, #1
 800e0e6:	9305      	str	r3, [sp, #20]
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	f04f 0c0a 	mov.w	ip, #10
 800e0ee:	4620      	mov	r0, r4
 800e0f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0f4:	3a30      	subs	r2, #48	@ 0x30
 800e0f6:	2a09      	cmp	r2, #9
 800e0f8:	d903      	bls.n	800e102 <_svfiprintf_r+0x1a6>
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d0c6      	beq.n	800e08c <_svfiprintf_r+0x130>
 800e0fe:	9105      	str	r1, [sp, #20]
 800e100:	e7c4      	b.n	800e08c <_svfiprintf_r+0x130>
 800e102:	fb0c 2101 	mla	r1, ip, r1, r2
 800e106:	4604      	mov	r4, r0
 800e108:	2301      	movs	r3, #1
 800e10a:	e7f0      	b.n	800e0ee <_svfiprintf_r+0x192>
 800e10c:	ab03      	add	r3, sp, #12
 800e10e:	9300      	str	r3, [sp, #0]
 800e110:	462a      	mov	r2, r5
 800e112:	4b0e      	ldr	r3, [pc, #56]	@ (800e14c <_svfiprintf_r+0x1f0>)
 800e114:	a904      	add	r1, sp, #16
 800e116:	4638      	mov	r0, r7
 800e118:	f7fc fe00 	bl	800ad1c <_printf_float>
 800e11c:	1c42      	adds	r2, r0, #1
 800e11e:	4606      	mov	r6, r0
 800e120:	d1d6      	bne.n	800e0d0 <_svfiprintf_r+0x174>
 800e122:	89ab      	ldrh	r3, [r5, #12]
 800e124:	065b      	lsls	r3, r3, #25
 800e126:	f53f af2d 	bmi.w	800df84 <_svfiprintf_r+0x28>
 800e12a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e12c:	e72c      	b.n	800df88 <_svfiprintf_r+0x2c>
 800e12e:	ab03      	add	r3, sp, #12
 800e130:	9300      	str	r3, [sp, #0]
 800e132:	462a      	mov	r2, r5
 800e134:	4b05      	ldr	r3, [pc, #20]	@ (800e14c <_svfiprintf_r+0x1f0>)
 800e136:	a904      	add	r1, sp, #16
 800e138:	4638      	mov	r0, r7
 800e13a:	f7fd f887 	bl	800b24c <_printf_i>
 800e13e:	e7ed      	b.n	800e11c <_svfiprintf_r+0x1c0>
 800e140:	0800f739 	.word	0x0800f739
 800e144:	0800f743 	.word	0x0800f743
 800e148:	0800ad1d 	.word	0x0800ad1d
 800e14c:	0800dea7 	.word	0x0800dea7
 800e150:	0800f73f 	.word	0x0800f73f

0800e154 <_sungetc_r>:
 800e154:	b538      	push	{r3, r4, r5, lr}
 800e156:	1c4b      	adds	r3, r1, #1
 800e158:	4614      	mov	r4, r2
 800e15a:	d103      	bne.n	800e164 <_sungetc_r+0x10>
 800e15c:	f04f 35ff 	mov.w	r5, #4294967295
 800e160:	4628      	mov	r0, r5
 800e162:	bd38      	pop	{r3, r4, r5, pc}
 800e164:	8993      	ldrh	r3, [r2, #12]
 800e166:	f023 0320 	bic.w	r3, r3, #32
 800e16a:	8193      	strh	r3, [r2, #12]
 800e16c:	6853      	ldr	r3, [r2, #4]
 800e16e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800e170:	b2cd      	uxtb	r5, r1
 800e172:	b18a      	cbz	r2, 800e198 <_sungetc_r+0x44>
 800e174:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800e176:	429a      	cmp	r2, r3
 800e178:	dd08      	ble.n	800e18c <_sungetc_r+0x38>
 800e17a:	6823      	ldr	r3, [r4, #0]
 800e17c:	1e5a      	subs	r2, r3, #1
 800e17e:	6022      	str	r2, [r4, #0]
 800e180:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e184:	6863      	ldr	r3, [r4, #4]
 800e186:	3301      	adds	r3, #1
 800e188:	6063      	str	r3, [r4, #4]
 800e18a:	e7e9      	b.n	800e160 <_sungetc_r+0xc>
 800e18c:	4621      	mov	r1, r4
 800e18e:	f000 fd84 	bl	800ec9a <__submore>
 800e192:	2800      	cmp	r0, #0
 800e194:	d0f1      	beq.n	800e17a <_sungetc_r+0x26>
 800e196:	e7e1      	b.n	800e15c <_sungetc_r+0x8>
 800e198:	6921      	ldr	r1, [r4, #16]
 800e19a:	6822      	ldr	r2, [r4, #0]
 800e19c:	b141      	cbz	r1, 800e1b0 <_sungetc_r+0x5c>
 800e19e:	4291      	cmp	r1, r2
 800e1a0:	d206      	bcs.n	800e1b0 <_sungetc_r+0x5c>
 800e1a2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800e1a6:	42a9      	cmp	r1, r5
 800e1a8:	d102      	bne.n	800e1b0 <_sungetc_r+0x5c>
 800e1aa:	3a01      	subs	r2, #1
 800e1ac:	6022      	str	r2, [r4, #0]
 800e1ae:	e7ea      	b.n	800e186 <_sungetc_r+0x32>
 800e1b0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800e1b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e1b8:	6363      	str	r3, [r4, #52]	@ 0x34
 800e1ba:	2303      	movs	r3, #3
 800e1bc:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e1be:	4623      	mov	r3, r4
 800e1c0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e1c4:	6023      	str	r3, [r4, #0]
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	e7de      	b.n	800e188 <_sungetc_r+0x34>

0800e1ca <__ssrefill_r>:
 800e1ca:	b510      	push	{r4, lr}
 800e1cc:	460c      	mov	r4, r1
 800e1ce:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e1d0:	b169      	cbz	r1, 800e1ee <__ssrefill_r+0x24>
 800e1d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e1d6:	4299      	cmp	r1, r3
 800e1d8:	d001      	beq.n	800e1de <__ssrefill_r+0x14>
 800e1da:	f7fe fcdd 	bl	800cb98 <_free_r>
 800e1de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e1e0:	6063      	str	r3, [r4, #4]
 800e1e2:	2000      	movs	r0, #0
 800e1e4:	6360      	str	r0, [r4, #52]	@ 0x34
 800e1e6:	b113      	cbz	r3, 800e1ee <__ssrefill_r+0x24>
 800e1e8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e1ea:	6023      	str	r3, [r4, #0]
 800e1ec:	bd10      	pop	{r4, pc}
 800e1ee:	6923      	ldr	r3, [r4, #16]
 800e1f0:	6023      	str	r3, [r4, #0]
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	6063      	str	r3, [r4, #4]
 800e1f6:	89a3      	ldrh	r3, [r4, #12]
 800e1f8:	f043 0320 	orr.w	r3, r3, #32
 800e1fc:	81a3      	strh	r3, [r4, #12]
 800e1fe:	f04f 30ff 	mov.w	r0, #4294967295
 800e202:	e7f3      	b.n	800e1ec <__ssrefill_r+0x22>

0800e204 <__ssvfiscanf_r>:
 800e204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e208:	460c      	mov	r4, r1
 800e20a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800e20e:	2100      	movs	r1, #0
 800e210:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800e214:	49a5      	ldr	r1, [pc, #660]	@ (800e4ac <__ssvfiscanf_r+0x2a8>)
 800e216:	91a0      	str	r1, [sp, #640]	@ 0x280
 800e218:	f10d 0804 	add.w	r8, sp, #4
 800e21c:	49a4      	ldr	r1, [pc, #656]	@ (800e4b0 <__ssvfiscanf_r+0x2ac>)
 800e21e:	4fa5      	ldr	r7, [pc, #660]	@ (800e4b4 <__ssvfiscanf_r+0x2b0>)
 800e220:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800e224:	4606      	mov	r6, r0
 800e226:	91a1      	str	r1, [sp, #644]	@ 0x284
 800e228:	9300      	str	r3, [sp, #0]
 800e22a:	7813      	ldrb	r3, [r2, #0]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	f000 8158 	beq.w	800e4e2 <__ssvfiscanf_r+0x2de>
 800e232:	5cf9      	ldrb	r1, [r7, r3]
 800e234:	f011 0108 	ands.w	r1, r1, #8
 800e238:	f102 0501 	add.w	r5, r2, #1
 800e23c:	d019      	beq.n	800e272 <__ssvfiscanf_r+0x6e>
 800e23e:	6863      	ldr	r3, [r4, #4]
 800e240:	2b00      	cmp	r3, #0
 800e242:	dd0f      	ble.n	800e264 <__ssvfiscanf_r+0x60>
 800e244:	6823      	ldr	r3, [r4, #0]
 800e246:	781a      	ldrb	r2, [r3, #0]
 800e248:	5cba      	ldrb	r2, [r7, r2]
 800e24a:	0712      	lsls	r2, r2, #28
 800e24c:	d401      	bmi.n	800e252 <__ssvfiscanf_r+0x4e>
 800e24e:	462a      	mov	r2, r5
 800e250:	e7eb      	b.n	800e22a <__ssvfiscanf_r+0x26>
 800e252:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e254:	3201      	adds	r2, #1
 800e256:	9245      	str	r2, [sp, #276]	@ 0x114
 800e258:	6862      	ldr	r2, [r4, #4]
 800e25a:	3301      	adds	r3, #1
 800e25c:	3a01      	subs	r2, #1
 800e25e:	6062      	str	r2, [r4, #4]
 800e260:	6023      	str	r3, [r4, #0]
 800e262:	e7ec      	b.n	800e23e <__ssvfiscanf_r+0x3a>
 800e264:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e266:	4621      	mov	r1, r4
 800e268:	4630      	mov	r0, r6
 800e26a:	4798      	blx	r3
 800e26c:	2800      	cmp	r0, #0
 800e26e:	d0e9      	beq.n	800e244 <__ssvfiscanf_r+0x40>
 800e270:	e7ed      	b.n	800e24e <__ssvfiscanf_r+0x4a>
 800e272:	2b25      	cmp	r3, #37	@ 0x25
 800e274:	d012      	beq.n	800e29c <__ssvfiscanf_r+0x98>
 800e276:	4699      	mov	r9, r3
 800e278:	6863      	ldr	r3, [r4, #4]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	f340 8093 	ble.w	800e3a6 <__ssvfiscanf_r+0x1a2>
 800e280:	6822      	ldr	r2, [r4, #0]
 800e282:	7813      	ldrb	r3, [r2, #0]
 800e284:	454b      	cmp	r3, r9
 800e286:	f040 812c 	bne.w	800e4e2 <__ssvfiscanf_r+0x2de>
 800e28a:	6863      	ldr	r3, [r4, #4]
 800e28c:	3b01      	subs	r3, #1
 800e28e:	6063      	str	r3, [r4, #4]
 800e290:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800e292:	3201      	adds	r2, #1
 800e294:	3301      	adds	r3, #1
 800e296:	6022      	str	r2, [r4, #0]
 800e298:	9345      	str	r3, [sp, #276]	@ 0x114
 800e29a:	e7d8      	b.n	800e24e <__ssvfiscanf_r+0x4a>
 800e29c:	9141      	str	r1, [sp, #260]	@ 0x104
 800e29e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800e2a0:	7853      	ldrb	r3, [r2, #1]
 800e2a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2a4:	bf02      	ittt	eq
 800e2a6:	2310      	moveq	r3, #16
 800e2a8:	1c95      	addeq	r5, r2, #2
 800e2aa:	9341      	streq	r3, [sp, #260]	@ 0x104
 800e2ac:	220a      	movs	r2, #10
 800e2ae:	46a9      	mov	r9, r5
 800e2b0:	f819 1b01 	ldrb.w	r1, [r9], #1
 800e2b4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800e2b8:	2b09      	cmp	r3, #9
 800e2ba:	d91e      	bls.n	800e2fa <__ssvfiscanf_r+0xf6>
 800e2bc:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800e4b8 <__ssvfiscanf_r+0x2b4>
 800e2c0:	2203      	movs	r2, #3
 800e2c2:	4650      	mov	r0, sl
 800e2c4:	f7f1 ff8c 	bl	80001e0 <memchr>
 800e2c8:	b138      	cbz	r0, 800e2da <__ssvfiscanf_r+0xd6>
 800e2ca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e2cc:	eba0 000a 	sub.w	r0, r0, sl
 800e2d0:	2301      	movs	r3, #1
 800e2d2:	4083      	lsls	r3, r0
 800e2d4:	4313      	orrs	r3, r2
 800e2d6:	9341      	str	r3, [sp, #260]	@ 0x104
 800e2d8:	464d      	mov	r5, r9
 800e2da:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e2de:	2b78      	cmp	r3, #120	@ 0x78
 800e2e0:	d806      	bhi.n	800e2f0 <__ssvfiscanf_r+0xec>
 800e2e2:	2b57      	cmp	r3, #87	@ 0x57
 800e2e4:	d810      	bhi.n	800e308 <__ssvfiscanf_r+0x104>
 800e2e6:	2b25      	cmp	r3, #37	@ 0x25
 800e2e8:	d0c5      	beq.n	800e276 <__ssvfiscanf_r+0x72>
 800e2ea:	d857      	bhi.n	800e39c <__ssvfiscanf_r+0x198>
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d065      	beq.n	800e3bc <__ssvfiscanf_r+0x1b8>
 800e2f0:	2303      	movs	r3, #3
 800e2f2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e2f4:	230a      	movs	r3, #10
 800e2f6:	9342      	str	r3, [sp, #264]	@ 0x108
 800e2f8:	e078      	b.n	800e3ec <__ssvfiscanf_r+0x1e8>
 800e2fa:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800e2fc:	fb02 1103 	mla	r1, r2, r3, r1
 800e300:	3930      	subs	r1, #48	@ 0x30
 800e302:	9143      	str	r1, [sp, #268]	@ 0x10c
 800e304:	464d      	mov	r5, r9
 800e306:	e7d2      	b.n	800e2ae <__ssvfiscanf_r+0xaa>
 800e308:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800e30c:	2a20      	cmp	r2, #32
 800e30e:	d8ef      	bhi.n	800e2f0 <__ssvfiscanf_r+0xec>
 800e310:	a101      	add	r1, pc, #4	@ (adr r1, 800e318 <__ssvfiscanf_r+0x114>)
 800e312:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e316:	bf00      	nop
 800e318:	0800e3cb 	.word	0x0800e3cb
 800e31c:	0800e2f1 	.word	0x0800e2f1
 800e320:	0800e2f1 	.word	0x0800e2f1
 800e324:	0800e425 	.word	0x0800e425
 800e328:	0800e2f1 	.word	0x0800e2f1
 800e32c:	0800e2f1 	.word	0x0800e2f1
 800e330:	0800e2f1 	.word	0x0800e2f1
 800e334:	0800e2f1 	.word	0x0800e2f1
 800e338:	0800e2f1 	.word	0x0800e2f1
 800e33c:	0800e2f1 	.word	0x0800e2f1
 800e340:	0800e2f1 	.word	0x0800e2f1
 800e344:	0800e43b 	.word	0x0800e43b
 800e348:	0800e421 	.word	0x0800e421
 800e34c:	0800e3a3 	.word	0x0800e3a3
 800e350:	0800e3a3 	.word	0x0800e3a3
 800e354:	0800e3a3 	.word	0x0800e3a3
 800e358:	0800e2f1 	.word	0x0800e2f1
 800e35c:	0800e3dd 	.word	0x0800e3dd
 800e360:	0800e2f1 	.word	0x0800e2f1
 800e364:	0800e2f1 	.word	0x0800e2f1
 800e368:	0800e2f1 	.word	0x0800e2f1
 800e36c:	0800e2f1 	.word	0x0800e2f1
 800e370:	0800e44b 	.word	0x0800e44b
 800e374:	0800e3e5 	.word	0x0800e3e5
 800e378:	0800e3c3 	.word	0x0800e3c3
 800e37c:	0800e2f1 	.word	0x0800e2f1
 800e380:	0800e2f1 	.word	0x0800e2f1
 800e384:	0800e447 	.word	0x0800e447
 800e388:	0800e2f1 	.word	0x0800e2f1
 800e38c:	0800e421 	.word	0x0800e421
 800e390:	0800e2f1 	.word	0x0800e2f1
 800e394:	0800e2f1 	.word	0x0800e2f1
 800e398:	0800e3cb 	.word	0x0800e3cb
 800e39c:	3b45      	subs	r3, #69	@ 0x45
 800e39e:	2b02      	cmp	r3, #2
 800e3a0:	d8a6      	bhi.n	800e2f0 <__ssvfiscanf_r+0xec>
 800e3a2:	2305      	movs	r3, #5
 800e3a4:	e021      	b.n	800e3ea <__ssvfiscanf_r+0x1e6>
 800e3a6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e3a8:	4621      	mov	r1, r4
 800e3aa:	4630      	mov	r0, r6
 800e3ac:	4798      	blx	r3
 800e3ae:	2800      	cmp	r0, #0
 800e3b0:	f43f af66 	beq.w	800e280 <__ssvfiscanf_r+0x7c>
 800e3b4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e3b6:	2800      	cmp	r0, #0
 800e3b8:	f040 808b 	bne.w	800e4d2 <__ssvfiscanf_r+0x2ce>
 800e3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e3c0:	e08b      	b.n	800e4da <__ssvfiscanf_r+0x2d6>
 800e3c2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e3c4:	f042 0220 	orr.w	r2, r2, #32
 800e3c8:	9241      	str	r2, [sp, #260]	@ 0x104
 800e3ca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e3cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e3d0:	9241      	str	r2, [sp, #260]	@ 0x104
 800e3d2:	2210      	movs	r2, #16
 800e3d4:	2b6e      	cmp	r3, #110	@ 0x6e
 800e3d6:	9242      	str	r2, [sp, #264]	@ 0x108
 800e3d8:	d902      	bls.n	800e3e0 <__ssvfiscanf_r+0x1dc>
 800e3da:	e005      	b.n	800e3e8 <__ssvfiscanf_r+0x1e4>
 800e3dc:	2300      	movs	r3, #0
 800e3de:	9342      	str	r3, [sp, #264]	@ 0x108
 800e3e0:	2303      	movs	r3, #3
 800e3e2:	e002      	b.n	800e3ea <__ssvfiscanf_r+0x1e6>
 800e3e4:	2308      	movs	r3, #8
 800e3e6:	9342      	str	r3, [sp, #264]	@ 0x108
 800e3e8:	2304      	movs	r3, #4
 800e3ea:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e3ec:	6863      	ldr	r3, [r4, #4]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	dd39      	ble.n	800e466 <__ssvfiscanf_r+0x262>
 800e3f2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e3f4:	0659      	lsls	r1, r3, #25
 800e3f6:	d404      	bmi.n	800e402 <__ssvfiscanf_r+0x1fe>
 800e3f8:	6823      	ldr	r3, [r4, #0]
 800e3fa:	781a      	ldrb	r2, [r3, #0]
 800e3fc:	5cba      	ldrb	r2, [r7, r2]
 800e3fe:	0712      	lsls	r2, r2, #28
 800e400:	d438      	bmi.n	800e474 <__ssvfiscanf_r+0x270>
 800e402:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800e404:	2b02      	cmp	r3, #2
 800e406:	dc47      	bgt.n	800e498 <__ssvfiscanf_r+0x294>
 800e408:	466b      	mov	r3, sp
 800e40a:	4622      	mov	r2, r4
 800e40c:	a941      	add	r1, sp, #260	@ 0x104
 800e40e:	4630      	mov	r0, r6
 800e410:	f000 f9ae 	bl	800e770 <_scanf_chars>
 800e414:	2801      	cmp	r0, #1
 800e416:	d064      	beq.n	800e4e2 <__ssvfiscanf_r+0x2de>
 800e418:	2802      	cmp	r0, #2
 800e41a:	f47f af18 	bne.w	800e24e <__ssvfiscanf_r+0x4a>
 800e41e:	e7c9      	b.n	800e3b4 <__ssvfiscanf_r+0x1b0>
 800e420:	220a      	movs	r2, #10
 800e422:	e7d7      	b.n	800e3d4 <__ssvfiscanf_r+0x1d0>
 800e424:	4629      	mov	r1, r5
 800e426:	4640      	mov	r0, r8
 800e428:	f000 fbfe 	bl	800ec28 <__sccl>
 800e42c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e42e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e432:	9341      	str	r3, [sp, #260]	@ 0x104
 800e434:	4605      	mov	r5, r0
 800e436:	2301      	movs	r3, #1
 800e438:	e7d7      	b.n	800e3ea <__ssvfiscanf_r+0x1e6>
 800e43a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e43c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e440:	9341      	str	r3, [sp, #260]	@ 0x104
 800e442:	2300      	movs	r3, #0
 800e444:	e7d1      	b.n	800e3ea <__ssvfiscanf_r+0x1e6>
 800e446:	2302      	movs	r3, #2
 800e448:	e7cf      	b.n	800e3ea <__ssvfiscanf_r+0x1e6>
 800e44a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800e44c:	06c3      	lsls	r3, r0, #27
 800e44e:	f53f aefe 	bmi.w	800e24e <__ssvfiscanf_r+0x4a>
 800e452:	9b00      	ldr	r3, [sp, #0]
 800e454:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e456:	1d19      	adds	r1, r3, #4
 800e458:	9100      	str	r1, [sp, #0]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	07c0      	lsls	r0, r0, #31
 800e45e:	bf4c      	ite	mi
 800e460:	801a      	strhmi	r2, [r3, #0]
 800e462:	601a      	strpl	r2, [r3, #0]
 800e464:	e6f3      	b.n	800e24e <__ssvfiscanf_r+0x4a>
 800e466:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e468:	4621      	mov	r1, r4
 800e46a:	4630      	mov	r0, r6
 800e46c:	4798      	blx	r3
 800e46e:	2800      	cmp	r0, #0
 800e470:	d0bf      	beq.n	800e3f2 <__ssvfiscanf_r+0x1ee>
 800e472:	e79f      	b.n	800e3b4 <__ssvfiscanf_r+0x1b0>
 800e474:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e476:	3201      	adds	r2, #1
 800e478:	9245      	str	r2, [sp, #276]	@ 0x114
 800e47a:	6862      	ldr	r2, [r4, #4]
 800e47c:	3a01      	subs	r2, #1
 800e47e:	2a00      	cmp	r2, #0
 800e480:	6062      	str	r2, [r4, #4]
 800e482:	dd02      	ble.n	800e48a <__ssvfiscanf_r+0x286>
 800e484:	3301      	adds	r3, #1
 800e486:	6023      	str	r3, [r4, #0]
 800e488:	e7b6      	b.n	800e3f8 <__ssvfiscanf_r+0x1f4>
 800e48a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e48c:	4621      	mov	r1, r4
 800e48e:	4630      	mov	r0, r6
 800e490:	4798      	blx	r3
 800e492:	2800      	cmp	r0, #0
 800e494:	d0b0      	beq.n	800e3f8 <__ssvfiscanf_r+0x1f4>
 800e496:	e78d      	b.n	800e3b4 <__ssvfiscanf_r+0x1b0>
 800e498:	2b04      	cmp	r3, #4
 800e49a:	dc0f      	bgt.n	800e4bc <__ssvfiscanf_r+0x2b8>
 800e49c:	466b      	mov	r3, sp
 800e49e:	4622      	mov	r2, r4
 800e4a0:	a941      	add	r1, sp, #260	@ 0x104
 800e4a2:	4630      	mov	r0, r6
 800e4a4:	f000 f9be 	bl	800e824 <_scanf_i>
 800e4a8:	e7b4      	b.n	800e414 <__ssvfiscanf_r+0x210>
 800e4aa:	bf00      	nop
 800e4ac:	0800e155 	.word	0x0800e155
 800e4b0:	0800e1cb 	.word	0x0800e1cb
 800e4b4:	0800f639 	.word	0x0800f639
 800e4b8:	0800f73f 	.word	0x0800f73f
 800e4bc:	4b0a      	ldr	r3, [pc, #40]	@ (800e4e8 <__ssvfiscanf_r+0x2e4>)
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	f43f aec5 	beq.w	800e24e <__ssvfiscanf_r+0x4a>
 800e4c4:	466b      	mov	r3, sp
 800e4c6:	4622      	mov	r2, r4
 800e4c8:	a941      	add	r1, sp, #260	@ 0x104
 800e4ca:	4630      	mov	r0, r6
 800e4cc:	f7fc ffde 	bl	800b48c <_scanf_float>
 800e4d0:	e7a0      	b.n	800e414 <__ssvfiscanf_r+0x210>
 800e4d2:	89a3      	ldrh	r3, [r4, #12]
 800e4d4:	065b      	lsls	r3, r3, #25
 800e4d6:	f53f af71 	bmi.w	800e3bc <__ssvfiscanf_r+0x1b8>
 800e4da:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800e4de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4e2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e4e4:	e7f9      	b.n	800e4da <__ssvfiscanf_r+0x2d6>
 800e4e6:	bf00      	nop
 800e4e8:	0800b48d 	.word	0x0800b48d

0800e4ec <__sfputc_r>:
 800e4ec:	6893      	ldr	r3, [r2, #8]
 800e4ee:	3b01      	subs	r3, #1
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	b410      	push	{r4}
 800e4f4:	6093      	str	r3, [r2, #8]
 800e4f6:	da08      	bge.n	800e50a <__sfputc_r+0x1e>
 800e4f8:	6994      	ldr	r4, [r2, #24]
 800e4fa:	42a3      	cmp	r3, r4
 800e4fc:	db01      	blt.n	800e502 <__sfputc_r+0x16>
 800e4fe:	290a      	cmp	r1, #10
 800e500:	d103      	bne.n	800e50a <__sfputc_r+0x1e>
 800e502:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e506:	f7fd bb96 	b.w	800bc36 <__swbuf_r>
 800e50a:	6813      	ldr	r3, [r2, #0]
 800e50c:	1c58      	adds	r0, r3, #1
 800e50e:	6010      	str	r0, [r2, #0]
 800e510:	7019      	strb	r1, [r3, #0]
 800e512:	4608      	mov	r0, r1
 800e514:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e518:	4770      	bx	lr

0800e51a <__sfputs_r>:
 800e51a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e51c:	4606      	mov	r6, r0
 800e51e:	460f      	mov	r7, r1
 800e520:	4614      	mov	r4, r2
 800e522:	18d5      	adds	r5, r2, r3
 800e524:	42ac      	cmp	r4, r5
 800e526:	d101      	bne.n	800e52c <__sfputs_r+0x12>
 800e528:	2000      	movs	r0, #0
 800e52a:	e007      	b.n	800e53c <__sfputs_r+0x22>
 800e52c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e530:	463a      	mov	r2, r7
 800e532:	4630      	mov	r0, r6
 800e534:	f7ff ffda 	bl	800e4ec <__sfputc_r>
 800e538:	1c43      	adds	r3, r0, #1
 800e53a:	d1f3      	bne.n	800e524 <__sfputs_r+0xa>
 800e53c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e540 <_vfiprintf_r>:
 800e540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e544:	460d      	mov	r5, r1
 800e546:	b09d      	sub	sp, #116	@ 0x74
 800e548:	4614      	mov	r4, r2
 800e54a:	4698      	mov	r8, r3
 800e54c:	4606      	mov	r6, r0
 800e54e:	b118      	cbz	r0, 800e558 <_vfiprintf_r+0x18>
 800e550:	6a03      	ldr	r3, [r0, #32]
 800e552:	b90b      	cbnz	r3, 800e558 <_vfiprintf_r+0x18>
 800e554:	f7fd fa3a 	bl	800b9cc <__sinit>
 800e558:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e55a:	07d9      	lsls	r1, r3, #31
 800e55c:	d405      	bmi.n	800e56a <_vfiprintf_r+0x2a>
 800e55e:	89ab      	ldrh	r3, [r5, #12]
 800e560:	059a      	lsls	r2, r3, #22
 800e562:	d402      	bmi.n	800e56a <_vfiprintf_r+0x2a>
 800e564:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e566:	f7fd fcaa 	bl	800bebe <__retarget_lock_acquire_recursive>
 800e56a:	89ab      	ldrh	r3, [r5, #12]
 800e56c:	071b      	lsls	r3, r3, #28
 800e56e:	d501      	bpl.n	800e574 <_vfiprintf_r+0x34>
 800e570:	692b      	ldr	r3, [r5, #16]
 800e572:	b99b      	cbnz	r3, 800e59c <_vfiprintf_r+0x5c>
 800e574:	4629      	mov	r1, r5
 800e576:	4630      	mov	r0, r6
 800e578:	f7fd fb9c 	bl	800bcb4 <__swsetup_r>
 800e57c:	b170      	cbz	r0, 800e59c <_vfiprintf_r+0x5c>
 800e57e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e580:	07dc      	lsls	r4, r3, #31
 800e582:	d504      	bpl.n	800e58e <_vfiprintf_r+0x4e>
 800e584:	f04f 30ff 	mov.w	r0, #4294967295
 800e588:	b01d      	add	sp, #116	@ 0x74
 800e58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e58e:	89ab      	ldrh	r3, [r5, #12]
 800e590:	0598      	lsls	r0, r3, #22
 800e592:	d4f7      	bmi.n	800e584 <_vfiprintf_r+0x44>
 800e594:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e596:	f7fd fc93 	bl	800bec0 <__retarget_lock_release_recursive>
 800e59a:	e7f3      	b.n	800e584 <_vfiprintf_r+0x44>
 800e59c:	2300      	movs	r3, #0
 800e59e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5a0:	2320      	movs	r3, #32
 800e5a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e5a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5aa:	2330      	movs	r3, #48	@ 0x30
 800e5ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e75c <_vfiprintf_r+0x21c>
 800e5b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e5b4:	f04f 0901 	mov.w	r9, #1
 800e5b8:	4623      	mov	r3, r4
 800e5ba:	469a      	mov	sl, r3
 800e5bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e5c0:	b10a      	cbz	r2, 800e5c6 <_vfiprintf_r+0x86>
 800e5c2:	2a25      	cmp	r2, #37	@ 0x25
 800e5c4:	d1f9      	bne.n	800e5ba <_vfiprintf_r+0x7a>
 800e5c6:	ebba 0b04 	subs.w	fp, sl, r4
 800e5ca:	d00b      	beq.n	800e5e4 <_vfiprintf_r+0xa4>
 800e5cc:	465b      	mov	r3, fp
 800e5ce:	4622      	mov	r2, r4
 800e5d0:	4629      	mov	r1, r5
 800e5d2:	4630      	mov	r0, r6
 800e5d4:	f7ff ffa1 	bl	800e51a <__sfputs_r>
 800e5d8:	3001      	adds	r0, #1
 800e5da:	f000 80a7 	beq.w	800e72c <_vfiprintf_r+0x1ec>
 800e5de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e5e0:	445a      	add	r2, fp
 800e5e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e5e4:	f89a 3000 	ldrb.w	r3, [sl]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	f000 809f 	beq.w	800e72c <_vfiprintf_r+0x1ec>
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	f04f 32ff 	mov.w	r2, #4294967295
 800e5f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5f8:	f10a 0a01 	add.w	sl, sl, #1
 800e5fc:	9304      	str	r3, [sp, #16]
 800e5fe:	9307      	str	r3, [sp, #28]
 800e600:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e604:	931a      	str	r3, [sp, #104]	@ 0x68
 800e606:	4654      	mov	r4, sl
 800e608:	2205      	movs	r2, #5
 800e60a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e60e:	4853      	ldr	r0, [pc, #332]	@ (800e75c <_vfiprintf_r+0x21c>)
 800e610:	f7f1 fde6 	bl	80001e0 <memchr>
 800e614:	9a04      	ldr	r2, [sp, #16]
 800e616:	b9d8      	cbnz	r0, 800e650 <_vfiprintf_r+0x110>
 800e618:	06d1      	lsls	r1, r2, #27
 800e61a:	bf44      	itt	mi
 800e61c:	2320      	movmi	r3, #32
 800e61e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e622:	0713      	lsls	r3, r2, #28
 800e624:	bf44      	itt	mi
 800e626:	232b      	movmi	r3, #43	@ 0x2b
 800e628:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e62c:	f89a 3000 	ldrb.w	r3, [sl]
 800e630:	2b2a      	cmp	r3, #42	@ 0x2a
 800e632:	d015      	beq.n	800e660 <_vfiprintf_r+0x120>
 800e634:	9a07      	ldr	r2, [sp, #28]
 800e636:	4654      	mov	r4, sl
 800e638:	2000      	movs	r0, #0
 800e63a:	f04f 0c0a 	mov.w	ip, #10
 800e63e:	4621      	mov	r1, r4
 800e640:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e644:	3b30      	subs	r3, #48	@ 0x30
 800e646:	2b09      	cmp	r3, #9
 800e648:	d94b      	bls.n	800e6e2 <_vfiprintf_r+0x1a2>
 800e64a:	b1b0      	cbz	r0, 800e67a <_vfiprintf_r+0x13a>
 800e64c:	9207      	str	r2, [sp, #28]
 800e64e:	e014      	b.n	800e67a <_vfiprintf_r+0x13a>
 800e650:	eba0 0308 	sub.w	r3, r0, r8
 800e654:	fa09 f303 	lsl.w	r3, r9, r3
 800e658:	4313      	orrs	r3, r2
 800e65a:	9304      	str	r3, [sp, #16]
 800e65c:	46a2      	mov	sl, r4
 800e65e:	e7d2      	b.n	800e606 <_vfiprintf_r+0xc6>
 800e660:	9b03      	ldr	r3, [sp, #12]
 800e662:	1d19      	adds	r1, r3, #4
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	9103      	str	r1, [sp, #12]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	bfbb      	ittet	lt
 800e66c:	425b      	neglt	r3, r3
 800e66e:	f042 0202 	orrlt.w	r2, r2, #2
 800e672:	9307      	strge	r3, [sp, #28]
 800e674:	9307      	strlt	r3, [sp, #28]
 800e676:	bfb8      	it	lt
 800e678:	9204      	strlt	r2, [sp, #16]
 800e67a:	7823      	ldrb	r3, [r4, #0]
 800e67c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e67e:	d10a      	bne.n	800e696 <_vfiprintf_r+0x156>
 800e680:	7863      	ldrb	r3, [r4, #1]
 800e682:	2b2a      	cmp	r3, #42	@ 0x2a
 800e684:	d132      	bne.n	800e6ec <_vfiprintf_r+0x1ac>
 800e686:	9b03      	ldr	r3, [sp, #12]
 800e688:	1d1a      	adds	r2, r3, #4
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	9203      	str	r2, [sp, #12]
 800e68e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e692:	3402      	adds	r4, #2
 800e694:	9305      	str	r3, [sp, #20]
 800e696:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e76c <_vfiprintf_r+0x22c>
 800e69a:	7821      	ldrb	r1, [r4, #0]
 800e69c:	2203      	movs	r2, #3
 800e69e:	4650      	mov	r0, sl
 800e6a0:	f7f1 fd9e 	bl	80001e0 <memchr>
 800e6a4:	b138      	cbz	r0, 800e6b6 <_vfiprintf_r+0x176>
 800e6a6:	9b04      	ldr	r3, [sp, #16]
 800e6a8:	eba0 000a 	sub.w	r0, r0, sl
 800e6ac:	2240      	movs	r2, #64	@ 0x40
 800e6ae:	4082      	lsls	r2, r0
 800e6b0:	4313      	orrs	r3, r2
 800e6b2:	3401      	adds	r4, #1
 800e6b4:	9304      	str	r3, [sp, #16]
 800e6b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6ba:	4829      	ldr	r0, [pc, #164]	@ (800e760 <_vfiprintf_r+0x220>)
 800e6bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e6c0:	2206      	movs	r2, #6
 800e6c2:	f7f1 fd8d 	bl	80001e0 <memchr>
 800e6c6:	2800      	cmp	r0, #0
 800e6c8:	d03f      	beq.n	800e74a <_vfiprintf_r+0x20a>
 800e6ca:	4b26      	ldr	r3, [pc, #152]	@ (800e764 <_vfiprintf_r+0x224>)
 800e6cc:	bb1b      	cbnz	r3, 800e716 <_vfiprintf_r+0x1d6>
 800e6ce:	9b03      	ldr	r3, [sp, #12]
 800e6d0:	3307      	adds	r3, #7
 800e6d2:	f023 0307 	bic.w	r3, r3, #7
 800e6d6:	3308      	adds	r3, #8
 800e6d8:	9303      	str	r3, [sp, #12]
 800e6da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6dc:	443b      	add	r3, r7
 800e6de:	9309      	str	r3, [sp, #36]	@ 0x24
 800e6e0:	e76a      	b.n	800e5b8 <_vfiprintf_r+0x78>
 800e6e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e6e6:	460c      	mov	r4, r1
 800e6e8:	2001      	movs	r0, #1
 800e6ea:	e7a8      	b.n	800e63e <_vfiprintf_r+0xfe>
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	3401      	adds	r4, #1
 800e6f0:	9305      	str	r3, [sp, #20]
 800e6f2:	4619      	mov	r1, r3
 800e6f4:	f04f 0c0a 	mov.w	ip, #10
 800e6f8:	4620      	mov	r0, r4
 800e6fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6fe:	3a30      	subs	r2, #48	@ 0x30
 800e700:	2a09      	cmp	r2, #9
 800e702:	d903      	bls.n	800e70c <_vfiprintf_r+0x1cc>
 800e704:	2b00      	cmp	r3, #0
 800e706:	d0c6      	beq.n	800e696 <_vfiprintf_r+0x156>
 800e708:	9105      	str	r1, [sp, #20]
 800e70a:	e7c4      	b.n	800e696 <_vfiprintf_r+0x156>
 800e70c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e710:	4604      	mov	r4, r0
 800e712:	2301      	movs	r3, #1
 800e714:	e7f0      	b.n	800e6f8 <_vfiprintf_r+0x1b8>
 800e716:	ab03      	add	r3, sp, #12
 800e718:	9300      	str	r3, [sp, #0]
 800e71a:	462a      	mov	r2, r5
 800e71c:	4b12      	ldr	r3, [pc, #72]	@ (800e768 <_vfiprintf_r+0x228>)
 800e71e:	a904      	add	r1, sp, #16
 800e720:	4630      	mov	r0, r6
 800e722:	f7fc fafb 	bl	800ad1c <_printf_float>
 800e726:	4607      	mov	r7, r0
 800e728:	1c78      	adds	r0, r7, #1
 800e72a:	d1d6      	bne.n	800e6da <_vfiprintf_r+0x19a>
 800e72c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e72e:	07d9      	lsls	r1, r3, #31
 800e730:	d405      	bmi.n	800e73e <_vfiprintf_r+0x1fe>
 800e732:	89ab      	ldrh	r3, [r5, #12]
 800e734:	059a      	lsls	r2, r3, #22
 800e736:	d402      	bmi.n	800e73e <_vfiprintf_r+0x1fe>
 800e738:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e73a:	f7fd fbc1 	bl	800bec0 <__retarget_lock_release_recursive>
 800e73e:	89ab      	ldrh	r3, [r5, #12]
 800e740:	065b      	lsls	r3, r3, #25
 800e742:	f53f af1f 	bmi.w	800e584 <_vfiprintf_r+0x44>
 800e746:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e748:	e71e      	b.n	800e588 <_vfiprintf_r+0x48>
 800e74a:	ab03      	add	r3, sp, #12
 800e74c:	9300      	str	r3, [sp, #0]
 800e74e:	462a      	mov	r2, r5
 800e750:	4b05      	ldr	r3, [pc, #20]	@ (800e768 <_vfiprintf_r+0x228>)
 800e752:	a904      	add	r1, sp, #16
 800e754:	4630      	mov	r0, r6
 800e756:	f7fc fd79 	bl	800b24c <_printf_i>
 800e75a:	e7e4      	b.n	800e726 <_vfiprintf_r+0x1e6>
 800e75c:	0800f739 	.word	0x0800f739
 800e760:	0800f743 	.word	0x0800f743
 800e764:	0800ad1d 	.word	0x0800ad1d
 800e768:	0800e51b 	.word	0x0800e51b
 800e76c:	0800f73f 	.word	0x0800f73f

0800e770 <_scanf_chars>:
 800e770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e774:	4615      	mov	r5, r2
 800e776:	688a      	ldr	r2, [r1, #8]
 800e778:	4680      	mov	r8, r0
 800e77a:	460c      	mov	r4, r1
 800e77c:	b932      	cbnz	r2, 800e78c <_scanf_chars+0x1c>
 800e77e:	698a      	ldr	r2, [r1, #24]
 800e780:	2a00      	cmp	r2, #0
 800e782:	bf14      	ite	ne
 800e784:	f04f 32ff 	movne.w	r2, #4294967295
 800e788:	2201      	moveq	r2, #1
 800e78a:	608a      	str	r2, [r1, #8]
 800e78c:	6822      	ldr	r2, [r4, #0]
 800e78e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800e820 <_scanf_chars+0xb0>
 800e792:	06d1      	lsls	r1, r2, #27
 800e794:	bf5f      	itttt	pl
 800e796:	681a      	ldrpl	r2, [r3, #0]
 800e798:	1d11      	addpl	r1, r2, #4
 800e79a:	6019      	strpl	r1, [r3, #0]
 800e79c:	6816      	ldrpl	r6, [r2, #0]
 800e79e:	2700      	movs	r7, #0
 800e7a0:	69a0      	ldr	r0, [r4, #24]
 800e7a2:	b188      	cbz	r0, 800e7c8 <_scanf_chars+0x58>
 800e7a4:	2801      	cmp	r0, #1
 800e7a6:	d107      	bne.n	800e7b8 <_scanf_chars+0x48>
 800e7a8:	682b      	ldr	r3, [r5, #0]
 800e7aa:	781a      	ldrb	r2, [r3, #0]
 800e7ac:	6963      	ldr	r3, [r4, #20]
 800e7ae:	5c9b      	ldrb	r3, [r3, r2]
 800e7b0:	b953      	cbnz	r3, 800e7c8 <_scanf_chars+0x58>
 800e7b2:	2f00      	cmp	r7, #0
 800e7b4:	d031      	beq.n	800e81a <_scanf_chars+0xaa>
 800e7b6:	e022      	b.n	800e7fe <_scanf_chars+0x8e>
 800e7b8:	2802      	cmp	r0, #2
 800e7ba:	d120      	bne.n	800e7fe <_scanf_chars+0x8e>
 800e7bc:	682b      	ldr	r3, [r5, #0]
 800e7be:	781b      	ldrb	r3, [r3, #0]
 800e7c0:	f819 3003 	ldrb.w	r3, [r9, r3]
 800e7c4:	071b      	lsls	r3, r3, #28
 800e7c6:	d41a      	bmi.n	800e7fe <_scanf_chars+0x8e>
 800e7c8:	6823      	ldr	r3, [r4, #0]
 800e7ca:	06da      	lsls	r2, r3, #27
 800e7cc:	bf5e      	ittt	pl
 800e7ce:	682b      	ldrpl	r3, [r5, #0]
 800e7d0:	781b      	ldrbpl	r3, [r3, #0]
 800e7d2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e7d6:	682a      	ldr	r2, [r5, #0]
 800e7d8:	686b      	ldr	r3, [r5, #4]
 800e7da:	3201      	adds	r2, #1
 800e7dc:	602a      	str	r2, [r5, #0]
 800e7de:	68a2      	ldr	r2, [r4, #8]
 800e7e0:	3b01      	subs	r3, #1
 800e7e2:	3a01      	subs	r2, #1
 800e7e4:	606b      	str	r3, [r5, #4]
 800e7e6:	3701      	adds	r7, #1
 800e7e8:	60a2      	str	r2, [r4, #8]
 800e7ea:	b142      	cbz	r2, 800e7fe <_scanf_chars+0x8e>
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	dcd7      	bgt.n	800e7a0 <_scanf_chars+0x30>
 800e7f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e7f4:	4629      	mov	r1, r5
 800e7f6:	4640      	mov	r0, r8
 800e7f8:	4798      	blx	r3
 800e7fa:	2800      	cmp	r0, #0
 800e7fc:	d0d0      	beq.n	800e7a0 <_scanf_chars+0x30>
 800e7fe:	6823      	ldr	r3, [r4, #0]
 800e800:	f013 0310 	ands.w	r3, r3, #16
 800e804:	d105      	bne.n	800e812 <_scanf_chars+0xa2>
 800e806:	68e2      	ldr	r2, [r4, #12]
 800e808:	3201      	adds	r2, #1
 800e80a:	60e2      	str	r2, [r4, #12]
 800e80c:	69a2      	ldr	r2, [r4, #24]
 800e80e:	b102      	cbz	r2, 800e812 <_scanf_chars+0xa2>
 800e810:	7033      	strb	r3, [r6, #0]
 800e812:	6923      	ldr	r3, [r4, #16]
 800e814:	443b      	add	r3, r7
 800e816:	6123      	str	r3, [r4, #16]
 800e818:	2000      	movs	r0, #0
 800e81a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e81e:	bf00      	nop
 800e820:	0800f639 	.word	0x0800f639

0800e824 <_scanf_i>:
 800e824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e828:	4698      	mov	r8, r3
 800e82a:	4b74      	ldr	r3, [pc, #464]	@ (800e9fc <_scanf_i+0x1d8>)
 800e82c:	460c      	mov	r4, r1
 800e82e:	4682      	mov	sl, r0
 800e830:	4616      	mov	r6, r2
 800e832:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e836:	b087      	sub	sp, #28
 800e838:	ab03      	add	r3, sp, #12
 800e83a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e83e:	4b70      	ldr	r3, [pc, #448]	@ (800ea00 <_scanf_i+0x1dc>)
 800e840:	69a1      	ldr	r1, [r4, #24]
 800e842:	4a70      	ldr	r2, [pc, #448]	@ (800ea04 <_scanf_i+0x1e0>)
 800e844:	2903      	cmp	r1, #3
 800e846:	bf08      	it	eq
 800e848:	461a      	moveq	r2, r3
 800e84a:	68a3      	ldr	r3, [r4, #8]
 800e84c:	9201      	str	r2, [sp, #4]
 800e84e:	1e5a      	subs	r2, r3, #1
 800e850:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e854:	bf88      	it	hi
 800e856:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e85a:	4627      	mov	r7, r4
 800e85c:	bf82      	ittt	hi
 800e85e:	eb03 0905 	addhi.w	r9, r3, r5
 800e862:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e866:	60a3      	strhi	r3, [r4, #8]
 800e868:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e86c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800e870:	bf98      	it	ls
 800e872:	f04f 0900 	movls.w	r9, #0
 800e876:	6023      	str	r3, [r4, #0]
 800e878:	463d      	mov	r5, r7
 800e87a:	f04f 0b00 	mov.w	fp, #0
 800e87e:	6831      	ldr	r1, [r6, #0]
 800e880:	ab03      	add	r3, sp, #12
 800e882:	7809      	ldrb	r1, [r1, #0]
 800e884:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e888:	2202      	movs	r2, #2
 800e88a:	f7f1 fca9 	bl	80001e0 <memchr>
 800e88e:	b328      	cbz	r0, 800e8dc <_scanf_i+0xb8>
 800e890:	f1bb 0f01 	cmp.w	fp, #1
 800e894:	d159      	bne.n	800e94a <_scanf_i+0x126>
 800e896:	6862      	ldr	r2, [r4, #4]
 800e898:	b92a      	cbnz	r2, 800e8a6 <_scanf_i+0x82>
 800e89a:	6822      	ldr	r2, [r4, #0]
 800e89c:	2108      	movs	r1, #8
 800e89e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e8a2:	6061      	str	r1, [r4, #4]
 800e8a4:	6022      	str	r2, [r4, #0]
 800e8a6:	6822      	ldr	r2, [r4, #0]
 800e8a8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800e8ac:	6022      	str	r2, [r4, #0]
 800e8ae:	68a2      	ldr	r2, [r4, #8]
 800e8b0:	1e51      	subs	r1, r2, #1
 800e8b2:	60a1      	str	r1, [r4, #8]
 800e8b4:	b192      	cbz	r2, 800e8dc <_scanf_i+0xb8>
 800e8b6:	6832      	ldr	r2, [r6, #0]
 800e8b8:	1c51      	adds	r1, r2, #1
 800e8ba:	6031      	str	r1, [r6, #0]
 800e8bc:	7812      	ldrb	r2, [r2, #0]
 800e8be:	f805 2b01 	strb.w	r2, [r5], #1
 800e8c2:	6872      	ldr	r2, [r6, #4]
 800e8c4:	3a01      	subs	r2, #1
 800e8c6:	2a00      	cmp	r2, #0
 800e8c8:	6072      	str	r2, [r6, #4]
 800e8ca:	dc07      	bgt.n	800e8dc <_scanf_i+0xb8>
 800e8cc:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800e8d0:	4631      	mov	r1, r6
 800e8d2:	4650      	mov	r0, sl
 800e8d4:	4790      	blx	r2
 800e8d6:	2800      	cmp	r0, #0
 800e8d8:	f040 8085 	bne.w	800e9e6 <_scanf_i+0x1c2>
 800e8dc:	f10b 0b01 	add.w	fp, fp, #1
 800e8e0:	f1bb 0f03 	cmp.w	fp, #3
 800e8e4:	d1cb      	bne.n	800e87e <_scanf_i+0x5a>
 800e8e6:	6863      	ldr	r3, [r4, #4]
 800e8e8:	b90b      	cbnz	r3, 800e8ee <_scanf_i+0xca>
 800e8ea:	230a      	movs	r3, #10
 800e8ec:	6063      	str	r3, [r4, #4]
 800e8ee:	6863      	ldr	r3, [r4, #4]
 800e8f0:	4945      	ldr	r1, [pc, #276]	@ (800ea08 <_scanf_i+0x1e4>)
 800e8f2:	6960      	ldr	r0, [r4, #20]
 800e8f4:	1ac9      	subs	r1, r1, r3
 800e8f6:	f000 f997 	bl	800ec28 <__sccl>
 800e8fa:	f04f 0b00 	mov.w	fp, #0
 800e8fe:	68a3      	ldr	r3, [r4, #8]
 800e900:	6822      	ldr	r2, [r4, #0]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d03d      	beq.n	800e982 <_scanf_i+0x15e>
 800e906:	6831      	ldr	r1, [r6, #0]
 800e908:	6960      	ldr	r0, [r4, #20]
 800e90a:	f891 c000 	ldrb.w	ip, [r1]
 800e90e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e912:	2800      	cmp	r0, #0
 800e914:	d035      	beq.n	800e982 <_scanf_i+0x15e>
 800e916:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800e91a:	d124      	bne.n	800e966 <_scanf_i+0x142>
 800e91c:	0510      	lsls	r0, r2, #20
 800e91e:	d522      	bpl.n	800e966 <_scanf_i+0x142>
 800e920:	f10b 0b01 	add.w	fp, fp, #1
 800e924:	f1b9 0f00 	cmp.w	r9, #0
 800e928:	d003      	beq.n	800e932 <_scanf_i+0x10e>
 800e92a:	3301      	adds	r3, #1
 800e92c:	f109 39ff 	add.w	r9, r9, #4294967295
 800e930:	60a3      	str	r3, [r4, #8]
 800e932:	6873      	ldr	r3, [r6, #4]
 800e934:	3b01      	subs	r3, #1
 800e936:	2b00      	cmp	r3, #0
 800e938:	6073      	str	r3, [r6, #4]
 800e93a:	dd1b      	ble.n	800e974 <_scanf_i+0x150>
 800e93c:	6833      	ldr	r3, [r6, #0]
 800e93e:	3301      	adds	r3, #1
 800e940:	6033      	str	r3, [r6, #0]
 800e942:	68a3      	ldr	r3, [r4, #8]
 800e944:	3b01      	subs	r3, #1
 800e946:	60a3      	str	r3, [r4, #8]
 800e948:	e7d9      	b.n	800e8fe <_scanf_i+0xda>
 800e94a:	f1bb 0f02 	cmp.w	fp, #2
 800e94e:	d1ae      	bne.n	800e8ae <_scanf_i+0x8a>
 800e950:	6822      	ldr	r2, [r4, #0]
 800e952:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800e956:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800e95a:	d1bf      	bne.n	800e8dc <_scanf_i+0xb8>
 800e95c:	2110      	movs	r1, #16
 800e95e:	6061      	str	r1, [r4, #4]
 800e960:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e964:	e7a2      	b.n	800e8ac <_scanf_i+0x88>
 800e966:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800e96a:	6022      	str	r2, [r4, #0]
 800e96c:	780b      	ldrb	r3, [r1, #0]
 800e96e:	f805 3b01 	strb.w	r3, [r5], #1
 800e972:	e7de      	b.n	800e932 <_scanf_i+0x10e>
 800e974:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e978:	4631      	mov	r1, r6
 800e97a:	4650      	mov	r0, sl
 800e97c:	4798      	blx	r3
 800e97e:	2800      	cmp	r0, #0
 800e980:	d0df      	beq.n	800e942 <_scanf_i+0x11e>
 800e982:	6823      	ldr	r3, [r4, #0]
 800e984:	05d9      	lsls	r1, r3, #23
 800e986:	d50d      	bpl.n	800e9a4 <_scanf_i+0x180>
 800e988:	42bd      	cmp	r5, r7
 800e98a:	d909      	bls.n	800e9a0 <_scanf_i+0x17c>
 800e98c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e990:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e994:	4632      	mov	r2, r6
 800e996:	4650      	mov	r0, sl
 800e998:	4798      	blx	r3
 800e99a:	f105 39ff 	add.w	r9, r5, #4294967295
 800e99e:	464d      	mov	r5, r9
 800e9a0:	42bd      	cmp	r5, r7
 800e9a2:	d028      	beq.n	800e9f6 <_scanf_i+0x1d2>
 800e9a4:	6822      	ldr	r2, [r4, #0]
 800e9a6:	f012 0210 	ands.w	r2, r2, #16
 800e9aa:	d113      	bne.n	800e9d4 <_scanf_i+0x1b0>
 800e9ac:	702a      	strb	r2, [r5, #0]
 800e9ae:	6863      	ldr	r3, [r4, #4]
 800e9b0:	9e01      	ldr	r6, [sp, #4]
 800e9b2:	4639      	mov	r1, r7
 800e9b4:	4650      	mov	r0, sl
 800e9b6:	47b0      	blx	r6
 800e9b8:	f8d8 3000 	ldr.w	r3, [r8]
 800e9bc:	6821      	ldr	r1, [r4, #0]
 800e9be:	1d1a      	adds	r2, r3, #4
 800e9c0:	f8c8 2000 	str.w	r2, [r8]
 800e9c4:	f011 0f20 	tst.w	r1, #32
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	d00f      	beq.n	800e9ec <_scanf_i+0x1c8>
 800e9cc:	6018      	str	r0, [r3, #0]
 800e9ce:	68e3      	ldr	r3, [r4, #12]
 800e9d0:	3301      	adds	r3, #1
 800e9d2:	60e3      	str	r3, [r4, #12]
 800e9d4:	6923      	ldr	r3, [r4, #16]
 800e9d6:	1bed      	subs	r5, r5, r7
 800e9d8:	445d      	add	r5, fp
 800e9da:	442b      	add	r3, r5
 800e9dc:	6123      	str	r3, [r4, #16]
 800e9de:	2000      	movs	r0, #0
 800e9e0:	b007      	add	sp, #28
 800e9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9e6:	f04f 0b00 	mov.w	fp, #0
 800e9ea:	e7ca      	b.n	800e982 <_scanf_i+0x15e>
 800e9ec:	07ca      	lsls	r2, r1, #31
 800e9ee:	bf4c      	ite	mi
 800e9f0:	8018      	strhmi	r0, [r3, #0]
 800e9f2:	6018      	strpl	r0, [r3, #0]
 800e9f4:	e7eb      	b.n	800e9ce <_scanf_i+0x1aa>
 800e9f6:	2001      	movs	r0, #1
 800e9f8:	e7f2      	b.n	800e9e0 <_scanf_i+0x1bc>
 800e9fa:	bf00      	nop
 800e9fc:	0800f318 	.word	0x0800f318
 800ea00:	0800de89 	.word	0x0800de89
 800ea04:	0800ef45 	.word	0x0800ef45
 800ea08:	0800f75a 	.word	0x0800f75a

0800ea0c <__sflush_r>:
 800ea0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ea10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea14:	0716      	lsls	r6, r2, #28
 800ea16:	4605      	mov	r5, r0
 800ea18:	460c      	mov	r4, r1
 800ea1a:	d454      	bmi.n	800eac6 <__sflush_r+0xba>
 800ea1c:	684b      	ldr	r3, [r1, #4]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	dc02      	bgt.n	800ea28 <__sflush_r+0x1c>
 800ea22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	dd48      	ble.n	800eaba <__sflush_r+0xae>
 800ea28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ea2a:	2e00      	cmp	r6, #0
 800ea2c:	d045      	beq.n	800eaba <__sflush_r+0xae>
 800ea2e:	2300      	movs	r3, #0
 800ea30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ea34:	682f      	ldr	r7, [r5, #0]
 800ea36:	6a21      	ldr	r1, [r4, #32]
 800ea38:	602b      	str	r3, [r5, #0]
 800ea3a:	d030      	beq.n	800ea9e <__sflush_r+0x92>
 800ea3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ea3e:	89a3      	ldrh	r3, [r4, #12]
 800ea40:	0759      	lsls	r1, r3, #29
 800ea42:	d505      	bpl.n	800ea50 <__sflush_r+0x44>
 800ea44:	6863      	ldr	r3, [r4, #4]
 800ea46:	1ad2      	subs	r2, r2, r3
 800ea48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ea4a:	b10b      	cbz	r3, 800ea50 <__sflush_r+0x44>
 800ea4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ea4e:	1ad2      	subs	r2, r2, r3
 800ea50:	2300      	movs	r3, #0
 800ea52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ea54:	6a21      	ldr	r1, [r4, #32]
 800ea56:	4628      	mov	r0, r5
 800ea58:	47b0      	blx	r6
 800ea5a:	1c43      	adds	r3, r0, #1
 800ea5c:	89a3      	ldrh	r3, [r4, #12]
 800ea5e:	d106      	bne.n	800ea6e <__sflush_r+0x62>
 800ea60:	6829      	ldr	r1, [r5, #0]
 800ea62:	291d      	cmp	r1, #29
 800ea64:	d82b      	bhi.n	800eabe <__sflush_r+0xb2>
 800ea66:	4a2a      	ldr	r2, [pc, #168]	@ (800eb10 <__sflush_r+0x104>)
 800ea68:	410a      	asrs	r2, r1
 800ea6a:	07d6      	lsls	r6, r2, #31
 800ea6c:	d427      	bmi.n	800eabe <__sflush_r+0xb2>
 800ea6e:	2200      	movs	r2, #0
 800ea70:	6062      	str	r2, [r4, #4]
 800ea72:	04d9      	lsls	r1, r3, #19
 800ea74:	6922      	ldr	r2, [r4, #16]
 800ea76:	6022      	str	r2, [r4, #0]
 800ea78:	d504      	bpl.n	800ea84 <__sflush_r+0x78>
 800ea7a:	1c42      	adds	r2, r0, #1
 800ea7c:	d101      	bne.n	800ea82 <__sflush_r+0x76>
 800ea7e:	682b      	ldr	r3, [r5, #0]
 800ea80:	b903      	cbnz	r3, 800ea84 <__sflush_r+0x78>
 800ea82:	6560      	str	r0, [r4, #84]	@ 0x54
 800ea84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ea86:	602f      	str	r7, [r5, #0]
 800ea88:	b1b9      	cbz	r1, 800eaba <__sflush_r+0xae>
 800ea8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ea8e:	4299      	cmp	r1, r3
 800ea90:	d002      	beq.n	800ea98 <__sflush_r+0x8c>
 800ea92:	4628      	mov	r0, r5
 800ea94:	f7fe f880 	bl	800cb98 <_free_r>
 800ea98:	2300      	movs	r3, #0
 800ea9a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ea9c:	e00d      	b.n	800eaba <__sflush_r+0xae>
 800ea9e:	2301      	movs	r3, #1
 800eaa0:	4628      	mov	r0, r5
 800eaa2:	47b0      	blx	r6
 800eaa4:	4602      	mov	r2, r0
 800eaa6:	1c50      	adds	r0, r2, #1
 800eaa8:	d1c9      	bne.n	800ea3e <__sflush_r+0x32>
 800eaaa:	682b      	ldr	r3, [r5, #0]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d0c6      	beq.n	800ea3e <__sflush_r+0x32>
 800eab0:	2b1d      	cmp	r3, #29
 800eab2:	d001      	beq.n	800eab8 <__sflush_r+0xac>
 800eab4:	2b16      	cmp	r3, #22
 800eab6:	d11e      	bne.n	800eaf6 <__sflush_r+0xea>
 800eab8:	602f      	str	r7, [r5, #0]
 800eaba:	2000      	movs	r0, #0
 800eabc:	e022      	b.n	800eb04 <__sflush_r+0xf8>
 800eabe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eac2:	b21b      	sxth	r3, r3
 800eac4:	e01b      	b.n	800eafe <__sflush_r+0xf2>
 800eac6:	690f      	ldr	r7, [r1, #16]
 800eac8:	2f00      	cmp	r7, #0
 800eaca:	d0f6      	beq.n	800eaba <__sflush_r+0xae>
 800eacc:	0793      	lsls	r3, r2, #30
 800eace:	680e      	ldr	r6, [r1, #0]
 800ead0:	bf08      	it	eq
 800ead2:	694b      	ldreq	r3, [r1, #20]
 800ead4:	600f      	str	r7, [r1, #0]
 800ead6:	bf18      	it	ne
 800ead8:	2300      	movne	r3, #0
 800eada:	eba6 0807 	sub.w	r8, r6, r7
 800eade:	608b      	str	r3, [r1, #8]
 800eae0:	f1b8 0f00 	cmp.w	r8, #0
 800eae4:	dde9      	ble.n	800eaba <__sflush_r+0xae>
 800eae6:	6a21      	ldr	r1, [r4, #32]
 800eae8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800eaea:	4643      	mov	r3, r8
 800eaec:	463a      	mov	r2, r7
 800eaee:	4628      	mov	r0, r5
 800eaf0:	47b0      	blx	r6
 800eaf2:	2800      	cmp	r0, #0
 800eaf4:	dc08      	bgt.n	800eb08 <__sflush_r+0xfc>
 800eaf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eafa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eafe:	81a3      	strh	r3, [r4, #12]
 800eb00:	f04f 30ff 	mov.w	r0, #4294967295
 800eb04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb08:	4407      	add	r7, r0
 800eb0a:	eba8 0800 	sub.w	r8, r8, r0
 800eb0e:	e7e7      	b.n	800eae0 <__sflush_r+0xd4>
 800eb10:	dfbffffe 	.word	0xdfbffffe

0800eb14 <_fflush_r>:
 800eb14:	b538      	push	{r3, r4, r5, lr}
 800eb16:	690b      	ldr	r3, [r1, #16]
 800eb18:	4605      	mov	r5, r0
 800eb1a:	460c      	mov	r4, r1
 800eb1c:	b913      	cbnz	r3, 800eb24 <_fflush_r+0x10>
 800eb1e:	2500      	movs	r5, #0
 800eb20:	4628      	mov	r0, r5
 800eb22:	bd38      	pop	{r3, r4, r5, pc}
 800eb24:	b118      	cbz	r0, 800eb2e <_fflush_r+0x1a>
 800eb26:	6a03      	ldr	r3, [r0, #32]
 800eb28:	b90b      	cbnz	r3, 800eb2e <_fflush_r+0x1a>
 800eb2a:	f7fc ff4f 	bl	800b9cc <__sinit>
 800eb2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d0f3      	beq.n	800eb1e <_fflush_r+0xa>
 800eb36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eb38:	07d0      	lsls	r0, r2, #31
 800eb3a:	d404      	bmi.n	800eb46 <_fflush_r+0x32>
 800eb3c:	0599      	lsls	r1, r3, #22
 800eb3e:	d402      	bmi.n	800eb46 <_fflush_r+0x32>
 800eb40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eb42:	f7fd f9bc 	bl	800bebe <__retarget_lock_acquire_recursive>
 800eb46:	4628      	mov	r0, r5
 800eb48:	4621      	mov	r1, r4
 800eb4a:	f7ff ff5f 	bl	800ea0c <__sflush_r>
 800eb4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eb50:	07da      	lsls	r2, r3, #31
 800eb52:	4605      	mov	r5, r0
 800eb54:	d4e4      	bmi.n	800eb20 <_fflush_r+0xc>
 800eb56:	89a3      	ldrh	r3, [r4, #12]
 800eb58:	059b      	lsls	r3, r3, #22
 800eb5a:	d4e1      	bmi.n	800eb20 <_fflush_r+0xc>
 800eb5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eb5e:	f7fd f9af 	bl	800bec0 <__retarget_lock_release_recursive>
 800eb62:	e7dd      	b.n	800eb20 <_fflush_r+0xc>

0800eb64 <__swhatbuf_r>:
 800eb64:	b570      	push	{r4, r5, r6, lr}
 800eb66:	460c      	mov	r4, r1
 800eb68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb6c:	2900      	cmp	r1, #0
 800eb6e:	b096      	sub	sp, #88	@ 0x58
 800eb70:	4615      	mov	r5, r2
 800eb72:	461e      	mov	r6, r3
 800eb74:	da0d      	bge.n	800eb92 <__swhatbuf_r+0x2e>
 800eb76:	89a3      	ldrh	r3, [r4, #12]
 800eb78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800eb7c:	f04f 0100 	mov.w	r1, #0
 800eb80:	bf14      	ite	ne
 800eb82:	2340      	movne	r3, #64	@ 0x40
 800eb84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800eb88:	2000      	movs	r0, #0
 800eb8a:	6031      	str	r1, [r6, #0]
 800eb8c:	602b      	str	r3, [r5, #0]
 800eb8e:	b016      	add	sp, #88	@ 0x58
 800eb90:	bd70      	pop	{r4, r5, r6, pc}
 800eb92:	466a      	mov	r2, sp
 800eb94:	f000 f8d6 	bl	800ed44 <_fstat_r>
 800eb98:	2800      	cmp	r0, #0
 800eb9a:	dbec      	blt.n	800eb76 <__swhatbuf_r+0x12>
 800eb9c:	9901      	ldr	r1, [sp, #4]
 800eb9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800eba2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800eba6:	4259      	negs	r1, r3
 800eba8:	4159      	adcs	r1, r3
 800ebaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ebae:	e7eb      	b.n	800eb88 <__swhatbuf_r+0x24>

0800ebb0 <__smakebuf_r>:
 800ebb0:	898b      	ldrh	r3, [r1, #12]
 800ebb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ebb4:	079d      	lsls	r5, r3, #30
 800ebb6:	4606      	mov	r6, r0
 800ebb8:	460c      	mov	r4, r1
 800ebba:	d507      	bpl.n	800ebcc <__smakebuf_r+0x1c>
 800ebbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ebc0:	6023      	str	r3, [r4, #0]
 800ebc2:	6123      	str	r3, [r4, #16]
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	6163      	str	r3, [r4, #20]
 800ebc8:	b003      	add	sp, #12
 800ebca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebcc:	ab01      	add	r3, sp, #4
 800ebce:	466a      	mov	r2, sp
 800ebd0:	f7ff ffc8 	bl	800eb64 <__swhatbuf_r>
 800ebd4:	9f00      	ldr	r7, [sp, #0]
 800ebd6:	4605      	mov	r5, r0
 800ebd8:	4639      	mov	r1, r7
 800ebda:	4630      	mov	r0, r6
 800ebdc:	f7fe fb8a 	bl	800d2f4 <_malloc_r>
 800ebe0:	b948      	cbnz	r0, 800ebf6 <__smakebuf_r+0x46>
 800ebe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebe6:	059a      	lsls	r2, r3, #22
 800ebe8:	d4ee      	bmi.n	800ebc8 <__smakebuf_r+0x18>
 800ebea:	f023 0303 	bic.w	r3, r3, #3
 800ebee:	f043 0302 	orr.w	r3, r3, #2
 800ebf2:	81a3      	strh	r3, [r4, #12]
 800ebf4:	e7e2      	b.n	800ebbc <__smakebuf_r+0xc>
 800ebf6:	89a3      	ldrh	r3, [r4, #12]
 800ebf8:	6020      	str	r0, [r4, #0]
 800ebfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ebfe:	81a3      	strh	r3, [r4, #12]
 800ec00:	9b01      	ldr	r3, [sp, #4]
 800ec02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ec06:	b15b      	cbz	r3, 800ec20 <__smakebuf_r+0x70>
 800ec08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec0c:	4630      	mov	r0, r6
 800ec0e:	f000 f8ab 	bl	800ed68 <_isatty_r>
 800ec12:	b128      	cbz	r0, 800ec20 <__smakebuf_r+0x70>
 800ec14:	89a3      	ldrh	r3, [r4, #12]
 800ec16:	f023 0303 	bic.w	r3, r3, #3
 800ec1a:	f043 0301 	orr.w	r3, r3, #1
 800ec1e:	81a3      	strh	r3, [r4, #12]
 800ec20:	89a3      	ldrh	r3, [r4, #12]
 800ec22:	431d      	orrs	r5, r3
 800ec24:	81a5      	strh	r5, [r4, #12]
 800ec26:	e7cf      	b.n	800ebc8 <__smakebuf_r+0x18>

0800ec28 <__sccl>:
 800ec28:	b570      	push	{r4, r5, r6, lr}
 800ec2a:	780b      	ldrb	r3, [r1, #0]
 800ec2c:	4604      	mov	r4, r0
 800ec2e:	2b5e      	cmp	r3, #94	@ 0x5e
 800ec30:	bf0b      	itete	eq
 800ec32:	784b      	ldrbeq	r3, [r1, #1]
 800ec34:	1c4a      	addne	r2, r1, #1
 800ec36:	1c8a      	addeq	r2, r1, #2
 800ec38:	2100      	movne	r1, #0
 800ec3a:	bf08      	it	eq
 800ec3c:	2101      	moveq	r1, #1
 800ec3e:	3801      	subs	r0, #1
 800ec40:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800ec44:	f800 1f01 	strb.w	r1, [r0, #1]!
 800ec48:	42a8      	cmp	r0, r5
 800ec4a:	d1fb      	bne.n	800ec44 <__sccl+0x1c>
 800ec4c:	b90b      	cbnz	r3, 800ec52 <__sccl+0x2a>
 800ec4e:	1e50      	subs	r0, r2, #1
 800ec50:	bd70      	pop	{r4, r5, r6, pc}
 800ec52:	f081 0101 	eor.w	r1, r1, #1
 800ec56:	54e1      	strb	r1, [r4, r3]
 800ec58:	4610      	mov	r0, r2
 800ec5a:	4602      	mov	r2, r0
 800ec5c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ec60:	2d2d      	cmp	r5, #45	@ 0x2d
 800ec62:	d005      	beq.n	800ec70 <__sccl+0x48>
 800ec64:	2d5d      	cmp	r5, #93	@ 0x5d
 800ec66:	d016      	beq.n	800ec96 <__sccl+0x6e>
 800ec68:	2d00      	cmp	r5, #0
 800ec6a:	d0f1      	beq.n	800ec50 <__sccl+0x28>
 800ec6c:	462b      	mov	r3, r5
 800ec6e:	e7f2      	b.n	800ec56 <__sccl+0x2e>
 800ec70:	7846      	ldrb	r6, [r0, #1]
 800ec72:	2e5d      	cmp	r6, #93	@ 0x5d
 800ec74:	d0fa      	beq.n	800ec6c <__sccl+0x44>
 800ec76:	42b3      	cmp	r3, r6
 800ec78:	dcf8      	bgt.n	800ec6c <__sccl+0x44>
 800ec7a:	3002      	adds	r0, #2
 800ec7c:	461a      	mov	r2, r3
 800ec7e:	3201      	adds	r2, #1
 800ec80:	4296      	cmp	r6, r2
 800ec82:	54a1      	strb	r1, [r4, r2]
 800ec84:	dcfb      	bgt.n	800ec7e <__sccl+0x56>
 800ec86:	1af2      	subs	r2, r6, r3
 800ec88:	3a01      	subs	r2, #1
 800ec8a:	1c5d      	adds	r5, r3, #1
 800ec8c:	42b3      	cmp	r3, r6
 800ec8e:	bfa8      	it	ge
 800ec90:	2200      	movge	r2, #0
 800ec92:	18ab      	adds	r3, r5, r2
 800ec94:	e7e1      	b.n	800ec5a <__sccl+0x32>
 800ec96:	4610      	mov	r0, r2
 800ec98:	e7da      	b.n	800ec50 <__sccl+0x28>

0800ec9a <__submore>:
 800ec9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec9e:	460c      	mov	r4, r1
 800eca0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800eca2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eca6:	4299      	cmp	r1, r3
 800eca8:	d11d      	bne.n	800ece6 <__submore+0x4c>
 800ecaa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ecae:	f7fe fb21 	bl	800d2f4 <_malloc_r>
 800ecb2:	b918      	cbnz	r0, 800ecbc <__submore+0x22>
 800ecb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ecb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ecc0:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ecc2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800ecc6:	6360      	str	r0, [r4, #52]	@ 0x34
 800ecc8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800eccc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ecd0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800ecd4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ecd8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800ecdc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800ece0:	6020      	str	r0, [r4, #0]
 800ece2:	2000      	movs	r0, #0
 800ece4:	e7e8      	b.n	800ecb8 <__submore+0x1e>
 800ece6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800ece8:	0077      	lsls	r7, r6, #1
 800ecea:	463a      	mov	r2, r7
 800ecec:	f000 f88e 	bl	800ee0c <_realloc_r>
 800ecf0:	4605      	mov	r5, r0
 800ecf2:	2800      	cmp	r0, #0
 800ecf4:	d0de      	beq.n	800ecb4 <__submore+0x1a>
 800ecf6:	eb00 0806 	add.w	r8, r0, r6
 800ecfa:	4601      	mov	r1, r0
 800ecfc:	4632      	mov	r2, r6
 800ecfe:	4640      	mov	r0, r8
 800ed00:	f7fd f8df 	bl	800bec2 <memcpy>
 800ed04:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800ed08:	f8c4 8000 	str.w	r8, [r4]
 800ed0c:	e7e9      	b.n	800ece2 <__submore+0x48>

0800ed0e <memmove>:
 800ed0e:	4288      	cmp	r0, r1
 800ed10:	b510      	push	{r4, lr}
 800ed12:	eb01 0402 	add.w	r4, r1, r2
 800ed16:	d902      	bls.n	800ed1e <memmove+0x10>
 800ed18:	4284      	cmp	r4, r0
 800ed1a:	4623      	mov	r3, r4
 800ed1c:	d807      	bhi.n	800ed2e <memmove+0x20>
 800ed1e:	1e43      	subs	r3, r0, #1
 800ed20:	42a1      	cmp	r1, r4
 800ed22:	d008      	beq.n	800ed36 <memmove+0x28>
 800ed24:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed28:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ed2c:	e7f8      	b.n	800ed20 <memmove+0x12>
 800ed2e:	4402      	add	r2, r0
 800ed30:	4601      	mov	r1, r0
 800ed32:	428a      	cmp	r2, r1
 800ed34:	d100      	bne.n	800ed38 <memmove+0x2a>
 800ed36:	bd10      	pop	{r4, pc}
 800ed38:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed3c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed40:	e7f7      	b.n	800ed32 <memmove+0x24>
	...

0800ed44 <_fstat_r>:
 800ed44:	b538      	push	{r3, r4, r5, lr}
 800ed46:	4d07      	ldr	r5, [pc, #28]	@ (800ed64 <_fstat_r+0x20>)
 800ed48:	2300      	movs	r3, #0
 800ed4a:	4604      	mov	r4, r0
 800ed4c:	4608      	mov	r0, r1
 800ed4e:	4611      	mov	r1, r2
 800ed50:	602b      	str	r3, [r5, #0]
 800ed52:	f7f4 fa09 	bl	8003168 <_fstat>
 800ed56:	1c43      	adds	r3, r0, #1
 800ed58:	d102      	bne.n	800ed60 <_fstat_r+0x1c>
 800ed5a:	682b      	ldr	r3, [r5, #0]
 800ed5c:	b103      	cbz	r3, 800ed60 <_fstat_r+0x1c>
 800ed5e:	6023      	str	r3, [r4, #0]
 800ed60:	bd38      	pop	{r3, r4, r5, pc}
 800ed62:	bf00      	nop
 800ed64:	20000b30 	.word	0x20000b30

0800ed68 <_isatty_r>:
 800ed68:	b538      	push	{r3, r4, r5, lr}
 800ed6a:	4d06      	ldr	r5, [pc, #24]	@ (800ed84 <_isatty_r+0x1c>)
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	4604      	mov	r4, r0
 800ed70:	4608      	mov	r0, r1
 800ed72:	602b      	str	r3, [r5, #0]
 800ed74:	f7f4 fa08 	bl	8003188 <_isatty>
 800ed78:	1c43      	adds	r3, r0, #1
 800ed7a:	d102      	bne.n	800ed82 <_isatty_r+0x1a>
 800ed7c:	682b      	ldr	r3, [r5, #0]
 800ed7e:	b103      	cbz	r3, 800ed82 <_isatty_r+0x1a>
 800ed80:	6023      	str	r3, [r4, #0]
 800ed82:	bd38      	pop	{r3, r4, r5, pc}
 800ed84:	20000b30 	.word	0x20000b30

0800ed88 <_sbrk_r>:
 800ed88:	b538      	push	{r3, r4, r5, lr}
 800ed8a:	4d06      	ldr	r5, [pc, #24]	@ (800eda4 <_sbrk_r+0x1c>)
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	4604      	mov	r4, r0
 800ed90:	4608      	mov	r0, r1
 800ed92:	602b      	str	r3, [r5, #0]
 800ed94:	f7f4 fa10 	bl	80031b8 <_sbrk>
 800ed98:	1c43      	adds	r3, r0, #1
 800ed9a:	d102      	bne.n	800eda2 <_sbrk_r+0x1a>
 800ed9c:	682b      	ldr	r3, [r5, #0]
 800ed9e:	b103      	cbz	r3, 800eda2 <_sbrk_r+0x1a>
 800eda0:	6023      	str	r3, [r4, #0]
 800eda2:	bd38      	pop	{r3, r4, r5, pc}
 800eda4:	20000b30 	.word	0x20000b30

0800eda8 <__assert_func>:
 800eda8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800edaa:	4614      	mov	r4, r2
 800edac:	461a      	mov	r2, r3
 800edae:	4b09      	ldr	r3, [pc, #36]	@ (800edd4 <__assert_func+0x2c>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	4605      	mov	r5, r0
 800edb4:	68d8      	ldr	r0, [r3, #12]
 800edb6:	b954      	cbnz	r4, 800edce <__assert_func+0x26>
 800edb8:	4b07      	ldr	r3, [pc, #28]	@ (800edd8 <__assert_func+0x30>)
 800edba:	461c      	mov	r4, r3
 800edbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800edc0:	9100      	str	r1, [sp, #0]
 800edc2:	462b      	mov	r3, r5
 800edc4:	4905      	ldr	r1, [pc, #20]	@ (800eddc <__assert_func+0x34>)
 800edc6:	f000 f8bf 	bl	800ef48 <fiprintf>
 800edca:	f000 f8cf 	bl	800ef6c <abort>
 800edce:	4b04      	ldr	r3, [pc, #16]	@ (800ede0 <__assert_func+0x38>)
 800edd0:	e7f4      	b.n	800edbc <__assert_func+0x14>
 800edd2:	bf00      	nop
 800edd4:	20000190 	.word	0x20000190
 800edd8:	0800f7a0 	.word	0x0800f7a0
 800eddc:	0800f772 	.word	0x0800f772
 800ede0:	0800f765 	.word	0x0800f765

0800ede4 <_calloc_r>:
 800ede4:	b570      	push	{r4, r5, r6, lr}
 800ede6:	fba1 5402 	umull	r5, r4, r1, r2
 800edea:	b93c      	cbnz	r4, 800edfc <_calloc_r+0x18>
 800edec:	4629      	mov	r1, r5
 800edee:	f7fe fa81 	bl	800d2f4 <_malloc_r>
 800edf2:	4606      	mov	r6, r0
 800edf4:	b928      	cbnz	r0, 800ee02 <_calloc_r+0x1e>
 800edf6:	2600      	movs	r6, #0
 800edf8:	4630      	mov	r0, r6
 800edfa:	bd70      	pop	{r4, r5, r6, pc}
 800edfc:	220c      	movs	r2, #12
 800edfe:	6002      	str	r2, [r0, #0]
 800ee00:	e7f9      	b.n	800edf6 <_calloc_r+0x12>
 800ee02:	462a      	mov	r2, r5
 800ee04:	4621      	mov	r1, r4
 800ee06:	f7fc ffab 	bl	800bd60 <memset>
 800ee0a:	e7f5      	b.n	800edf8 <_calloc_r+0x14>

0800ee0c <_realloc_r>:
 800ee0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee10:	4680      	mov	r8, r0
 800ee12:	4615      	mov	r5, r2
 800ee14:	460c      	mov	r4, r1
 800ee16:	b921      	cbnz	r1, 800ee22 <_realloc_r+0x16>
 800ee18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee1c:	4611      	mov	r1, r2
 800ee1e:	f7fe ba69 	b.w	800d2f4 <_malloc_r>
 800ee22:	b92a      	cbnz	r2, 800ee30 <_realloc_r+0x24>
 800ee24:	f7fd feb8 	bl	800cb98 <_free_r>
 800ee28:	2400      	movs	r4, #0
 800ee2a:	4620      	mov	r0, r4
 800ee2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee30:	f000 f8a3 	bl	800ef7a <_malloc_usable_size_r>
 800ee34:	4285      	cmp	r5, r0
 800ee36:	4606      	mov	r6, r0
 800ee38:	d802      	bhi.n	800ee40 <_realloc_r+0x34>
 800ee3a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ee3e:	d8f4      	bhi.n	800ee2a <_realloc_r+0x1e>
 800ee40:	4629      	mov	r1, r5
 800ee42:	4640      	mov	r0, r8
 800ee44:	f7fe fa56 	bl	800d2f4 <_malloc_r>
 800ee48:	4607      	mov	r7, r0
 800ee4a:	2800      	cmp	r0, #0
 800ee4c:	d0ec      	beq.n	800ee28 <_realloc_r+0x1c>
 800ee4e:	42b5      	cmp	r5, r6
 800ee50:	462a      	mov	r2, r5
 800ee52:	4621      	mov	r1, r4
 800ee54:	bf28      	it	cs
 800ee56:	4632      	movcs	r2, r6
 800ee58:	f7fd f833 	bl	800bec2 <memcpy>
 800ee5c:	4621      	mov	r1, r4
 800ee5e:	4640      	mov	r0, r8
 800ee60:	f7fd fe9a 	bl	800cb98 <_free_r>
 800ee64:	463c      	mov	r4, r7
 800ee66:	e7e0      	b.n	800ee2a <_realloc_r+0x1e>

0800ee68 <_strtoul_l.constprop.0>:
 800ee68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee6c:	4e34      	ldr	r6, [pc, #208]	@ (800ef40 <_strtoul_l.constprop.0+0xd8>)
 800ee6e:	4686      	mov	lr, r0
 800ee70:	460d      	mov	r5, r1
 800ee72:	4628      	mov	r0, r5
 800ee74:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ee78:	5d37      	ldrb	r7, [r6, r4]
 800ee7a:	f017 0708 	ands.w	r7, r7, #8
 800ee7e:	d1f8      	bne.n	800ee72 <_strtoul_l.constprop.0+0xa>
 800ee80:	2c2d      	cmp	r4, #45	@ 0x2d
 800ee82:	d12f      	bne.n	800eee4 <_strtoul_l.constprop.0+0x7c>
 800ee84:	782c      	ldrb	r4, [r5, #0]
 800ee86:	2701      	movs	r7, #1
 800ee88:	1c85      	adds	r5, r0, #2
 800ee8a:	f033 0010 	bics.w	r0, r3, #16
 800ee8e:	d109      	bne.n	800eea4 <_strtoul_l.constprop.0+0x3c>
 800ee90:	2c30      	cmp	r4, #48	@ 0x30
 800ee92:	d12c      	bne.n	800eeee <_strtoul_l.constprop.0+0x86>
 800ee94:	7828      	ldrb	r0, [r5, #0]
 800ee96:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800ee9a:	2858      	cmp	r0, #88	@ 0x58
 800ee9c:	d127      	bne.n	800eeee <_strtoul_l.constprop.0+0x86>
 800ee9e:	786c      	ldrb	r4, [r5, #1]
 800eea0:	2310      	movs	r3, #16
 800eea2:	3502      	adds	r5, #2
 800eea4:	f04f 38ff 	mov.w	r8, #4294967295
 800eea8:	2600      	movs	r6, #0
 800eeaa:	fbb8 f8f3 	udiv	r8, r8, r3
 800eeae:	fb03 f908 	mul.w	r9, r3, r8
 800eeb2:	ea6f 0909 	mvn.w	r9, r9
 800eeb6:	4630      	mov	r0, r6
 800eeb8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800eebc:	f1bc 0f09 	cmp.w	ip, #9
 800eec0:	d81c      	bhi.n	800eefc <_strtoul_l.constprop.0+0x94>
 800eec2:	4664      	mov	r4, ip
 800eec4:	42a3      	cmp	r3, r4
 800eec6:	dd2a      	ble.n	800ef1e <_strtoul_l.constprop.0+0xb6>
 800eec8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800eecc:	d007      	beq.n	800eede <_strtoul_l.constprop.0+0x76>
 800eece:	4580      	cmp	r8, r0
 800eed0:	d322      	bcc.n	800ef18 <_strtoul_l.constprop.0+0xb0>
 800eed2:	d101      	bne.n	800eed8 <_strtoul_l.constprop.0+0x70>
 800eed4:	45a1      	cmp	r9, r4
 800eed6:	db1f      	blt.n	800ef18 <_strtoul_l.constprop.0+0xb0>
 800eed8:	fb00 4003 	mla	r0, r0, r3, r4
 800eedc:	2601      	movs	r6, #1
 800eede:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eee2:	e7e9      	b.n	800eeb8 <_strtoul_l.constprop.0+0x50>
 800eee4:	2c2b      	cmp	r4, #43	@ 0x2b
 800eee6:	bf04      	itt	eq
 800eee8:	782c      	ldrbeq	r4, [r5, #0]
 800eeea:	1c85      	addeq	r5, r0, #2
 800eeec:	e7cd      	b.n	800ee8a <_strtoul_l.constprop.0+0x22>
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d1d8      	bne.n	800eea4 <_strtoul_l.constprop.0+0x3c>
 800eef2:	2c30      	cmp	r4, #48	@ 0x30
 800eef4:	bf0c      	ite	eq
 800eef6:	2308      	moveq	r3, #8
 800eef8:	230a      	movne	r3, #10
 800eefa:	e7d3      	b.n	800eea4 <_strtoul_l.constprop.0+0x3c>
 800eefc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800ef00:	f1bc 0f19 	cmp.w	ip, #25
 800ef04:	d801      	bhi.n	800ef0a <_strtoul_l.constprop.0+0xa2>
 800ef06:	3c37      	subs	r4, #55	@ 0x37
 800ef08:	e7dc      	b.n	800eec4 <_strtoul_l.constprop.0+0x5c>
 800ef0a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800ef0e:	f1bc 0f19 	cmp.w	ip, #25
 800ef12:	d804      	bhi.n	800ef1e <_strtoul_l.constprop.0+0xb6>
 800ef14:	3c57      	subs	r4, #87	@ 0x57
 800ef16:	e7d5      	b.n	800eec4 <_strtoul_l.constprop.0+0x5c>
 800ef18:	f04f 36ff 	mov.w	r6, #4294967295
 800ef1c:	e7df      	b.n	800eede <_strtoul_l.constprop.0+0x76>
 800ef1e:	1c73      	adds	r3, r6, #1
 800ef20:	d106      	bne.n	800ef30 <_strtoul_l.constprop.0+0xc8>
 800ef22:	2322      	movs	r3, #34	@ 0x22
 800ef24:	f8ce 3000 	str.w	r3, [lr]
 800ef28:	4630      	mov	r0, r6
 800ef2a:	b932      	cbnz	r2, 800ef3a <_strtoul_l.constprop.0+0xd2>
 800ef2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef30:	b107      	cbz	r7, 800ef34 <_strtoul_l.constprop.0+0xcc>
 800ef32:	4240      	negs	r0, r0
 800ef34:	2a00      	cmp	r2, #0
 800ef36:	d0f9      	beq.n	800ef2c <_strtoul_l.constprop.0+0xc4>
 800ef38:	b106      	cbz	r6, 800ef3c <_strtoul_l.constprop.0+0xd4>
 800ef3a:	1e69      	subs	r1, r5, #1
 800ef3c:	6011      	str	r1, [r2, #0]
 800ef3e:	e7f5      	b.n	800ef2c <_strtoul_l.constprop.0+0xc4>
 800ef40:	0800f639 	.word	0x0800f639

0800ef44 <_strtoul_r>:
 800ef44:	f7ff bf90 	b.w	800ee68 <_strtoul_l.constprop.0>

0800ef48 <fiprintf>:
 800ef48:	b40e      	push	{r1, r2, r3}
 800ef4a:	b503      	push	{r0, r1, lr}
 800ef4c:	4601      	mov	r1, r0
 800ef4e:	ab03      	add	r3, sp, #12
 800ef50:	4805      	ldr	r0, [pc, #20]	@ (800ef68 <fiprintf+0x20>)
 800ef52:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef56:	6800      	ldr	r0, [r0, #0]
 800ef58:	9301      	str	r3, [sp, #4]
 800ef5a:	f7ff faf1 	bl	800e540 <_vfiprintf_r>
 800ef5e:	b002      	add	sp, #8
 800ef60:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef64:	b003      	add	sp, #12
 800ef66:	4770      	bx	lr
 800ef68:	20000190 	.word	0x20000190

0800ef6c <abort>:
 800ef6c:	b508      	push	{r3, lr}
 800ef6e:	2006      	movs	r0, #6
 800ef70:	f000 f834 	bl	800efdc <raise>
 800ef74:	2001      	movs	r0, #1
 800ef76:	f7f4 f8a7 	bl	80030c8 <_exit>

0800ef7a <_malloc_usable_size_r>:
 800ef7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef7e:	1f18      	subs	r0, r3, #4
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	bfbc      	itt	lt
 800ef84:	580b      	ldrlt	r3, [r1, r0]
 800ef86:	18c0      	addlt	r0, r0, r3
 800ef88:	4770      	bx	lr

0800ef8a <_raise_r>:
 800ef8a:	291f      	cmp	r1, #31
 800ef8c:	b538      	push	{r3, r4, r5, lr}
 800ef8e:	4605      	mov	r5, r0
 800ef90:	460c      	mov	r4, r1
 800ef92:	d904      	bls.n	800ef9e <_raise_r+0x14>
 800ef94:	2316      	movs	r3, #22
 800ef96:	6003      	str	r3, [r0, #0]
 800ef98:	f04f 30ff 	mov.w	r0, #4294967295
 800ef9c:	bd38      	pop	{r3, r4, r5, pc}
 800ef9e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800efa0:	b112      	cbz	r2, 800efa8 <_raise_r+0x1e>
 800efa2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800efa6:	b94b      	cbnz	r3, 800efbc <_raise_r+0x32>
 800efa8:	4628      	mov	r0, r5
 800efaa:	f000 f831 	bl	800f010 <_getpid_r>
 800efae:	4622      	mov	r2, r4
 800efb0:	4601      	mov	r1, r0
 800efb2:	4628      	mov	r0, r5
 800efb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efb8:	f000 b818 	b.w	800efec <_kill_r>
 800efbc:	2b01      	cmp	r3, #1
 800efbe:	d00a      	beq.n	800efd6 <_raise_r+0x4c>
 800efc0:	1c59      	adds	r1, r3, #1
 800efc2:	d103      	bne.n	800efcc <_raise_r+0x42>
 800efc4:	2316      	movs	r3, #22
 800efc6:	6003      	str	r3, [r0, #0]
 800efc8:	2001      	movs	r0, #1
 800efca:	e7e7      	b.n	800ef9c <_raise_r+0x12>
 800efcc:	2100      	movs	r1, #0
 800efce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800efd2:	4620      	mov	r0, r4
 800efd4:	4798      	blx	r3
 800efd6:	2000      	movs	r0, #0
 800efd8:	e7e0      	b.n	800ef9c <_raise_r+0x12>
	...

0800efdc <raise>:
 800efdc:	4b02      	ldr	r3, [pc, #8]	@ (800efe8 <raise+0xc>)
 800efde:	4601      	mov	r1, r0
 800efe0:	6818      	ldr	r0, [r3, #0]
 800efe2:	f7ff bfd2 	b.w	800ef8a <_raise_r>
 800efe6:	bf00      	nop
 800efe8:	20000190 	.word	0x20000190

0800efec <_kill_r>:
 800efec:	b538      	push	{r3, r4, r5, lr}
 800efee:	4d07      	ldr	r5, [pc, #28]	@ (800f00c <_kill_r+0x20>)
 800eff0:	2300      	movs	r3, #0
 800eff2:	4604      	mov	r4, r0
 800eff4:	4608      	mov	r0, r1
 800eff6:	4611      	mov	r1, r2
 800eff8:	602b      	str	r3, [r5, #0]
 800effa:	f7f4 f855 	bl	80030a8 <_kill>
 800effe:	1c43      	adds	r3, r0, #1
 800f000:	d102      	bne.n	800f008 <_kill_r+0x1c>
 800f002:	682b      	ldr	r3, [r5, #0]
 800f004:	b103      	cbz	r3, 800f008 <_kill_r+0x1c>
 800f006:	6023      	str	r3, [r4, #0]
 800f008:	bd38      	pop	{r3, r4, r5, pc}
 800f00a:	bf00      	nop
 800f00c:	20000b30 	.word	0x20000b30

0800f010 <_getpid_r>:
 800f010:	f7f4 b842 	b.w	8003098 <_getpid>

0800f014 <_init>:
 800f014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f016:	bf00      	nop
 800f018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f01a:	bc08      	pop	{r3}
 800f01c:	469e      	mov	lr, r3
 800f01e:	4770      	bx	lr

0800f020 <_fini>:
 800f020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f022:	bf00      	nop
 800f024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f026:	bc08      	pop	{r3}
 800f028:	469e      	mov	lr, r3
 800f02a:	4770      	bx	lr
