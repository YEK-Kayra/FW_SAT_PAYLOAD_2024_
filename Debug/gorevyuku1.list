
gorevyuku1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010284  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  08010428  08010428  00011428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080109a0  080109a0  000121e8  2**0
                  CONTENTS
  4 .ARM          00000008  080109a0  080109a0  000119a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080109a8  080109a8  000121e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080109a8  080109a8  000119a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080109ac  080109ac  000119ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  080109b0  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000970  200001e8  08010b98  000121e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b58  08010b98  00012b58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000121e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ce5e  00000000  00000000  00012218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004470  00000000  00000000  0002f076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b0  00000000  00000000  000334e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000127f  00000000  00000000  00034c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007938  00000000  00000000  00035f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021e0b  00000000  00000000  0003d84f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a742c  00000000  00000000  0005f65a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00106a86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c08  00000000  00000000  00106acc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0010e6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801040c 	.word	0x0801040c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0801040c 	.word	0x0801040c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <SubSys_Actuator_Servo_MoveTo>:
 * 		   The correct duty cycle range is between 2% and 12%.
 *
 * @param *dev, Connect struct parameter htim_X, tim_channel_in as given below
 * @param Angle The desired angle for the motor to turn.
 */
void SubSys_Actuator_Servo_MoveTo(Actuator_Servo_HandleTypeDef *dev, uint16_t Angle){
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	807b      	strh	r3, [r7, #2]

	if(dev == &dev_Servo_Separation){
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a17      	ldr	r2, [pc, #92]	@ (8001060 <SubSys_Actuator_Servo_MoveTo+0x6c>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d110      	bne.n	800102a <SubSys_Actuator_Servo_MoveTo+0x36>
		dev->htim_X->Instance->CCR2 = (((Angle*100)/180)+20);
 8001008:	887b      	ldrh	r3, [r7, #2]
 800100a:	2264      	movs	r2, #100	@ 0x64
 800100c:	fb02 f303 	mul.w	r3, r2, r3
 8001010:	4a14      	ldr	r2, [pc, #80]	@ (8001064 <SubSys_Actuator_Servo_MoveTo+0x70>)
 8001012:	fb82 1203 	smull	r1, r2, r2, r3
 8001016:	441a      	add	r2, r3
 8001018:	11d2      	asrs	r2, r2, #7
 800101a:	17db      	asrs	r3, r3, #31
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	f103 0214 	add.w	r2, r3, #20
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	639a      	str	r2, [r3, #56]	@ 0x38
	}

	if(dev == &dev_Servo_ColorFilter){
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a0e      	ldr	r2, [pc, #56]	@ (8001068 <SubSys_Actuator_Servo_MoveTo+0x74>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d110      	bne.n	8001054 <SubSys_Actuator_Servo_MoveTo+0x60>
		dev->htim_X->Instance->CCR1 = (((Angle*100)/180)+20);
 8001032:	887b      	ldrh	r3, [r7, #2]
 8001034:	2264      	movs	r2, #100	@ 0x64
 8001036:	fb02 f303 	mul.w	r3, r2, r3
 800103a:	4a0a      	ldr	r2, [pc, #40]	@ (8001064 <SubSys_Actuator_Servo_MoveTo+0x70>)
 800103c:	fb82 1203 	smull	r1, r2, r2, r3
 8001040:	441a      	add	r2, r3
 8001042:	11d2      	asrs	r2, r2, #7
 8001044:	17db      	asrs	r3, r3, #31
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	f103 0214 	add.w	r2, r3, #20
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	635a      	str	r2, [r3, #52]	@ 0x34
	}

}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	200009c4 	.word	0x200009c4
 8001064:	b60b60b7 	.word	0xb60b60b7
 8001068:	200009cc 	.word	0x200009cc

0800106c <PassiveBuzz_ON>:
 * @brief : Buzzer is set when the function is called(DutyCycle is configurated by the CCRx REG)
 * @param :  htim_X        : it's set by &htimX. X is the number of timers
 * @param :  PWM_Channel_X :  it's set by TIM_CHANNEL_X . X is the number of timer's channels
 * @retval: None
 */
void PassiveBuzz_ON(TIM_HandleTypeDef *htim_X, uint32_t PWM_Channel_X){
 800106c:	b590      	push	{r4, r7, lr}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]

	switch (PWM_Channel_X){
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	2b0c      	cmp	r3, #12
 800107a:	d875      	bhi.n	8001168 <PassiveBuzz_ON+0xfc>
 800107c:	a201      	add	r2, pc, #4	@ (adr r2, 8001084 <PassiveBuzz_ON+0x18>)
 800107e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001082:	bf00      	nop
 8001084:	080010b9 	.word	0x080010b9
 8001088:	08001169 	.word	0x08001169
 800108c:	08001169 	.word	0x08001169
 8001090:	08001169 	.word	0x08001169
 8001094:	080010e5 	.word	0x080010e5
 8001098:	08001169 	.word	0x08001169
 800109c:	08001169 	.word	0x08001169
 80010a0:	08001169 	.word	0x08001169
 80010a4:	08001111 	.word	0x08001111
 80010a8:	08001169 	.word	0x08001169
 80010ac:	08001169 	.word	0x08001169
 80010b0:	08001169 	.word	0x08001169
 80010b4:	0800113d 	.word	0x0800113d

	case TIM_CHANNEL_1 :
		htim_X->Instance->CCR1 =  0.5 * (htim_X->Instance->ARR);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fa28 	bl	8000514 <__aeabi_ui2d>
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	4b29      	ldr	r3, [pc, #164]	@ (8001170 <PassiveBuzz_ON+0x104>)
 80010ca:	f7ff fa9d 	bl	8000608 <__aeabi_dmul>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4610      	mov	r0, r2
 80010d4:	4619      	mov	r1, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681c      	ldr	r4, [r3, #0]
 80010da:	f7ff fd6d 	bl	8000bb8 <__aeabi_d2uiz>
 80010de:	4603      	mov	r3, r0
 80010e0:	6363      	str	r3, [r4, #52]	@ 0x34
	break;
 80010e2:	e041      	b.n	8001168 <PassiveBuzz_ON+0xfc>

	case TIM_CHANNEL_2 :
		htim_X->Instance->CCR2 =  0.5 * (htim_X->Instance->ARR);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fa12 	bl	8000514 <__aeabi_ui2d>
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001170 <PassiveBuzz_ON+0x104>)
 80010f6:	f7ff fa87 	bl	8000608 <__aeabi_dmul>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681c      	ldr	r4, [r3, #0]
 8001106:	f7ff fd57 	bl	8000bb8 <__aeabi_d2uiz>
 800110a:	4603      	mov	r3, r0
 800110c:	63a3      	str	r3, [r4, #56]	@ 0x38
	break;
 800110e:	e02b      	b.n	8001168 <PassiveBuzz_ON+0xfc>

	case TIM_CHANNEL_3 :
		htim_X->Instance->CCR3 =  0.5 * (htim_X->Instance->ARR);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff f9fc 	bl	8000514 <__aeabi_ui2d>
 800111c:	f04f 0200 	mov.w	r2, #0
 8001120:	4b13      	ldr	r3, [pc, #76]	@ (8001170 <PassiveBuzz_ON+0x104>)
 8001122:	f7ff fa71 	bl	8000608 <__aeabi_dmul>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681c      	ldr	r4, [r3, #0]
 8001132:	f7ff fd41 	bl	8000bb8 <__aeabi_d2uiz>
 8001136:	4603      	mov	r3, r0
 8001138:	63e3      	str	r3, [r4, #60]	@ 0x3c
	break;
 800113a:	e015      	b.n	8001168 <PassiveBuzz_ON+0xfc>

	case TIM_CHANNEL_4 :
		htim_X->Instance->CCR4 =  0.5 * (htim_X->Instance->ARR);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff f9e6 	bl	8000514 <__aeabi_ui2d>
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <PassiveBuzz_ON+0x104>)
 800114e:	f7ff fa5b 	bl	8000608 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681c      	ldr	r4, [r3, #0]
 800115e:	f7ff fd2b 	bl	8000bb8 <__aeabi_d2uiz>
 8001162:	4603      	mov	r3, r0
 8001164:	6423      	str	r3, [r4, #64]	@ 0x40
	break;
 8001166:	bf00      	nop
	}


}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	bd90      	pop	{r4, r7, pc}
 8001170:	3fe00000 	.word	0x3fe00000

08001174 <SubSys_SatelliteMission_Continue>:

#include "SubSys_Payload_FlightStatus.h"


void SubSys_SatelliteMission_Continue(){
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0


	SubSys_Payload_MissionRetryLoop();
 8001178:	f000 f8a4 	bl	80012c4 <SubSys_Payload_MissionRetryLoop>

	/*! Model Satellite is on the ground*/
	if( ((-2 <= MS5611_VertSpeed) && (MS5611_VertSpeed <= 4)) && (SatelliteStatus == ReadyForLaunch) )
 800117c:	4b4a      	ldr	r3, [pc, #296]	@ (80012a8 <SubSys_SatelliteMission_Continue+0x134>)
 800117e:	edd3 7a00 	vldr	s15, [r3]
 8001182:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001186:	eef4 7ac7 	vcmpe.f32	s15, s14
 800118a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118e:	db0f      	blt.n	80011b0 <SubSys_SatelliteMission_Continue+0x3c>
 8001190:	4b45      	ldr	r3, [pc, #276]	@ (80012a8 <SubSys_SatelliteMission_Continue+0x134>)
 8001192:	edd3 7a00 	vldr	s15, [r3]
 8001196:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800119a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800119e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a2:	d805      	bhi.n	80011b0 <SubSys_SatelliteMission_Continue+0x3c>
 80011a4:	4b41      	ldr	r3, [pc, #260]	@ (80012ac <SubSys_SatelliteMission_Continue+0x138>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d101      	bne.n	80011b0 <SubSys_SatelliteMission_Continue+0x3c>
	{
		__NOP();
 80011ac:	bf00      	nop
					PassiveBuzz_ON(&htim3, TIM_CHANNEL_1);		/*! The payload of the satellite has made contact with the ground */
				}

	     }

}
 80011ae:	e078      	b.n	80012a2 <SubSys_SatelliteMission_Continue+0x12e>
		SatelliteStatus = Ascent;
 80011b0:	4b3e      	ldr	r3, [pc, #248]	@ (80012ac <SubSys_SatelliteMission_Continue+0x138>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
				if( ((0 <= MS5611_VertSpeed) && (MS5611_VertSpeed <= 3))  && (SatelliteStatus == Ascent) )	//TODO: Euler angles will be added
 80011b6:	4b3c      	ldr	r3, [pc, #240]	@ (80012a8 <SubSys_SatelliteMission_Continue+0x134>)
 80011b8:	edd3 7a00 	vldr	s15, [r3]
 80011bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c4:	db10      	blt.n	80011e8 <SubSys_SatelliteMission_Continue+0x74>
 80011c6:	4b38      	ldr	r3, [pc, #224]	@ (80012a8 <SubSys_SatelliteMission_Continue+0x134>)
 80011c8:	edd3 7a00 	vldr	s15, [r3]
 80011cc:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80011d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d8:	d806      	bhi.n	80011e8 <SubSys_SatelliteMission_Continue+0x74>
 80011da:	4b34      	ldr	r3, [pc, #208]	@ (80012ac <SubSys_SatelliteMission_Continue+0x138>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d102      	bne.n	80011e8 <SubSys_SatelliteMission_Continue+0x74>
					SatelliteStatus = ModelSatelliteDescent;
 80011e2:	4b32      	ldr	r3, [pc, #200]	@ (80012ac <SubSys_SatelliteMission_Continue+0x138>)
 80011e4:	2202      	movs	r2, #2
 80011e6:	701a      	strb	r2, [r3, #0]
				if( ((-14 <= MS5611_VertSpeed) && (MS5611_VertSpeed <= -12)) && (SatelliteStatus == ModelSatelliteDescent) )
 80011e8:	4b2f      	ldr	r3, [pc, #188]	@ (80012a8 <SubSys_SatelliteMission_Continue+0x134>)
 80011ea:	edd3 7a00 	vldr	s15, [r3]
 80011ee:	eeba 7a0c 	vmov.f32	s14, #172	@ 0xc1600000 -14.0
 80011f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fa:	db13      	blt.n	8001224 <SubSys_SatelliteMission_Continue+0xb0>
 80011fc:	4b2a      	ldr	r3, [pc, #168]	@ (80012a8 <SubSys_SatelliteMission_Continue+0x134>)
 80011fe:	edd3 7a00 	vldr	s15, [r3]
 8001202:	eeba 7a08 	vmov.f32	s14, #168	@ 0xc1400000 -12.0
 8001206:	eef4 7ac7 	vcmpe.f32	s15, s14
 800120a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120e:	d809      	bhi.n	8001224 <SubSys_SatelliteMission_Continue+0xb0>
 8001210:	4b26      	ldr	r3, [pc, #152]	@ (80012ac <SubSys_SatelliteMission_Continue+0x138>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b02      	cmp	r3, #2
 8001216:	d105      	bne.n	8001224 <SubSys_SatelliteMission_Continue+0xb0>
					SatelliteStatus = Separation;
 8001218:	4b24      	ldr	r3, [pc, #144]	@ (80012ac <SubSys_SatelliteMission_Continue+0x138>)
 800121a:	2203      	movs	r2, #3
 800121c:	701a      	strb	r2, [r3, #0]
					AutonomoSeparationStatus = Permission_OK;
 800121e:	4b24      	ldr	r3, [pc, #144]	@ (80012b0 <SubSys_SatelliteMission_Continue+0x13c>)
 8001220:	2201      	movs	r2, #1
 8001222:	701a      	strb	r2, [r3, #0]
				if( ((390 <= MS5611_Altitude) && (MS5611_Altitude <= 410)) && (AutonomoSeparationStatus = Permission_OK) && (SatelliteStatus == Separation) )
 8001224:	4b23      	ldr	r3, [pc, #140]	@ (80012b4 <SubSys_SatelliteMission_Continue+0x140>)
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80012b8 <SubSys_SatelliteMission_Continue+0x144>
 800122e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001236:	db15      	blt.n	8001264 <SubSys_SatelliteMission_Continue+0xf0>
 8001238:	4b1e      	ldr	r3, [pc, #120]	@ (80012b4 <SubSys_SatelliteMission_Continue+0x140>)
 800123a:	edd3 7a00 	vldr	s15, [r3]
 800123e:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80012bc <SubSys_SatelliteMission_Continue+0x148>
 8001242:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124a:	d80b      	bhi.n	8001264 <SubSys_SatelliteMission_Continue+0xf0>
 800124c:	4b18      	ldr	r3, [pc, #96]	@ (80012b0 <SubSys_SatelliteMission_Continue+0x13c>)
 800124e:	2201      	movs	r2, #1
 8001250:	701a      	strb	r2, [r3, #0]
 8001252:	4b16      	ldr	r3, [pc, #88]	@ (80012ac <SubSys_SatelliteMission_Continue+0x138>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b03      	cmp	r3, #3
 8001258:	d104      	bne.n	8001264 <SubSys_SatelliteMission_Continue+0xf0>
					SatelliteStatus = PayloadDescent;
 800125a:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <SubSys_SatelliteMission_Continue+0x138>)
 800125c:	2204      	movs	r2, #4
 800125e:	701a      	strb	r2, [r3, #0]
					SubSys_SeparationMechanism_UnLock_PayloadFromCarrier();
 8001260:	f000 ffde 	bl	8002220 <SubSys_SeparationMechanism_UnLock_PayloadFromCarrier>
				if( ((0 <= MS5611_Altitude) && (MS5611_Altitude <= 2)) && (SatelliteStatus == PayloadDescent) )
 8001264:	4b13      	ldr	r3, [pc, #76]	@ (80012b4 <SubSys_SatelliteMission_Continue+0x140>)
 8001266:	edd3 7a00 	vldr	s15, [r3]
 800126a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800126e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001272:	da00      	bge.n	8001276 <SubSys_SatelliteMission_Continue+0x102>
}
 8001274:	e015      	b.n	80012a2 <SubSys_SatelliteMission_Continue+0x12e>
				if( ((0 <= MS5611_Altitude) && (MS5611_Altitude <= 2)) && (SatelliteStatus == PayloadDescent) )
 8001276:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <SubSys_SatelliteMission_Continue+0x140>)
 8001278:	edd3 7a00 	vldr	s15, [r3]
 800127c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001280:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001288:	d900      	bls.n	800128c <SubSys_SatelliteMission_Continue+0x118>
}
 800128a:	e00a      	b.n	80012a2 <SubSys_SatelliteMission_Continue+0x12e>
				if( ((0 <= MS5611_Altitude) && (MS5611_Altitude <= 2)) && (SatelliteStatus == PayloadDescent) )
 800128c:	4b07      	ldr	r3, [pc, #28]	@ (80012ac <SubSys_SatelliteMission_Continue+0x138>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b04      	cmp	r3, #4
 8001292:	d106      	bne.n	80012a2 <SubSys_SatelliteMission_Continue+0x12e>
					SatelliteStatus = Recovery;
 8001294:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <SubSys_SatelliteMission_Continue+0x138>)
 8001296:	2205      	movs	r2, #5
 8001298:	701a      	strb	r2, [r3, #0]
					PassiveBuzz_ON(&htim3, TIM_CHANNEL_1);		/*! The payload of the satellite has made contact with the ground */
 800129a:	2100      	movs	r1, #0
 800129c:	4808      	ldr	r0, [pc, #32]	@ (80012c0 <SubSys_SatelliteMission_Continue+0x14c>)
 800129e:	f7ff fee5 	bl	800106c <PassiveBuzz_ON>
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000774 	.word	0x20000774
 80012ac:	200009d4 	.word	0x200009d4
 80012b0:	200009d5 	.word	0x200009d5
 80012b4:	20000770 	.word	0x20000770
 80012b8:	43c30000 	.word	0x43c30000
 80012bc:	43cd0000 	.word	0x43cd0000
 80012c0:	20000628 	.word	0x20000628

080012c4 <SubSys_Payload_MissionRetryLoop>:

#include "SubSys_Payload_PeriodicReattempt.h"

void SubSys_Payload_MissionRetryLoop(){
 80012c4:	b598      	push	{r3, r4, r7, lr}
 80012c6:	af00      	add	r7, sp, #0

	/*! At the beginning of each loop, the system retrieves the last recorded milliseconds */
	SystemTick = HAL_GetTick();
 80012c8:	f002 fa68 	bl	800379c <HAL_GetTick>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4a0d      	ldr	r2, [pc, #52]	@ (8001304 <SubSys_Payload_MissionRetryLoop+0x40>)
 80012d0:	6013      	str	r3, [r2, #0]
	* (P) = Pressure
	* (G) = G force
	* (V) = Vertical Speed
	* (H) = Vertical Height
	**/
	MS5611_Read_ActVal(&MS5611);
 80012d2:	480d      	ldr	r0, [pc, #52]	@ (8001308 <SubSys_Payload_MissionRetryLoop+0x44>)
 80012d4:	f000 fe9c 	bl	8002010 <MS5611_Read_ActVal>
	//SD_Write(SdDatasBuf, "SAT_PAY/STM32.TXT");

	/*! Transfer all necessary datas from Carrier to Payload of Satellite*/
	//SubSys_WirelessCom_Telemetry_Transfer_From_To(Sat_Payload, GroundStation, &dev_WirelessComApp);

	NumberOfTelePacket++;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <SubSys_Payload_MissionRetryLoop+0x48>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	3301      	adds	r3, #1
 80012de:	4a0b      	ldr	r2, [pc, #44]	@ (800130c <SubSys_Payload_MissionRetryLoop+0x48>)
 80012e0:	6013      	str	r3, [r2, #0]

	/*! The system time is retrieved again and the loop waits until the elapsed time reaches 1000 milliseconds*/
	HAL_Delay(abs(1000 - (HAL_GetTick() - SystemTick)));
 80012e2:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <SubSys_Payload_MissionRetryLoop+0x40>)
 80012e4:	681c      	ldr	r4, [r3, #0]
 80012e6:	f002 fa59 	bl	800379c <HAL_GetTick>
 80012ea:	4603      	mov	r3, r0
 80012ec:	1ae3      	subs	r3, r4, r3
 80012ee:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	bfb8      	it	lt
 80012f6:	425b      	neglt	r3, r3
 80012f8:	4618      	mov	r0, r3
 80012fa:	f002 fa5b 	bl	80037b4 <HAL_Delay>

}
 80012fe:	bf00      	nop
 8001300:	bd98      	pop	{r3, r4, r7, pc}
 8001302:	bf00      	nop
 8001304:	200009d8 	.word	0x200009d8
 8001308:	20000700 	.word	0x20000700
 800130c:	200009dc 	.word	0x200009dc

08001310 <GPS_Init>:

extern float GPS_Altitude;				/*! Vertical distance info of satellite beetween */
extern float GPS_Longitude;				/*! Location info of satellite on the earth 	 */
extern float GPS_Latitude;				/*! Location info of satellite on the earth 	 */
void GPS_Init()
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001314:	2201      	movs	r2, #1
 8001316:	4903      	ldr	r1, [pc, #12]	@ (8001324 <GPS_Init+0x14>)
 8001318:	4803      	ldr	r0, [pc, #12]	@ (8001328 <GPS_Init+0x18>)
 800131a:	f007 fa23 	bl	8008764 <HAL_UART_Receive_IT>
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000204 	.word	0x20000204
 8001328:	20000670 	.word	0x20000670

0800132c <GPS_UART_CallBack>:


void GPS_UART_CallBack(){
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8001330:	4b16      	ldr	r3, [pc, #88]	@ (800138c <GPS_UART_CallBack+0x60>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b0a      	cmp	r3, #10
 8001336:	d010      	beq.n	800135a <GPS_UART_CallBack+0x2e>
 8001338:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <GPS_UART_CallBack+0x64>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	b25b      	sxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	db0b      	blt.n	800135a <GPS_UART_CallBack+0x2e>
		rx_buffer[rx_index++] = rx_data;
 8001342:	4b13      	ldr	r3, [pc, #76]	@ (8001390 <GPS_UART_CallBack+0x64>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	1c5a      	adds	r2, r3, #1
 8001348:	b2d1      	uxtb	r1, r2
 800134a:	4a11      	ldr	r2, [pc, #68]	@ (8001390 <GPS_UART_CallBack+0x64>)
 800134c:	7011      	strb	r1, [r2, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	4b0e      	ldr	r3, [pc, #56]	@ (800138c <GPS_UART_CallBack+0x60>)
 8001352:	7819      	ldrb	r1, [r3, #0]
 8001354:	4b0f      	ldr	r3, [pc, #60]	@ (8001394 <GPS_UART_CallBack+0x68>)
 8001356:	5499      	strb	r1, [r3, r2]
 8001358:	e010      	b.n	800137c <GPS_UART_CallBack+0x50>
	} else {

		if(GPS_validate((char*) rx_buffer))
 800135a:	480e      	ldr	r0, [pc, #56]	@ (8001394 <GPS_UART_CallBack+0x68>)
 800135c:	f000 f81e 	bl	800139c <GPS_validate>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d002      	beq.n	800136c <GPS_UART_CallBack+0x40>
			GPS_parse((char*) rx_buffer);
 8001366:	480b      	ldr	r0, [pc, #44]	@ (8001394 <GPS_UART_CallBack+0x68>)
 8001368:	f000 f87a 	bl	8001460 <GPS_parse>
		rx_index = 0;
 800136c:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <GPS_UART_CallBack+0x64>)
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 8001372:	2280      	movs	r2, #128	@ 0x80
 8001374:	2100      	movs	r1, #0
 8001376:	4807      	ldr	r0, [pc, #28]	@ (8001394 <GPS_UART_CallBack+0x68>)
 8001378:	f00a ff8e 	bl	800c298 <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 800137c:	2201      	movs	r2, #1
 800137e:	4903      	ldr	r1, [pc, #12]	@ (800138c <GPS_UART_CallBack+0x60>)
 8001380:	4805      	ldr	r0, [pc, #20]	@ (8001398 <GPS_UART_CallBack+0x6c>)
 8001382:	f007 f9ef 	bl	8008764 <HAL_UART_Receive_IT>
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000204 	.word	0x20000204
 8001390:	20000288 	.word	0x20000288
 8001394:	20000208 	.word	0x20000208
 8001398:	20000670 	.word	0x20000670

0800139c <GPS_validate>:


int GPS_validate(char *nmeastr){
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b24      	cmp	r3, #36	@ 0x24
 80013b6:	d103      	bne.n	80013c0 <GPS_validate+0x24>
        i++;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	3301      	adds	r3, #1
 80013bc:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80013be:	e00c      	b.n	80013da <GPS_validate+0x3e>
        return 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	e047      	b.n	8001454 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4053      	eors	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        i++;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	3301      	adds	r3, #1
 80013d8:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	4413      	add	r3, r2
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d008      	beq.n	80013f8 <GPS_validate+0x5c>
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	4413      	add	r3, r2
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80013f0:	d002      	beq.n	80013f8 <GPS_validate+0x5c>
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	2b4a      	cmp	r3, #74	@ 0x4a
 80013f6:	dde5      	ble.n	80013c4 <GPS_validate+0x28>
    }

    if(i >= 75){
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	2b4a      	cmp	r3, #74	@ 0x4a
 80013fc:	dd01      	ble.n	8001402 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80013fe:	2300      	movs	r3, #0
 8001400:	e028      	b.n	8001454 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b2a      	cmp	r3, #42	@ 0x2a
 800140c:	d119      	bne.n	8001442 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	3301      	adds	r3, #1
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	3302      	adds	r3, #2
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 800142a:	f107 0308 	add.w	r3, r7, #8
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	490a      	ldr	r1, [pc, #40]	@ (800145c <GPS_validate+0xc0>)
 8001432:	4618      	mov	r0, r3
 8001434:	f00a fe0c 	bl	800c050 <siprintf>
    return((checkcalcstr[0] == check[0])
 8001438:	7a3a      	ldrb	r2, [r7, #8]
 800143a:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800143c:	429a      	cmp	r2, r3
 800143e:	d108      	bne.n	8001452 <GPS_validate+0xb6>
 8001440:	e001      	b.n	8001446 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8001442:	2300      	movs	r3, #0
 8001444:	e006      	b.n	8001454 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001446:	7a7a      	ldrb	r2, [r7, #9]
 8001448:	7b7b      	ldrb	r3, [r7, #13]
 800144a:	429a      	cmp	r2, r3
 800144c:	d101      	bne.n	8001452 <GPS_validate+0xb6>
 800144e:	2301      	movs	r3, #1
 8001450:	e000      	b.n	8001454 <GPS_validate+0xb8>
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	08010428 	.word	0x08010428

08001460 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	@ 0x28
 8001464:	af08      	add	r7, sp, #32
 8001466:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8001468:	2206      	movs	r2, #6
 800146a:	4950      	ldr	r1, [pc, #320]	@ (80015ac <GPS_parse+0x14c>)
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f00a ff28 	bl	800c2c2 <strncmp>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d143      	bne.n	8001500 <GPS_parse+0xa0>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8001478:	4b4d      	ldr	r3, [pc, #308]	@ (80015b0 <GPS_parse+0x150>)
 800147a:	9307      	str	r3, [sp, #28]
 800147c:	4b4d      	ldr	r3, [pc, #308]	@ (80015b4 <GPS_parse+0x154>)
 800147e:	9306      	str	r3, [sp, #24]
 8001480:	4b4d      	ldr	r3, [pc, #308]	@ (80015b8 <GPS_parse+0x158>)
 8001482:	9305      	str	r3, [sp, #20]
 8001484:	4b4d      	ldr	r3, [pc, #308]	@ (80015bc <GPS_parse+0x15c>)
 8001486:	9304      	str	r3, [sp, #16]
 8001488:	4b4d      	ldr	r3, [pc, #308]	@ (80015c0 <GPS_parse+0x160>)
 800148a:	9303      	str	r3, [sp, #12]
 800148c:	4b4d      	ldr	r3, [pc, #308]	@ (80015c4 <GPS_parse+0x164>)
 800148e:	9302      	str	r3, [sp, #8]
 8001490:	4b4d      	ldr	r3, [pc, #308]	@ (80015c8 <GPS_parse+0x168>)
 8001492:	9301      	str	r3, [sp, #4]
 8001494:	4b4d      	ldr	r3, [pc, #308]	@ (80015cc <GPS_parse+0x16c>)
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	4b4d      	ldr	r3, [pc, #308]	@ (80015d0 <GPS_parse+0x170>)
 800149a:	4a4e      	ldr	r2, [pc, #312]	@ (80015d4 <GPS_parse+0x174>)
 800149c:	494e      	ldr	r1, [pc, #312]	@ (80015d8 <GPS_parse+0x178>)
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f00a fdf6 	bl	800c090 <siscanf>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	dd7c      	ble.n	80015a4 <GPS_parse+0x144>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80014aa:	4b4c      	ldr	r3, [pc, #304]	@ (80015dc <GPS_parse+0x17c>)
 80014ac:	edd3 7a04 	vldr	s15, [r3, #16]
 80014b0:	4b4a      	ldr	r3, [pc, #296]	@ (80015dc <GPS_parse+0x17c>)
 80014b2:	7e1b      	ldrb	r3, [r3, #24]
 80014b4:	4618      	mov	r0, r3
 80014b6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ba:	f000 f8b9 	bl	8001630 <GPS_nmea_to_dec>
 80014be:	eef0 7a40 	vmov.f32	s15, s0
 80014c2:	4b46      	ldr	r3, [pc, #280]	@ (80015dc <GPS_parse+0x17c>)
 80014c4:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80014c8:	4b44      	ldr	r3, [pc, #272]	@ (80015dc <GPS_parse+0x17c>)
 80014ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80014ce:	4b43      	ldr	r3, [pc, #268]	@ (80015dc <GPS_parse+0x17c>)
 80014d0:	7e5b      	ldrb	r3, [r3, #25]
 80014d2:	4618      	mov	r0, r3
 80014d4:	eeb0 0a67 	vmov.f32	s0, s15
 80014d8:	f000 f8aa 	bl	8001630 <GPS_nmea_to_dec>
 80014dc:	eef0 7a40 	vmov.f32	s15, s0
 80014e0:	4b3e      	ldr	r3, [pc, #248]	@ (80015dc <GPS_parse+0x17c>)
 80014e2:	edc3 7a00 	vstr	s15, [r3]

    		GPS_Latitude = GPS.dec_latitude;
 80014e6:	4b3d      	ldr	r3, [pc, #244]	@ (80015dc <GPS_parse+0x17c>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	4a3d      	ldr	r2, [pc, #244]	@ (80015e0 <GPS_parse+0x180>)
 80014ec:	6013      	str	r3, [r2, #0]
    		GPS_Longitude = GPS.dec_longitude;
 80014ee:	4b3b      	ldr	r3, [pc, #236]	@ (80015dc <GPS_parse+0x17c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a3c      	ldr	r2, [pc, #240]	@ (80015e4 <GPS_parse+0x184>)
 80014f4:	6013      	str	r3, [r2, #0]
			GPS_Altitude = GPS.msl_altitude;
 80014f6:	4b39      	ldr	r3, [pc, #228]	@ (80015dc <GPS_parse+0x17c>)
 80014f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014fa:	4a3b      	ldr	r2, [pc, #236]	@ (80015e8 <GPS_parse+0x188>)
 80014fc:	6013      	str	r3, [r2, #0]
    		return;
 80014fe:	e051      	b.n	80015a4 <GPS_parse+0x144>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 8001500:	2206      	movs	r2, #6
 8001502:	493a      	ldr	r1, [pc, #232]	@ (80015ec <GPS_parse+0x18c>)
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f00a fedc 	bl	800c2c2 <strncmp>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d114      	bne.n	800153a <GPS_parse+0xda>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 8001510:	4b37      	ldr	r3, [pc, #220]	@ (80015f0 <GPS_parse+0x190>)
 8001512:	9305      	str	r3, [sp, #20]
 8001514:	4b37      	ldr	r3, [pc, #220]	@ (80015f4 <GPS_parse+0x194>)
 8001516:	9304      	str	r3, [sp, #16]
 8001518:	4b37      	ldr	r3, [pc, #220]	@ (80015f8 <GPS_parse+0x198>)
 800151a:	9303      	str	r3, [sp, #12]
 800151c:	4b29      	ldr	r3, [pc, #164]	@ (80015c4 <GPS_parse+0x164>)
 800151e:	9302      	str	r3, [sp, #8]
 8001520:	4b29      	ldr	r3, [pc, #164]	@ (80015c8 <GPS_parse+0x168>)
 8001522:	9301      	str	r3, [sp, #4]
 8001524:	4b29      	ldr	r3, [pc, #164]	@ (80015cc <GPS_parse+0x16c>)
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	4b29      	ldr	r3, [pc, #164]	@ (80015d0 <GPS_parse+0x170>)
 800152a:	4a2a      	ldr	r2, [pc, #168]	@ (80015d4 <GPS_parse+0x174>)
 800152c:	4933      	ldr	r1, [pc, #204]	@ (80015fc <GPS_parse+0x19c>)
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f00a fdae 	bl	800c090 <siscanf>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	e034      	b.n	80015a4 <GPS_parse+0x144>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 800153a:	2206      	movs	r2, #6
 800153c:	4930      	ldr	r1, [pc, #192]	@ (8001600 <GPS_parse+0x1a0>)
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f00a febf 	bl	800c2c2 <strncmp>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d110      	bne.n	800156c <GPS_parse+0x10c>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 800154a:	4b2e      	ldr	r3, [pc, #184]	@ (8001604 <GPS_parse+0x1a4>)
 800154c:	9303      	str	r3, [sp, #12]
 800154e:	4b21      	ldr	r3, [pc, #132]	@ (80015d4 <GPS_parse+0x174>)
 8001550:	9302      	str	r3, [sp, #8]
 8001552:	4b1c      	ldr	r3, [pc, #112]	@ (80015c4 <GPS_parse+0x164>)
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	4b1c      	ldr	r3, [pc, #112]	@ (80015c8 <GPS_parse+0x168>)
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	4b1c      	ldr	r3, [pc, #112]	@ (80015cc <GPS_parse+0x16c>)
 800155c:	4a1c      	ldr	r2, [pc, #112]	@ (80015d0 <GPS_parse+0x170>)
 800155e:	492a      	ldr	r1, [pc, #168]	@ (8001608 <GPS_parse+0x1a8>)
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f00a fd95 	bl	800c090 <siscanf>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	e01b      	b.n	80015a4 <GPS_parse+0x144>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 800156c:	2206      	movs	r2, #6
 800156e:	4927      	ldr	r1, [pc, #156]	@ (800160c <GPS_parse+0x1ac>)
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f00a fea6 	bl	800c2c2 <strncmp>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d113      	bne.n	80015a4 <GPS_parse+0x144>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 800157c:	4b24      	ldr	r3, [pc, #144]	@ (8001610 <GPS_parse+0x1b0>)
 800157e:	9305      	str	r3, [sp, #20]
 8001580:	4b24      	ldr	r3, [pc, #144]	@ (8001614 <GPS_parse+0x1b4>)
 8001582:	9304      	str	r3, [sp, #16]
 8001584:	4b24      	ldr	r3, [pc, #144]	@ (8001618 <GPS_parse+0x1b8>)
 8001586:	9303      	str	r3, [sp, #12]
 8001588:	4b1b      	ldr	r3, [pc, #108]	@ (80015f8 <GPS_parse+0x198>)
 800158a:	9302      	str	r3, [sp, #8]
 800158c:	4b23      	ldr	r3, [pc, #140]	@ (800161c <GPS_parse+0x1bc>)
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	4b23      	ldr	r3, [pc, #140]	@ (8001620 <GPS_parse+0x1c0>)
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	4b23      	ldr	r3, [pc, #140]	@ (8001624 <GPS_parse+0x1c4>)
 8001596:	4a24      	ldr	r2, [pc, #144]	@ (8001628 <GPS_parse+0x1c8>)
 8001598:	4924      	ldr	r1, [pc, #144]	@ (800162c <GPS_parse+0x1cc>)
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f00a fd78 	bl	800c090 <siscanf>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
            return;
    }
}
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	08010430 	.word	0x08010430
 80015b0:	200002b8 	.word	0x200002b8
 80015b4:	200002b4 	.word	0x200002b4
 80015b8:	200002b0 	.word	0x200002b0
 80015bc:	200002ac 	.word	0x200002ac
 80015c0:	200002a8 	.word	0x200002a8
 80015c4:	200002a5 	.word	0x200002a5
 80015c8:	20000298 	.word	0x20000298
 80015cc:	200002a4 	.word	0x200002a4
 80015d0:	2000029c 	.word	0x2000029c
 80015d4:	200002a0 	.word	0x200002a0
 80015d8:	08010438 	.word	0x08010438
 80015dc:	2000028c 	.word	0x2000028c
 80015e0:	2000078c 	.word	0x2000078c
 80015e4:	20000788 	.word	0x20000788
 80015e8:	20000784 	.word	0x20000784
 80015ec:	08010460 	.word	0x08010460
 80015f0:	200002c4 	.word	0x200002c4
 80015f4:	200002c0 	.word	0x200002c0
 80015f8:	200002bc 	.word	0x200002bc
 80015fc:	08010468 	.word	0x08010468
 8001600:	08010488 	.word	0x08010488
 8001604:	200002c8 	.word	0x200002c8
 8001608:	08010490 	.word	0x08010490
 800160c:	080104ac 	.word	0x080104ac
 8001610:	200002e0 	.word	0x200002e0
 8001614:	200002dc 	.word	0x200002dc
 8001618:	200002d9 	.word	0x200002d9
 800161c:	200002d8 	.word	0x200002d8
 8001620:	200002d4 	.word	0x200002d4
 8001624:	200002d0 	.word	0x200002d0
 8001628:	200002cc 	.word	0x200002cc
 800162c:	080104b4 	.word	0x080104b4

08001630 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001630:	b480      	push	{r7}
 8001632:	b087      	sub	sp, #28
 8001634:	af00      	add	r7, sp, #0
 8001636:	ed87 0a01 	vstr	s0, [r7, #4]
 800163a:	4603      	mov	r3, r0
 800163c:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 800163e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001642:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80016c4 <GPS_nmea_to_dec+0x94>
 8001646:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800164a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800164e:	ee17 3a90 	vmov	r3, s15
 8001652:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	2264      	movs	r2, #100	@ 0x64
 8001658:	fb02 f303 	mul.w	r3, r2, r3
 800165c:	ee07 3a90 	vmov	s15, r3
 8001660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001664:	ed97 7a01 	vldr	s14, [r7, #4]
 8001668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800166c:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8001670:	ed97 7a03 	vldr	s14, [r7, #12]
 8001674:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80016c8 <GPS_nmea_to_dec+0x98>
 8001678:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800167c:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	ee07 3a90 	vmov	s15, r3
 8001686:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800168a:	ed97 7a02 	vldr	s14, [r7, #8]
 800168e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001692:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8001696:	78fb      	ldrb	r3, [r7, #3]
 8001698:	2b53      	cmp	r3, #83	@ 0x53
 800169a:	d002      	beq.n	80016a2 <GPS_nmea_to_dec+0x72>
 800169c:	78fb      	ldrb	r3, [r7, #3]
 800169e:	2b57      	cmp	r3, #87	@ 0x57
 80016a0:	d105      	bne.n	80016ae <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 80016a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80016a6:	eef1 7a67 	vneg.f32	s15, s15
 80016aa:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	ee07 3a90 	vmov	s15, r3
}
 80016b4:	eeb0 0a67 	vmov.f32	s0, s15
 80016b8:	371c      	adds	r7, #28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	42c80000 	.word	0x42c80000
 80016c8:	42700000 	.word	0x42700000

080016cc <MS5611_Init>:


/******************************************************************************
         			#### MS5611 FUNCTIONS ####
******************************************************************************/
MS5611_StatusTypeDef MS5611_Init(MS5611_HandleTypeDef *dev){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

	 MS5611_Reset(dev);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f86d 	bl	80017b4 <MS5611_Reset>

	 if(HAL_I2C_IsDeviceReady(dev->i2c, dev->I2C_ADDRESS, 1, 1000) != HAL_OK){
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6818      	ldr	r0, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	8899      	ldrh	r1, [r3, #4]
 80016e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016e6:	2201      	movs	r2, #1
 80016e8:	f003 ff26 	bl	8005538 <HAL_I2C_IsDeviceReady>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d000      	beq.n	80016f4 <MS5611_Init+0x28>

			__NOP();
 80016f2:	bf00      	nop

	 }

	MS5611_Get_CalibCoeff(dev);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 f877 	bl	80017e8 <MS5611_Get_CalibCoeff>

	/**
	 * It is calculated average vertical altitude for set to zero our actual altitude
	 */
	if(dev->Ref_Alt_Sel == 'm'){
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001700:	2b6d      	cmp	r3, #109	@ 0x6d
 8001702:	d10c      	bne.n	800171e <MS5611_Init+0x52>

		dev->FixedAltitude = 0.0; //We set zero at the first time because gets the real place altitude value
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	661a      	str	r2, [r3, #96]	@ 0x60

		dev->FixedAltitude = MS5611_Calc_TemporaryAltitude(dev);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 f817 	bl	8001740 <MS5611_Calc_TemporaryAltitude>
 8001712:	eef0 7a40 	vmov.f32	s15, s0
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
 800171c:	e008      	b.n	8001730 <MS5611_Init+0x64>

		 }
		 else if(dev->Ref_Alt_Sel == 'M'){
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001724:	2b4d      	cmp	r3, #77	@ 0x4d
 8001726:	d103      	bne.n	8001730 <MS5611_Init+0x64>

			 dev->FixedAltitude = 0.0;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	661a      	str	r2, [r3, #96]	@ 0x60

		 }
	/**
	 * In the beginning, variables that record the amounts of change are reset for security measures
	 */
	MS5611_ResetRef_DeltaVal(dev);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 fcd7 	bl	80020e4 <MS5611_ResetRef_DeltaVal>

	return MS5611_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <MS5611_Calc_TemporaryAltitude>:

float MS5611_Calc_TemporaryAltitude(MS5611_HandleTypeDef *dev){
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]

	 float tempAltitude = 0;
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]

	 for(int cnt = 0 ; cnt < 20 ; cnt++){
 800174e:	2300      	movs	r3, #0
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	e01d      	b.n	8001790 <MS5611_Calc_TemporaryAltitude+0x50>

		 MS5611_Read_ActVal(dev);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 fc5b 	bl	8002010 <MS5611_Read_ActVal>
		 tempAltitude = (float)(tempAltitude + (float)(MS5611_Altitude * 0.05));
 800175a:	4b15      	ldr	r3, [pc, #84]	@ (80017b0 <MS5611_Calc_TemporaryAltitude+0x70>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fefa 	bl	8000558 <__aeabi_f2d>
 8001764:	a310      	add	r3, pc, #64	@ (adr r3, 80017a8 <MS5611_Calc_TemporaryAltitude+0x68>)
 8001766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176a:	f7fe ff4d 	bl	8000608 <__aeabi_dmul>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4610      	mov	r0, r2
 8001774:	4619      	mov	r1, r3
 8001776:	f7ff fa3f 	bl	8000bf8 <__aeabi_d2f>
 800177a:	ee07 0a10 	vmov	s14, r0
 800177e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001782:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001786:	edc7 7a03 	vstr	s15, [r7, #12]
	 for(int cnt = 0 ; cnt < 20 ; cnt++){
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	3301      	adds	r3, #1
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	2b13      	cmp	r3, #19
 8001794:	ddde      	ble.n	8001754 <MS5611_Calc_TemporaryAltitude+0x14>

	  }

	 return tempAltitude;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	ee07 3a90 	vmov	s15, r3

}
 800179c:	eeb0 0a67 	vmov.f32	s0, s15
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	9999999a 	.word	0x9999999a
 80017ac:	3fa99999 	.word	0x3fa99999
 80017b0:	20000770 	.word	0x20000770

080017b4 <MS5611_Reset>:
void MS5611_Reset(MS5611_HandleTypeDef *dev){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af04      	add	r7, sp, #16
 80017ba:	6078      	str	r0, [r7, #4]

	HAL_I2C_Mem_Write(dev->i2c, dev->I2C_ADDRESS, dev->I2C_ADDRESS, 1, &ResetCom, 1, 1000);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6818      	ldr	r0, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	8899      	ldrh	r1, [r3, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	889a      	ldrh	r2, [r3, #4]
 80017c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017cc:	9302      	str	r3, [sp, #8]
 80017ce:	2301      	movs	r3, #1
 80017d0:	9301      	str	r3, [sp, #4]
 80017d2:	4b04      	ldr	r3, [pc, #16]	@ (80017e4 <MS5611_Reset+0x30>)
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	2301      	movs	r3, #1
 80017d8:	f003 fdb4 	bl	8005344 <HAL_I2C_Mem_Write>

}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000002 	.word	0x20000002

080017e8 <MS5611_Get_CalibCoeff>:


void MS5611_Get_CalibCoeff(MS5611_HandleTypeDef *dev){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08e      	sub	sp, #56	@ 0x38
 80017ec:	af02      	add	r7, sp, #8
 80017ee:	6078      	str	r0, [r7, #4]

	uint8_t CalibCoefAddrss[7] = {0xA2, //C1
 80017f0:	4a8c      	ldr	r2, [pc, #560]	@ (8001a24 <MS5611_Get_CalibCoeff+0x23c>)
 80017f2:	f107 0320 	add.w	r3, r7, #32
 80017f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017fa:	6018      	str	r0, [r3, #0]
 80017fc:	3304      	adds	r3, #4
 80017fe:	8019      	strh	r1, [r3, #0]
 8001800:	3302      	adds	r3, #2
 8001802:	0c0a      	lsrs	r2, r1, #16
 8001804:	701a      	strb	r2, [r3, #0]
								  0xA8, //C4
								  0xAA, //C5
								  0xAC, //C6
								  0xAE}; /*! The last address is for CRC*/

	uint8_t TempryCalibCoefVal[2] = {0};	/*! Temporary buffer that gets two complement of each calibration coefficient*/
 8001806:	2300      	movs	r3, #0
 8001808:	83bb      	strh	r3, [r7, #28]
	uint8_t CalibCoefVal[14] = {0};			/*! Stable buffer that collects all complements of calibration coefficients*/
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	f107 0310 	add.w	r3, r7, #16
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	811a      	strh	r2, [r3, #8]
	uint8_t cnt = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f



	for(cnt = 0; cnt <= 6 ; cnt++){
 8001820:	2300      	movs	r3, #0
 8001822:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001826:	e03b      	b.n	80018a0 <MS5611_Get_CalibCoeff+0xb8>

		HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &CalibCoefAddrss[cnt], 1, 1000);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6818      	ldr	r0, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	8899      	ldrh	r1, [r3, #4]
 8001830:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001834:	f107 0220 	add.w	r2, r7, #32
 8001838:	441a      	add	r2, r3
 800183a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	2301      	movs	r3, #1
 8001842:	f003 fa4f 	bl	8004ce4 <HAL_I2C_Master_Transmit>


				for(int cnt_2 = 0; cnt_2 <= 1 ; cnt_2++){
 8001846:	2300      	movs	r3, #0
 8001848:	62bb      	str	r3, [r7, #40]	@ 0x28
 800184a:	e010      	b.n	800186e <MS5611_Get_CalibCoeff+0x86>

					HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &TempryCalibCoefVal[cnt_2], 2, 1000);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6818      	ldr	r0, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	8899      	ldrh	r1, [r3, #4]
 8001854:	f107 021c 	add.w	r2, r7, #28
 8001858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800185a:	441a      	add	r2, r3
 800185c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	2302      	movs	r3, #2
 8001864:	f003 fb3c 	bl	8004ee0 <HAL_I2C_Master_Receive>
				for(int cnt_2 = 0; cnt_2 <= 1 ; cnt_2++){
 8001868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800186a:	3301      	adds	r3, #1
 800186c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800186e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001870:	2b01      	cmp	r3, #1
 8001872:	ddeb      	ble.n	800184c <MS5611_Get_CalibCoeff+0x64>

				}

		CalibCoefVal[(cnt*2)]   = TempryCalibCoefVal[0];
 8001874:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	7f3a      	ldrb	r2, [r7, #28]
 800187c:	3330      	adds	r3, #48	@ 0x30
 800187e:	443b      	add	r3, r7
 8001880:	f803 2c24 	strb.w	r2, [r3, #-36]
		CalibCoefVal[(cnt*2+1)] = TempryCalibCoefVal[1];
 8001884:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	3301      	adds	r3, #1
 800188c:	7f7a      	ldrb	r2, [r7, #29]
 800188e:	3330      	adds	r3, #48	@ 0x30
 8001890:	443b      	add	r3, r7
 8001892:	f803 2c24 	strb.w	r2, [r3, #-36]
	for(cnt = 0; cnt <= 6 ; cnt++){
 8001896:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800189a:	3301      	adds	r3, #1
 800189c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80018a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018a4:	2b06      	cmp	r3, #6
 80018a6:	d9bf      	bls.n	8001828 <MS5611_Get_CalibCoeff+0x40>

	}

	cnt = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	/*! Complements of each calibration coefficient consists MSB and LSB bits*/
	dev->Clb_Cf.C1  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2; // uint16_t <== |MSB_C1|LSB_C1|
 80018ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018b2:	3330      	adds	r3, #48	@ 0x30
 80018b4:	443b      	add	r3, r7
 80018b6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018ba:	021b      	lsls	r3, r3, #8
 80018bc:	b21a      	sxth	r2, r3
 80018be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018c2:	3301      	adds	r3, #1
 80018c4:	3330      	adds	r3, #48	@ 0x30
 80018c6:	443b      	add	r3, r7
 80018c8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018cc:	b21b      	sxth	r3, r3
 80018ce:	4313      	orrs	r3, r2
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	80da      	strh	r2, [r3, #6]
 80018d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018dc:	3302      	adds	r3, #2
 80018de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C2  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 80018e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018e6:	3330      	adds	r3, #48	@ 0x30
 80018e8:	443b      	add	r3, r7
 80018ea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018ee:	021b      	lsls	r3, r3, #8
 80018f0:	b21a      	sxth	r2, r3
 80018f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018f6:	3301      	adds	r3, #1
 80018f8:	3330      	adds	r3, #48	@ 0x30
 80018fa:	443b      	add	r3, r7
 80018fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001900:	b21b      	sxth	r3, r3
 8001902:	4313      	orrs	r3, r2
 8001904:	b21b      	sxth	r3, r3
 8001906:	b29a      	uxth	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	811a      	strh	r2, [r3, #8]
 800190c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001910:	3302      	adds	r3, #2
 8001912:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C3  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001916:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800191a:	3330      	adds	r3, #48	@ 0x30
 800191c:	443b      	add	r3, r7
 800191e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001922:	021b      	lsls	r3, r3, #8
 8001924:	b21a      	sxth	r2, r3
 8001926:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800192a:	3301      	adds	r3, #1
 800192c:	3330      	adds	r3, #48	@ 0x30
 800192e:	443b      	add	r3, r7
 8001930:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001934:	b21b      	sxth	r3, r3
 8001936:	4313      	orrs	r3, r2
 8001938:	b21b      	sxth	r3, r3
 800193a:	b29a      	uxth	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	815a      	strh	r2, [r3, #10]
 8001940:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001944:	3302      	adds	r3, #2
 8001946:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C4  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 800194a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800194e:	3330      	adds	r3, #48	@ 0x30
 8001950:	443b      	add	r3, r7
 8001952:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001956:	021b      	lsls	r3, r3, #8
 8001958:	b21a      	sxth	r2, r3
 800195a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800195e:	3301      	adds	r3, #1
 8001960:	3330      	adds	r3, #48	@ 0x30
 8001962:	443b      	add	r3, r7
 8001964:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001968:	b21b      	sxth	r3, r3
 800196a:	4313      	orrs	r3, r2
 800196c:	b21b      	sxth	r3, r3
 800196e:	b29a      	uxth	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	819a      	strh	r2, [r3, #12]
 8001974:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001978:	3302      	adds	r3, #2
 800197a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C5  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 800197e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001982:	3330      	adds	r3, #48	@ 0x30
 8001984:	443b      	add	r3, r7
 8001986:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800198a:	021b      	lsls	r3, r3, #8
 800198c:	b21a      	sxth	r2, r3
 800198e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001992:	3301      	adds	r3, #1
 8001994:	3330      	adds	r3, #48	@ 0x30
 8001996:	443b      	add	r3, r7
 8001998:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800199c:	b21b      	sxth	r3, r3
 800199e:	4313      	orrs	r3, r2
 80019a0:	b21b      	sxth	r3, r3
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	81da      	strh	r2, [r3, #14]
 80019a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019ac:	3302      	adds	r3, #2
 80019ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C6  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 80019b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019b6:	3330      	adds	r3, #48	@ 0x30
 80019b8:	443b      	add	r3, r7
 80019ba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80019be:	021b      	lsls	r3, r3, #8
 80019c0:	b21a      	sxth	r2, r3
 80019c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019c6:	3301      	adds	r3, #1
 80019c8:	3330      	adds	r3, #48	@ 0x30
 80019ca:	443b      	add	r3, r7
 80019cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80019d0:	b21b      	sxth	r3, r3
 80019d2:	4313      	orrs	r3, r2
 80019d4:	b21b      	sxth	r3, r3
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	821a      	strh	r2, [r3, #16]
 80019dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019e0:	3302      	adds	r3, #2
 80019e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.crc = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 80019e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019ea:	3330      	adds	r3, #48	@ 0x30
 80019ec:	443b      	add	r3, r7
 80019ee:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80019f2:	021b      	lsls	r3, r3, #8
 80019f4:	b21a      	sxth	r2, r3
 80019f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019fa:	3301      	adds	r3, #1
 80019fc:	3330      	adds	r3, #48	@ 0x30
 80019fe:	443b      	add	r3, r7
 8001a00:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a04:	b21b      	sxth	r3, r3
 8001a06:	4313      	orrs	r3, r2
 8001a08:	b21b      	sxth	r3, r3
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	825a      	strh	r2, [r3, #18]
 8001a10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a14:	3302      	adds	r3, #2
 8001a16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

}
 8001a1a:	bf00      	nop
 8001a1c:	3730      	adds	r7, #48	@ 0x30
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	080104d4 	.word	0x080104d4

08001a28 <MS5611_ReadRaw_Press_Temp>:


void MS5611_ReadRaw_Press_Temp(MS5611_HandleTypeDef *dev){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af02      	add	r7, sp, #8
 8001a2e:	6078      	str	r0, [r7, #4]

	uint8_t RawDataD1[3]  = {0}; /*! D1 = Raw pressure value that will be compensated at other functions*/
 8001a30:	4b38      	ldr	r3, [pc, #224]	@ (8001b14 <MS5611_ReadRaw_Press_Temp+0xec>)
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	81bb      	strh	r3, [r7, #12]
 8001a36:	2300      	movs	r3, #0
 8001a38:	73bb      	strb	r3, [r7, #14]
	uint8_t RawDataD2[3]  = {0}; /*! D2 = Raw temperature value that will be compensated at other functions*/
 8001a3a:	4b36      	ldr	r3, [pc, #216]	@ (8001b14 <MS5611_ReadRaw_Press_Temp+0xec>)
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	813b      	strh	r3, [r7, #8]
 8001a40:	2300      	movs	r3, #0
 8001a42:	72bb      	strb	r3, [r7, #10]
	 *
	 * @Attention! you must wait minimum 15 milisecond after each i2c command because of clock line and calculation times.
	 */

	/*! Gets D1(Raw Pressure)*/
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &osrs_4096_D1, 1, 1000); //(1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	8899      	ldrh	r1, [r3, #4]
 8001a4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	2301      	movs	r3, #1
 8001a54:	4a30      	ldr	r2, [pc, #192]	@ (8001b18 <MS5611_ReadRaw_Press_Temp+0xf0>)
 8001a56:	f003 f945 	bl	8004ce4 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8001a5a:	2014      	movs	r0, #20
 8001a5c:	f001 feaa 	bl	80037b4 <HAL_Delay>
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &adcReadCom , 1, 1000);	 //(2)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	8899      	ldrh	r1, [r3, #4]
 8001a68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2301      	movs	r3, #1
 8001a70:	4a2a      	ldr	r2, [pc, #168]	@ (8001b1c <MS5611_ReadRaw_Press_Temp+0xf4>)
 8001a72:	f003 f937 	bl	8004ce4 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8001a76:	2014      	movs	r0, #20
 8001a78:	f001 fe9c 	bl	80037b4 <HAL_Delay>
	HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &RawDataD1[0], 3, 10000);	 //(3)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6818      	ldr	r0, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	8899      	ldrh	r1, [r3, #4]
 8001a84:	f107 020c 	add.w	r2, r7, #12
 8001a88:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	2303      	movs	r3, #3
 8001a90:	f003 fa26 	bl	8004ee0 <HAL_I2C_Master_Receive>
	dev->ClcPrms.D1 = (uint32_t)((RawDataD1[0]<<16) | (RawDataD1[1]<<8) | (RawDataD1[2]<<0)); // MSB|LSB|XLSB
 8001a94:	7b3b      	ldrb	r3, [r7, #12]
 8001a96:	041a      	lsls	r2, r3, #16
 8001a98:	7b7b      	ldrb	r3, [r7, #13]
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	7bba      	ldrb	r2, [r7, #14]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	615a      	str	r2, [r3, #20]

	/*! Gets D2(Raw Temperature)*/
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &osrs_4096_D2, 1, 1000); //(1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6818      	ldr	r0, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	8899      	ldrh	r1, [r3, #4]
 8001ab0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	4a19      	ldr	r2, [pc, #100]	@ (8001b20 <MS5611_ReadRaw_Press_Temp+0xf8>)
 8001aba:	f003 f913 	bl	8004ce4 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8001abe:	2014      	movs	r0, #20
 8001ac0:	f001 fe78 	bl	80037b4 <HAL_Delay>
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &adcReadCom , 1, 1000);  	 //(2)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	8899      	ldrh	r1, [r3, #4]
 8001acc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	4a11      	ldr	r2, [pc, #68]	@ (8001b1c <MS5611_ReadRaw_Press_Temp+0xf4>)
 8001ad6:	f003 f905 	bl	8004ce4 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8001ada:	2014      	movs	r0, #20
 8001adc:	f001 fe6a 	bl	80037b4 <HAL_Delay>
	HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &RawDataD2[0], 3, 1000);  //(3)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	8899      	ldrh	r1, [r3, #4]
 8001ae8:	f107 0208 	add.w	r2, r7, #8
 8001aec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	2303      	movs	r3, #3
 8001af4:	f003 f9f4 	bl	8004ee0 <HAL_I2C_Master_Receive>
	dev->ClcPrms.D2 = (uint32_t)((RawDataD2[0]<<16) | (RawDataD2[1]<<8) | (RawDataD2[2]<<0)); // MSB|LSB|XLSB
 8001af8:	7a3b      	ldrb	r3, [r7, #8]
 8001afa:	041a      	lsls	r2, r3, #16
 8001afc:	7a7b      	ldrb	r3, [r7, #9]
 8001afe:	021b      	lsls	r3, r3, #8
 8001b00:	4313      	orrs	r3, r2
 8001b02:	7aba      	ldrb	r2, [r7, #10]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	461a      	mov	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	619a      	str	r2, [r3, #24]

}
 8001b0c:	bf00      	nop
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	080104dc 	.word	0x080104dc
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	200002e4 	.word	0x200002e4
 8001b20:	20000001 	.word	0x20000001

08001b24 <MS5611_FirstCalculateDatas>:


void MS5611_FirstCalculateDatas(MS5611_HandleTypeDef *dev){
 8001b24:	b5b0      	push	{r4, r5, r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

	/*! Calculate 1st order temperature and pressure  according to MS5611 1st order algorithm */
	dev->ClcPrms.dT   = dev->ClcPrms.D2 - dev->Clb_Cf.C5 * pow(2,8);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fcef 	bl	8000514 <__aeabi_ui2d>
 8001b36:	4604      	mov	r4, r0
 8001b38:	460d      	mov	r5, r1
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	89db      	ldrh	r3, [r3, #14]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe fcf8 	bl	8000534 <__aeabi_i2d>
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	4b69      	ldr	r3, [pc, #420]	@ (8001cf0 <MS5611_FirstCalculateDatas+0x1cc>)
 8001b4a:	f7fe fd5d 	bl	8000608 <__aeabi_dmul>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4620      	mov	r0, r4
 8001b54:	4629      	mov	r1, r5
 8001b56:	f7fe fb9f 	bl	8000298 <__aeabi_dsub>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4610      	mov	r0, r2
 8001b60:	4619      	mov	r1, r3
 8001b62:	f7ff f849 	bl	8000bf8 <__aeabi_d2f>
 8001b66:	4602      	mov	r2, r0
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	61da      	str	r2, [r3, #28]
	dev->ClcPrms.OFF  = dev->Clb_Cf.C2 * pow(2,17) + (dev->Clb_Cf.C4 * dev->ClcPrms.dT) / pow(2,6);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	891b      	ldrh	r3, [r3, #8]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fcdf 	bl	8000534 <__aeabi_i2d>
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001b7e:	f7fe fd43 	bl	8000608 <__aeabi_dmul>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4614      	mov	r4, r2
 8001b88:	461d      	mov	r5, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	899b      	ldrh	r3, [r3, #12]
 8001b8e:	ee07 3a90 	vmov	s15, r3
 8001b92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	edd3 7a07 	vldr	s15, [r3, #28]
 8001b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba0:	ee17 0a90 	vmov	r0, s15
 8001ba4:	f7fe fcd8 	bl	8000558 <__aeabi_f2d>
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	4b51      	ldr	r3, [pc, #324]	@ (8001cf4 <MS5611_FirstCalculateDatas+0x1d0>)
 8001bae:	f7fe fe55 	bl	800085c <__aeabi_ddiv>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	4629      	mov	r1, r5
 8001bba:	f7fe fb6f 	bl	800029c <__adddf3>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f7ff f817 	bl	8000bf8 <__aeabi_d2f>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	629a      	str	r2, [r3, #40]	@ 0x28
	dev->ClcPrms.SENS = dev->Clb_Cf.C1 * pow(2,16) + (dev->Clb_Cf.C3 * dev->ClcPrms.dT) / pow(2,7);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	88db      	ldrh	r3, [r3, #6]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fcad 	bl	8000534 <__aeabi_i2d>
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	4b46      	ldr	r3, [pc, #280]	@ (8001cf8 <MS5611_FirstCalculateDatas+0x1d4>)
 8001be0:	f7fe fd12 	bl	8000608 <__aeabi_dmul>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4614      	mov	r4, r2
 8001bea:	461d      	mov	r5, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	895b      	ldrh	r3, [r3, #10]
 8001bf0:	ee07 3a90 	vmov	s15, r3
 8001bf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	edd3 7a07 	vldr	s15, [r3, #28]
 8001bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c02:	ee17 0a90 	vmov	r0, s15
 8001c06:	f7fe fca7 	bl	8000558 <__aeabi_f2d>
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	4b3b      	ldr	r3, [pc, #236]	@ (8001cfc <MS5611_FirstCalculateDatas+0x1d8>)
 8001c10:	f7fe fe24 	bl	800085c <__aeabi_ddiv>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4620      	mov	r0, r4
 8001c1a:	4629      	mov	r1, r5
 8001c1c:	f7fe fb3e 	bl	800029c <__adddf3>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4610      	mov	r0, r2
 8001c26:	4619      	mov	r1, r3
 8001c28:	f7fe ffe6 	bl	8000bf8 <__aeabi_d2f>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	62da      	str	r2, [r3, #44]	@ 0x2c

	dev->ClcPrms.TEMP = 2000 + dev->ClcPrms.dT * dev->Clb_Cf.C6 / pow(2,23);								//Actual temperature data
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	ed93 7a07 	vldr	s14, [r3, #28]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	8a1b      	ldrh	r3, [r3, #16]
 8001c3c:	ee07 3a90 	vmov	s15, r3
 8001c40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c48:	ee17 0a90 	vmov	r0, s15
 8001c4c:	f7fe fc84 	bl	8000558 <__aeabi_f2d>
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	4b2a      	ldr	r3, [pc, #168]	@ (8001d00 <MS5611_FirstCalculateDatas+0x1dc>)
 8001c56:	f7fe fe01 	bl	800085c <__aeabi_ddiv>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	4b27      	ldr	r3, [pc, #156]	@ (8001d04 <MS5611_FirstCalculateDatas+0x1e0>)
 8001c68:	f7fe fb18 	bl	800029c <__adddf3>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	f7fe ffc0 	bl	8000bf8 <__aeabi_d2f>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	621a      	str	r2, [r3, #32]
	dev->ClcPrms.P	  = ((dev->ClcPrms.D1 * dev->ClcPrms.SENS / pow(2,21) - dev->ClcPrms.OFF))/pow(2,15);	//Actual pressure data
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	ee07 3a90 	vmov	s15, r3
 8001c86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c94:	ee17 0a90 	vmov	r0, s15
 8001c98:	f7fe fc5e 	bl	8000558 <__aeabi_f2d>
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	4b19      	ldr	r3, [pc, #100]	@ (8001d08 <MS5611_FirstCalculateDatas+0x1e4>)
 8001ca2:	f7fe fddb 	bl	800085c <__aeabi_ddiv>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4614      	mov	r4, r2
 8001cac:	461d      	mov	r5, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fc50 	bl	8000558 <__aeabi_f2d>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	4629      	mov	r1, r5
 8001cc0:	f7fe faea 	bl	8000298 <__aeabi_dsub>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4610      	mov	r0, r2
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8001d0c <MS5611_FirstCalculateDatas+0x1e8>)
 8001cd2:	f7fe fdc3 	bl	800085c <__aeabi_ddiv>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4610      	mov	r0, r2
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f7fe ff8b 	bl	8000bf8 <__aeabi_d2f>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bdb0      	pop	{r4, r5, r7, pc}
 8001cf0:	40700000 	.word	0x40700000
 8001cf4:	40500000 	.word	0x40500000
 8001cf8:	40f00000 	.word	0x40f00000
 8001cfc:	40600000 	.word	0x40600000
 8001d00:	41600000 	.word	0x41600000
 8001d04:	409f4000 	.word	0x409f4000
 8001d08:	41400000 	.word	0x41400000
 8001d0c:	40e00000 	.word	0x40e00000

08001d10 <MS5611_SecondCalculateDatas>:


void MS5611_SecondCalculateDatas(MS5611_HandleTypeDef *dev){
 8001d10:	b5b0      	push	{r4, r5, r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

	if(dev->ClcPrms.TEMP < 2000){
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d1e:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8001f58 <MS5611_SecondCalculateDatas+0x248>
 8001d22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2a:	f140 80e3 	bpl.w	8001ef4 <MS5611_SecondCalculateDatas+0x1e4>

			/*! Low Temperature */
			dev->ClcPrms.TEMP2 = (dev->ClcPrms.dT * dev->ClcPrms.dT) / pow(2,31);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	ed93 7a07 	vldr	s14, [r3, #28]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d3e:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8001f5c <MS5611_SecondCalculateDatas+0x24c>
 8001d42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			dev->ClcPrms.OFF2  = 5 * ((dev->ClcPrms.TEMP - 2000) * (dev->ClcPrms.TEMP - 2000)) / pow(2,1);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d52:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8001f58 <MS5611_SecondCalculateDatas+0x248>
 8001d56:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d60:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8001f58 <MS5611_SecondCalculateDatas+0x248>
 8001d64:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d6c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001d70:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d74:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001d78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
			dev->ClcPrms.SENS2 = 5 * ((dev->ClcPrms.TEMP - 2000) * (dev->ClcPrms.TEMP - 2000)) / pow(2,2);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d88:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8001f58 <MS5611_SecondCalculateDatas+0x248>
 8001d8c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d96:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8001f58 <MS5611_SecondCalculateDatas+0x248>
 8001d9a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da2:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001da6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001daa:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001dae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

					if(dev->ClcPrms.TEMP < -1500){
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	edd3 7a08 	vldr	s15, [r3, #32]
 8001dbe:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8001f60 <MS5611_SecondCalculateDatas+0x250>
 8001dc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dca:	d571      	bpl.n	8001eb0 <MS5611_SecondCalculateDatas+0x1a0>
						/*! Very Low Temperature */
						dev->ClcPrms.OFF2  = dev->ClcPrms.OFF2 + 7 * ((dev->ClcPrms.TEMP + 1500) * (dev->ClcPrms.TEMP + 1500));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	edd3 7a08 	vldr	s15, [r3, #32]
 8001dd8:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8001f64 <MS5611_SecondCalculateDatas+0x254>
 8001ddc:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	edd3 7a08 	vldr	s15, [r3, #32]
 8001de6:	ed9f 6a5f 	vldr	s12, [pc, #380]	@ 8001f64 <MS5611_SecondCalculateDatas+0x254>
 8001dea:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001dee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001df2:	eef1 6a0c 	vmov.f32	s13, #28	@ 0x40e00000  7.0
 8001df6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
						dev->ClcPrms.SENS2 = dev->ClcPrms.SENS2 + 11 * ((dev->ClcPrms.TEMP + 1500) * (dev->ClcPrms.TEMP + 1500)) / pow(2,1);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fba5 	bl	8000558 <__aeabi_f2d>
 8001e0e:	4604      	mov	r4, r0
 8001e10:	460d      	mov	r5, r1
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e18:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001f64 <MS5611_SecondCalculateDatas+0x254>
 8001e1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e26:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001f64 <MS5611_SecondCalculateDatas+0x254>
 8001e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e32:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8001e36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e3a:	ee17 0a90 	vmov	r0, s15
 8001e3e:	f7fe fb8b 	bl	8000558 <__aeabi_f2d>
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e4a:	f7fe fd07 	bl	800085c <__aeabi_ddiv>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4620      	mov	r0, r4
 8001e54:	4629      	mov	r1, r5
 8001e56:	f7fe fa21 	bl	800029c <__adddf3>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4610      	mov	r0, r2
 8001e60:	4619      	mov	r1, r3
 8001e62:	f7fe fec9 	bl	8000bf8 <__aeabi_d2f>
 8001e66:	4602      	mov	r2, r0
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	635a      	str	r2, [r3, #52]	@ 0x34

						dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001e78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	edc3 7a08 	vstr	s15, [r3, #32]
						dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
						dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001ea4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
			dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
			dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
			dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;

		}
}
 8001eae:	e04e      	b.n	8001f4e <MS5611_SecondCalculateDatas+0x23e>
						dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	ed93 7a08 	vldr	s14, [r3, #32]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001ebc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	edc3 7a08 	vstr	s15, [r3, #32]
						dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001ed2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
						dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001ee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 8001ef2:	e02c      	b.n	8001f4e <MS5611_SecondCalculateDatas+0x23e>
			dev->ClcPrms.TEMP2 = 0;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	639a      	str	r2, [r3, #56]	@ 0x38
			dev->ClcPrms.OFF2  = 0;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	631a      	str	r2, [r3, #48]	@ 0x30
			dev->ClcPrms.SENS2 = 0;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	635a      	str	r2, [r3, #52]	@ 0x34
			dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001f18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	edc3 7a08 	vstr	s15, [r3, #32]
			dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001f2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
			dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001f44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bdb0      	pop	{r4, r5, r7, pc}
 8001f56:	bf00      	nop
 8001f58:	44fa0000 	.word	0x44fa0000
 8001f5c:	4f000000 	.word	0x4f000000
 8001f60:	c4bb8000 	.word	0xc4bb8000
 8001f64:	44bb8000 	.word	0x44bb8000

08001f68 <MS5611_Calc_Altitude>:


float MS5611_Calc_Altitude(MS5611_HandleTypeDef *dev){
 8001f68:	b5b0      	push	{r4, r5, r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

	return  ((SeaLevelTemp  / GradientTemp)
			* (1 - pow(((dev->ClcPrms.P/2) / SeaLevelPress),((GasCoefficient * GradientTemp)/GravityAccel)))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001f76:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001f7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f7e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002008 <MS5611_Calc_Altitude+0xa0>
 8001f82:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f86:	ee16 0a90 	vmov	r0, s13
 8001f8a:	f7fe fae5 	bl	8000558 <__aeabi_f2d>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	ed9f 1b19 	vldr	d1, [pc, #100]	@ 8001ff8 <MS5611_Calc_Altitude+0x90>
 8001f96:	ec43 2b10 	vmov	d0, r2, r3
 8001f9a:	f00d fad7 	bl	800f54c <pow>
 8001f9e:	ec53 2b10 	vmov	r2, r3, d0
 8001fa2:	f04f 0000 	mov.w	r0, #0
 8001fa6:	4919      	ldr	r1, [pc, #100]	@ (800200c <MS5611_Calc_Altitude+0xa4>)
 8001fa8:	f7fe f976 	bl	8000298 <__aeabi_dsub>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	a312      	add	r3, pc, #72	@ (adr r3, 8002000 <MS5611_Calc_Altitude+0x98>)
 8001fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fba:	f7fe fb25 	bl	8000608 <__aeabi_dmul>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	4614      	mov	r4, r2
 8001fc4:	461d      	mov	r5, r3
			- dev->FixedAltitude) ;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fac4 	bl	8000558 <__aeabi_f2d>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	4629      	mov	r1, r5
 8001fd8:	f7fe f95e 	bl	8000298 <__aeabi_dsub>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f7fe fe08 	bl	8000bf8 <__aeabi_d2f>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	ee07 3a90 	vmov	s15, r3

}
 8001fee:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ff8:	fd017917 	.word	0xfd017917
 8001ffc:	3fc85ace 	.word	0x3fc85ace
 8002000:	9d89d89d 	.word	0x9d89d89d
 8002004:	40e5a558 	.word	0x40e5a558
 8002008:	47c5e680 	.word	0x47c5e680
 800200c:	3ff00000 	.word	0x3ff00000

08002010 <MS5611_Read_ActVal>:


void MS5611_Read_ActVal(MS5611_HandleTypeDef *dev){
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]

	/*! Read raw pressure and temperature MSB | LSB | XLSB values from the sensor*/
	MS5611_ReadRaw_Press_Temp(dev);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff fd05 	bl	8001a28 <MS5611_ReadRaw_Press_Temp>

	/*! Calculate 1st order temperature and pressure  according to MS5611 1st order algorithm */
	MS5611_FirstCalculateDatas(dev);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff fd80 	bl	8001b24 <MS5611_FirstCalculateDatas>

	/*! If it's needed, Calculate 2st order temperature and pressure  according to MS5611 2st order algorithm */
	MS5611_SecondCalculateDatas(dev);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff fe73 	bl	8001d10 <MS5611_SecondCalculateDatas>

	/*! Vertical Altitude is calculated by using pressure and some coefficients */
	MS5611_Altitude = MS5611_Calc_Altitude(dev);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff ff9c 	bl	8001f68 <MS5611_Calc_Altitude>
 8002030:	eef0 7a40 	vmov.f32	s15, s0
 8002034:	4b24      	ldr	r3, [pc, #144]	@ (80020c8 <MS5611_Read_ActVal+0xb8>)
 8002036:	edc3 7a00 	vstr	s15, [r3]

	/*! Vertical Speed is calculated by using differential of locations */
	MS5611_Calc_VertSpd(dev, MS5611_Altitude, &MS5611_VertSpeed);
 800203a:	4b23      	ldr	r3, [pc, #140]	@ (80020c8 <MS5611_Read_ActVal+0xb8>)
 800203c:	edd3 7a00 	vldr	s15, [r3]
 8002040:	4922      	ldr	r1, [pc, #136]	@ (80020cc <MS5611_Read_ActVal+0xbc>)
 8002042:	eeb0 0a67 	vmov.f32	s0, s15
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f87a 	bl	8002140 <MS5611_Calc_VertSpd>

	/*! Vertical acceleration is calculated by using differential of speed */
	MS5611_Calc_VertAcc(dev, MS5611_VertSpeed, &MS5611_VertAcc);
 800204c:	4b1f      	ldr	r3, [pc, #124]	@ (80020cc <MS5611_Read_ActVal+0xbc>)
 800204e:	edd3 7a00 	vldr	s15, [r3]
 8002052:	491f      	ldr	r1, [pc, #124]	@ (80020d0 <MS5611_Read_ActVal+0xc0>)
 8002054:	eeb0 0a67 	vmov.f32	s0, s15
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f890 	bl	800217e <MS5611_Calc_VertAcc>

	/*! It's applied force on to the object that is given mass from the user */
	MS5611_Calc_gForce(dev, &MS5611_gForce, SatCar_Mass, MS5611_VertAcc);
 800205e:	4b1d      	ldr	r3, [pc, #116]	@ (80020d4 <MS5611_Read_ActVal+0xc4>)
 8002060:	edd3 7a00 	vldr	s15, [r3]
 8002064:	4b1a      	ldr	r3, [pc, #104]	@ (80020d0 <MS5611_Read_ActVal+0xc0>)
 8002066:	ed93 7a00 	vldr	s14, [r3]
 800206a:	eef0 0a47 	vmov.f32	s1, s14
 800206e:	eeb0 0a67 	vmov.f32	s0, s15
 8002072:	4919      	ldr	r1, [pc, #100]	@ (80020d8 <MS5611_Read_ActVal+0xc8>)
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f8a3 	bl	80021c0 <MS5611_Calc_gForce>

	/*! Pressure unit is mBar and Temperature unit is celcius degress*/
	MS5611_Press = dev->ClcPrms.P/2 ;			//@e.g :
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8002080:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002084:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002088:	4b14      	ldr	r3, [pc, #80]	@ (80020dc <MS5611_Read_ActVal+0xcc>)
 800208a:	edc3 7a00 	vstr	s15, [r3]
	MS5611_Temp  = dev->ClcPrms.TEMP * 0.01; 		//@e.g : 25.57 CelciusDegress
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fa60 	bl	8000558 <__aeabi_f2d>
 8002098:	a309      	add	r3, pc, #36	@ (adr r3, 80020c0 <MS5611_Read_ActVal+0xb0>)
 800209a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209e:	f7fe fab3 	bl	8000608 <__aeabi_dmul>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	4610      	mov	r0, r2
 80020a8:	4619      	mov	r1, r3
 80020aa:	f7fe fda5 	bl	8000bf8 <__aeabi_d2f>
 80020ae:	4603      	mov	r3, r0
 80020b0:	4a0b      	ldr	r2, [pc, #44]	@ (80020e0 <MS5611_Read_ActVal+0xd0>)
 80020b2:	6013      	str	r3, [r2, #0]

}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	f3af 8000 	nop.w
 80020c0:	47ae147b 	.word	0x47ae147b
 80020c4:	3f847ae1 	.word	0x3f847ae1
 80020c8:	20000770 	.word	0x20000770
 80020cc:	20000774 	.word	0x20000774
 80020d0:	20000778 	.word	0x20000778
 80020d4:	20000780 	.word	0x20000780
 80020d8:	2000077c 	.word	0x2000077c
 80020dc:	20000768 	.word	0x20000768
 80020e0:	2000076c 	.word	0x2000076c

080020e4 <MS5611_ResetRef_DeltaVal>:

void MS5611_ResetRef_DeltaVal(MS5611_HandleTypeDef *dev){
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]

	//At the beginning, reset the altitude values for the first and second conditions.
	dev->DeltaData.alt0 = 0.0;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	63da      	str	r2, [r3, #60]	@ 0x3c
	dev->DeltaData.alt1 = 0.0;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	641a      	str	r2, [r3, #64]	@ 0x40
	dev->DeltaData.holdAlt = 0.0;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	645a      	str	r2, [r3, #68]	@ 0x44

	//At the beginning, reset the speed values for the first and second conditions.
	dev->DeltaData.spd0 = 0.0;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	655a      	str	r2, [r3, #84]	@ 0x54
	dev->DeltaData.spd1 = 0.0;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	659a      	str	r2, [r3, #88]	@ 0x58
	dev->DeltaData.holdSpd = 0.0;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	65da      	str	r2, [r3, #92]	@ 0x5c

	//At the beginning, reset the acceleration values for the first and second conditions.
	dev->DeltaData.acc0 = 0.0;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	649a      	str	r2, [r3, #72]	@ 0x48
	dev->DeltaData.acc1 = 0.0;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	64da      	str	r2, [r3, #76]	@ 0x4c
	dev->DeltaData.holdAcc = 0.0;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f04f 0200 	mov.w	r2, #0
 8002132:	651a      	str	r2, [r3, #80]	@ 0x50

}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <MS5611_Calc_VertSpd>:


/*!Vertical Speed is calculated by using differential of locations "V = (X1 - X0) /1 second" */
void MS5611_Calc_VertSpd(MS5611_HandleTypeDef *dev, float MS5611_Altitude, float *MS5611_VertSpeed){
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	ed87 0a02 	vstr	s0, [r7, #8]
 800214c:	6079      	str	r1, [r7, #4]

	dev->DeltaData.alt1 = (MS5611_Altitude);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	641a      	str	r2, [r3, #64]	@ 0x40
	(*MS5611_VertSpeed) = (dev->DeltaData.alt1 - dev->DeltaData.alt0);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002160:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	edc3 7a00 	vstr	s15, [r3]
	dev->DeltaData.alt0 = dev->DeltaData.alt1;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 8002172:	bf00      	nop
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <MS5611_Calc_VertAcc>:

/*! Vertical acceleration is calculated by using differential of speed "a = (V1 - V0) / 1 second"  */
void MS5611_Calc_VertAcc(MS5611_HandleTypeDef *dev, float MS5611_VertSpeed,float *MS5611_VertAcc){
 800217e:	b480      	push	{r7}
 8002180:	b085      	sub	sp, #20
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	ed87 0a02 	vstr	s0, [r7, #8]
 800218a:	6079      	str	r1, [r7, #4]

	dev->DeltaData.spd1 = (MS5611_VertSpeed);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	659a      	str	r2, [r3, #88]	@ 0x58
	(*MS5611_VertAcc)	= (dev->DeltaData.spd1 - dev->DeltaData.spd0);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800219e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	edc3 7a00 	vstr	s15, [r3]
	dev->DeltaData.spd0 = dev->DeltaData.spd1;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	655a      	str	r2, [r3, #84]	@ 0x54

}
 80021b0:	bf00      	nop
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	0000      	movs	r0, r0
	...

080021c0 <MS5611_Calc_gForce>:

/*! It's applied force on to the object that is given mass from the user. =" gForce = ObjectMass * (VerticalAcceleration / 9.80) " */
void MS5611_Calc_gForce(MS5611_HandleTypeDef *dev, float *MS5611_gForce, float SatCar_Mass, float MS5611_VertAcc){
 80021c0:	b5b0      	push	{r4, r5, r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80021ce:	edc7 0a00 	vstr	s1, [r7]

	(*MS5611_gForce) = (((MS5611_VertAcc)/GravityAccel)*(SatCar_Mass));
 80021d2:	6838      	ldr	r0, [r7, #0]
 80021d4:	f7fe f9c0 	bl	8000558 <__aeabi_f2d>
 80021d8:	a30f      	add	r3, pc, #60	@ (adr r3, 8002218 <MS5611_Calc_gForce+0x58>)
 80021da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021de:	f7fe fb3d 	bl	800085c <__aeabi_ddiv>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4614      	mov	r4, r2
 80021e8:	461d      	mov	r5, r3
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7fe f9b4 	bl	8000558 <__aeabi_f2d>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4620      	mov	r0, r4
 80021f6:	4629      	mov	r1, r5
 80021f8:	f7fe fa06 	bl	8000608 <__aeabi_dmul>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	4610      	mov	r0, r2
 8002202:	4619      	mov	r1, r3
 8002204:	f7fe fcf8 	bl	8000bf8 <__aeabi_d2f>
 8002208:	4602      	mov	r2, r0
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	601a      	str	r2, [r3, #0]

}
 800220e:	bf00      	nop
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bdb0      	pop	{r4, r5, r7, pc}
 8002216:	bf00      	nop
 8002218:	3f141206 	.word	0x3f141206
 800221c:	40239cc6 	.word	0x40239cc6

08002220 <SubSys_SeparationMechanism_UnLock_PayloadFromCarrier>:
void SubSys_SeparationMechanism_Lock_PayloadToCarrier(void){

	SubSys_Actuator_Servo_MoveTo(&dev_Servo_Separation,0);

}
void SubSys_SeparationMechanism_UnLock_PayloadFromCarrier(void){
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0

	SubSys_Actuator_Servo_MoveTo(&dev_Servo_Separation,90);
 8002224:	215a      	movs	r1, #90	@ 0x5a
 8002226:	4802      	ldr	r0, [pc, #8]	@ (8002230 <SubSys_SeparationMechanism_UnLock_PayloadFromCarrier+0x10>)
 8002228:	f7fe fee4 	bl	8000ff4 <SubSys_Actuator_Servo_MoveTo>

}
 800222c:	bf00      	nop
 800222e:	bd80      	pop	{r7, pc}
 8002230:	200009c4 	.word	0x200009c4

08002234 <HAL_UART_RxCpltCallback>:
#include "SubSys_USART_ReceiveIT_CallBacks_Driver.h"

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]


	/*! which UART interface receive data?
	 * UART2 is for Wireless communication
	 */
	if(huart->Instance == USART2){
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a09      	ldr	r2, [pc, #36]	@ (8002268 <HAL_UART_RxCpltCallback+0x34>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d104      	bne.n	8002250 <HAL_UART_RxCpltCallback+0x1c>
		SubSys_WirelessCom_Telemetry_Receive_From_To(Sat_Carrier, Sat_Payload, &dev_WirelessComApp);
 8002246:	4a09      	ldr	r2, [pc, #36]	@ (800226c <HAL_UART_RxCpltCallback+0x38>)
 8002248:	2102      	movs	r1, #2
 800224a:	2001      	movs	r0, #1
 800224c:	f000 f86e 	bl	800232c <SubSys_WirelessCom_Telemetry_Receive_From_To>
	}
	if(huart->Instance == USART1){
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a06      	ldr	r2, [pc, #24]	@ (8002270 <HAL_UART_RxCpltCallback+0x3c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d101      	bne.n	800225e <HAL_UART_RxCpltCallback+0x2a>
		GPS_UART_CallBack();
 800225a:	f7ff f867 	bl	800132c <GPS_UART_CallBack>
	}

}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40004400 	.word	0x40004400
 800226c:	200007b4 	.word	0x200007b4
 8002270:	40011000 	.word	0x40011000

08002274 <SubSys_WirelessCom_Config_WORK_MODE>:
	}

}


void SubSys_WirelessCom_Config_WORK_MODE(SubSys_WirelesscomConfig_HandleTypeDef    *dev){
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]

	switch(dev->Mode_SW){
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	7ddb      	ldrb	r3, [r3, #23]
 8002280:	2b03      	cmp	r3, #3
 8002282:	d84f      	bhi.n	8002324 <SubSys_WirelessCom_Config_WORK_MODE+0xb0>
 8002284:	a201      	add	r2, pc, #4	@ (adr r2, 800228c <SubSys_WirelessCom_Config_WORK_MODE+0x18>)
 8002286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800228a:	bf00      	nop
 800228c:	0800229d 	.word	0x0800229d
 8002290:	080022bf 	.word	0x080022bf
 8002294:	080022e1 	.word	0x080022e1
 8002298:	08002303 	.word	0x08002303

		case NormalMode :	/*! UART and wireless channel are open, transparent transmission is on*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_RESET);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6858      	ldr	r0, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	8b5b      	ldrh	r3, [r3, #26]
 80022a4:	2200      	movs	r2, #0
 80022a6:	4619      	mov	r1, r3
 80022a8:	f002 fbbe 	bl	8004a28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_RESET);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6858      	ldr	r0, [r3, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	8b1b      	ldrh	r3, [r3, #24]
 80022b4:	2200      	movs	r2, #0
 80022b6:	4619      	mov	r1, r3
 80022b8:	f002 fbb6 	bl	8004a28 <HAL_GPIO_WritePin>
		break;
 80022bc:	e032      	b.n	8002324 <SubSys_WirelessCom_Config_WORK_MODE+0xb0>

		case WORsending :	/*! WOR Transmitter (it sends packet in every period)*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_RESET);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6858      	ldr	r0, [r3, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	8b5b      	ldrh	r3, [r3, #26]
 80022c6:	2200      	movs	r2, #0
 80022c8:	4619      	mov	r1, r3
 80022ca:	f002 fbad 	bl	8004a28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_SET);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6858      	ldr	r0, [r3, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	8b1b      	ldrh	r3, [r3, #24]
 80022d6:	2201      	movs	r2, #1
 80022d8:	4619      	mov	r1, r3
 80022da:	f002 fba5 	bl	8004a28 <HAL_GPIO_WritePin>
		break;
 80022de:	e021      	b.n	8002324 <SubSys_WirelessCom_Config_WORK_MODE+0xb0>

		case WORreceiving :	/*! WOR Receiver (it sends packet in every period)*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_SET);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6858      	ldr	r0, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	8b5b      	ldrh	r3, [r3, #26]
 80022e8:	2201      	movs	r2, #1
 80022ea:	4619      	mov	r1, r3
 80022ec:	f002 fb9c 	bl	8004a28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_RESET);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6858      	ldr	r0, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	8b1b      	ldrh	r3, [r3, #24]
 80022f8:	2200      	movs	r2, #0
 80022fa:	4619      	mov	r1, r3
 80022fc:	f002 fb94 	bl	8004a28 <HAL_GPIO_WritePin>
		break;
 8002300:	e010      	b.n	8002324 <SubSys_WirelessCom_Config_WORK_MODE+0xb0>

		case DeepSleep :	/*! Module goes to sleep so provides you to configure settings*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_SET);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6858      	ldr	r0, [r3, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	8b5b      	ldrh	r3, [r3, #26]
 800230a:	2201      	movs	r2, #1
 800230c:	4619      	mov	r1, r3
 800230e:	f002 fb8b 	bl	8004a28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_SET);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6858      	ldr	r0, [r3, #4]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	8b1b      	ldrh	r3, [r3, #24]
 800231a:	2201      	movs	r2, #1
 800231c:	4619      	mov	r1, r3
 800231e:	f002 fb83 	bl	8004a28 <HAL_GPIO_WritePin>
		break;
 8002322:	bf00      	nop

	}

}
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <SubSys_WirelessCom_Telemetry_Receive_From_To>:
			break;

		   }

}
void SubSys_WirelessCom_Telemetry_Receive_From_To(MissionUnit From_X, MissionUnit To_Y, SubSys_WirelessCom_APP_HandleTypeDef *dev_WirelessComApp){
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	603a      	str	r2, [r7, #0]
 8002336:	71fb      	strb	r3, [r7, #7]
 8002338:	460b      	mov	r3, r1
 800233a:	71bb      	strb	r3, [r7, #6]
					 * If the message packet contains the 'C' character, then this message belongs to the Carrier
					 * If the message packet contains the 'G' character, then this message belongs to the Ground Station*/

					/* The data sequence in the telemetry packet is as follows: <ADDH><ADDL><CHN><FromWhereCharacter><SatelliteDatas....>"*/

					if(dev_WirelessComApp->Buffer.Rx[0] == 'C')
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	f893 3190 	ldrb.w	r3, [r3, #400]	@ 0x190
 8002342:	2b43      	cmp	r3, #67	@ 0x43
 8002344:	d11f      	bne.n	8002386 <SubSys_WirelessCom_Telemetry_Receive_From_To+0x5a>
					{
						extractValues(dev_WirelessComApp->Buffer.Rx, value1, value2);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800234c:	4a15      	ldr	r2, [pc, #84]	@ (80023a4 <SubSys_WirelessCom_Telemetry_Receive_From_To+0x78>)
 800234e:	4916      	ldr	r1, [pc, #88]	@ (80023a8 <SubSys_WirelessCom_Telemetry_Receive_From_To+0x7c>)
 8002350:	4618      	mov	r0, r3
 8002352:	f000 f82f 	bl	80023b4 <extractValues>

						CarrierPressure   = atof(value1);
 8002356:	4814      	ldr	r0, [pc, #80]	@ (80023a8 <SubSys_WirelessCom_Telemetry_Receive_From_To+0x7c>)
 8002358:	f008 f935 	bl	800a5c6 <atof>
 800235c:	ec53 2b10 	vmov	r2, r3, d0
 8002360:	4610      	mov	r0, r2
 8002362:	4619      	mov	r1, r3
 8002364:	f7fe fc48 	bl	8000bf8 <__aeabi_d2f>
 8002368:	4603      	mov	r3, r0
 800236a:	4a10      	ldr	r2, [pc, #64]	@ (80023ac <SubSys_WirelessCom_Telemetry_Receive_From_To+0x80>)
 800236c:	6013      	str	r3, [r2, #0]
						CarrierVertHeight = atof(value2);
 800236e:	480d      	ldr	r0, [pc, #52]	@ (80023a4 <SubSys_WirelessCom_Telemetry_Receive_From_To+0x78>)
 8002370:	f008 f929 	bl	800a5c6 <atof>
 8002374:	ec53 2b10 	vmov	r2, r3, d0
 8002378:	4610      	mov	r0, r2
 800237a:	4619      	mov	r1, r3
 800237c:	f7fe fc3c 	bl	8000bf8 <__aeabi_d2f>
 8002380:	4603      	mov	r3, r0
 8002382:	4a0b      	ldr	r2, [pc, #44]	@ (80023b0 <SubSys_WirelessCom_Telemetry_Receive_From_To+0x84>)
 8002384:	6013      	str	r3, [r2, #0]

					/*! Contanie to receive data from carrier unit or ground station.
					 *  Good news and bad news, all of them can be filled but the order of the data can be stuck
					 *  We'll see bro
					 */
					HAL_UART_Receive_IT(dev_WirelessComApp->huartX, (uint8_t *)dev_WirelessComApp->Buffer.Rx, sizeof(dev_WirelessComApp->Buffer.Rx));
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	f8d3 0200 	ldr.w	r0, [r3, #512]	@ 0x200
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8002392:	221b      	movs	r2, #27
 8002394:	4619      	mov	r1, r3
 8002396:	f006 f9e5 	bl	8008764 <HAL_UART_Receive_IT>

}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	200002fc 	.word	0x200002fc
 80023a8:	200002e8 	.word	0x200002e8
 80023ac:	200009e0 	.word	0x200009e0
 80023b0:	200009e4 	.word	0x200009e4

080023b4 <extractValues>:

#include "SubSys_WirelessCommunication_Telemetry_ExtractValue_Driver.h"

void extractValues(const char* input, char* value1, char* value2) {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b088      	sub	sp, #32
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
    const char* start = strchr(input, '<');
 80023c0:	213c      	movs	r1, #60	@ 0x3c
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f009 ff70 	bl	800c2a8 <strchr>
 80023c8:	61f8      	str	r0, [r7, #28]
    if (start != NULL) {
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d04b      	beq.n	8002468 <extractValues+0xb4>
        start++;  // '<' karakterinin sonrasına geç
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	3301      	adds	r3, #1
 80023d4:	61fb      	str	r3, [r7, #28]
        const char* end = strchr(start, '>');
 80023d6:	213e      	movs	r1, #62	@ 0x3e
 80023d8:	69f8      	ldr	r0, [r7, #28]
 80023da:	f009 ff65 	bl	800c2a8 <strchr>
 80023de:	61b8      	str	r0, [r7, #24]
        if (end != NULL) {
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d039      	beq.n	800245a <extractValues+0xa6>
            size_t length = end - start;  // İlk '<' ve '>' arasındaki uzunluk
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	617b      	str	r3, [r7, #20]
            strncpy(value1, start, length);  // İlk değeri kopyala
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	69f9      	ldr	r1, [r7, #28]
 80023f2:	68b8      	ldr	r0, [r7, #8]
 80023f4:	f009 ff77 	bl	800c2e6 <strncpy>
            value1[length] = '\0';  // Null karakter ekle
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	4413      	add	r3, r2
 80023fe:	2200      	movs	r2, #0
 8002400:	701a      	strb	r2, [r3, #0]

            start = strchr(end + 1, '<');
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	3301      	adds	r3, #1
 8002406:	213c      	movs	r1, #60	@ 0x3c
 8002408:	4618      	mov	r0, r3
 800240a:	f009 ff4d 	bl	800c2a8 <strchr>
 800240e:	61f8      	str	r0, [r7, #28]
            if (start != NULL) {
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d01d      	beq.n	8002452 <extractValues+0x9e>
                start++;  // İkinci '<' karakterinin sonrasına geç
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3301      	adds	r3, #1
 800241a:	61fb      	str	r3, [r7, #28]
                end = strchr(start, '>');
 800241c:	213e      	movs	r1, #62	@ 0x3e
 800241e:	69f8      	ldr	r0, [r7, #28]
 8002420:	f009 ff42 	bl	800c2a8 <strchr>
 8002424:	61b8      	str	r0, [r7, #24]
                if (end != NULL) {
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00e      	beq.n	800244a <extractValues+0x96>
                    length = end - start;  // İkinci '<' ve '>' arasındaki uzunluk
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	617b      	str	r3, [r7, #20]
                    strncpy(value2, start, length);  // İkinci değeri kopyala
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	69f9      	ldr	r1, [r7, #28]
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f009 ff54 	bl	800c2e6 <strncpy>
                    value2[length] = '\0';  // Null karakter ekle
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	4413      	add	r3, r2
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]
    } else {
        value1[0] = '\0';  // İlk '<' bulunamazsa boş string döndür
        value2[0] = '\0';  // İkinci '<' ve '>' arasında veri yoksa boş string döndür
    }

}
 8002448:	e014      	b.n	8002474 <extractValues+0xc0>
                    value2[0] = '\0';  // İkinci değer yoksa boş string döndür
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
}
 8002450:	e010      	b.n	8002474 <extractValues+0xc0>
                value2[0] = '\0';  // İkinci '<' bulunamazsa boş string döndür
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
}
 8002458:	e00c      	b.n	8002474 <extractValues+0xc0>
            value1[0] = '\0';  // İlk '>' bulunamazsa boş string döndür
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
            value2[0] = '\0';  // İkinci '<' ve '>' arasında veri yoksa boş string döndür
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	701a      	strb	r2, [r3, #0]
}
 8002466:	e005      	b.n	8002474 <extractValues+0xc0>
        value1[0] = '\0';  // İlk '<' bulunamazsa boş string döndür
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2200      	movs	r2, #0
 800246c:	701a      	strb	r2, [r3, #0]
        value2[0] = '\0';  // İkinci '<' ve '>' arasında veri yoksa boş string döndür
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
}
 8002474:	bf00      	nop
 8002476:	3720      	adds	r7, #32
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002480:	f001 f926 	bl	80036d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002484:	f000 f862 	bl	800254c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002488:	f000 fb7a 	bl	8002b80 <MX_GPIO_Init>
  MX_DMA_Init();
 800248c:	f000 fb50 	bl	8002b30 <MX_DMA_Init>
  MX_I2C1_Init();
 8002490:	f000 f916 	bl	80026c0 <MX_I2C1_Init>
  MX_ADC1_Init();
 8002494:	f000 f8c2 	bl	800261c <MX_ADC1_Init>
  MX_TIM3_Init();
 8002498:	f000 fa9c 	bl	80029d4 <MX_TIM3_Init>
  MX_SDIO_SD_Init();
 800249c:	f000 f99a 	bl	80027d4 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80024a0:	f007 fdf8 	bl	800a094 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 80024a4:	f000 faf0 	bl	8002a88 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80024a8:	f000 f938 	bl	800271c <MX_I2C2_Init>
  MX_TIM1_Init();
 80024ac:	f000 f9b4 	bl	8002818 <MX_TIM1_Init>
  MX_TIM2_Init();
 80024b0:	f000 fa36 	bl	8002920 <MX_TIM2_Init>
  MX_I2C3_Init();
 80024b4:	f000 f960 	bl	8002778 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 80024b8:	f000 fb10 	bl	8002adc <MX_USART2_UART_Init>
  /******<<< SENSOR BATTERY INIT END <<<******/


  /******>>> SENSOR TPGVH INITIALIZATION BEGIN >>>******/
  	#ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_SENSOR_TPGVH_H
  	MS5611.I2C_ADDRESS = MS5611_I2C_ADDRESS_H;
 80024bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002530 <main+0xb4>)
 80024be:	22ee      	movs	r2, #238	@ 0xee
 80024c0:	809a      	strh	r2, [r3, #4]
  	MS5611.i2c = &hi2c1;
 80024c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002530 <main+0xb4>)
 80024c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002534 <main+0xb8>)
 80024c6:	601a      	str	r2, [r3, #0]
  	MS5611.Ref_Alt_Sel = 'm';
 80024c8:	4b19      	ldr	r3, [pc, #100]	@ (8002530 <main+0xb4>)
 80024ca:	226d      	movs	r2, #109	@ 0x6d
 80024cc:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
  	MS5611_Init(&MS5611);
 80024d0:	4817      	ldr	r0, [pc, #92]	@ (8002530 <main+0xb4>)
 80024d2:	f7ff f8fb 	bl	80016cc <MS5611_Init>
  /******<<< SD CARD INITIALIZATION END <<<******/


  /******>>> SENSOR GPS INITIALIZATION BEGIN >>>******/
	#ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_SENSOR_GPS_H
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80024d6:	2201      	movs	r2, #1
 80024d8:	2101      	movs	r1, #1
 80024da:	4817      	ldr	r0, [pc, #92]	@ (8002538 <main+0xbc>)
 80024dc:	f002 faa4 	bl	8004a28 <HAL_GPIO_WritePin>
	GPS_Init();
 80024e0:	f7fe ff16 	bl	8001310 <GPS_Init>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80024e4:	2200      	movs	r2, #0
 80024e6:	2101      	movs	r1, #1
 80024e8:	4813      	ldr	r0, [pc, #76]	@ (8002538 <main+0xbc>)
 80024ea:	f002 fa9d 	bl	8004a28 <HAL_GPIO_WritePin>
	 SubSys_WirelessCom_Config_Init(&dev_WirelessComConfig);
	 #endif

	 #ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_WIRELESSCOMMUNICATION_TELEMETRY_H
	 /*! Will be filled for your dev that use now*/
	 dev_WirelessComApp.huartX = &huart2;
 80024ee:	4b13      	ldr	r3, [pc, #76]	@ (800253c <main+0xc0>)
 80024f0:	4a13      	ldr	r2, [pc, #76]	@ (8002540 <main+0xc4>)
 80024f2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
	 dev_WirelessComConfig.Mode_SW = NormalMode; 		/*! UART and wireless channel are open, transparent transmission is on*/
 80024f6:	4b13      	ldr	r3, [pc, #76]	@ (8002544 <main+0xc8>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	75da      	strb	r2, [r3, #23]
	 SubSys_WirelessCom_Config_WORK_MODE(&dev_WirelessComConfig);
 80024fc:	4811      	ldr	r0, [pc, #68]	@ (8002544 <main+0xc8>)
 80024fe:	f7ff feb9 	bl	8002274 <SubSys_WirelessCom_Config_WORK_MODE>

	 /*! Will be filled for the Ground Station(Target) Device */
	 dev_WirelessComApp.Target_ADDH = 0x20;
 8002502:	4b0e      	ldr	r3, [pc, #56]	@ (800253c <main+0xc0>)
 8002504:	2220      	movs	r2, #32
 8002506:	f883 220c 	strb.w	r2, [r3, #524]	@ 0x20c
	 dev_WirelessComApp.Target_ADDL = 0x23;
 800250a:	4b0c      	ldr	r3, [pc, #48]	@ (800253c <main+0xc0>)
 800250c:	2223      	movs	r2, #35	@ 0x23
 800250e:	f883 220d 	strb.w	r2, [r3, #525]	@ 0x20d
	 dev_WirelessComApp.Target_Ch   = 0x10;
 8002512:	4b0a      	ldr	r3, [pc, #40]	@ (800253c <main+0xc0>)
 8002514:	2210      	movs	r2, #16
 8002516:	f883 220e 	strb.w	r2, [r3, #526]	@ 0x20e

	  /*! Interrupt is active for receiving wireless data
	   * You need to cast variable type from char to uint8_t because of the instruction of Uart Receive function*/
	  HAL_UART_Receive_IT(dev_WirelessComApp.huartX, (uint8_t *)dev_WirelessComApp.Buffer.Rx, sizeof(dev_WirelessComApp.Buffer.Rx));
 800251a:	4b08      	ldr	r3, [pc, #32]	@ (800253c <main+0xc0>)
 800251c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002520:	221b      	movs	r2, #27
 8002522:	4909      	ldr	r1, [pc, #36]	@ (8002548 <main+0xcc>)
 8002524:	4618      	mov	r0, r3
 8002526:	f006 f91d 	bl	8008764 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 SubSys_SatelliteMission_Continue();
 800252a:	f7fe fe23 	bl	8001174 <SubSys_SatelliteMission_Continue>
 800252e:	e7fc      	b.n	800252a <main+0xae>
 8002530:	20000700 	.word	0x20000700
 8002534:	20000358 	.word	0x20000358
 8002538:	40020800 	.word	0x40020800
 800253c:	200007b4 	.word	0x200007b4
 8002540:	200006b8 	.word	0x200006b8
 8002544:	20000790 	.word	0x20000790
 8002548:	20000944 	.word	0x20000944

0800254c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b094      	sub	sp, #80	@ 0x50
 8002550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002552:	f107 0320 	add.w	r3, r7, #32
 8002556:	2230      	movs	r2, #48	@ 0x30
 8002558:	2100      	movs	r1, #0
 800255a:	4618      	mov	r0, r3
 800255c:	f009 fe9c 	bl	800c298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002560:	f107 030c 	add.w	r3, r7, #12
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002570:	2300      	movs	r3, #0
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	4b27      	ldr	r3, [pc, #156]	@ (8002614 <SystemClock_Config+0xc8>)
 8002576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002578:	4a26      	ldr	r2, [pc, #152]	@ (8002614 <SystemClock_Config+0xc8>)
 800257a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800257e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002580:	4b24      	ldr	r3, [pc, #144]	@ (8002614 <SystemClock_Config+0xc8>)
 8002582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800258c:	2300      	movs	r3, #0
 800258e:	607b      	str	r3, [r7, #4]
 8002590:	4b21      	ldr	r3, [pc, #132]	@ (8002618 <SystemClock_Config+0xcc>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a20      	ldr	r2, [pc, #128]	@ (8002618 <SystemClock_Config+0xcc>)
 8002596:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800259a:	6013      	str	r3, [r2, #0]
 800259c:	4b1e      	ldr	r3, [pc, #120]	@ (8002618 <SystemClock_Config+0xcc>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80025a4:	607b      	str	r3, [r7, #4]
 80025a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025a8:	2302      	movs	r3, #2
 80025aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025ac:	2301      	movs	r3, #1
 80025ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025b0:	2310      	movs	r3, #16
 80025b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025b4:	2302      	movs	r3, #2
 80025b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025b8:	2300      	movs	r3, #0
 80025ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80025bc:	2308      	movs	r3, #8
 80025be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80025c0:	2348      	movs	r3, #72	@ 0x48
 80025c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025c4:	2302      	movs	r3, #2
 80025c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80025c8:	2303      	movs	r3, #3
 80025ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025cc:	f107 0320 	add.w	r3, r7, #32
 80025d0:	4618      	mov	r0, r3
 80025d2:	f003 fcfb 	bl	8005fcc <HAL_RCC_OscConfig>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80025dc:	f000 fb52 	bl	8002c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025e0:	230f      	movs	r3, #15
 80025e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025e4:	2302      	movs	r3, #2
 80025e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025f6:	f107 030c 	add.w	r3, r7, #12
 80025fa:	2102      	movs	r1, #2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f003 ff5d 	bl	80064bc <HAL_RCC_ClockConfig>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002608:	f000 fb3c 	bl	8002c84 <Error_Handler>
  }
}
 800260c:	bf00      	nop
 800260e:	3750      	adds	r7, #80	@ 0x50
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40023800 	.word	0x40023800
 8002618:	40007000 	.word	0x40007000

0800261c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002622:	463b      	mov	r3, r7
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800262e:	4b21      	ldr	r3, [pc, #132]	@ (80026b4 <MX_ADC1_Init+0x98>)
 8002630:	4a21      	ldr	r2, [pc, #132]	@ (80026b8 <MX_ADC1_Init+0x9c>)
 8002632:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002634:	4b1f      	ldr	r3, [pc, #124]	@ (80026b4 <MX_ADC1_Init+0x98>)
 8002636:	2200      	movs	r2, #0
 8002638:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800263a:	4b1e      	ldr	r3, [pc, #120]	@ (80026b4 <MX_ADC1_Init+0x98>)
 800263c:	2200      	movs	r2, #0
 800263e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002640:	4b1c      	ldr	r3, [pc, #112]	@ (80026b4 <MX_ADC1_Init+0x98>)
 8002642:	2200      	movs	r2, #0
 8002644:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002646:	4b1b      	ldr	r3, [pc, #108]	@ (80026b4 <MX_ADC1_Init+0x98>)
 8002648:	2201      	movs	r2, #1
 800264a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800264c:	4b19      	ldr	r3, [pc, #100]	@ (80026b4 <MX_ADC1_Init+0x98>)
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002654:	4b17      	ldr	r3, [pc, #92]	@ (80026b4 <MX_ADC1_Init+0x98>)
 8002656:	2200      	movs	r2, #0
 8002658:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800265a:	4b16      	ldr	r3, [pc, #88]	@ (80026b4 <MX_ADC1_Init+0x98>)
 800265c:	4a17      	ldr	r2, [pc, #92]	@ (80026bc <MX_ADC1_Init+0xa0>)
 800265e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002660:	4b14      	ldr	r3, [pc, #80]	@ (80026b4 <MX_ADC1_Init+0x98>)
 8002662:	2200      	movs	r2, #0
 8002664:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002666:	4b13      	ldr	r3, [pc, #76]	@ (80026b4 <MX_ADC1_Init+0x98>)
 8002668:	2201      	movs	r2, #1
 800266a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800266c:	4b11      	ldr	r3, [pc, #68]	@ (80026b4 <MX_ADC1_Init+0x98>)
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002674:	4b0f      	ldr	r3, [pc, #60]	@ (80026b4 <MX_ADC1_Init+0x98>)
 8002676:	2201      	movs	r2, #1
 8002678:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800267a:	480e      	ldr	r0, [pc, #56]	@ (80026b4 <MX_ADC1_Init+0x98>)
 800267c:	f001 f8be 	bl	80037fc <HAL_ADC_Init>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002686:	f000 fafd 	bl	8002c84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800268a:	2300      	movs	r3, #0
 800268c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800268e:	2301      	movs	r3, #1
 8002690:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002696:	463b      	mov	r3, r7
 8002698:	4619      	mov	r1, r3
 800269a:	4806      	ldr	r0, [pc, #24]	@ (80026b4 <MX_ADC1_Init+0x98>)
 800269c:	f001 f8f2 	bl	8003884 <HAL_ADC_ConfigChannel>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80026a6:	f000 faed 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80026aa:	bf00      	nop
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000310 	.word	0x20000310
 80026b8:	40012000 	.word	0x40012000
 80026bc:	0f000001 	.word	0x0f000001

080026c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026c4:	4b12      	ldr	r3, [pc, #72]	@ (8002710 <MX_I2C1_Init+0x50>)
 80026c6:	4a13      	ldr	r2, [pc, #76]	@ (8002714 <MX_I2C1_Init+0x54>)
 80026c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80026ca:	4b11      	ldr	r3, [pc, #68]	@ (8002710 <MX_I2C1_Init+0x50>)
 80026cc:	4a12      	ldr	r2, [pc, #72]	@ (8002718 <MX_I2C1_Init+0x58>)
 80026ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002710 <MX_I2C1_Init+0x50>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80026d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002710 <MX_I2C1_Init+0x50>)
 80026d8:	2200      	movs	r2, #0
 80026da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002710 <MX_I2C1_Init+0x50>)
 80026de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80026e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002710 <MX_I2C1_Init+0x50>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80026ea:	4b09      	ldr	r3, [pc, #36]	@ (8002710 <MX_I2C1_Init+0x50>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026f0:	4b07      	ldr	r3, [pc, #28]	@ (8002710 <MX_I2C1_Init+0x50>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026f6:	4b06      	ldr	r3, [pc, #24]	@ (8002710 <MX_I2C1_Init+0x50>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026fc:	4804      	ldr	r0, [pc, #16]	@ (8002710 <MX_I2C1_Init+0x50>)
 80026fe:	f002 f9ad 	bl	8004a5c <HAL_I2C_Init>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002708:	f000 fabc 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800270c:	bf00      	nop
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20000358 	.word	0x20000358
 8002714:	40005400 	.word	0x40005400
 8002718:	000186a0 	.word	0x000186a0

0800271c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002720:	4b12      	ldr	r3, [pc, #72]	@ (800276c <MX_I2C2_Init+0x50>)
 8002722:	4a13      	ldr	r2, [pc, #76]	@ (8002770 <MX_I2C2_Init+0x54>)
 8002724:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002726:	4b11      	ldr	r3, [pc, #68]	@ (800276c <MX_I2C2_Init+0x50>)
 8002728:	4a12      	ldr	r2, [pc, #72]	@ (8002774 <MX_I2C2_Init+0x58>)
 800272a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800272c:	4b0f      	ldr	r3, [pc, #60]	@ (800276c <MX_I2C2_Init+0x50>)
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002732:	4b0e      	ldr	r3, [pc, #56]	@ (800276c <MX_I2C2_Init+0x50>)
 8002734:	2200      	movs	r2, #0
 8002736:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002738:	4b0c      	ldr	r3, [pc, #48]	@ (800276c <MX_I2C2_Init+0x50>)
 800273a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800273e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002740:	4b0a      	ldr	r3, [pc, #40]	@ (800276c <MX_I2C2_Init+0x50>)
 8002742:	2200      	movs	r2, #0
 8002744:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002746:	4b09      	ldr	r3, [pc, #36]	@ (800276c <MX_I2C2_Init+0x50>)
 8002748:	2200      	movs	r2, #0
 800274a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800274c:	4b07      	ldr	r3, [pc, #28]	@ (800276c <MX_I2C2_Init+0x50>)
 800274e:	2200      	movs	r2, #0
 8002750:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002752:	4b06      	ldr	r3, [pc, #24]	@ (800276c <MX_I2C2_Init+0x50>)
 8002754:	2200      	movs	r2, #0
 8002756:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002758:	4804      	ldr	r0, [pc, #16]	@ (800276c <MX_I2C2_Init+0x50>)
 800275a:	f002 f97f 	bl	8004a5c <HAL_I2C_Init>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002764:	f000 fa8e 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002768:	bf00      	nop
 800276a:	bd80      	pop	{r7, pc}
 800276c:	200003ac 	.word	0x200003ac
 8002770:	40005800 	.word	0x40005800
 8002774:	000186a0 	.word	0x000186a0

08002778 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800277c:	4b12      	ldr	r3, [pc, #72]	@ (80027c8 <MX_I2C3_Init+0x50>)
 800277e:	4a13      	ldr	r2, [pc, #76]	@ (80027cc <MX_I2C3_Init+0x54>)
 8002780:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002782:	4b11      	ldr	r3, [pc, #68]	@ (80027c8 <MX_I2C3_Init+0x50>)
 8002784:	4a12      	ldr	r2, [pc, #72]	@ (80027d0 <MX_I2C3_Init+0x58>)
 8002786:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002788:	4b0f      	ldr	r3, [pc, #60]	@ (80027c8 <MX_I2C3_Init+0x50>)
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800278e:	4b0e      	ldr	r3, [pc, #56]	@ (80027c8 <MX_I2C3_Init+0x50>)
 8002790:	2200      	movs	r2, #0
 8002792:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002794:	4b0c      	ldr	r3, [pc, #48]	@ (80027c8 <MX_I2C3_Init+0x50>)
 8002796:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800279a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800279c:	4b0a      	ldr	r3, [pc, #40]	@ (80027c8 <MX_I2C3_Init+0x50>)
 800279e:	2200      	movs	r2, #0
 80027a0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80027a2:	4b09      	ldr	r3, [pc, #36]	@ (80027c8 <MX_I2C3_Init+0x50>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027a8:	4b07      	ldr	r3, [pc, #28]	@ (80027c8 <MX_I2C3_Init+0x50>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027ae:	4b06      	ldr	r3, [pc, #24]	@ (80027c8 <MX_I2C3_Init+0x50>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80027b4:	4804      	ldr	r0, [pc, #16]	@ (80027c8 <MX_I2C3_Init+0x50>)
 80027b6:	f002 f951 	bl	8004a5c <HAL_I2C_Init>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80027c0:	f000 fa60 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80027c4:	bf00      	nop
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20000400 	.word	0x20000400
 80027cc:	40005c00 	.word	0x40005c00
 80027d0:	000186a0 	.word	0x000186a0

080027d4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80027d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002810 <MX_SDIO_SD_Init+0x3c>)
 80027da:	4a0e      	ldr	r2, [pc, #56]	@ (8002814 <MX_SDIO_SD_Init+0x40>)
 80027dc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80027de:	4b0c      	ldr	r3, [pc, #48]	@ (8002810 <MX_SDIO_SD_Init+0x3c>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80027e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002810 <MX_SDIO_SD_Init+0x3c>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80027ea:	4b09      	ldr	r3, [pc, #36]	@ (8002810 <MX_SDIO_SD_Init+0x3c>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 80027f0:	4b07      	ldr	r3, [pc, #28]	@ (8002810 <MX_SDIO_SD_Init+0x3c>)
 80027f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027f6:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80027f8:	4b05      	ldr	r3, [pc, #20]	@ (8002810 <MX_SDIO_SD_Init+0x3c>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80027fe:	4b04      	ldr	r3, [pc, #16]	@ (8002810 <MX_SDIO_SD_Init+0x3c>)
 8002800:	2200      	movs	r2, #0
 8002802:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	20000454 	.word	0x20000454
 8002814:	40012c00 	.word	0x40012c00

08002818 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b092      	sub	sp, #72	@ 0x48
 800281c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800281e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002828:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	611a      	str	r2, [r3, #16]
 8002838:	615a      	str	r2, [r3, #20]
 800283a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800283c:	1d3b      	adds	r3, r7, #4
 800283e:	2220      	movs	r2, #32
 8002840:	2100      	movs	r1, #0
 8002842:	4618      	mov	r0, r3
 8002844:	f009 fd28 	bl	800c298 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002848:	4b33      	ldr	r3, [pc, #204]	@ (8002918 <MX_TIM1_Init+0x100>)
 800284a:	4a34      	ldr	r2, [pc, #208]	@ (800291c <MX_TIM1_Init+0x104>)
 800284c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1440-1;
 800284e:	4b32      	ldr	r3, [pc, #200]	@ (8002918 <MX_TIM1_Init+0x100>)
 8002850:	f240 529f 	movw	r2, #1439	@ 0x59f
 8002854:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002856:	4b30      	ldr	r3, [pc, #192]	@ (8002918 <MX_TIM1_Init+0x100>)
 8002858:	2200      	movs	r2, #0
 800285a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800285c:	4b2e      	ldr	r3, [pc, #184]	@ (8002918 <MX_TIM1_Init+0x100>)
 800285e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002862:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002864:	4b2c      	ldr	r3, [pc, #176]	@ (8002918 <MX_TIM1_Init+0x100>)
 8002866:	2200      	movs	r2, #0
 8002868:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800286a:	4b2b      	ldr	r3, [pc, #172]	@ (8002918 <MX_TIM1_Init+0x100>)
 800286c:	2200      	movs	r2, #0
 800286e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002870:	4b29      	ldr	r3, [pc, #164]	@ (8002918 <MX_TIM1_Init+0x100>)
 8002872:	2200      	movs	r2, #0
 8002874:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002876:	4828      	ldr	r0, [pc, #160]	@ (8002918 <MX_TIM1_Init+0x100>)
 8002878:	f005 fb3a 	bl	8007ef0 <HAL_TIM_PWM_Init>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002882:	f000 f9ff 	bl	8002c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002886:	2300      	movs	r3, #0
 8002888:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800288a:	2300      	movs	r3, #0
 800288c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800288e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002892:	4619      	mov	r1, r3
 8002894:	4820      	ldr	r0, [pc, #128]	@ (8002918 <MX_TIM1_Init+0x100>)
 8002896:	f005 fe55 	bl	8008544 <HAL_TIMEx_MasterConfigSynchronization>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80028a0:	f000 f9f0 	bl	8002c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028a4:	2360      	movs	r3, #96	@ 0x60
 80028a6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028ac:	2300      	movs	r3, #0
 80028ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80028b0:	2300      	movs	r3, #0
 80028b2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028b4:	2300      	movs	r3, #0
 80028b6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80028b8:	2300      	movs	r3, #0
 80028ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80028bc:	2300      	movs	r3, #0
 80028be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028c4:	2204      	movs	r2, #4
 80028c6:	4619      	mov	r1, r3
 80028c8:	4813      	ldr	r0, [pc, #76]	@ (8002918 <MX_TIM1_Init+0x100>)
 80028ca:	f005 fb61 	bl	8007f90 <HAL_TIM_PWM_ConfigChannel>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80028d4:	f000 f9d6 	bl	8002c84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028d8:	2300      	movs	r3, #0
 80028da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028dc:	2300      	movs	r3, #0
 80028de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028f2:	2300      	movs	r3, #0
 80028f4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80028f6:	1d3b      	adds	r3, r7, #4
 80028f8:	4619      	mov	r1, r3
 80028fa:	4807      	ldr	r0, [pc, #28]	@ (8002918 <MX_TIM1_Init+0x100>)
 80028fc:	f005 fe90 	bl	8008620 <HAL_TIMEx_ConfigBreakDeadTime>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8002906:	f000 f9bd 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800290a:	4803      	ldr	r0, [pc, #12]	@ (8002918 <MX_TIM1_Init+0x100>)
 800290c:	f000 fc6a 	bl	80031e4 <HAL_TIM_MspPostInit>

}
 8002910:	bf00      	nop
 8002912:	3748      	adds	r7, #72	@ 0x48
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20000598 	.word	0x20000598
 800291c:	40010000 	.word	0x40010000

08002920 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08a      	sub	sp, #40	@ 0x28
 8002924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002926:	f107 0320 	add.w	r3, r7, #32
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002930:	1d3b      	adds	r3, r7, #4
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	605a      	str	r2, [r3, #4]
 8002938:	609a      	str	r2, [r3, #8]
 800293a:	60da      	str	r2, [r3, #12]
 800293c:	611a      	str	r2, [r3, #16]
 800293e:	615a      	str	r2, [r3, #20]
 8002940:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002942:	4b23      	ldr	r3, [pc, #140]	@ (80029d0 <MX_TIM2_Init+0xb0>)
 8002944:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002948:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440-1;
 800294a:	4b21      	ldr	r3, [pc, #132]	@ (80029d0 <MX_TIM2_Init+0xb0>)
 800294c:	f240 529f 	movw	r2, #1439	@ 0x59f
 8002950:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002952:	4b1f      	ldr	r3, [pc, #124]	@ (80029d0 <MX_TIM2_Init+0xb0>)
 8002954:	2200      	movs	r2, #0
 8002956:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002958:	4b1d      	ldr	r3, [pc, #116]	@ (80029d0 <MX_TIM2_Init+0xb0>)
 800295a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800295e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002960:	4b1b      	ldr	r3, [pc, #108]	@ (80029d0 <MX_TIM2_Init+0xb0>)
 8002962:	2200      	movs	r2, #0
 8002964:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002966:	4b1a      	ldr	r3, [pc, #104]	@ (80029d0 <MX_TIM2_Init+0xb0>)
 8002968:	2200      	movs	r2, #0
 800296a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800296c:	4818      	ldr	r0, [pc, #96]	@ (80029d0 <MX_TIM2_Init+0xb0>)
 800296e:	f005 fabf 	bl	8007ef0 <HAL_TIM_PWM_Init>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002978:	f000 f984 	bl	8002c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800297c:	2300      	movs	r3, #0
 800297e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002980:	2300      	movs	r3, #0
 8002982:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002984:	f107 0320 	add.w	r3, r7, #32
 8002988:	4619      	mov	r1, r3
 800298a:	4811      	ldr	r0, [pc, #68]	@ (80029d0 <MX_TIM2_Init+0xb0>)
 800298c:	f005 fdda 	bl	8008544 <HAL_TIMEx_MasterConfigSynchronization>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002996:	f000 f975 	bl	8002c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800299a:	2360      	movs	r3, #96	@ 0x60
 800299c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800299e:	2300      	movs	r3, #0
 80029a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029a6:	2300      	movs	r3, #0
 80029a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029aa:	1d3b      	adds	r3, r7, #4
 80029ac:	2200      	movs	r2, #0
 80029ae:	4619      	mov	r1, r3
 80029b0:	4807      	ldr	r0, [pc, #28]	@ (80029d0 <MX_TIM2_Init+0xb0>)
 80029b2:	f005 faed 	bl	8007f90 <HAL_TIM_PWM_ConfigChannel>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80029bc:	f000 f962 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80029c0:	4803      	ldr	r0, [pc, #12]	@ (80029d0 <MX_TIM2_Init+0xb0>)
 80029c2:	f000 fc0f 	bl	80031e4 <HAL_TIM_MspPostInit>

}
 80029c6:	bf00      	nop
 80029c8:	3728      	adds	r7, #40	@ 0x28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	200005e0 	.word	0x200005e0

080029d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	@ 0x28
 80029d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029da:	f107 0320 	add.w	r3, r7, #32
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029e4:	1d3b      	adds	r3, r7, #4
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	605a      	str	r2, [r3, #4]
 80029ec:	609a      	str	r2, [r3, #8]
 80029ee:	60da      	str	r2, [r3, #12]
 80029f0:	611a      	str	r2, [r3, #16]
 80029f2:	615a      	str	r2, [r3, #20]
 80029f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029f6:	4b22      	ldr	r3, [pc, #136]	@ (8002a80 <MX_TIM3_Init+0xac>)
 80029f8:	4a22      	ldr	r2, [pc, #136]	@ (8002a84 <MX_TIM3_Init+0xb0>)
 80029fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 263-1;
 80029fc:	4b20      	ldr	r3, [pc, #128]	@ (8002a80 <MX_TIM3_Init+0xac>)
 80029fe:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8002a02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a04:	4b1e      	ldr	r3, [pc, #120]	@ (8002a80 <MX_TIM3_Init+0xac>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8002a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8002a80 <MX_TIM3_Init+0xac>)
 8002a0c:	2263      	movs	r2, #99	@ 0x63
 8002a0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a10:	4b1b      	ldr	r3, [pc, #108]	@ (8002a80 <MX_TIM3_Init+0xac>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a16:	4b1a      	ldr	r3, [pc, #104]	@ (8002a80 <MX_TIM3_Init+0xac>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a1c:	4818      	ldr	r0, [pc, #96]	@ (8002a80 <MX_TIM3_Init+0xac>)
 8002a1e:	f005 fa67 	bl	8007ef0 <HAL_TIM_PWM_Init>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002a28:	f000 f92c 	bl	8002c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a30:	2300      	movs	r3, #0
 8002a32:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a34:	f107 0320 	add.w	r3, r7, #32
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4811      	ldr	r0, [pc, #68]	@ (8002a80 <MX_TIM3_Init+0xac>)
 8002a3c:	f005 fd82 	bl	8008544 <HAL_TIMEx_MasterConfigSynchronization>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002a46:	f000 f91d 	bl	8002c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a4a:	2360      	movs	r3, #96	@ 0x60
 8002a4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a5a:	1d3b      	adds	r3, r7, #4
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4807      	ldr	r0, [pc, #28]	@ (8002a80 <MX_TIM3_Init+0xac>)
 8002a62:	f005 fa95 	bl	8007f90 <HAL_TIM_PWM_ConfigChannel>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002a6c:	f000 f90a 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a70:	4803      	ldr	r0, [pc, #12]	@ (8002a80 <MX_TIM3_Init+0xac>)
 8002a72:	f000 fbb7 	bl	80031e4 <HAL_TIM_MspPostInit>

}
 8002a76:	bf00      	nop
 8002a78:	3728      	adds	r7, #40	@ 0x28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20000628 	.word	0x20000628
 8002a84:	40000400 	.word	0x40000400

08002a88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a8c:	4b11      	ldr	r3, [pc, #68]	@ (8002ad4 <MX_USART1_UART_Init+0x4c>)
 8002a8e:	4a12      	ldr	r2, [pc, #72]	@ (8002ad8 <MX_USART1_UART_Init+0x50>)
 8002a90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a92:	4b10      	ldr	r3, [pc, #64]	@ (8002ad4 <MX_USART1_UART_Init+0x4c>)
 8002a94:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002a98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad4 <MX_USART1_UART_Init+0x4c>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad4 <MX_USART1_UART_Init+0x4c>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad4 <MX_USART1_UART_Init+0x4c>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002aac:	4b09      	ldr	r3, [pc, #36]	@ (8002ad4 <MX_USART1_UART_Init+0x4c>)
 8002aae:	220c      	movs	r2, #12
 8002ab0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ab2:	4b08      	ldr	r3, [pc, #32]	@ (8002ad4 <MX_USART1_UART_Init+0x4c>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ab8:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <MX_USART1_UART_Init+0x4c>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002abe:	4805      	ldr	r0, [pc, #20]	@ (8002ad4 <MX_USART1_UART_Init+0x4c>)
 8002ac0:	f005 fe00 	bl	80086c4 <HAL_UART_Init>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002aca:	f000 f8db 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000670 	.word	0x20000670
 8002ad8:	40011000 	.word	0x40011000

08002adc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ae0:	4b11      	ldr	r3, [pc, #68]	@ (8002b28 <MX_USART2_UART_Init+0x4c>)
 8002ae2:	4a12      	ldr	r2, [pc, #72]	@ (8002b2c <MX_USART2_UART_Init+0x50>)
 8002ae4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ae6:	4b10      	ldr	r3, [pc, #64]	@ (8002b28 <MX_USART2_UART_Init+0x4c>)
 8002ae8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002aec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002aee:	4b0e      	ldr	r3, [pc, #56]	@ (8002b28 <MX_USART2_UART_Init+0x4c>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002af4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b28 <MX_USART2_UART_Init+0x4c>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002afa:	4b0b      	ldr	r3, [pc, #44]	@ (8002b28 <MX_USART2_UART_Init+0x4c>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b00:	4b09      	ldr	r3, [pc, #36]	@ (8002b28 <MX_USART2_UART_Init+0x4c>)
 8002b02:	220c      	movs	r2, #12
 8002b04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b06:	4b08      	ldr	r3, [pc, #32]	@ (8002b28 <MX_USART2_UART_Init+0x4c>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b0c:	4b06      	ldr	r3, [pc, #24]	@ (8002b28 <MX_USART2_UART_Init+0x4c>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b12:	4805      	ldr	r0, [pc, #20]	@ (8002b28 <MX_USART2_UART_Init+0x4c>)
 8002b14:	f005 fdd6 	bl	80086c4 <HAL_UART_Init>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002b1e:	f000 f8b1 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	200006b8 	.word	0x200006b8
 8002b2c:	40004400 	.word	0x40004400

08002b30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	4b10      	ldr	r3, [pc, #64]	@ (8002b7c <MX_DMA_Init+0x4c>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3e:	4a0f      	ldr	r2, [pc, #60]	@ (8002b7c <MX_DMA_Init+0x4c>)
 8002b40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b46:	4b0d      	ldr	r3, [pc, #52]	@ (8002b7c <MX_DMA_Init+0x4c>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b4e:	607b      	str	r3, [r7, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 3);
 8002b52:	2203      	movs	r2, #3
 8002b54:	2103      	movs	r1, #3
 8002b56:	203b      	movs	r0, #59	@ 0x3b
 8002b58:	f001 f99d 	bl	8003e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002b5c:	203b      	movs	r0, #59	@ 0x3b
 8002b5e:	f001 f9b6 	bl	8003ece <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 3, 3);
 8002b62:	2203      	movs	r2, #3
 8002b64:	2103      	movs	r1, #3
 8002b66:	2045      	movs	r0, #69	@ 0x45
 8002b68:	f001 f995 	bl	8003e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002b6c:	2045      	movs	r0, #69	@ 0x45
 8002b6e:	f001 f9ae 	bl	8003ece <HAL_NVIC_EnableIRQ>

}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40023800 	.word	0x40023800

08002b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08a      	sub	sp, #40	@ 0x28
 8002b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b86:	f107 0314 	add.w	r3, r7, #20
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	605a      	str	r2, [r3, #4]
 8002b90:	609a      	str	r2, [r3, #8]
 8002b92:	60da      	str	r2, [r3, #12]
 8002b94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	4b37      	ldr	r3, [pc, #220]	@ (8002c78 <MX_GPIO_Init+0xf8>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9e:	4a36      	ldr	r2, [pc, #216]	@ (8002c78 <MX_GPIO_Init+0xf8>)
 8002ba0:	f043 0304 	orr.w	r3, r3, #4
 8002ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ba6:	4b34      	ldr	r3, [pc, #208]	@ (8002c78 <MX_GPIO_Init+0xf8>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	4b30      	ldr	r3, [pc, #192]	@ (8002c78 <MX_GPIO_Init+0xf8>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bba:	4a2f      	ldr	r2, [pc, #188]	@ (8002c78 <MX_GPIO_Init+0xf8>)
 8002bbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8002c78 <MX_GPIO_Init+0xf8>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	4b29      	ldr	r3, [pc, #164]	@ (8002c78 <MX_GPIO_Init+0xf8>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd6:	4a28      	ldr	r2, [pc, #160]	@ (8002c78 <MX_GPIO_Init+0xf8>)
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bde:	4b26      	ldr	r3, [pc, #152]	@ (8002c78 <MX_GPIO_Init+0xf8>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	60bb      	str	r3, [r7, #8]
 8002be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	607b      	str	r3, [r7, #4]
 8002bee:	4b22      	ldr	r3, [pc, #136]	@ (8002c78 <MX_GPIO_Init+0xf8>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf2:	4a21      	ldr	r2, [pc, #132]	@ (8002c78 <MX_GPIO_Init+0xf8>)
 8002bf4:	f043 0302 	orr.w	r3, r3, #2
 8002bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8002c78 <MX_GPIO_Init+0xf8>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	607b      	str	r3, [r7, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002c06:	2200      	movs	r2, #0
 8002c08:	2133      	movs	r1, #51	@ 0x33
 8002c0a:	481c      	ldr	r0, [pc, #112]	@ (8002c7c <MX_GPIO_Init+0xfc>)
 8002c0c:	f001 ff0c 	bl	8004a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8002c10:	2200      	movs	r2, #0
 8002c12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c16:	481a      	ldr	r0, [pc, #104]	@ (8002c80 <MX_GPIO_Init+0x100>)
 8002c18:	f001 ff06 	bl	8004a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002c1c:	2333      	movs	r3, #51	@ 0x33
 8002c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c20:	2301      	movs	r3, #1
 8002c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c2c:	f107 0314 	add.w	r3, r7, #20
 8002c30:	4619      	mov	r1, r3
 8002c32:	4812      	ldr	r0, [pc, #72]	@ (8002c7c <MX_GPIO_Init+0xfc>)
 8002c34:	f001 fd74 	bl	8004720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c38:	2304      	movs	r3, #4
 8002c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c44:	f107 0314 	add.w	r3, r7, #20
 8002c48:	4619      	mov	r1, r3
 8002c4a:	480c      	ldr	r0, [pc, #48]	@ (8002c7c <MX_GPIO_Init+0xfc>)
 8002c4c:	f001 fd68 	bl	8004720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002c50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c56:	2301      	movs	r3, #1
 8002c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c62:	f107 0314 	add.w	r3, r7, #20
 8002c66:	4619      	mov	r1, r3
 8002c68:	4805      	ldr	r0, [pc, #20]	@ (8002c80 <MX_GPIO_Init+0x100>)
 8002c6a:	f001 fd59 	bl	8004720 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c6e:	bf00      	nop
 8002c70:	3728      	adds	r7, #40	@ 0x28
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	40020800 	.word	0x40020800
 8002c80:	40020400 	.word	0x40020400

08002c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c88:	b672      	cpsid	i
}
 8002c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c8c:	bf00      	nop
 8002c8e:	e7fd      	b.n	8002c8c <Error_Handler+0x8>

08002c90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	607b      	str	r3, [r7, #4]
 8002c9a:	4b10      	ldr	r3, [pc, #64]	@ (8002cdc <HAL_MspInit+0x4c>)
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9e:	4a0f      	ldr	r2, [pc, #60]	@ (8002cdc <HAL_MspInit+0x4c>)
 8002ca0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ca4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8002cdc <HAL_MspInit+0x4c>)
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002caa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cae:	607b      	str	r3, [r7, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	603b      	str	r3, [r7, #0]
 8002cb6:	4b09      	ldr	r3, [pc, #36]	@ (8002cdc <HAL_MspInit+0x4c>)
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cba:	4a08      	ldr	r2, [pc, #32]	@ (8002cdc <HAL_MspInit+0x4c>)
 8002cbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cc2:	4b06      	ldr	r3, [pc, #24]	@ (8002cdc <HAL_MspInit+0x4c>)
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002cce:	2005      	movs	r0, #5
 8002cd0:	f001 f8d6 	bl	8003e80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cd4:	bf00      	nop
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40023800 	.word	0x40023800

08002ce0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08a      	sub	sp, #40	@ 0x28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce8:	f107 0314 	add.w	r3, r7, #20
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	60da      	str	r2, [r3, #12]
 8002cf6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a17      	ldr	r2, [pc, #92]	@ (8002d5c <HAL_ADC_MspInit+0x7c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d127      	bne.n	8002d52 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	4b16      	ldr	r3, [pc, #88]	@ (8002d60 <HAL_ADC_MspInit+0x80>)
 8002d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0a:	4a15      	ldr	r2, [pc, #84]	@ (8002d60 <HAL_ADC_MspInit+0x80>)
 8002d0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d10:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d12:	4b13      	ldr	r3, [pc, #76]	@ (8002d60 <HAL_ADC_MspInit+0x80>)
 8002d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d1a:	613b      	str	r3, [r7, #16]
 8002d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	4b0f      	ldr	r3, [pc, #60]	@ (8002d60 <HAL_ADC_MspInit+0x80>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d26:	4a0e      	ldr	r2, [pc, #56]	@ (8002d60 <HAL_ADC_MspInit+0x80>)
 8002d28:	f043 0301 	orr.w	r3, r3, #1
 8002d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d60 <HAL_ADC_MspInit+0x80>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d46:	f107 0314 	add.w	r3, r7, #20
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4805      	ldr	r0, [pc, #20]	@ (8002d64 <HAL_ADC_MspInit+0x84>)
 8002d4e:	f001 fce7 	bl	8004720 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002d52:	bf00      	nop
 8002d54:	3728      	adds	r7, #40	@ 0x28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40012000 	.word	0x40012000
 8002d60:	40023800 	.word	0x40023800
 8002d64:	40020000 	.word	0x40020000

08002d68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08e      	sub	sp, #56	@ 0x38
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	60da      	str	r2, [r3, #12]
 8002d7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a63      	ldr	r2, [pc, #396]	@ (8002f14 <HAL_I2C_MspInit+0x1ac>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d12c      	bne.n	8002de4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	623b      	str	r3, [r7, #32]
 8002d8e:	4b62      	ldr	r3, [pc, #392]	@ (8002f18 <HAL_I2C_MspInit+0x1b0>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d92:	4a61      	ldr	r2, [pc, #388]	@ (8002f18 <HAL_I2C_MspInit+0x1b0>)
 8002d94:	f043 0302 	orr.w	r3, r3, #2
 8002d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d9a:	4b5f      	ldr	r3, [pc, #380]	@ (8002f18 <HAL_I2C_MspInit+0x1b0>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	623b      	str	r3, [r7, #32]
 8002da4:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002da6:	23c0      	movs	r3, #192	@ 0xc0
 8002da8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002daa:	2312      	movs	r3, #18
 8002dac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db2:	2303      	movs	r3, #3
 8002db4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002db6:	2304      	movs	r3, #4
 8002db8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4856      	ldr	r0, [pc, #344]	@ (8002f1c <HAL_I2C_MspInit+0x1b4>)
 8002dc2:	f001 fcad 	bl	8004720 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61fb      	str	r3, [r7, #28]
 8002dca:	4b53      	ldr	r3, [pc, #332]	@ (8002f18 <HAL_I2C_MspInit+0x1b0>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	4a52      	ldr	r2, [pc, #328]	@ (8002f18 <HAL_I2C_MspInit+0x1b0>)
 8002dd0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002dd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dd6:	4b50      	ldr	r3, [pc, #320]	@ (8002f18 <HAL_I2C_MspInit+0x1b0>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dde:	61fb      	str	r3, [r7, #28]
 8002de0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002de2:	e092      	b.n	8002f0a <HAL_I2C_MspInit+0x1a2>
  else if(hi2c->Instance==I2C2)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a4d      	ldr	r2, [pc, #308]	@ (8002f20 <HAL_I2C_MspInit+0x1b8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d13d      	bne.n	8002e6a <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	4b49      	ldr	r3, [pc, #292]	@ (8002f18 <HAL_I2C_MspInit+0x1b0>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df6:	4a48      	ldr	r2, [pc, #288]	@ (8002f18 <HAL_I2C_MspInit+0x1b0>)
 8002df8:	f043 0302 	orr.w	r3, r3, #2
 8002dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dfe:	4b46      	ldr	r3, [pc, #280]	@ (8002f18 <HAL_I2C_MspInit+0x1b0>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	61bb      	str	r3, [r7, #24]
 8002e08:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e10:	2312      	movs	r3, #18
 8002e12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002e1c:	2304      	movs	r3, #4
 8002e1e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e24:	4619      	mov	r1, r3
 8002e26:	483d      	ldr	r0, [pc, #244]	@ (8002f1c <HAL_I2C_MspInit+0x1b4>)
 8002e28:	f001 fc7a 	bl	8004720 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e2c:	2308      	movs	r3, #8
 8002e2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e30:	2312      	movs	r3, #18
 8002e32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002e3c:	2309      	movs	r3, #9
 8002e3e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e44:	4619      	mov	r1, r3
 8002e46:	4835      	ldr	r0, [pc, #212]	@ (8002f1c <HAL_I2C_MspInit+0x1b4>)
 8002e48:	f001 fc6a 	bl	8004720 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	4b31      	ldr	r3, [pc, #196]	@ (8002f18 <HAL_I2C_MspInit+0x1b0>)
 8002e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e54:	4a30      	ldr	r2, [pc, #192]	@ (8002f18 <HAL_I2C_MspInit+0x1b0>)
 8002e56:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e5c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f18 <HAL_I2C_MspInit+0x1b0>)
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	697b      	ldr	r3, [r7, #20]
}
 8002e68:	e04f      	b.n	8002f0a <HAL_I2C_MspInit+0x1a2>
  else if(hi2c->Instance==I2C3)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a2d      	ldr	r2, [pc, #180]	@ (8002f24 <HAL_I2C_MspInit+0x1bc>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d14a      	bne.n	8002f0a <HAL_I2C_MspInit+0x1a2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e74:	2300      	movs	r3, #0
 8002e76:	613b      	str	r3, [r7, #16]
 8002e78:	4b27      	ldr	r3, [pc, #156]	@ (8002f18 <HAL_I2C_MspInit+0x1b0>)
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7c:	4a26      	ldr	r2, [pc, #152]	@ (8002f18 <HAL_I2C_MspInit+0x1b0>)
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e84:	4b24      	ldr	r3, [pc, #144]	@ (8002f18 <HAL_I2C_MspInit+0x1b0>)
 8002e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	4b20      	ldr	r3, [pc, #128]	@ (8002f18 <HAL_I2C_MspInit+0x1b0>)
 8002e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e98:	4a1f      	ldr	r2, [pc, #124]	@ (8002f18 <HAL_I2C_MspInit+0x1b0>)
 8002e9a:	f043 0302 	orr.w	r3, r3, #2
 8002e9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f18 <HAL_I2C_MspInit+0x1b0>)
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002eac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002eb2:	2312      	movs	r3, #18
 8002eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ebe:	2304      	movs	r3, #4
 8002ec0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4817      	ldr	r0, [pc, #92]	@ (8002f28 <HAL_I2C_MspInit+0x1c0>)
 8002eca:	f001 fc29 	bl	8004720 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ece:	2310      	movs	r3, #16
 8002ed0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ed2:	2312      	movs	r3, #18
 8002ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eda:	2303      	movs	r3, #3
 8002edc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8002ede:	2309      	movs	r3, #9
 8002ee0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	480c      	ldr	r0, [pc, #48]	@ (8002f1c <HAL_I2C_MspInit+0x1b4>)
 8002eea:	f001 fc19 	bl	8004720 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60bb      	str	r3, [r7, #8]
 8002ef2:	4b09      	ldr	r3, [pc, #36]	@ (8002f18 <HAL_I2C_MspInit+0x1b0>)
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef6:	4a08      	ldr	r2, [pc, #32]	@ (8002f18 <HAL_I2C_MspInit+0x1b0>)
 8002ef8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002efc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002efe:	4b06      	ldr	r3, [pc, #24]	@ (8002f18 <HAL_I2C_MspInit+0x1b0>)
 8002f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f06:	60bb      	str	r3, [r7, #8]
 8002f08:	68bb      	ldr	r3, [r7, #8]
}
 8002f0a:	bf00      	nop
 8002f0c:	3738      	adds	r7, #56	@ 0x38
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40005400 	.word	0x40005400
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40020400 	.word	0x40020400
 8002f20:	40005800 	.word	0x40005800
 8002f24:	40005c00 	.word	0x40005c00
 8002f28:	40020000 	.word	0x40020000

08002f2c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08c      	sub	sp, #48	@ 0x30
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f34:	f107 031c 	add.w	r3, r7, #28
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	60da      	str	r2, [r3, #12]
 8002f42:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a77      	ldr	r2, [pc, #476]	@ (8003128 <HAL_SD_MspInit+0x1fc>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	f040 80e8 	bne.w	8003120 <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002f50:	2300      	movs	r3, #0
 8002f52:	61bb      	str	r3, [r7, #24]
 8002f54:	4b75      	ldr	r3, [pc, #468]	@ (800312c <HAL_SD_MspInit+0x200>)
 8002f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f58:	4a74      	ldr	r2, [pc, #464]	@ (800312c <HAL_SD_MspInit+0x200>)
 8002f5a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002f5e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f60:	4b72      	ldr	r3, [pc, #456]	@ (800312c <HAL_SD_MspInit+0x200>)
 8002f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f68:	61bb      	str	r3, [r7, #24]
 8002f6a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	4b6e      	ldr	r3, [pc, #440]	@ (800312c <HAL_SD_MspInit+0x200>)
 8002f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f74:	4a6d      	ldr	r2, [pc, #436]	@ (800312c <HAL_SD_MspInit+0x200>)
 8002f76:	f043 0301 	orr.w	r3, r3, #1
 8002f7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f7c:	4b6b      	ldr	r3, [pc, #428]	@ (800312c <HAL_SD_MspInit+0x200>)
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f88:	2300      	movs	r3, #0
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	4b67      	ldr	r3, [pc, #412]	@ (800312c <HAL_SD_MspInit+0x200>)
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f90:	4a66      	ldr	r2, [pc, #408]	@ (800312c <HAL_SD_MspInit+0x200>)
 8002f92:	f043 0302 	orr.w	r3, r3, #2
 8002f96:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f98:	4b64      	ldr	r3, [pc, #400]	@ (800312c <HAL_SD_MspInit+0x200>)
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	4b60      	ldr	r3, [pc, #384]	@ (800312c <HAL_SD_MspInit+0x200>)
 8002faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fac:	4a5f      	ldr	r2, [pc, #380]	@ (800312c <HAL_SD_MspInit+0x200>)
 8002fae:	f043 0304 	orr.w	r3, r3, #4
 8002fb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fb4:	4b5d      	ldr	r3, [pc, #372]	@ (800312c <HAL_SD_MspInit+0x200>)
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002fc0:	2340      	movs	r3, #64	@ 0x40
 8002fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002fd0:	230c      	movs	r3, #12
 8002fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd4:	f107 031c 	add.w	r3, r7, #28
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4855      	ldr	r0, [pc, #340]	@ (8003130 <HAL_SD_MspInit+0x204>)
 8002fdc:	f001 fba0 	bl	8004720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002fe0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fea:	2300      	movs	r3, #0
 8002fec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002ff2:	230c      	movs	r3, #12
 8002ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff6:	f107 031c 	add.w	r3, r7, #28
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	484d      	ldr	r0, [pc, #308]	@ (8003134 <HAL_SD_MspInit+0x208>)
 8002ffe:	f001 fb8f 	bl	8004720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003002:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003008:	2302      	movs	r3, #2
 800300a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300c:	2300      	movs	r3, #0
 800300e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003010:	2303      	movs	r3, #3
 8003012:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003014:	230c      	movs	r3, #12
 8003016:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003018:	f107 031c 	add.w	r3, r7, #28
 800301c:	4619      	mov	r1, r3
 800301e:	4846      	ldr	r0, [pc, #280]	@ (8003138 <HAL_SD_MspInit+0x20c>)
 8003020:	f001 fb7e 	bl	8004720 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8003024:	4b45      	ldr	r3, [pc, #276]	@ (800313c <HAL_SD_MspInit+0x210>)
 8003026:	4a46      	ldr	r2, [pc, #280]	@ (8003140 <HAL_SD_MspInit+0x214>)
 8003028:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800302a:	4b44      	ldr	r3, [pc, #272]	@ (800313c <HAL_SD_MspInit+0x210>)
 800302c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003030:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003032:	4b42      	ldr	r3, [pc, #264]	@ (800313c <HAL_SD_MspInit+0x210>)
 8003034:	2200      	movs	r2, #0
 8003036:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003038:	4b40      	ldr	r3, [pc, #256]	@ (800313c <HAL_SD_MspInit+0x210>)
 800303a:	2200      	movs	r2, #0
 800303c:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800303e:	4b3f      	ldr	r3, [pc, #252]	@ (800313c <HAL_SD_MspInit+0x210>)
 8003040:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003044:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003046:	4b3d      	ldr	r3, [pc, #244]	@ (800313c <HAL_SD_MspInit+0x210>)
 8003048:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800304c:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800304e:	4b3b      	ldr	r3, [pc, #236]	@ (800313c <HAL_SD_MspInit+0x210>)
 8003050:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003054:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8003056:	4b39      	ldr	r3, [pc, #228]	@ (800313c <HAL_SD_MspInit+0x210>)
 8003058:	2220      	movs	r2, #32
 800305a:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800305c:	4b37      	ldr	r3, [pc, #220]	@ (800313c <HAL_SD_MspInit+0x210>)
 800305e:	2200      	movs	r2, #0
 8003060:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003062:	4b36      	ldr	r3, [pc, #216]	@ (800313c <HAL_SD_MspInit+0x210>)
 8003064:	2204      	movs	r2, #4
 8003066:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003068:	4b34      	ldr	r3, [pc, #208]	@ (800313c <HAL_SD_MspInit+0x210>)
 800306a:	2203      	movs	r2, #3
 800306c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800306e:	4b33      	ldr	r3, [pc, #204]	@ (800313c <HAL_SD_MspInit+0x210>)
 8003070:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003074:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003076:	4b31      	ldr	r3, [pc, #196]	@ (800313c <HAL_SD_MspInit+0x210>)
 8003078:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800307c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800307e:	482f      	ldr	r0, [pc, #188]	@ (800313c <HAL_SD_MspInit+0x210>)
 8003080:	f000 ff40 	bl	8003f04 <HAL_DMA_Init>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_SD_MspInit+0x162>
    {
      Error_Handler();
 800308a:	f7ff fdfb 	bl	8002c84 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a2a      	ldr	r2, [pc, #168]	@ (800313c <HAL_SD_MspInit+0x210>)
 8003092:	641a      	str	r2, [r3, #64]	@ 0x40
 8003094:	4a29      	ldr	r2, [pc, #164]	@ (800313c <HAL_SD_MspInit+0x210>)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800309a:	4b2a      	ldr	r3, [pc, #168]	@ (8003144 <HAL_SD_MspInit+0x218>)
 800309c:	4a2a      	ldr	r2, [pc, #168]	@ (8003148 <HAL_SD_MspInit+0x21c>)
 800309e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80030a0:	4b28      	ldr	r3, [pc, #160]	@ (8003144 <HAL_SD_MspInit+0x218>)
 80030a2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80030a6:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030a8:	4b26      	ldr	r3, [pc, #152]	@ (8003144 <HAL_SD_MspInit+0x218>)
 80030aa:	2240      	movs	r2, #64	@ 0x40
 80030ac:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030ae:	4b25      	ldr	r3, [pc, #148]	@ (8003144 <HAL_SD_MspInit+0x218>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030b4:	4b23      	ldr	r3, [pc, #140]	@ (8003144 <HAL_SD_MspInit+0x218>)
 80030b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030ba:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030bc:	4b21      	ldr	r3, [pc, #132]	@ (8003144 <HAL_SD_MspInit+0x218>)
 80030be:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80030c2:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80030c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003144 <HAL_SD_MspInit+0x218>)
 80030c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80030ca:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80030cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003144 <HAL_SD_MspInit+0x218>)
 80030ce:	2220      	movs	r2, #32
 80030d0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030d2:	4b1c      	ldr	r3, [pc, #112]	@ (8003144 <HAL_SD_MspInit+0x218>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80030d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003144 <HAL_SD_MspInit+0x218>)
 80030da:	2204      	movs	r2, #4
 80030dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80030de:	4b19      	ldr	r3, [pc, #100]	@ (8003144 <HAL_SD_MspInit+0x218>)
 80030e0:	2203      	movs	r2, #3
 80030e2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80030e4:	4b17      	ldr	r3, [pc, #92]	@ (8003144 <HAL_SD_MspInit+0x218>)
 80030e6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80030ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80030ec:	4b15      	ldr	r3, [pc, #84]	@ (8003144 <HAL_SD_MspInit+0x218>)
 80030ee:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80030f2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80030f4:	4813      	ldr	r0, [pc, #76]	@ (8003144 <HAL_SD_MspInit+0x218>)
 80030f6:	f000 ff05 	bl	8003f04 <HAL_DMA_Init>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <HAL_SD_MspInit+0x1d8>
    {
      Error_Handler();
 8003100:	f7ff fdc0 	bl	8002c84 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a0f      	ldr	r2, [pc, #60]	@ (8003144 <HAL_SD_MspInit+0x218>)
 8003108:	63da      	str	r2, [r3, #60]	@ 0x3c
 800310a:	4a0e      	ldr	r2, [pc, #56]	@ (8003144 <HAL_SD_MspInit+0x218>)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 2, 2);
 8003110:	2202      	movs	r2, #2
 8003112:	2102      	movs	r1, #2
 8003114:	2031      	movs	r0, #49	@ 0x31
 8003116:	f000 febe 	bl	8003e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800311a:	2031      	movs	r0, #49	@ 0x31
 800311c:	f000 fed7 	bl	8003ece <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8003120:	bf00      	nop
 8003122:	3730      	adds	r7, #48	@ 0x30
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40012c00 	.word	0x40012c00
 800312c:	40023800 	.word	0x40023800
 8003130:	40020000 	.word	0x40020000
 8003134:	40020400 	.word	0x40020400
 8003138:	40020800 	.word	0x40020800
 800313c:	200004d8 	.word	0x200004d8
 8003140:	40026458 	.word	0x40026458
 8003144:	20000538 	.word	0x20000538
 8003148:	400264a0 	.word	0x400264a0

0800314c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a1f      	ldr	r2, [pc, #124]	@ (80031d8 <HAL_TIM_PWM_MspInit+0x8c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d10e      	bne.n	800317c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	4b1e      	ldr	r3, [pc, #120]	@ (80031dc <HAL_TIM_PWM_MspInit+0x90>)
 8003164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003166:	4a1d      	ldr	r2, [pc, #116]	@ (80031dc <HAL_TIM_PWM_MspInit+0x90>)
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	6453      	str	r3, [r2, #68]	@ 0x44
 800316e:	4b1b      	ldr	r3, [pc, #108]	@ (80031dc <HAL_TIM_PWM_MspInit+0x90>)
 8003170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	617b      	str	r3, [r7, #20]
 8003178:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800317a:	e026      	b.n	80031ca <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003184:	d10e      	bne.n	80031a4 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	4b14      	ldr	r3, [pc, #80]	@ (80031dc <HAL_TIM_PWM_MspInit+0x90>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318e:	4a13      	ldr	r2, [pc, #76]	@ (80031dc <HAL_TIM_PWM_MspInit+0x90>)
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	6413      	str	r3, [r2, #64]	@ 0x40
 8003196:	4b11      	ldr	r3, [pc, #68]	@ (80031dc <HAL_TIM_PWM_MspInit+0x90>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	693b      	ldr	r3, [r7, #16]
}
 80031a2:	e012      	b.n	80031ca <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a0d      	ldr	r2, [pc, #52]	@ (80031e0 <HAL_TIM_PWM_MspInit+0x94>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d10d      	bne.n	80031ca <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	4b0a      	ldr	r3, [pc, #40]	@ (80031dc <HAL_TIM_PWM_MspInit+0x90>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b6:	4a09      	ldr	r2, [pc, #36]	@ (80031dc <HAL_TIM_PWM_MspInit+0x90>)
 80031b8:	f043 0302 	orr.w	r3, r3, #2
 80031bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80031be:	4b07      	ldr	r3, [pc, #28]	@ (80031dc <HAL_TIM_PWM_MspInit+0x90>)
 80031c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]
}
 80031ca:	bf00      	nop
 80031cc:	371c      	adds	r7, #28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	40010000 	.word	0x40010000
 80031dc:	40023800 	.word	0x40023800
 80031e0:	40000400 	.word	0x40000400

080031e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08a      	sub	sp, #40	@ 0x28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ec:	f107 0314 	add.w	r3, r7, #20
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	605a      	str	r2, [r3, #4]
 80031f6:	609a      	str	r2, [r3, #8]
 80031f8:	60da      	str	r2, [r3, #12]
 80031fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a36      	ldr	r2, [pc, #216]	@ (80032dc <HAL_TIM_MspPostInit+0xf8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d11f      	bne.n	8003246 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	4b35      	ldr	r3, [pc, #212]	@ (80032e0 <HAL_TIM_MspPostInit+0xfc>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320e:	4a34      	ldr	r2, [pc, #208]	@ (80032e0 <HAL_TIM_MspPostInit+0xfc>)
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	6313      	str	r3, [r2, #48]	@ 0x30
 8003216:	4b32      	ldr	r3, [pc, #200]	@ (80032e0 <HAL_TIM_MspPostInit+0xfc>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003222:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003228:	2302      	movs	r3, #2
 800322a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322c:	2300      	movs	r3, #0
 800322e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003230:	2300      	movs	r3, #0
 8003232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003234:	2301      	movs	r3, #1
 8003236:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003238:	f107 0314 	add.w	r3, r7, #20
 800323c:	4619      	mov	r1, r3
 800323e:	4829      	ldr	r0, [pc, #164]	@ (80032e4 <HAL_TIM_MspPostInit+0x100>)
 8003240:	f001 fa6e 	bl	8004720 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003244:	e046      	b.n	80032d4 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM2)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800324e:	d11e      	bne.n	800328e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003250:	2300      	movs	r3, #0
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	4b22      	ldr	r3, [pc, #136]	@ (80032e0 <HAL_TIM_MspPostInit+0xfc>)
 8003256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003258:	4a21      	ldr	r2, [pc, #132]	@ (80032e0 <HAL_TIM_MspPostInit+0xfc>)
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003260:	4b1f      	ldr	r3, [pc, #124]	@ (80032e0 <HAL_TIM_MspPostInit+0xfc>)
 8003262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800326c:	2320      	movs	r3, #32
 800326e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003270:	2302      	movs	r3, #2
 8003272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003274:	2300      	movs	r3, #0
 8003276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003278:	2300      	movs	r3, #0
 800327a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800327c:	2301      	movs	r3, #1
 800327e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003280:	f107 0314 	add.w	r3, r7, #20
 8003284:	4619      	mov	r1, r3
 8003286:	4817      	ldr	r0, [pc, #92]	@ (80032e4 <HAL_TIM_MspPostInit+0x100>)
 8003288:	f001 fa4a 	bl	8004720 <HAL_GPIO_Init>
}
 800328c:	e022      	b.n	80032d4 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a15      	ldr	r2, [pc, #84]	@ (80032e8 <HAL_TIM_MspPostInit+0x104>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d11d      	bne.n	80032d4 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003298:	2300      	movs	r3, #0
 800329a:	60bb      	str	r3, [r7, #8]
 800329c:	4b10      	ldr	r3, [pc, #64]	@ (80032e0 <HAL_TIM_MspPostInit+0xfc>)
 800329e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a0:	4a0f      	ldr	r2, [pc, #60]	@ (80032e0 <HAL_TIM_MspPostInit+0xfc>)
 80032a2:	f043 0304 	orr.w	r3, r3, #4
 80032a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80032a8:	4b0d      	ldr	r3, [pc, #52]	@ (80032e0 <HAL_TIM_MspPostInit+0xfc>)
 80032aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	60bb      	str	r3, [r7, #8]
 80032b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80032b4:	2340      	movs	r3, #64	@ 0x40
 80032b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b8:	2302      	movs	r3, #2
 80032ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c0:	2300      	movs	r3, #0
 80032c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80032c4:	2302      	movs	r3, #2
 80032c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032c8:	f107 0314 	add.w	r3, r7, #20
 80032cc:	4619      	mov	r1, r3
 80032ce:	4807      	ldr	r0, [pc, #28]	@ (80032ec <HAL_TIM_MspPostInit+0x108>)
 80032d0:	f001 fa26 	bl	8004720 <HAL_GPIO_Init>
}
 80032d4:	bf00      	nop
 80032d6:	3728      	adds	r7, #40	@ 0x28
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40010000 	.word	0x40010000
 80032e0:	40023800 	.word	0x40023800
 80032e4:	40020000 	.word	0x40020000
 80032e8:	40000400 	.word	0x40000400
 80032ec:	40020800 	.word	0x40020800

080032f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08c      	sub	sp, #48	@ 0x30
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f8:	f107 031c 	add.w	r3, r7, #28
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	605a      	str	r2, [r3, #4]
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	60da      	str	r2, [r3, #12]
 8003306:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a3a      	ldr	r2, [pc, #232]	@ (80033f8 <HAL_UART_MspInit+0x108>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d135      	bne.n	800337e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	61bb      	str	r3, [r7, #24]
 8003316:	4b39      	ldr	r3, [pc, #228]	@ (80033fc <HAL_UART_MspInit+0x10c>)
 8003318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331a:	4a38      	ldr	r2, [pc, #224]	@ (80033fc <HAL_UART_MspInit+0x10c>)
 800331c:	f043 0310 	orr.w	r3, r3, #16
 8003320:	6453      	str	r3, [r2, #68]	@ 0x44
 8003322:	4b36      	ldr	r3, [pc, #216]	@ (80033fc <HAL_UART_MspInit+0x10c>)
 8003324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003326:	f003 0310 	and.w	r3, r3, #16
 800332a:	61bb      	str	r3, [r7, #24]
 800332c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	4b32      	ldr	r3, [pc, #200]	@ (80033fc <HAL_UART_MspInit+0x10c>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003336:	4a31      	ldr	r2, [pc, #196]	@ (80033fc <HAL_UART_MspInit+0x10c>)
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	6313      	str	r3, [r2, #48]	@ 0x30
 800333e:	4b2f      	ldr	r3, [pc, #188]	@ (80033fc <HAL_UART_MspInit+0x10c>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800334a:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 800334e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003350:	2302      	movs	r3, #2
 8003352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003354:	2300      	movs	r3, #0
 8003356:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003358:	2303      	movs	r3, #3
 800335a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800335c:	2307      	movs	r3, #7
 800335e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003360:	f107 031c 	add.w	r3, r7, #28
 8003364:	4619      	mov	r1, r3
 8003366:	4826      	ldr	r0, [pc, #152]	@ (8003400 <HAL_UART_MspInit+0x110>)
 8003368:	f001 f9da 	bl	8004720 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 1);
 800336c:	2201      	movs	r2, #1
 800336e:	2101      	movs	r1, #1
 8003370:	2025      	movs	r0, #37	@ 0x25
 8003372:	f000 fd90 	bl	8003e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003376:	2025      	movs	r0, #37	@ 0x25
 8003378:	f000 fda9 	bl	8003ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800337c:	e038      	b.n	80033f0 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a20      	ldr	r2, [pc, #128]	@ (8003404 <HAL_UART_MspInit+0x114>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d133      	bne.n	80033f0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003388:	2300      	movs	r3, #0
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	4b1b      	ldr	r3, [pc, #108]	@ (80033fc <HAL_UART_MspInit+0x10c>)
 800338e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003390:	4a1a      	ldr	r2, [pc, #104]	@ (80033fc <HAL_UART_MspInit+0x10c>)
 8003392:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003396:	6413      	str	r3, [r2, #64]	@ 0x40
 8003398:	4b18      	ldr	r3, [pc, #96]	@ (80033fc <HAL_UART_MspInit+0x10c>)
 800339a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a0:	613b      	str	r3, [r7, #16]
 80033a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	4b14      	ldr	r3, [pc, #80]	@ (80033fc <HAL_UART_MspInit+0x10c>)
 80033aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ac:	4a13      	ldr	r2, [pc, #76]	@ (80033fc <HAL_UART_MspInit+0x10c>)
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80033b4:	4b11      	ldr	r3, [pc, #68]	@ (80033fc <HAL_UART_MspInit+0x10c>)
 80033b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80033c0:	230c      	movs	r3, #12
 80033c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c4:	2302      	movs	r3, #2
 80033c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033cc:	2303      	movs	r3, #3
 80033ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033d0:	2307      	movs	r3, #7
 80033d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d4:	f107 031c 	add.w	r3, r7, #28
 80033d8:	4619      	mov	r1, r3
 80033da:	4809      	ldr	r0, [pc, #36]	@ (8003400 <HAL_UART_MspInit+0x110>)
 80033dc:	f001 f9a0 	bl	8004720 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033e0:	2200      	movs	r2, #0
 80033e2:	2100      	movs	r1, #0
 80033e4:	2026      	movs	r0, #38	@ 0x26
 80033e6:	f000 fd56 	bl	8003e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033ea:	2026      	movs	r0, #38	@ 0x26
 80033ec:	f000 fd6f 	bl	8003ece <HAL_NVIC_EnableIRQ>
}
 80033f0:	bf00      	nop
 80033f2:	3730      	adds	r7, #48	@ 0x30
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40011000 	.word	0x40011000
 80033fc:	40023800 	.word	0x40023800
 8003400:	40020000 	.word	0x40020000
 8003404:	40004400 	.word	0x40004400

08003408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800340c:	bf00      	nop
 800340e:	e7fd      	b.n	800340c <NMI_Handler+0x4>

08003410 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003414:	bf00      	nop
 8003416:	e7fd      	b.n	8003414 <HardFault_Handler+0x4>

08003418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800341c:	bf00      	nop
 800341e:	e7fd      	b.n	800341c <MemManage_Handler+0x4>

08003420 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003424:	bf00      	nop
 8003426:	e7fd      	b.n	8003424 <BusFault_Handler+0x4>

08003428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800342c:	bf00      	nop
 800342e:	e7fd      	b.n	800342c <UsageFault_Handler+0x4>

08003430 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003434:	bf00      	nop
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800343e:	b480      	push	{r7}
 8003440:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003442:	bf00      	nop
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003450:	bf00      	nop
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800345e:	f000 f989 	bl	8003774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800346c:	4802      	ldr	r0, [pc, #8]	@ (8003478 <USART1_IRQHandler+0x10>)
 800346e:	f005 f99f 	bl	80087b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003472:	bf00      	nop
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000670 	.word	0x20000670

0800347c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003480:	4802      	ldr	r0, [pc, #8]	@ (800348c <USART2_IRQHandler+0x10>)
 8003482:	f005 f995 	bl	80087b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	200006b8 	.word	0x200006b8

08003490 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003494:	4802      	ldr	r0, [pc, #8]	@ (80034a0 <SDIO_IRQHandler+0x10>)
 8003496:	f003 fc69 	bl	8006d6c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800349a:	bf00      	nop
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20000454 	.word	0x20000454

080034a4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80034a8:	4802      	ldr	r0, [pc, #8]	@ (80034b4 <DMA2_Stream3_IRQHandler+0x10>)
 80034aa:	f000 fec3 	bl	8004234 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80034ae:	bf00      	nop
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	200004d8 	.word	0x200004d8

080034b8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80034bc:	4802      	ldr	r0, [pc, #8]	@ (80034c8 <DMA2_Stream6_IRQHandler+0x10>)
 80034be:	f000 feb9 	bl	8004234 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20000538 	.word	0x20000538

080034cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  return 1;
 80034d0:	2301      	movs	r3, #1
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <_kill>:

int _kill(int pid, int sig)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80034e6:	f008 ff5b 	bl	800c3a0 <__errno>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2216      	movs	r2, #22
 80034ee:	601a      	str	r2, [r3, #0]
  return -1;
 80034f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <_exit>:

void _exit (int status)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003504:	f04f 31ff 	mov.w	r1, #4294967295
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7ff ffe7 	bl	80034dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800350e:	bf00      	nop
 8003510:	e7fd      	b.n	800350e <_exit+0x12>

08003512 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b086      	sub	sp, #24
 8003516:	af00      	add	r7, sp, #0
 8003518:	60f8      	str	r0, [r7, #12]
 800351a:	60b9      	str	r1, [r7, #8]
 800351c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
 8003522:	e00a      	b.n	800353a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003524:	f3af 8000 	nop.w
 8003528:	4601      	mov	r1, r0
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	1c5a      	adds	r2, r3, #1
 800352e:	60ba      	str	r2, [r7, #8]
 8003530:	b2ca      	uxtb	r2, r1
 8003532:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	3301      	adds	r3, #1
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	429a      	cmp	r2, r3
 8003540:	dbf0      	blt.n	8003524 <_read+0x12>
  }

  return len;
 8003542:	687b      	ldr	r3, [r7, #4]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003558:	2300      	movs	r3, #0
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	e009      	b.n	8003572 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	1c5a      	adds	r2, r3, #1
 8003562:	60ba      	str	r2, [r7, #8]
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	3301      	adds	r3, #1
 8003570:	617b      	str	r3, [r7, #20]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	429a      	cmp	r2, r3
 8003578:	dbf1      	blt.n	800355e <_write+0x12>
  }
  return len;
 800357a:	687b      	ldr	r3, [r7, #4]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <_close>:

int _close(int file)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800358c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003590:	4618      	mov	r0, r3
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035ac:	605a      	str	r2, [r3, #4]
  return 0;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <_isatty>:

int _isatty(int file)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035c4:	2301      	movs	r3, #1
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b085      	sub	sp, #20
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035f4:	4a14      	ldr	r2, [pc, #80]	@ (8003648 <_sbrk+0x5c>)
 80035f6:	4b15      	ldr	r3, [pc, #84]	@ (800364c <_sbrk+0x60>)
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003600:	4b13      	ldr	r3, [pc, #76]	@ (8003650 <_sbrk+0x64>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d102      	bne.n	800360e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003608:	4b11      	ldr	r3, [pc, #68]	@ (8003650 <_sbrk+0x64>)
 800360a:	4a12      	ldr	r2, [pc, #72]	@ (8003654 <_sbrk+0x68>)
 800360c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800360e:	4b10      	ldr	r3, [pc, #64]	@ (8003650 <_sbrk+0x64>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4413      	add	r3, r2
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	429a      	cmp	r2, r3
 800361a:	d207      	bcs.n	800362c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800361c:	f008 fec0 	bl	800c3a0 <__errno>
 8003620:	4603      	mov	r3, r0
 8003622:	220c      	movs	r2, #12
 8003624:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003626:	f04f 33ff 	mov.w	r3, #4294967295
 800362a:	e009      	b.n	8003640 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800362c:	4b08      	ldr	r3, [pc, #32]	@ (8003650 <_sbrk+0x64>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003632:	4b07      	ldr	r3, [pc, #28]	@ (8003650 <_sbrk+0x64>)
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4413      	add	r3, r2
 800363a:	4a05      	ldr	r2, [pc, #20]	@ (8003650 <_sbrk+0x64>)
 800363c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800363e:	68fb      	ldr	r3, [r7, #12]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	20020000 	.word	0x20020000
 800364c:	00000400 	.word	0x00000400
 8003650:	200009e8 	.word	0x200009e8
 8003654:	20000b58 	.word	0x20000b58

08003658 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800365c:	4b06      	ldr	r3, [pc, #24]	@ (8003678 <SystemInit+0x20>)
 800365e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003662:	4a05      	ldr	r2, [pc, #20]	@ (8003678 <SystemInit+0x20>)
 8003664:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003668:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800366c:	bf00      	nop
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	e000ed00 	.word	0xe000ed00

0800367c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800367c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003680:	f7ff ffea 	bl	8003658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003684:	480c      	ldr	r0, [pc, #48]	@ (80036b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003686:	490d      	ldr	r1, [pc, #52]	@ (80036bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003688:	4a0d      	ldr	r2, [pc, #52]	@ (80036c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800368a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800368c:	e002      	b.n	8003694 <LoopCopyDataInit>

0800368e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800368e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003692:	3304      	adds	r3, #4

08003694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003698:	d3f9      	bcc.n	800368e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800369a:	4a0a      	ldr	r2, [pc, #40]	@ (80036c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800369c:	4c0a      	ldr	r4, [pc, #40]	@ (80036c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800369e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036a0:	e001      	b.n	80036a6 <LoopFillZerobss>

080036a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036a4:	3204      	adds	r2, #4

080036a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036a8:	d3fb      	bcc.n	80036a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036aa:	f008 fe7f 	bl	800c3ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036ae:	f7fe fee5 	bl	800247c <main>
  bx  lr    
 80036b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80036b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036bc:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80036c0:	080109b0 	.word	0x080109b0
  ldr r2, =_sbss
 80036c4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80036c8:	20000b58 	.word	0x20000b58

080036cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036cc:	e7fe      	b.n	80036cc <ADC_IRQHandler>
	...

080036d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003710 <HAL_Init+0x40>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003710 <HAL_Init+0x40>)
 80036da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003710 <HAL_Init+0x40>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003710 <HAL_Init+0x40>)
 80036e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036ec:	4b08      	ldr	r3, [pc, #32]	@ (8003710 <HAL_Init+0x40>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a07      	ldr	r2, [pc, #28]	@ (8003710 <HAL_Init+0x40>)
 80036f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036f8:	2003      	movs	r0, #3
 80036fa:	f000 fbc1 	bl	8003e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036fe:	2000      	movs	r0, #0
 8003700:	f000 f808 	bl	8003714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003704:	f7ff fac4 	bl	8002c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40023c00 	.word	0x40023c00

08003714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800371c:	4b12      	ldr	r3, [pc, #72]	@ (8003768 <HAL_InitTick+0x54>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	4b12      	ldr	r3, [pc, #72]	@ (800376c <HAL_InitTick+0x58>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	4619      	mov	r1, r3
 8003726:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800372a:	fbb3 f3f1 	udiv	r3, r3, r1
 800372e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003732:	4618      	mov	r0, r3
 8003734:	f000 fbd9 	bl	8003eea <HAL_SYSTICK_Config>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e00e      	b.n	8003760 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b0f      	cmp	r3, #15
 8003746:	d80a      	bhi.n	800375e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003748:	2200      	movs	r2, #0
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	f04f 30ff 	mov.w	r0, #4294967295
 8003750:	f000 fba1 	bl	8003e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003754:	4a06      	ldr	r2, [pc, #24]	@ (8003770 <HAL_InitTick+0x5c>)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	e000      	b.n	8003760 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
}
 8003760:	4618      	mov	r0, r3
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	20000004 	.word	0x20000004
 800376c:	2000000c 	.word	0x2000000c
 8003770:	20000008 	.word	0x20000008

08003774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003778:	4b06      	ldr	r3, [pc, #24]	@ (8003794 <HAL_IncTick+0x20>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	4b06      	ldr	r3, [pc, #24]	@ (8003798 <HAL_IncTick+0x24>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4413      	add	r3, r2
 8003784:	4a04      	ldr	r2, [pc, #16]	@ (8003798 <HAL_IncTick+0x24>)
 8003786:	6013      	str	r3, [r2, #0]
}
 8003788:	bf00      	nop
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	2000000c 	.word	0x2000000c
 8003798:	200009ec 	.word	0x200009ec

0800379c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  return uwTick;
 80037a0:	4b03      	ldr	r3, [pc, #12]	@ (80037b0 <HAL_GetTick+0x14>)
 80037a2:	681b      	ldr	r3, [r3, #0]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	200009ec 	.word	0x200009ec

080037b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037bc:	f7ff ffee 	bl	800379c <HAL_GetTick>
 80037c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037cc:	d005      	beq.n	80037da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037ce:	4b0a      	ldr	r3, [pc, #40]	@ (80037f8 <HAL_Delay+0x44>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4413      	add	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037da:	bf00      	nop
 80037dc:	f7ff ffde 	bl	800379c <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d8f7      	bhi.n	80037dc <HAL_Delay+0x28>
  {
  }
}
 80037ec:	bf00      	nop
 80037ee:	bf00      	nop
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	2000000c 	.word	0x2000000c

080037fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e033      	b.n	800387a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003816:	2b00      	cmp	r3, #0
 8003818:	d109      	bne.n	800382e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff fa60 	bl	8002ce0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b00      	cmp	r3, #0
 8003838:	d118      	bne.n	800386c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003842:	f023 0302 	bic.w	r3, r3, #2
 8003846:	f043 0202 	orr.w	r2, r3, #2
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f94a 	bl	8003ae8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385e:	f023 0303 	bic.w	r3, r3, #3
 8003862:	f043 0201 	orr.w	r2, r3, #1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	641a      	str	r2, [r3, #64]	@ 0x40
 800386a:	e001      	b.n	8003870 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003878:	7bfb      	ldrb	r3, [r7, #15]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800388e:	2300      	movs	r3, #0
 8003890:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003898:	2b01      	cmp	r3, #1
 800389a:	d101      	bne.n	80038a0 <HAL_ADC_ConfigChannel+0x1c>
 800389c:	2302      	movs	r3, #2
 800389e:	e113      	b.n	8003ac8 <HAL_ADC_ConfigChannel+0x244>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b09      	cmp	r3, #9
 80038ae:	d925      	bls.n	80038fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68d9      	ldr	r1, [r3, #12]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	461a      	mov	r2, r3
 80038be:	4613      	mov	r3, r2
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	4413      	add	r3, r2
 80038c4:	3b1e      	subs	r3, #30
 80038c6:	2207      	movs	r2, #7
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	43da      	mvns	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	400a      	ands	r2, r1
 80038d4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68d9      	ldr	r1, [r3, #12]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	4618      	mov	r0, r3
 80038e8:	4603      	mov	r3, r0
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	4403      	add	r3, r0
 80038ee:	3b1e      	subs	r3, #30
 80038f0:	409a      	lsls	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	60da      	str	r2, [r3, #12]
 80038fa:	e022      	b.n	8003942 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6919      	ldr	r1, [r3, #16]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	b29b      	uxth	r3, r3
 8003908:	461a      	mov	r2, r3
 800390a:	4613      	mov	r3, r2
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	4413      	add	r3, r2
 8003910:	2207      	movs	r2, #7
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	43da      	mvns	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	400a      	ands	r2, r1
 800391e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6919      	ldr	r1, [r3, #16]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	b29b      	uxth	r3, r3
 8003930:	4618      	mov	r0, r3
 8003932:	4603      	mov	r3, r0
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	4403      	add	r3, r0
 8003938:	409a      	lsls	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b06      	cmp	r3, #6
 8003948:	d824      	bhi.n	8003994 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	4613      	mov	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	3b05      	subs	r3, #5
 800395c:	221f      	movs	r2, #31
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	43da      	mvns	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	400a      	ands	r2, r1
 800396a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	b29b      	uxth	r3, r3
 8003978:	4618      	mov	r0, r3
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	3b05      	subs	r3, #5
 8003986:	fa00 f203 	lsl.w	r2, r0, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	635a      	str	r2, [r3, #52]	@ 0x34
 8003992:	e04c      	b.n	8003a2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2b0c      	cmp	r3, #12
 800399a:	d824      	bhi.n	80039e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	4613      	mov	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	3b23      	subs	r3, #35	@ 0x23
 80039ae:	221f      	movs	r2, #31
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	43da      	mvns	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	400a      	ands	r2, r1
 80039bc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	4618      	mov	r0, r3
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	4613      	mov	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	3b23      	subs	r3, #35	@ 0x23
 80039d8:	fa00 f203 	lsl.w	r2, r0, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80039e4:	e023      	b.n	8003a2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	4613      	mov	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	3b41      	subs	r3, #65	@ 0x41
 80039f8:	221f      	movs	r2, #31
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43da      	mvns	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	400a      	ands	r2, r1
 8003a06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	4618      	mov	r0, r3
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	3b41      	subs	r3, #65	@ 0x41
 8003a22:	fa00 f203 	lsl.w	r2, r0, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a2e:	4b29      	ldr	r3, [pc, #164]	@ (8003ad4 <HAL_ADC_ConfigChannel+0x250>)
 8003a30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a28      	ldr	r2, [pc, #160]	@ (8003ad8 <HAL_ADC_ConfigChannel+0x254>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d10f      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x1d8>
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b12      	cmp	r3, #18
 8003a42:	d10b      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a1d      	ldr	r2, [pc, #116]	@ (8003ad8 <HAL_ADC_ConfigChannel+0x254>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d12b      	bne.n	8003abe <HAL_ADC_ConfigChannel+0x23a>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8003adc <HAL_ADC_ConfigChannel+0x258>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d003      	beq.n	8003a78 <HAL_ADC_ConfigChannel+0x1f4>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b11      	cmp	r3, #17
 8003a76:	d122      	bne.n	8003abe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a11      	ldr	r2, [pc, #68]	@ (8003adc <HAL_ADC_ConfigChannel+0x258>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d111      	bne.n	8003abe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a9a:	4b11      	ldr	r3, [pc, #68]	@ (8003ae0 <HAL_ADC_ConfigChannel+0x25c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a11      	ldr	r2, [pc, #68]	@ (8003ae4 <HAL_ADC_ConfigChannel+0x260>)
 8003aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa4:	0c9a      	lsrs	r2, r3, #18
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003ab0:	e002      	b.n	8003ab8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f9      	bne.n	8003ab2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3714      	adds	r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	40012300 	.word	0x40012300
 8003ad8:	40012000 	.word	0x40012000
 8003adc:	10000012 	.word	0x10000012
 8003ae0:	20000004 	.word	0x20000004
 8003ae4:	431bde83 	.word	0x431bde83

08003ae8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003af0:	4b79      	ldr	r3, [pc, #484]	@ (8003cd8 <ADC_Init+0x1f0>)
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6859      	ldr	r1, [r3, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	021a      	lsls	r2, r3, #8
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003b40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6859      	ldr	r1, [r3, #4]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6899      	ldr	r1, [r3, #8]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b7a:	4a58      	ldr	r2, [pc, #352]	@ (8003cdc <ADC_Init+0x1f4>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d022      	beq.n	8003bc6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6899      	ldr	r1, [r3, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003bb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6899      	ldr	r1, [r3, #8]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	609a      	str	r2, [r3, #8]
 8003bc4:	e00f      	b.n	8003be6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003bd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003be4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0202 	bic.w	r2, r2, #2
 8003bf4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6899      	ldr	r1, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	7e1b      	ldrb	r3, [r3, #24]
 8003c00:	005a      	lsls	r2, r3, #1
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d01b      	beq.n	8003c4c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c22:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003c32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6859      	ldr	r1, [r3, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	035a      	lsls	r2, r3, #13
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]
 8003c4a:	e007      	b.n	8003c5c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c5a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003c6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	3b01      	subs	r3, #1
 8003c78:	051a      	lsls	r2, r3, #20
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003c90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6899      	ldr	r1, [r3, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003c9e:	025a      	lsls	r2, r3, #9
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6899      	ldr	r1, [r3, #8]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	029a      	lsls	r2, r3, #10
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	609a      	str	r2, [r3, #8]
}
 8003ccc:	bf00      	nop
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	40012300 	.word	0x40012300
 8003cdc:	0f000001 	.word	0x0f000001

08003ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f003 0307 	and.w	r3, r3, #7
 8003cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8003d24 <__NVIC_SetPriorityGrouping+0x44>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d12:	4a04      	ldr	r2, [pc, #16]	@ (8003d24 <__NVIC_SetPriorityGrouping+0x44>)
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	60d3      	str	r3, [r2, #12]
}
 8003d18:	bf00      	nop
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	e000ed00 	.word	0xe000ed00

08003d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d2c:	4b04      	ldr	r3, [pc, #16]	@ (8003d40 <__NVIC_GetPriorityGrouping+0x18>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	0a1b      	lsrs	r3, r3, #8
 8003d32:	f003 0307 	and.w	r3, r3, #7
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	e000ed00 	.word	0xe000ed00

08003d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	db0b      	blt.n	8003d6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d56:	79fb      	ldrb	r3, [r7, #7]
 8003d58:	f003 021f 	and.w	r2, r3, #31
 8003d5c:	4907      	ldr	r1, [pc, #28]	@ (8003d7c <__NVIC_EnableIRQ+0x38>)
 8003d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	2001      	movs	r0, #1
 8003d66:	fa00 f202 	lsl.w	r2, r0, r2
 8003d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	e000e100 	.word	0xe000e100

08003d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4603      	mov	r3, r0
 8003d88:	6039      	str	r1, [r7, #0]
 8003d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	db0a      	blt.n	8003daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	490c      	ldr	r1, [pc, #48]	@ (8003dcc <__NVIC_SetPriority+0x4c>)
 8003d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9e:	0112      	lsls	r2, r2, #4
 8003da0:	b2d2      	uxtb	r2, r2
 8003da2:	440b      	add	r3, r1
 8003da4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003da8:	e00a      	b.n	8003dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	4908      	ldr	r1, [pc, #32]	@ (8003dd0 <__NVIC_SetPriority+0x50>)
 8003db0:	79fb      	ldrb	r3, [r7, #7]
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	3b04      	subs	r3, #4
 8003db8:	0112      	lsls	r2, r2, #4
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	761a      	strb	r2, [r3, #24]
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	e000e100 	.word	0xe000e100
 8003dd0:	e000ed00 	.word	0xe000ed00

08003dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b089      	sub	sp, #36	@ 0x24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	f1c3 0307 	rsb	r3, r3, #7
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	bf28      	it	cs
 8003df2:	2304      	movcs	r3, #4
 8003df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	2b06      	cmp	r3, #6
 8003dfc:	d902      	bls.n	8003e04 <NVIC_EncodePriority+0x30>
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	3b03      	subs	r3, #3
 8003e02:	e000      	b.n	8003e06 <NVIC_EncodePriority+0x32>
 8003e04:	2300      	movs	r3, #0
 8003e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e08:	f04f 32ff 	mov.w	r2, #4294967295
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	43da      	mvns	r2, r3
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	401a      	ands	r2, r3
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	fa01 f303 	lsl.w	r3, r1, r3
 8003e26:	43d9      	mvns	r1, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e2c:	4313      	orrs	r3, r2
         );
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3724      	adds	r7, #36	@ 0x24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
	...

08003e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e4c:	d301      	bcc.n	8003e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e00f      	b.n	8003e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e52:	4a0a      	ldr	r2, [pc, #40]	@ (8003e7c <SysTick_Config+0x40>)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e5a:	210f      	movs	r1, #15
 8003e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e60:	f7ff ff8e 	bl	8003d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e64:	4b05      	ldr	r3, [pc, #20]	@ (8003e7c <SysTick_Config+0x40>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e6a:	4b04      	ldr	r3, [pc, #16]	@ (8003e7c <SysTick_Config+0x40>)
 8003e6c:	2207      	movs	r2, #7
 8003e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	e000e010 	.word	0xe000e010

08003e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7ff ff29 	bl	8003ce0 <__NVIC_SetPriorityGrouping>
}
 8003e8e:	bf00      	nop
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b086      	sub	sp, #24
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	607a      	str	r2, [r7, #4]
 8003ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ea8:	f7ff ff3e 	bl	8003d28 <__NVIC_GetPriorityGrouping>
 8003eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	68b9      	ldr	r1, [r7, #8]
 8003eb2:	6978      	ldr	r0, [r7, #20]
 8003eb4:	f7ff ff8e 	bl	8003dd4 <NVIC_EncodePriority>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff ff5d 	bl	8003d80 <__NVIC_SetPriority>
}
 8003ec6:	bf00      	nop
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b082      	sub	sp, #8
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff ff31 	bl	8003d44 <__NVIC_EnableIRQ>
}
 8003ee2:	bf00      	nop
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b082      	sub	sp, #8
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7ff ffa2 	bl	8003e3c <SysTick_Config>
 8003ef8:	4603      	mov	r3, r0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f10:	f7ff fc44 	bl	800379c <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e099      	b.n	8004054 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 0201 	bic.w	r2, r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f40:	e00f      	b.n	8003f62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f42:	f7ff fc2b 	bl	800379c <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b05      	cmp	r3, #5
 8003f4e:	d908      	bls.n	8003f62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2220      	movs	r2, #32
 8003f54:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2203      	movs	r2, #3
 8003f5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e078      	b.n	8004054 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1e8      	bne.n	8003f42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	4b38      	ldr	r3, [pc, #224]	@ (800405c <HAL_DMA_Init+0x158>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d107      	bne.n	8003fcc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f023 0307 	bic.w	r3, r3, #7
 8003fe2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d117      	bne.n	8004026 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00e      	beq.n	8004026 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 fb0d 	bl	8004628 <DMA_CheckFifoParam>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d008      	beq.n	8004026 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2240      	movs	r2, #64	@ 0x40
 8004018:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004022:	2301      	movs	r3, #1
 8004024:	e016      	b.n	8004054 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 fac4 	bl	80045bc <DMA_CalcBaseAndBitshift>
 8004034:	4603      	mov	r3, r0
 8004036:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800403c:	223f      	movs	r2, #63	@ 0x3f
 800403e:	409a      	lsls	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3718      	adds	r7, #24
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	f010803f 	.word	0xf010803f

08004060 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004076:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800407e:	2b01      	cmp	r3, #1
 8004080:	d101      	bne.n	8004086 <HAL_DMA_Start_IT+0x26>
 8004082:	2302      	movs	r3, #2
 8004084:	e040      	b.n	8004108 <HAL_DMA_Start_IT+0xa8>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b01      	cmp	r3, #1
 8004098:	d12f      	bne.n	80040fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2202      	movs	r2, #2
 800409e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	68b9      	ldr	r1, [r7, #8]
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 fa56 	bl	8004560 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b8:	223f      	movs	r2, #63	@ 0x3f
 80040ba:	409a      	lsls	r2, r3
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0216 	orr.w	r2, r2, #22
 80040ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d007      	beq.n	80040e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0208 	orr.w	r2, r2, #8
 80040e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	e005      	b.n	8004106 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004102:	2302      	movs	r3, #2
 8004104:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004106:	7dfb      	ldrb	r3, [r7, #23]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800411c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800411e:	f7ff fb3d 	bl	800379c <HAL_GetTick>
 8004122:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d008      	beq.n	8004142 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2280      	movs	r2, #128	@ 0x80
 8004134:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e052      	b.n	80041e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0216 	bic.w	r2, r2, #22
 8004150:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	695a      	ldr	r2, [r3, #20]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004160:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004166:	2b00      	cmp	r3, #0
 8004168:	d103      	bne.n	8004172 <HAL_DMA_Abort+0x62>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800416e:	2b00      	cmp	r3, #0
 8004170:	d007      	beq.n	8004182 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0208 	bic.w	r2, r2, #8
 8004180:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0201 	bic.w	r2, r2, #1
 8004190:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004192:	e013      	b.n	80041bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004194:	f7ff fb02 	bl	800379c <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b05      	cmp	r3, #5
 80041a0:	d90c      	bls.n	80041bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2220      	movs	r2, #32
 80041a6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2203      	movs	r2, #3
 80041ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e015      	b.n	80041e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1e4      	bne.n	8004194 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ce:	223f      	movs	r2, #63	@ 0x3f
 80041d0:	409a      	lsls	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d004      	beq.n	800420e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2280      	movs	r2, #128	@ 0x80
 8004208:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e00c      	b.n	8004228 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2205      	movs	r2, #5
 8004212:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0201 	bic.w	r2, r2, #1
 8004224:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004240:	4b8e      	ldr	r3, [pc, #568]	@ (800447c <HAL_DMA_IRQHandler+0x248>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a8e      	ldr	r2, [pc, #568]	@ (8004480 <HAL_DMA_IRQHandler+0x24c>)
 8004246:	fba2 2303 	umull	r2, r3, r2, r3
 800424a:	0a9b      	lsrs	r3, r3, #10
 800424c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004252:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800425e:	2208      	movs	r2, #8
 8004260:	409a      	lsls	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4013      	ands	r3, r2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d01a      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d013      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0204 	bic.w	r2, r2, #4
 8004286:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800428c:	2208      	movs	r2, #8
 800428e:	409a      	lsls	r2, r3
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004298:	f043 0201 	orr.w	r2, r3, #1
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042a4:	2201      	movs	r2, #1
 80042a6:	409a      	lsls	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	4013      	ands	r3, r2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d012      	beq.n	80042d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00b      	beq.n	80042d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c2:	2201      	movs	r2, #1
 80042c4:	409a      	lsls	r2, r3
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ce:	f043 0202 	orr.w	r2, r3, #2
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042da:	2204      	movs	r2, #4
 80042dc:	409a      	lsls	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4013      	ands	r3, r2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d012      	beq.n	800430c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00b      	beq.n	800430c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f8:	2204      	movs	r2, #4
 80042fa:	409a      	lsls	r2, r3
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004304:	f043 0204 	orr.w	r2, r3, #4
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004310:	2210      	movs	r2, #16
 8004312:	409a      	lsls	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4013      	ands	r3, r2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d043      	beq.n	80043a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0308 	and.w	r3, r3, #8
 8004326:	2b00      	cmp	r3, #0
 8004328:	d03c      	beq.n	80043a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800432e:	2210      	movs	r2, #16
 8004330:	409a      	lsls	r2, r3
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d018      	beq.n	8004376 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d108      	bne.n	8004364 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004356:	2b00      	cmp	r3, #0
 8004358:	d024      	beq.n	80043a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	4798      	blx	r3
 8004362:	e01f      	b.n	80043a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004368:	2b00      	cmp	r3, #0
 800436a:	d01b      	beq.n	80043a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	4798      	blx	r3
 8004374:	e016      	b.n	80043a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004380:	2b00      	cmp	r3, #0
 8004382:	d107      	bne.n	8004394 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 0208 	bic.w	r2, r2, #8
 8004392:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a8:	2220      	movs	r2, #32
 80043aa:	409a      	lsls	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4013      	ands	r3, r2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 808f 	beq.w	80044d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0310 	and.w	r3, r3, #16
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 8087 	beq.w	80044d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ca:	2220      	movs	r2, #32
 80043cc:	409a      	lsls	r2, r3
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b05      	cmp	r3, #5
 80043dc:	d136      	bne.n	800444c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0216 	bic.w	r2, r2, #22
 80043ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	695a      	ldr	r2, [r3, #20]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004402:	2b00      	cmp	r3, #0
 8004404:	d103      	bne.n	800440e <HAL_DMA_IRQHandler+0x1da>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800440a:	2b00      	cmp	r3, #0
 800440c:	d007      	beq.n	800441e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0208 	bic.w	r2, r2, #8
 800441c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004422:	223f      	movs	r2, #63	@ 0x3f
 8004424:	409a      	lsls	r2, r3
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800443e:	2b00      	cmp	r3, #0
 8004440:	d07e      	beq.n	8004540 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	4798      	blx	r3
        }
        return;
 800444a:	e079      	b.n	8004540 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d01d      	beq.n	8004496 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10d      	bne.n	8004484 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446c:	2b00      	cmp	r3, #0
 800446e:	d031      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	4798      	blx	r3
 8004478:	e02c      	b.n	80044d4 <HAL_DMA_IRQHandler+0x2a0>
 800447a:	bf00      	nop
 800447c:	20000004 	.word	0x20000004
 8004480:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004488:	2b00      	cmp	r3, #0
 800448a:	d023      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	4798      	blx	r3
 8004494:	e01e      	b.n	80044d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10f      	bne.n	80044c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 0210 	bic.w	r2, r2, #16
 80044b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d032      	beq.n	8004542 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d022      	beq.n	800452e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2205      	movs	r2, #5
 80044ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0201 	bic.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	3301      	adds	r3, #1
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	429a      	cmp	r2, r3
 800450a:	d307      	bcc.n	800451c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f2      	bne.n	8004500 <HAL_DMA_IRQHandler+0x2cc>
 800451a:	e000      	b.n	800451e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800451c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004532:	2b00      	cmp	r3, #0
 8004534:	d005      	beq.n	8004542 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	4798      	blx	r3
 800453e:	e000      	b.n	8004542 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004540:	bf00      	nop
    }
  }
}
 8004542:	3718      	adds	r7, #24
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004554:	4618      	mov	r0, r3
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800457c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	2b40      	cmp	r3, #64	@ 0x40
 800458c:	d108      	bne.n	80045a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800459e:	e007      	b.n	80045b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	60da      	str	r2, [r3, #12]
}
 80045b0:	bf00      	nop
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	3b10      	subs	r3, #16
 80045cc:	4a14      	ldr	r2, [pc, #80]	@ (8004620 <DMA_CalcBaseAndBitshift+0x64>)
 80045ce:	fba2 2303 	umull	r2, r3, r2, r3
 80045d2:	091b      	lsrs	r3, r3, #4
 80045d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045d6:	4a13      	ldr	r2, [pc, #76]	@ (8004624 <DMA_CalcBaseAndBitshift+0x68>)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4413      	add	r3, r2
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	461a      	mov	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	d909      	bls.n	80045fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80045f2:	f023 0303 	bic.w	r3, r3, #3
 80045f6:	1d1a      	adds	r2, r3, #4
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80045fc:	e007      	b.n	800460e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004606:	f023 0303 	bic.w	r3, r3, #3
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004612:	4618      	mov	r0, r3
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	aaaaaaab 	.word	0xaaaaaaab
 8004624:	08010504 	.word	0x08010504

08004628 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004630:	2300      	movs	r3, #0
 8004632:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004638:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d11f      	bne.n	8004682 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2b03      	cmp	r3, #3
 8004646:	d856      	bhi.n	80046f6 <DMA_CheckFifoParam+0xce>
 8004648:	a201      	add	r2, pc, #4	@ (adr r2, 8004650 <DMA_CheckFifoParam+0x28>)
 800464a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464e:	bf00      	nop
 8004650:	08004661 	.word	0x08004661
 8004654:	08004673 	.word	0x08004673
 8004658:	08004661 	.word	0x08004661
 800465c:	080046f7 	.word	0x080046f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004664:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d046      	beq.n	80046fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004670:	e043      	b.n	80046fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004676:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800467a:	d140      	bne.n	80046fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004680:	e03d      	b.n	80046fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800468a:	d121      	bne.n	80046d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2b03      	cmp	r3, #3
 8004690:	d837      	bhi.n	8004702 <DMA_CheckFifoParam+0xda>
 8004692:	a201      	add	r2, pc, #4	@ (adr r2, 8004698 <DMA_CheckFifoParam+0x70>)
 8004694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004698:	080046a9 	.word	0x080046a9
 800469c:	080046af 	.word	0x080046af
 80046a0:	080046a9 	.word	0x080046a9
 80046a4:	080046c1 	.word	0x080046c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	73fb      	strb	r3, [r7, #15]
      break;
 80046ac:	e030      	b.n	8004710 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d025      	beq.n	8004706 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046be:	e022      	b.n	8004706 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80046c8:	d11f      	bne.n	800470a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80046ce:	e01c      	b.n	800470a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d903      	bls.n	80046de <DMA_CheckFifoParam+0xb6>
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d003      	beq.n	80046e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80046dc:	e018      	b.n	8004710 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	73fb      	strb	r3, [r7, #15]
      break;
 80046e2:	e015      	b.n	8004710 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00e      	beq.n	800470e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	73fb      	strb	r3, [r7, #15]
      break;
 80046f4:	e00b      	b.n	800470e <DMA_CheckFifoParam+0xe6>
      break;
 80046f6:	bf00      	nop
 80046f8:	e00a      	b.n	8004710 <DMA_CheckFifoParam+0xe8>
      break;
 80046fa:	bf00      	nop
 80046fc:	e008      	b.n	8004710 <DMA_CheckFifoParam+0xe8>
      break;
 80046fe:	bf00      	nop
 8004700:	e006      	b.n	8004710 <DMA_CheckFifoParam+0xe8>
      break;
 8004702:	bf00      	nop
 8004704:	e004      	b.n	8004710 <DMA_CheckFifoParam+0xe8>
      break;
 8004706:	bf00      	nop
 8004708:	e002      	b.n	8004710 <DMA_CheckFifoParam+0xe8>
      break;   
 800470a:	bf00      	nop
 800470c:	e000      	b.n	8004710 <DMA_CheckFifoParam+0xe8>
      break;
 800470e:	bf00      	nop
    }
  } 
  
  return status; 
 8004710:	7bfb      	ldrb	r3, [r7, #15]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop

08004720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004720:	b480      	push	{r7}
 8004722:	b089      	sub	sp, #36	@ 0x24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800472a:	2300      	movs	r3, #0
 800472c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800472e:	2300      	movs	r3, #0
 8004730:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004732:	2300      	movs	r3, #0
 8004734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004736:	2300      	movs	r3, #0
 8004738:	61fb      	str	r3, [r7, #28]
 800473a:	e159      	b.n	80049f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800473c:	2201      	movs	r2, #1
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	4013      	ands	r3, r2
 800474e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	429a      	cmp	r2, r3
 8004756:	f040 8148 	bne.w	80049ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	2b01      	cmp	r3, #1
 8004764:	d005      	beq.n	8004772 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800476e:	2b02      	cmp	r3, #2
 8004770:	d130      	bne.n	80047d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	2203      	movs	r2, #3
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	43db      	mvns	r3, r3
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	4013      	ands	r3, r2
 8004788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68da      	ldr	r2, [r3, #12]
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	4313      	orrs	r3, r2
 800479a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047a8:	2201      	movs	r2, #1
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	fa02 f303 	lsl.w	r3, r2, r3
 80047b0:	43db      	mvns	r3, r3
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	4013      	ands	r3, r2
 80047b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	091b      	lsrs	r3, r3, #4
 80047be:	f003 0201 	and.w	r2, r3, #1
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f003 0303 	and.w	r3, r3, #3
 80047dc:	2b03      	cmp	r3, #3
 80047de:	d017      	beq.n	8004810 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	2203      	movs	r2, #3
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	43db      	mvns	r3, r3
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	4013      	ands	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	4313      	orrs	r3, r2
 8004808:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d123      	bne.n	8004864 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	08da      	lsrs	r2, r3, #3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3208      	adds	r2, #8
 8004824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004828:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	220f      	movs	r2, #15
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	43db      	mvns	r3, r3
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4013      	ands	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	4313      	orrs	r3, r2
 8004854:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	08da      	lsrs	r2, r3, #3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	3208      	adds	r2, #8
 800485e:	69b9      	ldr	r1, [r7, #24]
 8004860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	2203      	movs	r2, #3
 8004870:	fa02 f303 	lsl.w	r3, r2, r3
 8004874:	43db      	mvns	r3, r3
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	4013      	ands	r3, r2
 800487a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f003 0203 	and.w	r2, r3, #3
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	4313      	orrs	r3, r2
 8004890:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 80a2 	beq.w	80049ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048a6:	2300      	movs	r3, #0
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	4b57      	ldr	r3, [pc, #348]	@ (8004a08 <HAL_GPIO_Init+0x2e8>)
 80048ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ae:	4a56      	ldr	r2, [pc, #344]	@ (8004a08 <HAL_GPIO_Init+0x2e8>)
 80048b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80048b6:	4b54      	ldr	r3, [pc, #336]	@ (8004a08 <HAL_GPIO_Init+0x2e8>)
 80048b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048c2:	4a52      	ldr	r2, [pc, #328]	@ (8004a0c <HAL_GPIO_Init+0x2ec>)
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	089b      	lsrs	r3, r3, #2
 80048c8:	3302      	adds	r3, #2
 80048ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	220f      	movs	r2, #15
 80048da:	fa02 f303 	lsl.w	r3, r2, r3
 80048de:	43db      	mvns	r3, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4013      	ands	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a49      	ldr	r2, [pc, #292]	@ (8004a10 <HAL_GPIO_Init+0x2f0>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d019      	beq.n	8004922 <HAL_GPIO_Init+0x202>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a48      	ldr	r2, [pc, #288]	@ (8004a14 <HAL_GPIO_Init+0x2f4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d013      	beq.n	800491e <HAL_GPIO_Init+0x1fe>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a47      	ldr	r2, [pc, #284]	@ (8004a18 <HAL_GPIO_Init+0x2f8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d00d      	beq.n	800491a <HAL_GPIO_Init+0x1fa>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a46      	ldr	r2, [pc, #280]	@ (8004a1c <HAL_GPIO_Init+0x2fc>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d007      	beq.n	8004916 <HAL_GPIO_Init+0x1f6>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a45      	ldr	r2, [pc, #276]	@ (8004a20 <HAL_GPIO_Init+0x300>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d101      	bne.n	8004912 <HAL_GPIO_Init+0x1f2>
 800490e:	2304      	movs	r3, #4
 8004910:	e008      	b.n	8004924 <HAL_GPIO_Init+0x204>
 8004912:	2307      	movs	r3, #7
 8004914:	e006      	b.n	8004924 <HAL_GPIO_Init+0x204>
 8004916:	2303      	movs	r3, #3
 8004918:	e004      	b.n	8004924 <HAL_GPIO_Init+0x204>
 800491a:	2302      	movs	r3, #2
 800491c:	e002      	b.n	8004924 <HAL_GPIO_Init+0x204>
 800491e:	2301      	movs	r3, #1
 8004920:	e000      	b.n	8004924 <HAL_GPIO_Init+0x204>
 8004922:	2300      	movs	r3, #0
 8004924:	69fa      	ldr	r2, [r7, #28]
 8004926:	f002 0203 	and.w	r2, r2, #3
 800492a:	0092      	lsls	r2, r2, #2
 800492c:	4093      	lsls	r3, r2
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	4313      	orrs	r3, r2
 8004932:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004934:	4935      	ldr	r1, [pc, #212]	@ (8004a0c <HAL_GPIO_Init+0x2ec>)
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	089b      	lsrs	r3, r3, #2
 800493a:	3302      	adds	r3, #2
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004942:	4b38      	ldr	r3, [pc, #224]	@ (8004a24 <HAL_GPIO_Init+0x304>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	43db      	mvns	r3, r3
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	4013      	ands	r3, r2
 8004950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	4313      	orrs	r3, r2
 8004964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004966:	4a2f      	ldr	r2, [pc, #188]	@ (8004a24 <HAL_GPIO_Init+0x304>)
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800496c:	4b2d      	ldr	r3, [pc, #180]	@ (8004a24 <HAL_GPIO_Init+0x304>)
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	43db      	mvns	r3, r3
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	4013      	ands	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	4313      	orrs	r3, r2
 800498e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004990:	4a24      	ldr	r2, [pc, #144]	@ (8004a24 <HAL_GPIO_Init+0x304>)
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004996:	4b23      	ldr	r3, [pc, #140]	@ (8004a24 <HAL_GPIO_Init+0x304>)
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	43db      	mvns	r3, r3
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	4013      	ands	r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004a24 <HAL_GPIO_Init+0x304>)
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049c0:	4b18      	ldr	r3, [pc, #96]	@ (8004a24 <HAL_GPIO_Init+0x304>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	43db      	mvns	r3, r3
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	4013      	ands	r3, r2
 80049ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049e4:	4a0f      	ldr	r2, [pc, #60]	@ (8004a24 <HAL_GPIO_Init+0x304>)
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	3301      	adds	r3, #1
 80049ee:	61fb      	str	r3, [r7, #28]
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	2b0f      	cmp	r3, #15
 80049f4:	f67f aea2 	bls.w	800473c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049f8:	bf00      	nop
 80049fa:	bf00      	nop
 80049fc:	3724      	adds	r7, #36	@ 0x24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	40023800 	.word	0x40023800
 8004a0c:	40013800 	.word	0x40013800
 8004a10:	40020000 	.word	0x40020000
 8004a14:	40020400 	.word	0x40020400
 8004a18:	40020800 	.word	0x40020800
 8004a1c:	40020c00 	.word	0x40020c00
 8004a20:	40021000 	.word	0x40021000
 8004a24:	40013c00 	.word	0x40013c00

08004a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	807b      	strh	r3, [r7, #2]
 8004a34:	4613      	mov	r3, r2
 8004a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a38:	787b      	ldrb	r3, [r7, #1]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a3e:	887a      	ldrh	r2, [r7, #2]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a44:	e003      	b.n	8004a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a46:	887b      	ldrh	r3, [r7, #2]
 8004a48:	041a      	lsls	r2, r3, #16
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	619a      	str	r2, [r3, #24]
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
	...

08004a5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e12b      	b.n	8004cc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fe f970 	bl	8002d68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2224      	movs	r2, #36	@ 0x24
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0201 	bic.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004aae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004abe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ac0:	f001 feb4 	bl	800682c <HAL_RCC_GetPCLK1Freq>
 8004ac4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	4a81      	ldr	r2, [pc, #516]	@ (8004cd0 <HAL_I2C_Init+0x274>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d807      	bhi.n	8004ae0 <HAL_I2C_Init+0x84>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4a80      	ldr	r2, [pc, #512]	@ (8004cd4 <HAL_I2C_Init+0x278>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	bf94      	ite	ls
 8004ad8:	2301      	movls	r3, #1
 8004ada:	2300      	movhi	r3, #0
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	e006      	b.n	8004aee <HAL_I2C_Init+0x92>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4a7d      	ldr	r2, [pc, #500]	@ (8004cd8 <HAL_I2C_Init+0x27c>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	bf94      	ite	ls
 8004ae8:	2301      	movls	r3, #1
 8004aea:	2300      	movhi	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e0e7      	b.n	8004cc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4a78      	ldr	r2, [pc, #480]	@ (8004cdc <HAL_I2C_Init+0x280>)
 8004afa:	fba2 2303 	umull	r2, r3, r2, r3
 8004afe:	0c9b      	lsrs	r3, r3, #18
 8004b00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	4a6a      	ldr	r2, [pc, #424]	@ (8004cd0 <HAL_I2C_Init+0x274>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d802      	bhi.n	8004b30 <HAL_I2C_Init+0xd4>
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	e009      	b.n	8004b44 <HAL_I2C_Init+0xe8>
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004b36:	fb02 f303 	mul.w	r3, r2, r3
 8004b3a:	4a69      	ldr	r2, [pc, #420]	@ (8004ce0 <HAL_I2C_Init+0x284>)
 8004b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b40:	099b      	lsrs	r3, r3, #6
 8004b42:	3301      	adds	r3, #1
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6812      	ldr	r2, [r2, #0]
 8004b48:	430b      	orrs	r3, r1
 8004b4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004b56:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	495c      	ldr	r1, [pc, #368]	@ (8004cd0 <HAL_I2C_Init+0x274>)
 8004b60:	428b      	cmp	r3, r1
 8004b62:	d819      	bhi.n	8004b98 <HAL_I2C_Init+0x13c>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	1e59      	subs	r1, r3, #1
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b72:	1c59      	adds	r1, r3, #1
 8004b74:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004b78:	400b      	ands	r3, r1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <HAL_I2C_Init+0x138>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	1e59      	subs	r1, r3, #1
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b92:	e051      	b.n	8004c38 <HAL_I2C_Init+0x1dc>
 8004b94:	2304      	movs	r3, #4
 8004b96:	e04f      	b.n	8004c38 <HAL_I2C_Init+0x1dc>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d111      	bne.n	8004bc4 <HAL_I2C_Init+0x168>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	1e58      	subs	r0, r3, #1
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6859      	ldr	r1, [r3, #4]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	440b      	add	r3, r1
 8004bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	bf0c      	ite	eq
 8004bbc:	2301      	moveq	r3, #1
 8004bbe:	2300      	movne	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	e012      	b.n	8004bea <HAL_I2C_Init+0x18e>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	1e58      	subs	r0, r3, #1
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6859      	ldr	r1, [r3, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	440b      	add	r3, r1
 8004bd2:	0099      	lsls	r1, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bda:	3301      	adds	r3, #1
 8004bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	bf0c      	ite	eq
 8004be4:	2301      	moveq	r3, #1
 8004be6:	2300      	movne	r3, #0
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <HAL_I2C_Init+0x196>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e022      	b.n	8004c38 <HAL_I2C_Init+0x1dc>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10e      	bne.n	8004c18 <HAL_I2C_Init+0x1bc>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	1e58      	subs	r0, r3, #1
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6859      	ldr	r1, [r3, #4]
 8004c02:	460b      	mov	r3, r1
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	440b      	add	r3, r1
 8004c08:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c16:	e00f      	b.n	8004c38 <HAL_I2C_Init+0x1dc>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	1e58      	subs	r0, r3, #1
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6859      	ldr	r1, [r3, #4]
 8004c20:	460b      	mov	r3, r1
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	0099      	lsls	r1, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c2e:	3301      	adds	r3, #1
 8004c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c38:	6879      	ldr	r1, [r7, #4]
 8004c3a:	6809      	ldr	r1, [r1, #0]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69da      	ldr	r2, [r3, #28]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	431a      	orrs	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004c66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	6911      	ldr	r1, [r2, #16]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	68d2      	ldr	r2, [r2, #12]
 8004c72:	4311      	orrs	r1, r2
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6812      	ldr	r2, [r2, #0]
 8004c78:	430b      	orrs	r3, r1
 8004c7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	695a      	ldr	r2, [r3, #20]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0201 	orr.w	r2, r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	000186a0 	.word	0x000186a0
 8004cd4:	001e847f 	.word	0x001e847f
 8004cd8:	003d08ff 	.word	0x003d08ff
 8004cdc:	431bde83 	.word	0x431bde83
 8004ce0:	10624dd3 	.word	0x10624dd3

08004ce4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b088      	sub	sp, #32
 8004ce8:	af02      	add	r7, sp, #8
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	607a      	str	r2, [r7, #4]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	817b      	strh	r3, [r7, #10]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cf8:	f7fe fd50 	bl	800379c <HAL_GetTick>
 8004cfc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b20      	cmp	r3, #32
 8004d08:	f040 80e0 	bne.w	8004ecc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	2319      	movs	r3, #25
 8004d12:	2201      	movs	r2, #1
 8004d14:	4970      	ldr	r1, [pc, #448]	@ (8004ed8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 ff22 	bl	8005b60 <I2C_WaitOnFlagUntilTimeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004d22:	2302      	movs	r3, #2
 8004d24:	e0d3      	b.n	8004ece <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d101      	bne.n	8004d34 <HAL_I2C_Master_Transmit+0x50>
 8004d30:	2302      	movs	r3, #2
 8004d32:	e0cc      	b.n	8004ece <HAL_I2C_Master_Transmit+0x1ea>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d007      	beq.n	8004d5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f042 0201 	orr.w	r2, r2, #1
 8004d58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2221      	movs	r2, #33	@ 0x21
 8004d6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2210      	movs	r2, #16
 8004d76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	893a      	ldrh	r2, [r7, #8]
 8004d8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	4a50      	ldr	r2, [pc, #320]	@ (8004edc <HAL_I2C_Master_Transmit+0x1f8>)
 8004d9a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d9c:	8979      	ldrh	r1, [r7, #10]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	6a3a      	ldr	r2, [r7, #32]
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 fcf6 	bl	8005794 <I2C_MasterRequestWrite>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e08d      	b.n	8004ece <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004db2:	2300      	movs	r3, #0
 8004db4:	613b      	str	r3, [r7, #16]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	613b      	str	r3, [r7, #16]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	613b      	str	r3, [r7, #16]
 8004dc6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004dc8:	e066      	b.n	8004e98 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	6a39      	ldr	r1, [r7, #32]
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f000 ffe0 	bl	8005d94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00d      	beq.n	8004df6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	d107      	bne.n	8004df2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004df0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e06b      	b.n	8004ece <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfa:	781a      	ldrb	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	d11b      	bne.n	8004e6c <HAL_I2C_Master_Transmit+0x188>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d017      	beq.n	8004e6c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e40:	781a      	ldrb	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4c:	1c5a      	adds	r2, r3, #1
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e64:	3b01      	subs	r3, #1
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	6a39      	ldr	r1, [r7, #32]
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 ffd7 	bl	8005e24 <I2C_WaitOnBTFFlagUntilTimeout>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00d      	beq.n	8004e98 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e80:	2b04      	cmp	r3, #4
 8004e82:	d107      	bne.n	8004e94 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e92:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e01a      	b.n	8004ece <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d194      	bne.n	8004dca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004eae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	e000      	b.n	8004ece <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004ecc:	2302      	movs	r3, #2
  }
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	00100002 	.word	0x00100002
 8004edc:	ffff0000 	.word	0xffff0000

08004ee0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b08c      	sub	sp, #48	@ 0x30
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	607a      	str	r2, [r7, #4]
 8004eea:	461a      	mov	r2, r3
 8004eec:	460b      	mov	r3, r1
 8004eee:	817b      	strh	r3, [r7, #10]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ef4:	f7fe fc52 	bl	800379c <HAL_GetTick>
 8004ef8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b20      	cmp	r3, #32
 8004f04:	f040 8217 	bne.w	8005336 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	2319      	movs	r3, #25
 8004f0e:	2201      	movs	r2, #1
 8004f10:	497c      	ldr	r1, [pc, #496]	@ (8005104 <HAL_I2C_Master_Receive+0x224>)
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 fe24 	bl	8005b60 <I2C_WaitOnFlagUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e20a      	b.n	8005338 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d101      	bne.n	8004f30 <HAL_I2C_Master_Receive+0x50>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	e203      	b.n	8005338 <HAL_I2C_Master_Receive+0x458>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d007      	beq.n	8004f56 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f042 0201 	orr.w	r2, r2, #1
 8004f54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2222      	movs	r2, #34	@ 0x22
 8004f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2210      	movs	r2, #16
 8004f72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	893a      	ldrh	r2, [r7, #8]
 8004f86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	4a5c      	ldr	r2, [pc, #368]	@ (8005108 <HAL_I2C_Master_Receive+0x228>)
 8004f96:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f98:	8979      	ldrh	r1, [r7, #10]
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 fc7a 	bl	8005898 <I2C_MasterRequestRead>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e1c4      	b.n	8005338 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d113      	bne.n	8004fde <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	623b      	str	r3, [r7, #32]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	623b      	str	r3, [r7, #32]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	623b      	str	r3, [r7, #32]
 8004fca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	e198      	b.n	8005310 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d11b      	bne.n	800501e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ff4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	61fb      	str	r3, [r7, #28]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	61fb      	str	r3, [r7, #28]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	61fb      	str	r3, [r7, #28]
 800500a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	e178      	b.n	8005310 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005022:	2b02      	cmp	r3, #2
 8005024:	d11b      	bne.n	800505e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005034:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005044:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005046:	2300      	movs	r3, #0
 8005048:	61bb      	str	r3, [r7, #24]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	61bb      	str	r3, [r7, #24]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	61bb      	str	r3, [r7, #24]
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	e158      	b.n	8005310 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800506c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800506e:	2300      	movs	r3, #0
 8005070:	617b      	str	r3, [r7, #20]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	617b      	str	r3, [r7, #20]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	617b      	str	r3, [r7, #20]
 8005082:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005084:	e144      	b.n	8005310 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800508a:	2b03      	cmp	r3, #3
 800508c:	f200 80f1 	bhi.w	8005272 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005094:	2b01      	cmp	r3, #1
 8005096:	d123      	bne.n	80050e0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005098:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800509a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 ff09 	bl	8005eb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e145      	b.n	8005338 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691a      	ldr	r2, [r3, #16]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80050de:	e117      	b.n	8005310 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d14e      	bne.n	8005186 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ee:	2200      	movs	r2, #0
 80050f0:	4906      	ldr	r1, [pc, #24]	@ (800510c <HAL_I2C_Master_Receive+0x22c>)
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 fd34 	bl	8005b60 <I2C_WaitOnFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d008      	beq.n	8005110 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e11a      	b.n	8005338 <HAL_I2C_Master_Receive+0x458>
 8005102:	bf00      	nop
 8005104:	00100002 	.word	0x00100002
 8005108:	ffff0000 	.word	0xffff0000
 800510c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800511e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	691a      	ldr	r2, [r3, #16]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005132:	1c5a      	adds	r2, r3, #1
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800513c:	3b01      	subs	r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005148:	b29b      	uxth	r3, r3
 800514a:	3b01      	subs	r3, #1
 800514c:	b29a      	uxth	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515c:	b2d2      	uxtb	r2, r2
 800515e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800516e:	3b01      	subs	r3, #1
 8005170:	b29a      	uxth	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800517a:	b29b      	uxth	r3, r3
 800517c:	3b01      	subs	r3, #1
 800517e:	b29a      	uxth	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005184:	e0c4      	b.n	8005310 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800518c:	2200      	movs	r2, #0
 800518e:	496c      	ldr	r1, [pc, #432]	@ (8005340 <HAL_I2C_Master_Receive+0x460>)
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 fce5 	bl	8005b60 <I2C_WaitOnFlagUntilTimeout>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e0cb      	b.n	8005338 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	691a      	ldr	r2, [r3, #16]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c2:	1c5a      	adds	r2, r3, #1
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051d8:	b29b      	uxth	r3, r3
 80051da:	3b01      	subs	r3, #1
 80051dc:	b29a      	uxth	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e8:	2200      	movs	r2, #0
 80051ea:	4955      	ldr	r1, [pc, #340]	@ (8005340 <HAL_I2C_Master_Receive+0x460>)
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 fcb7 	bl	8005b60 <I2C_WaitOnFlagUntilTimeout>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e09d      	b.n	8005338 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800520a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691a      	ldr	r2, [r3, #16]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005228:	3b01      	subs	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005234:	b29b      	uxth	r3, r3
 8005236:	3b01      	subs	r3, #1
 8005238:	b29a      	uxth	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005248:	b2d2      	uxtb	r2, r2
 800524a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800525a:	3b01      	subs	r3, #1
 800525c:	b29a      	uxth	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005266:	b29b      	uxth	r3, r3
 8005268:	3b01      	subs	r3, #1
 800526a:	b29a      	uxth	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005270:	e04e      	b.n	8005310 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005272:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005274:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f000 fe1c 	bl	8005eb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e058      	b.n	8005338 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	691a      	ldr	r2, [r3, #16]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005290:	b2d2      	uxtb	r2, r2
 8005292:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005298:	1c5a      	adds	r2, r3, #1
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	f003 0304 	and.w	r3, r3, #4
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d124      	bne.n	8005310 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ca:	2b03      	cmp	r3, #3
 80052cc:	d107      	bne.n	80052de <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052dc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	691a      	ldr	r2, [r3, #16]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e8:	b2d2      	uxtb	r2, r2
 80052ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005306:	b29b      	uxth	r3, r3
 8005308:	3b01      	subs	r3, #1
 800530a:	b29a      	uxth	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005314:	2b00      	cmp	r3, #0
 8005316:	f47f aeb6 	bne.w	8005086 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2220      	movs	r2, #32
 800531e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	e000      	b.n	8005338 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005336:	2302      	movs	r3, #2
  }
}
 8005338:	4618      	mov	r0, r3
 800533a:	3728      	adds	r7, #40	@ 0x28
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	00010004 	.word	0x00010004

08005344 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b088      	sub	sp, #32
 8005348:	af02      	add	r7, sp, #8
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	4608      	mov	r0, r1
 800534e:	4611      	mov	r1, r2
 8005350:	461a      	mov	r2, r3
 8005352:	4603      	mov	r3, r0
 8005354:	817b      	strh	r3, [r7, #10]
 8005356:	460b      	mov	r3, r1
 8005358:	813b      	strh	r3, [r7, #8]
 800535a:	4613      	mov	r3, r2
 800535c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800535e:	f7fe fa1d 	bl	800379c <HAL_GetTick>
 8005362:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b20      	cmp	r3, #32
 800536e:	f040 80d9 	bne.w	8005524 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	2319      	movs	r3, #25
 8005378:	2201      	movs	r2, #1
 800537a:	496d      	ldr	r1, [pc, #436]	@ (8005530 <HAL_I2C_Mem_Write+0x1ec>)
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 fbef 	bl	8005b60 <I2C_WaitOnFlagUntilTimeout>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d001      	beq.n	800538c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005388:	2302      	movs	r3, #2
 800538a:	e0cc      	b.n	8005526 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005392:	2b01      	cmp	r3, #1
 8005394:	d101      	bne.n	800539a <HAL_I2C_Mem_Write+0x56>
 8005396:	2302      	movs	r3, #2
 8005398:	e0c5      	b.n	8005526 <HAL_I2C_Mem_Write+0x1e2>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d007      	beq.n	80053c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0201 	orr.w	r2, r2, #1
 80053be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2221      	movs	r2, #33	@ 0x21
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2240      	movs	r2, #64	@ 0x40
 80053dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6a3a      	ldr	r2, [r7, #32]
 80053ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80053f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4a4d      	ldr	r2, [pc, #308]	@ (8005534 <HAL_I2C_Mem_Write+0x1f0>)
 8005400:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005402:	88f8      	ldrh	r0, [r7, #6]
 8005404:	893a      	ldrh	r2, [r7, #8]
 8005406:	8979      	ldrh	r1, [r7, #10]
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	9301      	str	r3, [sp, #4]
 800540c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	4603      	mov	r3, r0
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 fb0e 	bl	8005a34 <I2C_RequestMemoryWrite>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d052      	beq.n	80054c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e081      	b.n	8005526 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 fcb4 	bl	8005d94 <I2C_WaitOnTXEFlagUntilTimeout>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00d      	beq.n	800544e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005436:	2b04      	cmp	r3, #4
 8005438:	d107      	bne.n	800544a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005448:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e06b      	b.n	8005526 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005452:	781a      	ldrb	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005468:	3b01      	subs	r3, #1
 800546a:	b29a      	uxth	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005474:	b29b      	uxth	r3, r3
 8005476:	3b01      	subs	r3, #1
 8005478:	b29a      	uxth	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b04      	cmp	r3, #4
 800548a:	d11b      	bne.n	80054c4 <HAL_I2C_Mem_Write+0x180>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005490:	2b00      	cmp	r3, #0
 8005492:	d017      	beq.n	80054c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005498:	781a      	ldrb	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054ae:	3b01      	subs	r3, #1
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29a      	uxth	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1aa      	bne.n	8005422 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 fca7 	bl	8005e24 <I2C_WaitOnBTFFlagUntilTimeout>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00d      	beq.n	80054f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d107      	bne.n	80054f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e016      	b.n	8005526 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005506:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2220      	movs	r2, #32
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005520:	2300      	movs	r3, #0
 8005522:	e000      	b.n	8005526 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005524:	2302      	movs	r3, #2
  }
}
 8005526:	4618      	mov	r0, r3
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	00100002 	.word	0x00100002
 8005534:	ffff0000 	.word	0xffff0000

08005538 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b08a      	sub	sp, #40	@ 0x28
 800553c:	af02      	add	r7, sp, #8
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	607a      	str	r2, [r7, #4]
 8005542:	603b      	str	r3, [r7, #0]
 8005544:	460b      	mov	r3, r1
 8005546:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005548:	f7fe f928 	bl	800379c <HAL_GetTick>
 800554c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800554e:	2300      	movs	r3, #0
 8005550:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b20      	cmp	r3, #32
 800555c:	f040 8111 	bne.w	8005782 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	2319      	movs	r3, #25
 8005566:	2201      	movs	r2, #1
 8005568:	4988      	ldr	r1, [pc, #544]	@ (800578c <HAL_I2C_IsDeviceReady+0x254>)
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f000 faf8 	bl	8005b60 <I2C_WaitOnFlagUntilTimeout>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005576:	2302      	movs	r3, #2
 8005578:	e104      	b.n	8005784 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005580:	2b01      	cmp	r3, #1
 8005582:	d101      	bne.n	8005588 <HAL_I2C_IsDeviceReady+0x50>
 8005584:	2302      	movs	r3, #2
 8005586:	e0fd      	b.n	8005784 <HAL_I2C_IsDeviceReady+0x24c>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b01      	cmp	r3, #1
 800559c:	d007      	beq.n	80055ae <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f042 0201 	orr.w	r2, r2, #1
 80055ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2224      	movs	r2, #36	@ 0x24
 80055c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4a70      	ldr	r2, [pc, #448]	@ (8005790 <HAL_I2C_IsDeviceReady+0x258>)
 80055d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055e0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 fab6 	bl	8005b60 <I2C_WaitOnFlagUntilTimeout>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00d      	beq.n	8005616 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005604:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005608:	d103      	bne.n	8005612 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005610:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e0b6      	b.n	8005784 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005616:	897b      	ldrh	r3, [r7, #10]
 8005618:	b2db      	uxtb	r3, r3
 800561a:	461a      	mov	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005624:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005626:	f7fe f8b9 	bl	800379c <HAL_GetTick>
 800562a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b02      	cmp	r3, #2
 8005638:	bf0c      	ite	eq
 800563a:	2301      	moveq	r3, #1
 800563c:	2300      	movne	r3, #0
 800563e:	b2db      	uxtb	r3, r3
 8005640:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800564c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005650:	bf0c      	ite	eq
 8005652:	2301      	moveq	r3, #1
 8005654:	2300      	movne	r3, #0
 8005656:	b2db      	uxtb	r3, r3
 8005658:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800565a:	e025      	b.n	80056a8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800565c:	f7fe f89e 	bl	800379c <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	429a      	cmp	r2, r3
 800566a:	d302      	bcc.n	8005672 <HAL_I2C_IsDeviceReady+0x13a>
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d103      	bne.n	800567a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	22a0      	movs	r2, #160	@ 0xa0
 8005676:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b02      	cmp	r3, #2
 8005686:	bf0c      	ite	eq
 8005688:	2301      	moveq	r3, #1
 800568a:	2300      	movne	r3, #0
 800568c:	b2db      	uxtb	r3, r3
 800568e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800569a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800569e:	bf0c      	ite	eq
 80056a0:	2301      	moveq	r3, #1
 80056a2:	2300      	movne	r3, #0
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2ba0      	cmp	r3, #160	@ 0xa0
 80056b2:	d005      	beq.n	80056c0 <HAL_I2C_IsDeviceReady+0x188>
 80056b4:	7dfb      	ldrb	r3, [r7, #23]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d102      	bne.n	80056c0 <HAL_I2C_IsDeviceReady+0x188>
 80056ba:	7dbb      	ldrb	r3, [r7, #22]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d0cd      	beq.n	800565c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d129      	bne.n	800572a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056e4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056e6:	2300      	movs	r3, #0
 80056e8:	613b      	str	r3, [r7, #16]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	613b      	str	r3, [r7, #16]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	613b      	str	r3, [r7, #16]
 80056fa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	2319      	movs	r3, #25
 8005702:	2201      	movs	r2, #1
 8005704:	4921      	ldr	r1, [pc, #132]	@ (800578c <HAL_I2C_IsDeviceReady+0x254>)
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f000 fa2a 	bl	8005b60 <I2C_WaitOnFlagUntilTimeout>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e036      	b.n	8005784 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2220      	movs	r2, #32
 800571a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005726:	2300      	movs	r3, #0
 8005728:	e02c      	b.n	8005784 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005738:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005742:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	2319      	movs	r3, #25
 800574a:	2201      	movs	r2, #1
 800574c:	490f      	ldr	r1, [pc, #60]	@ (800578c <HAL_I2C_IsDeviceReady+0x254>)
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 fa06 	bl	8005b60 <I2C_WaitOnFlagUntilTimeout>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e012      	b.n	8005784 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	3301      	adds	r3, #1
 8005762:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	429a      	cmp	r2, r3
 800576a:	f4ff af32 	bcc.w	80055d2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2220      	movs	r2, #32
 8005772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e000      	b.n	8005784 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005782:	2302      	movs	r3, #2
  }
}
 8005784:	4618      	mov	r0, r3
 8005786:	3720      	adds	r7, #32
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	00100002 	.word	0x00100002
 8005790:	ffff0000 	.word	0xffff0000

08005794 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b088      	sub	sp, #32
 8005798:	af02      	add	r7, sp, #8
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	607a      	str	r2, [r7, #4]
 800579e:	603b      	str	r3, [r7, #0]
 80057a0:	460b      	mov	r3, r1
 80057a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2b08      	cmp	r3, #8
 80057ae:	d006      	beq.n	80057be <I2C_MasterRequestWrite+0x2a>
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d003      	beq.n	80057be <I2C_MasterRequestWrite+0x2a>
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80057bc:	d108      	bne.n	80057d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	e00b      	b.n	80057e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057d4:	2b12      	cmp	r3, #18
 80057d6:	d107      	bne.n	80057e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f000 f9b3 	bl	8005b60 <I2C_WaitOnFlagUntilTimeout>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00d      	beq.n	800581c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800580a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800580e:	d103      	bne.n	8005818 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005816:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e035      	b.n	8005888 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005824:	d108      	bne.n	8005838 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005826:	897b      	ldrh	r3, [r7, #10]
 8005828:	b2db      	uxtb	r3, r3
 800582a:	461a      	mov	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005834:	611a      	str	r2, [r3, #16]
 8005836:	e01b      	b.n	8005870 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005838:	897b      	ldrh	r3, [r7, #10]
 800583a:	11db      	asrs	r3, r3, #7
 800583c:	b2db      	uxtb	r3, r3
 800583e:	f003 0306 	and.w	r3, r3, #6
 8005842:	b2db      	uxtb	r3, r3
 8005844:	f063 030f 	orn	r3, r3, #15
 8005848:	b2da      	uxtb	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	490e      	ldr	r1, [pc, #56]	@ (8005890 <I2C_MasterRequestWrite+0xfc>)
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f000 f9fc 	bl	8005c54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e010      	b.n	8005888 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005866:	897b      	ldrh	r3, [r7, #10]
 8005868:	b2da      	uxtb	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	4907      	ldr	r1, [pc, #28]	@ (8005894 <I2C_MasterRequestWrite+0x100>)
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f000 f9ec 	bl	8005c54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e000      	b.n	8005888 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3718      	adds	r7, #24
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	00010008 	.word	0x00010008
 8005894:	00010002 	.word	0x00010002

08005898 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b088      	sub	sp, #32
 800589c:	af02      	add	r7, sp, #8
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	607a      	str	r2, [r7, #4]
 80058a2:	603b      	str	r3, [r7, #0]
 80058a4:	460b      	mov	r3, r1
 80058a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80058bc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d006      	beq.n	80058d2 <I2C_MasterRequestRead+0x3a>
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d003      	beq.n	80058d2 <I2C_MasterRequestRead+0x3a>
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80058d0:	d108      	bne.n	80058e4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	e00b      	b.n	80058fc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e8:	2b11      	cmp	r3, #17
 80058ea:	d107      	bne.n	80058fc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 f929 	bl	8005b60 <I2C_WaitOnFlagUntilTimeout>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00d      	beq.n	8005930 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800591e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005922:	d103      	bne.n	800592c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800592a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e079      	b.n	8005a24 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005938:	d108      	bne.n	800594c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800593a:	897b      	ldrh	r3, [r7, #10]
 800593c:	b2db      	uxtb	r3, r3
 800593e:	f043 0301 	orr.w	r3, r3, #1
 8005942:	b2da      	uxtb	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	611a      	str	r2, [r3, #16]
 800594a:	e05f      	b.n	8005a0c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800594c:	897b      	ldrh	r3, [r7, #10]
 800594e:	11db      	asrs	r3, r3, #7
 8005950:	b2db      	uxtb	r3, r3
 8005952:	f003 0306 	and.w	r3, r3, #6
 8005956:	b2db      	uxtb	r3, r3
 8005958:	f063 030f 	orn	r3, r3, #15
 800595c:	b2da      	uxtb	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	4930      	ldr	r1, [pc, #192]	@ (8005a2c <I2C_MasterRequestRead+0x194>)
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f000 f972 	bl	8005c54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e054      	b.n	8005a24 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800597a:	897b      	ldrh	r3, [r7, #10]
 800597c:	b2da      	uxtb	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	4929      	ldr	r1, [pc, #164]	@ (8005a30 <I2C_MasterRequestRead+0x198>)
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f000 f962 	bl	8005c54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e044      	b.n	8005a24 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800599a:	2300      	movs	r3, #0
 800599c:	613b      	str	r3, [r7, #16]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	613b      	str	r3, [r7, #16]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	613b      	str	r3, [r7, #16]
 80059ae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059be:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f000 f8c7 	bl	8005b60 <I2C_WaitOnFlagUntilTimeout>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00d      	beq.n	80059f4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059e6:	d103      	bne.n	80059f0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059ee:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e017      	b.n	8005a24 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80059f4:	897b      	ldrh	r3, [r7, #10]
 80059f6:	11db      	asrs	r3, r3, #7
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	f003 0306 	and.w	r3, r3, #6
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	f063 030e 	orn	r3, r3, #14
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	4907      	ldr	r1, [pc, #28]	@ (8005a30 <I2C_MasterRequestRead+0x198>)
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f000 f91e 	bl	8005c54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e000      	b.n	8005a24 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3718      	adds	r7, #24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	00010008 	.word	0x00010008
 8005a30:	00010002 	.word	0x00010002

08005a34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b088      	sub	sp, #32
 8005a38:	af02      	add	r7, sp, #8
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	4608      	mov	r0, r1
 8005a3e:	4611      	mov	r1, r2
 8005a40:	461a      	mov	r2, r3
 8005a42:	4603      	mov	r3, r0
 8005a44:	817b      	strh	r3, [r7, #10]
 8005a46:	460b      	mov	r3, r1
 8005a48:	813b      	strh	r3, [r7, #8]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f000 f878 	bl	8005b60 <I2C_WaitOnFlagUntilTimeout>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00d      	beq.n	8005a92 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a84:	d103      	bne.n	8005a8e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a8c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e05f      	b.n	8005b52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a92:	897b      	ldrh	r3, [r7, #10]
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	461a      	mov	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005aa0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa4:	6a3a      	ldr	r2, [r7, #32]
 8005aa6:	492d      	ldr	r1, [pc, #180]	@ (8005b5c <I2C_RequestMemoryWrite+0x128>)
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 f8d3 	bl	8005c54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d001      	beq.n	8005ab8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e04c      	b.n	8005b52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ab8:	2300      	movs	r3, #0
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	617b      	str	r3, [r7, #20]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	617b      	str	r3, [r7, #20]
 8005acc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ad0:	6a39      	ldr	r1, [r7, #32]
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f000 f95e 	bl	8005d94 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00d      	beq.n	8005afa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae2:	2b04      	cmp	r3, #4
 8005ae4:	d107      	bne.n	8005af6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005af4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e02b      	b.n	8005b52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005afa:	88fb      	ldrh	r3, [r7, #6]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d105      	bne.n	8005b0c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b00:	893b      	ldrh	r3, [r7, #8]
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	611a      	str	r2, [r3, #16]
 8005b0a:	e021      	b.n	8005b50 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b0c:	893b      	ldrh	r3, [r7, #8]
 8005b0e:	0a1b      	lsrs	r3, r3, #8
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b1c:	6a39      	ldr	r1, [r7, #32]
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 f938 	bl	8005d94 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00d      	beq.n	8005b46 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	d107      	bne.n	8005b42 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e005      	b.n	8005b52 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b46:	893b      	ldrh	r3, [r7, #8]
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3718      	adds	r7, #24
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	00010002 	.word	0x00010002

08005b60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	603b      	str	r3, [r7, #0]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b70:	e048      	b.n	8005c04 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b78:	d044      	beq.n	8005c04 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b7a:	f7fd fe0f 	bl	800379c <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	683a      	ldr	r2, [r7, #0]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d302      	bcc.n	8005b90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d139      	bne.n	8005c04 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	0c1b      	lsrs	r3, r3, #16
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d10d      	bne.n	8005bb6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	43da      	mvns	r2, r3
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	bf0c      	ite	eq
 8005bac:	2301      	moveq	r3, #1
 8005bae:	2300      	movne	r3, #0
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	e00c      	b.n	8005bd0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	43da      	mvns	r2, r3
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	bf0c      	ite	eq
 8005bc8:	2301      	moveq	r3, #1
 8005bca:	2300      	movne	r3, #0
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	461a      	mov	r2, r3
 8005bd0:	79fb      	ldrb	r3, [r7, #7]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d116      	bne.n	8005c04 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2220      	movs	r2, #32
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf0:	f043 0220 	orr.w	r2, r3, #32
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e023      	b.n	8005c4c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	0c1b      	lsrs	r3, r3, #16
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d10d      	bne.n	8005c2a <I2C_WaitOnFlagUntilTimeout+0xca>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	43da      	mvns	r2, r3
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	4013      	ands	r3, r2
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	bf0c      	ite	eq
 8005c20:	2301      	moveq	r3, #1
 8005c22:	2300      	movne	r3, #0
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	461a      	mov	r2, r3
 8005c28:	e00c      	b.n	8005c44 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	43da      	mvns	r2, r3
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	4013      	ands	r3, r2
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	bf0c      	ite	eq
 8005c3c:	2301      	moveq	r3, #1
 8005c3e:	2300      	movne	r3, #0
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	461a      	mov	r2, r3
 8005c44:	79fb      	ldrb	r3, [r7, #7]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d093      	beq.n	8005b72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
 8005c60:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c62:	e071      	b.n	8005d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c72:	d123      	bne.n	8005cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c82:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2220      	movs	r2, #32
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca8:	f043 0204 	orr.w	r2, r3, #4
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e067      	b.n	8005d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc2:	d041      	beq.n	8005d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cc4:	f7fd fd6a 	bl	800379c <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d302      	bcc.n	8005cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d136      	bne.n	8005d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	0c1b      	lsrs	r3, r3, #16
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d10c      	bne.n	8005cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	43da      	mvns	r2, r3
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	4013      	ands	r3, r2
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	bf14      	ite	ne
 8005cf6:	2301      	movne	r3, #1
 8005cf8:	2300      	moveq	r3, #0
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	e00b      	b.n	8005d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	43da      	mvns	r2, r3
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	4013      	ands	r3, r2
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	bf14      	ite	ne
 8005d10:	2301      	movne	r3, #1
 8005d12:	2300      	moveq	r3, #0
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d016      	beq.n	8005d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d34:	f043 0220 	orr.w	r2, r3, #32
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e021      	b.n	8005d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	0c1b      	lsrs	r3, r3, #16
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d10c      	bne.n	8005d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	43da      	mvns	r2, r3
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	bf14      	ite	ne
 8005d64:	2301      	movne	r3, #1
 8005d66:	2300      	moveq	r3, #0
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	e00b      	b.n	8005d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	43da      	mvns	r2, r3
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	4013      	ands	r3, r2
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	bf14      	ite	ne
 8005d7e:	2301      	movne	r3, #1
 8005d80:	2300      	moveq	r3, #0
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f47f af6d 	bne.w	8005c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005da0:	e034      	b.n	8005e0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f000 f8e3 	bl	8005f6e <I2C_IsAcknowledgeFailed>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e034      	b.n	8005e1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db8:	d028      	beq.n	8005e0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dba:	f7fd fcef 	bl	800379c <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d302      	bcc.n	8005dd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d11d      	bne.n	8005e0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dda:	2b80      	cmp	r3, #128	@ 0x80
 8005ddc:	d016      	beq.n	8005e0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2220      	movs	r2, #32
 8005de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df8:	f043 0220 	orr.w	r2, r3, #32
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e007      	b.n	8005e1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e16:	2b80      	cmp	r3, #128	@ 0x80
 8005e18:	d1c3      	bne.n	8005da2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e30:	e034      	b.n	8005e9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 f89b 	bl	8005f6e <I2C_IsAcknowledgeFailed>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e034      	b.n	8005eac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e48:	d028      	beq.n	8005e9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e4a:	f7fd fca7 	bl	800379c <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d302      	bcc.n	8005e60 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d11d      	bne.n	8005e9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	f003 0304 	and.w	r3, r3, #4
 8005e6a:	2b04      	cmp	r3, #4
 8005e6c:	d016      	beq.n	8005e9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2220      	movs	r2, #32
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e88:	f043 0220 	orr.w	r2, r3, #32
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e007      	b.n	8005eac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b04      	cmp	r3, #4
 8005ea8:	d1c3      	bne.n	8005e32 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ec0:	e049      	b.n	8005f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	f003 0310 	and.w	r3, r3, #16
 8005ecc:	2b10      	cmp	r3, #16
 8005ece:	d119      	bne.n	8005f04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f06f 0210 	mvn.w	r2, #16
 8005ed8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e030      	b.n	8005f66 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f04:	f7fd fc4a 	bl	800379c <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d302      	bcc.n	8005f1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d11d      	bne.n	8005f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f24:	2b40      	cmp	r3, #64	@ 0x40
 8005f26:	d016      	beq.n	8005f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2220      	movs	r2, #32
 8005f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f42:	f043 0220 	orr.w	r2, r3, #32
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e007      	b.n	8005f66 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f60:	2b40      	cmp	r3, #64	@ 0x40
 8005f62:	d1ae      	bne.n	8005ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b083      	sub	sp, #12
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f84:	d11b      	bne.n	8005fbe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005f8e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005faa:	f043 0204 	orr.w	r2, r3, #4
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e000      	b.n	8005fc0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e267      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d075      	beq.n	80060d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005fea:	4b88      	ldr	r3, [pc, #544]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 030c 	and.w	r3, r3, #12
 8005ff2:	2b04      	cmp	r3, #4
 8005ff4:	d00c      	beq.n	8006010 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ff6:	4b85      	ldr	r3, [pc, #532]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005ffe:	2b08      	cmp	r3, #8
 8006000:	d112      	bne.n	8006028 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006002:	4b82      	ldr	r3, [pc, #520]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800600a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800600e:	d10b      	bne.n	8006028 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006010:	4b7e      	ldr	r3, [pc, #504]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d05b      	beq.n	80060d4 <HAL_RCC_OscConfig+0x108>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d157      	bne.n	80060d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e242      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006030:	d106      	bne.n	8006040 <HAL_RCC_OscConfig+0x74>
 8006032:	4b76      	ldr	r3, [pc, #472]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a75      	ldr	r2, [pc, #468]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 8006038:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800603c:	6013      	str	r3, [r2, #0]
 800603e:	e01d      	b.n	800607c <HAL_RCC_OscConfig+0xb0>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006048:	d10c      	bne.n	8006064 <HAL_RCC_OscConfig+0x98>
 800604a:	4b70      	ldr	r3, [pc, #448]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a6f      	ldr	r2, [pc, #444]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 8006050:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006054:	6013      	str	r3, [r2, #0]
 8006056:	4b6d      	ldr	r3, [pc, #436]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a6c      	ldr	r2, [pc, #432]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 800605c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006060:	6013      	str	r3, [r2, #0]
 8006062:	e00b      	b.n	800607c <HAL_RCC_OscConfig+0xb0>
 8006064:	4b69      	ldr	r3, [pc, #420]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a68      	ldr	r2, [pc, #416]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 800606a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800606e:	6013      	str	r3, [r2, #0]
 8006070:	4b66      	ldr	r3, [pc, #408]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a65      	ldr	r2, [pc, #404]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 8006076:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800607a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d013      	beq.n	80060ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006084:	f7fd fb8a 	bl	800379c <HAL_GetTick>
 8006088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800608a:	e008      	b.n	800609e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800608c:	f7fd fb86 	bl	800379c <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	2b64      	cmp	r3, #100	@ 0x64
 8006098:	d901      	bls.n	800609e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e207      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800609e:	4b5b      	ldr	r3, [pc, #364]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d0f0      	beq.n	800608c <HAL_RCC_OscConfig+0xc0>
 80060aa:	e014      	b.n	80060d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ac:	f7fd fb76 	bl	800379c <HAL_GetTick>
 80060b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060b2:	e008      	b.n	80060c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060b4:	f7fd fb72 	bl	800379c <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b64      	cmp	r3, #100	@ 0x64
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e1f3      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060c6:	4b51      	ldr	r3, [pc, #324]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1f0      	bne.n	80060b4 <HAL_RCC_OscConfig+0xe8>
 80060d2:	e000      	b.n	80060d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d063      	beq.n	80061aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80060e2:	4b4a      	ldr	r3, [pc, #296]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f003 030c 	and.w	r3, r3, #12
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00b      	beq.n	8006106 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060ee:	4b47      	ldr	r3, [pc, #284]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80060f6:	2b08      	cmp	r3, #8
 80060f8:	d11c      	bne.n	8006134 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060fa:	4b44      	ldr	r3, [pc, #272]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d116      	bne.n	8006134 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006106:	4b41      	ldr	r3, [pc, #260]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	2b00      	cmp	r3, #0
 8006110:	d005      	beq.n	800611e <HAL_RCC_OscConfig+0x152>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d001      	beq.n	800611e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e1c7      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800611e:	4b3b      	ldr	r3, [pc, #236]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	4937      	ldr	r1, [pc, #220]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 800612e:	4313      	orrs	r3, r2
 8006130:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006132:	e03a      	b.n	80061aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d020      	beq.n	800617e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800613c:	4b34      	ldr	r3, [pc, #208]	@ (8006210 <HAL_RCC_OscConfig+0x244>)
 800613e:	2201      	movs	r2, #1
 8006140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006142:	f7fd fb2b 	bl	800379c <HAL_GetTick>
 8006146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006148:	e008      	b.n	800615c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800614a:	f7fd fb27 	bl	800379c <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	2b02      	cmp	r3, #2
 8006156:	d901      	bls.n	800615c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e1a8      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800615c:	4b2b      	ldr	r3, [pc, #172]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b00      	cmp	r3, #0
 8006166:	d0f0      	beq.n	800614a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006168:	4b28      	ldr	r3, [pc, #160]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	00db      	lsls	r3, r3, #3
 8006176:	4925      	ldr	r1, [pc, #148]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 8006178:	4313      	orrs	r3, r2
 800617a:	600b      	str	r3, [r1, #0]
 800617c:	e015      	b.n	80061aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800617e:	4b24      	ldr	r3, [pc, #144]	@ (8006210 <HAL_RCC_OscConfig+0x244>)
 8006180:	2200      	movs	r2, #0
 8006182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006184:	f7fd fb0a 	bl	800379c <HAL_GetTick>
 8006188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800618a:	e008      	b.n	800619e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800618c:	f7fd fb06 	bl	800379c <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	2b02      	cmp	r3, #2
 8006198:	d901      	bls.n	800619e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e187      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800619e:	4b1b      	ldr	r3, [pc, #108]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1f0      	bne.n	800618c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0308 	and.w	r3, r3, #8
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d036      	beq.n	8006224 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d016      	beq.n	80061ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061be:	4b15      	ldr	r3, [pc, #84]	@ (8006214 <HAL_RCC_OscConfig+0x248>)
 80061c0:	2201      	movs	r2, #1
 80061c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061c4:	f7fd faea 	bl	800379c <HAL_GetTick>
 80061c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061ca:	e008      	b.n	80061de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061cc:	f7fd fae6 	bl	800379c <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d901      	bls.n	80061de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e167      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061de:	4b0b      	ldr	r3, [pc, #44]	@ (800620c <HAL_RCC_OscConfig+0x240>)
 80061e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d0f0      	beq.n	80061cc <HAL_RCC_OscConfig+0x200>
 80061ea:	e01b      	b.n	8006224 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061ec:	4b09      	ldr	r3, [pc, #36]	@ (8006214 <HAL_RCC_OscConfig+0x248>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061f2:	f7fd fad3 	bl	800379c <HAL_GetTick>
 80061f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061f8:	e00e      	b.n	8006218 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061fa:	f7fd facf 	bl	800379c <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	2b02      	cmp	r3, #2
 8006206:	d907      	bls.n	8006218 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e150      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
 800620c:	40023800 	.word	0x40023800
 8006210:	42470000 	.word	0x42470000
 8006214:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006218:	4b88      	ldr	r3, [pc, #544]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 800621a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800621c:	f003 0302 	and.w	r3, r3, #2
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1ea      	bne.n	80061fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0304 	and.w	r3, r3, #4
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 8097 	beq.w	8006360 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006232:	2300      	movs	r3, #0
 8006234:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006236:	4b81      	ldr	r3, [pc, #516]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 8006238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10f      	bne.n	8006262 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006242:	2300      	movs	r3, #0
 8006244:	60bb      	str	r3, [r7, #8]
 8006246:	4b7d      	ldr	r3, [pc, #500]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 8006248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624a:	4a7c      	ldr	r2, [pc, #496]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 800624c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006250:	6413      	str	r3, [r2, #64]	@ 0x40
 8006252:	4b7a      	ldr	r3, [pc, #488]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 8006254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800625a:	60bb      	str	r3, [r7, #8]
 800625c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800625e:	2301      	movs	r3, #1
 8006260:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006262:	4b77      	ldr	r3, [pc, #476]	@ (8006440 <HAL_RCC_OscConfig+0x474>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800626a:	2b00      	cmp	r3, #0
 800626c:	d118      	bne.n	80062a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800626e:	4b74      	ldr	r3, [pc, #464]	@ (8006440 <HAL_RCC_OscConfig+0x474>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a73      	ldr	r2, [pc, #460]	@ (8006440 <HAL_RCC_OscConfig+0x474>)
 8006274:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800627a:	f7fd fa8f 	bl	800379c <HAL_GetTick>
 800627e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006280:	e008      	b.n	8006294 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006282:	f7fd fa8b 	bl	800379c <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	2b02      	cmp	r3, #2
 800628e:	d901      	bls.n	8006294 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e10c      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006294:	4b6a      	ldr	r3, [pc, #424]	@ (8006440 <HAL_RCC_OscConfig+0x474>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800629c:	2b00      	cmp	r3, #0
 800629e:	d0f0      	beq.n	8006282 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d106      	bne.n	80062b6 <HAL_RCC_OscConfig+0x2ea>
 80062a8:	4b64      	ldr	r3, [pc, #400]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 80062aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ac:	4a63      	ldr	r2, [pc, #396]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 80062ae:	f043 0301 	orr.w	r3, r3, #1
 80062b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80062b4:	e01c      	b.n	80062f0 <HAL_RCC_OscConfig+0x324>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	2b05      	cmp	r3, #5
 80062bc:	d10c      	bne.n	80062d8 <HAL_RCC_OscConfig+0x30c>
 80062be:	4b5f      	ldr	r3, [pc, #380]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 80062c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062c2:	4a5e      	ldr	r2, [pc, #376]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 80062c4:	f043 0304 	orr.w	r3, r3, #4
 80062c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80062ca:	4b5c      	ldr	r3, [pc, #368]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 80062cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ce:	4a5b      	ldr	r2, [pc, #364]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 80062d0:	f043 0301 	orr.w	r3, r3, #1
 80062d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80062d6:	e00b      	b.n	80062f0 <HAL_RCC_OscConfig+0x324>
 80062d8:	4b58      	ldr	r3, [pc, #352]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 80062da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062dc:	4a57      	ldr	r2, [pc, #348]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 80062de:	f023 0301 	bic.w	r3, r3, #1
 80062e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80062e4:	4b55      	ldr	r3, [pc, #340]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 80062e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062e8:	4a54      	ldr	r2, [pc, #336]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 80062ea:	f023 0304 	bic.w	r3, r3, #4
 80062ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d015      	beq.n	8006324 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062f8:	f7fd fa50 	bl	800379c <HAL_GetTick>
 80062fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062fe:	e00a      	b.n	8006316 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006300:	f7fd fa4c 	bl	800379c <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800630e:	4293      	cmp	r3, r2
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e0cb      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006316:	4b49      	ldr	r3, [pc, #292]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 8006318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d0ee      	beq.n	8006300 <HAL_RCC_OscConfig+0x334>
 8006322:	e014      	b.n	800634e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006324:	f7fd fa3a 	bl	800379c <HAL_GetTick>
 8006328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800632a:	e00a      	b.n	8006342 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800632c:	f7fd fa36 	bl	800379c <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800633a:	4293      	cmp	r3, r2
 800633c:	d901      	bls.n	8006342 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e0b5      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006342:	4b3e      	ldr	r3, [pc, #248]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 8006344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006346:	f003 0302 	and.w	r3, r3, #2
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1ee      	bne.n	800632c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800634e:	7dfb      	ldrb	r3, [r7, #23]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d105      	bne.n	8006360 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006354:	4b39      	ldr	r3, [pc, #228]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 8006356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006358:	4a38      	ldr	r2, [pc, #224]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 800635a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800635e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 80a1 	beq.w	80064ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800636a:	4b34      	ldr	r3, [pc, #208]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f003 030c 	and.w	r3, r3, #12
 8006372:	2b08      	cmp	r3, #8
 8006374:	d05c      	beq.n	8006430 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	2b02      	cmp	r3, #2
 800637c:	d141      	bne.n	8006402 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800637e:	4b31      	ldr	r3, [pc, #196]	@ (8006444 <HAL_RCC_OscConfig+0x478>)
 8006380:	2200      	movs	r2, #0
 8006382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006384:	f7fd fa0a 	bl	800379c <HAL_GetTick>
 8006388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800638a:	e008      	b.n	800639e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800638c:	f7fd fa06 	bl	800379c <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	2b02      	cmp	r3, #2
 8006398:	d901      	bls.n	800639e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e087      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800639e:	4b27      	ldr	r3, [pc, #156]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1f0      	bne.n	800638c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	69da      	ldr	r2, [r3, #28]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	431a      	orrs	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b8:	019b      	lsls	r3, r3, #6
 80063ba:	431a      	orrs	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c0:	085b      	lsrs	r3, r3, #1
 80063c2:	3b01      	subs	r3, #1
 80063c4:	041b      	lsls	r3, r3, #16
 80063c6:	431a      	orrs	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063cc:	061b      	lsls	r3, r3, #24
 80063ce:	491b      	ldr	r1, [pc, #108]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063d4:	4b1b      	ldr	r3, [pc, #108]	@ (8006444 <HAL_RCC_OscConfig+0x478>)
 80063d6:	2201      	movs	r2, #1
 80063d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063da:	f7fd f9df 	bl	800379c <HAL_GetTick>
 80063de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063e0:	e008      	b.n	80063f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063e2:	f7fd f9db 	bl	800379c <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d901      	bls.n	80063f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e05c      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063f4:	4b11      	ldr	r3, [pc, #68]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d0f0      	beq.n	80063e2 <HAL_RCC_OscConfig+0x416>
 8006400:	e054      	b.n	80064ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006402:	4b10      	ldr	r3, [pc, #64]	@ (8006444 <HAL_RCC_OscConfig+0x478>)
 8006404:	2200      	movs	r2, #0
 8006406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006408:	f7fd f9c8 	bl	800379c <HAL_GetTick>
 800640c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800640e:	e008      	b.n	8006422 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006410:	f7fd f9c4 	bl	800379c <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	2b02      	cmp	r3, #2
 800641c:	d901      	bls.n	8006422 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e045      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006422:	4b06      	ldr	r3, [pc, #24]	@ (800643c <HAL_RCC_OscConfig+0x470>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1f0      	bne.n	8006410 <HAL_RCC_OscConfig+0x444>
 800642e:	e03d      	b.n	80064ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d107      	bne.n	8006448 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e038      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
 800643c:	40023800 	.word	0x40023800
 8006440:	40007000 	.word	0x40007000
 8006444:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006448:	4b1b      	ldr	r3, [pc, #108]	@ (80064b8 <HAL_RCC_OscConfig+0x4ec>)
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d028      	beq.n	80064a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006460:	429a      	cmp	r2, r3
 8006462:	d121      	bne.n	80064a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800646e:	429a      	cmp	r2, r3
 8006470:	d11a      	bne.n	80064a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006478:	4013      	ands	r3, r2
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800647e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006480:	4293      	cmp	r3, r2
 8006482:	d111      	bne.n	80064a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800648e:	085b      	lsrs	r3, r3, #1
 8006490:	3b01      	subs	r3, #1
 8006492:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006494:	429a      	cmp	r2, r3
 8006496:	d107      	bne.n	80064a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d001      	beq.n	80064ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e000      	b.n	80064ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	40023800 	.word	0x40023800

080064bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e0cc      	b.n	800666a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064d0:	4b68      	ldr	r3, [pc, #416]	@ (8006674 <HAL_RCC_ClockConfig+0x1b8>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0307 	and.w	r3, r3, #7
 80064d8:	683a      	ldr	r2, [r7, #0]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d90c      	bls.n	80064f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064de:	4b65      	ldr	r3, [pc, #404]	@ (8006674 <HAL_RCC_ClockConfig+0x1b8>)
 80064e0:	683a      	ldr	r2, [r7, #0]
 80064e2:	b2d2      	uxtb	r2, r2
 80064e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064e6:	4b63      	ldr	r3, [pc, #396]	@ (8006674 <HAL_RCC_ClockConfig+0x1b8>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0307 	and.w	r3, r3, #7
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d001      	beq.n	80064f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e0b8      	b.n	800666a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d020      	beq.n	8006546 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	2b00      	cmp	r3, #0
 800650e:	d005      	beq.n	800651c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006510:	4b59      	ldr	r3, [pc, #356]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	4a58      	ldr	r2, [pc, #352]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 8006516:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800651a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0308 	and.w	r3, r3, #8
 8006524:	2b00      	cmp	r3, #0
 8006526:	d005      	beq.n	8006534 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006528:	4b53      	ldr	r3, [pc, #332]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	4a52      	ldr	r2, [pc, #328]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 800652e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006532:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006534:	4b50      	ldr	r3, [pc, #320]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	494d      	ldr	r1, [pc, #308]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 8006542:	4313      	orrs	r3, r2
 8006544:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	d044      	beq.n	80065dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d107      	bne.n	800656a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800655a:	4b47      	ldr	r3, [pc, #284]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d119      	bne.n	800659a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e07f      	b.n	800666a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	2b02      	cmp	r3, #2
 8006570:	d003      	beq.n	800657a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006576:	2b03      	cmp	r3, #3
 8006578:	d107      	bne.n	800658a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800657a:	4b3f      	ldr	r3, [pc, #252]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d109      	bne.n	800659a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e06f      	b.n	800666a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800658a:	4b3b      	ldr	r3, [pc, #236]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e067      	b.n	800666a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800659a:	4b37      	ldr	r3, [pc, #220]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f023 0203 	bic.w	r2, r3, #3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	4934      	ldr	r1, [pc, #208]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065ac:	f7fd f8f6 	bl	800379c <HAL_GetTick>
 80065b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065b2:	e00a      	b.n	80065ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065b4:	f7fd f8f2 	bl	800379c <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d901      	bls.n	80065ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e04f      	b.n	800666a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065ca:	4b2b      	ldr	r3, [pc, #172]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f003 020c 	and.w	r2, r3, #12
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	429a      	cmp	r2, r3
 80065da:	d1eb      	bne.n	80065b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065dc:	4b25      	ldr	r3, [pc, #148]	@ (8006674 <HAL_RCC_ClockConfig+0x1b8>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0307 	and.w	r3, r3, #7
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d20c      	bcs.n	8006604 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ea:	4b22      	ldr	r3, [pc, #136]	@ (8006674 <HAL_RCC_ClockConfig+0x1b8>)
 80065ec:	683a      	ldr	r2, [r7, #0]
 80065ee:	b2d2      	uxtb	r2, r2
 80065f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065f2:	4b20      	ldr	r3, [pc, #128]	@ (8006674 <HAL_RCC_ClockConfig+0x1b8>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0307 	and.w	r3, r3, #7
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d001      	beq.n	8006604 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e032      	b.n	800666a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	d008      	beq.n	8006622 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006610:	4b19      	ldr	r3, [pc, #100]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	4916      	ldr	r1, [pc, #88]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 800661e:	4313      	orrs	r3, r2
 8006620:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0308 	and.w	r3, r3, #8
 800662a:	2b00      	cmp	r3, #0
 800662c:	d009      	beq.n	8006642 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800662e:	4b12      	ldr	r3, [pc, #72]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	00db      	lsls	r3, r3, #3
 800663c:	490e      	ldr	r1, [pc, #56]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 800663e:	4313      	orrs	r3, r2
 8006640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006642:	f000 f821 	bl	8006688 <HAL_RCC_GetSysClockFreq>
 8006646:	4602      	mov	r2, r0
 8006648:	4b0b      	ldr	r3, [pc, #44]	@ (8006678 <HAL_RCC_ClockConfig+0x1bc>)
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	091b      	lsrs	r3, r3, #4
 800664e:	f003 030f 	and.w	r3, r3, #15
 8006652:	490a      	ldr	r1, [pc, #40]	@ (800667c <HAL_RCC_ClockConfig+0x1c0>)
 8006654:	5ccb      	ldrb	r3, [r1, r3]
 8006656:	fa22 f303 	lsr.w	r3, r2, r3
 800665a:	4a09      	ldr	r2, [pc, #36]	@ (8006680 <HAL_RCC_ClockConfig+0x1c4>)
 800665c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800665e:	4b09      	ldr	r3, [pc, #36]	@ (8006684 <HAL_RCC_ClockConfig+0x1c8>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4618      	mov	r0, r3
 8006664:	f7fd f856 	bl	8003714 <HAL_InitTick>

  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	40023c00 	.word	0x40023c00
 8006678:	40023800 	.word	0x40023800
 800667c:	080104ec 	.word	0x080104ec
 8006680:	20000004 	.word	0x20000004
 8006684:	20000008 	.word	0x20000008

08006688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800668c:	b090      	sub	sp, #64	@ 0x40
 800668e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006690:	2300      	movs	r3, #0
 8006692:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006694:	2300      	movs	r3, #0
 8006696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006698:	2300      	movs	r3, #0
 800669a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800669c:	2300      	movs	r3, #0
 800669e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066a0:	4b59      	ldr	r3, [pc, #356]	@ (8006808 <HAL_RCC_GetSysClockFreq+0x180>)
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f003 030c 	and.w	r3, r3, #12
 80066a8:	2b08      	cmp	r3, #8
 80066aa:	d00d      	beq.n	80066c8 <HAL_RCC_GetSysClockFreq+0x40>
 80066ac:	2b08      	cmp	r3, #8
 80066ae:	f200 80a1 	bhi.w	80067f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d002      	beq.n	80066bc <HAL_RCC_GetSysClockFreq+0x34>
 80066b6:	2b04      	cmp	r3, #4
 80066b8:	d003      	beq.n	80066c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80066ba:	e09b      	b.n	80067f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066bc:	4b53      	ldr	r3, [pc, #332]	@ (800680c <HAL_RCC_GetSysClockFreq+0x184>)
 80066be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80066c0:	e09b      	b.n	80067fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066c2:	4b53      	ldr	r3, [pc, #332]	@ (8006810 <HAL_RCC_GetSysClockFreq+0x188>)
 80066c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80066c6:	e098      	b.n	80067fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066c8:	4b4f      	ldr	r3, [pc, #316]	@ (8006808 <HAL_RCC_GetSysClockFreq+0x180>)
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066d0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066d2:	4b4d      	ldr	r3, [pc, #308]	@ (8006808 <HAL_RCC_GetSysClockFreq+0x180>)
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d028      	beq.n	8006730 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066de:	4b4a      	ldr	r3, [pc, #296]	@ (8006808 <HAL_RCC_GetSysClockFreq+0x180>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	099b      	lsrs	r3, r3, #6
 80066e4:	2200      	movs	r2, #0
 80066e6:	623b      	str	r3, [r7, #32]
 80066e8:	627a      	str	r2, [r7, #36]	@ 0x24
 80066ea:	6a3b      	ldr	r3, [r7, #32]
 80066ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80066f0:	2100      	movs	r1, #0
 80066f2:	4b47      	ldr	r3, [pc, #284]	@ (8006810 <HAL_RCC_GetSysClockFreq+0x188>)
 80066f4:	fb03 f201 	mul.w	r2, r3, r1
 80066f8:	2300      	movs	r3, #0
 80066fa:	fb00 f303 	mul.w	r3, r0, r3
 80066fe:	4413      	add	r3, r2
 8006700:	4a43      	ldr	r2, [pc, #268]	@ (8006810 <HAL_RCC_GetSysClockFreq+0x188>)
 8006702:	fba0 1202 	umull	r1, r2, r0, r2
 8006706:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006708:	460a      	mov	r2, r1
 800670a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800670c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800670e:	4413      	add	r3, r2
 8006710:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006714:	2200      	movs	r2, #0
 8006716:	61bb      	str	r3, [r7, #24]
 8006718:	61fa      	str	r2, [r7, #28]
 800671a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800671e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006722:	f7fa fab9 	bl	8000c98 <__aeabi_uldivmod>
 8006726:	4602      	mov	r2, r0
 8006728:	460b      	mov	r3, r1
 800672a:	4613      	mov	r3, r2
 800672c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800672e:	e053      	b.n	80067d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006730:	4b35      	ldr	r3, [pc, #212]	@ (8006808 <HAL_RCC_GetSysClockFreq+0x180>)
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	099b      	lsrs	r3, r3, #6
 8006736:	2200      	movs	r2, #0
 8006738:	613b      	str	r3, [r7, #16]
 800673a:	617a      	str	r2, [r7, #20]
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006742:	f04f 0b00 	mov.w	fp, #0
 8006746:	4652      	mov	r2, sl
 8006748:	465b      	mov	r3, fp
 800674a:	f04f 0000 	mov.w	r0, #0
 800674e:	f04f 0100 	mov.w	r1, #0
 8006752:	0159      	lsls	r1, r3, #5
 8006754:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006758:	0150      	lsls	r0, r2, #5
 800675a:	4602      	mov	r2, r0
 800675c:	460b      	mov	r3, r1
 800675e:	ebb2 080a 	subs.w	r8, r2, sl
 8006762:	eb63 090b 	sbc.w	r9, r3, fp
 8006766:	f04f 0200 	mov.w	r2, #0
 800676a:	f04f 0300 	mov.w	r3, #0
 800676e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006772:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006776:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800677a:	ebb2 0408 	subs.w	r4, r2, r8
 800677e:	eb63 0509 	sbc.w	r5, r3, r9
 8006782:	f04f 0200 	mov.w	r2, #0
 8006786:	f04f 0300 	mov.w	r3, #0
 800678a:	00eb      	lsls	r3, r5, #3
 800678c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006790:	00e2      	lsls	r2, r4, #3
 8006792:	4614      	mov	r4, r2
 8006794:	461d      	mov	r5, r3
 8006796:	eb14 030a 	adds.w	r3, r4, sl
 800679a:	603b      	str	r3, [r7, #0]
 800679c:	eb45 030b 	adc.w	r3, r5, fp
 80067a0:	607b      	str	r3, [r7, #4]
 80067a2:	f04f 0200 	mov.w	r2, #0
 80067a6:	f04f 0300 	mov.w	r3, #0
 80067aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80067ae:	4629      	mov	r1, r5
 80067b0:	028b      	lsls	r3, r1, #10
 80067b2:	4621      	mov	r1, r4
 80067b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80067b8:	4621      	mov	r1, r4
 80067ba:	028a      	lsls	r2, r1, #10
 80067bc:	4610      	mov	r0, r2
 80067be:	4619      	mov	r1, r3
 80067c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c2:	2200      	movs	r2, #0
 80067c4:	60bb      	str	r3, [r7, #8]
 80067c6:	60fa      	str	r2, [r7, #12]
 80067c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067cc:	f7fa fa64 	bl	8000c98 <__aeabi_uldivmod>
 80067d0:	4602      	mov	r2, r0
 80067d2:	460b      	mov	r3, r1
 80067d4:	4613      	mov	r3, r2
 80067d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80067d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006808 <HAL_RCC_GetSysClockFreq+0x180>)
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	0c1b      	lsrs	r3, r3, #16
 80067de:	f003 0303 	and.w	r3, r3, #3
 80067e2:	3301      	adds	r3, #1
 80067e4:	005b      	lsls	r3, r3, #1
 80067e6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80067e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80067ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80067f2:	e002      	b.n	80067fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067f4:	4b05      	ldr	r3, [pc, #20]	@ (800680c <HAL_RCC_GetSysClockFreq+0x184>)
 80067f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80067f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3740      	adds	r7, #64	@ 0x40
 8006800:	46bd      	mov	sp, r7
 8006802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006806:	bf00      	nop
 8006808:	40023800 	.word	0x40023800
 800680c:	00f42400 	.word	0x00f42400
 8006810:	017d7840 	.word	0x017d7840

08006814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006814:	b480      	push	{r7}
 8006816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006818:	4b03      	ldr	r3, [pc, #12]	@ (8006828 <HAL_RCC_GetHCLKFreq+0x14>)
 800681a:	681b      	ldr	r3, [r3, #0]
}
 800681c:	4618      	mov	r0, r3
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	20000004 	.word	0x20000004

0800682c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006830:	f7ff fff0 	bl	8006814 <HAL_RCC_GetHCLKFreq>
 8006834:	4602      	mov	r2, r0
 8006836:	4b05      	ldr	r3, [pc, #20]	@ (800684c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	0a9b      	lsrs	r3, r3, #10
 800683c:	f003 0307 	and.w	r3, r3, #7
 8006840:	4903      	ldr	r1, [pc, #12]	@ (8006850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006842:	5ccb      	ldrb	r3, [r1, r3]
 8006844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006848:	4618      	mov	r0, r3
 800684a:	bd80      	pop	{r7, pc}
 800684c:	40023800 	.word	0x40023800
 8006850:	080104fc 	.word	0x080104fc

08006854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006858:	f7ff ffdc 	bl	8006814 <HAL_RCC_GetHCLKFreq>
 800685c:	4602      	mov	r2, r0
 800685e:	4b05      	ldr	r3, [pc, #20]	@ (8006874 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	0b5b      	lsrs	r3, r3, #13
 8006864:	f003 0307 	and.w	r3, r3, #7
 8006868:	4903      	ldr	r1, [pc, #12]	@ (8006878 <HAL_RCC_GetPCLK2Freq+0x24>)
 800686a:	5ccb      	ldrb	r3, [r1, r3]
 800686c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006870:	4618      	mov	r0, r3
 8006872:	bd80      	pop	{r7, pc}
 8006874:	40023800 	.word	0x40023800
 8006878:	080104fc 	.word	0x080104fc

0800687c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e022      	b.n	80068d4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d105      	bne.n	80068a6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f7fc fb43 	bl	8002f2c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2203      	movs	r2, #3
 80068aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f814 	bl	80068dc <HAL_SD_InitCard>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d001      	beq.n	80068be <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e00a      	b.n	80068d4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80068dc:	b5b0      	push	{r4, r5, r7, lr}
 80068de:	b08e      	sub	sp, #56	@ 0x38
 80068e0:	af04      	add	r7, sp, #16
 80068e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80068e4:	2300      	movs	r3, #0
 80068e6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80068e8:	2300      	movs	r3, #0
 80068ea:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80068ec:	2300      	movs	r3, #0
 80068ee:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80068f0:	2300      	movs	r3, #0
 80068f2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80068f4:	2300      	movs	r3, #0
 80068f6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80068f8:	2376      	movs	r3, #118	@ 0x76
 80068fa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681d      	ldr	r5, [r3, #0]
 8006900:	466c      	mov	r4, sp
 8006902:	f107 0314 	add.w	r3, r7, #20
 8006906:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800690a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800690e:	f107 0308 	add.w	r3, r7, #8
 8006912:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006914:	4628      	mov	r0, r5
 8006916:	f002 fe49 	bl	80095ac <SDIO_Init>
 800691a:	4603      	mov	r3, r0
 800691c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8006920:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006924:	2b00      	cmp	r3, #0
 8006926:	d001      	beq.n	800692c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e04f      	b.n	80069cc <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800692c:	4b29      	ldr	r3, [pc, #164]	@ (80069d4 <HAL_SD_InitCard+0xf8>)
 800692e:	2200      	movs	r2, #0
 8006930:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4618      	mov	r0, r3
 8006938:	f002 fe81 	bl	800963e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800693c:	4b25      	ldr	r3, [pc, #148]	@ (80069d4 <HAL_SD_InitCard+0xf8>)
 800693e:	2201      	movs	r2, #1
 8006940:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8006942:	2002      	movs	r0, #2
 8006944:	f7fc ff36 	bl	80037b4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f001 f805 	bl	8007958 <SD_PowerON>
 800694e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006950:	6a3b      	ldr	r3, [r7, #32]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00b      	beq.n	800696e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	431a      	orrs	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e02e      	b.n	80069cc <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 ff24 	bl	80077bc <SD_InitCard>
 8006974:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00b      	beq.n	8006994 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	431a      	orrs	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e01b      	b.n	80069cc <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800699c:	4618      	mov	r0, r3
 800699e:	f002 fee0 	bl	8009762 <SDMMC_CmdBlockLength>
 80069a2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80069a4:	6a3b      	ldr	r3, [r7, #32]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00f      	beq.n	80069ca <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a0a      	ldr	r2, [pc, #40]	@ (80069d8 <HAL_SD_InitCard+0xfc>)
 80069b0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	431a      	orrs	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e000      	b.n	80069cc <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3728      	adds	r7, #40	@ 0x28
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bdb0      	pop	{r4, r5, r7, pc}
 80069d4:	422580a0 	.word	0x422580a0
 80069d8:	004005ff 	.word	0x004005ff

080069dc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b08c      	sub	sp, #48	@ 0x30
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
 80069e8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d107      	bne.n	8006a04 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e0c0      	b.n	8006b86 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	f040 80b9 	bne.w	8006b84 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006a18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	441a      	add	r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d907      	bls.n	8006a36 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a2a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e0a7      	b.n	8006b86 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2203      	movs	r2, #3
 8006a3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2200      	movs	r2, #0
 8006a44:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	6812      	ldr	r2, [r2, #0]
 8006a50:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8006a54:	f043 0302 	orr.w	r3, r3, #2
 8006a58:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a5e:	4a4c      	ldr	r2, [pc, #304]	@ (8006b90 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8006a60:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a66:	4a4b      	ldr	r2, [pc, #300]	@ (8006b94 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006a68:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a6e:	2200      	movs	r2, #0
 8006a70:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a76:	2200      	movs	r2, #0
 8006a78:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a8a:	689a      	ldr	r2, [r3, #8]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	430a      	orrs	r2, r1
 8006a94:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3380      	adds	r3, #128	@ 0x80
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	025b      	lsls	r3, r3, #9
 8006aa8:	089b      	lsrs	r3, r3, #2
 8006aaa:	f7fd fad9 	bl	8004060 <HAL_DMA_Start_IT>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d017      	beq.n	8006ae4 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8006ac2:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a33      	ldr	r2, [pc, #204]	@ (8006b98 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006aca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e050      	b.n	8006b86 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006ae4:	4b2d      	ldr	r3, [pc, #180]	@ (8006b9c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d002      	beq.n	8006af8 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8006af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af4:	025b      	lsls	r3, r3, #9
 8006af6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006af8:	f04f 33ff 	mov.w	r3, #4294967295
 8006afc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	025b      	lsls	r3, r3, #9
 8006b02:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006b04:	2390      	movs	r3, #144	@ 0x90
 8006b06:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006b08:	2302      	movs	r3, #2
 8006b0a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006b10:	2301      	movs	r3, #1
 8006b12:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f107 0210 	add.w	r2, r7, #16
 8006b1c:	4611      	mov	r1, r2
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f002 fdf3 	bl	800970a <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d90a      	bls.n	8006b40 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2282      	movs	r2, #130	@ 0x82
 8006b2e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b36:	4618      	mov	r0, r3
 8006b38:	f002 fe57 	bl	80097ea <SDMMC_CmdReadMultiBlock>
 8006b3c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006b3e:	e009      	b.n	8006b54 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2281      	movs	r2, #129	@ 0x81
 8006b44:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f002 fe2a 	bl	80097a6 <SDMMC_CmdReadSingleBlock>
 8006b52:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d012      	beq.n	8006b80 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a0e      	ldr	r2, [pc, #56]	@ (8006b98 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006b60:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b68:	431a      	orrs	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e002      	b.n	8006b86 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8006b80:	2300      	movs	r3, #0
 8006b82:	e000      	b.n	8006b86 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8006b84:	2302      	movs	r3, #2
  }
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3730      	adds	r7, #48	@ 0x30
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	080075cb 	.word	0x080075cb
 8006b94:	0800763d 	.word	0x0800763d
 8006b98:	004005ff 	.word	0x004005ff
 8006b9c:	4225858c 	.word	0x4225858c

08006ba0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b08c      	sub	sp, #48	@ 0x30
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
 8006bac:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d107      	bne.n	8006bc8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bbc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e0c5      	b.n	8006d54 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	f040 80be 	bne.w	8006d52 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006bdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	441a      	add	r2, r3
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d907      	bls.n	8006bfa <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bee:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e0ac      	b.n	8006d54 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2203      	movs	r2, #3
 8006bfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2200      	movs	r2, #0
 8006c08:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	6812      	ldr	r2, [r2, #0]
 8006c14:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8006c18:	f043 0302 	orr.w	r3, r3, #2
 8006c1c:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c22:	4a4e      	ldr	r2, [pc, #312]	@ (8006d5c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8006c24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c2a:	4a4d      	ldr	r2, [pc, #308]	@ (8006d60 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006c2c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c32:	2200      	movs	r2, #0
 8006c34:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d002      	beq.n	8006c44 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8006c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c40:	025b      	lsls	r3, r3, #9
 8006c42:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d90a      	bls.n	8006c60 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	22a0      	movs	r2, #160	@ 0xa0
 8006c4e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c56:	4618      	mov	r0, r3
 8006c58:	f002 fe0b 	bl	8009872 <SDMMC_CmdWriteMultiBlock>
 8006c5c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006c5e:	e009      	b.n	8006c74 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2290      	movs	r2, #144	@ 0x90
 8006c64:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f002 fdde 	bl	800982e <SDMMC_CmdWriteSingleBlock>
 8006c72:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d012      	beq.n	8006ca0 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a39      	ldr	r2, [pc, #228]	@ (8006d64 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006c80:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c88:	431a      	orrs	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e059      	b.n	8006d54 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006ca0:	4b31      	ldr	r3, [pc, #196]	@ (8006d68 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006caa:	2240      	movs	r2, #64	@ 0x40
 8006cac:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cbe:	689a      	ldr	r2, [r3, #8]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006cce:	68b9      	ldr	r1, [r7, #8]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3380      	adds	r3, #128	@ 0x80
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	025b      	lsls	r3, r3, #9
 8006cdc:	089b      	lsrs	r3, r3, #2
 8006cde:	f7fd f9bf 	bl	8004060 <HAL_DMA_Start_IT>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d01c      	beq.n	8006d22 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	6812      	ldr	r2, [r2, #0]
 8006cf2:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8006cf6:	f023 0302 	bic.w	r3, r3, #2
 8006cfa:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a18      	ldr	r2, [pc, #96]	@ (8006d64 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006d02:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d08:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e018      	b.n	8006d54 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006d22:	f04f 33ff 	mov.w	r3, #4294967295
 8006d26:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	025b      	lsls	r3, r3, #9
 8006d2c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006d2e:	2390      	movs	r3, #144	@ 0x90
 8006d30:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006d32:	2300      	movs	r3, #0
 8006d34:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f107 0210 	add.w	r2, r7, #16
 8006d46:	4611      	mov	r1, r2
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f002 fcde 	bl	800970a <SDIO_ConfigData>

      return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	e000      	b.n	8006d54 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8006d52:	2302      	movs	r3, #2
  }
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3730      	adds	r7, #48	@ 0x30
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	080075a1 	.word	0x080075a1
 8006d60:	0800763d 	.word	0x0800763d
 8006d64:	004005ff 	.word	0x004005ff
 8006d68:	4225858c 	.word	0x4225858c

08006d6c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d78:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d008      	beq.n	8006d9a <HAL_SD_IRQHandler+0x2e>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f003 0308 	and.w	r3, r3, #8
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f001 f806 	bl	8007da4 <SD_Read_IT>
 8006d98:	e165      	b.n	8007066 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f000 808f 	beq.w	8006ec8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006db2:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	6812      	ldr	r2, [r2, #0]
 8006dbe:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8006dc2:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8006dc6:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f022 0201 	bic.w	r2, r2, #1
 8006dd6:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f003 0308 	and.w	r3, r3, #8
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d039      	beq.n	8006e56 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f003 0302 	and.w	r3, r3, #2
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d104      	bne.n	8006df6 <HAL_SD_IRQHandler+0x8a>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f003 0320 	and.w	r3, r3, #32
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d011      	beq.n	8006e1a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f002 fd5c 	bl	80098b8 <SDMMC_CmdStopTransfer>
 8006e00:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d008      	beq.n	8006e1a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 f92f 	bl	8007078 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006e22:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f003 0301 	and.w	r3, r3, #1
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d104      	bne.n	8006e46 <HAL_SD_IRQHandler+0xda>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f003 0302 	and.w	r3, r3, #2
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d003      	beq.n	8006e4e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f003 f9c2 	bl	800a1d0 <HAL_SD_RxCpltCallback>
 8006e4c:	e10b      	b.n	8007066 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f003 f9b4 	bl	800a1bc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006e54:	e107      	b.n	8007066 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 8102 	beq.w	8007066 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f003 0320 	and.w	r3, r3, #32
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d011      	beq.n	8006e90 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f002 fd21 	bl	80098b8 <SDMMC_CmdStopTransfer>
 8006e76:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d008      	beq.n	8006e90 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	431a      	orrs	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f8f4 	bl	8007078 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f040 80e5 	bne.w	8007066 <HAL_SD_IRQHandler+0x2fa>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f040 80df 	bne.w	8007066 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f022 0208 	bic.w	r2, r2, #8
 8006eb6:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f003 f97b 	bl	800a1bc <HAL_SD_TxCpltCallback>
}
 8006ec6:	e0ce      	b.n	8007066 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ece:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d008      	beq.n	8006ee8 <HAL_SD_IRQHandler+0x17c>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f003 0308 	and.w	r3, r3, #8
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 ffb0 	bl	8007e46 <SD_Write_IT>
 8006ee6:	e0be      	b.n	8007066 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006eee:	f240 233a 	movw	r3, #570	@ 0x23a
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f000 80b6 	beq.w	8007066 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f00:	f003 0302 	and.w	r3, r3, #2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d005      	beq.n	8006f14 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f0c:	f043 0202 	orr.w	r2, r3, #2
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f1a:	f003 0308 	and.w	r3, r3, #8
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d005      	beq.n	8006f2e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f26:	f043 0208 	orr.w	r2, r3, #8
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f34:	f003 0320 	and.w	r3, r3, #32
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d005      	beq.n	8006f48 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f40:	f043 0220 	orr.w	r2, r3, #32
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f4e:	f003 0310 	and.w	r3, r3, #16
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d005      	beq.n	8006f62 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f5a:	f043 0210 	orr.w	r2, r3, #16
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d005      	beq.n	8006f7c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f74:	f043 0208 	orr.w	r2, r3, #8
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f240 723a 	movw	r2, #1850	@ 0x73a
 8006f84:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	6812      	ldr	r2, [r2, #0]
 8006f90:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8006f94:	f023 0302 	bic.w	r3, r3, #2
 8006f98:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f002 fc8a 	bl	80098b8 <SDMMC_CmdStopTransfer>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006faa:	431a      	orrs	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f003 0308 	and.w	r3, r3, #8
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00a      	beq.n	8006fd0 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 f855 	bl	8007078 <HAL_SD_ErrorCallback>
}
 8006fce:	e04a      	b.n	8007066 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d045      	beq.n	8007066 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f003 0310 	and.w	r3, r3, #16
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d104      	bne.n	8006fee <HAL_SD_IRQHandler+0x282>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f003 0320 	and.w	r3, r3, #32
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d011      	beq.n	8007012 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ff2:	4a1f      	ldr	r2, [pc, #124]	@ (8007070 <HAL_SD_IRQHandler+0x304>)
 8006ff4:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7fd f8f8 	bl	80041f0 <HAL_DMA_Abort_IT>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d02f      	beq.n	8007066 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800700a:	4618      	mov	r0, r3
 800700c:	f000 fb68 	bl	80076e0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007010:	e029      	b.n	8007066 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f003 0301 	and.w	r3, r3, #1
 8007018:	2b00      	cmp	r3, #0
 800701a:	d104      	bne.n	8007026 <HAL_SD_IRQHandler+0x2ba>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f003 0302 	and.w	r3, r3, #2
 8007022:	2b00      	cmp	r3, #0
 8007024:	d011      	beq.n	800704a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800702a:	4a12      	ldr	r2, [pc, #72]	@ (8007074 <HAL_SD_IRQHandler+0x308>)
 800702c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007032:	4618      	mov	r0, r3
 8007034:	f7fd f8dc 	bl	80041f0 <HAL_DMA_Abort_IT>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d013      	beq.n	8007066 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007042:	4618      	mov	r0, r3
 8007044:	f000 fb83 	bl	800774e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007048:	e00d      	b.n	8007066 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f003 f8a2 	bl	800a1a8 <HAL_SD_AbortCallback>
}
 8007064:	e7ff      	b.n	8007066 <HAL_SD_IRQHandler+0x2fa>
 8007066:	bf00      	nop
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	080076e1 	.word	0x080076e1
 8007074:	0800774f 	.word	0x0800774f

08007078 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800709a:	0f9b      	lsrs	r3, r3, #30
 800709c:	b2da      	uxtb	r2, r3
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070a6:	0e9b      	lsrs	r3, r3, #26
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	f003 030f 	and.w	r3, r3, #15
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070b8:	0e1b      	lsrs	r3, r3, #24
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	f003 0303 	and.w	r3, r3, #3
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070ca:	0c1b      	lsrs	r3, r3, #16
 80070cc:	b2da      	uxtb	r2, r3
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070d6:	0a1b      	lsrs	r3, r3, #8
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070e2:	b2da      	uxtb	r2, r3
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070ec:	0d1b      	lsrs	r3, r3, #20
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070f8:	0c1b      	lsrs	r3, r3, #16
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	f003 030f 	and.w	r3, r3, #15
 8007100:	b2da      	uxtb	r2, r3
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800710a:	0bdb      	lsrs	r3, r3, #15
 800710c:	b2db      	uxtb	r3, r3
 800710e:	f003 0301 	and.w	r3, r3, #1
 8007112:	b2da      	uxtb	r2, r3
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800711c:	0b9b      	lsrs	r3, r3, #14
 800711e:	b2db      	uxtb	r3, r3
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	b2da      	uxtb	r2, r3
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800712e:	0b5b      	lsrs	r3, r3, #13
 8007130:	b2db      	uxtb	r3, r3
 8007132:	f003 0301 	and.w	r3, r3, #1
 8007136:	b2da      	uxtb	r2, r3
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007140:	0b1b      	lsrs	r3, r3, #12
 8007142:	b2db      	uxtb	r3, r3
 8007144:	f003 0301 	and.w	r3, r3, #1
 8007148:	b2da      	uxtb	r2, r3
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2200      	movs	r2, #0
 8007152:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007158:	2b00      	cmp	r3, #0
 800715a:	d163      	bne.n	8007224 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007160:	009a      	lsls	r2, r3, #2
 8007162:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007166:	4013      	ands	r3, r2
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800716c:	0f92      	lsrs	r2, r2, #30
 800716e:	431a      	orrs	r2, r3
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007178:	0edb      	lsrs	r3, r3, #27
 800717a:	b2db      	uxtb	r3, r3
 800717c:	f003 0307 	and.w	r3, r3, #7
 8007180:	b2da      	uxtb	r2, r3
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800718a:	0e1b      	lsrs	r3, r3, #24
 800718c:	b2db      	uxtb	r3, r3
 800718e:	f003 0307 	and.w	r3, r3, #7
 8007192:	b2da      	uxtb	r2, r3
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800719c:	0d5b      	lsrs	r3, r3, #21
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	f003 0307 	and.w	r3, r3, #7
 80071a4:	b2da      	uxtb	r2, r3
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071ae:	0c9b      	lsrs	r3, r3, #18
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	f003 0307 	and.w	r3, r3, #7
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071c0:	0bdb      	lsrs	r3, r3, #15
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	f003 0307 	and.w	r3, r3, #7
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	1c5a      	adds	r2, r3, #1
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	7e1b      	ldrb	r3, [r3, #24]
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	f003 0307 	and.w	r3, r3, #7
 80071e2:	3302      	adds	r3, #2
 80071e4:	2201      	movs	r2, #1
 80071e6:	fa02 f303 	lsl.w	r3, r2, r3
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80071ee:	fb03 f202 	mul.w	r2, r3, r2
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	7a1b      	ldrb	r3, [r3, #8]
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	f003 030f 	and.w	r3, r3, #15
 8007200:	2201      	movs	r2, #1
 8007202:	409a      	lsls	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007210:	0a52      	lsrs	r2, r2, #9
 8007212:	fb03 f202 	mul.w	r2, r3, r2
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007220:	661a      	str	r2, [r3, #96]	@ 0x60
 8007222:	e031      	b.n	8007288 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007228:	2b01      	cmp	r3, #1
 800722a:	d11d      	bne.n	8007268 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007230:	041b      	lsls	r3, r3, #16
 8007232:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800723a:	0c1b      	lsrs	r3, r3, #16
 800723c:	431a      	orrs	r2, r3
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	3301      	adds	r3, #1
 8007248:	029a      	lsls	r2, r3, #10
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800725c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	661a      	str	r2, [r3, #96]	@ 0x60
 8007266:	e00f      	b.n	8007288 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a58      	ldr	r2, [pc, #352]	@ (80073d0 <HAL_SD_GetCardCSD+0x344>)
 800726e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007274:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e09d      	b.n	80073c4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800728c:	0b9b      	lsrs	r3, r3, #14
 800728e:	b2db      	uxtb	r3, r3
 8007290:	f003 0301 	and.w	r3, r3, #1
 8007294:	b2da      	uxtb	r2, r3
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800729e:	09db      	lsrs	r3, r3, #7
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072a6:	b2da      	uxtb	r2, r3
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072b6:	b2da      	uxtb	r2, r3
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072c0:	0fdb      	lsrs	r3, r3, #31
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072cc:	0f5b      	lsrs	r3, r3, #29
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	f003 0303 	and.w	r3, r3, #3
 80072d4:	b2da      	uxtb	r2, r3
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072de:	0e9b      	lsrs	r3, r3, #26
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	f003 0307 	and.w	r3, r3, #7
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072f0:	0d9b      	lsrs	r3, r3, #22
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	f003 030f 	and.w	r3, r3, #15
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007302:	0d5b      	lsrs	r3, r3, #21
 8007304:	b2db      	uxtb	r3, r3
 8007306:	f003 0301 	and.w	r3, r3, #1
 800730a:	b2da      	uxtb	r2, r3
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800731e:	0c1b      	lsrs	r3, r3, #16
 8007320:	b2db      	uxtb	r3, r3
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	b2da      	uxtb	r2, r3
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007332:	0bdb      	lsrs	r3, r3, #15
 8007334:	b2db      	uxtb	r3, r3
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	b2da      	uxtb	r2, r3
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007346:	0b9b      	lsrs	r3, r3, #14
 8007348:	b2db      	uxtb	r3, r3
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	b2da      	uxtb	r2, r3
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800735a:	0b5b      	lsrs	r3, r3, #13
 800735c:	b2db      	uxtb	r3, r3
 800735e:	f003 0301 	and.w	r3, r3, #1
 8007362:	b2da      	uxtb	r2, r3
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800736e:	0b1b      	lsrs	r3, r3, #12
 8007370:	b2db      	uxtb	r3, r3
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	b2da      	uxtb	r2, r3
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007382:	0a9b      	lsrs	r3, r3, #10
 8007384:	b2db      	uxtb	r3, r3
 8007386:	f003 0303 	and.w	r3, r3, #3
 800738a:	b2da      	uxtb	r2, r3
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007396:	0a1b      	lsrs	r3, r3, #8
 8007398:	b2db      	uxtb	r3, r3
 800739a:	f003 0303 	and.w	r3, r3, #3
 800739e:	b2da      	uxtb	r2, r3
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073aa:	085b      	lsrs	r3, r3, #1
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr
 80073d0:	004005ff 	.word	0x004005ff

080073d4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800742c:	b5b0      	push	{r4, r5, r7, lr}
 800742e:	b08e      	sub	sp, #56	@ 0x38
 8007430:	af04      	add	r7, sp, #16
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2203      	movs	r2, #3
 8007440:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007448:	2b03      	cmp	r3, #3
 800744a:	d02e      	beq.n	80074aa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007452:	d106      	bne.n	8007462 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007458:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007460:	e029      	b.n	80074b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007468:	d10a      	bne.n	8007480 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fb2a 	bl	8007ac4 <SD_WideBus_Enable>
 8007470:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007476:	6a3b      	ldr	r3, [r7, #32]
 8007478:	431a      	orrs	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	639a      	str	r2, [r3, #56]	@ 0x38
 800747e:	e01a      	b.n	80074b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d10a      	bne.n	800749c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fb67 	bl	8007b5a <SD_WideBus_Disable>
 800748c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	431a      	orrs	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	639a      	str	r2, [r3, #56]	@ 0x38
 800749a:	e00c      	b.n	80074b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074a0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80074a8:	e005      	b.n	80074b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ae:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00b      	beq.n	80074d6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a26      	ldr	r2, [pc, #152]	@ (800755c <HAL_SD_ConfigWideBusOperation+0x130>)
 80074c4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80074d4:	e01f      	b.n	8007516 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681d      	ldr	r5, [r3, #0]
 80074fc:	466c      	mov	r4, sp
 80074fe:	f107 0314 	add.w	r3, r7, #20
 8007502:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007506:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800750a:	f107 0308 	add.w	r3, r7, #8
 800750e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007510:	4628      	mov	r0, r5
 8007512:	f002 f84b 	bl	80095ac <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800751e:	4618      	mov	r0, r3
 8007520:	f002 f91f 	bl	8009762 <SDMMC_CmdBlockLength>
 8007524:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007526:	6a3b      	ldr	r3, [r7, #32]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00c      	beq.n	8007546 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a0a      	ldr	r2, [pc, #40]	@ (800755c <HAL_SD_ConfigWideBusOperation+0x130>)
 8007532:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	431a      	orrs	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800754e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007552:	4618      	mov	r0, r3
 8007554:	3728      	adds	r7, #40	@ 0x28
 8007556:	46bd      	mov	sp, r7
 8007558:	bdb0      	pop	{r4, r5, r7, pc}
 800755a:	bf00      	nop
 800755c:	004005ff 	.word	0x004005ff

08007560 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007568:	2300      	movs	r3, #0
 800756a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800756c:	f107 030c 	add.w	r3, r7, #12
 8007570:	4619      	mov	r1, r3
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 fa7e 	bl	8007a74 <SD_SendStatus>
 8007578:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d005      	beq.n	800758c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	431a      	orrs	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	0a5b      	lsrs	r3, r3, #9
 8007590:	f003 030f 	and.w	r3, r3, #15
 8007594:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007596:	693b      	ldr	r3, [r7, #16]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3718      	adds	r7, #24
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ac:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80075bc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80075be:	bf00      	nop
 80075c0:	3714      	adds	r7, #20
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b084      	sub	sp, #16
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075d6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075dc:	2b82      	cmp	r3, #130	@ 0x82
 80075de:	d111      	bne.n	8007604 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4618      	mov	r0, r3
 80075e6:	f002 f967 	bl	80098b8 <SDMMC_CmdStopTransfer>
 80075ea:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d008      	beq.n	8007604 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	431a      	orrs	r2, r3
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f7ff fd3a 	bl	8007078 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f022 0208 	bic.w	r2, r2, #8
 8007612:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f240 523a 	movw	r2, #1338	@ 0x53a
 800761c:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f002 fdcf 	bl	800a1d0 <HAL_SD_RxCpltCallback>
#endif
}
 8007632:	bf00      	nop
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
	...

0800763c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b086      	sub	sp, #24
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007648:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f7fc ff7c 	bl	8004548 <HAL_DMA_GetError>
 8007650:	4603      	mov	r3, r0
 8007652:	2b02      	cmp	r3, #2
 8007654:	d03e      	beq.n	80076d4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800765a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800765c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007664:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d002      	beq.n	8007672 <SD_DMAError+0x36>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d12d      	bne.n	80076ce <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a19      	ldr	r2, [pc, #100]	@ (80076dc <SD_DMAError+0xa0>)
 8007678:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8007688:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800768e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007696:	6978      	ldr	r0, [r7, #20]
 8007698:	f7ff ff62 	bl	8007560 <HAL_SD_GetCardState>
 800769c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	2b06      	cmp	r3, #6
 80076a2:	d002      	beq.n	80076aa <SD_DMAError+0x6e>
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	2b05      	cmp	r3, #5
 80076a8:	d10a      	bne.n	80076c0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4618      	mov	r0, r3
 80076b0:	f002 f902 	bl	80098b8 <SDMMC_CmdStopTransfer>
 80076b4:	4602      	mov	r2, r0
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ba:	431a      	orrs	r2, r3
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	2200      	movs	r2, #0
 80076cc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80076ce:	6978      	ldr	r0, [r7, #20]
 80076d0:	f7ff fcd2 	bl	8007078 <HAL_SD_ErrorCallback>
#endif
  }
}
 80076d4:	bf00      	nop
 80076d6:	3718      	adds	r7, #24
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	004005ff 	.word	0x004005ff

080076e0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ec:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f240 523a 	movw	r2, #1338	@ 0x53a
 80076f6:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f7ff ff31 	bl	8007560 <HAL_SD_GetCardState>
 80076fe:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	2b06      	cmp	r3, #6
 8007712:	d002      	beq.n	800771a <SD_DMATxAbort+0x3a>
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	2b05      	cmp	r3, #5
 8007718:	d10a      	bne.n	8007730 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4618      	mov	r0, r3
 8007720:	f002 f8ca 	bl	80098b8 <SDMMC_CmdStopTransfer>
 8007724:	4602      	mov	r2, r0
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800772a:	431a      	orrs	r2, r3
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007734:	2b00      	cmp	r3, #0
 8007736:	d103      	bne.n	8007740 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f002 fd35 	bl	800a1a8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800773e:	e002      	b.n	8007746 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f7ff fc99 	bl	8007078 <HAL_SD_ErrorCallback>
}
 8007746:	bf00      	nop
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b084      	sub	sp, #16
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800775a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007764:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f7ff fefa 	bl	8007560 <HAL_SD_GetCardState>
 800776c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	2b06      	cmp	r3, #6
 8007780:	d002      	beq.n	8007788 <SD_DMARxAbort+0x3a>
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	2b05      	cmp	r3, #5
 8007786:	d10a      	bne.n	800779e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4618      	mov	r0, r3
 800778e:	f002 f893 	bl	80098b8 <SDMMC_CmdStopTransfer>
 8007792:	4602      	mov	r2, r0
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007798:	431a      	orrs	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d103      	bne.n	80077ae <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f002 fcfe 	bl	800a1a8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80077ac:	e002      	b.n	80077b4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f7ff fc62 	bl	8007078 <HAL_SD_ErrorCallback>
}
 80077b4:	bf00      	nop
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80077bc:	b5b0      	push	{r4, r5, r7, lr}
 80077be:	b094      	sub	sp, #80	@ 0x50
 80077c0:	af04      	add	r7, sp, #16
 80077c2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80077c4:	2301      	movs	r3, #1
 80077c6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f001 ff44 	bl	800965a <SDIO_GetPowerState>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d102      	bne.n	80077de <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80077d8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80077dc:	e0b8      	b.n	8007950 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	d02f      	beq.n	8007846 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4618      	mov	r0, r3
 80077ec:	f002 f96e 	bl	8009acc <SDMMC_CmdSendCID>
 80077f0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80077f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <SD_InitCard+0x40>
    {
      return errorstate;
 80077f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077fa:	e0a9      	b.n	8007950 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2100      	movs	r1, #0
 8007802:	4618      	mov	r0, r3
 8007804:	f001 ff6e 	bl	80096e4 <SDIO_GetResponse>
 8007808:	4602      	mov	r2, r0
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2104      	movs	r1, #4
 8007814:	4618      	mov	r0, r3
 8007816:	f001 ff65 	bl	80096e4 <SDIO_GetResponse>
 800781a:	4602      	mov	r2, r0
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2108      	movs	r1, #8
 8007826:	4618      	mov	r0, r3
 8007828:	f001 ff5c 	bl	80096e4 <SDIO_GetResponse>
 800782c:	4602      	mov	r2, r0
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	210c      	movs	r1, #12
 8007838:	4618      	mov	r0, r3
 800783a:	f001 ff53 	bl	80096e4 <SDIO_GetResponse>
 800783e:	4602      	mov	r2, r0
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800784a:	2b03      	cmp	r3, #3
 800784c:	d00d      	beq.n	800786a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f107 020e 	add.w	r2, r7, #14
 8007856:	4611      	mov	r1, r2
 8007858:	4618      	mov	r0, r3
 800785a:	f002 f974 	bl	8009b46 <SDMMC_CmdSetRelAdd>
 800785e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007860:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <SD_InitCard+0xae>
    {
      return errorstate;
 8007866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007868:	e072      	b.n	8007950 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800786e:	2b03      	cmp	r3, #3
 8007870:	d036      	beq.n	80078e0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007872:	89fb      	ldrh	r3, [r7, #14]
 8007874:	461a      	mov	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007882:	041b      	lsls	r3, r3, #16
 8007884:	4619      	mov	r1, r3
 8007886:	4610      	mov	r0, r2
 8007888:	f002 f93e 	bl	8009b08 <SDMMC_CmdSendCSD>
 800788c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800788e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007890:	2b00      	cmp	r3, #0
 8007892:	d001      	beq.n	8007898 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007896:	e05b      	b.n	8007950 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2100      	movs	r1, #0
 800789e:	4618      	mov	r0, r3
 80078a0:	f001 ff20 	bl	80096e4 <SDIO_GetResponse>
 80078a4:	4602      	mov	r2, r0
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2104      	movs	r1, #4
 80078b0:	4618      	mov	r0, r3
 80078b2:	f001 ff17 	bl	80096e4 <SDIO_GetResponse>
 80078b6:	4602      	mov	r2, r0
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2108      	movs	r1, #8
 80078c2:	4618      	mov	r0, r3
 80078c4:	f001 ff0e 	bl	80096e4 <SDIO_GetResponse>
 80078c8:	4602      	mov	r2, r0
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	210c      	movs	r1, #12
 80078d4:	4618      	mov	r0, r3
 80078d6:	f001 ff05 	bl	80096e4 <SDIO_GetResponse>
 80078da:	4602      	mov	r2, r0
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2104      	movs	r1, #4
 80078e6:	4618      	mov	r0, r3
 80078e8:	f001 fefc 	bl	80096e4 <SDIO_GetResponse>
 80078ec:	4603      	mov	r3, r0
 80078ee:	0d1a      	lsrs	r2, r3, #20
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80078f4:	f107 0310 	add.w	r3, r7, #16
 80078f8:	4619      	mov	r1, r3
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7ff fbc6 	bl	800708c <HAL_SD_GetCardCSD>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d002      	beq.n	800790c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007906:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800790a:	e021      	b.n	8007950 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6819      	ldr	r1, [r3, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007914:	041b      	lsls	r3, r3, #16
 8007916:	2200      	movs	r2, #0
 8007918:	461c      	mov	r4, r3
 800791a:	4615      	mov	r5, r2
 800791c:	4622      	mov	r2, r4
 800791e:	462b      	mov	r3, r5
 8007920:	4608      	mov	r0, r1
 8007922:	f001 ffeb 	bl	80098fc <SDMMC_CmdSelDesel>
 8007926:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800792a:	2b00      	cmp	r3, #0
 800792c:	d001      	beq.n	8007932 <SD_InitCard+0x176>
  {
    return errorstate;
 800792e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007930:	e00e      	b.n	8007950 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681d      	ldr	r5, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	466c      	mov	r4, sp
 800793a:	f103 0210 	add.w	r2, r3, #16
 800793e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007940:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007944:	3304      	adds	r3, #4
 8007946:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007948:	4628      	mov	r0, r5
 800794a:	f001 fe2f 	bl	80095ac <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	3740      	adds	r7, #64	@ 0x40
 8007954:	46bd      	mov	sp, r7
 8007956:	bdb0      	pop	{r4, r5, r7, pc}

08007958 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b086      	sub	sp, #24
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007960:	2300      	movs	r3, #0
 8007962:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007964:	2300      	movs	r3, #0
 8007966:	617b      	str	r3, [r7, #20]
 8007968:	2300      	movs	r3, #0
 800796a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4618      	mov	r0, r3
 8007972:	f001 ffe6 	bl	8009942 <SDMMC_CmdGoIdleState>
 8007976:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <SD_PowerON+0x2a>
  {
    return errorstate;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	e072      	b.n	8007a68 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4618      	mov	r0, r3
 8007988:	f001 fff9 	bl	800997e <SDMMC_CmdOperCond>
 800798c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00d      	beq.n	80079b0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4618      	mov	r0, r3
 80079a0:	f001 ffcf 	bl	8009942 <SDMMC_CmdGoIdleState>
 80079a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d004      	beq.n	80079b6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	e05b      	b.n	8007a68 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d137      	bne.n	8007a2e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2100      	movs	r1, #0
 80079c4:	4618      	mov	r0, r3
 80079c6:	f001 fff9 	bl	80099bc <SDMMC_CmdAppCommand>
 80079ca:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d02d      	beq.n	8007a2e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80079d2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80079d6:	e047      	b.n	8007a68 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2100      	movs	r1, #0
 80079de:	4618      	mov	r0, r3
 80079e0:	f001 ffec 	bl	80099bc <SDMMC_CmdAppCommand>
 80079e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d001      	beq.n	80079f0 <SD_PowerON+0x98>
    {
      return errorstate;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	e03b      	b.n	8007a68 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	491e      	ldr	r1, [pc, #120]	@ (8007a70 <SD_PowerON+0x118>)
 80079f6:	4618      	mov	r0, r3
 80079f8:	f002 f802 	bl	8009a00 <SDMMC_CmdAppOperCommand>
 80079fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d002      	beq.n	8007a0a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007a08:	e02e      	b.n	8007a68 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2100      	movs	r1, #0
 8007a10:	4618      	mov	r0, r3
 8007a12:	f001 fe67 	bl	80096e4 <SDIO_GetResponse>
 8007a16:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	0fdb      	lsrs	r3, r3, #31
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d101      	bne.n	8007a24 <SD_PowerON+0xcc>
 8007a20:	2301      	movs	r3, #1
 8007a22:	e000      	b.n	8007a26 <SD_PowerON+0xce>
 8007a24:	2300      	movs	r3, #0
 8007a26:	613b      	str	r3, [r7, #16]

    count++;
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d802      	bhi.n	8007a3e <SD_PowerON+0xe6>
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d0cc      	beq.n	80079d8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d902      	bls.n	8007a4e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007a48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007a4c:	e00c      	b.n	8007a68 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d003      	beq.n	8007a60 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	645a      	str	r2, [r3, #68]	@ 0x44
 8007a5e:	e002      	b.n	8007a66 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3718      	adds	r7, #24
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	c1100000 	.word	0xc1100000

08007a74 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d102      	bne.n	8007a8a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007a84:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007a88:	e018      	b.n	8007abc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a92:	041b      	lsls	r3, r3, #16
 8007a94:	4619      	mov	r1, r3
 8007a96:	4610      	mov	r0, r2
 8007a98:	f002 f876 	bl	8009b88 <SDMMC_CmdSendStatus>
 8007a9c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d001      	beq.n	8007aa8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	e009      	b.n	8007abc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2100      	movs	r1, #0
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f001 fe18 	bl	80096e4 <SDIO_GetResponse>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007acc:	2300      	movs	r3, #0
 8007ace:	60fb      	str	r3, [r7, #12]
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2100      	movs	r1, #0
 8007ada:	4618      	mov	r0, r3
 8007adc:	f001 fe02 	bl	80096e4 <SDIO_GetResponse>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ae6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007aea:	d102      	bne.n	8007af2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007aec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007af0:	e02f      	b.n	8007b52 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007af2:	f107 030c 	add.w	r3, r7, #12
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 f879 	bl	8007bf0 <SD_FindSCR>
 8007afe:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d001      	beq.n	8007b0a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	e023      	b.n	8007b52 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d01c      	beq.n	8007b4e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b1c:	041b      	lsls	r3, r3, #16
 8007b1e:	4619      	mov	r1, r3
 8007b20:	4610      	mov	r0, r2
 8007b22:	f001 ff4b 	bl	80099bc <SDMMC_CmdAppCommand>
 8007b26:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d001      	beq.n	8007b32 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	e00f      	b.n	8007b52 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2102      	movs	r1, #2
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f001 ff84 	bl	8009a46 <SDMMC_CmdBusWidth>
 8007b3e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d001      	beq.n	8007b4a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	e003      	b.n	8007b52 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	e001      	b.n	8007b52 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007b4e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3718      	adds	r7, #24
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b086      	sub	sp, #24
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007b62:	2300      	movs	r3, #0
 8007b64:	60fb      	str	r3, [r7, #12]
 8007b66:	2300      	movs	r3, #0
 8007b68:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2100      	movs	r1, #0
 8007b70:	4618      	mov	r0, r3
 8007b72:	f001 fdb7 	bl	80096e4 <SDIO_GetResponse>
 8007b76:	4603      	mov	r3, r0
 8007b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b80:	d102      	bne.n	8007b88 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007b82:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007b86:	e02f      	b.n	8007be8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007b88:	f107 030c 	add.w	r3, r7, #12
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f82e 	bl	8007bf0 <SD_FindSCR>
 8007b94:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d001      	beq.n	8007ba0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	e023      	b.n	8007be8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d01c      	beq.n	8007be4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bb2:	041b      	lsls	r3, r3, #16
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	4610      	mov	r0, r2
 8007bb8:	f001 ff00 	bl	80099bc <SDMMC_CmdAppCommand>
 8007bbc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	e00f      	b.n	8007be8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2100      	movs	r1, #0
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f001 ff39 	bl	8009a46 <SDMMC_CmdBusWidth>
 8007bd4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d001      	beq.n	8007be0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	e003      	b.n	8007be8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007be0:	2300      	movs	r3, #0
 8007be2:	e001      	b.n	8007be8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007be4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3718      	adds	r7, #24
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007bf0:	b590      	push	{r4, r7, lr}
 8007bf2:	b08f      	sub	sp, #60	@ 0x3c
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007bfa:	f7fb fdcf 	bl	800379c <HAL_GetTick>
 8007bfe:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8007c00:	2300      	movs	r3, #0
 8007c02:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007c04:	2300      	movs	r3, #0
 8007c06:	60bb      	str	r3, [r7, #8]
 8007c08:	2300      	movs	r3, #0
 8007c0a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2108      	movs	r1, #8
 8007c16:	4618      	mov	r0, r3
 8007c18:	f001 fda3 	bl	8009762 <SDMMC_CmdBlockLength>
 8007c1c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d001      	beq.n	8007c28 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c26:	e0b9      	b.n	8007d9c <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c30:	041b      	lsls	r3, r3, #16
 8007c32:	4619      	mov	r1, r3
 8007c34:	4610      	mov	r0, r2
 8007c36:	f001 fec1 	bl	80099bc <SDMMC_CmdAppCommand>
 8007c3a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d001      	beq.n	8007c46 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c44:	e0aa      	b.n	8007d9c <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007c46:	f04f 33ff 	mov.w	r3, #4294967295
 8007c4a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007c4c:	2308      	movs	r3, #8
 8007c4e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007c50:	2330      	movs	r3, #48	@ 0x30
 8007c52:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007c54:	2302      	movs	r3, #2
 8007c56:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f107 0210 	add.w	r2, r7, #16
 8007c68:	4611      	mov	r1, r2
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f001 fd4d 	bl	800970a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f001 ff08 	bl	8009a8a <SDMMC_CmdSendSCR>
 8007c7a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d02a      	beq.n	8007cd8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c84:	e08a      	b.n	8007d9c <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00f      	beq.n	8007cb4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6819      	ldr	r1, [r3, #0]
 8007c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	f107 0208 	add.w	r2, r7, #8
 8007ca0:	18d4      	adds	r4, r2, r3
 8007ca2:	4608      	mov	r0, r1
 8007ca4:	f001 fcad 	bl	8009602 <SDIO_ReadFIFO>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	6023      	str	r3, [r4, #0]
      index++;
 8007cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cae:	3301      	adds	r3, #1
 8007cb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cb2:	e006      	b.n	8007cc2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d012      	beq.n	8007ce8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8007cc2:	f7fb fd6b 	bl	800379c <HAL_GetTick>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd0:	d102      	bne.n	8007cd8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007cd2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007cd6:	e061      	b.n	8007d9c <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cde:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d0cf      	beq.n	8007c86 <SD_FindSCR+0x96>
 8007ce6:	e000      	b.n	8007cea <SD_FindSCR+0xfa>
      break;
 8007ce8:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cf0:	f003 0308 	and.w	r3, r3, #8
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d106      	bne.n	8007d06 <SD_FindSCR+0x116>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d005      	beq.n	8007d12 <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2208      	movs	r2, #8
 8007d0c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007d0e:	2308      	movs	r3, #8
 8007d10:	e044      	b.n	8007d9c <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d18:	f003 0302 	and.w	r3, r3, #2
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d005      	beq.n	8007d2c <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2202      	movs	r2, #2
 8007d26:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007d28:	2302      	movs	r3, #2
 8007d2a:	e037      	b.n	8007d9c <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d32:	f003 0320 	and.w	r3, r3, #32
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d005      	beq.n	8007d46 <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2220      	movs	r2, #32
 8007d40:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007d42:	2320      	movs	r3, #32
 8007d44:	e02a      	b.n	8007d9c <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007d4e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	061a      	lsls	r2, r3, #24
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	021b      	lsls	r3, r3, #8
 8007d58:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007d5c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	0a1b      	lsrs	r3, r3, #8
 8007d62:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007d66:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	0e1b      	lsrs	r3, r3, #24
 8007d6c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d70:	601a      	str	r2, [r3, #0]
    scr++;
 8007d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d74:	3304      	adds	r3, #4
 8007d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	061a      	lsls	r2, r3, #24
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	021b      	lsls	r3, r3, #8
 8007d80:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007d84:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	0a1b      	lsrs	r3, r3, #8
 8007d8a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007d8e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	0e1b      	lsrs	r3, r3, #24
 8007d94:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d98:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	373c      	adds	r7, #60	@ 0x3c
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd90      	pop	{r4, r7, pc}

08007da4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007db0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d03f      	beq.n	8007e3e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	617b      	str	r3, [r7, #20]
 8007dc2:	e033      	b.n	8007e2c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f001 fc1a 	bl	8009602 <SDIO_ReadFIFO>
 8007dce:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	b2da      	uxtb	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	3b01      	subs	r3, #1
 8007de2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	0a1b      	lsrs	r3, r3, #8
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	3301      	adds	r3, #1
 8007df2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	3b01      	subs	r3, #1
 8007df8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	0c1b      	lsrs	r3, r3, #16
 8007dfe:	b2da      	uxtb	r2, r3
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	3301      	adds	r3, #1
 8007e08:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	0e1b      	lsrs	r3, r3, #24
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	3b01      	subs	r3, #1
 8007e24:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	617b      	str	r3, [r7, #20]
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	2b07      	cmp	r3, #7
 8007e30:	d9c8      	bls.n	8007dc4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	693a      	ldr	r2, [r7, #16]
 8007e3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8007e3e:	bf00      	nop
 8007e40:	3718      	adds	r7, #24
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b086      	sub	sp, #24
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a1b      	ldr	r3, [r3, #32]
 8007e52:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e58:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d043      	beq.n	8007ee8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007e60:	2300      	movs	r3, #0
 8007e62:	617b      	str	r3, [r7, #20]
 8007e64:	e037      	b.n	8007ed6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	3b01      	subs	r3, #1
 8007e76:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	021a      	lsls	r2, r3, #8
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	3301      	adds	r3, #1
 8007e88:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	3b01      	subs	r3, #1
 8007e8e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	041a      	lsls	r2, r3, #16
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	061a      	lsls	r2, r3, #24
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f107 0208 	add.w	r2, r7, #8
 8007ec8:	4611      	mov	r1, r2
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f001 fba6 	bl	800961c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	617b      	str	r3, [r7, #20]
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	2b07      	cmp	r3, #7
 8007eda:	d9c4      	bls.n	8007e66 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	693a      	ldr	r2, [r7, #16]
 8007ee6:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8007ee8:	bf00      	nop
 8007eea:	3718      	adds	r7, #24
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e041      	b.n	8007f86 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d106      	bne.n	8007f1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f7fb f918 	bl	800314c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2202      	movs	r2, #2
 8007f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	3304      	adds	r3, #4
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	4610      	mov	r0, r2
 8007f30:	f000 f8f0 	bl	8008114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
	...

08007f90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d101      	bne.n	8007fae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007faa:	2302      	movs	r3, #2
 8007fac:	e0ae      	b.n	800810c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2b0c      	cmp	r3, #12
 8007fba:	f200 809f 	bhi.w	80080fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8007fc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc4:	08007ff9 	.word	0x08007ff9
 8007fc8:	080080fd 	.word	0x080080fd
 8007fcc:	080080fd 	.word	0x080080fd
 8007fd0:	080080fd 	.word	0x080080fd
 8007fd4:	08008039 	.word	0x08008039
 8007fd8:	080080fd 	.word	0x080080fd
 8007fdc:	080080fd 	.word	0x080080fd
 8007fe0:	080080fd 	.word	0x080080fd
 8007fe4:	0800807b 	.word	0x0800807b
 8007fe8:	080080fd 	.word	0x080080fd
 8007fec:	080080fd 	.word	0x080080fd
 8007ff0:	080080fd 	.word	0x080080fd
 8007ff4:	080080bb 	.word	0x080080bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68b9      	ldr	r1, [r7, #8]
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 f914 	bl	800822c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	699a      	ldr	r2, [r3, #24]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f042 0208 	orr.w	r2, r2, #8
 8008012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	699a      	ldr	r2, [r3, #24]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f022 0204 	bic.w	r2, r2, #4
 8008022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6999      	ldr	r1, [r3, #24]
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	691a      	ldr	r2, [r3, #16]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	430a      	orrs	r2, r1
 8008034:	619a      	str	r2, [r3, #24]
      break;
 8008036:	e064      	b.n	8008102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68b9      	ldr	r1, [r7, #8]
 800803e:	4618      	mov	r0, r3
 8008040:	f000 f95a 	bl	80082f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	699a      	ldr	r2, [r3, #24]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	699a      	ldr	r2, [r3, #24]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	6999      	ldr	r1, [r3, #24]
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	021a      	lsls	r2, r3, #8
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	430a      	orrs	r2, r1
 8008076:	619a      	str	r2, [r3, #24]
      break;
 8008078:	e043      	b.n	8008102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68b9      	ldr	r1, [r7, #8]
 8008080:	4618      	mov	r0, r3
 8008082:	f000 f9a5 	bl	80083d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	69da      	ldr	r2, [r3, #28]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f042 0208 	orr.w	r2, r2, #8
 8008094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	69da      	ldr	r2, [r3, #28]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f022 0204 	bic.w	r2, r2, #4
 80080a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	69d9      	ldr	r1, [r3, #28]
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	691a      	ldr	r2, [r3, #16]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	430a      	orrs	r2, r1
 80080b6:	61da      	str	r2, [r3, #28]
      break;
 80080b8:	e023      	b.n	8008102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68b9      	ldr	r1, [r7, #8]
 80080c0:	4618      	mov	r0, r3
 80080c2:	f000 f9ef 	bl	80084a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	69da      	ldr	r2, [r3, #28]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80080d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	69da      	ldr	r2, [r3, #28]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	69d9      	ldr	r1, [r3, #28]
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	021a      	lsls	r2, r3, #8
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	430a      	orrs	r2, r1
 80080f8:	61da      	str	r2, [r3, #28]
      break;
 80080fa:	e002      	b.n	8008102 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008100:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800810a:	7dfb      	ldrb	r3, [r7, #23]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3718      	adds	r7, #24
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a3a      	ldr	r2, [pc, #232]	@ (8008210 <TIM_Base_SetConfig+0xfc>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d00f      	beq.n	800814c <TIM_Base_SetConfig+0x38>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008132:	d00b      	beq.n	800814c <TIM_Base_SetConfig+0x38>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a37      	ldr	r2, [pc, #220]	@ (8008214 <TIM_Base_SetConfig+0x100>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d007      	beq.n	800814c <TIM_Base_SetConfig+0x38>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a36      	ldr	r2, [pc, #216]	@ (8008218 <TIM_Base_SetConfig+0x104>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d003      	beq.n	800814c <TIM_Base_SetConfig+0x38>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a35      	ldr	r2, [pc, #212]	@ (800821c <TIM_Base_SetConfig+0x108>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d108      	bne.n	800815e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	4313      	orrs	r3, r2
 800815c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a2b      	ldr	r2, [pc, #172]	@ (8008210 <TIM_Base_SetConfig+0xfc>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d01b      	beq.n	800819e <TIM_Base_SetConfig+0x8a>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800816c:	d017      	beq.n	800819e <TIM_Base_SetConfig+0x8a>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a28      	ldr	r2, [pc, #160]	@ (8008214 <TIM_Base_SetConfig+0x100>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d013      	beq.n	800819e <TIM_Base_SetConfig+0x8a>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a27      	ldr	r2, [pc, #156]	@ (8008218 <TIM_Base_SetConfig+0x104>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d00f      	beq.n	800819e <TIM_Base_SetConfig+0x8a>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4a26      	ldr	r2, [pc, #152]	@ (800821c <TIM_Base_SetConfig+0x108>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d00b      	beq.n	800819e <TIM_Base_SetConfig+0x8a>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a25      	ldr	r2, [pc, #148]	@ (8008220 <TIM_Base_SetConfig+0x10c>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d007      	beq.n	800819e <TIM_Base_SetConfig+0x8a>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a24      	ldr	r2, [pc, #144]	@ (8008224 <TIM_Base_SetConfig+0x110>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d003      	beq.n	800819e <TIM_Base_SetConfig+0x8a>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a23      	ldr	r2, [pc, #140]	@ (8008228 <TIM_Base_SetConfig+0x114>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d108      	bne.n	80081b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	695b      	ldr	r3, [r3, #20]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	689a      	ldr	r2, [r3, #8]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a0e      	ldr	r2, [pc, #56]	@ (8008210 <TIM_Base_SetConfig+0xfc>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d103      	bne.n	80081e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	691a      	ldr	r2, [r3, #16]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	f003 0301 	and.w	r3, r3, #1
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d105      	bne.n	8008202 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	f023 0201 	bic.w	r2, r3, #1
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	611a      	str	r2, [r3, #16]
  }
}
 8008202:	bf00      	nop
 8008204:	3714      	adds	r7, #20
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop
 8008210:	40010000 	.word	0x40010000
 8008214:	40000400 	.word	0x40000400
 8008218:	40000800 	.word	0x40000800
 800821c:	40000c00 	.word	0x40000c00
 8008220:	40014000 	.word	0x40014000
 8008224:	40014400 	.word	0x40014400
 8008228:	40014800 	.word	0x40014800

0800822c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800822c:	b480      	push	{r7}
 800822e:	b087      	sub	sp, #28
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a1b      	ldr	r3, [r3, #32]
 8008240:	f023 0201 	bic.w	r2, r3, #1
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	699b      	ldr	r3, [r3, #24]
 8008252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800825a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f023 0303 	bic.w	r3, r3, #3
 8008262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	4313      	orrs	r3, r2
 800826c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	f023 0302 	bic.w	r3, r3, #2
 8008274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	4313      	orrs	r3, r2
 800827e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a1c      	ldr	r2, [pc, #112]	@ (80082f4 <TIM_OC1_SetConfig+0xc8>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d10c      	bne.n	80082a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	f023 0308 	bic.w	r3, r3, #8
 800828e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	697a      	ldr	r2, [r7, #20]
 8008296:	4313      	orrs	r3, r2
 8008298:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	f023 0304 	bic.w	r3, r3, #4
 80082a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a13      	ldr	r2, [pc, #76]	@ (80082f4 <TIM_OC1_SetConfig+0xc8>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d111      	bne.n	80082ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80082b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	693a      	ldr	r2, [r7, #16]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	699b      	ldr	r3, [r3, #24]
 80082c8:	693a      	ldr	r2, [r7, #16]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	693a      	ldr	r2, [r7, #16]
 80082d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	685a      	ldr	r2, [r3, #4]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	621a      	str	r2, [r3, #32]
}
 80082e8:	bf00      	nop
 80082ea:	371c      	adds	r7, #28
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr
 80082f4:	40010000 	.word	0x40010000

080082f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b087      	sub	sp, #28
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a1b      	ldr	r3, [r3, #32]
 800830c:	f023 0210 	bic.w	r2, r3, #16
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	699b      	ldr	r3, [r3, #24]
 800831e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800832e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	021b      	lsls	r3, r3, #8
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	4313      	orrs	r3, r2
 800833a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	f023 0320 	bic.w	r3, r3, #32
 8008342:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	011b      	lsls	r3, r3, #4
 800834a:	697a      	ldr	r2, [r7, #20]
 800834c:	4313      	orrs	r3, r2
 800834e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a1e      	ldr	r2, [pc, #120]	@ (80083cc <TIM_OC2_SetConfig+0xd4>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d10d      	bne.n	8008374 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800835e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	011b      	lsls	r3, r3, #4
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	4313      	orrs	r3, r2
 800836a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008372:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a15      	ldr	r2, [pc, #84]	@ (80083cc <TIM_OC2_SetConfig+0xd4>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d113      	bne.n	80083a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008382:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800838a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	695b      	ldr	r3, [r3, #20]
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	693a      	ldr	r2, [r7, #16]
 8008394:	4313      	orrs	r3, r2
 8008396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	699b      	ldr	r3, [r3, #24]
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	693a      	ldr	r2, [r7, #16]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	693a      	ldr	r2, [r7, #16]
 80083a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	685a      	ldr	r2, [r3, #4]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	697a      	ldr	r2, [r7, #20]
 80083bc:	621a      	str	r2, [r3, #32]
}
 80083be:	bf00      	nop
 80083c0:	371c      	adds	r7, #28
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	40010000 	.word	0x40010000

080083d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b087      	sub	sp, #28
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a1b      	ldr	r3, [r3, #32]
 80083de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a1b      	ldr	r3, [r3, #32]
 80083e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	69db      	ldr	r3, [r3, #28]
 80083f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f023 0303 	bic.w	r3, r3, #3
 8008406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	4313      	orrs	r3, r2
 8008410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	021b      	lsls	r3, r3, #8
 8008420:	697a      	ldr	r2, [r7, #20]
 8008422:	4313      	orrs	r3, r2
 8008424:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a1d      	ldr	r2, [pc, #116]	@ (80084a0 <TIM_OC3_SetConfig+0xd0>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d10d      	bne.n	800844a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008434:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	021b      	lsls	r3, r3, #8
 800843c:	697a      	ldr	r2, [r7, #20]
 800843e:	4313      	orrs	r3, r2
 8008440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a14      	ldr	r2, [pc, #80]	@ (80084a0 <TIM_OC3_SetConfig+0xd0>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d113      	bne.n	800847a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	695b      	ldr	r3, [r3, #20]
 8008466:	011b      	lsls	r3, r3, #4
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	4313      	orrs	r3, r2
 800846c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	011b      	lsls	r3, r3, #4
 8008474:	693a      	ldr	r2, [r7, #16]
 8008476:	4313      	orrs	r3, r2
 8008478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	693a      	ldr	r2, [r7, #16]
 800847e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	685a      	ldr	r2, [r3, #4]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	697a      	ldr	r2, [r7, #20]
 8008492:	621a      	str	r2, [r3, #32]
}
 8008494:	bf00      	nop
 8008496:	371c      	adds	r7, #28
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr
 80084a0:	40010000 	.word	0x40010000

080084a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b087      	sub	sp, #28
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a1b      	ldr	r3, [r3, #32]
 80084b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a1b      	ldr	r3, [r3, #32]
 80084b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	021b      	lsls	r3, r3, #8
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80084ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	031b      	lsls	r3, r3, #12
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a10      	ldr	r2, [pc, #64]	@ (8008540 <TIM_OC4_SetConfig+0x9c>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d109      	bne.n	8008518 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800850a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	695b      	ldr	r3, [r3, #20]
 8008510:	019b      	lsls	r3, r3, #6
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	4313      	orrs	r3, r2
 8008516:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	685a      	ldr	r2, [r3, #4]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	693a      	ldr	r2, [r7, #16]
 8008530:	621a      	str	r2, [r3, #32]
}
 8008532:	bf00      	nop
 8008534:	371c      	adds	r7, #28
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	40010000 	.word	0x40010000

08008544 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008554:	2b01      	cmp	r3, #1
 8008556:	d101      	bne.n	800855c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008558:	2302      	movs	r3, #2
 800855a:	e050      	b.n	80085fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2202      	movs	r2, #2
 8008568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008582:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	4313      	orrs	r3, r2
 800858c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a1c      	ldr	r2, [pc, #112]	@ (800860c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d018      	beq.n	80085d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085a8:	d013      	beq.n	80085d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a18      	ldr	r2, [pc, #96]	@ (8008610 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d00e      	beq.n	80085d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a16      	ldr	r2, [pc, #88]	@ (8008614 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d009      	beq.n	80085d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a15      	ldr	r2, [pc, #84]	@ (8008618 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d004      	beq.n	80085d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a13      	ldr	r2, [pc, #76]	@ (800861c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d10c      	bne.n	80085ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3714      	adds	r7, #20
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	40010000 	.word	0x40010000
 8008610:	40000400 	.word	0x40000400
 8008614:	40000800 	.word	0x40000800
 8008618:	40000c00 	.word	0x40000c00
 800861c:	40014000 	.word	0x40014000

08008620 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800862a:	2300      	movs	r3, #0
 800862c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008634:	2b01      	cmp	r3, #1
 8008636:	d101      	bne.n	800863c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008638:	2302      	movs	r3, #2
 800863a:	e03d      	b.n	80086b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	4313      	orrs	r3, r2
 8008650:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	4313      	orrs	r3, r2
 800865e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	4313      	orrs	r3, r2
 800866c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4313      	orrs	r3, r2
 800867a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	4313      	orrs	r3, r2
 8008688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	695b      	ldr	r3, [r3, #20]
 8008694:	4313      	orrs	r3, r2
 8008696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	69db      	ldr	r3, [r3, #28]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	68fa      	ldr	r2, [r7, #12]
 80086ac:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3714      	adds	r7, #20
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d101      	bne.n	80086d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e042      	b.n	800875c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d106      	bne.n	80086f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7fa fe00 	bl	80032f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2224      	movs	r2, #36	@ 0x24
 80086f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68da      	ldr	r2, [r3, #12]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008706:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 fcdb 	bl	80090c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	691a      	ldr	r2, [r3, #16]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800871c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	695a      	ldr	r2, [r3, #20]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800872c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68da      	ldr	r2, [r3, #12]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800873c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2220      	movs	r2, #32
 8008748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2220      	movs	r2, #32
 8008750:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	4613      	mov	r3, r2
 8008770:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008778:	b2db      	uxtb	r3, r3
 800877a:	2b20      	cmp	r3, #32
 800877c:	d112      	bne.n	80087a4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d002      	beq.n	800878a <HAL_UART_Receive_IT+0x26>
 8008784:	88fb      	ldrh	r3, [r7, #6]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d101      	bne.n	800878e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e00b      	b.n	80087a6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008794:	88fb      	ldrh	r3, [r7, #6]
 8008796:	461a      	mov	r2, r3
 8008798:	68b9      	ldr	r1, [r7, #8]
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f000 faba 	bl	8008d14 <UART_Start_Receive_IT>
 80087a0:	4603      	mov	r3, r0
 80087a2:	e000      	b.n	80087a6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80087a4:	2302      	movs	r3, #2
  }
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
	...

080087b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b0ba      	sub	sp, #232	@ 0xe8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80087d6:	2300      	movs	r3, #0
 80087d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80087dc:	2300      	movs	r3, #0
 80087de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80087e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087e6:	f003 030f 	and.w	r3, r3, #15
 80087ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80087ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d10f      	bne.n	8008816 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087fa:	f003 0320 	and.w	r3, r3, #32
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d009      	beq.n	8008816 <HAL_UART_IRQHandler+0x66>
 8008802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008806:	f003 0320 	and.w	r3, r3, #32
 800880a:	2b00      	cmp	r3, #0
 800880c:	d003      	beq.n	8008816 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fb99 	bl	8008f46 <UART_Receive_IT>
      return;
 8008814:	e25b      	b.n	8008cce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008816:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800881a:	2b00      	cmp	r3, #0
 800881c:	f000 80de 	beq.w	80089dc <HAL_UART_IRQHandler+0x22c>
 8008820:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008824:	f003 0301 	and.w	r3, r3, #1
 8008828:	2b00      	cmp	r3, #0
 800882a:	d106      	bne.n	800883a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800882c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008830:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008834:	2b00      	cmp	r3, #0
 8008836:	f000 80d1 	beq.w	80089dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800883a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800883e:	f003 0301 	and.w	r3, r3, #1
 8008842:	2b00      	cmp	r3, #0
 8008844:	d00b      	beq.n	800885e <HAL_UART_IRQHandler+0xae>
 8008846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800884a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800884e:	2b00      	cmp	r3, #0
 8008850:	d005      	beq.n	800885e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008856:	f043 0201 	orr.w	r2, r3, #1
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800885e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008862:	f003 0304 	and.w	r3, r3, #4
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00b      	beq.n	8008882 <HAL_UART_IRQHandler+0xd2>
 800886a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800886e:	f003 0301 	and.w	r3, r3, #1
 8008872:	2b00      	cmp	r3, #0
 8008874:	d005      	beq.n	8008882 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800887a:	f043 0202 	orr.w	r2, r3, #2
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008886:	f003 0302 	and.w	r3, r3, #2
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00b      	beq.n	80088a6 <HAL_UART_IRQHandler+0xf6>
 800888e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008892:	f003 0301 	and.w	r3, r3, #1
 8008896:	2b00      	cmp	r3, #0
 8008898:	d005      	beq.n	80088a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800889e:	f043 0204 	orr.w	r2, r3, #4
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80088a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088aa:	f003 0308 	and.w	r3, r3, #8
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d011      	beq.n	80088d6 <HAL_UART_IRQHandler+0x126>
 80088b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088b6:	f003 0320 	and.w	r3, r3, #32
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d105      	bne.n	80088ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80088be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088c2:	f003 0301 	and.w	r3, r3, #1
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d005      	beq.n	80088d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088ce:	f043 0208 	orr.w	r2, r3, #8
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f000 81f2 	beq.w	8008cc4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088e4:	f003 0320 	and.w	r3, r3, #32
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d008      	beq.n	80088fe <HAL_UART_IRQHandler+0x14e>
 80088ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088f0:	f003 0320 	and.w	r3, r3, #32
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d002      	beq.n	80088fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 fb24 	bl	8008f46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	695b      	ldr	r3, [r3, #20]
 8008904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008908:	2b40      	cmp	r3, #64	@ 0x40
 800890a:	bf0c      	ite	eq
 800890c:	2301      	moveq	r3, #1
 800890e:	2300      	movne	r3, #0
 8008910:	b2db      	uxtb	r3, r3
 8008912:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800891a:	f003 0308 	and.w	r3, r3, #8
 800891e:	2b00      	cmp	r3, #0
 8008920:	d103      	bne.n	800892a <HAL_UART_IRQHandler+0x17a>
 8008922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008926:	2b00      	cmp	r3, #0
 8008928:	d04f      	beq.n	80089ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fa2c 	bl	8008d88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800893a:	2b40      	cmp	r3, #64	@ 0x40
 800893c:	d141      	bne.n	80089c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	3314      	adds	r3, #20
 8008944:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008948:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800894c:	e853 3f00 	ldrex	r3, [r3]
 8008950:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008954:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008958:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800895c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	3314      	adds	r3, #20
 8008966:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800896a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800896e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008972:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008976:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800897a:	e841 2300 	strex	r3, r2, [r1]
 800897e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008982:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1d9      	bne.n	800893e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800898e:	2b00      	cmp	r3, #0
 8008990:	d013      	beq.n	80089ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008996:	4a7e      	ldr	r2, [pc, #504]	@ (8008b90 <HAL_UART_IRQHandler+0x3e0>)
 8008998:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fb fc26 	bl	80041f0 <HAL_DMA_Abort_IT>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d016      	beq.n	80089d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80089b4:	4610      	mov	r0, r2
 80089b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089b8:	e00e      	b.n	80089d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f994 	bl	8008ce8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089c0:	e00a      	b.n	80089d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f990 	bl	8008ce8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089c8:	e006      	b.n	80089d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f98c 	bl	8008ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80089d6:	e175      	b.n	8008cc4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089d8:	bf00      	nop
    return;
 80089da:	e173      	b.n	8008cc4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	f040 814f 	bne.w	8008c84 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80089e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089ea:	f003 0310 	and.w	r3, r3, #16
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f000 8148 	beq.w	8008c84 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80089f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089f8:	f003 0310 	and.w	r3, r3, #16
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	f000 8141 	beq.w	8008c84 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a02:	2300      	movs	r3, #0
 8008a04:	60bb      	str	r3, [r7, #8]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	60bb      	str	r3, [r7, #8]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	60bb      	str	r3, [r7, #8]
 8008a16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	695b      	ldr	r3, [r3, #20]
 8008a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a22:	2b40      	cmp	r3, #64	@ 0x40
 8008a24:	f040 80b6 	bne.w	8008b94 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f000 8145 	beq.w	8008cc8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008a42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a46:	429a      	cmp	r2, r3
 8008a48:	f080 813e 	bcs.w	8008cc8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a52:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a58:	69db      	ldr	r3, [r3, #28]
 8008a5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a5e:	f000 8088 	beq.w	8008b72 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	330c      	adds	r3, #12
 8008a68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008a70:	e853 3f00 	ldrex	r3, [r3]
 8008a74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008a78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	330c      	adds	r3, #12
 8008a8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008a8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008a92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a96:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008a9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008a9e:	e841 2300 	strex	r3, r2, [r1]
 8008aa2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008aa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1d9      	bne.n	8008a62 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	3314      	adds	r3, #20
 8008ab4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008ab8:	e853 3f00 	ldrex	r3, [r3]
 8008abc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008abe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ac0:	f023 0301 	bic.w	r3, r3, #1
 8008ac4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	3314      	adds	r3, #20
 8008ace:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008ad2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008ad6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008ada:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008ade:	e841 2300 	strex	r3, r2, [r1]
 8008ae2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008ae4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1e1      	bne.n	8008aae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	3314      	adds	r3, #20
 8008af0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008af4:	e853 3f00 	ldrex	r3, [r3]
 8008af8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008afa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008afc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	3314      	adds	r3, #20
 8008b0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008b0e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008b10:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b12:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008b14:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008b16:	e841 2300 	strex	r3, r2, [r1]
 8008b1a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008b1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1e3      	bne.n	8008aea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2220      	movs	r2, #32
 8008b26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	330c      	adds	r3, #12
 8008b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b3a:	e853 3f00 	ldrex	r3, [r3]
 8008b3e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b42:	f023 0310 	bic.w	r3, r3, #16
 8008b46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	330c      	adds	r3, #12
 8008b50:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008b54:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008b56:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b58:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008b5a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b5c:	e841 2300 	strex	r3, r2, [r1]
 8008b60:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008b62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d1e3      	bne.n	8008b30 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fb facf 	bl	8004110 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2202      	movs	r2, #2
 8008b76:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	1ad3      	subs	r3, r2, r3
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	4619      	mov	r1, r3
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 f8b7 	bl	8008cfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b8e:	e09b      	b.n	8008cc8 <HAL_UART_IRQHandler+0x518>
 8008b90:	08008e4f 	.word	0x08008e4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	1ad3      	subs	r3, r2, r3
 8008ba0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f000 808e 	beq.w	8008ccc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008bb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	f000 8089 	beq.w	8008ccc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	330c      	adds	r3, #12
 8008bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc4:	e853 3f00 	ldrex	r3, [r3]
 8008bc8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bd0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	330c      	adds	r3, #12
 8008bda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008bde:	647a      	str	r2, [r7, #68]	@ 0x44
 8008be0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008be4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008be6:	e841 2300 	strex	r3, r2, [r1]
 8008bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008bec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1e3      	bne.n	8008bba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	3314      	adds	r3, #20
 8008bf8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bfc:	e853 3f00 	ldrex	r3, [r3]
 8008c00:	623b      	str	r3, [r7, #32]
   return(result);
 8008c02:	6a3b      	ldr	r3, [r7, #32]
 8008c04:	f023 0301 	bic.w	r3, r3, #1
 8008c08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	3314      	adds	r3, #20
 8008c12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008c16:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c1e:	e841 2300 	strex	r3, r2, [r1]
 8008c22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d1e3      	bne.n	8008bf2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2220      	movs	r2, #32
 8008c2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	330c      	adds	r3, #12
 8008c3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	e853 3f00 	ldrex	r3, [r3]
 8008c46:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f023 0310 	bic.w	r3, r3, #16
 8008c4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	330c      	adds	r3, #12
 8008c58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008c5c:	61fa      	str	r2, [r7, #28]
 8008c5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c60:	69b9      	ldr	r1, [r7, #24]
 8008c62:	69fa      	ldr	r2, [r7, #28]
 8008c64:	e841 2300 	strex	r3, r2, [r1]
 8008c68:	617b      	str	r3, [r7, #20]
   return(result);
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d1e3      	bne.n	8008c38 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2202      	movs	r2, #2
 8008c74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 f83d 	bl	8008cfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c82:	e023      	b.n	8008ccc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d009      	beq.n	8008ca4 <HAL_UART_IRQHandler+0x4f4>
 8008c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d003      	beq.n	8008ca4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 f8ea 	bl	8008e76 <UART_Transmit_IT>
    return;
 8008ca2:	e014      	b.n	8008cce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00e      	beq.n	8008cce <HAL_UART_IRQHandler+0x51e>
 8008cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d008      	beq.n	8008cce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 f92a 	bl	8008f16 <UART_EndTransmit_IT>
    return;
 8008cc2:	e004      	b.n	8008cce <HAL_UART_IRQHandler+0x51e>
    return;
 8008cc4:	bf00      	nop
 8008cc6:	e002      	b.n	8008cce <HAL_UART_IRQHandler+0x51e>
      return;
 8008cc8:	bf00      	nop
 8008cca:	e000      	b.n	8008cce <HAL_UART_IRQHandler+0x51e>
      return;
 8008ccc:	bf00      	nop
  }
}
 8008cce:	37e8      	adds	r7, #232	@ 0xe8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	460b      	mov	r3, r1
 8008d06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008d08:	bf00      	nop
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	4613      	mov	r3, r2
 8008d20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	68ba      	ldr	r2, [r7, #8]
 8008d26:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	88fa      	ldrh	r2, [r7, #6]
 8008d2c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	88fa      	ldrh	r2, [r7, #6]
 8008d32:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2200      	movs	r2, #0
 8008d38:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2222      	movs	r2, #34	@ 0x22
 8008d3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d007      	beq.n	8008d5a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68da      	ldr	r2, [r3, #12]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008d58:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	695a      	ldr	r2, [r3, #20]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f042 0201 	orr.w	r2, r2, #1
 8008d68:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68da      	ldr	r2, [r3, #12]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f042 0220 	orr.w	r2, r2, #32
 8008d78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3714      	adds	r7, #20
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b095      	sub	sp, #84	@ 0x54
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	330c      	adds	r3, #12
 8008d96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d9a:	e853 3f00 	ldrex	r3, [r3]
 8008d9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008da6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	330c      	adds	r3, #12
 8008dae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008db0:	643a      	str	r2, [r7, #64]	@ 0x40
 8008db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008db6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008db8:	e841 2300 	strex	r3, r2, [r1]
 8008dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d1e5      	bne.n	8008d90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	3314      	adds	r3, #20
 8008dca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dcc:	6a3b      	ldr	r3, [r7, #32]
 8008dce:	e853 3f00 	ldrex	r3, [r3]
 8008dd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	f023 0301 	bic.w	r3, r3, #1
 8008dda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	3314      	adds	r3, #20
 8008de2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008de4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008de6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008dea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008dec:	e841 2300 	strex	r3, r2, [r1]
 8008df0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d1e5      	bne.n	8008dc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d119      	bne.n	8008e34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	330c      	adds	r3, #12
 8008e06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	e853 3f00 	ldrex	r3, [r3]
 8008e0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	f023 0310 	bic.w	r3, r3, #16
 8008e16:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	330c      	adds	r3, #12
 8008e1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e20:	61ba      	str	r2, [r7, #24]
 8008e22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e24:	6979      	ldr	r1, [r7, #20]
 8008e26:	69ba      	ldr	r2, [r7, #24]
 8008e28:	e841 2300 	strex	r3, r2, [r1]
 8008e2c:	613b      	str	r3, [r7, #16]
   return(result);
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d1e5      	bne.n	8008e00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2220      	movs	r2, #32
 8008e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008e42:	bf00      	nop
 8008e44:	3754      	adds	r7, #84	@ 0x54
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr

08008e4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b084      	sub	sp, #16
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	f7ff ff3d 	bl	8008ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e6e:	bf00      	nop
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008e76:	b480      	push	{r7}
 8008e78:	b085      	sub	sp, #20
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	2b21      	cmp	r3, #33	@ 0x21
 8008e88:	d13e      	bne.n	8008f08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e92:	d114      	bne.n	8008ebe <UART_Transmit_IT+0x48>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d110      	bne.n	8008ebe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a1b      	ldr	r3, [r3, #32]
 8008ea0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	881b      	ldrh	r3, [r3, #0]
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008eb0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a1b      	ldr	r3, [r3, #32]
 8008eb6:	1c9a      	adds	r2, r3, #2
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	621a      	str	r2, [r3, #32]
 8008ebc:	e008      	b.n	8008ed0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a1b      	ldr	r3, [r3, #32]
 8008ec2:	1c59      	adds	r1, r3, #1
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	6211      	str	r1, [r2, #32]
 8008ec8:	781a      	ldrb	r2, [r3, #0]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	4619      	mov	r1, r3
 8008ede:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d10f      	bne.n	8008f04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68da      	ldr	r2, [r3, #12]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008ef2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	68da      	ldr	r2, [r3, #12]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008f04:	2300      	movs	r3, #0
 8008f06:	e000      	b.n	8008f0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008f08:	2302      	movs	r3, #2
  }
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3714      	adds	r7, #20
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr

08008f16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b082      	sub	sp, #8
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	68da      	ldr	r2, [r3, #12]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2220      	movs	r2, #32
 8008f32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f7ff fecc 	bl	8008cd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3708      	adds	r7, #8
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b08c      	sub	sp, #48	@ 0x30
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	2b22      	cmp	r3, #34	@ 0x22
 8008f58:	f040 80ae 	bne.w	80090b8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f64:	d117      	bne.n	8008f96 <UART_Receive_IT+0x50>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	691b      	ldr	r3, [r3, #16]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d113      	bne.n	8008f96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f76:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f8e:	1c9a      	adds	r2, r3, #2
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	629a      	str	r2, [r3, #40]	@ 0x28
 8008f94:	e026      	b.n	8008fe4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fa8:	d007      	beq.n	8008fba <UART_Receive_IT+0x74>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d10a      	bne.n	8008fc8 <UART_Receive_IT+0x82>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	691b      	ldr	r3, [r3, #16]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d106      	bne.n	8008fc8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	b2da      	uxtb	r2, r3
 8008fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fc4:	701a      	strb	r2, [r3, #0]
 8008fc6:	e008      	b.n	8008fda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fd4:	b2da      	uxtb	r2, r3
 8008fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fde:	1c5a      	adds	r2, r3, #1
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	3b01      	subs	r3, #1
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d15d      	bne.n	80090b4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	68da      	ldr	r2, [r3, #12]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f022 0220 	bic.w	r2, r2, #32
 8009006:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	68da      	ldr	r2, [r3, #12]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009016:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	695a      	ldr	r2, [r3, #20]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f022 0201 	bic.w	r2, r2, #1
 8009026:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2220      	movs	r2, #32
 800902c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800903a:	2b01      	cmp	r3, #1
 800903c:	d135      	bne.n	80090aa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	330c      	adds	r3, #12
 800904a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	e853 3f00 	ldrex	r3, [r3]
 8009052:	613b      	str	r3, [r7, #16]
   return(result);
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	f023 0310 	bic.w	r3, r3, #16
 800905a:	627b      	str	r3, [r7, #36]	@ 0x24
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	330c      	adds	r3, #12
 8009062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009064:	623a      	str	r2, [r7, #32]
 8009066:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009068:	69f9      	ldr	r1, [r7, #28]
 800906a:	6a3a      	ldr	r2, [r7, #32]
 800906c:	e841 2300 	strex	r3, r2, [r1]
 8009070:	61bb      	str	r3, [r7, #24]
   return(result);
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d1e5      	bne.n	8009044 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f003 0310 	and.w	r3, r3, #16
 8009082:	2b10      	cmp	r3, #16
 8009084:	d10a      	bne.n	800909c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009086:	2300      	movs	r3, #0
 8009088:	60fb      	str	r3, [r7, #12]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	60fb      	str	r3, [r7, #12]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	60fb      	str	r3, [r7, #12]
 800909a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80090a0:	4619      	mov	r1, r3
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f7ff fe2a 	bl	8008cfc <HAL_UARTEx_RxEventCallback>
 80090a8:	e002      	b.n	80090b0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f7f9 f8c2 	bl	8002234 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80090b0:	2300      	movs	r3, #0
 80090b2:	e002      	b.n	80090ba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80090b4:	2300      	movs	r3, #0
 80090b6:	e000      	b.n	80090ba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80090b8:	2302      	movs	r3, #2
  }
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3730      	adds	r7, #48	@ 0x30
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
	...

080090c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090c8:	b0c0      	sub	sp, #256	@ 0x100
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	691b      	ldr	r3, [r3, #16]
 80090d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80090dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090e0:	68d9      	ldr	r1, [r3, #12]
 80090e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	ea40 0301 	orr.w	r3, r0, r1
 80090ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80090ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090f2:	689a      	ldr	r2, [r3, #8]
 80090f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	431a      	orrs	r2, r3
 80090fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009100:	695b      	ldr	r3, [r3, #20]
 8009102:	431a      	orrs	r2, r3
 8009104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009108:	69db      	ldr	r3, [r3, #28]
 800910a:	4313      	orrs	r3, r2
 800910c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800911c:	f021 010c 	bic.w	r1, r1, #12
 8009120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800912a:	430b      	orrs	r3, r1
 800912c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800912e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	695b      	ldr	r3, [r3, #20]
 8009136:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800913a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800913e:	6999      	ldr	r1, [r3, #24]
 8009140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	ea40 0301 	orr.w	r3, r0, r1
 800914a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800914c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	4b8f      	ldr	r3, [pc, #572]	@ (8009390 <UART_SetConfig+0x2cc>)
 8009154:	429a      	cmp	r2, r3
 8009156:	d005      	beq.n	8009164 <UART_SetConfig+0xa0>
 8009158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	4b8d      	ldr	r3, [pc, #564]	@ (8009394 <UART_SetConfig+0x2d0>)
 8009160:	429a      	cmp	r2, r3
 8009162:	d104      	bne.n	800916e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009164:	f7fd fb76 	bl	8006854 <HAL_RCC_GetPCLK2Freq>
 8009168:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800916c:	e003      	b.n	8009176 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800916e:	f7fd fb5d 	bl	800682c <HAL_RCC_GetPCLK1Freq>
 8009172:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800917a:	69db      	ldr	r3, [r3, #28]
 800917c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009180:	f040 810c 	bne.w	800939c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009184:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009188:	2200      	movs	r2, #0
 800918a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800918e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009192:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009196:	4622      	mov	r2, r4
 8009198:	462b      	mov	r3, r5
 800919a:	1891      	adds	r1, r2, r2
 800919c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800919e:	415b      	adcs	r3, r3
 80091a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80091a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80091a6:	4621      	mov	r1, r4
 80091a8:	eb12 0801 	adds.w	r8, r2, r1
 80091ac:	4629      	mov	r1, r5
 80091ae:	eb43 0901 	adc.w	r9, r3, r1
 80091b2:	f04f 0200 	mov.w	r2, #0
 80091b6:	f04f 0300 	mov.w	r3, #0
 80091ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80091be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80091c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80091c6:	4690      	mov	r8, r2
 80091c8:	4699      	mov	r9, r3
 80091ca:	4623      	mov	r3, r4
 80091cc:	eb18 0303 	adds.w	r3, r8, r3
 80091d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80091d4:	462b      	mov	r3, r5
 80091d6:	eb49 0303 	adc.w	r3, r9, r3
 80091da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80091de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80091ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80091ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80091f2:	460b      	mov	r3, r1
 80091f4:	18db      	adds	r3, r3, r3
 80091f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80091f8:	4613      	mov	r3, r2
 80091fa:	eb42 0303 	adc.w	r3, r2, r3
 80091fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8009200:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009204:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009208:	f7f7 fd46 	bl	8000c98 <__aeabi_uldivmod>
 800920c:	4602      	mov	r2, r0
 800920e:	460b      	mov	r3, r1
 8009210:	4b61      	ldr	r3, [pc, #388]	@ (8009398 <UART_SetConfig+0x2d4>)
 8009212:	fba3 2302 	umull	r2, r3, r3, r2
 8009216:	095b      	lsrs	r3, r3, #5
 8009218:	011c      	lsls	r4, r3, #4
 800921a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800921e:	2200      	movs	r2, #0
 8009220:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009224:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009228:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800922c:	4642      	mov	r2, r8
 800922e:	464b      	mov	r3, r9
 8009230:	1891      	adds	r1, r2, r2
 8009232:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009234:	415b      	adcs	r3, r3
 8009236:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009238:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800923c:	4641      	mov	r1, r8
 800923e:	eb12 0a01 	adds.w	sl, r2, r1
 8009242:	4649      	mov	r1, r9
 8009244:	eb43 0b01 	adc.w	fp, r3, r1
 8009248:	f04f 0200 	mov.w	r2, #0
 800924c:	f04f 0300 	mov.w	r3, #0
 8009250:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009254:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009258:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800925c:	4692      	mov	sl, r2
 800925e:	469b      	mov	fp, r3
 8009260:	4643      	mov	r3, r8
 8009262:	eb1a 0303 	adds.w	r3, sl, r3
 8009266:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800926a:	464b      	mov	r3, r9
 800926c:	eb4b 0303 	adc.w	r3, fp, r3
 8009270:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009280:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009284:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009288:	460b      	mov	r3, r1
 800928a:	18db      	adds	r3, r3, r3
 800928c:	643b      	str	r3, [r7, #64]	@ 0x40
 800928e:	4613      	mov	r3, r2
 8009290:	eb42 0303 	adc.w	r3, r2, r3
 8009294:	647b      	str	r3, [r7, #68]	@ 0x44
 8009296:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800929a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800929e:	f7f7 fcfb 	bl	8000c98 <__aeabi_uldivmod>
 80092a2:	4602      	mov	r2, r0
 80092a4:	460b      	mov	r3, r1
 80092a6:	4611      	mov	r1, r2
 80092a8:	4b3b      	ldr	r3, [pc, #236]	@ (8009398 <UART_SetConfig+0x2d4>)
 80092aa:	fba3 2301 	umull	r2, r3, r3, r1
 80092ae:	095b      	lsrs	r3, r3, #5
 80092b0:	2264      	movs	r2, #100	@ 0x64
 80092b2:	fb02 f303 	mul.w	r3, r2, r3
 80092b6:	1acb      	subs	r3, r1, r3
 80092b8:	00db      	lsls	r3, r3, #3
 80092ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80092be:	4b36      	ldr	r3, [pc, #216]	@ (8009398 <UART_SetConfig+0x2d4>)
 80092c0:	fba3 2302 	umull	r2, r3, r3, r2
 80092c4:	095b      	lsrs	r3, r3, #5
 80092c6:	005b      	lsls	r3, r3, #1
 80092c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80092cc:	441c      	add	r4, r3
 80092ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80092d2:	2200      	movs	r2, #0
 80092d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80092d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80092dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80092e0:	4642      	mov	r2, r8
 80092e2:	464b      	mov	r3, r9
 80092e4:	1891      	adds	r1, r2, r2
 80092e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80092e8:	415b      	adcs	r3, r3
 80092ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80092f0:	4641      	mov	r1, r8
 80092f2:	1851      	adds	r1, r2, r1
 80092f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80092f6:	4649      	mov	r1, r9
 80092f8:	414b      	adcs	r3, r1
 80092fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80092fc:	f04f 0200 	mov.w	r2, #0
 8009300:	f04f 0300 	mov.w	r3, #0
 8009304:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009308:	4659      	mov	r1, fp
 800930a:	00cb      	lsls	r3, r1, #3
 800930c:	4651      	mov	r1, sl
 800930e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009312:	4651      	mov	r1, sl
 8009314:	00ca      	lsls	r2, r1, #3
 8009316:	4610      	mov	r0, r2
 8009318:	4619      	mov	r1, r3
 800931a:	4603      	mov	r3, r0
 800931c:	4642      	mov	r2, r8
 800931e:	189b      	adds	r3, r3, r2
 8009320:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009324:	464b      	mov	r3, r9
 8009326:	460a      	mov	r2, r1
 8009328:	eb42 0303 	adc.w	r3, r2, r3
 800932c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800933c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009340:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009344:	460b      	mov	r3, r1
 8009346:	18db      	adds	r3, r3, r3
 8009348:	62bb      	str	r3, [r7, #40]	@ 0x28
 800934a:	4613      	mov	r3, r2
 800934c:	eb42 0303 	adc.w	r3, r2, r3
 8009350:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009352:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009356:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800935a:	f7f7 fc9d 	bl	8000c98 <__aeabi_uldivmod>
 800935e:	4602      	mov	r2, r0
 8009360:	460b      	mov	r3, r1
 8009362:	4b0d      	ldr	r3, [pc, #52]	@ (8009398 <UART_SetConfig+0x2d4>)
 8009364:	fba3 1302 	umull	r1, r3, r3, r2
 8009368:	095b      	lsrs	r3, r3, #5
 800936a:	2164      	movs	r1, #100	@ 0x64
 800936c:	fb01 f303 	mul.w	r3, r1, r3
 8009370:	1ad3      	subs	r3, r2, r3
 8009372:	00db      	lsls	r3, r3, #3
 8009374:	3332      	adds	r3, #50	@ 0x32
 8009376:	4a08      	ldr	r2, [pc, #32]	@ (8009398 <UART_SetConfig+0x2d4>)
 8009378:	fba2 2303 	umull	r2, r3, r2, r3
 800937c:	095b      	lsrs	r3, r3, #5
 800937e:	f003 0207 	and.w	r2, r3, #7
 8009382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4422      	add	r2, r4
 800938a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800938c:	e106      	b.n	800959c <UART_SetConfig+0x4d8>
 800938e:	bf00      	nop
 8009390:	40011000 	.word	0x40011000
 8009394:	40011400 	.word	0x40011400
 8009398:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800939c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093a0:	2200      	movs	r2, #0
 80093a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80093a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80093aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80093ae:	4642      	mov	r2, r8
 80093b0:	464b      	mov	r3, r9
 80093b2:	1891      	adds	r1, r2, r2
 80093b4:	6239      	str	r1, [r7, #32]
 80093b6:	415b      	adcs	r3, r3
 80093b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80093ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80093be:	4641      	mov	r1, r8
 80093c0:	1854      	adds	r4, r2, r1
 80093c2:	4649      	mov	r1, r9
 80093c4:	eb43 0501 	adc.w	r5, r3, r1
 80093c8:	f04f 0200 	mov.w	r2, #0
 80093cc:	f04f 0300 	mov.w	r3, #0
 80093d0:	00eb      	lsls	r3, r5, #3
 80093d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093d6:	00e2      	lsls	r2, r4, #3
 80093d8:	4614      	mov	r4, r2
 80093da:	461d      	mov	r5, r3
 80093dc:	4643      	mov	r3, r8
 80093de:	18e3      	adds	r3, r4, r3
 80093e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80093e4:	464b      	mov	r3, r9
 80093e6:	eb45 0303 	adc.w	r3, r5, r3
 80093ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80093ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80093fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80093fe:	f04f 0200 	mov.w	r2, #0
 8009402:	f04f 0300 	mov.w	r3, #0
 8009406:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800940a:	4629      	mov	r1, r5
 800940c:	008b      	lsls	r3, r1, #2
 800940e:	4621      	mov	r1, r4
 8009410:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009414:	4621      	mov	r1, r4
 8009416:	008a      	lsls	r2, r1, #2
 8009418:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800941c:	f7f7 fc3c 	bl	8000c98 <__aeabi_uldivmod>
 8009420:	4602      	mov	r2, r0
 8009422:	460b      	mov	r3, r1
 8009424:	4b60      	ldr	r3, [pc, #384]	@ (80095a8 <UART_SetConfig+0x4e4>)
 8009426:	fba3 2302 	umull	r2, r3, r3, r2
 800942a:	095b      	lsrs	r3, r3, #5
 800942c:	011c      	lsls	r4, r3, #4
 800942e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009432:	2200      	movs	r2, #0
 8009434:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009438:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800943c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009440:	4642      	mov	r2, r8
 8009442:	464b      	mov	r3, r9
 8009444:	1891      	adds	r1, r2, r2
 8009446:	61b9      	str	r1, [r7, #24]
 8009448:	415b      	adcs	r3, r3
 800944a:	61fb      	str	r3, [r7, #28]
 800944c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009450:	4641      	mov	r1, r8
 8009452:	1851      	adds	r1, r2, r1
 8009454:	6139      	str	r1, [r7, #16]
 8009456:	4649      	mov	r1, r9
 8009458:	414b      	adcs	r3, r1
 800945a:	617b      	str	r3, [r7, #20]
 800945c:	f04f 0200 	mov.w	r2, #0
 8009460:	f04f 0300 	mov.w	r3, #0
 8009464:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009468:	4659      	mov	r1, fp
 800946a:	00cb      	lsls	r3, r1, #3
 800946c:	4651      	mov	r1, sl
 800946e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009472:	4651      	mov	r1, sl
 8009474:	00ca      	lsls	r2, r1, #3
 8009476:	4610      	mov	r0, r2
 8009478:	4619      	mov	r1, r3
 800947a:	4603      	mov	r3, r0
 800947c:	4642      	mov	r2, r8
 800947e:	189b      	adds	r3, r3, r2
 8009480:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009484:	464b      	mov	r3, r9
 8009486:	460a      	mov	r2, r1
 8009488:	eb42 0303 	adc.w	r3, r2, r3
 800948c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	67bb      	str	r3, [r7, #120]	@ 0x78
 800949a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800949c:	f04f 0200 	mov.w	r2, #0
 80094a0:	f04f 0300 	mov.w	r3, #0
 80094a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80094a8:	4649      	mov	r1, r9
 80094aa:	008b      	lsls	r3, r1, #2
 80094ac:	4641      	mov	r1, r8
 80094ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094b2:	4641      	mov	r1, r8
 80094b4:	008a      	lsls	r2, r1, #2
 80094b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80094ba:	f7f7 fbed 	bl	8000c98 <__aeabi_uldivmod>
 80094be:	4602      	mov	r2, r0
 80094c0:	460b      	mov	r3, r1
 80094c2:	4611      	mov	r1, r2
 80094c4:	4b38      	ldr	r3, [pc, #224]	@ (80095a8 <UART_SetConfig+0x4e4>)
 80094c6:	fba3 2301 	umull	r2, r3, r3, r1
 80094ca:	095b      	lsrs	r3, r3, #5
 80094cc:	2264      	movs	r2, #100	@ 0x64
 80094ce:	fb02 f303 	mul.w	r3, r2, r3
 80094d2:	1acb      	subs	r3, r1, r3
 80094d4:	011b      	lsls	r3, r3, #4
 80094d6:	3332      	adds	r3, #50	@ 0x32
 80094d8:	4a33      	ldr	r2, [pc, #204]	@ (80095a8 <UART_SetConfig+0x4e4>)
 80094da:	fba2 2303 	umull	r2, r3, r2, r3
 80094de:	095b      	lsrs	r3, r3, #5
 80094e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80094e4:	441c      	add	r4, r3
 80094e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80094ea:	2200      	movs	r2, #0
 80094ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80094ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80094f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80094f4:	4642      	mov	r2, r8
 80094f6:	464b      	mov	r3, r9
 80094f8:	1891      	adds	r1, r2, r2
 80094fa:	60b9      	str	r1, [r7, #8]
 80094fc:	415b      	adcs	r3, r3
 80094fe:	60fb      	str	r3, [r7, #12]
 8009500:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009504:	4641      	mov	r1, r8
 8009506:	1851      	adds	r1, r2, r1
 8009508:	6039      	str	r1, [r7, #0]
 800950a:	4649      	mov	r1, r9
 800950c:	414b      	adcs	r3, r1
 800950e:	607b      	str	r3, [r7, #4]
 8009510:	f04f 0200 	mov.w	r2, #0
 8009514:	f04f 0300 	mov.w	r3, #0
 8009518:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800951c:	4659      	mov	r1, fp
 800951e:	00cb      	lsls	r3, r1, #3
 8009520:	4651      	mov	r1, sl
 8009522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009526:	4651      	mov	r1, sl
 8009528:	00ca      	lsls	r2, r1, #3
 800952a:	4610      	mov	r0, r2
 800952c:	4619      	mov	r1, r3
 800952e:	4603      	mov	r3, r0
 8009530:	4642      	mov	r2, r8
 8009532:	189b      	adds	r3, r3, r2
 8009534:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009536:	464b      	mov	r3, r9
 8009538:	460a      	mov	r2, r1
 800953a:	eb42 0303 	adc.w	r3, r2, r3
 800953e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	663b      	str	r3, [r7, #96]	@ 0x60
 800954a:	667a      	str	r2, [r7, #100]	@ 0x64
 800954c:	f04f 0200 	mov.w	r2, #0
 8009550:	f04f 0300 	mov.w	r3, #0
 8009554:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009558:	4649      	mov	r1, r9
 800955a:	008b      	lsls	r3, r1, #2
 800955c:	4641      	mov	r1, r8
 800955e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009562:	4641      	mov	r1, r8
 8009564:	008a      	lsls	r2, r1, #2
 8009566:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800956a:	f7f7 fb95 	bl	8000c98 <__aeabi_uldivmod>
 800956e:	4602      	mov	r2, r0
 8009570:	460b      	mov	r3, r1
 8009572:	4b0d      	ldr	r3, [pc, #52]	@ (80095a8 <UART_SetConfig+0x4e4>)
 8009574:	fba3 1302 	umull	r1, r3, r3, r2
 8009578:	095b      	lsrs	r3, r3, #5
 800957a:	2164      	movs	r1, #100	@ 0x64
 800957c:	fb01 f303 	mul.w	r3, r1, r3
 8009580:	1ad3      	subs	r3, r2, r3
 8009582:	011b      	lsls	r3, r3, #4
 8009584:	3332      	adds	r3, #50	@ 0x32
 8009586:	4a08      	ldr	r2, [pc, #32]	@ (80095a8 <UART_SetConfig+0x4e4>)
 8009588:	fba2 2303 	umull	r2, r3, r2, r3
 800958c:	095b      	lsrs	r3, r3, #5
 800958e:	f003 020f 	and.w	r2, r3, #15
 8009592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4422      	add	r2, r4
 800959a:	609a      	str	r2, [r3, #8]
}
 800959c:	bf00      	nop
 800959e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80095a2:	46bd      	mov	sp, r7
 80095a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095a8:	51eb851f 	.word	0x51eb851f

080095ac <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80095ac:	b084      	sub	sp, #16
 80095ae:	b480      	push	{r7}
 80095b0:	b085      	sub	sp, #20
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
 80095b6:	f107 001c 	add.w	r0, r7, #28
 80095ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80095be:	2300      	movs	r3, #0
 80095c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80095c2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80095c4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80095c6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80095c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80095ca:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80095cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80095ce:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80095d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80095d2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80095d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80095d6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80095d8:	68fa      	ldr	r2, [r7, #12]
 80095da:	4313      	orrs	r3, r2
 80095dc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 80095e6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80095ea:	68fa      	ldr	r2, [r7, #12]
 80095ec:	431a      	orrs	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80095f2:	2300      	movs	r3, #0
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3714      	adds	r7, #20
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	b004      	add	sp, #16
 8009600:	4770      	bx	lr

08009602 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009602:	b480      	push	{r7}
 8009604:	b083      	sub	sp, #12
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8009610:	4618      	mov	r0, r3
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	370c      	adds	r7, #12
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr

0800963e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800963e:	b480      	push	{r7}
 8009640:	b083      	sub	sp, #12
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2203      	movs	r2, #3
 800964a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	370c      	adds	r7, #12
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr

0800965a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800965a:	b480      	push	{r7}
 800965c:	b083      	sub	sp, #12
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f003 0303 	and.w	r3, r3, #3
}
 800966a:	4618      	mov	r0, r3
 800966c:	370c      	adds	r7, #12
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr

08009676 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009676:	b480      	push	{r7}
 8009678:	b085      	sub	sp, #20
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
 800967e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009680:	2300      	movs	r3, #0
 8009682:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009694:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800969a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80096a0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80096a2:	68fa      	ldr	r2, [r7, #12]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80096b0:	f023 030f 	bic.w	r3, r3, #15
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	431a      	orrs	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3714      	adds	r7, #20
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr

080096ca <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80096ca:	b480      	push	{r7}
 80096cc:	b083      	sub	sp, #12
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	691b      	ldr	r3, [r3, #16]
 80096d6:	b2db      	uxtb	r3, r3
}
 80096d8:	4618      	mov	r0, r3
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b085      	sub	sp, #20
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	3314      	adds	r3, #20
 80096f2:	461a      	mov	r2, r3
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	4413      	add	r3, r2
 80096f8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
}  
 80096fe:	4618      	mov	r0, r3
 8009700:	3714      	adds	r7, #20
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr

0800970a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800970a:	b480      	push	{r7}
 800970c:	b085      	sub	sp, #20
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
 8009712:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009714:	2300      	movs	r3, #0
 8009716:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	685a      	ldr	r2, [r3, #4]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009730:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009736:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800973c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	4313      	orrs	r3, r2
 8009742:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009748:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	431a      	orrs	r2, r3
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009754:	2300      	movs	r3, #0

}
 8009756:	4618      	mov	r0, r3
 8009758:	3714      	adds	r7, #20
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr

08009762 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b088      	sub	sp, #32
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009770:	2310      	movs	r3, #16
 8009772:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009774:	2340      	movs	r3, #64	@ 0x40
 8009776:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009778:	2300      	movs	r3, #0
 800977a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800977c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009780:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009782:	f107 0308 	add.w	r3, r7, #8
 8009786:	4619      	mov	r1, r3
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f7ff ff74 	bl	8009676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800978e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009792:	2110      	movs	r1, #16
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 fa19 	bl	8009bcc <SDMMC_GetCmdResp1>
 800979a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800979c:	69fb      	ldr	r3, [r7, #28]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3720      	adds	r7, #32
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b088      	sub	sp, #32
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80097b4:	2311      	movs	r3, #17
 80097b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80097b8:	2340      	movs	r3, #64	@ 0x40
 80097ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80097bc:	2300      	movs	r3, #0
 80097be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80097c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80097c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097c6:	f107 0308 	add.w	r3, r7, #8
 80097ca:	4619      	mov	r1, r3
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f7ff ff52 	bl	8009676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80097d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097d6:	2111      	movs	r1, #17
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 f9f7 	bl	8009bcc <SDMMC_GetCmdResp1>
 80097de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097e0:	69fb      	ldr	r3, [r7, #28]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3720      	adds	r7, #32
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b088      	sub	sp, #32
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
 80097f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80097f8:	2312      	movs	r3, #18
 80097fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80097fc:	2340      	movs	r3, #64	@ 0x40
 80097fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009800:	2300      	movs	r3, #0
 8009802:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009804:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009808:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800980a:	f107 0308 	add.w	r3, r7, #8
 800980e:	4619      	mov	r1, r3
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f7ff ff30 	bl	8009676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800981a:	2112      	movs	r1, #18
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 f9d5 	bl	8009bcc <SDMMC_GetCmdResp1>
 8009822:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009824:	69fb      	ldr	r3, [r7, #28]
}
 8009826:	4618      	mov	r0, r3
 8009828:	3720      	adds	r7, #32
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800982e:	b580      	push	{r7, lr}
 8009830:	b088      	sub	sp, #32
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
 8009836:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800983c:	2318      	movs	r3, #24
 800983e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009840:	2340      	movs	r3, #64	@ 0x40
 8009842:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009844:	2300      	movs	r3, #0
 8009846:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009848:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800984c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800984e:	f107 0308 	add.w	r3, r7, #8
 8009852:	4619      	mov	r1, r3
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f7ff ff0e 	bl	8009676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800985a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800985e:	2118      	movs	r1, #24
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 f9b3 	bl	8009bcc <SDMMC_GetCmdResp1>
 8009866:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009868:	69fb      	ldr	r3, [r7, #28]
}
 800986a:	4618      	mov	r0, r3
 800986c:	3720      	adds	r7, #32
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b088      	sub	sp, #32
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
 800987a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009880:	2319      	movs	r3, #25
 8009882:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009884:	2340      	movs	r3, #64	@ 0x40
 8009886:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009888:	2300      	movs	r3, #0
 800988a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800988c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009890:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009892:	f107 0308 	add.w	r3, r7, #8
 8009896:	4619      	mov	r1, r3
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f7ff feec 	bl	8009676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800989e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80098a2:	2119      	movs	r1, #25
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 f991 	bl	8009bcc <SDMMC_GetCmdResp1>
 80098aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098ac:	69fb      	ldr	r3, [r7, #28]
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3720      	adds	r7, #32
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
	...

080098b8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b088      	sub	sp, #32
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80098c0:	2300      	movs	r3, #0
 80098c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80098c4:	230c      	movs	r3, #12
 80098c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80098c8:	2340      	movs	r3, #64	@ 0x40
 80098ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098cc:	2300      	movs	r3, #0
 80098ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098d6:	f107 0308 	add.w	r3, r7, #8
 80098da:	4619      	mov	r1, r3
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f7ff feca 	bl	8009676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80098e2:	4a05      	ldr	r2, [pc, #20]	@ (80098f8 <SDMMC_CmdStopTransfer+0x40>)
 80098e4:	210c      	movs	r1, #12
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 f970 	bl	8009bcc <SDMMC_GetCmdResp1>
 80098ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098ee:	69fb      	ldr	r3, [r7, #28]
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3720      	adds	r7, #32
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}
 80098f8:	05f5e100 	.word	0x05f5e100

080098fc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b08a      	sub	sp, #40	@ 0x28
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800990c:	2307      	movs	r3, #7
 800990e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009910:	2340      	movs	r3, #64	@ 0x40
 8009912:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009914:	2300      	movs	r3, #0
 8009916:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009918:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800991c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800991e:	f107 0310 	add.w	r3, r7, #16
 8009922:	4619      	mov	r1, r3
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f7ff fea6 	bl	8009676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800992a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800992e:	2107      	movs	r1, #7
 8009930:	68f8      	ldr	r0, [r7, #12]
 8009932:	f000 f94b 	bl	8009bcc <SDMMC_GetCmdResp1>
 8009936:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8009938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800993a:	4618      	mov	r0, r3
 800993c:	3728      	adds	r7, #40	@ 0x28
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b088      	sub	sp, #32
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800994a:	2300      	movs	r3, #0
 800994c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800994e:	2300      	movs	r3, #0
 8009950:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009952:	2300      	movs	r3, #0
 8009954:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009956:	2300      	movs	r3, #0
 8009958:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800995a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800995e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009960:	f107 0308 	add.w	r3, r7, #8
 8009964:	4619      	mov	r1, r3
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f7ff fe85 	bl	8009676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 fb65 	bl	800a03c <SDMMC_GetCmdError>
 8009972:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009974:	69fb      	ldr	r3, [r7, #28]
}
 8009976:	4618      	mov	r0, r3
 8009978:	3720      	adds	r7, #32
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b088      	sub	sp, #32
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009986:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800998a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800998c:	2308      	movs	r3, #8
 800998e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009990:	2340      	movs	r3, #64	@ 0x40
 8009992:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009994:	2300      	movs	r3, #0
 8009996:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009998:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800999c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800999e:	f107 0308 	add.w	r3, r7, #8
 80099a2:	4619      	mov	r1, r3
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f7ff fe66 	bl	8009676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 faf8 	bl	8009fa0 <SDMMC_GetCmdResp7>
 80099b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099b2:	69fb      	ldr	r3, [r7, #28]
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3720      	adds	r7, #32
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b088      	sub	sp, #32
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80099ca:	2337      	movs	r3, #55	@ 0x37
 80099cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80099ce:	2340      	movs	r3, #64	@ 0x40
 80099d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099d2:	2300      	movs	r3, #0
 80099d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099dc:	f107 0308 	add.w	r3, r7, #8
 80099e0:	4619      	mov	r1, r3
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f7ff fe47 	bl	8009676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80099e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099ec:	2137      	movs	r1, #55	@ 0x37
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 f8ec 	bl	8009bcc <SDMMC_GetCmdResp1>
 80099f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099f6:	69fb      	ldr	r3, [r7, #28]
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3720      	adds	r7, #32
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b088      	sub	sp, #32
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009a10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009a16:	2329      	movs	r3, #41	@ 0x29
 8009a18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a1a:	2340      	movs	r3, #64	@ 0x40
 8009a1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a28:	f107 0308 	add.w	r3, r7, #8
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f7ff fe21 	bl	8009676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 f9ff 	bl	8009e38 <SDMMC_GetCmdResp3>
 8009a3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a3c:	69fb      	ldr	r3, [r7, #28]
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3720      	adds	r7, #32
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b088      	sub	sp, #32
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
 8009a4e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009a54:	2306      	movs	r3, #6
 8009a56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a58:	2340      	movs	r3, #64	@ 0x40
 8009a5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a66:	f107 0308 	add.w	r3, r7, #8
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f7ff fe02 	bl	8009676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009a72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a76:	2106      	movs	r1, #6
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 f8a7 	bl	8009bcc <SDMMC_GetCmdResp1>
 8009a7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a80:	69fb      	ldr	r3, [r7, #28]
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3720      	adds	r7, #32
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b088      	sub	sp, #32
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009a92:	2300      	movs	r3, #0
 8009a94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009a96:	2333      	movs	r3, #51	@ 0x33
 8009a98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a9a:	2340      	movs	r3, #64	@ 0x40
 8009a9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009aa2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009aa6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009aa8:	f107 0308 	add.w	r3, r7, #8
 8009aac:	4619      	mov	r1, r3
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f7ff fde1 	bl	8009676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009ab4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ab8:	2133      	movs	r1, #51	@ 0x33
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 f886 	bl	8009bcc <SDMMC_GetCmdResp1>
 8009ac0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ac2:	69fb      	ldr	r3, [r7, #28]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3720      	adds	r7, #32
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b088      	sub	sp, #32
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009ad8:	2302      	movs	r3, #2
 8009ada:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009adc:	23c0      	movs	r3, #192	@ 0xc0
 8009ade:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ae4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ae8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009aea:	f107 0308 	add.w	r3, r7, #8
 8009aee:	4619      	mov	r1, r3
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f7ff fdc0 	bl	8009676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 f956 	bl	8009da8 <SDMMC_GetCmdResp2>
 8009afc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009afe:	69fb      	ldr	r3, [r7, #28]
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3720      	adds	r7, #32
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b088      	sub	sp, #32
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009b16:	2309      	movs	r3, #9
 8009b18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009b1a:	23c0      	movs	r3, #192	@ 0xc0
 8009b1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b28:	f107 0308 	add.w	r3, r7, #8
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f7ff fda1 	bl	8009676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 f937 	bl	8009da8 <SDMMC_GetCmdResp2>
 8009b3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b3c:	69fb      	ldr	r3, [r7, #28]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3720      	adds	r7, #32
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b088      	sub	sp, #32
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
 8009b4e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009b50:	2300      	movs	r3, #0
 8009b52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009b54:	2303      	movs	r3, #3
 8009b56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009b58:	2340      	movs	r3, #64	@ 0x40
 8009b5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b66:	f107 0308 	add.w	r3, r7, #8
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f7ff fd82 	bl	8009676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009b72:	683a      	ldr	r2, [r7, #0]
 8009b74:	2103      	movs	r1, #3
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 f99c 	bl	8009eb4 <SDMMC_GetCmdResp6>
 8009b7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b7e:	69fb      	ldr	r3, [r7, #28]
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3720      	adds	r7, #32
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b088      	sub	sp, #32
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009b96:	230d      	movs	r3, #13
 8009b98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009b9a:	2340      	movs	r3, #64	@ 0x40
 8009b9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ba2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ba6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ba8:	f107 0308 	add.w	r3, r7, #8
 8009bac:	4619      	mov	r1, r3
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f7ff fd61 	bl	8009676 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009bb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009bb8:	210d      	movs	r1, #13
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 f806 	bl	8009bcc <SDMMC_GetCmdResp1>
 8009bc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bc2:	69fb      	ldr	r3, [r7, #28]
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3720      	adds	r7, #32
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b088      	sub	sp, #32
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	607a      	str	r2, [r7, #4]
 8009bd8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009bda:	4b70      	ldr	r3, [pc, #448]	@ (8009d9c <SDMMC_GetCmdResp1+0x1d0>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a70      	ldr	r2, [pc, #448]	@ (8009da0 <SDMMC_GetCmdResp1+0x1d4>)
 8009be0:	fba2 2303 	umull	r2, r3, r2, r3
 8009be4:	0a5a      	lsrs	r2, r3, #9
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	fb02 f303 	mul.w	r3, r2, r3
 8009bec:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	1e5a      	subs	r2, r3, #1
 8009bf2:	61fa      	str	r2, [r7, #28]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d102      	bne.n	8009bfe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009bf8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009bfc:	e0c9      	b.n	8009d92 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c02:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d0ef      	beq.n	8009bee <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d1ea      	bne.n	8009bee <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c1c:	f003 0304 	and.w	r3, r3, #4
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d004      	beq.n	8009c2e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2204      	movs	r2, #4
 8009c28:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c2a:	2304      	movs	r3, #4
 8009c2c:	e0b1      	b.n	8009d92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c32:	f003 0301 	and.w	r3, r3, #1
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d004      	beq.n	8009c44 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c40:	2301      	movs	r3, #1
 8009c42:	e0a6      	b.n	8009d92 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	22c5      	movs	r2, #197	@ 0xc5
 8009c48:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	f7ff fd3d 	bl	80096ca <SDIO_GetCommandResponse>
 8009c50:	4603      	mov	r3, r0
 8009c52:	461a      	mov	r2, r3
 8009c54:	7afb      	ldrb	r3, [r7, #11]
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d001      	beq.n	8009c5e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e099      	b.n	8009d92 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009c5e:	2100      	movs	r1, #0
 8009c60:	68f8      	ldr	r0, [r7, #12]
 8009c62:	f7ff fd3f 	bl	80096e4 <SDIO_GetResponse>
 8009c66:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009c68:	697a      	ldr	r2, [r7, #20]
 8009c6a:	4b4e      	ldr	r3, [pc, #312]	@ (8009da4 <SDMMC_GetCmdResp1+0x1d8>)
 8009c6c:	4013      	ands	r3, r2
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d101      	bne.n	8009c76 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009c72:	2300      	movs	r3, #0
 8009c74:	e08d      	b.n	8009d92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	da02      	bge.n	8009c82 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009c7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009c80:	e087      	b.n	8009d92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d001      	beq.n	8009c90 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009c8c:	2340      	movs	r3, #64	@ 0x40
 8009c8e:	e080      	b.n	8009d92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d001      	beq.n	8009c9e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009c9a:	2380      	movs	r3, #128	@ 0x80
 8009c9c:	e079      	b.n	8009d92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d002      	beq.n	8009cae <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009ca8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009cac:	e071      	b.n	8009d92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d002      	beq.n	8009cbe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009cb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009cbc:	e069      	b.n	8009d92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d002      	beq.n	8009cce <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009cc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ccc:	e061      	b.n	8009d92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d002      	beq.n	8009cde <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009cd8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009cdc:	e059      	b.n	8009d92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d002      	beq.n	8009cee <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009ce8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009cec:	e051      	b.n	8009d92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d002      	beq.n	8009cfe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009cf8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009cfc:	e049      	b.n	8009d92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d002      	beq.n	8009d0e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009d08:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009d0c:	e041      	b.n	8009d92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d002      	beq.n	8009d1e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009d18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d1c:	e039      	b.n	8009d92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d002      	beq.n	8009d2e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009d28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009d2c:	e031      	b.n	8009d92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d002      	beq.n	8009d3e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009d38:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009d3c:	e029      	b.n	8009d92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d002      	beq.n	8009d4e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009d48:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009d4c:	e021      	b.n	8009d92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d002      	beq.n	8009d5e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009d58:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009d5c:	e019      	b.n	8009d92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d002      	beq.n	8009d6e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009d68:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009d6c:	e011      	b.n	8009d92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d002      	beq.n	8009d7e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009d78:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009d7c:	e009      	b.n	8009d92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	f003 0308 	and.w	r3, r3, #8
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d002      	beq.n	8009d8e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009d88:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8009d8c:	e001      	b.n	8009d92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009d8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3720      	adds	r7, #32
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	20000004 	.word	0x20000004
 8009da0:	10624dd3 	.word	0x10624dd3
 8009da4:	fdffe008 	.word	0xfdffe008

08009da8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009db0:	4b1f      	ldr	r3, [pc, #124]	@ (8009e30 <SDMMC_GetCmdResp2+0x88>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a1f      	ldr	r2, [pc, #124]	@ (8009e34 <SDMMC_GetCmdResp2+0x8c>)
 8009db6:	fba2 2303 	umull	r2, r3, r2, r3
 8009dba:	0a5b      	lsrs	r3, r3, #9
 8009dbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009dc0:	fb02 f303 	mul.w	r3, r2, r3
 8009dc4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	1e5a      	subs	r2, r3, #1
 8009dca:	60fa      	str	r2, [r7, #12]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d102      	bne.n	8009dd6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009dd0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009dd4:	e026      	b.n	8009e24 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dda:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d0ef      	beq.n	8009dc6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d1ea      	bne.n	8009dc6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009df4:	f003 0304 	and.w	r3, r3, #4
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d004      	beq.n	8009e06 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2204      	movs	r2, #4
 8009e00:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e02:	2304      	movs	r3, #4
 8009e04:	e00e      	b.n	8009e24 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e0a:	f003 0301 	and.w	r3, r3, #1
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d004      	beq.n	8009e1c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2201      	movs	r2, #1
 8009e16:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e003      	b.n	8009e24 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	22c5      	movs	r2, #197	@ 0xc5
 8009e20:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3714      	adds	r7, #20
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr
 8009e30:	20000004 	.word	0x20000004
 8009e34:	10624dd3 	.word	0x10624dd3

08009e38 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009e40:	4b1a      	ldr	r3, [pc, #104]	@ (8009eac <SDMMC_GetCmdResp3+0x74>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a1a      	ldr	r2, [pc, #104]	@ (8009eb0 <SDMMC_GetCmdResp3+0x78>)
 8009e46:	fba2 2303 	umull	r2, r3, r2, r3
 8009e4a:	0a5b      	lsrs	r3, r3, #9
 8009e4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e50:	fb02 f303 	mul.w	r3, r2, r3
 8009e54:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	1e5a      	subs	r2, r3, #1
 8009e5a:	60fa      	str	r2, [r7, #12]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d102      	bne.n	8009e66 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e60:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009e64:	e01b      	b.n	8009e9e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e6a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d0ef      	beq.n	8009e56 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d1ea      	bne.n	8009e56 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e84:	f003 0304 	and.w	r3, r3, #4
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d004      	beq.n	8009e96 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2204      	movs	r2, #4
 8009e90:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e92:	2304      	movs	r3, #4
 8009e94:	e003      	b.n	8009e9e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	22c5      	movs	r2, #197	@ 0xc5
 8009e9a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009e9c:	2300      	movs	r3, #0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3714      	adds	r7, #20
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr
 8009eaa:	bf00      	nop
 8009eac:	20000004 	.word	0x20000004
 8009eb0:	10624dd3 	.word	0x10624dd3

08009eb4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b088      	sub	sp, #32
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	607a      	str	r2, [r7, #4]
 8009ec0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009ec2:	4b35      	ldr	r3, [pc, #212]	@ (8009f98 <SDMMC_GetCmdResp6+0xe4>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a35      	ldr	r2, [pc, #212]	@ (8009f9c <SDMMC_GetCmdResp6+0xe8>)
 8009ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8009ecc:	0a5b      	lsrs	r3, r3, #9
 8009ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ed2:	fb02 f303 	mul.w	r3, r2, r3
 8009ed6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	1e5a      	subs	r2, r3, #1
 8009edc:	61fa      	str	r2, [r7, #28]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d102      	bne.n	8009ee8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ee2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009ee6:	e052      	b.n	8009f8e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009eec:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009eee:	69bb      	ldr	r3, [r7, #24]
 8009ef0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d0ef      	beq.n	8009ed8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009ef8:	69bb      	ldr	r3, [r7, #24]
 8009efa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1ea      	bne.n	8009ed8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f06:	f003 0304 	and.w	r3, r3, #4
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d004      	beq.n	8009f18 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2204      	movs	r2, #4
 8009f12:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f14:	2304      	movs	r3, #4
 8009f16:	e03a      	b.n	8009f8e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f1c:	f003 0301 	and.w	r3, r3, #1
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d004      	beq.n	8009f2e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2201      	movs	r2, #1
 8009f28:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e02f      	b.n	8009f8e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009f2e:	68f8      	ldr	r0, [r7, #12]
 8009f30:	f7ff fbcb 	bl	80096ca <SDIO_GetCommandResponse>
 8009f34:	4603      	mov	r3, r0
 8009f36:	461a      	mov	r2, r3
 8009f38:	7afb      	ldrb	r3, [r7, #11]
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d001      	beq.n	8009f42 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e025      	b.n	8009f8e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	22c5      	movs	r2, #197	@ 0xc5
 8009f46:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009f48:	2100      	movs	r1, #0
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	f7ff fbca 	bl	80096e4 <SDIO_GetResponse>
 8009f50:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d106      	bne.n	8009f6a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	0c1b      	lsrs	r3, r3, #16
 8009f60:	b29a      	uxth	r2, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009f66:	2300      	movs	r3, #0
 8009f68:	e011      	b.n	8009f8e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d002      	beq.n	8009f7a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009f74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009f78:	e009      	b.n	8009f8e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d002      	beq.n	8009f8a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009f84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009f88:	e001      	b.n	8009f8e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009f8a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3720      	adds	r7, #32
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	20000004 	.word	0x20000004
 8009f9c:	10624dd3 	.word	0x10624dd3

08009fa0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009fa8:	4b22      	ldr	r3, [pc, #136]	@ (800a034 <SDMMC_GetCmdResp7+0x94>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a22      	ldr	r2, [pc, #136]	@ (800a038 <SDMMC_GetCmdResp7+0x98>)
 8009fae:	fba2 2303 	umull	r2, r3, r2, r3
 8009fb2:	0a5b      	lsrs	r3, r3, #9
 8009fb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009fb8:	fb02 f303 	mul.w	r3, r2, r3
 8009fbc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	1e5a      	subs	r2, r3, #1
 8009fc2:	60fa      	str	r2, [r7, #12]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d102      	bne.n	8009fce <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009fc8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009fcc:	e02c      	b.n	800a028 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fd2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d0ef      	beq.n	8009fbe <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d1ea      	bne.n	8009fbe <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fec:	f003 0304 	and.w	r3, r3, #4
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d004      	beq.n	8009ffe <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2204      	movs	r2, #4
 8009ff8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009ffa:	2304      	movs	r3, #4
 8009ffc:	e014      	b.n	800a028 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a002:	f003 0301 	and.w	r3, r3, #1
 800a006:	2b00      	cmp	r3, #0
 800a008:	d004      	beq.n	800a014 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2201      	movs	r2, #1
 800a00e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a010:	2301      	movs	r3, #1
 800a012:	e009      	b.n	800a028 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d002      	beq.n	800a026 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2240      	movs	r2, #64	@ 0x40
 800a024:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a026:	2300      	movs	r3, #0
  
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3714      	adds	r7, #20
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr
 800a034:	20000004 	.word	0x20000004
 800a038:	10624dd3 	.word	0x10624dd3

0800a03c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b085      	sub	sp, #20
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a044:	4b11      	ldr	r3, [pc, #68]	@ (800a08c <SDMMC_GetCmdError+0x50>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a11      	ldr	r2, [pc, #68]	@ (800a090 <SDMMC_GetCmdError+0x54>)
 800a04a:	fba2 2303 	umull	r2, r3, r2, r3
 800a04e:	0a5b      	lsrs	r3, r3, #9
 800a050:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a054:	fb02 f303 	mul.w	r3, r2, r3
 800a058:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	1e5a      	subs	r2, r3, #1
 800a05e:	60fa      	str	r2, [r7, #12]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d102      	bne.n	800a06a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a064:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a068:	e009      	b.n	800a07e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a06e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a072:	2b00      	cmp	r3, #0
 800a074:	d0f1      	beq.n	800a05a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	22c5      	movs	r2, #197	@ 0xc5
 800a07a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3714      	adds	r7, #20
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr
 800a08a:	bf00      	nop
 800a08c:	20000004 	.word	0x20000004
 800a090:	10624dd3 	.word	0x10624dd3

0800a094 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a098:	4904      	ldr	r1, [pc, #16]	@ (800a0ac <MX_FATFS_Init+0x18>)
 800a09a:	4805      	ldr	r0, [pc, #20]	@ (800a0b0 <MX_FATFS_Init+0x1c>)
 800a09c:	f000 fa84 	bl	800a5a8 <FATFS_LinkDriver>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	4b03      	ldr	r3, [pc, #12]	@ (800a0b4 <MX_FATFS_Init+0x20>)
 800a0a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a0a8:	bf00      	nop
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	200009f4 	.word	0x200009f4
 800a0b0:	0801050c 	.word	0x0801050c
 800a0b4:	200009f0 	.word	0x200009f0

0800a0b8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a0c2:	f000 f896 	bl	800a1f2 <BSP_SD_IsDetected>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d001      	beq.n	800a0d0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e012      	b.n	800a0f6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a0d0:	480b      	ldr	r0, [pc, #44]	@ (800a100 <BSP_SD_Init+0x48>)
 800a0d2:	f7fc fbd3 	bl	800687c <HAL_SD_Init>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a0da:	79fb      	ldrb	r3, [r7, #7]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d109      	bne.n	800a0f4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a0e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a0e4:	4806      	ldr	r0, [pc, #24]	@ (800a100 <BSP_SD_Init+0x48>)
 800a0e6:	f7fd f9a1 	bl	800742c <HAL_SD_ConfigWideBusOperation>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d001      	beq.n	800a0f4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a0f4:	79fb      	ldrb	r3, [r7, #7]
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3708      	adds	r7, #8
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	20000454 	.word	0x20000454

0800a104 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b086      	sub	sp, #24
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a110:	2300      	movs	r3, #0
 800a112:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	68ba      	ldr	r2, [r7, #8]
 800a118:	68f9      	ldr	r1, [r7, #12]
 800a11a:	4806      	ldr	r0, [pc, #24]	@ (800a134 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a11c:	f7fc fc5e 	bl	80069dc <HAL_SD_ReadBlocks_DMA>
 800a120:	4603      	mov	r3, r0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d001      	beq.n	800a12a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a126:	2301      	movs	r3, #1
 800a128:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a12a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3718      	adds	r7, #24
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	20000454 	.word	0x20000454

0800a138 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b086      	sub	sp, #24
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a144:	2300      	movs	r3, #0
 800a146:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	68ba      	ldr	r2, [r7, #8]
 800a14c:	68f9      	ldr	r1, [r7, #12]
 800a14e:	4806      	ldr	r0, [pc, #24]	@ (800a168 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a150:	f7fc fd26 	bl	8006ba0 <HAL_SD_WriteBlocks_DMA>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d001      	beq.n	800a15e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a15e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a160:	4618      	mov	r0, r3
 800a162:	3718      	adds	r7, #24
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	20000454 	.word	0x20000454

0800a16c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a170:	4805      	ldr	r0, [pc, #20]	@ (800a188 <BSP_SD_GetCardState+0x1c>)
 800a172:	f7fd f9f5 	bl	8007560 <HAL_SD_GetCardState>
 800a176:	4603      	mov	r3, r0
 800a178:	2b04      	cmp	r3, #4
 800a17a:	bf14      	ite	ne
 800a17c:	2301      	movne	r3, #1
 800a17e:	2300      	moveq	r3, #0
 800a180:	b2db      	uxtb	r3, r3
}
 800a182:	4618      	mov	r0, r3
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	20000454 	.word	0x20000454

0800a18c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a194:	6879      	ldr	r1, [r7, #4]
 800a196:	4803      	ldr	r0, [pc, #12]	@ (800a1a4 <BSP_SD_GetCardInfo+0x18>)
 800a198:	f7fd f91c 	bl	80073d4 <HAL_SD_GetCardInfo>
}
 800a19c:	bf00      	nop
 800a19e:	3708      	adds	r7, #8
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}
 800a1a4:	20000454 	.word	0x20000454

0800a1a8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a1b0:	f000 f818 	bl	800a1e4 <BSP_SD_AbortCallback>
}
 800a1b4:	bf00      	nop
 800a1b6:	3708      	adds	r7, #8
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a1c4:	f000 f98c 	bl	800a4e0 <BSP_SD_WriteCpltCallback>
}
 800a1c8:	bf00      	nop
 800a1ca:	3708      	adds	r7, #8
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a1d8:	f000 f98e 	bl	800a4f8 <BSP_SD_ReadCpltCallback>
}
 800a1dc:	bf00      	nop
 800a1de:	3708      	adds	r7, #8
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	af00      	add	r7, sp, #0

}
 800a1e8:	bf00      	nop
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr

0800a1f2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a1f2:	b480      	push	{r7}
 800a1f4:	b083      	sub	sp, #12
 800a1f6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800a1fc:	79fb      	ldrb	r3, [r7, #7]
 800a1fe:	b2db      	uxtb	r3, r3
}
 800a200:	4618      	mov	r0, r3
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b084      	sub	sp, #16
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800a214:	f7f9 fac2 	bl	800379c <HAL_GetTick>
 800a218:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800a21a:	e006      	b.n	800a22a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a21c:	f7ff ffa6 	bl	800a16c <BSP_SD_GetCardState>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d101      	bne.n	800a22a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a226:	2300      	movs	r3, #0
 800a228:	e009      	b.n	800a23e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800a22a:	f7f9 fab7 	bl	800379c <HAL_GetTick>
 800a22e:	4602      	mov	r2, r0
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	1ad3      	subs	r3, r2, r3
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	429a      	cmp	r2, r3
 800a238:	d8f0      	bhi.n	800a21c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a23a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3710      	adds	r7, #16
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
	...

0800a248 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	4603      	mov	r3, r0
 800a250:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a252:	4b0b      	ldr	r3, [pc, #44]	@ (800a280 <SD_CheckStatus+0x38>)
 800a254:	2201      	movs	r2, #1
 800a256:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a258:	f7ff ff88 	bl	800a16c <BSP_SD_GetCardState>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d107      	bne.n	800a272 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a262:	4b07      	ldr	r3, [pc, #28]	@ (800a280 <SD_CheckStatus+0x38>)
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	b2db      	uxtb	r3, r3
 800a268:	f023 0301 	bic.w	r3, r3, #1
 800a26c:	b2da      	uxtb	r2, r3
 800a26e:	4b04      	ldr	r3, [pc, #16]	@ (800a280 <SD_CheckStatus+0x38>)
 800a270:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a272:	4b03      	ldr	r3, [pc, #12]	@ (800a280 <SD_CheckStatus+0x38>)
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	b2db      	uxtb	r3, r3
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3708      	adds	r7, #8
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	2000000d 	.word	0x2000000d

0800a284 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	4603      	mov	r3, r0
 800a28c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a28e:	f7ff ff13 	bl	800a0b8 <BSP_SD_Init>
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d107      	bne.n	800a2a8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800a298:	79fb      	ldrb	r3, [r7, #7]
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7ff ffd4 	bl	800a248 <SD_CheckStatus>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	4b04      	ldr	r3, [pc, #16]	@ (800a2b8 <SD_initialize+0x34>)
 800a2a6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a2a8:	4b03      	ldr	r3, [pc, #12]	@ (800a2b8 <SD_initialize+0x34>)
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	b2db      	uxtb	r3, r3
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3708      	adds	r7, #8
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	2000000d 	.word	0x2000000d

0800a2bc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a2c6:	79fb      	ldrb	r3, [r7, #7]
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f7ff ffbd 	bl	800a248 <SD_CheckStatus>
 800a2ce:	4603      	mov	r3, r0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3708      	adds	r7, #8
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60b9      	str	r1, [r7, #8]
 800a2e0:	607a      	str	r2, [r7, #4]
 800a2e2:	603b      	str	r3, [r7, #0]
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a2ec:	f247 5030 	movw	r0, #30000	@ 0x7530
 800a2f0:	f7ff ff8c 	bl	800a20c <SD_CheckStatusWithTimeout>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	da01      	bge.n	800a2fe <SD_read+0x26>
  {
    return res;
 800a2fa:	7dfb      	ldrb	r3, [r7, #23]
 800a2fc:	e03b      	b.n	800a376 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800a2fe:	683a      	ldr	r2, [r7, #0]
 800a300:	6879      	ldr	r1, [r7, #4]
 800a302:	68b8      	ldr	r0, [r7, #8]
 800a304:	f7ff fefe 	bl	800a104 <BSP_SD_ReadBlocks_DMA>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d132      	bne.n	800a374 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800a30e:	4b1c      	ldr	r3, [pc, #112]	@ (800a380 <SD_read+0xa8>)
 800a310:	2200      	movs	r2, #0
 800a312:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800a314:	f7f9 fa42 	bl	800379c <HAL_GetTick>
 800a318:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a31a:	bf00      	nop
 800a31c:	4b18      	ldr	r3, [pc, #96]	@ (800a380 <SD_read+0xa8>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d108      	bne.n	800a336 <SD_read+0x5e>
 800a324:	f7f9 fa3a 	bl	800379c <HAL_GetTick>
 800a328:	4602      	mov	r2, r0
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	1ad3      	subs	r3, r2, r3
 800a32e:	f247 522f 	movw	r2, #29999	@ 0x752f
 800a332:	4293      	cmp	r3, r2
 800a334:	d9f2      	bls.n	800a31c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800a336:	4b12      	ldr	r3, [pc, #72]	@ (800a380 <SD_read+0xa8>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d102      	bne.n	800a344 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800a33e:	2301      	movs	r3, #1
 800a340:	75fb      	strb	r3, [r7, #23]
 800a342:	e017      	b.n	800a374 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800a344:	4b0e      	ldr	r3, [pc, #56]	@ (800a380 <SD_read+0xa8>)
 800a346:	2200      	movs	r2, #0
 800a348:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a34a:	f7f9 fa27 	bl	800379c <HAL_GetTick>
 800a34e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a350:	e007      	b.n	800a362 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a352:	f7ff ff0b 	bl	800a16c <BSP_SD_GetCardState>
 800a356:	4603      	mov	r3, r0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d102      	bne.n	800a362 <SD_read+0x8a>
          {
            res = RES_OK;
 800a35c:	2300      	movs	r3, #0
 800a35e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800a360:	e008      	b.n	800a374 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a362:	f7f9 fa1b 	bl	800379c <HAL_GetTick>
 800a366:	4602      	mov	r2, r0
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	1ad3      	subs	r3, r2, r3
 800a36c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800a370:	4293      	cmp	r3, r2
 800a372:	d9ee      	bls.n	800a352 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800a374:	7dfb      	ldrb	r3, [r7, #23]
}
 800a376:	4618      	mov	r0, r3
 800a378:	3718      	adds	r7, #24
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	200009fc 	.word	0x200009fc

0800a384 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b086      	sub	sp, #24
 800a388:	af00      	add	r7, sp, #0
 800a38a:	60b9      	str	r1, [r7, #8]
 800a38c:	607a      	str	r2, [r7, #4]
 800a38e:	603b      	str	r3, [r7, #0]
 800a390:	4603      	mov	r3, r0
 800a392:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a394:	2301      	movs	r3, #1
 800a396:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800a398:	4b24      	ldr	r3, [pc, #144]	@ (800a42c <SD_write+0xa8>)
 800a39a:	2200      	movs	r2, #0
 800a39c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a39e:	f247 5030 	movw	r0, #30000	@ 0x7530
 800a3a2:	f7ff ff33 	bl	800a20c <SD_CheckStatusWithTimeout>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	da01      	bge.n	800a3b0 <SD_write+0x2c>
  {
    return res;
 800a3ac:	7dfb      	ldrb	r3, [r7, #23]
 800a3ae:	e038      	b.n	800a422 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a3b0:	683a      	ldr	r2, [r7, #0]
 800a3b2:	6879      	ldr	r1, [r7, #4]
 800a3b4:	68b8      	ldr	r0, [r7, #8]
 800a3b6:	f7ff febf 	bl	800a138 <BSP_SD_WriteBlocks_DMA>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d12f      	bne.n	800a420 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800a3c0:	f7f9 f9ec 	bl	800379c <HAL_GetTick>
 800a3c4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a3c6:	bf00      	nop
 800a3c8:	4b18      	ldr	r3, [pc, #96]	@ (800a42c <SD_write+0xa8>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d108      	bne.n	800a3e2 <SD_write+0x5e>
 800a3d0:	f7f9 f9e4 	bl	800379c <HAL_GetTick>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	1ad3      	subs	r3, r2, r3
 800a3da:	f247 522f 	movw	r2, #29999	@ 0x752f
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d9f2      	bls.n	800a3c8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800a3e2:	4b12      	ldr	r3, [pc, #72]	@ (800a42c <SD_write+0xa8>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d102      	bne.n	800a3f0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	75fb      	strb	r3, [r7, #23]
 800a3ee:	e017      	b.n	800a420 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800a3f0:	4b0e      	ldr	r3, [pc, #56]	@ (800a42c <SD_write+0xa8>)
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a3f6:	f7f9 f9d1 	bl	800379c <HAL_GetTick>
 800a3fa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a3fc:	e007      	b.n	800a40e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a3fe:	f7ff feb5 	bl	800a16c <BSP_SD_GetCardState>
 800a402:	4603      	mov	r3, r0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d102      	bne.n	800a40e <SD_write+0x8a>
          {
            res = RES_OK;
 800a408:	2300      	movs	r3, #0
 800a40a:	75fb      	strb	r3, [r7, #23]
            break;
 800a40c:	e008      	b.n	800a420 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a40e:	f7f9 f9c5 	bl	800379c <HAL_GetTick>
 800a412:	4602      	mov	r2, r0
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	1ad3      	subs	r3, r2, r3
 800a418:	f247 522f 	movw	r2, #29999	@ 0x752f
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d9ee      	bls.n	800a3fe <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800a420:	7dfb      	ldrb	r3, [r7, #23]
}
 800a422:	4618      	mov	r0, r3
 800a424:	3718      	adds	r7, #24
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	200009f8 	.word	0x200009f8

0800a430 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b08c      	sub	sp, #48	@ 0x30
 800a434:	af00      	add	r7, sp, #0
 800a436:	4603      	mov	r3, r0
 800a438:	603a      	str	r2, [r7, #0]
 800a43a:	71fb      	strb	r3, [r7, #7]
 800a43c:	460b      	mov	r3, r1
 800a43e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a440:	2301      	movs	r3, #1
 800a442:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a446:	4b25      	ldr	r3, [pc, #148]	@ (800a4dc <SD_ioctl+0xac>)
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	f003 0301 	and.w	r3, r3, #1
 800a450:	2b00      	cmp	r3, #0
 800a452:	d001      	beq.n	800a458 <SD_ioctl+0x28>
 800a454:	2303      	movs	r3, #3
 800a456:	e03c      	b.n	800a4d2 <SD_ioctl+0xa2>

  switch (cmd)
 800a458:	79bb      	ldrb	r3, [r7, #6]
 800a45a:	2b03      	cmp	r3, #3
 800a45c:	d834      	bhi.n	800a4c8 <SD_ioctl+0x98>
 800a45e:	a201      	add	r2, pc, #4	@ (adr r2, 800a464 <SD_ioctl+0x34>)
 800a460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a464:	0800a475 	.word	0x0800a475
 800a468:	0800a47d 	.word	0x0800a47d
 800a46c:	0800a495 	.word	0x0800a495
 800a470:	0800a4af 	.word	0x0800a4af
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a474:	2300      	movs	r3, #0
 800a476:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a47a:	e028      	b.n	800a4ce <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a47c:	f107 030c 	add.w	r3, r7, #12
 800a480:	4618      	mov	r0, r3
 800a482:	f7ff fe83 	bl	800a18c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a48c:	2300      	movs	r3, #0
 800a48e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a492:	e01c      	b.n	800a4ce <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a494:	f107 030c 	add.w	r3, r7, #12
 800a498:	4618      	mov	r0, r3
 800a49a:	f7ff fe77 	bl	800a18c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a4ac:	e00f      	b.n	800a4ce <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a4ae:	f107 030c 	add.w	r3, r7, #12
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7ff fe6a 	bl	800a18c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a4b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ba:	0a5a      	lsrs	r2, r3, #9
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a4c6:	e002      	b.n	800a4ce <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a4c8:	2304      	movs	r3, #4
 800a4ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800a4ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3730      	adds	r7, #48	@ 0x30
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	2000000d 	.word	0x2000000d

0800a4e0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800a4e4:	4b03      	ldr	r3, [pc, #12]	@ (800a4f4 <BSP_SD_WriteCpltCallback+0x14>)
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	601a      	str	r2, [r3, #0]
}
 800a4ea:	bf00      	nop
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr
 800a4f4:	200009f8 	.word	0x200009f8

0800a4f8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800a4fc:	4b03      	ldr	r3, [pc, #12]	@ (800a50c <BSP_SD_ReadCpltCallback+0x14>)
 800a4fe:	2201      	movs	r2, #1
 800a500:	601a      	str	r2, [r3, #0]
}
 800a502:	bf00      	nop
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr
 800a50c:	200009fc 	.word	0x200009fc

0800a510 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a510:	b480      	push	{r7}
 800a512:	b087      	sub	sp, #28
 800a514:	af00      	add	r7, sp, #0
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	4613      	mov	r3, r2
 800a51c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a51e:	2301      	movs	r3, #1
 800a520:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a522:	2300      	movs	r3, #0
 800a524:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a526:	4b1f      	ldr	r3, [pc, #124]	@ (800a5a4 <FATFS_LinkDriverEx+0x94>)
 800a528:	7a5b      	ldrb	r3, [r3, #9]
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d131      	bne.n	800a594 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a530:	4b1c      	ldr	r3, [pc, #112]	@ (800a5a4 <FATFS_LinkDriverEx+0x94>)
 800a532:	7a5b      	ldrb	r3, [r3, #9]
 800a534:	b2db      	uxtb	r3, r3
 800a536:	461a      	mov	r2, r3
 800a538:	4b1a      	ldr	r3, [pc, #104]	@ (800a5a4 <FATFS_LinkDriverEx+0x94>)
 800a53a:	2100      	movs	r1, #0
 800a53c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a53e:	4b19      	ldr	r3, [pc, #100]	@ (800a5a4 <FATFS_LinkDriverEx+0x94>)
 800a540:	7a5b      	ldrb	r3, [r3, #9]
 800a542:	b2db      	uxtb	r3, r3
 800a544:	4a17      	ldr	r2, [pc, #92]	@ (800a5a4 <FATFS_LinkDriverEx+0x94>)
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	4413      	add	r3, r2
 800a54a:	68fa      	ldr	r2, [r7, #12]
 800a54c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a54e:	4b15      	ldr	r3, [pc, #84]	@ (800a5a4 <FATFS_LinkDriverEx+0x94>)
 800a550:	7a5b      	ldrb	r3, [r3, #9]
 800a552:	b2db      	uxtb	r3, r3
 800a554:	461a      	mov	r2, r3
 800a556:	4b13      	ldr	r3, [pc, #76]	@ (800a5a4 <FATFS_LinkDriverEx+0x94>)
 800a558:	4413      	add	r3, r2
 800a55a:	79fa      	ldrb	r2, [r7, #7]
 800a55c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a55e:	4b11      	ldr	r3, [pc, #68]	@ (800a5a4 <FATFS_LinkDriverEx+0x94>)
 800a560:	7a5b      	ldrb	r3, [r3, #9]
 800a562:	b2db      	uxtb	r3, r3
 800a564:	1c5a      	adds	r2, r3, #1
 800a566:	b2d1      	uxtb	r1, r2
 800a568:	4a0e      	ldr	r2, [pc, #56]	@ (800a5a4 <FATFS_LinkDriverEx+0x94>)
 800a56a:	7251      	strb	r1, [r2, #9]
 800a56c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a56e:	7dbb      	ldrb	r3, [r7, #22]
 800a570:	3330      	adds	r3, #48	@ 0x30
 800a572:	b2da      	uxtb	r2, r3
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	3301      	adds	r3, #1
 800a57c:	223a      	movs	r2, #58	@ 0x3a
 800a57e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	3302      	adds	r3, #2
 800a584:	222f      	movs	r2, #47	@ 0x2f
 800a586:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	3303      	adds	r3, #3
 800a58c:	2200      	movs	r2, #0
 800a58e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a590:	2300      	movs	r3, #0
 800a592:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a594:	7dfb      	ldrb	r3, [r7, #23]
}
 800a596:	4618      	mov	r0, r3
 800a598:	371c      	adds	r7, #28
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	20000a00 	.word	0x20000a00

0800a5a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	6839      	ldr	r1, [r7, #0]
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f7ff ffaa 	bl	800a510 <FATFS_LinkDriverEx>
 800a5bc:	4603      	mov	r3, r0
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3708      	adds	r7, #8
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <atof>:
 800a5c6:	2100      	movs	r1, #0
 800a5c8:	f000 be08 	b.w	800b1dc <strtod>

0800a5cc <sulp>:
 800a5cc:	b570      	push	{r4, r5, r6, lr}
 800a5ce:	4604      	mov	r4, r0
 800a5d0:	460d      	mov	r5, r1
 800a5d2:	ec45 4b10 	vmov	d0, r4, r5
 800a5d6:	4616      	mov	r6, r2
 800a5d8:	f003 fd3a 	bl	800e050 <__ulp>
 800a5dc:	ec51 0b10 	vmov	r0, r1, d0
 800a5e0:	b17e      	cbz	r6, 800a602 <sulp+0x36>
 800a5e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a5e6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	dd09      	ble.n	800a602 <sulp+0x36>
 800a5ee:	051b      	lsls	r3, r3, #20
 800a5f0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a5f4:	2400      	movs	r4, #0
 800a5f6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a5fa:	4622      	mov	r2, r4
 800a5fc:	462b      	mov	r3, r5
 800a5fe:	f7f6 f803 	bl	8000608 <__aeabi_dmul>
 800a602:	ec41 0b10 	vmov	d0, r0, r1
 800a606:	bd70      	pop	{r4, r5, r6, pc}

0800a608 <_strtod_l>:
 800a608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a60c:	b09f      	sub	sp, #124	@ 0x7c
 800a60e:	460c      	mov	r4, r1
 800a610:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a612:	2200      	movs	r2, #0
 800a614:	921a      	str	r2, [sp, #104]	@ 0x68
 800a616:	9005      	str	r0, [sp, #20]
 800a618:	f04f 0a00 	mov.w	sl, #0
 800a61c:	f04f 0b00 	mov.w	fp, #0
 800a620:	460a      	mov	r2, r1
 800a622:	9219      	str	r2, [sp, #100]	@ 0x64
 800a624:	7811      	ldrb	r1, [r2, #0]
 800a626:	292b      	cmp	r1, #43	@ 0x2b
 800a628:	d04a      	beq.n	800a6c0 <_strtod_l+0xb8>
 800a62a:	d838      	bhi.n	800a69e <_strtod_l+0x96>
 800a62c:	290d      	cmp	r1, #13
 800a62e:	d832      	bhi.n	800a696 <_strtod_l+0x8e>
 800a630:	2908      	cmp	r1, #8
 800a632:	d832      	bhi.n	800a69a <_strtod_l+0x92>
 800a634:	2900      	cmp	r1, #0
 800a636:	d03b      	beq.n	800a6b0 <_strtod_l+0xa8>
 800a638:	2200      	movs	r2, #0
 800a63a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a63c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a63e:	782a      	ldrb	r2, [r5, #0]
 800a640:	2a30      	cmp	r2, #48	@ 0x30
 800a642:	f040 80b3 	bne.w	800a7ac <_strtod_l+0x1a4>
 800a646:	786a      	ldrb	r2, [r5, #1]
 800a648:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a64c:	2a58      	cmp	r2, #88	@ 0x58
 800a64e:	d16e      	bne.n	800a72e <_strtod_l+0x126>
 800a650:	9302      	str	r3, [sp, #8]
 800a652:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a654:	9301      	str	r3, [sp, #4]
 800a656:	ab1a      	add	r3, sp, #104	@ 0x68
 800a658:	9300      	str	r3, [sp, #0]
 800a65a:	4a8e      	ldr	r2, [pc, #568]	@ (800a894 <_strtod_l+0x28c>)
 800a65c:	9805      	ldr	r0, [sp, #20]
 800a65e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a660:	a919      	add	r1, sp, #100	@ 0x64
 800a662:	f002 fde7 	bl	800d234 <__gethex>
 800a666:	f010 060f 	ands.w	r6, r0, #15
 800a66a:	4604      	mov	r4, r0
 800a66c:	d005      	beq.n	800a67a <_strtod_l+0x72>
 800a66e:	2e06      	cmp	r6, #6
 800a670:	d128      	bne.n	800a6c4 <_strtod_l+0xbc>
 800a672:	3501      	adds	r5, #1
 800a674:	2300      	movs	r3, #0
 800a676:	9519      	str	r5, [sp, #100]	@ 0x64
 800a678:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a67a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f040 858e 	bne.w	800b19e <_strtod_l+0xb96>
 800a682:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a684:	b1cb      	cbz	r3, 800a6ba <_strtod_l+0xb2>
 800a686:	4652      	mov	r2, sl
 800a688:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a68c:	ec43 2b10 	vmov	d0, r2, r3
 800a690:	b01f      	add	sp, #124	@ 0x7c
 800a692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a696:	2920      	cmp	r1, #32
 800a698:	d1ce      	bne.n	800a638 <_strtod_l+0x30>
 800a69a:	3201      	adds	r2, #1
 800a69c:	e7c1      	b.n	800a622 <_strtod_l+0x1a>
 800a69e:	292d      	cmp	r1, #45	@ 0x2d
 800a6a0:	d1ca      	bne.n	800a638 <_strtod_l+0x30>
 800a6a2:	2101      	movs	r1, #1
 800a6a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a6a6:	1c51      	adds	r1, r2, #1
 800a6a8:	9119      	str	r1, [sp, #100]	@ 0x64
 800a6aa:	7852      	ldrb	r2, [r2, #1]
 800a6ac:	2a00      	cmp	r2, #0
 800a6ae:	d1c5      	bne.n	800a63c <_strtod_l+0x34>
 800a6b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a6b2:	9419      	str	r4, [sp, #100]	@ 0x64
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	f040 8570 	bne.w	800b19a <_strtod_l+0xb92>
 800a6ba:	4652      	mov	r2, sl
 800a6bc:	465b      	mov	r3, fp
 800a6be:	e7e5      	b.n	800a68c <_strtod_l+0x84>
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	e7ef      	b.n	800a6a4 <_strtod_l+0x9c>
 800a6c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a6c6:	b13a      	cbz	r2, 800a6d8 <_strtod_l+0xd0>
 800a6c8:	2135      	movs	r1, #53	@ 0x35
 800a6ca:	a81c      	add	r0, sp, #112	@ 0x70
 800a6cc:	f003 fdba 	bl	800e244 <__copybits>
 800a6d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a6d2:	9805      	ldr	r0, [sp, #20]
 800a6d4:	f003 f988 	bl	800d9e8 <_Bfree>
 800a6d8:	3e01      	subs	r6, #1
 800a6da:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a6dc:	2e04      	cmp	r6, #4
 800a6de:	d806      	bhi.n	800a6ee <_strtod_l+0xe6>
 800a6e0:	e8df f006 	tbb	[pc, r6]
 800a6e4:	201d0314 	.word	0x201d0314
 800a6e8:	14          	.byte	0x14
 800a6e9:	00          	.byte	0x00
 800a6ea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a6ee:	05e1      	lsls	r1, r4, #23
 800a6f0:	bf48      	it	mi
 800a6f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a6f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a6fa:	0d1b      	lsrs	r3, r3, #20
 800a6fc:	051b      	lsls	r3, r3, #20
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d1bb      	bne.n	800a67a <_strtod_l+0x72>
 800a702:	f001 fe4d 	bl	800c3a0 <__errno>
 800a706:	2322      	movs	r3, #34	@ 0x22
 800a708:	6003      	str	r3, [r0, #0]
 800a70a:	e7b6      	b.n	800a67a <_strtod_l+0x72>
 800a70c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a710:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a714:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a718:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a71c:	e7e7      	b.n	800a6ee <_strtod_l+0xe6>
 800a71e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a89c <_strtod_l+0x294>
 800a722:	e7e4      	b.n	800a6ee <_strtod_l+0xe6>
 800a724:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a728:	f04f 3aff 	mov.w	sl, #4294967295
 800a72c:	e7df      	b.n	800a6ee <_strtod_l+0xe6>
 800a72e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a730:	1c5a      	adds	r2, r3, #1
 800a732:	9219      	str	r2, [sp, #100]	@ 0x64
 800a734:	785b      	ldrb	r3, [r3, #1]
 800a736:	2b30      	cmp	r3, #48	@ 0x30
 800a738:	d0f9      	beq.n	800a72e <_strtod_l+0x126>
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d09d      	beq.n	800a67a <_strtod_l+0x72>
 800a73e:	2301      	movs	r3, #1
 800a740:	9309      	str	r3, [sp, #36]	@ 0x24
 800a742:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a744:	930c      	str	r3, [sp, #48]	@ 0x30
 800a746:	2300      	movs	r3, #0
 800a748:	9308      	str	r3, [sp, #32]
 800a74a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a74c:	461f      	mov	r7, r3
 800a74e:	220a      	movs	r2, #10
 800a750:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a752:	7805      	ldrb	r5, [r0, #0]
 800a754:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a758:	b2d9      	uxtb	r1, r3
 800a75a:	2909      	cmp	r1, #9
 800a75c:	d928      	bls.n	800a7b0 <_strtod_l+0x1a8>
 800a75e:	494e      	ldr	r1, [pc, #312]	@ (800a898 <_strtod_l+0x290>)
 800a760:	2201      	movs	r2, #1
 800a762:	f001 fdae 	bl	800c2c2 <strncmp>
 800a766:	2800      	cmp	r0, #0
 800a768:	d032      	beq.n	800a7d0 <_strtod_l+0x1c8>
 800a76a:	2000      	movs	r0, #0
 800a76c:	462a      	mov	r2, r5
 800a76e:	4681      	mov	r9, r0
 800a770:	463d      	mov	r5, r7
 800a772:	4603      	mov	r3, r0
 800a774:	2a65      	cmp	r2, #101	@ 0x65
 800a776:	d001      	beq.n	800a77c <_strtod_l+0x174>
 800a778:	2a45      	cmp	r2, #69	@ 0x45
 800a77a:	d114      	bne.n	800a7a6 <_strtod_l+0x19e>
 800a77c:	b91d      	cbnz	r5, 800a786 <_strtod_l+0x17e>
 800a77e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a780:	4302      	orrs	r2, r0
 800a782:	d095      	beq.n	800a6b0 <_strtod_l+0xa8>
 800a784:	2500      	movs	r5, #0
 800a786:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a788:	1c62      	adds	r2, r4, #1
 800a78a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a78c:	7862      	ldrb	r2, [r4, #1]
 800a78e:	2a2b      	cmp	r2, #43	@ 0x2b
 800a790:	d077      	beq.n	800a882 <_strtod_l+0x27a>
 800a792:	2a2d      	cmp	r2, #45	@ 0x2d
 800a794:	d07b      	beq.n	800a88e <_strtod_l+0x286>
 800a796:	f04f 0c00 	mov.w	ip, #0
 800a79a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a79e:	2909      	cmp	r1, #9
 800a7a0:	f240 8082 	bls.w	800a8a8 <_strtod_l+0x2a0>
 800a7a4:	9419      	str	r4, [sp, #100]	@ 0x64
 800a7a6:	f04f 0800 	mov.w	r8, #0
 800a7aa:	e0a2      	b.n	800a8f2 <_strtod_l+0x2ea>
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	e7c7      	b.n	800a740 <_strtod_l+0x138>
 800a7b0:	2f08      	cmp	r7, #8
 800a7b2:	bfd5      	itete	le
 800a7b4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a7b6:	9908      	ldrgt	r1, [sp, #32]
 800a7b8:	fb02 3301 	mlale	r3, r2, r1, r3
 800a7bc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a7c0:	f100 0001 	add.w	r0, r0, #1
 800a7c4:	bfd4      	ite	le
 800a7c6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a7c8:	9308      	strgt	r3, [sp, #32]
 800a7ca:	3701      	adds	r7, #1
 800a7cc:	9019      	str	r0, [sp, #100]	@ 0x64
 800a7ce:	e7bf      	b.n	800a750 <_strtod_l+0x148>
 800a7d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7d2:	1c5a      	adds	r2, r3, #1
 800a7d4:	9219      	str	r2, [sp, #100]	@ 0x64
 800a7d6:	785a      	ldrb	r2, [r3, #1]
 800a7d8:	b37f      	cbz	r7, 800a83a <_strtod_l+0x232>
 800a7da:	4681      	mov	r9, r0
 800a7dc:	463d      	mov	r5, r7
 800a7de:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a7e2:	2b09      	cmp	r3, #9
 800a7e4:	d912      	bls.n	800a80c <_strtod_l+0x204>
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e7c4      	b.n	800a774 <_strtod_l+0x16c>
 800a7ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7ec:	1c5a      	adds	r2, r3, #1
 800a7ee:	9219      	str	r2, [sp, #100]	@ 0x64
 800a7f0:	785a      	ldrb	r2, [r3, #1]
 800a7f2:	3001      	adds	r0, #1
 800a7f4:	2a30      	cmp	r2, #48	@ 0x30
 800a7f6:	d0f8      	beq.n	800a7ea <_strtod_l+0x1e2>
 800a7f8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a7fc:	2b08      	cmp	r3, #8
 800a7fe:	f200 84d3 	bhi.w	800b1a8 <_strtod_l+0xba0>
 800a802:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a804:	930c      	str	r3, [sp, #48]	@ 0x30
 800a806:	4681      	mov	r9, r0
 800a808:	2000      	movs	r0, #0
 800a80a:	4605      	mov	r5, r0
 800a80c:	3a30      	subs	r2, #48	@ 0x30
 800a80e:	f100 0301 	add.w	r3, r0, #1
 800a812:	d02a      	beq.n	800a86a <_strtod_l+0x262>
 800a814:	4499      	add	r9, r3
 800a816:	eb00 0c05 	add.w	ip, r0, r5
 800a81a:	462b      	mov	r3, r5
 800a81c:	210a      	movs	r1, #10
 800a81e:	4563      	cmp	r3, ip
 800a820:	d10d      	bne.n	800a83e <_strtod_l+0x236>
 800a822:	1c69      	adds	r1, r5, #1
 800a824:	4401      	add	r1, r0
 800a826:	4428      	add	r0, r5
 800a828:	2808      	cmp	r0, #8
 800a82a:	dc16      	bgt.n	800a85a <_strtod_l+0x252>
 800a82c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a82e:	230a      	movs	r3, #10
 800a830:	fb03 2300 	mla	r3, r3, r0, r2
 800a834:	930a      	str	r3, [sp, #40]	@ 0x28
 800a836:	2300      	movs	r3, #0
 800a838:	e018      	b.n	800a86c <_strtod_l+0x264>
 800a83a:	4638      	mov	r0, r7
 800a83c:	e7da      	b.n	800a7f4 <_strtod_l+0x1ec>
 800a83e:	2b08      	cmp	r3, #8
 800a840:	f103 0301 	add.w	r3, r3, #1
 800a844:	dc03      	bgt.n	800a84e <_strtod_l+0x246>
 800a846:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a848:	434e      	muls	r6, r1
 800a84a:	960a      	str	r6, [sp, #40]	@ 0x28
 800a84c:	e7e7      	b.n	800a81e <_strtod_l+0x216>
 800a84e:	2b10      	cmp	r3, #16
 800a850:	bfde      	ittt	le
 800a852:	9e08      	ldrle	r6, [sp, #32]
 800a854:	434e      	mulle	r6, r1
 800a856:	9608      	strle	r6, [sp, #32]
 800a858:	e7e1      	b.n	800a81e <_strtod_l+0x216>
 800a85a:	280f      	cmp	r0, #15
 800a85c:	dceb      	bgt.n	800a836 <_strtod_l+0x22e>
 800a85e:	9808      	ldr	r0, [sp, #32]
 800a860:	230a      	movs	r3, #10
 800a862:	fb03 2300 	mla	r3, r3, r0, r2
 800a866:	9308      	str	r3, [sp, #32]
 800a868:	e7e5      	b.n	800a836 <_strtod_l+0x22e>
 800a86a:	4629      	mov	r1, r5
 800a86c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a86e:	1c50      	adds	r0, r2, #1
 800a870:	9019      	str	r0, [sp, #100]	@ 0x64
 800a872:	7852      	ldrb	r2, [r2, #1]
 800a874:	4618      	mov	r0, r3
 800a876:	460d      	mov	r5, r1
 800a878:	e7b1      	b.n	800a7de <_strtod_l+0x1d6>
 800a87a:	f04f 0900 	mov.w	r9, #0
 800a87e:	2301      	movs	r3, #1
 800a880:	e77d      	b.n	800a77e <_strtod_l+0x176>
 800a882:	f04f 0c00 	mov.w	ip, #0
 800a886:	1ca2      	adds	r2, r4, #2
 800a888:	9219      	str	r2, [sp, #100]	@ 0x64
 800a88a:	78a2      	ldrb	r2, [r4, #2]
 800a88c:	e785      	b.n	800a79a <_strtod_l+0x192>
 800a88e:	f04f 0c01 	mov.w	ip, #1
 800a892:	e7f8      	b.n	800a886 <_strtod_l+0x27e>
 800a894:	08010538 	.word	0x08010538
 800a898:	08010520 	.word	0x08010520
 800a89c:	7ff00000 	.word	0x7ff00000
 800a8a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a8a2:	1c51      	adds	r1, r2, #1
 800a8a4:	9119      	str	r1, [sp, #100]	@ 0x64
 800a8a6:	7852      	ldrb	r2, [r2, #1]
 800a8a8:	2a30      	cmp	r2, #48	@ 0x30
 800a8aa:	d0f9      	beq.n	800a8a0 <_strtod_l+0x298>
 800a8ac:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a8b0:	2908      	cmp	r1, #8
 800a8b2:	f63f af78 	bhi.w	800a7a6 <_strtod_l+0x19e>
 800a8b6:	3a30      	subs	r2, #48	@ 0x30
 800a8b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a8ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a8bc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a8be:	f04f 080a 	mov.w	r8, #10
 800a8c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a8c4:	1c56      	adds	r6, r2, #1
 800a8c6:	9619      	str	r6, [sp, #100]	@ 0x64
 800a8c8:	7852      	ldrb	r2, [r2, #1]
 800a8ca:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a8ce:	f1be 0f09 	cmp.w	lr, #9
 800a8d2:	d939      	bls.n	800a948 <_strtod_l+0x340>
 800a8d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a8d6:	1a76      	subs	r6, r6, r1
 800a8d8:	2e08      	cmp	r6, #8
 800a8da:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a8de:	dc03      	bgt.n	800a8e8 <_strtod_l+0x2e0>
 800a8e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a8e2:	4588      	cmp	r8, r1
 800a8e4:	bfa8      	it	ge
 800a8e6:	4688      	movge	r8, r1
 800a8e8:	f1bc 0f00 	cmp.w	ip, #0
 800a8ec:	d001      	beq.n	800a8f2 <_strtod_l+0x2ea>
 800a8ee:	f1c8 0800 	rsb	r8, r8, #0
 800a8f2:	2d00      	cmp	r5, #0
 800a8f4:	d14e      	bne.n	800a994 <_strtod_l+0x38c>
 800a8f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a8f8:	4308      	orrs	r0, r1
 800a8fa:	f47f aebe 	bne.w	800a67a <_strtod_l+0x72>
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	f47f aed6 	bne.w	800a6b0 <_strtod_l+0xa8>
 800a904:	2a69      	cmp	r2, #105	@ 0x69
 800a906:	d028      	beq.n	800a95a <_strtod_l+0x352>
 800a908:	dc25      	bgt.n	800a956 <_strtod_l+0x34e>
 800a90a:	2a49      	cmp	r2, #73	@ 0x49
 800a90c:	d025      	beq.n	800a95a <_strtod_l+0x352>
 800a90e:	2a4e      	cmp	r2, #78	@ 0x4e
 800a910:	f47f aece 	bne.w	800a6b0 <_strtod_l+0xa8>
 800a914:	499b      	ldr	r1, [pc, #620]	@ (800ab84 <_strtod_l+0x57c>)
 800a916:	a819      	add	r0, sp, #100	@ 0x64
 800a918:	f002 feae 	bl	800d678 <__match>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	f43f aec7 	beq.w	800a6b0 <_strtod_l+0xa8>
 800a922:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	2b28      	cmp	r3, #40	@ 0x28
 800a928:	d12e      	bne.n	800a988 <_strtod_l+0x380>
 800a92a:	4997      	ldr	r1, [pc, #604]	@ (800ab88 <_strtod_l+0x580>)
 800a92c:	aa1c      	add	r2, sp, #112	@ 0x70
 800a92e:	a819      	add	r0, sp, #100	@ 0x64
 800a930:	f002 feb6 	bl	800d6a0 <__hexnan>
 800a934:	2805      	cmp	r0, #5
 800a936:	d127      	bne.n	800a988 <_strtod_l+0x380>
 800a938:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a93a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a93e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a942:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a946:	e698      	b.n	800a67a <_strtod_l+0x72>
 800a948:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a94a:	fb08 2101 	mla	r1, r8, r1, r2
 800a94e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a952:	920e      	str	r2, [sp, #56]	@ 0x38
 800a954:	e7b5      	b.n	800a8c2 <_strtod_l+0x2ba>
 800a956:	2a6e      	cmp	r2, #110	@ 0x6e
 800a958:	e7da      	b.n	800a910 <_strtod_l+0x308>
 800a95a:	498c      	ldr	r1, [pc, #560]	@ (800ab8c <_strtod_l+0x584>)
 800a95c:	a819      	add	r0, sp, #100	@ 0x64
 800a95e:	f002 fe8b 	bl	800d678 <__match>
 800a962:	2800      	cmp	r0, #0
 800a964:	f43f aea4 	beq.w	800a6b0 <_strtod_l+0xa8>
 800a968:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a96a:	4989      	ldr	r1, [pc, #548]	@ (800ab90 <_strtod_l+0x588>)
 800a96c:	3b01      	subs	r3, #1
 800a96e:	a819      	add	r0, sp, #100	@ 0x64
 800a970:	9319      	str	r3, [sp, #100]	@ 0x64
 800a972:	f002 fe81 	bl	800d678 <__match>
 800a976:	b910      	cbnz	r0, 800a97e <_strtod_l+0x376>
 800a978:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a97a:	3301      	adds	r3, #1
 800a97c:	9319      	str	r3, [sp, #100]	@ 0x64
 800a97e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800aba0 <_strtod_l+0x598>
 800a982:	f04f 0a00 	mov.w	sl, #0
 800a986:	e678      	b.n	800a67a <_strtod_l+0x72>
 800a988:	4882      	ldr	r0, [pc, #520]	@ (800ab94 <_strtod_l+0x58c>)
 800a98a:	f001 fd45 	bl	800c418 <nan>
 800a98e:	ec5b ab10 	vmov	sl, fp, d0
 800a992:	e672      	b.n	800a67a <_strtod_l+0x72>
 800a994:	eba8 0309 	sub.w	r3, r8, r9
 800a998:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a99a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a99c:	2f00      	cmp	r7, #0
 800a99e:	bf08      	it	eq
 800a9a0:	462f      	moveq	r7, r5
 800a9a2:	2d10      	cmp	r5, #16
 800a9a4:	462c      	mov	r4, r5
 800a9a6:	bfa8      	it	ge
 800a9a8:	2410      	movge	r4, #16
 800a9aa:	f7f5 fdb3 	bl	8000514 <__aeabi_ui2d>
 800a9ae:	2d09      	cmp	r5, #9
 800a9b0:	4682      	mov	sl, r0
 800a9b2:	468b      	mov	fp, r1
 800a9b4:	dc13      	bgt.n	800a9de <_strtod_l+0x3d6>
 800a9b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f43f ae5e 	beq.w	800a67a <_strtod_l+0x72>
 800a9be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9c0:	dd78      	ble.n	800aab4 <_strtod_l+0x4ac>
 800a9c2:	2b16      	cmp	r3, #22
 800a9c4:	dc5f      	bgt.n	800aa86 <_strtod_l+0x47e>
 800a9c6:	4974      	ldr	r1, [pc, #464]	@ (800ab98 <_strtod_l+0x590>)
 800a9c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a9cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9d0:	4652      	mov	r2, sl
 800a9d2:	465b      	mov	r3, fp
 800a9d4:	f7f5 fe18 	bl	8000608 <__aeabi_dmul>
 800a9d8:	4682      	mov	sl, r0
 800a9da:	468b      	mov	fp, r1
 800a9dc:	e64d      	b.n	800a67a <_strtod_l+0x72>
 800a9de:	4b6e      	ldr	r3, [pc, #440]	@ (800ab98 <_strtod_l+0x590>)
 800a9e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a9e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a9e8:	f7f5 fe0e 	bl	8000608 <__aeabi_dmul>
 800a9ec:	4682      	mov	sl, r0
 800a9ee:	9808      	ldr	r0, [sp, #32]
 800a9f0:	468b      	mov	fp, r1
 800a9f2:	f7f5 fd8f 	bl	8000514 <__aeabi_ui2d>
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	4650      	mov	r0, sl
 800a9fc:	4659      	mov	r1, fp
 800a9fe:	f7f5 fc4d 	bl	800029c <__adddf3>
 800aa02:	2d0f      	cmp	r5, #15
 800aa04:	4682      	mov	sl, r0
 800aa06:	468b      	mov	fp, r1
 800aa08:	ddd5      	ble.n	800a9b6 <_strtod_l+0x3ae>
 800aa0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa0c:	1b2c      	subs	r4, r5, r4
 800aa0e:	441c      	add	r4, r3
 800aa10:	2c00      	cmp	r4, #0
 800aa12:	f340 8096 	ble.w	800ab42 <_strtod_l+0x53a>
 800aa16:	f014 030f 	ands.w	r3, r4, #15
 800aa1a:	d00a      	beq.n	800aa32 <_strtod_l+0x42a>
 800aa1c:	495e      	ldr	r1, [pc, #376]	@ (800ab98 <_strtod_l+0x590>)
 800aa1e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa22:	4652      	mov	r2, sl
 800aa24:	465b      	mov	r3, fp
 800aa26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa2a:	f7f5 fded 	bl	8000608 <__aeabi_dmul>
 800aa2e:	4682      	mov	sl, r0
 800aa30:	468b      	mov	fp, r1
 800aa32:	f034 040f 	bics.w	r4, r4, #15
 800aa36:	d073      	beq.n	800ab20 <_strtod_l+0x518>
 800aa38:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800aa3c:	dd48      	ble.n	800aad0 <_strtod_l+0x4c8>
 800aa3e:	2400      	movs	r4, #0
 800aa40:	46a0      	mov	r8, r4
 800aa42:	940a      	str	r4, [sp, #40]	@ 0x28
 800aa44:	46a1      	mov	r9, r4
 800aa46:	9a05      	ldr	r2, [sp, #20]
 800aa48:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800aba0 <_strtod_l+0x598>
 800aa4c:	2322      	movs	r3, #34	@ 0x22
 800aa4e:	6013      	str	r3, [r2, #0]
 800aa50:	f04f 0a00 	mov.w	sl, #0
 800aa54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	f43f ae0f 	beq.w	800a67a <_strtod_l+0x72>
 800aa5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa5e:	9805      	ldr	r0, [sp, #20]
 800aa60:	f002 ffc2 	bl	800d9e8 <_Bfree>
 800aa64:	9805      	ldr	r0, [sp, #20]
 800aa66:	4649      	mov	r1, r9
 800aa68:	f002 ffbe 	bl	800d9e8 <_Bfree>
 800aa6c:	9805      	ldr	r0, [sp, #20]
 800aa6e:	4641      	mov	r1, r8
 800aa70:	f002 ffba 	bl	800d9e8 <_Bfree>
 800aa74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aa76:	9805      	ldr	r0, [sp, #20]
 800aa78:	f002 ffb6 	bl	800d9e8 <_Bfree>
 800aa7c:	9805      	ldr	r0, [sp, #20]
 800aa7e:	4621      	mov	r1, r4
 800aa80:	f002 ffb2 	bl	800d9e8 <_Bfree>
 800aa84:	e5f9      	b.n	800a67a <_strtod_l+0x72>
 800aa86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa88:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	dbbc      	blt.n	800aa0a <_strtod_l+0x402>
 800aa90:	4c41      	ldr	r4, [pc, #260]	@ (800ab98 <_strtod_l+0x590>)
 800aa92:	f1c5 050f 	rsb	r5, r5, #15
 800aa96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800aa9a:	4652      	mov	r2, sl
 800aa9c:	465b      	mov	r3, fp
 800aa9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aaa2:	f7f5 fdb1 	bl	8000608 <__aeabi_dmul>
 800aaa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaa8:	1b5d      	subs	r5, r3, r5
 800aaaa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800aaae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aab2:	e78f      	b.n	800a9d4 <_strtod_l+0x3cc>
 800aab4:	3316      	adds	r3, #22
 800aab6:	dba8      	blt.n	800aa0a <_strtod_l+0x402>
 800aab8:	4b37      	ldr	r3, [pc, #220]	@ (800ab98 <_strtod_l+0x590>)
 800aaba:	eba9 0808 	sub.w	r8, r9, r8
 800aabe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800aac2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800aac6:	4650      	mov	r0, sl
 800aac8:	4659      	mov	r1, fp
 800aaca:	f7f5 fec7 	bl	800085c <__aeabi_ddiv>
 800aace:	e783      	b.n	800a9d8 <_strtod_l+0x3d0>
 800aad0:	4b32      	ldr	r3, [pc, #200]	@ (800ab9c <_strtod_l+0x594>)
 800aad2:	9308      	str	r3, [sp, #32]
 800aad4:	2300      	movs	r3, #0
 800aad6:	1124      	asrs	r4, r4, #4
 800aad8:	4650      	mov	r0, sl
 800aada:	4659      	mov	r1, fp
 800aadc:	461e      	mov	r6, r3
 800aade:	2c01      	cmp	r4, #1
 800aae0:	dc21      	bgt.n	800ab26 <_strtod_l+0x51e>
 800aae2:	b10b      	cbz	r3, 800aae8 <_strtod_l+0x4e0>
 800aae4:	4682      	mov	sl, r0
 800aae6:	468b      	mov	fp, r1
 800aae8:	492c      	ldr	r1, [pc, #176]	@ (800ab9c <_strtod_l+0x594>)
 800aaea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800aaee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800aaf2:	4652      	mov	r2, sl
 800aaf4:	465b      	mov	r3, fp
 800aaf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aafa:	f7f5 fd85 	bl	8000608 <__aeabi_dmul>
 800aafe:	4b28      	ldr	r3, [pc, #160]	@ (800aba0 <_strtod_l+0x598>)
 800ab00:	460a      	mov	r2, r1
 800ab02:	400b      	ands	r3, r1
 800ab04:	4927      	ldr	r1, [pc, #156]	@ (800aba4 <_strtod_l+0x59c>)
 800ab06:	428b      	cmp	r3, r1
 800ab08:	4682      	mov	sl, r0
 800ab0a:	d898      	bhi.n	800aa3e <_strtod_l+0x436>
 800ab0c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ab10:	428b      	cmp	r3, r1
 800ab12:	bf86      	itte	hi
 800ab14:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800aba8 <_strtod_l+0x5a0>
 800ab18:	f04f 3aff 	movhi.w	sl, #4294967295
 800ab1c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ab20:	2300      	movs	r3, #0
 800ab22:	9308      	str	r3, [sp, #32]
 800ab24:	e07a      	b.n	800ac1c <_strtod_l+0x614>
 800ab26:	07e2      	lsls	r2, r4, #31
 800ab28:	d505      	bpl.n	800ab36 <_strtod_l+0x52e>
 800ab2a:	9b08      	ldr	r3, [sp, #32]
 800ab2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab30:	f7f5 fd6a 	bl	8000608 <__aeabi_dmul>
 800ab34:	2301      	movs	r3, #1
 800ab36:	9a08      	ldr	r2, [sp, #32]
 800ab38:	3208      	adds	r2, #8
 800ab3a:	3601      	adds	r6, #1
 800ab3c:	1064      	asrs	r4, r4, #1
 800ab3e:	9208      	str	r2, [sp, #32]
 800ab40:	e7cd      	b.n	800aade <_strtod_l+0x4d6>
 800ab42:	d0ed      	beq.n	800ab20 <_strtod_l+0x518>
 800ab44:	4264      	negs	r4, r4
 800ab46:	f014 020f 	ands.w	r2, r4, #15
 800ab4a:	d00a      	beq.n	800ab62 <_strtod_l+0x55a>
 800ab4c:	4b12      	ldr	r3, [pc, #72]	@ (800ab98 <_strtod_l+0x590>)
 800ab4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab52:	4650      	mov	r0, sl
 800ab54:	4659      	mov	r1, fp
 800ab56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5a:	f7f5 fe7f 	bl	800085c <__aeabi_ddiv>
 800ab5e:	4682      	mov	sl, r0
 800ab60:	468b      	mov	fp, r1
 800ab62:	1124      	asrs	r4, r4, #4
 800ab64:	d0dc      	beq.n	800ab20 <_strtod_l+0x518>
 800ab66:	2c1f      	cmp	r4, #31
 800ab68:	dd20      	ble.n	800abac <_strtod_l+0x5a4>
 800ab6a:	2400      	movs	r4, #0
 800ab6c:	46a0      	mov	r8, r4
 800ab6e:	940a      	str	r4, [sp, #40]	@ 0x28
 800ab70:	46a1      	mov	r9, r4
 800ab72:	9a05      	ldr	r2, [sp, #20]
 800ab74:	2322      	movs	r3, #34	@ 0x22
 800ab76:	f04f 0a00 	mov.w	sl, #0
 800ab7a:	f04f 0b00 	mov.w	fp, #0
 800ab7e:	6013      	str	r3, [r2, #0]
 800ab80:	e768      	b.n	800aa54 <_strtod_l+0x44c>
 800ab82:	bf00      	nop
 800ab84:	08010585 	.word	0x08010585
 800ab88:	08010524 	.word	0x08010524
 800ab8c:	0801057d 	.word	0x0801057d
 800ab90:	080105ba 	.word	0x080105ba
 800ab94:	08010968 	.word	0x08010968
 800ab98:	08010738 	.word	0x08010738
 800ab9c:	08010710 	.word	0x08010710
 800aba0:	7ff00000 	.word	0x7ff00000
 800aba4:	7ca00000 	.word	0x7ca00000
 800aba8:	7fefffff 	.word	0x7fefffff
 800abac:	f014 0310 	ands.w	r3, r4, #16
 800abb0:	bf18      	it	ne
 800abb2:	236a      	movne	r3, #106	@ 0x6a
 800abb4:	4ea9      	ldr	r6, [pc, #676]	@ (800ae5c <_strtod_l+0x854>)
 800abb6:	9308      	str	r3, [sp, #32]
 800abb8:	4650      	mov	r0, sl
 800abba:	4659      	mov	r1, fp
 800abbc:	2300      	movs	r3, #0
 800abbe:	07e2      	lsls	r2, r4, #31
 800abc0:	d504      	bpl.n	800abcc <_strtod_l+0x5c4>
 800abc2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800abc6:	f7f5 fd1f 	bl	8000608 <__aeabi_dmul>
 800abca:	2301      	movs	r3, #1
 800abcc:	1064      	asrs	r4, r4, #1
 800abce:	f106 0608 	add.w	r6, r6, #8
 800abd2:	d1f4      	bne.n	800abbe <_strtod_l+0x5b6>
 800abd4:	b10b      	cbz	r3, 800abda <_strtod_l+0x5d2>
 800abd6:	4682      	mov	sl, r0
 800abd8:	468b      	mov	fp, r1
 800abda:	9b08      	ldr	r3, [sp, #32]
 800abdc:	b1b3      	cbz	r3, 800ac0c <_strtod_l+0x604>
 800abde:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800abe2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	4659      	mov	r1, fp
 800abea:	dd0f      	ble.n	800ac0c <_strtod_l+0x604>
 800abec:	2b1f      	cmp	r3, #31
 800abee:	dd55      	ble.n	800ac9c <_strtod_l+0x694>
 800abf0:	2b34      	cmp	r3, #52	@ 0x34
 800abf2:	bfde      	ittt	le
 800abf4:	f04f 33ff 	movle.w	r3, #4294967295
 800abf8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800abfc:	4093      	lslle	r3, r2
 800abfe:	f04f 0a00 	mov.w	sl, #0
 800ac02:	bfcc      	ite	gt
 800ac04:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ac08:	ea03 0b01 	andle.w	fp, r3, r1
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	2300      	movs	r3, #0
 800ac10:	4650      	mov	r0, sl
 800ac12:	4659      	mov	r1, fp
 800ac14:	f7f5 ff60 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	d1a6      	bne.n	800ab6a <_strtod_l+0x562>
 800ac1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac1e:	9300      	str	r3, [sp, #0]
 800ac20:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ac22:	9805      	ldr	r0, [sp, #20]
 800ac24:	462b      	mov	r3, r5
 800ac26:	463a      	mov	r2, r7
 800ac28:	f002 ff46 	bl	800dab8 <__s2b>
 800ac2c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ac2e:	2800      	cmp	r0, #0
 800ac30:	f43f af05 	beq.w	800aa3e <_strtod_l+0x436>
 800ac34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac36:	2a00      	cmp	r2, #0
 800ac38:	eba9 0308 	sub.w	r3, r9, r8
 800ac3c:	bfa8      	it	ge
 800ac3e:	2300      	movge	r3, #0
 800ac40:	9312      	str	r3, [sp, #72]	@ 0x48
 800ac42:	2400      	movs	r4, #0
 800ac44:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ac48:	9316      	str	r3, [sp, #88]	@ 0x58
 800ac4a:	46a0      	mov	r8, r4
 800ac4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac4e:	9805      	ldr	r0, [sp, #20]
 800ac50:	6859      	ldr	r1, [r3, #4]
 800ac52:	f002 fe89 	bl	800d968 <_Balloc>
 800ac56:	4681      	mov	r9, r0
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	f43f aef4 	beq.w	800aa46 <_strtod_l+0x43e>
 800ac5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac60:	691a      	ldr	r2, [r3, #16]
 800ac62:	3202      	adds	r2, #2
 800ac64:	f103 010c 	add.w	r1, r3, #12
 800ac68:	0092      	lsls	r2, r2, #2
 800ac6a:	300c      	adds	r0, #12
 800ac6c:	f001 fbc5 	bl	800c3fa <memcpy>
 800ac70:	ec4b ab10 	vmov	d0, sl, fp
 800ac74:	9805      	ldr	r0, [sp, #20]
 800ac76:	aa1c      	add	r2, sp, #112	@ 0x70
 800ac78:	a91b      	add	r1, sp, #108	@ 0x6c
 800ac7a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ac7e:	f003 fa57 	bl	800e130 <__d2b>
 800ac82:	901a      	str	r0, [sp, #104]	@ 0x68
 800ac84:	2800      	cmp	r0, #0
 800ac86:	f43f aede 	beq.w	800aa46 <_strtod_l+0x43e>
 800ac8a:	9805      	ldr	r0, [sp, #20]
 800ac8c:	2101      	movs	r1, #1
 800ac8e:	f002 ffa9 	bl	800dbe4 <__i2b>
 800ac92:	4680      	mov	r8, r0
 800ac94:	b948      	cbnz	r0, 800acaa <_strtod_l+0x6a2>
 800ac96:	f04f 0800 	mov.w	r8, #0
 800ac9a:	e6d4      	b.n	800aa46 <_strtod_l+0x43e>
 800ac9c:	f04f 32ff 	mov.w	r2, #4294967295
 800aca0:	fa02 f303 	lsl.w	r3, r2, r3
 800aca4:	ea03 0a0a 	and.w	sl, r3, sl
 800aca8:	e7b0      	b.n	800ac0c <_strtod_l+0x604>
 800acaa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800acac:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800acae:	2d00      	cmp	r5, #0
 800acb0:	bfab      	itete	ge
 800acb2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800acb4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800acb6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800acb8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800acba:	bfac      	ite	ge
 800acbc:	18ef      	addge	r7, r5, r3
 800acbe:	1b5e      	sublt	r6, r3, r5
 800acc0:	9b08      	ldr	r3, [sp, #32]
 800acc2:	1aed      	subs	r5, r5, r3
 800acc4:	4415      	add	r5, r2
 800acc6:	4b66      	ldr	r3, [pc, #408]	@ (800ae60 <_strtod_l+0x858>)
 800acc8:	3d01      	subs	r5, #1
 800acca:	429d      	cmp	r5, r3
 800accc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800acd0:	da50      	bge.n	800ad74 <_strtod_l+0x76c>
 800acd2:	1b5b      	subs	r3, r3, r5
 800acd4:	2b1f      	cmp	r3, #31
 800acd6:	eba2 0203 	sub.w	r2, r2, r3
 800acda:	f04f 0101 	mov.w	r1, #1
 800acde:	dc3d      	bgt.n	800ad5c <_strtod_l+0x754>
 800ace0:	fa01 f303 	lsl.w	r3, r1, r3
 800ace4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ace6:	2300      	movs	r3, #0
 800ace8:	9310      	str	r3, [sp, #64]	@ 0x40
 800acea:	18bd      	adds	r5, r7, r2
 800acec:	9b08      	ldr	r3, [sp, #32]
 800acee:	42af      	cmp	r7, r5
 800acf0:	4416      	add	r6, r2
 800acf2:	441e      	add	r6, r3
 800acf4:	463b      	mov	r3, r7
 800acf6:	bfa8      	it	ge
 800acf8:	462b      	movge	r3, r5
 800acfa:	42b3      	cmp	r3, r6
 800acfc:	bfa8      	it	ge
 800acfe:	4633      	movge	r3, r6
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	bfc2      	ittt	gt
 800ad04:	1aed      	subgt	r5, r5, r3
 800ad06:	1af6      	subgt	r6, r6, r3
 800ad08:	1aff      	subgt	r7, r7, r3
 800ad0a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	dd16      	ble.n	800ad3e <_strtod_l+0x736>
 800ad10:	4641      	mov	r1, r8
 800ad12:	9805      	ldr	r0, [sp, #20]
 800ad14:	461a      	mov	r2, r3
 800ad16:	f003 f825 	bl	800dd64 <__pow5mult>
 800ad1a:	4680      	mov	r8, r0
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	d0ba      	beq.n	800ac96 <_strtod_l+0x68e>
 800ad20:	4601      	mov	r1, r0
 800ad22:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ad24:	9805      	ldr	r0, [sp, #20]
 800ad26:	f002 ff73 	bl	800dc10 <__multiply>
 800ad2a:	900e      	str	r0, [sp, #56]	@ 0x38
 800ad2c:	2800      	cmp	r0, #0
 800ad2e:	f43f ae8a 	beq.w	800aa46 <_strtod_l+0x43e>
 800ad32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ad34:	9805      	ldr	r0, [sp, #20]
 800ad36:	f002 fe57 	bl	800d9e8 <_Bfree>
 800ad3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad3c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad3e:	2d00      	cmp	r5, #0
 800ad40:	dc1d      	bgt.n	800ad7e <_strtod_l+0x776>
 800ad42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	dd23      	ble.n	800ad90 <_strtod_l+0x788>
 800ad48:	4649      	mov	r1, r9
 800ad4a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ad4c:	9805      	ldr	r0, [sp, #20]
 800ad4e:	f003 f809 	bl	800dd64 <__pow5mult>
 800ad52:	4681      	mov	r9, r0
 800ad54:	b9e0      	cbnz	r0, 800ad90 <_strtod_l+0x788>
 800ad56:	f04f 0900 	mov.w	r9, #0
 800ad5a:	e674      	b.n	800aa46 <_strtod_l+0x43e>
 800ad5c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ad60:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ad64:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ad68:	35e2      	adds	r5, #226	@ 0xe2
 800ad6a:	fa01 f305 	lsl.w	r3, r1, r5
 800ad6e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ad70:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ad72:	e7ba      	b.n	800acea <_strtod_l+0x6e2>
 800ad74:	2300      	movs	r3, #0
 800ad76:	9310      	str	r3, [sp, #64]	@ 0x40
 800ad78:	2301      	movs	r3, #1
 800ad7a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ad7c:	e7b5      	b.n	800acea <_strtod_l+0x6e2>
 800ad7e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ad80:	9805      	ldr	r0, [sp, #20]
 800ad82:	462a      	mov	r2, r5
 800ad84:	f003 f848 	bl	800de18 <__lshift>
 800ad88:	901a      	str	r0, [sp, #104]	@ 0x68
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	d1d9      	bne.n	800ad42 <_strtod_l+0x73a>
 800ad8e:	e65a      	b.n	800aa46 <_strtod_l+0x43e>
 800ad90:	2e00      	cmp	r6, #0
 800ad92:	dd07      	ble.n	800ada4 <_strtod_l+0x79c>
 800ad94:	4649      	mov	r1, r9
 800ad96:	9805      	ldr	r0, [sp, #20]
 800ad98:	4632      	mov	r2, r6
 800ad9a:	f003 f83d 	bl	800de18 <__lshift>
 800ad9e:	4681      	mov	r9, r0
 800ada0:	2800      	cmp	r0, #0
 800ada2:	d0d8      	beq.n	800ad56 <_strtod_l+0x74e>
 800ada4:	2f00      	cmp	r7, #0
 800ada6:	dd08      	ble.n	800adba <_strtod_l+0x7b2>
 800ada8:	4641      	mov	r1, r8
 800adaa:	9805      	ldr	r0, [sp, #20]
 800adac:	463a      	mov	r2, r7
 800adae:	f003 f833 	bl	800de18 <__lshift>
 800adb2:	4680      	mov	r8, r0
 800adb4:	2800      	cmp	r0, #0
 800adb6:	f43f ae46 	beq.w	800aa46 <_strtod_l+0x43e>
 800adba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800adbc:	9805      	ldr	r0, [sp, #20]
 800adbe:	464a      	mov	r2, r9
 800adc0:	f003 f8b2 	bl	800df28 <__mdiff>
 800adc4:	4604      	mov	r4, r0
 800adc6:	2800      	cmp	r0, #0
 800adc8:	f43f ae3d 	beq.w	800aa46 <_strtod_l+0x43e>
 800adcc:	68c3      	ldr	r3, [r0, #12]
 800adce:	930f      	str	r3, [sp, #60]	@ 0x3c
 800add0:	2300      	movs	r3, #0
 800add2:	60c3      	str	r3, [r0, #12]
 800add4:	4641      	mov	r1, r8
 800add6:	f003 f88b 	bl	800def0 <__mcmp>
 800adda:	2800      	cmp	r0, #0
 800addc:	da46      	bge.n	800ae6c <_strtod_l+0x864>
 800adde:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ade0:	ea53 030a 	orrs.w	r3, r3, sl
 800ade4:	d16c      	bne.n	800aec0 <_strtod_l+0x8b8>
 800ade6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800adea:	2b00      	cmp	r3, #0
 800adec:	d168      	bne.n	800aec0 <_strtod_l+0x8b8>
 800adee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800adf2:	0d1b      	lsrs	r3, r3, #20
 800adf4:	051b      	lsls	r3, r3, #20
 800adf6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800adfa:	d961      	bls.n	800aec0 <_strtod_l+0x8b8>
 800adfc:	6963      	ldr	r3, [r4, #20]
 800adfe:	b913      	cbnz	r3, 800ae06 <_strtod_l+0x7fe>
 800ae00:	6923      	ldr	r3, [r4, #16]
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	dd5c      	ble.n	800aec0 <_strtod_l+0x8b8>
 800ae06:	4621      	mov	r1, r4
 800ae08:	2201      	movs	r2, #1
 800ae0a:	9805      	ldr	r0, [sp, #20]
 800ae0c:	f003 f804 	bl	800de18 <__lshift>
 800ae10:	4641      	mov	r1, r8
 800ae12:	4604      	mov	r4, r0
 800ae14:	f003 f86c 	bl	800def0 <__mcmp>
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	dd51      	ble.n	800aec0 <_strtod_l+0x8b8>
 800ae1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae20:	9a08      	ldr	r2, [sp, #32]
 800ae22:	0d1b      	lsrs	r3, r3, #20
 800ae24:	051b      	lsls	r3, r3, #20
 800ae26:	2a00      	cmp	r2, #0
 800ae28:	d06b      	beq.n	800af02 <_strtod_l+0x8fa>
 800ae2a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ae2e:	d868      	bhi.n	800af02 <_strtod_l+0x8fa>
 800ae30:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ae34:	f67f ae9d 	bls.w	800ab72 <_strtod_l+0x56a>
 800ae38:	4b0a      	ldr	r3, [pc, #40]	@ (800ae64 <_strtod_l+0x85c>)
 800ae3a:	4650      	mov	r0, sl
 800ae3c:	4659      	mov	r1, fp
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f7f5 fbe2 	bl	8000608 <__aeabi_dmul>
 800ae44:	4b08      	ldr	r3, [pc, #32]	@ (800ae68 <_strtod_l+0x860>)
 800ae46:	400b      	ands	r3, r1
 800ae48:	4682      	mov	sl, r0
 800ae4a:	468b      	mov	fp, r1
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	f47f ae05 	bne.w	800aa5c <_strtod_l+0x454>
 800ae52:	9a05      	ldr	r2, [sp, #20]
 800ae54:	2322      	movs	r3, #34	@ 0x22
 800ae56:	6013      	str	r3, [r2, #0]
 800ae58:	e600      	b.n	800aa5c <_strtod_l+0x454>
 800ae5a:	bf00      	nop
 800ae5c:	08010550 	.word	0x08010550
 800ae60:	fffffc02 	.word	0xfffffc02
 800ae64:	39500000 	.word	0x39500000
 800ae68:	7ff00000 	.word	0x7ff00000
 800ae6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ae70:	d165      	bne.n	800af3e <_strtod_l+0x936>
 800ae72:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ae74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae78:	b35a      	cbz	r2, 800aed2 <_strtod_l+0x8ca>
 800ae7a:	4a9f      	ldr	r2, [pc, #636]	@ (800b0f8 <_strtod_l+0xaf0>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d12b      	bne.n	800aed8 <_strtod_l+0x8d0>
 800ae80:	9b08      	ldr	r3, [sp, #32]
 800ae82:	4651      	mov	r1, sl
 800ae84:	b303      	cbz	r3, 800aec8 <_strtod_l+0x8c0>
 800ae86:	4b9d      	ldr	r3, [pc, #628]	@ (800b0fc <_strtod_l+0xaf4>)
 800ae88:	465a      	mov	r2, fp
 800ae8a:	4013      	ands	r3, r2
 800ae8c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ae90:	f04f 32ff 	mov.w	r2, #4294967295
 800ae94:	d81b      	bhi.n	800aece <_strtod_l+0x8c6>
 800ae96:	0d1b      	lsrs	r3, r3, #20
 800ae98:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ae9c:	fa02 f303 	lsl.w	r3, r2, r3
 800aea0:	4299      	cmp	r1, r3
 800aea2:	d119      	bne.n	800aed8 <_strtod_l+0x8d0>
 800aea4:	4b96      	ldr	r3, [pc, #600]	@ (800b100 <_strtod_l+0xaf8>)
 800aea6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d102      	bne.n	800aeb2 <_strtod_l+0x8aa>
 800aeac:	3101      	adds	r1, #1
 800aeae:	f43f adca 	beq.w	800aa46 <_strtod_l+0x43e>
 800aeb2:	4b92      	ldr	r3, [pc, #584]	@ (800b0fc <_strtod_l+0xaf4>)
 800aeb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aeb6:	401a      	ands	r2, r3
 800aeb8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800aebc:	f04f 0a00 	mov.w	sl, #0
 800aec0:	9b08      	ldr	r3, [sp, #32]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d1b8      	bne.n	800ae38 <_strtod_l+0x830>
 800aec6:	e5c9      	b.n	800aa5c <_strtod_l+0x454>
 800aec8:	f04f 33ff 	mov.w	r3, #4294967295
 800aecc:	e7e8      	b.n	800aea0 <_strtod_l+0x898>
 800aece:	4613      	mov	r3, r2
 800aed0:	e7e6      	b.n	800aea0 <_strtod_l+0x898>
 800aed2:	ea53 030a 	orrs.w	r3, r3, sl
 800aed6:	d0a1      	beq.n	800ae1c <_strtod_l+0x814>
 800aed8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aeda:	b1db      	cbz	r3, 800af14 <_strtod_l+0x90c>
 800aedc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aede:	4213      	tst	r3, r2
 800aee0:	d0ee      	beq.n	800aec0 <_strtod_l+0x8b8>
 800aee2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aee4:	9a08      	ldr	r2, [sp, #32]
 800aee6:	4650      	mov	r0, sl
 800aee8:	4659      	mov	r1, fp
 800aeea:	b1bb      	cbz	r3, 800af1c <_strtod_l+0x914>
 800aeec:	f7ff fb6e 	bl	800a5cc <sulp>
 800aef0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aef4:	ec53 2b10 	vmov	r2, r3, d0
 800aef8:	f7f5 f9d0 	bl	800029c <__adddf3>
 800aefc:	4682      	mov	sl, r0
 800aefe:	468b      	mov	fp, r1
 800af00:	e7de      	b.n	800aec0 <_strtod_l+0x8b8>
 800af02:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800af06:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800af0a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800af0e:	f04f 3aff 	mov.w	sl, #4294967295
 800af12:	e7d5      	b.n	800aec0 <_strtod_l+0x8b8>
 800af14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800af16:	ea13 0f0a 	tst.w	r3, sl
 800af1a:	e7e1      	b.n	800aee0 <_strtod_l+0x8d8>
 800af1c:	f7ff fb56 	bl	800a5cc <sulp>
 800af20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af24:	ec53 2b10 	vmov	r2, r3, d0
 800af28:	f7f5 f9b6 	bl	8000298 <__aeabi_dsub>
 800af2c:	2200      	movs	r2, #0
 800af2e:	2300      	movs	r3, #0
 800af30:	4682      	mov	sl, r0
 800af32:	468b      	mov	fp, r1
 800af34:	f7f5 fdd0 	bl	8000ad8 <__aeabi_dcmpeq>
 800af38:	2800      	cmp	r0, #0
 800af3a:	d0c1      	beq.n	800aec0 <_strtod_l+0x8b8>
 800af3c:	e619      	b.n	800ab72 <_strtod_l+0x56a>
 800af3e:	4641      	mov	r1, r8
 800af40:	4620      	mov	r0, r4
 800af42:	f003 f94d 	bl	800e1e0 <__ratio>
 800af46:	ec57 6b10 	vmov	r6, r7, d0
 800af4a:	2200      	movs	r2, #0
 800af4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800af50:	4630      	mov	r0, r6
 800af52:	4639      	mov	r1, r7
 800af54:	f7f5 fdd4 	bl	8000b00 <__aeabi_dcmple>
 800af58:	2800      	cmp	r0, #0
 800af5a:	d06f      	beq.n	800b03c <_strtod_l+0xa34>
 800af5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d17a      	bne.n	800b058 <_strtod_l+0xa50>
 800af62:	f1ba 0f00 	cmp.w	sl, #0
 800af66:	d158      	bne.n	800b01a <_strtod_l+0xa12>
 800af68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d15a      	bne.n	800b028 <_strtod_l+0xa20>
 800af72:	4b64      	ldr	r3, [pc, #400]	@ (800b104 <_strtod_l+0xafc>)
 800af74:	2200      	movs	r2, #0
 800af76:	4630      	mov	r0, r6
 800af78:	4639      	mov	r1, r7
 800af7a:	f7f5 fdb7 	bl	8000aec <__aeabi_dcmplt>
 800af7e:	2800      	cmp	r0, #0
 800af80:	d159      	bne.n	800b036 <_strtod_l+0xa2e>
 800af82:	4630      	mov	r0, r6
 800af84:	4639      	mov	r1, r7
 800af86:	4b60      	ldr	r3, [pc, #384]	@ (800b108 <_strtod_l+0xb00>)
 800af88:	2200      	movs	r2, #0
 800af8a:	f7f5 fb3d 	bl	8000608 <__aeabi_dmul>
 800af8e:	4606      	mov	r6, r0
 800af90:	460f      	mov	r7, r1
 800af92:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800af96:	9606      	str	r6, [sp, #24]
 800af98:	9307      	str	r3, [sp, #28]
 800af9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800af9e:	4d57      	ldr	r5, [pc, #348]	@ (800b0fc <_strtod_l+0xaf4>)
 800afa0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800afa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afa6:	401d      	ands	r5, r3
 800afa8:	4b58      	ldr	r3, [pc, #352]	@ (800b10c <_strtod_l+0xb04>)
 800afaa:	429d      	cmp	r5, r3
 800afac:	f040 80b2 	bne.w	800b114 <_strtod_l+0xb0c>
 800afb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afb2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800afb6:	ec4b ab10 	vmov	d0, sl, fp
 800afba:	f003 f849 	bl	800e050 <__ulp>
 800afbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800afc2:	ec51 0b10 	vmov	r0, r1, d0
 800afc6:	f7f5 fb1f 	bl	8000608 <__aeabi_dmul>
 800afca:	4652      	mov	r2, sl
 800afcc:	465b      	mov	r3, fp
 800afce:	f7f5 f965 	bl	800029c <__adddf3>
 800afd2:	460b      	mov	r3, r1
 800afd4:	4949      	ldr	r1, [pc, #292]	@ (800b0fc <_strtod_l+0xaf4>)
 800afd6:	4a4e      	ldr	r2, [pc, #312]	@ (800b110 <_strtod_l+0xb08>)
 800afd8:	4019      	ands	r1, r3
 800afda:	4291      	cmp	r1, r2
 800afdc:	4682      	mov	sl, r0
 800afde:	d942      	bls.n	800b066 <_strtod_l+0xa5e>
 800afe0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800afe2:	4b47      	ldr	r3, [pc, #284]	@ (800b100 <_strtod_l+0xaf8>)
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d103      	bne.n	800aff0 <_strtod_l+0x9e8>
 800afe8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800afea:	3301      	adds	r3, #1
 800afec:	f43f ad2b 	beq.w	800aa46 <_strtod_l+0x43e>
 800aff0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b100 <_strtod_l+0xaf8>
 800aff4:	f04f 3aff 	mov.w	sl, #4294967295
 800aff8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800affa:	9805      	ldr	r0, [sp, #20]
 800affc:	f002 fcf4 	bl	800d9e8 <_Bfree>
 800b000:	9805      	ldr	r0, [sp, #20]
 800b002:	4649      	mov	r1, r9
 800b004:	f002 fcf0 	bl	800d9e8 <_Bfree>
 800b008:	9805      	ldr	r0, [sp, #20]
 800b00a:	4641      	mov	r1, r8
 800b00c:	f002 fcec 	bl	800d9e8 <_Bfree>
 800b010:	9805      	ldr	r0, [sp, #20]
 800b012:	4621      	mov	r1, r4
 800b014:	f002 fce8 	bl	800d9e8 <_Bfree>
 800b018:	e618      	b.n	800ac4c <_strtod_l+0x644>
 800b01a:	f1ba 0f01 	cmp.w	sl, #1
 800b01e:	d103      	bne.n	800b028 <_strtod_l+0xa20>
 800b020:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b022:	2b00      	cmp	r3, #0
 800b024:	f43f ada5 	beq.w	800ab72 <_strtod_l+0x56a>
 800b028:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b0d8 <_strtod_l+0xad0>
 800b02c:	4f35      	ldr	r7, [pc, #212]	@ (800b104 <_strtod_l+0xafc>)
 800b02e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b032:	2600      	movs	r6, #0
 800b034:	e7b1      	b.n	800af9a <_strtod_l+0x992>
 800b036:	4f34      	ldr	r7, [pc, #208]	@ (800b108 <_strtod_l+0xb00>)
 800b038:	2600      	movs	r6, #0
 800b03a:	e7aa      	b.n	800af92 <_strtod_l+0x98a>
 800b03c:	4b32      	ldr	r3, [pc, #200]	@ (800b108 <_strtod_l+0xb00>)
 800b03e:	4630      	mov	r0, r6
 800b040:	4639      	mov	r1, r7
 800b042:	2200      	movs	r2, #0
 800b044:	f7f5 fae0 	bl	8000608 <__aeabi_dmul>
 800b048:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b04a:	4606      	mov	r6, r0
 800b04c:	460f      	mov	r7, r1
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d09f      	beq.n	800af92 <_strtod_l+0x98a>
 800b052:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b056:	e7a0      	b.n	800af9a <_strtod_l+0x992>
 800b058:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b0e0 <_strtod_l+0xad8>
 800b05c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b060:	ec57 6b17 	vmov	r6, r7, d7
 800b064:	e799      	b.n	800af9a <_strtod_l+0x992>
 800b066:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b06a:	9b08      	ldr	r3, [sp, #32]
 800b06c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b070:	2b00      	cmp	r3, #0
 800b072:	d1c1      	bne.n	800aff8 <_strtod_l+0x9f0>
 800b074:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b078:	0d1b      	lsrs	r3, r3, #20
 800b07a:	051b      	lsls	r3, r3, #20
 800b07c:	429d      	cmp	r5, r3
 800b07e:	d1bb      	bne.n	800aff8 <_strtod_l+0x9f0>
 800b080:	4630      	mov	r0, r6
 800b082:	4639      	mov	r1, r7
 800b084:	f7f5 fe20 	bl	8000cc8 <__aeabi_d2lz>
 800b088:	f7f5 fa90 	bl	80005ac <__aeabi_l2d>
 800b08c:	4602      	mov	r2, r0
 800b08e:	460b      	mov	r3, r1
 800b090:	4630      	mov	r0, r6
 800b092:	4639      	mov	r1, r7
 800b094:	f7f5 f900 	bl	8000298 <__aeabi_dsub>
 800b098:	460b      	mov	r3, r1
 800b09a:	4602      	mov	r2, r0
 800b09c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b0a0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b0a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0a6:	ea46 060a 	orr.w	r6, r6, sl
 800b0aa:	431e      	orrs	r6, r3
 800b0ac:	d06f      	beq.n	800b18e <_strtod_l+0xb86>
 800b0ae:	a30e      	add	r3, pc, #56	@ (adr r3, 800b0e8 <_strtod_l+0xae0>)
 800b0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b4:	f7f5 fd1a 	bl	8000aec <__aeabi_dcmplt>
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	f47f accf 	bne.w	800aa5c <_strtod_l+0x454>
 800b0be:	a30c      	add	r3, pc, #48	@ (adr r3, 800b0f0 <_strtod_l+0xae8>)
 800b0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b0c8:	f7f5 fd2e 	bl	8000b28 <__aeabi_dcmpgt>
 800b0cc:	2800      	cmp	r0, #0
 800b0ce:	d093      	beq.n	800aff8 <_strtod_l+0x9f0>
 800b0d0:	e4c4      	b.n	800aa5c <_strtod_l+0x454>
 800b0d2:	bf00      	nop
 800b0d4:	f3af 8000 	nop.w
 800b0d8:	00000000 	.word	0x00000000
 800b0dc:	bff00000 	.word	0xbff00000
 800b0e0:	00000000 	.word	0x00000000
 800b0e4:	3ff00000 	.word	0x3ff00000
 800b0e8:	94a03595 	.word	0x94a03595
 800b0ec:	3fdfffff 	.word	0x3fdfffff
 800b0f0:	35afe535 	.word	0x35afe535
 800b0f4:	3fe00000 	.word	0x3fe00000
 800b0f8:	000fffff 	.word	0x000fffff
 800b0fc:	7ff00000 	.word	0x7ff00000
 800b100:	7fefffff 	.word	0x7fefffff
 800b104:	3ff00000 	.word	0x3ff00000
 800b108:	3fe00000 	.word	0x3fe00000
 800b10c:	7fe00000 	.word	0x7fe00000
 800b110:	7c9fffff 	.word	0x7c9fffff
 800b114:	9b08      	ldr	r3, [sp, #32]
 800b116:	b323      	cbz	r3, 800b162 <_strtod_l+0xb5a>
 800b118:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b11c:	d821      	bhi.n	800b162 <_strtod_l+0xb5a>
 800b11e:	a328      	add	r3, pc, #160	@ (adr r3, 800b1c0 <_strtod_l+0xbb8>)
 800b120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b124:	4630      	mov	r0, r6
 800b126:	4639      	mov	r1, r7
 800b128:	f7f5 fcea 	bl	8000b00 <__aeabi_dcmple>
 800b12c:	b1a0      	cbz	r0, 800b158 <_strtod_l+0xb50>
 800b12e:	4639      	mov	r1, r7
 800b130:	4630      	mov	r0, r6
 800b132:	f7f5 fd41 	bl	8000bb8 <__aeabi_d2uiz>
 800b136:	2801      	cmp	r0, #1
 800b138:	bf38      	it	cc
 800b13a:	2001      	movcc	r0, #1
 800b13c:	f7f5 f9ea 	bl	8000514 <__aeabi_ui2d>
 800b140:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b142:	4606      	mov	r6, r0
 800b144:	460f      	mov	r7, r1
 800b146:	b9fb      	cbnz	r3, 800b188 <_strtod_l+0xb80>
 800b148:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b14c:	9014      	str	r0, [sp, #80]	@ 0x50
 800b14e:	9315      	str	r3, [sp, #84]	@ 0x54
 800b150:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b154:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b158:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b15a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b15e:	1b5b      	subs	r3, r3, r5
 800b160:	9311      	str	r3, [sp, #68]	@ 0x44
 800b162:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b166:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b16a:	f002 ff71 	bl	800e050 <__ulp>
 800b16e:	4650      	mov	r0, sl
 800b170:	ec53 2b10 	vmov	r2, r3, d0
 800b174:	4659      	mov	r1, fp
 800b176:	f7f5 fa47 	bl	8000608 <__aeabi_dmul>
 800b17a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b17e:	f7f5 f88d 	bl	800029c <__adddf3>
 800b182:	4682      	mov	sl, r0
 800b184:	468b      	mov	fp, r1
 800b186:	e770      	b.n	800b06a <_strtod_l+0xa62>
 800b188:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b18c:	e7e0      	b.n	800b150 <_strtod_l+0xb48>
 800b18e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b1c8 <_strtod_l+0xbc0>)
 800b190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b194:	f7f5 fcaa 	bl	8000aec <__aeabi_dcmplt>
 800b198:	e798      	b.n	800b0cc <_strtod_l+0xac4>
 800b19a:	2300      	movs	r3, #0
 800b19c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b19e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b1a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b1a2:	6013      	str	r3, [r2, #0]
 800b1a4:	f7ff ba6d 	b.w	800a682 <_strtod_l+0x7a>
 800b1a8:	2a65      	cmp	r2, #101	@ 0x65
 800b1aa:	f43f ab66 	beq.w	800a87a <_strtod_l+0x272>
 800b1ae:	2a45      	cmp	r2, #69	@ 0x45
 800b1b0:	f43f ab63 	beq.w	800a87a <_strtod_l+0x272>
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	f7ff bb9e 	b.w	800a8f6 <_strtod_l+0x2ee>
 800b1ba:	bf00      	nop
 800b1bc:	f3af 8000 	nop.w
 800b1c0:	ffc00000 	.word	0xffc00000
 800b1c4:	41dfffff 	.word	0x41dfffff
 800b1c8:	94a03595 	.word	0x94a03595
 800b1cc:	3fcfffff 	.word	0x3fcfffff

0800b1d0 <_strtod_r>:
 800b1d0:	4b01      	ldr	r3, [pc, #4]	@ (800b1d8 <_strtod_r+0x8>)
 800b1d2:	f7ff ba19 	b.w	800a608 <_strtod_l>
 800b1d6:	bf00      	nop
 800b1d8:	2000001c 	.word	0x2000001c

0800b1dc <strtod>:
 800b1dc:	460a      	mov	r2, r1
 800b1de:	4601      	mov	r1, r0
 800b1e0:	4802      	ldr	r0, [pc, #8]	@ (800b1ec <strtod+0x10>)
 800b1e2:	4b03      	ldr	r3, [pc, #12]	@ (800b1f0 <strtod+0x14>)
 800b1e4:	6800      	ldr	r0, [r0, #0]
 800b1e6:	f7ff ba0f 	b.w	800a608 <_strtod_l>
 800b1ea:	bf00      	nop
 800b1ec:	20000188 	.word	0x20000188
 800b1f0:	2000001c 	.word	0x2000001c

0800b1f4 <__cvt>:
 800b1f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1f8:	ec57 6b10 	vmov	r6, r7, d0
 800b1fc:	2f00      	cmp	r7, #0
 800b1fe:	460c      	mov	r4, r1
 800b200:	4619      	mov	r1, r3
 800b202:	463b      	mov	r3, r7
 800b204:	bfbb      	ittet	lt
 800b206:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b20a:	461f      	movlt	r7, r3
 800b20c:	2300      	movge	r3, #0
 800b20e:	232d      	movlt	r3, #45	@ 0x2d
 800b210:	700b      	strb	r3, [r1, #0]
 800b212:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b214:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b218:	4691      	mov	r9, r2
 800b21a:	f023 0820 	bic.w	r8, r3, #32
 800b21e:	bfbc      	itt	lt
 800b220:	4632      	movlt	r2, r6
 800b222:	4616      	movlt	r6, r2
 800b224:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b228:	d005      	beq.n	800b236 <__cvt+0x42>
 800b22a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b22e:	d100      	bne.n	800b232 <__cvt+0x3e>
 800b230:	3401      	adds	r4, #1
 800b232:	2102      	movs	r1, #2
 800b234:	e000      	b.n	800b238 <__cvt+0x44>
 800b236:	2103      	movs	r1, #3
 800b238:	ab03      	add	r3, sp, #12
 800b23a:	9301      	str	r3, [sp, #4]
 800b23c:	ab02      	add	r3, sp, #8
 800b23e:	9300      	str	r3, [sp, #0]
 800b240:	ec47 6b10 	vmov	d0, r6, r7
 800b244:	4653      	mov	r3, sl
 800b246:	4622      	mov	r2, r4
 800b248:	f001 f97e 	bl	800c548 <_dtoa_r>
 800b24c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b250:	4605      	mov	r5, r0
 800b252:	d119      	bne.n	800b288 <__cvt+0x94>
 800b254:	f019 0f01 	tst.w	r9, #1
 800b258:	d00e      	beq.n	800b278 <__cvt+0x84>
 800b25a:	eb00 0904 	add.w	r9, r0, r4
 800b25e:	2200      	movs	r2, #0
 800b260:	2300      	movs	r3, #0
 800b262:	4630      	mov	r0, r6
 800b264:	4639      	mov	r1, r7
 800b266:	f7f5 fc37 	bl	8000ad8 <__aeabi_dcmpeq>
 800b26a:	b108      	cbz	r0, 800b270 <__cvt+0x7c>
 800b26c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b270:	2230      	movs	r2, #48	@ 0x30
 800b272:	9b03      	ldr	r3, [sp, #12]
 800b274:	454b      	cmp	r3, r9
 800b276:	d31e      	bcc.n	800b2b6 <__cvt+0xc2>
 800b278:	9b03      	ldr	r3, [sp, #12]
 800b27a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b27c:	1b5b      	subs	r3, r3, r5
 800b27e:	4628      	mov	r0, r5
 800b280:	6013      	str	r3, [r2, #0]
 800b282:	b004      	add	sp, #16
 800b284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b288:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b28c:	eb00 0904 	add.w	r9, r0, r4
 800b290:	d1e5      	bne.n	800b25e <__cvt+0x6a>
 800b292:	7803      	ldrb	r3, [r0, #0]
 800b294:	2b30      	cmp	r3, #48	@ 0x30
 800b296:	d10a      	bne.n	800b2ae <__cvt+0xba>
 800b298:	2200      	movs	r2, #0
 800b29a:	2300      	movs	r3, #0
 800b29c:	4630      	mov	r0, r6
 800b29e:	4639      	mov	r1, r7
 800b2a0:	f7f5 fc1a 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2a4:	b918      	cbnz	r0, 800b2ae <__cvt+0xba>
 800b2a6:	f1c4 0401 	rsb	r4, r4, #1
 800b2aa:	f8ca 4000 	str.w	r4, [sl]
 800b2ae:	f8da 3000 	ldr.w	r3, [sl]
 800b2b2:	4499      	add	r9, r3
 800b2b4:	e7d3      	b.n	800b25e <__cvt+0x6a>
 800b2b6:	1c59      	adds	r1, r3, #1
 800b2b8:	9103      	str	r1, [sp, #12]
 800b2ba:	701a      	strb	r2, [r3, #0]
 800b2bc:	e7d9      	b.n	800b272 <__cvt+0x7e>

0800b2be <__exponent>:
 800b2be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2c0:	2900      	cmp	r1, #0
 800b2c2:	bfba      	itte	lt
 800b2c4:	4249      	neglt	r1, r1
 800b2c6:	232d      	movlt	r3, #45	@ 0x2d
 800b2c8:	232b      	movge	r3, #43	@ 0x2b
 800b2ca:	2909      	cmp	r1, #9
 800b2cc:	7002      	strb	r2, [r0, #0]
 800b2ce:	7043      	strb	r3, [r0, #1]
 800b2d0:	dd29      	ble.n	800b326 <__exponent+0x68>
 800b2d2:	f10d 0307 	add.w	r3, sp, #7
 800b2d6:	461d      	mov	r5, r3
 800b2d8:	270a      	movs	r7, #10
 800b2da:	461a      	mov	r2, r3
 800b2dc:	fbb1 f6f7 	udiv	r6, r1, r7
 800b2e0:	fb07 1416 	mls	r4, r7, r6, r1
 800b2e4:	3430      	adds	r4, #48	@ 0x30
 800b2e6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b2ea:	460c      	mov	r4, r1
 800b2ec:	2c63      	cmp	r4, #99	@ 0x63
 800b2ee:	f103 33ff 	add.w	r3, r3, #4294967295
 800b2f2:	4631      	mov	r1, r6
 800b2f4:	dcf1      	bgt.n	800b2da <__exponent+0x1c>
 800b2f6:	3130      	adds	r1, #48	@ 0x30
 800b2f8:	1e94      	subs	r4, r2, #2
 800b2fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b2fe:	1c41      	adds	r1, r0, #1
 800b300:	4623      	mov	r3, r4
 800b302:	42ab      	cmp	r3, r5
 800b304:	d30a      	bcc.n	800b31c <__exponent+0x5e>
 800b306:	f10d 0309 	add.w	r3, sp, #9
 800b30a:	1a9b      	subs	r3, r3, r2
 800b30c:	42ac      	cmp	r4, r5
 800b30e:	bf88      	it	hi
 800b310:	2300      	movhi	r3, #0
 800b312:	3302      	adds	r3, #2
 800b314:	4403      	add	r3, r0
 800b316:	1a18      	subs	r0, r3, r0
 800b318:	b003      	add	sp, #12
 800b31a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b31c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b320:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b324:	e7ed      	b.n	800b302 <__exponent+0x44>
 800b326:	2330      	movs	r3, #48	@ 0x30
 800b328:	3130      	adds	r1, #48	@ 0x30
 800b32a:	7083      	strb	r3, [r0, #2]
 800b32c:	70c1      	strb	r1, [r0, #3]
 800b32e:	1d03      	adds	r3, r0, #4
 800b330:	e7f1      	b.n	800b316 <__exponent+0x58>
	...

0800b334 <_printf_float>:
 800b334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b338:	b08d      	sub	sp, #52	@ 0x34
 800b33a:	460c      	mov	r4, r1
 800b33c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b340:	4616      	mov	r6, r2
 800b342:	461f      	mov	r7, r3
 800b344:	4605      	mov	r5, r0
 800b346:	f000 ffe1 	bl	800c30c <_localeconv_r>
 800b34a:	6803      	ldr	r3, [r0, #0]
 800b34c:	9304      	str	r3, [sp, #16]
 800b34e:	4618      	mov	r0, r3
 800b350:	f7f4 ff96 	bl	8000280 <strlen>
 800b354:	2300      	movs	r3, #0
 800b356:	930a      	str	r3, [sp, #40]	@ 0x28
 800b358:	f8d8 3000 	ldr.w	r3, [r8]
 800b35c:	9005      	str	r0, [sp, #20]
 800b35e:	3307      	adds	r3, #7
 800b360:	f023 0307 	bic.w	r3, r3, #7
 800b364:	f103 0208 	add.w	r2, r3, #8
 800b368:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b36c:	f8d4 b000 	ldr.w	fp, [r4]
 800b370:	f8c8 2000 	str.w	r2, [r8]
 800b374:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b378:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b37c:	9307      	str	r3, [sp, #28]
 800b37e:	f8cd 8018 	str.w	r8, [sp, #24]
 800b382:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b386:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b38a:	4b9c      	ldr	r3, [pc, #624]	@ (800b5fc <_printf_float+0x2c8>)
 800b38c:	f04f 32ff 	mov.w	r2, #4294967295
 800b390:	f7f5 fbd4 	bl	8000b3c <__aeabi_dcmpun>
 800b394:	bb70      	cbnz	r0, 800b3f4 <_printf_float+0xc0>
 800b396:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b39a:	4b98      	ldr	r3, [pc, #608]	@ (800b5fc <_printf_float+0x2c8>)
 800b39c:	f04f 32ff 	mov.w	r2, #4294967295
 800b3a0:	f7f5 fbae 	bl	8000b00 <__aeabi_dcmple>
 800b3a4:	bb30      	cbnz	r0, 800b3f4 <_printf_float+0xc0>
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	4640      	mov	r0, r8
 800b3ac:	4649      	mov	r1, r9
 800b3ae:	f7f5 fb9d 	bl	8000aec <__aeabi_dcmplt>
 800b3b2:	b110      	cbz	r0, 800b3ba <_printf_float+0x86>
 800b3b4:	232d      	movs	r3, #45	@ 0x2d
 800b3b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3ba:	4a91      	ldr	r2, [pc, #580]	@ (800b600 <_printf_float+0x2cc>)
 800b3bc:	4b91      	ldr	r3, [pc, #580]	@ (800b604 <_printf_float+0x2d0>)
 800b3be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b3c2:	bf94      	ite	ls
 800b3c4:	4690      	movls	r8, r2
 800b3c6:	4698      	movhi	r8, r3
 800b3c8:	2303      	movs	r3, #3
 800b3ca:	6123      	str	r3, [r4, #16]
 800b3cc:	f02b 0304 	bic.w	r3, fp, #4
 800b3d0:	6023      	str	r3, [r4, #0]
 800b3d2:	f04f 0900 	mov.w	r9, #0
 800b3d6:	9700      	str	r7, [sp, #0]
 800b3d8:	4633      	mov	r3, r6
 800b3da:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b3dc:	4621      	mov	r1, r4
 800b3de:	4628      	mov	r0, r5
 800b3e0:	f000 f9d2 	bl	800b788 <_printf_common>
 800b3e4:	3001      	adds	r0, #1
 800b3e6:	f040 808d 	bne.w	800b504 <_printf_float+0x1d0>
 800b3ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ee:	b00d      	add	sp, #52	@ 0x34
 800b3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3f4:	4642      	mov	r2, r8
 800b3f6:	464b      	mov	r3, r9
 800b3f8:	4640      	mov	r0, r8
 800b3fa:	4649      	mov	r1, r9
 800b3fc:	f7f5 fb9e 	bl	8000b3c <__aeabi_dcmpun>
 800b400:	b140      	cbz	r0, 800b414 <_printf_float+0xe0>
 800b402:	464b      	mov	r3, r9
 800b404:	2b00      	cmp	r3, #0
 800b406:	bfbc      	itt	lt
 800b408:	232d      	movlt	r3, #45	@ 0x2d
 800b40a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b40e:	4a7e      	ldr	r2, [pc, #504]	@ (800b608 <_printf_float+0x2d4>)
 800b410:	4b7e      	ldr	r3, [pc, #504]	@ (800b60c <_printf_float+0x2d8>)
 800b412:	e7d4      	b.n	800b3be <_printf_float+0x8a>
 800b414:	6863      	ldr	r3, [r4, #4]
 800b416:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b41a:	9206      	str	r2, [sp, #24]
 800b41c:	1c5a      	adds	r2, r3, #1
 800b41e:	d13b      	bne.n	800b498 <_printf_float+0x164>
 800b420:	2306      	movs	r3, #6
 800b422:	6063      	str	r3, [r4, #4]
 800b424:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b428:	2300      	movs	r3, #0
 800b42a:	6022      	str	r2, [r4, #0]
 800b42c:	9303      	str	r3, [sp, #12]
 800b42e:	ab0a      	add	r3, sp, #40	@ 0x28
 800b430:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b434:	ab09      	add	r3, sp, #36	@ 0x24
 800b436:	9300      	str	r3, [sp, #0]
 800b438:	6861      	ldr	r1, [r4, #4]
 800b43a:	ec49 8b10 	vmov	d0, r8, r9
 800b43e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b442:	4628      	mov	r0, r5
 800b444:	f7ff fed6 	bl	800b1f4 <__cvt>
 800b448:	9b06      	ldr	r3, [sp, #24]
 800b44a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b44c:	2b47      	cmp	r3, #71	@ 0x47
 800b44e:	4680      	mov	r8, r0
 800b450:	d129      	bne.n	800b4a6 <_printf_float+0x172>
 800b452:	1cc8      	adds	r0, r1, #3
 800b454:	db02      	blt.n	800b45c <_printf_float+0x128>
 800b456:	6863      	ldr	r3, [r4, #4]
 800b458:	4299      	cmp	r1, r3
 800b45a:	dd41      	ble.n	800b4e0 <_printf_float+0x1ac>
 800b45c:	f1aa 0a02 	sub.w	sl, sl, #2
 800b460:	fa5f fa8a 	uxtb.w	sl, sl
 800b464:	3901      	subs	r1, #1
 800b466:	4652      	mov	r2, sl
 800b468:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b46c:	9109      	str	r1, [sp, #36]	@ 0x24
 800b46e:	f7ff ff26 	bl	800b2be <__exponent>
 800b472:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b474:	1813      	adds	r3, r2, r0
 800b476:	2a01      	cmp	r2, #1
 800b478:	4681      	mov	r9, r0
 800b47a:	6123      	str	r3, [r4, #16]
 800b47c:	dc02      	bgt.n	800b484 <_printf_float+0x150>
 800b47e:	6822      	ldr	r2, [r4, #0]
 800b480:	07d2      	lsls	r2, r2, #31
 800b482:	d501      	bpl.n	800b488 <_printf_float+0x154>
 800b484:	3301      	adds	r3, #1
 800b486:	6123      	str	r3, [r4, #16]
 800b488:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d0a2      	beq.n	800b3d6 <_printf_float+0xa2>
 800b490:	232d      	movs	r3, #45	@ 0x2d
 800b492:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b496:	e79e      	b.n	800b3d6 <_printf_float+0xa2>
 800b498:	9a06      	ldr	r2, [sp, #24]
 800b49a:	2a47      	cmp	r2, #71	@ 0x47
 800b49c:	d1c2      	bne.n	800b424 <_printf_float+0xf0>
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d1c0      	bne.n	800b424 <_printf_float+0xf0>
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	e7bd      	b.n	800b422 <_printf_float+0xee>
 800b4a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b4aa:	d9db      	bls.n	800b464 <_printf_float+0x130>
 800b4ac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b4b0:	d118      	bne.n	800b4e4 <_printf_float+0x1b0>
 800b4b2:	2900      	cmp	r1, #0
 800b4b4:	6863      	ldr	r3, [r4, #4]
 800b4b6:	dd0b      	ble.n	800b4d0 <_printf_float+0x19c>
 800b4b8:	6121      	str	r1, [r4, #16]
 800b4ba:	b913      	cbnz	r3, 800b4c2 <_printf_float+0x18e>
 800b4bc:	6822      	ldr	r2, [r4, #0]
 800b4be:	07d0      	lsls	r0, r2, #31
 800b4c0:	d502      	bpl.n	800b4c8 <_printf_float+0x194>
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	440b      	add	r3, r1
 800b4c6:	6123      	str	r3, [r4, #16]
 800b4c8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b4ca:	f04f 0900 	mov.w	r9, #0
 800b4ce:	e7db      	b.n	800b488 <_printf_float+0x154>
 800b4d0:	b913      	cbnz	r3, 800b4d8 <_printf_float+0x1a4>
 800b4d2:	6822      	ldr	r2, [r4, #0]
 800b4d4:	07d2      	lsls	r2, r2, #31
 800b4d6:	d501      	bpl.n	800b4dc <_printf_float+0x1a8>
 800b4d8:	3302      	adds	r3, #2
 800b4da:	e7f4      	b.n	800b4c6 <_printf_float+0x192>
 800b4dc:	2301      	movs	r3, #1
 800b4de:	e7f2      	b.n	800b4c6 <_printf_float+0x192>
 800b4e0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b4e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4e6:	4299      	cmp	r1, r3
 800b4e8:	db05      	blt.n	800b4f6 <_printf_float+0x1c2>
 800b4ea:	6823      	ldr	r3, [r4, #0]
 800b4ec:	6121      	str	r1, [r4, #16]
 800b4ee:	07d8      	lsls	r0, r3, #31
 800b4f0:	d5ea      	bpl.n	800b4c8 <_printf_float+0x194>
 800b4f2:	1c4b      	adds	r3, r1, #1
 800b4f4:	e7e7      	b.n	800b4c6 <_printf_float+0x192>
 800b4f6:	2900      	cmp	r1, #0
 800b4f8:	bfd4      	ite	le
 800b4fa:	f1c1 0202 	rsble	r2, r1, #2
 800b4fe:	2201      	movgt	r2, #1
 800b500:	4413      	add	r3, r2
 800b502:	e7e0      	b.n	800b4c6 <_printf_float+0x192>
 800b504:	6823      	ldr	r3, [r4, #0]
 800b506:	055a      	lsls	r2, r3, #21
 800b508:	d407      	bmi.n	800b51a <_printf_float+0x1e6>
 800b50a:	6923      	ldr	r3, [r4, #16]
 800b50c:	4642      	mov	r2, r8
 800b50e:	4631      	mov	r1, r6
 800b510:	4628      	mov	r0, r5
 800b512:	47b8      	blx	r7
 800b514:	3001      	adds	r0, #1
 800b516:	d12b      	bne.n	800b570 <_printf_float+0x23c>
 800b518:	e767      	b.n	800b3ea <_printf_float+0xb6>
 800b51a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b51e:	f240 80dd 	bls.w	800b6dc <_printf_float+0x3a8>
 800b522:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b526:	2200      	movs	r2, #0
 800b528:	2300      	movs	r3, #0
 800b52a:	f7f5 fad5 	bl	8000ad8 <__aeabi_dcmpeq>
 800b52e:	2800      	cmp	r0, #0
 800b530:	d033      	beq.n	800b59a <_printf_float+0x266>
 800b532:	4a37      	ldr	r2, [pc, #220]	@ (800b610 <_printf_float+0x2dc>)
 800b534:	2301      	movs	r3, #1
 800b536:	4631      	mov	r1, r6
 800b538:	4628      	mov	r0, r5
 800b53a:	47b8      	blx	r7
 800b53c:	3001      	adds	r0, #1
 800b53e:	f43f af54 	beq.w	800b3ea <_printf_float+0xb6>
 800b542:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b546:	4543      	cmp	r3, r8
 800b548:	db02      	blt.n	800b550 <_printf_float+0x21c>
 800b54a:	6823      	ldr	r3, [r4, #0]
 800b54c:	07d8      	lsls	r0, r3, #31
 800b54e:	d50f      	bpl.n	800b570 <_printf_float+0x23c>
 800b550:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b554:	4631      	mov	r1, r6
 800b556:	4628      	mov	r0, r5
 800b558:	47b8      	blx	r7
 800b55a:	3001      	adds	r0, #1
 800b55c:	f43f af45 	beq.w	800b3ea <_printf_float+0xb6>
 800b560:	f04f 0900 	mov.w	r9, #0
 800b564:	f108 38ff 	add.w	r8, r8, #4294967295
 800b568:	f104 0a1a 	add.w	sl, r4, #26
 800b56c:	45c8      	cmp	r8, r9
 800b56e:	dc09      	bgt.n	800b584 <_printf_float+0x250>
 800b570:	6823      	ldr	r3, [r4, #0]
 800b572:	079b      	lsls	r3, r3, #30
 800b574:	f100 8103 	bmi.w	800b77e <_printf_float+0x44a>
 800b578:	68e0      	ldr	r0, [r4, #12]
 800b57a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b57c:	4298      	cmp	r0, r3
 800b57e:	bfb8      	it	lt
 800b580:	4618      	movlt	r0, r3
 800b582:	e734      	b.n	800b3ee <_printf_float+0xba>
 800b584:	2301      	movs	r3, #1
 800b586:	4652      	mov	r2, sl
 800b588:	4631      	mov	r1, r6
 800b58a:	4628      	mov	r0, r5
 800b58c:	47b8      	blx	r7
 800b58e:	3001      	adds	r0, #1
 800b590:	f43f af2b 	beq.w	800b3ea <_printf_float+0xb6>
 800b594:	f109 0901 	add.w	r9, r9, #1
 800b598:	e7e8      	b.n	800b56c <_printf_float+0x238>
 800b59a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	dc39      	bgt.n	800b614 <_printf_float+0x2e0>
 800b5a0:	4a1b      	ldr	r2, [pc, #108]	@ (800b610 <_printf_float+0x2dc>)
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	4631      	mov	r1, r6
 800b5a6:	4628      	mov	r0, r5
 800b5a8:	47b8      	blx	r7
 800b5aa:	3001      	adds	r0, #1
 800b5ac:	f43f af1d 	beq.w	800b3ea <_printf_float+0xb6>
 800b5b0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b5b4:	ea59 0303 	orrs.w	r3, r9, r3
 800b5b8:	d102      	bne.n	800b5c0 <_printf_float+0x28c>
 800b5ba:	6823      	ldr	r3, [r4, #0]
 800b5bc:	07d9      	lsls	r1, r3, #31
 800b5be:	d5d7      	bpl.n	800b570 <_printf_float+0x23c>
 800b5c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5c4:	4631      	mov	r1, r6
 800b5c6:	4628      	mov	r0, r5
 800b5c8:	47b8      	blx	r7
 800b5ca:	3001      	adds	r0, #1
 800b5cc:	f43f af0d 	beq.w	800b3ea <_printf_float+0xb6>
 800b5d0:	f04f 0a00 	mov.w	sl, #0
 800b5d4:	f104 0b1a 	add.w	fp, r4, #26
 800b5d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5da:	425b      	negs	r3, r3
 800b5dc:	4553      	cmp	r3, sl
 800b5de:	dc01      	bgt.n	800b5e4 <_printf_float+0x2b0>
 800b5e0:	464b      	mov	r3, r9
 800b5e2:	e793      	b.n	800b50c <_printf_float+0x1d8>
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	465a      	mov	r2, fp
 800b5e8:	4631      	mov	r1, r6
 800b5ea:	4628      	mov	r0, r5
 800b5ec:	47b8      	blx	r7
 800b5ee:	3001      	adds	r0, #1
 800b5f0:	f43f aefb 	beq.w	800b3ea <_printf_float+0xb6>
 800b5f4:	f10a 0a01 	add.w	sl, sl, #1
 800b5f8:	e7ee      	b.n	800b5d8 <_printf_float+0x2a4>
 800b5fa:	bf00      	nop
 800b5fc:	7fefffff 	.word	0x7fefffff
 800b600:	08010578 	.word	0x08010578
 800b604:	0801057c 	.word	0x0801057c
 800b608:	08010580 	.word	0x08010580
 800b60c:	08010584 	.word	0x08010584
 800b610:	08010928 	.word	0x08010928
 800b614:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b616:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b61a:	4553      	cmp	r3, sl
 800b61c:	bfa8      	it	ge
 800b61e:	4653      	movge	r3, sl
 800b620:	2b00      	cmp	r3, #0
 800b622:	4699      	mov	r9, r3
 800b624:	dc36      	bgt.n	800b694 <_printf_float+0x360>
 800b626:	f04f 0b00 	mov.w	fp, #0
 800b62a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b62e:	f104 021a 	add.w	r2, r4, #26
 800b632:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b634:	9306      	str	r3, [sp, #24]
 800b636:	eba3 0309 	sub.w	r3, r3, r9
 800b63a:	455b      	cmp	r3, fp
 800b63c:	dc31      	bgt.n	800b6a2 <_printf_float+0x36e>
 800b63e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b640:	459a      	cmp	sl, r3
 800b642:	dc3a      	bgt.n	800b6ba <_printf_float+0x386>
 800b644:	6823      	ldr	r3, [r4, #0]
 800b646:	07da      	lsls	r2, r3, #31
 800b648:	d437      	bmi.n	800b6ba <_printf_float+0x386>
 800b64a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b64c:	ebaa 0903 	sub.w	r9, sl, r3
 800b650:	9b06      	ldr	r3, [sp, #24]
 800b652:	ebaa 0303 	sub.w	r3, sl, r3
 800b656:	4599      	cmp	r9, r3
 800b658:	bfa8      	it	ge
 800b65a:	4699      	movge	r9, r3
 800b65c:	f1b9 0f00 	cmp.w	r9, #0
 800b660:	dc33      	bgt.n	800b6ca <_printf_float+0x396>
 800b662:	f04f 0800 	mov.w	r8, #0
 800b666:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b66a:	f104 0b1a 	add.w	fp, r4, #26
 800b66e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b670:	ebaa 0303 	sub.w	r3, sl, r3
 800b674:	eba3 0309 	sub.w	r3, r3, r9
 800b678:	4543      	cmp	r3, r8
 800b67a:	f77f af79 	ble.w	800b570 <_printf_float+0x23c>
 800b67e:	2301      	movs	r3, #1
 800b680:	465a      	mov	r2, fp
 800b682:	4631      	mov	r1, r6
 800b684:	4628      	mov	r0, r5
 800b686:	47b8      	blx	r7
 800b688:	3001      	adds	r0, #1
 800b68a:	f43f aeae 	beq.w	800b3ea <_printf_float+0xb6>
 800b68e:	f108 0801 	add.w	r8, r8, #1
 800b692:	e7ec      	b.n	800b66e <_printf_float+0x33a>
 800b694:	4642      	mov	r2, r8
 800b696:	4631      	mov	r1, r6
 800b698:	4628      	mov	r0, r5
 800b69a:	47b8      	blx	r7
 800b69c:	3001      	adds	r0, #1
 800b69e:	d1c2      	bne.n	800b626 <_printf_float+0x2f2>
 800b6a0:	e6a3      	b.n	800b3ea <_printf_float+0xb6>
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	4631      	mov	r1, r6
 800b6a6:	4628      	mov	r0, r5
 800b6a8:	9206      	str	r2, [sp, #24]
 800b6aa:	47b8      	blx	r7
 800b6ac:	3001      	adds	r0, #1
 800b6ae:	f43f ae9c 	beq.w	800b3ea <_printf_float+0xb6>
 800b6b2:	9a06      	ldr	r2, [sp, #24]
 800b6b4:	f10b 0b01 	add.w	fp, fp, #1
 800b6b8:	e7bb      	b.n	800b632 <_printf_float+0x2fe>
 800b6ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6be:	4631      	mov	r1, r6
 800b6c0:	4628      	mov	r0, r5
 800b6c2:	47b8      	blx	r7
 800b6c4:	3001      	adds	r0, #1
 800b6c6:	d1c0      	bne.n	800b64a <_printf_float+0x316>
 800b6c8:	e68f      	b.n	800b3ea <_printf_float+0xb6>
 800b6ca:	9a06      	ldr	r2, [sp, #24]
 800b6cc:	464b      	mov	r3, r9
 800b6ce:	4442      	add	r2, r8
 800b6d0:	4631      	mov	r1, r6
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	47b8      	blx	r7
 800b6d6:	3001      	adds	r0, #1
 800b6d8:	d1c3      	bne.n	800b662 <_printf_float+0x32e>
 800b6da:	e686      	b.n	800b3ea <_printf_float+0xb6>
 800b6dc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b6e0:	f1ba 0f01 	cmp.w	sl, #1
 800b6e4:	dc01      	bgt.n	800b6ea <_printf_float+0x3b6>
 800b6e6:	07db      	lsls	r3, r3, #31
 800b6e8:	d536      	bpl.n	800b758 <_printf_float+0x424>
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	4642      	mov	r2, r8
 800b6ee:	4631      	mov	r1, r6
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	47b8      	blx	r7
 800b6f4:	3001      	adds	r0, #1
 800b6f6:	f43f ae78 	beq.w	800b3ea <_printf_float+0xb6>
 800b6fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6fe:	4631      	mov	r1, r6
 800b700:	4628      	mov	r0, r5
 800b702:	47b8      	blx	r7
 800b704:	3001      	adds	r0, #1
 800b706:	f43f ae70 	beq.w	800b3ea <_printf_float+0xb6>
 800b70a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b70e:	2200      	movs	r2, #0
 800b710:	2300      	movs	r3, #0
 800b712:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b716:	f7f5 f9df 	bl	8000ad8 <__aeabi_dcmpeq>
 800b71a:	b9c0      	cbnz	r0, 800b74e <_printf_float+0x41a>
 800b71c:	4653      	mov	r3, sl
 800b71e:	f108 0201 	add.w	r2, r8, #1
 800b722:	4631      	mov	r1, r6
 800b724:	4628      	mov	r0, r5
 800b726:	47b8      	blx	r7
 800b728:	3001      	adds	r0, #1
 800b72a:	d10c      	bne.n	800b746 <_printf_float+0x412>
 800b72c:	e65d      	b.n	800b3ea <_printf_float+0xb6>
 800b72e:	2301      	movs	r3, #1
 800b730:	465a      	mov	r2, fp
 800b732:	4631      	mov	r1, r6
 800b734:	4628      	mov	r0, r5
 800b736:	47b8      	blx	r7
 800b738:	3001      	adds	r0, #1
 800b73a:	f43f ae56 	beq.w	800b3ea <_printf_float+0xb6>
 800b73e:	f108 0801 	add.w	r8, r8, #1
 800b742:	45d0      	cmp	r8, sl
 800b744:	dbf3      	blt.n	800b72e <_printf_float+0x3fa>
 800b746:	464b      	mov	r3, r9
 800b748:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b74c:	e6df      	b.n	800b50e <_printf_float+0x1da>
 800b74e:	f04f 0800 	mov.w	r8, #0
 800b752:	f104 0b1a 	add.w	fp, r4, #26
 800b756:	e7f4      	b.n	800b742 <_printf_float+0x40e>
 800b758:	2301      	movs	r3, #1
 800b75a:	4642      	mov	r2, r8
 800b75c:	e7e1      	b.n	800b722 <_printf_float+0x3ee>
 800b75e:	2301      	movs	r3, #1
 800b760:	464a      	mov	r2, r9
 800b762:	4631      	mov	r1, r6
 800b764:	4628      	mov	r0, r5
 800b766:	47b8      	blx	r7
 800b768:	3001      	adds	r0, #1
 800b76a:	f43f ae3e 	beq.w	800b3ea <_printf_float+0xb6>
 800b76e:	f108 0801 	add.w	r8, r8, #1
 800b772:	68e3      	ldr	r3, [r4, #12]
 800b774:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b776:	1a5b      	subs	r3, r3, r1
 800b778:	4543      	cmp	r3, r8
 800b77a:	dcf0      	bgt.n	800b75e <_printf_float+0x42a>
 800b77c:	e6fc      	b.n	800b578 <_printf_float+0x244>
 800b77e:	f04f 0800 	mov.w	r8, #0
 800b782:	f104 0919 	add.w	r9, r4, #25
 800b786:	e7f4      	b.n	800b772 <_printf_float+0x43e>

0800b788 <_printf_common>:
 800b788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b78c:	4616      	mov	r6, r2
 800b78e:	4698      	mov	r8, r3
 800b790:	688a      	ldr	r2, [r1, #8]
 800b792:	690b      	ldr	r3, [r1, #16]
 800b794:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b798:	4293      	cmp	r3, r2
 800b79a:	bfb8      	it	lt
 800b79c:	4613      	movlt	r3, r2
 800b79e:	6033      	str	r3, [r6, #0]
 800b7a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b7a4:	4607      	mov	r7, r0
 800b7a6:	460c      	mov	r4, r1
 800b7a8:	b10a      	cbz	r2, 800b7ae <_printf_common+0x26>
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	6033      	str	r3, [r6, #0]
 800b7ae:	6823      	ldr	r3, [r4, #0]
 800b7b0:	0699      	lsls	r1, r3, #26
 800b7b2:	bf42      	ittt	mi
 800b7b4:	6833      	ldrmi	r3, [r6, #0]
 800b7b6:	3302      	addmi	r3, #2
 800b7b8:	6033      	strmi	r3, [r6, #0]
 800b7ba:	6825      	ldr	r5, [r4, #0]
 800b7bc:	f015 0506 	ands.w	r5, r5, #6
 800b7c0:	d106      	bne.n	800b7d0 <_printf_common+0x48>
 800b7c2:	f104 0a19 	add.w	sl, r4, #25
 800b7c6:	68e3      	ldr	r3, [r4, #12]
 800b7c8:	6832      	ldr	r2, [r6, #0]
 800b7ca:	1a9b      	subs	r3, r3, r2
 800b7cc:	42ab      	cmp	r3, r5
 800b7ce:	dc26      	bgt.n	800b81e <_printf_common+0x96>
 800b7d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b7d4:	6822      	ldr	r2, [r4, #0]
 800b7d6:	3b00      	subs	r3, #0
 800b7d8:	bf18      	it	ne
 800b7da:	2301      	movne	r3, #1
 800b7dc:	0692      	lsls	r2, r2, #26
 800b7de:	d42b      	bmi.n	800b838 <_printf_common+0xb0>
 800b7e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b7e4:	4641      	mov	r1, r8
 800b7e6:	4638      	mov	r0, r7
 800b7e8:	47c8      	blx	r9
 800b7ea:	3001      	adds	r0, #1
 800b7ec:	d01e      	beq.n	800b82c <_printf_common+0xa4>
 800b7ee:	6823      	ldr	r3, [r4, #0]
 800b7f0:	6922      	ldr	r2, [r4, #16]
 800b7f2:	f003 0306 	and.w	r3, r3, #6
 800b7f6:	2b04      	cmp	r3, #4
 800b7f8:	bf02      	ittt	eq
 800b7fa:	68e5      	ldreq	r5, [r4, #12]
 800b7fc:	6833      	ldreq	r3, [r6, #0]
 800b7fe:	1aed      	subeq	r5, r5, r3
 800b800:	68a3      	ldr	r3, [r4, #8]
 800b802:	bf0c      	ite	eq
 800b804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b808:	2500      	movne	r5, #0
 800b80a:	4293      	cmp	r3, r2
 800b80c:	bfc4      	itt	gt
 800b80e:	1a9b      	subgt	r3, r3, r2
 800b810:	18ed      	addgt	r5, r5, r3
 800b812:	2600      	movs	r6, #0
 800b814:	341a      	adds	r4, #26
 800b816:	42b5      	cmp	r5, r6
 800b818:	d11a      	bne.n	800b850 <_printf_common+0xc8>
 800b81a:	2000      	movs	r0, #0
 800b81c:	e008      	b.n	800b830 <_printf_common+0xa8>
 800b81e:	2301      	movs	r3, #1
 800b820:	4652      	mov	r2, sl
 800b822:	4641      	mov	r1, r8
 800b824:	4638      	mov	r0, r7
 800b826:	47c8      	blx	r9
 800b828:	3001      	adds	r0, #1
 800b82a:	d103      	bne.n	800b834 <_printf_common+0xac>
 800b82c:	f04f 30ff 	mov.w	r0, #4294967295
 800b830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b834:	3501      	adds	r5, #1
 800b836:	e7c6      	b.n	800b7c6 <_printf_common+0x3e>
 800b838:	18e1      	adds	r1, r4, r3
 800b83a:	1c5a      	adds	r2, r3, #1
 800b83c:	2030      	movs	r0, #48	@ 0x30
 800b83e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b842:	4422      	add	r2, r4
 800b844:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b848:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b84c:	3302      	adds	r3, #2
 800b84e:	e7c7      	b.n	800b7e0 <_printf_common+0x58>
 800b850:	2301      	movs	r3, #1
 800b852:	4622      	mov	r2, r4
 800b854:	4641      	mov	r1, r8
 800b856:	4638      	mov	r0, r7
 800b858:	47c8      	blx	r9
 800b85a:	3001      	adds	r0, #1
 800b85c:	d0e6      	beq.n	800b82c <_printf_common+0xa4>
 800b85e:	3601      	adds	r6, #1
 800b860:	e7d9      	b.n	800b816 <_printf_common+0x8e>
	...

0800b864 <_printf_i>:
 800b864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b868:	7e0f      	ldrb	r7, [r1, #24]
 800b86a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b86c:	2f78      	cmp	r7, #120	@ 0x78
 800b86e:	4691      	mov	r9, r2
 800b870:	4680      	mov	r8, r0
 800b872:	460c      	mov	r4, r1
 800b874:	469a      	mov	sl, r3
 800b876:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b87a:	d807      	bhi.n	800b88c <_printf_i+0x28>
 800b87c:	2f62      	cmp	r7, #98	@ 0x62
 800b87e:	d80a      	bhi.n	800b896 <_printf_i+0x32>
 800b880:	2f00      	cmp	r7, #0
 800b882:	f000 80d2 	beq.w	800ba2a <_printf_i+0x1c6>
 800b886:	2f58      	cmp	r7, #88	@ 0x58
 800b888:	f000 80b9 	beq.w	800b9fe <_printf_i+0x19a>
 800b88c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b890:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b894:	e03a      	b.n	800b90c <_printf_i+0xa8>
 800b896:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b89a:	2b15      	cmp	r3, #21
 800b89c:	d8f6      	bhi.n	800b88c <_printf_i+0x28>
 800b89e:	a101      	add	r1, pc, #4	@ (adr r1, 800b8a4 <_printf_i+0x40>)
 800b8a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b8a4:	0800b8fd 	.word	0x0800b8fd
 800b8a8:	0800b911 	.word	0x0800b911
 800b8ac:	0800b88d 	.word	0x0800b88d
 800b8b0:	0800b88d 	.word	0x0800b88d
 800b8b4:	0800b88d 	.word	0x0800b88d
 800b8b8:	0800b88d 	.word	0x0800b88d
 800b8bc:	0800b911 	.word	0x0800b911
 800b8c0:	0800b88d 	.word	0x0800b88d
 800b8c4:	0800b88d 	.word	0x0800b88d
 800b8c8:	0800b88d 	.word	0x0800b88d
 800b8cc:	0800b88d 	.word	0x0800b88d
 800b8d0:	0800ba11 	.word	0x0800ba11
 800b8d4:	0800b93b 	.word	0x0800b93b
 800b8d8:	0800b9cb 	.word	0x0800b9cb
 800b8dc:	0800b88d 	.word	0x0800b88d
 800b8e0:	0800b88d 	.word	0x0800b88d
 800b8e4:	0800ba33 	.word	0x0800ba33
 800b8e8:	0800b88d 	.word	0x0800b88d
 800b8ec:	0800b93b 	.word	0x0800b93b
 800b8f0:	0800b88d 	.word	0x0800b88d
 800b8f4:	0800b88d 	.word	0x0800b88d
 800b8f8:	0800b9d3 	.word	0x0800b9d3
 800b8fc:	6833      	ldr	r3, [r6, #0]
 800b8fe:	1d1a      	adds	r2, r3, #4
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	6032      	str	r2, [r6, #0]
 800b904:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b908:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b90c:	2301      	movs	r3, #1
 800b90e:	e09d      	b.n	800ba4c <_printf_i+0x1e8>
 800b910:	6833      	ldr	r3, [r6, #0]
 800b912:	6820      	ldr	r0, [r4, #0]
 800b914:	1d19      	adds	r1, r3, #4
 800b916:	6031      	str	r1, [r6, #0]
 800b918:	0606      	lsls	r6, r0, #24
 800b91a:	d501      	bpl.n	800b920 <_printf_i+0xbc>
 800b91c:	681d      	ldr	r5, [r3, #0]
 800b91e:	e003      	b.n	800b928 <_printf_i+0xc4>
 800b920:	0645      	lsls	r5, r0, #25
 800b922:	d5fb      	bpl.n	800b91c <_printf_i+0xb8>
 800b924:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b928:	2d00      	cmp	r5, #0
 800b92a:	da03      	bge.n	800b934 <_printf_i+0xd0>
 800b92c:	232d      	movs	r3, #45	@ 0x2d
 800b92e:	426d      	negs	r5, r5
 800b930:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b934:	4859      	ldr	r0, [pc, #356]	@ (800ba9c <_printf_i+0x238>)
 800b936:	230a      	movs	r3, #10
 800b938:	e011      	b.n	800b95e <_printf_i+0xfa>
 800b93a:	6821      	ldr	r1, [r4, #0]
 800b93c:	6833      	ldr	r3, [r6, #0]
 800b93e:	0608      	lsls	r0, r1, #24
 800b940:	f853 5b04 	ldr.w	r5, [r3], #4
 800b944:	d402      	bmi.n	800b94c <_printf_i+0xe8>
 800b946:	0649      	lsls	r1, r1, #25
 800b948:	bf48      	it	mi
 800b94a:	b2ad      	uxthmi	r5, r5
 800b94c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b94e:	4853      	ldr	r0, [pc, #332]	@ (800ba9c <_printf_i+0x238>)
 800b950:	6033      	str	r3, [r6, #0]
 800b952:	bf14      	ite	ne
 800b954:	230a      	movne	r3, #10
 800b956:	2308      	moveq	r3, #8
 800b958:	2100      	movs	r1, #0
 800b95a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b95e:	6866      	ldr	r6, [r4, #4]
 800b960:	60a6      	str	r6, [r4, #8]
 800b962:	2e00      	cmp	r6, #0
 800b964:	bfa2      	ittt	ge
 800b966:	6821      	ldrge	r1, [r4, #0]
 800b968:	f021 0104 	bicge.w	r1, r1, #4
 800b96c:	6021      	strge	r1, [r4, #0]
 800b96e:	b90d      	cbnz	r5, 800b974 <_printf_i+0x110>
 800b970:	2e00      	cmp	r6, #0
 800b972:	d04b      	beq.n	800ba0c <_printf_i+0x1a8>
 800b974:	4616      	mov	r6, r2
 800b976:	fbb5 f1f3 	udiv	r1, r5, r3
 800b97a:	fb03 5711 	mls	r7, r3, r1, r5
 800b97e:	5dc7      	ldrb	r7, [r0, r7]
 800b980:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b984:	462f      	mov	r7, r5
 800b986:	42bb      	cmp	r3, r7
 800b988:	460d      	mov	r5, r1
 800b98a:	d9f4      	bls.n	800b976 <_printf_i+0x112>
 800b98c:	2b08      	cmp	r3, #8
 800b98e:	d10b      	bne.n	800b9a8 <_printf_i+0x144>
 800b990:	6823      	ldr	r3, [r4, #0]
 800b992:	07df      	lsls	r7, r3, #31
 800b994:	d508      	bpl.n	800b9a8 <_printf_i+0x144>
 800b996:	6923      	ldr	r3, [r4, #16]
 800b998:	6861      	ldr	r1, [r4, #4]
 800b99a:	4299      	cmp	r1, r3
 800b99c:	bfde      	ittt	le
 800b99e:	2330      	movle	r3, #48	@ 0x30
 800b9a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b9a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b9a8:	1b92      	subs	r2, r2, r6
 800b9aa:	6122      	str	r2, [r4, #16]
 800b9ac:	f8cd a000 	str.w	sl, [sp]
 800b9b0:	464b      	mov	r3, r9
 800b9b2:	aa03      	add	r2, sp, #12
 800b9b4:	4621      	mov	r1, r4
 800b9b6:	4640      	mov	r0, r8
 800b9b8:	f7ff fee6 	bl	800b788 <_printf_common>
 800b9bc:	3001      	adds	r0, #1
 800b9be:	d14a      	bne.n	800ba56 <_printf_i+0x1f2>
 800b9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c4:	b004      	add	sp, #16
 800b9c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9ca:	6823      	ldr	r3, [r4, #0]
 800b9cc:	f043 0320 	orr.w	r3, r3, #32
 800b9d0:	6023      	str	r3, [r4, #0]
 800b9d2:	4833      	ldr	r0, [pc, #204]	@ (800baa0 <_printf_i+0x23c>)
 800b9d4:	2778      	movs	r7, #120	@ 0x78
 800b9d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b9da:	6823      	ldr	r3, [r4, #0]
 800b9dc:	6831      	ldr	r1, [r6, #0]
 800b9de:	061f      	lsls	r7, r3, #24
 800b9e0:	f851 5b04 	ldr.w	r5, [r1], #4
 800b9e4:	d402      	bmi.n	800b9ec <_printf_i+0x188>
 800b9e6:	065f      	lsls	r7, r3, #25
 800b9e8:	bf48      	it	mi
 800b9ea:	b2ad      	uxthmi	r5, r5
 800b9ec:	6031      	str	r1, [r6, #0]
 800b9ee:	07d9      	lsls	r1, r3, #31
 800b9f0:	bf44      	itt	mi
 800b9f2:	f043 0320 	orrmi.w	r3, r3, #32
 800b9f6:	6023      	strmi	r3, [r4, #0]
 800b9f8:	b11d      	cbz	r5, 800ba02 <_printf_i+0x19e>
 800b9fa:	2310      	movs	r3, #16
 800b9fc:	e7ac      	b.n	800b958 <_printf_i+0xf4>
 800b9fe:	4827      	ldr	r0, [pc, #156]	@ (800ba9c <_printf_i+0x238>)
 800ba00:	e7e9      	b.n	800b9d6 <_printf_i+0x172>
 800ba02:	6823      	ldr	r3, [r4, #0]
 800ba04:	f023 0320 	bic.w	r3, r3, #32
 800ba08:	6023      	str	r3, [r4, #0]
 800ba0a:	e7f6      	b.n	800b9fa <_printf_i+0x196>
 800ba0c:	4616      	mov	r6, r2
 800ba0e:	e7bd      	b.n	800b98c <_printf_i+0x128>
 800ba10:	6833      	ldr	r3, [r6, #0]
 800ba12:	6825      	ldr	r5, [r4, #0]
 800ba14:	6961      	ldr	r1, [r4, #20]
 800ba16:	1d18      	adds	r0, r3, #4
 800ba18:	6030      	str	r0, [r6, #0]
 800ba1a:	062e      	lsls	r6, r5, #24
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	d501      	bpl.n	800ba24 <_printf_i+0x1c0>
 800ba20:	6019      	str	r1, [r3, #0]
 800ba22:	e002      	b.n	800ba2a <_printf_i+0x1c6>
 800ba24:	0668      	lsls	r0, r5, #25
 800ba26:	d5fb      	bpl.n	800ba20 <_printf_i+0x1bc>
 800ba28:	8019      	strh	r1, [r3, #0]
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	6123      	str	r3, [r4, #16]
 800ba2e:	4616      	mov	r6, r2
 800ba30:	e7bc      	b.n	800b9ac <_printf_i+0x148>
 800ba32:	6833      	ldr	r3, [r6, #0]
 800ba34:	1d1a      	adds	r2, r3, #4
 800ba36:	6032      	str	r2, [r6, #0]
 800ba38:	681e      	ldr	r6, [r3, #0]
 800ba3a:	6862      	ldr	r2, [r4, #4]
 800ba3c:	2100      	movs	r1, #0
 800ba3e:	4630      	mov	r0, r6
 800ba40:	f7f4 fbce 	bl	80001e0 <memchr>
 800ba44:	b108      	cbz	r0, 800ba4a <_printf_i+0x1e6>
 800ba46:	1b80      	subs	r0, r0, r6
 800ba48:	6060      	str	r0, [r4, #4]
 800ba4a:	6863      	ldr	r3, [r4, #4]
 800ba4c:	6123      	str	r3, [r4, #16]
 800ba4e:	2300      	movs	r3, #0
 800ba50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba54:	e7aa      	b.n	800b9ac <_printf_i+0x148>
 800ba56:	6923      	ldr	r3, [r4, #16]
 800ba58:	4632      	mov	r2, r6
 800ba5a:	4649      	mov	r1, r9
 800ba5c:	4640      	mov	r0, r8
 800ba5e:	47d0      	blx	sl
 800ba60:	3001      	adds	r0, #1
 800ba62:	d0ad      	beq.n	800b9c0 <_printf_i+0x15c>
 800ba64:	6823      	ldr	r3, [r4, #0]
 800ba66:	079b      	lsls	r3, r3, #30
 800ba68:	d413      	bmi.n	800ba92 <_printf_i+0x22e>
 800ba6a:	68e0      	ldr	r0, [r4, #12]
 800ba6c:	9b03      	ldr	r3, [sp, #12]
 800ba6e:	4298      	cmp	r0, r3
 800ba70:	bfb8      	it	lt
 800ba72:	4618      	movlt	r0, r3
 800ba74:	e7a6      	b.n	800b9c4 <_printf_i+0x160>
 800ba76:	2301      	movs	r3, #1
 800ba78:	4632      	mov	r2, r6
 800ba7a:	4649      	mov	r1, r9
 800ba7c:	4640      	mov	r0, r8
 800ba7e:	47d0      	blx	sl
 800ba80:	3001      	adds	r0, #1
 800ba82:	d09d      	beq.n	800b9c0 <_printf_i+0x15c>
 800ba84:	3501      	adds	r5, #1
 800ba86:	68e3      	ldr	r3, [r4, #12]
 800ba88:	9903      	ldr	r1, [sp, #12]
 800ba8a:	1a5b      	subs	r3, r3, r1
 800ba8c:	42ab      	cmp	r3, r5
 800ba8e:	dcf2      	bgt.n	800ba76 <_printf_i+0x212>
 800ba90:	e7eb      	b.n	800ba6a <_printf_i+0x206>
 800ba92:	2500      	movs	r5, #0
 800ba94:	f104 0619 	add.w	r6, r4, #25
 800ba98:	e7f5      	b.n	800ba86 <_printf_i+0x222>
 800ba9a:	bf00      	nop
 800ba9c:	08010588 	.word	0x08010588
 800baa0:	08010599 	.word	0x08010599

0800baa4 <_scanf_float>:
 800baa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa8:	b087      	sub	sp, #28
 800baaa:	4617      	mov	r7, r2
 800baac:	9303      	str	r3, [sp, #12]
 800baae:	688b      	ldr	r3, [r1, #8]
 800bab0:	1e5a      	subs	r2, r3, #1
 800bab2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800bab6:	bf81      	itttt	hi
 800bab8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800babc:	eb03 0b05 	addhi.w	fp, r3, r5
 800bac0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800bac4:	608b      	strhi	r3, [r1, #8]
 800bac6:	680b      	ldr	r3, [r1, #0]
 800bac8:	460a      	mov	r2, r1
 800baca:	f04f 0500 	mov.w	r5, #0
 800bace:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800bad2:	f842 3b1c 	str.w	r3, [r2], #28
 800bad6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bada:	4680      	mov	r8, r0
 800badc:	460c      	mov	r4, r1
 800bade:	bf98      	it	ls
 800bae0:	f04f 0b00 	movls.w	fp, #0
 800bae4:	9201      	str	r2, [sp, #4]
 800bae6:	4616      	mov	r6, r2
 800bae8:	46aa      	mov	sl, r5
 800baea:	46a9      	mov	r9, r5
 800baec:	9502      	str	r5, [sp, #8]
 800baee:	68a2      	ldr	r2, [r4, #8]
 800baf0:	b152      	cbz	r2, 800bb08 <_scanf_float+0x64>
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	2b4e      	cmp	r3, #78	@ 0x4e
 800baf8:	d864      	bhi.n	800bbc4 <_scanf_float+0x120>
 800bafa:	2b40      	cmp	r3, #64	@ 0x40
 800bafc:	d83c      	bhi.n	800bb78 <_scanf_float+0xd4>
 800bafe:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800bb02:	b2c8      	uxtb	r0, r1
 800bb04:	280e      	cmp	r0, #14
 800bb06:	d93a      	bls.n	800bb7e <_scanf_float+0xda>
 800bb08:	f1b9 0f00 	cmp.w	r9, #0
 800bb0c:	d003      	beq.n	800bb16 <_scanf_float+0x72>
 800bb0e:	6823      	ldr	r3, [r4, #0]
 800bb10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bb14:	6023      	str	r3, [r4, #0]
 800bb16:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bb1a:	f1ba 0f01 	cmp.w	sl, #1
 800bb1e:	f200 8117 	bhi.w	800bd50 <_scanf_float+0x2ac>
 800bb22:	9b01      	ldr	r3, [sp, #4]
 800bb24:	429e      	cmp	r6, r3
 800bb26:	f200 8108 	bhi.w	800bd3a <_scanf_float+0x296>
 800bb2a:	2001      	movs	r0, #1
 800bb2c:	b007      	add	sp, #28
 800bb2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb32:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800bb36:	2a0d      	cmp	r2, #13
 800bb38:	d8e6      	bhi.n	800bb08 <_scanf_float+0x64>
 800bb3a:	a101      	add	r1, pc, #4	@ (adr r1, 800bb40 <_scanf_float+0x9c>)
 800bb3c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bb40:	0800bc87 	.word	0x0800bc87
 800bb44:	0800bb09 	.word	0x0800bb09
 800bb48:	0800bb09 	.word	0x0800bb09
 800bb4c:	0800bb09 	.word	0x0800bb09
 800bb50:	0800bce7 	.word	0x0800bce7
 800bb54:	0800bcbf 	.word	0x0800bcbf
 800bb58:	0800bb09 	.word	0x0800bb09
 800bb5c:	0800bb09 	.word	0x0800bb09
 800bb60:	0800bc95 	.word	0x0800bc95
 800bb64:	0800bb09 	.word	0x0800bb09
 800bb68:	0800bb09 	.word	0x0800bb09
 800bb6c:	0800bb09 	.word	0x0800bb09
 800bb70:	0800bb09 	.word	0x0800bb09
 800bb74:	0800bc4d 	.word	0x0800bc4d
 800bb78:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800bb7c:	e7db      	b.n	800bb36 <_scanf_float+0x92>
 800bb7e:	290e      	cmp	r1, #14
 800bb80:	d8c2      	bhi.n	800bb08 <_scanf_float+0x64>
 800bb82:	a001      	add	r0, pc, #4	@ (adr r0, 800bb88 <_scanf_float+0xe4>)
 800bb84:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bb88:	0800bc3d 	.word	0x0800bc3d
 800bb8c:	0800bb09 	.word	0x0800bb09
 800bb90:	0800bc3d 	.word	0x0800bc3d
 800bb94:	0800bcd3 	.word	0x0800bcd3
 800bb98:	0800bb09 	.word	0x0800bb09
 800bb9c:	0800bbe5 	.word	0x0800bbe5
 800bba0:	0800bc23 	.word	0x0800bc23
 800bba4:	0800bc23 	.word	0x0800bc23
 800bba8:	0800bc23 	.word	0x0800bc23
 800bbac:	0800bc23 	.word	0x0800bc23
 800bbb0:	0800bc23 	.word	0x0800bc23
 800bbb4:	0800bc23 	.word	0x0800bc23
 800bbb8:	0800bc23 	.word	0x0800bc23
 800bbbc:	0800bc23 	.word	0x0800bc23
 800bbc0:	0800bc23 	.word	0x0800bc23
 800bbc4:	2b6e      	cmp	r3, #110	@ 0x6e
 800bbc6:	d809      	bhi.n	800bbdc <_scanf_float+0x138>
 800bbc8:	2b60      	cmp	r3, #96	@ 0x60
 800bbca:	d8b2      	bhi.n	800bb32 <_scanf_float+0x8e>
 800bbcc:	2b54      	cmp	r3, #84	@ 0x54
 800bbce:	d07b      	beq.n	800bcc8 <_scanf_float+0x224>
 800bbd0:	2b59      	cmp	r3, #89	@ 0x59
 800bbd2:	d199      	bne.n	800bb08 <_scanf_float+0x64>
 800bbd4:	2d07      	cmp	r5, #7
 800bbd6:	d197      	bne.n	800bb08 <_scanf_float+0x64>
 800bbd8:	2508      	movs	r5, #8
 800bbda:	e02c      	b.n	800bc36 <_scanf_float+0x192>
 800bbdc:	2b74      	cmp	r3, #116	@ 0x74
 800bbde:	d073      	beq.n	800bcc8 <_scanf_float+0x224>
 800bbe0:	2b79      	cmp	r3, #121	@ 0x79
 800bbe2:	e7f6      	b.n	800bbd2 <_scanf_float+0x12e>
 800bbe4:	6821      	ldr	r1, [r4, #0]
 800bbe6:	05c8      	lsls	r0, r1, #23
 800bbe8:	d51b      	bpl.n	800bc22 <_scanf_float+0x17e>
 800bbea:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800bbee:	6021      	str	r1, [r4, #0]
 800bbf0:	f109 0901 	add.w	r9, r9, #1
 800bbf4:	f1bb 0f00 	cmp.w	fp, #0
 800bbf8:	d003      	beq.n	800bc02 <_scanf_float+0x15e>
 800bbfa:	3201      	adds	r2, #1
 800bbfc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bc00:	60a2      	str	r2, [r4, #8]
 800bc02:	68a3      	ldr	r3, [r4, #8]
 800bc04:	3b01      	subs	r3, #1
 800bc06:	60a3      	str	r3, [r4, #8]
 800bc08:	6923      	ldr	r3, [r4, #16]
 800bc0a:	3301      	adds	r3, #1
 800bc0c:	6123      	str	r3, [r4, #16]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	3b01      	subs	r3, #1
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	607b      	str	r3, [r7, #4]
 800bc16:	f340 8087 	ble.w	800bd28 <_scanf_float+0x284>
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	603b      	str	r3, [r7, #0]
 800bc20:	e765      	b.n	800baee <_scanf_float+0x4a>
 800bc22:	eb1a 0105 	adds.w	r1, sl, r5
 800bc26:	f47f af6f 	bne.w	800bb08 <_scanf_float+0x64>
 800bc2a:	6822      	ldr	r2, [r4, #0]
 800bc2c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800bc30:	6022      	str	r2, [r4, #0]
 800bc32:	460d      	mov	r5, r1
 800bc34:	468a      	mov	sl, r1
 800bc36:	f806 3b01 	strb.w	r3, [r6], #1
 800bc3a:	e7e2      	b.n	800bc02 <_scanf_float+0x15e>
 800bc3c:	6822      	ldr	r2, [r4, #0]
 800bc3e:	0610      	lsls	r0, r2, #24
 800bc40:	f57f af62 	bpl.w	800bb08 <_scanf_float+0x64>
 800bc44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bc48:	6022      	str	r2, [r4, #0]
 800bc4a:	e7f4      	b.n	800bc36 <_scanf_float+0x192>
 800bc4c:	f1ba 0f00 	cmp.w	sl, #0
 800bc50:	d10e      	bne.n	800bc70 <_scanf_float+0x1cc>
 800bc52:	f1b9 0f00 	cmp.w	r9, #0
 800bc56:	d10e      	bne.n	800bc76 <_scanf_float+0x1d2>
 800bc58:	6822      	ldr	r2, [r4, #0]
 800bc5a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bc5e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bc62:	d108      	bne.n	800bc76 <_scanf_float+0x1d2>
 800bc64:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bc68:	6022      	str	r2, [r4, #0]
 800bc6a:	f04f 0a01 	mov.w	sl, #1
 800bc6e:	e7e2      	b.n	800bc36 <_scanf_float+0x192>
 800bc70:	f1ba 0f02 	cmp.w	sl, #2
 800bc74:	d055      	beq.n	800bd22 <_scanf_float+0x27e>
 800bc76:	2d01      	cmp	r5, #1
 800bc78:	d002      	beq.n	800bc80 <_scanf_float+0x1dc>
 800bc7a:	2d04      	cmp	r5, #4
 800bc7c:	f47f af44 	bne.w	800bb08 <_scanf_float+0x64>
 800bc80:	3501      	adds	r5, #1
 800bc82:	b2ed      	uxtb	r5, r5
 800bc84:	e7d7      	b.n	800bc36 <_scanf_float+0x192>
 800bc86:	f1ba 0f01 	cmp.w	sl, #1
 800bc8a:	f47f af3d 	bne.w	800bb08 <_scanf_float+0x64>
 800bc8e:	f04f 0a02 	mov.w	sl, #2
 800bc92:	e7d0      	b.n	800bc36 <_scanf_float+0x192>
 800bc94:	b97d      	cbnz	r5, 800bcb6 <_scanf_float+0x212>
 800bc96:	f1b9 0f00 	cmp.w	r9, #0
 800bc9a:	f47f af38 	bne.w	800bb0e <_scanf_float+0x6a>
 800bc9e:	6822      	ldr	r2, [r4, #0]
 800bca0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bca4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bca8:	f040 8108 	bne.w	800bebc <_scanf_float+0x418>
 800bcac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bcb0:	6022      	str	r2, [r4, #0]
 800bcb2:	2501      	movs	r5, #1
 800bcb4:	e7bf      	b.n	800bc36 <_scanf_float+0x192>
 800bcb6:	2d03      	cmp	r5, #3
 800bcb8:	d0e2      	beq.n	800bc80 <_scanf_float+0x1dc>
 800bcba:	2d05      	cmp	r5, #5
 800bcbc:	e7de      	b.n	800bc7c <_scanf_float+0x1d8>
 800bcbe:	2d02      	cmp	r5, #2
 800bcc0:	f47f af22 	bne.w	800bb08 <_scanf_float+0x64>
 800bcc4:	2503      	movs	r5, #3
 800bcc6:	e7b6      	b.n	800bc36 <_scanf_float+0x192>
 800bcc8:	2d06      	cmp	r5, #6
 800bcca:	f47f af1d 	bne.w	800bb08 <_scanf_float+0x64>
 800bcce:	2507      	movs	r5, #7
 800bcd0:	e7b1      	b.n	800bc36 <_scanf_float+0x192>
 800bcd2:	6822      	ldr	r2, [r4, #0]
 800bcd4:	0591      	lsls	r1, r2, #22
 800bcd6:	f57f af17 	bpl.w	800bb08 <_scanf_float+0x64>
 800bcda:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800bcde:	6022      	str	r2, [r4, #0]
 800bce0:	f8cd 9008 	str.w	r9, [sp, #8]
 800bce4:	e7a7      	b.n	800bc36 <_scanf_float+0x192>
 800bce6:	6822      	ldr	r2, [r4, #0]
 800bce8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800bcec:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800bcf0:	d006      	beq.n	800bd00 <_scanf_float+0x25c>
 800bcf2:	0550      	lsls	r0, r2, #21
 800bcf4:	f57f af08 	bpl.w	800bb08 <_scanf_float+0x64>
 800bcf8:	f1b9 0f00 	cmp.w	r9, #0
 800bcfc:	f000 80de 	beq.w	800bebc <_scanf_float+0x418>
 800bd00:	0591      	lsls	r1, r2, #22
 800bd02:	bf58      	it	pl
 800bd04:	9902      	ldrpl	r1, [sp, #8]
 800bd06:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bd0a:	bf58      	it	pl
 800bd0c:	eba9 0101 	subpl.w	r1, r9, r1
 800bd10:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800bd14:	bf58      	it	pl
 800bd16:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bd1a:	6022      	str	r2, [r4, #0]
 800bd1c:	f04f 0900 	mov.w	r9, #0
 800bd20:	e789      	b.n	800bc36 <_scanf_float+0x192>
 800bd22:	f04f 0a03 	mov.w	sl, #3
 800bd26:	e786      	b.n	800bc36 <_scanf_float+0x192>
 800bd28:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bd2c:	4639      	mov	r1, r7
 800bd2e:	4640      	mov	r0, r8
 800bd30:	4798      	blx	r3
 800bd32:	2800      	cmp	r0, #0
 800bd34:	f43f aedb 	beq.w	800baee <_scanf_float+0x4a>
 800bd38:	e6e6      	b.n	800bb08 <_scanf_float+0x64>
 800bd3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bd3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bd42:	463a      	mov	r2, r7
 800bd44:	4640      	mov	r0, r8
 800bd46:	4798      	blx	r3
 800bd48:	6923      	ldr	r3, [r4, #16]
 800bd4a:	3b01      	subs	r3, #1
 800bd4c:	6123      	str	r3, [r4, #16]
 800bd4e:	e6e8      	b.n	800bb22 <_scanf_float+0x7e>
 800bd50:	1e6b      	subs	r3, r5, #1
 800bd52:	2b06      	cmp	r3, #6
 800bd54:	d824      	bhi.n	800bda0 <_scanf_float+0x2fc>
 800bd56:	2d02      	cmp	r5, #2
 800bd58:	d836      	bhi.n	800bdc8 <_scanf_float+0x324>
 800bd5a:	9b01      	ldr	r3, [sp, #4]
 800bd5c:	429e      	cmp	r6, r3
 800bd5e:	f67f aee4 	bls.w	800bb2a <_scanf_float+0x86>
 800bd62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bd66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bd6a:	463a      	mov	r2, r7
 800bd6c:	4640      	mov	r0, r8
 800bd6e:	4798      	blx	r3
 800bd70:	6923      	ldr	r3, [r4, #16]
 800bd72:	3b01      	subs	r3, #1
 800bd74:	6123      	str	r3, [r4, #16]
 800bd76:	e7f0      	b.n	800bd5a <_scanf_float+0x2b6>
 800bd78:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bd7c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800bd80:	463a      	mov	r2, r7
 800bd82:	4640      	mov	r0, r8
 800bd84:	4798      	blx	r3
 800bd86:	6923      	ldr	r3, [r4, #16]
 800bd88:	3b01      	subs	r3, #1
 800bd8a:	6123      	str	r3, [r4, #16]
 800bd8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bd90:	fa5f fa8a 	uxtb.w	sl, sl
 800bd94:	f1ba 0f02 	cmp.w	sl, #2
 800bd98:	d1ee      	bne.n	800bd78 <_scanf_float+0x2d4>
 800bd9a:	3d03      	subs	r5, #3
 800bd9c:	b2ed      	uxtb	r5, r5
 800bd9e:	1b76      	subs	r6, r6, r5
 800bda0:	6823      	ldr	r3, [r4, #0]
 800bda2:	05da      	lsls	r2, r3, #23
 800bda4:	d530      	bpl.n	800be08 <_scanf_float+0x364>
 800bda6:	055b      	lsls	r3, r3, #21
 800bda8:	d511      	bpl.n	800bdce <_scanf_float+0x32a>
 800bdaa:	9b01      	ldr	r3, [sp, #4]
 800bdac:	429e      	cmp	r6, r3
 800bdae:	f67f aebc 	bls.w	800bb2a <_scanf_float+0x86>
 800bdb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bdb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bdba:	463a      	mov	r2, r7
 800bdbc:	4640      	mov	r0, r8
 800bdbe:	4798      	blx	r3
 800bdc0:	6923      	ldr	r3, [r4, #16]
 800bdc2:	3b01      	subs	r3, #1
 800bdc4:	6123      	str	r3, [r4, #16]
 800bdc6:	e7f0      	b.n	800bdaa <_scanf_float+0x306>
 800bdc8:	46aa      	mov	sl, r5
 800bdca:	46b3      	mov	fp, r6
 800bdcc:	e7de      	b.n	800bd8c <_scanf_float+0x2e8>
 800bdce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bdd2:	6923      	ldr	r3, [r4, #16]
 800bdd4:	2965      	cmp	r1, #101	@ 0x65
 800bdd6:	f103 33ff 	add.w	r3, r3, #4294967295
 800bdda:	f106 35ff 	add.w	r5, r6, #4294967295
 800bdde:	6123      	str	r3, [r4, #16]
 800bde0:	d00c      	beq.n	800bdfc <_scanf_float+0x358>
 800bde2:	2945      	cmp	r1, #69	@ 0x45
 800bde4:	d00a      	beq.n	800bdfc <_scanf_float+0x358>
 800bde6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bdea:	463a      	mov	r2, r7
 800bdec:	4640      	mov	r0, r8
 800bdee:	4798      	blx	r3
 800bdf0:	6923      	ldr	r3, [r4, #16]
 800bdf2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bdf6:	3b01      	subs	r3, #1
 800bdf8:	1eb5      	subs	r5, r6, #2
 800bdfa:	6123      	str	r3, [r4, #16]
 800bdfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800be00:	463a      	mov	r2, r7
 800be02:	4640      	mov	r0, r8
 800be04:	4798      	blx	r3
 800be06:	462e      	mov	r6, r5
 800be08:	6822      	ldr	r2, [r4, #0]
 800be0a:	f012 0210 	ands.w	r2, r2, #16
 800be0e:	d001      	beq.n	800be14 <_scanf_float+0x370>
 800be10:	2000      	movs	r0, #0
 800be12:	e68b      	b.n	800bb2c <_scanf_float+0x88>
 800be14:	7032      	strb	r2, [r6, #0]
 800be16:	6823      	ldr	r3, [r4, #0]
 800be18:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800be1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800be20:	d11c      	bne.n	800be5c <_scanf_float+0x3b8>
 800be22:	9b02      	ldr	r3, [sp, #8]
 800be24:	454b      	cmp	r3, r9
 800be26:	eba3 0209 	sub.w	r2, r3, r9
 800be2a:	d123      	bne.n	800be74 <_scanf_float+0x3d0>
 800be2c:	9901      	ldr	r1, [sp, #4]
 800be2e:	2200      	movs	r2, #0
 800be30:	4640      	mov	r0, r8
 800be32:	f7ff f9cd 	bl	800b1d0 <_strtod_r>
 800be36:	9b03      	ldr	r3, [sp, #12]
 800be38:	6821      	ldr	r1, [r4, #0]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f011 0f02 	tst.w	r1, #2
 800be40:	ec57 6b10 	vmov	r6, r7, d0
 800be44:	f103 0204 	add.w	r2, r3, #4
 800be48:	d01f      	beq.n	800be8a <_scanf_float+0x3e6>
 800be4a:	9903      	ldr	r1, [sp, #12]
 800be4c:	600a      	str	r2, [r1, #0]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	e9c3 6700 	strd	r6, r7, [r3]
 800be54:	68e3      	ldr	r3, [r4, #12]
 800be56:	3301      	adds	r3, #1
 800be58:	60e3      	str	r3, [r4, #12]
 800be5a:	e7d9      	b.n	800be10 <_scanf_float+0x36c>
 800be5c:	9b04      	ldr	r3, [sp, #16]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d0e4      	beq.n	800be2c <_scanf_float+0x388>
 800be62:	9905      	ldr	r1, [sp, #20]
 800be64:	230a      	movs	r3, #10
 800be66:	3101      	adds	r1, #1
 800be68:	4640      	mov	r0, r8
 800be6a:	f002 faa9 	bl	800e3c0 <_strtol_r>
 800be6e:	9b04      	ldr	r3, [sp, #16]
 800be70:	9e05      	ldr	r6, [sp, #20]
 800be72:	1ac2      	subs	r2, r0, r3
 800be74:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800be78:	429e      	cmp	r6, r3
 800be7a:	bf28      	it	cs
 800be7c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800be80:	4910      	ldr	r1, [pc, #64]	@ (800bec4 <_scanf_float+0x420>)
 800be82:	4630      	mov	r0, r6
 800be84:	f000 f8e4 	bl	800c050 <siprintf>
 800be88:	e7d0      	b.n	800be2c <_scanf_float+0x388>
 800be8a:	f011 0f04 	tst.w	r1, #4
 800be8e:	9903      	ldr	r1, [sp, #12]
 800be90:	600a      	str	r2, [r1, #0]
 800be92:	d1dc      	bne.n	800be4e <_scanf_float+0x3aa>
 800be94:	681d      	ldr	r5, [r3, #0]
 800be96:	4632      	mov	r2, r6
 800be98:	463b      	mov	r3, r7
 800be9a:	4630      	mov	r0, r6
 800be9c:	4639      	mov	r1, r7
 800be9e:	f7f4 fe4d 	bl	8000b3c <__aeabi_dcmpun>
 800bea2:	b128      	cbz	r0, 800beb0 <_scanf_float+0x40c>
 800bea4:	4808      	ldr	r0, [pc, #32]	@ (800bec8 <_scanf_float+0x424>)
 800bea6:	f000 fabf 	bl	800c428 <nanf>
 800beaa:	ed85 0a00 	vstr	s0, [r5]
 800beae:	e7d1      	b.n	800be54 <_scanf_float+0x3b0>
 800beb0:	4630      	mov	r0, r6
 800beb2:	4639      	mov	r1, r7
 800beb4:	f7f4 fea0 	bl	8000bf8 <__aeabi_d2f>
 800beb8:	6028      	str	r0, [r5, #0]
 800beba:	e7cb      	b.n	800be54 <_scanf_float+0x3b0>
 800bebc:	f04f 0900 	mov.w	r9, #0
 800bec0:	e629      	b.n	800bb16 <_scanf_float+0x72>
 800bec2:	bf00      	nop
 800bec4:	080105aa 	.word	0x080105aa
 800bec8:	08010968 	.word	0x08010968

0800becc <std>:
 800becc:	2300      	movs	r3, #0
 800bece:	b510      	push	{r4, lr}
 800bed0:	4604      	mov	r4, r0
 800bed2:	e9c0 3300 	strd	r3, r3, [r0]
 800bed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800beda:	6083      	str	r3, [r0, #8]
 800bedc:	8181      	strh	r1, [r0, #12]
 800bede:	6643      	str	r3, [r0, #100]	@ 0x64
 800bee0:	81c2      	strh	r2, [r0, #14]
 800bee2:	6183      	str	r3, [r0, #24]
 800bee4:	4619      	mov	r1, r3
 800bee6:	2208      	movs	r2, #8
 800bee8:	305c      	adds	r0, #92	@ 0x5c
 800beea:	f000 f9d5 	bl	800c298 <memset>
 800beee:	4b0d      	ldr	r3, [pc, #52]	@ (800bf24 <std+0x58>)
 800bef0:	6263      	str	r3, [r4, #36]	@ 0x24
 800bef2:	4b0d      	ldr	r3, [pc, #52]	@ (800bf28 <std+0x5c>)
 800bef4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bef6:	4b0d      	ldr	r3, [pc, #52]	@ (800bf2c <std+0x60>)
 800bef8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800befa:	4b0d      	ldr	r3, [pc, #52]	@ (800bf30 <std+0x64>)
 800befc:	6323      	str	r3, [r4, #48]	@ 0x30
 800befe:	4b0d      	ldr	r3, [pc, #52]	@ (800bf34 <std+0x68>)
 800bf00:	6224      	str	r4, [r4, #32]
 800bf02:	429c      	cmp	r4, r3
 800bf04:	d006      	beq.n	800bf14 <std+0x48>
 800bf06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bf0a:	4294      	cmp	r4, r2
 800bf0c:	d002      	beq.n	800bf14 <std+0x48>
 800bf0e:	33d0      	adds	r3, #208	@ 0xd0
 800bf10:	429c      	cmp	r4, r3
 800bf12:	d105      	bne.n	800bf20 <std+0x54>
 800bf14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bf18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf1c:	f000 ba6a 	b.w	800c3f4 <__retarget_lock_init_recursive>
 800bf20:	bd10      	pop	{r4, pc}
 800bf22:	bf00      	nop
 800bf24:	0800c0e5 	.word	0x0800c0e5
 800bf28:	0800c10b 	.word	0x0800c10b
 800bf2c:	0800c143 	.word	0x0800c143
 800bf30:	0800c167 	.word	0x0800c167
 800bf34:	20000a0c 	.word	0x20000a0c

0800bf38 <stdio_exit_handler>:
 800bf38:	4a02      	ldr	r2, [pc, #8]	@ (800bf44 <stdio_exit_handler+0xc>)
 800bf3a:	4903      	ldr	r1, [pc, #12]	@ (800bf48 <stdio_exit_handler+0x10>)
 800bf3c:	4803      	ldr	r0, [pc, #12]	@ (800bf4c <stdio_exit_handler+0x14>)
 800bf3e:	f000 b869 	b.w	800c014 <_fwalk_sglue>
 800bf42:	bf00      	nop
 800bf44:	20000010 	.word	0x20000010
 800bf48:	0800f04d 	.word	0x0800f04d
 800bf4c:	2000018c 	.word	0x2000018c

0800bf50 <cleanup_stdio>:
 800bf50:	6841      	ldr	r1, [r0, #4]
 800bf52:	4b0c      	ldr	r3, [pc, #48]	@ (800bf84 <cleanup_stdio+0x34>)
 800bf54:	4299      	cmp	r1, r3
 800bf56:	b510      	push	{r4, lr}
 800bf58:	4604      	mov	r4, r0
 800bf5a:	d001      	beq.n	800bf60 <cleanup_stdio+0x10>
 800bf5c:	f003 f876 	bl	800f04c <_fflush_r>
 800bf60:	68a1      	ldr	r1, [r4, #8]
 800bf62:	4b09      	ldr	r3, [pc, #36]	@ (800bf88 <cleanup_stdio+0x38>)
 800bf64:	4299      	cmp	r1, r3
 800bf66:	d002      	beq.n	800bf6e <cleanup_stdio+0x1e>
 800bf68:	4620      	mov	r0, r4
 800bf6a:	f003 f86f 	bl	800f04c <_fflush_r>
 800bf6e:	68e1      	ldr	r1, [r4, #12]
 800bf70:	4b06      	ldr	r3, [pc, #24]	@ (800bf8c <cleanup_stdio+0x3c>)
 800bf72:	4299      	cmp	r1, r3
 800bf74:	d004      	beq.n	800bf80 <cleanup_stdio+0x30>
 800bf76:	4620      	mov	r0, r4
 800bf78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf7c:	f003 b866 	b.w	800f04c <_fflush_r>
 800bf80:	bd10      	pop	{r4, pc}
 800bf82:	bf00      	nop
 800bf84:	20000a0c 	.word	0x20000a0c
 800bf88:	20000a74 	.word	0x20000a74
 800bf8c:	20000adc 	.word	0x20000adc

0800bf90 <global_stdio_init.part.0>:
 800bf90:	b510      	push	{r4, lr}
 800bf92:	4b0b      	ldr	r3, [pc, #44]	@ (800bfc0 <global_stdio_init.part.0+0x30>)
 800bf94:	4c0b      	ldr	r4, [pc, #44]	@ (800bfc4 <global_stdio_init.part.0+0x34>)
 800bf96:	4a0c      	ldr	r2, [pc, #48]	@ (800bfc8 <global_stdio_init.part.0+0x38>)
 800bf98:	601a      	str	r2, [r3, #0]
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	2104      	movs	r1, #4
 800bfa0:	f7ff ff94 	bl	800becc <std>
 800bfa4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bfa8:	2201      	movs	r2, #1
 800bfaa:	2109      	movs	r1, #9
 800bfac:	f7ff ff8e 	bl	800becc <std>
 800bfb0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bfb4:	2202      	movs	r2, #2
 800bfb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfba:	2112      	movs	r1, #18
 800bfbc:	f7ff bf86 	b.w	800becc <std>
 800bfc0:	20000b44 	.word	0x20000b44
 800bfc4:	20000a0c 	.word	0x20000a0c
 800bfc8:	0800bf39 	.word	0x0800bf39

0800bfcc <__sfp_lock_acquire>:
 800bfcc:	4801      	ldr	r0, [pc, #4]	@ (800bfd4 <__sfp_lock_acquire+0x8>)
 800bfce:	f000 ba12 	b.w	800c3f6 <__retarget_lock_acquire_recursive>
 800bfd2:	bf00      	nop
 800bfd4:	20000b4d 	.word	0x20000b4d

0800bfd8 <__sfp_lock_release>:
 800bfd8:	4801      	ldr	r0, [pc, #4]	@ (800bfe0 <__sfp_lock_release+0x8>)
 800bfda:	f000 ba0d 	b.w	800c3f8 <__retarget_lock_release_recursive>
 800bfde:	bf00      	nop
 800bfe0:	20000b4d 	.word	0x20000b4d

0800bfe4 <__sinit>:
 800bfe4:	b510      	push	{r4, lr}
 800bfe6:	4604      	mov	r4, r0
 800bfe8:	f7ff fff0 	bl	800bfcc <__sfp_lock_acquire>
 800bfec:	6a23      	ldr	r3, [r4, #32]
 800bfee:	b11b      	cbz	r3, 800bff8 <__sinit+0x14>
 800bff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bff4:	f7ff bff0 	b.w	800bfd8 <__sfp_lock_release>
 800bff8:	4b04      	ldr	r3, [pc, #16]	@ (800c00c <__sinit+0x28>)
 800bffa:	6223      	str	r3, [r4, #32]
 800bffc:	4b04      	ldr	r3, [pc, #16]	@ (800c010 <__sinit+0x2c>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d1f5      	bne.n	800bff0 <__sinit+0xc>
 800c004:	f7ff ffc4 	bl	800bf90 <global_stdio_init.part.0>
 800c008:	e7f2      	b.n	800bff0 <__sinit+0xc>
 800c00a:	bf00      	nop
 800c00c:	0800bf51 	.word	0x0800bf51
 800c010:	20000b44 	.word	0x20000b44

0800c014 <_fwalk_sglue>:
 800c014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c018:	4607      	mov	r7, r0
 800c01a:	4688      	mov	r8, r1
 800c01c:	4614      	mov	r4, r2
 800c01e:	2600      	movs	r6, #0
 800c020:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c024:	f1b9 0901 	subs.w	r9, r9, #1
 800c028:	d505      	bpl.n	800c036 <_fwalk_sglue+0x22>
 800c02a:	6824      	ldr	r4, [r4, #0]
 800c02c:	2c00      	cmp	r4, #0
 800c02e:	d1f7      	bne.n	800c020 <_fwalk_sglue+0xc>
 800c030:	4630      	mov	r0, r6
 800c032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c036:	89ab      	ldrh	r3, [r5, #12]
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d907      	bls.n	800c04c <_fwalk_sglue+0x38>
 800c03c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c040:	3301      	adds	r3, #1
 800c042:	d003      	beq.n	800c04c <_fwalk_sglue+0x38>
 800c044:	4629      	mov	r1, r5
 800c046:	4638      	mov	r0, r7
 800c048:	47c0      	blx	r8
 800c04a:	4306      	orrs	r6, r0
 800c04c:	3568      	adds	r5, #104	@ 0x68
 800c04e:	e7e9      	b.n	800c024 <_fwalk_sglue+0x10>

0800c050 <siprintf>:
 800c050:	b40e      	push	{r1, r2, r3}
 800c052:	b500      	push	{lr}
 800c054:	b09c      	sub	sp, #112	@ 0x70
 800c056:	ab1d      	add	r3, sp, #116	@ 0x74
 800c058:	9002      	str	r0, [sp, #8]
 800c05a:	9006      	str	r0, [sp, #24]
 800c05c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c060:	4809      	ldr	r0, [pc, #36]	@ (800c088 <siprintf+0x38>)
 800c062:	9107      	str	r1, [sp, #28]
 800c064:	9104      	str	r1, [sp, #16]
 800c066:	4909      	ldr	r1, [pc, #36]	@ (800c08c <siprintf+0x3c>)
 800c068:	f853 2b04 	ldr.w	r2, [r3], #4
 800c06c:	9105      	str	r1, [sp, #20]
 800c06e:	6800      	ldr	r0, [r0, #0]
 800c070:	9301      	str	r3, [sp, #4]
 800c072:	a902      	add	r1, sp, #8
 800c074:	f002 fa0e 	bl	800e494 <_svfiprintf_r>
 800c078:	9b02      	ldr	r3, [sp, #8]
 800c07a:	2200      	movs	r2, #0
 800c07c:	701a      	strb	r2, [r3, #0]
 800c07e:	b01c      	add	sp, #112	@ 0x70
 800c080:	f85d eb04 	ldr.w	lr, [sp], #4
 800c084:	b003      	add	sp, #12
 800c086:	4770      	bx	lr
 800c088:	20000188 	.word	0x20000188
 800c08c:	ffff0208 	.word	0xffff0208

0800c090 <siscanf>:
 800c090:	b40e      	push	{r1, r2, r3}
 800c092:	b530      	push	{r4, r5, lr}
 800c094:	b09c      	sub	sp, #112	@ 0x70
 800c096:	ac1f      	add	r4, sp, #124	@ 0x7c
 800c098:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800c09c:	f854 5b04 	ldr.w	r5, [r4], #4
 800c0a0:	f8ad 2014 	strh.w	r2, [sp, #20]
 800c0a4:	9002      	str	r0, [sp, #8]
 800c0a6:	9006      	str	r0, [sp, #24]
 800c0a8:	f7f4 f8ea 	bl	8000280 <strlen>
 800c0ac:	4b0b      	ldr	r3, [pc, #44]	@ (800c0dc <siscanf+0x4c>)
 800c0ae:	9003      	str	r0, [sp, #12]
 800c0b0:	9007      	str	r0, [sp, #28]
 800c0b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c0b4:	480a      	ldr	r0, [pc, #40]	@ (800c0e0 <siscanf+0x50>)
 800c0b6:	9401      	str	r4, [sp, #4]
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c0bc:	9314      	str	r3, [sp, #80]	@ 0x50
 800c0be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c0c2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c0c6:	462a      	mov	r2, r5
 800c0c8:	4623      	mov	r3, r4
 800c0ca:	a902      	add	r1, sp, #8
 800c0cc:	6800      	ldr	r0, [r0, #0]
 800c0ce:	f002 fb35 	bl	800e73c <__ssvfiscanf_r>
 800c0d2:	b01c      	add	sp, #112	@ 0x70
 800c0d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c0d8:	b003      	add	sp, #12
 800c0da:	4770      	bx	lr
 800c0dc:	0800c107 	.word	0x0800c107
 800c0e0:	20000188 	.word	0x20000188

0800c0e4 <__sread>:
 800c0e4:	b510      	push	{r4, lr}
 800c0e6:	460c      	mov	r4, r1
 800c0e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0ec:	f000 f934 	bl	800c358 <_read_r>
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	bfab      	itete	ge
 800c0f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c0f6:	89a3      	ldrhlt	r3, [r4, #12]
 800c0f8:	181b      	addge	r3, r3, r0
 800c0fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c0fe:	bfac      	ite	ge
 800c100:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c102:	81a3      	strhlt	r3, [r4, #12]
 800c104:	bd10      	pop	{r4, pc}

0800c106 <__seofread>:
 800c106:	2000      	movs	r0, #0
 800c108:	4770      	bx	lr

0800c10a <__swrite>:
 800c10a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c10e:	461f      	mov	r7, r3
 800c110:	898b      	ldrh	r3, [r1, #12]
 800c112:	05db      	lsls	r3, r3, #23
 800c114:	4605      	mov	r5, r0
 800c116:	460c      	mov	r4, r1
 800c118:	4616      	mov	r6, r2
 800c11a:	d505      	bpl.n	800c128 <__swrite+0x1e>
 800c11c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c120:	2302      	movs	r3, #2
 800c122:	2200      	movs	r2, #0
 800c124:	f000 f906 	bl	800c334 <_lseek_r>
 800c128:	89a3      	ldrh	r3, [r4, #12]
 800c12a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c12e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c132:	81a3      	strh	r3, [r4, #12]
 800c134:	4632      	mov	r2, r6
 800c136:	463b      	mov	r3, r7
 800c138:	4628      	mov	r0, r5
 800c13a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c13e:	f000 b91d 	b.w	800c37c <_write_r>

0800c142 <__sseek>:
 800c142:	b510      	push	{r4, lr}
 800c144:	460c      	mov	r4, r1
 800c146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c14a:	f000 f8f3 	bl	800c334 <_lseek_r>
 800c14e:	1c43      	adds	r3, r0, #1
 800c150:	89a3      	ldrh	r3, [r4, #12]
 800c152:	bf15      	itete	ne
 800c154:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c156:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c15a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c15e:	81a3      	strheq	r3, [r4, #12]
 800c160:	bf18      	it	ne
 800c162:	81a3      	strhne	r3, [r4, #12]
 800c164:	bd10      	pop	{r4, pc}

0800c166 <__sclose>:
 800c166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c16a:	f000 b8d3 	b.w	800c314 <_close_r>

0800c16e <__swbuf_r>:
 800c16e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c170:	460e      	mov	r6, r1
 800c172:	4614      	mov	r4, r2
 800c174:	4605      	mov	r5, r0
 800c176:	b118      	cbz	r0, 800c180 <__swbuf_r+0x12>
 800c178:	6a03      	ldr	r3, [r0, #32]
 800c17a:	b90b      	cbnz	r3, 800c180 <__swbuf_r+0x12>
 800c17c:	f7ff ff32 	bl	800bfe4 <__sinit>
 800c180:	69a3      	ldr	r3, [r4, #24]
 800c182:	60a3      	str	r3, [r4, #8]
 800c184:	89a3      	ldrh	r3, [r4, #12]
 800c186:	071a      	lsls	r2, r3, #28
 800c188:	d501      	bpl.n	800c18e <__swbuf_r+0x20>
 800c18a:	6923      	ldr	r3, [r4, #16]
 800c18c:	b943      	cbnz	r3, 800c1a0 <__swbuf_r+0x32>
 800c18e:	4621      	mov	r1, r4
 800c190:	4628      	mov	r0, r5
 800c192:	f000 f82b 	bl	800c1ec <__swsetup_r>
 800c196:	b118      	cbz	r0, 800c1a0 <__swbuf_r+0x32>
 800c198:	f04f 37ff 	mov.w	r7, #4294967295
 800c19c:	4638      	mov	r0, r7
 800c19e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1a0:	6823      	ldr	r3, [r4, #0]
 800c1a2:	6922      	ldr	r2, [r4, #16]
 800c1a4:	1a98      	subs	r0, r3, r2
 800c1a6:	6963      	ldr	r3, [r4, #20]
 800c1a8:	b2f6      	uxtb	r6, r6
 800c1aa:	4283      	cmp	r3, r0
 800c1ac:	4637      	mov	r7, r6
 800c1ae:	dc05      	bgt.n	800c1bc <__swbuf_r+0x4e>
 800c1b0:	4621      	mov	r1, r4
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	f002 ff4a 	bl	800f04c <_fflush_r>
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	d1ed      	bne.n	800c198 <__swbuf_r+0x2a>
 800c1bc:	68a3      	ldr	r3, [r4, #8]
 800c1be:	3b01      	subs	r3, #1
 800c1c0:	60a3      	str	r3, [r4, #8]
 800c1c2:	6823      	ldr	r3, [r4, #0]
 800c1c4:	1c5a      	adds	r2, r3, #1
 800c1c6:	6022      	str	r2, [r4, #0]
 800c1c8:	701e      	strb	r6, [r3, #0]
 800c1ca:	6962      	ldr	r2, [r4, #20]
 800c1cc:	1c43      	adds	r3, r0, #1
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d004      	beq.n	800c1dc <__swbuf_r+0x6e>
 800c1d2:	89a3      	ldrh	r3, [r4, #12]
 800c1d4:	07db      	lsls	r3, r3, #31
 800c1d6:	d5e1      	bpl.n	800c19c <__swbuf_r+0x2e>
 800c1d8:	2e0a      	cmp	r6, #10
 800c1da:	d1df      	bne.n	800c19c <__swbuf_r+0x2e>
 800c1dc:	4621      	mov	r1, r4
 800c1de:	4628      	mov	r0, r5
 800c1e0:	f002 ff34 	bl	800f04c <_fflush_r>
 800c1e4:	2800      	cmp	r0, #0
 800c1e6:	d0d9      	beq.n	800c19c <__swbuf_r+0x2e>
 800c1e8:	e7d6      	b.n	800c198 <__swbuf_r+0x2a>
	...

0800c1ec <__swsetup_r>:
 800c1ec:	b538      	push	{r3, r4, r5, lr}
 800c1ee:	4b29      	ldr	r3, [pc, #164]	@ (800c294 <__swsetup_r+0xa8>)
 800c1f0:	4605      	mov	r5, r0
 800c1f2:	6818      	ldr	r0, [r3, #0]
 800c1f4:	460c      	mov	r4, r1
 800c1f6:	b118      	cbz	r0, 800c200 <__swsetup_r+0x14>
 800c1f8:	6a03      	ldr	r3, [r0, #32]
 800c1fa:	b90b      	cbnz	r3, 800c200 <__swsetup_r+0x14>
 800c1fc:	f7ff fef2 	bl	800bfe4 <__sinit>
 800c200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c204:	0719      	lsls	r1, r3, #28
 800c206:	d422      	bmi.n	800c24e <__swsetup_r+0x62>
 800c208:	06da      	lsls	r2, r3, #27
 800c20a:	d407      	bmi.n	800c21c <__swsetup_r+0x30>
 800c20c:	2209      	movs	r2, #9
 800c20e:	602a      	str	r2, [r5, #0]
 800c210:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c214:	81a3      	strh	r3, [r4, #12]
 800c216:	f04f 30ff 	mov.w	r0, #4294967295
 800c21a:	e033      	b.n	800c284 <__swsetup_r+0x98>
 800c21c:	0758      	lsls	r0, r3, #29
 800c21e:	d512      	bpl.n	800c246 <__swsetup_r+0x5a>
 800c220:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c222:	b141      	cbz	r1, 800c236 <__swsetup_r+0x4a>
 800c224:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c228:	4299      	cmp	r1, r3
 800c22a:	d002      	beq.n	800c232 <__swsetup_r+0x46>
 800c22c:	4628      	mov	r0, r5
 800c22e:	f000 ff4f 	bl	800d0d0 <_free_r>
 800c232:	2300      	movs	r3, #0
 800c234:	6363      	str	r3, [r4, #52]	@ 0x34
 800c236:	89a3      	ldrh	r3, [r4, #12]
 800c238:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c23c:	81a3      	strh	r3, [r4, #12]
 800c23e:	2300      	movs	r3, #0
 800c240:	6063      	str	r3, [r4, #4]
 800c242:	6923      	ldr	r3, [r4, #16]
 800c244:	6023      	str	r3, [r4, #0]
 800c246:	89a3      	ldrh	r3, [r4, #12]
 800c248:	f043 0308 	orr.w	r3, r3, #8
 800c24c:	81a3      	strh	r3, [r4, #12]
 800c24e:	6923      	ldr	r3, [r4, #16]
 800c250:	b94b      	cbnz	r3, 800c266 <__swsetup_r+0x7a>
 800c252:	89a3      	ldrh	r3, [r4, #12]
 800c254:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c25c:	d003      	beq.n	800c266 <__swsetup_r+0x7a>
 800c25e:	4621      	mov	r1, r4
 800c260:	4628      	mov	r0, r5
 800c262:	f002 ff41 	bl	800f0e8 <__smakebuf_r>
 800c266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c26a:	f013 0201 	ands.w	r2, r3, #1
 800c26e:	d00a      	beq.n	800c286 <__swsetup_r+0x9a>
 800c270:	2200      	movs	r2, #0
 800c272:	60a2      	str	r2, [r4, #8]
 800c274:	6962      	ldr	r2, [r4, #20]
 800c276:	4252      	negs	r2, r2
 800c278:	61a2      	str	r2, [r4, #24]
 800c27a:	6922      	ldr	r2, [r4, #16]
 800c27c:	b942      	cbnz	r2, 800c290 <__swsetup_r+0xa4>
 800c27e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c282:	d1c5      	bne.n	800c210 <__swsetup_r+0x24>
 800c284:	bd38      	pop	{r3, r4, r5, pc}
 800c286:	0799      	lsls	r1, r3, #30
 800c288:	bf58      	it	pl
 800c28a:	6962      	ldrpl	r2, [r4, #20]
 800c28c:	60a2      	str	r2, [r4, #8]
 800c28e:	e7f4      	b.n	800c27a <__swsetup_r+0x8e>
 800c290:	2000      	movs	r0, #0
 800c292:	e7f7      	b.n	800c284 <__swsetup_r+0x98>
 800c294:	20000188 	.word	0x20000188

0800c298 <memset>:
 800c298:	4402      	add	r2, r0
 800c29a:	4603      	mov	r3, r0
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d100      	bne.n	800c2a2 <memset+0xa>
 800c2a0:	4770      	bx	lr
 800c2a2:	f803 1b01 	strb.w	r1, [r3], #1
 800c2a6:	e7f9      	b.n	800c29c <memset+0x4>

0800c2a8 <strchr>:
 800c2a8:	b2c9      	uxtb	r1, r1
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2b2:	b112      	cbz	r2, 800c2ba <strchr+0x12>
 800c2b4:	428a      	cmp	r2, r1
 800c2b6:	d1f9      	bne.n	800c2ac <strchr+0x4>
 800c2b8:	4770      	bx	lr
 800c2ba:	2900      	cmp	r1, #0
 800c2bc:	bf18      	it	ne
 800c2be:	2000      	movne	r0, #0
 800c2c0:	4770      	bx	lr

0800c2c2 <strncmp>:
 800c2c2:	b510      	push	{r4, lr}
 800c2c4:	b16a      	cbz	r2, 800c2e2 <strncmp+0x20>
 800c2c6:	3901      	subs	r1, #1
 800c2c8:	1884      	adds	r4, r0, r2
 800c2ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d103      	bne.n	800c2de <strncmp+0x1c>
 800c2d6:	42a0      	cmp	r0, r4
 800c2d8:	d001      	beq.n	800c2de <strncmp+0x1c>
 800c2da:	2a00      	cmp	r2, #0
 800c2dc:	d1f5      	bne.n	800c2ca <strncmp+0x8>
 800c2de:	1ad0      	subs	r0, r2, r3
 800c2e0:	bd10      	pop	{r4, pc}
 800c2e2:	4610      	mov	r0, r2
 800c2e4:	e7fc      	b.n	800c2e0 <strncmp+0x1e>

0800c2e6 <strncpy>:
 800c2e6:	b510      	push	{r4, lr}
 800c2e8:	3901      	subs	r1, #1
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	b132      	cbz	r2, 800c2fc <strncpy+0x16>
 800c2ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c2f2:	f803 4b01 	strb.w	r4, [r3], #1
 800c2f6:	3a01      	subs	r2, #1
 800c2f8:	2c00      	cmp	r4, #0
 800c2fa:	d1f7      	bne.n	800c2ec <strncpy+0x6>
 800c2fc:	441a      	add	r2, r3
 800c2fe:	2100      	movs	r1, #0
 800c300:	4293      	cmp	r3, r2
 800c302:	d100      	bne.n	800c306 <strncpy+0x20>
 800c304:	bd10      	pop	{r4, pc}
 800c306:	f803 1b01 	strb.w	r1, [r3], #1
 800c30a:	e7f9      	b.n	800c300 <strncpy+0x1a>

0800c30c <_localeconv_r>:
 800c30c:	4800      	ldr	r0, [pc, #0]	@ (800c310 <_localeconv_r+0x4>)
 800c30e:	4770      	bx	lr
 800c310:	2000010c 	.word	0x2000010c

0800c314 <_close_r>:
 800c314:	b538      	push	{r3, r4, r5, lr}
 800c316:	4d06      	ldr	r5, [pc, #24]	@ (800c330 <_close_r+0x1c>)
 800c318:	2300      	movs	r3, #0
 800c31a:	4604      	mov	r4, r0
 800c31c:	4608      	mov	r0, r1
 800c31e:	602b      	str	r3, [r5, #0]
 800c320:	f7f7 f930 	bl	8003584 <_close>
 800c324:	1c43      	adds	r3, r0, #1
 800c326:	d102      	bne.n	800c32e <_close_r+0x1a>
 800c328:	682b      	ldr	r3, [r5, #0]
 800c32a:	b103      	cbz	r3, 800c32e <_close_r+0x1a>
 800c32c:	6023      	str	r3, [r4, #0]
 800c32e:	bd38      	pop	{r3, r4, r5, pc}
 800c330:	20000b48 	.word	0x20000b48

0800c334 <_lseek_r>:
 800c334:	b538      	push	{r3, r4, r5, lr}
 800c336:	4d07      	ldr	r5, [pc, #28]	@ (800c354 <_lseek_r+0x20>)
 800c338:	4604      	mov	r4, r0
 800c33a:	4608      	mov	r0, r1
 800c33c:	4611      	mov	r1, r2
 800c33e:	2200      	movs	r2, #0
 800c340:	602a      	str	r2, [r5, #0]
 800c342:	461a      	mov	r2, r3
 800c344:	f7f7 f945 	bl	80035d2 <_lseek>
 800c348:	1c43      	adds	r3, r0, #1
 800c34a:	d102      	bne.n	800c352 <_lseek_r+0x1e>
 800c34c:	682b      	ldr	r3, [r5, #0]
 800c34e:	b103      	cbz	r3, 800c352 <_lseek_r+0x1e>
 800c350:	6023      	str	r3, [r4, #0]
 800c352:	bd38      	pop	{r3, r4, r5, pc}
 800c354:	20000b48 	.word	0x20000b48

0800c358 <_read_r>:
 800c358:	b538      	push	{r3, r4, r5, lr}
 800c35a:	4d07      	ldr	r5, [pc, #28]	@ (800c378 <_read_r+0x20>)
 800c35c:	4604      	mov	r4, r0
 800c35e:	4608      	mov	r0, r1
 800c360:	4611      	mov	r1, r2
 800c362:	2200      	movs	r2, #0
 800c364:	602a      	str	r2, [r5, #0]
 800c366:	461a      	mov	r2, r3
 800c368:	f7f7 f8d3 	bl	8003512 <_read>
 800c36c:	1c43      	adds	r3, r0, #1
 800c36e:	d102      	bne.n	800c376 <_read_r+0x1e>
 800c370:	682b      	ldr	r3, [r5, #0]
 800c372:	b103      	cbz	r3, 800c376 <_read_r+0x1e>
 800c374:	6023      	str	r3, [r4, #0]
 800c376:	bd38      	pop	{r3, r4, r5, pc}
 800c378:	20000b48 	.word	0x20000b48

0800c37c <_write_r>:
 800c37c:	b538      	push	{r3, r4, r5, lr}
 800c37e:	4d07      	ldr	r5, [pc, #28]	@ (800c39c <_write_r+0x20>)
 800c380:	4604      	mov	r4, r0
 800c382:	4608      	mov	r0, r1
 800c384:	4611      	mov	r1, r2
 800c386:	2200      	movs	r2, #0
 800c388:	602a      	str	r2, [r5, #0]
 800c38a:	461a      	mov	r2, r3
 800c38c:	f7f7 f8de 	bl	800354c <_write>
 800c390:	1c43      	adds	r3, r0, #1
 800c392:	d102      	bne.n	800c39a <_write_r+0x1e>
 800c394:	682b      	ldr	r3, [r5, #0]
 800c396:	b103      	cbz	r3, 800c39a <_write_r+0x1e>
 800c398:	6023      	str	r3, [r4, #0]
 800c39a:	bd38      	pop	{r3, r4, r5, pc}
 800c39c:	20000b48 	.word	0x20000b48

0800c3a0 <__errno>:
 800c3a0:	4b01      	ldr	r3, [pc, #4]	@ (800c3a8 <__errno+0x8>)
 800c3a2:	6818      	ldr	r0, [r3, #0]
 800c3a4:	4770      	bx	lr
 800c3a6:	bf00      	nop
 800c3a8:	20000188 	.word	0x20000188

0800c3ac <__libc_init_array>:
 800c3ac:	b570      	push	{r4, r5, r6, lr}
 800c3ae:	4d0d      	ldr	r5, [pc, #52]	@ (800c3e4 <__libc_init_array+0x38>)
 800c3b0:	4c0d      	ldr	r4, [pc, #52]	@ (800c3e8 <__libc_init_array+0x3c>)
 800c3b2:	1b64      	subs	r4, r4, r5
 800c3b4:	10a4      	asrs	r4, r4, #2
 800c3b6:	2600      	movs	r6, #0
 800c3b8:	42a6      	cmp	r6, r4
 800c3ba:	d109      	bne.n	800c3d0 <__libc_init_array+0x24>
 800c3bc:	4d0b      	ldr	r5, [pc, #44]	@ (800c3ec <__libc_init_array+0x40>)
 800c3be:	4c0c      	ldr	r4, [pc, #48]	@ (800c3f0 <__libc_init_array+0x44>)
 800c3c0:	f004 f824 	bl	801040c <_init>
 800c3c4:	1b64      	subs	r4, r4, r5
 800c3c6:	10a4      	asrs	r4, r4, #2
 800c3c8:	2600      	movs	r6, #0
 800c3ca:	42a6      	cmp	r6, r4
 800c3cc:	d105      	bne.n	800c3da <__libc_init_array+0x2e>
 800c3ce:	bd70      	pop	{r4, r5, r6, pc}
 800c3d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3d4:	4798      	blx	r3
 800c3d6:	3601      	adds	r6, #1
 800c3d8:	e7ee      	b.n	800c3b8 <__libc_init_array+0xc>
 800c3da:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3de:	4798      	blx	r3
 800c3e0:	3601      	adds	r6, #1
 800c3e2:	e7f2      	b.n	800c3ca <__libc_init_array+0x1e>
 800c3e4:	080109a8 	.word	0x080109a8
 800c3e8:	080109a8 	.word	0x080109a8
 800c3ec:	080109a8 	.word	0x080109a8
 800c3f0:	080109ac 	.word	0x080109ac

0800c3f4 <__retarget_lock_init_recursive>:
 800c3f4:	4770      	bx	lr

0800c3f6 <__retarget_lock_acquire_recursive>:
 800c3f6:	4770      	bx	lr

0800c3f8 <__retarget_lock_release_recursive>:
 800c3f8:	4770      	bx	lr

0800c3fa <memcpy>:
 800c3fa:	440a      	add	r2, r1
 800c3fc:	4291      	cmp	r1, r2
 800c3fe:	f100 33ff 	add.w	r3, r0, #4294967295
 800c402:	d100      	bne.n	800c406 <memcpy+0xc>
 800c404:	4770      	bx	lr
 800c406:	b510      	push	{r4, lr}
 800c408:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c40c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c410:	4291      	cmp	r1, r2
 800c412:	d1f9      	bne.n	800c408 <memcpy+0xe>
 800c414:	bd10      	pop	{r4, pc}
	...

0800c418 <nan>:
 800c418:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c420 <nan+0x8>
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop
 800c420:	00000000 	.word	0x00000000
 800c424:	7ff80000 	.word	0x7ff80000

0800c428 <nanf>:
 800c428:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c430 <nanf+0x8>
 800c42c:	4770      	bx	lr
 800c42e:	bf00      	nop
 800c430:	7fc00000 	.word	0x7fc00000

0800c434 <quorem>:
 800c434:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c438:	6903      	ldr	r3, [r0, #16]
 800c43a:	690c      	ldr	r4, [r1, #16]
 800c43c:	42a3      	cmp	r3, r4
 800c43e:	4607      	mov	r7, r0
 800c440:	db7e      	blt.n	800c540 <quorem+0x10c>
 800c442:	3c01      	subs	r4, #1
 800c444:	f101 0814 	add.w	r8, r1, #20
 800c448:	00a3      	lsls	r3, r4, #2
 800c44a:	f100 0514 	add.w	r5, r0, #20
 800c44e:	9300      	str	r3, [sp, #0]
 800c450:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c454:	9301      	str	r3, [sp, #4]
 800c456:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c45a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c45e:	3301      	adds	r3, #1
 800c460:	429a      	cmp	r2, r3
 800c462:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c466:	fbb2 f6f3 	udiv	r6, r2, r3
 800c46a:	d32e      	bcc.n	800c4ca <quorem+0x96>
 800c46c:	f04f 0a00 	mov.w	sl, #0
 800c470:	46c4      	mov	ip, r8
 800c472:	46ae      	mov	lr, r5
 800c474:	46d3      	mov	fp, sl
 800c476:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c47a:	b298      	uxth	r0, r3
 800c47c:	fb06 a000 	mla	r0, r6, r0, sl
 800c480:	0c02      	lsrs	r2, r0, #16
 800c482:	0c1b      	lsrs	r3, r3, #16
 800c484:	fb06 2303 	mla	r3, r6, r3, r2
 800c488:	f8de 2000 	ldr.w	r2, [lr]
 800c48c:	b280      	uxth	r0, r0
 800c48e:	b292      	uxth	r2, r2
 800c490:	1a12      	subs	r2, r2, r0
 800c492:	445a      	add	r2, fp
 800c494:	f8de 0000 	ldr.w	r0, [lr]
 800c498:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c49c:	b29b      	uxth	r3, r3
 800c49e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c4a2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c4a6:	b292      	uxth	r2, r2
 800c4a8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c4ac:	45e1      	cmp	r9, ip
 800c4ae:	f84e 2b04 	str.w	r2, [lr], #4
 800c4b2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c4b6:	d2de      	bcs.n	800c476 <quorem+0x42>
 800c4b8:	9b00      	ldr	r3, [sp, #0]
 800c4ba:	58eb      	ldr	r3, [r5, r3]
 800c4bc:	b92b      	cbnz	r3, 800c4ca <quorem+0x96>
 800c4be:	9b01      	ldr	r3, [sp, #4]
 800c4c0:	3b04      	subs	r3, #4
 800c4c2:	429d      	cmp	r5, r3
 800c4c4:	461a      	mov	r2, r3
 800c4c6:	d32f      	bcc.n	800c528 <quorem+0xf4>
 800c4c8:	613c      	str	r4, [r7, #16]
 800c4ca:	4638      	mov	r0, r7
 800c4cc:	f001 fd10 	bl	800def0 <__mcmp>
 800c4d0:	2800      	cmp	r0, #0
 800c4d2:	db25      	blt.n	800c520 <quorem+0xec>
 800c4d4:	4629      	mov	r1, r5
 800c4d6:	2000      	movs	r0, #0
 800c4d8:	f858 2b04 	ldr.w	r2, [r8], #4
 800c4dc:	f8d1 c000 	ldr.w	ip, [r1]
 800c4e0:	fa1f fe82 	uxth.w	lr, r2
 800c4e4:	fa1f f38c 	uxth.w	r3, ip
 800c4e8:	eba3 030e 	sub.w	r3, r3, lr
 800c4ec:	4403      	add	r3, r0
 800c4ee:	0c12      	lsrs	r2, r2, #16
 800c4f0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c4f4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c4fe:	45c1      	cmp	r9, r8
 800c500:	f841 3b04 	str.w	r3, [r1], #4
 800c504:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c508:	d2e6      	bcs.n	800c4d8 <quorem+0xa4>
 800c50a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c50e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c512:	b922      	cbnz	r2, 800c51e <quorem+0xea>
 800c514:	3b04      	subs	r3, #4
 800c516:	429d      	cmp	r5, r3
 800c518:	461a      	mov	r2, r3
 800c51a:	d30b      	bcc.n	800c534 <quorem+0x100>
 800c51c:	613c      	str	r4, [r7, #16]
 800c51e:	3601      	adds	r6, #1
 800c520:	4630      	mov	r0, r6
 800c522:	b003      	add	sp, #12
 800c524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c528:	6812      	ldr	r2, [r2, #0]
 800c52a:	3b04      	subs	r3, #4
 800c52c:	2a00      	cmp	r2, #0
 800c52e:	d1cb      	bne.n	800c4c8 <quorem+0x94>
 800c530:	3c01      	subs	r4, #1
 800c532:	e7c6      	b.n	800c4c2 <quorem+0x8e>
 800c534:	6812      	ldr	r2, [r2, #0]
 800c536:	3b04      	subs	r3, #4
 800c538:	2a00      	cmp	r2, #0
 800c53a:	d1ef      	bne.n	800c51c <quorem+0xe8>
 800c53c:	3c01      	subs	r4, #1
 800c53e:	e7ea      	b.n	800c516 <quorem+0xe2>
 800c540:	2000      	movs	r0, #0
 800c542:	e7ee      	b.n	800c522 <quorem+0xee>
 800c544:	0000      	movs	r0, r0
	...

0800c548 <_dtoa_r>:
 800c548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c54c:	69c7      	ldr	r7, [r0, #28]
 800c54e:	b099      	sub	sp, #100	@ 0x64
 800c550:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c554:	ec55 4b10 	vmov	r4, r5, d0
 800c558:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c55a:	9109      	str	r1, [sp, #36]	@ 0x24
 800c55c:	4683      	mov	fp, r0
 800c55e:	920e      	str	r2, [sp, #56]	@ 0x38
 800c560:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c562:	b97f      	cbnz	r7, 800c584 <_dtoa_r+0x3c>
 800c564:	2010      	movs	r0, #16
 800c566:	f001 f937 	bl	800d7d8 <malloc>
 800c56a:	4602      	mov	r2, r0
 800c56c:	f8cb 001c 	str.w	r0, [fp, #28]
 800c570:	b920      	cbnz	r0, 800c57c <_dtoa_r+0x34>
 800c572:	4ba7      	ldr	r3, [pc, #668]	@ (800c810 <_dtoa_r+0x2c8>)
 800c574:	21ef      	movs	r1, #239	@ 0xef
 800c576:	48a7      	ldr	r0, [pc, #668]	@ (800c814 <_dtoa_r+0x2cc>)
 800c578:	f002 feb2 	bl	800f2e0 <__assert_func>
 800c57c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c580:	6007      	str	r7, [r0, #0]
 800c582:	60c7      	str	r7, [r0, #12]
 800c584:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c588:	6819      	ldr	r1, [r3, #0]
 800c58a:	b159      	cbz	r1, 800c5a4 <_dtoa_r+0x5c>
 800c58c:	685a      	ldr	r2, [r3, #4]
 800c58e:	604a      	str	r2, [r1, #4]
 800c590:	2301      	movs	r3, #1
 800c592:	4093      	lsls	r3, r2
 800c594:	608b      	str	r3, [r1, #8]
 800c596:	4658      	mov	r0, fp
 800c598:	f001 fa26 	bl	800d9e8 <_Bfree>
 800c59c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	601a      	str	r2, [r3, #0]
 800c5a4:	1e2b      	subs	r3, r5, #0
 800c5a6:	bfb9      	ittee	lt
 800c5a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c5ac:	9303      	strlt	r3, [sp, #12]
 800c5ae:	2300      	movge	r3, #0
 800c5b0:	6033      	strge	r3, [r6, #0]
 800c5b2:	9f03      	ldr	r7, [sp, #12]
 800c5b4:	4b98      	ldr	r3, [pc, #608]	@ (800c818 <_dtoa_r+0x2d0>)
 800c5b6:	bfbc      	itt	lt
 800c5b8:	2201      	movlt	r2, #1
 800c5ba:	6032      	strlt	r2, [r6, #0]
 800c5bc:	43bb      	bics	r3, r7
 800c5be:	d112      	bne.n	800c5e6 <_dtoa_r+0x9e>
 800c5c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c5c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c5c6:	6013      	str	r3, [r2, #0]
 800c5c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c5cc:	4323      	orrs	r3, r4
 800c5ce:	f000 854d 	beq.w	800d06c <_dtoa_r+0xb24>
 800c5d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c5d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c82c <_dtoa_r+0x2e4>
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	f000 854f 	beq.w	800d07c <_dtoa_r+0xb34>
 800c5de:	f10a 0303 	add.w	r3, sl, #3
 800c5e2:	f000 bd49 	b.w	800d078 <_dtoa_r+0xb30>
 800c5e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	ec51 0b17 	vmov	r0, r1, d7
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c5f6:	f7f4 fa6f 	bl	8000ad8 <__aeabi_dcmpeq>
 800c5fa:	4680      	mov	r8, r0
 800c5fc:	b158      	cbz	r0, 800c616 <_dtoa_r+0xce>
 800c5fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c600:	2301      	movs	r3, #1
 800c602:	6013      	str	r3, [r2, #0]
 800c604:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c606:	b113      	cbz	r3, 800c60e <_dtoa_r+0xc6>
 800c608:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c60a:	4b84      	ldr	r3, [pc, #528]	@ (800c81c <_dtoa_r+0x2d4>)
 800c60c:	6013      	str	r3, [r2, #0]
 800c60e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c830 <_dtoa_r+0x2e8>
 800c612:	f000 bd33 	b.w	800d07c <_dtoa_r+0xb34>
 800c616:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c61a:	aa16      	add	r2, sp, #88	@ 0x58
 800c61c:	a917      	add	r1, sp, #92	@ 0x5c
 800c61e:	4658      	mov	r0, fp
 800c620:	f001 fd86 	bl	800e130 <__d2b>
 800c624:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c628:	4681      	mov	r9, r0
 800c62a:	2e00      	cmp	r6, #0
 800c62c:	d077      	beq.n	800c71e <_dtoa_r+0x1d6>
 800c62e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c630:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c634:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c638:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c63c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c640:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c644:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c648:	4619      	mov	r1, r3
 800c64a:	2200      	movs	r2, #0
 800c64c:	4b74      	ldr	r3, [pc, #464]	@ (800c820 <_dtoa_r+0x2d8>)
 800c64e:	f7f3 fe23 	bl	8000298 <__aeabi_dsub>
 800c652:	a369      	add	r3, pc, #420	@ (adr r3, 800c7f8 <_dtoa_r+0x2b0>)
 800c654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c658:	f7f3 ffd6 	bl	8000608 <__aeabi_dmul>
 800c65c:	a368      	add	r3, pc, #416	@ (adr r3, 800c800 <_dtoa_r+0x2b8>)
 800c65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c662:	f7f3 fe1b 	bl	800029c <__adddf3>
 800c666:	4604      	mov	r4, r0
 800c668:	4630      	mov	r0, r6
 800c66a:	460d      	mov	r5, r1
 800c66c:	f7f3 ff62 	bl	8000534 <__aeabi_i2d>
 800c670:	a365      	add	r3, pc, #404	@ (adr r3, 800c808 <_dtoa_r+0x2c0>)
 800c672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c676:	f7f3 ffc7 	bl	8000608 <__aeabi_dmul>
 800c67a:	4602      	mov	r2, r0
 800c67c:	460b      	mov	r3, r1
 800c67e:	4620      	mov	r0, r4
 800c680:	4629      	mov	r1, r5
 800c682:	f7f3 fe0b 	bl	800029c <__adddf3>
 800c686:	4604      	mov	r4, r0
 800c688:	460d      	mov	r5, r1
 800c68a:	f7f4 fa6d 	bl	8000b68 <__aeabi_d2iz>
 800c68e:	2200      	movs	r2, #0
 800c690:	4607      	mov	r7, r0
 800c692:	2300      	movs	r3, #0
 800c694:	4620      	mov	r0, r4
 800c696:	4629      	mov	r1, r5
 800c698:	f7f4 fa28 	bl	8000aec <__aeabi_dcmplt>
 800c69c:	b140      	cbz	r0, 800c6b0 <_dtoa_r+0x168>
 800c69e:	4638      	mov	r0, r7
 800c6a0:	f7f3 ff48 	bl	8000534 <__aeabi_i2d>
 800c6a4:	4622      	mov	r2, r4
 800c6a6:	462b      	mov	r3, r5
 800c6a8:	f7f4 fa16 	bl	8000ad8 <__aeabi_dcmpeq>
 800c6ac:	b900      	cbnz	r0, 800c6b0 <_dtoa_r+0x168>
 800c6ae:	3f01      	subs	r7, #1
 800c6b0:	2f16      	cmp	r7, #22
 800c6b2:	d851      	bhi.n	800c758 <_dtoa_r+0x210>
 800c6b4:	4b5b      	ldr	r3, [pc, #364]	@ (800c824 <_dtoa_r+0x2dc>)
 800c6b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c6c2:	f7f4 fa13 	bl	8000aec <__aeabi_dcmplt>
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	d048      	beq.n	800c75c <_dtoa_r+0x214>
 800c6ca:	3f01      	subs	r7, #1
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	9312      	str	r3, [sp, #72]	@ 0x48
 800c6d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c6d2:	1b9b      	subs	r3, r3, r6
 800c6d4:	1e5a      	subs	r2, r3, #1
 800c6d6:	bf44      	itt	mi
 800c6d8:	f1c3 0801 	rsbmi	r8, r3, #1
 800c6dc:	2300      	movmi	r3, #0
 800c6de:	9208      	str	r2, [sp, #32]
 800c6e0:	bf54      	ite	pl
 800c6e2:	f04f 0800 	movpl.w	r8, #0
 800c6e6:	9308      	strmi	r3, [sp, #32]
 800c6e8:	2f00      	cmp	r7, #0
 800c6ea:	db39      	blt.n	800c760 <_dtoa_r+0x218>
 800c6ec:	9b08      	ldr	r3, [sp, #32]
 800c6ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c6f0:	443b      	add	r3, r7
 800c6f2:	9308      	str	r3, [sp, #32]
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6fa:	2b09      	cmp	r3, #9
 800c6fc:	d864      	bhi.n	800c7c8 <_dtoa_r+0x280>
 800c6fe:	2b05      	cmp	r3, #5
 800c700:	bfc4      	itt	gt
 800c702:	3b04      	subgt	r3, #4
 800c704:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c708:	f1a3 0302 	sub.w	r3, r3, #2
 800c70c:	bfcc      	ite	gt
 800c70e:	2400      	movgt	r4, #0
 800c710:	2401      	movle	r4, #1
 800c712:	2b03      	cmp	r3, #3
 800c714:	d863      	bhi.n	800c7de <_dtoa_r+0x296>
 800c716:	e8df f003 	tbb	[pc, r3]
 800c71a:	372a      	.short	0x372a
 800c71c:	5535      	.short	0x5535
 800c71e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c722:	441e      	add	r6, r3
 800c724:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c728:	2b20      	cmp	r3, #32
 800c72a:	bfc1      	itttt	gt
 800c72c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c730:	409f      	lslgt	r7, r3
 800c732:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c736:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c73a:	bfd6      	itet	le
 800c73c:	f1c3 0320 	rsble	r3, r3, #32
 800c740:	ea47 0003 	orrgt.w	r0, r7, r3
 800c744:	fa04 f003 	lslle.w	r0, r4, r3
 800c748:	f7f3 fee4 	bl	8000514 <__aeabi_ui2d>
 800c74c:	2201      	movs	r2, #1
 800c74e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c752:	3e01      	subs	r6, #1
 800c754:	9214      	str	r2, [sp, #80]	@ 0x50
 800c756:	e777      	b.n	800c648 <_dtoa_r+0x100>
 800c758:	2301      	movs	r3, #1
 800c75a:	e7b8      	b.n	800c6ce <_dtoa_r+0x186>
 800c75c:	9012      	str	r0, [sp, #72]	@ 0x48
 800c75e:	e7b7      	b.n	800c6d0 <_dtoa_r+0x188>
 800c760:	427b      	negs	r3, r7
 800c762:	930a      	str	r3, [sp, #40]	@ 0x28
 800c764:	2300      	movs	r3, #0
 800c766:	eba8 0807 	sub.w	r8, r8, r7
 800c76a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c76c:	e7c4      	b.n	800c6f8 <_dtoa_r+0x1b0>
 800c76e:	2300      	movs	r3, #0
 800c770:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c772:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c774:	2b00      	cmp	r3, #0
 800c776:	dc35      	bgt.n	800c7e4 <_dtoa_r+0x29c>
 800c778:	2301      	movs	r3, #1
 800c77a:	9300      	str	r3, [sp, #0]
 800c77c:	9307      	str	r3, [sp, #28]
 800c77e:	461a      	mov	r2, r3
 800c780:	920e      	str	r2, [sp, #56]	@ 0x38
 800c782:	e00b      	b.n	800c79c <_dtoa_r+0x254>
 800c784:	2301      	movs	r3, #1
 800c786:	e7f3      	b.n	800c770 <_dtoa_r+0x228>
 800c788:	2300      	movs	r3, #0
 800c78a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c78c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c78e:	18fb      	adds	r3, r7, r3
 800c790:	9300      	str	r3, [sp, #0]
 800c792:	3301      	adds	r3, #1
 800c794:	2b01      	cmp	r3, #1
 800c796:	9307      	str	r3, [sp, #28]
 800c798:	bfb8      	it	lt
 800c79a:	2301      	movlt	r3, #1
 800c79c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c7a0:	2100      	movs	r1, #0
 800c7a2:	2204      	movs	r2, #4
 800c7a4:	f102 0514 	add.w	r5, r2, #20
 800c7a8:	429d      	cmp	r5, r3
 800c7aa:	d91f      	bls.n	800c7ec <_dtoa_r+0x2a4>
 800c7ac:	6041      	str	r1, [r0, #4]
 800c7ae:	4658      	mov	r0, fp
 800c7b0:	f001 f8da 	bl	800d968 <_Balloc>
 800c7b4:	4682      	mov	sl, r0
 800c7b6:	2800      	cmp	r0, #0
 800c7b8:	d13c      	bne.n	800c834 <_dtoa_r+0x2ec>
 800c7ba:	4b1b      	ldr	r3, [pc, #108]	@ (800c828 <_dtoa_r+0x2e0>)
 800c7bc:	4602      	mov	r2, r0
 800c7be:	f240 11af 	movw	r1, #431	@ 0x1af
 800c7c2:	e6d8      	b.n	800c576 <_dtoa_r+0x2e>
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	e7e0      	b.n	800c78a <_dtoa_r+0x242>
 800c7c8:	2401      	movs	r4, #1
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c7d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c7d4:	9300      	str	r3, [sp, #0]
 800c7d6:	9307      	str	r3, [sp, #28]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	2312      	movs	r3, #18
 800c7dc:	e7d0      	b.n	800c780 <_dtoa_r+0x238>
 800c7de:	2301      	movs	r3, #1
 800c7e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c7e2:	e7f5      	b.n	800c7d0 <_dtoa_r+0x288>
 800c7e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7e6:	9300      	str	r3, [sp, #0]
 800c7e8:	9307      	str	r3, [sp, #28]
 800c7ea:	e7d7      	b.n	800c79c <_dtoa_r+0x254>
 800c7ec:	3101      	adds	r1, #1
 800c7ee:	0052      	lsls	r2, r2, #1
 800c7f0:	e7d8      	b.n	800c7a4 <_dtoa_r+0x25c>
 800c7f2:	bf00      	nop
 800c7f4:	f3af 8000 	nop.w
 800c7f8:	636f4361 	.word	0x636f4361
 800c7fc:	3fd287a7 	.word	0x3fd287a7
 800c800:	8b60c8b3 	.word	0x8b60c8b3
 800c804:	3fc68a28 	.word	0x3fc68a28
 800c808:	509f79fb 	.word	0x509f79fb
 800c80c:	3fd34413 	.word	0x3fd34413
 800c810:	080105c4 	.word	0x080105c4
 800c814:	080105db 	.word	0x080105db
 800c818:	7ff00000 	.word	0x7ff00000
 800c81c:	08010929 	.word	0x08010929
 800c820:	3ff80000 	.word	0x3ff80000
 800c824:	08010738 	.word	0x08010738
 800c828:	08010633 	.word	0x08010633
 800c82c:	080105c0 	.word	0x080105c0
 800c830:	08010928 	.word	0x08010928
 800c834:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c838:	6018      	str	r0, [r3, #0]
 800c83a:	9b07      	ldr	r3, [sp, #28]
 800c83c:	2b0e      	cmp	r3, #14
 800c83e:	f200 80a4 	bhi.w	800c98a <_dtoa_r+0x442>
 800c842:	2c00      	cmp	r4, #0
 800c844:	f000 80a1 	beq.w	800c98a <_dtoa_r+0x442>
 800c848:	2f00      	cmp	r7, #0
 800c84a:	dd33      	ble.n	800c8b4 <_dtoa_r+0x36c>
 800c84c:	4bad      	ldr	r3, [pc, #692]	@ (800cb04 <_dtoa_r+0x5bc>)
 800c84e:	f007 020f 	and.w	r2, r7, #15
 800c852:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c856:	ed93 7b00 	vldr	d7, [r3]
 800c85a:	05f8      	lsls	r0, r7, #23
 800c85c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c860:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c864:	d516      	bpl.n	800c894 <_dtoa_r+0x34c>
 800c866:	4ba8      	ldr	r3, [pc, #672]	@ (800cb08 <_dtoa_r+0x5c0>)
 800c868:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c86c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c870:	f7f3 fff4 	bl	800085c <__aeabi_ddiv>
 800c874:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c878:	f004 040f 	and.w	r4, r4, #15
 800c87c:	2603      	movs	r6, #3
 800c87e:	4da2      	ldr	r5, [pc, #648]	@ (800cb08 <_dtoa_r+0x5c0>)
 800c880:	b954      	cbnz	r4, 800c898 <_dtoa_r+0x350>
 800c882:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c886:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c88a:	f7f3 ffe7 	bl	800085c <__aeabi_ddiv>
 800c88e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c892:	e028      	b.n	800c8e6 <_dtoa_r+0x39e>
 800c894:	2602      	movs	r6, #2
 800c896:	e7f2      	b.n	800c87e <_dtoa_r+0x336>
 800c898:	07e1      	lsls	r1, r4, #31
 800c89a:	d508      	bpl.n	800c8ae <_dtoa_r+0x366>
 800c89c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c8a4:	f7f3 feb0 	bl	8000608 <__aeabi_dmul>
 800c8a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c8ac:	3601      	adds	r6, #1
 800c8ae:	1064      	asrs	r4, r4, #1
 800c8b0:	3508      	adds	r5, #8
 800c8b2:	e7e5      	b.n	800c880 <_dtoa_r+0x338>
 800c8b4:	f000 80d2 	beq.w	800ca5c <_dtoa_r+0x514>
 800c8b8:	427c      	negs	r4, r7
 800c8ba:	4b92      	ldr	r3, [pc, #584]	@ (800cb04 <_dtoa_r+0x5bc>)
 800c8bc:	4d92      	ldr	r5, [pc, #584]	@ (800cb08 <_dtoa_r+0x5c0>)
 800c8be:	f004 020f 	and.w	r2, r4, #15
 800c8c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c8ce:	f7f3 fe9b 	bl	8000608 <__aeabi_dmul>
 800c8d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8d6:	1124      	asrs	r4, r4, #4
 800c8d8:	2300      	movs	r3, #0
 800c8da:	2602      	movs	r6, #2
 800c8dc:	2c00      	cmp	r4, #0
 800c8de:	f040 80b2 	bne.w	800ca46 <_dtoa_r+0x4fe>
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d1d3      	bne.n	800c88e <_dtoa_r+0x346>
 800c8e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c8e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	f000 80b7 	beq.w	800ca60 <_dtoa_r+0x518>
 800c8f2:	4b86      	ldr	r3, [pc, #536]	@ (800cb0c <_dtoa_r+0x5c4>)
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	4620      	mov	r0, r4
 800c8f8:	4629      	mov	r1, r5
 800c8fa:	f7f4 f8f7 	bl	8000aec <__aeabi_dcmplt>
 800c8fe:	2800      	cmp	r0, #0
 800c900:	f000 80ae 	beq.w	800ca60 <_dtoa_r+0x518>
 800c904:	9b07      	ldr	r3, [sp, #28]
 800c906:	2b00      	cmp	r3, #0
 800c908:	f000 80aa 	beq.w	800ca60 <_dtoa_r+0x518>
 800c90c:	9b00      	ldr	r3, [sp, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	dd37      	ble.n	800c982 <_dtoa_r+0x43a>
 800c912:	1e7b      	subs	r3, r7, #1
 800c914:	9304      	str	r3, [sp, #16]
 800c916:	4620      	mov	r0, r4
 800c918:	4b7d      	ldr	r3, [pc, #500]	@ (800cb10 <_dtoa_r+0x5c8>)
 800c91a:	2200      	movs	r2, #0
 800c91c:	4629      	mov	r1, r5
 800c91e:	f7f3 fe73 	bl	8000608 <__aeabi_dmul>
 800c922:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c926:	9c00      	ldr	r4, [sp, #0]
 800c928:	3601      	adds	r6, #1
 800c92a:	4630      	mov	r0, r6
 800c92c:	f7f3 fe02 	bl	8000534 <__aeabi_i2d>
 800c930:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c934:	f7f3 fe68 	bl	8000608 <__aeabi_dmul>
 800c938:	4b76      	ldr	r3, [pc, #472]	@ (800cb14 <_dtoa_r+0x5cc>)
 800c93a:	2200      	movs	r2, #0
 800c93c:	f7f3 fcae 	bl	800029c <__adddf3>
 800c940:	4605      	mov	r5, r0
 800c942:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c946:	2c00      	cmp	r4, #0
 800c948:	f040 808d 	bne.w	800ca66 <_dtoa_r+0x51e>
 800c94c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c950:	4b71      	ldr	r3, [pc, #452]	@ (800cb18 <_dtoa_r+0x5d0>)
 800c952:	2200      	movs	r2, #0
 800c954:	f7f3 fca0 	bl	8000298 <__aeabi_dsub>
 800c958:	4602      	mov	r2, r0
 800c95a:	460b      	mov	r3, r1
 800c95c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c960:	462a      	mov	r2, r5
 800c962:	4633      	mov	r3, r6
 800c964:	f7f4 f8e0 	bl	8000b28 <__aeabi_dcmpgt>
 800c968:	2800      	cmp	r0, #0
 800c96a:	f040 828b 	bne.w	800ce84 <_dtoa_r+0x93c>
 800c96e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c972:	462a      	mov	r2, r5
 800c974:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c978:	f7f4 f8b8 	bl	8000aec <__aeabi_dcmplt>
 800c97c:	2800      	cmp	r0, #0
 800c97e:	f040 8128 	bne.w	800cbd2 <_dtoa_r+0x68a>
 800c982:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c986:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c98a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	f2c0 815a 	blt.w	800cc46 <_dtoa_r+0x6fe>
 800c992:	2f0e      	cmp	r7, #14
 800c994:	f300 8157 	bgt.w	800cc46 <_dtoa_r+0x6fe>
 800c998:	4b5a      	ldr	r3, [pc, #360]	@ (800cb04 <_dtoa_r+0x5bc>)
 800c99a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c99e:	ed93 7b00 	vldr	d7, [r3]
 800c9a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	ed8d 7b00 	vstr	d7, [sp]
 800c9aa:	da03      	bge.n	800c9b4 <_dtoa_r+0x46c>
 800c9ac:	9b07      	ldr	r3, [sp, #28]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	f340 8101 	ble.w	800cbb6 <_dtoa_r+0x66e>
 800c9b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c9b8:	4656      	mov	r6, sl
 800c9ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9be:	4620      	mov	r0, r4
 800c9c0:	4629      	mov	r1, r5
 800c9c2:	f7f3 ff4b 	bl	800085c <__aeabi_ddiv>
 800c9c6:	f7f4 f8cf 	bl	8000b68 <__aeabi_d2iz>
 800c9ca:	4680      	mov	r8, r0
 800c9cc:	f7f3 fdb2 	bl	8000534 <__aeabi_i2d>
 800c9d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9d4:	f7f3 fe18 	bl	8000608 <__aeabi_dmul>
 800c9d8:	4602      	mov	r2, r0
 800c9da:	460b      	mov	r3, r1
 800c9dc:	4620      	mov	r0, r4
 800c9de:	4629      	mov	r1, r5
 800c9e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c9e4:	f7f3 fc58 	bl	8000298 <__aeabi_dsub>
 800c9e8:	f806 4b01 	strb.w	r4, [r6], #1
 800c9ec:	9d07      	ldr	r5, [sp, #28]
 800c9ee:	eba6 040a 	sub.w	r4, r6, sl
 800c9f2:	42a5      	cmp	r5, r4
 800c9f4:	4602      	mov	r2, r0
 800c9f6:	460b      	mov	r3, r1
 800c9f8:	f040 8117 	bne.w	800cc2a <_dtoa_r+0x6e2>
 800c9fc:	f7f3 fc4e 	bl	800029c <__adddf3>
 800ca00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca04:	4604      	mov	r4, r0
 800ca06:	460d      	mov	r5, r1
 800ca08:	f7f4 f88e 	bl	8000b28 <__aeabi_dcmpgt>
 800ca0c:	2800      	cmp	r0, #0
 800ca0e:	f040 80f9 	bne.w	800cc04 <_dtoa_r+0x6bc>
 800ca12:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca16:	4620      	mov	r0, r4
 800ca18:	4629      	mov	r1, r5
 800ca1a:	f7f4 f85d 	bl	8000ad8 <__aeabi_dcmpeq>
 800ca1e:	b118      	cbz	r0, 800ca28 <_dtoa_r+0x4e0>
 800ca20:	f018 0f01 	tst.w	r8, #1
 800ca24:	f040 80ee 	bne.w	800cc04 <_dtoa_r+0x6bc>
 800ca28:	4649      	mov	r1, r9
 800ca2a:	4658      	mov	r0, fp
 800ca2c:	f000 ffdc 	bl	800d9e8 <_Bfree>
 800ca30:	2300      	movs	r3, #0
 800ca32:	7033      	strb	r3, [r6, #0]
 800ca34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ca36:	3701      	adds	r7, #1
 800ca38:	601f      	str	r7, [r3, #0]
 800ca3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	f000 831d 	beq.w	800d07c <_dtoa_r+0xb34>
 800ca42:	601e      	str	r6, [r3, #0]
 800ca44:	e31a      	b.n	800d07c <_dtoa_r+0xb34>
 800ca46:	07e2      	lsls	r2, r4, #31
 800ca48:	d505      	bpl.n	800ca56 <_dtoa_r+0x50e>
 800ca4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ca4e:	f7f3 fddb 	bl	8000608 <__aeabi_dmul>
 800ca52:	3601      	adds	r6, #1
 800ca54:	2301      	movs	r3, #1
 800ca56:	1064      	asrs	r4, r4, #1
 800ca58:	3508      	adds	r5, #8
 800ca5a:	e73f      	b.n	800c8dc <_dtoa_r+0x394>
 800ca5c:	2602      	movs	r6, #2
 800ca5e:	e742      	b.n	800c8e6 <_dtoa_r+0x39e>
 800ca60:	9c07      	ldr	r4, [sp, #28]
 800ca62:	9704      	str	r7, [sp, #16]
 800ca64:	e761      	b.n	800c92a <_dtoa_r+0x3e2>
 800ca66:	4b27      	ldr	r3, [pc, #156]	@ (800cb04 <_dtoa_r+0x5bc>)
 800ca68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ca6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ca6e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ca72:	4454      	add	r4, sl
 800ca74:	2900      	cmp	r1, #0
 800ca76:	d053      	beq.n	800cb20 <_dtoa_r+0x5d8>
 800ca78:	4928      	ldr	r1, [pc, #160]	@ (800cb1c <_dtoa_r+0x5d4>)
 800ca7a:	2000      	movs	r0, #0
 800ca7c:	f7f3 feee 	bl	800085c <__aeabi_ddiv>
 800ca80:	4633      	mov	r3, r6
 800ca82:	462a      	mov	r2, r5
 800ca84:	f7f3 fc08 	bl	8000298 <__aeabi_dsub>
 800ca88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ca8c:	4656      	mov	r6, sl
 800ca8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca92:	f7f4 f869 	bl	8000b68 <__aeabi_d2iz>
 800ca96:	4605      	mov	r5, r0
 800ca98:	f7f3 fd4c 	bl	8000534 <__aeabi_i2d>
 800ca9c:	4602      	mov	r2, r0
 800ca9e:	460b      	mov	r3, r1
 800caa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800caa4:	f7f3 fbf8 	bl	8000298 <__aeabi_dsub>
 800caa8:	3530      	adds	r5, #48	@ 0x30
 800caaa:	4602      	mov	r2, r0
 800caac:	460b      	mov	r3, r1
 800caae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cab2:	f806 5b01 	strb.w	r5, [r6], #1
 800cab6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800caba:	f7f4 f817 	bl	8000aec <__aeabi_dcmplt>
 800cabe:	2800      	cmp	r0, #0
 800cac0:	d171      	bne.n	800cba6 <_dtoa_r+0x65e>
 800cac2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cac6:	4911      	ldr	r1, [pc, #68]	@ (800cb0c <_dtoa_r+0x5c4>)
 800cac8:	2000      	movs	r0, #0
 800caca:	f7f3 fbe5 	bl	8000298 <__aeabi_dsub>
 800cace:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cad2:	f7f4 f80b 	bl	8000aec <__aeabi_dcmplt>
 800cad6:	2800      	cmp	r0, #0
 800cad8:	f040 8095 	bne.w	800cc06 <_dtoa_r+0x6be>
 800cadc:	42a6      	cmp	r6, r4
 800cade:	f43f af50 	beq.w	800c982 <_dtoa_r+0x43a>
 800cae2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cae6:	4b0a      	ldr	r3, [pc, #40]	@ (800cb10 <_dtoa_r+0x5c8>)
 800cae8:	2200      	movs	r2, #0
 800caea:	f7f3 fd8d 	bl	8000608 <__aeabi_dmul>
 800caee:	4b08      	ldr	r3, [pc, #32]	@ (800cb10 <_dtoa_r+0x5c8>)
 800caf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800caf4:	2200      	movs	r2, #0
 800caf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cafa:	f7f3 fd85 	bl	8000608 <__aeabi_dmul>
 800cafe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb02:	e7c4      	b.n	800ca8e <_dtoa_r+0x546>
 800cb04:	08010738 	.word	0x08010738
 800cb08:	08010710 	.word	0x08010710
 800cb0c:	3ff00000 	.word	0x3ff00000
 800cb10:	40240000 	.word	0x40240000
 800cb14:	401c0000 	.word	0x401c0000
 800cb18:	40140000 	.word	0x40140000
 800cb1c:	3fe00000 	.word	0x3fe00000
 800cb20:	4631      	mov	r1, r6
 800cb22:	4628      	mov	r0, r5
 800cb24:	f7f3 fd70 	bl	8000608 <__aeabi_dmul>
 800cb28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cb2c:	9415      	str	r4, [sp, #84]	@ 0x54
 800cb2e:	4656      	mov	r6, sl
 800cb30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb34:	f7f4 f818 	bl	8000b68 <__aeabi_d2iz>
 800cb38:	4605      	mov	r5, r0
 800cb3a:	f7f3 fcfb 	bl	8000534 <__aeabi_i2d>
 800cb3e:	4602      	mov	r2, r0
 800cb40:	460b      	mov	r3, r1
 800cb42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb46:	f7f3 fba7 	bl	8000298 <__aeabi_dsub>
 800cb4a:	3530      	adds	r5, #48	@ 0x30
 800cb4c:	f806 5b01 	strb.w	r5, [r6], #1
 800cb50:	4602      	mov	r2, r0
 800cb52:	460b      	mov	r3, r1
 800cb54:	42a6      	cmp	r6, r4
 800cb56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cb5a:	f04f 0200 	mov.w	r2, #0
 800cb5e:	d124      	bne.n	800cbaa <_dtoa_r+0x662>
 800cb60:	4bac      	ldr	r3, [pc, #688]	@ (800ce14 <_dtoa_r+0x8cc>)
 800cb62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cb66:	f7f3 fb99 	bl	800029c <__adddf3>
 800cb6a:	4602      	mov	r2, r0
 800cb6c:	460b      	mov	r3, r1
 800cb6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb72:	f7f3 ffd9 	bl	8000b28 <__aeabi_dcmpgt>
 800cb76:	2800      	cmp	r0, #0
 800cb78:	d145      	bne.n	800cc06 <_dtoa_r+0x6be>
 800cb7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cb7e:	49a5      	ldr	r1, [pc, #660]	@ (800ce14 <_dtoa_r+0x8cc>)
 800cb80:	2000      	movs	r0, #0
 800cb82:	f7f3 fb89 	bl	8000298 <__aeabi_dsub>
 800cb86:	4602      	mov	r2, r0
 800cb88:	460b      	mov	r3, r1
 800cb8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb8e:	f7f3 ffad 	bl	8000aec <__aeabi_dcmplt>
 800cb92:	2800      	cmp	r0, #0
 800cb94:	f43f aef5 	beq.w	800c982 <_dtoa_r+0x43a>
 800cb98:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800cb9a:	1e73      	subs	r3, r6, #1
 800cb9c:	9315      	str	r3, [sp, #84]	@ 0x54
 800cb9e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cba2:	2b30      	cmp	r3, #48	@ 0x30
 800cba4:	d0f8      	beq.n	800cb98 <_dtoa_r+0x650>
 800cba6:	9f04      	ldr	r7, [sp, #16]
 800cba8:	e73e      	b.n	800ca28 <_dtoa_r+0x4e0>
 800cbaa:	4b9b      	ldr	r3, [pc, #620]	@ (800ce18 <_dtoa_r+0x8d0>)
 800cbac:	f7f3 fd2c 	bl	8000608 <__aeabi_dmul>
 800cbb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbb4:	e7bc      	b.n	800cb30 <_dtoa_r+0x5e8>
 800cbb6:	d10c      	bne.n	800cbd2 <_dtoa_r+0x68a>
 800cbb8:	4b98      	ldr	r3, [pc, #608]	@ (800ce1c <_dtoa_r+0x8d4>)
 800cbba:	2200      	movs	r2, #0
 800cbbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cbc0:	f7f3 fd22 	bl	8000608 <__aeabi_dmul>
 800cbc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cbc8:	f7f3 ffa4 	bl	8000b14 <__aeabi_dcmpge>
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	f000 8157 	beq.w	800ce80 <_dtoa_r+0x938>
 800cbd2:	2400      	movs	r4, #0
 800cbd4:	4625      	mov	r5, r4
 800cbd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cbd8:	43db      	mvns	r3, r3
 800cbda:	9304      	str	r3, [sp, #16]
 800cbdc:	4656      	mov	r6, sl
 800cbde:	2700      	movs	r7, #0
 800cbe0:	4621      	mov	r1, r4
 800cbe2:	4658      	mov	r0, fp
 800cbe4:	f000 ff00 	bl	800d9e8 <_Bfree>
 800cbe8:	2d00      	cmp	r5, #0
 800cbea:	d0dc      	beq.n	800cba6 <_dtoa_r+0x65e>
 800cbec:	b12f      	cbz	r7, 800cbfa <_dtoa_r+0x6b2>
 800cbee:	42af      	cmp	r7, r5
 800cbf0:	d003      	beq.n	800cbfa <_dtoa_r+0x6b2>
 800cbf2:	4639      	mov	r1, r7
 800cbf4:	4658      	mov	r0, fp
 800cbf6:	f000 fef7 	bl	800d9e8 <_Bfree>
 800cbfa:	4629      	mov	r1, r5
 800cbfc:	4658      	mov	r0, fp
 800cbfe:	f000 fef3 	bl	800d9e8 <_Bfree>
 800cc02:	e7d0      	b.n	800cba6 <_dtoa_r+0x65e>
 800cc04:	9704      	str	r7, [sp, #16]
 800cc06:	4633      	mov	r3, r6
 800cc08:	461e      	mov	r6, r3
 800cc0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc0e:	2a39      	cmp	r2, #57	@ 0x39
 800cc10:	d107      	bne.n	800cc22 <_dtoa_r+0x6da>
 800cc12:	459a      	cmp	sl, r3
 800cc14:	d1f8      	bne.n	800cc08 <_dtoa_r+0x6c0>
 800cc16:	9a04      	ldr	r2, [sp, #16]
 800cc18:	3201      	adds	r2, #1
 800cc1a:	9204      	str	r2, [sp, #16]
 800cc1c:	2230      	movs	r2, #48	@ 0x30
 800cc1e:	f88a 2000 	strb.w	r2, [sl]
 800cc22:	781a      	ldrb	r2, [r3, #0]
 800cc24:	3201      	adds	r2, #1
 800cc26:	701a      	strb	r2, [r3, #0]
 800cc28:	e7bd      	b.n	800cba6 <_dtoa_r+0x65e>
 800cc2a:	4b7b      	ldr	r3, [pc, #492]	@ (800ce18 <_dtoa_r+0x8d0>)
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	f7f3 fceb 	bl	8000608 <__aeabi_dmul>
 800cc32:	2200      	movs	r2, #0
 800cc34:	2300      	movs	r3, #0
 800cc36:	4604      	mov	r4, r0
 800cc38:	460d      	mov	r5, r1
 800cc3a:	f7f3 ff4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	f43f aebb 	beq.w	800c9ba <_dtoa_r+0x472>
 800cc44:	e6f0      	b.n	800ca28 <_dtoa_r+0x4e0>
 800cc46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cc48:	2a00      	cmp	r2, #0
 800cc4a:	f000 80db 	beq.w	800ce04 <_dtoa_r+0x8bc>
 800cc4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc50:	2a01      	cmp	r2, #1
 800cc52:	f300 80bf 	bgt.w	800cdd4 <_dtoa_r+0x88c>
 800cc56:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800cc58:	2a00      	cmp	r2, #0
 800cc5a:	f000 80b7 	beq.w	800cdcc <_dtoa_r+0x884>
 800cc5e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cc62:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cc64:	4646      	mov	r6, r8
 800cc66:	9a08      	ldr	r2, [sp, #32]
 800cc68:	2101      	movs	r1, #1
 800cc6a:	441a      	add	r2, r3
 800cc6c:	4658      	mov	r0, fp
 800cc6e:	4498      	add	r8, r3
 800cc70:	9208      	str	r2, [sp, #32]
 800cc72:	f000 ffb7 	bl	800dbe4 <__i2b>
 800cc76:	4605      	mov	r5, r0
 800cc78:	b15e      	cbz	r6, 800cc92 <_dtoa_r+0x74a>
 800cc7a:	9b08      	ldr	r3, [sp, #32]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	dd08      	ble.n	800cc92 <_dtoa_r+0x74a>
 800cc80:	42b3      	cmp	r3, r6
 800cc82:	9a08      	ldr	r2, [sp, #32]
 800cc84:	bfa8      	it	ge
 800cc86:	4633      	movge	r3, r6
 800cc88:	eba8 0803 	sub.w	r8, r8, r3
 800cc8c:	1af6      	subs	r6, r6, r3
 800cc8e:	1ad3      	subs	r3, r2, r3
 800cc90:	9308      	str	r3, [sp, #32]
 800cc92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc94:	b1f3      	cbz	r3, 800ccd4 <_dtoa_r+0x78c>
 800cc96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	f000 80b7 	beq.w	800ce0c <_dtoa_r+0x8c4>
 800cc9e:	b18c      	cbz	r4, 800ccc4 <_dtoa_r+0x77c>
 800cca0:	4629      	mov	r1, r5
 800cca2:	4622      	mov	r2, r4
 800cca4:	4658      	mov	r0, fp
 800cca6:	f001 f85d 	bl	800dd64 <__pow5mult>
 800ccaa:	464a      	mov	r2, r9
 800ccac:	4601      	mov	r1, r0
 800ccae:	4605      	mov	r5, r0
 800ccb0:	4658      	mov	r0, fp
 800ccb2:	f000 ffad 	bl	800dc10 <__multiply>
 800ccb6:	4649      	mov	r1, r9
 800ccb8:	9004      	str	r0, [sp, #16]
 800ccba:	4658      	mov	r0, fp
 800ccbc:	f000 fe94 	bl	800d9e8 <_Bfree>
 800ccc0:	9b04      	ldr	r3, [sp, #16]
 800ccc2:	4699      	mov	r9, r3
 800ccc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccc6:	1b1a      	subs	r2, r3, r4
 800ccc8:	d004      	beq.n	800ccd4 <_dtoa_r+0x78c>
 800ccca:	4649      	mov	r1, r9
 800cccc:	4658      	mov	r0, fp
 800ccce:	f001 f849 	bl	800dd64 <__pow5mult>
 800ccd2:	4681      	mov	r9, r0
 800ccd4:	2101      	movs	r1, #1
 800ccd6:	4658      	mov	r0, fp
 800ccd8:	f000 ff84 	bl	800dbe4 <__i2b>
 800ccdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ccde:	4604      	mov	r4, r0
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	f000 81cf 	beq.w	800d084 <_dtoa_r+0xb3c>
 800cce6:	461a      	mov	r2, r3
 800cce8:	4601      	mov	r1, r0
 800ccea:	4658      	mov	r0, fp
 800ccec:	f001 f83a 	bl	800dd64 <__pow5mult>
 800ccf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccf2:	2b01      	cmp	r3, #1
 800ccf4:	4604      	mov	r4, r0
 800ccf6:	f300 8095 	bgt.w	800ce24 <_dtoa_r+0x8dc>
 800ccfa:	9b02      	ldr	r3, [sp, #8]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	f040 8087 	bne.w	800ce10 <_dtoa_r+0x8c8>
 800cd02:	9b03      	ldr	r3, [sp, #12]
 800cd04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	f040 8089 	bne.w	800ce20 <_dtoa_r+0x8d8>
 800cd0e:	9b03      	ldr	r3, [sp, #12]
 800cd10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cd14:	0d1b      	lsrs	r3, r3, #20
 800cd16:	051b      	lsls	r3, r3, #20
 800cd18:	b12b      	cbz	r3, 800cd26 <_dtoa_r+0x7de>
 800cd1a:	9b08      	ldr	r3, [sp, #32]
 800cd1c:	3301      	adds	r3, #1
 800cd1e:	9308      	str	r3, [sp, #32]
 800cd20:	f108 0801 	add.w	r8, r8, #1
 800cd24:	2301      	movs	r3, #1
 800cd26:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	f000 81b0 	beq.w	800d090 <_dtoa_r+0xb48>
 800cd30:	6923      	ldr	r3, [r4, #16]
 800cd32:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cd36:	6918      	ldr	r0, [r3, #16]
 800cd38:	f000 ff08 	bl	800db4c <__hi0bits>
 800cd3c:	f1c0 0020 	rsb	r0, r0, #32
 800cd40:	9b08      	ldr	r3, [sp, #32]
 800cd42:	4418      	add	r0, r3
 800cd44:	f010 001f 	ands.w	r0, r0, #31
 800cd48:	d077      	beq.n	800ce3a <_dtoa_r+0x8f2>
 800cd4a:	f1c0 0320 	rsb	r3, r0, #32
 800cd4e:	2b04      	cmp	r3, #4
 800cd50:	dd6b      	ble.n	800ce2a <_dtoa_r+0x8e2>
 800cd52:	9b08      	ldr	r3, [sp, #32]
 800cd54:	f1c0 001c 	rsb	r0, r0, #28
 800cd58:	4403      	add	r3, r0
 800cd5a:	4480      	add	r8, r0
 800cd5c:	4406      	add	r6, r0
 800cd5e:	9308      	str	r3, [sp, #32]
 800cd60:	f1b8 0f00 	cmp.w	r8, #0
 800cd64:	dd05      	ble.n	800cd72 <_dtoa_r+0x82a>
 800cd66:	4649      	mov	r1, r9
 800cd68:	4642      	mov	r2, r8
 800cd6a:	4658      	mov	r0, fp
 800cd6c:	f001 f854 	bl	800de18 <__lshift>
 800cd70:	4681      	mov	r9, r0
 800cd72:	9b08      	ldr	r3, [sp, #32]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	dd05      	ble.n	800cd84 <_dtoa_r+0x83c>
 800cd78:	4621      	mov	r1, r4
 800cd7a:	461a      	mov	r2, r3
 800cd7c:	4658      	mov	r0, fp
 800cd7e:	f001 f84b 	bl	800de18 <__lshift>
 800cd82:	4604      	mov	r4, r0
 800cd84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d059      	beq.n	800ce3e <_dtoa_r+0x8f6>
 800cd8a:	4621      	mov	r1, r4
 800cd8c:	4648      	mov	r0, r9
 800cd8e:	f001 f8af 	bl	800def0 <__mcmp>
 800cd92:	2800      	cmp	r0, #0
 800cd94:	da53      	bge.n	800ce3e <_dtoa_r+0x8f6>
 800cd96:	1e7b      	subs	r3, r7, #1
 800cd98:	9304      	str	r3, [sp, #16]
 800cd9a:	4649      	mov	r1, r9
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	220a      	movs	r2, #10
 800cda0:	4658      	mov	r0, fp
 800cda2:	f000 fe43 	bl	800da2c <__multadd>
 800cda6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cda8:	4681      	mov	r9, r0
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	f000 8172 	beq.w	800d094 <_dtoa_r+0xb4c>
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	4629      	mov	r1, r5
 800cdb4:	220a      	movs	r2, #10
 800cdb6:	4658      	mov	r0, fp
 800cdb8:	f000 fe38 	bl	800da2c <__multadd>
 800cdbc:	9b00      	ldr	r3, [sp, #0]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	4605      	mov	r5, r0
 800cdc2:	dc67      	bgt.n	800ce94 <_dtoa_r+0x94c>
 800cdc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdc6:	2b02      	cmp	r3, #2
 800cdc8:	dc41      	bgt.n	800ce4e <_dtoa_r+0x906>
 800cdca:	e063      	b.n	800ce94 <_dtoa_r+0x94c>
 800cdcc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cdce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cdd2:	e746      	b.n	800cc62 <_dtoa_r+0x71a>
 800cdd4:	9b07      	ldr	r3, [sp, #28]
 800cdd6:	1e5c      	subs	r4, r3, #1
 800cdd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdda:	42a3      	cmp	r3, r4
 800cddc:	bfbf      	itttt	lt
 800cdde:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800cde0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800cde2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800cde4:	1ae3      	sublt	r3, r4, r3
 800cde6:	bfb4      	ite	lt
 800cde8:	18d2      	addlt	r2, r2, r3
 800cdea:	1b1c      	subge	r4, r3, r4
 800cdec:	9b07      	ldr	r3, [sp, #28]
 800cdee:	bfbc      	itt	lt
 800cdf0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800cdf2:	2400      	movlt	r4, #0
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	bfb5      	itete	lt
 800cdf8:	eba8 0603 	sublt.w	r6, r8, r3
 800cdfc:	9b07      	ldrge	r3, [sp, #28]
 800cdfe:	2300      	movlt	r3, #0
 800ce00:	4646      	movge	r6, r8
 800ce02:	e730      	b.n	800cc66 <_dtoa_r+0x71e>
 800ce04:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ce06:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ce08:	4646      	mov	r6, r8
 800ce0a:	e735      	b.n	800cc78 <_dtoa_r+0x730>
 800ce0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ce0e:	e75c      	b.n	800ccca <_dtoa_r+0x782>
 800ce10:	2300      	movs	r3, #0
 800ce12:	e788      	b.n	800cd26 <_dtoa_r+0x7de>
 800ce14:	3fe00000 	.word	0x3fe00000
 800ce18:	40240000 	.word	0x40240000
 800ce1c:	40140000 	.word	0x40140000
 800ce20:	9b02      	ldr	r3, [sp, #8]
 800ce22:	e780      	b.n	800cd26 <_dtoa_r+0x7de>
 800ce24:	2300      	movs	r3, #0
 800ce26:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce28:	e782      	b.n	800cd30 <_dtoa_r+0x7e8>
 800ce2a:	d099      	beq.n	800cd60 <_dtoa_r+0x818>
 800ce2c:	9a08      	ldr	r2, [sp, #32]
 800ce2e:	331c      	adds	r3, #28
 800ce30:	441a      	add	r2, r3
 800ce32:	4498      	add	r8, r3
 800ce34:	441e      	add	r6, r3
 800ce36:	9208      	str	r2, [sp, #32]
 800ce38:	e792      	b.n	800cd60 <_dtoa_r+0x818>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	e7f6      	b.n	800ce2c <_dtoa_r+0x8e4>
 800ce3e:	9b07      	ldr	r3, [sp, #28]
 800ce40:	9704      	str	r7, [sp, #16]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	dc20      	bgt.n	800ce88 <_dtoa_r+0x940>
 800ce46:	9300      	str	r3, [sp, #0]
 800ce48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce4a:	2b02      	cmp	r3, #2
 800ce4c:	dd1e      	ble.n	800ce8c <_dtoa_r+0x944>
 800ce4e:	9b00      	ldr	r3, [sp, #0]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	f47f aec0 	bne.w	800cbd6 <_dtoa_r+0x68e>
 800ce56:	4621      	mov	r1, r4
 800ce58:	2205      	movs	r2, #5
 800ce5a:	4658      	mov	r0, fp
 800ce5c:	f000 fde6 	bl	800da2c <__multadd>
 800ce60:	4601      	mov	r1, r0
 800ce62:	4604      	mov	r4, r0
 800ce64:	4648      	mov	r0, r9
 800ce66:	f001 f843 	bl	800def0 <__mcmp>
 800ce6a:	2800      	cmp	r0, #0
 800ce6c:	f77f aeb3 	ble.w	800cbd6 <_dtoa_r+0x68e>
 800ce70:	4656      	mov	r6, sl
 800ce72:	2331      	movs	r3, #49	@ 0x31
 800ce74:	f806 3b01 	strb.w	r3, [r6], #1
 800ce78:	9b04      	ldr	r3, [sp, #16]
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	9304      	str	r3, [sp, #16]
 800ce7e:	e6ae      	b.n	800cbde <_dtoa_r+0x696>
 800ce80:	9c07      	ldr	r4, [sp, #28]
 800ce82:	9704      	str	r7, [sp, #16]
 800ce84:	4625      	mov	r5, r4
 800ce86:	e7f3      	b.n	800ce70 <_dtoa_r+0x928>
 800ce88:	9b07      	ldr	r3, [sp, #28]
 800ce8a:	9300      	str	r3, [sp, #0]
 800ce8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	f000 8104 	beq.w	800d09c <_dtoa_r+0xb54>
 800ce94:	2e00      	cmp	r6, #0
 800ce96:	dd05      	ble.n	800cea4 <_dtoa_r+0x95c>
 800ce98:	4629      	mov	r1, r5
 800ce9a:	4632      	mov	r2, r6
 800ce9c:	4658      	mov	r0, fp
 800ce9e:	f000 ffbb 	bl	800de18 <__lshift>
 800cea2:	4605      	mov	r5, r0
 800cea4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d05a      	beq.n	800cf60 <_dtoa_r+0xa18>
 800ceaa:	6869      	ldr	r1, [r5, #4]
 800ceac:	4658      	mov	r0, fp
 800ceae:	f000 fd5b 	bl	800d968 <_Balloc>
 800ceb2:	4606      	mov	r6, r0
 800ceb4:	b928      	cbnz	r0, 800cec2 <_dtoa_r+0x97a>
 800ceb6:	4b84      	ldr	r3, [pc, #528]	@ (800d0c8 <_dtoa_r+0xb80>)
 800ceb8:	4602      	mov	r2, r0
 800ceba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cebe:	f7ff bb5a 	b.w	800c576 <_dtoa_r+0x2e>
 800cec2:	692a      	ldr	r2, [r5, #16]
 800cec4:	3202      	adds	r2, #2
 800cec6:	0092      	lsls	r2, r2, #2
 800cec8:	f105 010c 	add.w	r1, r5, #12
 800cecc:	300c      	adds	r0, #12
 800cece:	f7ff fa94 	bl	800c3fa <memcpy>
 800ced2:	2201      	movs	r2, #1
 800ced4:	4631      	mov	r1, r6
 800ced6:	4658      	mov	r0, fp
 800ced8:	f000 ff9e 	bl	800de18 <__lshift>
 800cedc:	f10a 0301 	add.w	r3, sl, #1
 800cee0:	9307      	str	r3, [sp, #28]
 800cee2:	9b00      	ldr	r3, [sp, #0]
 800cee4:	4453      	add	r3, sl
 800cee6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cee8:	9b02      	ldr	r3, [sp, #8]
 800ceea:	f003 0301 	and.w	r3, r3, #1
 800ceee:	462f      	mov	r7, r5
 800cef0:	930a      	str	r3, [sp, #40]	@ 0x28
 800cef2:	4605      	mov	r5, r0
 800cef4:	9b07      	ldr	r3, [sp, #28]
 800cef6:	4621      	mov	r1, r4
 800cef8:	3b01      	subs	r3, #1
 800cefa:	4648      	mov	r0, r9
 800cefc:	9300      	str	r3, [sp, #0]
 800cefe:	f7ff fa99 	bl	800c434 <quorem>
 800cf02:	4639      	mov	r1, r7
 800cf04:	9002      	str	r0, [sp, #8]
 800cf06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cf0a:	4648      	mov	r0, r9
 800cf0c:	f000 fff0 	bl	800def0 <__mcmp>
 800cf10:	462a      	mov	r2, r5
 800cf12:	9008      	str	r0, [sp, #32]
 800cf14:	4621      	mov	r1, r4
 800cf16:	4658      	mov	r0, fp
 800cf18:	f001 f806 	bl	800df28 <__mdiff>
 800cf1c:	68c2      	ldr	r2, [r0, #12]
 800cf1e:	4606      	mov	r6, r0
 800cf20:	bb02      	cbnz	r2, 800cf64 <_dtoa_r+0xa1c>
 800cf22:	4601      	mov	r1, r0
 800cf24:	4648      	mov	r0, r9
 800cf26:	f000 ffe3 	bl	800def0 <__mcmp>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	4631      	mov	r1, r6
 800cf2e:	4658      	mov	r0, fp
 800cf30:	920e      	str	r2, [sp, #56]	@ 0x38
 800cf32:	f000 fd59 	bl	800d9e8 <_Bfree>
 800cf36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf3a:	9e07      	ldr	r6, [sp, #28]
 800cf3c:	ea43 0102 	orr.w	r1, r3, r2
 800cf40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf42:	4319      	orrs	r1, r3
 800cf44:	d110      	bne.n	800cf68 <_dtoa_r+0xa20>
 800cf46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cf4a:	d029      	beq.n	800cfa0 <_dtoa_r+0xa58>
 800cf4c:	9b08      	ldr	r3, [sp, #32]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	dd02      	ble.n	800cf58 <_dtoa_r+0xa10>
 800cf52:	9b02      	ldr	r3, [sp, #8]
 800cf54:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800cf58:	9b00      	ldr	r3, [sp, #0]
 800cf5a:	f883 8000 	strb.w	r8, [r3]
 800cf5e:	e63f      	b.n	800cbe0 <_dtoa_r+0x698>
 800cf60:	4628      	mov	r0, r5
 800cf62:	e7bb      	b.n	800cedc <_dtoa_r+0x994>
 800cf64:	2201      	movs	r2, #1
 800cf66:	e7e1      	b.n	800cf2c <_dtoa_r+0x9e4>
 800cf68:	9b08      	ldr	r3, [sp, #32]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	db04      	blt.n	800cf78 <_dtoa_r+0xa30>
 800cf6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cf70:	430b      	orrs	r3, r1
 800cf72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cf74:	430b      	orrs	r3, r1
 800cf76:	d120      	bne.n	800cfba <_dtoa_r+0xa72>
 800cf78:	2a00      	cmp	r2, #0
 800cf7a:	dded      	ble.n	800cf58 <_dtoa_r+0xa10>
 800cf7c:	4649      	mov	r1, r9
 800cf7e:	2201      	movs	r2, #1
 800cf80:	4658      	mov	r0, fp
 800cf82:	f000 ff49 	bl	800de18 <__lshift>
 800cf86:	4621      	mov	r1, r4
 800cf88:	4681      	mov	r9, r0
 800cf8a:	f000 ffb1 	bl	800def0 <__mcmp>
 800cf8e:	2800      	cmp	r0, #0
 800cf90:	dc03      	bgt.n	800cf9a <_dtoa_r+0xa52>
 800cf92:	d1e1      	bne.n	800cf58 <_dtoa_r+0xa10>
 800cf94:	f018 0f01 	tst.w	r8, #1
 800cf98:	d0de      	beq.n	800cf58 <_dtoa_r+0xa10>
 800cf9a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cf9e:	d1d8      	bne.n	800cf52 <_dtoa_r+0xa0a>
 800cfa0:	9a00      	ldr	r2, [sp, #0]
 800cfa2:	2339      	movs	r3, #57	@ 0x39
 800cfa4:	7013      	strb	r3, [r2, #0]
 800cfa6:	4633      	mov	r3, r6
 800cfa8:	461e      	mov	r6, r3
 800cfaa:	3b01      	subs	r3, #1
 800cfac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cfb0:	2a39      	cmp	r2, #57	@ 0x39
 800cfb2:	d052      	beq.n	800d05a <_dtoa_r+0xb12>
 800cfb4:	3201      	adds	r2, #1
 800cfb6:	701a      	strb	r2, [r3, #0]
 800cfb8:	e612      	b.n	800cbe0 <_dtoa_r+0x698>
 800cfba:	2a00      	cmp	r2, #0
 800cfbc:	dd07      	ble.n	800cfce <_dtoa_r+0xa86>
 800cfbe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cfc2:	d0ed      	beq.n	800cfa0 <_dtoa_r+0xa58>
 800cfc4:	9a00      	ldr	r2, [sp, #0]
 800cfc6:	f108 0301 	add.w	r3, r8, #1
 800cfca:	7013      	strb	r3, [r2, #0]
 800cfcc:	e608      	b.n	800cbe0 <_dtoa_r+0x698>
 800cfce:	9b07      	ldr	r3, [sp, #28]
 800cfd0:	9a07      	ldr	r2, [sp, #28]
 800cfd2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800cfd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d028      	beq.n	800d02e <_dtoa_r+0xae6>
 800cfdc:	4649      	mov	r1, r9
 800cfde:	2300      	movs	r3, #0
 800cfe0:	220a      	movs	r2, #10
 800cfe2:	4658      	mov	r0, fp
 800cfe4:	f000 fd22 	bl	800da2c <__multadd>
 800cfe8:	42af      	cmp	r7, r5
 800cfea:	4681      	mov	r9, r0
 800cfec:	f04f 0300 	mov.w	r3, #0
 800cff0:	f04f 020a 	mov.w	r2, #10
 800cff4:	4639      	mov	r1, r7
 800cff6:	4658      	mov	r0, fp
 800cff8:	d107      	bne.n	800d00a <_dtoa_r+0xac2>
 800cffa:	f000 fd17 	bl	800da2c <__multadd>
 800cffe:	4607      	mov	r7, r0
 800d000:	4605      	mov	r5, r0
 800d002:	9b07      	ldr	r3, [sp, #28]
 800d004:	3301      	adds	r3, #1
 800d006:	9307      	str	r3, [sp, #28]
 800d008:	e774      	b.n	800cef4 <_dtoa_r+0x9ac>
 800d00a:	f000 fd0f 	bl	800da2c <__multadd>
 800d00e:	4629      	mov	r1, r5
 800d010:	4607      	mov	r7, r0
 800d012:	2300      	movs	r3, #0
 800d014:	220a      	movs	r2, #10
 800d016:	4658      	mov	r0, fp
 800d018:	f000 fd08 	bl	800da2c <__multadd>
 800d01c:	4605      	mov	r5, r0
 800d01e:	e7f0      	b.n	800d002 <_dtoa_r+0xaba>
 800d020:	9b00      	ldr	r3, [sp, #0]
 800d022:	2b00      	cmp	r3, #0
 800d024:	bfcc      	ite	gt
 800d026:	461e      	movgt	r6, r3
 800d028:	2601      	movle	r6, #1
 800d02a:	4456      	add	r6, sl
 800d02c:	2700      	movs	r7, #0
 800d02e:	4649      	mov	r1, r9
 800d030:	2201      	movs	r2, #1
 800d032:	4658      	mov	r0, fp
 800d034:	f000 fef0 	bl	800de18 <__lshift>
 800d038:	4621      	mov	r1, r4
 800d03a:	4681      	mov	r9, r0
 800d03c:	f000 ff58 	bl	800def0 <__mcmp>
 800d040:	2800      	cmp	r0, #0
 800d042:	dcb0      	bgt.n	800cfa6 <_dtoa_r+0xa5e>
 800d044:	d102      	bne.n	800d04c <_dtoa_r+0xb04>
 800d046:	f018 0f01 	tst.w	r8, #1
 800d04a:	d1ac      	bne.n	800cfa6 <_dtoa_r+0xa5e>
 800d04c:	4633      	mov	r3, r6
 800d04e:	461e      	mov	r6, r3
 800d050:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d054:	2a30      	cmp	r2, #48	@ 0x30
 800d056:	d0fa      	beq.n	800d04e <_dtoa_r+0xb06>
 800d058:	e5c2      	b.n	800cbe0 <_dtoa_r+0x698>
 800d05a:	459a      	cmp	sl, r3
 800d05c:	d1a4      	bne.n	800cfa8 <_dtoa_r+0xa60>
 800d05e:	9b04      	ldr	r3, [sp, #16]
 800d060:	3301      	adds	r3, #1
 800d062:	9304      	str	r3, [sp, #16]
 800d064:	2331      	movs	r3, #49	@ 0x31
 800d066:	f88a 3000 	strb.w	r3, [sl]
 800d06a:	e5b9      	b.n	800cbe0 <_dtoa_r+0x698>
 800d06c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d06e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d0cc <_dtoa_r+0xb84>
 800d072:	b11b      	cbz	r3, 800d07c <_dtoa_r+0xb34>
 800d074:	f10a 0308 	add.w	r3, sl, #8
 800d078:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d07a:	6013      	str	r3, [r2, #0]
 800d07c:	4650      	mov	r0, sl
 800d07e:	b019      	add	sp, #100	@ 0x64
 800d080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d086:	2b01      	cmp	r3, #1
 800d088:	f77f ae37 	ble.w	800ccfa <_dtoa_r+0x7b2>
 800d08c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d08e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d090:	2001      	movs	r0, #1
 800d092:	e655      	b.n	800cd40 <_dtoa_r+0x7f8>
 800d094:	9b00      	ldr	r3, [sp, #0]
 800d096:	2b00      	cmp	r3, #0
 800d098:	f77f aed6 	ble.w	800ce48 <_dtoa_r+0x900>
 800d09c:	4656      	mov	r6, sl
 800d09e:	4621      	mov	r1, r4
 800d0a0:	4648      	mov	r0, r9
 800d0a2:	f7ff f9c7 	bl	800c434 <quorem>
 800d0a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d0aa:	f806 8b01 	strb.w	r8, [r6], #1
 800d0ae:	9b00      	ldr	r3, [sp, #0]
 800d0b0:	eba6 020a 	sub.w	r2, r6, sl
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	ddb3      	ble.n	800d020 <_dtoa_r+0xad8>
 800d0b8:	4649      	mov	r1, r9
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	220a      	movs	r2, #10
 800d0be:	4658      	mov	r0, fp
 800d0c0:	f000 fcb4 	bl	800da2c <__multadd>
 800d0c4:	4681      	mov	r9, r0
 800d0c6:	e7ea      	b.n	800d09e <_dtoa_r+0xb56>
 800d0c8:	08010633 	.word	0x08010633
 800d0cc:	080105b7 	.word	0x080105b7

0800d0d0 <_free_r>:
 800d0d0:	b538      	push	{r3, r4, r5, lr}
 800d0d2:	4605      	mov	r5, r0
 800d0d4:	2900      	cmp	r1, #0
 800d0d6:	d041      	beq.n	800d15c <_free_r+0x8c>
 800d0d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0dc:	1f0c      	subs	r4, r1, #4
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	bfb8      	it	lt
 800d0e2:	18e4      	addlt	r4, r4, r3
 800d0e4:	f000 fc34 	bl	800d950 <__malloc_lock>
 800d0e8:	4a1d      	ldr	r2, [pc, #116]	@ (800d160 <_free_r+0x90>)
 800d0ea:	6813      	ldr	r3, [r2, #0]
 800d0ec:	b933      	cbnz	r3, 800d0fc <_free_r+0x2c>
 800d0ee:	6063      	str	r3, [r4, #4]
 800d0f0:	6014      	str	r4, [r2, #0]
 800d0f2:	4628      	mov	r0, r5
 800d0f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0f8:	f000 bc30 	b.w	800d95c <__malloc_unlock>
 800d0fc:	42a3      	cmp	r3, r4
 800d0fe:	d908      	bls.n	800d112 <_free_r+0x42>
 800d100:	6820      	ldr	r0, [r4, #0]
 800d102:	1821      	adds	r1, r4, r0
 800d104:	428b      	cmp	r3, r1
 800d106:	bf01      	itttt	eq
 800d108:	6819      	ldreq	r1, [r3, #0]
 800d10a:	685b      	ldreq	r3, [r3, #4]
 800d10c:	1809      	addeq	r1, r1, r0
 800d10e:	6021      	streq	r1, [r4, #0]
 800d110:	e7ed      	b.n	800d0ee <_free_r+0x1e>
 800d112:	461a      	mov	r2, r3
 800d114:	685b      	ldr	r3, [r3, #4]
 800d116:	b10b      	cbz	r3, 800d11c <_free_r+0x4c>
 800d118:	42a3      	cmp	r3, r4
 800d11a:	d9fa      	bls.n	800d112 <_free_r+0x42>
 800d11c:	6811      	ldr	r1, [r2, #0]
 800d11e:	1850      	adds	r0, r2, r1
 800d120:	42a0      	cmp	r0, r4
 800d122:	d10b      	bne.n	800d13c <_free_r+0x6c>
 800d124:	6820      	ldr	r0, [r4, #0]
 800d126:	4401      	add	r1, r0
 800d128:	1850      	adds	r0, r2, r1
 800d12a:	4283      	cmp	r3, r0
 800d12c:	6011      	str	r1, [r2, #0]
 800d12e:	d1e0      	bne.n	800d0f2 <_free_r+0x22>
 800d130:	6818      	ldr	r0, [r3, #0]
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	6053      	str	r3, [r2, #4]
 800d136:	4408      	add	r0, r1
 800d138:	6010      	str	r0, [r2, #0]
 800d13a:	e7da      	b.n	800d0f2 <_free_r+0x22>
 800d13c:	d902      	bls.n	800d144 <_free_r+0x74>
 800d13e:	230c      	movs	r3, #12
 800d140:	602b      	str	r3, [r5, #0]
 800d142:	e7d6      	b.n	800d0f2 <_free_r+0x22>
 800d144:	6820      	ldr	r0, [r4, #0]
 800d146:	1821      	adds	r1, r4, r0
 800d148:	428b      	cmp	r3, r1
 800d14a:	bf04      	itt	eq
 800d14c:	6819      	ldreq	r1, [r3, #0]
 800d14e:	685b      	ldreq	r3, [r3, #4]
 800d150:	6063      	str	r3, [r4, #4]
 800d152:	bf04      	itt	eq
 800d154:	1809      	addeq	r1, r1, r0
 800d156:	6021      	streq	r1, [r4, #0]
 800d158:	6054      	str	r4, [r2, #4]
 800d15a:	e7ca      	b.n	800d0f2 <_free_r+0x22>
 800d15c:	bd38      	pop	{r3, r4, r5, pc}
 800d15e:	bf00      	nop
 800d160:	20000b54 	.word	0x20000b54

0800d164 <rshift>:
 800d164:	6903      	ldr	r3, [r0, #16]
 800d166:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d16a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d16e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d172:	f100 0414 	add.w	r4, r0, #20
 800d176:	dd45      	ble.n	800d204 <rshift+0xa0>
 800d178:	f011 011f 	ands.w	r1, r1, #31
 800d17c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d180:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d184:	d10c      	bne.n	800d1a0 <rshift+0x3c>
 800d186:	f100 0710 	add.w	r7, r0, #16
 800d18a:	4629      	mov	r1, r5
 800d18c:	42b1      	cmp	r1, r6
 800d18e:	d334      	bcc.n	800d1fa <rshift+0x96>
 800d190:	1a9b      	subs	r3, r3, r2
 800d192:	009b      	lsls	r3, r3, #2
 800d194:	1eea      	subs	r2, r5, #3
 800d196:	4296      	cmp	r6, r2
 800d198:	bf38      	it	cc
 800d19a:	2300      	movcc	r3, #0
 800d19c:	4423      	add	r3, r4
 800d19e:	e015      	b.n	800d1cc <rshift+0x68>
 800d1a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d1a4:	f1c1 0820 	rsb	r8, r1, #32
 800d1a8:	40cf      	lsrs	r7, r1
 800d1aa:	f105 0e04 	add.w	lr, r5, #4
 800d1ae:	46a1      	mov	r9, r4
 800d1b0:	4576      	cmp	r6, lr
 800d1b2:	46f4      	mov	ip, lr
 800d1b4:	d815      	bhi.n	800d1e2 <rshift+0x7e>
 800d1b6:	1a9a      	subs	r2, r3, r2
 800d1b8:	0092      	lsls	r2, r2, #2
 800d1ba:	3a04      	subs	r2, #4
 800d1bc:	3501      	adds	r5, #1
 800d1be:	42ae      	cmp	r6, r5
 800d1c0:	bf38      	it	cc
 800d1c2:	2200      	movcc	r2, #0
 800d1c4:	18a3      	adds	r3, r4, r2
 800d1c6:	50a7      	str	r7, [r4, r2]
 800d1c8:	b107      	cbz	r7, 800d1cc <rshift+0x68>
 800d1ca:	3304      	adds	r3, #4
 800d1cc:	1b1a      	subs	r2, r3, r4
 800d1ce:	42a3      	cmp	r3, r4
 800d1d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d1d4:	bf08      	it	eq
 800d1d6:	2300      	moveq	r3, #0
 800d1d8:	6102      	str	r2, [r0, #16]
 800d1da:	bf08      	it	eq
 800d1dc:	6143      	streq	r3, [r0, #20]
 800d1de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1e2:	f8dc c000 	ldr.w	ip, [ip]
 800d1e6:	fa0c fc08 	lsl.w	ip, ip, r8
 800d1ea:	ea4c 0707 	orr.w	r7, ip, r7
 800d1ee:	f849 7b04 	str.w	r7, [r9], #4
 800d1f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d1f6:	40cf      	lsrs	r7, r1
 800d1f8:	e7da      	b.n	800d1b0 <rshift+0x4c>
 800d1fa:	f851 cb04 	ldr.w	ip, [r1], #4
 800d1fe:	f847 cf04 	str.w	ip, [r7, #4]!
 800d202:	e7c3      	b.n	800d18c <rshift+0x28>
 800d204:	4623      	mov	r3, r4
 800d206:	e7e1      	b.n	800d1cc <rshift+0x68>

0800d208 <__hexdig_fun>:
 800d208:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d20c:	2b09      	cmp	r3, #9
 800d20e:	d802      	bhi.n	800d216 <__hexdig_fun+0xe>
 800d210:	3820      	subs	r0, #32
 800d212:	b2c0      	uxtb	r0, r0
 800d214:	4770      	bx	lr
 800d216:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d21a:	2b05      	cmp	r3, #5
 800d21c:	d801      	bhi.n	800d222 <__hexdig_fun+0x1a>
 800d21e:	3847      	subs	r0, #71	@ 0x47
 800d220:	e7f7      	b.n	800d212 <__hexdig_fun+0xa>
 800d222:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d226:	2b05      	cmp	r3, #5
 800d228:	d801      	bhi.n	800d22e <__hexdig_fun+0x26>
 800d22a:	3827      	subs	r0, #39	@ 0x27
 800d22c:	e7f1      	b.n	800d212 <__hexdig_fun+0xa>
 800d22e:	2000      	movs	r0, #0
 800d230:	4770      	bx	lr
	...

0800d234 <__gethex>:
 800d234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d238:	b085      	sub	sp, #20
 800d23a:	468a      	mov	sl, r1
 800d23c:	9302      	str	r3, [sp, #8]
 800d23e:	680b      	ldr	r3, [r1, #0]
 800d240:	9001      	str	r0, [sp, #4]
 800d242:	4690      	mov	r8, r2
 800d244:	1c9c      	adds	r4, r3, #2
 800d246:	46a1      	mov	r9, r4
 800d248:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d24c:	2830      	cmp	r0, #48	@ 0x30
 800d24e:	d0fa      	beq.n	800d246 <__gethex+0x12>
 800d250:	eba9 0303 	sub.w	r3, r9, r3
 800d254:	f1a3 0b02 	sub.w	fp, r3, #2
 800d258:	f7ff ffd6 	bl	800d208 <__hexdig_fun>
 800d25c:	4605      	mov	r5, r0
 800d25e:	2800      	cmp	r0, #0
 800d260:	d168      	bne.n	800d334 <__gethex+0x100>
 800d262:	49a0      	ldr	r1, [pc, #640]	@ (800d4e4 <__gethex+0x2b0>)
 800d264:	2201      	movs	r2, #1
 800d266:	4648      	mov	r0, r9
 800d268:	f7ff f82b 	bl	800c2c2 <strncmp>
 800d26c:	4607      	mov	r7, r0
 800d26e:	2800      	cmp	r0, #0
 800d270:	d167      	bne.n	800d342 <__gethex+0x10e>
 800d272:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d276:	4626      	mov	r6, r4
 800d278:	f7ff ffc6 	bl	800d208 <__hexdig_fun>
 800d27c:	2800      	cmp	r0, #0
 800d27e:	d062      	beq.n	800d346 <__gethex+0x112>
 800d280:	4623      	mov	r3, r4
 800d282:	7818      	ldrb	r0, [r3, #0]
 800d284:	2830      	cmp	r0, #48	@ 0x30
 800d286:	4699      	mov	r9, r3
 800d288:	f103 0301 	add.w	r3, r3, #1
 800d28c:	d0f9      	beq.n	800d282 <__gethex+0x4e>
 800d28e:	f7ff ffbb 	bl	800d208 <__hexdig_fun>
 800d292:	fab0 f580 	clz	r5, r0
 800d296:	096d      	lsrs	r5, r5, #5
 800d298:	f04f 0b01 	mov.w	fp, #1
 800d29c:	464a      	mov	r2, r9
 800d29e:	4616      	mov	r6, r2
 800d2a0:	3201      	adds	r2, #1
 800d2a2:	7830      	ldrb	r0, [r6, #0]
 800d2a4:	f7ff ffb0 	bl	800d208 <__hexdig_fun>
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	d1f8      	bne.n	800d29e <__gethex+0x6a>
 800d2ac:	498d      	ldr	r1, [pc, #564]	@ (800d4e4 <__gethex+0x2b0>)
 800d2ae:	2201      	movs	r2, #1
 800d2b0:	4630      	mov	r0, r6
 800d2b2:	f7ff f806 	bl	800c2c2 <strncmp>
 800d2b6:	2800      	cmp	r0, #0
 800d2b8:	d13f      	bne.n	800d33a <__gethex+0x106>
 800d2ba:	b944      	cbnz	r4, 800d2ce <__gethex+0x9a>
 800d2bc:	1c74      	adds	r4, r6, #1
 800d2be:	4622      	mov	r2, r4
 800d2c0:	4616      	mov	r6, r2
 800d2c2:	3201      	adds	r2, #1
 800d2c4:	7830      	ldrb	r0, [r6, #0]
 800d2c6:	f7ff ff9f 	bl	800d208 <__hexdig_fun>
 800d2ca:	2800      	cmp	r0, #0
 800d2cc:	d1f8      	bne.n	800d2c0 <__gethex+0x8c>
 800d2ce:	1ba4      	subs	r4, r4, r6
 800d2d0:	00a7      	lsls	r7, r4, #2
 800d2d2:	7833      	ldrb	r3, [r6, #0]
 800d2d4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d2d8:	2b50      	cmp	r3, #80	@ 0x50
 800d2da:	d13e      	bne.n	800d35a <__gethex+0x126>
 800d2dc:	7873      	ldrb	r3, [r6, #1]
 800d2de:	2b2b      	cmp	r3, #43	@ 0x2b
 800d2e0:	d033      	beq.n	800d34a <__gethex+0x116>
 800d2e2:	2b2d      	cmp	r3, #45	@ 0x2d
 800d2e4:	d034      	beq.n	800d350 <__gethex+0x11c>
 800d2e6:	1c71      	adds	r1, r6, #1
 800d2e8:	2400      	movs	r4, #0
 800d2ea:	7808      	ldrb	r0, [r1, #0]
 800d2ec:	f7ff ff8c 	bl	800d208 <__hexdig_fun>
 800d2f0:	1e43      	subs	r3, r0, #1
 800d2f2:	b2db      	uxtb	r3, r3
 800d2f4:	2b18      	cmp	r3, #24
 800d2f6:	d830      	bhi.n	800d35a <__gethex+0x126>
 800d2f8:	f1a0 0210 	sub.w	r2, r0, #16
 800d2fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d300:	f7ff ff82 	bl	800d208 <__hexdig_fun>
 800d304:	f100 3cff 	add.w	ip, r0, #4294967295
 800d308:	fa5f fc8c 	uxtb.w	ip, ip
 800d30c:	f1bc 0f18 	cmp.w	ip, #24
 800d310:	f04f 030a 	mov.w	r3, #10
 800d314:	d91e      	bls.n	800d354 <__gethex+0x120>
 800d316:	b104      	cbz	r4, 800d31a <__gethex+0xe6>
 800d318:	4252      	negs	r2, r2
 800d31a:	4417      	add	r7, r2
 800d31c:	f8ca 1000 	str.w	r1, [sl]
 800d320:	b1ed      	cbz	r5, 800d35e <__gethex+0x12a>
 800d322:	f1bb 0f00 	cmp.w	fp, #0
 800d326:	bf0c      	ite	eq
 800d328:	2506      	moveq	r5, #6
 800d32a:	2500      	movne	r5, #0
 800d32c:	4628      	mov	r0, r5
 800d32e:	b005      	add	sp, #20
 800d330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d334:	2500      	movs	r5, #0
 800d336:	462c      	mov	r4, r5
 800d338:	e7b0      	b.n	800d29c <__gethex+0x68>
 800d33a:	2c00      	cmp	r4, #0
 800d33c:	d1c7      	bne.n	800d2ce <__gethex+0x9a>
 800d33e:	4627      	mov	r7, r4
 800d340:	e7c7      	b.n	800d2d2 <__gethex+0x9e>
 800d342:	464e      	mov	r6, r9
 800d344:	462f      	mov	r7, r5
 800d346:	2501      	movs	r5, #1
 800d348:	e7c3      	b.n	800d2d2 <__gethex+0x9e>
 800d34a:	2400      	movs	r4, #0
 800d34c:	1cb1      	adds	r1, r6, #2
 800d34e:	e7cc      	b.n	800d2ea <__gethex+0xb6>
 800d350:	2401      	movs	r4, #1
 800d352:	e7fb      	b.n	800d34c <__gethex+0x118>
 800d354:	fb03 0002 	mla	r0, r3, r2, r0
 800d358:	e7ce      	b.n	800d2f8 <__gethex+0xc4>
 800d35a:	4631      	mov	r1, r6
 800d35c:	e7de      	b.n	800d31c <__gethex+0xe8>
 800d35e:	eba6 0309 	sub.w	r3, r6, r9
 800d362:	3b01      	subs	r3, #1
 800d364:	4629      	mov	r1, r5
 800d366:	2b07      	cmp	r3, #7
 800d368:	dc0a      	bgt.n	800d380 <__gethex+0x14c>
 800d36a:	9801      	ldr	r0, [sp, #4]
 800d36c:	f000 fafc 	bl	800d968 <_Balloc>
 800d370:	4604      	mov	r4, r0
 800d372:	b940      	cbnz	r0, 800d386 <__gethex+0x152>
 800d374:	4b5c      	ldr	r3, [pc, #368]	@ (800d4e8 <__gethex+0x2b4>)
 800d376:	4602      	mov	r2, r0
 800d378:	21e4      	movs	r1, #228	@ 0xe4
 800d37a:	485c      	ldr	r0, [pc, #368]	@ (800d4ec <__gethex+0x2b8>)
 800d37c:	f001 ffb0 	bl	800f2e0 <__assert_func>
 800d380:	3101      	adds	r1, #1
 800d382:	105b      	asrs	r3, r3, #1
 800d384:	e7ef      	b.n	800d366 <__gethex+0x132>
 800d386:	f100 0a14 	add.w	sl, r0, #20
 800d38a:	2300      	movs	r3, #0
 800d38c:	4655      	mov	r5, sl
 800d38e:	469b      	mov	fp, r3
 800d390:	45b1      	cmp	r9, r6
 800d392:	d337      	bcc.n	800d404 <__gethex+0x1d0>
 800d394:	f845 bb04 	str.w	fp, [r5], #4
 800d398:	eba5 050a 	sub.w	r5, r5, sl
 800d39c:	10ad      	asrs	r5, r5, #2
 800d39e:	6125      	str	r5, [r4, #16]
 800d3a0:	4658      	mov	r0, fp
 800d3a2:	f000 fbd3 	bl	800db4c <__hi0bits>
 800d3a6:	016d      	lsls	r5, r5, #5
 800d3a8:	f8d8 6000 	ldr.w	r6, [r8]
 800d3ac:	1a2d      	subs	r5, r5, r0
 800d3ae:	42b5      	cmp	r5, r6
 800d3b0:	dd54      	ble.n	800d45c <__gethex+0x228>
 800d3b2:	1bad      	subs	r5, r5, r6
 800d3b4:	4629      	mov	r1, r5
 800d3b6:	4620      	mov	r0, r4
 800d3b8:	f000 ff67 	bl	800e28a <__any_on>
 800d3bc:	4681      	mov	r9, r0
 800d3be:	b178      	cbz	r0, 800d3e0 <__gethex+0x1ac>
 800d3c0:	1e6b      	subs	r3, r5, #1
 800d3c2:	1159      	asrs	r1, r3, #5
 800d3c4:	f003 021f 	and.w	r2, r3, #31
 800d3c8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d3cc:	f04f 0901 	mov.w	r9, #1
 800d3d0:	fa09 f202 	lsl.w	r2, r9, r2
 800d3d4:	420a      	tst	r2, r1
 800d3d6:	d003      	beq.n	800d3e0 <__gethex+0x1ac>
 800d3d8:	454b      	cmp	r3, r9
 800d3da:	dc36      	bgt.n	800d44a <__gethex+0x216>
 800d3dc:	f04f 0902 	mov.w	r9, #2
 800d3e0:	4629      	mov	r1, r5
 800d3e2:	4620      	mov	r0, r4
 800d3e4:	f7ff febe 	bl	800d164 <rshift>
 800d3e8:	442f      	add	r7, r5
 800d3ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d3ee:	42bb      	cmp	r3, r7
 800d3f0:	da42      	bge.n	800d478 <__gethex+0x244>
 800d3f2:	9801      	ldr	r0, [sp, #4]
 800d3f4:	4621      	mov	r1, r4
 800d3f6:	f000 faf7 	bl	800d9e8 <_Bfree>
 800d3fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	6013      	str	r3, [r2, #0]
 800d400:	25a3      	movs	r5, #163	@ 0xa3
 800d402:	e793      	b.n	800d32c <__gethex+0xf8>
 800d404:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d408:	2a2e      	cmp	r2, #46	@ 0x2e
 800d40a:	d012      	beq.n	800d432 <__gethex+0x1fe>
 800d40c:	2b20      	cmp	r3, #32
 800d40e:	d104      	bne.n	800d41a <__gethex+0x1e6>
 800d410:	f845 bb04 	str.w	fp, [r5], #4
 800d414:	f04f 0b00 	mov.w	fp, #0
 800d418:	465b      	mov	r3, fp
 800d41a:	7830      	ldrb	r0, [r6, #0]
 800d41c:	9303      	str	r3, [sp, #12]
 800d41e:	f7ff fef3 	bl	800d208 <__hexdig_fun>
 800d422:	9b03      	ldr	r3, [sp, #12]
 800d424:	f000 000f 	and.w	r0, r0, #15
 800d428:	4098      	lsls	r0, r3
 800d42a:	ea4b 0b00 	orr.w	fp, fp, r0
 800d42e:	3304      	adds	r3, #4
 800d430:	e7ae      	b.n	800d390 <__gethex+0x15c>
 800d432:	45b1      	cmp	r9, r6
 800d434:	d8ea      	bhi.n	800d40c <__gethex+0x1d8>
 800d436:	492b      	ldr	r1, [pc, #172]	@ (800d4e4 <__gethex+0x2b0>)
 800d438:	9303      	str	r3, [sp, #12]
 800d43a:	2201      	movs	r2, #1
 800d43c:	4630      	mov	r0, r6
 800d43e:	f7fe ff40 	bl	800c2c2 <strncmp>
 800d442:	9b03      	ldr	r3, [sp, #12]
 800d444:	2800      	cmp	r0, #0
 800d446:	d1e1      	bne.n	800d40c <__gethex+0x1d8>
 800d448:	e7a2      	b.n	800d390 <__gethex+0x15c>
 800d44a:	1ea9      	subs	r1, r5, #2
 800d44c:	4620      	mov	r0, r4
 800d44e:	f000 ff1c 	bl	800e28a <__any_on>
 800d452:	2800      	cmp	r0, #0
 800d454:	d0c2      	beq.n	800d3dc <__gethex+0x1a8>
 800d456:	f04f 0903 	mov.w	r9, #3
 800d45a:	e7c1      	b.n	800d3e0 <__gethex+0x1ac>
 800d45c:	da09      	bge.n	800d472 <__gethex+0x23e>
 800d45e:	1b75      	subs	r5, r6, r5
 800d460:	4621      	mov	r1, r4
 800d462:	9801      	ldr	r0, [sp, #4]
 800d464:	462a      	mov	r2, r5
 800d466:	f000 fcd7 	bl	800de18 <__lshift>
 800d46a:	1b7f      	subs	r7, r7, r5
 800d46c:	4604      	mov	r4, r0
 800d46e:	f100 0a14 	add.w	sl, r0, #20
 800d472:	f04f 0900 	mov.w	r9, #0
 800d476:	e7b8      	b.n	800d3ea <__gethex+0x1b6>
 800d478:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d47c:	42bd      	cmp	r5, r7
 800d47e:	dd6f      	ble.n	800d560 <__gethex+0x32c>
 800d480:	1bed      	subs	r5, r5, r7
 800d482:	42ae      	cmp	r6, r5
 800d484:	dc34      	bgt.n	800d4f0 <__gethex+0x2bc>
 800d486:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d48a:	2b02      	cmp	r3, #2
 800d48c:	d022      	beq.n	800d4d4 <__gethex+0x2a0>
 800d48e:	2b03      	cmp	r3, #3
 800d490:	d024      	beq.n	800d4dc <__gethex+0x2a8>
 800d492:	2b01      	cmp	r3, #1
 800d494:	d115      	bne.n	800d4c2 <__gethex+0x28e>
 800d496:	42ae      	cmp	r6, r5
 800d498:	d113      	bne.n	800d4c2 <__gethex+0x28e>
 800d49a:	2e01      	cmp	r6, #1
 800d49c:	d10b      	bne.n	800d4b6 <__gethex+0x282>
 800d49e:	9a02      	ldr	r2, [sp, #8]
 800d4a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d4a4:	6013      	str	r3, [r2, #0]
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	6123      	str	r3, [r4, #16]
 800d4aa:	f8ca 3000 	str.w	r3, [sl]
 800d4ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4b0:	2562      	movs	r5, #98	@ 0x62
 800d4b2:	601c      	str	r4, [r3, #0]
 800d4b4:	e73a      	b.n	800d32c <__gethex+0xf8>
 800d4b6:	1e71      	subs	r1, r6, #1
 800d4b8:	4620      	mov	r0, r4
 800d4ba:	f000 fee6 	bl	800e28a <__any_on>
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	d1ed      	bne.n	800d49e <__gethex+0x26a>
 800d4c2:	9801      	ldr	r0, [sp, #4]
 800d4c4:	4621      	mov	r1, r4
 800d4c6:	f000 fa8f 	bl	800d9e8 <_Bfree>
 800d4ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	6013      	str	r3, [r2, #0]
 800d4d0:	2550      	movs	r5, #80	@ 0x50
 800d4d2:	e72b      	b.n	800d32c <__gethex+0xf8>
 800d4d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d1f3      	bne.n	800d4c2 <__gethex+0x28e>
 800d4da:	e7e0      	b.n	800d49e <__gethex+0x26a>
 800d4dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d1dd      	bne.n	800d49e <__gethex+0x26a>
 800d4e2:	e7ee      	b.n	800d4c2 <__gethex+0x28e>
 800d4e4:	08010520 	.word	0x08010520
 800d4e8:	08010633 	.word	0x08010633
 800d4ec:	08010644 	.word	0x08010644
 800d4f0:	1e6f      	subs	r7, r5, #1
 800d4f2:	f1b9 0f00 	cmp.w	r9, #0
 800d4f6:	d130      	bne.n	800d55a <__gethex+0x326>
 800d4f8:	b127      	cbz	r7, 800d504 <__gethex+0x2d0>
 800d4fa:	4639      	mov	r1, r7
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	f000 fec4 	bl	800e28a <__any_on>
 800d502:	4681      	mov	r9, r0
 800d504:	117a      	asrs	r2, r7, #5
 800d506:	2301      	movs	r3, #1
 800d508:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d50c:	f007 071f 	and.w	r7, r7, #31
 800d510:	40bb      	lsls	r3, r7
 800d512:	4213      	tst	r3, r2
 800d514:	4629      	mov	r1, r5
 800d516:	4620      	mov	r0, r4
 800d518:	bf18      	it	ne
 800d51a:	f049 0902 	orrne.w	r9, r9, #2
 800d51e:	f7ff fe21 	bl	800d164 <rshift>
 800d522:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d526:	1b76      	subs	r6, r6, r5
 800d528:	2502      	movs	r5, #2
 800d52a:	f1b9 0f00 	cmp.w	r9, #0
 800d52e:	d047      	beq.n	800d5c0 <__gethex+0x38c>
 800d530:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d534:	2b02      	cmp	r3, #2
 800d536:	d015      	beq.n	800d564 <__gethex+0x330>
 800d538:	2b03      	cmp	r3, #3
 800d53a:	d017      	beq.n	800d56c <__gethex+0x338>
 800d53c:	2b01      	cmp	r3, #1
 800d53e:	d109      	bne.n	800d554 <__gethex+0x320>
 800d540:	f019 0f02 	tst.w	r9, #2
 800d544:	d006      	beq.n	800d554 <__gethex+0x320>
 800d546:	f8da 3000 	ldr.w	r3, [sl]
 800d54a:	ea49 0903 	orr.w	r9, r9, r3
 800d54e:	f019 0f01 	tst.w	r9, #1
 800d552:	d10e      	bne.n	800d572 <__gethex+0x33e>
 800d554:	f045 0510 	orr.w	r5, r5, #16
 800d558:	e032      	b.n	800d5c0 <__gethex+0x38c>
 800d55a:	f04f 0901 	mov.w	r9, #1
 800d55e:	e7d1      	b.n	800d504 <__gethex+0x2d0>
 800d560:	2501      	movs	r5, #1
 800d562:	e7e2      	b.n	800d52a <__gethex+0x2f6>
 800d564:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d566:	f1c3 0301 	rsb	r3, r3, #1
 800d56a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d56c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d0f0      	beq.n	800d554 <__gethex+0x320>
 800d572:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d576:	f104 0314 	add.w	r3, r4, #20
 800d57a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d57e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d582:	f04f 0c00 	mov.w	ip, #0
 800d586:	4618      	mov	r0, r3
 800d588:	f853 2b04 	ldr.w	r2, [r3], #4
 800d58c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d590:	d01b      	beq.n	800d5ca <__gethex+0x396>
 800d592:	3201      	adds	r2, #1
 800d594:	6002      	str	r2, [r0, #0]
 800d596:	2d02      	cmp	r5, #2
 800d598:	f104 0314 	add.w	r3, r4, #20
 800d59c:	d13c      	bne.n	800d618 <__gethex+0x3e4>
 800d59e:	f8d8 2000 	ldr.w	r2, [r8]
 800d5a2:	3a01      	subs	r2, #1
 800d5a4:	42b2      	cmp	r2, r6
 800d5a6:	d109      	bne.n	800d5bc <__gethex+0x388>
 800d5a8:	1171      	asrs	r1, r6, #5
 800d5aa:	2201      	movs	r2, #1
 800d5ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d5b0:	f006 061f 	and.w	r6, r6, #31
 800d5b4:	fa02 f606 	lsl.w	r6, r2, r6
 800d5b8:	421e      	tst	r6, r3
 800d5ba:	d13a      	bne.n	800d632 <__gethex+0x3fe>
 800d5bc:	f045 0520 	orr.w	r5, r5, #32
 800d5c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d5c2:	601c      	str	r4, [r3, #0]
 800d5c4:	9b02      	ldr	r3, [sp, #8]
 800d5c6:	601f      	str	r7, [r3, #0]
 800d5c8:	e6b0      	b.n	800d32c <__gethex+0xf8>
 800d5ca:	4299      	cmp	r1, r3
 800d5cc:	f843 cc04 	str.w	ip, [r3, #-4]
 800d5d0:	d8d9      	bhi.n	800d586 <__gethex+0x352>
 800d5d2:	68a3      	ldr	r3, [r4, #8]
 800d5d4:	459b      	cmp	fp, r3
 800d5d6:	db17      	blt.n	800d608 <__gethex+0x3d4>
 800d5d8:	6861      	ldr	r1, [r4, #4]
 800d5da:	9801      	ldr	r0, [sp, #4]
 800d5dc:	3101      	adds	r1, #1
 800d5de:	f000 f9c3 	bl	800d968 <_Balloc>
 800d5e2:	4681      	mov	r9, r0
 800d5e4:	b918      	cbnz	r0, 800d5ee <__gethex+0x3ba>
 800d5e6:	4b1a      	ldr	r3, [pc, #104]	@ (800d650 <__gethex+0x41c>)
 800d5e8:	4602      	mov	r2, r0
 800d5ea:	2184      	movs	r1, #132	@ 0x84
 800d5ec:	e6c5      	b.n	800d37a <__gethex+0x146>
 800d5ee:	6922      	ldr	r2, [r4, #16]
 800d5f0:	3202      	adds	r2, #2
 800d5f2:	f104 010c 	add.w	r1, r4, #12
 800d5f6:	0092      	lsls	r2, r2, #2
 800d5f8:	300c      	adds	r0, #12
 800d5fa:	f7fe fefe 	bl	800c3fa <memcpy>
 800d5fe:	4621      	mov	r1, r4
 800d600:	9801      	ldr	r0, [sp, #4]
 800d602:	f000 f9f1 	bl	800d9e8 <_Bfree>
 800d606:	464c      	mov	r4, r9
 800d608:	6923      	ldr	r3, [r4, #16]
 800d60a:	1c5a      	adds	r2, r3, #1
 800d60c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d610:	6122      	str	r2, [r4, #16]
 800d612:	2201      	movs	r2, #1
 800d614:	615a      	str	r2, [r3, #20]
 800d616:	e7be      	b.n	800d596 <__gethex+0x362>
 800d618:	6922      	ldr	r2, [r4, #16]
 800d61a:	455a      	cmp	r2, fp
 800d61c:	dd0b      	ble.n	800d636 <__gethex+0x402>
 800d61e:	2101      	movs	r1, #1
 800d620:	4620      	mov	r0, r4
 800d622:	f7ff fd9f 	bl	800d164 <rshift>
 800d626:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d62a:	3701      	adds	r7, #1
 800d62c:	42bb      	cmp	r3, r7
 800d62e:	f6ff aee0 	blt.w	800d3f2 <__gethex+0x1be>
 800d632:	2501      	movs	r5, #1
 800d634:	e7c2      	b.n	800d5bc <__gethex+0x388>
 800d636:	f016 061f 	ands.w	r6, r6, #31
 800d63a:	d0fa      	beq.n	800d632 <__gethex+0x3fe>
 800d63c:	4453      	add	r3, sl
 800d63e:	f1c6 0620 	rsb	r6, r6, #32
 800d642:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d646:	f000 fa81 	bl	800db4c <__hi0bits>
 800d64a:	42b0      	cmp	r0, r6
 800d64c:	dbe7      	blt.n	800d61e <__gethex+0x3ea>
 800d64e:	e7f0      	b.n	800d632 <__gethex+0x3fe>
 800d650:	08010633 	.word	0x08010633

0800d654 <L_shift>:
 800d654:	f1c2 0208 	rsb	r2, r2, #8
 800d658:	0092      	lsls	r2, r2, #2
 800d65a:	b570      	push	{r4, r5, r6, lr}
 800d65c:	f1c2 0620 	rsb	r6, r2, #32
 800d660:	6843      	ldr	r3, [r0, #4]
 800d662:	6804      	ldr	r4, [r0, #0]
 800d664:	fa03 f506 	lsl.w	r5, r3, r6
 800d668:	432c      	orrs	r4, r5
 800d66a:	40d3      	lsrs	r3, r2
 800d66c:	6004      	str	r4, [r0, #0]
 800d66e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d672:	4288      	cmp	r0, r1
 800d674:	d3f4      	bcc.n	800d660 <L_shift+0xc>
 800d676:	bd70      	pop	{r4, r5, r6, pc}

0800d678 <__match>:
 800d678:	b530      	push	{r4, r5, lr}
 800d67a:	6803      	ldr	r3, [r0, #0]
 800d67c:	3301      	adds	r3, #1
 800d67e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d682:	b914      	cbnz	r4, 800d68a <__match+0x12>
 800d684:	6003      	str	r3, [r0, #0]
 800d686:	2001      	movs	r0, #1
 800d688:	bd30      	pop	{r4, r5, pc}
 800d68a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d68e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d692:	2d19      	cmp	r5, #25
 800d694:	bf98      	it	ls
 800d696:	3220      	addls	r2, #32
 800d698:	42a2      	cmp	r2, r4
 800d69a:	d0f0      	beq.n	800d67e <__match+0x6>
 800d69c:	2000      	movs	r0, #0
 800d69e:	e7f3      	b.n	800d688 <__match+0x10>

0800d6a0 <__hexnan>:
 800d6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6a4:	680b      	ldr	r3, [r1, #0]
 800d6a6:	6801      	ldr	r1, [r0, #0]
 800d6a8:	115e      	asrs	r6, r3, #5
 800d6aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d6ae:	f013 031f 	ands.w	r3, r3, #31
 800d6b2:	b087      	sub	sp, #28
 800d6b4:	bf18      	it	ne
 800d6b6:	3604      	addne	r6, #4
 800d6b8:	2500      	movs	r5, #0
 800d6ba:	1f37      	subs	r7, r6, #4
 800d6bc:	4682      	mov	sl, r0
 800d6be:	4690      	mov	r8, r2
 800d6c0:	9301      	str	r3, [sp, #4]
 800d6c2:	f846 5c04 	str.w	r5, [r6, #-4]
 800d6c6:	46b9      	mov	r9, r7
 800d6c8:	463c      	mov	r4, r7
 800d6ca:	9502      	str	r5, [sp, #8]
 800d6cc:	46ab      	mov	fp, r5
 800d6ce:	784a      	ldrb	r2, [r1, #1]
 800d6d0:	1c4b      	adds	r3, r1, #1
 800d6d2:	9303      	str	r3, [sp, #12]
 800d6d4:	b342      	cbz	r2, 800d728 <__hexnan+0x88>
 800d6d6:	4610      	mov	r0, r2
 800d6d8:	9105      	str	r1, [sp, #20]
 800d6da:	9204      	str	r2, [sp, #16]
 800d6dc:	f7ff fd94 	bl	800d208 <__hexdig_fun>
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	d151      	bne.n	800d788 <__hexnan+0xe8>
 800d6e4:	9a04      	ldr	r2, [sp, #16]
 800d6e6:	9905      	ldr	r1, [sp, #20]
 800d6e8:	2a20      	cmp	r2, #32
 800d6ea:	d818      	bhi.n	800d71e <__hexnan+0x7e>
 800d6ec:	9b02      	ldr	r3, [sp, #8]
 800d6ee:	459b      	cmp	fp, r3
 800d6f0:	dd13      	ble.n	800d71a <__hexnan+0x7a>
 800d6f2:	454c      	cmp	r4, r9
 800d6f4:	d206      	bcs.n	800d704 <__hexnan+0x64>
 800d6f6:	2d07      	cmp	r5, #7
 800d6f8:	dc04      	bgt.n	800d704 <__hexnan+0x64>
 800d6fa:	462a      	mov	r2, r5
 800d6fc:	4649      	mov	r1, r9
 800d6fe:	4620      	mov	r0, r4
 800d700:	f7ff ffa8 	bl	800d654 <L_shift>
 800d704:	4544      	cmp	r4, r8
 800d706:	d952      	bls.n	800d7ae <__hexnan+0x10e>
 800d708:	2300      	movs	r3, #0
 800d70a:	f1a4 0904 	sub.w	r9, r4, #4
 800d70e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d712:	f8cd b008 	str.w	fp, [sp, #8]
 800d716:	464c      	mov	r4, r9
 800d718:	461d      	mov	r5, r3
 800d71a:	9903      	ldr	r1, [sp, #12]
 800d71c:	e7d7      	b.n	800d6ce <__hexnan+0x2e>
 800d71e:	2a29      	cmp	r2, #41	@ 0x29
 800d720:	d157      	bne.n	800d7d2 <__hexnan+0x132>
 800d722:	3102      	adds	r1, #2
 800d724:	f8ca 1000 	str.w	r1, [sl]
 800d728:	f1bb 0f00 	cmp.w	fp, #0
 800d72c:	d051      	beq.n	800d7d2 <__hexnan+0x132>
 800d72e:	454c      	cmp	r4, r9
 800d730:	d206      	bcs.n	800d740 <__hexnan+0xa0>
 800d732:	2d07      	cmp	r5, #7
 800d734:	dc04      	bgt.n	800d740 <__hexnan+0xa0>
 800d736:	462a      	mov	r2, r5
 800d738:	4649      	mov	r1, r9
 800d73a:	4620      	mov	r0, r4
 800d73c:	f7ff ff8a 	bl	800d654 <L_shift>
 800d740:	4544      	cmp	r4, r8
 800d742:	d936      	bls.n	800d7b2 <__hexnan+0x112>
 800d744:	f1a8 0204 	sub.w	r2, r8, #4
 800d748:	4623      	mov	r3, r4
 800d74a:	f853 1b04 	ldr.w	r1, [r3], #4
 800d74e:	f842 1f04 	str.w	r1, [r2, #4]!
 800d752:	429f      	cmp	r7, r3
 800d754:	d2f9      	bcs.n	800d74a <__hexnan+0xaa>
 800d756:	1b3b      	subs	r3, r7, r4
 800d758:	f023 0303 	bic.w	r3, r3, #3
 800d75c:	3304      	adds	r3, #4
 800d75e:	3401      	adds	r4, #1
 800d760:	3e03      	subs	r6, #3
 800d762:	42b4      	cmp	r4, r6
 800d764:	bf88      	it	hi
 800d766:	2304      	movhi	r3, #4
 800d768:	4443      	add	r3, r8
 800d76a:	2200      	movs	r2, #0
 800d76c:	f843 2b04 	str.w	r2, [r3], #4
 800d770:	429f      	cmp	r7, r3
 800d772:	d2fb      	bcs.n	800d76c <__hexnan+0xcc>
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	b91b      	cbnz	r3, 800d780 <__hexnan+0xe0>
 800d778:	4547      	cmp	r7, r8
 800d77a:	d128      	bne.n	800d7ce <__hexnan+0x12e>
 800d77c:	2301      	movs	r3, #1
 800d77e:	603b      	str	r3, [r7, #0]
 800d780:	2005      	movs	r0, #5
 800d782:	b007      	add	sp, #28
 800d784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d788:	3501      	adds	r5, #1
 800d78a:	2d08      	cmp	r5, #8
 800d78c:	f10b 0b01 	add.w	fp, fp, #1
 800d790:	dd06      	ble.n	800d7a0 <__hexnan+0x100>
 800d792:	4544      	cmp	r4, r8
 800d794:	d9c1      	bls.n	800d71a <__hexnan+0x7a>
 800d796:	2300      	movs	r3, #0
 800d798:	f844 3c04 	str.w	r3, [r4, #-4]
 800d79c:	2501      	movs	r5, #1
 800d79e:	3c04      	subs	r4, #4
 800d7a0:	6822      	ldr	r2, [r4, #0]
 800d7a2:	f000 000f 	and.w	r0, r0, #15
 800d7a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d7aa:	6020      	str	r0, [r4, #0]
 800d7ac:	e7b5      	b.n	800d71a <__hexnan+0x7a>
 800d7ae:	2508      	movs	r5, #8
 800d7b0:	e7b3      	b.n	800d71a <__hexnan+0x7a>
 800d7b2:	9b01      	ldr	r3, [sp, #4]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d0dd      	beq.n	800d774 <__hexnan+0xd4>
 800d7b8:	f1c3 0320 	rsb	r3, r3, #32
 800d7bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d7c0:	40da      	lsrs	r2, r3
 800d7c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d7c6:	4013      	ands	r3, r2
 800d7c8:	f846 3c04 	str.w	r3, [r6, #-4]
 800d7cc:	e7d2      	b.n	800d774 <__hexnan+0xd4>
 800d7ce:	3f04      	subs	r7, #4
 800d7d0:	e7d0      	b.n	800d774 <__hexnan+0xd4>
 800d7d2:	2004      	movs	r0, #4
 800d7d4:	e7d5      	b.n	800d782 <__hexnan+0xe2>
	...

0800d7d8 <malloc>:
 800d7d8:	4b02      	ldr	r3, [pc, #8]	@ (800d7e4 <malloc+0xc>)
 800d7da:	4601      	mov	r1, r0
 800d7dc:	6818      	ldr	r0, [r3, #0]
 800d7de:	f000 b825 	b.w	800d82c <_malloc_r>
 800d7e2:	bf00      	nop
 800d7e4:	20000188 	.word	0x20000188

0800d7e8 <sbrk_aligned>:
 800d7e8:	b570      	push	{r4, r5, r6, lr}
 800d7ea:	4e0f      	ldr	r6, [pc, #60]	@ (800d828 <sbrk_aligned+0x40>)
 800d7ec:	460c      	mov	r4, r1
 800d7ee:	6831      	ldr	r1, [r6, #0]
 800d7f0:	4605      	mov	r5, r0
 800d7f2:	b911      	cbnz	r1, 800d7fa <sbrk_aligned+0x12>
 800d7f4:	f001 fd64 	bl	800f2c0 <_sbrk_r>
 800d7f8:	6030      	str	r0, [r6, #0]
 800d7fa:	4621      	mov	r1, r4
 800d7fc:	4628      	mov	r0, r5
 800d7fe:	f001 fd5f 	bl	800f2c0 <_sbrk_r>
 800d802:	1c43      	adds	r3, r0, #1
 800d804:	d103      	bne.n	800d80e <sbrk_aligned+0x26>
 800d806:	f04f 34ff 	mov.w	r4, #4294967295
 800d80a:	4620      	mov	r0, r4
 800d80c:	bd70      	pop	{r4, r5, r6, pc}
 800d80e:	1cc4      	adds	r4, r0, #3
 800d810:	f024 0403 	bic.w	r4, r4, #3
 800d814:	42a0      	cmp	r0, r4
 800d816:	d0f8      	beq.n	800d80a <sbrk_aligned+0x22>
 800d818:	1a21      	subs	r1, r4, r0
 800d81a:	4628      	mov	r0, r5
 800d81c:	f001 fd50 	bl	800f2c0 <_sbrk_r>
 800d820:	3001      	adds	r0, #1
 800d822:	d1f2      	bne.n	800d80a <sbrk_aligned+0x22>
 800d824:	e7ef      	b.n	800d806 <sbrk_aligned+0x1e>
 800d826:	bf00      	nop
 800d828:	20000b50 	.word	0x20000b50

0800d82c <_malloc_r>:
 800d82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d830:	1ccd      	adds	r5, r1, #3
 800d832:	f025 0503 	bic.w	r5, r5, #3
 800d836:	3508      	adds	r5, #8
 800d838:	2d0c      	cmp	r5, #12
 800d83a:	bf38      	it	cc
 800d83c:	250c      	movcc	r5, #12
 800d83e:	2d00      	cmp	r5, #0
 800d840:	4606      	mov	r6, r0
 800d842:	db01      	blt.n	800d848 <_malloc_r+0x1c>
 800d844:	42a9      	cmp	r1, r5
 800d846:	d904      	bls.n	800d852 <_malloc_r+0x26>
 800d848:	230c      	movs	r3, #12
 800d84a:	6033      	str	r3, [r6, #0]
 800d84c:	2000      	movs	r0, #0
 800d84e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d852:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d928 <_malloc_r+0xfc>
 800d856:	f000 f87b 	bl	800d950 <__malloc_lock>
 800d85a:	f8d8 3000 	ldr.w	r3, [r8]
 800d85e:	461c      	mov	r4, r3
 800d860:	bb44      	cbnz	r4, 800d8b4 <_malloc_r+0x88>
 800d862:	4629      	mov	r1, r5
 800d864:	4630      	mov	r0, r6
 800d866:	f7ff ffbf 	bl	800d7e8 <sbrk_aligned>
 800d86a:	1c43      	adds	r3, r0, #1
 800d86c:	4604      	mov	r4, r0
 800d86e:	d158      	bne.n	800d922 <_malloc_r+0xf6>
 800d870:	f8d8 4000 	ldr.w	r4, [r8]
 800d874:	4627      	mov	r7, r4
 800d876:	2f00      	cmp	r7, #0
 800d878:	d143      	bne.n	800d902 <_malloc_r+0xd6>
 800d87a:	2c00      	cmp	r4, #0
 800d87c:	d04b      	beq.n	800d916 <_malloc_r+0xea>
 800d87e:	6823      	ldr	r3, [r4, #0]
 800d880:	4639      	mov	r1, r7
 800d882:	4630      	mov	r0, r6
 800d884:	eb04 0903 	add.w	r9, r4, r3
 800d888:	f001 fd1a 	bl	800f2c0 <_sbrk_r>
 800d88c:	4581      	cmp	r9, r0
 800d88e:	d142      	bne.n	800d916 <_malloc_r+0xea>
 800d890:	6821      	ldr	r1, [r4, #0]
 800d892:	1a6d      	subs	r5, r5, r1
 800d894:	4629      	mov	r1, r5
 800d896:	4630      	mov	r0, r6
 800d898:	f7ff ffa6 	bl	800d7e8 <sbrk_aligned>
 800d89c:	3001      	adds	r0, #1
 800d89e:	d03a      	beq.n	800d916 <_malloc_r+0xea>
 800d8a0:	6823      	ldr	r3, [r4, #0]
 800d8a2:	442b      	add	r3, r5
 800d8a4:	6023      	str	r3, [r4, #0]
 800d8a6:	f8d8 3000 	ldr.w	r3, [r8]
 800d8aa:	685a      	ldr	r2, [r3, #4]
 800d8ac:	bb62      	cbnz	r2, 800d908 <_malloc_r+0xdc>
 800d8ae:	f8c8 7000 	str.w	r7, [r8]
 800d8b2:	e00f      	b.n	800d8d4 <_malloc_r+0xa8>
 800d8b4:	6822      	ldr	r2, [r4, #0]
 800d8b6:	1b52      	subs	r2, r2, r5
 800d8b8:	d420      	bmi.n	800d8fc <_malloc_r+0xd0>
 800d8ba:	2a0b      	cmp	r2, #11
 800d8bc:	d917      	bls.n	800d8ee <_malloc_r+0xc2>
 800d8be:	1961      	adds	r1, r4, r5
 800d8c0:	42a3      	cmp	r3, r4
 800d8c2:	6025      	str	r5, [r4, #0]
 800d8c4:	bf18      	it	ne
 800d8c6:	6059      	strne	r1, [r3, #4]
 800d8c8:	6863      	ldr	r3, [r4, #4]
 800d8ca:	bf08      	it	eq
 800d8cc:	f8c8 1000 	streq.w	r1, [r8]
 800d8d0:	5162      	str	r2, [r4, r5]
 800d8d2:	604b      	str	r3, [r1, #4]
 800d8d4:	4630      	mov	r0, r6
 800d8d6:	f000 f841 	bl	800d95c <__malloc_unlock>
 800d8da:	f104 000b 	add.w	r0, r4, #11
 800d8de:	1d23      	adds	r3, r4, #4
 800d8e0:	f020 0007 	bic.w	r0, r0, #7
 800d8e4:	1ac2      	subs	r2, r0, r3
 800d8e6:	bf1c      	itt	ne
 800d8e8:	1a1b      	subne	r3, r3, r0
 800d8ea:	50a3      	strne	r3, [r4, r2]
 800d8ec:	e7af      	b.n	800d84e <_malloc_r+0x22>
 800d8ee:	6862      	ldr	r2, [r4, #4]
 800d8f0:	42a3      	cmp	r3, r4
 800d8f2:	bf0c      	ite	eq
 800d8f4:	f8c8 2000 	streq.w	r2, [r8]
 800d8f8:	605a      	strne	r2, [r3, #4]
 800d8fa:	e7eb      	b.n	800d8d4 <_malloc_r+0xa8>
 800d8fc:	4623      	mov	r3, r4
 800d8fe:	6864      	ldr	r4, [r4, #4]
 800d900:	e7ae      	b.n	800d860 <_malloc_r+0x34>
 800d902:	463c      	mov	r4, r7
 800d904:	687f      	ldr	r7, [r7, #4]
 800d906:	e7b6      	b.n	800d876 <_malloc_r+0x4a>
 800d908:	461a      	mov	r2, r3
 800d90a:	685b      	ldr	r3, [r3, #4]
 800d90c:	42a3      	cmp	r3, r4
 800d90e:	d1fb      	bne.n	800d908 <_malloc_r+0xdc>
 800d910:	2300      	movs	r3, #0
 800d912:	6053      	str	r3, [r2, #4]
 800d914:	e7de      	b.n	800d8d4 <_malloc_r+0xa8>
 800d916:	230c      	movs	r3, #12
 800d918:	6033      	str	r3, [r6, #0]
 800d91a:	4630      	mov	r0, r6
 800d91c:	f000 f81e 	bl	800d95c <__malloc_unlock>
 800d920:	e794      	b.n	800d84c <_malloc_r+0x20>
 800d922:	6005      	str	r5, [r0, #0]
 800d924:	e7d6      	b.n	800d8d4 <_malloc_r+0xa8>
 800d926:	bf00      	nop
 800d928:	20000b54 	.word	0x20000b54

0800d92c <__ascii_mbtowc>:
 800d92c:	b082      	sub	sp, #8
 800d92e:	b901      	cbnz	r1, 800d932 <__ascii_mbtowc+0x6>
 800d930:	a901      	add	r1, sp, #4
 800d932:	b142      	cbz	r2, 800d946 <__ascii_mbtowc+0x1a>
 800d934:	b14b      	cbz	r3, 800d94a <__ascii_mbtowc+0x1e>
 800d936:	7813      	ldrb	r3, [r2, #0]
 800d938:	600b      	str	r3, [r1, #0]
 800d93a:	7812      	ldrb	r2, [r2, #0]
 800d93c:	1e10      	subs	r0, r2, #0
 800d93e:	bf18      	it	ne
 800d940:	2001      	movne	r0, #1
 800d942:	b002      	add	sp, #8
 800d944:	4770      	bx	lr
 800d946:	4610      	mov	r0, r2
 800d948:	e7fb      	b.n	800d942 <__ascii_mbtowc+0x16>
 800d94a:	f06f 0001 	mvn.w	r0, #1
 800d94e:	e7f8      	b.n	800d942 <__ascii_mbtowc+0x16>

0800d950 <__malloc_lock>:
 800d950:	4801      	ldr	r0, [pc, #4]	@ (800d958 <__malloc_lock+0x8>)
 800d952:	f7fe bd50 	b.w	800c3f6 <__retarget_lock_acquire_recursive>
 800d956:	bf00      	nop
 800d958:	20000b4c 	.word	0x20000b4c

0800d95c <__malloc_unlock>:
 800d95c:	4801      	ldr	r0, [pc, #4]	@ (800d964 <__malloc_unlock+0x8>)
 800d95e:	f7fe bd4b 	b.w	800c3f8 <__retarget_lock_release_recursive>
 800d962:	bf00      	nop
 800d964:	20000b4c 	.word	0x20000b4c

0800d968 <_Balloc>:
 800d968:	b570      	push	{r4, r5, r6, lr}
 800d96a:	69c6      	ldr	r6, [r0, #28]
 800d96c:	4604      	mov	r4, r0
 800d96e:	460d      	mov	r5, r1
 800d970:	b976      	cbnz	r6, 800d990 <_Balloc+0x28>
 800d972:	2010      	movs	r0, #16
 800d974:	f7ff ff30 	bl	800d7d8 <malloc>
 800d978:	4602      	mov	r2, r0
 800d97a:	61e0      	str	r0, [r4, #28]
 800d97c:	b920      	cbnz	r0, 800d988 <_Balloc+0x20>
 800d97e:	4b18      	ldr	r3, [pc, #96]	@ (800d9e0 <_Balloc+0x78>)
 800d980:	4818      	ldr	r0, [pc, #96]	@ (800d9e4 <_Balloc+0x7c>)
 800d982:	216b      	movs	r1, #107	@ 0x6b
 800d984:	f001 fcac 	bl	800f2e0 <__assert_func>
 800d988:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d98c:	6006      	str	r6, [r0, #0]
 800d98e:	60c6      	str	r6, [r0, #12]
 800d990:	69e6      	ldr	r6, [r4, #28]
 800d992:	68f3      	ldr	r3, [r6, #12]
 800d994:	b183      	cbz	r3, 800d9b8 <_Balloc+0x50>
 800d996:	69e3      	ldr	r3, [r4, #28]
 800d998:	68db      	ldr	r3, [r3, #12]
 800d99a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d99e:	b9b8      	cbnz	r0, 800d9d0 <_Balloc+0x68>
 800d9a0:	2101      	movs	r1, #1
 800d9a2:	fa01 f605 	lsl.w	r6, r1, r5
 800d9a6:	1d72      	adds	r2, r6, #5
 800d9a8:	0092      	lsls	r2, r2, #2
 800d9aa:	4620      	mov	r0, r4
 800d9ac:	f001 fcb6 	bl	800f31c <_calloc_r>
 800d9b0:	b160      	cbz	r0, 800d9cc <_Balloc+0x64>
 800d9b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d9b6:	e00e      	b.n	800d9d6 <_Balloc+0x6e>
 800d9b8:	2221      	movs	r2, #33	@ 0x21
 800d9ba:	2104      	movs	r1, #4
 800d9bc:	4620      	mov	r0, r4
 800d9be:	f001 fcad 	bl	800f31c <_calloc_r>
 800d9c2:	69e3      	ldr	r3, [r4, #28]
 800d9c4:	60f0      	str	r0, [r6, #12]
 800d9c6:	68db      	ldr	r3, [r3, #12]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d1e4      	bne.n	800d996 <_Balloc+0x2e>
 800d9cc:	2000      	movs	r0, #0
 800d9ce:	bd70      	pop	{r4, r5, r6, pc}
 800d9d0:	6802      	ldr	r2, [r0, #0]
 800d9d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d9dc:	e7f7      	b.n	800d9ce <_Balloc+0x66>
 800d9de:	bf00      	nop
 800d9e0:	080105c4 	.word	0x080105c4
 800d9e4:	080106a4 	.word	0x080106a4

0800d9e8 <_Bfree>:
 800d9e8:	b570      	push	{r4, r5, r6, lr}
 800d9ea:	69c6      	ldr	r6, [r0, #28]
 800d9ec:	4605      	mov	r5, r0
 800d9ee:	460c      	mov	r4, r1
 800d9f0:	b976      	cbnz	r6, 800da10 <_Bfree+0x28>
 800d9f2:	2010      	movs	r0, #16
 800d9f4:	f7ff fef0 	bl	800d7d8 <malloc>
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	61e8      	str	r0, [r5, #28]
 800d9fc:	b920      	cbnz	r0, 800da08 <_Bfree+0x20>
 800d9fe:	4b09      	ldr	r3, [pc, #36]	@ (800da24 <_Bfree+0x3c>)
 800da00:	4809      	ldr	r0, [pc, #36]	@ (800da28 <_Bfree+0x40>)
 800da02:	218f      	movs	r1, #143	@ 0x8f
 800da04:	f001 fc6c 	bl	800f2e0 <__assert_func>
 800da08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da0c:	6006      	str	r6, [r0, #0]
 800da0e:	60c6      	str	r6, [r0, #12]
 800da10:	b13c      	cbz	r4, 800da22 <_Bfree+0x3a>
 800da12:	69eb      	ldr	r3, [r5, #28]
 800da14:	6862      	ldr	r2, [r4, #4]
 800da16:	68db      	ldr	r3, [r3, #12]
 800da18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800da1c:	6021      	str	r1, [r4, #0]
 800da1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800da22:	bd70      	pop	{r4, r5, r6, pc}
 800da24:	080105c4 	.word	0x080105c4
 800da28:	080106a4 	.word	0x080106a4

0800da2c <__multadd>:
 800da2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da30:	690d      	ldr	r5, [r1, #16]
 800da32:	4607      	mov	r7, r0
 800da34:	460c      	mov	r4, r1
 800da36:	461e      	mov	r6, r3
 800da38:	f101 0c14 	add.w	ip, r1, #20
 800da3c:	2000      	movs	r0, #0
 800da3e:	f8dc 3000 	ldr.w	r3, [ip]
 800da42:	b299      	uxth	r1, r3
 800da44:	fb02 6101 	mla	r1, r2, r1, r6
 800da48:	0c1e      	lsrs	r6, r3, #16
 800da4a:	0c0b      	lsrs	r3, r1, #16
 800da4c:	fb02 3306 	mla	r3, r2, r6, r3
 800da50:	b289      	uxth	r1, r1
 800da52:	3001      	adds	r0, #1
 800da54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800da58:	4285      	cmp	r5, r0
 800da5a:	f84c 1b04 	str.w	r1, [ip], #4
 800da5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800da62:	dcec      	bgt.n	800da3e <__multadd+0x12>
 800da64:	b30e      	cbz	r6, 800daaa <__multadd+0x7e>
 800da66:	68a3      	ldr	r3, [r4, #8]
 800da68:	42ab      	cmp	r3, r5
 800da6a:	dc19      	bgt.n	800daa0 <__multadd+0x74>
 800da6c:	6861      	ldr	r1, [r4, #4]
 800da6e:	4638      	mov	r0, r7
 800da70:	3101      	adds	r1, #1
 800da72:	f7ff ff79 	bl	800d968 <_Balloc>
 800da76:	4680      	mov	r8, r0
 800da78:	b928      	cbnz	r0, 800da86 <__multadd+0x5a>
 800da7a:	4602      	mov	r2, r0
 800da7c:	4b0c      	ldr	r3, [pc, #48]	@ (800dab0 <__multadd+0x84>)
 800da7e:	480d      	ldr	r0, [pc, #52]	@ (800dab4 <__multadd+0x88>)
 800da80:	21ba      	movs	r1, #186	@ 0xba
 800da82:	f001 fc2d 	bl	800f2e0 <__assert_func>
 800da86:	6922      	ldr	r2, [r4, #16]
 800da88:	3202      	adds	r2, #2
 800da8a:	f104 010c 	add.w	r1, r4, #12
 800da8e:	0092      	lsls	r2, r2, #2
 800da90:	300c      	adds	r0, #12
 800da92:	f7fe fcb2 	bl	800c3fa <memcpy>
 800da96:	4621      	mov	r1, r4
 800da98:	4638      	mov	r0, r7
 800da9a:	f7ff ffa5 	bl	800d9e8 <_Bfree>
 800da9e:	4644      	mov	r4, r8
 800daa0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800daa4:	3501      	adds	r5, #1
 800daa6:	615e      	str	r6, [r3, #20]
 800daa8:	6125      	str	r5, [r4, #16]
 800daaa:	4620      	mov	r0, r4
 800daac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dab0:	08010633 	.word	0x08010633
 800dab4:	080106a4 	.word	0x080106a4

0800dab8 <__s2b>:
 800dab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dabc:	460c      	mov	r4, r1
 800dabe:	4615      	mov	r5, r2
 800dac0:	461f      	mov	r7, r3
 800dac2:	2209      	movs	r2, #9
 800dac4:	3308      	adds	r3, #8
 800dac6:	4606      	mov	r6, r0
 800dac8:	fb93 f3f2 	sdiv	r3, r3, r2
 800dacc:	2100      	movs	r1, #0
 800dace:	2201      	movs	r2, #1
 800dad0:	429a      	cmp	r2, r3
 800dad2:	db09      	blt.n	800dae8 <__s2b+0x30>
 800dad4:	4630      	mov	r0, r6
 800dad6:	f7ff ff47 	bl	800d968 <_Balloc>
 800dada:	b940      	cbnz	r0, 800daee <__s2b+0x36>
 800dadc:	4602      	mov	r2, r0
 800dade:	4b19      	ldr	r3, [pc, #100]	@ (800db44 <__s2b+0x8c>)
 800dae0:	4819      	ldr	r0, [pc, #100]	@ (800db48 <__s2b+0x90>)
 800dae2:	21d3      	movs	r1, #211	@ 0xd3
 800dae4:	f001 fbfc 	bl	800f2e0 <__assert_func>
 800dae8:	0052      	lsls	r2, r2, #1
 800daea:	3101      	adds	r1, #1
 800daec:	e7f0      	b.n	800dad0 <__s2b+0x18>
 800daee:	9b08      	ldr	r3, [sp, #32]
 800daf0:	6143      	str	r3, [r0, #20]
 800daf2:	2d09      	cmp	r5, #9
 800daf4:	f04f 0301 	mov.w	r3, #1
 800daf8:	6103      	str	r3, [r0, #16]
 800dafa:	dd16      	ble.n	800db2a <__s2b+0x72>
 800dafc:	f104 0909 	add.w	r9, r4, #9
 800db00:	46c8      	mov	r8, r9
 800db02:	442c      	add	r4, r5
 800db04:	f818 3b01 	ldrb.w	r3, [r8], #1
 800db08:	4601      	mov	r1, r0
 800db0a:	3b30      	subs	r3, #48	@ 0x30
 800db0c:	220a      	movs	r2, #10
 800db0e:	4630      	mov	r0, r6
 800db10:	f7ff ff8c 	bl	800da2c <__multadd>
 800db14:	45a0      	cmp	r8, r4
 800db16:	d1f5      	bne.n	800db04 <__s2b+0x4c>
 800db18:	f1a5 0408 	sub.w	r4, r5, #8
 800db1c:	444c      	add	r4, r9
 800db1e:	1b2d      	subs	r5, r5, r4
 800db20:	1963      	adds	r3, r4, r5
 800db22:	42bb      	cmp	r3, r7
 800db24:	db04      	blt.n	800db30 <__s2b+0x78>
 800db26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db2a:	340a      	adds	r4, #10
 800db2c:	2509      	movs	r5, #9
 800db2e:	e7f6      	b.n	800db1e <__s2b+0x66>
 800db30:	f814 3b01 	ldrb.w	r3, [r4], #1
 800db34:	4601      	mov	r1, r0
 800db36:	3b30      	subs	r3, #48	@ 0x30
 800db38:	220a      	movs	r2, #10
 800db3a:	4630      	mov	r0, r6
 800db3c:	f7ff ff76 	bl	800da2c <__multadd>
 800db40:	e7ee      	b.n	800db20 <__s2b+0x68>
 800db42:	bf00      	nop
 800db44:	08010633 	.word	0x08010633
 800db48:	080106a4 	.word	0x080106a4

0800db4c <__hi0bits>:
 800db4c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800db50:	4603      	mov	r3, r0
 800db52:	bf36      	itet	cc
 800db54:	0403      	lslcc	r3, r0, #16
 800db56:	2000      	movcs	r0, #0
 800db58:	2010      	movcc	r0, #16
 800db5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800db5e:	bf3c      	itt	cc
 800db60:	021b      	lslcc	r3, r3, #8
 800db62:	3008      	addcc	r0, #8
 800db64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800db68:	bf3c      	itt	cc
 800db6a:	011b      	lslcc	r3, r3, #4
 800db6c:	3004      	addcc	r0, #4
 800db6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db72:	bf3c      	itt	cc
 800db74:	009b      	lslcc	r3, r3, #2
 800db76:	3002      	addcc	r0, #2
 800db78:	2b00      	cmp	r3, #0
 800db7a:	db05      	blt.n	800db88 <__hi0bits+0x3c>
 800db7c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800db80:	f100 0001 	add.w	r0, r0, #1
 800db84:	bf08      	it	eq
 800db86:	2020      	moveq	r0, #32
 800db88:	4770      	bx	lr

0800db8a <__lo0bits>:
 800db8a:	6803      	ldr	r3, [r0, #0]
 800db8c:	4602      	mov	r2, r0
 800db8e:	f013 0007 	ands.w	r0, r3, #7
 800db92:	d00b      	beq.n	800dbac <__lo0bits+0x22>
 800db94:	07d9      	lsls	r1, r3, #31
 800db96:	d421      	bmi.n	800dbdc <__lo0bits+0x52>
 800db98:	0798      	lsls	r0, r3, #30
 800db9a:	bf49      	itett	mi
 800db9c:	085b      	lsrmi	r3, r3, #1
 800db9e:	089b      	lsrpl	r3, r3, #2
 800dba0:	2001      	movmi	r0, #1
 800dba2:	6013      	strmi	r3, [r2, #0]
 800dba4:	bf5c      	itt	pl
 800dba6:	6013      	strpl	r3, [r2, #0]
 800dba8:	2002      	movpl	r0, #2
 800dbaa:	4770      	bx	lr
 800dbac:	b299      	uxth	r1, r3
 800dbae:	b909      	cbnz	r1, 800dbb4 <__lo0bits+0x2a>
 800dbb0:	0c1b      	lsrs	r3, r3, #16
 800dbb2:	2010      	movs	r0, #16
 800dbb4:	b2d9      	uxtb	r1, r3
 800dbb6:	b909      	cbnz	r1, 800dbbc <__lo0bits+0x32>
 800dbb8:	3008      	adds	r0, #8
 800dbba:	0a1b      	lsrs	r3, r3, #8
 800dbbc:	0719      	lsls	r1, r3, #28
 800dbbe:	bf04      	itt	eq
 800dbc0:	091b      	lsreq	r3, r3, #4
 800dbc2:	3004      	addeq	r0, #4
 800dbc4:	0799      	lsls	r1, r3, #30
 800dbc6:	bf04      	itt	eq
 800dbc8:	089b      	lsreq	r3, r3, #2
 800dbca:	3002      	addeq	r0, #2
 800dbcc:	07d9      	lsls	r1, r3, #31
 800dbce:	d403      	bmi.n	800dbd8 <__lo0bits+0x4e>
 800dbd0:	085b      	lsrs	r3, r3, #1
 800dbd2:	f100 0001 	add.w	r0, r0, #1
 800dbd6:	d003      	beq.n	800dbe0 <__lo0bits+0x56>
 800dbd8:	6013      	str	r3, [r2, #0]
 800dbda:	4770      	bx	lr
 800dbdc:	2000      	movs	r0, #0
 800dbde:	4770      	bx	lr
 800dbe0:	2020      	movs	r0, #32
 800dbe2:	4770      	bx	lr

0800dbe4 <__i2b>:
 800dbe4:	b510      	push	{r4, lr}
 800dbe6:	460c      	mov	r4, r1
 800dbe8:	2101      	movs	r1, #1
 800dbea:	f7ff febd 	bl	800d968 <_Balloc>
 800dbee:	4602      	mov	r2, r0
 800dbf0:	b928      	cbnz	r0, 800dbfe <__i2b+0x1a>
 800dbf2:	4b05      	ldr	r3, [pc, #20]	@ (800dc08 <__i2b+0x24>)
 800dbf4:	4805      	ldr	r0, [pc, #20]	@ (800dc0c <__i2b+0x28>)
 800dbf6:	f240 1145 	movw	r1, #325	@ 0x145
 800dbfa:	f001 fb71 	bl	800f2e0 <__assert_func>
 800dbfe:	2301      	movs	r3, #1
 800dc00:	6144      	str	r4, [r0, #20]
 800dc02:	6103      	str	r3, [r0, #16]
 800dc04:	bd10      	pop	{r4, pc}
 800dc06:	bf00      	nop
 800dc08:	08010633 	.word	0x08010633
 800dc0c:	080106a4 	.word	0x080106a4

0800dc10 <__multiply>:
 800dc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc14:	4614      	mov	r4, r2
 800dc16:	690a      	ldr	r2, [r1, #16]
 800dc18:	6923      	ldr	r3, [r4, #16]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	bfa8      	it	ge
 800dc1e:	4623      	movge	r3, r4
 800dc20:	460f      	mov	r7, r1
 800dc22:	bfa4      	itt	ge
 800dc24:	460c      	movge	r4, r1
 800dc26:	461f      	movge	r7, r3
 800dc28:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800dc2c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800dc30:	68a3      	ldr	r3, [r4, #8]
 800dc32:	6861      	ldr	r1, [r4, #4]
 800dc34:	eb0a 0609 	add.w	r6, sl, r9
 800dc38:	42b3      	cmp	r3, r6
 800dc3a:	b085      	sub	sp, #20
 800dc3c:	bfb8      	it	lt
 800dc3e:	3101      	addlt	r1, #1
 800dc40:	f7ff fe92 	bl	800d968 <_Balloc>
 800dc44:	b930      	cbnz	r0, 800dc54 <__multiply+0x44>
 800dc46:	4602      	mov	r2, r0
 800dc48:	4b44      	ldr	r3, [pc, #272]	@ (800dd5c <__multiply+0x14c>)
 800dc4a:	4845      	ldr	r0, [pc, #276]	@ (800dd60 <__multiply+0x150>)
 800dc4c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dc50:	f001 fb46 	bl	800f2e0 <__assert_func>
 800dc54:	f100 0514 	add.w	r5, r0, #20
 800dc58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dc5c:	462b      	mov	r3, r5
 800dc5e:	2200      	movs	r2, #0
 800dc60:	4543      	cmp	r3, r8
 800dc62:	d321      	bcc.n	800dca8 <__multiply+0x98>
 800dc64:	f107 0114 	add.w	r1, r7, #20
 800dc68:	f104 0214 	add.w	r2, r4, #20
 800dc6c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800dc70:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800dc74:	9302      	str	r3, [sp, #8]
 800dc76:	1b13      	subs	r3, r2, r4
 800dc78:	3b15      	subs	r3, #21
 800dc7a:	f023 0303 	bic.w	r3, r3, #3
 800dc7e:	3304      	adds	r3, #4
 800dc80:	f104 0715 	add.w	r7, r4, #21
 800dc84:	42ba      	cmp	r2, r7
 800dc86:	bf38      	it	cc
 800dc88:	2304      	movcc	r3, #4
 800dc8a:	9301      	str	r3, [sp, #4]
 800dc8c:	9b02      	ldr	r3, [sp, #8]
 800dc8e:	9103      	str	r1, [sp, #12]
 800dc90:	428b      	cmp	r3, r1
 800dc92:	d80c      	bhi.n	800dcae <__multiply+0x9e>
 800dc94:	2e00      	cmp	r6, #0
 800dc96:	dd03      	ble.n	800dca0 <__multiply+0x90>
 800dc98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d05b      	beq.n	800dd58 <__multiply+0x148>
 800dca0:	6106      	str	r6, [r0, #16]
 800dca2:	b005      	add	sp, #20
 800dca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dca8:	f843 2b04 	str.w	r2, [r3], #4
 800dcac:	e7d8      	b.n	800dc60 <__multiply+0x50>
 800dcae:	f8b1 a000 	ldrh.w	sl, [r1]
 800dcb2:	f1ba 0f00 	cmp.w	sl, #0
 800dcb6:	d024      	beq.n	800dd02 <__multiply+0xf2>
 800dcb8:	f104 0e14 	add.w	lr, r4, #20
 800dcbc:	46a9      	mov	r9, r5
 800dcbe:	f04f 0c00 	mov.w	ip, #0
 800dcc2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dcc6:	f8d9 3000 	ldr.w	r3, [r9]
 800dcca:	fa1f fb87 	uxth.w	fp, r7
 800dcce:	b29b      	uxth	r3, r3
 800dcd0:	fb0a 330b 	mla	r3, sl, fp, r3
 800dcd4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800dcd8:	f8d9 7000 	ldr.w	r7, [r9]
 800dcdc:	4463      	add	r3, ip
 800dcde:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dce2:	fb0a c70b 	mla	r7, sl, fp, ip
 800dce6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dcf0:	4572      	cmp	r2, lr
 800dcf2:	f849 3b04 	str.w	r3, [r9], #4
 800dcf6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dcfa:	d8e2      	bhi.n	800dcc2 <__multiply+0xb2>
 800dcfc:	9b01      	ldr	r3, [sp, #4]
 800dcfe:	f845 c003 	str.w	ip, [r5, r3]
 800dd02:	9b03      	ldr	r3, [sp, #12]
 800dd04:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800dd08:	3104      	adds	r1, #4
 800dd0a:	f1b9 0f00 	cmp.w	r9, #0
 800dd0e:	d021      	beq.n	800dd54 <__multiply+0x144>
 800dd10:	682b      	ldr	r3, [r5, #0]
 800dd12:	f104 0c14 	add.w	ip, r4, #20
 800dd16:	46ae      	mov	lr, r5
 800dd18:	f04f 0a00 	mov.w	sl, #0
 800dd1c:	f8bc b000 	ldrh.w	fp, [ip]
 800dd20:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800dd24:	fb09 770b 	mla	r7, r9, fp, r7
 800dd28:	4457      	add	r7, sl
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dd30:	f84e 3b04 	str.w	r3, [lr], #4
 800dd34:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dd38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dd3c:	f8be 3000 	ldrh.w	r3, [lr]
 800dd40:	fb09 330a 	mla	r3, r9, sl, r3
 800dd44:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800dd48:	4562      	cmp	r2, ip
 800dd4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dd4e:	d8e5      	bhi.n	800dd1c <__multiply+0x10c>
 800dd50:	9f01      	ldr	r7, [sp, #4]
 800dd52:	51eb      	str	r3, [r5, r7]
 800dd54:	3504      	adds	r5, #4
 800dd56:	e799      	b.n	800dc8c <__multiply+0x7c>
 800dd58:	3e01      	subs	r6, #1
 800dd5a:	e79b      	b.n	800dc94 <__multiply+0x84>
 800dd5c:	08010633 	.word	0x08010633
 800dd60:	080106a4 	.word	0x080106a4

0800dd64 <__pow5mult>:
 800dd64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd68:	4615      	mov	r5, r2
 800dd6a:	f012 0203 	ands.w	r2, r2, #3
 800dd6e:	4607      	mov	r7, r0
 800dd70:	460e      	mov	r6, r1
 800dd72:	d007      	beq.n	800dd84 <__pow5mult+0x20>
 800dd74:	4c25      	ldr	r4, [pc, #148]	@ (800de0c <__pow5mult+0xa8>)
 800dd76:	3a01      	subs	r2, #1
 800dd78:	2300      	movs	r3, #0
 800dd7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dd7e:	f7ff fe55 	bl	800da2c <__multadd>
 800dd82:	4606      	mov	r6, r0
 800dd84:	10ad      	asrs	r5, r5, #2
 800dd86:	d03d      	beq.n	800de04 <__pow5mult+0xa0>
 800dd88:	69fc      	ldr	r4, [r7, #28]
 800dd8a:	b97c      	cbnz	r4, 800ddac <__pow5mult+0x48>
 800dd8c:	2010      	movs	r0, #16
 800dd8e:	f7ff fd23 	bl	800d7d8 <malloc>
 800dd92:	4602      	mov	r2, r0
 800dd94:	61f8      	str	r0, [r7, #28]
 800dd96:	b928      	cbnz	r0, 800dda4 <__pow5mult+0x40>
 800dd98:	4b1d      	ldr	r3, [pc, #116]	@ (800de10 <__pow5mult+0xac>)
 800dd9a:	481e      	ldr	r0, [pc, #120]	@ (800de14 <__pow5mult+0xb0>)
 800dd9c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dda0:	f001 fa9e 	bl	800f2e0 <__assert_func>
 800dda4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dda8:	6004      	str	r4, [r0, #0]
 800ddaa:	60c4      	str	r4, [r0, #12]
 800ddac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ddb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ddb4:	b94c      	cbnz	r4, 800ddca <__pow5mult+0x66>
 800ddb6:	f240 2171 	movw	r1, #625	@ 0x271
 800ddba:	4638      	mov	r0, r7
 800ddbc:	f7ff ff12 	bl	800dbe4 <__i2b>
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	f8c8 0008 	str.w	r0, [r8, #8]
 800ddc6:	4604      	mov	r4, r0
 800ddc8:	6003      	str	r3, [r0, #0]
 800ddca:	f04f 0900 	mov.w	r9, #0
 800ddce:	07eb      	lsls	r3, r5, #31
 800ddd0:	d50a      	bpl.n	800dde8 <__pow5mult+0x84>
 800ddd2:	4631      	mov	r1, r6
 800ddd4:	4622      	mov	r2, r4
 800ddd6:	4638      	mov	r0, r7
 800ddd8:	f7ff ff1a 	bl	800dc10 <__multiply>
 800dddc:	4631      	mov	r1, r6
 800ddde:	4680      	mov	r8, r0
 800dde0:	4638      	mov	r0, r7
 800dde2:	f7ff fe01 	bl	800d9e8 <_Bfree>
 800dde6:	4646      	mov	r6, r8
 800dde8:	106d      	asrs	r5, r5, #1
 800ddea:	d00b      	beq.n	800de04 <__pow5mult+0xa0>
 800ddec:	6820      	ldr	r0, [r4, #0]
 800ddee:	b938      	cbnz	r0, 800de00 <__pow5mult+0x9c>
 800ddf0:	4622      	mov	r2, r4
 800ddf2:	4621      	mov	r1, r4
 800ddf4:	4638      	mov	r0, r7
 800ddf6:	f7ff ff0b 	bl	800dc10 <__multiply>
 800ddfa:	6020      	str	r0, [r4, #0]
 800ddfc:	f8c0 9000 	str.w	r9, [r0]
 800de00:	4604      	mov	r4, r0
 800de02:	e7e4      	b.n	800ddce <__pow5mult+0x6a>
 800de04:	4630      	mov	r0, r6
 800de06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de0a:	bf00      	nop
 800de0c:	08010700 	.word	0x08010700
 800de10:	080105c4 	.word	0x080105c4
 800de14:	080106a4 	.word	0x080106a4

0800de18 <__lshift>:
 800de18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de1c:	460c      	mov	r4, r1
 800de1e:	6849      	ldr	r1, [r1, #4]
 800de20:	6923      	ldr	r3, [r4, #16]
 800de22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800de26:	68a3      	ldr	r3, [r4, #8]
 800de28:	4607      	mov	r7, r0
 800de2a:	4691      	mov	r9, r2
 800de2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de30:	f108 0601 	add.w	r6, r8, #1
 800de34:	42b3      	cmp	r3, r6
 800de36:	db0b      	blt.n	800de50 <__lshift+0x38>
 800de38:	4638      	mov	r0, r7
 800de3a:	f7ff fd95 	bl	800d968 <_Balloc>
 800de3e:	4605      	mov	r5, r0
 800de40:	b948      	cbnz	r0, 800de56 <__lshift+0x3e>
 800de42:	4602      	mov	r2, r0
 800de44:	4b28      	ldr	r3, [pc, #160]	@ (800dee8 <__lshift+0xd0>)
 800de46:	4829      	ldr	r0, [pc, #164]	@ (800deec <__lshift+0xd4>)
 800de48:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800de4c:	f001 fa48 	bl	800f2e0 <__assert_func>
 800de50:	3101      	adds	r1, #1
 800de52:	005b      	lsls	r3, r3, #1
 800de54:	e7ee      	b.n	800de34 <__lshift+0x1c>
 800de56:	2300      	movs	r3, #0
 800de58:	f100 0114 	add.w	r1, r0, #20
 800de5c:	f100 0210 	add.w	r2, r0, #16
 800de60:	4618      	mov	r0, r3
 800de62:	4553      	cmp	r3, sl
 800de64:	db33      	blt.n	800dece <__lshift+0xb6>
 800de66:	6920      	ldr	r0, [r4, #16]
 800de68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800de6c:	f104 0314 	add.w	r3, r4, #20
 800de70:	f019 091f 	ands.w	r9, r9, #31
 800de74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800de78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800de7c:	d02b      	beq.n	800ded6 <__lshift+0xbe>
 800de7e:	f1c9 0e20 	rsb	lr, r9, #32
 800de82:	468a      	mov	sl, r1
 800de84:	2200      	movs	r2, #0
 800de86:	6818      	ldr	r0, [r3, #0]
 800de88:	fa00 f009 	lsl.w	r0, r0, r9
 800de8c:	4310      	orrs	r0, r2
 800de8e:	f84a 0b04 	str.w	r0, [sl], #4
 800de92:	f853 2b04 	ldr.w	r2, [r3], #4
 800de96:	459c      	cmp	ip, r3
 800de98:	fa22 f20e 	lsr.w	r2, r2, lr
 800de9c:	d8f3      	bhi.n	800de86 <__lshift+0x6e>
 800de9e:	ebac 0304 	sub.w	r3, ip, r4
 800dea2:	3b15      	subs	r3, #21
 800dea4:	f023 0303 	bic.w	r3, r3, #3
 800dea8:	3304      	adds	r3, #4
 800deaa:	f104 0015 	add.w	r0, r4, #21
 800deae:	4584      	cmp	ip, r0
 800deb0:	bf38      	it	cc
 800deb2:	2304      	movcc	r3, #4
 800deb4:	50ca      	str	r2, [r1, r3]
 800deb6:	b10a      	cbz	r2, 800debc <__lshift+0xa4>
 800deb8:	f108 0602 	add.w	r6, r8, #2
 800debc:	3e01      	subs	r6, #1
 800debe:	4638      	mov	r0, r7
 800dec0:	612e      	str	r6, [r5, #16]
 800dec2:	4621      	mov	r1, r4
 800dec4:	f7ff fd90 	bl	800d9e8 <_Bfree>
 800dec8:	4628      	mov	r0, r5
 800deca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dece:	f842 0f04 	str.w	r0, [r2, #4]!
 800ded2:	3301      	adds	r3, #1
 800ded4:	e7c5      	b.n	800de62 <__lshift+0x4a>
 800ded6:	3904      	subs	r1, #4
 800ded8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dedc:	f841 2f04 	str.w	r2, [r1, #4]!
 800dee0:	459c      	cmp	ip, r3
 800dee2:	d8f9      	bhi.n	800ded8 <__lshift+0xc0>
 800dee4:	e7ea      	b.n	800debc <__lshift+0xa4>
 800dee6:	bf00      	nop
 800dee8:	08010633 	.word	0x08010633
 800deec:	080106a4 	.word	0x080106a4

0800def0 <__mcmp>:
 800def0:	690a      	ldr	r2, [r1, #16]
 800def2:	4603      	mov	r3, r0
 800def4:	6900      	ldr	r0, [r0, #16]
 800def6:	1a80      	subs	r0, r0, r2
 800def8:	b530      	push	{r4, r5, lr}
 800defa:	d10e      	bne.n	800df1a <__mcmp+0x2a>
 800defc:	3314      	adds	r3, #20
 800defe:	3114      	adds	r1, #20
 800df00:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800df04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800df08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800df0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800df10:	4295      	cmp	r5, r2
 800df12:	d003      	beq.n	800df1c <__mcmp+0x2c>
 800df14:	d205      	bcs.n	800df22 <__mcmp+0x32>
 800df16:	f04f 30ff 	mov.w	r0, #4294967295
 800df1a:	bd30      	pop	{r4, r5, pc}
 800df1c:	42a3      	cmp	r3, r4
 800df1e:	d3f3      	bcc.n	800df08 <__mcmp+0x18>
 800df20:	e7fb      	b.n	800df1a <__mcmp+0x2a>
 800df22:	2001      	movs	r0, #1
 800df24:	e7f9      	b.n	800df1a <__mcmp+0x2a>
	...

0800df28 <__mdiff>:
 800df28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df2c:	4689      	mov	r9, r1
 800df2e:	4606      	mov	r6, r0
 800df30:	4611      	mov	r1, r2
 800df32:	4648      	mov	r0, r9
 800df34:	4614      	mov	r4, r2
 800df36:	f7ff ffdb 	bl	800def0 <__mcmp>
 800df3a:	1e05      	subs	r5, r0, #0
 800df3c:	d112      	bne.n	800df64 <__mdiff+0x3c>
 800df3e:	4629      	mov	r1, r5
 800df40:	4630      	mov	r0, r6
 800df42:	f7ff fd11 	bl	800d968 <_Balloc>
 800df46:	4602      	mov	r2, r0
 800df48:	b928      	cbnz	r0, 800df56 <__mdiff+0x2e>
 800df4a:	4b3f      	ldr	r3, [pc, #252]	@ (800e048 <__mdiff+0x120>)
 800df4c:	f240 2137 	movw	r1, #567	@ 0x237
 800df50:	483e      	ldr	r0, [pc, #248]	@ (800e04c <__mdiff+0x124>)
 800df52:	f001 f9c5 	bl	800f2e0 <__assert_func>
 800df56:	2301      	movs	r3, #1
 800df58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800df5c:	4610      	mov	r0, r2
 800df5e:	b003      	add	sp, #12
 800df60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df64:	bfbc      	itt	lt
 800df66:	464b      	movlt	r3, r9
 800df68:	46a1      	movlt	r9, r4
 800df6a:	4630      	mov	r0, r6
 800df6c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800df70:	bfba      	itte	lt
 800df72:	461c      	movlt	r4, r3
 800df74:	2501      	movlt	r5, #1
 800df76:	2500      	movge	r5, #0
 800df78:	f7ff fcf6 	bl	800d968 <_Balloc>
 800df7c:	4602      	mov	r2, r0
 800df7e:	b918      	cbnz	r0, 800df88 <__mdiff+0x60>
 800df80:	4b31      	ldr	r3, [pc, #196]	@ (800e048 <__mdiff+0x120>)
 800df82:	f240 2145 	movw	r1, #581	@ 0x245
 800df86:	e7e3      	b.n	800df50 <__mdiff+0x28>
 800df88:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800df8c:	6926      	ldr	r6, [r4, #16]
 800df8e:	60c5      	str	r5, [r0, #12]
 800df90:	f109 0310 	add.w	r3, r9, #16
 800df94:	f109 0514 	add.w	r5, r9, #20
 800df98:	f104 0e14 	add.w	lr, r4, #20
 800df9c:	f100 0b14 	add.w	fp, r0, #20
 800dfa0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dfa4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dfa8:	9301      	str	r3, [sp, #4]
 800dfaa:	46d9      	mov	r9, fp
 800dfac:	f04f 0c00 	mov.w	ip, #0
 800dfb0:	9b01      	ldr	r3, [sp, #4]
 800dfb2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dfb6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dfba:	9301      	str	r3, [sp, #4]
 800dfbc:	fa1f f38a 	uxth.w	r3, sl
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	b283      	uxth	r3, r0
 800dfc4:	1acb      	subs	r3, r1, r3
 800dfc6:	0c00      	lsrs	r0, r0, #16
 800dfc8:	4463      	add	r3, ip
 800dfca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dfce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dfd2:	b29b      	uxth	r3, r3
 800dfd4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dfd8:	4576      	cmp	r6, lr
 800dfda:	f849 3b04 	str.w	r3, [r9], #4
 800dfde:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dfe2:	d8e5      	bhi.n	800dfb0 <__mdiff+0x88>
 800dfe4:	1b33      	subs	r3, r6, r4
 800dfe6:	3b15      	subs	r3, #21
 800dfe8:	f023 0303 	bic.w	r3, r3, #3
 800dfec:	3415      	adds	r4, #21
 800dfee:	3304      	adds	r3, #4
 800dff0:	42a6      	cmp	r6, r4
 800dff2:	bf38      	it	cc
 800dff4:	2304      	movcc	r3, #4
 800dff6:	441d      	add	r5, r3
 800dff8:	445b      	add	r3, fp
 800dffa:	461e      	mov	r6, r3
 800dffc:	462c      	mov	r4, r5
 800dffe:	4544      	cmp	r4, r8
 800e000:	d30e      	bcc.n	800e020 <__mdiff+0xf8>
 800e002:	f108 0103 	add.w	r1, r8, #3
 800e006:	1b49      	subs	r1, r1, r5
 800e008:	f021 0103 	bic.w	r1, r1, #3
 800e00c:	3d03      	subs	r5, #3
 800e00e:	45a8      	cmp	r8, r5
 800e010:	bf38      	it	cc
 800e012:	2100      	movcc	r1, #0
 800e014:	440b      	add	r3, r1
 800e016:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e01a:	b191      	cbz	r1, 800e042 <__mdiff+0x11a>
 800e01c:	6117      	str	r7, [r2, #16]
 800e01e:	e79d      	b.n	800df5c <__mdiff+0x34>
 800e020:	f854 1b04 	ldr.w	r1, [r4], #4
 800e024:	46e6      	mov	lr, ip
 800e026:	0c08      	lsrs	r0, r1, #16
 800e028:	fa1c fc81 	uxtah	ip, ip, r1
 800e02c:	4471      	add	r1, lr
 800e02e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e032:	b289      	uxth	r1, r1
 800e034:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e038:	f846 1b04 	str.w	r1, [r6], #4
 800e03c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e040:	e7dd      	b.n	800dffe <__mdiff+0xd6>
 800e042:	3f01      	subs	r7, #1
 800e044:	e7e7      	b.n	800e016 <__mdiff+0xee>
 800e046:	bf00      	nop
 800e048:	08010633 	.word	0x08010633
 800e04c:	080106a4 	.word	0x080106a4

0800e050 <__ulp>:
 800e050:	b082      	sub	sp, #8
 800e052:	ed8d 0b00 	vstr	d0, [sp]
 800e056:	9a01      	ldr	r2, [sp, #4]
 800e058:	4b0f      	ldr	r3, [pc, #60]	@ (800e098 <__ulp+0x48>)
 800e05a:	4013      	ands	r3, r2
 800e05c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e060:	2b00      	cmp	r3, #0
 800e062:	dc08      	bgt.n	800e076 <__ulp+0x26>
 800e064:	425b      	negs	r3, r3
 800e066:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e06a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e06e:	da04      	bge.n	800e07a <__ulp+0x2a>
 800e070:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e074:	4113      	asrs	r3, r2
 800e076:	2200      	movs	r2, #0
 800e078:	e008      	b.n	800e08c <__ulp+0x3c>
 800e07a:	f1a2 0314 	sub.w	r3, r2, #20
 800e07e:	2b1e      	cmp	r3, #30
 800e080:	bfda      	itte	le
 800e082:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e086:	40da      	lsrle	r2, r3
 800e088:	2201      	movgt	r2, #1
 800e08a:	2300      	movs	r3, #0
 800e08c:	4619      	mov	r1, r3
 800e08e:	4610      	mov	r0, r2
 800e090:	ec41 0b10 	vmov	d0, r0, r1
 800e094:	b002      	add	sp, #8
 800e096:	4770      	bx	lr
 800e098:	7ff00000 	.word	0x7ff00000

0800e09c <__b2d>:
 800e09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0a0:	6906      	ldr	r6, [r0, #16]
 800e0a2:	f100 0814 	add.w	r8, r0, #20
 800e0a6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e0aa:	1f37      	subs	r7, r6, #4
 800e0ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e0b0:	4610      	mov	r0, r2
 800e0b2:	f7ff fd4b 	bl	800db4c <__hi0bits>
 800e0b6:	f1c0 0320 	rsb	r3, r0, #32
 800e0ba:	280a      	cmp	r0, #10
 800e0bc:	600b      	str	r3, [r1, #0]
 800e0be:	491b      	ldr	r1, [pc, #108]	@ (800e12c <__b2d+0x90>)
 800e0c0:	dc15      	bgt.n	800e0ee <__b2d+0x52>
 800e0c2:	f1c0 0c0b 	rsb	ip, r0, #11
 800e0c6:	fa22 f30c 	lsr.w	r3, r2, ip
 800e0ca:	45b8      	cmp	r8, r7
 800e0cc:	ea43 0501 	orr.w	r5, r3, r1
 800e0d0:	bf34      	ite	cc
 800e0d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e0d6:	2300      	movcs	r3, #0
 800e0d8:	3015      	adds	r0, #21
 800e0da:	fa02 f000 	lsl.w	r0, r2, r0
 800e0de:	fa23 f30c 	lsr.w	r3, r3, ip
 800e0e2:	4303      	orrs	r3, r0
 800e0e4:	461c      	mov	r4, r3
 800e0e6:	ec45 4b10 	vmov	d0, r4, r5
 800e0ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0ee:	45b8      	cmp	r8, r7
 800e0f0:	bf3a      	itte	cc
 800e0f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e0f6:	f1a6 0708 	subcc.w	r7, r6, #8
 800e0fa:	2300      	movcs	r3, #0
 800e0fc:	380b      	subs	r0, #11
 800e0fe:	d012      	beq.n	800e126 <__b2d+0x8a>
 800e100:	f1c0 0120 	rsb	r1, r0, #32
 800e104:	fa23 f401 	lsr.w	r4, r3, r1
 800e108:	4082      	lsls	r2, r0
 800e10a:	4322      	orrs	r2, r4
 800e10c:	4547      	cmp	r7, r8
 800e10e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e112:	bf8c      	ite	hi
 800e114:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e118:	2200      	movls	r2, #0
 800e11a:	4083      	lsls	r3, r0
 800e11c:	40ca      	lsrs	r2, r1
 800e11e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e122:	4313      	orrs	r3, r2
 800e124:	e7de      	b.n	800e0e4 <__b2d+0x48>
 800e126:	ea42 0501 	orr.w	r5, r2, r1
 800e12a:	e7db      	b.n	800e0e4 <__b2d+0x48>
 800e12c:	3ff00000 	.word	0x3ff00000

0800e130 <__d2b>:
 800e130:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e134:	460f      	mov	r7, r1
 800e136:	2101      	movs	r1, #1
 800e138:	ec59 8b10 	vmov	r8, r9, d0
 800e13c:	4616      	mov	r6, r2
 800e13e:	f7ff fc13 	bl	800d968 <_Balloc>
 800e142:	4604      	mov	r4, r0
 800e144:	b930      	cbnz	r0, 800e154 <__d2b+0x24>
 800e146:	4602      	mov	r2, r0
 800e148:	4b23      	ldr	r3, [pc, #140]	@ (800e1d8 <__d2b+0xa8>)
 800e14a:	4824      	ldr	r0, [pc, #144]	@ (800e1dc <__d2b+0xac>)
 800e14c:	f240 310f 	movw	r1, #783	@ 0x30f
 800e150:	f001 f8c6 	bl	800f2e0 <__assert_func>
 800e154:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e158:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e15c:	b10d      	cbz	r5, 800e162 <__d2b+0x32>
 800e15e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e162:	9301      	str	r3, [sp, #4]
 800e164:	f1b8 0300 	subs.w	r3, r8, #0
 800e168:	d023      	beq.n	800e1b2 <__d2b+0x82>
 800e16a:	4668      	mov	r0, sp
 800e16c:	9300      	str	r3, [sp, #0]
 800e16e:	f7ff fd0c 	bl	800db8a <__lo0bits>
 800e172:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e176:	b1d0      	cbz	r0, 800e1ae <__d2b+0x7e>
 800e178:	f1c0 0320 	rsb	r3, r0, #32
 800e17c:	fa02 f303 	lsl.w	r3, r2, r3
 800e180:	430b      	orrs	r3, r1
 800e182:	40c2      	lsrs	r2, r0
 800e184:	6163      	str	r3, [r4, #20]
 800e186:	9201      	str	r2, [sp, #4]
 800e188:	9b01      	ldr	r3, [sp, #4]
 800e18a:	61a3      	str	r3, [r4, #24]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	bf0c      	ite	eq
 800e190:	2201      	moveq	r2, #1
 800e192:	2202      	movne	r2, #2
 800e194:	6122      	str	r2, [r4, #16]
 800e196:	b1a5      	cbz	r5, 800e1c2 <__d2b+0x92>
 800e198:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e19c:	4405      	add	r5, r0
 800e19e:	603d      	str	r5, [r7, #0]
 800e1a0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e1a4:	6030      	str	r0, [r6, #0]
 800e1a6:	4620      	mov	r0, r4
 800e1a8:	b003      	add	sp, #12
 800e1aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1ae:	6161      	str	r1, [r4, #20]
 800e1b0:	e7ea      	b.n	800e188 <__d2b+0x58>
 800e1b2:	a801      	add	r0, sp, #4
 800e1b4:	f7ff fce9 	bl	800db8a <__lo0bits>
 800e1b8:	9b01      	ldr	r3, [sp, #4]
 800e1ba:	6163      	str	r3, [r4, #20]
 800e1bc:	3020      	adds	r0, #32
 800e1be:	2201      	movs	r2, #1
 800e1c0:	e7e8      	b.n	800e194 <__d2b+0x64>
 800e1c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e1c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e1ca:	6038      	str	r0, [r7, #0]
 800e1cc:	6918      	ldr	r0, [r3, #16]
 800e1ce:	f7ff fcbd 	bl	800db4c <__hi0bits>
 800e1d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e1d6:	e7e5      	b.n	800e1a4 <__d2b+0x74>
 800e1d8:	08010633 	.word	0x08010633
 800e1dc:	080106a4 	.word	0x080106a4

0800e1e0 <__ratio>:
 800e1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1e4:	b085      	sub	sp, #20
 800e1e6:	e9cd 1000 	strd	r1, r0, [sp]
 800e1ea:	a902      	add	r1, sp, #8
 800e1ec:	f7ff ff56 	bl	800e09c <__b2d>
 800e1f0:	9800      	ldr	r0, [sp, #0]
 800e1f2:	a903      	add	r1, sp, #12
 800e1f4:	ec55 4b10 	vmov	r4, r5, d0
 800e1f8:	f7ff ff50 	bl	800e09c <__b2d>
 800e1fc:	9b01      	ldr	r3, [sp, #4]
 800e1fe:	6919      	ldr	r1, [r3, #16]
 800e200:	9b00      	ldr	r3, [sp, #0]
 800e202:	691b      	ldr	r3, [r3, #16]
 800e204:	1ac9      	subs	r1, r1, r3
 800e206:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e20a:	1a9b      	subs	r3, r3, r2
 800e20c:	ec5b ab10 	vmov	sl, fp, d0
 800e210:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e214:	2b00      	cmp	r3, #0
 800e216:	bfce      	itee	gt
 800e218:	462a      	movgt	r2, r5
 800e21a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e21e:	465a      	movle	r2, fp
 800e220:	462f      	mov	r7, r5
 800e222:	46d9      	mov	r9, fp
 800e224:	bfcc      	ite	gt
 800e226:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e22a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e22e:	464b      	mov	r3, r9
 800e230:	4652      	mov	r2, sl
 800e232:	4620      	mov	r0, r4
 800e234:	4639      	mov	r1, r7
 800e236:	f7f2 fb11 	bl	800085c <__aeabi_ddiv>
 800e23a:	ec41 0b10 	vmov	d0, r0, r1
 800e23e:	b005      	add	sp, #20
 800e240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e244 <__copybits>:
 800e244:	3901      	subs	r1, #1
 800e246:	b570      	push	{r4, r5, r6, lr}
 800e248:	1149      	asrs	r1, r1, #5
 800e24a:	6914      	ldr	r4, [r2, #16]
 800e24c:	3101      	adds	r1, #1
 800e24e:	f102 0314 	add.w	r3, r2, #20
 800e252:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e256:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e25a:	1f05      	subs	r5, r0, #4
 800e25c:	42a3      	cmp	r3, r4
 800e25e:	d30c      	bcc.n	800e27a <__copybits+0x36>
 800e260:	1aa3      	subs	r3, r4, r2
 800e262:	3b11      	subs	r3, #17
 800e264:	f023 0303 	bic.w	r3, r3, #3
 800e268:	3211      	adds	r2, #17
 800e26a:	42a2      	cmp	r2, r4
 800e26c:	bf88      	it	hi
 800e26e:	2300      	movhi	r3, #0
 800e270:	4418      	add	r0, r3
 800e272:	2300      	movs	r3, #0
 800e274:	4288      	cmp	r0, r1
 800e276:	d305      	bcc.n	800e284 <__copybits+0x40>
 800e278:	bd70      	pop	{r4, r5, r6, pc}
 800e27a:	f853 6b04 	ldr.w	r6, [r3], #4
 800e27e:	f845 6f04 	str.w	r6, [r5, #4]!
 800e282:	e7eb      	b.n	800e25c <__copybits+0x18>
 800e284:	f840 3b04 	str.w	r3, [r0], #4
 800e288:	e7f4      	b.n	800e274 <__copybits+0x30>

0800e28a <__any_on>:
 800e28a:	f100 0214 	add.w	r2, r0, #20
 800e28e:	6900      	ldr	r0, [r0, #16]
 800e290:	114b      	asrs	r3, r1, #5
 800e292:	4298      	cmp	r0, r3
 800e294:	b510      	push	{r4, lr}
 800e296:	db11      	blt.n	800e2bc <__any_on+0x32>
 800e298:	dd0a      	ble.n	800e2b0 <__any_on+0x26>
 800e29a:	f011 011f 	ands.w	r1, r1, #31
 800e29e:	d007      	beq.n	800e2b0 <__any_on+0x26>
 800e2a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e2a4:	fa24 f001 	lsr.w	r0, r4, r1
 800e2a8:	fa00 f101 	lsl.w	r1, r0, r1
 800e2ac:	428c      	cmp	r4, r1
 800e2ae:	d10b      	bne.n	800e2c8 <__any_on+0x3e>
 800e2b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	d803      	bhi.n	800e2c0 <__any_on+0x36>
 800e2b8:	2000      	movs	r0, #0
 800e2ba:	bd10      	pop	{r4, pc}
 800e2bc:	4603      	mov	r3, r0
 800e2be:	e7f7      	b.n	800e2b0 <__any_on+0x26>
 800e2c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e2c4:	2900      	cmp	r1, #0
 800e2c6:	d0f5      	beq.n	800e2b4 <__any_on+0x2a>
 800e2c8:	2001      	movs	r0, #1
 800e2ca:	e7f6      	b.n	800e2ba <__any_on+0x30>

0800e2cc <_strtol_l.constprop.0>:
 800e2cc:	2b24      	cmp	r3, #36	@ 0x24
 800e2ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2d2:	4686      	mov	lr, r0
 800e2d4:	4690      	mov	r8, r2
 800e2d6:	d801      	bhi.n	800e2dc <_strtol_l.constprop.0+0x10>
 800e2d8:	2b01      	cmp	r3, #1
 800e2da:	d106      	bne.n	800e2ea <_strtol_l.constprop.0+0x1e>
 800e2dc:	f7fe f860 	bl	800c3a0 <__errno>
 800e2e0:	2316      	movs	r3, #22
 800e2e2:	6003      	str	r3, [r0, #0]
 800e2e4:	2000      	movs	r0, #0
 800e2e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2ea:	4834      	ldr	r0, [pc, #208]	@ (800e3bc <_strtol_l.constprop.0+0xf0>)
 800e2ec:	460d      	mov	r5, r1
 800e2ee:	462a      	mov	r2, r5
 800e2f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e2f4:	5d06      	ldrb	r6, [r0, r4]
 800e2f6:	f016 0608 	ands.w	r6, r6, #8
 800e2fa:	d1f8      	bne.n	800e2ee <_strtol_l.constprop.0+0x22>
 800e2fc:	2c2d      	cmp	r4, #45	@ 0x2d
 800e2fe:	d12d      	bne.n	800e35c <_strtol_l.constprop.0+0x90>
 800e300:	782c      	ldrb	r4, [r5, #0]
 800e302:	2601      	movs	r6, #1
 800e304:	1c95      	adds	r5, r2, #2
 800e306:	f033 0210 	bics.w	r2, r3, #16
 800e30a:	d109      	bne.n	800e320 <_strtol_l.constprop.0+0x54>
 800e30c:	2c30      	cmp	r4, #48	@ 0x30
 800e30e:	d12a      	bne.n	800e366 <_strtol_l.constprop.0+0x9a>
 800e310:	782a      	ldrb	r2, [r5, #0]
 800e312:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e316:	2a58      	cmp	r2, #88	@ 0x58
 800e318:	d125      	bne.n	800e366 <_strtol_l.constprop.0+0x9a>
 800e31a:	786c      	ldrb	r4, [r5, #1]
 800e31c:	2310      	movs	r3, #16
 800e31e:	3502      	adds	r5, #2
 800e320:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e324:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e328:	2200      	movs	r2, #0
 800e32a:	fbbc f9f3 	udiv	r9, ip, r3
 800e32e:	4610      	mov	r0, r2
 800e330:	fb03 ca19 	mls	sl, r3, r9, ip
 800e334:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e338:	2f09      	cmp	r7, #9
 800e33a:	d81b      	bhi.n	800e374 <_strtol_l.constprop.0+0xa8>
 800e33c:	463c      	mov	r4, r7
 800e33e:	42a3      	cmp	r3, r4
 800e340:	dd27      	ble.n	800e392 <_strtol_l.constprop.0+0xc6>
 800e342:	1c57      	adds	r7, r2, #1
 800e344:	d007      	beq.n	800e356 <_strtol_l.constprop.0+0x8a>
 800e346:	4581      	cmp	r9, r0
 800e348:	d320      	bcc.n	800e38c <_strtol_l.constprop.0+0xc0>
 800e34a:	d101      	bne.n	800e350 <_strtol_l.constprop.0+0x84>
 800e34c:	45a2      	cmp	sl, r4
 800e34e:	db1d      	blt.n	800e38c <_strtol_l.constprop.0+0xc0>
 800e350:	fb00 4003 	mla	r0, r0, r3, r4
 800e354:	2201      	movs	r2, #1
 800e356:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e35a:	e7eb      	b.n	800e334 <_strtol_l.constprop.0+0x68>
 800e35c:	2c2b      	cmp	r4, #43	@ 0x2b
 800e35e:	bf04      	itt	eq
 800e360:	782c      	ldrbeq	r4, [r5, #0]
 800e362:	1c95      	addeq	r5, r2, #2
 800e364:	e7cf      	b.n	800e306 <_strtol_l.constprop.0+0x3a>
 800e366:	2b00      	cmp	r3, #0
 800e368:	d1da      	bne.n	800e320 <_strtol_l.constprop.0+0x54>
 800e36a:	2c30      	cmp	r4, #48	@ 0x30
 800e36c:	bf0c      	ite	eq
 800e36e:	2308      	moveq	r3, #8
 800e370:	230a      	movne	r3, #10
 800e372:	e7d5      	b.n	800e320 <_strtol_l.constprop.0+0x54>
 800e374:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e378:	2f19      	cmp	r7, #25
 800e37a:	d801      	bhi.n	800e380 <_strtol_l.constprop.0+0xb4>
 800e37c:	3c37      	subs	r4, #55	@ 0x37
 800e37e:	e7de      	b.n	800e33e <_strtol_l.constprop.0+0x72>
 800e380:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e384:	2f19      	cmp	r7, #25
 800e386:	d804      	bhi.n	800e392 <_strtol_l.constprop.0+0xc6>
 800e388:	3c57      	subs	r4, #87	@ 0x57
 800e38a:	e7d8      	b.n	800e33e <_strtol_l.constprop.0+0x72>
 800e38c:	f04f 32ff 	mov.w	r2, #4294967295
 800e390:	e7e1      	b.n	800e356 <_strtol_l.constprop.0+0x8a>
 800e392:	1c53      	adds	r3, r2, #1
 800e394:	d108      	bne.n	800e3a8 <_strtol_l.constprop.0+0xdc>
 800e396:	2322      	movs	r3, #34	@ 0x22
 800e398:	f8ce 3000 	str.w	r3, [lr]
 800e39c:	4660      	mov	r0, ip
 800e39e:	f1b8 0f00 	cmp.w	r8, #0
 800e3a2:	d0a0      	beq.n	800e2e6 <_strtol_l.constprop.0+0x1a>
 800e3a4:	1e69      	subs	r1, r5, #1
 800e3a6:	e006      	b.n	800e3b6 <_strtol_l.constprop.0+0xea>
 800e3a8:	b106      	cbz	r6, 800e3ac <_strtol_l.constprop.0+0xe0>
 800e3aa:	4240      	negs	r0, r0
 800e3ac:	f1b8 0f00 	cmp.w	r8, #0
 800e3b0:	d099      	beq.n	800e2e6 <_strtol_l.constprop.0+0x1a>
 800e3b2:	2a00      	cmp	r2, #0
 800e3b4:	d1f6      	bne.n	800e3a4 <_strtol_l.constprop.0+0xd8>
 800e3b6:	f8c8 1000 	str.w	r1, [r8]
 800e3ba:	e794      	b.n	800e2e6 <_strtol_l.constprop.0+0x1a>
 800e3bc:	08010801 	.word	0x08010801

0800e3c0 <_strtol_r>:
 800e3c0:	f7ff bf84 	b.w	800e2cc <_strtol_l.constprop.0>

0800e3c4 <__ascii_wctomb>:
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	4608      	mov	r0, r1
 800e3c8:	b141      	cbz	r1, 800e3dc <__ascii_wctomb+0x18>
 800e3ca:	2aff      	cmp	r2, #255	@ 0xff
 800e3cc:	d904      	bls.n	800e3d8 <__ascii_wctomb+0x14>
 800e3ce:	228a      	movs	r2, #138	@ 0x8a
 800e3d0:	601a      	str	r2, [r3, #0]
 800e3d2:	f04f 30ff 	mov.w	r0, #4294967295
 800e3d6:	4770      	bx	lr
 800e3d8:	700a      	strb	r2, [r1, #0]
 800e3da:	2001      	movs	r0, #1
 800e3dc:	4770      	bx	lr

0800e3de <__ssputs_r>:
 800e3de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3e2:	688e      	ldr	r6, [r1, #8]
 800e3e4:	461f      	mov	r7, r3
 800e3e6:	42be      	cmp	r6, r7
 800e3e8:	680b      	ldr	r3, [r1, #0]
 800e3ea:	4682      	mov	sl, r0
 800e3ec:	460c      	mov	r4, r1
 800e3ee:	4690      	mov	r8, r2
 800e3f0:	d82d      	bhi.n	800e44e <__ssputs_r+0x70>
 800e3f2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e3f6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e3fa:	d026      	beq.n	800e44a <__ssputs_r+0x6c>
 800e3fc:	6965      	ldr	r5, [r4, #20]
 800e3fe:	6909      	ldr	r1, [r1, #16]
 800e400:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e404:	eba3 0901 	sub.w	r9, r3, r1
 800e408:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e40c:	1c7b      	adds	r3, r7, #1
 800e40e:	444b      	add	r3, r9
 800e410:	106d      	asrs	r5, r5, #1
 800e412:	429d      	cmp	r5, r3
 800e414:	bf38      	it	cc
 800e416:	461d      	movcc	r5, r3
 800e418:	0553      	lsls	r3, r2, #21
 800e41a:	d527      	bpl.n	800e46c <__ssputs_r+0x8e>
 800e41c:	4629      	mov	r1, r5
 800e41e:	f7ff fa05 	bl	800d82c <_malloc_r>
 800e422:	4606      	mov	r6, r0
 800e424:	b360      	cbz	r0, 800e480 <__ssputs_r+0xa2>
 800e426:	6921      	ldr	r1, [r4, #16]
 800e428:	464a      	mov	r2, r9
 800e42a:	f7fd ffe6 	bl	800c3fa <memcpy>
 800e42e:	89a3      	ldrh	r3, [r4, #12]
 800e430:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e434:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e438:	81a3      	strh	r3, [r4, #12]
 800e43a:	6126      	str	r6, [r4, #16]
 800e43c:	6165      	str	r5, [r4, #20]
 800e43e:	444e      	add	r6, r9
 800e440:	eba5 0509 	sub.w	r5, r5, r9
 800e444:	6026      	str	r6, [r4, #0]
 800e446:	60a5      	str	r5, [r4, #8]
 800e448:	463e      	mov	r6, r7
 800e44a:	42be      	cmp	r6, r7
 800e44c:	d900      	bls.n	800e450 <__ssputs_r+0x72>
 800e44e:	463e      	mov	r6, r7
 800e450:	6820      	ldr	r0, [r4, #0]
 800e452:	4632      	mov	r2, r6
 800e454:	4641      	mov	r1, r8
 800e456:	f000 fef6 	bl	800f246 <memmove>
 800e45a:	68a3      	ldr	r3, [r4, #8]
 800e45c:	1b9b      	subs	r3, r3, r6
 800e45e:	60a3      	str	r3, [r4, #8]
 800e460:	6823      	ldr	r3, [r4, #0]
 800e462:	4433      	add	r3, r6
 800e464:	6023      	str	r3, [r4, #0]
 800e466:	2000      	movs	r0, #0
 800e468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e46c:	462a      	mov	r2, r5
 800e46e:	f000 ff69 	bl	800f344 <_realloc_r>
 800e472:	4606      	mov	r6, r0
 800e474:	2800      	cmp	r0, #0
 800e476:	d1e0      	bne.n	800e43a <__ssputs_r+0x5c>
 800e478:	6921      	ldr	r1, [r4, #16]
 800e47a:	4650      	mov	r0, sl
 800e47c:	f7fe fe28 	bl	800d0d0 <_free_r>
 800e480:	230c      	movs	r3, #12
 800e482:	f8ca 3000 	str.w	r3, [sl]
 800e486:	89a3      	ldrh	r3, [r4, #12]
 800e488:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e48c:	81a3      	strh	r3, [r4, #12]
 800e48e:	f04f 30ff 	mov.w	r0, #4294967295
 800e492:	e7e9      	b.n	800e468 <__ssputs_r+0x8a>

0800e494 <_svfiprintf_r>:
 800e494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e498:	4698      	mov	r8, r3
 800e49a:	898b      	ldrh	r3, [r1, #12]
 800e49c:	061b      	lsls	r3, r3, #24
 800e49e:	b09d      	sub	sp, #116	@ 0x74
 800e4a0:	4607      	mov	r7, r0
 800e4a2:	460d      	mov	r5, r1
 800e4a4:	4614      	mov	r4, r2
 800e4a6:	d510      	bpl.n	800e4ca <_svfiprintf_r+0x36>
 800e4a8:	690b      	ldr	r3, [r1, #16]
 800e4aa:	b973      	cbnz	r3, 800e4ca <_svfiprintf_r+0x36>
 800e4ac:	2140      	movs	r1, #64	@ 0x40
 800e4ae:	f7ff f9bd 	bl	800d82c <_malloc_r>
 800e4b2:	6028      	str	r0, [r5, #0]
 800e4b4:	6128      	str	r0, [r5, #16]
 800e4b6:	b930      	cbnz	r0, 800e4c6 <_svfiprintf_r+0x32>
 800e4b8:	230c      	movs	r3, #12
 800e4ba:	603b      	str	r3, [r7, #0]
 800e4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e4c0:	b01d      	add	sp, #116	@ 0x74
 800e4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4c6:	2340      	movs	r3, #64	@ 0x40
 800e4c8:	616b      	str	r3, [r5, #20]
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4ce:	2320      	movs	r3, #32
 800e4d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e4d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4d8:	2330      	movs	r3, #48	@ 0x30
 800e4da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e678 <_svfiprintf_r+0x1e4>
 800e4de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e4e2:	f04f 0901 	mov.w	r9, #1
 800e4e6:	4623      	mov	r3, r4
 800e4e8:	469a      	mov	sl, r3
 800e4ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4ee:	b10a      	cbz	r2, 800e4f4 <_svfiprintf_r+0x60>
 800e4f0:	2a25      	cmp	r2, #37	@ 0x25
 800e4f2:	d1f9      	bne.n	800e4e8 <_svfiprintf_r+0x54>
 800e4f4:	ebba 0b04 	subs.w	fp, sl, r4
 800e4f8:	d00b      	beq.n	800e512 <_svfiprintf_r+0x7e>
 800e4fa:	465b      	mov	r3, fp
 800e4fc:	4622      	mov	r2, r4
 800e4fe:	4629      	mov	r1, r5
 800e500:	4638      	mov	r0, r7
 800e502:	f7ff ff6c 	bl	800e3de <__ssputs_r>
 800e506:	3001      	adds	r0, #1
 800e508:	f000 80a7 	beq.w	800e65a <_svfiprintf_r+0x1c6>
 800e50c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e50e:	445a      	add	r2, fp
 800e510:	9209      	str	r2, [sp, #36]	@ 0x24
 800e512:	f89a 3000 	ldrb.w	r3, [sl]
 800e516:	2b00      	cmp	r3, #0
 800e518:	f000 809f 	beq.w	800e65a <_svfiprintf_r+0x1c6>
 800e51c:	2300      	movs	r3, #0
 800e51e:	f04f 32ff 	mov.w	r2, #4294967295
 800e522:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e526:	f10a 0a01 	add.w	sl, sl, #1
 800e52a:	9304      	str	r3, [sp, #16]
 800e52c:	9307      	str	r3, [sp, #28]
 800e52e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e532:	931a      	str	r3, [sp, #104]	@ 0x68
 800e534:	4654      	mov	r4, sl
 800e536:	2205      	movs	r2, #5
 800e538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e53c:	484e      	ldr	r0, [pc, #312]	@ (800e678 <_svfiprintf_r+0x1e4>)
 800e53e:	f7f1 fe4f 	bl	80001e0 <memchr>
 800e542:	9a04      	ldr	r2, [sp, #16]
 800e544:	b9d8      	cbnz	r0, 800e57e <_svfiprintf_r+0xea>
 800e546:	06d0      	lsls	r0, r2, #27
 800e548:	bf44      	itt	mi
 800e54a:	2320      	movmi	r3, #32
 800e54c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e550:	0711      	lsls	r1, r2, #28
 800e552:	bf44      	itt	mi
 800e554:	232b      	movmi	r3, #43	@ 0x2b
 800e556:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e55a:	f89a 3000 	ldrb.w	r3, [sl]
 800e55e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e560:	d015      	beq.n	800e58e <_svfiprintf_r+0xfa>
 800e562:	9a07      	ldr	r2, [sp, #28]
 800e564:	4654      	mov	r4, sl
 800e566:	2000      	movs	r0, #0
 800e568:	f04f 0c0a 	mov.w	ip, #10
 800e56c:	4621      	mov	r1, r4
 800e56e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e572:	3b30      	subs	r3, #48	@ 0x30
 800e574:	2b09      	cmp	r3, #9
 800e576:	d94b      	bls.n	800e610 <_svfiprintf_r+0x17c>
 800e578:	b1b0      	cbz	r0, 800e5a8 <_svfiprintf_r+0x114>
 800e57a:	9207      	str	r2, [sp, #28]
 800e57c:	e014      	b.n	800e5a8 <_svfiprintf_r+0x114>
 800e57e:	eba0 0308 	sub.w	r3, r0, r8
 800e582:	fa09 f303 	lsl.w	r3, r9, r3
 800e586:	4313      	orrs	r3, r2
 800e588:	9304      	str	r3, [sp, #16]
 800e58a:	46a2      	mov	sl, r4
 800e58c:	e7d2      	b.n	800e534 <_svfiprintf_r+0xa0>
 800e58e:	9b03      	ldr	r3, [sp, #12]
 800e590:	1d19      	adds	r1, r3, #4
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	9103      	str	r1, [sp, #12]
 800e596:	2b00      	cmp	r3, #0
 800e598:	bfbb      	ittet	lt
 800e59a:	425b      	neglt	r3, r3
 800e59c:	f042 0202 	orrlt.w	r2, r2, #2
 800e5a0:	9307      	strge	r3, [sp, #28]
 800e5a2:	9307      	strlt	r3, [sp, #28]
 800e5a4:	bfb8      	it	lt
 800e5a6:	9204      	strlt	r2, [sp, #16]
 800e5a8:	7823      	ldrb	r3, [r4, #0]
 800e5aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800e5ac:	d10a      	bne.n	800e5c4 <_svfiprintf_r+0x130>
 800e5ae:	7863      	ldrb	r3, [r4, #1]
 800e5b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e5b2:	d132      	bne.n	800e61a <_svfiprintf_r+0x186>
 800e5b4:	9b03      	ldr	r3, [sp, #12]
 800e5b6:	1d1a      	adds	r2, r3, #4
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	9203      	str	r2, [sp, #12]
 800e5bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e5c0:	3402      	adds	r4, #2
 800e5c2:	9305      	str	r3, [sp, #20]
 800e5c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e688 <_svfiprintf_r+0x1f4>
 800e5c8:	7821      	ldrb	r1, [r4, #0]
 800e5ca:	2203      	movs	r2, #3
 800e5cc:	4650      	mov	r0, sl
 800e5ce:	f7f1 fe07 	bl	80001e0 <memchr>
 800e5d2:	b138      	cbz	r0, 800e5e4 <_svfiprintf_r+0x150>
 800e5d4:	9b04      	ldr	r3, [sp, #16]
 800e5d6:	eba0 000a 	sub.w	r0, r0, sl
 800e5da:	2240      	movs	r2, #64	@ 0x40
 800e5dc:	4082      	lsls	r2, r0
 800e5de:	4313      	orrs	r3, r2
 800e5e0:	3401      	adds	r4, #1
 800e5e2:	9304      	str	r3, [sp, #16]
 800e5e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5e8:	4824      	ldr	r0, [pc, #144]	@ (800e67c <_svfiprintf_r+0x1e8>)
 800e5ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e5ee:	2206      	movs	r2, #6
 800e5f0:	f7f1 fdf6 	bl	80001e0 <memchr>
 800e5f4:	2800      	cmp	r0, #0
 800e5f6:	d036      	beq.n	800e666 <_svfiprintf_r+0x1d2>
 800e5f8:	4b21      	ldr	r3, [pc, #132]	@ (800e680 <_svfiprintf_r+0x1ec>)
 800e5fa:	bb1b      	cbnz	r3, 800e644 <_svfiprintf_r+0x1b0>
 800e5fc:	9b03      	ldr	r3, [sp, #12]
 800e5fe:	3307      	adds	r3, #7
 800e600:	f023 0307 	bic.w	r3, r3, #7
 800e604:	3308      	adds	r3, #8
 800e606:	9303      	str	r3, [sp, #12]
 800e608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e60a:	4433      	add	r3, r6
 800e60c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e60e:	e76a      	b.n	800e4e6 <_svfiprintf_r+0x52>
 800e610:	fb0c 3202 	mla	r2, ip, r2, r3
 800e614:	460c      	mov	r4, r1
 800e616:	2001      	movs	r0, #1
 800e618:	e7a8      	b.n	800e56c <_svfiprintf_r+0xd8>
 800e61a:	2300      	movs	r3, #0
 800e61c:	3401      	adds	r4, #1
 800e61e:	9305      	str	r3, [sp, #20]
 800e620:	4619      	mov	r1, r3
 800e622:	f04f 0c0a 	mov.w	ip, #10
 800e626:	4620      	mov	r0, r4
 800e628:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e62c:	3a30      	subs	r2, #48	@ 0x30
 800e62e:	2a09      	cmp	r2, #9
 800e630:	d903      	bls.n	800e63a <_svfiprintf_r+0x1a6>
 800e632:	2b00      	cmp	r3, #0
 800e634:	d0c6      	beq.n	800e5c4 <_svfiprintf_r+0x130>
 800e636:	9105      	str	r1, [sp, #20]
 800e638:	e7c4      	b.n	800e5c4 <_svfiprintf_r+0x130>
 800e63a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e63e:	4604      	mov	r4, r0
 800e640:	2301      	movs	r3, #1
 800e642:	e7f0      	b.n	800e626 <_svfiprintf_r+0x192>
 800e644:	ab03      	add	r3, sp, #12
 800e646:	9300      	str	r3, [sp, #0]
 800e648:	462a      	mov	r2, r5
 800e64a:	4b0e      	ldr	r3, [pc, #56]	@ (800e684 <_svfiprintf_r+0x1f0>)
 800e64c:	a904      	add	r1, sp, #16
 800e64e:	4638      	mov	r0, r7
 800e650:	f7fc fe70 	bl	800b334 <_printf_float>
 800e654:	1c42      	adds	r2, r0, #1
 800e656:	4606      	mov	r6, r0
 800e658:	d1d6      	bne.n	800e608 <_svfiprintf_r+0x174>
 800e65a:	89ab      	ldrh	r3, [r5, #12]
 800e65c:	065b      	lsls	r3, r3, #25
 800e65e:	f53f af2d 	bmi.w	800e4bc <_svfiprintf_r+0x28>
 800e662:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e664:	e72c      	b.n	800e4c0 <_svfiprintf_r+0x2c>
 800e666:	ab03      	add	r3, sp, #12
 800e668:	9300      	str	r3, [sp, #0]
 800e66a:	462a      	mov	r2, r5
 800e66c:	4b05      	ldr	r3, [pc, #20]	@ (800e684 <_svfiprintf_r+0x1f0>)
 800e66e:	a904      	add	r1, sp, #16
 800e670:	4638      	mov	r0, r7
 800e672:	f7fd f8f7 	bl	800b864 <_printf_i>
 800e676:	e7ed      	b.n	800e654 <_svfiprintf_r+0x1c0>
 800e678:	08010901 	.word	0x08010901
 800e67c:	0801090b 	.word	0x0801090b
 800e680:	0800b335 	.word	0x0800b335
 800e684:	0800e3df 	.word	0x0800e3df
 800e688:	08010907 	.word	0x08010907

0800e68c <_sungetc_r>:
 800e68c:	b538      	push	{r3, r4, r5, lr}
 800e68e:	1c4b      	adds	r3, r1, #1
 800e690:	4614      	mov	r4, r2
 800e692:	d103      	bne.n	800e69c <_sungetc_r+0x10>
 800e694:	f04f 35ff 	mov.w	r5, #4294967295
 800e698:	4628      	mov	r0, r5
 800e69a:	bd38      	pop	{r3, r4, r5, pc}
 800e69c:	8993      	ldrh	r3, [r2, #12]
 800e69e:	f023 0320 	bic.w	r3, r3, #32
 800e6a2:	8193      	strh	r3, [r2, #12]
 800e6a4:	6853      	ldr	r3, [r2, #4]
 800e6a6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800e6a8:	b2cd      	uxtb	r5, r1
 800e6aa:	b18a      	cbz	r2, 800e6d0 <_sungetc_r+0x44>
 800e6ac:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	dd08      	ble.n	800e6c4 <_sungetc_r+0x38>
 800e6b2:	6823      	ldr	r3, [r4, #0]
 800e6b4:	1e5a      	subs	r2, r3, #1
 800e6b6:	6022      	str	r2, [r4, #0]
 800e6b8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e6bc:	6863      	ldr	r3, [r4, #4]
 800e6be:	3301      	adds	r3, #1
 800e6c0:	6063      	str	r3, [r4, #4]
 800e6c2:	e7e9      	b.n	800e698 <_sungetc_r+0xc>
 800e6c4:	4621      	mov	r1, r4
 800e6c6:	f000 fd84 	bl	800f1d2 <__submore>
 800e6ca:	2800      	cmp	r0, #0
 800e6cc:	d0f1      	beq.n	800e6b2 <_sungetc_r+0x26>
 800e6ce:	e7e1      	b.n	800e694 <_sungetc_r+0x8>
 800e6d0:	6921      	ldr	r1, [r4, #16]
 800e6d2:	6822      	ldr	r2, [r4, #0]
 800e6d4:	b141      	cbz	r1, 800e6e8 <_sungetc_r+0x5c>
 800e6d6:	4291      	cmp	r1, r2
 800e6d8:	d206      	bcs.n	800e6e8 <_sungetc_r+0x5c>
 800e6da:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800e6de:	42a9      	cmp	r1, r5
 800e6e0:	d102      	bne.n	800e6e8 <_sungetc_r+0x5c>
 800e6e2:	3a01      	subs	r2, #1
 800e6e4:	6022      	str	r2, [r4, #0]
 800e6e6:	e7ea      	b.n	800e6be <_sungetc_r+0x32>
 800e6e8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800e6ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800e6f2:	2303      	movs	r3, #3
 800e6f4:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e6f6:	4623      	mov	r3, r4
 800e6f8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e6fc:	6023      	str	r3, [r4, #0]
 800e6fe:	2301      	movs	r3, #1
 800e700:	e7de      	b.n	800e6c0 <_sungetc_r+0x34>

0800e702 <__ssrefill_r>:
 800e702:	b510      	push	{r4, lr}
 800e704:	460c      	mov	r4, r1
 800e706:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e708:	b169      	cbz	r1, 800e726 <__ssrefill_r+0x24>
 800e70a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e70e:	4299      	cmp	r1, r3
 800e710:	d001      	beq.n	800e716 <__ssrefill_r+0x14>
 800e712:	f7fe fcdd 	bl	800d0d0 <_free_r>
 800e716:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e718:	6063      	str	r3, [r4, #4]
 800e71a:	2000      	movs	r0, #0
 800e71c:	6360      	str	r0, [r4, #52]	@ 0x34
 800e71e:	b113      	cbz	r3, 800e726 <__ssrefill_r+0x24>
 800e720:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e722:	6023      	str	r3, [r4, #0]
 800e724:	bd10      	pop	{r4, pc}
 800e726:	6923      	ldr	r3, [r4, #16]
 800e728:	6023      	str	r3, [r4, #0]
 800e72a:	2300      	movs	r3, #0
 800e72c:	6063      	str	r3, [r4, #4]
 800e72e:	89a3      	ldrh	r3, [r4, #12]
 800e730:	f043 0320 	orr.w	r3, r3, #32
 800e734:	81a3      	strh	r3, [r4, #12]
 800e736:	f04f 30ff 	mov.w	r0, #4294967295
 800e73a:	e7f3      	b.n	800e724 <__ssrefill_r+0x22>

0800e73c <__ssvfiscanf_r>:
 800e73c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e740:	460c      	mov	r4, r1
 800e742:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800e746:	2100      	movs	r1, #0
 800e748:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800e74c:	49a5      	ldr	r1, [pc, #660]	@ (800e9e4 <__ssvfiscanf_r+0x2a8>)
 800e74e:	91a0      	str	r1, [sp, #640]	@ 0x280
 800e750:	f10d 0804 	add.w	r8, sp, #4
 800e754:	49a4      	ldr	r1, [pc, #656]	@ (800e9e8 <__ssvfiscanf_r+0x2ac>)
 800e756:	4fa5      	ldr	r7, [pc, #660]	@ (800e9ec <__ssvfiscanf_r+0x2b0>)
 800e758:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800e75c:	4606      	mov	r6, r0
 800e75e:	91a1      	str	r1, [sp, #644]	@ 0x284
 800e760:	9300      	str	r3, [sp, #0]
 800e762:	7813      	ldrb	r3, [r2, #0]
 800e764:	2b00      	cmp	r3, #0
 800e766:	f000 8158 	beq.w	800ea1a <__ssvfiscanf_r+0x2de>
 800e76a:	5cf9      	ldrb	r1, [r7, r3]
 800e76c:	f011 0108 	ands.w	r1, r1, #8
 800e770:	f102 0501 	add.w	r5, r2, #1
 800e774:	d019      	beq.n	800e7aa <__ssvfiscanf_r+0x6e>
 800e776:	6863      	ldr	r3, [r4, #4]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	dd0f      	ble.n	800e79c <__ssvfiscanf_r+0x60>
 800e77c:	6823      	ldr	r3, [r4, #0]
 800e77e:	781a      	ldrb	r2, [r3, #0]
 800e780:	5cba      	ldrb	r2, [r7, r2]
 800e782:	0712      	lsls	r2, r2, #28
 800e784:	d401      	bmi.n	800e78a <__ssvfiscanf_r+0x4e>
 800e786:	462a      	mov	r2, r5
 800e788:	e7eb      	b.n	800e762 <__ssvfiscanf_r+0x26>
 800e78a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e78c:	3201      	adds	r2, #1
 800e78e:	9245      	str	r2, [sp, #276]	@ 0x114
 800e790:	6862      	ldr	r2, [r4, #4]
 800e792:	3301      	adds	r3, #1
 800e794:	3a01      	subs	r2, #1
 800e796:	6062      	str	r2, [r4, #4]
 800e798:	6023      	str	r3, [r4, #0]
 800e79a:	e7ec      	b.n	800e776 <__ssvfiscanf_r+0x3a>
 800e79c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e79e:	4621      	mov	r1, r4
 800e7a0:	4630      	mov	r0, r6
 800e7a2:	4798      	blx	r3
 800e7a4:	2800      	cmp	r0, #0
 800e7a6:	d0e9      	beq.n	800e77c <__ssvfiscanf_r+0x40>
 800e7a8:	e7ed      	b.n	800e786 <__ssvfiscanf_r+0x4a>
 800e7aa:	2b25      	cmp	r3, #37	@ 0x25
 800e7ac:	d012      	beq.n	800e7d4 <__ssvfiscanf_r+0x98>
 800e7ae:	4699      	mov	r9, r3
 800e7b0:	6863      	ldr	r3, [r4, #4]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	f340 8093 	ble.w	800e8de <__ssvfiscanf_r+0x1a2>
 800e7b8:	6822      	ldr	r2, [r4, #0]
 800e7ba:	7813      	ldrb	r3, [r2, #0]
 800e7bc:	454b      	cmp	r3, r9
 800e7be:	f040 812c 	bne.w	800ea1a <__ssvfiscanf_r+0x2de>
 800e7c2:	6863      	ldr	r3, [r4, #4]
 800e7c4:	3b01      	subs	r3, #1
 800e7c6:	6063      	str	r3, [r4, #4]
 800e7c8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800e7ca:	3201      	adds	r2, #1
 800e7cc:	3301      	adds	r3, #1
 800e7ce:	6022      	str	r2, [r4, #0]
 800e7d0:	9345      	str	r3, [sp, #276]	@ 0x114
 800e7d2:	e7d8      	b.n	800e786 <__ssvfiscanf_r+0x4a>
 800e7d4:	9141      	str	r1, [sp, #260]	@ 0x104
 800e7d6:	9143      	str	r1, [sp, #268]	@ 0x10c
 800e7d8:	7853      	ldrb	r3, [r2, #1]
 800e7da:	2b2a      	cmp	r3, #42	@ 0x2a
 800e7dc:	bf02      	ittt	eq
 800e7de:	2310      	moveq	r3, #16
 800e7e0:	1c95      	addeq	r5, r2, #2
 800e7e2:	9341      	streq	r3, [sp, #260]	@ 0x104
 800e7e4:	220a      	movs	r2, #10
 800e7e6:	46a9      	mov	r9, r5
 800e7e8:	f819 1b01 	ldrb.w	r1, [r9], #1
 800e7ec:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800e7f0:	2b09      	cmp	r3, #9
 800e7f2:	d91e      	bls.n	800e832 <__ssvfiscanf_r+0xf6>
 800e7f4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800e9f0 <__ssvfiscanf_r+0x2b4>
 800e7f8:	2203      	movs	r2, #3
 800e7fa:	4650      	mov	r0, sl
 800e7fc:	f7f1 fcf0 	bl	80001e0 <memchr>
 800e800:	b138      	cbz	r0, 800e812 <__ssvfiscanf_r+0xd6>
 800e802:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e804:	eba0 000a 	sub.w	r0, r0, sl
 800e808:	2301      	movs	r3, #1
 800e80a:	4083      	lsls	r3, r0
 800e80c:	4313      	orrs	r3, r2
 800e80e:	9341      	str	r3, [sp, #260]	@ 0x104
 800e810:	464d      	mov	r5, r9
 800e812:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e816:	2b78      	cmp	r3, #120	@ 0x78
 800e818:	d806      	bhi.n	800e828 <__ssvfiscanf_r+0xec>
 800e81a:	2b57      	cmp	r3, #87	@ 0x57
 800e81c:	d810      	bhi.n	800e840 <__ssvfiscanf_r+0x104>
 800e81e:	2b25      	cmp	r3, #37	@ 0x25
 800e820:	d0c5      	beq.n	800e7ae <__ssvfiscanf_r+0x72>
 800e822:	d857      	bhi.n	800e8d4 <__ssvfiscanf_r+0x198>
 800e824:	2b00      	cmp	r3, #0
 800e826:	d065      	beq.n	800e8f4 <__ssvfiscanf_r+0x1b8>
 800e828:	2303      	movs	r3, #3
 800e82a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e82c:	230a      	movs	r3, #10
 800e82e:	9342      	str	r3, [sp, #264]	@ 0x108
 800e830:	e078      	b.n	800e924 <__ssvfiscanf_r+0x1e8>
 800e832:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800e834:	fb02 1103 	mla	r1, r2, r3, r1
 800e838:	3930      	subs	r1, #48	@ 0x30
 800e83a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800e83c:	464d      	mov	r5, r9
 800e83e:	e7d2      	b.n	800e7e6 <__ssvfiscanf_r+0xaa>
 800e840:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800e844:	2a20      	cmp	r2, #32
 800e846:	d8ef      	bhi.n	800e828 <__ssvfiscanf_r+0xec>
 800e848:	a101      	add	r1, pc, #4	@ (adr r1, 800e850 <__ssvfiscanf_r+0x114>)
 800e84a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e84e:	bf00      	nop
 800e850:	0800e903 	.word	0x0800e903
 800e854:	0800e829 	.word	0x0800e829
 800e858:	0800e829 	.word	0x0800e829
 800e85c:	0800e95d 	.word	0x0800e95d
 800e860:	0800e829 	.word	0x0800e829
 800e864:	0800e829 	.word	0x0800e829
 800e868:	0800e829 	.word	0x0800e829
 800e86c:	0800e829 	.word	0x0800e829
 800e870:	0800e829 	.word	0x0800e829
 800e874:	0800e829 	.word	0x0800e829
 800e878:	0800e829 	.word	0x0800e829
 800e87c:	0800e973 	.word	0x0800e973
 800e880:	0800e959 	.word	0x0800e959
 800e884:	0800e8db 	.word	0x0800e8db
 800e888:	0800e8db 	.word	0x0800e8db
 800e88c:	0800e8db 	.word	0x0800e8db
 800e890:	0800e829 	.word	0x0800e829
 800e894:	0800e915 	.word	0x0800e915
 800e898:	0800e829 	.word	0x0800e829
 800e89c:	0800e829 	.word	0x0800e829
 800e8a0:	0800e829 	.word	0x0800e829
 800e8a4:	0800e829 	.word	0x0800e829
 800e8a8:	0800e983 	.word	0x0800e983
 800e8ac:	0800e91d 	.word	0x0800e91d
 800e8b0:	0800e8fb 	.word	0x0800e8fb
 800e8b4:	0800e829 	.word	0x0800e829
 800e8b8:	0800e829 	.word	0x0800e829
 800e8bc:	0800e97f 	.word	0x0800e97f
 800e8c0:	0800e829 	.word	0x0800e829
 800e8c4:	0800e959 	.word	0x0800e959
 800e8c8:	0800e829 	.word	0x0800e829
 800e8cc:	0800e829 	.word	0x0800e829
 800e8d0:	0800e903 	.word	0x0800e903
 800e8d4:	3b45      	subs	r3, #69	@ 0x45
 800e8d6:	2b02      	cmp	r3, #2
 800e8d8:	d8a6      	bhi.n	800e828 <__ssvfiscanf_r+0xec>
 800e8da:	2305      	movs	r3, #5
 800e8dc:	e021      	b.n	800e922 <__ssvfiscanf_r+0x1e6>
 800e8de:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e8e0:	4621      	mov	r1, r4
 800e8e2:	4630      	mov	r0, r6
 800e8e4:	4798      	blx	r3
 800e8e6:	2800      	cmp	r0, #0
 800e8e8:	f43f af66 	beq.w	800e7b8 <__ssvfiscanf_r+0x7c>
 800e8ec:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e8ee:	2800      	cmp	r0, #0
 800e8f0:	f040 808b 	bne.w	800ea0a <__ssvfiscanf_r+0x2ce>
 800e8f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e8f8:	e08b      	b.n	800ea12 <__ssvfiscanf_r+0x2d6>
 800e8fa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e8fc:	f042 0220 	orr.w	r2, r2, #32
 800e900:	9241      	str	r2, [sp, #260]	@ 0x104
 800e902:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e904:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e908:	9241      	str	r2, [sp, #260]	@ 0x104
 800e90a:	2210      	movs	r2, #16
 800e90c:	2b6e      	cmp	r3, #110	@ 0x6e
 800e90e:	9242      	str	r2, [sp, #264]	@ 0x108
 800e910:	d902      	bls.n	800e918 <__ssvfiscanf_r+0x1dc>
 800e912:	e005      	b.n	800e920 <__ssvfiscanf_r+0x1e4>
 800e914:	2300      	movs	r3, #0
 800e916:	9342      	str	r3, [sp, #264]	@ 0x108
 800e918:	2303      	movs	r3, #3
 800e91a:	e002      	b.n	800e922 <__ssvfiscanf_r+0x1e6>
 800e91c:	2308      	movs	r3, #8
 800e91e:	9342      	str	r3, [sp, #264]	@ 0x108
 800e920:	2304      	movs	r3, #4
 800e922:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e924:	6863      	ldr	r3, [r4, #4]
 800e926:	2b00      	cmp	r3, #0
 800e928:	dd39      	ble.n	800e99e <__ssvfiscanf_r+0x262>
 800e92a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e92c:	0659      	lsls	r1, r3, #25
 800e92e:	d404      	bmi.n	800e93a <__ssvfiscanf_r+0x1fe>
 800e930:	6823      	ldr	r3, [r4, #0]
 800e932:	781a      	ldrb	r2, [r3, #0]
 800e934:	5cba      	ldrb	r2, [r7, r2]
 800e936:	0712      	lsls	r2, r2, #28
 800e938:	d438      	bmi.n	800e9ac <__ssvfiscanf_r+0x270>
 800e93a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800e93c:	2b02      	cmp	r3, #2
 800e93e:	dc47      	bgt.n	800e9d0 <__ssvfiscanf_r+0x294>
 800e940:	466b      	mov	r3, sp
 800e942:	4622      	mov	r2, r4
 800e944:	a941      	add	r1, sp, #260	@ 0x104
 800e946:	4630      	mov	r0, r6
 800e948:	f000 f9ae 	bl	800eca8 <_scanf_chars>
 800e94c:	2801      	cmp	r0, #1
 800e94e:	d064      	beq.n	800ea1a <__ssvfiscanf_r+0x2de>
 800e950:	2802      	cmp	r0, #2
 800e952:	f47f af18 	bne.w	800e786 <__ssvfiscanf_r+0x4a>
 800e956:	e7c9      	b.n	800e8ec <__ssvfiscanf_r+0x1b0>
 800e958:	220a      	movs	r2, #10
 800e95a:	e7d7      	b.n	800e90c <__ssvfiscanf_r+0x1d0>
 800e95c:	4629      	mov	r1, r5
 800e95e:	4640      	mov	r0, r8
 800e960:	f000 fbfe 	bl	800f160 <__sccl>
 800e964:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e96a:	9341      	str	r3, [sp, #260]	@ 0x104
 800e96c:	4605      	mov	r5, r0
 800e96e:	2301      	movs	r3, #1
 800e970:	e7d7      	b.n	800e922 <__ssvfiscanf_r+0x1e6>
 800e972:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e974:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e978:	9341      	str	r3, [sp, #260]	@ 0x104
 800e97a:	2300      	movs	r3, #0
 800e97c:	e7d1      	b.n	800e922 <__ssvfiscanf_r+0x1e6>
 800e97e:	2302      	movs	r3, #2
 800e980:	e7cf      	b.n	800e922 <__ssvfiscanf_r+0x1e6>
 800e982:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800e984:	06c3      	lsls	r3, r0, #27
 800e986:	f53f aefe 	bmi.w	800e786 <__ssvfiscanf_r+0x4a>
 800e98a:	9b00      	ldr	r3, [sp, #0]
 800e98c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e98e:	1d19      	adds	r1, r3, #4
 800e990:	9100      	str	r1, [sp, #0]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	07c0      	lsls	r0, r0, #31
 800e996:	bf4c      	ite	mi
 800e998:	801a      	strhmi	r2, [r3, #0]
 800e99a:	601a      	strpl	r2, [r3, #0]
 800e99c:	e6f3      	b.n	800e786 <__ssvfiscanf_r+0x4a>
 800e99e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e9a0:	4621      	mov	r1, r4
 800e9a2:	4630      	mov	r0, r6
 800e9a4:	4798      	blx	r3
 800e9a6:	2800      	cmp	r0, #0
 800e9a8:	d0bf      	beq.n	800e92a <__ssvfiscanf_r+0x1ee>
 800e9aa:	e79f      	b.n	800e8ec <__ssvfiscanf_r+0x1b0>
 800e9ac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e9ae:	3201      	adds	r2, #1
 800e9b0:	9245      	str	r2, [sp, #276]	@ 0x114
 800e9b2:	6862      	ldr	r2, [r4, #4]
 800e9b4:	3a01      	subs	r2, #1
 800e9b6:	2a00      	cmp	r2, #0
 800e9b8:	6062      	str	r2, [r4, #4]
 800e9ba:	dd02      	ble.n	800e9c2 <__ssvfiscanf_r+0x286>
 800e9bc:	3301      	adds	r3, #1
 800e9be:	6023      	str	r3, [r4, #0]
 800e9c0:	e7b6      	b.n	800e930 <__ssvfiscanf_r+0x1f4>
 800e9c2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e9c4:	4621      	mov	r1, r4
 800e9c6:	4630      	mov	r0, r6
 800e9c8:	4798      	blx	r3
 800e9ca:	2800      	cmp	r0, #0
 800e9cc:	d0b0      	beq.n	800e930 <__ssvfiscanf_r+0x1f4>
 800e9ce:	e78d      	b.n	800e8ec <__ssvfiscanf_r+0x1b0>
 800e9d0:	2b04      	cmp	r3, #4
 800e9d2:	dc0f      	bgt.n	800e9f4 <__ssvfiscanf_r+0x2b8>
 800e9d4:	466b      	mov	r3, sp
 800e9d6:	4622      	mov	r2, r4
 800e9d8:	a941      	add	r1, sp, #260	@ 0x104
 800e9da:	4630      	mov	r0, r6
 800e9dc:	f000 f9be 	bl	800ed5c <_scanf_i>
 800e9e0:	e7b4      	b.n	800e94c <__ssvfiscanf_r+0x210>
 800e9e2:	bf00      	nop
 800e9e4:	0800e68d 	.word	0x0800e68d
 800e9e8:	0800e703 	.word	0x0800e703
 800e9ec:	08010801 	.word	0x08010801
 800e9f0:	08010907 	.word	0x08010907
 800e9f4:	4b0a      	ldr	r3, [pc, #40]	@ (800ea20 <__ssvfiscanf_r+0x2e4>)
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	f43f aec5 	beq.w	800e786 <__ssvfiscanf_r+0x4a>
 800e9fc:	466b      	mov	r3, sp
 800e9fe:	4622      	mov	r2, r4
 800ea00:	a941      	add	r1, sp, #260	@ 0x104
 800ea02:	4630      	mov	r0, r6
 800ea04:	f7fd f84e 	bl	800baa4 <_scanf_float>
 800ea08:	e7a0      	b.n	800e94c <__ssvfiscanf_r+0x210>
 800ea0a:	89a3      	ldrh	r3, [r4, #12]
 800ea0c:	065b      	lsls	r3, r3, #25
 800ea0e:	f53f af71 	bmi.w	800e8f4 <__ssvfiscanf_r+0x1b8>
 800ea12:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800ea16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea1a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800ea1c:	e7f9      	b.n	800ea12 <__ssvfiscanf_r+0x2d6>
 800ea1e:	bf00      	nop
 800ea20:	0800baa5 	.word	0x0800baa5

0800ea24 <__sfputc_r>:
 800ea24:	6893      	ldr	r3, [r2, #8]
 800ea26:	3b01      	subs	r3, #1
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	b410      	push	{r4}
 800ea2c:	6093      	str	r3, [r2, #8]
 800ea2e:	da08      	bge.n	800ea42 <__sfputc_r+0x1e>
 800ea30:	6994      	ldr	r4, [r2, #24]
 800ea32:	42a3      	cmp	r3, r4
 800ea34:	db01      	blt.n	800ea3a <__sfputc_r+0x16>
 800ea36:	290a      	cmp	r1, #10
 800ea38:	d103      	bne.n	800ea42 <__sfputc_r+0x1e>
 800ea3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea3e:	f7fd bb96 	b.w	800c16e <__swbuf_r>
 800ea42:	6813      	ldr	r3, [r2, #0]
 800ea44:	1c58      	adds	r0, r3, #1
 800ea46:	6010      	str	r0, [r2, #0]
 800ea48:	7019      	strb	r1, [r3, #0]
 800ea4a:	4608      	mov	r0, r1
 800ea4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea50:	4770      	bx	lr

0800ea52 <__sfputs_r>:
 800ea52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea54:	4606      	mov	r6, r0
 800ea56:	460f      	mov	r7, r1
 800ea58:	4614      	mov	r4, r2
 800ea5a:	18d5      	adds	r5, r2, r3
 800ea5c:	42ac      	cmp	r4, r5
 800ea5e:	d101      	bne.n	800ea64 <__sfputs_r+0x12>
 800ea60:	2000      	movs	r0, #0
 800ea62:	e007      	b.n	800ea74 <__sfputs_r+0x22>
 800ea64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea68:	463a      	mov	r2, r7
 800ea6a:	4630      	mov	r0, r6
 800ea6c:	f7ff ffda 	bl	800ea24 <__sfputc_r>
 800ea70:	1c43      	adds	r3, r0, #1
 800ea72:	d1f3      	bne.n	800ea5c <__sfputs_r+0xa>
 800ea74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ea78 <_vfiprintf_r>:
 800ea78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea7c:	460d      	mov	r5, r1
 800ea7e:	b09d      	sub	sp, #116	@ 0x74
 800ea80:	4614      	mov	r4, r2
 800ea82:	4698      	mov	r8, r3
 800ea84:	4606      	mov	r6, r0
 800ea86:	b118      	cbz	r0, 800ea90 <_vfiprintf_r+0x18>
 800ea88:	6a03      	ldr	r3, [r0, #32]
 800ea8a:	b90b      	cbnz	r3, 800ea90 <_vfiprintf_r+0x18>
 800ea8c:	f7fd faaa 	bl	800bfe4 <__sinit>
 800ea90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ea92:	07d9      	lsls	r1, r3, #31
 800ea94:	d405      	bmi.n	800eaa2 <_vfiprintf_r+0x2a>
 800ea96:	89ab      	ldrh	r3, [r5, #12]
 800ea98:	059a      	lsls	r2, r3, #22
 800ea9a:	d402      	bmi.n	800eaa2 <_vfiprintf_r+0x2a>
 800ea9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea9e:	f7fd fcaa 	bl	800c3f6 <__retarget_lock_acquire_recursive>
 800eaa2:	89ab      	ldrh	r3, [r5, #12]
 800eaa4:	071b      	lsls	r3, r3, #28
 800eaa6:	d501      	bpl.n	800eaac <_vfiprintf_r+0x34>
 800eaa8:	692b      	ldr	r3, [r5, #16]
 800eaaa:	b99b      	cbnz	r3, 800ead4 <_vfiprintf_r+0x5c>
 800eaac:	4629      	mov	r1, r5
 800eaae:	4630      	mov	r0, r6
 800eab0:	f7fd fb9c 	bl	800c1ec <__swsetup_r>
 800eab4:	b170      	cbz	r0, 800ead4 <_vfiprintf_r+0x5c>
 800eab6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eab8:	07dc      	lsls	r4, r3, #31
 800eaba:	d504      	bpl.n	800eac6 <_vfiprintf_r+0x4e>
 800eabc:	f04f 30ff 	mov.w	r0, #4294967295
 800eac0:	b01d      	add	sp, #116	@ 0x74
 800eac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eac6:	89ab      	ldrh	r3, [r5, #12]
 800eac8:	0598      	lsls	r0, r3, #22
 800eaca:	d4f7      	bmi.n	800eabc <_vfiprintf_r+0x44>
 800eacc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eace:	f7fd fc93 	bl	800c3f8 <__retarget_lock_release_recursive>
 800ead2:	e7f3      	b.n	800eabc <_vfiprintf_r+0x44>
 800ead4:	2300      	movs	r3, #0
 800ead6:	9309      	str	r3, [sp, #36]	@ 0x24
 800ead8:	2320      	movs	r3, #32
 800eada:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eade:	f8cd 800c 	str.w	r8, [sp, #12]
 800eae2:	2330      	movs	r3, #48	@ 0x30
 800eae4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ec94 <_vfiprintf_r+0x21c>
 800eae8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eaec:	f04f 0901 	mov.w	r9, #1
 800eaf0:	4623      	mov	r3, r4
 800eaf2:	469a      	mov	sl, r3
 800eaf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eaf8:	b10a      	cbz	r2, 800eafe <_vfiprintf_r+0x86>
 800eafa:	2a25      	cmp	r2, #37	@ 0x25
 800eafc:	d1f9      	bne.n	800eaf2 <_vfiprintf_r+0x7a>
 800eafe:	ebba 0b04 	subs.w	fp, sl, r4
 800eb02:	d00b      	beq.n	800eb1c <_vfiprintf_r+0xa4>
 800eb04:	465b      	mov	r3, fp
 800eb06:	4622      	mov	r2, r4
 800eb08:	4629      	mov	r1, r5
 800eb0a:	4630      	mov	r0, r6
 800eb0c:	f7ff ffa1 	bl	800ea52 <__sfputs_r>
 800eb10:	3001      	adds	r0, #1
 800eb12:	f000 80a7 	beq.w	800ec64 <_vfiprintf_r+0x1ec>
 800eb16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb18:	445a      	add	r2, fp
 800eb1a:	9209      	str	r2, [sp, #36]	@ 0x24
 800eb1c:	f89a 3000 	ldrb.w	r3, [sl]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	f000 809f 	beq.w	800ec64 <_vfiprintf_r+0x1ec>
 800eb26:	2300      	movs	r3, #0
 800eb28:	f04f 32ff 	mov.w	r2, #4294967295
 800eb2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb30:	f10a 0a01 	add.w	sl, sl, #1
 800eb34:	9304      	str	r3, [sp, #16]
 800eb36:	9307      	str	r3, [sp, #28]
 800eb38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eb3c:	931a      	str	r3, [sp, #104]	@ 0x68
 800eb3e:	4654      	mov	r4, sl
 800eb40:	2205      	movs	r2, #5
 800eb42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb46:	4853      	ldr	r0, [pc, #332]	@ (800ec94 <_vfiprintf_r+0x21c>)
 800eb48:	f7f1 fb4a 	bl	80001e0 <memchr>
 800eb4c:	9a04      	ldr	r2, [sp, #16]
 800eb4e:	b9d8      	cbnz	r0, 800eb88 <_vfiprintf_r+0x110>
 800eb50:	06d1      	lsls	r1, r2, #27
 800eb52:	bf44      	itt	mi
 800eb54:	2320      	movmi	r3, #32
 800eb56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb5a:	0713      	lsls	r3, r2, #28
 800eb5c:	bf44      	itt	mi
 800eb5e:	232b      	movmi	r3, #43	@ 0x2b
 800eb60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb64:	f89a 3000 	ldrb.w	r3, [sl]
 800eb68:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb6a:	d015      	beq.n	800eb98 <_vfiprintf_r+0x120>
 800eb6c:	9a07      	ldr	r2, [sp, #28]
 800eb6e:	4654      	mov	r4, sl
 800eb70:	2000      	movs	r0, #0
 800eb72:	f04f 0c0a 	mov.w	ip, #10
 800eb76:	4621      	mov	r1, r4
 800eb78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb7c:	3b30      	subs	r3, #48	@ 0x30
 800eb7e:	2b09      	cmp	r3, #9
 800eb80:	d94b      	bls.n	800ec1a <_vfiprintf_r+0x1a2>
 800eb82:	b1b0      	cbz	r0, 800ebb2 <_vfiprintf_r+0x13a>
 800eb84:	9207      	str	r2, [sp, #28]
 800eb86:	e014      	b.n	800ebb2 <_vfiprintf_r+0x13a>
 800eb88:	eba0 0308 	sub.w	r3, r0, r8
 800eb8c:	fa09 f303 	lsl.w	r3, r9, r3
 800eb90:	4313      	orrs	r3, r2
 800eb92:	9304      	str	r3, [sp, #16]
 800eb94:	46a2      	mov	sl, r4
 800eb96:	e7d2      	b.n	800eb3e <_vfiprintf_r+0xc6>
 800eb98:	9b03      	ldr	r3, [sp, #12]
 800eb9a:	1d19      	adds	r1, r3, #4
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	9103      	str	r1, [sp, #12]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	bfbb      	ittet	lt
 800eba4:	425b      	neglt	r3, r3
 800eba6:	f042 0202 	orrlt.w	r2, r2, #2
 800ebaa:	9307      	strge	r3, [sp, #28]
 800ebac:	9307      	strlt	r3, [sp, #28]
 800ebae:	bfb8      	it	lt
 800ebb0:	9204      	strlt	r2, [sp, #16]
 800ebb2:	7823      	ldrb	r3, [r4, #0]
 800ebb4:	2b2e      	cmp	r3, #46	@ 0x2e
 800ebb6:	d10a      	bne.n	800ebce <_vfiprintf_r+0x156>
 800ebb8:	7863      	ldrb	r3, [r4, #1]
 800ebba:	2b2a      	cmp	r3, #42	@ 0x2a
 800ebbc:	d132      	bne.n	800ec24 <_vfiprintf_r+0x1ac>
 800ebbe:	9b03      	ldr	r3, [sp, #12]
 800ebc0:	1d1a      	adds	r2, r3, #4
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	9203      	str	r2, [sp, #12]
 800ebc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ebca:	3402      	adds	r4, #2
 800ebcc:	9305      	str	r3, [sp, #20]
 800ebce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800eca4 <_vfiprintf_r+0x22c>
 800ebd2:	7821      	ldrb	r1, [r4, #0]
 800ebd4:	2203      	movs	r2, #3
 800ebd6:	4650      	mov	r0, sl
 800ebd8:	f7f1 fb02 	bl	80001e0 <memchr>
 800ebdc:	b138      	cbz	r0, 800ebee <_vfiprintf_r+0x176>
 800ebde:	9b04      	ldr	r3, [sp, #16]
 800ebe0:	eba0 000a 	sub.w	r0, r0, sl
 800ebe4:	2240      	movs	r2, #64	@ 0x40
 800ebe6:	4082      	lsls	r2, r0
 800ebe8:	4313      	orrs	r3, r2
 800ebea:	3401      	adds	r4, #1
 800ebec:	9304      	str	r3, [sp, #16]
 800ebee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebf2:	4829      	ldr	r0, [pc, #164]	@ (800ec98 <_vfiprintf_r+0x220>)
 800ebf4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ebf8:	2206      	movs	r2, #6
 800ebfa:	f7f1 faf1 	bl	80001e0 <memchr>
 800ebfe:	2800      	cmp	r0, #0
 800ec00:	d03f      	beq.n	800ec82 <_vfiprintf_r+0x20a>
 800ec02:	4b26      	ldr	r3, [pc, #152]	@ (800ec9c <_vfiprintf_r+0x224>)
 800ec04:	bb1b      	cbnz	r3, 800ec4e <_vfiprintf_r+0x1d6>
 800ec06:	9b03      	ldr	r3, [sp, #12]
 800ec08:	3307      	adds	r3, #7
 800ec0a:	f023 0307 	bic.w	r3, r3, #7
 800ec0e:	3308      	adds	r3, #8
 800ec10:	9303      	str	r3, [sp, #12]
 800ec12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec14:	443b      	add	r3, r7
 800ec16:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec18:	e76a      	b.n	800eaf0 <_vfiprintf_r+0x78>
 800ec1a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec1e:	460c      	mov	r4, r1
 800ec20:	2001      	movs	r0, #1
 800ec22:	e7a8      	b.n	800eb76 <_vfiprintf_r+0xfe>
 800ec24:	2300      	movs	r3, #0
 800ec26:	3401      	adds	r4, #1
 800ec28:	9305      	str	r3, [sp, #20]
 800ec2a:	4619      	mov	r1, r3
 800ec2c:	f04f 0c0a 	mov.w	ip, #10
 800ec30:	4620      	mov	r0, r4
 800ec32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec36:	3a30      	subs	r2, #48	@ 0x30
 800ec38:	2a09      	cmp	r2, #9
 800ec3a:	d903      	bls.n	800ec44 <_vfiprintf_r+0x1cc>
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d0c6      	beq.n	800ebce <_vfiprintf_r+0x156>
 800ec40:	9105      	str	r1, [sp, #20]
 800ec42:	e7c4      	b.n	800ebce <_vfiprintf_r+0x156>
 800ec44:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec48:	4604      	mov	r4, r0
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	e7f0      	b.n	800ec30 <_vfiprintf_r+0x1b8>
 800ec4e:	ab03      	add	r3, sp, #12
 800ec50:	9300      	str	r3, [sp, #0]
 800ec52:	462a      	mov	r2, r5
 800ec54:	4b12      	ldr	r3, [pc, #72]	@ (800eca0 <_vfiprintf_r+0x228>)
 800ec56:	a904      	add	r1, sp, #16
 800ec58:	4630      	mov	r0, r6
 800ec5a:	f7fc fb6b 	bl	800b334 <_printf_float>
 800ec5e:	4607      	mov	r7, r0
 800ec60:	1c78      	adds	r0, r7, #1
 800ec62:	d1d6      	bne.n	800ec12 <_vfiprintf_r+0x19a>
 800ec64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec66:	07d9      	lsls	r1, r3, #31
 800ec68:	d405      	bmi.n	800ec76 <_vfiprintf_r+0x1fe>
 800ec6a:	89ab      	ldrh	r3, [r5, #12]
 800ec6c:	059a      	lsls	r2, r3, #22
 800ec6e:	d402      	bmi.n	800ec76 <_vfiprintf_r+0x1fe>
 800ec70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec72:	f7fd fbc1 	bl	800c3f8 <__retarget_lock_release_recursive>
 800ec76:	89ab      	ldrh	r3, [r5, #12]
 800ec78:	065b      	lsls	r3, r3, #25
 800ec7a:	f53f af1f 	bmi.w	800eabc <_vfiprintf_r+0x44>
 800ec7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ec80:	e71e      	b.n	800eac0 <_vfiprintf_r+0x48>
 800ec82:	ab03      	add	r3, sp, #12
 800ec84:	9300      	str	r3, [sp, #0]
 800ec86:	462a      	mov	r2, r5
 800ec88:	4b05      	ldr	r3, [pc, #20]	@ (800eca0 <_vfiprintf_r+0x228>)
 800ec8a:	a904      	add	r1, sp, #16
 800ec8c:	4630      	mov	r0, r6
 800ec8e:	f7fc fde9 	bl	800b864 <_printf_i>
 800ec92:	e7e4      	b.n	800ec5e <_vfiprintf_r+0x1e6>
 800ec94:	08010901 	.word	0x08010901
 800ec98:	0801090b 	.word	0x0801090b
 800ec9c:	0800b335 	.word	0x0800b335
 800eca0:	0800ea53 	.word	0x0800ea53
 800eca4:	08010907 	.word	0x08010907

0800eca8 <_scanf_chars>:
 800eca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecac:	4615      	mov	r5, r2
 800ecae:	688a      	ldr	r2, [r1, #8]
 800ecb0:	4680      	mov	r8, r0
 800ecb2:	460c      	mov	r4, r1
 800ecb4:	b932      	cbnz	r2, 800ecc4 <_scanf_chars+0x1c>
 800ecb6:	698a      	ldr	r2, [r1, #24]
 800ecb8:	2a00      	cmp	r2, #0
 800ecba:	bf14      	ite	ne
 800ecbc:	f04f 32ff 	movne.w	r2, #4294967295
 800ecc0:	2201      	moveq	r2, #1
 800ecc2:	608a      	str	r2, [r1, #8]
 800ecc4:	6822      	ldr	r2, [r4, #0]
 800ecc6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800ed58 <_scanf_chars+0xb0>
 800ecca:	06d1      	lsls	r1, r2, #27
 800eccc:	bf5f      	itttt	pl
 800ecce:	681a      	ldrpl	r2, [r3, #0]
 800ecd0:	1d11      	addpl	r1, r2, #4
 800ecd2:	6019      	strpl	r1, [r3, #0]
 800ecd4:	6816      	ldrpl	r6, [r2, #0]
 800ecd6:	2700      	movs	r7, #0
 800ecd8:	69a0      	ldr	r0, [r4, #24]
 800ecda:	b188      	cbz	r0, 800ed00 <_scanf_chars+0x58>
 800ecdc:	2801      	cmp	r0, #1
 800ecde:	d107      	bne.n	800ecf0 <_scanf_chars+0x48>
 800ece0:	682b      	ldr	r3, [r5, #0]
 800ece2:	781a      	ldrb	r2, [r3, #0]
 800ece4:	6963      	ldr	r3, [r4, #20]
 800ece6:	5c9b      	ldrb	r3, [r3, r2]
 800ece8:	b953      	cbnz	r3, 800ed00 <_scanf_chars+0x58>
 800ecea:	2f00      	cmp	r7, #0
 800ecec:	d031      	beq.n	800ed52 <_scanf_chars+0xaa>
 800ecee:	e022      	b.n	800ed36 <_scanf_chars+0x8e>
 800ecf0:	2802      	cmp	r0, #2
 800ecf2:	d120      	bne.n	800ed36 <_scanf_chars+0x8e>
 800ecf4:	682b      	ldr	r3, [r5, #0]
 800ecf6:	781b      	ldrb	r3, [r3, #0]
 800ecf8:	f819 3003 	ldrb.w	r3, [r9, r3]
 800ecfc:	071b      	lsls	r3, r3, #28
 800ecfe:	d41a      	bmi.n	800ed36 <_scanf_chars+0x8e>
 800ed00:	6823      	ldr	r3, [r4, #0]
 800ed02:	06da      	lsls	r2, r3, #27
 800ed04:	bf5e      	ittt	pl
 800ed06:	682b      	ldrpl	r3, [r5, #0]
 800ed08:	781b      	ldrbpl	r3, [r3, #0]
 800ed0a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ed0e:	682a      	ldr	r2, [r5, #0]
 800ed10:	686b      	ldr	r3, [r5, #4]
 800ed12:	3201      	adds	r2, #1
 800ed14:	602a      	str	r2, [r5, #0]
 800ed16:	68a2      	ldr	r2, [r4, #8]
 800ed18:	3b01      	subs	r3, #1
 800ed1a:	3a01      	subs	r2, #1
 800ed1c:	606b      	str	r3, [r5, #4]
 800ed1e:	3701      	adds	r7, #1
 800ed20:	60a2      	str	r2, [r4, #8]
 800ed22:	b142      	cbz	r2, 800ed36 <_scanf_chars+0x8e>
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	dcd7      	bgt.n	800ecd8 <_scanf_chars+0x30>
 800ed28:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ed2c:	4629      	mov	r1, r5
 800ed2e:	4640      	mov	r0, r8
 800ed30:	4798      	blx	r3
 800ed32:	2800      	cmp	r0, #0
 800ed34:	d0d0      	beq.n	800ecd8 <_scanf_chars+0x30>
 800ed36:	6823      	ldr	r3, [r4, #0]
 800ed38:	f013 0310 	ands.w	r3, r3, #16
 800ed3c:	d105      	bne.n	800ed4a <_scanf_chars+0xa2>
 800ed3e:	68e2      	ldr	r2, [r4, #12]
 800ed40:	3201      	adds	r2, #1
 800ed42:	60e2      	str	r2, [r4, #12]
 800ed44:	69a2      	ldr	r2, [r4, #24]
 800ed46:	b102      	cbz	r2, 800ed4a <_scanf_chars+0xa2>
 800ed48:	7033      	strb	r3, [r6, #0]
 800ed4a:	6923      	ldr	r3, [r4, #16]
 800ed4c:	443b      	add	r3, r7
 800ed4e:	6123      	str	r3, [r4, #16]
 800ed50:	2000      	movs	r0, #0
 800ed52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed56:	bf00      	nop
 800ed58:	08010801 	.word	0x08010801

0800ed5c <_scanf_i>:
 800ed5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed60:	4698      	mov	r8, r3
 800ed62:	4b74      	ldr	r3, [pc, #464]	@ (800ef34 <_scanf_i+0x1d8>)
 800ed64:	460c      	mov	r4, r1
 800ed66:	4682      	mov	sl, r0
 800ed68:	4616      	mov	r6, r2
 800ed6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ed6e:	b087      	sub	sp, #28
 800ed70:	ab03      	add	r3, sp, #12
 800ed72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ed76:	4b70      	ldr	r3, [pc, #448]	@ (800ef38 <_scanf_i+0x1dc>)
 800ed78:	69a1      	ldr	r1, [r4, #24]
 800ed7a:	4a70      	ldr	r2, [pc, #448]	@ (800ef3c <_scanf_i+0x1e0>)
 800ed7c:	2903      	cmp	r1, #3
 800ed7e:	bf08      	it	eq
 800ed80:	461a      	moveq	r2, r3
 800ed82:	68a3      	ldr	r3, [r4, #8]
 800ed84:	9201      	str	r2, [sp, #4]
 800ed86:	1e5a      	subs	r2, r3, #1
 800ed88:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ed8c:	bf88      	it	hi
 800ed8e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ed92:	4627      	mov	r7, r4
 800ed94:	bf82      	ittt	hi
 800ed96:	eb03 0905 	addhi.w	r9, r3, r5
 800ed9a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ed9e:	60a3      	strhi	r3, [r4, #8]
 800eda0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800eda4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800eda8:	bf98      	it	ls
 800edaa:	f04f 0900 	movls.w	r9, #0
 800edae:	6023      	str	r3, [r4, #0]
 800edb0:	463d      	mov	r5, r7
 800edb2:	f04f 0b00 	mov.w	fp, #0
 800edb6:	6831      	ldr	r1, [r6, #0]
 800edb8:	ab03      	add	r3, sp, #12
 800edba:	7809      	ldrb	r1, [r1, #0]
 800edbc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800edc0:	2202      	movs	r2, #2
 800edc2:	f7f1 fa0d 	bl	80001e0 <memchr>
 800edc6:	b328      	cbz	r0, 800ee14 <_scanf_i+0xb8>
 800edc8:	f1bb 0f01 	cmp.w	fp, #1
 800edcc:	d159      	bne.n	800ee82 <_scanf_i+0x126>
 800edce:	6862      	ldr	r2, [r4, #4]
 800edd0:	b92a      	cbnz	r2, 800edde <_scanf_i+0x82>
 800edd2:	6822      	ldr	r2, [r4, #0]
 800edd4:	2108      	movs	r1, #8
 800edd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800edda:	6061      	str	r1, [r4, #4]
 800eddc:	6022      	str	r2, [r4, #0]
 800edde:	6822      	ldr	r2, [r4, #0]
 800ede0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800ede4:	6022      	str	r2, [r4, #0]
 800ede6:	68a2      	ldr	r2, [r4, #8]
 800ede8:	1e51      	subs	r1, r2, #1
 800edea:	60a1      	str	r1, [r4, #8]
 800edec:	b192      	cbz	r2, 800ee14 <_scanf_i+0xb8>
 800edee:	6832      	ldr	r2, [r6, #0]
 800edf0:	1c51      	adds	r1, r2, #1
 800edf2:	6031      	str	r1, [r6, #0]
 800edf4:	7812      	ldrb	r2, [r2, #0]
 800edf6:	f805 2b01 	strb.w	r2, [r5], #1
 800edfa:	6872      	ldr	r2, [r6, #4]
 800edfc:	3a01      	subs	r2, #1
 800edfe:	2a00      	cmp	r2, #0
 800ee00:	6072      	str	r2, [r6, #4]
 800ee02:	dc07      	bgt.n	800ee14 <_scanf_i+0xb8>
 800ee04:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800ee08:	4631      	mov	r1, r6
 800ee0a:	4650      	mov	r0, sl
 800ee0c:	4790      	blx	r2
 800ee0e:	2800      	cmp	r0, #0
 800ee10:	f040 8085 	bne.w	800ef1e <_scanf_i+0x1c2>
 800ee14:	f10b 0b01 	add.w	fp, fp, #1
 800ee18:	f1bb 0f03 	cmp.w	fp, #3
 800ee1c:	d1cb      	bne.n	800edb6 <_scanf_i+0x5a>
 800ee1e:	6863      	ldr	r3, [r4, #4]
 800ee20:	b90b      	cbnz	r3, 800ee26 <_scanf_i+0xca>
 800ee22:	230a      	movs	r3, #10
 800ee24:	6063      	str	r3, [r4, #4]
 800ee26:	6863      	ldr	r3, [r4, #4]
 800ee28:	4945      	ldr	r1, [pc, #276]	@ (800ef40 <_scanf_i+0x1e4>)
 800ee2a:	6960      	ldr	r0, [r4, #20]
 800ee2c:	1ac9      	subs	r1, r1, r3
 800ee2e:	f000 f997 	bl	800f160 <__sccl>
 800ee32:	f04f 0b00 	mov.w	fp, #0
 800ee36:	68a3      	ldr	r3, [r4, #8]
 800ee38:	6822      	ldr	r2, [r4, #0]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d03d      	beq.n	800eeba <_scanf_i+0x15e>
 800ee3e:	6831      	ldr	r1, [r6, #0]
 800ee40:	6960      	ldr	r0, [r4, #20]
 800ee42:	f891 c000 	ldrb.w	ip, [r1]
 800ee46:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ee4a:	2800      	cmp	r0, #0
 800ee4c:	d035      	beq.n	800eeba <_scanf_i+0x15e>
 800ee4e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800ee52:	d124      	bne.n	800ee9e <_scanf_i+0x142>
 800ee54:	0510      	lsls	r0, r2, #20
 800ee56:	d522      	bpl.n	800ee9e <_scanf_i+0x142>
 800ee58:	f10b 0b01 	add.w	fp, fp, #1
 800ee5c:	f1b9 0f00 	cmp.w	r9, #0
 800ee60:	d003      	beq.n	800ee6a <_scanf_i+0x10e>
 800ee62:	3301      	adds	r3, #1
 800ee64:	f109 39ff 	add.w	r9, r9, #4294967295
 800ee68:	60a3      	str	r3, [r4, #8]
 800ee6a:	6873      	ldr	r3, [r6, #4]
 800ee6c:	3b01      	subs	r3, #1
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	6073      	str	r3, [r6, #4]
 800ee72:	dd1b      	ble.n	800eeac <_scanf_i+0x150>
 800ee74:	6833      	ldr	r3, [r6, #0]
 800ee76:	3301      	adds	r3, #1
 800ee78:	6033      	str	r3, [r6, #0]
 800ee7a:	68a3      	ldr	r3, [r4, #8]
 800ee7c:	3b01      	subs	r3, #1
 800ee7e:	60a3      	str	r3, [r4, #8]
 800ee80:	e7d9      	b.n	800ee36 <_scanf_i+0xda>
 800ee82:	f1bb 0f02 	cmp.w	fp, #2
 800ee86:	d1ae      	bne.n	800ede6 <_scanf_i+0x8a>
 800ee88:	6822      	ldr	r2, [r4, #0]
 800ee8a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800ee8e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800ee92:	d1bf      	bne.n	800ee14 <_scanf_i+0xb8>
 800ee94:	2110      	movs	r1, #16
 800ee96:	6061      	str	r1, [r4, #4]
 800ee98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ee9c:	e7a2      	b.n	800ede4 <_scanf_i+0x88>
 800ee9e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800eea2:	6022      	str	r2, [r4, #0]
 800eea4:	780b      	ldrb	r3, [r1, #0]
 800eea6:	f805 3b01 	strb.w	r3, [r5], #1
 800eeaa:	e7de      	b.n	800ee6a <_scanf_i+0x10e>
 800eeac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800eeb0:	4631      	mov	r1, r6
 800eeb2:	4650      	mov	r0, sl
 800eeb4:	4798      	blx	r3
 800eeb6:	2800      	cmp	r0, #0
 800eeb8:	d0df      	beq.n	800ee7a <_scanf_i+0x11e>
 800eeba:	6823      	ldr	r3, [r4, #0]
 800eebc:	05d9      	lsls	r1, r3, #23
 800eebe:	d50d      	bpl.n	800eedc <_scanf_i+0x180>
 800eec0:	42bd      	cmp	r5, r7
 800eec2:	d909      	bls.n	800eed8 <_scanf_i+0x17c>
 800eec4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800eec8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eecc:	4632      	mov	r2, r6
 800eece:	4650      	mov	r0, sl
 800eed0:	4798      	blx	r3
 800eed2:	f105 39ff 	add.w	r9, r5, #4294967295
 800eed6:	464d      	mov	r5, r9
 800eed8:	42bd      	cmp	r5, r7
 800eeda:	d028      	beq.n	800ef2e <_scanf_i+0x1d2>
 800eedc:	6822      	ldr	r2, [r4, #0]
 800eede:	f012 0210 	ands.w	r2, r2, #16
 800eee2:	d113      	bne.n	800ef0c <_scanf_i+0x1b0>
 800eee4:	702a      	strb	r2, [r5, #0]
 800eee6:	6863      	ldr	r3, [r4, #4]
 800eee8:	9e01      	ldr	r6, [sp, #4]
 800eeea:	4639      	mov	r1, r7
 800eeec:	4650      	mov	r0, sl
 800eeee:	47b0      	blx	r6
 800eef0:	f8d8 3000 	ldr.w	r3, [r8]
 800eef4:	6821      	ldr	r1, [r4, #0]
 800eef6:	1d1a      	adds	r2, r3, #4
 800eef8:	f8c8 2000 	str.w	r2, [r8]
 800eefc:	f011 0f20 	tst.w	r1, #32
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	d00f      	beq.n	800ef24 <_scanf_i+0x1c8>
 800ef04:	6018      	str	r0, [r3, #0]
 800ef06:	68e3      	ldr	r3, [r4, #12]
 800ef08:	3301      	adds	r3, #1
 800ef0a:	60e3      	str	r3, [r4, #12]
 800ef0c:	6923      	ldr	r3, [r4, #16]
 800ef0e:	1bed      	subs	r5, r5, r7
 800ef10:	445d      	add	r5, fp
 800ef12:	442b      	add	r3, r5
 800ef14:	6123      	str	r3, [r4, #16]
 800ef16:	2000      	movs	r0, #0
 800ef18:	b007      	add	sp, #28
 800ef1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef1e:	f04f 0b00 	mov.w	fp, #0
 800ef22:	e7ca      	b.n	800eeba <_scanf_i+0x15e>
 800ef24:	07ca      	lsls	r2, r1, #31
 800ef26:	bf4c      	ite	mi
 800ef28:	8018      	strhmi	r0, [r3, #0]
 800ef2a:	6018      	strpl	r0, [r3, #0]
 800ef2c:	e7eb      	b.n	800ef06 <_scanf_i+0x1aa>
 800ef2e:	2001      	movs	r0, #1
 800ef30:	e7f2      	b.n	800ef18 <_scanf_i+0x1bc>
 800ef32:	bf00      	nop
 800ef34:	080104e0 	.word	0x080104e0
 800ef38:	0800e3c1 	.word	0x0800e3c1
 800ef3c:	0800f47d 	.word	0x0800f47d
 800ef40:	08010922 	.word	0x08010922

0800ef44 <__sflush_r>:
 800ef44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ef48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef4c:	0716      	lsls	r6, r2, #28
 800ef4e:	4605      	mov	r5, r0
 800ef50:	460c      	mov	r4, r1
 800ef52:	d454      	bmi.n	800effe <__sflush_r+0xba>
 800ef54:	684b      	ldr	r3, [r1, #4]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	dc02      	bgt.n	800ef60 <__sflush_r+0x1c>
 800ef5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	dd48      	ble.n	800eff2 <__sflush_r+0xae>
 800ef60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ef62:	2e00      	cmp	r6, #0
 800ef64:	d045      	beq.n	800eff2 <__sflush_r+0xae>
 800ef66:	2300      	movs	r3, #0
 800ef68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ef6c:	682f      	ldr	r7, [r5, #0]
 800ef6e:	6a21      	ldr	r1, [r4, #32]
 800ef70:	602b      	str	r3, [r5, #0]
 800ef72:	d030      	beq.n	800efd6 <__sflush_r+0x92>
 800ef74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ef76:	89a3      	ldrh	r3, [r4, #12]
 800ef78:	0759      	lsls	r1, r3, #29
 800ef7a:	d505      	bpl.n	800ef88 <__sflush_r+0x44>
 800ef7c:	6863      	ldr	r3, [r4, #4]
 800ef7e:	1ad2      	subs	r2, r2, r3
 800ef80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ef82:	b10b      	cbz	r3, 800ef88 <__sflush_r+0x44>
 800ef84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ef86:	1ad2      	subs	r2, r2, r3
 800ef88:	2300      	movs	r3, #0
 800ef8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ef8c:	6a21      	ldr	r1, [r4, #32]
 800ef8e:	4628      	mov	r0, r5
 800ef90:	47b0      	blx	r6
 800ef92:	1c43      	adds	r3, r0, #1
 800ef94:	89a3      	ldrh	r3, [r4, #12]
 800ef96:	d106      	bne.n	800efa6 <__sflush_r+0x62>
 800ef98:	6829      	ldr	r1, [r5, #0]
 800ef9a:	291d      	cmp	r1, #29
 800ef9c:	d82b      	bhi.n	800eff6 <__sflush_r+0xb2>
 800ef9e:	4a2a      	ldr	r2, [pc, #168]	@ (800f048 <__sflush_r+0x104>)
 800efa0:	410a      	asrs	r2, r1
 800efa2:	07d6      	lsls	r6, r2, #31
 800efa4:	d427      	bmi.n	800eff6 <__sflush_r+0xb2>
 800efa6:	2200      	movs	r2, #0
 800efa8:	6062      	str	r2, [r4, #4]
 800efaa:	04d9      	lsls	r1, r3, #19
 800efac:	6922      	ldr	r2, [r4, #16]
 800efae:	6022      	str	r2, [r4, #0]
 800efb0:	d504      	bpl.n	800efbc <__sflush_r+0x78>
 800efb2:	1c42      	adds	r2, r0, #1
 800efb4:	d101      	bne.n	800efba <__sflush_r+0x76>
 800efb6:	682b      	ldr	r3, [r5, #0]
 800efb8:	b903      	cbnz	r3, 800efbc <__sflush_r+0x78>
 800efba:	6560      	str	r0, [r4, #84]	@ 0x54
 800efbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800efbe:	602f      	str	r7, [r5, #0]
 800efc0:	b1b9      	cbz	r1, 800eff2 <__sflush_r+0xae>
 800efc2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800efc6:	4299      	cmp	r1, r3
 800efc8:	d002      	beq.n	800efd0 <__sflush_r+0x8c>
 800efca:	4628      	mov	r0, r5
 800efcc:	f7fe f880 	bl	800d0d0 <_free_r>
 800efd0:	2300      	movs	r3, #0
 800efd2:	6363      	str	r3, [r4, #52]	@ 0x34
 800efd4:	e00d      	b.n	800eff2 <__sflush_r+0xae>
 800efd6:	2301      	movs	r3, #1
 800efd8:	4628      	mov	r0, r5
 800efda:	47b0      	blx	r6
 800efdc:	4602      	mov	r2, r0
 800efde:	1c50      	adds	r0, r2, #1
 800efe0:	d1c9      	bne.n	800ef76 <__sflush_r+0x32>
 800efe2:	682b      	ldr	r3, [r5, #0]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d0c6      	beq.n	800ef76 <__sflush_r+0x32>
 800efe8:	2b1d      	cmp	r3, #29
 800efea:	d001      	beq.n	800eff0 <__sflush_r+0xac>
 800efec:	2b16      	cmp	r3, #22
 800efee:	d11e      	bne.n	800f02e <__sflush_r+0xea>
 800eff0:	602f      	str	r7, [r5, #0]
 800eff2:	2000      	movs	r0, #0
 800eff4:	e022      	b.n	800f03c <__sflush_r+0xf8>
 800eff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800effa:	b21b      	sxth	r3, r3
 800effc:	e01b      	b.n	800f036 <__sflush_r+0xf2>
 800effe:	690f      	ldr	r7, [r1, #16]
 800f000:	2f00      	cmp	r7, #0
 800f002:	d0f6      	beq.n	800eff2 <__sflush_r+0xae>
 800f004:	0793      	lsls	r3, r2, #30
 800f006:	680e      	ldr	r6, [r1, #0]
 800f008:	bf08      	it	eq
 800f00a:	694b      	ldreq	r3, [r1, #20]
 800f00c:	600f      	str	r7, [r1, #0]
 800f00e:	bf18      	it	ne
 800f010:	2300      	movne	r3, #0
 800f012:	eba6 0807 	sub.w	r8, r6, r7
 800f016:	608b      	str	r3, [r1, #8]
 800f018:	f1b8 0f00 	cmp.w	r8, #0
 800f01c:	dde9      	ble.n	800eff2 <__sflush_r+0xae>
 800f01e:	6a21      	ldr	r1, [r4, #32]
 800f020:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f022:	4643      	mov	r3, r8
 800f024:	463a      	mov	r2, r7
 800f026:	4628      	mov	r0, r5
 800f028:	47b0      	blx	r6
 800f02a:	2800      	cmp	r0, #0
 800f02c:	dc08      	bgt.n	800f040 <__sflush_r+0xfc>
 800f02e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f032:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f036:	81a3      	strh	r3, [r4, #12]
 800f038:	f04f 30ff 	mov.w	r0, #4294967295
 800f03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f040:	4407      	add	r7, r0
 800f042:	eba8 0800 	sub.w	r8, r8, r0
 800f046:	e7e7      	b.n	800f018 <__sflush_r+0xd4>
 800f048:	dfbffffe 	.word	0xdfbffffe

0800f04c <_fflush_r>:
 800f04c:	b538      	push	{r3, r4, r5, lr}
 800f04e:	690b      	ldr	r3, [r1, #16]
 800f050:	4605      	mov	r5, r0
 800f052:	460c      	mov	r4, r1
 800f054:	b913      	cbnz	r3, 800f05c <_fflush_r+0x10>
 800f056:	2500      	movs	r5, #0
 800f058:	4628      	mov	r0, r5
 800f05a:	bd38      	pop	{r3, r4, r5, pc}
 800f05c:	b118      	cbz	r0, 800f066 <_fflush_r+0x1a>
 800f05e:	6a03      	ldr	r3, [r0, #32]
 800f060:	b90b      	cbnz	r3, 800f066 <_fflush_r+0x1a>
 800f062:	f7fc ffbf 	bl	800bfe4 <__sinit>
 800f066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d0f3      	beq.n	800f056 <_fflush_r+0xa>
 800f06e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f070:	07d0      	lsls	r0, r2, #31
 800f072:	d404      	bmi.n	800f07e <_fflush_r+0x32>
 800f074:	0599      	lsls	r1, r3, #22
 800f076:	d402      	bmi.n	800f07e <_fflush_r+0x32>
 800f078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f07a:	f7fd f9bc 	bl	800c3f6 <__retarget_lock_acquire_recursive>
 800f07e:	4628      	mov	r0, r5
 800f080:	4621      	mov	r1, r4
 800f082:	f7ff ff5f 	bl	800ef44 <__sflush_r>
 800f086:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f088:	07da      	lsls	r2, r3, #31
 800f08a:	4605      	mov	r5, r0
 800f08c:	d4e4      	bmi.n	800f058 <_fflush_r+0xc>
 800f08e:	89a3      	ldrh	r3, [r4, #12]
 800f090:	059b      	lsls	r3, r3, #22
 800f092:	d4e1      	bmi.n	800f058 <_fflush_r+0xc>
 800f094:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f096:	f7fd f9af 	bl	800c3f8 <__retarget_lock_release_recursive>
 800f09a:	e7dd      	b.n	800f058 <_fflush_r+0xc>

0800f09c <__swhatbuf_r>:
 800f09c:	b570      	push	{r4, r5, r6, lr}
 800f09e:	460c      	mov	r4, r1
 800f0a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0a4:	2900      	cmp	r1, #0
 800f0a6:	b096      	sub	sp, #88	@ 0x58
 800f0a8:	4615      	mov	r5, r2
 800f0aa:	461e      	mov	r6, r3
 800f0ac:	da0d      	bge.n	800f0ca <__swhatbuf_r+0x2e>
 800f0ae:	89a3      	ldrh	r3, [r4, #12]
 800f0b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f0b4:	f04f 0100 	mov.w	r1, #0
 800f0b8:	bf14      	ite	ne
 800f0ba:	2340      	movne	r3, #64	@ 0x40
 800f0bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f0c0:	2000      	movs	r0, #0
 800f0c2:	6031      	str	r1, [r6, #0]
 800f0c4:	602b      	str	r3, [r5, #0]
 800f0c6:	b016      	add	sp, #88	@ 0x58
 800f0c8:	bd70      	pop	{r4, r5, r6, pc}
 800f0ca:	466a      	mov	r2, sp
 800f0cc:	f000 f8d6 	bl	800f27c <_fstat_r>
 800f0d0:	2800      	cmp	r0, #0
 800f0d2:	dbec      	blt.n	800f0ae <__swhatbuf_r+0x12>
 800f0d4:	9901      	ldr	r1, [sp, #4]
 800f0d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f0da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f0de:	4259      	negs	r1, r3
 800f0e0:	4159      	adcs	r1, r3
 800f0e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f0e6:	e7eb      	b.n	800f0c0 <__swhatbuf_r+0x24>

0800f0e8 <__smakebuf_r>:
 800f0e8:	898b      	ldrh	r3, [r1, #12]
 800f0ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0ec:	079d      	lsls	r5, r3, #30
 800f0ee:	4606      	mov	r6, r0
 800f0f0:	460c      	mov	r4, r1
 800f0f2:	d507      	bpl.n	800f104 <__smakebuf_r+0x1c>
 800f0f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f0f8:	6023      	str	r3, [r4, #0]
 800f0fa:	6123      	str	r3, [r4, #16]
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	6163      	str	r3, [r4, #20]
 800f100:	b003      	add	sp, #12
 800f102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f104:	ab01      	add	r3, sp, #4
 800f106:	466a      	mov	r2, sp
 800f108:	f7ff ffc8 	bl	800f09c <__swhatbuf_r>
 800f10c:	9f00      	ldr	r7, [sp, #0]
 800f10e:	4605      	mov	r5, r0
 800f110:	4639      	mov	r1, r7
 800f112:	4630      	mov	r0, r6
 800f114:	f7fe fb8a 	bl	800d82c <_malloc_r>
 800f118:	b948      	cbnz	r0, 800f12e <__smakebuf_r+0x46>
 800f11a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f11e:	059a      	lsls	r2, r3, #22
 800f120:	d4ee      	bmi.n	800f100 <__smakebuf_r+0x18>
 800f122:	f023 0303 	bic.w	r3, r3, #3
 800f126:	f043 0302 	orr.w	r3, r3, #2
 800f12a:	81a3      	strh	r3, [r4, #12]
 800f12c:	e7e2      	b.n	800f0f4 <__smakebuf_r+0xc>
 800f12e:	89a3      	ldrh	r3, [r4, #12]
 800f130:	6020      	str	r0, [r4, #0]
 800f132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f136:	81a3      	strh	r3, [r4, #12]
 800f138:	9b01      	ldr	r3, [sp, #4]
 800f13a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f13e:	b15b      	cbz	r3, 800f158 <__smakebuf_r+0x70>
 800f140:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f144:	4630      	mov	r0, r6
 800f146:	f000 f8ab 	bl	800f2a0 <_isatty_r>
 800f14a:	b128      	cbz	r0, 800f158 <__smakebuf_r+0x70>
 800f14c:	89a3      	ldrh	r3, [r4, #12]
 800f14e:	f023 0303 	bic.w	r3, r3, #3
 800f152:	f043 0301 	orr.w	r3, r3, #1
 800f156:	81a3      	strh	r3, [r4, #12]
 800f158:	89a3      	ldrh	r3, [r4, #12]
 800f15a:	431d      	orrs	r5, r3
 800f15c:	81a5      	strh	r5, [r4, #12]
 800f15e:	e7cf      	b.n	800f100 <__smakebuf_r+0x18>

0800f160 <__sccl>:
 800f160:	b570      	push	{r4, r5, r6, lr}
 800f162:	780b      	ldrb	r3, [r1, #0]
 800f164:	4604      	mov	r4, r0
 800f166:	2b5e      	cmp	r3, #94	@ 0x5e
 800f168:	bf0b      	itete	eq
 800f16a:	784b      	ldrbeq	r3, [r1, #1]
 800f16c:	1c4a      	addne	r2, r1, #1
 800f16e:	1c8a      	addeq	r2, r1, #2
 800f170:	2100      	movne	r1, #0
 800f172:	bf08      	it	eq
 800f174:	2101      	moveq	r1, #1
 800f176:	3801      	subs	r0, #1
 800f178:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800f17c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800f180:	42a8      	cmp	r0, r5
 800f182:	d1fb      	bne.n	800f17c <__sccl+0x1c>
 800f184:	b90b      	cbnz	r3, 800f18a <__sccl+0x2a>
 800f186:	1e50      	subs	r0, r2, #1
 800f188:	bd70      	pop	{r4, r5, r6, pc}
 800f18a:	f081 0101 	eor.w	r1, r1, #1
 800f18e:	54e1      	strb	r1, [r4, r3]
 800f190:	4610      	mov	r0, r2
 800f192:	4602      	mov	r2, r0
 800f194:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f198:	2d2d      	cmp	r5, #45	@ 0x2d
 800f19a:	d005      	beq.n	800f1a8 <__sccl+0x48>
 800f19c:	2d5d      	cmp	r5, #93	@ 0x5d
 800f19e:	d016      	beq.n	800f1ce <__sccl+0x6e>
 800f1a0:	2d00      	cmp	r5, #0
 800f1a2:	d0f1      	beq.n	800f188 <__sccl+0x28>
 800f1a4:	462b      	mov	r3, r5
 800f1a6:	e7f2      	b.n	800f18e <__sccl+0x2e>
 800f1a8:	7846      	ldrb	r6, [r0, #1]
 800f1aa:	2e5d      	cmp	r6, #93	@ 0x5d
 800f1ac:	d0fa      	beq.n	800f1a4 <__sccl+0x44>
 800f1ae:	42b3      	cmp	r3, r6
 800f1b0:	dcf8      	bgt.n	800f1a4 <__sccl+0x44>
 800f1b2:	3002      	adds	r0, #2
 800f1b4:	461a      	mov	r2, r3
 800f1b6:	3201      	adds	r2, #1
 800f1b8:	4296      	cmp	r6, r2
 800f1ba:	54a1      	strb	r1, [r4, r2]
 800f1bc:	dcfb      	bgt.n	800f1b6 <__sccl+0x56>
 800f1be:	1af2      	subs	r2, r6, r3
 800f1c0:	3a01      	subs	r2, #1
 800f1c2:	1c5d      	adds	r5, r3, #1
 800f1c4:	42b3      	cmp	r3, r6
 800f1c6:	bfa8      	it	ge
 800f1c8:	2200      	movge	r2, #0
 800f1ca:	18ab      	adds	r3, r5, r2
 800f1cc:	e7e1      	b.n	800f192 <__sccl+0x32>
 800f1ce:	4610      	mov	r0, r2
 800f1d0:	e7da      	b.n	800f188 <__sccl+0x28>

0800f1d2 <__submore>:
 800f1d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1d6:	460c      	mov	r4, r1
 800f1d8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800f1da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f1de:	4299      	cmp	r1, r3
 800f1e0:	d11d      	bne.n	800f21e <__submore+0x4c>
 800f1e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800f1e6:	f7fe fb21 	bl	800d82c <_malloc_r>
 800f1ea:	b918      	cbnz	r0, 800f1f4 <__submore+0x22>
 800f1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f1f8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800f1fa:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800f1fe:	6360      	str	r0, [r4, #52]	@ 0x34
 800f200:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800f204:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800f208:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800f20c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f210:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800f214:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800f218:	6020      	str	r0, [r4, #0]
 800f21a:	2000      	movs	r0, #0
 800f21c:	e7e8      	b.n	800f1f0 <__submore+0x1e>
 800f21e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800f220:	0077      	lsls	r7, r6, #1
 800f222:	463a      	mov	r2, r7
 800f224:	f000 f88e 	bl	800f344 <_realloc_r>
 800f228:	4605      	mov	r5, r0
 800f22a:	2800      	cmp	r0, #0
 800f22c:	d0de      	beq.n	800f1ec <__submore+0x1a>
 800f22e:	eb00 0806 	add.w	r8, r0, r6
 800f232:	4601      	mov	r1, r0
 800f234:	4632      	mov	r2, r6
 800f236:	4640      	mov	r0, r8
 800f238:	f7fd f8df 	bl	800c3fa <memcpy>
 800f23c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800f240:	f8c4 8000 	str.w	r8, [r4]
 800f244:	e7e9      	b.n	800f21a <__submore+0x48>

0800f246 <memmove>:
 800f246:	4288      	cmp	r0, r1
 800f248:	b510      	push	{r4, lr}
 800f24a:	eb01 0402 	add.w	r4, r1, r2
 800f24e:	d902      	bls.n	800f256 <memmove+0x10>
 800f250:	4284      	cmp	r4, r0
 800f252:	4623      	mov	r3, r4
 800f254:	d807      	bhi.n	800f266 <memmove+0x20>
 800f256:	1e43      	subs	r3, r0, #1
 800f258:	42a1      	cmp	r1, r4
 800f25a:	d008      	beq.n	800f26e <memmove+0x28>
 800f25c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f260:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f264:	e7f8      	b.n	800f258 <memmove+0x12>
 800f266:	4402      	add	r2, r0
 800f268:	4601      	mov	r1, r0
 800f26a:	428a      	cmp	r2, r1
 800f26c:	d100      	bne.n	800f270 <memmove+0x2a>
 800f26e:	bd10      	pop	{r4, pc}
 800f270:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f274:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f278:	e7f7      	b.n	800f26a <memmove+0x24>
	...

0800f27c <_fstat_r>:
 800f27c:	b538      	push	{r3, r4, r5, lr}
 800f27e:	4d07      	ldr	r5, [pc, #28]	@ (800f29c <_fstat_r+0x20>)
 800f280:	2300      	movs	r3, #0
 800f282:	4604      	mov	r4, r0
 800f284:	4608      	mov	r0, r1
 800f286:	4611      	mov	r1, r2
 800f288:	602b      	str	r3, [r5, #0]
 800f28a:	f7f4 f987 	bl	800359c <_fstat>
 800f28e:	1c43      	adds	r3, r0, #1
 800f290:	d102      	bne.n	800f298 <_fstat_r+0x1c>
 800f292:	682b      	ldr	r3, [r5, #0]
 800f294:	b103      	cbz	r3, 800f298 <_fstat_r+0x1c>
 800f296:	6023      	str	r3, [r4, #0]
 800f298:	bd38      	pop	{r3, r4, r5, pc}
 800f29a:	bf00      	nop
 800f29c:	20000b48 	.word	0x20000b48

0800f2a0 <_isatty_r>:
 800f2a0:	b538      	push	{r3, r4, r5, lr}
 800f2a2:	4d06      	ldr	r5, [pc, #24]	@ (800f2bc <_isatty_r+0x1c>)
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	4604      	mov	r4, r0
 800f2a8:	4608      	mov	r0, r1
 800f2aa:	602b      	str	r3, [r5, #0]
 800f2ac:	f7f4 f986 	bl	80035bc <_isatty>
 800f2b0:	1c43      	adds	r3, r0, #1
 800f2b2:	d102      	bne.n	800f2ba <_isatty_r+0x1a>
 800f2b4:	682b      	ldr	r3, [r5, #0]
 800f2b6:	b103      	cbz	r3, 800f2ba <_isatty_r+0x1a>
 800f2b8:	6023      	str	r3, [r4, #0]
 800f2ba:	bd38      	pop	{r3, r4, r5, pc}
 800f2bc:	20000b48 	.word	0x20000b48

0800f2c0 <_sbrk_r>:
 800f2c0:	b538      	push	{r3, r4, r5, lr}
 800f2c2:	4d06      	ldr	r5, [pc, #24]	@ (800f2dc <_sbrk_r+0x1c>)
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	4604      	mov	r4, r0
 800f2c8:	4608      	mov	r0, r1
 800f2ca:	602b      	str	r3, [r5, #0]
 800f2cc:	f7f4 f98e 	bl	80035ec <_sbrk>
 800f2d0:	1c43      	adds	r3, r0, #1
 800f2d2:	d102      	bne.n	800f2da <_sbrk_r+0x1a>
 800f2d4:	682b      	ldr	r3, [r5, #0]
 800f2d6:	b103      	cbz	r3, 800f2da <_sbrk_r+0x1a>
 800f2d8:	6023      	str	r3, [r4, #0]
 800f2da:	bd38      	pop	{r3, r4, r5, pc}
 800f2dc:	20000b48 	.word	0x20000b48

0800f2e0 <__assert_func>:
 800f2e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f2e2:	4614      	mov	r4, r2
 800f2e4:	461a      	mov	r2, r3
 800f2e6:	4b09      	ldr	r3, [pc, #36]	@ (800f30c <__assert_func+0x2c>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	4605      	mov	r5, r0
 800f2ec:	68d8      	ldr	r0, [r3, #12]
 800f2ee:	b954      	cbnz	r4, 800f306 <__assert_func+0x26>
 800f2f0:	4b07      	ldr	r3, [pc, #28]	@ (800f310 <__assert_func+0x30>)
 800f2f2:	461c      	mov	r4, r3
 800f2f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f2f8:	9100      	str	r1, [sp, #0]
 800f2fa:	462b      	mov	r3, r5
 800f2fc:	4905      	ldr	r1, [pc, #20]	@ (800f314 <__assert_func+0x34>)
 800f2fe:	f000 f8bf 	bl	800f480 <fiprintf>
 800f302:	f000 f8cf 	bl	800f4a4 <abort>
 800f306:	4b04      	ldr	r3, [pc, #16]	@ (800f318 <__assert_func+0x38>)
 800f308:	e7f4      	b.n	800f2f4 <__assert_func+0x14>
 800f30a:	bf00      	nop
 800f30c:	20000188 	.word	0x20000188
 800f310:	08010968 	.word	0x08010968
 800f314:	0801093a 	.word	0x0801093a
 800f318:	0801092d 	.word	0x0801092d

0800f31c <_calloc_r>:
 800f31c:	b570      	push	{r4, r5, r6, lr}
 800f31e:	fba1 5402 	umull	r5, r4, r1, r2
 800f322:	b93c      	cbnz	r4, 800f334 <_calloc_r+0x18>
 800f324:	4629      	mov	r1, r5
 800f326:	f7fe fa81 	bl	800d82c <_malloc_r>
 800f32a:	4606      	mov	r6, r0
 800f32c:	b928      	cbnz	r0, 800f33a <_calloc_r+0x1e>
 800f32e:	2600      	movs	r6, #0
 800f330:	4630      	mov	r0, r6
 800f332:	bd70      	pop	{r4, r5, r6, pc}
 800f334:	220c      	movs	r2, #12
 800f336:	6002      	str	r2, [r0, #0]
 800f338:	e7f9      	b.n	800f32e <_calloc_r+0x12>
 800f33a:	462a      	mov	r2, r5
 800f33c:	4621      	mov	r1, r4
 800f33e:	f7fc ffab 	bl	800c298 <memset>
 800f342:	e7f5      	b.n	800f330 <_calloc_r+0x14>

0800f344 <_realloc_r>:
 800f344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f348:	4680      	mov	r8, r0
 800f34a:	4615      	mov	r5, r2
 800f34c:	460c      	mov	r4, r1
 800f34e:	b921      	cbnz	r1, 800f35a <_realloc_r+0x16>
 800f350:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f354:	4611      	mov	r1, r2
 800f356:	f7fe ba69 	b.w	800d82c <_malloc_r>
 800f35a:	b92a      	cbnz	r2, 800f368 <_realloc_r+0x24>
 800f35c:	f7fd feb8 	bl	800d0d0 <_free_r>
 800f360:	2400      	movs	r4, #0
 800f362:	4620      	mov	r0, r4
 800f364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f368:	f000 f8a3 	bl	800f4b2 <_malloc_usable_size_r>
 800f36c:	4285      	cmp	r5, r0
 800f36e:	4606      	mov	r6, r0
 800f370:	d802      	bhi.n	800f378 <_realloc_r+0x34>
 800f372:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f376:	d8f4      	bhi.n	800f362 <_realloc_r+0x1e>
 800f378:	4629      	mov	r1, r5
 800f37a:	4640      	mov	r0, r8
 800f37c:	f7fe fa56 	bl	800d82c <_malloc_r>
 800f380:	4607      	mov	r7, r0
 800f382:	2800      	cmp	r0, #0
 800f384:	d0ec      	beq.n	800f360 <_realloc_r+0x1c>
 800f386:	42b5      	cmp	r5, r6
 800f388:	462a      	mov	r2, r5
 800f38a:	4621      	mov	r1, r4
 800f38c:	bf28      	it	cs
 800f38e:	4632      	movcs	r2, r6
 800f390:	f7fd f833 	bl	800c3fa <memcpy>
 800f394:	4621      	mov	r1, r4
 800f396:	4640      	mov	r0, r8
 800f398:	f7fd fe9a 	bl	800d0d0 <_free_r>
 800f39c:	463c      	mov	r4, r7
 800f39e:	e7e0      	b.n	800f362 <_realloc_r+0x1e>

0800f3a0 <_strtoul_l.constprop.0>:
 800f3a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f3a4:	4e34      	ldr	r6, [pc, #208]	@ (800f478 <_strtoul_l.constprop.0+0xd8>)
 800f3a6:	4686      	mov	lr, r0
 800f3a8:	460d      	mov	r5, r1
 800f3aa:	4628      	mov	r0, r5
 800f3ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f3b0:	5d37      	ldrb	r7, [r6, r4]
 800f3b2:	f017 0708 	ands.w	r7, r7, #8
 800f3b6:	d1f8      	bne.n	800f3aa <_strtoul_l.constprop.0+0xa>
 800f3b8:	2c2d      	cmp	r4, #45	@ 0x2d
 800f3ba:	d12f      	bne.n	800f41c <_strtoul_l.constprop.0+0x7c>
 800f3bc:	782c      	ldrb	r4, [r5, #0]
 800f3be:	2701      	movs	r7, #1
 800f3c0:	1c85      	adds	r5, r0, #2
 800f3c2:	f033 0010 	bics.w	r0, r3, #16
 800f3c6:	d109      	bne.n	800f3dc <_strtoul_l.constprop.0+0x3c>
 800f3c8:	2c30      	cmp	r4, #48	@ 0x30
 800f3ca:	d12c      	bne.n	800f426 <_strtoul_l.constprop.0+0x86>
 800f3cc:	7828      	ldrb	r0, [r5, #0]
 800f3ce:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800f3d2:	2858      	cmp	r0, #88	@ 0x58
 800f3d4:	d127      	bne.n	800f426 <_strtoul_l.constprop.0+0x86>
 800f3d6:	786c      	ldrb	r4, [r5, #1]
 800f3d8:	2310      	movs	r3, #16
 800f3da:	3502      	adds	r5, #2
 800f3dc:	f04f 38ff 	mov.w	r8, #4294967295
 800f3e0:	2600      	movs	r6, #0
 800f3e2:	fbb8 f8f3 	udiv	r8, r8, r3
 800f3e6:	fb03 f908 	mul.w	r9, r3, r8
 800f3ea:	ea6f 0909 	mvn.w	r9, r9
 800f3ee:	4630      	mov	r0, r6
 800f3f0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800f3f4:	f1bc 0f09 	cmp.w	ip, #9
 800f3f8:	d81c      	bhi.n	800f434 <_strtoul_l.constprop.0+0x94>
 800f3fa:	4664      	mov	r4, ip
 800f3fc:	42a3      	cmp	r3, r4
 800f3fe:	dd2a      	ble.n	800f456 <_strtoul_l.constprop.0+0xb6>
 800f400:	f1b6 3fff 	cmp.w	r6, #4294967295
 800f404:	d007      	beq.n	800f416 <_strtoul_l.constprop.0+0x76>
 800f406:	4580      	cmp	r8, r0
 800f408:	d322      	bcc.n	800f450 <_strtoul_l.constprop.0+0xb0>
 800f40a:	d101      	bne.n	800f410 <_strtoul_l.constprop.0+0x70>
 800f40c:	45a1      	cmp	r9, r4
 800f40e:	db1f      	blt.n	800f450 <_strtoul_l.constprop.0+0xb0>
 800f410:	fb00 4003 	mla	r0, r0, r3, r4
 800f414:	2601      	movs	r6, #1
 800f416:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f41a:	e7e9      	b.n	800f3f0 <_strtoul_l.constprop.0+0x50>
 800f41c:	2c2b      	cmp	r4, #43	@ 0x2b
 800f41e:	bf04      	itt	eq
 800f420:	782c      	ldrbeq	r4, [r5, #0]
 800f422:	1c85      	addeq	r5, r0, #2
 800f424:	e7cd      	b.n	800f3c2 <_strtoul_l.constprop.0+0x22>
 800f426:	2b00      	cmp	r3, #0
 800f428:	d1d8      	bne.n	800f3dc <_strtoul_l.constprop.0+0x3c>
 800f42a:	2c30      	cmp	r4, #48	@ 0x30
 800f42c:	bf0c      	ite	eq
 800f42e:	2308      	moveq	r3, #8
 800f430:	230a      	movne	r3, #10
 800f432:	e7d3      	b.n	800f3dc <_strtoul_l.constprop.0+0x3c>
 800f434:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800f438:	f1bc 0f19 	cmp.w	ip, #25
 800f43c:	d801      	bhi.n	800f442 <_strtoul_l.constprop.0+0xa2>
 800f43e:	3c37      	subs	r4, #55	@ 0x37
 800f440:	e7dc      	b.n	800f3fc <_strtoul_l.constprop.0+0x5c>
 800f442:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800f446:	f1bc 0f19 	cmp.w	ip, #25
 800f44a:	d804      	bhi.n	800f456 <_strtoul_l.constprop.0+0xb6>
 800f44c:	3c57      	subs	r4, #87	@ 0x57
 800f44e:	e7d5      	b.n	800f3fc <_strtoul_l.constprop.0+0x5c>
 800f450:	f04f 36ff 	mov.w	r6, #4294967295
 800f454:	e7df      	b.n	800f416 <_strtoul_l.constprop.0+0x76>
 800f456:	1c73      	adds	r3, r6, #1
 800f458:	d106      	bne.n	800f468 <_strtoul_l.constprop.0+0xc8>
 800f45a:	2322      	movs	r3, #34	@ 0x22
 800f45c:	f8ce 3000 	str.w	r3, [lr]
 800f460:	4630      	mov	r0, r6
 800f462:	b932      	cbnz	r2, 800f472 <_strtoul_l.constprop.0+0xd2>
 800f464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f468:	b107      	cbz	r7, 800f46c <_strtoul_l.constprop.0+0xcc>
 800f46a:	4240      	negs	r0, r0
 800f46c:	2a00      	cmp	r2, #0
 800f46e:	d0f9      	beq.n	800f464 <_strtoul_l.constprop.0+0xc4>
 800f470:	b106      	cbz	r6, 800f474 <_strtoul_l.constprop.0+0xd4>
 800f472:	1e69      	subs	r1, r5, #1
 800f474:	6011      	str	r1, [r2, #0]
 800f476:	e7f5      	b.n	800f464 <_strtoul_l.constprop.0+0xc4>
 800f478:	08010801 	.word	0x08010801

0800f47c <_strtoul_r>:
 800f47c:	f7ff bf90 	b.w	800f3a0 <_strtoul_l.constprop.0>

0800f480 <fiprintf>:
 800f480:	b40e      	push	{r1, r2, r3}
 800f482:	b503      	push	{r0, r1, lr}
 800f484:	4601      	mov	r1, r0
 800f486:	ab03      	add	r3, sp, #12
 800f488:	4805      	ldr	r0, [pc, #20]	@ (800f4a0 <fiprintf+0x20>)
 800f48a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f48e:	6800      	ldr	r0, [r0, #0]
 800f490:	9301      	str	r3, [sp, #4]
 800f492:	f7ff faf1 	bl	800ea78 <_vfiprintf_r>
 800f496:	b002      	add	sp, #8
 800f498:	f85d eb04 	ldr.w	lr, [sp], #4
 800f49c:	b003      	add	sp, #12
 800f49e:	4770      	bx	lr
 800f4a0:	20000188 	.word	0x20000188

0800f4a4 <abort>:
 800f4a4:	b508      	push	{r3, lr}
 800f4a6:	2006      	movs	r0, #6
 800f4a8:	f000 f834 	bl	800f514 <raise>
 800f4ac:	2001      	movs	r0, #1
 800f4ae:	f7f4 f825 	bl	80034fc <_exit>

0800f4b2 <_malloc_usable_size_r>:
 800f4b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4b6:	1f18      	subs	r0, r3, #4
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	bfbc      	itt	lt
 800f4bc:	580b      	ldrlt	r3, [r1, r0]
 800f4be:	18c0      	addlt	r0, r0, r3
 800f4c0:	4770      	bx	lr

0800f4c2 <_raise_r>:
 800f4c2:	291f      	cmp	r1, #31
 800f4c4:	b538      	push	{r3, r4, r5, lr}
 800f4c6:	4605      	mov	r5, r0
 800f4c8:	460c      	mov	r4, r1
 800f4ca:	d904      	bls.n	800f4d6 <_raise_r+0x14>
 800f4cc:	2316      	movs	r3, #22
 800f4ce:	6003      	str	r3, [r0, #0]
 800f4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f4d4:	bd38      	pop	{r3, r4, r5, pc}
 800f4d6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f4d8:	b112      	cbz	r2, 800f4e0 <_raise_r+0x1e>
 800f4da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f4de:	b94b      	cbnz	r3, 800f4f4 <_raise_r+0x32>
 800f4e0:	4628      	mov	r0, r5
 800f4e2:	f000 f831 	bl	800f548 <_getpid_r>
 800f4e6:	4622      	mov	r2, r4
 800f4e8:	4601      	mov	r1, r0
 800f4ea:	4628      	mov	r0, r5
 800f4ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4f0:	f000 b818 	b.w	800f524 <_kill_r>
 800f4f4:	2b01      	cmp	r3, #1
 800f4f6:	d00a      	beq.n	800f50e <_raise_r+0x4c>
 800f4f8:	1c59      	adds	r1, r3, #1
 800f4fa:	d103      	bne.n	800f504 <_raise_r+0x42>
 800f4fc:	2316      	movs	r3, #22
 800f4fe:	6003      	str	r3, [r0, #0]
 800f500:	2001      	movs	r0, #1
 800f502:	e7e7      	b.n	800f4d4 <_raise_r+0x12>
 800f504:	2100      	movs	r1, #0
 800f506:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f50a:	4620      	mov	r0, r4
 800f50c:	4798      	blx	r3
 800f50e:	2000      	movs	r0, #0
 800f510:	e7e0      	b.n	800f4d4 <_raise_r+0x12>
	...

0800f514 <raise>:
 800f514:	4b02      	ldr	r3, [pc, #8]	@ (800f520 <raise+0xc>)
 800f516:	4601      	mov	r1, r0
 800f518:	6818      	ldr	r0, [r3, #0]
 800f51a:	f7ff bfd2 	b.w	800f4c2 <_raise_r>
 800f51e:	bf00      	nop
 800f520:	20000188 	.word	0x20000188

0800f524 <_kill_r>:
 800f524:	b538      	push	{r3, r4, r5, lr}
 800f526:	4d07      	ldr	r5, [pc, #28]	@ (800f544 <_kill_r+0x20>)
 800f528:	2300      	movs	r3, #0
 800f52a:	4604      	mov	r4, r0
 800f52c:	4608      	mov	r0, r1
 800f52e:	4611      	mov	r1, r2
 800f530:	602b      	str	r3, [r5, #0]
 800f532:	f7f3 ffd3 	bl	80034dc <_kill>
 800f536:	1c43      	adds	r3, r0, #1
 800f538:	d102      	bne.n	800f540 <_kill_r+0x1c>
 800f53a:	682b      	ldr	r3, [r5, #0]
 800f53c:	b103      	cbz	r3, 800f540 <_kill_r+0x1c>
 800f53e:	6023      	str	r3, [r4, #0]
 800f540:	bd38      	pop	{r3, r4, r5, pc}
 800f542:	bf00      	nop
 800f544:	20000b48 	.word	0x20000b48

0800f548 <_getpid_r>:
 800f548:	f7f3 bfc0 	b.w	80034cc <_getpid>

0800f54c <pow>:
 800f54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f54e:	ed2d 8b02 	vpush	{d8}
 800f552:	eeb0 8a40 	vmov.f32	s16, s0
 800f556:	eef0 8a60 	vmov.f32	s17, s1
 800f55a:	ec55 4b11 	vmov	r4, r5, d1
 800f55e:	f000 f873 	bl	800f648 <__ieee754_pow>
 800f562:	4622      	mov	r2, r4
 800f564:	462b      	mov	r3, r5
 800f566:	4620      	mov	r0, r4
 800f568:	4629      	mov	r1, r5
 800f56a:	ec57 6b10 	vmov	r6, r7, d0
 800f56e:	f7f1 fae5 	bl	8000b3c <__aeabi_dcmpun>
 800f572:	2800      	cmp	r0, #0
 800f574:	d13b      	bne.n	800f5ee <pow+0xa2>
 800f576:	ec51 0b18 	vmov	r0, r1, d8
 800f57a:	2200      	movs	r2, #0
 800f57c:	2300      	movs	r3, #0
 800f57e:	f7f1 faab 	bl	8000ad8 <__aeabi_dcmpeq>
 800f582:	b1b8      	cbz	r0, 800f5b4 <pow+0x68>
 800f584:	2200      	movs	r2, #0
 800f586:	2300      	movs	r3, #0
 800f588:	4620      	mov	r0, r4
 800f58a:	4629      	mov	r1, r5
 800f58c:	f7f1 faa4 	bl	8000ad8 <__aeabi_dcmpeq>
 800f590:	2800      	cmp	r0, #0
 800f592:	d146      	bne.n	800f622 <pow+0xd6>
 800f594:	ec45 4b10 	vmov	d0, r4, r5
 800f598:	f000 f848 	bl	800f62c <finite>
 800f59c:	b338      	cbz	r0, 800f5ee <pow+0xa2>
 800f59e:	2200      	movs	r2, #0
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	4620      	mov	r0, r4
 800f5a4:	4629      	mov	r1, r5
 800f5a6:	f7f1 faa1 	bl	8000aec <__aeabi_dcmplt>
 800f5aa:	b300      	cbz	r0, 800f5ee <pow+0xa2>
 800f5ac:	f7fc fef8 	bl	800c3a0 <__errno>
 800f5b0:	2322      	movs	r3, #34	@ 0x22
 800f5b2:	e01b      	b.n	800f5ec <pow+0xa0>
 800f5b4:	ec47 6b10 	vmov	d0, r6, r7
 800f5b8:	f000 f838 	bl	800f62c <finite>
 800f5bc:	b9e0      	cbnz	r0, 800f5f8 <pow+0xac>
 800f5be:	eeb0 0a48 	vmov.f32	s0, s16
 800f5c2:	eef0 0a68 	vmov.f32	s1, s17
 800f5c6:	f000 f831 	bl	800f62c <finite>
 800f5ca:	b1a8      	cbz	r0, 800f5f8 <pow+0xac>
 800f5cc:	ec45 4b10 	vmov	d0, r4, r5
 800f5d0:	f000 f82c 	bl	800f62c <finite>
 800f5d4:	b180      	cbz	r0, 800f5f8 <pow+0xac>
 800f5d6:	4632      	mov	r2, r6
 800f5d8:	463b      	mov	r3, r7
 800f5da:	4630      	mov	r0, r6
 800f5dc:	4639      	mov	r1, r7
 800f5de:	f7f1 faad 	bl	8000b3c <__aeabi_dcmpun>
 800f5e2:	2800      	cmp	r0, #0
 800f5e4:	d0e2      	beq.n	800f5ac <pow+0x60>
 800f5e6:	f7fc fedb 	bl	800c3a0 <__errno>
 800f5ea:	2321      	movs	r3, #33	@ 0x21
 800f5ec:	6003      	str	r3, [r0, #0]
 800f5ee:	ecbd 8b02 	vpop	{d8}
 800f5f2:	ec47 6b10 	vmov	d0, r6, r7
 800f5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	4630      	mov	r0, r6
 800f5fe:	4639      	mov	r1, r7
 800f600:	f7f1 fa6a 	bl	8000ad8 <__aeabi_dcmpeq>
 800f604:	2800      	cmp	r0, #0
 800f606:	d0f2      	beq.n	800f5ee <pow+0xa2>
 800f608:	eeb0 0a48 	vmov.f32	s0, s16
 800f60c:	eef0 0a68 	vmov.f32	s1, s17
 800f610:	f000 f80c 	bl	800f62c <finite>
 800f614:	2800      	cmp	r0, #0
 800f616:	d0ea      	beq.n	800f5ee <pow+0xa2>
 800f618:	ec45 4b10 	vmov	d0, r4, r5
 800f61c:	f000 f806 	bl	800f62c <finite>
 800f620:	e7c3      	b.n	800f5aa <pow+0x5e>
 800f622:	4f01      	ldr	r7, [pc, #4]	@ (800f628 <pow+0xdc>)
 800f624:	2600      	movs	r6, #0
 800f626:	e7e2      	b.n	800f5ee <pow+0xa2>
 800f628:	3ff00000 	.word	0x3ff00000

0800f62c <finite>:
 800f62c:	b082      	sub	sp, #8
 800f62e:	ed8d 0b00 	vstr	d0, [sp]
 800f632:	9801      	ldr	r0, [sp, #4]
 800f634:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800f638:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800f63c:	0fc0      	lsrs	r0, r0, #31
 800f63e:	b002      	add	sp, #8
 800f640:	4770      	bx	lr
 800f642:	0000      	movs	r0, r0
 800f644:	0000      	movs	r0, r0
	...

0800f648 <__ieee754_pow>:
 800f648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f64c:	b091      	sub	sp, #68	@ 0x44
 800f64e:	ed8d 1b00 	vstr	d1, [sp]
 800f652:	e9dd 1900 	ldrd	r1, r9, [sp]
 800f656:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800f65a:	ea5a 0001 	orrs.w	r0, sl, r1
 800f65e:	ec57 6b10 	vmov	r6, r7, d0
 800f662:	d113      	bne.n	800f68c <__ieee754_pow+0x44>
 800f664:	19b3      	adds	r3, r6, r6
 800f666:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800f66a:	4152      	adcs	r2, r2
 800f66c:	4298      	cmp	r0, r3
 800f66e:	4b98      	ldr	r3, [pc, #608]	@ (800f8d0 <__ieee754_pow+0x288>)
 800f670:	4193      	sbcs	r3, r2
 800f672:	f080 84ea 	bcs.w	801004a <__ieee754_pow+0xa02>
 800f676:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f67a:	4630      	mov	r0, r6
 800f67c:	4639      	mov	r1, r7
 800f67e:	f7f0 fe0d 	bl	800029c <__adddf3>
 800f682:	ec41 0b10 	vmov	d0, r0, r1
 800f686:	b011      	add	sp, #68	@ 0x44
 800f688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f68c:	4a91      	ldr	r2, [pc, #580]	@ (800f8d4 <__ieee754_pow+0x28c>)
 800f68e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f692:	4590      	cmp	r8, r2
 800f694:	463d      	mov	r5, r7
 800f696:	4633      	mov	r3, r6
 800f698:	d806      	bhi.n	800f6a8 <__ieee754_pow+0x60>
 800f69a:	d101      	bne.n	800f6a0 <__ieee754_pow+0x58>
 800f69c:	2e00      	cmp	r6, #0
 800f69e:	d1ea      	bne.n	800f676 <__ieee754_pow+0x2e>
 800f6a0:	4592      	cmp	sl, r2
 800f6a2:	d801      	bhi.n	800f6a8 <__ieee754_pow+0x60>
 800f6a4:	d10e      	bne.n	800f6c4 <__ieee754_pow+0x7c>
 800f6a6:	b169      	cbz	r1, 800f6c4 <__ieee754_pow+0x7c>
 800f6a8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800f6ac:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800f6b0:	431d      	orrs	r5, r3
 800f6b2:	d1e0      	bne.n	800f676 <__ieee754_pow+0x2e>
 800f6b4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f6b8:	18db      	adds	r3, r3, r3
 800f6ba:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800f6be:	4152      	adcs	r2, r2
 800f6c0:	429d      	cmp	r5, r3
 800f6c2:	e7d4      	b.n	800f66e <__ieee754_pow+0x26>
 800f6c4:	2d00      	cmp	r5, #0
 800f6c6:	46c3      	mov	fp, r8
 800f6c8:	da3a      	bge.n	800f740 <__ieee754_pow+0xf8>
 800f6ca:	4a83      	ldr	r2, [pc, #524]	@ (800f8d8 <__ieee754_pow+0x290>)
 800f6cc:	4592      	cmp	sl, r2
 800f6ce:	d84d      	bhi.n	800f76c <__ieee754_pow+0x124>
 800f6d0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800f6d4:	4592      	cmp	sl, r2
 800f6d6:	f240 84c7 	bls.w	8010068 <__ieee754_pow+0xa20>
 800f6da:	ea4f 522a 	mov.w	r2, sl, asr #20
 800f6de:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800f6e2:	2a14      	cmp	r2, #20
 800f6e4:	dd0f      	ble.n	800f706 <__ieee754_pow+0xbe>
 800f6e6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800f6ea:	fa21 f402 	lsr.w	r4, r1, r2
 800f6ee:	fa04 f202 	lsl.w	r2, r4, r2
 800f6f2:	428a      	cmp	r2, r1
 800f6f4:	f040 84b8 	bne.w	8010068 <__ieee754_pow+0xa20>
 800f6f8:	f004 0401 	and.w	r4, r4, #1
 800f6fc:	f1c4 0402 	rsb	r4, r4, #2
 800f700:	2900      	cmp	r1, #0
 800f702:	d158      	bne.n	800f7b6 <__ieee754_pow+0x16e>
 800f704:	e00e      	b.n	800f724 <__ieee754_pow+0xdc>
 800f706:	2900      	cmp	r1, #0
 800f708:	d154      	bne.n	800f7b4 <__ieee754_pow+0x16c>
 800f70a:	f1c2 0214 	rsb	r2, r2, #20
 800f70e:	fa4a f402 	asr.w	r4, sl, r2
 800f712:	fa04 f202 	lsl.w	r2, r4, r2
 800f716:	4552      	cmp	r2, sl
 800f718:	f040 84a3 	bne.w	8010062 <__ieee754_pow+0xa1a>
 800f71c:	f004 0401 	and.w	r4, r4, #1
 800f720:	f1c4 0402 	rsb	r4, r4, #2
 800f724:	4a6d      	ldr	r2, [pc, #436]	@ (800f8dc <__ieee754_pow+0x294>)
 800f726:	4592      	cmp	sl, r2
 800f728:	d12e      	bne.n	800f788 <__ieee754_pow+0x140>
 800f72a:	f1b9 0f00 	cmp.w	r9, #0
 800f72e:	f280 8494 	bge.w	801005a <__ieee754_pow+0xa12>
 800f732:	496a      	ldr	r1, [pc, #424]	@ (800f8dc <__ieee754_pow+0x294>)
 800f734:	4632      	mov	r2, r6
 800f736:	463b      	mov	r3, r7
 800f738:	2000      	movs	r0, #0
 800f73a:	f7f1 f88f 	bl	800085c <__aeabi_ddiv>
 800f73e:	e7a0      	b.n	800f682 <__ieee754_pow+0x3a>
 800f740:	2400      	movs	r4, #0
 800f742:	bbc1      	cbnz	r1, 800f7b6 <__ieee754_pow+0x16e>
 800f744:	4a63      	ldr	r2, [pc, #396]	@ (800f8d4 <__ieee754_pow+0x28c>)
 800f746:	4592      	cmp	sl, r2
 800f748:	d1ec      	bne.n	800f724 <__ieee754_pow+0xdc>
 800f74a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800f74e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800f752:	431a      	orrs	r2, r3
 800f754:	f000 8479 	beq.w	801004a <__ieee754_pow+0xa02>
 800f758:	4b61      	ldr	r3, [pc, #388]	@ (800f8e0 <__ieee754_pow+0x298>)
 800f75a:	4598      	cmp	r8, r3
 800f75c:	d908      	bls.n	800f770 <__ieee754_pow+0x128>
 800f75e:	f1b9 0f00 	cmp.w	r9, #0
 800f762:	f2c0 8476 	blt.w	8010052 <__ieee754_pow+0xa0a>
 800f766:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f76a:	e78a      	b.n	800f682 <__ieee754_pow+0x3a>
 800f76c:	2402      	movs	r4, #2
 800f76e:	e7e8      	b.n	800f742 <__ieee754_pow+0xfa>
 800f770:	f1b9 0f00 	cmp.w	r9, #0
 800f774:	f04f 0000 	mov.w	r0, #0
 800f778:	f04f 0100 	mov.w	r1, #0
 800f77c:	da81      	bge.n	800f682 <__ieee754_pow+0x3a>
 800f77e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f782:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f786:	e77c      	b.n	800f682 <__ieee754_pow+0x3a>
 800f788:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800f78c:	d106      	bne.n	800f79c <__ieee754_pow+0x154>
 800f78e:	4632      	mov	r2, r6
 800f790:	463b      	mov	r3, r7
 800f792:	4630      	mov	r0, r6
 800f794:	4639      	mov	r1, r7
 800f796:	f7f0 ff37 	bl	8000608 <__aeabi_dmul>
 800f79a:	e772      	b.n	800f682 <__ieee754_pow+0x3a>
 800f79c:	4a51      	ldr	r2, [pc, #324]	@ (800f8e4 <__ieee754_pow+0x29c>)
 800f79e:	4591      	cmp	r9, r2
 800f7a0:	d109      	bne.n	800f7b6 <__ieee754_pow+0x16e>
 800f7a2:	2d00      	cmp	r5, #0
 800f7a4:	db07      	blt.n	800f7b6 <__ieee754_pow+0x16e>
 800f7a6:	ec47 6b10 	vmov	d0, r6, r7
 800f7aa:	b011      	add	sp, #68	@ 0x44
 800f7ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7b0:	f000 bd52 	b.w	8010258 <__ieee754_sqrt>
 800f7b4:	2400      	movs	r4, #0
 800f7b6:	ec47 6b10 	vmov	d0, r6, r7
 800f7ba:	9302      	str	r3, [sp, #8]
 800f7bc:	f000 fc88 	bl	80100d0 <fabs>
 800f7c0:	9b02      	ldr	r3, [sp, #8]
 800f7c2:	ec51 0b10 	vmov	r0, r1, d0
 800f7c6:	bb53      	cbnz	r3, 800f81e <__ieee754_pow+0x1d6>
 800f7c8:	4b44      	ldr	r3, [pc, #272]	@ (800f8dc <__ieee754_pow+0x294>)
 800f7ca:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	d002      	beq.n	800f7d8 <__ieee754_pow+0x190>
 800f7d2:	f1b8 0f00 	cmp.w	r8, #0
 800f7d6:	d122      	bne.n	800f81e <__ieee754_pow+0x1d6>
 800f7d8:	f1b9 0f00 	cmp.w	r9, #0
 800f7dc:	da05      	bge.n	800f7ea <__ieee754_pow+0x1a2>
 800f7de:	4602      	mov	r2, r0
 800f7e0:	460b      	mov	r3, r1
 800f7e2:	2000      	movs	r0, #0
 800f7e4:	493d      	ldr	r1, [pc, #244]	@ (800f8dc <__ieee754_pow+0x294>)
 800f7e6:	f7f1 f839 	bl	800085c <__aeabi_ddiv>
 800f7ea:	2d00      	cmp	r5, #0
 800f7ec:	f6bf af49 	bge.w	800f682 <__ieee754_pow+0x3a>
 800f7f0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800f7f4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800f7f8:	ea58 0804 	orrs.w	r8, r8, r4
 800f7fc:	d108      	bne.n	800f810 <__ieee754_pow+0x1c8>
 800f7fe:	4602      	mov	r2, r0
 800f800:	460b      	mov	r3, r1
 800f802:	4610      	mov	r0, r2
 800f804:	4619      	mov	r1, r3
 800f806:	f7f0 fd47 	bl	8000298 <__aeabi_dsub>
 800f80a:	4602      	mov	r2, r0
 800f80c:	460b      	mov	r3, r1
 800f80e:	e794      	b.n	800f73a <__ieee754_pow+0xf2>
 800f810:	2c01      	cmp	r4, #1
 800f812:	f47f af36 	bne.w	800f682 <__ieee754_pow+0x3a>
 800f816:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f81a:	4619      	mov	r1, r3
 800f81c:	e731      	b.n	800f682 <__ieee754_pow+0x3a>
 800f81e:	0feb      	lsrs	r3, r5, #31
 800f820:	3b01      	subs	r3, #1
 800f822:	ea53 0204 	orrs.w	r2, r3, r4
 800f826:	d102      	bne.n	800f82e <__ieee754_pow+0x1e6>
 800f828:	4632      	mov	r2, r6
 800f82a:	463b      	mov	r3, r7
 800f82c:	e7e9      	b.n	800f802 <__ieee754_pow+0x1ba>
 800f82e:	3c01      	subs	r4, #1
 800f830:	431c      	orrs	r4, r3
 800f832:	d016      	beq.n	800f862 <__ieee754_pow+0x21a>
 800f834:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800f8c0 <__ieee754_pow+0x278>
 800f838:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800f83c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f840:	f240 8112 	bls.w	800fa68 <__ieee754_pow+0x420>
 800f844:	4b28      	ldr	r3, [pc, #160]	@ (800f8e8 <__ieee754_pow+0x2a0>)
 800f846:	459a      	cmp	sl, r3
 800f848:	4b25      	ldr	r3, [pc, #148]	@ (800f8e0 <__ieee754_pow+0x298>)
 800f84a:	d916      	bls.n	800f87a <__ieee754_pow+0x232>
 800f84c:	4598      	cmp	r8, r3
 800f84e:	d80b      	bhi.n	800f868 <__ieee754_pow+0x220>
 800f850:	f1b9 0f00 	cmp.w	r9, #0
 800f854:	da0b      	bge.n	800f86e <__ieee754_pow+0x226>
 800f856:	2000      	movs	r0, #0
 800f858:	b011      	add	sp, #68	@ 0x44
 800f85a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f85e:	f000 bcf3 	b.w	8010248 <__math_oflow>
 800f862:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800f8c8 <__ieee754_pow+0x280>
 800f866:	e7e7      	b.n	800f838 <__ieee754_pow+0x1f0>
 800f868:	f1b9 0f00 	cmp.w	r9, #0
 800f86c:	dcf3      	bgt.n	800f856 <__ieee754_pow+0x20e>
 800f86e:	2000      	movs	r0, #0
 800f870:	b011      	add	sp, #68	@ 0x44
 800f872:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f876:	f000 bcdf 	b.w	8010238 <__math_uflow>
 800f87a:	4598      	cmp	r8, r3
 800f87c:	d20c      	bcs.n	800f898 <__ieee754_pow+0x250>
 800f87e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f882:	2200      	movs	r2, #0
 800f884:	2300      	movs	r3, #0
 800f886:	f7f1 f931 	bl	8000aec <__aeabi_dcmplt>
 800f88a:	3800      	subs	r0, #0
 800f88c:	bf18      	it	ne
 800f88e:	2001      	movne	r0, #1
 800f890:	f1b9 0f00 	cmp.w	r9, #0
 800f894:	daec      	bge.n	800f870 <__ieee754_pow+0x228>
 800f896:	e7df      	b.n	800f858 <__ieee754_pow+0x210>
 800f898:	4b10      	ldr	r3, [pc, #64]	@ (800f8dc <__ieee754_pow+0x294>)
 800f89a:	4598      	cmp	r8, r3
 800f89c:	f04f 0200 	mov.w	r2, #0
 800f8a0:	d924      	bls.n	800f8ec <__ieee754_pow+0x2a4>
 800f8a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	f7f1 f920 	bl	8000aec <__aeabi_dcmplt>
 800f8ac:	3800      	subs	r0, #0
 800f8ae:	bf18      	it	ne
 800f8b0:	2001      	movne	r0, #1
 800f8b2:	f1b9 0f00 	cmp.w	r9, #0
 800f8b6:	dccf      	bgt.n	800f858 <__ieee754_pow+0x210>
 800f8b8:	e7da      	b.n	800f870 <__ieee754_pow+0x228>
 800f8ba:	bf00      	nop
 800f8bc:	f3af 8000 	nop.w
 800f8c0:	00000000 	.word	0x00000000
 800f8c4:	3ff00000 	.word	0x3ff00000
 800f8c8:	00000000 	.word	0x00000000
 800f8cc:	bff00000 	.word	0xbff00000
 800f8d0:	fff00000 	.word	0xfff00000
 800f8d4:	7ff00000 	.word	0x7ff00000
 800f8d8:	433fffff 	.word	0x433fffff
 800f8dc:	3ff00000 	.word	0x3ff00000
 800f8e0:	3fefffff 	.word	0x3fefffff
 800f8e4:	3fe00000 	.word	0x3fe00000
 800f8e8:	43f00000 	.word	0x43f00000
 800f8ec:	4b5a      	ldr	r3, [pc, #360]	@ (800fa58 <__ieee754_pow+0x410>)
 800f8ee:	f7f0 fcd3 	bl	8000298 <__aeabi_dsub>
 800f8f2:	a351      	add	r3, pc, #324	@ (adr r3, 800fa38 <__ieee754_pow+0x3f0>)
 800f8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8f8:	4604      	mov	r4, r0
 800f8fa:	460d      	mov	r5, r1
 800f8fc:	f7f0 fe84 	bl	8000608 <__aeabi_dmul>
 800f900:	a34f      	add	r3, pc, #316	@ (adr r3, 800fa40 <__ieee754_pow+0x3f8>)
 800f902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f906:	4606      	mov	r6, r0
 800f908:	460f      	mov	r7, r1
 800f90a:	4620      	mov	r0, r4
 800f90c:	4629      	mov	r1, r5
 800f90e:	f7f0 fe7b 	bl	8000608 <__aeabi_dmul>
 800f912:	4b52      	ldr	r3, [pc, #328]	@ (800fa5c <__ieee754_pow+0x414>)
 800f914:	4682      	mov	sl, r0
 800f916:	468b      	mov	fp, r1
 800f918:	2200      	movs	r2, #0
 800f91a:	4620      	mov	r0, r4
 800f91c:	4629      	mov	r1, r5
 800f91e:	f7f0 fe73 	bl	8000608 <__aeabi_dmul>
 800f922:	4602      	mov	r2, r0
 800f924:	460b      	mov	r3, r1
 800f926:	a148      	add	r1, pc, #288	@ (adr r1, 800fa48 <__ieee754_pow+0x400>)
 800f928:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f92c:	f7f0 fcb4 	bl	8000298 <__aeabi_dsub>
 800f930:	4622      	mov	r2, r4
 800f932:	462b      	mov	r3, r5
 800f934:	f7f0 fe68 	bl	8000608 <__aeabi_dmul>
 800f938:	4602      	mov	r2, r0
 800f93a:	460b      	mov	r3, r1
 800f93c:	2000      	movs	r0, #0
 800f93e:	4948      	ldr	r1, [pc, #288]	@ (800fa60 <__ieee754_pow+0x418>)
 800f940:	f7f0 fcaa 	bl	8000298 <__aeabi_dsub>
 800f944:	4622      	mov	r2, r4
 800f946:	4680      	mov	r8, r0
 800f948:	4689      	mov	r9, r1
 800f94a:	462b      	mov	r3, r5
 800f94c:	4620      	mov	r0, r4
 800f94e:	4629      	mov	r1, r5
 800f950:	f7f0 fe5a 	bl	8000608 <__aeabi_dmul>
 800f954:	4602      	mov	r2, r0
 800f956:	460b      	mov	r3, r1
 800f958:	4640      	mov	r0, r8
 800f95a:	4649      	mov	r1, r9
 800f95c:	f7f0 fe54 	bl	8000608 <__aeabi_dmul>
 800f960:	a33b      	add	r3, pc, #236	@ (adr r3, 800fa50 <__ieee754_pow+0x408>)
 800f962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f966:	f7f0 fe4f 	bl	8000608 <__aeabi_dmul>
 800f96a:	4602      	mov	r2, r0
 800f96c:	460b      	mov	r3, r1
 800f96e:	4650      	mov	r0, sl
 800f970:	4659      	mov	r1, fp
 800f972:	f7f0 fc91 	bl	8000298 <__aeabi_dsub>
 800f976:	4602      	mov	r2, r0
 800f978:	460b      	mov	r3, r1
 800f97a:	4680      	mov	r8, r0
 800f97c:	4689      	mov	r9, r1
 800f97e:	4630      	mov	r0, r6
 800f980:	4639      	mov	r1, r7
 800f982:	f7f0 fc8b 	bl	800029c <__adddf3>
 800f986:	2400      	movs	r4, #0
 800f988:	4632      	mov	r2, r6
 800f98a:	463b      	mov	r3, r7
 800f98c:	4620      	mov	r0, r4
 800f98e:	460d      	mov	r5, r1
 800f990:	f7f0 fc82 	bl	8000298 <__aeabi_dsub>
 800f994:	4602      	mov	r2, r0
 800f996:	460b      	mov	r3, r1
 800f998:	4640      	mov	r0, r8
 800f99a:	4649      	mov	r1, r9
 800f99c:	f7f0 fc7c 	bl	8000298 <__aeabi_dsub>
 800f9a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f9a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	9304      	str	r3, [sp, #16]
 800f9ac:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800f9b0:	4606      	mov	r6, r0
 800f9b2:	460f      	mov	r7, r1
 800f9b4:	4652      	mov	r2, sl
 800f9b6:	465b      	mov	r3, fp
 800f9b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f9bc:	f7f0 fc6c 	bl	8000298 <__aeabi_dsub>
 800f9c0:	4622      	mov	r2, r4
 800f9c2:	462b      	mov	r3, r5
 800f9c4:	f7f0 fe20 	bl	8000608 <__aeabi_dmul>
 800f9c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f9cc:	4680      	mov	r8, r0
 800f9ce:	4689      	mov	r9, r1
 800f9d0:	4630      	mov	r0, r6
 800f9d2:	4639      	mov	r1, r7
 800f9d4:	f7f0 fe18 	bl	8000608 <__aeabi_dmul>
 800f9d8:	4602      	mov	r2, r0
 800f9da:	460b      	mov	r3, r1
 800f9dc:	4640      	mov	r0, r8
 800f9de:	4649      	mov	r1, r9
 800f9e0:	f7f0 fc5c 	bl	800029c <__adddf3>
 800f9e4:	4652      	mov	r2, sl
 800f9e6:	465b      	mov	r3, fp
 800f9e8:	4606      	mov	r6, r0
 800f9ea:	460f      	mov	r7, r1
 800f9ec:	4620      	mov	r0, r4
 800f9ee:	4629      	mov	r1, r5
 800f9f0:	f7f0 fe0a 	bl	8000608 <__aeabi_dmul>
 800f9f4:	460b      	mov	r3, r1
 800f9f6:	4602      	mov	r2, r0
 800f9f8:	4680      	mov	r8, r0
 800f9fa:	4689      	mov	r9, r1
 800f9fc:	4630      	mov	r0, r6
 800f9fe:	4639      	mov	r1, r7
 800fa00:	f7f0 fc4c 	bl	800029c <__adddf3>
 800fa04:	4b17      	ldr	r3, [pc, #92]	@ (800fa64 <__ieee754_pow+0x41c>)
 800fa06:	4299      	cmp	r1, r3
 800fa08:	4604      	mov	r4, r0
 800fa0a:	460d      	mov	r5, r1
 800fa0c:	468a      	mov	sl, r1
 800fa0e:	468b      	mov	fp, r1
 800fa10:	f340 82ef 	ble.w	800fff2 <__ieee754_pow+0x9aa>
 800fa14:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800fa18:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800fa1c:	4303      	orrs	r3, r0
 800fa1e:	f000 81e8 	beq.w	800fdf2 <__ieee754_pow+0x7aa>
 800fa22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa26:	2200      	movs	r2, #0
 800fa28:	2300      	movs	r3, #0
 800fa2a:	f7f1 f85f 	bl	8000aec <__aeabi_dcmplt>
 800fa2e:	3800      	subs	r0, #0
 800fa30:	bf18      	it	ne
 800fa32:	2001      	movne	r0, #1
 800fa34:	e710      	b.n	800f858 <__ieee754_pow+0x210>
 800fa36:	bf00      	nop
 800fa38:	60000000 	.word	0x60000000
 800fa3c:	3ff71547 	.word	0x3ff71547
 800fa40:	f85ddf44 	.word	0xf85ddf44
 800fa44:	3e54ae0b 	.word	0x3e54ae0b
 800fa48:	55555555 	.word	0x55555555
 800fa4c:	3fd55555 	.word	0x3fd55555
 800fa50:	652b82fe 	.word	0x652b82fe
 800fa54:	3ff71547 	.word	0x3ff71547
 800fa58:	3ff00000 	.word	0x3ff00000
 800fa5c:	3fd00000 	.word	0x3fd00000
 800fa60:	3fe00000 	.word	0x3fe00000
 800fa64:	408fffff 	.word	0x408fffff
 800fa68:	4bd5      	ldr	r3, [pc, #852]	@ (800fdc0 <__ieee754_pow+0x778>)
 800fa6a:	402b      	ands	r3, r5
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	b92b      	cbnz	r3, 800fa7c <__ieee754_pow+0x434>
 800fa70:	4bd4      	ldr	r3, [pc, #848]	@ (800fdc4 <__ieee754_pow+0x77c>)
 800fa72:	f7f0 fdc9 	bl	8000608 <__aeabi_dmul>
 800fa76:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800fa7a:	468b      	mov	fp, r1
 800fa7c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800fa80:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800fa84:	4413      	add	r3, r2
 800fa86:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa88:	4bcf      	ldr	r3, [pc, #828]	@ (800fdc8 <__ieee754_pow+0x780>)
 800fa8a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800fa8e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800fa92:	459b      	cmp	fp, r3
 800fa94:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800fa98:	dd08      	ble.n	800faac <__ieee754_pow+0x464>
 800fa9a:	4bcc      	ldr	r3, [pc, #816]	@ (800fdcc <__ieee754_pow+0x784>)
 800fa9c:	459b      	cmp	fp, r3
 800fa9e:	f340 81a5 	ble.w	800fdec <__ieee754_pow+0x7a4>
 800faa2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800faa4:	3301      	adds	r3, #1
 800faa6:	930a      	str	r3, [sp, #40]	@ 0x28
 800faa8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800faac:	f04f 0a00 	mov.w	sl, #0
 800fab0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800fab4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fab6:	4bc6      	ldr	r3, [pc, #792]	@ (800fdd0 <__ieee754_pow+0x788>)
 800fab8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fabc:	ed93 7b00 	vldr	d7, [r3]
 800fac0:	4629      	mov	r1, r5
 800fac2:	ec53 2b17 	vmov	r2, r3, d7
 800fac6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800faca:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800face:	f7f0 fbe3 	bl	8000298 <__aeabi_dsub>
 800fad2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fad6:	4606      	mov	r6, r0
 800fad8:	460f      	mov	r7, r1
 800fada:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fade:	f7f0 fbdd 	bl	800029c <__adddf3>
 800fae2:	4602      	mov	r2, r0
 800fae4:	460b      	mov	r3, r1
 800fae6:	2000      	movs	r0, #0
 800fae8:	49ba      	ldr	r1, [pc, #744]	@ (800fdd4 <__ieee754_pow+0x78c>)
 800faea:	f7f0 feb7 	bl	800085c <__aeabi_ddiv>
 800faee:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800faf2:	4602      	mov	r2, r0
 800faf4:	460b      	mov	r3, r1
 800faf6:	4630      	mov	r0, r6
 800faf8:	4639      	mov	r1, r7
 800fafa:	f7f0 fd85 	bl	8000608 <__aeabi_dmul>
 800fafe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fb02:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800fb06:	106d      	asrs	r5, r5, #1
 800fb08:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800fb0c:	f04f 0b00 	mov.w	fp, #0
 800fb10:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800fb14:	4661      	mov	r1, ip
 800fb16:	2200      	movs	r2, #0
 800fb18:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800fb1c:	4658      	mov	r0, fp
 800fb1e:	46e1      	mov	r9, ip
 800fb20:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800fb24:	4614      	mov	r4, r2
 800fb26:	461d      	mov	r5, r3
 800fb28:	f7f0 fd6e 	bl	8000608 <__aeabi_dmul>
 800fb2c:	4602      	mov	r2, r0
 800fb2e:	460b      	mov	r3, r1
 800fb30:	4630      	mov	r0, r6
 800fb32:	4639      	mov	r1, r7
 800fb34:	f7f0 fbb0 	bl	8000298 <__aeabi_dsub>
 800fb38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fb3c:	4606      	mov	r6, r0
 800fb3e:	460f      	mov	r7, r1
 800fb40:	4620      	mov	r0, r4
 800fb42:	4629      	mov	r1, r5
 800fb44:	f7f0 fba8 	bl	8000298 <__aeabi_dsub>
 800fb48:	4602      	mov	r2, r0
 800fb4a:	460b      	mov	r3, r1
 800fb4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fb50:	f7f0 fba2 	bl	8000298 <__aeabi_dsub>
 800fb54:	465a      	mov	r2, fp
 800fb56:	464b      	mov	r3, r9
 800fb58:	f7f0 fd56 	bl	8000608 <__aeabi_dmul>
 800fb5c:	4602      	mov	r2, r0
 800fb5e:	460b      	mov	r3, r1
 800fb60:	4630      	mov	r0, r6
 800fb62:	4639      	mov	r1, r7
 800fb64:	f7f0 fb98 	bl	8000298 <__aeabi_dsub>
 800fb68:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800fb6c:	f7f0 fd4c 	bl	8000608 <__aeabi_dmul>
 800fb70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fb78:	4610      	mov	r0, r2
 800fb7a:	4619      	mov	r1, r3
 800fb7c:	f7f0 fd44 	bl	8000608 <__aeabi_dmul>
 800fb80:	a37d      	add	r3, pc, #500	@ (adr r3, 800fd78 <__ieee754_pow+0x730>)
 800fb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb86:	4604      	mov	r4, r0
 800fb88:	460d      	mov	r5, r1
 800fb8a:	f7f0 fd3d 	bl	8000608 <__aeabi_dmul>
 800fb8e:	a37c      	add	r3, pc, #496	@ (adr r3, 800fd80 <__ieee754_pow+0x738>)
 800fb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb94:	f7f0 fb82 	bl	800029c <__adddf3>
 800fb98:	4622      	mov	r2, r4
 800fb9a:	462b      	mov	r3, r5
 800fb9c:	f7f0 fd34 	bl	8000608 <__aeabi_dmul>
 800fba0:	a379      	add	r3, pc, #484	@ (adr r3, 800fd88 <__ieee754_pow+0x740>)
 800fba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fba6:	f7f0 fb79 	bl	800029c <__adddf3>
 800fbaa:	4622      	mov	r2, r4
 800fbac:	462b      	mov	r3, r5
 800fbae:	f7f0 fd2b 	bl	8000608 <__aeabi_dmul>
 800fbb2:	a377      	add	r3, pc, #476	@ (adr r3, 800fd90 <__ieee754_pow+0x748>)
 800fbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb8:	f7f0 fb70 	bl	800029c <__adddf3>
 800fbbc:	4622      	mov	r2, r4
 800fbbe:	462b      	mov	r3, r5
 800fbc0:	f7f0 fd22 	bl	8000608 <__aeabi_dmul>
 800fbc4:	a374      	add	r3, pc, #464	@ (adr r3, 800fd98 <__ieee754_pow+0x750>)
 800fbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbca:	f7f0 fb67 	bl	800029c <__adddf3>
 800fbce:	4622      	mov	r2, r4
 800fbd0:	462b      	mov	r3, r5
 800fbd2:	f7f0 fd19 	bl	8000608 <__aeabi_dmul>
 800fbd6:	a372      	add	r3, pc, #456	@ (adr r3, 800fda0 <__ieee754_pow+0x758>)
 800fbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbdc:	f7f0 fb5e 	bl	800029c <__adddf3>
 800fbe0:	4622      	mov	r2, r4
 800fbe2:	4606      	mov	r6, r0
 800fbe4:	460f      	mov	r7, r1
 800fbe6:	462b      	mov	r3, r5
 800fbe8:	4620      	mov	r0, r4
 800fbea:	4629      	mov	r1, r5
 800fbec:	f7f0 fd0c 	bl	8000608 <__aeabi_dmul>
 800fbf0:	4602      	mov	r2, r0
 800fbf2:	460b      	mov	r3, r1
 800fbf4:	4630      	mov	r0, r6
 800fbf6:	4639      	mov	r1, r7
 800fbf8:	f7f0 fd06 	bl	8000608 <__aeabi_dmul>
 800fbfc:	465a      	mov	r2, fp
 800fbfe:	4604      	mov	r4, r0
 800fc00:	460d      	mov	r5, r1
 800fc02:	464b      	mov	r3, r9
 800fc04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fc08:	f7f0 fb48 	bl	800029c <__adddf3>
 800fc0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fc10:	f7f0 fcfa 	bl	8000608 <__aeabi_dmul>
 800fc14:	4622      	mov	r2, r4
 800fc16:	462b      	mov	r3, r5
 800fc18:	f7f0 fb40 	bl	800029c <__adddf3>
 800fc1c:	465a      	mov	r2, fp
 800fc1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fc22:	464b      	mov	r3, r9
 800fc24:	4658      	mov	r0, fp
 800fc26:	4649      	mov	r1, r9
 800fc28:	f7f0 fcee 	bl	8000608 <__aeabi_dmul>
 800fc2c:	4b6a      	ldr	r3, [pc, #424]	@ (800fdd8 <__ieee754_pow+0x790>)
 800fc2e:	2200      	movs	r2, #0
 800fc30:	4606      	mov	r6, r0
 800fc32:	460f      	mov	r7, r1
 800fc34:	f7f0 fb32 	bl	800029c <__adddf3>
 800fc38:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fc3c:	f7f0 fb2e 	bl	800029c <__adddf3>
 800fc40:	46d8      	mov	r8, fp
 800fc42:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800fc46:	460d      	mov	r5, r1
 800fc48:	465a      	mov	r2, fp
 800fc4a:	460b      	mov	r3, r1
 800fc4c:	4640      	mov	r0, r8
 800fc4e:	4649      	mov	r1, r9
 800fc50:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800fc54:	f7f0 fcd8 	bl	8000608 <__aeabi_dmul>
 800fc58:	465c      	mov	r4, fp
 800fc5a:	4680      	mov	r8, r0
 800fc5c:	4689      	mov	r9, r1
 800fc5e:	4b5e      	ldr	r3, [pc, #376]	@ (800fdd8 <__ieee754_pow+0x790>)
 800fc60:	2200      	movs	r2, #0
 800fc62:	4620      	mov	r0, r4
 800fc64:	4629      	mov	r1, r5
 800fc66:	f7f0 fb17 	bl	8000298 <__aeabi_dsub>
 800fc6a:	4632      	mov	r2, r6
 800fc6c:	463b      	mov	r3, r7
 800fc6e:	f7f0 fb13 	bl	8000298 <__aeabi_dsub>
 800fc72:	4602      	mov	r2, r0
 800fc74:	460b      	mov	r3, r1
 800fc76:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fc7a:	f7f0 fb0d 	bl	8000298 <__aeabi_dsub>
 800fc7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc82:	f7f0 fcc1 	bl	8000608 <__aeabi_dmul>
 800fc86:	4622      	mov	r2, r4
 800fc88:	4606      	mov	r6, r0
 800fc8a:	460f      	mov	r7, r1
 800fc8c:	462b      	mov	r3, r5
 800fc8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fc92:	f7f0 fcb9 	bl	8000608 <__aeabi_dmul>
 800fc96:	4602      	mov	r2, r0
 800fc98:	460b      	mov	r3, r1
 800fc9a:	4630      	mov	r0, r6
 800fc9c:	4639      	mov	r1, r7
 800fc9e:	f7f0 fafd 	bl	800029c <__adddf3>
 800fca2:	4606      	mov	r6, r0
 800fca4:	460f      	mov	r7, r1
 800fca6:	4602      	mov	r2, r0
 800fca8:	460b      	mov	r3, r1
 800fcaa:	4640      	mov	r0, r8
 800fcac:	4649      	mov	r1, r9
 800fcae:	f7f0 faf5 	bl	800029c <__adddf3>
 800fcb2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800fcb6:	a33c      	add	r3, pc, #240	@ (adr r3, 800fda8 <__ieee754_pow+0x760>)
 800fcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcbc:	4658      	mov	r0, fp
 800fcbe:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800fcc2:	460d      	mov	r5, r1
 800fcc4:	f7f0 fca0 	bl	8000608 <__aeabi_dmul>
 800fcc8:	465c      	mov	r4, fp
 800fcca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fcce:	4642      	mov	r2, r8
 800fcd0:	464b      	mov	r3, r9
 800fcd2:	4620      	mov	r0, r4
 800fcd4:	4629      	mov	r1, r5
 800fcd6:	f7f0 fadf 	bl	8000298 <__aeabi_dsub>
 800fcda:	4602      	mov	r2, r0
 800fcdc:	460b      	mov	r3, r1
 800fcde:	4630      	mov	r0, r6
 800fce0:	4639      	mov	r1, r7
 800fce2:	f7f0 fad9 	bl	8000298 <__aeabi_dsub>
 800fce6:	a332      	add	r3, pc, #200	@ (adr r3, 800fdb0 <__ieee754_pow+0x768>)
 800fce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcec:	f7f0 fc8c 	bl	8000608 <__aeabi_dmul>
 800fcf0:	a331      	add	r3, pc, #196	@ (adr r3, 800fdb8 <__ieee754_pow+0x770>)
 800fcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcf6:	4606      	mov	r6, r0
 800fcf8:	460f      	mov	r7, r1
 800fcfa:	4620      	mov	r0, r4
 800fcfc:	4629      	mov	r1, r5
 800fcfe:	f7f0 fc83 	bl	8000608 <__aeabi_dmul>
 800fd02:	4602      	mov	r2, r0
 800fd04:	460b      	mov	r3, r1
 800fd06:	4630      	mov	r0, r6
 800fd08:	4639      	mov	r1, r7
 800fd0a:	f7f0 fac7 	bl	800029c <__adddf3>
 800fd0e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fd10:	4b32      	ldr	r3, [pc, #200]	@ (800fddc <__ieee754_pow+0x794>)
 800fd12:	4413      	add	r3, r2
 800fd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd18:	f7f0 fac0 	bl	800029c <__adddf3>
 800fd1c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fd20:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fd22:	f7f0 fc07 	bl	8000534 <__aeabi_i2d>
 800fd26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fd28:	4b2d      	ldr	r3, [pc, #180]	@ (800fde0 <__ieee754_pow+0x798>)
 800fd2a:	4413      	add	r3, r2
 800fd2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fd30:	4606      	mov	r6, r0
 800fd32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fd36:	460f      	mov	r7, r1
 800fd38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fd3c:	f7f0 faae 	bl	800029c <__adddf3>
 800fd40:	4642      	mov	r2, r8
 800fd42:	464b      	mov	r3, r9
 800fd44:	f7f0 faaa 	bl	800029c <__adddf3>
 800fd48:	4632      	mov	r2, r6
 800fd4a:	463b      	mov	r3, r7
 800fd4c:	f7f0 faa6 	bl	800029c <__adddf3>
 800fd50:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800fd54:	4632      	mov	r2, r6
 800fd56:	463b      	mov	r3, r7
 800fd58:	4658      	mov	r0, fp
 800fd5a:	460d      	mov	r5, r1
 800fd5c:	f7f0 fa9c 	bl	8000298 <__aeabi_dsub>
 800fd60:	4642      	mov	r2, r8
 800fd62:	464b      	mov	r3, r9
 800fd64:	f7f0 fa98 	bl	8000298 <__aeabi_dsub>
 800fd68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd6c:	f7f0 fa94 	bl	8000298 <__aeabi_dsub>
 800fd70:	465c      	mov	r4, fp
 800fd72:	4602      	mov	r2, r0
 800fd74:	e036      	b.n	800fde4 <__ieee754_pow+0x79c>
 800fd76:	bf00      	nop
 800fd78:	4a454eef 	.word	0x4a454eef
 800fd7c:	3fca7e28 	.word	0x3fca7e28
 800fd80:	93c9db65 	.word	0x93c9db65
 800fd84:	3fcd864a 	.word	0x3fcd864a
 800fd88:	a91d4101 	.word	0xa91d4101
 800fd8c:	3fd17460 	.word	0x3fd17460
 800fd90:	518f264d 	.word	0x518f264d
 800fd94:	3fd55555 	.word	0x3fd55555
 800fd98:	db6fabff 	.word	0xdb6fabff
 800fd9c:	3fdb6db6 	.word	0x3fdb6db6
 800fda0:	33333303 	.word	0x33333303
 800fda4:	3fe33333 	.word	0x3fe33333
 800fda8:	e0000000 	.word	0xe0000000
 800fdac:	3feec709 	.word	0x3feec709
 800fdb0:	dc3a03fd 	.word	0xdc3a03fd
 800fdb4:	3feec709 	.word	0x3feec709
 800fdb8:	145b01f5 	.word	0x145b01f5
 800fdbc:	be3e2fe0 	.word	0xbe3e2fe0
 800fdc0:	7ff00000 	.word	0x7ff00000
 800fdc4:	43400000 	.word	0x43400000
 800fdc8:	0003988e 	.word	0x0003988e
 800fdcc:	000bb679 	.word	0x000bb679
 800fdd0:	08010990 	.word	0x08010990
 800fdd4:	3ff00000 	.word	0x3ff00000
 800fdd8:	40080000 	.word	0x40080000
 800fddc:	08010970 	.word	0x08010970
 800fde0:	08010980 	.word	0x08010980
 800fde4:	460b      	mov	r3, r1
 800fde6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fdea:	e5d7      	b.n	800f99c <__ieee754_pow+0x354>
 800fdec:	f04f 0a01 	mov.w	sl, #1
 800fdf0:	e65e      	b.n	800fab0 <__ieee754_pow+0x468>
 800fdf2:	a3b4      	add	r3, pc, #720	@ (adr r3, 80100c4 <__ieee754_pow+0xa7c>)
 800fdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf8:	4630      	mov	r0, r6
 800fdfa:	4639      	mov	r1, r7
 800fdfc:	f7f0 fa4e 	bl	800029c <__adddf3>
 800fe00:	4642      	mov	r2, r8
 800fe02:	e9cd 0100 	strd	r0, r1, [sp]
 800fe06:	464b      	mov	r3, r9
 800fe08:	4620      	mov	r0, r4
 800fe0a:	4629      	mov	r1, r5
 800fe0c:	f7f0 fa44 	bl	8000298 <__aeabi_dsub>
 800fe10:	4602      	mov	r2, r0
 800fe12:	460b      	mov	r3, r1
 800fe14:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe18:	f7f0 fe86 	bl	8000b28 <__aeabi_dcmpgt>
 800fe1c:	2800      	cmp	r0, #0
 800fe1e:	f47f ae00 	bne.w	800fa22 <__ieee754_pow+0x3da>
 800fe22:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800fe26:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800fe2a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800fe2e:	fa43 fa0a 	asr.w	sl, r3, sl
 800fe32:	44da      	add	sl, fp
 800fe34:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800fe38:	489d      	ldr	r0, [pc, #628]	@ (80100b0 <__ieee754_pow+0xa68>)
 800fe3a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800fe3e:	4108      	asrs	r0, r1
 800fe40:	ea00 030a 	and.w	r3, r0, sl
 800fe44:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800fe48:	f1c1 0114 	rsb	r1, r1, #20
 800fe4c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800fe50:	fa4a fa01 	asr.w	sl, sl, r1
 800fe54:	f1bb 0f00 	cmp.w	fp, #0
 800fe58:	4640      	mov	r0, r8
 800fe5a:	4649      	mov	r1, r9
 800fe5c:	f04f 0200 	mov.w	r2, #0
 800fe60:	bfb8      	it	lt
 800fe62:	f1ca 0a00 	rsblt	sl, sl, #0
 800fe66:	f7f0 fa17 	bl	8000298 <__aeabi_dsub>
 800fe6a:	4680      	mov	r8, r0
 800fe6c:	4689      	mov	r9, r1
 800fe6e:	4632      	mov	r2, r6
 800fe70:	463b      	mov	r3, r7
 800fe72:	4640      	mov	r0, r8
 800fe74:	4649      	mov	r1, r9
 800fe76:	f7f0 fa11 	bl	800029c <__adddf3>
 800fe7a:	2400      	movs	r4, #0
 800fe7c:	a37c      	add	r3, pc, #496	@ (adr r3, 8010070 <__ieee754_pow+0xa28>)
 800fe7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe82:	4620      	mov	r0, r4
 800fe84:	460d      	mov	r5, r1
 800fe86:	f7f0 fbbf 	bl	8000608 <__aeabi_dmul>
 800fe8a:	4642      	mov	r2, r8
 800fe8c:	e9cd 0100 	strd	r0, r1, [sp]
 800fe90:	464b      	mov	r3, r9
 800fe92:	4620      	mov	r0, r4
 800fe94:	4629      	mov	r1, r5
 800fe96:	f7f0 f9ff 	bl	8000298 <__aeabi_dsub>
 800fe9a:	4602      	mov	r2, r0
 800fe9c:	460b      	mov	r3, r1
 800fe9e:	4630      	mov	r0, r6
 800fea0:	4639      	mov	r1, r7
 800fea2:	f7f0 f9f9 	bl	8000298 <__aeabi_dsub>
 800fea6:	a374      	add	r3, pc, #464	@ (adr r3, 8010078 <__ieee754_pow+0xa30>)
 800fea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feac:	f7f0 fbac 	bl	8000608 <__aeabi_dmul>
 800feb0:	a373      	add	r3, pc, #460	@ (adr r3, 8010080 <__ieee754_pow+0xa38>)
 800feb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb6:	4680      	mov	r8, r0
 800feb8:	4689      	mov	r9, r1
 800feba:	4620      	mov	r0, r4
 800febc:	4629      	mov	r1, r5
 800febe:	f7f0 fba3 	bl	8000608 <__aeabi_dmul>
 800fec2:	4602      	mov	r2, r0
 800fec4:	460b      	mov	r3, r1
 800fec6:	4640      	mov	r0, r8
 800fec8:	4649      	mov	r1, r9
 800feca:	f7f0 f9e7 	bl	800029c <__adddf3>
 800fece:	4604      	mov	r4, r0
 800fed0:	460d      	mov	r5, r1
 800fed2:	4602      	mov	r2, r0
 800fed4:	460b      	mov	r3, r1
 800fed6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800feda:	f7f0 f9df 	bl	800029c <__adddf3>
 800fede:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fee2:	4680      	mov	r8, r0
 800fee4:	4689      	mov	r9, r1
 800fee6:	f7f0 f9d7 	bl	8000298 <__aeabi_dsub>
 800feea:	4602      	mov	r2, r0
 800feec:	460b      	mov	r3, r1
 800feee:	4620      	mov	r0, r4
 800fef0:	4629      	mov	r1, r5
 800fef2:	f7f0 f9d1 	bl	8000298 <__aeabi_dsub>
 800fef6:	4642      	mov	r2, r8
 800fef8:	4606      	mov	r6, r0
 800fefa:	460f      	mov	r7, r1
 800fefc:	464b      	mov	r3, r9
 800fefe:	4640      	mov	r0, r8
 800ff00:	4649      	mov	r1, r9
 800ff02:	f7f0 fb81 	bl	8000608 <__aeabi_dmul>
 800ff06:	a360      	add	r3, pc, #384	@ (adr r3, 8010088 <__ieee754_pow+0xa40>)
 800ff08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff0c:	4604      	mov	r4, r0
 800ff0e:	460d      	mov	r5, r1
 800ff10:	f7f0 fb7a 	bl	8000608 <__aeabi_dmul>
 800ff14:	a35e      	add	r3, pc, #376	@ (adr r3, 8010090 <__ieee754_pow+0xa48>)
 800ff16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff1a:	f7f0 f9bd 	bl	8000298 <__aeabi_dsub>
 800ff1e:	4622      	mov	r2, r4
 800ff20:	462b      	mov	r3, r5
 800ff22:	f7f0 fb71 	bl	8000608 <__aeabi_dmul>
 800ff26:	a35c      	add	r3, pc, #368	@ (adr r3, 8010098 <__ieee754_pow+0xa50>)
 800ff28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff2c:	f7f0 f9b6 	bl	800029c <__adddf3>
 800ff30:	4622      	mov	r2, r4
 800ff32:	462b      	mov	r3, r5
 800ff34:	f7f0 fb68 	bl	8000608 <__aeabi_dmul>
 800ff38:	a359      	add	r3, pc, #356	@ (adr r3, 80100a0 <__ieee754_pow+0xa58>)
 800ff3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff3e:	f7f0 f9ab 	bl	8000298 <__aeabi_dsub>
 800ff42:	4622      	mov	r2, r4
 800ff44:	462b      	mov	r3, r5
 800ff46:	f7f0 fb5f 	bl	8000608 <__aeabi_dmul>
 800ff4a:	a357      	add	r3, pc, #348	@ (adr r3, 80100a8 <__ieee754_pow+0xa60>)
 800ff4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff50:	f7f0 f9a4 	bl	800029c <__adddf3>
 800ff54:	4622      	mov	r2, r4
 800ff56:	462b      	mov	r3, r5
 800ff58:	f7f0 fb56 	bl	8000608 <__aeabi_dmul>
 800ff5c:	4602      	mov	r2, r0
 800ff5e:	460b      	mov	r3, r1
 800ff60:	4640      	mov	r0, r8
 800ff62:	4649      	mov	r1, r9
 800ff64:	f7f0 f998 	bl	8000298 <__aeabi_dsub>
 800ff68:	4604      	mov	r4, r0
 800ff6a:	460d      	mov	r5, r1
 800ff6c:	4602      	mov	r2, r0
 800ff6e:	460b      	mov	r3, r1
 800ff70:	4640      	mov	r0, r8
 800ff72:	4649      	mov	r1, r9
 800ff74:	f7f0 fb48 	bl	8000608 <__aeabi_dmul>
 800ff78:	2200      	movs	r2, #0
 800ff7a:	e9cd 0100 	strd	r0, r1, [sp]
 800ff7e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ff82:	4620      	mov	r0, r4
 800ff84:	4629      	mov	r1, r5
 800ff86:	f7f0 f987 	bl	8000298 <__aeabi_dsub>
 800ff8a:	4602      	mov	r2, r0
 800ff8c:	460b      	mov	r3, r1
 800ff8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff92:	f7f0 fc63 	bl	800085c <__aeabi_ddiv>
 800ff96:	4632      	mov	r2, r6
 800ff98:	4604      	mov	r4, r0
 800ff9a:	460d      	mov	r5, r1
 800ff9c:	463b      	mov	r3, r7
 800ff9e:	4640      	mov	r0, r8
 800ffa0:	4649      	mov	r1, r9
 800ffa2:	f7f0 fb31 	bl	8000608 <__aeabi_dmul>
 800ffa6:	4632      	mov	r2, r6
 800ffa8:	463b      	mov	r3, r7
 800ffaa:	f7f0 f977 	bl	800029c <__adddf3>
 800ffae:	4602      	mov	r2, r0
 800ffb0:	460b      	mov	r3, r1
 800ffb2:	4620      	mov	r0, r4
 800ffb4:	4629      	mov	r1, r5
 800ffb6:	f7f0 f96f 	bl	8000298 <__aeabi_dsub>
 800ffba:	4642      	mov	r2, r8
 800ffbc:	464b      	mov	r3, r9
 800ffbe:	f7f0 f96b 	bl	8000298 <__aeabi_dsub>
 800ffc2:	460b      	mov	r3, r1
 800ffc4:	4602      	mov	r2, r0
 800ffc6:	493b      	ldr	r1, [pc, #236]	@ (80100b4 <__ieee754_pow+0xa6c>)
 800ffc8:	2000      	movs	r0, #0
 800ffca:	f7f0 f965 	bl	8000298 <__aeabi_dsub>
 800ffce:	ec41 0b10 	vmov	d0, r0, r1
 800ffd2:	ee10 3a90 	vmov	r3, s1
 800ffd6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ffda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ffde:	da30      	bge.n	8010042 <__ieee754_pow+0x9fa>
 800ffe0:	4650      	mov	r0, sl
 800ffe2:	f000 f87d 	bl	80100e0 <scalbn>
 800ffe6:	ec51 0b10 	vmov	r0, r1, d0
 800ffea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ffee:	f7ff bbd2 	b.w	800f796 <__ieee754_pow+0x14e>
 800fff2:	4c31      	ldr	r4, [pc, #196]	@ (80100b8 <__ieee754_pow+0xa70>)
 800fff4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fff8:	42a3      	cmp	r3, r4
 800fffa:	d91a      	bls.n	8010032 <__ieee754_pow+0x9ea>
 800fffc:	4b2f      	ldr	r3, [pc, #188]	@ (80100bc <__ieee754_pow+0xa74>)
 800fffe:	440b      	add	r3, r1
 8010000:	4303      	orrs	r3, r0
 8010002:	d009      	beq.n	8010018 <__ieee754_pow+0x9d0>
 8010004:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010008:	2200      	movs	r2, #0
 801000a:	2300      	movs	r3, #0
 801000c:	f7f0 fd6e 	bl	8000aec <__aeabi_dcmplt>
 8010010:	3800      	subs	r0, #0
 8010012:	bf18      	it	ne
 8010014:	2001      	movne	r0, #1
 8010016:	e42b      	b.n	800f870 <__ieee754_pow+0x228>
 8010018:	4642      	mov	r2, r8
 801001a:	464b      	mov	r3, r9
 801001c:	f7f0 f93c 	bl	8000298 <__aeabi_dsub>
 8010020:	4632      	mov	r2, r6
 8010022:	463b      	mov	r3, r7
 8010024:	f7f0 fd76 	bl	8000b14 <__aeabi_dcmpge>
 8010028:	2800      	cmp	r0, #0
 801002a:	d1eb      	bne.n	8010004 <__ieee754_pow+0x9bc>
 801002c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80100cc <__ieee754_pow+0xa84>
 8010030:	e6f7      	b.n	800fe22 <__ieee754_pow+0x7da>
 8010032:	469a      	mov	sl, r3
 8010034:	4b22      	ldr	r3, [pc, #136]	@ (80100c0 <__ieee754_pow+0xa78>)
 8010036:	459a      	cmp	sl, r3
 8010038:	f63f aef3 	bhi.w	800fe22 <__ieee754_pow+0x7da>
 801003c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8010040:	e715      	b.n	800fe6e <__ieee754_pow+0x826>
 8010042:	ec51 0b10 	vmov	r0, r1, d0
 8010046:	4619      	mov	r1, r3
 8010048:	e7cf      	b.n	800ffea <__ieee754_pow+0x9a2>
 801004a:	491a      	ldr	r1, [pc, #104]	@ (80100b4 <__ieee754_pow+0xa6c>)
 801004c:	2000      	movs	r0, #0
 801004e:	f7ff bb18 	b.w	800f682 <__ieee754_pow+0x3a>
 8010052:	2000      	movs	r0, #0
 8010054:	2100      	movs	r1, #0
 8010056:	f7ff bb14 	b.w	800f682 <__ieee754_pow+0x3a>
 801005a:	4630      	mov	r0, r6
 801005c:	4639      	mov	r1, r7
 801005e:	f7ff bb10 	b.w	800f682 <__ieee754_pow+0x3a>
 8010062:	460c      	mov	r4, r1
 8010064:	f7ff bb5e 	b.w	800f724 <__ieee754_pow+0xdc>
 8010068:	2400      	movs	r4, #0
 801006a:	f7ff bb49 	b.w	800f700 <__ieee754_pow+0xb8>
 801006e:	bf00      	nop
 8010070:	00000000 	.word	0x00000000
 8010074:	3fe62e43 	.word	0x3fe62e43
 8010078:	fefa39ef 	.word	0xfefa39ef
 801007c:	3fe62e42 	.word	0x3fe62e42
 8010080:	0ca86c39 	.word	0x0ca86c39
 8010084:	be205c61 	.word	0xbe205c61
 8010088:	72bea4d0 	.word	0x72bea4d0
 801008c:	3e663769 	.word	0x3e663769
 8010090:	c5d26bf1 	.word	0xc5d26bf1
 8010094:	3ebbbd41 	.word	0x3ebbbd41
 8010098:	af25de2c 	.word	0xaf25de2c
 801009c:	3f11566a 	.word	0x3f11566a
 80100a0:	16bebd93 	.word	0x16bebd93
 80100a4:	3f66c16c 	.word	0x3f66c16c
 80100a8:	5555553e 	.word	0x5555553e
 80100ac:	3fc55555 	.word	0x3fc55555
 80100b0:	fff00000 	.word	0xfff00000
 80100b4:	3ff00000 	.word	0x3ff00000
 80100b8:	4090cbff 	.word	0x4090cbff
 80100bc:	3f6f3400 	.word	0x3f6f3400
 80100c0:	3fe00000 	.word	0x3fe00000
 80100c4:	652b82fe 	.word	0x652b82fe
 80100c8:	3c971547 	.word	0x3c971547
 80100cc:	4090cc00 	.word	0x4090cc00

080100d0 <fabs>:
 80100d0:	ec51 0b10 	vmov	r0, r1, d0
 80100d4:	4602      	mov	r2, r0
 80100d6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80100da:	ec43 2b10 	vmov	d0, r2, r3
 80100de:	4770      	bx	lr

080100e0 <scalbn>:
 80100e0:	b570      	push	{r4, r5, r6, lr}
 80100e2:	ec55 4b10 	vmov	r4, r5, d0
 80100e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80100ea:	4606      	mov	r6, r0
 80100ec:	462b      	mov	r3, r5
 80100ee:	b991      	cbnz	r1, 8010116 <scalbn+0x36>
 80100f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80100f4:	4323      	orrs	r3, r4
 80100f6:	d03d      	beq.n	8010174 <scalbn+0x94>
 80100f8:	4b35      	ldr	r3, [pc, #212]	@ (80101d0 <scalbn+0xf0>)
 80100fa:	4620      	mov	r0, r4
 80100fc:	4629      	mov	r1, r5
 80100fe:	2200      	movs	r2, #0
 8010100:	f7f0 fa82 	bl	8000608 <__aeabi_dmul>
 8010104:	4b33      	ldr	r3, [pc, #204]	@ (80101d4 <scalbn+0xf4>)
 8010106:	429e      	cmp	r6, r3
 8010108:	4604      	mov	r4, r0
 801010a:	460d      	mov	r5, r1
 801010c:	da0f      	bge.n	801012e <scalbn+0x4e>
 801010e:	a328      	add	r3, pc, #160	@ (adr r3, 80101b0 <scalbn+0xd0>)
 8010110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010114:	e01e      	b.n	8010154 <scalbn+0x74>
 8010116:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801011a:	4291      	cmp	r1, r2
 801011c:	d10b      	bne.n	8010136 <scalbn+0x56>
 801011e:	4622      	mov	r2, r4
 8010120:	4620      	mov	r0, r4
 8010122:	4629      	mov	r1, r5
 8010124:	f7f0 f8ba 	bl	800029c <__adddf3>
 8010128:	4604      	mov	r4, r0
 801012a:	460d      	mov	r5, r1
 801012c:	e022      	b.n	8010174 <scalbn+0x94>
 801012e:	460b      	mov	r3, r1
 8010130:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010134:	3936      	subs	r1, #54	@ 0x36
 8010136:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801013a:	4296      	cmp	r6, r2
 801013c:	dd0d      	ble.n	801015a <scalbn+0x7a>
 801013e:	2d00      	cmp	r5, #0
 8010140:	a11d      	add	r1, pc, #116	@ (adr r1, 80101b8 <scalbn+0xd8>)
 8010142:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010146:	da02      	bge.n	801014e <scalbn+0x6e>
 8010148:	a11d      	add	r1, pc, #116	@ (adr r1, 80101c0 <scalbn+0xe0>)
 801014a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801014e:	a31a      	add	r3, pc, #104	@ (adr r3, 80101b8 <scalbn+0xd8>)
 8010150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010154:	f7f0 fa58 	bl	8000608 <__aeabi_dmul>
 8010158:	e7e6      	b.n	8010128 <scalbn+0x48>
 801015a:	1872      	adds	r2, r6, r1
 801015c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8010160:	428a      	cmp	r2, r1
 8010162:	dcec      	bgt.n	801013e <scalbn+0x5e>
 8010164:	2a00      	cmp	r2, #0
 8010166:	dd08      	ble.n	801017a <scalbn+0x9a>
 8010168:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801016c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010170:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010174:	ec45 4b10 	vmov	d0, r4, r5
 8010178:	bd70      	pop	{r4, r5, r6, pc}
 801017a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801017e:	da08      	bge.n	8010192 <scalbn+0xb2>
 8010180:	2d00      	cmp	r5, #0
 8010182:	a10b      	add	r1, pc, #44	@ (adr r1, 80101b0 <scalbn+0xd0>)
 8010184:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010188:	dac1      	bge.n	801010e <scalbn+0x2e>
 801018a:	a10f      	add	r1, pc, #60	@ (adr r1, 80101c8 <scalbn+0xe8>)
 801018c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010190:	e7bd      	b.n	801010e <scalbn+0x2e>
 8010192:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010196:	3236      	adds	r2, #54	@ 0x36
 8010198:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801019c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80101a0:	4620      	mov	r0, r4
 80101a2:	4b0d      	ldr	r3, [pc, #52]	@ (80101d8 <scalbn+0xf8>)
 80101a4:	4629      	mov	r1, r5
 80101a6:	2200      	movs	r2, #0
 80101a8:	e7d4      	b.n	8010154 <scalbn+0x74>
 80101aa:	bf00      	nop
 80101ac:	f3af 8000 	nop.w
 80101b0:	c2f8f359 	.word	0xc2f8f359
 80101b4:	01a56e1f 	.word	0x01a56e1f
 80101b8:	8800759c 	.word	0x8800759c
 80101bc:	7e37e43c 	.word	0x7e37e43c
 80101c0:	8800759c 	.word	0x8800759c
 80101c4:	fe37e43c 	.word	0xfe37e43c
 80101c8:	c2f8f359 	.word	0xc2f8f359
 80101cc:	81a56e1f 	.word	0x81a56e1f
 80101d0:	43500000 	.word	0x43500000
 80101d4:	ffff3cb0 	.word	0xffff3cb0
 80101d8:	3c900000 	.word	0x3c900000

080101dc <with_errno>:
 80101dc:	b510      	push	{r4, lr}
 80101de:	ed2d 8b02 	vpush	{d8}
 80101e2:	eeb0 8a40 	vmov.f32	s16, s0
 80101e6:	eef0 8a60 	vmov.f32	s17, s1
 80101ea:	4604      	mov	r4, r0
 80101ec:	f7fc f8d8 	bl	800c3a0 <__errno>
 80101f0:	eeb0 0a48 	vmov.f32	s0, s16
 80101f4:	eef0 0a68 	vmov.f32	s1, s17
 80101f8:	ecbd 8b02 	vpop	{d8}
 80101fc:	6004      	str	r4, [r0, #0]
 80101fe:	bd10      	pop	{r4, pc}

08010200 <xflow>:
 8010200:	4603      	mov	r3, r0
 8010202:	b507      	push	{r0, r1, r2, lr}
 8010204:	ec51 0b10 	vmov	r0, r1, d0
 8010208:	b183      	cbz	r3, 801022c <xflow+0x2c>
 801020a:	4602      	mov	r2, r0
 801020c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010210:	e9cd 2300 	strd	r2, r3, [sp]
 8010214:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010218:	f7f0 f9f6 	bl	8000608 <__aeabi_dmul>
 801021c:	ec41 0b10 	vmov	d0, r0, r1
 8010220:	2022      	movs	r0, #34	@ 0x22
 8010222:	b003      	add	sp, #12
 8010224:	f85d eb04 	ldr.w	lr, [sp], #4
 8010228:	f7ff bfd8 	b.w	80101dc <with_errno>
 801022c:	4602      	mov	r2, r0
 801022e:	460b      	mov	r3, r1
 8010230:	e7ee      	b.n	8010210 <xflow+0x10>
 8010232:	0000      	movs	r0, r0
 8010234:	0000      	movs	r0, r0
	...

08010238 <__math_uflow>:
 8010238:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010240 <__math_uflow+0x8>
 801023c:	f7ff bfe0 	b.w	8010200 <xflow>
 8010240:	00000000 	.word	0x00000000
 8010244:	10000000 	.word	0x10000000

08010248 <__math_oflow>:
 8010248:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010250 <__math_oflow+0x8>
 801024c:	f7ff bfd8 	b.w	8010200 <xflow>
 8010250:	00000000 	.word	0x00000000
 8010254:	70000000 	.word	0x70000000

08010258 <__ieee754_sqrt>:
 8010258:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801025c:	4a68      	ldr	r2, [pc, #416]	@ (8010400 <__ieee754_sqrt+0x1a8>)
 801025e:	ec55 4b10 	vmov	r4, r5, d0
 8010262:	43aa      	bics	r2, r5
 8010264:	462b      	mov	r3, r5
 8010266:	4621      	mov	r1, r4
 8010268:	d110      	bne.n	801028c <__ieee754_sqrt+0x34>
 801026a:	4622      	mov	r2, r4
 801026c:	4620      	mov	r0, r4
 801026e:	4629      	mov	r1, r5
 8010270:	f7f0 f9ca 	bl	8000608 <__aeabi_dmul>
 8010274:	4602      	mov	r2, r0
 8010276:	460b      	mov	r3, r1
 8010278:	4620      	mov	r0, r4
 801027a:	4629      	mov	r1, r5
 801027c:	f7f0 f80e 	bl	800029c <__adddf3>
 8010280:	4604      	mov	r4, r0
 8010282:	460d      	mov	r5, r1
 8010284:	ec45 4b10 	vmov	d0, r4, r5
 8010288:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801028c:	2d00      	cmp	r5, #0
 801028e:	dc0e      	bgt.n	80102ae <__ieee754_sqrt+0x56>
 8010290:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8010294:	4322      	orrs	r2, r4
 8010296:	d0f5      	beq.n	8010284 <__ieee754_sqrt+0x2c>
 8010298:	b19d      	cbz	r5, 80102c2 <__ieee754_sqrt+0x6a>
 801029a:	4622      	mov	r2, r4
 801029c:	4620      	mov	r0, r4
 801029e:	4629      	mov	r1, r5
 80102a0:	f7ef fffa 	bl	8000298 <__aeabi_dsub>
 80102a4:	4602      	mov	r2, r0
 80102a6:	460b      	mov	r3, r1
 80102a8:	f7f0 fad8 	bl	800085c <__aeabi_ddiv>
 80102ac:	e7e8      	b.n	8010280 <__ieee754_sqrt+0x28>
 80102ae:	152a      	asrs	r2, r5, #20
 80102b0:	d115      	bne.n	80102de <__ieee754_sqrt+0x86>
 80102b2:	2000      	movs	r0, #0
 80102b4:	e009      	b.n	80102ca <__ieee754_sqrt+0x72>
 80102b6:	0acb      	lsrs	r3, r1, #11
 80102b8:	3a15      	subs	r2, #21
 80102ba:	0549      	lsls	r1, r1, #21
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d0fa      	beq.n	80102b6 <__ieee754_sqrt+0x5e>
 80102c0:	e7f7      	b.n	80102b2 <__ieee754_sqrt+0x5a>
 80102c2:	462a      	mov	r2, r5
 80102c4:	e7fa      	b.n	80102bc <__ieee754_sqrt+0x64>
 80102c6:	005b      	lsls	r3, r3, #1
 80102c8:	3001      	adds	r0, #1
 80102ca:	02dc      	lsls	r4, r3, #11
 80102cc:	d5fb      	bpl.n	80102c6 <__ieee754_sqrt+0x6e>
 80102ce:	1e44      	subs	r4, r0, #1
 80102d0:	1b12      	subs	r2, r2, r4
 80102d2:	f1c0 0420 	rsb	r4, r0, #32
 80102d6:	fa21 f404 	lsr.w	r4, r1, r4
 80102da:	4323      	orrs	r3, r4
 80102dc:	4081      	lsls	r1, r0
 80102de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80102e2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80102e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80102ea:	07d2      	lsls	r2, r2, #31
 80102ec:	bf5c      	itt	pl
 80102ee:	005b      	lslpl	r3, r3, #1
 80102f0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80102f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80102f8:	bf58      	it	pl
 80102fa:	0049      	lslpl	r1, r1, #1
 80102fc:	2600      	movs	r6, #0
 80102fe:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8010302:	106d      	asrs	r5, r5, #1
 8010304:	0049      	lsls	r1, r1, #1
 8010306:	2016      	movs	r0, #22
 8010308:	4632      	mov	r2, r6
 801030a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801030e:	1917      	adds	r7, r2, r4
 8010310:	429f      	cmp	r7, r3
 8010312:	bfde      	ittt	le
 8010314:	193a      	addle	r2, r7, r4
 8010316:	1bdb      	suble	r3, r3, r7
 8010318:	1936      	addle	r6, r6, r4
 801031a:	0fcf      	lsrs	r7, r1, #31
 801031c:	3801      	subs	r0, #1
 801031e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8010322:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010326:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801032a:	d1f0      	bne.n	801030e <__ieee754_sqrt+0xb6>
 801032c:	4604      	mov	r4, r0
 801032e:	2720      	movs	r7, #32
 8010330:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8010334:	429a      	cmp	r2, r3
 8010336:	eb00 0e0c 	add.w	lr, r0, ip
 801033a:	db02      	blt.n	8010342 <__ieee754_sqrt+0xea>
 801033c:	d113      	bne.n	8010366 <__ieee754_sqrt+0x10e>
 801033e:	458e      	cmp	lr, r1
 8010340:	d811      	bhi.n	8010366 <__ieee754_sqrt+0x10e>
 8010342:	f1be 0f00 	cmp.w	lr, #0
 8010346:	eb0e 000c 	add.w	r0, lr, ip
 801034a:	da42      	bge.n	80103d2 <__ieee754_sqrt+0x17a>
 801034c:	2800      	cmp	r0, #0
 801034e:	db40      	blt.n	80103d2 <__ieee754_sqrt+0x17a>
 8010350:	f102 0801 	add.w	r8, r2, #1
 8010354:	1a9b      	subs	r3, r3, r2
 8010356:	458e      	cmp	lr, r1
 8010358:	bf88      	it	hi
 801035a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801035e:	eba1 010e 	sub.w	r1, r1, lr
 8010362:	4464      	add	r4, ip
 8010364:	4642      	mov	r2, r8
 8010366:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801036a:	3f01      	subs	r7, #1
 801036c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8010370:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010374:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8010378:	d1dc      	bne.n	8010334 <__ieee754_sqrt+0xdc>
 801037a:	4319      	orrs	r1, r3
 801037c:	d01b      	beq.n	80103b6 <__ieee754_sqrt+0x15e>
 801037e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8010404 <__ieee754_sqrt+0x1ac>
 8010382:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8010408 <__ieee754_sqrt+0x1b0>
 8010386:	e9da 0100 	ldrd	r0, r1, [sl]
 801038a:	e9db 2300 	ldrd	r2, r3, [fp]
 801038e:	f7ef ff83 	bl	8000298 <__aeabi_dsub>
 8010392:	e9da 8900 	ldrd	r8, r9, [sl]
 8010396:	4602      	mov	r2, r0
 8010398:	460b      	mov	r3, r1
 801039a:	4640      	mov	r0, r8
 801039c:	4649      	mov	r1, r9
 801039e:	f7f0 fbaf 	bl	8000b00 <__aeabi_dcmple>
 80103a2:	b140      	cbz	r0, 80103b6 <__ieee754_sqrt+0x15e>
 80103a4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80103a8:	e9da 0100 	ldrd	r0, r1, [sl]
 80103ac:	e9db 2300 	ldrd	r2, r3, [fp]
 80103b0:	d111      	bne.n	80103d6 <__ieee754_sqrt+0x17e>
 80103b2:	3601      	adds	r6, #1
 80103b4:	463c      	mov	r4, r7
 80103b6:	1072      	asrs	r2, r6, #1
 80103b8:	0863      	lsrs	r3, r4, #1
 80103ba:	07f1      	lsls	r1, r6, #31
 80103bc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80103c0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80103c4:	bf48      	it	mi
 80103c6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80103ca:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80103ce:	4618      	mov	r0, r3
 80103d0:	e756      	b.n	8010280 <__ieee754_sqrt+0x28>
 80103d2:	4690      	mov	r8, r2
 80103d4:	e7be      	b.n	8010354 <__ieee754_sqrt+0xfc>
 80103d6:	f7ef ff61 	bl	800029c <__adddf3>
 80103da:	e9da 8900 	ldrd	r8, r9, [sl]
 80103de:	4602      	mov	r2, r0
 80103e0:	460b      	mov	r3, r1
 80103e2:	4640      	mov	r0, r8
 80103e4:	4649      	mov	r1, r9
 80103e6:	f7f0 fb81 	bl	8000aec <__aeabi_dcmplt>
 80103ea:	b120      	cbz	r0, 80103f6 <__ieee754_sqrt+0x19e>
 80103ec:	1ca0      	adds	r0, r4, #2
 80103ee:	bf08      	it	eq
 80103f0:	3601      	addeq	r6, #1
 80103f2:	3402      	adds	r4, #2
 80103f4:	e7df      	b.n	80103b6 <__ieee754_sqrt+0x15e>
 80103f6:	1c63      	adds	r3, r4, #1
 80103f8:	f023 0401 	bic.w	r4, r3, #1
 80103fc:	e7db      	b.n	80103b6 <__ieee754_sqrt+0x15e>
 80103fe:	bf00      	nop
 8010400:	7ff00000 	.word	0x7ff00000
 8010404:	200001e0 	.word	0x200001e0
 8010408:	200001d8 	.word	0x200001d8

0801040c <_init>:
 801040c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801040e:	bf00      	nop
 8010410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010412:	bc08      	pop	{r3}
 8010414:	469e      	mov	lr, r3
 8010416:	4770      	bx	lr

08010418 <_fini>:
 8010418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801041a:	bf00      	nop
 801041c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801041e:	bc08      	pop	{r3}
 8010420:	469e      	mov	lr, r3
 8010422:	4770      	bx	lr
